[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the cpp-httplib library, supporting multiple HTTP methods (GET, PUT, DELETE, POST) and handling JSON request/response data.\n\nFunction Description: The function `APIRequest` performs HTTP requests to a specified URL using the given HTTP method. It supports sending JSON data in the request and parsing JSON data from the response. The function checks the HTTP status code and only processes the response body if the status indicates success (2xx).\n\nInput:\n- `method` (std::string): The HTTP method to use (e.g., \"GET\", \"PUT\", \"DELETE\", \"POST\").\n- `location` (std::string): The server address (e.g., \"example.com\").\n- `URI` (std::string): The URI path for the request (e.g., \"/api/data\").\n- `request_data` (json*, optional): Pointer to a JSON object containing the data to send with the request (used for PUT requests).\n- `response_data` (json*, optional): Pointer to a JSON object where the response data will be stored if the request is successful.\n\nOutput:\n- Returns a `long` value representing the HTTP status code of the response.\n- If the request is successful (status code 2xx) and `response_data` is provided, the response body is parsed into the `response_data` JSON object.",
    "Canonical_solution": "#include \"httplib.h\"\n#include <string>\n#include \"json.hpp\"\nusing json = nlohmann::json;\n\nlong APIRequest(std::string method, std::string location, std::string URI, json* request_data = nullptr, json* response_data = nullptr)\n{\n    const std::string url(\"http://\" + location);\n    httplib::Client client(url.c_str());\n    int             status  = 0;\n    std::string     body    = \"\";\n\n    if(method == \"GET\")\n    {\n        httplib::Result result = client.Get(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"PUT\")\n    {\n        if(request_data)\n        {\n            httplib::Result result = client.Put(URI.c_str(), request_data->dump(), \"application/json\");\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n        else\n        {\n            httplib::Result result = client.Put(URI.c_str());\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n    }\n    else if(method == \"DELETE\")\n    {\n        httplib::Result result = client.Delete(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"POST\")\n    {\n        httplib::Result result = client.Post(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n\n    if((status / 100) == 2)\n    {\n        if(response_data)\n        {\n            *response_data = json::parse(body);\n        }\n    }\n\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 147,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n    std::string body;\n\n    if (request_data) {\n        body = request_data->dump();\n    }\n\n    long status_code = 0;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res) {\n            status_code = res->status;\n            if (status_code >= 200 && status_code < 300 && response_data) {\n                *response_data = json::parse(res->body);\n            }\n        }\n    } else if (method == \"PUT\") {\n        auto res = cli.Put(URI.c_str(), body, headers);\n        if (res) {\n            status_code = res->status;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str(), headers);\n        if (res) {\n            status_code = res->status;\n        }\n    } else if (method == \"POST\") {\n        auto res = cli.Post(URI.c_str(), body, headers);\n        if (res) {\n            status_code = res->status;\n            if (status_code >= 200 && status_code < 300 && response_data) {\n                *response_data = json::parse(res->body);\n            }\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n    std::string req_body = request_data ? request_data->dump() : \"\";\n\n    long status_code = 0;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"PUT\") {\n        auto res = cli.Put(URI.c_str(), req_body, headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\") {\n        auto res = cli.Post(URI.c_str(), req_body, headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers;\n    headers[\"Content-Type\"] = \"application/json\";\n\n    long status_code = 0;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\" || method == \"PUT\") {\n        std::string body = request_data ? request_data->dump() : \"{}\";\n        auto res = method == \"POST\" ? cli.Post(URI.c_str(), body, headers) : cli.Put(URI.c_str(), body, headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers;\n    headers[\"Content-Type\"] = \"application/json\";\n\n    long status_code = 0;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\" || method == \"PUT\") {\n        std::string body = request_data ? request_data->dump() : \"{}\";\n        auto res = method == \"POST\" ? cli.Post(URI.c_str(), body, headers) : cli.Put(URI.c_str(), body, headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n    std::string req_body = request_data ? request_data->dump(4) : \"\";\n\n    long status = -1;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        status = res ? res->status : -1;\n        if (status >= 200 && status < 300 && response_data) {\n            *response_data = json::parse(res->body);\n        }\n    } else if (method == \"POST\") {\n        auto res = cli.Post(URI.c_str(), req_body, \"application/json\");\n        status = res ? res->status : -1;\n        if (status >= 200 && status < 300 && response_data) {\n            *response_data = json::parse(res->body);\n        }\n    } else if (method == \"PUT\") {\n        auto res = cli.Put(URI.c_str(), req_body, \"application/json\");\n        status = res ? res->status : -1;\n        if (status >= 200 && status < 300 && response_data) {\n            *response_data = json::parse(res->body);\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str());\n        status = res ? res->status : -1;\n        if (status >= 200 && status < 300 && response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n    std::string body;\n\n    if (request_data != nullptr) {\n        body = request_data->dump();\n    }\n\n    long status_code = 0;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res) {\n            status_code = res->status;\n            if (status_code >= 200 && status_code < 300 && response_data != nullptr) {\n                *response_data = json::parse(res->body);\n            }\n        }\n    } else if (method == \"POST\") {\n        auto res = cli.Post(URI.c_str(), body, \"application/json\");\n        if (res) {\n            status_code = res->status;\n            if (status_code >= 200 && status_code < 300 && response_data != nullptr) {\n                *response_data = json::parse(res->body);\n            }\n        }\n    } else if (method == \"PUT\") {\n        auto res = cli.Put(URI.c_str(), body, \"application/json\");\n        if (res) {\n            status_code = res->status;\n            if (status_code >= 200 && status_code < 300 && response_data != nullptr) {\n                *response_data = json::parse(res->body);\n            }\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str(), headers);\n        if (res) {\n            status_code = res->status;\n            if (status_code >= 200 && status_code < 300 && response_data != nullptr) {\n                *response_data = json::parse(res->body);\n            }\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    long status_code = -1;\n\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str());\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\" || method == \"PUT\") {\n        std::string req_body = request_data ? request_data->dump() : \"{}\";\n        auto res = method == \"POST\" ? cli.Post(URI.c_str(), req_body, \"application/json\") : cli.Put(URI.c_str(), req_body, \"application/json\");\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str());\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    long status_code = -1;\n\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str());\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"PUT\" && request_data) {\n        auto res = cli.Put(URI.c_str(), request_data->dump(), \"application/json\");\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str());\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\" && request_data) {\n        auto res = cli.Post(URI.c_str(), request_data->dump(), \"application/json\");\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers;\n    headers[\"Content-Type\"] = \"application/json\";\n\n    long status_code = -1;\n\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"PUT\" && request_data) {\n        auto res = cli.Put(URI.c_str(), request_data->dump().c_str(), request_data->dump().size(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\" && request_data) {\n        auto res = cli.Post(URI.c_str(), request_data->dump().c_str(), request_data->dump().size(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n\n    long status_code = 0;\n    if (method == \"GET\") {\n        auto res = cli.Get(URI.c_str(), headers);\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"POST\" || method == \"PUT\") {\n        std::string body = request_data ? request_data->dump() : \"{}\";\n        auto res = method == \"POST\" ? cli.Post(URI.c_str(), body, \"application/json\") : cli.Put(URI.c_str(), body, \"application/json\");\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    } else if (method == \"DELETE\") {\n        auto res = cli.Delete(URI.c_str());\n        if (res && res->status / 100 == 2) {\n            status_code = res->status;\n        } else {\n            status_code = res ? res->status : -1;\n        }\n    }\n\n    return status_code;\n}\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two functions that together implement a basic TCP client. The first function creates and connects the socket, while the second handles the communication loop with the server.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n- tcp_client_communication:\n  - No return value (void), but prints server responses and error messages to console",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[1024];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        if (recv(sockfd, buffer, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and managing a TCP client connection. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving messages.\n\nInput:\n- createAndConnectTCPSocket:\n  - ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n\n- tcpClientCommunication:\n  - sockfd: int - The socket file descriptor returned by createAndConnectTCPSocket\n\nOutput:\n- createAndConnectTCPSocket:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n\n- tcpClientCommunication:\n  - No return value (void), but performs I/O operations until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sockfd, buffer, strlen(buffer), 0);\n        std::cout << \"Message sent\" << std::endl;\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        if (recv(sockfd, buffer, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        if (read(sockfd, buffer, 1024) < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sockfd, buffer, strlen(buffer), 0);\n        std::cout << \"Message sent\" << std::endl;\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the current implementation, but could be parameterized)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)\n\nNote: The function handles socket creation, connection establishment, data transmission, and proper cleanup (socket closing) in case of errors or normal termination.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received == -1) {\n            std::cerr << \"Failed to receive message\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Connection closed by server\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received == -1) {\n            std::cerr << \"Failed to receive message\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation failed\");\n        return;\n    }\n\n    // Set server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return;\n    }\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Receive response from server\n        int valread = read(client_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Connection closed or error\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        perror(\"Socket creation failed\");\n        return;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sock, buffer, strlen(buffer), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sock, buffer, strlen(buffer), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sock, buffer, strlen(buffer), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation failed\");\n        return;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    server_address.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, std::string(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            if (bytes_received == 0) {\n                std::cout << \"Server disconnected\" << std::endl;\n            } else {\n                perror(\"Receive failed\");\n            }\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    server_address.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        ssize_t valread = read(client_socket, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(client_socket);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a TCP client function in C++ that establishes a connection to a server, sends and receives messages, and maintains the connection until terminated by the user.\n\nFunction Description: The function `create_tcp_client` initializes a TCP client that connects to a specified server IP address. It creates a socket, establishes a connection, and provides interactive communication where the user can send messages to the server and receive responses. The function handles basic error cases and properly closes the connection when done.\n\nInput: \n- `server_ip`: [const char*] - The IP address of the server to connect to in string format (e.g., \"127.0.0.1\")\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any error occurs during socket creation or connection establishment. The function runs indefinitely until manually terminated by the user.\n\nNote: The function uses a default port 6666 for the connection. Error messages are printed to stderr using `perror` for debugging purposes. The communication loop continues until the program is interrupted, allowing continuous message exchange between client and server.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n\n#define DEFAULT_PORT 6666\n\nint create_tcp_client(const char* server_ip) {\n    int connfd = 0;\n    struct sockaddr_in client;\n    \n    client.sin_family = AF_INET;\n    client.sin_port = htons(DEFAULT_PORT);\n    client.sin_addr.s_addr = inet_addr(server_ip);\n    \n    connfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(connfd < 0){\n        perror(\"socket\");\n        return -1;\n    }\n    \n    if(connect(connfd, (struct sockaddr *)&client, sizeof(client)) < 0){\n        perror(\"connect\");\n        close(connfd);\n        return -1;\n    }\n    \n    char buff[1024];\n    bzero(buff, sizeof(buff));\n    recv(connfd, buff, 1024, 0);\n    printf(\"recv : %s \\n\", buff);\n    \n    bzero(buff, sizeof(buff));\n    strcpy(buff, \"this is client \\n\");\n    send(connfd, buff, 1024, 0);\n    \n    while(1){\n        bzero(buff, sizeof(buff));\n        scanf(\"%s\", buff);\n        int p = strlen(buff);\n        buff[p] = '\\0';\n        send(connfd, buff, 1024, 0);\n        printf(\"i have send buff \\n\");\n    }\n    \n    close(connfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666); // Default port\n\n    // Convert IP address from string to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check if user wants to exit\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Creating socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Assigning IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if(inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    // Connecting to the server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to terminate.\\n\";\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        // Check if user wants to exit\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            perror(\"read failed\");\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Closing the connected socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        close(sock);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address structure\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666); // Default port\n\n    // Convert IP address from string to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to quit.\\n\";\n\n    char buffer[1024];\n    while (true) {\n        // Get user input\n        std::cout << \"Client: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Check if user wants to exit\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << buffer << std::endl;\n        } else {\n            perror(\"Failed to receive data\");\n            break;\n        }\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        // Get user input\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        close(sock);\n        return -1;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address structure\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to quit.\\n\";\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check if user wants to exit\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address structure\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check if user wants to exit\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t valread = read(client_socket, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int client_socket;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    // Set up server address\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666); // Default port\n\n    // Convert IP address from string to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return -1;\n    }\n\n    std::cout << \"Connected to the server. Type 'exit' to quit.\" << std::endl;\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check if user wants to exit\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a C++ class that handles HTTP communication over TCP and UDP protocols, including sending requests and receiving responses from a server.\n\nClass Description: The LinHttpHandler class provides functionality for sending HTTP requests and receiving responses using both TCP (for standard HTTP communication) and UDP (for multicast communication). It includes error handling and resource management through RAII.\n\nAttributes:\n\nSocketCloser: [Nested Class] - A helper class that ensures sockets are properly closed when they go out of scope.\n\nMethods:\n\nsend: [Name](const std::string& msg, const std::string& adr, int port) -> std::string - Sends an HTTP message to the specified address and port using TCP and returns the server's response. Throws system_error on failure.\n\nsendMulticast: [Name](const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) -> std::vector<std::string> - Sends a multicast message using UDP and collects responses within the specified timeout period. Returns a vector of response strings. Throws system_error on failure.\n\nSocketCloser: [Name](int sockFd) -> None - Constructor that takes a socket file descriptor. The destructor automatically closes the socket.",
    "Canonical_solution": "#include <arpa/inet.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <stdexcept>\n#include <system_error>\n#include <vector>\n\nnamespace hueplusplus\n{\nclass LinHttpHandler\n{\npublic:\n    std::string send(const std::string& msg, const std::string& adr, int port) const\n    {\n        int socketFD = socket(AF_INET, SOCK_STREAM, 0);\n\n        SocketCloser closeMySocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to open socket\"));\n        }\n\n        hostent* server = gethostbyname(adr.c_str());\n        if (server == NULL)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: gethostbyname\"));\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        memcpy(&server_addr.sin_addr.s_addr, server->h_addr, server->h_length);\n\n        if (connect(socketFD, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to connect socket\"));\n        }\n\n        size_t total = msg.length();\n        size_t sent = 0;\n        do\n        {\n            ssize_t bytes = write(socketFD, msg.c_str() + sent, total - sent);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to write message to socket\"));\n            }\n            sent += bytes;\n        } while (sent < total);\n\n        std::string response;\n        char buffer[128] = {};\n        do\n        {\n            ssize_t bytes = read(socketFD, buffer, 127);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to read response from socket\"));\n            }\n            response.append(buffer, bytes);\n        } while (true);\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(\n        const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) const\n    {\n        hostent* server;\n        sockaddr_in server_addr;\n\n        memset((char*)&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        server = gethostbyname(adr.c_str());\n        if (!server)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to obtain address of host\"));\n        }\n\n        memcpy((void*)&server_addr.sin_addr, server->h_addr_list[0], server->h_length);\n\n        int socketFD = socket(AF_INET, SOCK_DGRAM, 0);\n        SocketCloser closeMySendSocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to open socket\"));\n        }\n\n        if (sendto(socketFD, msg.c_str(), strlen(msg.c_str()), 0, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to send message\"));\n        }\n\n        std::string response;\n        char buffer[2048] = {};\n\n        std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - start < timeout)\n        {\n            ssize_t bytesReceived = recv(socketFD, &buffer, 2048, MSG_DONTWAIT);\n            if (bytesReceived < 0 && errno != EAGAIN && errno != EWOULDBLOCK)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to read response from socket\"));\n            }\n            if (bytesReceived > 0)\n            {\n                response.append(buffer, bytesReceived);\n            }\n        }\n\n        std::vector<std::string> returnString;\n        size_t pos = response.find(\"\\r\\n\\r\\n\");\n        size_t prevpos = 0;\n        while (pos != std::string::npos)\n        {\n            returnString.push_back(response.substr(prevpos, pos - prevpos));\n            pos += 4;\n            prevpos = pos;\n            pos = response.find(\"\\r\\n\\r\\n\", pos);\n        }\n        return returnString;\n    }\n\nprivate:\n    class SocketCloser\n    {\n    public:\n        explicit SocketCloser(int sockFd) : s(sockFd) {}\n        ~SocketCloser() { close(s); }\n\n    private:\n        int s;\n    };\n};\n} // namespace hueplusplus",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        char buffer[4096] = {0};\n        int valread = read(sock, buffer, 4095);\n        if (valread < 0) {\n            throw std::system_error(errno, std::system_category(), \"Read failed\");\n        }\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int broadcastEnable = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastEnable, sizeof(broadcastEnable)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set broadcast option\");\n        }\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096] = {0};\n            sockaddr_in clientAddr;\n            socklen_t addrLen = sizeof(clientAddr);\n            int valread = recvfrom(sock, buffer, 4095, 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (valread > 0) {\n                responses.push_back(std::string(buffer));\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        struct sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &server_addr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        char buffer[4096] = {0};\n        int valread = read(sock, buffer, 4095);\n        if (valread < 0) {\n            throw std::system_error(errno, std::system_category(), \"Read failed\");\n        }\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set TTL\");\n        }\n\n        struct sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &server_addr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto start = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - start < timeout) {\n            char buffer[4096] = {0};\n            socklen_t addr_len = sizeof(server_addr);\n            int valread = recvfrom(sock, buffer, 4095, 0, (struct sockaddr *)&server_addr, &addr_len);\n            if (valread < 0) {\n                break; // No more data or error\n            }\n            responses.emplace_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <chrono>\n#include <thread>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() { close(sockFd); }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        SocketCloser closer(sock);\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr);\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1)\n            throw std::system_error(errno, std::system_category(), \"Failed to connect\");\n\n        if (send(sock, msg.c_str(), msg.size(), 0) == -1)\n            throw std::system_error(errno, std::system_category(), \"Failed to send data\");\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead == -1)\n            throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        SocketCloser closer(sock);\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) == -1)\n            throw std::system_error(errno, std::system_category(), \"Failed to set multicast TTL\");\n\n        struct sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr);\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) == -1)\n            throw std::system_error(errno, std::system_category(), \"Failed to send multicast data\");\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096];\n            ssize_t bytesRead = recvfrom(sock, buffer, sizeof(buffer) - 1, 0, nullptr, nullptr);\n            if (bytesRead == -1 && errno != EAGAIN && errno != EWOULDBLOCK)\n                throw std::system_error(errno, std::system_category(), \"Failed to receive multicast data\");\n\n            if (bytesRead > 0) {\n                buffer[bytesRead] = '\\0';\n                responses.push_back(std::string(buffer));\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(10));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr);\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to connect\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to send data\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n        }\n        buffer[bytesRead] = '\\0';\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set TTL\");\n        }\n\n        sockaddr_in multicastAddr;\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr);\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to send multicast data\");\n        }\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096];\n            sockaddr_in senderAddr;\n            socklen_t senderLen = sizeof(senderAddr);\n            ssize_t bytesRead = recvfrom(sock, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&senderAddr, &senderLen);\n            if (bytesRead == -1) {\n                throw std::system_error(errno, std::system_category(), \"Failed to receive multicast data\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        struct sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        char buffer[4096] = {0};\n        int valread = read(sock, buffer, 4095);\n        if (valread < 0) {\n            throw std::system_error(errno, std::system_category(), \"Read failed\");\n        }\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set TTL\");\n        }\n\n        struct sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096] = {0};\n            struct sockaddr_in clientAddr;\n            socklen_t addrLen = sizeof(clientAddr);\n            int valread = recvfrom(sock, buffer, 4095, 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (valread < 0) {\n                break; // No more data to read\n            }\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n#include <cstring>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr);\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to connect\");\n        }\n\n        SocketCloser closer(sock);\n\n        if (send(sock, msg.c_str(), msg.size(), 0) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to send data\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n        }\n\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) == -1) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to set multicast TTL\");\n        }\n\n        sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr);\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) == -1) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to send multicast data\");\n        }\n\n        SocketCloser closer(sock);\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096];\n            sockaddr_in senderAddr;\n            socklen_t senderLen = sizeof(senderAddr);\n            ssize_t bytesRead = recvfrom(sock, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&senderAddr, &senderLen);\n            if (bytesRead == -1) {\n                if (errno != EAGAIN && errno != EWOULDBLOCK) {\n                    throw std::system_error(errno, std::system_category(), \"Failed to receive multicast data\");\n                }\n                break;\n            }\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <stdexcept>\n#include <chrono>\n#include <thread>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        char buffer[4096] = {0};\n        int valread = read(sock, buffer, 4095);\n        if (valread < 0) {\n            throw std::system_error(errno, std::system_category(), \"Read failed\");\n        }\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int broadcastEnable = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastEnable, sizeof(broadcastEnable)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Setsockopt failed\");\n        }\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        fd_set readfds;\n        FD_ZERO(&readfds);\n        FD_SET(sock, &readfds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int activity = select(sock + 1, &readfds, NULL, NULL, &tv);\n        if ((activity < 0) && (errno != EINTR)) {\n            throw std::system_error(errno, std::system_category(), \"Select failed\");\n        } else if (activity > 0) {\n            char buffer[4096] = {0};\n            int valread = recvfrom(sock, buffer, 4095, 0, NULL, NULL);\n            if (valread < 0) {\n                throw std::system_error(errno, std::system_category(), \"Recvfrom failed\");\n            }\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <chrono>\n#include <thread>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr);\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to connect\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to send data\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n        }\n        buffer[bytesRead] = '\\0';\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set TTL\");\n        }\n\n        sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr);\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to send multicast data\");\n        }\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096];\n            sockaddr_in senderAddr;\n            socklen_t senderLen = sizeof(senderAddr);\n            ssize_t bytesRead = recvfrom(sock, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&senderAddr, &senderLen);\n            if (bytesRead == -1) {\n                throw std::system_error(errno, std::system_category(), \"Failed to receive multicast data\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n#include <cstring>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Send failed\");\n        }\n\n        char buffer[4096] = {0};\n        int valread = read(sock, buffer, 4095);\n        if (valread < 0) {\n            throw std::system_error(errno, std::system_category(), \"Read failed\");\n        }\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        int broadcastEnable = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastEnable, sizeof(broadcastEnable)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set broadcast option\");\n        }\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096] = {0};\n            struct sockaddr_in clientAddr;\n            socklen_t addrLen = sizeof(clientAddr);\n            int valread = recvfrom(sock, buffer, 4095, 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (valread < 0) {\n                throw std::system_error(errno, std::system_category(), \"Recvfrom failed\");\n            }\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <chrono>\n#include <thread>\n#include <system_error>\n#include <cstring>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr);\n\n        if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to connect\");\n        }\n\n        SocketCloser closer(sock);\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to send data\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n        }\n        buffer[bytesRead] = '\\0';\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock < 0) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        int ttl = 1;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to set TTL\");\n        }\n\n        struct sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr);\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to send multicast data\");\n        }\n\n        SocketCloser closer(sock);\n\n        std::vector<std::string> responses;\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - startTime < timeout) {\n            char buffer[4096];\n            ssize_t bytesRead = recvfrom(sock, buffer, sizeof(buffer) - 1, 0, nullptr, nullptr);\n            if (bytesRead < 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) continue;\n                throw std::system_error(errno, std::system_category(), \"Failed to receive multicast data\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends a single character, receives a response, and then closes the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server address and port, sends a predefined character ('A') to the server, reads the server's response, prints the received character, and finally closes the socket. This demonstrates basic TCP client functionality using BSD sockets.\n\nInput: None (The server address and port are hardcoded as 127.0.0.1:9736 in the function)\n\nOutput: \n- Returns 0 on successful execution\n- Prints the received character from the server\n- Exits with error code 1 if connection fails",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint tcp_client_communication()\n{\n    int sockfd = -1;\n    int len = 0;\n    struct sockaddr_in address;\n    int result;\n    char ch = 'A';\n    \n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    address.sin_port = htons(9736);\n    len = sizeof(address);\n    \n    result = connect(sockfd, (struct sockaddr*)&address, len);\n\n    if(result == -1)\n    {\n        perror(\"ops:client\\n\");\n        exit(1);\n    }\n    \n    write(sockfd, &ch, 1);\n    read(sockfd, &ch, 1);\n    printf(\"char form server = %c\\n\", ch);\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return 1;\n    }\n\n    char send_char = 'A';\n    if (send(sock, &send_char, 1, 0) == -1) {\n        std::cerr << \"Failed to send data\" << std::endl;\n        close(sock);\n        return 1;\n    }\n\n    char recv_char;\n    if (recv(sock, &recv_char, 1, 0) == -1) {\n        std::cerr << \"Failed to receive data\" << std::endl;\n        close(sock);\n        return 1;\n    }\n\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Send data\n    char send_char = 'A';\n    send(client_socket, &send_char, sizeof(send_char), 0);\n\n    // Receive response\n    char receive_char;\n    recv(client_socket, &receive_char, sizeof(receive_char), 0);\n    std::cout << \"Received: \" << receive_char << std::endl;\n\n    // Close socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    char recv_char;\n    recv(sock, &recv_char, 1, 0);\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Send data\n    char send_data = 'A';\n    if (send(client_socket, &send_data, sizeof(send_data), 0) == -1) {\n        std::cerr << \"Failed to send data\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Receive data\n    char receive_data;\n    if (recv(client_socket, &receive_data, sizeof(receive_data), 0) == -1) {\n        std::cerr << \"Failed to receive data\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Print received data\n    std::cout << \"Received data: \" << receive_data << std::endl;\n\n    // Close socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Send data\n    char send_char = 'A';\n    if (send(client_socket, &send_char, 1, 0) == -1) {\n        std::cerr << \"Failed to send data\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Receive data\n    char receive_char;\n    if (recv(client_socket, &receive_char, 1, 0) == -1) {\n        std::cerr << \"Failed to receive data\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Print received character\n    std::cout << \"Received character: \" << receive_char << std::endl;\n\n    // Close socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    // Set up the server address structure\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Send a character to the server\n    char send_char = 'A';\n    if (send(client_socket, &send_char, 1, 0) == -1) {\n        std::cerr << \"Failed to send data\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Receive a character from the server\n    char receive_char;\n    if (recv(client_socket, &receive_char, 1, 0) == -1) {\n        std::cerr << \"Failed to receive data\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Print the received character\n    std::cout << \"Received character: \" << receive_char << std::endl;\n\n    // Close the socket\n    close(client_socket);\n\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    char recv_char;\n    ssize_t bytes_received = recv(sock, &recv_char, 1, 0);\n    if (bytes_received > 0) {\n        std::cout << \"Received from server: \" << recv_char << std::endl;\n    } else {\n        std::cerr << \"Failed to receive data from server\" << std::endl;\n        close(sock);\n        return 1;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char send_data = 'A';\n    char recv_data;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Send data\n    send(client_socket, &send_data, sizeof(send_data), 0);\n\n    // Receive data\n    recv(client_socket, &recv_data, sizeof(recv_data), 0);\n    std::cout << \"Received: \" << recv_data << std::endl;\n\n    // Close socket\n    close(client_socket);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return 1;\n    }\n\n    // Set up the server address structure\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(client_socket);\n        return 1;\n    }\n\n    // Send a character to the server\n    char send_char = 'A';\n    send(client_socket, &send_char, sizeof(send_char), 0);\n\n    // Receive a response from the server\n    char receive_char;\n    recv(client_socket, &receive_char, sizeof(receive_char), 0);\n    std::cout << \"Received character: \" << receive_char << std::endl;\n\n    // Close the socket\n    close(client_socket);\n\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char *hello = \"A\";\n\n    // Create socket file descriptor\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if(inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"\\nInvalid address/ Address not supported \\n\" << std::endl;\n        return 1;\n    }\n\n    // Connect to the server\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"\\nConnection Failed \\n\" << std::endl;\n        return 1;\n    }\n\n    // Send data to the server\n    send(sock, hello, strlen(hello), 0);\n    std::cout << \"Hello message sent\\n\";\n\n    // Read response from the server\n    read(sock, buffer, 1024);\n    std::cout << \"Received: \" << buffer[0] << std::endl;\n\n    // Close the socket\n    close(sock);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send data, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and communicating with a TCP client. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving data.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor on success, -1 on failure\n- tcp_client_communication:\n  - No return value (void), but performs continuous communication until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        if (read(sockfd, buffer, 1024) < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        if (read(sockfd, buffer, 1024) < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        if (read(sockfd, buffer, 1024) < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        if (read(sockfd, buffer, 1024) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, 1024);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Implement a TCP client socket class in C++ that handles connection establishment, data transmission, and connection management with a remote server, supporting both IPv4 and IPv6 protocols.\n\nClass Description: The ClientSocket class provides TCP client functionality with support for both IPv4 and IPv6 connections. It handles socket creation, connection establishment with timeout support, send buffer configuration, and connection cleanup. The class is designed to work within a multi-threaded context and supports encryption parameters.\n\nAttributes:\n- dest_: std::string - Destination hostname or IP address to connect to\n- threadCtx_: ThreadCtx& - Reference to thread context containing configuration options\n- sa_: struct addrinfo - Address information structure for socket configuration\n- socket_: std::unique_ptr<WdtSocket> - Smart pointer to the underlying socket implementation\n- peerIp_: std::string - IP address of the connected peer\n\nMethods:\n- Constructor: ClientSocket(ThreadCtx& threadCtx, const string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) -> void - Initializes the client socket with destination, port, and encryption parameters\n- connect: connect() -> ErrorCode - Establishes connection to the remote server with timeout handling, returns connection status\n- getPeerIp: getPeerIp() -> const std::string& - Returns the IP address of the connected peer\n- setSendBufferSize: setSendBufferSize() -> void - Configures the socket's send buffer size based on thread context options\n- closeConnection: closeConnection() -> void [private] - Closes the active socket connection",
    "Canonical_solution": "#include <fcntl.h>\n#include <folly/Conv.h>\n#include <folly/ScopeGuard.h>\n#include <glog/logging.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <wdt/Reporting.h>\n#include <wdt/util/ClientSocket.h>\n\nnamespace facebook {\nnamespace wdt {\n\nusing std::string;\n\nclass ClientSocket {\npublic:\n  ClientSocket(ThreadCtx &threadCtx, const string &dest,\n               const int port,\n               const EncryptionParams &encryptionParams,\n               int64_t ivChangeInterval)\n      : dest_(dest), threadCtx_(threadCtx) {\n    memset(&sa_, 0, sizeof(sa_));\n    socket_ = std::make_unique<WdtSocket>(threadCtx, port, encryptionParams,\n                                          ivChangeInterval, nullptr);\n    if (threadCtx_.getOptions().ipv6) {\n      sa_.ai_family = AF_INET6;\n    }\n    if (threadCtx_.getOptions().ipv4) {\n      sa_.ai_family = AF_INET;\n    }\n    sa_.ai_socktype = SOCK_STREAM;\n  }\n\n  ErrorCode connect() {\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    WDT_CHECK(fd < 0) << \"Previous connection not closed \" << fd << \" \" << port;\n    \n    struct addrinfo *infoList = nullptr;\n    auto guard = folly::makeGuard([&] {\n      if (infoList) {\n        freeaddrinfo(infoList);\n      }\n    });\n    \n    string portStr = folly::to<string>(port);\n    int res = getaddrinfo(dest_.c_str(), portStr.c_str(), &sa_, &infoList);\n    if (res) {\n      WLOG(ERROR) << \"Failed getaddrinfo \" << dest_ << \" , \" << port << \" : \"\n                  << res << \" : \" << gai_strerror(res);\n      return CONN_ERROR;\n    }\n    \n    int count = 0;\n    for (struct addrinfo *info = infoList; info != nullptr;\n         info = info->ai_next) {\n      ++count;\n      std::string host, port_2;\n      WdtSocket::getNameInfo(info->ai_addr, info->ai_addrlen, host, port_2);\n      WVLOG(2) << \"will connect to \" << host << \" \" << port_2;\n      \n      fd = socket(info->ai_family, info->ai_socktype, info->ai_protocol);\n      if (fd == -1) {\n        WPLOG(WARNING) << \"Error making socket for port_2 \" << port_2;\n        continue;\n      }\n      \n      socket_->setFd(fd);\n      setSendBufferSize();\n\n      int sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg |= O_NONBLOCK;\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res < 0) {\n        WPLOG(ERROR) << \"Failed to make the socket non-blocking \" << port_2\n                     << \" sock \" << sockArg << \" res \" << res;\n        closeConnection();\n        continue;\n      }\n\n      if (::connect(fd, info->ai_addr, info->ai_addrlen) != 0) {\n        if (errno != EINPROGRESS) {\n          WPLOG(INFO) << \"Error connecting on \" << host << \" \" << port_2;\n          closeConnection();\n          continue;\n        }\n        \n        auto startTime = Clock::now();\n        int connectTimeout = threadCtx_.getOptions().connect_timeout_millis;\n\n        while (true) {\n          if (threadCtx_.getAbortChecker()->shouldAbort()) {\n            WLOG(ERROR) << \"Transfer aborted during connect \" << port_2 << \" \"\n                        << fd;\n            closeConnection();\n            return ABORT;\n          }\n          \n          int timeElapsed = durationMillis(Clock::now() - startTime);\n          if (timeElapsed >= connectTimeout) {\n            WVLOG(1) << \"connect() timed out\" << host << \" \" << port_2;\n            closeConnection();\n            return CONN_ERROR_RETRYABLE;\n          }\n          \n          int pollTimeout =\n              std::min(connectTimeout - timeElapsed,\n                       threadCtx_.getOptions().abort_check_interval_millis);\n          struct pollfd pollFds[] = {{fd, POLLOUT, 0}};\n\n          if ((res = poll(pollFds, 1, pollTimeout)) <= 0) {\n            if (errno == EINTR) {\n              WVLOG(1) << \"poll() call interrupted. retrying... \" << port_2;\n              continue;\n            }\n            if (res == 0) {\n              WVLOG(1) << \"poll() timed out \" << host << \" \" << port_2;\n              continue;\n            }\n            WPLOG(ERROR) << \"poll() failed \" << host << \" \" << port_2 << \" \"\n                         << fd;\n            closeConnection();\n            return CONN_ERROR;\n          }\n          break;\n        }\n\n        int connectResult;\n        socklen_t len = sizeof(connectResult);\n        if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &connectResult, &len) < 0) {\n          WPLOG(WARNING) << \"getsockopt() failed\";\n          closeConnection();\n          continue;\n        }\n        if (connectResult != 0) {\n          WLOG(WARNING) << \"connect did not succeed on \" << host << \" \" << port_2\n                        << \" : \" << strerrorStr(connectResult);\n          closeConnection();\n          continue;\n        }\n      }\n\n      sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg &= (~O_NONBLOCK);\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res == -1) {\n        WPLOG(ERROR) << \"Could not make the socket blocking \" << port_2;\n        closeConnection();\n        continue;\n      }\n      \n      WVLOG(1) << \"Successful connect on \" << fd;\n      peerIp_ = host;\n      sa_ = *info;\n      break;\n    }\n    \n    if (socket_->getFd() < 0) {\n      if (count > 1) {\n        WLOG(INFO) << \"Unable to connect to either of the \" << count << \" addrs\";\n      }\n      return CONN_ERROR_RETRYABLE;\n    }\n    \n    socket_->setSocketTimeouts();\n    socket_->setDscp(threadCtx_.getOptions().dscp);\n    return OK;\n  }\n\n  const std::string &getPeerIp() const {\n    return peerIp_;\n  }\n\n  void setSendBufferSize() {\n    int bufSize = threadCtx_.getOptions().send_buffer_size;\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    if (bufSize <= 0) {\n      return;\n    }\n    int status =\n        ::setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &bufSize, sizeof(bufSize));\n    if (status != 0) {\n      WPLOG(ERROR) << \"Failed to set send buffer \" << port << \" size \" << bufSize\n                   << \" fd \" << fd;\n      return;\n    }\n    WVLOG(1) << \"Send buffer size set to \" << bufSize << \" port \" << port;\n  }\n\nprivate:\n  std::string dest_;\n  ThreadCtx &threadCtx_;\n  struct addrinfo sa_;\n  std::unique_ptr<WdtSocket> socket_;\n  std::string peerIp_;\n\n  void closeConnection() {\n    socket_->close();\n  }\n};\n\n}  // namespace wdt\n}  // namespace facebook",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd_(-1) {}\n    ~TcpSocket() override { close(); }\n\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        if (sockfd_ == -1) {\n            sockfd_ = ::socket(addr->sa_family, SOCK_STREAM, 0);\n            if (sockfd_ == -1) {\n                return -1;\n            }\n        }\n        return ::connect(sockfd_, addr, addrlen);\n    }\n\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd_, buf, len, flags);\n    }\n\n    void close() override {\n        if (sockfd_ != -1) {\n            ::close(sockfd_);\n            sockfd_ = -1;\n        }\n    }\n\nprivate:\n    int sockfd_;\n};\n\nstruct ThreadCtx {\n    int sendBufferSize;\n    // Other configuration options\n};\n\nstruct EncryptionParams {\n    // Encryption parameters\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    Timeout,\n    // Other error codes\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), sa_{}, socket_(std::make_unique<TcpSocket>()) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n\n        std::string portStr = std::to_string(port);\n        int status = getaddrinfo(dest.c_str(), portStr.c_str(), &sa_, &res_);\n        if (status != 0) {\n            std::cerr << \"getaddrinfo error: \" << gai_strerror(status) << std::endl;\n            return;\n        }\n    }\n\n    ~ClientSocket() {\n        freeaddrinfo(res_);\n    }\n\n    ErrorCode connect() {\n        struct addrinfo* p;\n        for (p = res_; p != nullptr; p = p->ai_next) {\n            if (socket_->connect(p->ai_addr, p->ai_addrlen) == 0) {\n                getPeerIp();\n                setSendBufferSize();\n                return ErrorCode::Success;\n            }\n        }\n        return ErrorCode::ConnectionFailed;\n    }\n\n    const std::string& getPeerIp() {\n        char ipstr[INET6_ADDRSTRLEN];\n        void* addr;\n        if (res_->ai_family == AF_INET) {\n            struct sockaddr_in* ipv4 = (struct sockaddr_in*)res_->ai_addr;\n            addr = &(ipv4->sin_addr);\n        } else {\n            struct sockaddr_in6* ipv6 = (struct sockaddr_in6*)res_->ai_addr;\n            addr = &(ipv6->sin6_addr);\n        }\n        inet_ntop(res_->ai_family, addr, ipstr, sizeof(ipstr));\n        peerIp_ = ipstr;\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(socket_->connect(nullptr, 0), SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) == -1) {\n            std::cerr << \"Error setting send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_->close();\n    }\n\n    ThreadCtx& threadCtx_;\n    std::string dest_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n    struct addrinfo* res_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd(-1) {}\n    ~TcpSocket() override { close(); }\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n    void close() override {\n        if (sockfd != -1) {\n            ::close(sockfd);\n            sockfd = -1;\n        }\n    }\n\nprivate:\n    int sockfd;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\npublic:\n    int64_t ivChangeInterval;\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    CONNECTION_FAILED,\n    TIMEOUT,\n    SEND_BUFFER_ERROR\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n        socket_ = std::make_unique<TcpSocket>();\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC; // AF_INET or AF_INET6 to force version\n        hints.ai_socktype = SOCK_STREAM;\n\n        int status = getaddrinfo(dest_.c_str(), nullptr, &hints, &res);\n        if (status != 0) {\n            std::cerr << \"getaddrinfo error: \" << gai_strerror(status) << std::endl;\n            return ErrorCode::CONNECTION_FAILED;\n        }\n\n        struct addrinfo* p;\n        for (p = res; p != nullptr; p = p->ai_next) {\n            if ((socket_->connect(p->ai_addr, p->ai_addrlen)) == -1) {\n                continue;\n            }\n            break;\n        }\n\n        freeaddrinfo(res);\n\n        if (p == nullptr) {\n            std::cerr << \"Failed to connect to \" << dest_ << std::endl;\n            return ErrorCode::CONNECTION_FAILED;\n        }\n\n        char ipstr[INET6_ADDRSTRLEN];\n        inet_ntop(p->ai_family, get_in_addr((struct sockaddr*)p->ai_addr), ipstr, sizeof(ipstr));\n        peerIp_ = ipstr;\n\n        setSendBufferSize();\n\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(socket_->connect(nullptr, 0), SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) == -1) {\n            std::cerr << \"Error setting send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_->close();\n    }\n\n    static void* get_in_addr(struct sockaddr* sa) {\n        if (sa->sa_family == AF_INET) {\n            return &(((struct sockaddr_in*)sa)->sin_addr);\n        }\n        return &(((struct sockaddr_in6*)sa)->sin6_addr);\n    }\n\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n    EncryptionParams encryptionParams_;\n    int64_t ivChangeInterval_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd_(-1) {}\n    ~TcpSocket() override { close(); }\n\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd_, addr, addrlen);\n    }\n\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd_, buf, len, flags);\n    }\n\n    void close() override {\n        if (sockfd_ != -1) {\n            ::close(sockfd_);\n            sockfd_ = -1;\n        }\n    }\n\nprivate:\n    int sockfd_;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\npublic:\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    Timeout,\n    SendBufferError\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), sa_{}, socket_(std::make_unique<TcpSocket>()) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints = sa_;\n        struct addrinfo* res = nullptr;\n        int status = getaddrinfo(dest_.c_str(), nullptr, &hints, &res);\n        if (status != 0) {\n            return ErrorCode::ConnectionFailed;\n        }\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            ((struct sockaddr_in*)p->ai_addr)->sin_port = htons(port);\n            if (socket_->connect(p->ai_addr, p->ai_addrlen) == 0) {\n                freeaddrinfo(res);\n                setSendBufferSize();\n                return ErrorCode::Success;\n            }\n        }\n\n        freeaddrinfo(res);\n        return ErrorCode::ConnectionFailed;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) != 0) {\n            // Handle error\n        }\n    }\n\n    void closeConnection() {\n        socket_->close();\n    }\n\nprivate:\n    ThreadCtx& threadCtx_;\n    std::string dest_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd(-1) {}\n    ~TcpSocket() override { close(); }\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n    void close() override {\n        if (sockfd != -1) {\n            ::close(sockfd);\n            sockfd = -1;\n        }\n    }\n\nprivate:\n    int sockfd;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    Timeout,\n    SendBufferError\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), sa_{}, socket_(std::make_unique<TcpSocket>()), peerIp_() {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints = sa_;\n        struct addrinfo* res;\n        int status = getaddrinfo(dest_.c_str(), nullptr, &hints, &res);\n        if (status != 0) {\n            std::cerr << \"getaddrinfo error: \" << gai_strerror(status) << std::endl;\n            return ErrorCode::ConnectionFailed;\n        }\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            if ((socket_->connect(p->ai_addr, p->ai_addrlen)) == -1) {\n                continue;\n            }\n            peerIp_ = dest_; // Simplified for demonstration\n            freeaddrinfo(res);\n            return ErrorCode::Success;\n        }\n\n        freeaddrinfo(res);\n        return ErrorCode::ConnectionFailed;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(socket_->sockfd, SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) == -1) {\n            std::cerr << \"Failed to set send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_->close();\n    }\n\n    ThreadCtx& threadCtx_;\n    std::string dest_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd_(-1) {}\n    ~TcpSocket() override { close(); }\n\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        if (sockfd_ == -1) {\n            sockfd_ = ::socket(addr->sa_family, SOCK_STREAM, 0);\n            if (sockfd_ == -1) {\n                return -1;\n            }\n        }\n        return ::connect(sockfd_, addr, addrlen);\n    }\n\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd_, buf, len, flags);\n    }\n\n    void close() override {\n        if (sockfd_ != -1) {\n            ::close(sockfd_);\n            sockfd_ = -1;\n        }\n    }\n\nprivate:\n    int sockfd_;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other configuration options...\n};\n\nclass EncryptionParams {\n    // Encryption parameters...\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    SendBufferConfigFailed,\n    CloseFailed\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), sa_{}, socket_(std::make_unique<TcpSocket>()), peerIp_() {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints = sa_;\n        struct addrinfo* res = nullptr;\n        int status = getaddrinfo(dest_.c_str(), nullptr, &hints, &res);\n        if (status != 0) {\n            return ErrorCode::ConnectionFailed;\n        }\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            ((struct sockaddr_in*)p->ai_addr)->sin_port = htons(port);\n            if (socket_->connect(p->ai_addr, p->ai_addrlen) == 0) {\n                char ipstr[INET6_ADDRSTRLEN];\n                inet_ntop(p->ai_family, get_in_addr((struct sockaddr*)p->ai_addr), ipstr, sizeof(ipstr));\n                peerIp_ = ipstr;\n                freeaddrinfo(res);\n                return ErrorCode::Success;\n            }\n        }\n\n        freeaddrinfo(res);\n        return ErrorCode::ConnectionFailed;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (setsockopt(socket_->get(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize)) == -1) {\n            // Handle error\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_->close();\n    }\n\n    static void* get_in_addr(struct sockaddr* sa) {\n        if (sa->sa_family == AF_INET) {\n            return &(((struct sockaddr_in*)sa)->sin_addr);\n        }\n        return &(((struct sockaddr_in6*)sa)->sin6_addr);\n    }\n\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd(-1) {}\n    ~TcpSocket() override { close(); }\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n    void close() override {\n        if (sockfd != -1) {\n            ::close(sockfd);\n            sockfd = -1;\n        }\n    }\n\nprivate:\n    int sockfd;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\npublic:\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    SendBufferConfigFailed,\n    Timeout\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), sa_(), socket_(std::make_unique<TcpSocket>()), peerIp_() {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints = sa_;\n        struct addrinfo* res = nullptr;\n        int status = getaddrinfo(dest_.c_str(), nullptr, &hints, &res);\n        if (status != 0) {\n            std::cerr << \"getaddrinfo error: \" << gai_strerror(status) << std::endl;\n            return ErrorCode::ConnectionFailed;\n        }\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            ((struct sockaddr_in*)p->ai_addr)->sin_port = htons(port);\n            if (socket_->connect(p->ai_addr, p->ai_addrlen) == 0) {\n                char ipstr[INET6_ADDRSTRLEN];\n                inet_ntop(p->ai_family, get_in_addr((struct sockaddr*)p->ai_addr), ipstr, sizeof(ipstr));\n                peerIp_ = ipstr;\n                freeaddrinfo(res);\n                return ErrorCode::Success;\n            }\n        }\n\n        freeaddrinfo(res);\n        return ErrorCode::ConnectionFailed;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) == -1) {\n            std::cerr << \"Error setting send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_->close();\n    }\n\n    static void* get_in_addr(struct sockaddr* sa) {\n        if (sa->sa_family == AF_INET) {\n            return &(((struct sockaddr_in*)sa)->sin_addr);\n        }\n        return &(((struct sockaddr_in6*)sa)->sin6_addr);\n    }\n\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd(-1) {}\n    ~TcpSocket() override { close(); }\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n    void close() override {\n        if (sockfd != -1) {\n            ::close(sockfd);\n            sockfd = -1;\n        }\n    }\n\nprivate:\n    int sockfd;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\npublic:\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    SendBufferConfigFailed,\n    Timeout\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), sa_(), socket_(std::make_unique<TcpSocket>()), peerIp_() {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints = sa_;\n        struct addrinfo* res;\n        int status = getaddrinfo(dest_.c_str(), nullptr, &hints, &res);\n        if (status != 0) {\n            return ErrorCode::ConnectionFailed;\n        }\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            ((struct sockaddr_in*)p->ai_addr)->sin_port = htons(port);\n            if (socket_->connect(p->ai_addr, p->ai_addrlen) == 0) {\n                peerIp_ = inet_ntoa(((struct sockaddr_in*)p->ai_addr)->sin_addr);\n                break;\n            }\n        }\n        freeaddrinfo(res);\n        if (peerIp_.empty()) {\n            return ErrorCode::ConnectionFailed;\n        }\n        return ErrorCode::Success;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) != 0) {\n            std::cerr << \"Failed to set send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_->close();\n    }\n\n    ThreadCtx& threadCtx_;\n    std::string dest_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other configuration options...\n};\n\nclass EncryptionParams {\n    // Encryption parameters...\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    CONNECTION_FAILED,\n    TIMEOUT,\n    BUFFER_CONFIG_FAILED,\n    UNKNOWN_ERROR\n};\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual int close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\nprivate:\n    int sockfd;\npublic:\n    TcpSocket() : sockfd(-1) {}\n    ~TcpSocket() override { if (sockfd != -1) close(); }\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n    int close() override {\n        return ::close(sockfd);\n    }\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            socket_->close();\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : dest_(dest), threadCtx_(threadCtx), socket_(std::make_unique<TcpSocket>()) {\n        // Initialize addrinfo structure...\n    }\n\n    ErrorCode connect() {\n        // Establish connection with timeout handling...\n        return ErrorCode::SUCCESS; // Placeholder\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure socket's send buffer size...\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    Success,\n    ConnectionFailed,\n    Timeout,\n    SendBufferConfigFailed\n};\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\nprivate:\n    int sockfd;\n\npublic:\n    TcpSocket() : sockfd(-1) {}\n\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n\n    void close() override {\n        if (sockfd != -1) {\n            ::close(sockfd);\n            sockfd = -1;\n        }\n    }\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            socket_->close();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : dest_(dest), threadCtx_(threadCtx), socket_(std::make_unique<TcpSocket>()) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC; // Support both IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n\n        char service[6];\n        snprintf(service, sizeof(service), \"%d\", port);\n\n        int status = getaddrinfo(dest.c_str(), service, &sa_, &sa_.ai_next);\n        if (status != 0) {\n            throw std::runtime_error(\"getaddrinfo error\");\n        }\n    }\n\n    ErrorCode connect() {\n        struct addrinfo* p;\n        for (p = sa_.ai_next; p != nullptr; p = p->ai_next) {\n            socket_->close();\n            sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            int flags = fcntl(sockfd, F_GETFL, 0);\n            fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n            int result = socket_->connect(p->ai_addr, p->ai_addrlen);\n            if (result == 0 || (result == -1 && errno == EINPROGRESS)) {\n                fd_set writefds;\n                FD_ZERO(&writefds);\n                FD_SET(sockfd, &writefds);\n\n                struct timeval timeout;\n                timeout.tv_sec = 5; // 5 seconds timeout\n                timeout.tv_usec = 0;\n\n                if (select(sockfd + 1, nullptr, &writefds, nullptr, &timeout) > 0) {\n                    int so_error;\n                    socklen_t len = sizeof(so_error);\n                    getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n                    if (so_error == 0) {\n                        peerIp_ = dest_; // Simplified for demonstration\n                        return ErrorCode::Success;\n                    }\n                }\n            }\n            closeConnection();\n        }\n        return ErrorCode::ConnectionFailed;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        int bufferSize = threadCtx_.sendBufferSize;\n        if (setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize)) == -1) {\n            std::cerr << \"Failed to set send buffer size\" << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    virtual ~WdtSocket() = default;\n    virtual int connect(const struct sockaddr* addr, socklen_t addrlen) = 0;\n    virtual ssize_t send(const void* buf, size_t len, int flags) = 0;\n    virtual void close() = 0;\n};\n\nclass TcpSocket : public WdtSocket {\npublic:\n    TcpSocket() : sockfd(-1) {}\n    ~TcpSocket() override { close(); }\n\n    int connect(const struct sockaddr* addr, socklen_t addrlen) override {\n        return ::connect(sockfd, addr, addrlen);\n    }\n\n    ssize_t send(const void* buf, size_t len, int flags) override {\n        return ::send(sockfd, buf, len, flags);\n    }\n\n    void close() override {\n        if (sockfd != -1) {\n            ::close(sockfd);\n            sockfd = -1;\n        }\n    }\n\nprivate:\n    int sockfd;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), peerIp_(\"\") {\n        memset(&sa_, 0, sizeof(sa_));\n        // Initialize socket and other attributes\n    }\n\n    ErrorCode connect() {\n        // Establish connection with timeout handling\n        return ErrorCode::SUCCESS; // Placeholder\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        if (socket_) {\n            socket_->close();\n        }\n    }\n\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n```"
    ],
    "match_count": 7,
    "pass@3": 0.9916666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 8888, respectively, within the function.)\n\nOutput: None (The function prints received messages from the server to the console but does not return any value.)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        send(sock, message.c_str(), message.length(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server or read error\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sock, buffer, strlen(buffer), 0);\n        std::cout << \"Message sent\" << std::endl;\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, std::string(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Error sending message\" << std::endl;\n            break;\n        }\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received < 0) {\n            std::cerr << \"Error receiving message\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed or failed to receive data\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, std::string(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Error sending message\" << std::endl;\n            break;\n        }\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received < 0) {\n            std::cerr << \"Error receiving message\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n        send(sock, message.c_str(), message.length(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server or read error\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        send(sock, message.c_str(), message.size(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        if (recv(sock, buffer, sizeof(buffer), 0) == -1) {\n            std::cerr << \"Failed to receive message\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        send(sock, buffer, strlen(buffer), 0);\n        std::cout << \"Message sent\" << std::endl;\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n\n    // Set up the server address structure\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, std::string(buffer));\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a TCP client class that can establish a connection to a server, send and receive data, and handle timeouts for non-blocking operations.\n\nClass Description: The TCPClient class provides functionality for TCP socket communication with a remote server. It supports both blocking and non-blocking operations with timeout capabilities, and handles cross-platform compatibility between Windows and Unix-like systems.\n\nAttributes:\n- address: std::string - The IP address or hostname of the server to connect to\n- port: u16 - The port number of the server to connect to\n- main_socket: SocketHolder (int) - The socket file descriptor for the connection\n- connected: bool - Flag indicating whether the client is currently connected to the server\n\nMethods:\n- Connect() -> bool - Establishes a connection to the server. Returns true if successful.\n- Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Reads data from the server into the buffer. Returns true if all requested bytes were read.\n- Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Writes data from the buffer to the server. Returns true if all bytes were written.\n- Disconnect() -> void - Closes the connection to the server.\n- SetNonBlock(SocketHolder sockFD, bool nonBlocking) -> bool - Sets the blocking mode of the socket. Returns true if successful.\n- ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) -> bool - Attempts to connect with a timeout. Returns true if successful.",
    "Canonical_solution": "#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <cerrno>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <ifaddrs.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <string>\n\n#ifdef _WIN32\n#define WSAEAGAIN WSAEWOULDBLOCK\n#define WSAEMULTIHOP -1\n#define ERRNO(x) WSA##x\n#define GET_ERRNO WSAGetLastError()\n#define poll(x, y, z) WSAPoll(x, y, z);\n#define SHUT_RD SD_RECEIVE\n#define SHUT_WR SD_SEND\n#define SHUT_RDWR SD_BOTH\n#else\n#define ERRNO(x) x\n#define GET_ERRNO errno\n#define closesocket(x) close(x)\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port) : address(address), port(port) {}\n\n    bool Connect() {\n        if (connected)\n            return true;\n\n        struct addrinfo hints, *addrinfo;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_family = AF_INET;\n\n        if (getaddrinfo(address.data(), NULL, &hints, &addrinfo) != 0) {\n            return false;\n        }\n\n        main_socket = ::socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == static_cast<SocketHolder>(-1)) {\n            return false;\n        }\n\n        if (!SetNonBlock(main_socket, true)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        struct sockaddr_in servaddr = {0};\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = ((struct sockaddr_in*)(addrinfo->ai_addr))->sin_addr.s_addr;\n        servaddr.sin_port = htons(port);\n        freeaddrinfo(addrinfo);\n\n        if (!ConnectWithTimeout(main_socket, &servaddr, sizeof(servaddr), 10)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t read_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (read_bytes != size) {\n            int new_read = ::recv(main_socket, (char*)((uintptr_t)buffer + read_bytes), \n                (int)(size - read_bytes), 0);\n            if (new_read < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                read_bytes = 0;\n                break;\n            }\n            read_bytes += new_read;\n        }\n        return read_bytes == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t write_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (write_bytes != size) {\n            int new_written = ::send(main_socket, (const char*)((uintptr_t)buffer + write_bytes),\n                                    (int)(size - write_bytes), 0);\n            if (new_written < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                write_bytes = 0;\n                break;\n            }\n            write_bytes += new_written;\n        }\n        return write_bytes == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            shutdown(main_socket, SHUT_RDWR);\n            closesocket(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        bool blocking = !nonBlocking;\n#ifdef _WIN32\n        unsigned long nonblocking = (blocking) ? 0 : 1;\n        int ret = ioctlsocket(sockFD, FIONBIO, &nonblocking);\n        if (ret == -1) {\n            return false;\n        }\n#else\n        int flags = ::fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        flags &= ~O_NONBLOCK;\n        if (!blocking) {\n            flags |= O_NONBLOCK;\n        }\n\n        const int ret = ::fcntl(sockFD, F_SETFL, flags);\n        if (ret == -1) {\n            return false;\n        }\n#endif\n        return true;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len,\n                           int timeout_seconds) {\n        int res = ::connect(sockFD, (struct sockaddr*)server_addr, static_cast<int>(server_addr_len));\n        if (res == -1 && ((GET_ERRNO == ERRNO(EINPROGRESS) || GET_ERRNO == ERRNO(EWOULDBLOCK))) {\n            struct timeval tv;\n            fd_set fdset;\n            FD_ZERO(&fdset);\n            FD_SET(sockFD, &fdset);\n\n            tv.tv_sec = timeout_seconds;\n            tv.tv_usec = 0;\n            int select_res = ::select(static_cast<int>(sockFD + 1), NULL, &fdset, NULL, &tv);\n#ifdef _WIN32\n            if (select_res == 0) {\n                return false;\n            }\n#else\n            bool select_good = false;\n            if (select_res == 1) {\n                int so_error;\n                socklen_t len = sizeof so_error;\n\n                getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n                if (so_error == 0) {\n                    select_good = true;\n                }\n            }\n            if (!select_good) {\n                return false;\n            }\n#endif\n        } else if (res == -1) {\n            return false;\n        }\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket = -1;\n    bool connected = false;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <poll.h>\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            return false;\n        }\n\n        sockaddr_in server_addr{};\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr);\n\n        return ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5);\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        SetNonBlock(main_socket, true);\n\n        auto end_time = std::chrono::steady_clock::now() + timeout;\n        while (size > 0) {\n            auto now = std::chrono::steady_clock::now();\n            if (now >= end_time) {\n                return false;\n            }\n\n            auto remaining_time = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - now).count();\n            pollfd fds[1];\n            fds[0].fd = main_socket;\n            fds[0].events = POLLIN;\n\n            if (poll(fds, 1, static_cast<int>(remaining_time)) <= 0) {\n                return false;\n            }\n\n            ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n            if (bytes_read == -1) {\n                return false;\n            }\n            if (bytes_read == 0) {\n                break;\n            }\n\n            buffer = reinterpret_cast<char*>(buffer) + bytes_read;\n            size -= bytes_read;\n        }\n\n        SetNonBlock(main_socket, false);\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        SetNonBlock(main_socket, true);\n\n        auto end_time = std::chrono::steady_clock::now() + timeout;\n        while (size > 0) {\n            auto now = std::chrono::steady_clock::now();\n            if (now >= end_time) {\n                return false;\n            }\n\n            auto remaining_time = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - now).count();\n            pollfd fds[1];\n            fds[0].fd = main_socket;\n            fds[0].events = POLLOUT;\n\n            if (poll(fds, 1, static_cast<int>(remaining_time)) <= 0) {\n                return false;\n            }\n\n            ssize_t bytes_written = send(main_socket, buffer, size, 0);\n            if (bytes_written == -1) {\n                return false;\n            }\n\n            buffer = reinterpret_cast<const char*>(buffer) + bytes_written;\n            size -= bytes_written;\n        }\n\n        SetNonBlock(main_socket, false);\n        return true;\n    }\n\n    void Disconnect() {\n        if (main_socket != -1) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, static_cast<sockaddr*>(server_addr), server_addr_len) == 0) {\n            connected = true;\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EALREADY) {\n            return false;\n        }\n\n        fd_set writefds;\n        FD_ZERO(&writefds);\n        FD_SET(sockFD, &writefds);\n\n        struct timeval timeout;\n        timeout.tv_sec = timeout_seconds;\n        timeout.tv_usec = 0;\n\n        if (select(sockFD + 1, nullptr, &writefds, nullptr, &timeout) <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n        if (so_error != 0) {\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <netdb.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing namespace std;\n\ntypedef int SocketHolder;\n\nclass TCPClient {\npublic:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            close(main_socket);\n            main_socket = -1;\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int ready = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ready == -1) return false;\n        if (ready == 0) return false; // Timeout\n\n        ssize_t bytesRead = recv(main_socket, static_cast<char*>(buffer), size, 0);\n        if (bytesRead == -1) return false;\n        if (bytesRead == 0) {\n            Disconnect();\n            return false;\n        }\n\n        return static_cast<size_t>(bytesRead) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int ready = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ready == -1) return false;\n        if (ready == 0) return false; // Timeout\n\n        ssize_t bytesWritten = send(main_socket, static_cast<const char*>(buffer), size, 0);\n        if (bytesWritten == -1) return false;\n\n        return static_cast<size_t>(bytesWritten) == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\nprivate:\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, static_cast<struct sockaddr*>(server_addr), server_addr_len) == 0) {\n            return true;\n        }\n\n        if (errno == EINPROGRESS || errno == EWOULDBLOCK) {\n            fd_set write_fds;\n            FD_ZERO(&write_fds);\n            FD_SET(sockFD, &write_fds);\n\n            struct timeval tv;\n            tv.tv_sec = timeout_seconds;\n            tv.tv_usec = 0;\n\n            int ready = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n            if (ready == -1) return false;\n            if (ready == 0) return false; // Timeout\n\n            int error = 0;\n            socklen_t len = sizeof(error);\n            if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &error, &len) == -1) return false;\n            if (error != 0) return false;\n\n            return true;\n        }\n\n        return false;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing namespace std;\n\ntypedef int SocketHolder;\n\nclass TCPClient {\npublic:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            cerr << \"Failed to create socket\" << endl;\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            cerr << \"Invalid address/ Address not supported\" << endl;\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            cerr << \"Connection failed\" << endl;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int ret = select(main_socket + 1, &read_fds, NULL, NULL, &tv);\n        if (ret == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (ret == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read == -1) {\n            cerr << \"Read error\" << endl;\n            return false;\n        }\n\n        return bytes_read == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int ret = select(main_socket + 1, NULL, &write_fds, NULL, &tv);\n        if (ret == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (ret == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        if (bytes_written == -1) {\n            cerr << \"Write error\" << endl;\n            return false;\n        }\n\n        return bytes_written == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\nprivate:\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == 0) {\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EWOULDBLOCK) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int ret = select(sockFD + 1, NULL, &write_fds, NULL, &tv);\n        if (ret == -1) {\n            return false;\n        } else if (ret == 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n        return so_error == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            close(main_socket);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            close(main_socket);\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        ssize_t bytesRead = recv(main_socket, static_cast<char*>(buffer), size, 0);\n        return bytesRead == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        ssize_t bytesWritten = send(main_socket, static_cast<const char*>(buffer), size, 0);\n        return bytesWritten == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        SetNonBlock(sockFD, true);\n\n        int result = connect(sockFD, static_cast<sockaddr*>(server_addr), server_addr_len);\n        if (result == 0 || (result == -1 && (errno == EINPROGRESS || errno == EWOULDBLOCK))) {\n            fd_set write_fds;\n            FD_ZERO(&write_fds);\n            FD_SET(sockFD, &write_fds);\n\n            struct timeval tv;\n            tv.tv_sec = timeout_seconds;\n            tv.tv_usec = 0;\n\n            result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n            if (result == -1) {\n                return false;\n            } else if (result == 0) {\n                return false; // Timeout\n            }\n\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n            if (so_error != 0) {\n                return false;\n            }\n\n            SetNonBlock(sockFD, false);\n            return true;\n        }\n\n        return false;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing namespace std;\n\ntypedef int SocketHolder;\ntypedef uint16_t u16;\n\nclass TCPClient {\npublic:\n    string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    TCPClient(const string& addr, u16 p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            cerr << \"Failed to create socket\" << endl;\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            cerr << \"Invalid address/ Address not supported\" << endl;\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            cerr << \"Connection failed\" << endl;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = chrono::duration_cast<chrono::seconds>(timeout).count();\n        tv.tv_usec = chrono::duration_cast<chrono::microseconds>(timeout % chrono::seconds(1)).count();\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (ret == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read == -1) {\n            cerr << \"Read error\" << endl;\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_read) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = chrono::duration_cast<chrono::seconds>(timeout).count();\n        tv.tv_usec = chrono::duration_cast<chrono::microseconds>(timeout % chrono::seconds(1)).count();\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (ret == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        if (bytes_written == -1) {\n            cerr << \"Write error\" << endl;\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_written) == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == 0) {\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EWOULDBLOCK) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, true);\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret == -1) {\n            return false;\n        } else if (ret == 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n        if (so_error != 0) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing namespace std;\n\ntypedef int SocketHolder;\n\nclass TCPClient {\npublic:\n    string address;\n    uint16_t port;\n    SocketHolder main_socket;\n    bool connected;\n\n    TCPClient(const string& addr, uint16_t p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            cerr << \"Failed to create socket\" << endl;\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            cerr << \"Invalid address/ Address not supported\" << endl;\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            cerr << \"Connection failed\" << endl;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = chrono::duration_cast<chrono::seconds>(timeout).count();\n        tv.tv_usec = chrono::duration_cast<chrono::microseconds>(timeout % chrono::seconds(1)).count();\n\n        int select_result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (select_result == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (select_result == 0) {\n            cerr << \"Read timeout\" << endl;\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read == -1) {\n            cerr << \"Read error\" << endl;\n            return false;\n        } else if (bytes_read == 0) {\n            cerr << \"Connection closed by peer\" << endl;\n            connected = false;\n            return false;\n        }\n\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = chrono::duration_cast<chrono::seconds>(timeout).count();\n        tv.tv_usec = chrono::duration_cast<chrono::microseconds>(timeout % chrono::seconds(1)).count();\n\n        int select_result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (select_result == 0) {\n            cerr << \"Write timeout\" << endl;\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        if (bytes_written == -1) {\n            cerr << \"Write error\" << endl;\n            return false;\n        } else if (static_cast<size_t>(bytes_written) != size) {\n            cerr << \"Not all bytes were written\" << endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    void Disconnect() {\n        if (main_socket != -1) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == 0) {\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EWOULDBLOCK) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int select_result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result == -1) {\n            return false;\n        } else if (select_result == 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        return so_error == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            close(main_socket);\n            main_socket = -1;\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            close(main_socket);\n            main_socket = -1;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        ssize_t bytesRead = recv(main_socket, buffer, size, 0);\n        if (bytesRead == -1) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytesRead) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        ssize_t bytesWritten = send(main_socket, buffer, size, 0);\n        if (bytesWritten == -1) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytesWritten) == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        SetNonBlock(sockFD, true);\n\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == -1) {\n#ifdef _WIN32\n            if (WSAGetLastError() != WSAEWOULDBLOCK) {\n                return false;\n            }\n#else\n            if (errno != EINPROGRESS && errno != EALREADY) {\n                return false;\n            }\n#endif\n        } else {\n            SetNonBlock(sockFD, false);\n            return true;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        int error = 0;\n        socklen_t len = sizeof(error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &error, &len) == -1) {\n            return false;\n        }\n\n        if (error != 0) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing namespace std;\n\nclass TCPClient {\npublic:\n    typedef int SocketHolder;\n    string address;\n    uint16_t port;\n    SocketHolder main_socket;\n    bool connected;\n\n    TCPClient(const string& addr, uint16_t p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            cerr << \"Failed to create socket\" << endl;\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            cerr << \"Invalid address/ Address not supported\" << endl;\n            return false;\n        }\n\n        return ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5);\n    }\n\n    bool Read(void* buffer, size_t size, const chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = chrono::duration_cast<chrono::seconds>(timeout).count();\n        tv.tv_usec = chrono::duration_cast<chrono::microseconds>(timeout % chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, &read_fds, NULL, NULL, &tv);\n        if (result == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (result == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        ssize_t bytesRead = recv(main_socket, buffer, size, 0);\n        if (bytesRead == -1) {\n            cerr << \"Read error\" << endl;\n            return false;\n        } else if (bytesRead == 0) {\n            cerr << \"Connection closed by peer\" << endl;\n            return false;\n        }\n\n        return bytesRead == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = chrono::duration_cast<chrono::seconds>(timeout).count();\n        tv.tv_usec = chrono::duration_cast<chrono::microseconds>(timeout % chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, NULL, &write_fds, NULL, &tv);\n        if (result == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (result == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        ssize_t bytesWritten = send(main_socket, buffer, size, 0);\n        if (bytesWritten == -1) {\n            cerr << \"Write error\" << endl;\n            return false;\n        }\n\n        return bytesWritten == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == 0) {\n            connected = true;\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EWOULDBLOCK) {\n            cerr << \"Connect failed\" << endl;\n            return false;\n        }\n\n        SetNonBlock(sockFD, true);\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(sockFD + 1, NULL, &write_fds, NULL, &tv);\n        if (result == -1) {\n            cerr << \"Select error\" << endl;\n            return false;\n        } else if (result == 0) {\n            cerr << \"Timeout occurred\" << endl;\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n        if (so_error == 0) {\n            connected = true;\n            return true;\n        } else {\n            cerr << \"Connection failed with error: \" << so_error << endl;\n            return false;\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <chrono>\n#include <thread>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            close(main_socket);\n            main_socket = -1;\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            close(main_socket);\n            main_socket = -1;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        ssize_t bytesRead = recv(main_socket, buffer, size, 0);\n        return bytesRead == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        ssize_t bytesWritten = send(main_socket, buffer, size, 0);\n        return bytesWritten == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == 0) {\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EWOULDBLOCK) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            return false; // Timeout\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) == -1) {\n            return false;\n        }\n\n        return so_error == 0;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    std::string address;\n    uint16_t port;\n    SocketHolder main_socket;\n    bool connected;\n\n    TCPClient(const std::string& addr, uint16_t p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == -1) {\n            return false;\n        }\n\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            close(main_socket);\n            main_socket = -1;\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, &server_addr, sizeof(server_addr), 5)) {\n            close(main_socket);\n            main_socket = -1;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            // Timeout\n            return false;\n        }\n\n        ssize_t bytesRead = recv(main_socket, buffer, size, 0);\n        if (bytesRead == -1) {\n            return false;\n        }\n\n        return bytesRead == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout % std::chrono::seconds(1)).count();\n\n        int result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            // Timeout\n            return false;\n        }\n\n        ssize_t bytesWritten = send(main_socket, buffer, size, 0);\n        if (bytesWritten == -1) {\n            return false;\n        }\n\n        return bytesWritten == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#ifdef _WIN32\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, (struct sockaddr*)server_addr, server_addr_len) == 0) {\n            return true;\n        }\n\n        if (errno != EINPROGRESS && errno != EWOULDBLOCK) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, true);\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result == -1) {\n            return false;\n        } else if (result == 0) {\n            // Timeout\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) == -1) {\n            return false;\n        }\n\n        if (so_error != 0) {\n            errno = so_error;\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests and handling responses, including JSON parsing capabilities.\n\nClass Description: The CurlHttpClient class provides methods for performing HTTP GET requests and downloading web pages, with support for custom headers and request bodies. It includes JSON response handling and memory management for received data.\n\nAttributes:\nMemoryStruct: [struct] - A helper structure for storing received data in memory during curl operations\n  - memory: [char*] - Pointer to the allocated memory buffer\n  - size: [size_t] - Size of the allocated memory buffer\n\nMethods:\nWriteMemoryCallback: [static](void* contents, size_t size, size_t nmemb, void* userp) -> size_t - A static callback function for libcurl to write received data into memory\n  - contents: [void*] - Pointer to the received data\n  - size: [size_t] - Size of each data element\n  - nmemb: [size_t] - Number of data elements\n  - userp: [void*] - Pointer to user-provided memory structure\n  - Returns: The number of bytes actually written\n\ndownloadPage: [](const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) -> long - Downloads a web page and returns the HTTP status code\n  - url: [const std::string&] - The URL to request\n  - res: [std::string&] - Reference to store the response body\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response\n\ngetRequest: [](const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) -> long - Performs a GET request and parses the JSON response\n  - url: [const std::string&] - The URL to request\n  - res: [json&] - Reference to store the parsed JSON response\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <vector>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::ordered_json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char* memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = static_cast<char*>(realloc(mem->memory, mem->size + realsize + 1));\n        if (ptr == NULL) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl_handle;\n        MemoryStruct chunk;\n        struct curl_slist* list = NULL;\n        long status_code;\n\n        chunk.memory = static_cast<char*>(malloc(1));\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n        if (!headers.empty()) {\n            for (auto& h : headers) {\n                list = curl_slist_append(list, h.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, list);\n        }\n        if (body != \"\") {\n            curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void*)&chunk);\n        curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, \"HamletDuFromage\");\n\n        curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYPEER, 0L);\n        curl_easy_perform(curl_handle);\n        curl_easy_getinfo(curl_handle, CURLINFO_RESPONSE_CODE, &status_code);\n        curl_easy_cleanup(curl_handle);\n        res = std::string(chunk.memory);\n        free(chunk.memory);\n\n        curl_global_cleanup();\n        return status_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string request;\n        long status_code = downloadPage(url, request, headers, body);\n\n        if (json::accept(request))\n            res = json::parse(request);\n        else\n            res = json::object();\n\n        return status_code;\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <curl/curl.h>\n#include <string>\n#include <vector>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            printf(\"not enough memory (realloc returned NULL)\\n\");\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            struct curl_slist *slist = NULL;\n            for (const auto& header : headers) {\n                slist = curl_slist_append(slist, header.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist);\n\n            curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                fprintf(stderr, \"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(res_code));\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_slist_free_all(slist);\n            free(chunk.memory);\n        }\n\n        curl_global_cleanup();\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return http_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            struct curl_slist *header_list = nullptr;\n            for (const auto& header : headers) {\n                header_list = curl_slist_append(header_list, header.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, header_list);\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res_code) << std::endl;\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_slist_free_all(header_list);\n            free(chunk.memory);\n        }\n\n        curl_global_cleanup();\n\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n        if (httpCode == CURLE_OK) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return httpCode;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\\n\";\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by the realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist *slist = NULL;\n                for (const auto& header : headers) {\n                    slist = curl_slist_append(slist, header.c_str());\n                }\n                curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                fprintf(stderr, \"curl_easy_perform() failed: %s\\n\",\n                        curl_easy_strerror(res_code));\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_global_cleanup();\n\n            free(chunk.memory);\n        }\n\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n\n        if (httpCode == 200) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << '\\n';\n            }\n        }\n\n        return httpCode;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl_handle = curl_easy_init();\n\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist *slist = NULL;\n                for (const auto& header : headers) {\n                    slist = curl_slist_append(slist, header.c_str());\n                }\n                curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res_code) << std::endl;\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_global_cleanup();\n\n            free(chunk.memory);\n        }\n\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n\n        if (httpCode == CURLE_OK) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n\n        return httpCode;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\\n\";\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by realloc\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist *slist = NULL;\n                for (const auto& header : headers) {\n                    slist = curl_slist_append(slist, header.c_str());\n                }\n                curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                fprintf(stderr, \"curl_easy_perform() failed: %s\\n\", curl_easy_strerror(res_code));\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_global_cleanup();\n\n            free(chunk.memory);\n        }\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << '\\n';\n            }\n        }\n        return http_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include \"nlohmann/json.hpp\"\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\\n\";\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by realloc\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist *slist = NULL;\n                for (const auto& header : headers) {\n                    slist = curl_slist_append(slist, header.c_str());\n                }\n                curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res_code) << std::endl;\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_global_cleanup();\n\n            free(chunk.memory);\n        }\n\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n        if (httpCode == 200) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return httpCode;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include \"nlohmann/json.hpp\"\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by the realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist *slist = NULL;\n                for (const auto& header : headers) {\n                    slist = curl_slist_append(slist, header.c_str());\n                }\n                curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res_code) << std::endl;\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_global_cleanup();\n\n            free(chunk.memory);\n        }\n\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status_code = downloadPage(url, response, headers, body);\n        if (status_code == CURLE_OK) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return status_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include \"nlohmann/json.hpp\"\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by the realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            struct curl_slist *header_list = NULL;\n            for (const auto& header : headers) {\n                header_list = curl_slist_append(header_list, header.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, header_list);\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                fprintf(stderr, \"curl_easy_perform() failed: %s\\n\",\n                        curl_easy_strerror(res_code));\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_slist_free_all(header_list);\n            free(chunk.memory);\n        }\n        curl_global_cleanup();\n\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status_code = downloadPage(url, response, headers, body);\n        if (status_code == CURLE_OK) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return status_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by the realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            struct curl_slist *headers_list = nullptr;\n            for (const auto& header : headers) {\n                headers_list = curl_slist_append(headers_list, header.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, headers_list);\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n\n            curl_easy_cleanup(curl_handle);\n            curl_slist_free_all(headers_list);\n            curl_global_cleanup();\n\n            if(res_code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res_code) << std::endl;\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            free(chunk.memory);\n        }\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response_body;\n        long http_code = downloadPage(url, response_body, headers, body);\n        if (http_code == 200) {\n            try {\n                res = json::parse(response_body);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return http_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char *memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct *mem = (MemoryStruct *)userp;\n\n        char *ptr = (char *)realloc(mem->memory, mem->size + realsize + 1);\n        if(ptr == NULL) {\n            // out of memory!\n            std::cerr << \"not enough memory (realloc returned NULL)\\n\";\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL *curl_handle;\n        CURLcode res_code;\n        MemoryStruct chunk;\n\n        chunk.memory = (char*)malloc(1);  // will be grown as needed by realloc above\n        chunk.size = 0;    // no data at this point\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n\n        if(curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *)&chunk);\n\n            struct curl_slist *slist1 = NULL;\n            for (const auto& header : headers) {\n                slist1 = curl_slist_append(slist1, header.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, slist1);\n\n            curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n\n            res_code = curl_easy_perform(curl_handle);\n\n            if(res_code != CURLE_OK) {\n                fprintf(stderr, \"curl_easy_perform() failed: %s\\n\",\n                        curl_easy_strerror(res_code));\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl_handle);\n            curl_slist_free_all(slist1);\n            free(chunk.memory);\n        }\n\n        curl_global_cleanup();\n        return res_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n        if (httpCode == 200) {\n            try {\n                res = json::parse(response);\n            } catch (json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << '\\n';\n            }\n        }\n        return httpCode;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Implement a TCP client function that establishes a connection to a server, sends data, and reads the server's response in a continuous loop, handling connection errors and reconnection attempts.\n\nFunction Description: The function `readwrite_routine` implements a TCP client that continuously attempts to connect to a specified server endpoint. Once connected, it sends a fixed message and reads the server's response. If the connection fails or is lost, it automatically attempts to reconnect. The function handles connection states and errors appropriately, including non-blocking connection scenarios.\n\nInput: \n- `arg` (void pointer): A pointer to a `stEndPoint` structure containing:\n  - `ip` (char pointer): The IP address of the server to connect to (can be NULL or special values for default behavior)\n  - `port` (unsigned short int): The port number of the server to connect to\n\nOutput: \n- Returns NULL (void pointer) when the loop exits (though the provided implementation has an infinite loop)\n- No explicit return value, but performs I/O operations through the socket\n\nNote: The function runs in an infinite loop and should typically be executed in a separate thread. It manages its own socket lifecycle, creating and closing sockets as needed during connection attempts and communication.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nstruct stEndPoint\n{\n    char *ip;\n    unsigned short int port;\n};\n\nstatic void SetAddr(const char *pszIP, const unsigned short shPort, struct sockaddr_in &addr)\n{\n    bzero(&addr, sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(shPort);\n    int nIP = 0;\n    if(!pszIP || '\\0' == *pszIP   \n            || 0 == strcmp(pszIP,\"0\") || 0 == strcmp(pszIP,\"0.0.0.0\") \n            || 0 == strcmp(pszIP,\"*\") \n      )\n    {\n        nIP = htonl(INADDR_ANY);\n    }\n    else\n    {\n        nIP = inet_addr(pszIP);\n    }\n    addr.sin_addr.s_addr = nIP;\n}\n\nstatic void *readwrite_routine(void *arg)\n{\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char str[8] = \"sarlmol\";\n    char buf[1024 * 16];\n    int fd = -1;\n    int ret = 0;\n    \n    for(;;)\n    {\n        if(fd < 0)\n        {\n            fd = socket(PF_INET, SOCK_STREAM, 0);\n            struct sockaddr_in addr;\n            SetAddr(endpoint->ip, endpoint->port, addr);\n            ret = connect(fd, (struct sockaddr*)&addr, sizeof(addr));\n            \n            if(errno == EALREADY || errno == EINPROGRESS)\n            {       \n                struct pollfd pf = {0};\n                pf.fd = fd;\n                pf.events = (POLLOUT|POLLERR|POLLHUP);\n                co_poll(co_get_epoll_ct(), &pf, 1, 200);\n                \n                int error = 0;\n                uint32_t socklen = sizeof(error);\n                errno = 0;\n                ret = getsockopt(fd, SOL_SOCKET, SO_ERROR, (void *)&error, &socklen);\n                if(ret == -1)\n                {       \n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n                if(error)\n                {       \n                    errno = error;\n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n            }\n        }\n        \n        ret = write(fd, str, 8);\n        if(ret > 0)\n        {\n            ret = read(fd, buf, sizeof(buf));\n            if(ret <= 0)\n            {\n                close(fd);\n                fd = -1;\n            }\n        }\n        else\n        {\n            close(fd);\n            fd = -1;\n        }\n    }\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define DEFAULT_IP \"127.0.0.1\"\n#define DEFAULT_PORT 8080\n#define CONNECT_TIMEOUT 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char *server_ip = endpoint->ip ? endpoint->ip : DEFAULT_IP;\n    unsigned short int server_port = endpoint->port ? endpoint->port : DEFAULT_PORT;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        // Set server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(server_port);\n\n        // Convert IP from text to binary form\n        if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Read response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        int valread = read(sockfd, recv_msg, MAX_MSG_SIZE);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        } else if (valread == 0) {\n            printf(\"Server disconnected\\n\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before attempting to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define SERVER_IP \"127.0.0.1\"\n#define SERVER_PORT 8080\n#define CONNECT_TIMEOUT 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation error\");\n            sleep(1);\n            continue;\n        }\n\n        // Set server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port ? endpoint->port : SERVER_PORT);\n\n        // Resolve IP address\n        if (inet_pton(AF_INET, endpoint->ip ? endpoint->ip : SERVER_IP, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Connect to server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Receive response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        if (recv(sockfd, recv_msg, MAX_MSG_SIZE, 0) < 0) {\n            perror(\"Receive failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before attempting to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define DEFAULT_IP \"127.0.0.1\"\n#define DEFAULT_PORT 8080\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char *ip = endpoint->ip ? endpoint->ip : DEFAULT_IP;\n    unsigned short int port = endpoint->port ? endpoint->port : DEFAULT_PORT;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        // Set up server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        // Convert IP from string to binary form\n        if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Receive response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        if (recv(sockfd, recv_msg, MAX_MSG_SIZE, 0) < 0) {\n            perror(\"Receive failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before attempting to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define DEFAULT_IP \"127.0.0.1\"\n#define DEFAULT_PORT 8080\n#define CONNECT_TIMEOUT 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char *server_ip = endpoint->ip ? endpoint->ip : DEFAULT_IP;\n    unsigned short int server_port = endpoint->port ? endpoint->port : DEFAULT_PORT;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        // Set up server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(server_port);\n\n        // Convert IP from string to binary form\n        if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Read response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        ssize_t bytes_received = read(sockfd, recv_msg, MAX_MSG_SIZE - 1);\n        if (bytes_received < 0) {\n            perror(\"Read failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        } else if (bytes_received == 0) {\n            printf(\"Server disconnected\\n\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before attempting to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define RECONNECT_DELAY 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid* readwrite_routine(void* arg) {\n    stEndPoint *endpoint = (stEndPoint*)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation error\");\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Prepare the sockaddr_in structure\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        // Convert IPv4 and IPv6 addresses from text to binary form\n        if(inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Send message to the server\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Read response from the server\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        int valread = read(sockfd, recv_msg, MAX_MSG_SIZE);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        } else if (valread == 0) {\n            printf(\"Server disconnected\\n\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close the socket\n        close(sockfd);\n        sleep(RECONNECT_DELAY);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define RECONNECT_DELAY 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation failed\");\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Set up server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        // Convert IP from string to binary form\n        if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Read response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        if (recv(sockfd, recv_msg, MAX_MSG_SIZE, 0) < 0) {\n            perror(\"Receive failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(RECONNECT_DELAY);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define DEFAULT_IP \"127.0.0.1\"\n#define DEFAULT_PORT 8080\n#define CONNECT_TIMEOUT 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char *ip = endpoint->ip ? endpoint->ip : DEFAULT_IP;\n    unsigned short int port = endpoint->port ? endpoint->port : DEFAULT_PORT;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        // Set server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        // Convert IP from string to binary form\n        if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Read response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        int valread = read(sockfd, recv_msg, MAX_MSG_SIZE);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        } else if (valread == 0) {\n            printf(\"Server disconnected\\n\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        printf(\"Received: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before attempting to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define DEFAULT_IP \"127.0.0.1\"\n#define DEFAULT_PORT 8080\n#define CONNECT_TIMEOUT 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char *server_ip = endpoint->ip ? endpoint->ip : DEFAULT_IP;\n    unsigned short int server_port = endpoint->port ? endpoint->port : DEFAULT_PORT;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        // Set server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(server_port);\n\n        // Convert IP from text to binary form\n        if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        // Read response\n        ssize_t bytes_read = read(sockfd, recv_msg, MAX_MSG_SIZE - 1);\n        if (bytes_read < 0) {\n            perror(\"Read failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        } else if (bytes_read == 0) {\n            printf(\"Server disconnected\\n\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        recv_msg[bytes_read] = '\\0';\n        printf(\"Received: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before attempting to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define DEFAULT_IP \"127.0.0.1\"\n#define DEFAULT_PORT 8080\n#define CONNECT_TIMEOUT 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char *server_ip = endpoint->ip ? endpoint->ip : DEFAULT_IP;\n    unsigned short int server_port = endpoint->port ? endpoint->port : DEFAULT_PORT;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1); // Wait before retrying\n            continue;\n        }\n\n        // Set up server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(server_port);\n\n        // Convert IP from string to binary form\n        if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(1); // Wait before retrying\n            continue;\n        }\n\n        // Connect to the server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1); // Wait before retrying\n            continue;\n        }\n\n        // Send message\n        send(sockfd, send_msg, strlen(send_msg), 0);\n        printf(\"Message sent to server\\n\");\n\n        // Read response\n        ssize_t bytes_read = read(sockfd, recv_msg, MAX_MSG_SIZE - 1);\n        if (bytes_read > 0) {\n            recv_msg[bytes_read] = '\\0';\n            printf(\"Received from server: %s\\n\", recv_msg);\n        } else if (bytes_read == 0) {\n            printf(\"Server closed connection\\n\");\n        } else {\n            perror(\"Read error\");\n        }\n\n        // Close socket\n        close(sockfd);\n        sleep(1); // Wait before retrying\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n\n#define MAX_MSG_SIZE 1024\n#define RECONNECT_DELAY 5\n\ntypedef struct {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_msg[] = \"Hello, Server!\";\n    char recv_msg[MAX_MSG_SIZE];\n\n    while (1) {\n        // Create socket\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Set up server address\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        // Resolve IP address\n        if (endpoint->ip != NULL && inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/ Address not supported\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Connect to server\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Send message\n        if (send(sockfd, send_msg, strlen(send_msg), 0) < 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        // Read response\n        memset(recv_msg, 0, MAX_MSG_SIZE);\n        int valread = read(sockfd, recv_msg, MAX_MSG_SIZE);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            close(sockfd);\n            sleep(RECONNECT_DELAY);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_msg);\n\n        // Close socket\n        close(sockfd);\n        sleep(RECONNECT_DELAY);\n    }\n\n    return NULL;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the function. User input is collected interactively during execution.)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value. All communication results are handled via side effects.)\n\nNote: The function handles its own socket cleanup by closing the connection before exiting.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed or failed to receive data\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Receive response from server\n        int valread = read(client_socket, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server or read error\" << std::endl;\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed by server or receive error\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    client_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (client_socket < 0) {\n        perror(\"Socket creation failed\");\n        return;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr);\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, std::string(buffer));\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        int bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed or error occurred\" << std::endl;\n            break;\n        }\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Receive response from server\n        int valread = read(client_socket, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server or read error\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Receive response from server\n        int valread = read(client_socket, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed or failed to receive data\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation failed\");\n        return;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(client_socket);\n        return;\n    }\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        perror(\"Connection failed\");\n        close(client_socket);\n        return;\n    }\n\n    std::cout << \"Connected to server. Type 'exit' to quit.\" << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        // Check for exit command\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Receive response from server\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(client_socket, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            perror(\"Read failed\");\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Receive failed or connection closed\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed or failed to receive data\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input to the server, and prints the server's response. The function should handle basic error cases and properly close the connection when done.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and displays the server's response. The loop continues until an error occurs or the connection is closed by the server. The function handles socket creation, connection, data transmission, and cleanup.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 1234 respectively in the function)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(1234);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(1234);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received == -1) {\n            std::cerr << \"Failed to receive message\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock == -1) {\n        std::cerr << \"Failed to create socket\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(1234);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {\n        std::cerr << \"Failed to connect to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) == -1) {\n            std::cerr << \"Failed to send message\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received == -1) {\n            std::cerr << \"Failed to receive message\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n    char buffer[1024] = {0};\n    char message[1024];\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(message, 1024);\n\n        send(sock, message, strlen(message), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or error occurred\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n    char buffer[1024] = {0};\n    char message[1024];\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(message, 1024);\n\n        send(sock, message, strlen(message), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    // Connect to server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to server\n        if (send(client_socket, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        int valread = read(client_socket, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed by server\" << std::endl;\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n    char buffer[1024] = {0};\n    char message[1024];\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(message, 1024);\n\n        if (send(sock, message, strlen(message), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Receive failed or connection closed by server\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n    char buffer[1024] = {0};\n    char message[1024];\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(message, 1024);\n\n        send(sock, message, strlen(message), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int client_socket;\n    struct sockaddr_in server_address;\n    char buffer[1024];\n\n    // Create socket\n    if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    // Set up server address\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(1234);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_address.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    // Connect to the server\n    if (connect(client_socket, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(client_socket);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        send(client_socket, buffer, strlen(buffer), 0);\n\n        // Read response from server\n        int valread = read(client_socket, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or error occurred\" << std::endl;\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close the socket\n    close(client_socket);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n    char buffer[1024] = {0};\n    char message[1024];\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if(inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(message, 1024);\n\n        send(sock, message, strlen(message), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(1234);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Error sending message\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n\nint main() {\n    tcp_client_communication();\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a TCP server in C++ that listens for incoming connections, receives data from clients, and echoes the data back to the clients. The server should handle one client at a time and properly clean up resources when the connection is terminated.\n\nFunction Description: The function `create_tcp_server` establishes a TCP server that binds to a specified IP address and port, listens for incoming connections, and handles client communication. It reads data from the client and sends the same data back (echo). The server runs until the client disconnects or an error occurs.\n\nInput: \n- `ip`: [const char*] - The IP address the server should bind to (e.g., \"127.0.0.1\" for localhost).\n- `port`: [int] - The port number the server should listen on (e.g., 8080).\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any step fails (socket creation, binding, listening, or accepting connections).",
    "Canonical_solution": "#include <stdio.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(bind(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    if(listen(sockfd, SOMAXCONN) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    struct sockaddr_in clnt_addr;\n    socklen_t clnt_addr_len = sizeof(clnt_addr);\n    bzero(&clnt_addr, sizeof(clnt_addr));\n\n    int clnt_sockfd = accept(sockfd, (sockaddr*)&clnt_addr, &clnt_addr_len);\n    if(clnt_sockfd == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    printf(\"new client fd %d! IP: %s Port: %d\\n\", clnt_sockfd, inet_ntoa(clnt_addr.sin_addr), ntohs(clnt_addr.sin_port));\n    \n    char buf[1024];\n    while (true) {\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(clnt_sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from client fd %d: %s\\n\", clnt_sockfd, buf);\n            write(clnt_sockfd, buf, sizeof(buf));\n        } else if(read_bytes == 0){\n            printf(\"client fd %d disconnected\\n\", clnt_sockfd);\n            close(clnt_sockfd);\n            break;\n        } else if(read_bytes == -1){\n            close(clnt_sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    while (true) {\n        int valread = read(new_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Client disconnected or error\n        }\n        send(new_socket, buffer, valread, 0);\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the specified IP and port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Reading data from the client and echoing it back\n    while (true) {\n        int valread = read(new_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Client disconnected or error occurred\n        }\n        send(new_socket, buffer, valread, 0);\n    }\n\n    // Closing the sockets\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the specified IP and port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Reading data from the client\n    int valread = read(new_socket, buffer, 1024);\n    std::cout << \"Received: \" << buffer << std::endl;\n\n    // Sending the same data back to the client (echo)\n    send(new_socket, buffer, strlen(buffer), 0);\n    std::cout << \"Echoed: \" << buffer << std::endl;\n\n    // Closing the socket\n    close(new_socket);\n    close(server_fd);\n\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Reading from the client\n    int valread = read(new_socket, buffer, 1024);\n    std::cout << \"Received: \" << buffer << std::endl;\n\n    // Sending the same message back to the client\n    send(new_socket, buffer, strlen(buffer), 0);\n    std::cout << \"Echoed: \" << buffer << std::endl;\n\n    // Closing the socket\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    while (true) {\n        int valread = read(new_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Client disconnected or error\n        }\n        send(new_socket, buffer, valread, 0);\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the specified IP and port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server listening on \" << ip << \":\" << port << std::endl;\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Connection accepted\" << std::endl;\n\n    // Reading data from the client and echoing it back\n    while (true) {\n        int valread = read(new_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Client disconnected or error occurred\n        }\n        send(new_socket, buffer, valread, 0);\n    }\n\n    // Closing the socket\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    while (true) {\n        int valread = read(new_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Client disconnected or error\n        }\n        send(new_socket, buffer, valread, 0);\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Reading from the client\n    int valread = read(new_socket, buffer, 1024);\n    std::cout << \"Received: \" << buffer << std::endl;\n\n    // Sending the same message back to the client\n    send(new_socket, buffer, strlen(buffer), 0);\n    std::cout << \"Echoed: \" << buffer << std::endl;\n\n    // Closing the socket\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the specified IP and port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Reading data from the client and echoing it back\n    while (true) {\n        int valread = read(new_socket, buffer, 1024);\n        if (valread <= 0) {\n            break; // Client disconnected or error occurred\n        }\n        send(new_socket, buffer, valread, 0);\n    }\n\n    // Closing the socket\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the specified IP and port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a new connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    // Reading data from the client\n    int valread = read(new_socket, buffer, 1024);\n    std::cout << \"Received: \" << buffer << std::endl;\n\n    // Sending the same data back to the client (echo)\n    send(new_socket, buffer, strlen(buffer), 0);\n    std::cout << \"Echoed: \" << buffer << std::endl;\n\n    // Closing the socket\n    close(new_socket);\n    close(server_fd);\n\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a TCP server class that handles multiple client connections, manages network communication, and provides thread-safe operations for client management.\n\nClass Description: The NetworkServer class implements a TCP server that listens for incoming connections, manages connected clients, and handles network communication through separate threads. It supports both IPv4 and IPv6 addresses and includes error handling for socket operations.\n\nAttributes:\n- host: std::string - The host address to bind the server to\n- port_num: unsigned short - The port number to listen on\n- server_online: bool - Flag indicating if the server is running\n- server_listening: bool - Flag indicating if the server is actively listening for connections\n- ServerClients: std::vector<NetworkClientInfo *> - List of connected client information\n- ServerClientsMutex: std::mutex - Mutex for thread-safe access to client list\n- server_sock: SOCKET[MAXSOCK] - Array of server socket descriptors\n- socket_count: int - Number of active server sockets\n- ConnectionThread: std::thread *[MAXSOCK] - Array of connection handler threads\n\nMethods:\n- NetworkServer(std::vector<RGBController *>& control) -> None - Constructor that initializes the server with controller references\n- ~NetworkServer() -> None - Destructor that stops the server and cleans up resources\n- StartServer() -> None - Starts the server, creates sockets, binds to address, and begins listening for connections\n- StopServer() -> None - Stops the server, closes all connections, and cleans up threads\n- ConnectionThreadFunction(int socket_idx) -> None - Thread function that handles incoming connections for a specific socket\n- accept_select(int sockfd) -> int - Helper function that implements timeout-based socket acceptance\n- GetPort() -> unsigned short - Returns the current port number (implied but not shown in code)\n- ClientInfoChanged() -> None - Callback for client list changes (implied but not shown in code)\n- ServerListeningChanged() -> None - Callback for server listening state changes (implied but not shown in code)\n- ListenThreadFunction(NetworkClientInfo * client_info) -> None - Thread function that handles communication with a specific client (implied but not shown in code)",
    "Canonical_solution": "#include <cstring>\n#include <memory.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#ifndef WIN32\n#include <sys/ioctl.h>\n#include <netinet/tcp.h>\n#include <sys/types.h>\n#include <arpa/inet.h>\n#else\n#include <ws2tcpip.h>\n#endif\n\nconst char yes = 1;\n\nclass NetworkServer\n{\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : controllers(control)\n    {\n        host             = OPENRGB_SDK_HOST;\n        port_num         = OPENRGB_SDK_PORT;\n        server_online    = false;\n        server_listening = false;\n        for(int i = 0; i < MAXSOCK; i++)\n        {\n            ConnectionThread[i] = nullptr;\n        }\n        profile_manager  = nullptr;\n    }\n\n    ~NetworkServer()\n    {\n        StopServer();\n    }\n\n    void StartServer()\n    {\n        int err;\n        struct addrinfo hints, *res, *result;\n\n        char port_str[6];\n        snprintf(port_str, 6, \"%d\", port_num);\n\n        socket_count = 0;\n\n#ifdef WIN32\n        if(WSAStartup(MAKEWORD(2, 2), &wsa) != NO_ERROR)\n        {\n            WSACleanup();\n            return;\n        }\n#endif\n\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_flags = AI_PASSIVE;\n        err = getaddrinfo(host.c_str(), port_str, &hints, &result);\n\n        if(err)\n        {\n            LOG_ERROR(\"NetworkServer: Unable to get address.\");\n            WSACleanup();\n            return;\n        }\n\n        for(res = result; res && socket_count < MAXSOCK; res = res->ai_next)\n        {\n            server_sock[socket_count] = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n\n            if(server_sock[socket_count] == INVALID_SOCKET)\n            {\n                LOG_ERROR(\"NetworkServer: Network socket could not be created.\");\n                WSACleanup();\n                return;\n            }\n\n            if(bind(server_sock[socket_count], res->ai_addr, res->ai_addrlen) == SOCKET_ERROR)\n            {\n                if(errno == EADDRINUSE)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Is port %hu already being used?\", GetPort());\n                }\n                else if(errno == EACCES)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Access to socket was denied.\");\n                }\n                else if(errno == EBADF)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. sockfd is not a valid file descriptor.\");\n                }\n                else if(errno == EINVAL)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The socket is already bound to an address, or addrlen is wrong, or addr is not a valid address for this socket's domain.\");\n                }\n                else if(errno == ENOTSOCK)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The file descriptor sockfd does not refer to a socket.\");\n                }\n                else\n                {\n                    LOG_ERROR(\"NetworkManager: Could not bind network socket. Error code: %d.\", errno);\n                }\n\n                WSACleanup();\n                return;\n            }\n\n            setsockopt(server_sock[socket_count], IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            socket_count += 1;\n        }\n\n        freeaddrinfo(result);\n        server_online = true;\n\n        for(int curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            ConnectionThread[curr_socket] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, curr_socket);\n            ConnectionThread[curr_socket]->detach();\n        }\n    }\n\n    void StopServer()\n    {\n        int curr_socket;\n        server_online = false;\n\n        ServerClientsMutex.lock();\n\n        for(unsigned int client_idx = 0; client_idx < ServerClients.size(); client_idx++)\n        {\n            delete ServerClients[client_idx];\n        }\n\n        ServerClients.clear();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            shutdown(server_sock[curr_socket], SD_RECEIVE);\n            closesocket(server_sock[curr_socket]);\n        }\n\n        ServerClientsMutex.unlock();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            if(ConnectionThread[curr_socket])\n            {\n                delete ConnectionThread[curr_socket];\n                ConnectionThread[curr_socket] = nullptr;\n            }\n        }\n\n        socket_count = 0;\n        ClientInfoChanged();\n    }\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx)\n    {\n        LOG_INFO(\"NetworkServer: Network connection thread started on port %hu\", GetPort());\n\n        while(server_online == true)\n        {\n            NetworkClientInfo * client_info = new NetworkClientInfo();\n\n            if(listen(server_sock[socket_idx], 10) < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                return;\n            }\n\n            server_listening = true;\n            ServerListeningChanged();\n\n            client_info->client_sock = accept_select((int)server_sock[socket_idx]);\n\n            if(client_info->client_sock < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                server_listening = false;\n                ServerListeningChanged();\n                return;\n            }\n\n            u_long arg = 0;\n            ioctlsocket(client_info->client_sock, FIONBIO, &arg);\n            setsockopt(client_info->client_sock, IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            struct sockaddr_storage tmp_addr;\n            char ipstr[INET6_ADDRSTRLEN];\n            socklen_t len;\n            len = sizeof(tmp_addr);\n            getpeername(client_info->client_sock, (struct sockaddr*)&tmp_addr, &len);\n\n            if(tmp_addr.ss_family == AF_INET)\n            {\n                struct sockaddr_in *s_4 = (struct sockaddr_in *)&tmp_addr;\n                inet_ntop(AF_INET, &s_4->sin_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n            else\n            {\n                struct sockaddr_in6 *s_6 = (struct sockaddr_in6 *)&tmp_addr;\n                inet_ntop(AF_INET6, &s_6->sin6_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n\n            ServerClientsMutex.lock();\n            client_info->client_listen_thread = new std::thread(&NetworkServer::ListenThreadFunction, this, client_info);\n            client_info->client_listen_thread->detach();\n            ServerClients.push_back(client_info);\n            ServerClientsMutex.unlock();\n            ClientInfoChanged();\n        }\n\n        LOG_INFO(\"NetworkServer: Connection thread closed\");\n        server_online = false;\n        server_listening = false;\n        ServerListeningChanged();\n    }\n\n    int accept_select(int sockfd)\n    {\n        fd_set              set;\n        struct timeval      timeout;\n\n        while(1)\n        {\n            timeout.tv_sec          = TCP_TIMEOUT_SECONDS;\n            timeout.tv_usec         = 0;\n\n            FD_ZERO(&set);\n            FD_SET(sockfd, &set);\n\n            int rv = select(sockfd + 1, &set, NULL, NULL, &timeout);\n\n            if(rv == SOCKET_ERROR || server_online == false)\n            {\n                return -1;\n            }\n            else if(rv == 0)\n            {\n                continue;\n            }\n            else\n            {\n                return(accept((int)sockfd, NULL, NULL));\n            }\n        }\n    }\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nstruct NetworkClientInfo {\n    // Placeholder for NetworkClientInfo structure\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // StartServer implementation\n    }\n\n    void StopServer() {\n        // StopServer implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // ConnectionThreadFunction implementation\n    }\n\n    int accept_select(int sockfd) {\n        // accept_select implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // ClientInfoChanged implementation\n    }\n\n    void ServerListeningChanged() {\n        // ServerListeningChanged implementation\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // ListenThreadFunction implementation\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nstruct NetworkClientInfo {\n    int socket;\n    sockaddr_in address;\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Initialize server with controller references\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start the server, create sockets, bind to address, and begin listening for connections\n    }\n\n    void StopServer() {\n        // Stop the server, close all connections, and clean up threads\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Thread function that handles incoming connections for a specific socket\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function that implements timeout-based socket acceptance\n        return 0; // Placeholder return value\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Thread function that handles communication with a specific client\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Implementation details for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Listen thread function implementation\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Initialize server with controller references\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start the server, create sockets, bind to address, and begin listening for connections\n        server_online = true;\n        server_listening = true;\n        // Socket creation and binding logic here\n    }\n\n    void StopServer() {\n        // Stop the server, close all connections, and clean up threads\n        server_online = false;\n        server_listening = false;\n        // Cleanup logic here\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Thread function that handles incoming connections for a specific socket\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function that implements timeout-based socket acceptance\n        return 0; // Placeholder return value\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Thread function that handles communication with a specific client\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Implementation details for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Listen thread function implementation\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nclass NetworkClientInfo {\n    // Placeholder for NetworkClientInfo class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // StartServer implementation\n    }\n\n    void StopServer() {\n        // StopServer implementation\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // ConnectionThreadFunction implementation\n    }\n\n    int accept_select(int sockfd) {\n        // accept_select implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // ClientInfoChanged implementation\n    }\n\n    void ServerListeningChanged() {\n        // ServerListeningChanged implementation\n    }\n\n    void ListenThreadFunction(NetworkClientInfo* client_info) {\n        // ListenThreadFunction implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nclass NetworkClientInfo {\n    // Placeholder for NetworkClientInfo class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Initialize server with controller references\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start the server, create sockets, bind to address, and begin listening for connections\n    }\n\n    void StopServer() {\n        // Stop the server, close all connections, and clean up threads\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Thread function that handles incoming connections for a specific socket\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function that implements timeout-based socket acceptance\n        return 0; // Placeholder return value\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Thread function that handles communication with a specific client\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Implementation details for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Initialize server with controller references\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start the server, create sockets, bind to address, and begin listening for connections\n    }\n\n    void StopServer() {\n        // Stop the server, close all connections, and clean up threads\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Thread function that handles incoming connections for a specific socket\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function that implements timeout-based socket acceptance\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Thread function that handles communication with a specific client\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nclass NetworkClientInfo {\n    // Placeholder for NetworkClientInfo class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Initialize server with controller references\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start the server, create sockets, bind to address, and begin listening for connections\n    }\n\n    void StopServer() {\n        // Stop the server, close all connections, and clean up threads\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Thread function that handles incoming connections for a specific socket\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function that implements timeout-based socket acceptance\n        return 0; // Placeholder return value\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n\n    void ListenThreadFunction(NetworkClientInfo* client_info) {\n        // Thread function that handles communication with a specific client\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nclass NetworkClientInfo {\n    // Placeholder for NetworkClientInfo class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control) : server_online(false), server_listening(false), socket_count(0) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // StartServer implementation\n    }\n\n    void StopServer() {\n        // StopServer implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // ConnectionThreadFunction implementation\n    }\n\n    int accept_select(int sockfd) {\n        // accept_select implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // ClientInfoChanged implementation\n    }\n\n    void ServerListeningChanged() {\n        // ServerListeningChanged implementation\n    }\n\n    void ListenThreadFunction(NetworkClientInfo* client_info) {\n        // ListenThreadFunction implementation\n    }\n\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Implement a TCP server in C++ that listens for incoming connections, handles client requests in separate child processes, and responds to clients after processing their data.\n\nFunction Description: The function `tcp_server_communication` creates a TCP server that binds to a specified port, listens for incoming connections, and forks child processes to handle each client connection. Each child process reads a character from the client, increments it after a delay, and sends it back before terminating.\n\nInput: None (The function uses predefined constants: port number 9736 and INADDR_ANY for binding to all available network interfaces)\n\nOutput: None (The function runs indefinitely, servicing client requests and doesn't return any value)\n\nNote: The function includes signal handling to prevent zombie processes from terminated child processes. Each client connection is handled in a separate child process while the parent process continues to accept new connections.",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <signal.h>\n\nvoid tcp_server_communication()\n{\n    int server_sockfd = -1;\n    int client_sockfd = -1;\n    int client_len = 0;\n    struct sockaddr_in server_addr;\n    struct sockaddr_in client_addr;\n    \n    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    server_addr.sin_port = htons(9736);\n    \n    bind(server_sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_sockfd, 5);\n    signal(SIGCHLD, SIG_IGN);\n\n    while(1)\n    {\n        char ch = '\\0';\n        client_len = sizeof(client_addr);\n        client_sockfd = accept(server_sockfd, (struct sockaddr*)&client_addr,\n                               (socklen_t *)&client_len);\n\n        if(fork() == 0)\n        {\n            read(client_sockfd, &ch, 1);\n            sleep(5);\n            ch++;\n            write(client_sockfd, &ch, 1);\n            close(client_sockfd);\n            exit(0);\n        }\n        else\n        {\n            close(client_sockfd);\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler to prevent zombie processes\n    signal(SIGCHLD, [](int sig) {\n        while (waitpid(-1, NULL, WNOHANG) > 0);\n    });\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++;\n            sleep(1); // Simulate some processing time\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        }\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler to prevent zombie processes\n    signal(SIGCHLD, [](int signum) {\n        while (waitpid(-1, NULL, WNOHANG) > 0);\n    });\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++;\n            sleep(1); // Simulate processing delay\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        } else {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler to prevent zombie processes\n    signal(SIGCHLD, [](int signum) {\n        while (waitpid(-1, NULL, WNOHANG) > 0);\n    });\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            sleep(1); // Simulate processing delay\n            buffer[0]++;\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(0);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        } else {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        }\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nint tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler for SIGCHLD to clean up child processes\n    struct sigaction sa;\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++; // Increment the character\n            sleep(1); // Simulate some processing delay\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        } else {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler to prevent zombie processes\n    signal(SIGCHLD, [](int signum) {\n        while (waitpid(-1, NULL, WNOHANG) > 0);\n    });\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++;\n            sleep(1); // Simulate processing delay\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        }\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler to prevent zombie processes\n    signal(SIGCHLD, [](int signum) {\n        while (waitpid(-1, NULL, WNOHANG) > 0);\n    });\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++;\n            sleep(1); // Simulate some processing delay\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(0);\n        } else if (pid > 0) {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        } else {\n            perror(\"fork\");\n            close(new_socket);\n        }\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int s) {\n    while(waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nint tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler for SIGCHLD to prevent zombie processes\n    struct sigaction sa;\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while(true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid == 0) {\n            close(server_fd); // Child doesn't need the listener\n            read(new_socket, buffer, 1);\n            buffer[0]++;\n            sleep(1); // Simulate processing delay\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(0);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        } else {\n            close(new_socket); // Parent doesn't need this\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <sys/wait.h>\n#include <signal.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int s) {\n    while(waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    struct sigaction sa;\n    sa.sa_handler = sigchld_handler; // reap all dead processes\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while(1) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n        pid = fork();\n        if (pid == 0) {\n            close(server_fd); // child doesn't need the listener\n            read(new_socket, buffer, 1);\n            sleep(1); // simulate some processing time\n            buffer[0]++;\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        }\n        close(new_socket); // parent doesn't need this\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid signal_handler(int sig) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nint tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler for SIGCHLD to clean up child processes\n    signal(SIGCHLD, signal_handler);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++; // Increment the character\n            sleep(1); // Simulate some processing time\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(0);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        } else {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nint tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1] = {0};\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Signal handler for SIGCHLD to clean up zombie processes\n    struct sigaction sa;\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid == 0) {\n            // Child process\n            close(server_fd); // Close listening socket in child\n            read(new_socket, buffer, 1);\n            buffer[0]++;\n            sleep(1); // Simulate processing delay\n            send(new_socket, buffer, 1, 0);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else if (pid > 0) {\n            // Parent process\n            close(new_socket); // Close connected socket in parent\n        } else {\n            perror(\"fork\");\n            close(new_socket);\n        }\n    }\n\n    close(server_fd);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a TCP server using UNIX domain sockets for inter-process communication that manages and provides access to statistics data. The server should handle multiple client connections concurrently, process different types of requests (get, reset, etc.), and maintain thread safety.\n\nClass Description: The Stats class implements a TCP server using UNIX domain sockets to manage and provide access to statistics data. It handles client connections, processes requests, and maintains thread safety for concurrent access to statistics.\n\nAttributes:\n- stats_socket_path_: std::string - Path to the UNIX domain socket file\n- sockfd_: int - File descriptor for the server socket\n- serv_addr_: sockaddr_un - Server address structure\n- stats_thread_: std::thread - Thread for running the socket server\n- statsThreadRunning_: std::atomic<bool> - Flag to control the server thread's execution\n- stats_mutex_: std::mutex - Mutex for protecting access to statistics data\n- thread_mutex_: std::mutex - Mutex for protecting thread count\n- thread_exited_: std::condition_variable - Condition variable for thread synchronization\n- thread_count_: int - Count of active threads\n- stats_: std::unordered_map<std::string, int> - Container for storing statistics data\n\nMethods:\n- Stats(const std::string& stats_socket_path) -> None - Constructor that initializes the socket server\n- ~Stats() -> None - Destructor that cleans up resources\n- get(const std::string& stats_socket_path) -> Stats& - Static method to get the singleton instance\n- get_for_unittest(const std::string& stats_socket_path) -> std::unique_ptr<Stats> - Static method to get an instance for unit testing\n- init(const std::string& stats_socket_path) -> bool - Static method to initialize the singleton\n- isInit() -> bool - Static method to check if the singleton is initialized\n- getAll() -> std::unordered_map<std::string, int> - Returns all statistics data\n- increment(const std::string& key, int val) -> int - Increments a statistic value\n- set(const std::string& key, int val) -> int - Sets a statistic value\n- reset() -> int - Resets all statistics\n- startSocket() -> bool - Starts the socket server\n- runSocket() -> void - Main server loop that accepts connections\n- processMsg(int sockfd) -> void - Processes a client message\n- isInitInternal() -> bool& - Internal static method for initialization status",
    "Canonical_solution": "#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <memory>\n#include <mutex>\n#include <string>\n#include <unordered_map>\n#include <json/value.h>\n\nnamespace Oomd {\n\nclass Stats {\npublic:\n  Stats(const std::string& stats_socket_path);\n  ~Stats();\n\n  static Stats& get(const std::string& stats_socket_path);\n  static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path);\n  static bool init(const std::string& stats_socket_path);\n  static bool isInit();\n\n  std::unordered_map<std::string, int> getAll();\n  int increment(const std::string& key, int val);\n  int set(const std::string& key, int val);\n  int reset();\n\nprivate:\n  bool startSocket();\n  void runSocket();\n  void processMsg(int sockfd);\n  static bool& isInitInternal();\n\n  std::string stats_socket_path_;\n  int sockfd_{-1};\n  sockaddr_un serv_addr_{};\n  std::thread stats_thread_;\n  std::atomic<bool> statsThreadRunning_{true};\n  std::mutex stats_mutex_;\n  std::unordered_map<std::string, int> stats_;\n  std::mutex thread_mutex_;\n  std::condition_variable thread_exited_;\n  int thread_count_{0};\n};\n\nStats::Stats(const std::string& stats_socket_path)\n    : stats_socket_path_(stats_socket_path) {\n  if (!this->startSocket()) {\n    throw std::runtime_error(\"Socket thread failed to start\");\n  }\n}\n\nStats::~Stats() {\n  std::array<char, 64> err_buf = {};\n  statsThreadRunning_ = false;\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  if (!thread_exited_.wait_for(lock, std::chrono::seconds(5), [this] {\n        return this->thread_count_ == 0;\n      })) {\n    OCHECK(false);\n  }\n  lock.unlock();\n  if (stats_thread_.joinable()) {\n    stats_thread_.join();\n  }\n  if (::unlink(serv_addr_.sun_path) < 0) {\n    OLOG << \"Closing stats error: unlinking socket path: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  if (::close(sockfd_) < 0) {\n    OLOG << \"Closing stats error: closing stats socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n}\n\nbool Stats::startSocket() {\n  std::array<char, 64> err_buf = {};\n\n  sockfd_ = ::socket(AF_UNIX, SOCK_STREAM, 0);\n  if (sockfd_ < 0) {\n    OLOG << \"Error creating socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size() - 1);\n    return false;\n  }\n  ::memset(&serv_addr_, '\\0', sizeof(serv_addr_));\n  serv_addr_.sun_family = AF_UNIX;\n  ::strcpy(serv_addr_.sun_path, stats_socket_path_.c_str());\n  if (::unlink(serv_addr_.sun_path) < 0 && errno != ENOENT) {\n    OLOG << \"Pre-unlinking of socket path failed. \" << serv_addr_.sun_path\n         << \". Errno: \" << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n    OLOG << \"Error binding stats collection socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::listen(sockfd_, 5) < 0) {\n    OLOG << \"Error listening at socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  stats_thread_ = std::thread([this] { this->runSocket(); });\n  return true;\n}\n\nvoid Stats::runSocket() {\n  sockaddr_un cli_addr;\n  socklen_t clilen = sizeof(cli_addr);\n  std::array<char, 64> err_buf = {};\n  while (statsThreadRunning_) {\n    int sockfd = ::accept(sockfd_, (struct sockaddr*)&cli_addr, &clilen);\n    if (sockfd < 0) {\n      OLOG << \"Stats server error: accepting connection: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      continue;\n    }\n    std::unique_lock<std::mutex> lock(thread_mutex_);\n    ++thread_count_;\n    std::thread msg_thread_ =\n        std::thread([this, sockfd] { this->processMsg(sockfd); });\n    msg_thread_.detach();\n    lock.unlock();\n    thread_exited_.notify_one();\n  }\n}\n\nvoid Stats::processMsg(int sockfd) {\n  std::array<char, 64> err_buf = {};\n  OOMD_SCOPE_EXIT {\n    if (::close(sockfd) < 0) {\n      OLOG << \"Stats server error: closing file descriptor: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    }\n  };\n  char mode = 'a';\n  char byte_buf;\n  int num_read = 0;\n  for (; num_read < 32; num_read++) {\n    int res = ::read(sockfd, &byte_buf, 1);\n    if (res < 0) {\n      OLOG << \"Stats server error: reading from socket: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      return;\n    } else if (res == 0) {\n      break;\n    }\n    if (byte_buf == '\\n' || byte_buf == '\\0') {\n      break;\n    }\n    if (num_read == 0) {\n      mode = byte_buf;\n    }\n  }\n\n  Json::Value root;\n  root[\"error\"] = 0;\n  Json::Value body(Json::objectValue);\n  switch (mode) {\n    case 'g':\n      for (auto const& pair : getAll()) {\n        body[pair.first] = pair.second;\n      }\n      break;\n    case 'r':\n      Stats::reset();\n      break;\n    case '0':\n      break;\n    default:\n      root[\"error\"] = 1;\n      OLOG << \"Stats server error: received unknown request: \" << mode;\n  }\n  root[\"body\"] = body;\n  std::string ret = root.toStyledString();\n  if (Util::writeFull(sockfd, ret.c_str(), strlen(ret.c_str())) < 0) {\n    OLOG << \"Stats server error: writing to socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  thread_count_--;\n  lock.unlock();\n  thread_exited_.notify_one();\n}\n\n} // namespace Oomd",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        stats_thread_.join();\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            perror(\"socket\");\n            return;\n        }\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            perror(\"bind\");\n            close(sockfd_);\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            perror(\"listen\");\n            close(sockfd_);\n            return;\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                if (statsThreadRunning_) {\n                    perror(\"accept\");\n                }\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                close(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, val] : stats_) {\n                    write(sockfd, key.c_str(), key.size());\n                    write(sockfd, \" \", 1);\n                    write(sockfd, std::to_string(val).c_str(), std::to_string(val).size());\n                    write(sockfd, \"\\n\", 1);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                write(sockfd, \"RESET OK\\n\", 9);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        initSocket();\n    }\n\n    void initSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n                close(newsockfd);\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, val] : stats_) {\n                    write(sockfd, key.c_str(), key.size());\n                    write(sockfd, \": \", 2);\n                    write(sockfd, std::to_string(val).c_str(), std::to_string(val).size());\n                    write(sockfd, \"\\n\", 1);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                write(sockfd, \"RESET OK\\n\", 9);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static bool initialized = false;\n        if (!initialized) {\n            new Stats(stats_socket_path);\n            initialized = true;\n        }\n        return initialized;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        initSocket();\n    }\n\n    void initSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n                close(newsockfd);\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, value] : stats_) {\n                    std::string response = key + \":\" + std::to_string(value) + \"\\n\";\n                    write(sockfd, response.c_str(), response.size());\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                write(sockfd, \"RESET OK\\n\", 9);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_{false};\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        initSocket();\n    }\n\n    void initSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n                close(newsockfd);\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, value] : stats_) {\n                    write(sockfd, key.c_str(), key.size());\n                    write(sockfd, \":\", 1);\n                    write(sockfd, std::to_string(value).c_str(), std::to_string(value).size());\n                    write(sockfd, \"\\n\", 1);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                write(sockfd, \"RESET OK\\n\", 9);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_{false};\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        initSocket();\n    }\n\n    void initSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n                close(newsockfd);\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, val] : stats_) {\n                    std::string response = key + \":\" + std::to_string(val) + \"\\n\";\n                    write(sockfd, response.c_str(), response.size());\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                write(sockfd, \"RESET OK\\n\", 9);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        stats_thread_.join();\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        initSocket();\n    }\n\n    void initSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                --thread_count_;\n                thread_exited_.notify_one();\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, value] : stats_) {\n                    send(sockfd, key.c_str(), key.size(), 0);\n                    send(sockfd, \":\", 1, 0);\n                    send(sockfd, std::to_string(value).c_str(), std::to_string(value).size(), 0);\n                    send(sockfd, \"\\n\", 1, 0);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                send(sockfd, \"RESET OK\\n\", 9, 0);\n            }\n        }\n        close(sockfd);\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_{false};\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        stats_thread_.join();\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Error opening socket\");\n        }\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            throw std::runtime_error(\"Error on binding\");\n        }\n\n        listen(sockfd_, 5);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                close(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            return;\n        }\n        buffer[n] = '\\0';\n\n        std::string request(buffer);\n        if (request == \"GET\") {\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            for (const auto& [key, value] : stats_) {\n                std::string response = key + \":\" + std::to_string(value) + \"\\n\";\n                write(sockfd, response.c_str(), response.size());\n            }\n        } else if (request == \"RESET\") {\n            reset();\n            write(sockfd, \"RESET OK\\n\", 9);\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            auto instance = get_for_unittest(stats_socket_path);\n            if (instance->startSocket()) {\n                instance.release();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {}\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (sockfd_ != -1) {\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n        stats_thread_.join();\n    }\n\n    bool startSocket() {\n        if ((sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {\n            perror(\"socket\");\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            perror(\"bind\");\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) == -1) {\n            perror(\"listen\");\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, (struct sockaddr *)&cli_addr, &clilen);\n            if (newsockfd < 0) {\n                perror(\"accept\");\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                thread_count_++;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                close(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    thread_count_--;\n                    thread_exited_.notify_one();\n                }\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, value] : stats_) {\n                    write(sockfd, key.c_str(), key.size());\n                    write(sockfd, \": \", 2);\n                    write(sockfd, std::to_string(value).c_str(), std::to_string(value).size());\n                    write(sockfd, \"\\n\", 1);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                write(sockfd, \"RESET OK\\n\", 9);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static bool initialized = false;\n        if (!initialized) {\n            new Stats(stats_socket_path);\n            initialized = true;\n        }\n        return initialized;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                --thread_count_;\n                thread_exited_.notify_one();\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET_ALL\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, val] : stats_) {\n                    send(sockfd, key.c_str(), key.size(), 0);\n                    send(sockfd, \":\", 1, 0);\n                    send(sockfd, std::to_string(val).c_str(), std::to_string(val).size(), 0);\n                    send(sockfd, \"\\n\", 1, 0);\n                }\n            } else if (request.substr(0, 6) == \"INCREMENT\") {\n                size_t pos = request.find(' ');\n                if (pos != std::string::npos) {\n                    std::string key = request.substr(7, pos - 7);\n                    int val = std::stoi(request.substr(pos + 1));\n                    increment(key, val);\n                }\n            } else if (request.substr(0, 3) == \"SET\") {\n                size_t pos = request.find(' ');\n                if (pos != std::string::npos) {\n                    std::string key = request.substr(4, pos - 4);\n                    int val = std::stoi(request.substr(pos + 1));\n                    set(key, val);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n            }\n        }\n        close(sockfd);\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_{false};\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static Stats* instance = nullptr;\n        if (!instance) {\n            instance = new Stats(stats_socket_path);\n        }\n        return true;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (statsThreadRunning_) {\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        close(sockfd_);\n        unlink(stats_socket_path_.c_str());\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), thread_count_(0) {\n        initSocket();\n    }\n\n    void initSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            throw std::runtime_error(\"Failed to bind socket\");\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            throw std::runtime_error(\"Failed to listen on socket\");\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            thread_count_++;\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                thread_count_--;\n                thread_exited_.notify_one();\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            if (request == \"GET\") {\n                std::lock_guard<std::mutex> lock(stats_mutex_);\n                for (const auto& [key, value] : stats_) {\n                    send(sockfd, key.c_str(), key.size(), 0);\n                    send(sockfd, \":\", 1, 0);\n                    send(sockfd, std::to_string(value).c_str(), std::to_string(value).size(), 0);\n                    send(sockfd, \"\\n\", 1, 0);\n                }\n            } else if (request == \"RESET\") {\n                reset();\n                send(sockfd, \"RESET OK\\n\", 9, 0);\n            }\n        }\n        close(sockfd);\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a UDP receiver class in C++ that listens for incoming UDP packets on a specified port, processes them, and forwards them to a network handling component. The class should handle socket creation, binding, and packet reception in a non-blocking manner using polling.\n\nClass Description: The `UDPRecv` class is responsible for setting up a UDP socket server that listens for incoming messages on a specified port. It uses polling to check for incoming data without blocking, and forwards received messages to a network handling component (`DFNetWork`). The class manages the socket lifecycle and provides methods to initialize, start, and stop the receiver.\n\nAttributes:\n- m_poDFNetWork: [DFNetWork*] - Pointer to the network handling component that processes received messages\n- m_iSockFD: [int] - File descriptor for the UDP socket\n- m_bIsEnd: [bool] - Flag indicating whether the receiver should stop running\n- m_bIsStarted: [bool] - Flag indicating whether the receiver has started\n\nMethods:\n- UDPRecv(DFNetWork* poDFNetWork) -> [void] - Constructor that initializes the receiver with a network handling component\n- ~UDPRecv() -> [void] - Destructor that closes the socket if it's open\n- Stop() -> [void] - Signals the receiver to stop and waits for it to finish\n- Init(int iPort) -> [int] - Initializes the UDP socket and binds it to the specified port (returns 0 on success, -1 on failure)\n- run() -> [void] - Main execution loop that polls for incoming messages and processes them (runs in a separate thread)",
    "Canonical_solution": "#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n#include \"dfnetwork.h\"\n\nnamespace phxpaxos {\n\nclass UDPRecv\n{\npublic:\n    UDPRecv(DFNetWork * poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(const int iPort);\n    void run();\n\nprivate:\n    DFNetWork * m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork * poDFNetWork) \n    : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false)\n{\n}\n\nUDPRecv::~UDPRecv()\n{\n    if (m_iSockFD != -1)\n    {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n    }\n}\n\nvoid UDPRecv::Stop()\n{\n    if (m_bIsStarted)\n    {\n        m_bIsEnd = true;\n        join();\n    }\n}\n\nint UDPRecv::Init(const int iPort)\n{\n    if ((m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0)) < 0) \n    {\n        return -1;\n    }\n\n    struct sockaddr_in addr;\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(iPort);\n    addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    int enable = 1;\n    setsockopt(m_iSockFD, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int));\n\n    if (bind(m_iSockFD, (struct sockaddr *)&addr, sizeof(addr)) < 0) \n    {\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run()\n{\n    m_bIsStarted = true;\n\n    char sBuffer[65536] = {0};\n\n    struct sockaddr_in addr;\n    socklen_t addr_len = sizeof(struct sockaddr_in);\n    memset(&addr, 0, sizeof(addr));\n\n    while(true)\n    {\n        if (m_bIsEnd)\n        {\n            return;\n        }\n\n        struct pollfd fd;\n        int ret;\n\n        fd.fd = m_iSockFD;\n        fd.events = POLLIN;\n        ret = poll(&fd, 1, 500);\n\n        if (ret == 0 || ret == -1)\n        {\n            continue;\n        }\n        \n        int iRecvLen = recvfrom(m_iSockFD, sBuffer, sizeof(sBuffer), 0,\n                (struct sockaddr *)&addr, &addr_len);\n\n        if (iRecvLen > 0)\n        {\n            m_poDFNetWork->OnReceiveMessage(sBuffer, iRecvLen);\n        }\n    }\n}\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 152,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for message processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            // Wait for the thread to finish\n            while (m_bIsStarted) {\n                std::this_thread::sleep_for(std::chrono::milliseconds(10));\n            }\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            m_thread.join();\n        }\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(iPort);\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    std::thread m_thread;\n\npublic:\n    void Start(int port) {\n        if (Init(port) == 0) {\n            m_thread = std::thread(&UDPRecv::run, this);\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for message processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted && m_iSockFD != -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        return 0;\n    }\n\n    void run() {\n        while (!m_bIsEnd) {\n            char buffer[1024];\n            sockaddr_in clientAddr;\n            socklen_t addrLen = sizeof(clientAddr);\n\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n        m_bIsStarted = false;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Processing message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted && m_iSockFD != -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        return 0;\n    }\n\n    void run() {\n        while (!m_bIsEnd) {\n            char buffer[1024];\n            sockaddr_in clientAddr;\n            socklen_t addrLen = sizeof(clientAddr);\n\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n        m_bIsStarted = false;\n    }\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(10));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            m_thread.join();\n        }\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    std::thread m_thread;\n\npublic:\n    void Start() {\n        m_thread = std::thread(&UDPRecv::run, this);\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            // Wait for the thread to finish\n            while (m_bIsStarted);\n        }\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Processing message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted && m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n        if (m_thread.joinable()) {\n            m_thread.join();\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        m_thread = std::thread(&UDPRecv::run, this);\n        return 0;\n    }\n\nprivate:\n    void run() {\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n    }\n\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    std::thread m_thread;\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(10));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, int length) {\n        // Placeholder for processing logic\n        std::cout << \"Received message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        Stop();\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n        }\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(10));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t addrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesRead = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &addrLen);\n            if (bytesRead > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, bytesRead);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};\n```"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a UDP server class using Boost.Asio that asynchronously receives datagrams and sends responses.\n\nClass Description: The udp_server class implements a UDP server that listens for incoming datagrams on a specified port and responds with a daytime string. It uses Boost.Asio for asynchronous network operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received message\n- recv_buffer_: [std::array<char, 1>] - Buffer for receiving incoming datagrams\n\nMethods:\n- udp_server([boost::asio::io_context&] io_context) -> [void] - Constructor that initializes the UDP socket and starts listening\n- start_receive() -> [void] - Begins asynchronous reception of UDP datagrams\n- handle_receive([const boost::system::error_code&] error) -> [void] - Callback for handling received datagrams and sending responses\n- handle_send([std::shared_ptr<std::string>] message) -> [void] - Callback for handling completed send operations",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error));\n  }\n\n  void handle_receive(const boost::system::error_code& error)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/)\n  {\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/)\n            {\n                if (!error || error == boost::asio::error::message_size)\n                    handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::string daytime = \"Daytime string\";\n            auto message = std::make_shared<std::string>(daytime);\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/)\n                {\n                    handle_send(message);\n                });\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No specific action needed after send completion\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(\n                make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\nprivate:\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(\n                make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\nprivate:\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>();\n            *message = make_daytime_string();\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>();\n            *message = make_daytime_string();\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(\n                make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(\n                make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>();\n            *message = make_daytime_string();\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                handle_receive(ec);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message =\n                std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](boost::system::error_code /*ec*/, std::size_t /*bytes_transferred*/) {\n                    // Handle send completion if needed\n                });\n\n            start_receive();\n        }\n    }\n\n    std::string make_daytime_string() {\n        using namespace std;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nClass Description: The `udp_server` class implements a UDP server that listens on a specified port (13 in this case) for incoming datagrams. When a datagram is received, it responds with the current daytime string. The class uses asynchronous operations for receiving and sending data.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received datagram\n- recv_buffer_: [std::array<char, 1>] - Buffer for storing received data\n\nMethods:\n- Constructor: [udp_server]([boost::asio::io_context& io_context]) -> [void] - Initializes the UDP socket and starts listening for incoming datagrams\n- start_receive: [start_receive]() -> [void] - Begins an asynchronous receive operation on the socket\n- handle_receive: [handle_receive]([const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a receive operation and initiates a response\n- handle_send: [handle_send]([std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a send operation\n- make_daytime_string: [make_daytime_string]() -> [std::string] - Generates and returns the current daytime string",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error,\n          boost::asio::placeholders::bytes_transferred));\n  }\n\n  void handle_receive(const boost::system::error_code& error,\n      std::size_t /*bytes_transferred*/)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message,\n            boost::asio::placeholders::error,\n            boost::asio::placeholders::bytes_transferred));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n      const boost::system::error_code& /*error*/,\n      std::size_t /*bytes_transferred*/)\n  {\n  }\n\n  std::string make_daytime_string()\n  {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_recvd*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                    handle_send(message, error, bytes_sent);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_sent*/) {\n        // No-op for now\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_recvd*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                    handle_send(message, error, 0);\n                });\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_sent*/) {\n        // No-op for this example\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n        // No specific action needed for send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_recvd*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                    handle_send(message, error, 0);\n                });\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_sent*/) {\n        // No-op for this example\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/) {\n        // No specific action needed on send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_recvd*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                    handle_send(message, error, 0);\n                });\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_sent*/) {\n        // No specific action needed on send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n        // No specific action needed on send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n        // No specific action needed for send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n        // No specific action needed on send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_recvd*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [message](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                    handle_send(message, error, bytes_sent);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_sent*/) {\n        // No specific action needed for send completion\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(nullptr);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests to a specified base URL.\n\nClass Description: The HTTPClient class provides a simple interface for making HTTP GET requests to a given base URL. It handles libcurl initialization, request configuration, execution, and cleanup, while providing a method to append endpoints to the base URL and make requests.\n\nAttributes:\nbaseURL: std::string - The base URL to which endpoints will be appended for HTTP requests\n\nMethods:\nmakeRequest: makeRequest(const std::string& endpoint) -> std::string - Makes an HTTP GET request to the base URL plus the specified endpoint, returning the response as a string\nwrite_to_string: write_to_string(void* ptr, size_t size, size_t count, void* stream) -> size_t - Static callback function for libcurl to write response data into a string",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <sstream>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseUrl) : baseURL(baseUrl) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string URL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, URL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, 0, size*count);\n        return size*count;\n    }\n\n    std::string baseURL;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string url = baseURL + endpoint;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string url = baseURL + endpoint;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string url = baseURL + endpoint;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, 0, size*count);\n        return size * count;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            throw std::runtime_error(\"Failed to initialize libcurl\");\n        }\n\n        std::string fullURL = baseURL + endpoint;\n        std::string response;\n\n        curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &HTTPClient::write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            throw std::runtime_error(curl_easy_strerror(res));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        response->append(static_cast<char*>(ptr), size * count);\n        return size * count;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl;\n        CURLcode res;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            std::string url = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        size_t totalSize = size * nmemb;\n        std::string* buffer = static_cast<std::string*>(stream);\n        buffer->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL *curl;\n        CURLcode res;\n        std::string url = baseURL + endpoint;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n\n            res = curl_easy_perform(curl);\n\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return readBuffer;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, 0, size*count);\n        return size * count;\n    }\n\n    std::string baseURL;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that can asynchronously receive and send datagrams.\n\nClass Description: The `server` class represents a UDP server that listens on a specified port, receives incoming datagrams asynchronously, and sends responses back to the sender. It utilizes Boost.Asio for asynchronous I/O operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- sender_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last sender\n- max_length: [enum] - Maximum size of the receive buffer (1024 bytes)\n- data_: [char[max_length]] - Buffer for storing received data\n\nMethods:\n- server: [constructor](boost::asio::io_context& io_context, short port) -> void - Initializes the UDP socket and starts the receive operation\n- do_receive: [method]() -> void - Asynchronously receives data from clients and triggers do_send if data is received\n- do_send: [method](std::size_t length) -> void - Asynchronously sends the received data back to the sender",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n\nusing boost::asio::ip::udp;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port))\n  {\n    do_receive();\n  }\n\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t bytes_recvd)\n        {\n          if (!ec && bytes_recvd > 0)\n          {\n            do_send(bytes_recvd);\n          }\n          else\n          {\n            do_receive();\n          }\n        });\n  }\n\n  void do_send(std::size_t length)\n  {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/)\n        {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  enum { max_length = 1024 };\n  char data_[max_length];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                do_receive();\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                // Handle send completion if needed\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                do_receive();\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                // Handle send completion if needed\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                do_receive();\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n  enum { max_length = 1024 };\n\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n    do_receive();\n  }\n\n  void do_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length) {\n          if (!ec && length > 0) {\n            do_send(length);\n          }\n        });\n  }\n\n  void do_send(std::size_t length) {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n  enum { max_length = 1024 };\n\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n    do_receive();\n  }\n\n  void do_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length) {\n          if (!ec && length > 0) {\n            do_send(length);\n          }\n        });\n  }\n\n  void do_send(std::size_t length) {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                // Handle send completion if needed\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n  enum { max_length = 1024 };\n\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n    do_receive();\n  }\n\n  void do_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length) {\n          if (!ec && length > 0) {\n            do_send(length);\n          }\n        });\n  }\n\n  void do_send(std::size_t length) {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    enum { max_length = 1024 };\n\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*length*/) {\n                do_receive();\n            });\n    }\n\nprivate:\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Implement a UDP server using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nFunction Description: The function `udp_server` creates a UDP server that listens on port 13 (daytime protocol port). When it receives any datagram from a client, it responds with the current time in string format. The server runs indefinitely until an exception occurs.\n\nInput: None\n\nOutput: None (The function runs indefinitely and sends responses to clients, but doesn't return any value)",
    "Canonical_solution": "#include <array>\n#include <string>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string()\n{\n  using namespace std;\n  time_t now = time(0);\n  return ctime(&now);\n}\n\nvoid udp_server()\n{\n  try\n  {\n    boost::asio::io_context io_context;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n    for (;;)\n    {\n      std::array<char, 1> recv_buf;\n      udp::endpoint remote_endpoint;\n      socket.receive_from(boost::asio::buffer(recv_buf), remote_endpoint);\n\n      std::string message = make_daytime_string();\n\n      boost::system::error_code ignored_error;\n      socket.send_to(boost::asio::buffer(message),\n          remote_endpoint, 0, ignored_error);\n    }\n  }\n  catch (std::exception& e)\n  {\n    std::cerr << e.what() << std::endl;\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            socket.send_to(boost::asio::buffer(message), remote_endpoint);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            socket.send_to(boost::asio::buffer(message), remote_endpoint);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n            socket.send_to(boost::asio::buffer(message), remote_endpoint);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is: \";\n            message += std::ctime(&std::time(nullptr));\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            udp::endpoint remote_endpoint;\n            char data[1024];\n            size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n\n            std::string message = \"The current time is \";\n            message += std::ctime(&std::time(nullptr));\n            message.pop_back(); // Remove newline character\n\n            boost::asio::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a UDP multicast sender class using Boost.Asio that periodically sends messages to a specified multicast address.\n\nClass Description: The `sender` class encapsulates functionality for sending UDP multicast messages at regular intervals. It uses Boost.Asio for asynchronous network operations and timer management.\n\nAttributes:\n- endpoint_: [boost::asio::ip::udp::endpoint] - The multicast endpoint (address + port) to send messages to\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for sending messages\n- timer_: [boost::asio::steady_timer] - Timer used to schedule message sends\n- message_count_: [int] - Counter tracking the number of messages sent\n- message_: [std::string] - The current message content to be sent\n\nMethods:\n- sender([boost::asio::io_context&] io_context, [const boost::asio::ip::address&] multicast_address) -> [void] - Constructor that initializes the sender with IO context and multicast address\n- do_send() -> [void] - Asynchronously sends the current message to the multicast endpoint\n- do_timeout() -> [void] - Sets up a timer to schedule the next message send after a delay",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <string>\n#include <chrono>\n\nclass sender\n{\npublic:\n  sender(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, multicast_port),\n      socket_(io_context, endpoint_.protocol()),\n      timer_(io_context),\n      message_count_(0)\n  {\n    do_send();\n  }\n\nprivate:\n  void do_send()\n  {\n    std::ostringstream os;\n    os << \"Message \" << message_count_++;\n    message_ = os.str();\n\n    socket_.async_send_to(\n        boost::asio::buffer(message_), endpoint_,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && message_count_ < max_message_count)\n            do_timeout();\n        });\n  }\n\n  void do_timeout()\n  {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait(\n        [this](boost::system::error_code ec)\n        {\n          if (!ec)\n            do_send();\n        });\n  }\n\nprivate:\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*bytes_sent*/) {\n                if (!ec) {\n                    std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                    ++message_count_;\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                do_send();\n                do_timeout();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*bytes_sent*/) {\n                if (!ec) {\n                    std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                do_send();\n                ++message_count_;\n                do_timeout();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(endpoint_);\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*bytes_sent*/) {\n                if (!ec) {\n                    std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                } else {\n                    std::cerr << \"Send failed: \" << ec.message() << \"\\n\";\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                ++message_count_;\n                do_send();\n                do_timeout();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                ++message_count_;\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            if (!ec) {\n                ++message_count_;\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                ++message_count_;\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(endpoint_);\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*bytes_sent*/) {\n                if (!ec) {\n                    std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                    ++message_count_;\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                do_send();\n                do_timeout();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                std::cout << \"Message \" << message_count_ << \" sent\" << std::endl;\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                ++message_count_;\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(endpoint_);\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*bytes_sent*/) {\n                if (!ec) {\n                    std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code ec) {\n            if (!ec) {\n                ++message_count_;\n                do_send();\n                do_timeout();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 12345),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_timeout();\n    }\n\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_),\n            endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                std::cout << \"Message \" << message_count_ << \" sent\\n\";\n                ++message_count_;\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a UDP echo server using Boost.Asio that listens on a specified port, receives incoming datagrams, and sends them back to the sender.\n\nFunction Description: The function creates a UDP socket bound to a specified port, then enters an infinite loop where it receives datagrams from clients and echoes them back to the sender. This demonstrates basic UDP communication using Boost.Asio.\n\nInput:\n- io_context: boost::asio::io_context& - Reference to an I/O execution context that manages asynchronous operations\n- port: unsigned short - The port number on which the server should listen for incoming UDP datagrams\n\nOutput: None (The function runs indefinitely in a loop, processing incoming datagrams)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\nenum { max_length = 1024 };\n\nvoid server(boost::asio::io_context& io_context, unsigned short port)\n{\n  udp::socket sock(io_context, udp::endpoint(udp::v4(), port));\n  for (;;)\n  {\n    char data[max_length];\n    udp::endpoint sender_endpoint;\n    size_t length = sock.receive_from(\n        boost::asio::buffer(data, max_length), sender_endpoint);\n    sock.send_to(boost::asio::buffer(data, length), sender_endpoint);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(\n            boost::asio::buffer(data, 1024), remote_endpoint);\n\n        socket.send_to(\n            boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(\n            boost::asio::buffer(data, 1024), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(boost::asio::buffer(data, 1024), sender_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(\n            boost::asio::buffer(data, 1024), remote_endpoint);\n\n        socket.send_to(\n            boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(\n            boost::asio::buffer(data, 1024), remote_endpoint);\n\n        socket.send_to(\n            boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(\n            boost::asio::buffer(data, 1024), remote_endpoint);\n\n        socket.send_to(\n            boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    char data[1024];\n\n    while (true) {\n        size_t length = socket.receive_from(boost::asio::buffer(data, 1024), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a UDP client communication function using Boost.Asio to send a message to a specified host and port, and receive a response.\n\nFunction Description: The function establishes a UDP client connection, sends a message to a specified server, and waits to receive a response. It uses Boost.Asio for asynchronous UDP operations.\n\nInput:\n- host: [std::string] - The hostname or IP address of the UDP server to connect to\n- port: [std::string] - The port number of the UDP server\n- message: [std::string] - The message to be sent to the server\n\nOutput: None (The function receives a reply from the server but doesn't return it. In a real implementation, you might want to return the reply or process it further.)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message)\n{\n    boost::asio::io_context io_context;\n    udp::socket s(io_context, udp::endpoint(udp::v4(), 0));\n    udp::resolver resolver(io_context);\n    udp::resolver::results_type endpoints = resolver.resolve(udp::v4(), host, port);\n\n    size_t request_length = message.length();\n    s.send_to(boost::asio::buffer(message, request_length), *endpoints.begin());\n\n    char reply[max_length];\n    udp::endpoint sender_endpoint;\n    size_t reply_length = s.receive_from(boost::asio::buffer(reply, max_length), sender_endpoint);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t len = socket.receive_from(boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, len);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer, 1024), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n\n    boost::asio::ip::udp::socket socket(io_context);\n    boost::asio::ip::udp::resolver resolver(io_context);\n    auto endpoints = resolver.resolve(host, port);\n\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    boost::asio::buffer buffer(message.data(), message.size());\n\n    socket.send_to(buffer, *endpoints.begin());\n\n    char recv_buffer[1024];\n    size_t length = socket.receive_from(boost::asio::buffer(recv_buffer), sender_endpoint);\n\n    std::cout << \"Received: \";\n    std::cout.write(recv_buffer, length);\n    std::cout << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char recv_buffer[1024];\n        size_t length = socket.receive_from(\n            boost::asio::buffer(recv_buffer), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(recv_buffer, length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::socket socket(io_context);\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, port);\n\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket.send_to(boost::asio::buffer(message), *endpoints.begin());\n\n        char reply[1024];\n        size_t reply_length = socket.receive_from(\n            boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Received: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that handles incoming UDP packets, processes them, and sends replies back to clients. The server should run asynchronously in a separate thread and provide a callback mechanism for handling incoming requests.\n\nClass Description: UDPServer::Impl is an implementation class for a UDP server that listens for incoming packets, validates them, and forwards valid packets to a callback function. It also provides functionality to send replies back to clients.\n\nAttributes:\n- worker_thread: std::thread - Thread that runs the IO context for asynchronous operations\n- io_context: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket: boost::asio::ip::udp::socket - UDP socket for communication\n- request_buffer: std::array<u8, MAX_PACKET_SIZE> - Buffer for storing incoming UDP packets\n- remote_endpoint: boost::asio::ip::udp::endpoint - Stores the endpoint of the last received packet\n- new_request_callback: std::function<void(std::unique_ptr<Packet>)> - Callback function for handling new valid packets\n\nMethods:\n- Impl(std::function<void(std::unique_ptr<Packet>)>) -> None - Constructor that initializes the UDP socket and starts the receive loop\n- ~Impl() -> None - Destructor that stops the IO context and joins the worker thread\n- StartReceive() -> None - Starts an asynchronous receive operation on the UDP socket\n- HandleReceive(const boost::system::error_code&, std::size_t) -> None - Handles received data, validates packets, and triggers the callback for valid packets\n- SendReply(boost::asio::ip::udp::endpoint, Packet&) -> None - Sends a reply packet back to the specified endpoint",
    "Canonical_solution": "#include <thread>\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include \"common/common_types.h\"\n#include \"common/logging/log.h\"\n#include \"core/rpc/packet.h\"\n\nnamespace Core::RPC {\n\nclass UDPServer::Impl {\npublic:\n    explicit Impl(std::function<void(std::unique_ptr<Packet>)> new_request_callback)\n        : socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 45987)),\n          new_request_callback(std::move(new_request_callback)) {\n\n        StartReceive();\n        worker_thread = std::thread([this] { io_context.run(); });\n    }\n\n    ~Impl() {\n        io_context.stop();\n        worker_thread.join();\n    }\n\nprivate:\n    void StartReceive() {\n        socket.async_receive_from(boost::asio::buffer(request_buffer), remote_endpoint,\n                                  [this](const boost::system::error_code& error, std::size_t size) {\n                                      HandleReceive(error, size);\n                                  });\n    }\n\n    void HandleReceive(const boost::system::error_code& error, std::size_t size) {\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to receive data on UDP socket: {}\", error.message());\n        } else if (size >= MIN_PACKET_SIZE && size <= MAX_PACKET_SIZE) {\n            PacketHeader header;\n            std::memcpy(&header, request_buffer.data(), sizeof(header));\n            if ((size - MIN_PACKET_SIZE) == header.packet_size) {\n                u8* data = request_buffer.data() + MIN_PACKET_SIZE;\n                std::function<void(Packet&)> send_reply_callback =\n                    std::bind(&Impl::SendReply, this, remote_endpoint, std::placeholders::_1);\n                std::unique_ptr<Packet> new_packet =\n                    std::make_unique<Packet>(header, data, send_reply_callback);\n\n                new_request_callback(std::move(new_packet));\n            }\n        } else {\n            LOG_WARNING(RPC_Server, \"Received message with wrong size: {}\", size);\n        }\n        StartReceive();\n    }\n\n    void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& reply_packet) {\n        std::vector<u8> reply_buffer(MIN_PACKET_SIZE + reply_packet.GetPacketDataSize());\n        auto reply_header = reply_packet.GetHeader();\n\n        std::memcpy(reply_buffer.data(), &reply_header, sizeof(reply_header));\n        std::memcpy(reply_buffer.data() + (4 * sizeof(u32)), reply_packet.GetPacketData().data(),\n                    reply_packet.GetPacketDataSize());\n\n        boost::system::error_code error;\n        socket.send_to(boost::asio::buffer(reply_buffer), endpoint, 0, error);\n\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to send reply: {}\", error.message());\n        } else {\n            LOG_INFO(RPC_Server, \"Sent reply version({}) id=({}) type=({}) size=({})\",\n                     reply_packet.GetVersion(), reply_packet.GetId(), reply_packet.GetPacketType(),\n                     reply_packet.GetPacketDataSize());\n        }\n    }\n\n    std::thread worker_thread;\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket;\n    std::array<u8, MAX_PACKET_SIZE> request_buffer;\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n};\n\n} // namespace Core::RPC",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the request_buffer into packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Serialize packet into buffer\n            std::array<u8, MAX_PACKET_SIZE> buffer;\n            // Fill buffer with packet data\n            socket.send_to(boost::asio::buffer(buffer, packet.size()), endpoint);\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback) : impl(callback) {}\n\nprivate:\n    Impl impl;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define the Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    using NewRequestCallback = std::function<void(std::unique_ptr<Packet>)>;\n\n    UDPServer(boost::asio::io_context& io_context, const std::string& address, unsigned short port, NewRequestCallback callback)\n        : impl_(std::make_unique<Impl>(io_context, address, port, std::move(callback))) {}\n\n    ~UDPServer() = default;\n\nprivate:\n    struct Impl {\n        Impl(boost::asio::io_context& io_context, const std::string& address, unsigned short port, NewRequestCallback callback)\n            : io_context_(io_context),\n              socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::make_address(address), port)),\n              new_request_callback_(std::move(callback)) {\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context_.stop();\n            if (worker_thread_.joinable()) {\n                worker_thread_.join();\n            }\n        }\n\n        void StartReceive() {\n            socket_.async_receive_from(\n                boost::asio::buffer(request_buffer_),\n                remote_endpoint_,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                // Validate and process the packet\n                auto packet = std::make_unique<Packet>();\n                // Assuming validation and processing logic here\n                new_request_callback_(std::move(packet));\n            }\n            StartReceive(); // Restart the receive operation\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket_.async_send_to(\n                boost::asio::buffer(packet.data(), packet.size()),\n                endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_sent*/) {\n                    // Handle send completion if needed\n                });\n        }\n\n        std::thread worker_thread_;\n        boost::asio::io_context& io_context_;\n        boost::asio::ip::udp::socket socket_;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer_;\n        boost::asio::ip::udp::endpoint remote_endpoint_;\n        NewRequestCallback new_request_callback_;\n    };\n\n    std::unique_ptr<Impl> impl_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the request_buffer into packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive(); // Restart receive operation\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Serialize packet into buffer\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            // ...\n            socket.send_to(boost::asio::buffer(reply_buffer), endpoint);\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n\n    std::shared_ptr<Impl> impl;\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback)\n        : impl(std::make_shared<Impl>(callback)) {}\n\n    ~UDPServer() = default;\n\n    void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n        impl->SendReply(endpoint, packet);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define Packet class as needed\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        static constexpr size_t MAX_PACKET_SIZE = 1024;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Validate and process the packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            socket.send_to(boost::asio::buffer(packet), endpoint);\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define the Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet data from request_buffer into packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Serialize packet into buffer and send\n            socket.send_to(boost::asio::buffer(/* serialized packet data */), endpoint);\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback) : impl(callback) {}\n\n    ~UDPServer() = default;\n\nprivate:\n    Impl impl;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <thread>\n#include <functional>\n#include <memory>\n#include <array>\n\nclass Packet {\n    // Define Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet data into the Packet object\n                new_request_callback(std::move(packet));\n            }\n            StartReceive(); // Restart receive operation\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Serialize packet data into buffer\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            // Fill reply_buffer with packet data\n            socket.send_to(boost::asio::buffer(reply_buffer), endpoint);\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    using Impl = UDPServer::Impl;\n\n    Impl* impl;\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback)\n        : impl(new Impl(callback)) {}\n\n    ~UDPServer() {\n        delete impl;\n    }\n\nprivate:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet data from request_buffer into packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Serialize packet data into buffer\n            std::array<u8, MAX_PACKET_SIZE> buffer;\n            // Fill buffer with packet data\n            socket.send_to(boost::asio::buffer(buffer, packet.size()), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define the Packet class as needed\n};\n\nconstexpr size_t MAX_PACKET_SIZE = 1024;\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet data from request_buffer into packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Serialize packet into buffer and send\n            socket.send_to(boost::asio::buffer(/* serialized packet data */), endpoint);\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback) : impl(callback) {}\n\nprivate:\n    Impl impl;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define the Packet class as needed\n};\n\nclass UDPServer {\npublic:\n    using Impl = UDPServer::Impl;\n\n    Impl* impl;\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback)\n        : impl(new Impl(callback)) {}\n\n    ~UDPServer() {\n        delete impl;\n    }\n\nprivate:\n    class Impl {\n    public:\n        static constexpr size_t MAX_PACKET_SIZE = 1024;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                // Validate and process the packet\n                auto packet = std::make_unique<Packet>();\n                // Assuming validation and processing logic here\n                new_request_callback(std::move(packet));\n            }\n            StartReceive(); // Restart receive operation\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            socket.send_to(boost::asio::buffer(packet), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include <thread>\n\nclass Packet {\n    // Define the Packet class as needed\n};\n\nclass UDPServer {\npublic:\n    using Impl = UDPServer::Impl;\n\n    Impl* impl;\n\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback)\n        : impl(new Impl(callback)) {}\n\n    ~UDPServer() {\n        delete impl;\n    }\n\nprivate:\n    class Impl {\n    public:\n        static constexpr size_t MAX_PACKET_SIZE = 1024;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              request_buffer(), remote_endpoint(), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                // Validate and process the packet\n                auto packet = std::make_unique<Packet>();\n                // Assuming validation and processing logic here\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            socket.send_to(boost::asio::buffer(packet), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a UDP multicast receiver class using Boost.Asio that listens for incoming datagrams on a specified multicast address and port, and prints received messages to the console.\n\nClass Description: The `receiver` class encapsulates functionality for receiving UDP multicast messages. It initializes a UDP socket, joins a multicast group, and asynchronously receives datagrams, printing their contents to standard output.\n\nAttributes:\n- socket_: boost::asio::ip::udp::socket - The UDP socket used for communication\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint of the sender of the last received message\n- data_: std::array<char, 1024> - Buffer for storing received data\n\nMethods:\n- receiver(boost::asio::io_context&, const boost::asio::ip::address&, const boost::asio::ip::address&) -> None - Constructor that initializes the socket, binds it to the listening address and port, joins the multicast group, and starts receiving\n- do_receive() -> None - Private method that asynchronously receives data and prints it to console, then continues listening for more data",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nconstexpr short multicast_port = 30001;\n\nclass receiver\n{\npublic:\n  receiver(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& listen_address,\n      const boost::asio::ip::address& multicast_address)\n    : socket_(io_context)\n  {\n    // Create the socket so that multiple may be bound to the same address.\n    boost::asio::ip::udp::endpoint listen_endpoint(\n        listen_address, multicast_port);\n    socket_.open(listen_endpoint.protocol());\n    socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n    socket_.bind(listen_endpoint);\n\n    // Join the multicast group.\n    socket_.set_option(\n        boost::asio::ip::multicast::join_group(multicast_address));\n\n    do_receive();\n  }\n\nprivate:\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            std::cout.write(data_.data(), length);\n            std::cout << std::endl;\n\n            do_receive();\n          }\n        });\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint sender_endpoint_;\n  std::array<char, 1024> data_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          sender_endpoint_(),\n          data_()\n    {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        socket_.bind(boost::asio::ip::udp::endpoint(listen_address, 0));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n          sender_endpoint_(),\n          data_()\n    {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        socket_.bind(boost::asio::ip::udp::endpoint(listen_address, 0));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                if (!error && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 12345)),\n          sender_endpoint_() {\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a UDP client function using Boost.Asio that sends a request to a UDP server and receives a response.\n\nFunction Description: The function establishes a UDP connection to a specified host, sends a minimal request packet, waits for a response, and prints the received data to standard output. It uses Boost.Asio for asynchronous UDP operations.\n\nInput: \n- host: std::string - The hostname or IP address of the UDP server to connect to\n\nOutput: \n- None (void function), but prints the received data to standard output\n\nNote: The function uses a fixed service name \"daytime\" (port 13) for demonstration purposes. In a real application, this would typically be configurable. The function handles both IPv4 and UDP protocol operations.",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host)\n{\n    boost::asio::io_context io_context;\n\n    udp::resolver resolver(io_context);\n    udp::endpoint receiver_endpoint =\n      *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n    udp::socket socket(io_context);\n    socket.open(udp::v4());\n\n    std::array<char, 1> send_buf  = {{ 0 }};\n    socket.send_to(boost::asio::buffer(send_buf), receiver_endpoint);\n\n    std::array<char, 128> recv_buf;\n    udp::endpoint sender_endpoint;\n    size_t len = socket.receive_from(\n        boost::asio::buffer(recv_buf), sender_endpoint);\n\n    std::cout.write(recv_buf.data(), len);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::resolver resolver(io_context);\n        udp::endpoint receiver_endpoint = *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n        udp::socket socket(io_context);\n        socket.open(udp::v4());\n\n        std::string request = \"Request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        udp::endpoint sender_endpoint;\n        size_t len = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout.write(reply, len);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::array<char, 1> send_buf = {{0}};\n        socket.send_to(boost::asio::buffer(send_buf), *endpoints.begin());\n\n        boost::array<char, 128> recv_buf;\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t len = socket.receive_from(\n            boost::asio::buffer(recv_buf), sender_endpoint);\n\n        std::cout.write(recv_buf.data(), len);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::resolver resolver(io_context);\n        udp::endpoint receiver_endpoint = *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n        udp::socket socket(io_context);\n        socket.open(udp::v4());\n\n        std::string request = \"Request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(\n            boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::array<char, 1> send_buf = {0};\n        socket.send_to(boost::asio::buffer(send_buf), *endpoints.begin());\n\n        std::array<char, 128> recv_buf;\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t len = socket.receive_from(\n            boost::asio::buffer(recv_buf), sender_endpoint);\n\n        std::cout.write(recv_buf.data(), len);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::resolver resolver(io_context);\n        udp::endpoint receiver_endpoint = *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n        udp::socket socket(io_context);\n        socket.open(udp::v4());\n\n        std::string request = \"Request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(\n            boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::resolver resolver(io_context);\n        udp::endpoint receiver_endpoint = *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n        udp::socket socket(io_context);\n        socket.open(udp::v4());\n\n        std::string request = \"Request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(\n            boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::resolver resolver(io_context);\n        udp::endpoint receiver_endpoint = *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n        udp::socket socket(io_context);\n        socket.open(udp::v4());\n\n        std::string request = \"Request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        udp::endpoint sender_endpoint;\n        size_t len = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout.write(reply, len);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    auto endpoints = resolver.resolve(host, \"daytime\");\n\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    char receive_buffer[1024];\n\n    // Send a minimal request packet\n    std::string request = \"Request\";\n    boost::asio::buffer_size(request.size());\n    socket.send_to(boost::asio::buffer(request), *endpoints.begin());\n\n    // Wait for a response\n    size_t length = socket.receive_from(\n        boost::asio::buffer(receive_buffer), sender_endpoint);\n\n    // Print the received data\n    std::cout.write(receive_buffer, length);\n    std::cout << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        auto endpoints = resolver.resolve(host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::array<char, 1> send_buf = {{0}};\n        socket.send_to(boost::asio::buffer(send_buf), *endpoints.begin());\n\n        boost::array<char, 128> recv_buf;\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t len = socket.receive_from(\n            boost::asio::buffer(recv_buf), sender_endpoint);\n\n        std::cout.write(recv_buf.data(), len);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::resolver resolver(io_context);\n        udp::endpoint receiver_endpoint = *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n        udp::socket socket(io_context);\n        socket.open(udp::v4());\n\n        std::string request = \"Request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        udp::endpoint sender_endpoint;\n        size_t len = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout.write(reply, len);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a UDP-based client-server communication system using Boost.Asio in C++ that demonstrates asynchronous sending and receiving of datagrams.\n\nClass Description: The `udp_communicator` class provides asynchronous UDP communication capabilities for both sending and receiving datagrams. It manages socket operations, IO context, and buffers for network communication.\n\nAttributes:\n- io_context_: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket_: boost::asio::ip::udp::socket - Represents the UDP socket for communication\n- receiver_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information for receiving data\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information of the sender\n- receive_buffer_: std::array<char, 1024> - Buffer for storing received data\n- send_buffer_: std::string - Buffer for storing data to be sent\n\nMethods:\n- constructor(io_context, port) -> void - Initializes the UDP socket and binds it to the specified port\n- start_receive() -> void - Begins asynchronous reception of UDP datagrams\n- handle_receive(error_code, bytes_transferred) -> void - Callback for handling received data\n- send_to(message, endpoint) -> void - Asynchronously sends a message to the specified endpoint\n- handle_send(error_code, bytes_transferred) -> void - Callback for handling send completion\n- get_socket() -> boost::asio::ip::udp::socket& - Returns a reference to the UDP socket\n- get_io_context() -> boost::asio::io_context& - Returns a reference to the IO context",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <istream>\n#include <ostream>\n#include \"icmp_header.hpp\"\n#include \"ipv4_header.hpp\"\n\nusing boost::asio::ip::icmp;\nusing boost::asio::steady_timer;\nnamespace chrono = boost::asio::chrono;\n\nclass pinger\n{\npublic:\n  pinger(boost::asio::io_context& io_context, const char* destination)\n    : resolver_(io_context), socket_(io_context, icmp::v4()),\n      timer_(io_context), sequence_number_(0), num_replies_(0)\n  {\n    destination_ = *resolver_.resolve(icmp::v4(), destination, \"\").begin();\n\n    start_send();\n    start_receive();\n  }\n\nprivate:\n  void start_send()\n  {\n    std::string body(\"\\\"Hello!\\\" from Asio ping.\");\n\n    icmp_header echo_request;\n    echo_request.type(icmp_header::echo_request);\n    echo_request.code(0);\n    echo_request.identifier(get_identifier());\n    echo_request.sequence_number(++sequence_number_);\n    compute_checksum(echo_request, body.begin(), body.end());\n\n    boost::asio::streambuf request_buffer;\n    std::ostream os(&request_buffer);\n    os << echo_request << body;\n\n    time_sent_ = steady_timer::clock_type::now();\n    socket_.send_to(request_buffer.data(), destination_);\n\n    num_replies_ = 0;\n    timer_.expires_at(time_sent_ + chrono::seconds(5));\n    timer_.async_wait(std::bind(&pinger::handle_timeout, this));\n  }\n\n  void handle_timeout()\n  {\n    if (num_replies_ == 0)\n      std::cout << \"Request timed out\" << std::endl;\n\n    timer_.expires_at(time_sent_ + chrono::seconds(1));\n    timer_.async_wait(std::bind(&pinger::start_send, this));\n  }\n\n  void start_receive()\n  {\n    reply_buffer_.consume(reply_buffer_.size());\n\n    socket_.async_receive(reply_buffer_.prepare(65536),\n        std::bind(&pinger::handle_receive, this, std::placeholders::_2));\n  }\n\n  void handle_receive(std::size_t length)\n  {\n    reply_buffer_.commit(length);\n\n    std::istream is(&reply_buffer_);\n    ipv4_header ipv4_hdr;\n    icmp_header icmp_hdr;\n    is >> ipv4_hdr >> icmp_hdr;\n\n    if (is && icmp_hdr.type() == icmp_header::echo_reply\n          && icmp_hdr.identifier() == get_identifier()\n          && icmp_hdr.sequence_number() == sequence_number_)\n    {\n      if (num_replies_++ == 0)\n        timer_.cancel();\n\n      chrono::steady_clock::time_point now = chrono::steady_clock::now();\n      chrono::steady_clock::duration elapsed = now - time_sent_;\n      std::cout << length - ipv4_hdr.header_length()\n        << \" bytes from \" << ipv4_hdr.source_address()\n        << \": icmp_seq=\" << icmp_hdr.sequence_number()\n        << \", ttl=\" << ipv4_hdr.time_to_live()\n        << \", time=\"\n        << chrono::duration_cast<chrono::milliseconds>(elapsed).count()\n        << std::endl;\n    }\n\n    start_receive();\n  }\n\n  static unsigned short get_identifier()\n  {\n#if defined(BOOST_ASIO_WINDOWS)\n    return static_cast<unsigned short>(::GetCurrentProcessId());\n#else\n    return static_cast<unsigned short>(::getpid());\n#endif\n  }\n\n  icmp::resolver resolver_;\n  icmp::endpoint destination_;\n  icmp::socket socket_;\n  steady_timer timer_;\n  unsigned short sequence_number_;\n  chrono::steady_clock::time_point time_sent_;\n  boost::asio::streambuf reply_buffer_;\n  std::size_t num_replies_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_),\n            receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::cout << \"Received \" << bytes_recvd << \" bytes from \"\n                      << receiver_endpoint_ << \": \"\n                      << std::string(receive_buffer_.data(), bytes_recvd) << \"\\n\";\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_),\n            endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (!error) {\n            std::cout << \"Message sent successfully\\n\";\n        } else {\n            std::cerr << \"Send failed: \" << error.message() << \"\\n\";\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(),\n          sender_endpoint_(),\n          receive_buffer_() {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received \" << bytes_recvd << \" bytes from \"\n                      << receiver_endpoint_ << \": \"\n                      << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n        }\n        start_receive(); // Continue receiving\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(),\n          sender_endpoint_(),\n          receive_buffer_() {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received message: \" << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n        }\n        start_receive(); // Continue receiving\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_),\n            receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::cout << \"Received \" << bytes_recvd << \" bytes from \"\n                      << receiver_endpoint_ << \": \"\n                      << std::string(receive_buffer_.data(), bytes_recvd) << \"\\n\";\n\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_),\n            endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (!error) {\n            std::cout << \"Message sent successfully\\n\";\n        } else {\n            std::cerr << \"Send failed: \" << error.message() << \"\\n\";\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_),\n            receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received message: \" << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n        }\n        start_receive(); // Continue listening for more messages\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_),\n            endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(),\n          sender_endpoint_(),\n          receive_buffer_() {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received: \" << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n            start_receive(); // Continue receiving\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received message: \" << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(),\n          sender_endpoint_(),\n          receive_buffer_(),\n          send_buffer_() {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received message: \" << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n            start_receive(); // Continue receiving\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(),\n          sender_endpoint_(),\n          receive_buffer_() {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received \" << bytes_recvd << \" bytes from \"\n                      << receiver_endpoint_ << \": \"\n                      << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(),\n          sender_endpoint_(),\n          receive_buffer_() {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                handle_receive(error, bytes_recvd);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n        if (!error && bytes_recvd > 0) {\n            std::cout << \"Received message: \" << std::string(receive_buffer_.data(), bytes_recvd) << std::endl;\n        }\n        start_receive(); // Continue listening for more messages\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_sent*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Implement a server class that handles both TCP and UDP communications using Boost.Asio, managing client subscriptions and broadcasting data frames to subscribed clients.\n\nClass Description: The `server` class manages network communications using both TCP and UDP protocols. It accepts TCP connections for control messages, maintains a set of subscribed UDP endpoints, and periodically broadcasts data frames to all subscribed clients via UDP.\n\nAttributes:\n- acceptor_: [tcp::acceptor] - Handles incoming TCP connections\n- timer_: [boost::asio::steady_timer] - Manages periodic operations\n- udp_socket_: [udp::socket] - Handles UDP communications\n- next_frame_number_: [unsigned long] - Tracks the sequence number for frames\n- subscribers_: [std::set<udp::endpoint>] - Stores subscribed client endpoints\n\nMethods:\n- server([boost::asio::io_context&] io_context, [unsigned short] port) -> [void] - Constructor that initializes the server with IO context and port\n- handle_accept([const boost::system::error_code&] ec, [tcp_socket_ptr] socket) -> [void] - Handles new TCP connection acceptances\n- handle_control_request([const boost::system::error_code&] ec, [tcp_socket_ptr] socket, [control_request_ptr] request) -> [void] - Processes control requests from clients\n- handle_control_request_timer([tcp_socket_ptr] socket, [control_request_ptr] request, [timer_ptr] delay_timer) -> [void] - Handles delayed processing of control requests\n- handle_timer() -> [void] - Periodically broadcasts data frames to subscribed clients",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include \"protocol.hpp\"\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\ntypedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\ntypedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\ntypedef std::shared_ptr<control_request> control_request_ptr;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, unsigned short port)\n    : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n      timer_(io_context),\n      udp_socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      next_frame_number_(1)\n  {\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\n  void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket)\n  {\n    if (!ec)\n    {\n      control_request_ptr request(new control_request);\n      boost::asio::async_read(*socket, request->to_buffers(),\n          std::bind(&server::handle_control_request, this,\n            boost::asio::placeholders::error, socket, request));\n    }\n\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n  }\n\n  void handle_control_request(const boost::system::error_code& ec,\n      tcp_socket_ptr socket, control_request_ptr request)\n  {\n    if (!ec)\n    {\n      timer_ptr delay_timer(\n          new boost::asio::steady_timer(acceptor_.get_executor()));\n      delay_timer->expires_after(boost::asio::chrono::seconds(2));\n      delay_timer->async_wait(\n          std::bind(&server::handle_control_request_timer, this,\n            socket, request, delay_timer));\n    }\n  }\n\n  void handle_control_request_timer(tcp_socket_ptr socket,\n      control_request_ptr request, timer_ptr /*delay_timer*/)\n  {\n    boost::system::error_code ec;\n    tcp::endpoint remote_endpoint = socket->remote_endpoint(ec);\n    if (!ec)\n    {\n      if (unsigned short old_port = request->old_port())\n      {\n        udp::endpoint old_endpoint(remote_endpoint.address(), old_port);\n        subscribers_.erase(old_endpoint);\n      }\n\n      if (unsigned short new_port = request->new_port())\n      {\n        udp::endpoint new_endpoint(remote_endpoint.address(), new_port);\n        subscribers_.insert(new_endpoint);\n      }\n    }\n\n    boost::asio::async_read(*socket, request->to_buffers(),\n        std::bind(&server::handle_control_request, this,\n          boost::asio::placeholders::error, socket, request));\n  }\n\n  void handle_timer()\n  {\n    double x = next_frame_number_ * 0.2;\n    double y = std::sin(x);\n    int char_index = static_cast<int>((y + 1.0) * (frame::payload_size / 2));\n    std::string payload;\n    for (int i = 0; i < frame::payload_size; ++i)\n      payload += (i == char_index ? '*' : '.');\n\n    frame f(next_frame_number_++, payload);\n\n    std::set<udp::endpoint>::iterator j;\n    for (j = subscribers_.begin(); j != subscribers_.end(); ++j)\n    {\n      boost::system::error_code ec;\n      udp_socket_.send_to(f.to_buffers(), *j, 0, ec);\n    }\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\nprivate:\n  tcp::acceptor acceptor_;\n  boost::asio::steady_timer timer_;\n  udp::socket udp_socket_;\n  unsigned long next_frame_number_;\n  std::set<udp::endpoint> subscribers_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle the control request\n            control_request_ptr request(new control_request());\n            boost::asio::async_read(*socket, boost::asio::buffer(request->data, request->size),\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request\n            // ...\n\n            // Delayed processing\n            timer_ptr delay_timer(new boost::asio::steady_timer(socket->get_executor().context(), boost::asio::chrono::seconds(1)));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Further processing after delay\n        // ...\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to all subscribers\n        data_frame frame;\n        // Populate frame with data\n        // ...\n\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(boost::asio::buffer(frame.data, frame.size), endpoint);\n        }\n\n        // Reschedule the timer\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle the control request\n            control_request_ptr request(new control_request());\n            boost::asio::async_read(*socket, boost::asio::buffer(request->data, request->size),\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request\n            // ...\n\n            // Delayed processing\n            timer_ptr delay_timer(new boost::asio::steady_timer(socket->get_executor().context(), boost::asio::chrono::seconds(1)));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (!delay_timer->expiry() <= boost::asio::chrono::steady_clock::now()) {\n            // Process the delayed control request\n            // ...\n        }\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to all subscribers\n        data_frame frame(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(boost::asio::buffer(frame.data, frame.size), endpoint);\n        }\n\n        // Reschedule the timer\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle control request\n            control_request_ptr request(new control_request());\n            boost::asio::async_read(*socket, boost::asio::buffer(request->data, request->size),\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process control request\n            timer_ptr delay_timer(new boost::asio::steady_timer(socket->get_executor().context()));\n            delay_timer->expires_after(boost::asio::chrono::seconds(1));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Delayed processing of control request\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to subscribed clients\n        data_frame frame(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(boost::asio::buffer(frame.data, frame.size), endpoint);\n        }\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle control request\n            control_request_ptr request(new control_request());\n            boost::asio::async_read_until(*socket, *request, \"\\n\",\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process control request\n            timer_ptr delay_timer(new boost::asio::steady_timer(socket->get_executor().context()));\n            delay_timer->expires_after(boost::asio::chrono::seconds(1));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Further processing of control request\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to subscribers\n        ++next_frame_number_;\n        std::string frame = \"Frame \" + std::to_string(next_frame_number_);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_->send_to(boost::asio::buffer(frame), endpoint);\n        }\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle the control request\n            control_request_ptr request(new control_request());\n            boost::asio::async_read(*socket, boost::asio::buffer(request->data, request->size),\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request\n            // ...\n\n            // Delayed processing\n            timer_ptr delay_timer(new boost::asio::steady_timer(socket->get_executor().context(), boost::asio::chrono::seconds(1)));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (!delay_timer->expiry() <= boost::asio::steady_timer::clock_type::now()) {\n            // Further process the control request\n            // ...\n        }\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to all subscribers\n        data_frame frame;\n        // Populate the frame with data\n        // ...\n\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(boost::asio::buffer(frame.data, frame.size), endpoint);\n        }\n\n        // Reschedule the timer\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle control request\n            control_request_ptr request(new control_request());\n            boost::asio::async_read(*socket, boost::asio::buffer(request->data, request->size),\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process control request\n            timer_ptr delay_timer(new boost::asio::steady_timer(socket->get_executor().context(), boost::asio::chrono::seconds(1)));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Delayed processing of control request\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to subscribers\n        data_frame frame(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(boost::asio::buffer(frame.data, frame.size), endpoint);\n        }\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n};\n\nstruct control_request {\n    char data[1024];\n    size_t size = sizeof(data);\n};\n\nstruct data_frame {\n    unsigned long number;\n    char data[1024];\n    size_t size = sizeof(data);\n\n    data_frame(unsigned long num) : number(num) {\n        // Initialize frame data\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle control request\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process control request\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (delay_timer->expiry() <= boost::asio::steady_timer::clock_type::now()) {\n            // Handle delayed control request\n        }\n    }\n\n    void handle_timer() {\n        // Broadcast data frame to subscribers\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle the accepted TCP connection\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (delay_timer->expiry() <= boost::asio::steady_timer::clock_type::now()) {\n            // Handle the delayed control request\n        }\n    }\n\n    void handle_timer() {\n        // Broadcast data frames to subscribed clients\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket, boost::bind(&server::handle_accept, this, boost::asio::placeholders::error, socket));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle the accepted socket\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (delay_timer->expiry() <= boost::asio::steady_timer::clock_type::now()) {\n            // Process the delayed control request\n        }\n    }\n\n    void handle_timer() {\n        // Broadcast data frames to subscribed clients\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    typedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\n    typedef std::shared_ptr<udp::socket> udp_socket_ptr;\n    typedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\n    typedef std::shared_ptr<control_request> control_request_ptr;\n\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            // Handle the accepted socket\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (delay_timer->expiry() <= boost::asio::steady_timer::clock_type::now()) {\n            // Handle the delayed control request\n        }\n    }\n\n    void handle_timer() {\n        // Broadcast data frames to subscribed clients\n        timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\nprivate:\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket, boost::bind(&server::handle_accept, this, boost::asio::placeholders::error, socket));\n    }\n};\n```"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Implement a class for handling HTTP file downloads using libcurl in C++. The class should support URL downloading with retries, temporary file handling, and proper resource management.\n\nClass Description: The DownloadTask class provides functionality to download files from HTTP URLs using libcurl. It handles initialization/cleanup of libcurl, manages download retries, writes data to temporary files, and performs final file operations upon successful download.\n\nAttributes:\n- m_url: [std::string] - Primary URL for file download\n- m_urlBackup: [std::string] - Backup URL if primary fails\n- m_output: [std::string] - Final output file path\n- m_outputTmp: [std::string] - Temporary file path during download\n- m_default: [std::string] - Default file path if download fails\n- m_mtime: [time_t] - Modification time to set on downloaded file\n- m_retries: [unsigned int] - Number of download attempts made\n- m_name: [std::string] - Name identifier for the download task\n- m_userAgent: [std::string] - User agent string for HTTP requests\n- m_error: [std::string] - Last error message encountered\n\nMethods:\n- initialize(): [static void]() -> void - Initializes libcurl global state\n- uninitialize(): [static void]() -> void - Cleans up libcurl global state\n- DownloadTask(): [constructor](const std::string&, const std::string&, const std::string&, time_t, const std::string&) -> DownloadTask - Constructs a download task with URL, output path, default file, modification time, and optional name\n- run(): [bool]() -> bool - Executes the download task and returns success status\n- getRetries(): [unsigned int]() -> unsigned int - Returns number of retry attempts\n- writeData(): [size_t](void*, size_t, size_t) -> size_t - Callback for writing received data\n- downloadFile(): [bool](const std::string&) -> bool - Internal method to perform the actual file download",
    "Canonical_solution": "#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <utility>\n\nclass DownloadTask\n{\npublic:\n    DownloadTask(const std::string &url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\");\n    \n    static void initialize();\n    static void uninitialize();\n    \n    bool run();\n    unsigned int getRetries() const;\n    size_t writeData(void *buffer, size_t size, size_t nmemb);\n    \nprivate:\n    bool downloadFile(const std::string& url);\n    \n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n\nsize_t writeTaskHttpData(void *buffer, size_t size, size_t nmemb, void *user_p)\n{\n    DownloadTask *task = reinterpret_cast<DownloadTask *>(user_p);\n    if (NULL != task)\n    {\n        return task->writeData(buffer, size, nmemb);\n    }\n    \n    return 0;\n}\n\nvoid DownloadTask::initialize()\n{\n    curl_global_init(CURL_GLOBAL_ALL);\n}\n\nvoid DownloadTask::uninitialize()\n{\n    curl_global_cleanup();\n}\n\nbool DownloadTask::downloadFile(const std::string& url)\n{\n    ++m_retries;\n    \n    m_outputTmp = m_output + \".tmp\";\n    deleteFile(m_outputTmp);\n\n    CURLcode res = CURLE_OK;\n    CURL *curl = NULL;\n    \n    std::string userAgent = m_userAgent.empty() ? \"WeChat/7.0.15.33 CFNetwork/978.0.7 Darwin/18.6.0\" : m_userAgent;\n    \n    curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n    curl_easy_setopt(curl, CURLOPT_USERAGENT, userAgent.c_str());\n    curl_easy_setopt(curl, CURLOPT_FORBID_REUSE, 1L);\n    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 60);\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &::writeTaskHttpData);\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);\n\n    long httpStatus = 0;\n    res = curl_easy_perform(curl);\n    if (res != CURLE_OK)\n    {\n        m_error = \"Failed \" + m_name + \"\\r\\n\";\n        m_error += curl_easy_strerror(res);\n    }\n    else\n    {\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpStatus);\n    }\n    curl_easy_cleanup(curl);\n    \n    if (res == CURLE_OK && httpStatus == 200)\n    {\n        ::moveFile(m_outputTmp, m_output);\n        if (m_mtime > 0)\n        {\n            updateFileTime(m_output, m_mtime);\n        }\n        return true;\n    }\n\n    if (m_error.empty())\n    {\n        m_error = \"HTTP Status:\" + std::to_string(httpStatus);\n    }\n    return false;\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            return 0;\n        }\n        size_t written = file.write(reinterpret_cast<char*>(ptr), size * nmemb).gcount();\n        file.close();\n        return written;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = std::time(nullptr);\n        new_times.modtime = m_mtime;\n        std::utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            return 0;\n        }\n        file.write(static_cast<char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize libcurl\";\n            return false;\n        }\n\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            m_error = \"Failed to create temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to output file\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <curl/curl.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        size_t totalSize = size * nmemb;\n        std::ofstream file(m_outputTmp, std::ios::app | std::ios::binary);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing.\";\n            return 0;\n        }\n        file.write(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize libcurl.\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to create temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output.\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::app | std::ios::binary);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            return 0;\n        }\n        file.write(static_cast<char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            curl_easy_cleanup(curl);\n            m_error = \"Failed to open temporary file\";\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = std::time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <curl/curl.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file) {\n            m_error = \"Failed to open temporary file\";\n            return 0;\n        }\n        size_t written = file.write(reinterpret_cast<char*>(ptr), size * nmemb).gcount();\n        file.close();\n        return written;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize curl\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = std::time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing.\";\n            return 0;\n        }\n        size_t written = file.write(reinterpret_cast<char*>(ptr), size * nmemb).gcount();\n        file.close();\n        return written;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize libcurl.\";\n            return false;\n        }\n\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            curl_easy_cleanup(curl);\n            m_error = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output.\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = std::time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <curl/curl.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing.\";\n            return 0;\n        }\n        size_t written = file.write(static_cast<char*>(ptr), size * nmemb).gcount();\n        file.close();\n        return written;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output.\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <curl/curl.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        size_t totalSize = size * nmemb;\n        std::ofstream file(m_outputTmp, std::ios::app | std::ios::binary);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing.\";\n            return 0;\n        }\n        file.write(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize libcurl.\";\n            return false;\n        }\n\n        m_outputTmp = m_output + \".tmp\";\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            m_error = \"Failed to create temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            remove(m_outputTmp.c_str());\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output.\";\n            remove(m_outputTmp.c_str());\n            return false;\n        }\n\n        struct utimbuf times;\n        times.actime = time(nullptr);\n        times.modtime = m_mtime;\n        utime(m_output.c_str(), &times);\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <curl/curl.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::app | std::ios::binary);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            return 0;\n        }\n        size_t written = file.write(static_cast<char*>(ptr), size * nmemb).gcount();\n        file.close();\n        return written;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize curl\";\n            return false;\n        }\n\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            remove(m_outputTmp.c_str());\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file\";\n            remove(m_outputTmp.c_str());\n            return false;\n        }\n\n        struct utimbuf times;\n        times.actime = time(nullptr);\n        times.modtime = m_mtime;\n        utime(m_output.c_str(), &times);\n\n        return true;\n    }\n\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <curl/curl.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && ++m_retries < 3) {\n                return downloadFile(m_urlBackup);\n            }\n            return false;\n        }\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            return 0;\n        }\n        file.write(static_cast<char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize libcurl\";\n            return false;\n        }\n\n        FILE* file = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!file) {\n            m_error = \"Failed to open temporary file for writing\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(file);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n\n        if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file to final output\";\n            return false;\n        }\n\n        std::utimbuf new_times;\n        new_times.actime = std::time(nullptr);\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n\n        return true;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, process incoming messages, and echo messages back to clients. The server should also support stopping the listening process upon receiving a specific command.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, managing connection handling, message processing, and server lifecycle operations.\n\nAttributes:\n- service_: [asio::io_service&] - Reference to the ASIO I/O service used for network operations\n- port_: [int] - The port number on which the server listens for connections\n- ws_server_: [ws_echo_server] - The WebSocket++ server instance\n\nMethods:\n- Constructor: [WebSocketServer]([asio::io_service& service, int port]) -> [void] - Initializes the WebSocket++ server, sets up logging, message handling, and starts listening on the specified port\n- on_message: [on_message]([websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg]) -> [void] - Callback function that processes incoming messages, echoes them back to clients, and handles the stop-listening command\n- run: [run]() -> [void] - Starts the server's event loop to handle connections and messages",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port) \n        : service_(service), port_(port) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        if (msg->get_payload() == \"stop-listening\") {\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        ws_server_.init_asio(&service_);\n\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"STOP\") {\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            service_.stop();\n            return;\n        }\n\n        // Echo the message back to the client\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nnamespace websocketpp {\n    namespace lib = websocketpp::lib;\n}\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"STOP\") {\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nnamespace websocketpp {\n    namespace lib = websocketpp::lib;\n}\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"STOP\") {\n            std::cout << \"Received STOP command. Stopping server.\" << std::endl;\n            service_.stop();\n        } else {\n            // Echo the message back to the client\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        }\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Set logging settings\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl_context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nnamespace websocketpp {\n    namespace lib = websocketpp::lib;\n}\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n\n        if (payload == \"STOP\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            service_.stop();\n        } else {\n            // Echo the message back to the client\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        }\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        // Initialize Asio\n        ws_server_.init_asio(&service_);\n\n        // Register our message handler\n        ws_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n\n        ws_server_.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        ws_server_.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"STOP\") {\n            service_.stop();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        } catch (...) {\n            std::cout << \"other exception\" << std::endl;\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication\n- m_connections: [con_list (std::set<connection_hdl>)] - A set of active client connections\n\nMethods:\n- broadcast_server() - [Constructor] -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events\n- on_open(connection_hdl hdl) -> [void] - Handles new client connections by adding them to the connection set\n- on_close(connection_hdl hdl) -> [void] - Handles client disconnections by removing them from the connection set\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by broadcasting them to all connected clients\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        con_list::iterator it = m_connections.begin();\n        con_list::iterator end = m_connections.end();\n\n        while (it != end) {\n            if (*it != hdl) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n            ++it;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        con_list::iterator it = m_connections.begin();\n        con_list::iterator end = m_connections.end();\n        while (it != end) {\n            if (*it != hdl) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n            ++it;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (*it != hdl) {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr connection_ptr;\ntypedef server::message_ptr message_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections, process incoming messages, and support configurable threading for concurrent operations.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server implementation, providing methods to initialize, configure, and run the server with customizable port and threading settings.\n\nAttributes:\n- testee_server_: [server] - The WebSocket++ server instance that manages connections and message handling\n- port_: [short] - The port number on which the server listens for incoming connections\n- num_threads_: [size_t] - The number of threads to use for handling connections (1 for single-threaded mode)\n\nMethods:\n- WebSocketServer([short port = 9002], [size_t num_threads = 1]) -> [void] - Constructor that initializes the server with specified port and thread count (defaults to port 9002 and single-threaded)\n- run() -> [void] - Starts the WebSocket server, sets up message handlers, begins listening on the specified port, and manages the server's event loop(s)\n- on_message([websocketpp::connection_hdl hdl], [message_ptr msg]) -> [void] - Message handler that echoes received messages back to the client (private method)\n- on_socket_init([websocketpp::connection_hdl hdl], [boost::asio::ip::tcp::socket & s]) -> [void] - Socket initialization handler that enables TCP_NODELAY for reduced latency (private method)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <websocketpp/common/thread.hpp>\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) \n        : port_(port), num_threads_(num_threads) {}\n\n    void run() {\n        try {\n            testee_server_.clear_access_channels(websocketpp::log::alevel::all);\n            testee_server_.clear_error_channels(websocketpp::log::alevel::all);\n\n            testee_server_.init_asio();\n            testee_server_.set_reuse_addr(true);\n\n            testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n            testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n\n            testee_server_.set_listen_backlog(8192);\n            testee_server_.listen(port_);\n            testee_server_.start_accept();\n\n            if (num_threads_ == 1) {\n                testee_server_.run();\n            } else {\n                std::vector<websocketpp::lib::shared_ptr<websocketpp::lib::thread>> ts;\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts.push_back(websocketpp::lib::make_shared<websocketpp::lib::thread>(&server::run, &testee_server_));\n                }\n\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts[i]->join();\n                }\n            }\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"exception: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the Asio io_service on the specified number of threads\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.emplace_back([this]() { testee_server_.run(); });\n            }\n            for (auto &t : threads) {\n                t.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the Asio io_service on the specified number of threads\n        if (num_threads_ > 1) {\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.create_thread([this]() {\n                    testee_server_.run();\n                });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    websocketpp::lib::thread_group threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the server\n        if (num_threads_ > 1) {\n            testee_server_.run(num_threads_);\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start accepting connections\n        testee_server_.start_accept();\n\n        // Run the server\n        if (num_threads_ > 1) {\n            testee_server_.run(num_threads_);\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the server\n        if (num_threads_ > 1) {\n            testee_server_.run(num_threads_);\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the server\n        if (num_threads_ > 1) {\n            testee_server_.run(num_threads_);\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the Asio io_service on the specified number of threads\n        if (num_threads_ > 1) {\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.create_thread([this]() {\n                    testee_server_.run();\n                });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    websocketpp::lib::thread_group threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : testee_server_(), port_(port), num_threads_(num_threads) {\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        testee_server_.init_asio();\n\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            testee_server_.run(num_threads_);\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the Asio io_service on the specified number of threads\n        if (num_threads_ > 1) {\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.create_thread([this]() {\n                    testee_server_.run();\n                });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the received message back to the client\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        // Enable TCP_NODELAY to reduce latency\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    websocketpp::lib::thread_group threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        // Initialize Asio\n        testee_server_.init_asio();\n\n        // Register message handler\n        testee_server_.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register socket init handler\n        testee_server_.set_socket_init_handler(std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        // Listen on the specified port\n        testee_server_.listen(port_);\n\n        // Start the server accept loop\n        testee_server_.start_accept();\n\n        // Run the Asio io_service loop\n        if (num_threads_ > 1) {\n            testee_server_.run(num_threads_);\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        testee_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage sessions, and process incoming messages.\n\nClass Description: The `print_server` class implements a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: int - Tracks the next available session ID to assign to new connections.\n- m_server: server - The WebSocket++ server instance configured with custom connection data.\n\nMethods:\n- print_server() - Constructor - Initializes the server with ASIO, sets up handlers for connection open, close, and message events.\n- on_open(connection_hdl hdl) -> void - Handler for new connections. Assigns a session ID to the new connection.\n- on_close(connection_hdl hdl) -> void - Handler for connection closures. Logs the connection's name and session ID.\n- on_message(connection_hdl hdl, server::message_ptr msg) -> void - Handler for incoming messages. Sets the connection name if not set, otherwise logs the message along with the connection's name and session ID.\n- run(uint16_t port) -> void - Starts the server listening on the specified port, begins accepting connections, and runs the event loop.",
    "Canonical_solution": "#include <iostream>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nstruct custom_config : public websocketpp::config::asio {\n    typedef websocketpp::config::asio core;\n    typedef core::concurrency_type concurrency_type;\n    typedef core::request_type request_type;\n    typedef core::response_type response_type;\n    typedef core::message_type message_type;\n    typedef core::con_msg_manager_type con_msg_manager_type;\n    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;\n    typedef core::alog_type alog_type;\n    typedef core::elog_type elog_type;\n    typedef core::rng_type rng_type;\n    typedef core::transport_type transport_type;\n    typedef core::endpoint_base endpoint_base;\n    typedef connection_data connection_base;\n};\n\ntypedef websocketpp::server<custom_config> server;\ntypedef server::connection_ptr connection_ptr;\n\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->sessionid = m_next_sessionid++;\n    }\n    \n    void on_close(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Closing connection \" << con->name \n                  << \" with sessionid \" << con->sessionid << std::endl;\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        \n        if (con->name.empty()) {\n            con->name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \" \n                      << con->sessionid << \" to \" << con->name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << con->name \n                      << \" with sessionid \" << con->sessionid << std::endl;\n        }\n    }\n    \n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    int m_next_sessionid;\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocket::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/print\");\n        con->set_status(websocket::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->send(\"Welcome to the print server!\");\n\n        m_sessions[hdl] = {m_next_sessionid++, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << m_sessions[hdl].session_id << std::endl;\n    }\n\n    void on_close(websocket::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed. Name: \" << it->second.name << \", Session ID: \" << it->second.session_id << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocket::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Name set to: \" << it->second.name << \", Session ID: \" << it->second.session_id << std::endl;\n            } else {\n                std::cout << \"Message from \" << it->second.name << \" (Session ID: \" << it->second.session_id << \"): \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocket::connection_hdl, session_data> m_sessions;\n};\n\nint main() {\n    try {\n        print_server server;\n        server.run(9002);\n    } catch (websocket::exception const & e) {\n        std::cerr << \"WebSocket exception: \" << e.what() << std::endl;\n    } catch (...) {\n        std::cerr << \"Other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass print_server {\npublic:\n    typedef server::connection_ptr connection_ptr;\n    typedef server::message_ptr message_ptr;\n\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/\");\n\n        int session_id = m_next_sessionid++;\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Set-Cookie\", \"session_id=\" + std::to_string(session_id));\n\n        std::cout << \"Connection opened: Session ID \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        int session_id = con->get_resource();\n        std::string name = con->get_resource();\n\n        std::cout << \"Connection closed: Name \" << name << \", Session ID \" << session_id << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string name = con->get_resource();\n\n        if (name.empty()) {\n            name = msg->get_payload();\n            con->set_resource(name);\n            std::cout << \"Connection name set: Name \" << name << std::endl;\n        } else {\n            std::cout << \"Message received: Name \" << name << \", Session ID \" << con->get_resource() << \", Message: \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n};\n\nint main() {\n    try {\n        print_server s;\n        s.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocket::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/print\");\n        con->set_status(websocket::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n\n        m_sessions[hdl] = {m_next_sessionid++, \"\"};\n        std::cout << \"Connection opened, session ID: \" << m_sessions[hdl].session_id << std::endl;\n    }\n\n    void on_close(websocket::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id \n                      << \", name: \" << it->second.name << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocket::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Session ID: \" << it->second.session_id \n                          << \" named as: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Message from session ID: \" << it->second.session_id \n                          << \", name: \" << it->second.name \n                          << \", message: \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocket::connection_hdl, session_data> m_sessions;\n};\n\nint main() {\n    try {\n        print_server server;\n        server.run(9002);\n    } catch (websocket::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/print\");\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n\n        int session_id = m_next_sessionid++;\n        m_sessions[hdl] = {session_id, \"\"};\n\n        std::cout << \"Connection opened with session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << \", Name: \" << it->second.name << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it == m_sessions.end()) {\n            return;\n        }\n\n        if (it->second.name.empty()) {\n            it->second.name = msg->get_payload();\n            std::cout << \"Session ID: \" << it->second.session_id << \" named as: \" << it->second.name << std::endl;\n        } else {\n            std::cout << \"Message from Session ID: \" << it->second.session_id << \", Name: \" << it->second.name << \" - \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, session_data> m_sessions;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/\");\n\n        int session_id = m_next_sessionid++;\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Set-Cookie\", \"session_id=\" + std::to_string(session_id));\n\n        std::cout << \"Connection opened: Session ID \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        int session_id = std::stoi(con->get_resource());\n        std::string name = con->get_resource();\n\n        std::cout << \"Connection closed: Name \" << name << \", Session ID \" << session_id << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string name = con->get_resource();\n        int session_id = std::stoi(con->get_resource());\n\n        if (name.empty()) {\n            con->set_resource(msg->get_payload());\n            name = msg->get_payload();\n            std::cout << \"Connection name set: Name \" << name << \", Session ID \" << session_id << std::endl;\n        } else {\n            std::cout << \"Message received: Name \" << name << \", Session ID \" << session_id << \", Message: \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n};\n\nint main() {\n    try {\n        print_server s;\n        s.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/ws\");\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n\n        m_sessions[hdl] = {m_next_sessionid++, \"\"};\n        std::cout << \"Connection opened: Session ID \" << m_sessions[hdl].first << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed: Session ID \" << it->second.first << \", Name: \" << it->second.second << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            if (it->second.second.empty()) {\n                it->second.second = msg->get_payload();\n                std::cout << \"Session ID \" << it->second.first << \" named: \" << it->second.second << std::endl;\n            } else {\n                std::cout << \"Message from Session ID \" << it->second.first << \", Name: \" << it->second.second << \": \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, std::pair<int, std::string>> m_sessions;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocket::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/ws\");\n        con->set_status(websocket::http::status_code::ok);\n        con->set_body(\"Welcome to the WebSocket server!\");\n        con->send(con->get_body(), websocket::frame::opcode::text);\n\n        m_sessions[hdl] = {m_next_sessionid++, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << m_sessions[hdl].session_id << std::endl;\n    }\n\n    void on_close(websocket::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed. Name: \" << it->second.name << \", Session ID: \" << it->second.session_id << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocket::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Session ID \" << it->second.session_id << \" named as \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Message from \" << it->second.name << \" (Session ID \" << it->second.session_id << \"): \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocket::connection_hdl, session_data> m_sessions;\n};\n\nint main() {\n    try {\n        print_server server;\n        server.run(9002);\n    } catch (websocket::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocket::connection_hdl hdl) {\n        auto con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/\");\n\n        int sessionid = m_next_sessionid++;\n        m_sessions[hdl] = {sessionid, \"\"};\n\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(websocket::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed. Name: \" << it->second.name << \", Session ID: \" << it->second.sessionid << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocket::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it == m_sessions.end()) {\n            return;\n        }\n\n        if (it->second.name.empty()) {\n            it->second.name = msg->get_payload();\n            std::cout << \"Connection name set to: \" << it->second.name << \", Session ID: \" << it->second.sessionid << std::endl;\n        } else {\n            std::cout << \"Message received from \" << it->second.name << \" (Session ID: \" << it->second.sessionid << \"): \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int sessionid;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocket::connection_hdl, session_data> m_sessions;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/echo\");\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n\n        int session_id = m_next_sessionid++;\n        m_sessions[hdl] = {session_id, \"\"};\n\n        std::cout << \"Connection opened: Session ID \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed: Name \" << it->second.name << \", Session ID \" << it->second.session_id << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it == m_sessions.end()) {\n            return;\n        }\n\n        if (it->second.name.empty()) {\n            it->second.name = msg->get_payload();\n            std::cout << \"Connection name set: Name \" << it->second.name << \", Session ID \" << it->second.session_id << std::endl;\n        } else {\n            std::cout << \"Message received: Name \" << it->second.name << \", Session ID \" << it->second.session_id << \", Message: \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, session_data> m_sessions;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/ws\");\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n\n        m_sessions[hdl] = {m_next_sessionid++, \"\"};\n        std::cout << \"Connection opened: Session ID \" << m_sessions[hdl].first << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_sessions.find(hdl);\n        if (it != m_sessions.end()) {\n            std::cout << \"Connection closed: Session ID \" << it->second.first << \", Name: \" << it->second.second << std::endl;\n            m_sessions.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_sessions.find(hdl);\n        if (it == m_sessions.end()) {\n            return;\n        }\n\n        if (it->second.second.empty()) {\n            it->second.second = msg->get_payload();\n            std::cout << \"Connection name set: Session ID \" << it->second.first << \", Name: \" << it->second.second << std::endl;\n        } else {\n            std::cout << \"Message received: Session ID \" << it->second.first << \", Name: \" << it->second.second << \", Message: \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, std::pair<int, std::string>> m_sessions;\n};\n\nint main() {\n    try {\n        print_server s;\n        s.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage session data, and process incoming messages.\n\nClass Description: The `print_server` class encapsulates a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: [int] - Tracks the next available session ID to assign to new connections.\n- m_server: [websocketpp::server<websocketpp::config::asio>] - The WebSocket++ server instance.\n- m_connections: [std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>>] - Maps connection handles to their associated session data.\n\nMethods:\n- print_server(): [Constructor]() -> [void] - Initializes the server and sets up handlers for connection events.\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handles new WebSocket connections by assigning a session ID and storing connection data.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handles connection closures by logging the event and removing the connection from tracking.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Processes incoming messages, either setting the client's name or logging received messages.\n- get_data_from_hdl: [connection_data&]([connection_hdl hdl]) -> [connection_data&] - Retrieves connection data for a given handle, throwing an exception if not found.\n- run: [void]([uint16_t port]) -> [void] - Starts the server listening on the specified port and begins accepting connections.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <exception>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n\n        data.sessionid = m_next_sessionid++;\n        data.name.clear();\n\n        m_connections[hdl] = data;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        std::cout << \"Closing connection \" << data.name\n                  << \" with sessionid \" << data.sessionid << std::endl;\n\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \"\n                      << data.sessionid << \" to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << data.name\n                      << \" with sessionid \" << data.sessionid << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"No data available for session\");\n        }\n\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>> con_list;\n\n    int m_next_sessionid;\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        auto con = m_server.get_con_from_hdl(hdl);\n        int session_id = m_next_sessionid++;\n        m_connections[hdl].session_id = session_id;\n        m_connections[hdl].name = \"Unknown\";\n        std::cout << \"Connection opened: Session ID \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed: Session ID \" << get_data_from_hdl(hdl).session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            std::string payload = msg->get_payload();\n            if (payload.substr(0, 5) == \"NAME:\") {\n                get_data_from_hdl(hdl).name = payload.substr(5);\n                std::cout << \"Session ID \" << get_data_from_hdl(hdl).session_id << \" set name to \" << get_data_from_hdl(hdl).name << std::endl;\n            } else {\n                std::cout << \"Message from Session ID \" << get_data_from_hdl(hdl).session_id << \": \" << payload << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found for handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <exception>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, assigned session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Client \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found for handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, assigned session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Session ID \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Received message from session ID \" << data.session_id << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found for handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <exception>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->send(\"Welcome! Please set your name.\");\n        m_connections[hdl].session_id = m_next_sessionid++;\n        std::cout << \"Connection opened: Session ID \" << m_connections[hdl].session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed: Session ID \" << get_data_from_hdl(hdl).session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            std::string message = msg->get_payload();\n            if (m_connections[hdl].name.empty()) {\n                m_connections[hdl].name = message;\n                std::cout << \"Name set to: \" << m_connections[hdl].name << std::endl;\n            } else {\n                std::cout << \"Message from \" << m_connections[hdl].name << \": \" << message << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened: Session ID \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed: Session ID \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Session ID \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from Session ID \" << data.session_id << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened. Session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed. Session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Session ID \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from Session ID \" << data.session_id << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found for handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass print_server {\npublic:\n    struct connection_data {\n        int session_id;\n        std::string name;\n    };\n\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, assigned session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Client \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Client set name: \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        auto con = m_server.get_con_from_hdl(hdl);\n        con->set_resource(\"/\");\n\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n\n        std::cout << \"Connection opened; session id: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        if (msg->get_payload().substr(0, 5) == \"name=\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Client \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from client \" << data.session_id << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data associated with connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nnamespace websocket = websocketpp;\ntypedef websocket::server<websocket::config::asio> server;\n\nclass print_server {\npublic:\n    struct connection_data {\n        int session_id;\n        std::string name;\n    };\n\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened. Session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed. Session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_payload().substr(0, 5) == \"NAME:\") {\n            data.name = msg->get_payload().substr(5);\n            std::cout << \"Name set for session ID \" << data.session_id << \": \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message from session ID \" << data.session_id << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found for handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication.\n- m_connections: [con_list] - A set of active connection handles to keep track of connected clients.\n\nMethods:\n- broadcast_server(): [Constructor]() -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events (open, close, message).\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handler for new client connections; adds the connection handle to the active connections set.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handler for client disconnections; removes the connection handle from the active connections set.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Handler for incoming messages; broadcasts the received message to all connected clients.\n- run: [void]([uint16_t port]) -> [void] - Starts the server, begins listening on the specified port, and enters the event loop to handle connections and messages.",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n                \n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n    \n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::connection<websocketpp::config::asio>> connection_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(websocketpp::lib::bind(&broadcast_server::on_open, this, websocketpp::lib::placeholders::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(&broadcast_server::on_close, this, websocketpp::lib::placeholders::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(&broadcast_server::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    try {\n        broadcast_server server;\n        server.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::connection<websocketpp::config::asio>> connection_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(websocketpp::lib::bind(&broadcast_server::on_open, this, websocketpp::lib::placeholders::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(&broadcast_server::on_close, this, websocketpp::lib::placeholders::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(&broadcast_server::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string message = msg->get_payload();\n        con_list::iterator it = m_connections.begin();\n        con_list::iterator end = m_connections.end();\n        while (it != end) {\n            if (*it != hdl) {\n                m_server.send(*it, message, msg->get_opcode());\n            }\n            ++it;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::connection<websocketpp::config::asio>> connection_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(websocketpp::lib::bind(&broadcast_server::on_open, this, websocketpp::lib::placeholders::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(&broadcast_server::on_close, this, websocketpp::lib::placeholders::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(&broadcast_server::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string message = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, message, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received message: \" << payload << std::endl;\n\n        for (auto it : m_connections) {\n            if (it != hdl) {\n                m_server.send(it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    try {\n        broadcast_server server;\n        server.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (*it != hdl) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::connection<websocketpp::config::asio>> connection_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(websocketpp::lib::bind(&broadcast_server::on_open, this, websocketpp::lib::placeholders::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(&broadcast_server::on_close, this, websocketpp::lib::placeholders::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(&broadcast_server::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> m_connections;\n};\n\nint main() {\n    try {\n        broadcast_server server;\n        server.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::connection<websocketpp::config::asio>> connection_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(websocketpp::lib::bind(&broadcast_server::on_open, this, websocketpp::lib::placeholders::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(&broadcast_server::on_close, this, websocketpp::lib::placeholders::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(&broadcast_server::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::connection<websocketpp::config::asio>> connection_ptr;\ntypedef std::set<websocketpp::connection_hdl, std::owner_less<websocketpp::connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(websocketpp::lib::bind(&broadcast_server::on_open, this, websocketpp::lib::placeholders::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(&broadcast_server::on_close, this, websocketpp::lib::placeholders::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(&broadcast_server::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (hdl.lock() != *it) {\n                m_server.send(*it, payload, msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections and echo back received messages.\n\nClass Description: The utility_server class encapsulates a WebSocket server that listens for incoming connections, receives messages from clients, and echoes them back. It uses WebSocket++ with ASIO for network handling.\n\nAttributes:\n- m_endpoint: [server] - The WebSocket++ server instance that manages connections and message handling.\n\nMethods:\n- utility_server() - [Constructor] -> [void] - Initializes the server with logging settings, ASIO, and sets up the message handler.\n- echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by echoing them back to the client.\n- run() -> [void] - Starts the server, begins listening on port 9002, and runs the ASIO event loop.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <functional>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n         // Set logging settings\n        m_endpoint.set_error_channels(websocketpp::log::elevel::all);\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all ^ websocketpp::log::alevel::frame_payload);\n\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Set the default message handler to the echo handler\n        m_endpoint.set_message_handler(std::bind(\n            &utility_server::echo_handler, this,\n            std::placeholders::_1, std::placeholders::_2\n        ));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // write a new message\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Queues a connection accept operation\n        m_endpoint.start_accept();\n\n        // Start the Asio io_service run loop\n        m_endpoint.run();\n    }\nprivate:\n    server m_endpoint;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    try {\n        utility_server s;\n        s.run();\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    try {\n        utility_server s;\n        s.run();\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    }\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the Asio io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_no_tls> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize ASIO\n        m_endpoint.init_asio();\n\n        // Register our message handler\n        m_endpoint.set_message_handler(std::bind(&utility_server::echo_handler, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // Echo the message back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Start the server accept loop\n        m_endpoint.start_accept();\n\n        // Run the ASIO io_service loop\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    try {\n        utility_server s;\n        s.run();\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ using the WebSocket++ library to handle client connections, process incoming messages, and manage server events.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, providing methods to initialize, configure, and run the server. It handles WebSocket connections, processes messages, and manages various server events like HTTP requests, connection failures, and closures.\n\nAttributes:\n- m_server: [websocketpp::server<websocketpp::config::debug_asio>] - The main WebSocket++ server instance that manages connections and events.\n\nMethods:\n- WebSocketServer() -> [Constructor] - Initializes the server with default settings, configures logging, sets up ASIO, and registers event handlers.\n- run(int port) -> [void] - Starts the server on the specified port, begins accepting connections, and runs the event loop.\n- validate(websocketpp::connection_hdl hdl) -> [bool] - Validates incoming connections (always returns true in this implementation).\n- on_http(websocketpp::connection_hdl hdl) -> [void] - Handles HTTP requests received by the server.\n- on_fail(websocketpp::connection_hdl hdl) -> [void] - Handles connection failure events.\n- on_close(websocketpp::connection_hdl hdl) -> [void] - Handles connection closure events.\n- on_message(websocketpp::connection_hdl hdl, message_ptr msg) -> [void] - Processes incoming WebSocket messages and echoes them back to the client.",
    "Canonical_solution": "#include <websocketpp/config/debug_asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/logger/syslog.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass WebSocketServer {\npublic:\n    typedef websocketpp::server<websocketpp::config::debug_asio> server;\n    typedef server::message_ptr message_ptr;\n\n    WebSocketServer() {\n        // Set logging settings\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize ASIO\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        try {\n            // Listen on specified port\n            m_server.listen(port);\n\n            // Start the server accept loop\n            m_server.start_accept();\n\n            // Start the ASIO io_service run loop\n            m_server.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string res = con->get_request_body();\n        std::stringstream ss;\n        ss << \"got HTTP request with \" << res.size() << \" bytes of body data.\";\n        con->set_body(ss.str());\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Fail handler: \" << con->get_ec() << \" \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Close handler\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \" \n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the server\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"This is an HTTP request handler.\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_local_endpoint() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_local_endpoint() << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        std::cout << \"Received message: \" << payload << std::endl;\n        con->send(msg); // Echo the message back to the client\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_open_handler(std::bind(&WebSocketServer::on_open, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"HTTP request: \" << con->get_resource() << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_local_port() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_local_port() << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"HTTP request received\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"HTTP request handled\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_local_endpoint() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_local_endpoint() << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        con->send(msg);\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"HTTP request: \" << con->get_resource() << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_local_port() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_local_port() << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"This is an HTTP response\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_local_port() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_local_port() << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        con->send(msg->get_payload());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"HTTP request received\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"HTTP request handled\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the server\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Welcome to the WebSocket server!\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize Asio\n        m_server.init_asio();\n\n        // Register event handlers\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Configure logging\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void run(int port) {\n        // Listen on the specified port\n        m_server.listen(port);\n\n        // Start accepting connections\n        m_server.start_accept();\n\n        // Run the Asio io_service loop\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"This is an HTTP request handler.\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed.\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        // Echo the message back to the client\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that supports secure TLS connections and handles both WebSocket and HTTP requests.\n\nClass Description: The WebSocketServer class encapsulates a secure WebSocket server implementation using WebSocket++ with ASIO and TLS support. It handles incoming connections, processes messages, and manages secure communication settings.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that manages connections and communication\n- tls_mode: [enum] - Enumeration defining TLS security modes (MOZILLA_INTERMEDIATE, MOZILLA_MODERN)\n\nMethods:\n- WebSocketServer() -> [constructor] - Initializes the server, sets up ASIO, and registers handler functions\n- run([int port]) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_message([websocketpp::connection_hdl hdl, message_ptr msg]) -> [void] - Handles incoming WebSocket messages by echoing them back to the client\n- on_http([websocketpp::connection_hdl hdl]) -> [void] - Handles HTTP requests by returning a simple \"Hello World!\" response\n- get_password() -> [std::string] - Returns the password used for TLS certificate encryption\n- on_tls_init([tls_mode mode, websocketpp::connection_hdl hdl]) -> [context_ptr] - Initializes and configures TLS/SSL context with appropriate security settings based on the specified mode",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/lib/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize ASIO\n        m_server.init_asio();\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        // Listen on specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Start the ASIO io_service run loop\n        m_server.run();\n    }\n\nprivate:\n    enum tls_mode {\n        MOZILLA_INTERMEDIATE = 1,\n        MOZILLA_MODERN = 2\n    };\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        namespace asio = websocketpp::lib::asio;\n\n        context_ptr ctx = websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::no_tlsv1 |\n                                 asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::single_dh_use);\n            }\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n            \n            std::string ciphers = (mode == MOZILLA_MODERN) ? \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\" : \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\";\n            \n            if (SSL_CTX_set_cipher_list(ctx->native_handle(), ciphers.c_str()) != 1) {\n                std::cout << \"Error setting cipher list\" << std::endl;\n            }\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/transport/asio/security/openssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    server::context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        server::context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1);\n            }\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n\n#include <boost/asio.hpp>\n#include <boost/asio/ssl.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::single_dh_use);\n                ctx->set_cipher_list(\"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\");\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n                ctx->set_cipher_list(\"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\");\n            }\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/common/asio.hpp>\n#include <websocketpp/common/asio_ssl.hpp>\n#include <boost/asio/ssl.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"your_password_here\";\n    }\n\n    server::context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        boost::asio::ssl::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::no_sslv3);\n            }\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            // Handle exception\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/roles/server_endpoint.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\nnamespace websocketpp {\n    namespace lib = boost;\n}\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"your_password_here\";\n    }\n\n    websocketpp::lib::shared_ptr<boost::asio::ssl::context> on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<boost::asio::ssl::context> ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1_2);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/common/asio.hpp>\n#include <websocketpp/common/asio_ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    boost::shared_ptr<boost::asio::ssl::context> on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        boost::shared_ptr<boost::asio::ssl::context> ctx = boost::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1_2);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n#include <asio/ssl.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_open_handler(std::bind(&WebSocketServer::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle connection open event\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection close event\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure event\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                  asio::ssl::context::no_sslv2 |\n                                  asio::ssl::context::single_dh_use);\n                ctx->set_cipher_list(\"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\");\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                  asio::ssl::context::no_sslv2 |\n                                  asio::ssl::context::no_sslv3 |\n                                  asio::ssl::context::single_dh_use);\n                ctx->set_cipher_list(\"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\");\n            }\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"path/to/dhparam.pem\");\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/common/asio.hpp>\n#include <websocketpp/common/asio_ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password handling\n    }\n\n    server::context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        server::context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::single_dh_use);\n                ctx->set_cipher_list(\"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\");\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n                ctx->set_cipher_list(\"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\");\n            }\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/private.key\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n\n#include <boost/asio.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_validate_handler(std::bind(&WebSocketServer::validate, this, std::placeholders::_1));\n        m_server.set_open_handler(std::bind(&WebSocketServer::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n        m_server.set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Message received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->set_body(\"Hello World!\");\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    server::context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        server::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                // Set intermediate security settings\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else if (mode == MOZILLA_MODERN) {\n                // Set modern security settings\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"path/to/dhparam.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n};\n\nint main() {\n    try {\n        WebSocketServer ws_server;\n        ws_server.run(9002);\n    } catch (websocketpp::exception const & e) {\n        std::cout << e.what() << std::endl;\n    } catch (...) {\n        std::cout << \"other exception\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/roles/server_endpoint.hpp>\n#include <asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    server::context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        asio::ssl::context_ptr ctx = std::make_shared<asio::ssl::context>(asio::ssl::context::tlsv1_2);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::single_dh_use);\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::no_tlsv1 |\n                                 asio::ssl::context::no_tlsv1_1 |\n                                 asio::ssl::context::single_dh_use);\n            }\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/roles/server_endpoint.hpp>\n#include <asio/ssl.hpp>\n#include <iostream>\n\nnamespace websocketpp {\n    namespace lib = websocketpp::lib;\n\n    typedef websocketpp::server<websocketpp::config::asio_tls> server;\n}\n\nclass WebSocketServer {\npublic:\n    enum tls_mode { MOZILLA_INTERMEDIATE, MOZILLA_MODERN };\n\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        m_server.send(hdl, payload, msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password handling\n    }\n\n    websocketpp::lib::shared_ptr<asio::ssl::context> on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<asio::ssl::context> ctx = websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::single_dh_use);\n                ctx->set_verify_mode(asio::ssl::verify_none);\n                ctx->use_certificate_chain_file(\"cert.pem\");\n                ctx->use_private_key_file(\"key.pem\", asio::ssl::context::pem);\n                ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::single_dh_use);\n                ctx->set_verify_mode(asio::ssl::verify_none);\n                ctx->use_certificate_chain_file(\"cert.pem\");\n                ctx->use_private_key_file(\"key.pem\", asio::ssl::context::pem);\n                ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            }\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement a WebSocket broadcast server in C++ using the WebSocket++ library that can handle multiple client connections, manage subscriptions, and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and can broadcast messages to all connected clients. It handles connection events (open/close) and message events using a thread-safe action queue system.\n\nAttributes:\n- m_server: [server] - WebSocket++ server instance configured with ASIO\n- m_connections: [con_list] - Set of active WebSocket connection handles\n- m_actions: [std::queue<action>] - Queue of pending actions to process\n- m_action_lock: [mutex] - Mutex for protecting access to the action queue\n- m_connection_lock: [mutex] - Mutex for protecting access to the connections set\n- m_action_cond: [condition_variable] - Condition variable for action queue notification\n\nMethods:\n- broadcast_server() -> [constructor] - Initializes the WebSocket server and sets up event handlers\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_open(connection_hdl hdl) -> [void] - Handler for new WebSocket connections (adds SUBSCRIBE action)\n- on_close(connection_hdl hdl) -> [void] - Handler for closed WebSocket connections (adds UNSUBSCRIBE action)\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handler for incoming messages (adds MESSAGE action)\n- process_messages() -> [void] - Processes actions from the queue (manages subscriptions and broadcasts messages)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/common/thread.hpp>\n#include <iostream>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\nusing websocketpp::lib::thread;\nusing websocketpp::lib::mutex;\nusing websocketpp::lib::lock_guard;\nusing websocketpp::lib::unique_lock;\nusing websocketpp::lib::condition_variable;\n\nenum action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action(action_type t, connection_hdl h) : type(t), hdl(h) {}\n    action(action_type t, connection_hdl h, server::message_ptr m)\n      : type(t), hdl(h), msg(m) {}\n\n    action_type type;\n    websocketpp::connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        try {\n            m_server.run();\n        } catch (const std::exception & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\n    void on_open(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(SUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(UNSUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(MESSAGE,hdl,msg));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while(1) {\n            unique_lock<mutex> lock(m_action_lock);\n            while(m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                con_list::iterator it;\n                for (it = m_connections.begin(); it != m_connections.end(); ++it) {\n                    m_server.send(*it,a.msg);\n                }\n            }\n        }\n    }\n\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl> > con_list;\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    mutex m_action_lock;\n    mutex m_connection_lock;\n    condition_variable m_action_cond;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef std::set<con_ptr> con_list;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action_type type;\n    con_ptr connection;\n    msg_ptr message;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread([this]() {\n            while (true) {\n                process_messages();\n            }\n        }).detach();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        m_connections.insert(m_server.get_con_from_hdl(hdl));\n        m_actions.push({SUBSCRIBE, m_server.get_con_from_hdl(hdl), nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        m_connections.erase(m_server.get_con_from_hdl(hdl));\n        m_actions.push({UNSUBSCRIBE, m_server.get_con_from_hdl(hdl), nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        m_actions.push({MESSAGE, m_server.get_con_from_hdl(hdl), msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        std::unique_lock<std::mutex> lock(m_action_lock);\n        m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n        while (!m_actions.empty()) {\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n            switch (a.type) {\n                case SUBSCRIBE:\n                    // Handle subscription logic if needed\n                    break;\n                case UNSUBSCRIBE:\n                    // Handle unsubscription logic if needed\n                    break;\n                case MESSAGE:\n                    broadcast(a.message);\n                    break;\n            }\n            lock.lock();\n        }\n    }\n\n    void broadcast(msg_ptr msg) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            (*it)->send(msg);\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread([this]() { process_messages(); }).detach();\n        m_server.run();\n    }\n\nprivate:\n    enum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n    struct action {\n        action_type type;\n        connection_hdl hdl;\n        msg_ptr msg;\n    };\n\n    server m_server;\n    std::set<connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, msg_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n\n                switch (a.type) {\n                    case SUBSCRIBE:\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        m_connections.insert(a.hdl);\n                        break;\n                    case UNSUBSCRIBE:\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        m_connections.erase(a.hdl);\n                        break;\n                    case MESSAGE:\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                            if (*it != a.hdl) {\n                                m_server.send(*it, a.msg->get_payload(), a.msg->get_opcode());\n                            }\n                        }\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    msg_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread t(&broadcast_server::process_messages, this);\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push({SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push({UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push({MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n\n                switch (a.type) {\n                    case SUBSCRIBE:\n                        std::lock_guard<std::mutex> conn_guard(m_connection_lock);\n                        m_connections.insert(a.hdl);\n                        break;\n                    case UNSUBSCRIBE:\n                        std::lock_guard<std::mutex> conn_guard(m_connection_lock);\n                        m_connections.erase(a.hdl);\n                        break;\n                    case MESSAGE:\n                        std::lock_guard<std::mutex> conn_guard(m_connection_lock);\n                        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                            if (*it != a.hdl) {\n                                m_server.send(*it, a.msg->get_payload(), a.msg->get_opcode());\n                            }\n                        }\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread t([this]() { process_messages(); });\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    enum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n    struct action {\n        action_type type;\n        connection_hdl hdl;\n        std::string data;\n    };\n\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({SUBSCRIBE, hdl, \"\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({UNSUBSCRIBE, hdl, \"\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({MESSAGE, hdl, msg->get_payload()});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n\n            lock.unlock();\n\n            switch (a.type) {\n                case SUBSCRIBE:\n                    std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                    m_connections.insert(a.hdl);\n                    break;\n                case UNSUBSCRIBE:\n                    std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                    m_connections.erase(a.hdl);\n                    break;\n                case MESSAGE:\n                    std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                    for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                        if (*it != a.hdl) {\n                            m_server.send(*it, a.data, websocketpp::frame::opcode::text);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread t([this]() { process_messages(); });\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    enum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n    struct action {\n        action_type type;\n        connection_hdl hdl;\n        msg_ptr msg;\n    };\n\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n\n            switch (a.type) {\n                case SUBSCRIBE:\n                    {\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        m_connections.insert(a.hdl);\n                    }\n                    break;\n                case UNSUBSCRIBE:\n                    {\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        m_connections.erase(a.hdl);\n                    }\n                    break;\n                case MESSAGE:\n                    {\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                            if (*it != a.hdl) {\n                                m_server.send(*it, a.msg->get_payload(), a.msg->get_opcode());\n                            }\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef std::shared_ptr<std::set<con_ptr>> con_list;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action_type type;\n    con_ptr con;\n    msg_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(new std::set<con_ptr>()) {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        m_connections->insert(m_server.get_con_from_hdl(hdl));\n        m_actions.push({SUBSCRIBE, m_server.get_con_from_hdl(hdl), nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        m_connections->erase(m_server.get_con_from_hdl(hdl));\n        m_actions.push({UNSUBSCRIBE, m_server.get_con_from_hdl(hdl), nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_actions.push({MESSAGE, m_server.get_con_from_hdl(hdl), msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n\n                switch (a.type) {\n                    case SUBSCRIBE:\n                        // Handle subscription logic if needed\n                        break;\n                    case UNSUBSCRIBE:\n                        // Handle unsubscription logic if needed\n                        break;\n                    case MESSAGE:\n                        std::lock_guard<std::mutex> guard(m_connection_lock);\n                        for (auto it = m_connections->begin(); it != m_connections->end(); ++it) {\n                            if (*it != a.con) {\n                                (*it)->send(a.msg);\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread process_thread(&broadcast_server::process_messages, this);\n        m_server.run();\n        process_thread.join();\n    }\n\nprivate:\n    enum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n    struct action {\n        action_type type;\n        connection_hdl hdl;\n        msg_ptr msg;\n    };\n\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push({SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push({UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, msg_ptr msg) {\n        m_actions.push({MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n\n                switch (a.type) {\n                    case SUBSCRIBE:\n                        // Handle subscription logic if needed\n                        break;\n                    case UNSUBSCRIBE:\n                        // Handle unsubscription logic if needed\n                        break;\n                    case MESSAGE:\n                        {\n                            std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                            for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                                if (*it != a.hdl) {\n                                    m_server.send(*it, a.msg->get_payload(), a.msg->get_opcode());\n                                }\n                            }\n                        }\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nenum action_type {SUBSCRIBE, UNSUBSCRIBE, MESSAGE};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    std::string data;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread([this]() {\n            while (true) {\n                process_messages();\n            }\n        }).detach();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push({SUBSCRIBE, hdl, \"\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push({UNSUBSCRIBE, hdl, \"\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, msg_ptr msg) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push({MESSAGE, hdl, msg->get_payload()});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        std::unique_lock<std::mutex> lock(m_action_lock);\n        m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n        while (!m_actions.empty()) {\n            action a = m_actions.front();\n            m_actions.pop();\n\n            switch (a.type) {\n                case SUBSCRIBE:\n                    {\n                        std::lock_guard<std::mutex> guard(m_connection_lock);\n                        m_connections.insert(a.hdl);\n                    }\n                    break;\n                case UNSUBSCRIBE:\n                    {\n                        std::lock_guard<std::mutex> guard(m_connection_lock);\n                        m_connections.erase(a.hdl);\n                    }\n                    break;\n                case MESSAGE:\n                    {\n                        std::lock_guard<std::mutex> guard(m_connection_lock);\n                        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                            if (*it != a.hdl) {\n                                m_server.send(*it, a.data, websocketpp::frame::opcode::text);\n                            }\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    msg_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread process_thread(&broadcast_server::process_messages, this);\n        m_server.run();\n        process_thread.join();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push({SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push({UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        m_actions.push({MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n\n                switch (a.type) {\n                    case SUBSCRIBE:\n                        // Handle subscription logic if needed\n                        break;\n                    case UNSUBSCRIBE:\n                        // Handle unsubscription logic if needed\n                        break;\n                    case MESSAGE:\n                        std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                            if (*it != a.hdl) {\n                                m_server.send(*it, a.msg->get_payload(), a.msg->get_opcode());\n                            }\n                        }\n                        break;\n                }\n                lock.lock();\n            }\n        }\n    }\n\n    server m_server;\n    std::set<connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_ptr con_ptr;\ntypedef server::message_ptr msg_ptr;\ntypedef server::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    std::string data;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push(action{SUBSCRIBE, hdl, \"\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push(action{UNSUBSCRIBE, hdl, \"\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, msg_ptr msg) {\n        std::lock_guard<std::mutex> guard(m_action_lock);\n        m_actions.push(action{MESSAGE, hdl, msg->get_payload()});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n\n                switch (a.type) {\n                    case SUBSCRIBE:\n                        {\n                            std::lock_guard<std::mutex> guard(m_connection_lock);\n                            m_connections.insert(a.hdl.lock());\n                        }\n                        break;\n                    case UNSUBSCRIBE:\n                        {\n                            std::lock_guard<std::mutex> guard(m_connection_lock);\n                            m_connections.erase(a.hdl.lock());\n                        }\n                        break;\n                    case MESSAGE:\n                        {\n                            std::lock_guard<std::mutex> guard(m_connection_lock);\n                            for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                                if (*it) {\n                                    m_server.send(*it, a.data, websocketpp::frame::opcode::text);\n                                }\n                            }\n                        }\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n\n    server m_server;\n    std::set<con_ptr> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a C++ class that provides HTTP request functionality using libcurl, supporting both file and network resource retrieval.\n\nClass Description: HttpWebRequest is a class that encapsulates HTTP request functionality, allowing users to make GET requests to either network resources (via HTTP) or local files (via file:// protocol). It handles request configuration, execution, and response processing.\n\nAttributes:\n- uri_: std::string - The target URI for the HTTP request\n- method_: std::string - The HTTP method to use (defaults to GET)\n- header_: std::map<std::string, std::string> - HTTP headers to include in the request\n- is_: std::iostream - Internal stream used for request processing\n\nMethods:\n- HttpWebRequest(std::string &uri) -> void - Constructor that initializes the request with a target URI\n- callback(void *buffer, size_t size, size_t nmemb, void *data) -> static size_t - Static callback function for libcurl to write response data\n- GetFileResponse(const char *uri) -> HttpWebResponse* - Handles file:// protocol requests and returns the file content as a response\n- GetNetResponse(const char *uri) -> HttpWebResponse* - Performs HTTP network requests using libcurl and returns the response\n- GetResponse() -> HttpWebResponse* - Main method that determines request type (file or network) and returns the appropriate response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n\nnamespace System {\nnamespace Net {\n\nclass HttpWebRequest {\npublic:\n    HttpWebRequest(std::string &uri)\n        : is_(std::ios_base::in | std::ios_base::out | std::ios_base::binary) {\n        uri_ = uri;\n        method_ = HttpWebRequest::Method::GET;\n    }\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        HttpWebResponse *resp = (HttpWebResponse *) data;\n        std::stringstream &ss = resp->GetResponseStream();\n        ss.write((char *) buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse *GetFileResponse(const char *uri) {\n        assert(strlen(uri) > 6);\n        HttpWebResponse *resp = new HttpWebResponse();\n        const char *filename = uri + 6;\n\n        std::ifstream file;\n        file.open(filename);\n        if (file.is_open()) {\n            resp->os_ << file.rdbuf();\n            file.close();\n        }\n\n        return resp;\n    }\n\n    HttpWebResponse *GetNetResponse(const char *uri) {\n        HttpWebResponse *resp = new HttpWebResponse();\n\n        CURL *curl = curl_easy_init();\n\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n\n        curl_slist *http_headers = NULL;\n        for (std::map<std::string, std::string>::iterator it = header_.begin();\n             it != header_.end(); it++) {\n            http_headers = curl_slist_append(http_headers,\n                                             (it->first + \":\" + it->second).c_str());\n        }\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, http_headers);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *) resp);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);\n\n        curl_easy_perform(curl);\n\n        long retcode = 0;\n        CURLcode code = curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &retcode);\n        if (code == CURLE_OK && retcode == 200) {\n            resp->status_.SetCode(200);\n\n            char *ctype = NULL;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &ctype);\n            std::string type(ctype);\n            resp->header_.Put(HttpHeader::ContentType, type);\n\n            double length = 0;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &length);\n            std::ostringstream os;\n            os << (long) length;\n            resp->header_.Put(HttpHeader::ContentLength, os.str());\n        }\n\n        curl_slist_free_all(http_headers);\n        curl_easy_cleanup(curl);\n\n        return resp;\n    }\n\n    HttpWebResponse *GetResponse() {\n        const char *uri = uri_.c_str();\n        if (strncmp(uri, \"file://\", 7) == 0) {\n            return GetFileResponse(uri);\n        }\n        return GetNetResponse(uri);\n    }\n\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n};\n\n}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        size_t totalSize = size * nmemb;\n        std::string *response = static_cast<std::string*>(data);\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        size_t totalSize = size * nmemb;\n        static_cast<std::string*>(data)->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string*>(data);\n        size_t totalSize = size * nmemb;\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        } else {\n            delete response;\n            response = nullptr;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL *curl;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                delete response;\n                response = nullptr;\n            }\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string*>(data);\n        size_t totalSize = size * nmemb;\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string*>(data);\n        size_t totalSize = size * nmemb;\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL *curl;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        size_t totalSize = size * nmemb;\n        std::string *response = static_cast<std::string*>(data);\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string*>(data);\n        size_t totalSize = size * nmemb;\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        } else {\n            delete response;\n            response = nullptr;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                delete response;\n                response = nullptr;\n            }\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nsize_t HttpWebRequest::callback(void *buffer, size_t size, size_t nmemb, void *data) {\n    size_t totalSize = size * nmemb;\n    static_cast<std::string*>(data)->append(static_cast<char*>(buffer), totalSize);\n    return totalSize;\n}\n\nHttpWebRequest::HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\nHttpWebResponse* HttpWebRequest::GetFileResponse(const char *uri) {\n    HttpWebResponse* response = new HttpWebResponse();\n    std::ifstream file(uri);\n    if (file.is_open()) {\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        response->content = buffer.str();\n        file.close();\n    }\n    return response;\n}\n\nHttpWebResponse* HttpWebRequest::GetNetResponse(const char *uri) {\n    CURL *curl;\n    CURLcode res;\n    HttpWebResponse* response = new HttpWebResponse();\n\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n        res = curl_easy_perform(curl);\n        if(res != CURLE_OK) {\n            std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n        curl_easy_cleanup(curl);\n    }\n    return response;\n}\n\nHttpWebResponse* HttpWebRequest::GetResponse() {\n    if (uri_.substr(0, 7) == \"file://\") {\n        return GetFileResponse(uri_.c_str());\n    } else {\n        return GetNetResponse(uri_.c_str());\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        size_t totalSize = size * nmemb;\n        std::string *response = static_cast<std::string*>(data);\n        response->append(static_cast<char*>(buffer), totalSize);\n        return totalSize;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri);\n        if (file.is_open()) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            file.close();\n        } else {\n            delete response;\n            response = nullptr;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                delete response;\n                response = nullptr;\n            }\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n};\n\nsize_t HttpWebRequest::callback(void *buffer, size_t size, size_t nmemb, void *data) {\n    size_t totalSize = size * nmemb;\n    static_cast<std::string*>(data)->append(static_cast<char*>(buffer), totalSize);\n    return totalSize;\n}\n\nHttpWebRequest::HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\nHttpWebResponse* HttpWebRequest::GetFileResponse(const char *uri) {\n    HttpWebResponse* response = new HttpWebResponse();\n    std::ifstream file(uri);\n    if (file.is_open()) {\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        response->content = buffer.str();\n        file.close();\n    }\n    return response;\n}\n\nHttpWebResponse* HttpWebRequest::GetNetResponse(const char *uri) {\n    CURL *curl;\n    CURLcode res;\n    HttpWebResponse* response = new HttpWebResponse();\n\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    curl = curl_easy_init();\n    if(curl) {\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response->content);\n        res = curl_easy_perform(curl);\n        if(res != CURLE_OK)\n            std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n        curl_easy_cleanup(curl);\n    }\n    curl_global_cleanup();\n    return response;\n}\n\nHttpWebResponse* HttpWebRequest::GetResponse() {\n    if (uri_.substr(0, 7) == \"file://\") {\n        return GetFileResponse(uri_.c_str());\n    } else {\n        return GetNetResponse(uri_.c_str());\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ that supports both plain and TLS (SSL) connections using the WebSocket++ library. The server should handle incoming messages, echo them back to clients, and manage secure connections with proper TLS initialization.\n\nClass Description: The WebSocketServer class encapsulates functionality for creating and managing both plain and TLS WebSocket servers. It initializes server endpoints, sets up message handlers, manages TLS contexts, and runs the server's event loop.\n\nAttributes:\n- ios_: boost::asio::io_service - ASIO I/O service for handling network operations\n- endpoint_plain_: server_plain - WebSocket++ server instance for plain (non-secure) connections\n- endpoint_tls_: server_tls - WebSocket++ server instance for TLS (secure) connections\n\nMethods:\n- init() -> void - Initializes both plain and TLS server endpoints, sets message handlers, TLS initialization handler, and starts listening on ports 80 (plain) and 443 (TLS)\n- run() -> void - Starts the server's event loop to handle connections and messages\n- on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) -> void - Template method that handles incoming messages from clients and echoes them back\n- get_password() -> std::string - Returns the password used for TLS private key encryption\n- on_tls_init(websocketpp::connection_hdl hdl) -> context_ptr - Initializes and configures the TLS context for secure connections",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl,\n        typename EndpointType::message_ptr msg)\n    {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                << \" and message: \" << msg->get_payload()\n                << std::endl;\n\n        try {\n            s->send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                    << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        std::cout << \"on_tls_init called with hdl: \" << hdl.lock().get() << std::endl;\n        context_ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1));\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                            boost::asio::ssl::context::no_sslv2 |\n                            boost::asio::ssl::context::no_sslv3 |\n                            boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Set logging policies\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize asio\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        // Register message handler\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2));\n\n        // Register TLS init handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on ports\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        server_tls::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cout << \"Error in context initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n    }\n\n    void init() {\n        // Set message handler for plain endpoint\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2));\n\n        // Set message handler for TLS endpoint\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2));\n\n        // Set TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on port 80 for plain connections\n        endpoint_plain_.listen(80);\n\n        // Listen on port 443 for TLS connections\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        s->send(hdl, payload, msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password handling logic\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                             websocketpp::lib::asio::ssl::context::no_sslv2 |\n                             websocketpp::lib::asio::ssl::context::single_dh_use);\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", websocketpp::lib::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n    }\n\n    void init() {\n        // Set message handler for plain endpoint\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n\n        // Set message handler for TLS endpoint\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n\n        // Set TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on ports 80 and 443\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<class EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        s->send(hdl, payload, msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        server_tls::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"key.pem\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"Error in context initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Set logging policies\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize Asio\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        // Register our message handler\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register our TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on port 80 (plain)\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Listen on port 443 (TLS)\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<class EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::transport::asio::tls::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::transport::asio::tls::context> ctx = websocketpp::lib::make_shared<websocketpp::transport::asio::tls::context>(websocketpp::transport::asio::tls::context::tlsv12);\n\n        try {\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", websocketpp::transport::asio::tls::context::pem);\n            ctx->use_tmp_dh_file(\"path/to/dh.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"Error in tls_init: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n    }\n\n    void init() {\n        // Set message handler for plain server\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2));\n        // Set message handler for TLS server\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2));\n\n        // Set TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on ports 80 and 443\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        s->send(hdl, payload, msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                             websocketpp::lib::asio::ssl::context::no_sslv2 |\n                             websocketpp::lib::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", websocketpp::lib::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"TLS init error: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Initialize plain server\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS server\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        s->send(hdl, payload, msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password handling\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                             websocketpp::lib::asio::ssl::context::no_sslv2 |\n                             websocketpp::lib::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/private.key\", websocketpp::lib::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"Error in tls_init: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Initialize plain server\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS server\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<class EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::tlsv1_2);\n\n        try {\n            ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                             websocketpp::lib::asio::ssl::context::no_sslv2 |\n                             websocketpp::lib::asio::ssl::context::no_sslv3 |\n                             websocketpp::lib::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", websocketpp::lib::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"Error in context initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Set logging policies\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize Asio\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        // Register message handler\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on ports\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<class EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        server_tls::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Set logging policies\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize asio\n        endpoint_plain_.init_asio();\n        endpoint_tls_.init_asio();\n\n        // Register our message handler\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2));\n\n        // Register TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on port 80 for plain connections\n        endpoint_plain_.listen(80);\n\n        // Listen on port 443 for TLS connections\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<class EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Message received: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::transport::asio::tls::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::transport::asio::tls::context> ctx = websocketpp::lib::make_shared<websocketpp::transport::asio::tls::context>(asio_tls_context::tlsv12);\n\n        try {\n            ctx->set_options(asio_tls_context::default_workarounds |\n                             asio_tls_context::no_sslv2 |\n                             asio_tls_context::no_sslv3 |\n                             asio_tls_context::single_dh_use);\n\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n            ctx->use_private_key_file(\"path/to/privatekey.pem\", asio_tls_context::pem);\n            ctx->use_tmp_dh_file(\"path/to/dhparam.pem\");\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize ASIO\n        ios_.run();\n\n        // Set logging policies\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize ASIO transport\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        // Register message handler\n        endpoint_plain_.set_message_handler(std::bind(&WebSocketServer::on_message<server_plain>, this, std::placeholders::_1, std::placeholders::_2));\n        endpoint_tls_.set_message_handler(std::bind(&WebSocketServer::on_message<server_tls>, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Register TLS initialization handler\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n\n        // Listen on ports\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        // Start accepting connections\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template<class EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        server_tls::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                            boost::asio::ssl::context::no_sslv2 |\n                            boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"key.pem\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cerr << \"Error in context initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement a function that demonstrates inter-process communication between a parent and child process using pipes in C++. The function should create a pipe, fork a child process, and have the parent process write data to the pipe while the child process reads and displays the data.\n\nFunction Description: The function `pipe_communication` sets up a pipe for communication between a parent and child process. The parent process writes a string to the pipe, and the child process reads and prints the data. The function handles pipe creation, process forking, and proper cleanup of file descriptors.\n\nInput: None\n\nOutput: None (The function prints messages to stdout indicating the progress and results of the pipe communication:\n- \"pipe create error\" if pipe creation fails\n- \"Read data from the pipe is [data]\" from the child process\n- \"Write data [data]\" and \"Parent write over\" from the parent process\n- \"parent close fd[1] over\" when parent completes cleanup)",
    "Canonical_solution": "#include <unistd.h>\n#include <stdio.h>\n#include <cstring>\n#include <cstdlib>\n\nvoid pipe_communication() {\n    int pipe_fd[2];\n    pid_t pid;\n\n    char r_buf[4];\n    char w_buf[100];\n    memset(r_buf,0,sizeof(r_buf));\n    memset(w_buf,0,sizeof(w_buf));\n    int r_num;\n\n    if(pipe(pipe_fd)<0) {\n        printf(\"pipe create error\\n\");\n        return;\n    }\n\n    if((pid=fork())==0) {\n        printf(\"\\n\");\n        close(pipe_fd[1]);\n        sleep(5);\n        while((r_num=read(pipe_fd[0],r_buf,4))!=0)\n            printf(\"Read data from the pipe is %s\\n\", r_buf);\n\n        close(pipe_fd[0]);\n        exit(0);\n    }\n    else if(pid>0) {\n        close(pipe_fd[0]);\n        const char* content = \"1111222233334444\";\n        strncpy(w_buf, content, strlen(content));\n        if(write(pipe_fd[1],w_buf, strlen(content))!=-1) {\n            printf(\"Write data %s\\n\", w_buf);\n            printf(\"Parent write over\\n\");\n        }\n        close(pipe_fd[1]);\n        printf(\"parent close fd[1] over\\n\");\n        wait(&pid);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 155,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0'; // Null-terminate the string\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close unused read end\n        const std::string message = \"Hello from parent\";\n        std::cout << \"Write data \" << message << std::endl;\n        write(pipefd[1], message.c_str(), message.size());\n        close(pipefd[1]);\n        std::cout << \"Parent write over\" << std::endl;\n        wait(nullptr); // Wait for child to finish\n    }\n}\n\nint main() {\n    pipe_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    pid_t pid;\n\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close the write end of the pipe\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close the read end of the pipe\n        const char* message = \"Hello from parent\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        close(pipefd[1]);\n        std::cout << \"Parent write over\" << std::endl;\n        wait(nullptr); // Wait for the child to finish\n    }\n}\n\nint main() {\n    pipe_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close the write end of the pipe\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close the read end of the pipe\n        const char* message = \"Hello from parent\";\n        std::cout << \"Write data \" << message << std::endl;\n        write(pipefd[1], message, strlen(message));\n        close(pipefd[1]);\n        std::cout << \"Parent write over\" << std::endl;\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    pid_t pid;\n\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0'; // Null-terminate the string\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char* message = \"Hello from parent\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        close(pipefd[1]);\n        std::cout << \"Parent write over\" << std::endl;\n    }\n}\n\nint main() {\n    pipe_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    pid_t pid;\n\n    // Create a pipe\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    // Fork a child process\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close the write end of the pipe\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0'; // Null-terminate the string\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]); // Close the read end of the pipe\n    } else { // Parent process\n        close(pipefd[0]); // Close the read end of the pipe\n        const char* message = \"Hello from parent\";\n        std::cout << \"Write data \" << message << std::endl;\n        write(pipefd[1], message, strlen(message));\n        close(pipefd[1]); // Close the write end of the pipe\n        std::cout << \"Parent write over\" << std::endl;\n        wait(nullptr); // Wait for the child process to finish\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0'; // Null-terminate the string\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char* message = \"Hello, child!\";\n        std::cout << \"Write data \" << message << std::endl;\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close the write end of the pipe\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]); // Close the read end of the pipe\n    } else { // Parent process\n        close(pipefd[0]); // Close the read end of the pipe\n        const std::string message = \"Hello from parent\";\n        std::cout << \"Write data \" << message << std::endl;\n        write(pipefd[1], message.c_str(), message.size());\n        close(pipefd[1]); // Close the write end of the pipe\n        std::cout << \"Parent write over\" << std::endl;\n        wait(nullptr); // Wait for the child process to finish\n    }\n}\n\nint main() {\n    pipe_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    pid_t pid;\n\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close the write end of the pipe\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close the read end of the pipe\n        const char* message = \"Hello from parent\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        close(pipefd[1]);\n        std::cout << \"Parent write over\" << std::endl;\n    }\n}\n\nint main() {\n    pipe_communication();\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char* message = \"Hello from parent\";\n        std::cout << \"Write data \" << message << std::endl;\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <string>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        close(pipefd[0]);\n        close(pipefd[1]);\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(pipefd[1]); // Close the write end of the pipe\n        char buffer[100];\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else { // Parent process\n        close(pipefd[0]); // Close the read end of the pipe\n        const std::string message = \"Hello from parent\";\n        write(pipefd[1], message.c_str(), message.size());\n        std::cout << \"Write data \" << message << std::endl;\n        close(pipefd[1]);\n        std::cout << \"Parent write over\" << std::endl;\n    }\n}\n\nint main() {\n    pipe_communication();\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement a multi-threaded HTTP download manager using libcurl in C++ that can handle multiple download tasks concurrently, avoid duplicate downloads, and manage resources efficiently.\n\nClass Description: The DownloadPool class manages a pool of worker threads that process download tasks. Each task downloads a file from a given URL and saves it to a specified output path. The class ensures thread safety and prevents duplicate downloads.\n\nAttributes:\n- m_threads: std::vector<std::thread> - Collection of worker threads\n- m_queue: std::queue<Task> - Queue of pending download tasks\n- m_urls: std::unordered_set<std::string> - Set of unique task identifiers to prevent duplicates\n- m_mtx: std::mutex - Mutex for thread synchronization\n- m_noMoreTask: bool - Flag indicating no more tasks will be added\n\nMethods:\n- DownloadPool() -> void - Constructor initializes libcurl and creates worker threads\n- ~DownloadPool() -> void - Destructor cleans up libcurl resources\n- addTask(const std::string& url, const std::string& output) -> void - Adds a new download task if not already present\n- setNoMoreTask() -> void - Signals that no more tasks will be added\n- finishAndWaitForExit() -> void - Waits for all threads to complete current tasks\n- run() -> void - Worker thread function that processes tasks from the queue\n\nTask Class Description: The Task class represents an individual download task with URL and output file path.\n\nAttributes:\n- m_url: std::string - URL to download from\n- m_output: std::string - Local file path to save to\n\nMethods:\n- run() -> void - Executes the download task using libcurl\n- writeData(void* buffer, size_t size, size_t nmemb) -> size_t - Callback function for writing received data to file",
    "Canonical_solution": "#include <curl/curl.h>\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n\nclass Task\n{\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    \n    void run()\n    {\n        std::ofstream output(m_output, std::fstream::in | std::fstream::out | std::fstream::trunc);\n        output.close();\n        \n        CURL *curl_handler = curl_easy_init();\n        curl_easy_setopt(curl_handler, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl_handler, CURLOPT_TIMEOUT, 60);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEFUNCTION, &Task::writeData);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEDATA, this);\n\n        curl_easy_perform(curl_handler);\n        \n        curl_easy_cleanup(curl_handler);\n    }\n\n    size_t writeData(void *buffer, size_t size, size_t nmemb)\n    {\n        std::ofstream file;\n        file.open(m_output, std::fstream::in | std::fstream::out | std::fstream::app | std::fstream::binary);\n        size_t bytesToWrite = size * nmemb;\n        file.write(reinterpret_cast<const char *>(buffer), bytesToWrite);\n        file.close();\n        \n        return bytesToWrite;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool\n{\npublic:\n    DownloadPool()\n    {\n        m_noMoreTask = false;\n        curl_global_init(CURL_GLOBAL_ALL);\n        \n        for (int idx = 0; idx < 4; idx++)\n        {\n            m_threads.push_back(std::thread(&DownloadPool::run, this));\n        }\n    }\n\n    ~DownloadPool()\n    {\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string &url, const std::string& output)\n    {\n        std::string uid = url + output;\n        bool existed = false;\n        Task task(url, output);\n        m_mtx.lock();\n        if (!(existed = (m_urls.find(uid) != m_urls.cend())))\n        {\n            m_urls.insert(uid);\n            m_queue.push(task);\n        }\n        m_mtx.unlock();\n    }\n\n    void setNoMoreTask()\n    {\n        m_mtx.lock();\n        m_noMoreTask = true;\n        m_mtx.unlock();\n    }\n\n    void finishAndWaitForExit()\n    {\n        setNoMoreTask();\n        for (auto& thread : m_threads)\n        {\n            thread.join();\n        }\n    }\n\nprivate:\n    void run()\n    {\n        while(true)\n        {\n            bool found = false;\n            Task task;\n            \n            m_mtx.lock();\n            if (!m_queue.empty())\n            {\n                task = m_queue.front();\n                m_queue.pop();\n                found = true;\n            }\n            bool noMoreTask = m_noMoreTask;\n            m_mtx.unlock();\n            \n            if (found)\n            {\n                task.run();\n                continue;\n            }\n            if (noMoreTask)\n            {\n                break;\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_queue.emplace(url, output);\n            m_urls.insert(url);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            if(fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n                res = curl_easy_perform(curl);\n                if(res != CURLE_OK)\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n                fclose(fp);\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            if(t.joinable()) t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            if(t.joinable()) t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) break;\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            if(t.joinable()) t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            if(t.joinable()) t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) break;\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            if(t.joinable()) t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            if(t.joinable()) t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) break;\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i)\n            m_threads.emplace_back(&DownloadPool::run, this);\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads)\n            t.join();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n        m_cv.notify_one();\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads)\n            t.join();\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask)\n                    break;\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK)\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n            fclose(fp);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_noMoreTask = true;\n        }\n        m_cv.notify_all();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& t : m_threads) {\n            t.join();\n        }\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            if(fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n                res = curl_easy_perform(curl);\n                if(res != CURLE_OK)\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n\n                fclose(fp);\n            }\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        return fwrite(buffer, size, nmemb, (FILE*)stream);\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i)\n            m_threads.emplace_back(&DownloadPool::run, this);\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_cv.wait(lock, [this] { return m_queue.empty() && m_noMoreTask; });\n        }\n        for(auto& t : m_threads)\n            if(t.joinable())\n                t.join();\n    }\n\nprivate:\n    void run() {\n        while(true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if(m_queue.empty() && m_noMoreTask)\n                    break;\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a TCP client class using Boost.Asio that handles asynchronous communication with a chat server, including reading from standard input and writing to standard output.\n\nClass Description: The posix_chat_client class implements an asynchronous TCP client for a chat application. It manages socket connections, handles message reading/writing, and processes user input/output asynchronously using Boost.Asio.\n\nAttributes:\n- socket_: [tcp::socket] - The TCP socket for communication with the server\n- input_: [posix::stream_descriptor] - Handles asynchronous reading from standard input\n- output_: [posix::stream_descriptor] - Handles asynchronous writing to standard output\n- read_msg_: [chat_message] - Stores the message being read from the server\n- write_msg_: [chat_message] - Stores the message to be written to the server\n- input_buffer_: [boost::asio::streambuf] - Buffer for storing input data\n\nMethods:\n- Constructor: [posix_chat_client]([boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints]) -> [void] - Initializes the client with IO context and server endpoints\n- do_connect: [do_connect]([const tcp::resolver::results_type& endpoints]) -> [void] - Asynchronously connects to the server endpoints\n- do_read_header: [do_read_header]() -> [void] - Asynchronously reads the message header from the server\n- do_read_body: [do_read_body]() -> [void] - Asynchronously reads the message body from the server after header is processed\n- do_write_output: [do_write_output]() -> [void] - Asynchronously writes received messages to standard output\n- do_read_input: [do_read_input]() -> [void] - Asynchronously reads input from standard input\n- do_write_message: [do_write_message]() -> [void] - Asynchronously writes the composed message to the server\n- close: [close]() -> [void] - Closes all connections and cleans up resources",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\n#include \"chat_message.hpp\"\nusing boost::asio::ip::tcp;\nnamespace posix = boost::asio::posix;\n\nclass posix_chat_client\n{\npublic:\n  posix_chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)),\n      input_buffer_(chat_message::max_body_length)\n  {\n    do_connect(endpoints);\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_write_output();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_output()\n  {\n    static char eol[] = { '\\n' };\n    std::array<boost::asio::const_buffer, 2> buffers = {{\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      boost::asio::buffer(eol) }};\n    boost::asio::async_write(output_, buffers,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_input()\n  {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            write_msg_.body_length(length - 1);\n            input_buffer_.sgetn(write_msg_.body(), length - 1);\n            input_buffer_.consume(1);\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else if (ec == boost::asio::error::not_found)\n          {\n            write_msg_.body_length(input_buffer_.size());\n            input_buffer_.sgetn(write_msg_.body(), input_buffer_.size());\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_message()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_input();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void close()\n  {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  posix::stream_descriptor input_;\n  posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <memory>\n#include <utility>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  std::size_t length() const {\n    return header_length + body_length_;\n  }\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    body_length_ = std::atoi(data_);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n    std::copy(header, header + header_length, data_);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\nclass posix_chat_client : public std::enable_shared_from_this<posix_chat_client> {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n  }\n\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, const tcp::endpoint&) {\n          if (!ec) {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec && read_msg_.decode_header()) {\n            do_read_body();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data() + chat_message::header_length, read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_write_output();\n            do_read_header();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write_output() {\n    auto self(shared_from_this());\n    boost::asio::async_write(output_,\n        boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_header();\n          } else {\n            output_.close();\n          }\n        });\n  }\n\n  void do_read_input() {\n    auto self(shared_from_this());\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this, self](boost::system::error_code ec, std::size_t length) {\n          if (!ec) {\n            write_msg_.body_length(length - 1);\n            std::istream is(&input_buffer_);\n            is.get(write_msg_.data(), write_msg_.body_length() + 1);\n            write_msg_.encode_header();\n            do_write_message();\n          } else {\n            input_.close();\n          }\n        });\n  }\n\n  void do_write_message() {\n    auto self(shared_from_this());\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_input();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <memory>\n#include <utility>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  std::size_t length() const {\n    return header_length + body_length_;\n  }\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    body_length_ = std::atoi(data_);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n    std::copy(header, header + header_length, data_);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\nclass posix_chat_client : public std::enable_shared_from_this<posix_chat_client> {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n  }\n\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, const tcp::endpoint&) {\n          if (!ec) {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec && read_msg_.decode_header()) {\n            do_read_body();\n          } else {\n            close();\n          }\n        });\n  }\n\n  void do_read_body() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data() + chat_message::header_length, read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_write_output();\n          } else {\n            close();\n          }\n        });\n  }\n\n  void do_write_output() {\n    auto self(shared_from_this());\n    boost::asio::async_write(output_,\n        boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_header();\n          } else {\n            close();\n          }\n        });\n  }\n\n  void do_read_input() {\n    auto self(shared_from_this());\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this, self](boost::system::error_code ec, std::size_t length) {\n          if (!ec) {\n            write_msg_.body_length(length - 1);\n            std::istream is(&input_buffer_);\n            is.get(write_msg_.data(), write_msg_.body_length() + 1);\n            write_msg_.encode_header();\n            do_write_message();\n          } else {\n            close();\n          }\n        });\n  }\n\n  void do_write_message() {\n    auto self(shared_from_this());\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_input();\n          } else {\n            close();\n          }\n        });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std; // For memcpy.\n        body_length_ = std::atoi(data_);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std; // For memcpy.\n        char header[header_length];\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n        do_read_input();\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    std::cerr << \"Connect failed: \" << ec.message() << \"\\n\";\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        auto self(shared_from_this());\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        auto self(shared_from_this());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::getline(is, write_msg_.body());\n                    write_msg_.body_length(write_msg_.body().length());\n                    write_msg_.encode_header();\n                    do_write_message();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_input();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    static constexpr std::size_t header_length = 4;\n    static constexpr std::size_t max_body_length = 512;\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std; // For memcpy.\n        body_length_ = std::atoi(data_);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std; // For memcpy.\n        char header[header_length];\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n    }\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&) {\n                if (!ec) {\n                    do_read_header();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        auto self(shared_from_this());\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    output_.close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        auto self(shared_from_this());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::getline(is, write_msg_.body());\n                    write_msg_.body_length(write_msg_.body().size());\n                    write_msg_.encode_header();\n                    do_write_message();\n                } else {\n                    input_.close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_input();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  chat_message() : body_length_(0) {}\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t length() const {\n    return header_length + body_length_;\n  }\n\n  const char* body() const {\n    return data_ + header_length;\n  }\n\n  char* body() {\n    return data_ + header_length;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    char header[header_length + 1] = \"\";\n    std::strncat(header, data_, header_length);\n    body_length_ = std::atoi(header);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n    std::memcpy(data_, header, header_length);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n  }\n\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, const tcp::endpoint&) {\n          if (!ec) {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec && read_msg_.decode_header()) {\n            do_read_body();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_write_output();\n            do_read_header();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write_output() {\n    auto self(shared_from_this());\n    boost::asio::async_write(output_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_header();\n          } else {\n            output_.close();\n          }\n        });\n  }\n\n  void do_read_input() {\n    auto self(shared_from_this());\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this, self](boost::system::error_code ec, std::size_t length) {\n          if (!ec) {\n            std::istream is(&input_buffer_);\n            std::getline(is, write_msg_.body());\n            write_msg_.body_length(write_msg_.body().length());\n            write_msg_.encode_header();\n            do_write_message();\n            input_buffer_.consume(length);\n            do_read_input();\n          } else {\n            input_.close();\n          }\n        });\n  }\n\n  void do_write_message() {\n    auto self(shared_from_this());\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_input();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std; // For memcpy.\n        body_length_ = std::atoi(data_);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std; // For memcpy.\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n    }\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&) {\n                if (!ec) {\n                    do_read_header();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        auto self(shared_from_this());\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        auto self(shared_from_this());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::getline(is, write_msg_.body());\n                    write_msg_.body_length(write_msg_.body().size());\n                    write_msg_.encode_header();\n                    do_write_message();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_input();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n    }\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&) {\n                if (!ec) {\n                    do_read_header();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data() + chat_message::header_length, read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        auto self(shared_from_this());\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        auto self(shared_from_this());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::getline(is, write_msg_.body());\n                    write_msg_.body_length(write_msg_.body().length());\n                    write_msg_.encode_header();\n                    do_write_message();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_input();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  chat_message() : body_length_(0) {}\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t length() const {\n    return header_length + body_length_;\n  }\n\n  const char* body() const {\n    return data_ + header_length;\n  }\n\n  char* body() {\n    return data_ + header_length;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    char header[header_length + 1] = \"\";\n    std::strncat(header, data_, header_length);\n    body_length_ = std::atoi(header);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n    std::memcpy(data_, header, header_length);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context,\n                    const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n  }\n\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, const tcp::endpoint&) {\n          if (!ec) {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec && read_msg_.decode_header()) {\n            do_read_body();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_write_output();\n            do_read_header();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write_output() {\n    auto self(shared_from_this());\n    boost::asio::async_write(output_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_header();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_input() {\n    auto self(shared_from_this());\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this, self](boost::system::error_code ec, std::size_t length) {\n          if (!ec) {\n            std::istream is(&input_buffer_);\n            std::getline(is, write_msg_.body());\n            write_msg_.body_length(write_msg_.body().length());\n            write_msg_.encode_header();\n            do_write_message();\n            input_buffer_.consume(length);\n            do_read_input();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write_message() {\n    auto self(shared_from_this());\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_input();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  chat_message() : body_length_(0) {}\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t length() const {\n    return header_length + body_length_;\n  }\n\n  const char* body() const {\n    return data_ + header_length;\n  }\n\n  char* body() {\n    return data_ + header_length;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    char header[header_length + 1] = \"\";\n    std::strncat(header, data_, header_length);\n    body_length_ = std::atoi(header);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n    std::memcpy(data_, header, header_length);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n  }\n\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, const tcp::endpoint&) {\n          if (!ec) {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec && read_msg_.decode_header()) {\n            do_read_body();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_write_output();\n            do_read_header();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write_output() {\n    auto self(shared_from_this());\n    boost::asio::async_write(output_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_header();\n          } else {\n            output_.close();\n          }\n        });\n  }\n\n  void do_read_input() {\n    auto self(shared_from_this());\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this, self](boost::system::error_code ec, std::size_t length) {\n          if (!ec) {\n            std::istream is(&input_buffer_);\n            std::getline(is, write_msg_.body());\n            write_msg_.body_length(write_msg_.body().length());\n            write_msg_.encode_header();\n            do_write_message();\n            input_buffer_.consume(length);\n            do_read_input();\n          } else {\n            input_.close();\n          }\n        });\n  }\n\n  void do_write_message() {\n    auto self(shared_from_this());\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            do_read_input();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n    }\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&) {\n                if (!ec) {\n                    do_read_header();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data() + chat_message::header_length, read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        auto self(shared_from_this());\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        auto self(shared_from_this());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::getline(is, write_msg_.body());\n                    write_msg_.body_length(write_msg_.body().length());\n                    write_msg_.encode_header();\n                    do_write_message();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_input();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement a WebSocket client class for webOS devices that supports both SSL and non-SSL connections using Boost.Asio and Boost.Beast libraries. The client should handle asynchronous connection, message sending/receiving, and error handling.\n\nClass Description: WebOsClient::Impl is an implementation class for a webOS WebSocket client that manages TCP/SSL WebSocket connections to a webOS device. It handles connection lifecycle, message exchange, and error recovery.\n\nAttributes:\n- ioc_: [net::io_context&] - Reference to Boost.Asio I/O context for asynchronous operations\n- ctx_: [ssl::context&] - Reference to SSL context for secure connections\n- device_settings_: [Device] - Configuration settings for the target device\n- log_: [std::shared_ptr<Logging>] - Shared pointer to logging utility\n- resolver_: [tcp::resolver] - TCP resolver for hostname resolution\n- ws_: [std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>] - Optional SSL WebSocket stream\n- ws_tcp_: [std::optional<websocket::stream<beast::tcp_stream>>] - Optional non-SSL WebSocket stream\n- buffer_: [beast::flat_buffer] - Buffer for incoming messages\n- host_: [std::string] - Target host address with port\n- socket_status_: [int] - Current connection status (disconnected/connecting/connected)\n\nMethods:\n- run(): [void]() - Initiates the connection process by resolving the hostname\n- onResolve(): [void](beast::error_code, tcp::resolver::results_type) - Callback for hostname resolution completion\n- onConnect(): [void](beast::error_code, tcp::resolver::results_type::endpoint_type) - Callback for TCP connection completion\n- onSSLhandshake(): [void](beast::error_code) - Callback for SSL handshake completion\n- onWinsockHandshake(): [void](beast::error_code) - Callback for WebSocket handshake completion\n- send(): [void](std::string, std::string) - Sends data through the WebSocket connection\n- onWrite(): [void](beast::error_code, std::size_t) - Callback for write operation completion\n- read(): [void]() - Initiates an asynchronous read operation\n- onRead(): [void](beast::error_code, std::size_t) - Callback for read operation completion\n- onError(): [void](beast::error_code&, std::string) - Handles connection errors\n- enqueueWork(): [void](Work&) - Adds work to the processing queue\n- close(): [void]() - Initiates connection shutdown\n- Impl(): [Constructor](net::io_context&, ssl::context&, Device&, Logging&) - Constructor initializing core components",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <nlohmann/json.hpp>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace websocket = beast::websocket;\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nusing tcp = boost::asio::ip::tcp;\nusing udp = boost::asio::ip::udp;\nusing json = nlohmann::json;\n\nclass WebOsClient::Impl : public std::enable_shared_from_this<WebOsClient::Impl> {\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_ = SOCKET_DISCONNECTED;\n\n    void run() {\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl)\n            ws_.emplace(resolver_.get_executor(), ctx_);\n        else\n            ws_tcp_.emplace(resolver_.get_executor());\n        host_ = device_settings_.ip;\n        resolver_.async_resolve(host_.c_str(), device_settings_.ssl ? PORT_SSL : PORT,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) return onError(ec, \"onResolve\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_tcp_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n        if (ec) return onError(ec, \"onConnect\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            if (!SSL_set_tlsext_host_name(ws_->next_layer().native_handle(), device_settings_.ip.c_str())) {\n                ec = beast::error_code(static_cast<int>(::ERR_get_error()), net::error::get_ssl_category());\n                return onError(ec, \"Failed to set SNI hostname\");\n            }\n            host_ += ':' + std::to_string(ep.port());\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            ws_tcp_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n            ws_tcp_->set_option(websocket::stream_base::decorator(\n                [](websocket::request_type& req) {\n                    req.set(http::field::user_agent,\n                        std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async\");\n                }));\n            host_ += ':' + std::to_string(ep.port());\n            ws_tcp_->async_handshake(host_, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onSSLhandshake\");\n        socket_status_ = SOCKET_CONNECTING;\n        beast::get_lowest_layer(*ws_).expires_never();\n        ws_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n        ws_->set_option(websocket::stream_base::decorator(\n            [](websocket::request_type& req) {\n                req.set(http::field::user_agent,\n                    std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async-ssl\");\n            }));\n        ws_->async_handshake(host_, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onWinsockHandshake\");\n        socket_status_ = SOCKET_CONNECTED;\n        send(webos_handshake_, \"webOS handshake\");\n    }\n\n    void send(std::string data, std::string log_message = \"\") {\n        if(device_settings_.ssl) {\n            ws_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        } else {\n            ws_tcp_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onWrite\");\n        read();\n    }\n\n    void read() {\n        if(device_settings_.ssl)\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        else\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onRead\");\n        socket_status_ = SOCKET_CONNECTED;\n        // Process received data here\n        buffer_.consume(buffer_.size());\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string err) {\n        DEBUG(\"%1% (%2%)\", ec.message(), err);\n        socket_status_ = SOCKET_DISCONNECTED;\n    }\n\npublic:\n    explicit Impl(net::io_context& ioc, ssl::context& ctx, Device& settings, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(settings), log_(std::make_shared<Logging>(log)),\n          resolver_(net::make_strand(ioc)) {}\n\n    void enqueueWork(Work& work) {\n        net::dispatch(resolver_.get_executor(),\n            [unit = work, self = shared_from_this()]() mutable {\n                self->workQueue_.emplace_back(std::move(unit));\n                self->startNextWork();\n            });\n    }\n\n    void close() {\n        net::dispatch(resolver_.get_executor(),\n            beast::bind_front_handler(&Impl::doClose, shared_from_this()));\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\n    // Logging utility\n};\n\nclass Work {\n    // Work item for processing queue\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc),\n              buffer_(), host_(\"\"), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"443\", beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                auto ep = results.begin();\n                if (ws_) {\n                    ws_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n                } else {\n                    ws_tcp_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n                }\n            } else {\n                onError(ec, \"Resolve\");\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (!ec) {\n                if (ws_) {\n                    ws_->next_layer().async_handshake(ssl::stream_base::client, beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n                } else {\n                    onWinsockHandshake(ec);\n                }\n            } else {\n                onError(ec, \"Connect\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n            } else {\n                onError(ec, \"SSL Handshake\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                read();\n            } else {\n                onError(ec, \"WebSocket Handshake\");\n            }\n        }\n\n        void send(const std::string& message, const std::string& target) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            } else {\n                ws_tcp_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read();\n            } else {\n                onError(ec, \"Write\");\n            }\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Process the message\n                read();\n            } else {\n                onError(ec, \"Read\");\n            }\n        }\n\n        void onError(beast::error_code& ec, const std::string& what) {\n            // Handle error\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to the processing queue\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            } else {\n                ws_tcp_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            // Handle close\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/optional.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\n    // Logging utility\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), buffer_(), host_(\"\"), socket_status_(0) {}\n\n        void run() {\n            host_ = device_settings_.getHost();\n            resolver_.async_resolve(host_, \"443\", beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Resolve\");\n            net::connect(ws_->next_layer().next_layer(), results.begin(), results.end(),\n                         beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"Connect\");\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                                              beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL Handshake\");\n            ws_->async_handshake(host_, \"/\",\n                                 beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket Handshake\");\n            socket_status_ = 2; // Connected\n            read();\n        }\n\n        void send(std::string message, std::string target) {\n            if (socket_status_ != 2) return;\n            ws_->async_write(net::buffer(message),\n                             beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write\");\n            read();\n        }\n\n        void read() {\n            ws_->async_read(buffer_,\n                            beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read\");\n            // Process received message\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string where) {\n            log_->error(\"Error in \" + where + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to processing queue\n        }\n\n        void close() {\n            if (ws_) ws_->close(websocket::close_code::normal);\n            socket_status_ = 0; // Disconnected\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        boost::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        boost::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/optional.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\n    // Logging utility\n};\n\nclass WebOsClient {\npublic:\n    struct Impl {\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        boost::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        boost::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(log), resolver_(ioc), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"443\", beast::bind_front_handler(&Impl::onResolve, this));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                auto ep = results.begin();\n                if (ws_) {\n                    ws_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, this));\n                } else if (ws_tcp_) {\n                    ws_tcp_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, this));\n                }\n            } else {\n                onError(ec, \"Resolve\");\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (!ec) {\n                if (ws_) {\n                    ws_->next_layer().async_handshake(ssl::stream_base::client, beast::bind_front_handler(&Impl::onSSLhandshake, this));\n                } else if (ws_tcp_) {\n                    ws_tcp_->async_handshake(beast::http::fields{}, beast::bind_front_handler(&Impl::onWinsockHandshake, this));\n                }\n            } else {\n                onError(ec, \"Connect\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, this));\n            } else {\n                onError(ec, \"SSL Handshake\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 2; // Connected\n                read();\n            } else {\n                onError(ec, \"WebSocket Handshake\");\n            }\n        }\n\n        void send(std::string message, std::string target) {\n            if (socket_status_ == 2) {\n                if (ws_) {\n                    ws_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, this));\n                } else if (ws_tcp_) {\n                    ws_tcp_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, this));\n                }\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle successful write\n            } else {\n                onError(ec, \"Write\");\n            }\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, this));\n            } else if (ws_tcp_) {\n                ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, this));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Process the received message\n                read();\n            } else {\n                onError(ec, \"Read\");\n            }\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            // Log the error\n            socket_status_ = 0; // Disconnected\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to the processing queue\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, this));\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, this));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 0; // Disconnected\n            } else {\n                onError(ec, \"Close\");\n            }\n        }\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/optional.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\n    // Logging utility\n};\n\nclass Work {\n    // Work item for processing\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(), socket_status_(0) {}\n\n        void run() {\n            host_ = \"example.com:443\"; // Example host\n            resolver_.async_resolve(host_, \"ws\", beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                auto ep = results.begin();\n                if (device_settings_.use_ssl) {\n                    ws_ = websocket::stream<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_);\n                    ws_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n                } else {\n                    ws_tcp_ = websocket::stream<beast::tcp_stream>(ioc_);\n                    ws_tcp_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n                }\n            } else {\n                onError(ec, \"Resolve\");\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (!ec) {\n                if (device_settings_.use_ssl) {\n                    ws_->next_layer().async_handshake(ssl::stream_base::client, beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n                } else {\n                    ws_tcp_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n                }\n            } else {\n                onError(ec, \"Connect\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n            } else {\n                onError(ec, \"SSL Handshake\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 2; // Connected\n                read();\n            } else {\n                onError(ec, \"WebSocket Handshake\");\n            }\n        }\n\n        void send(std::string message, std::string target) {\n            if (device_settings_.use_ssl) {\n                ws_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            } else {\n                ws_tcp_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle successful write\n            } else {\n                onError(ec, \"Write\");\n            }\n        }\n\n        void read() {\n            if (device_settings_.use_ssl) {\n                ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Process received message\n                read();\n            } else {\n                onError(ec, \"Read\");\n            }\n        }\n\n        void onError(beast::error_code& ec, std::string where) {\n            // Log error and handle accordingly\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to processing queue\n        }\n\n        void close() {\n            if (device_settings_.use_ssl) {\n                ws_->async_close(websocket::close_code::normal, [](beast::error_code) {});\n            } else {\n                ws_tcp_->async_close(websocket::close_code::normal, [](beast::error_code) {});\n            }\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        boost::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        boost::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <optional>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\n    // Logging utility\n};\n\nclass WebOsClient {\npublic:\n    struct Impl {\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n              resolver_(ioc), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"443\", beast::bind_front_handler(&Impl::onResolve, this));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n            beast::get_lowest_layer(*ws_).async_connect(results, beast::bind_front_handler(&Impl::onConnect, this));\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"connect\");\n            ws_->next_layer().async_handshake(ssl::stream_base::client, beast::bind_front_handler(&Impl::onSSLhandshake, this));\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ssl handshake\");\n            ws_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, this));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"websocket handshake\");\n            read();\n        }\n\n        void send(std::string message, std::string target) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, this));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"write\");\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, this));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"read\");\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string what) {\n            log_->logError(what + \": \" + ec.message());\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to the processing queue\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, [](beast::error_code) {});\n            }\n        }\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Implementation of logging\n    }\n};\n\nstruct Device {\n    std::string host;\n    int port;\n    bool use_ssl;\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"ws\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    if (!ec) {\n                        onResolve(ec, results);\n                    } else {\n                        onError(ec, \"Resolve\");\n                    }\n                });\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                auto ep = results.begin()->endpoint();\n                if (device_settings_.use_ssl) {\n                    ws_ = websocket::stream<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_);\n                    ws_->next_layer().async_connect(ep,\n                        [this](beast::error_code ec) {\n                            if (!ec) {\n                                onConnect(ec, ws_->next_layer().socket().remote_endpoint());\n                            } else {\n                                onError(ec, \"Connect\");\n                            }\n                        });\n                } else {\n                    ws_tcp_ = websocket::stream<beast::tcp_stream>(ioc_);\n                    ws_tcp_->next_layer().async_connect(ep,\n                        [this](beast::error_code ec) {\n                            if (!ec) {\n                                onConnect(ec, ws_tcp_->next_layer().socket().remote_endpoint());\n                            } else {\n                                onError(ec, \"Connect\");\n                            }\n                        });\n                }\n            } else {\n                onError(ec, \"Resolve\");\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n            if (!ec) {\n                if (device_settings_.use_ssl) {\n                    ws_->next_layer().async_handshake(ssl::stream_base::client,\n                        [this](beast::error_code ec) {\n                            if (!ec) {\n                                onSSLhandshake(ec);\n                            } else {\n                                onError(ec, \"SSL Handshake\");\n                            }\n                        });\n                } else {\n                    ws_tcp_->async_handshake(host_, \"/\",\n                        [this](beast::error_code ec) {\n                            if (!ec) {\n                                onWinsockHandshake(ec);\n                            } else {\n                                onError(ec, \"WebSocket Handshake\");\n                            }\n                        });\n                }\n            } else {\n                onError(ec, \"Connect\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        if (!ec) {\n                            onWinsockHandshake(ec);\n                        } else {\n                            onError(ec, \"WebSocket Handshake\");\n                        }\n                    });\n            } else {\n                onError(ec, \"SSL Handshake\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 2; // Connected\n                read();\n            } else {\n                onError(ec, \"WebSocket Handshake\");\n            }\n        }\n\n        void send(std::string message, std::string target) {\n            if (device_settings_.use_ssl) {\n                ws_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            } else {\n                ws_tcp_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle successful write\n            } else {\n                onError(ec, \"Write\");\n            }\n        }\n\n        void read() {\n            if (device_settings_.use_ssl) {\n                ws_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            } else {\n                ws_tcp_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Process received message\n                read();\n            } else {\n                onError(ec, \"Read\");\n            }\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            log_->log(\"Error in \" + context + \": \" + ec.message());\n            // Handle error, possibly attempt reconnection\n        }\n\n        void enqueueWork(Work& work) {\n            // Implementation of work queue\n        }\n\n        void close() {\n            if (device_settings_.use_ssl && ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        // Handle close\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        // Handle close\n                    });\n            }\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <memory>\n#include <optional>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Implementation of logging\n    }\n};\n\nstruct Device {\n    std::string host;\n    int port;\n    bool use_ssl;\n};\n\nclass WebOsClient {\npublic:\n    struct Impl {\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n              resolver_(ioc), socket_status_(0) {\n            host_ = device.host + \":\" + std::to_string(device.port);\n        }\n\n        void run() {\n            resolver_.async_resolve(host_, \"ws\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    if (!ec) {\n                        onResolve(ec, results);\n                    } else {\n                        onError(ec, \"Resolve\");\n                    }\n                });\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                if (device_settings_.use_ssl) {\n                    auto stream = beast::ssl_stream<beast::tcp_stream>{ioc_, ctx_};\n                    ws_ = websocket::stream<decltype(stream)>{std::move(stream)};\n                    ws_->next_layer().async_connect(results,\n                        [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                            if (!ec) {\n                                onConnect(ec);\n                            } else {\n                                onError(ec, \"Connect\");\n                            }\n                        });\n                } else {\n                    auto stream = beast::tcp_stream{ioc_};\n                    ws_tcp_ = websocket::stream<decltype(stream)>{std::move(stream)};\n                    ws_tcp_->next_layer().async_connect(results,\n                        [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                            if (!ec) {\n                                onConnect(ec);\n                            } else {\n                                onError(ec, \"Connect\");\n                            }\n                        });\n                }\n            } else {\n                onError(ec, \"Resolve\");\n            }\n        }\n\n        void onConnect(beast::error_code ec) {\n            if (!ec) {\n                if (device_settings_.use_ssl) {\n                    ws_->next_layer().async_handshake(ssl::stream_base::client,\n                        [this](beast::error_code ec) {\n                            if (!ec) {\n                                onSSLhandshake(ec);\n                            } else {\n                                onError(ec, \"SSL Handshake\");\n                            }\n                        });\n                } else {\n                    onWinsockHandshake(ec);\n                }\n            } else {\n                onError(ec, \"Connect\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        if (!ec) {\n                            onWinsockHandshake(ec);\n                        } else {\n                            onError(ec, \"WebSocket Handshake\");\n                        }\n                    });\n            } else {\n                onError(ec, \"SSL Handshake\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 2; // Connected\n                read();\n            } else {\n                onError(ec, \"WebSocket Handshake\");\n            }\n        }\n\n        void send(std::string message, std::string target) {\n            if (socket_status_ == 2) {\n                if (device_settings_.use_ssl) {\n                    ws_->async_write(net::buffer(message),\n                        [this](beast::error_code ec, std::size_t bytes_transferred) {\n                            onWrite(ec, bytes_transferred);\n                        });\n                } else {\n                    ws_tcp_->async_write(net::buffer(message),\n                        [this](beast::error_code ec, std::size_t bytes_transferred) {\n                            onWrite(ec, bytes_transferred);\n                        });\n                }\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle successful write\n            } else {\n                onError(ec, \"Write\");\n            }\n        }\n\n        void read() {\n            if (socket_status_ == 2) {\n                if (device_settings_.use_ssl) {\n                    ws_->async_read(buffer_,\n                        [this](beast::error_code ec, std::size_t bytes_transferred) {\n                            onRead(ec, bytes_transferred);\n                        });\n                } else {\n                    ws_tcp_->async_read(buffer_,\n                        [this](beast::error_code ec, std::size_t bytes_transferred) {\n                            onRead(ec, bytes_transferred);\n                        });\n                }\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle received message\n                read();\n            } else {\n                onError(ec, \"Read\");\n            }\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            log_->log(\"Error in \" + context + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            // Implementation of enqueuing work\n        }\n\n        void close() {\n            if (device_settings_.use_ssl && ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (!ec) {\n                            socket_status_ = 0; // Disconnected\n                        }\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (!ec) {\n                            socket_status_ = 0; // Disconnected\n                        }\n                    });\n            }\n        }\n    };\n\nprivate:\n    std::unique_ptr<Impl> impl_;\n\npublic:\n    WebOsClient(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : impl_(std::make_unique<Impl>(ioc, ctx, device, log)) {}\n\n    void run() { impl_->run(); }\n    void send(std::string message, std::string target) { impl_->send(message, target); }\n    void close() { impl_->close(); }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/optional.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\n    // Logging utility\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), buffer_(), socket_status_(0) {}\n\n        void run() {\n            host_ = \"example.com:443\"; // Example host\n            resolver_.async_resolve(host_, \"ws\", beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                auto ep = results.begin();\n                if (device_settings_.use_ssl) {\n                    ws_ = websocket::stream<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_);\n                    ws_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n                } else {\n                    ws_tcp_ = websocket::stream<beast::tcp_stream>(ioc_);\n                    ws_tcp_->next_layer().async_connect(*ep, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n                }\n            } else {\n                onError(ec, \"Resolve\");\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (!ec) {\n                if (device_settings_.use_ssl) {\n                    ws_->next_layer().async_handshake(ssl::stream_base::client, beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n                } else {\n                    ws_tcp_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n                }\n            } else {\n                onError(ec, \"Connect\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n            } else {\n                onError(ec, \"SSL Handshake\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 2; // Connected\n                read();\n            } else {\n                onError(ec, \"WebSocket Handshake\");\n            }\n        }\n\n        void send(std::string message, std::string target) {\n            if (device_settings_.use_ssl) {\n                ws_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            } else {\n                ws_tcp_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle successful write\n            } else {\n                onError(ec, \"Write\");\n            }\n        }\n\n        void read() {\n            if (device_settings_.use_ssl) {\n                ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Process received message\n                read();\n            } else {\n                onError(ec, \"Read\");\n            }\n        }\n\n        void onError(beast::error_code& ec, std::string operation) {\n            // Handle error\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to processing queue\n        }\n\n        void close() {\n            if (device_settings_.use_ssl && ws_) {\n                ws_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            if (!ec) {\n                socket_status_ = 0; // Disconnected\n            } else {\n                onError(ec, \"Close\");\n            }\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        boost::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        boost::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Device {\n    // Device configuration settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass Work {\n    // Work item definition\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc),\n              buffer_(), host_(\"\"), socket_status_(0) {}\n\n        void run() {\n            host_ = \"example.com:443\"; // Example host\n            resolver_.async_resolve(host_, \"ws\", beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Resolve\");\n            beast::get_lowest_layer(ws_).async_connect(results, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"Connect\");\n            ws_->next_layer().async_handshake(ssl::stream_base::client, beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL Handshake\");\n            ws_->async_handshake(host_, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket Handshake\");\n            read();\n        }\n\n        void send(std::string message, std::string target) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message), beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write\");\n            read();\n        }\n\n        void read() {\n            ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read\");\n            // Process received message\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string what) {\n            log_->log(\"Error: \" + what + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            // Enqueue work item\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, [](beast::error_code) {});\n            }\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/beast/ssl.hpp>\n#include <memory>\n#include <string>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = beast::websocket;\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Implementation of logging\n    }\n};\n\nstruct Device {\n    std::string host;\n    int port;\n    bool use_ssl;\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"ws\", beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Resolve\");\n            if (device_settings_.use_ssl) {\n                ws_ = websocket::stream<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_);\n                auto& ws = *ws_;\n                ws.next_layer().async_handshake(ssl::stream_base::client,\n                    beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n            } else {\n                ws_tcp_ = websocket::stream<beast::tcp_stream>(ioc_);\n                auto& ws = *ws_tcp_;\n                ws.async_handshake(host_, \"/\",\n                    beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL Handshake\");\n            auto& ws = *ws_;\n            ws.async_handshake(host_, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket Handshake\");\n            socket_status_ = 2; // Connected\n            read();\n        }\n\n        void send(const std::string& message, const std::string& target) {\n            if (socket_status_ != 2) return;\n            if (device_settings_.use_ssl) {\n                auto& ws = *ws_;\n                ws.async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            } else {\n                auto& ws = *ws_tcp_;\n                ws.async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write\");\n            read();\n        }\n\n        void read() {\n            if (socket_status_ != 2) return;\n            if (device_settings_.use_ssl) {\n                auto& ws = *ws_;\n                ws.async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                auto& ws = *ws_tcp_;\n                ws.async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read\");\n            std::string message(boost::asio::buffers_begin(buffer_.data()), boost::asio::buffers_end(buffer_.data()));\n            buffer_.consume(buffer_.size());\n            // Process message\n            read();\n        }\n\n        void onError(beast::error_code& ec, const std::string& what) {\n            log_->log(\"Error: \" + what + \" (\" + ec.message() + \")\");\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            // Implementation of work queue\n        }\n\n        void close() {\n            if (ws_) ws_->close(websocket::close_code::normal);\n            if (ws_tcp_) ws_tcp_->close(websocket::close_code::normal);\n            socket_status_ = 0; // Disconnected\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement a TCP client using Boost.Asio for asynchronous network communication, capable of connecting to a server, sending messages, and receiving responses.\n\nClass Description: The `chat_client` class encapsulates a TCP client that manages asynchronous network operations including connection establishment, message reading, and message writing.\n\nAttributes:\n- io_context_: boost::asio::io_context& - Reference to the I/O execution context for asynchronous operations.\n- socket_: tcp::socket - TCP socket for communication with the server.\n- read_msg_: chat_message - Buffer for storing the currently read message.\n- write_msgs_: chat_message_queue - Queue of messages waiting to be sent to the server.\n\nMethods:\n- Constructor: chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints) -> None - Initializes the client with I/O context and server endpoints, then starts the connection process.\n- write: write(const chat_message& msg) -> None - Enqueues a message for asynchronous sending to the server.\n- close: close() -> None - Initiates socket closure to terminate the connection cleanly.\n- do_connect: do_connect(const tcp::resolver::results_type& endpoints) -> None - Asynchronously connects to the server using the provided endpoints.\n- do_read_header: do_read_header() -> None - Asynchronously reads the message header from the server.\n- do_read_body: do_read_body() -> None - Asynchronously reads the message body from the server after header is processed.\n- do_write: do_write() -> None - Asynchronously writes the next queued message to the server.",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <deque>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context),\n      socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n        [this, msg]()\n        {\n          bool write_in_progress = !write_msgs_.empty();\n          write_msgs_.push_back(msg);\n          if (!write_in_progress)\n          {\n            do_write();\n          }\n        });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            std::cout.write(read_msg_.body(), read_msg_.body_length());\n            std::cout << \"\\n\";\n            do_read_header();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msgs_.front().data(),\n          write_msgs_.front().length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            write_msgs_.pop_front();\n            if (!write_msgs_.empty())\n            {\n              do_write();\n            }\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  std::size_t length() const {\n    return header_length + body_length;\n  }\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    body_length_ = std::atoi(data_);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n    std::copy(header, header + header_length, data_);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n  chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context),\n      socket_(io_context) {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg) {\n    boost::asio::post(io_context_,\n        [this, msg]() {\n          bool write_in_progress = !write_msgs_.empty();\n          write_msgs_.push_back(msg);\n          if (!write_in_progress) {\n            do_write();\n          }\n        });\n  }\n\n  void close() {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint) {\n          if (!ec) {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec && read_msg_.decode_header()) {\n            do_read_body();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body() {\n    auto self(shared_from_this());\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data() + chat_message::header_length, read_msg_.body_length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            std::cout.write(read_msg_.data(), read_msg_.length());\n            std::cout << \"\\n\";\n            do_read_header();\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write() {\n    auto self(shared_from_this());\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n        [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n          if (!ec) {\n            write_msgs_.pop_front();\n            if (!write_msgs_.empty()) {\n              do_write();\n            }\n          } else {\n            socket_.close();\n          }\n        });\n  }\n\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n              write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message()\n        : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    static constexpr std::size_t header_length = 4;\n    static constexpr std::size_t max_body_length = 512;\n\n    enum { message_complete };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std; // For memcpy.\n        body_length_ = std::atoi(data_);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std; // For memcpy.\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    static constexpr std::size_t header_length = 4;\n    static constexpr std::size_t max_body_length = 512;\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        using namespace std;\n        char header[header_length + 1] = \"\";\n        snprintf(header, sizeof(header), \"%4d\", static_cast<int>(body_length_));\n        memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_,\n            [this]() {\n                socket_.close();\n            });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        auto self(shared_from_this());\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n              write_msgs_.front().length()),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  }
]