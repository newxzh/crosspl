[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Implement a Go struct that represents a Docker registry repository client, capable of interacting with Docker registry API v2 to manage blobs, manifests, and tags.\n\nStruct Description: The `repository` struct serves as a client for interacting with a Docker registry's repository, providing methods to access blob storage, manifests, and tag services. It maintains HTTP client configuration and URL building capabilities.\n\nFields:\n- client: *http.Client - Custom HTTP client configured with transport and redirect handling\n- ub: *v2.URLBuilder - URL builder for constructing registry API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Named() -> reference.Named - Returns the named reference of the repository\n- Blobs(context.Context) -> distribution.BlobStore - Returns a BlobStore for managing repository blobs\n- Manifests(context.Context, ...distribution.ManifestServiceOption) -> (distribution.ManifestService, error) - Returns a ManifestService for managing repository manifests\n- Tags(context.Context) -> distribution.TagService - Returns a TagService for managing repository tags\n\nTask Description: Implement a Go struct that represents a tag service for a Docker registry repository, capable of retrieving tag information from a Docker registry API v2.\n\nStruct Description: The `tags` struct provides tag-related operations for a Docker repository, implementing the distribution.TagService interface. It uses HTTP requests to interact with the registry's tag API endpoints.\n\nFields:\n- client: *http.Client - HTTP client for making requests to the registry\n- ub: *v2.URLBuilder - URL builder for constructing tag-related API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Get(context.Context, string) -> (distribution.Descriptor, error) - Retrieves the descriptor for a specific tag, making HEAD and GET requests as needed to the registry API",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/distribution/reference\"\n\t\"github.com/docker/distribution\"\n\tv2 \"github.com/docker/distribution/registry/api/v2\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc NewRepository(name reference.Named, baseURL string, transport http.RoundTripper) (distribution.Repository, error) {\n\tub, err := v2.NewURLBuilderFromString(baseURL, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:     transport,\n\t\tCheckRedirect: checkHTTPRedirect,\n\t}\n\n\treturn &repository{\n\t\tclient: client,\n\t\tub:     ub,\n\t\tname:   name,\n\t}, nil\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\tstatter := &blobStatter{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t}\n\treturn &blobs{\n\t\tname:    r.name,\n\t\tub:      r.ub,\n\t\tclient:  r.client,\n\t\tstatter: statter,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t\tetags:  make(map[string]string),\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.Named(),\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\tref, err := reference.WithTag(t.name, tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tu, err := t.ub.BuildManifestURL(ref)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tnewRequest := func(method string) (*http.Response, error) {\n\t\treq, err := http.NewRequest(method, u, nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tfor _, t := range distribution.ManifestMediaTypes() {\n\t\t\treq.Header.Add(\"Accept\", t)\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\treturn resp, err\n\t}\n\n\tresp, err := newRequest(\"HEAD\")\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tswitch {\n\tcase resp.StatusCode >= 200 && resp.StatusCode < 400 && len(resp.Header.Get(\"Docker-Content-Digest\")) > 0:\n\t\treturn descriptorFromResponse(resp)\n\tdefault:\n\t\tresp, err = newRequest(\"GET\")\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\treturn descriptorFromResponse(resp)\n\t\t}\n\t\treturn distribution.Descriptor{}, HandleErrorResponse(resp)\n\t}\n}\n\nfunc descriptorFromResponse(response *http.Response) (distribution.Descriptor, error) {\n\tdesc := distribution.Descriptor{}\n\theaders := response.Header\n\n\tctHeader := headers.Get(\"Content-Type\")\n\tif ctHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Type header\")\n\t}\n\tdesc.MediaType = ctHeader\n\n\tdigestHeader := headers.Get(\"Docker-Content-Digest\")\n\tif digestHeader == \"\" {\n\t\tbytes, err := ioutil.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\t_, desc, err := distribution.UnmarshalManifest(ctHeader, bytes)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn desc, nil\n\t}\n\n\tdgst, err := digest.Parse(digestHeader)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Digest = dgst\n\n\tlengthHeader := headers.Get(\"Content-Length\")\n\tif lengthHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Length header\")\n\t}\n\tlength, err := strconv.ParseInt(lengthHeader, 10, 64)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Size = length\n\n\treturn desc, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "type repository struct {\n    client *http.Client\n    ub     *v2.URLBuilder\n    name   reference.Named\n}\n\nfunc (r *repository) Named() reference.Named {\n    return r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n    return &blobStore{\n        client: r.client,\n        ub:     r.ub,\n        name:   r.name,\n    }\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n    return &manifestService{\n        client: r.client,\n        ub:     r.ub,\n        name:   r.name,\n    }, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n    return &tags{\n        client: r.client,\n        ub:     r.ub,\n        name:   r.name,\n    }\n}\n\ntype tags struct {\n    client *http.Client\n    ub     *v2.URLBuilder\n    name   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n    url, err := t.ub.BuildTagURL(t.name, tag)\n    if err != nil {\n        return distribution.Descriptor{}, err\n    }\n\n    headReq, err := http.NewRequestWithContext(ctx, \"HEAD\", url, nil)\n    if err != nil {\n        return distribution.Descriptor{}, err\n    }\n\n    headResp, err := t.client.Do(headReq)\n    if err != nil {\n        return distribution.Descriptor{}, err\n    }\n    defer headResp.Body.Close()\n\n    if headResp.StatusCode == http.StatusNotFound {\n        return distribution.Descriptor{}, distribution.ErrTagUnknown\n    }\n\n    if headResp.StatusCode < 200 || headResp.StatusCode >= 400 {\n        return distribution.Descriptor{}, fmt.Errorf(\"unexpected status code: %d\", headResp.StatusCode)\n    }\n\n    digestStr := headResp.Header.Get(\"Docker-Content-Digest\")\n    if digestStr != \"\" {\n        digest, err := digest.Parse(digestStr)\n        if err != nil {\n            return distribution.Descriptor{}, err\n        }\n        return distribution.Descriptor{\n            Digest:    digest,\n            MediaType: headResp.Header.Get(\"Content-Type\"),\n            Size:      headResp.ContentLength,\n        }, nil\n    }\n\n    getReq, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n    if err != nil {\n        return distribution.Descriptor{}, err\n    }\n\n    getResp, err := t.client.Do(getReq)\n    if err != nil {\n        return distribution.Descriptor{}, err\n    }\n    defer getResp.Body.Close()\n\n    if getResp.StatusCode == http.StatusNotFound {\n        return distribution.Descriptor{}, distribution.ErrTagUnknown\n    }\n\n    if getResp.StatusCode != http.StatusOK {\n        return distribution.Descriptor{}, fmt.Errorf(\"unexpected status code: %d\", getResp.StatusCode)\n    }\n\n    digestStr = getResp.Header.Get(\"Docker-Content-Digest\")\n    if digestStr == \"\" {\n        return distribution.Descriptor{}, errors.New(\"no Docker-Content-Digest header in GET response\")\n    }\n\n    digest, err := digest.Parse(digestStr)\n    if err != nil {\n        return distribution.Descriptor{}, err\n    }\n\n    return distribution.Descriptor{\n        Digest:    digest,\n        MediaType: getResp.Header.Get(\"Content-Type\"),\n        Size:      getResp.ContentLength,\n    }, nil\n}"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a Go HTTP client struct that can make authenticated API requests with custom headers and handle responses, including error status codes.\n\nStruct Description: The Client struct represents an HTTP client with authentication credentials and endpoint configuration, capable of making various HTTP requests and processing responses.\n\nFields:\nUser: string - The username for basic authentication\nApiKey: string - The API key or password for basic authentication\nEndpoint: string - The base URL for API endpoints\n\nMethods:\nisOkStatus: [Name](code int) -> bool - Checks if the HTTP status code indicates a successful response (200, 201, 204 return true; 400, 404, 500, 409, 406 return false)\nnewRequest: [Name](method string, uri string, body interface{}) -> ([]byte, error) - Creates and executes an HTTP request with the given method, URI, and optional body. Returns the response body or an error if the request fails or returns a non-success status code. Automatically adds basic authentication headers.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tUser     string\n\tApiKey   string\n\tEndpoint string\n}\n\nfunc (c *Client) isOkStatus(code int) bool {\n\tcodes := map[int]bool{\n\t\t200: true,\n\t\t201: true,\n\t\t204: true,\n\t\t400: false,\n\t\t404: false,\n\t\t500: false,\n\t\t409: false,\n\t\t406: false,\n\t}\n\n\treturn codes[code]\n}\n\nfunc (c *Client) newRequest(method, uri string, body interface{}) ([]byte, error) {\n\tvar (\n\t\tclient = &http.Client{}\n\t\turl    = fmt.Sprintf(\"%s/%s\", c.Endpoint, uri)\n\t\terr    error\n\t\treq    *http.Request\n\t)\n\n\tif body != nil {\n\t\tbodyJSON, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq, err = http.NewRequest(method, url, bytes.NewBuffer(bodyJSON))\n\t} else {\n\t\treq, err = http.NewRequest(method, url, nil)\n\t}\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Error with request: %v - %q\", url, err)\n\t}\n\n\treq.SetBasicAuth(c.User, c.ApiKey)\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif !c.isOkStatus(resp.StatusCode) {\n\t\ttype apiErr struct {\n\t\t\tErr string `json:\"error\"`\n\t\t}\n\t\tvar outErr apiErr\n\t\tjson.Unmarshal(data, &outErr)\n\t\treturn nil, fmt.Errorf(\"Error in response: %s\", outErr.Err)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn data, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tUser     string\n\tApiKey   string\n\tEndpoint string\n}\n\nfunc (c *Client) isOkStatus(code int) bool {\n\treturn code == http.StatusOK || code == http.StatusCreated || code == http.StatusNoContent\n}\n\nfunc (c *Client) newRequest(method, uri string, body interface{}) ([]byte, error) {\n\tu := c.Endpoint + uri\n\n\tvar reqBody io.Reader\n\tif body != nil {\n\t\tdata, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treqBody = bytes.NewBuffer(data)\n\t}\n\n\treq, err := http.NewRequest(method, u, reqBody)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.SetBasicAuth(c.User, c.ApiKey)\n\treq.Header.Set(\"Accept\", \"application/json\")\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !c.isOkStatus(resp.StatusCode) {\n\t\treturn respBody, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\treturn respBody, nil\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server using the Echo framework, which acts as a reverse proxy to route requests to different host servers based on the request's host header.\n\nFunction Description: The function initializes an Echo instance, configures middleware, sets up route handlers, and starts an HTTP server that proxies requests to different Echo instances based on the host header. It maintains a map of hostnames to their corresponding Echo instances for routing purposes.\n\nInput: None (The function takes no parameters but internally uses a map of hostnames to Echo instances)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)\n\n---\n\nTask Description: Create a Go struct that represents a virtual host configuration for an Echo-based HTTP server.\n\nStruct Description: The Host struct represents a virtual host configuration that holds an Echo instance for handling requests to a specific hostname.\n\nFields:\nEcho: *echo.Echo - Pointer to an Echo instance that handles requests for this host\n\nMethods:\nNone (The struct is simple and only holds a reference to an Echo instance)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\thosts := make(map[string]*Host)\n\n\tapi := echo.New()\n\tapi.Use(middleware.Logger())\n\tapi.Use(middleware.Recover())\n\n\thosts[\"api.localhost:1323\"] = &Host{api}\n\n\tapi.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"API\")\n\t})\n\n\te := echo.New()\n\te.Any(\"/*\", func(c echo.Context) (err error) {\n\t\treq := c.Request()\n\t\tres := c.Response()\n\t\thost := hosts[req.Host]\n\n\t\tif host == nil {\n\t\t\terr = echo.ErrNotFound\n\t\t} else {\n\t\t\thost.Echo.ServeHTTP(res, req)\n\t\t}\n\n\t\treturn\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\ntype Host struct {\n\tEcho *echo.Echo\n}\n\nfunc setupReverseProxyServer() {\n\tproxy := echo.New()\n\tproxy.Use(middleware.Logger(), middleware.Recover())\n\n\thostMap := map[string]*Host{\n\t\t\"example.com\": {Echo: echo.New()},\n\t\t\"test.com\":    {Echo: echo.New()},\n\t}\n\n\tproxy.Any(\"/*\", func(c echo.Context) error {\n\t\thost := c.Request().Host\n\t\tif h, ok := hostMap[host]; ok {\n\t\t\th.Echo.ServeHTTP(c.Response(), c.Request())\n\t\t\treturn nil\n\t\t}\n\t\treturn echo.NewHTTPError(http.StatusNotFound, \"Host not found\")\n\t})\n\n\tproxy.Start(\":8080\")\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a function to retrieve metadata and ETag from Google Compute Engine (GCE) metadata server using a custom HTTP client with specific timeout configurations.\n\nFunction Description: The function `getETag` makes an HTTP GET request to the GCE metadata server to fetch metadata value and its associated ETag. It uses a pre-configured HTTP client with custom timeout settings and adds required headers to the request. The function handles various response scenarios including not found errors and non-200 status codes.\n\nInput:\n- suffix [string]: The metadata path suffix to append to the base metadata URL\n\nOutput:\n- value [string]: The retrieved metadata value\n- etag [string]: The ETag header value from the response\n- err [error]: Error object if any error occurs during the request or processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"google.golang.org/cloud/internal\"\n)\n\nvar metaClient = &http.Client{\n\tTransport: &internal.Transport{\n\t\tBase: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   750 * time.Millisecond,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 750 * time.Millisecond,\n\t\t},\n\t},\n}\n\nfunc getETag(suffix string) (value, etag string, err error) {\n\thost := os.Getenv(\"GCE_METADATA_HOST\")\n\tif host == \"\" {\n\t\thost = \"169.254.169.254\"\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\tres, err := metaClient.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc getETag(suffix string) (string, string, error) {\n\tclient := &http.Client{\n\t\tTimeout: 10 * time.Second,\n\t\tTransport: &http.Transport{\n\t\t\tProxy: nil,\n\t\t},\n\t}\n\n\turl := \"http://metadata.google.internal/computeMetadata/v1/\" + suffix\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treq.Header.Set(\"Metadata-Token\", \"true\")\n\treq.Header.Set(\"Accept-Encoding\", \"identity\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", fmt.Errorf(\"metadata not found\")\n\t} else if resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\n\treturn string(body), resp.Header.Get(\"Etag\"), nil\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that initializes and runs a Fiber-based HTTP server with specific routes for job management, while also starting a background engine process.\n\nFunction Description: The function `Run` initializes a Fiber web server with disabled startup messages, sets up three routes for job management (creating new jobs, checking job status, and retrieving jobs), starts a background engine process in a goroutine, and finally starts listening on a specified host and port.\n\nInput: None (uses package-level constants Host and Port for server configuration)\n\nOutput: None (runs indefinitely as a web server, but technically returns an error if the server fails to start)\n\nNote: The function uses package-level constants Host and Port for server configuration and assumes the existence of handler functions NewJob, GetStatus, and GetJob, as well as an Engine function for background processing.",
    "Canonical_solution": "import (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs/\", NewJob)\n\tapp.Get(\"/jobs/status/:id\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\tapp.Listen(Host + \":\" + Port)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gofiber/gofiber/v2\"\n)\n\nfunc Run() error {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs\", NewJob)\n\tapp.Get(\"/jobs/:id/status\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\treturn app.Listen(fmt.Sprintf(\"%s:%d\", Host, Port))\n}"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using Gin framework with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a simple GET route handler, configures automatic TLS certificate management using autocert, and starts the HTTPS server. The server will automatically obtain and renew TLS certificates from Let's Encrypt for specified domains.\n\nInput: None (The function takes no parameters as all configurations are internally defined)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely. It will log.Fatal if there's an error starting the server.)\n\nNote: The function demonstrates a complete setup for a production-ready HTTPS server with automatic certificate management. The domains and cache directory are hardcoded in this example but could be parameterized in a real implementation.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tm := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"example1.com\", \"example2.com\"),\n\t\tCache:      autocert.DirCache(\"/var/www/.cache\"),\n\t}\n\n\tlog.Fatal(autotls.RunWithManager(r, m))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc runServer() {\n\tr := gin.Default()\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, World!\")\n\t})\n\n\tcertManager := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"example.com\", \"www.example.com\"),\n\t\tCache:      autocert.DirCache(\".cache\"),\n\t}\n\n\tgo http.ListenAndServe(\":80\", certManager.HTTPHandler(nil))\n\n\tsrv := &http.Server{\n\t\tAddr:      \":443\",\n\t\tHandler:   r,\n\t\tTLSConfig: certManager.TLSConfig(),\n\t}\n\n\tif err := srv.ListenAndServeTLS(\"\", \"\"); err != nil {\n\t\tlog.Fatal(\"HTTPS server error: \", err)\n\t}\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a Go struct representing a Docker registry repository client that can interact with a Docker registry API to manage blobs, manifests, and tags.\n\nStruct Description: The `repository` struct represents a client for interacting with a Docker registry repository. It provides methods to access blob storage, manifests, and tags through the Docker Registry HTTP API V2.\n\nFields:\n- client: *http.Client - Custom HTTP client for making requests to the registry\n- ub: *v2.URLBuilder - URL builder for constructing registry API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Named() -> reference.Named - Returns the named reference of the repository\n- Blobs(context.Context) -> distribution.BlobStore - Returns a BlobStore for managing repository blobs\n- Manifests(context.Context, ...distribution.ManifestServiceOption) -> (distribution.ManifestService, error) - Returns a ManifestService for managing repository manifests\n- Tags(context.Context) -> distribution.TagService - Returns a TagService for managing repository tags\n\nAdditional Struct: `tags` - Handles tag operations for a Docker repository\n\nFields:\n- client: *http.Client - HTTP client for making requests\n- ub: *v2.URLBuilder - URL builder for API endpoints\n- name: reference.Named - Named reference to the repository\n\nMethods:\n- Get(context.Context, string) -> (distribution.Descriptor, error) - Retrieves descriptor information for a specific tag, first trying HEAD request and falling back to GET if needed",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/distribution/reference\"\n\t\"github.com/docker/distribution\"\n\tv2 \"github.com/docker/distribution/registry/api/v2\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n\t\"github.com/opencontainers/go-digest\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc NewRepository(name reference.Named, baseURL string, transport http.RoundTripper) (distribution.Repository, error) {\n\tub, err := v2.NewURLBuilderFromString(baseURL, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:     transport,\n\t\tCheckRedirect: checkHTTPRedirect,\n\t}\n\n\treturn &repository{\n\t\tclient: client,\n\t\tub:     ub,\n\t\tname:   name,\n\t}, nil\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\tstatter := &blobStatter{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t}\n\treturn &blobs{\n\t\tname:    r.name,\n\t\tub:      r.ub,\n\t\tclient:  r.client,\n\t\tstatter: statter,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t\tetags:  make(map[string]string),\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.Named(),\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\tref, err := reference.WithTag(t.name, tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tu, err := t.ub.BuildManifestURL(ref)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tnewRequest := func(method string) (*http.Response, error) {\n\t\treq, err := http.NewRequest(method, u, nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tfor _, t := range distribution.ManifestMediaTypes() {\n\t\t\treq.Header.Add(\"Accept\", t)\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\treturn resp, err\n\t}\n\n\tresp, err := newRequest(\"HEAD\")\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tswitch {\n\tcase resp.StatusCode >= 200 && resp.StatusCode < 400 && len(resp.Header.Get(\"Docker-Content-Digest\")) > 0:\n\t\treturn descriptorFromResponse(resp)\n\tdefault:\n\t\tresp, err = newRequest(\"GET\")\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\treturn descriptorFromResponse(resp)\n\t\t}\n\t\treturn distribution.Descriptor{}, HandleErrorResponse(resp)\n\t}\n}\n\nfunc descriptorFromResponse(response *http.Response) (distribution.Descriptor, error) {\n\tdesc := distribution.Descriptor{}\n\theaders := response.Header\n\n\tctHeader := headers.Get(\"Content-Type\")\n\tif ctHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Type header\")\n\t}\n\tdesc.MediaType = ctHeader\n\n\tdigestHeader := headers.Get(\"Docker-Content-Digest\")\n\tif digestHeader == \"\" {\n\t\tbytes, err := ioutil.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\t_, desc, err := distribution.UnmarshalManifest(ctHeader, bytes)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn desc, nil\n\t}\n\n\tdgst, err := digest.Parse(digestHeader)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Digest = dgst\n\n\tlengthHeader := headers.Get(\"Content-Length\")\n\tif lengthHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Length header\")\n\t}\n\tlength, err := strconv.ParseInt(lengthHeader, 10, 64)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Size = length\n\n\treturn desc, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"github.com/docker/distribution\"\n\t\"github.com/docker/distribution/reference\"\n\t\"github.com/docker/distribution/registry/api/v2\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\treturn &blobStore{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifestService{\n\t\tclient:  r.client,\n\t\tub:      r.ub,\n\t\tname:    r.name,\n\t\toptions: options,\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\ntype blobStore struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nvar _ distribution.BlobStore = (*blobStore)(nil)\n\ntype manifestService struct {\n\tclient  *http.Client\n\tub      *v2.URLBuilder\n\tname    reference.Named\n\toptions []distribution.ManifestServiceOption\n}\n\nvar _ distribution.ManifestService = (*manifestService)(nil)\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\turl, err := t.ub.BuildTagURL(tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\treq, err := http.NewRequest(\"HEAD\", url, nil)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tresp, err := t.client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == http.StatusOK {\n\t\tdesc := distribution.Descriptor{}\n\t\treturn desc, nil\n\t}\n\n\treq, err = http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tresp, err = t.client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn distribution.Descriptor{}, &distribution.ErrNotFoundError{}\n\t}\n\n\tvar desc distribution.Descriptor\n\treturn desc, nil\n}"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a reverse proxy server using Gin framework in Go that forwards incoming HTTP requests to a load-balanced backend server and returns the response to the client.\n\nFunction Description: The main function initializes a Gin HTTP server that acts as a reverse proxy. It handles incoming GET requests, forwards them to a backend server obtained from a load balancer, and returns the backend's response to the client while preserving all headers.\n\nInput:\n- Path parameter: \":path\" (string) - The path component of the URL to be forwarded to the backend server\n- HTTP request headers and body (automatically handled by Gin context)\n\nOutput:\n- HTTP response with:\n  - Status code from backend server (or 500 if proxy fails)\n  - Headers from backend server\n  - Body content from backend server\n- Error logs if any step in the proxying process fails\n\nThe function uses the Gin context (c *gin.Context) to:\n1. Extract the original request\n2. Parse the load-balanced backend address\n3. Modify the request URL to point to the backend\n4. Use HTTP transport to forward the request\n5. Copy backend response headers to client response\n6. Stream the backend response body to the client",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\treq := c.Request\n\t\tproxy, err := url.Parse(getLoadBalanceAddr())\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error in parse addr: %v\", err)\n\t\t\tc.String(500, \"error\")\n\t\t\treturn\n\t\t}\n\t\treq.URL.Scheme = proxy.Scheme\n\t\treq.URL.Host = proxy.Host\n\n\t\ttransport := http.DefaultTransport\n\t\tresp, err := transport.RoundTrip(req)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error in roundtrip: %v\", err)\n\t\t\tc.String(500, \"error\")\n\t\t\treturn\n\t\t}\n\n\t\tfor k, vv := range resp.Header {\n\t\t\tfor _, v := range vv {\n\t\t\t\tc.Header(k, v)\n\t\t\t}\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbufio.NewReader(resp.Body).WriteTo(c.Writer)\n\t\treturn\n\t})\n\n\tif err := r.Run(ReverseServerAddr); err != nil {\n\t\tlog.Printf(\"Error: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tbackends = []string{\"http://backend1:8080\", \"http://backend2:8080\"}\n\tcurrentBackend int\n\tmtx            sync.Mutex\n)\n\nfunc getNextBackend() string {\n\tmtx.Lock()\n\tdefer mtx.Unlock()\n\tbackend := backends[currentBackend]\n\tcurrentBackend = (currentBackend + 1) % len(backends)\n\treturn backend\n}\n\nfunc proxyHandler(c *gin.Context) {\n\tbackendURLStr := getNextBackend()\n\tbackendURL, err := url.Parse(backendURLStr)\n\tif err != nil {\n\t\tlog.Printf(\"Error parsing backend URL: %v\", err)\n\t\tc.AbortWithStatus(500)\n\t\treturn\n\t}\n\n\toriginalReq := c.Request\n\n\tnewURL := &url.URL{\n\t\tScheme:   backendURL.Scheme,\n\t\tHost:     backendURL.Host,\n\t\tPath:     originalReq.URL.Path,\n\t\tRawQuery: originalReq.URL.RawQuery,\n\t}\n\n\tnewReq, err := http.NewRequest(originalReq.Method, newURL.String(), nil)\n\tif err != nil {\n\t\tlog.Printf(\"Error creating new request: %v\", err)\n\t\tc.AbortWithStatus(500)\n\t\treturn\n\t}\n\n\tnewReq.Header = originalReq.Header.Clone()\n\tnewReq.Host = backendURL.Host\n\n\tclient := &http.Client{}\n\n\tresp, err := client.Do(newReq)\n\tif err != nil {\n\t\tlog.Printf(\"Error forwarding request: %v\", err)\n\t\tc.AbortWithStatus(500)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tfor k, vs := range resp.Header {\n\t\tfor _, v := range vs {\n\t\t\tc.Writer.Header().Add(k, v)\n\t\t}\n\t}\n\n\tc.Writer.WriteHeader(resp.StatusCode)\n\t_, copyErr := io.Copy(c.Writer, resp.Body)\n\tif copyErr != nil {\n\t\tlog.Printf(\"Error copying response body: %v\", copyErr)\n\t}\n}\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/*path\", proxyHandler)\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin-based HTTP server with TLS support, serving HTML content and static assets, while also implementing HTTP/2 server push for static resources.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up static file serving, configures HTML templates, implements HTTP/2 server push for static assets, and starts the server with TLS encryption. It handles requests to the root path (\"/\") by returning HTML content and pushing a JavaScript file to the client.\n\nInput:\n- port (string): The port number to listen on (e.g., \":8080\")\n- certFile (string): Path to the TLS certificate file (e.g., \"./testdata/server.pem\")\n- keyFile (string): Path to the TLS private key file (e.g., \"./testdata/server.key\")\n- htmlTemplates (template.Template): HTML templates to be used for rendering\n- staticDir (string): Directory path for static assets (e.g., \"./assets\")\n\nOutput: None (the function runs indefinitely as a web server)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/assets\", \"./assets\")\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher := c.Writer.Pusher(); pusher != nil {\n\t\t\tif err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n\t\t\t\tlog.Printf(\"Failed to push: %v\", err)\n\t\t\t}\n\t\t}\n\t\tc.HTML(200, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"github.com/gin-gonic/gin\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc runServer(port, certFile, keyFile string, htmlTemplates template.Template, staticDir string) {\n\trouter := gin.Default()\n\trouter.Static(\"/static\", staticDir)\n\trouter.SetHTMLTemplate(&htmlTemplates)\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher, ok := c.Writer.(http.Pusher); ok {\n\t\t\tpusher.Push(\"/static/script.js\", nil)\n\t\t}\n\t\tc.HTML(http.StatusOK, \"index.html\", nil)\n\t})\n\tserver := &http.Server{\n\t\tAddr:      port,\n\t\tHandler:   router,\n\t\tTLSConfig: &tls.Config{NextProtos: []string{\"h2\", \"http/1.1\"}},\n\t}\n\tlog.Printf(\"Starting server on %s\", port)\n\tif err := server.ListenAndServeTLS(certFile, keyFile); err != nil {\n\t\tlog.Fatalf(\"Failed to run server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that retrieves metadata from a metadata server using a custom HTTP client, with support for ETag headers and error handling.\n\nFunction Description: The function `getETag` makes an HTTP GET request to a metadata server endpoint, using a custom HTTP client with specific timeout configurations. It handles the response by checking status codes, reading the response body, and extracting both the content and ETag header. The function includes error handling for various scenarios including connection errors, missing resources, and non-200 status codes.\n\nInput:\n- client *http.Client: A custom HTTP client with configured timeouts for the request\n- suffix string: The path suffix to append to the base metadata URL\n\nOutput:\n- value string: The content of the response body as a string\n- etag string: The ETag header value from the response\n- err error: An error object if any step fails, nil on success",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar (\n\tmetaClient = &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   2 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 2 * time.Second,\n\t\t},\n\t}\n)\n\nfunc getETag(client *http.Client, suffix string) (value, etag string, err error) {\n\thost := os.Getenv(metadataHostEnv)\n\tif host == \"\" {\n\t\thost = metadataIP\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", userAgent)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"path\"\n)\n\nfunc getETag(client *http.Client, suffix string) (string, string, error) {\n\tbaseURL, err := url.Parse(\"http://metadata-server/\")\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to parse base URL: %v\", err)\n\t}\n\tnewPath := path.Join(baseURL.Path, suffix)\n\treqURL := &url.URL{\n\t\tScheme:   baseURL.Scheme,\n\t\tUser:     baseURL.User,\n\t\tHost:     baseURL.Host,\n\t\tPath:     newPath,\n\t\tRawQuery: baseURL.RawQuery,\n\t}\n\treq, err := http.NewRequest(\"GET\", reqURL.String(), nil)\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to create request: %v\", err)\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"request failed: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to read response body: %v\", err)\n\t}\n\tetag := resp.Header.Get(\"ETag\")\n\treturn string(body), etag, nil\n}"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles multiple API routes with different authentication requirements and groups related endpoints together.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), organizes routes into logical groups with different authentication requirements, and starts the server. It demonstrates route grouping, middleware chaining, and modular route registration.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for incoming requests)\n\nNote: The actual route handlers are expected to be implemented in separate packages (users, articles) and registered through their respective Register functions. The server runs indefinitely until interrupted.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tv1 := r.Group(\"/api\")\n\tusers.UsersRegister(v1.Group(\"/users\"))\n\tv1.Use(users.AuthMiddleware(false))\n\tarticles.ArticlesAnonymousRegister(v1.Group(\"/articles\"))\n\tarticles.TagsAnonymousRegister(v1.Group(\"/tags\"))\n\n\tv1.Use(users.AuthMiddleware(true))\n\tusers.UserRegister(v1.Group(\"/user\"))\n\tusers.ProfileRegister(v1.Group(\"/profiles\"))\n\n\tarticles.ArticlesRegister(v1.Group(\"/articles\"))\n\n\ttestAuth := r.Group(\"/api/ping\")\n\n\ttestAuth.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"myapp/users\"\n\t\"myapp/articles\"\n)\n\nfunc AuthMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tc.Next()\n\t}\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api/v1\")\n\t{\n\t\tusers.Register(public)\n\t\tarticles.Register(public)\n\t}\n\n\tprivate := r.Group(\"/api/v1/private\")\n\tprivate.Use(AuthMiddleware())\n\t{\n\t\tusers.RegisterPrivate(private)\n\t\tarticles.RegisterPrivate(private)\n\t}\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a Go struct that provides HTTP client functionality for making GET and POST requests with custom headers and query parameters.\n\nStruct Description: The `request` struct encapsulates HTTP client operations, providing methods to perform GET and POST requests with support for custom headers and query parameters. It handles URL construction, request execution, and response processing.\n\nFields:\n[Note: The reference implementation doesn't show any struct fields, as it's a stateless utility struct]\n\nMethods:\n\nMethod1: HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP GET request to the specified URL with the given query parameters and headers. Returns the response body as bytes, status code, and any error.\n\nMethod2: HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP POST request to the specified URL with the given form data (as query parameters) and headers. Returns the response body as bytes, status code, and any error.\n\nMethod3: QueryBuilder(queryUrl string, queryValues map[string]string) -> string - Helper method that constructs a URL with query parameters from the given base URL and parameter map. Handles URL encoding of parameters.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar Request = NewRequest()\n\ntype request struct {\n}\n\nfunc NewRequest() *request {\n\treturn &request{}\n}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\treq, err := http.NewRequest(\"GET\", r.QueryBuilder(queryUrl, queryValues), nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\n\treq, err := http.NewRequest(\"POST\", queryUrl, strings.NewReader(queryString))\n\tif err != nil {\n\t\treturn\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\tqueryUrl += queryString\n\n\treturn queryUrl\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\ntype request struct {\n}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\tfullUrl := r.QueryBuilder(queryUrl, queryValues)\n\treq, err := http.NewRequest(\"GET\", fullUrl, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tfor k, v := range headerValues {\n\t\treq.Header.Set(k, v)\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\treturn body, resp.StatusCode, err\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\tvalues := url.Values{}\n\tfor k, v := range queryValues {\n\t\tvalues.Set(k, v)\n\t}\n\treqBody := values.Encode()\n\treq, err := http.NewRequest(\"POST\", queryUrl, strings.NewReader(reqBody))\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tfor k, v := range headerValues {\n\t\treq.Header.Set(k, v)\n\t}\n\tif req.Header.Get(\"Content-Type\") == \"\" {\n\t\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\treturn body, resp.StatusCode, err\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tparsedUrl, err := url.Parse(queryUrl)\n\tif err != nil {\n\t\treturn queryUrl\n\t}\n\tquery := parsedUrl.Query()\n\tfor k, v := range queryValues {\n\t\tquery.Set(k, v)\n\t}\n\tparsedUrl.RawQuery = query.Encode()\n\treturn parsedUrl.String()\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Implement a streaming HTTP server endpoint using Gin in Go that sends chunked data responses to clients.\n\nFunction Description: The function sets up a Gin HTTP server with a single endpoint (\"/stream\") that streams data to the client in real-time using chunked transfer encoding. It demonstrates how to implement server-sent events or real-time data streaming in Go.\n\nInput: None (The function takes no direct input parameters as it's the main server setup function)\n\nOutput: None (The function doesn't return anything but sets up a running HTTP server that outputs streaming data to connected clients)\n\n---\n\nFor completeness, here's the alternative struct-level format (though the reference code is function-level):\n\nTask Description: Create a struct that encapsulates a streaming HTTP server using Gin framework in Go.\n\nStruct Description: The StreamServer struct represents a configurable HTTP server capable of streaming data to clients.\n\nFields:\n- router: *gin.Engine - The Gin router instance\n- port: string - The port number to listen on\n- streamData: chan string - Channel for streaming data to clients\n\nMethods:\n- NewStreamServer(port string) *StreamServer - Constructor that initializes a new StreamServer instance\n- SetupRoutes() - Configures all HTTP routes and handlers\n- GenerateStreamData() - Generates sample data for streaming\n- Start() error - Starts the HTTP server\n- Stop() - Gracefully shuts down the server",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Header(\"Content-Type\", \"text/plain\")\n\t\tc.Header(\"Transfer-Encoding\", \"chunked\")\n\n\t\tdataStream := make(chan string)\n\n\t\tgo func() {\n\t\t\tdefer close(dataStream)\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tdataStream <- fmt.Sprintf(\"Data %d\\n\", i)\n\t\t\t}\n\t\t}()\n\n\t\tfor data := range dataStream {\n\t\t\t_, _ = io.WriteString(c.Writer, data)\n\t\t\tc.Writer.Flush()\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Header(\"Content-Type\", \"text/event-stream\")\n\t\tc.Stream(func(w io.Writer) bool {\n\t\t\tfmt.Fprintf(w, \"data: %s\\n\\n\", time.Now().Format(time.RFC3339))\n\t\t\ttime.Sleep(time.Second)\n\t\t\treturn true\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a function to retrieve user information from Facebook's Graph API using an access token, with proper error handling and response validation.\n\nFunction Description: The function GetUserInfo makes an authenticated GET request to Facebook's Graph API to fetch user information (name, email, ID, and picture) using the provided access token. It handles the HTTP request/response cycle, validates the response, and parses the JSON data into a structured format.\n\nInput:\n- token: TokenInfo - A struct containing the Facebook access token (token.AccessToken is used)\n\nOutput:\n- model.UserInfo - A struct containing the user's information (ID, picture URL, name, email, and origin)\n- string - The raw JSON response body from the API\n- error - Any error that occurred during the API request or response processing",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/tarent/loginsrv/model\"\n)\n\nvar facebookAPI = \"https://graph.facebook.com/v2.12\"\n\nfunc (p Provider) GetUserInfo(token TokenInfo) (model.UserInfo, string, error) {\n\tfu := facebookUser{}\n\n\turl := fmt.Sprintf(\"%v/me?access_token=%v&fields=name,email,id,picture\", facebookAPI, token.AccessToken)\n\n\tclient := &http.Client{}\n\tcontentType := \"application/json\"\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Accept\", contentType)\n\tresp, err := client.Do(req)\n\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif !strings.Contains(resp.Header.Get(\"Content-Type\"), contentType) {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"wrong content-type on facebook get user info: %v\", resp.Header.Get(\"Content-Type\"))\n\t}\n\n\tif resp.StatusCode != 200 {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"got http status %v on facebook get user info\", resp.StatusCode)\n\t}\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"error reading facebook get user info: %v\", err)\n\t}\n\n\terr = json.Unmarshal(b, &fu)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"error parsing facebook get user info: %v\", err)\n\t}\n\n\treturn model.UserInfo{\n\t\tSub:     fu.UserID,\n\t\tPicture: fu.Picture.Data.URL,\n\t\tName:    fu.Name,\n\t\tEmail:   fu.Email,\n\t\tOrigin:  \"facebook\",\n\t}, string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\ntype TokenInfo struct {\n\tAccessToken string\n}\n\nfunc GetUserInfo(token TokenInfo) (model.UserInfo, string, error) {\n\tbaseURL := \"https://graph.facebook.com/v12.0/me\"\n\tparams := url.Values{}\n\tparams.Set(\"access_token\", token.AccessToken)\n\tparams.Set(\"fields\", \"id,name,email,picture\")\n\tfullURL := baseURL + \"?\" + params.Encode()\n\n\treq, err := http.NewRequest(\"GET\", fullURL, nil)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", err\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbodyBytes, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", err\n\t}\n\tbodyString := string(bodyBytes)\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn model.UserInfo{}, bodyString, fmt.Errorf(\"http status %d\", resp.StatusCode)\n\t}\n\n\tvar data struct {\n\t\tID      string `json:\"id\"`\n\t\tName    string `json:\"name\"`\n\t\tEmail   string `json:\"email\"`\n\t\tPicture struct {\n\t\t\tData struct {\n\t\t\t\tURL string `json:\"url\"`\n\t\t\t} `json:\"data\"`\n\t\t} `json:\"picture\"`\n\t}\n\n\tif err := json.Unmarshal(bodyBytes, &data); err != nil {\n\t\treturn model.UserInfo{}, bodyString, err\n\t}\n\n\tif data.ID == \"\" {\n\t\treturn model.UserInfo{}, bodyString, fmt.Errorf(\"missing id in user info\")\n\t}\n\tif data.Name == \"\" {\n\t\treturn model.UserInfo{}, bodyString, fmt.Errorf(\"missing name in user info\")\n\t}\n\tif data.Email == \"\" {\n\t\treturn model.UserInfo{}, bodyString, fmt.Errorf(\"missing email in user info\")\n\t}\n\n\tuserInfo := model.UserInfo{\n\t\tID:         data.ID,\n\t\tName:       data.Name,\n\t\tEmail:      data.Email,\n\t\tPictureURL: data.Picture.Data.URL,\n\t\tOrigin:     \"facebook\",\n\t}\n\n\treturn userInfo, bodyString, nil\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements JWT-based authentication with public and private routes. The server should generate tokens for public access and validate them for private routes.\n\nFunction Description: The main function sets up a Gin server with two route groups: public routes that generate JWT tokens, and private routes that require valid JWT tokens for access. The server runs on localhost:8080.\n\nInput: None (The function takes no direct input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for requests)\n\nMethods:\n\n1. Public route handler: Handles GET requests to \"/api/\" and generates a JWT token\n   - Input: Gin context object\n   - Output: JSON response containing either the token or an error message\n\n2. Private route handler: Handles GET requests to \"/api/private/\" and requires valid JWT\n   - Input: Gin context object (with validated JWT)\n   - Output: JSON response with a private message\n\n3. Server startup: Starts the Gin server on port 8080\n   - Input: Address string (\"localhost:8080\")\n   - Output: None (blocks and serves requests)",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/dgrijalva/jwt-go\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar secretKey = []byte(\"secret_key\")\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublicGroup := r.Group(\"/api\")\n\tpublicGroup.GET(\"/\", generateToken)\n\n\tprivateGroup := r.Group(\"/api/private\")\n\tprivateGroup.Use(authMiddleware())\n\tprivateGroup.GET(\"/\", privateRoute)\n\n\tr.Run(\":8080\")\n}\n\nfunc generateToken(c *gin.Context) {\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\n\tclaims := token.Claims.(jwt.MapClaims)\n\tclaims[\"exp\"] = time.Now().Add(5 * time.Minute).Unix()\n\n\tsignedToken, err := token.SignedString(secretKey)\n\tif err != nil {\n\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to generate token\"})\n\t\treturn\n\t}\n\n\tc.JSON(http.StatusOK, gin.H{\"token\": signedToken})\n}\n\nfunc authMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tauthHeader := c.GetHeader(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing token\"})\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(authHeader, \" \")\n\t\tif len(parts) != 2 || parts[0] != \"Bearer\" {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid authorization format\"})\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\n\t\ttokenString := parts[1]\n\n\t\ttoken, err := jwt.Parse(tokenString, func(t *jwt.Token) (interface{}, error) {\n\t\t\treturn secretKey, nil\n\t\t})\n\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\n\t\tif !token.Valid {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token signature\"})\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\n\t\tif claims, ok := token.Claims.(jwt.MapClaims); ok {\n\t\t\tif exp, ok := claims[\"exp\"].(float64); ok {\n\t\t\t\tif float64(time.Now().Unix()) > exp {\n\t\t\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Token expired\"})\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token claims\"})\n\t\t\tc.Abort()\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t}\n}\n\nfunc privateRoute(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H{\"message\": \"Private message\"})\n}"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a default Gin engine with logger and recovery middleware, registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- domains: []string - A slice of domain names for which TLS certificates should be obtained (e.g., [\"example1.com\", \"example2.com\"])\n\nOutput: \n- error - Returns an error if the server fails to start, otherwise runs indefinitely (the function will log.Fatal on error)\n\nNote: The function does not explicitly return but will log.Fatal if the server fails to start. The server runs indefinitely when successful.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"crypto/tls\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc runServer(domains []string) error {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\tmanager := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(domains...),\n\t\tCache:      autocert.DirCache(\".cache\"),\n\t}\n\tgo func() {\n\t\tlog.Fatal(http.ListenAndServe(\":80\", manager.HTTPHandler(nil)))\n\t}()\n\tsrv := &http.Server{\n\t\tAddr:      \":443\",\n\t\tHandler:   r,\n\t\tTLSConfig: &tls.Config{GetCertificate: manager.GetCertificate},\n\t}\n\tlog.Println(\"Starting HTTPS server on :443\")\n\tlog.Fatal(srv.ListenAndServeTLS(\"\", \"\"))\n\treturn nil\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a Go struct that handles HTTP requests to a metadata service with configurable endpoints, versioning, and resource paths. The struct should support request building, execution, and response handling with retry logic and mock capabilities for testing.\n\nStruct Description: The MetaData struct provides a client for interacting with a metadata service API. It supports building requests with versioning, resource types, and sub-resources, executing requests with retry logic, and decoding responses. It includes mock functionality for testing.\n\nFields:\n- mock: requestMock - A function type for mocking requests during testing\n- client: *http.Client - The HTTP client used to execute requests\n\nMethods:\n- NewMetaData(*http.Client) *MetaData - Constructor that initializes a new MetaData instance with an optional custom HTTP client\n- New() *MetaDataRequest - Creates a new request builder instance\n\nThe MetaDataRequest nested struct handles individual request configuration and execution:\n\nFields:\n- version: string - API version to use (defaults to \"latest\")\n- resourceType: string - Type of resource being accessed (defaults to \"meta-data\")\n- resource: string - Main resource path (required)\n- subResource: string - Optional sub-resource path\n- client: *http.Client - HTTP client for request execution\n- sendRequest: requestMock - Optional mock function for testing\n\nMethods:\n- Version(string) IMetaDataRequest - Sets the API version for the request\n- ResourceType(string) IMetaDataRequest - Sets the resource type for the request\n- Resource(string) IMetaDataRequest - Sets the main resource path\n- SubResource(string) IMetaDataRequest - Sets an optional sub-resource path\n- Url() (string, error) - Constructs the full request URL from components\n- Do(interface{}) error - Executes the request and decodes the response into the provided interface\n- send() (string, error) - Internal method that performs the actual HTTP request\n- Decode(string, interface{}) error - Handles response decoding (implementation not shown in reference)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\t\"encoding/json\"\n\t\"reflect\"\n\t\"os\"\n)\n\ntype MetaData struct {\n\tmock requestMock\n\tclient *http.Client\n}\n\nfunc NewMetaData(client *http.Client) *MetaData {\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\treturn &MetaData{\n\t\tclient: client,\n\t}\n}\n\nfunc (m *MetaData) New() *MetaDataRequest {\n\treturn &MetaDataRequest{\n\t\tclient:      m.client,\n\t\tsendRequest: m.mock,\n\t}\n}\n\ntype requestMock func(resource string) (string, error)\n\ntype MetaDataRequest struct {\n\tversion      string\n\tresourceType string\n\tresource     string\n\tsubResource  string\n\tclient       *http.Client\n\tsendRequest requestMock\n}\n\nfunc (vpc *MetaDataRequest) Version(version string) IMetaDataRequest {\n\tvpc.version = version\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) ResourceType(rtype string) IMetaDataRequest {\n\tvpc.resourceType = rtype\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) Resource(resource string) IMetaDataRequest {\n\tvpc.resource = resource\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) SubResource(sub string) IMetaDataRequest {\n\tvpc.subResource = sub\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) Url() (string, error) {\n\tif vpc.version == \"\" {\n\t\tvpc.version = \"latest\"\n\t}\n\tif vpc.resourceType == \"\" {\n\t\tvpc.resourceType = \"meta-data\"\n\t}\n\tif vpc.resource == \"\" {\n\t\treturn \"\", errors.New(\"the resource you want to visit must not be nil!\")\n\t}\n\tendpoint := os.Getenv(\"METADATA_ENDPOINT\")\n\tif endpoint == \"\" {\n\t\tendpoint = \"http://100.100.100.200\"\n\t}\n\tr := fmt.Sprintf(\"%s/%s/%s/%s\", endpoint, vpc.version, vpc.resourceType, vpc.resource)\n\tif vpc.subResource == \"\" {\n\t\treturn r, nil\n\t}\n\treturn fmt.Sprintf(\"%s/%s\", r, vpc.subResource), nil\n}\n\nfunc (vpc *MetaDataRequest) Do(api interface{}) (err error) {\n\tvar res = \"\"\n\tfor r := retry.Start(); r.Next(); {\n\t\tif vpc.sendRequest != nil {\n\t\t\tres, err = vpc.sendRequest(vpc.resource)\n\t\t} else {\n\t\t\tres, err = vpc.send()\n\t\t}\n\t\tif !shouldRetry(err) {\n\t\t\tbreak\n\t\t}\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn vpc.Decode(res, api)\n}\n\nfunc (vpc *MetaDataRequest) send() (string, error) {\n\turl, err := vpc.Url()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\trequ, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tresp, err := vpc.client.Do(requ)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", fmt.Errorf(\"Aliyun Metadata API Error: Status Code: %d\", resp.StatusCode)\n\t}\n\tdefer resp.Body.Close()\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "import \"encoding/json\"\nimport \"errors\"\nimport \"fmt\"\nimport \"io\"\nimport \"net/http\"\nimport \"path\"\nimport \"time\"\n\ntype requestMock func(*http.Request) (*http.Response, string, error)\n\ntype MetaData struct {\n\tmock   requestMock\n\tclient *http.Client\n}\n\nfunc NewMetaData(c *http.Client) *MetaData {\n\tif c == nil {\n\t\tc = &http.Client{}\n\t}\n\treturn &MetaData{\n\t\tclient: c,\n\t}\n}\n\ntype IMetaDataRequest interface {\n\tVersion(string) IMetaDataRequest\n\tResourceType(string) IMetaDataRequest\n\tResource(string) IMetaDataRequest\n\tSubResource(string) IMetaDataRequest\n\tUrl() (string, error)\n\tDo(interface{}) error\n}\n\ntype MetaDataRequest struct {\n\tversion      string\n\tresourceType string\n\tresource     string\n\tsubResource  string\n\tclient       *http.Client\n\tsendRequest  requestMock\n}\n\nfunc (m *MetaData) New() *MetaDataRequest {\n\treturn &MetaDataRequest{\n\t\tversion:      \"latest\",\n\t\tresourceType: \"meta-data\",\n\t\tsendRequest:  m.mock,\n\t\tclient:       m.client,\n\t}\n}\n\nfunc (r *MetaDataRequest) Version(v string) IMetaDataRequest {\n\tr.version = v\n\treturn r\n}\n\nfunc (r *MetaDataRequest) ResourceType(rt string) IMetaDataRequest {\n\tr.resourceType = rt\n\treturn r\n}\n\nfunc (r *MetaDataRequest) Resource(res string) IMetaDataRequest {\n\tr.resource = res\n\treturn r\n}\n\nfunc (r *MetaDataRequest) SubResource(sr string) IMetaDataRequest {\n\tr.subResource = sr\n\treturn r\n}\n\nfunc (r *MetaDataRequest) Url() (string, error) {\n\tif r.resource == \"\" {\n\t\treturn \"\", errors.New(\"resource is required\")\n\t}\n\tparts := []string{r.version, r.resourceType, r.resource}\n\tif r.subResource != \"\" {\n\t\tparts = append(parts, r.subResource)\n\t}\n\treturn path.Join(parts...), nil\n}\n\nfunc (r *MetaDataRequest) send() (string, error) {\n\tif r.sendRequest != nil {\n\t\turlStr, err := r.Url()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treq, _ := http.NewRequest(\"GET\", urlStr, nil)\n\t\tresp, body, err := r.sendRequest(req)\n\t\tif err != nil {\n\t\t\treturn body, err\n\t\t}\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\treturn body, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t\t}\n\t\treturn body, nil\n\t}\n\n\turlStr, err := r.Url()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tmaxRetries := 3\n\tvar resp *http.Response\n\tvar body string\n\n\tfor i := 0; i < maxRetries; i++ {\n\t\treq, _ := http.NewRequest(\"GET\", urlStr, nil)\n\t\tresp, err = r.client.Do(req)\n\t\tif err != nil {\n\t\t\tif i < maxRetries-1 {\n\t\t\t\ttime.Sleep(time.Second * time.Duration(i+1))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn \"\", err\n\t\t}\n\n\t\tbodyBytes, _ := io.ReadAll(resp.Body)\n\t\tresp.Body.Close()\n\t\tbody = string(bodyBytes)\n\n\t\tif resp.StatusCode == http.StatusOK {\n\t\t\treturn body, nil\n\t\t}\n\n\t\tif shouldRetryStatusCode(resp.StatusCode) {\n\t\t\tif i < maxRetries-1 {\n\t\t\t\ttime.Sleep(time.Second * time.Duration(i+1))\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\treturn body, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\treturn \"\", fmt.Errorf(\"request failed after %d retries\", maxRetries)\n}\n\nfunc (r *MetaDataRequest) Do(v interface{}) error {\n\tbody, err := r.send()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn r.Decode(body, v)\n}\n\nfunc (r *MetaDataRequest) Decode(body string, v interface{}) error {\n\treturn json.Unmarshal([]byte(body), v)\n}\n\nfunc shouldRetryStatusCode(code int) bool {\n\treturn code == http.StatusTooManyRequests || code >= 500\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Go function that handles file uploads along with form data using the Gin web framework. The function should process multipart form data, save uploaded files, and return a response indicating success or failure.\n\nFunction Description: The function is a Gin route handler that processes POST requests to the \"/upload\" endpoint. It handles multipart/form-data submissions containing both form fields (name and email) and file uploads. The function saves all uploaded files to the server and returns a success message with the count of uploaded files and the form field values, or an error message if the operation fails.\n\nInput: \n- Gin context object (c *gin.Context) containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - File uploads: \"files\" (multipart.FileHeader array)\n\nOutput:\n- On success: HTTP 200 status with success message (string)\n- On failure: HTTP 400 status with error message (string)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc uploadHandler(c *gin.Context) {\n\tform, err := c.MultipartForm()\n\tif err != nil {\n\t\tc.Abort()\n\t\tc.String(400, \"Failed to parse form data\")\n\t\treturn\n\t}\n\n\tnameValues, ok := form.Value[\"name\"]\n\tif !ok || len(nameValues) == 0 {\n\t\tc.Abort()\n\t\tc.String(400, \"Missing name field\")\n\t\treturn\n\t}\n\tname := nameValues[0]\n\n\temailValues, ok := form.Value[\"email\"]\n\tif !ok || len(emailValues) == 0 {\n\t\tc.Abort()\n\t\tc.String(400, \"Missing email field\")\n\t\treturn\n\t}\n\temail := emailValues[0]\n\n\tfiles, ok := form.File[\"files\"]\n\tif !ok || len(files) == 0 {\n\t\tc.Abort()\n\t\tc.String(400, \"No files uploaded\")\n\t\treturn\n\t}\n\n\tif err := os.MkdirAll(\"uploads\", os.ModePerm); err != nil {\n\t\tc.Abort()\n\t\tc.String(400, \"Failed to create upload directory\")\n\t\treturn\n\t}\n\n\tfor _, file := range files {\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\tc.Abort()\n\t\t\tc.String(400, \"Failed to open uploaded file\")\n\t\t\treturn\n\t\t}\n\t\tdefer src.Close()\n\n\t\tdstPath := filepath.Join(\"uploads\", file.Filename)\n\t\tdst, err := os.Create(dstPath)\n\t\tif err != nil {\n\t\t\tc.Abort()\n\t\t\tc.String(400, \"Failed to create destination file\")\n\t\t\treturn\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err := io.Copy(dst, src); err != nil {\n\t\t\tc.Abort()\n\t\t\tc.String(400, \"Failed to save uploaded file\")\n\t\t\treturn\n\t\t}\n\t}\n\n\tc.String(200, \"Successfully uploaded %d files. Name: %s, Email: %s\", len(files), name, email)\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Go HTTP client struct that can handle both HTTP and HTTPS requests with custom configurations, including authentication and request headers.\n\nStruct Description: The Client struct represents an HTTP client with configurable protocol, address, authentication, and transport settings. It provides methods to execute HTTP requests and handle responses.\n\nFields:\nProtocol: string - The protocol to use (http or https)\nAddr: string - The server address to connect to\nUser: string - The username for basic authentication\nPassword: string - The password for basic authentication\nc: *http.Client - The underlying HTTP client instance\n\nMethods:\nNewClient: (conf *ClientConfig) -> *Client - Creates a new Client instance with the given configuration, setting up either HTTP or HTTPS transport\nDoRequest: (method string, url string, body *bytes.Buffer) -> (*http.Response, error) - Executes an HTTP request with the given method, URL and body, adding basic auth if configured\nDo: (method string, url string, body map[string]interface{}) -> (*Response, error) - Executes a request with JSON body, parses the response and returns a structured Response object",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/juju/errors\"\n)\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\n\tc *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tc := new(Client)\n\n\tc.Addr = conf.Addr\n\tc.User = conf.User\n\tc.Password = conf.Password\n\n\tif conf.HTTPS {\n\t\tc.Protocol = \"https\"\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t\tc.c = &http.Client{Transport: tr}\n\t} else {\n\t\tc.Protocol = \"http\"\n\t\tc.c = &http.Client{}\n\t}\n\n\treturn c\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\tif len(c.User) > 0 && len(c.Password) > 0 {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tresp, err := c.c.Do(req)\n\n\treturn resp, err\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tbodyData, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tbuf := bytes.NewBuffer(bodyData)\n\tif body == nil {\n\t\tbuf = bytes.NewBuffer(nil)\n\t}\n\n\tresp, err := c.DoRequest(method, url, buf)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tdefer resp.Body.Close()\n\n\tret := new(Response)\n\tret.Code = resp.StatusCode\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tif len(data) > 0 {\n\t\terr = json.Unmarshal(data, &ret.ResponseItem)\n\t}\n\n\treturn ret, errors.Trace(err)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype ClientConfig struct {\n\tProtocol  string\n\tAddr      string\n\tUser      string\n\tPassword  string\n\tTransport http.RoundTripper\n}\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\tc        *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tvar transport http.RoundTripper\n\tif conf.Transport != nil {\n\t\ttransport = conf.Transport\n\t} else {\n\t\ttransport = http.DefaultTransport\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t}\n\n\treturn &Client{\n\t\tProtocol: conf.Protocol,\n\t\tAddr:     conf.Addr,\n\t\tUser:     conf.User,\n\t\tPassword: conf.Password,\n\t\tc:        httpClient,\n\t}\n}\n\nfunc (c *Client) DoRequest(method, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif c.User != \"\" || c.Password != \"\" {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treturn c.c.Do(req)\n}\n\ntype Response struct {\n\tStatusCode int\n\tBody       map[string]interface{}\n}\n\nfunc (c *Client) Do(method, url string, body map[string]interface{}) (*Response, error) {\n\tbodyBytes, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuffer := bytes.NewBuffer(bodyBytes)\n\tresp, err := c.DoRequest(method, url, buffer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar jsonData map[string]interface{}\n\tif err := json.Unmarshal(respBody, &jsonData); err != nil {\n\t\tjsonData = nil\n\t}\n\n\treturn &Response{\n\t\tStatusCode: resp.StatusCode,\n\t\tBody:       jsonData,\n\t}, nil\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a Go function that implements a distributed transaction coordinator using HTTP communication between microservices. The function should handle transaction initiation, propagate transaction context, and coordinate between multiple services.\n\nFunction Description: The function serves as an HTTP handler for initiating a distributed transaction. It receives a transaction ID in the header, prepares transaction data for two different services (Account and Inventory), makes HTTP calls to these services, and handles their responses. The function ensures transaction context (xid) is propagated to all participating services.\n\nInput: \n- Gin context object (gin.Context) containing:\n  - HTTP request headers (including \"x_seata_xid\" for transaction ID)\n  - Request body (not used in this example, but could contain transaction details)\n\nOutput:\n- HTTP responses:\n  - 400 Bad Request with error details if any step fails\n  - Original service response if any service fails (non-200 status)\n  - Success response from the last service if all succeed (200 status)\n- Side effects: Makes HTTP calls to two different services with transaction data",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-a/begin\", func(context *gin.Context) {\n\t\txid := context.Request.Header.Get(\"x_seata_xid\")\n\t\taccount := &Account{\n\t\t\tID:     1000024549,\n\t\t\tAmount: 200,\n\t\t}\n\t\tinv := &Inventory{\n\t\t\tID:  1000000005,\n\t\t\tQty: 2,\n\t\t}\n\n\t\taccountReq, err := json.Marshal(account)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tinvReq, err := json.Marshal(inv)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq1, err := http.NewRequest(\"POST\", \"http://localhost:2047/service-b/try\", bytes.NewBuffer(accountReq))\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq1.Header.Set(\"x_seata_xid\", xid)\n\n\t\treq2, err := http.NewRequest(\"POST\", \"http://localhost:2048/service-c/try\", bytes.NewBuffer(invReq))\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq2.Header.Set(\"x_seata_xid\", xid)\n\n\t\tclient := &http.Client{}\n\t\tresult1, err := client.Do(req1)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif result1.StatusCode != http.StatusOK {\n\t\t\tresult1.Write(context.Writer)\n\t\t\treturn\n\t\t}\n\n\t\tresult2, err := client.Do(req2)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif result2.StatusCode == http.StatusOK {\n\t\t\tresult2.Write(context.Writer)\n\t\t\treturn\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc DistributedTransactionHandler(c *gin.Context) {\n\txid := c.Request.Header.Get(\"x_seata_xid\")\n\tif xid == \"\" {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"x_seata_xid header missing\"})\n\t\treturn\n\t}\n\n\taccountData := map[string]interface{}{\n\t\t\"xid\":   xid,\n\t\t\"other\": \"account_data\",\n\t}\n\taccountBody, _ := json.Marshal(accountData)\n\taccountReq, err := http.NewRequest(\"POST\", \"http://account-service/process\", bytes.NewBuffer(accountBody))\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Account request creation failed\", \"details\": err.Error()})\n\t\treturn\n\t}\n\taccountReq.Header.Set(\"Content-Type\", \"application/json\")\n\taccountReq.Header.Set(\"x_seata_xid\", xid)\n\n\tclient := &http.Client{}\n\taccountResp, err := client.Do(accountReq)\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Account service call failed\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tdefer accountResp.Body.Close()\n\taccountRespBody, err := io.ReadAll(accountResp.Body)\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to read Account response body\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tif accountResp.StatusCode != http.StatusOK {\n\t\tc.Writer.WriteHeader(accountResp.StatusCode)\n\t\tc.Writer.Write(accountRespBody)\n\t\treturn\n\t}\n\n\tinventoryData := map[string]interface{}{\n\t\t\"xid\":   xid,\n\t\t\"other\": \"inventory_data\",\n\t}\n\tinventoryBody, _ := json.Marshal(inventoryData)\n\tinventoryReq, err := http.NewRequest(\"POST\", \"http://inventory-service/process\", bytes.NewBuffer(inventoryBody))\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Inventory request creation failed\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tinventoryReq.Header.Set(\"Content-Type\", \"application/json\")\n\tinventoryReq.Header.Set(\"x_seata_xid\", xid)\n\n\tinventoryResp, err := client.Do(inventoryReq)\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Inventory service call failed\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tdefer inventoryResp.Body.Close()\n\tinventoryRespBody, err := io.ReadAll(inventoryResp.Body)\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to read Inventory response body\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tif inventoryResp.StatusCode != http.StatusOK {\n\t\tc.Writer.WriteHeader(inventoryResp.StatusCode)\n\t\tc.Writer.Write(inventoryRespBody)\n\t\treturn\n\t}\n\n\tc.Writer.WriteHeader(http.StatusOK)\n\tc.Writer.Write(inventoryRespBody)\n}"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Implement a function that demonstrates asynchronous message production to a Kafka topic using the Sarama library in Go. The function should continuously generate and send messages at regular intervals while handling both successful deliveries and errors.\n\nFunction Description: The SaramaProducer function initializes and manages an asynchronous Kafka producer. It configures the producer with specific settings, handles message delivery success/failure notifications in a separate goroutine, and continuously generates and sends messages to a specified Kafka topic. The function runs indefinitely until terminated.\n\nInput: None (The function takes no input parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function doesn't return any value but prints success/error messages to stdout)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc SaramaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tconfig.Producer.Retry.Max = 1000\n\tconfig.Version = sarama.V2_2_0_0\n\n\tproducer, e := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif e != nil {\n\t\tfmt.Println(e)\n\t\treturn\n\t}\n\tdefer producer.AsyncClose()\n\n\tgo func(p sarama.AsyncProducer) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase suc := <-p.Successes():\n\t\t\t\tfmt.Println(\"offset: \", suc.Offset, \"timestamp: \", suc.Timestamp.String(), \"partitions: \", suc.Partition)\n\t\t\tcase fail := <-p.Errors():\n\t\t\t\tfmt.Println(\"err: \", fail.Err)\n\t\t\t}\n\t\t}\n\t}(producer)\n\n\tvar value string\n\tfor i := 0; ; i++ {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\ttime11 := time.Now()\n\t\tvalue = \"this is a message 0606 \" + time11.Format(\"15:04:05\")\n\t\tmsg := &sarama.ProducerMessage{\n\t\t\tTopic: \"0606_test\",\n\t\t}\n\t\tmsg.Value = sarama.ByteEncoder(value)\n\t\tfmt.Println(value)\n\t\tproducer.Input() <- msg\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/Shopify/sarama\"\n)\n\nfunc SaramaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\n\tbrokers := []string{\"localhost:9092\"}\n\ttopic := \"test-topic\"\n\n\tproducer, err := sarama.NewAsyncProducer(brokers, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg := <-producer.Successes():\n\t\t\t\tfmt.Printf(\"Successfully sent message to topic %s: %s\\n\", msg.Topic, msg.Value)\n\t\t\tcase err := <-producer.Errors():\n\t\t\t\tfmt.Printf(\"Failed to send message: %v\\n\", err.Err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(2 * time.Second)\n\tcount := 0\n\tfor {\n\t\t<-ticker.C\n\t\tcount++\n\t\tmessage := &sarama.ProducerMessage{\n\t\t\tTopic: topic,\n\t\t\tValue: sarama.StringEncoder(fmt.Sprintf(\"Message #%d\", count)),\n\t\t}\n\t\tproducer.Input() <- message\n\t}\n}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a function that implements an asynchronous Kafka producer in Go, which continuously sends messages to a specified Kafka topic at regular intervals. The function should handle both success and error cases from the producer and properly clean up resources when done.\n\nFunction Description: The function `runAsyncKafkaProducer` initializes and manages an asynchronous Kafka producer that sends alternating message types (\"login\" and \"msg\" events) to a Kafka topic every 10 seconds. It configures the producer with appropriate settings, handles success/error notifications in a separate goroutine, and ensures proper resource cleanup.\n\nInput: None (The function takes no parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function runs indefinitely until terminated, printing success/error messages to stdout)\n\nReference Code Structure:\n\n```go\nfunc runAsyncKafkaProducer() {\n    // 1. Configure Kafka producer\n    config := sarama.NewConfig()\n    config.Producer.RequiredAcks = sarama.WaitForAll\n    config.Producer.Partitioner = sarama.NewRandomPartitioner\n    config.Producer.Return.Successes = true\n    config.Producer.Return.Errors = true\n    \n    // 2. Initialize async producer\n    producer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n    if err != nil {\n        panic(err)\n    }\n    defer producer.AsyncClose()\n    \n    // 3. Start goroutine to handle producer events\n    go func() {\n        for {\n            select {\n            case success := <-producer.Successes():\n                fmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n                    success.Topic, success.Partition, success.Offset)\n            case err := <-producer.Errors():\n                fmt.Printf(\"Failed to send message: %v\\n\", err)\n            }\n        }\n    }()\n    \n    // 4. Main message sending loop\n    var messageType int = 1\n    for {\n        msg := createMessage(messageType)\n        producer.Input() <- msg\n        \n        messageType = toggleMessageType(messageType)\n        time.Sleep(10 * time.Second)\n    }\n}\n\n// Helper functions would be defined here...\n```",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tAsyncProducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer AsyncProducer.AsyncClose()\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase succ := <-AsyncProducer.Successes():\n\t\t\t\tfmt.Println(\"AsyncProducer.Successes()\", succ.Topic, succ.Offset, succ.Timestamp, succ.Partition)\n\t\t\tcase err := <-AsyncProducer.Errors():\n\t\t\t\tfmt.Println(\"AsyncProducer.Errors()\", err.Error())\n\t\t\t}\n\t\t}\n\t}()\n\tvar i = 1\n\tfor {\n\t\tMessage := &sarama.ProducerMessage{\n\t\t\tTopic:     \"msg_event\",\n\t\t\tTimestamp: time.Now(),\n\t\t}\n\t\tvar data []byte\n\t\tdate := time.Now().UnixNano() / 1e6\n\t\tif i == 1 {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"11\",\n\t\t\t\t\"uid\":         1,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"login\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 2\n\t\t} else {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"22\",\n\t\t\t\t\"uid\":         222222,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"msg\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 1\n\t\t}\n\n\t\tMessage.Value = sarama.ByteEncoder(data)\n\t\tAsyncProducer.Input() <- Message\n\t\ttime.Sleep(time.Second * 10)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/Shopify/sarama\"\n)\n\nfunc runAsyncKafkaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\n\tproducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer producer.AsyncClose()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase success, ok := <-producer.Successes():\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n\t\t\t\t\tsuccess.Topic, success.Partition, success.Offset)\n\t\t\tcase err, ok := <-producer.Errors():\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Failed to send message: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tvar messageType int = 1\n\tfor {\n\t\tmsg := createMessage(messageType)\n\t\tproducer.Input() <- msg\n\n\t\tmessageType = toggleMessageType(messageType)\n\t\ttime.Sleep(10 * time.Second)\n\t}\n}\n\nfunc createMessage(msgType int) *sarama.ProducerMessage {\n\teventType := \"login\"\n\tif msgType == 2 {\n\t\teventType = \"msg\"\n\t}\n\treturn &sarama.ProducerMessage{\n\t\tTopic: \"activity_logs\",\n\t\tValue: sarama.StringEncoder(fmt.Sprintf(\"{event_type:%s}\", eventType)),\n\t}\n}\n\nfunc toggleMessageType(current int) int {\n\tif current == 1 {\n\t\treturn 2\n\t}\n\treturn 1\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a function that uploads a video file to a specified URL using a multipart/form-data POST request with custom headers.\n\nFunction Description: The function uploads a video file to a given URL with specified form fields and authentication headers. It handles file operations, creates a multipart form payload, sets appropriate headers (including content type and access token), executes the HTTP request, and returns the response body.\n\nInput:\n- url (string): The target URL for the video upload\n- method (string): HTTP method (typically \"POST\")\n- advertiserID (string): The advertiser ID for the form field\n- uploadType (string): The upload type for the form field\n- videoSignature (string): The video signature for the form field\n- filePath (string): Path to the video file to upload\n- accessToken (string): Access token for authentication header\n\nOutput:\n- ([]byte, error): Returns the response body as bytes and any error that occurred during execution\n\nNote: The function should follow the same steps as the reference code, including creating a custom http.Client, setting headers, handling multipart form data, and properly managing resources (file handles, response bodies).",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/video/ad/\"\n\tmethod := \"POST\"\n\n\tpayload := &bytes.Buffer{}\n\twriter := multipart.NewWriter(payload)\n\t_ = writer.WriteField(\"advertiser_id\", \"1760312309087432\")\n\t_ = writer.WriteField(\"upload_type\", \"UPLOAD_BY_FILE\")\n\t_ = writer.WriteField(\"video_signature\", \"6b12a8bbbe8e69a2ef5929028b0b50c3\")\n\n\tfile, errFile4 := os.Open(\"/Users/betta/Desktop/\u5e38\u7528/6b12a8bbbe8e69a2ef5929028b0b50c3.mp4\")\n\tdefer file.Close()\n\n\tpart4, errFile4 := writer.CreateFormFile(\"video_file\", filepath.Base(\"/Users/betta/Desktop/\u5e38\u7528/6b12a8bbbe8e69a2ef5929028b0b50c3.mp4\"))\n\t_, errFile4 = io.Copy(part4, file)\n\tif errFile4 != nil {\n\t\tfmt.Println(errFile4)\n\t\treturn\n\t}\n\terr := writer.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treq.Header.Add(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Add(\"Access-Token\", \"e88f206ab28a97ef494b853982d81739b81a1e37\")\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc uploadVideo(url, method, advertiserID, uploadType, videoSignature, filePath, accessToken string) ([]byte, error) {\n\tvar buf bytes.Buffer\n\twriter := multipart.NewWriter(&buf)\n\n\tif err := writer.WriteField(\"advertiser_id\", advertiserID); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := writer.WriteField(\"upload_type\", uploadType); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := writer.WriteField(\"video_signature\", videoSignature); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tpart, err := writer.CreateFormFile(\"video\", filepath.Base(filePath))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif _, err := io.Copy(part, file); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := writer.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treq, err := http.NewRequest(method, url, bytes.NewReader(buf.Bytes()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Set(\"Authorization\", \"Bearer \"+accessToken)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponseBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn responseBody, nil\n}"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It maintains configuration and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC for the specified realm, handling multiple KDC addresses and error cases\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a single KDC connection",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"sort\"\n\t\"time\"\n)\n\ntype Config struct {\n\tKDCs     map[string]map[int]string\n\tTimeout  time.Duration\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCs[realm]\n\tif !ok || len(kdcs) == 0 {\n\t\treturn nil, errors.New(\"no KDCs available for realm\")\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar priorities []int\n\tfor k := range kdcs {\n\t\tpriorities = append(priorities, k)\n\t}\n\tsort.Ints(priorities)\n\n\tvar lastErr error\n\tfor _, p := range priorities {\n\t\taddr := kdcs[p]\n\t\tconn, err := net.DialTimeout(\"tcp\", addr, c.Config.Timeout)\n\t\tif err != nil {\n\t\t\tlastErr = err\n\t\t\tcontinue\n\t\t}\n\t\ttcpConn := conn.(*net.TCPConn)\n\t\tdeadline := time.Now().Add(c.Config.Timeout)\n\t\ttcpConn.SetDeadline(deadline)\n\t\tresp, err := c.sendTCP(tcpConn, b)\n\t\ttcpConn.Close()\n\t\tif err == nil {\n\t\t\treturn resp, nil\n\t\t}\n\t\tlastErr = err\n\t}\n\treturn nil, lastErr\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resp []byte\n\tbuf := make([]byte, 4096)\n\tfor {\n\t\tn, err := conn.Read(buf)\n\t\tif n > 0 {\n\t\t\tresp = append(resp, buf[:n]...)\n\t\t}\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif netErr, ok := err.(net.Error); ok && netErr.Timeout() {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn resp, err\n\t\t}\n\t}\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, handles IPv6 traffic with specific settings, and sends an acknowledgment message to connected clients.\n\nFunction Description: The function establishes a TCP server on port 1024 that continuously accepts client connections. For each connection, it checks if the client is using IPv6 and applies specific traffic class and hop limit settings if so. It then sends a fixed acknowledgment message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. The server runs indefinitely until terminated.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return any value but maintains persistent network operations)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, _ := net.Listen(\"tcp\", \":1024\")\n\tfor {\n\t\tconn, _ := listener.Accept()\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif addr, ok := c.RemoteAddr().(*net.TCPAddr); ok && addr.IP.To4() == nil {\n\t\t\t\tif tcpConn, ok := c.(*net.TCPConn); ok {\n\t\t\t\t\ttcpConn.SetTrafficClass(0x10)\n\t\t\t\t\ttcpConn.SetHopLimit(64)\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.Write([]byte(\"HELLO-R-U-THERE-ACK\"))\n\t\t}(conn)\n\t}\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a Git daemon in Go that handles TCP connections for Git operations, including upload-pack and upload-archive services, with connection management, timeout handling, and access control.\n\nStruct Description: The GitDaemon struct represents a TCP server that handles Git protocol connections. It manages client connections, enforces limits, and processes Git service requests.\n\nFields:\n\nctx: [context.Context] - Context for cancellation and timeout propagation  \naddr: [string] - TCP address to listen on  \nfinished: [chan struct{}] - Channel to signal server shutdown  \nconns: [connections] - Track active connections (wrapper around map[net.Conn]struct{})  \ncfg: [*config.Config] - Server configuration  \nbe: [*backend.Backend] - Backend for repository access and authentication  \nwg: [sync.WaitGroup] - Wait group for graceful shutdown  \nonce: [sync.Once] - Ensure cleanup happens once  \nlogger: [*log.Logger] - Structured logger  \ndone: [atomic.Bool] - Atomic flag indicating server shutdown status  \n\nMethods:\n\nNewGitDaemon: [func(context.Context) (*GitDaemon, error)] -> Creates a new GitDaemon instance with context-derived configuration  \nListenAndServe: [func() error] -> Starts listening on configured address and serves connections  \nServe: [func(net.Listener) error] -> Handles incoming connections on provided listener (main server loop)  \nhandleClient: [func(net.Conn)] -> Processes individual client connections (private method)  \n\nHelper Types:\n\nserverConn: [struct] - Wraps net.Conn with timeout handling  \nconnections: [struct] - Thread-safe connection tracking with sync.Map  \n\nKey Behaviors:\n1. Implements exponential backoff for temporary connection errors\n2. Enforces maximum connection limits\n3. Handles Git protocol packets (pktline format)\n4. Validates repository paths and access permissions\n5. Processes both git-upload-pack and git-upload-archive services\n6. Implements idle and maximum timeout handling\n7. Provides clean shutdown via context cancellation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/charmbracelet/log\"\n\t\"github.com/charmbracelet/soft-serve/pkg/access\"\n\t\"github.com/charmbracelet/soft-serve/pkg/backend\"\n\t\"github.com/charmbracelet/soft-serve/pkg/config\"\n\t\"github.com/charmbracelet/soft-serve/pkg/git\"\n\t\"github.com/charmbracelet/soft-serve/pkg/utils\"\n\t\"github.com/go-git/go-git/v5/plumbing/format/pktline\"\n)\n\ntype GitDaemon struct {\n\tctx      context.Context\n\taddr     string\n\tfinished chan struct{}\n\tconns    connections\n\tcfg      *config.Config\n\tbe       *backend.Backend\n\twg       sync.WaitGroup\n\tonce     sync.Once\n\tlogger   *log.Logger\n\tdone     atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := config.FromContext(ctx)\n\taddr := cfg.Git.ListenAddr\n\td := &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     addr,\n\t\tfinished: make(chan struct{}, 1),\n\t\tcfg:      cfg,\n\t\tbe:       backend.FromContext(ctx),\n\t\tconns:    connections{m: make(map[net.Conn]struct{})},\n\t\tlogger:   log.FromContext(ctx).WithPrefix(\"gitdaemon\"),\n\t}\n\treturn d, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\tlistener, err := net.Listen(\"tcp\", d.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn d.Serve(listener)\n}\n\nfunc (d *GitDaemon) Serve(listener net.Listener) error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\n\td.wg.Add(1)\n\tdefer d.wg.Done()\n\tdefer listener.Close()\n\n\tvar tempDelay time.Duration\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.finished:\n\t\t\t\treturn ErrServerClosed\n\t\t\tdefault:\n\t\t\t\td.logger.Debugf(\"git: error accepting connection: %v\", err)\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay > max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif d.conns.Size()+1 >= d.cfg.Git.MaxConnections {\n\t\t\td.logger.Debugf(\"git: max connections reached, closing %s\", conn.RemoteAddr())\n\t\t\td.fatal(conn, git.ErrMaxConnections)\n\t\t\tcontinue\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\td.handleClient(conn)\n\t\t\td.wg.Done()\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tidleTimeout := time.Duration(d.cfg.Git.IdleTimeout) * time.Second\n\tc := &serverConn{\n\t\tConn:          conn,\n\t\tidleTimeout:   idleTimeout,\n\t\tcloseCanceler: cancel,\n\t}\n\tif d.cfg.Git.MaxTimeout > 0 {\n\t\tdur := time.Duration(d.cfg.Git.MaxTimeout) * time.Second\n\t\tc.maxDeadline = time.Now().Add(dur)\n\t}\n\td.conns.Add(c)\n\tdefer func() {\n\t\td.conns.Close(c)\n\t}()\n\n\terrc := make(chan error, 1)\n\n\ts := pktline.NewScanner(c)\n\tgo func() {\n\t\tif !s.Scan() {\n\t\t\tif err := s.Err(); err != nil {\n\t\t\t\terrc <- err\n\t\t\t}\n\t\t}\n\t\terrc <- nil\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tif err := ctx.Err(); err != nil {\n\t\t\td.logger.Debugf(\"git: connection context error: %v\", err)\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t}\n\t\treturn\n\tcase err := <-errc:\n\t\tif nerr, ok := err.(net.Error); ok && nerr.Timeout() {\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t\treturn\n\t\t} else if err != nil {\n\t\t\td.logger.Debugf(\"git: error scanning pktline: %v\", err)\n\t\t\td.fatal(c, git.ErrSystemMalfunction)\n\t\t\treturn\n\t\t}\n\n\t\tline := s.Bytes()\n\t\tsplit := bytes.SplitN(line, []byte{' '}, 2)\n\t\tif len(split) != 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\tservice := git.Service(split[0])\n\t\tswitch service {\n\t\tcase git.UploadPackService:\n\t\tcase git.UploadArchiveService:\n\t\tdefault:\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\topts := bytes.SplitN(split[1], []byte{0}, 3)\n\t\tif len(opts) < 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\thost := strings.TrimPrefix(string(opts[1]), \"host=\")\n\t\textraParams := map[string]string{}\n\n\t\tif len(opts) > 2 {\n\t\t\tbuf := bytes.TrimPrefix(opts[2], []byte{0})\n\t\t\tfor _, o := range bytes.Split(buf, []byte{0}) {\n\t\t\t\topt := string(o)\n\t\t\t\tif opt == \"\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tkv := strings.SplitN(opt, \"=\", 2)\n\t\t\t\tif len(kv) != 2 {\n\t\t\t\t\td.logger.Errorf(\"git: invalid option %q\", opt)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\textraParams[kv[0]] = kv[1]\n\t\t\t}\n\t\t}\n\n\t\tbe := d.be\n\t\tif !be.AllowKeyless(ctx) {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tname := utils.SanitizeRepo(string(opts[0]))\n\t\td.logger.Debugf(\"git: connect %s %s %s\", c.RemoteAddr(), service, name)\n\t\tdefer d.logger.Debugf(\"git: disconnect %s %s %s\", c.RemoteAddr(), service, name)\n\n\t\trepo := name + \".git\"\n\t\treposDir := filepath.Join(d.cfg.DataPath, \"repos\")\n\t\tif err := git.EnsureWithin(reposDir, repo); err != nil {\n\t\t\td.logger.Debugf(\"git: error ensuring repo path: %v\", err)\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tif _, err := d.be.Repository(ctx, repo); err != nil {\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tauth := be.AccessLevel(ctx, name, \"\")\n\t\tif auth < access.ReadOnlyAccess {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tenvs := []string{\n\t\t\t\"SOFT_SERVE_REPO_NAME=\" + name,\n\t\t\t\"SOFT_SERVE_REPO_PATH=\" + filepath.Join(reposDir, repo),\n\t\t\t\"SOFT_SERVE_HOST=\" + host,\n\t\t\t\"SOFT_SERVE_LOG_PATH=\" + filepath.Join(d.cfg.DataPath, \"log\", \"hooks.log\"),\n\t\t}\n\n\t\tif len(extraParams) > 0 {\n\t\t\tvar gitProto string\n\t\t\tfor k, v := range extraParams {\n\t\t\t\tif len(gitProto) > 0 {\n\t\t\t\t\tgitProto += \":\"\n\t\t\t\t}\n\t\t\t\tgitProto += k + \"=\" + v\n\t\t\t}\n\t\t\tenvs = append(envs, \"GIT_PROTOCOL=\"+gitProto)\n\t\t}\n\n\t\tenvs = append(envs, d.cfg.Environ()...)\n\n\t\tcmd := git.ServiceCommand{\n\t\t\tStdin:  c,\n\t\t\tStdout: c,\n\t\t\tStderr: c,\n\t\t\tEnv:    envs,\n\t\t\tDir:    filepath.Join(reposDir, repo),\n\t\t}\n\n\t\tif err := service.Handler(ctx, cmd); err != nil {\n\t\t\td.logger.Debugf(\"git: error handling request: %v\", err)\n\t\t\td.fatal(c, err)\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"strconv\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/example/gitdaemon/backend\"\n\t\"github.com/example/gitdaemon/config\"\n)\n\ntype GitDaemon struct {\n\tctx        context.Context\n\taddr       string\n\tfinished   chan struct{}\n\tconns      connections\n\tcfg        *config.Config\n\tbe         *backend.Backend\n\twg         sync.WaitGroup\n\tonce       sync.Once\n\tlogger     *log.Logger\n\tdone       atomic.Bool\n\tlistener   net.Listener\n}\n\ntype serverConn struct {\n\tnet.Conn\n\tidleTimeout time.Duration\n\tmaxTimeout  time.Duration\n}\n\nfunc (sc *serverConn) Read(b []byte) (int, error) {\n\tif sc.idleTimeout > 0 {\n\t\tsc.Conn.SetReadDeadline(time.Now().Add(sc.idleTimeout))\n\t}\n\treturn sc.Conn.Read(b)\n}\n\nfunc (sc *serverConn) Write(b []byte) (int, error) {\n\tif sc.idleTimeout > 0 {\n\t\tsc.Conn.SetWriteDeadline(time.Now().Add(sc.idleTimeout))\n\t}\n\treturn sc.Conn.Write(b)\n}\n\ntype connections struct {\n\tmu  sync.Mutex\n\tm   map[net.Conn]struct{}\n}\n\nfunc (c *connections) Add(conn net.Conn) {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.m[conn] = struct{}{}\n}\n\nfunc (c *connections) Remove(conn net.Conn) {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tdelete(c.m, conn)\n}\n\nfunc (c *connections) All() []net.Conn {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tconns := make([]net.Conn, 0, len(c.m))\n\tfor conn := range c.m {\n\t\tconns = append(conns, conn)\n\t}\n\treturn conns\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg, err := config.Load(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbe, err := backend.New(cfg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     cfg.Addr,\n\t\tfinished: make(chan struct{}),\n\t\tconns: connections{\n\t\t\tm: make(map[net.Conn]struct{}),\n\t\t},\n\t\tcfg:    cfg,\n\t\tbe:     be,\n\t\tlogger: log.New(os.Stderr, \"[git-daemon] \", log.LstdFlags),\n\t\tdone:   atomic.Bool{},\n\t}, nil\n}\n\nfunc (d *GitDaemon) isTemporaryError(err error) bool {\n\tif ne, ok := err.(interface{ Temporary() bool }); ok {\n\t\treturn ne.Temporary()\n\t}\n\treturn false\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tvar lastErr error\n\tbackoff := time.Second\n\tmaxBackoff := 30 * time.Second\n\n\tfor {\n\t\tselect {\n\t\tcase <-d.ctx.Done():\n\t\t\treturn d.ctx.Err()\n\t\tdefault:\n\t\t\tlistener, err := net.Listen(\"tcp\", d.addr)\n\t\t\tif err != nil {\n\t\t\t\td.logger.Printf(\"Failed to listen on %s: %v\", d.addr, err)\n\t\t\t\tif !d.isTemporaryError(err) {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\ttime.Sleep(backoff)\n\t\t\t\tif backoff < maxBackoff {\n\t\t\t\t\tbackoff *= 2\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbackoff = time.Second\n\t\t\tif err := d.Serve(listener); err != nil {\n\t\t\t\tlastErr = err\n\t\t\t\td.logger.Printf(\"Serve error: %v\", err)\n\t\t\t\tif !d.isTemporaryError(err) {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (d *GitDaemon) Serve(listener net.Listener) error {\n\td.listener = listener\n\td.wg.Add(1)\n\tgo func() {\n\t\tdefer d.wg.Done()\n\t\t<-d.ctx.Done()\n\t\td.Shutdown()\n\t}()\n\n\td.logger.Printf(\"Starting server on %s\", d.addr)\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.ctx.Done():\n\t\t\t\treturn d.ctx.Err()\n\t\t\tdefault:\n\t\t\t\td.logger.Printf(\"Accept error: %v\", err)\n\t\t\t\tif d.isTemporaryError(err) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\tif d.cfg.MaxConnections > 0 {\n\t\t\td.conns.mu.Lock()\n\t\t\tif len(d.conns.m) >= d.cfg.MaxConnections {\n\t\t\t\td.conns.mu.Unlock()\n\t\t\t\tconn.Close()\n\t\t\t\td.logger.Println(\"Max connections reached\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\td.conns.m[conn] = struct{}{}\n\t\t\td.conns.mu.Unlock()\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\tdefer d.wg.Done()\n\t\t\td.handleClient(conn)\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tsc := &serverConn{\n\t\tConn:        conn,\n\t\tidleTimeout: d.cfg.IdleTimeout,\n\t\tmaxTimeout:  d.cfg.MaxTimeout,\n\t}\n\tif sc.maxTimeout > 0 {\n\t\tsc.Conn.SetDeadline(time.Now().Add(sc.maxTimeout))\n\t}\n\n\tdefer func() {\n\t\tconn.Close()\n\t\td.conns.Remove(conn)\n\t\tif r := recover(); r != nil {\n\t\t\td.logger.Printf(\"Recovered from panic: %v\", r)\n\t\t}\n\t}()\n\n\tpkt, err := readPktLine(sc)\n\tif err != nil {\n\t\tsendError(sc, fmt.Sprintf(\"Failed to read service request: %v\", err))\n\t\treturn\n\t}\n\n\tservice, repoPath, err := parseService(pkt)\n\tif err != nil {\n\t\tsendError(sc, fmt.Sprintf(\"Invalid service request: %v\", err))\n\t\treturn\n\t}\n\n\trepo, err := d.be.ValidateRepo(repoPath)\n\tif err != nil {\n\t\tsendError(sc, fmt.Sprintf(\"Repository not found: %v\", err))\n\t\treturn\n\t}\n\n\tif !d.be.HasAccess(repo, service) {\n\t\tsendError(sc, \"Access denied for service \"+service)\n\t\treturn\n\t}\n\n\tswitch service {\n\tcase \"git-upload-pack\":\n\t\td.runUploadPack(sc, repo)\n\tcase \"git-upload-archive\":\n\t\td.runUploadArchive(sc, repo)\n\tdefault:\n\t\tsendError(sc, \"Unsupported service: \"+service)\n\t}\n}\n\nfunc readPktLine(r io.Reader) ([]byte, error) {\n\tlenBuf := make([]byte, 4)\n\t_, err := io.ReadFull(r, lenBuf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tlengthStr := string(lenBuf)\n\tif lengthStr == \"0000\" {\n\t\treturn lenBuf, nil\n\t}\n\tlength, err := strconv.ParseInt(lengthStr, 16, 32)\n\tif err != nil || length < 4 {\n\t\treturn nil, fmt.Errorf(\"invalid pktline length: %s\", lengthStr)\n\t}\n\tdata := make([]byte, length-4)\n\t_, err = io.ReadFull(r, data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn append(lenBuf, data...), nil\n}\n\nfunc parseService(pkt []byte) (string, string, error) {\n\tif len(pkt) < 4 {\n\t\treturn \"\", \"\", fmt.Errorf(\"packet too short\")\n\t}\n\tpktStr := string(pkt[4:])\n\tvar service, repoPath string\n\tif _, err := fmt.Sscanf(pktStr, \"#service=%s\\n%*s\", &service); err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to parse service: %v\", err)\n\t}\n\tif service != \"git-upload-pack\" && service != \"git-upload-archive\" {\n\t\treturn \"\", \"\", fmt.Errorf(\"unknown service: %s\", service)\n\t}\n\t// Extract repository path from pktStr\n\t// Simplified parsing - real implementation would need more robust parsing\n\tstart := 0\n\tfor i, b := range pktStr {\n\t\tif b == '\\000' {\n\t\t\tstart = i + 1\n\t\t\tbreak\n\t\t}\n\t}\n\tend := start\n\tfor i := start; i < len(pktStr); i++ {\n\t\tif pktStr[i] == '\\x00' {\n\t\t\tend = i\n\t\t\tbreak\n\t\t}\n\t}\n\trepoPath = pktStr[start:end]\n\treturn service, repoPath, nil\n}\n\nfunc sendError(w io.Writer, msg string) {\n\tlen := len(msg) + 5\n\tfmt.Fprintf(w, \"%04xerr %s\\n0000\", len, msg)\n}\n\nfunc (d *GitDaemon) runUploadPack(conn net.Conn, repo string) {\n\tcmd := exec.Command(\"git\", \"upload-pack\", repo)\n\tcmd.Stdin = conn\n\tcmd.Stdout = conn\n\tcmd.Stderr = conn\n\tif err := cmd.Run(); err != nil {\n\t\td.logger.Printf(\"upload-pack failed: %v\", err)\n\t}\n}\n\nfunc (d *GitDaemon) runUploadArchive(conn net.Conn, repo string) {\n\tcmd := exec.Command(\"git\", \"upload-archive\", repo)\n\tcmd.Stdin = conn\n\tcmd.Stdout = conn\n\tcmd.Stderr = conn\n\tif err := cmd.Run(); err != nil {\n\t\td.logger.Printf(\"upload-archive failed: %v\", err)\n\t}\n}\n\nfunc (d *GitDaemon) Shutdown() {\n\td.once.Do(func() {\n\t\td.done.Store(true)\n\t\tif d.listener != nil {\n\t\t\td.listener.Close()\n\t\t}\n\t\tfor conn := range d.conns.All() {\n\t\t\tconn.Close()\n\t\t}\n\t\tclose(d.finished)\n\t})\n}"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Go struct that manages multiple TCP and UDP listeners for a proxy server, with methods to register and handle incoming connections.\n\nStruct Description: The Proxy struct manages network listeners for UDP, TCP, and local DNS-over-HTTPS (DoH) connections. It provides methods to create listeners from addresses and handle incoming connections through separate goroutines.\n\nFields:\nudpListeners: []*net.UDPConn - Slice of active UDP listeners\ntcpListeners: []*net.TCPListener - Slice of active TCP listeners\nlocalDoHListeners: []*net.TCPListener - Slice of active local DoH TCP listeners\n\nMethods:\nregisterUDPListener(*net.UDPConn) -> void - Adds a UDP listener to the udpListeners slice\nregisterTCPListener(*net.TCPListener) -> void - Adds a TCP listener to the tcpListeners slice\nregisterLocalDoHListener(*net.TCPListener) -> void - Adds a local DoH listener to the localDoHListeners slice\nudpListenerFromAddr(*net.UDPAddr) -> error - Creates and registers a UDP listener from address\ntcpListenerFromAddr(*net.TCPAddr) -> error - Creates and registers a TCP listener from address\nlocalDoHListenerFromAddr(*net.TCPAddr) -> error - Creates and registers a local DoH listener from address\nudpListener(*net.UDPConn) -> void - Handles incoming UDP connections (runs in goroutine)\ntcpListener(*net.TCPListener) -> void - Handles incoming TCP connections (runs in goroutine)\nstartAcceptingClients() -> void - Starts all registered listeners in separate goroutines",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n)\n\ntype Proxy struct {\n\tudpListeners    []*net.UDPConn\n\ttcpListeners    []*net.TCPListener\n\tlocalDoHListeners []*net.TCPListener\n}\n\nfunc (proxy *Proxy) registerUDPListener(conn *net.UDPConn) {\n\tproxy.udpListeners = append(proxy.udpListeners, conn)\n}\n\nfunc (proxy *Proxy) registerTCPListener(listener *net.TCPListener) {\n\tproxy.tcpListeners = append(proxy.tcpListeners, listener)\n}\n\nfunc (proxy *Proxy) registerLocalDoHListener(listener *net.TCPListener) {\n\tproxy.localDoHListeners = append(proxy.localDoHListeners, listener)\n}\n\nfunc (proxy *Proxy) udpListenerFromAddr(listenAddr *net.UDPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"udp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"udp4\"\n\t}\n\tclientPc, err := net.ListenUDP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerUDPListener(clientPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) tcpListenerFromAddr(listenAddr *net.TCPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"tcp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"tcp4\"\n\t}\n\tacceptPc, err := net.ListenTCP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerTCPListener(acceptPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) localDoHListenerFromAddr(listenAddr *net.TCPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"tcp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"tcp4\"\n\t}\n\tacceptPc, err := net.ListenTCP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerLocalDoHListener(acceptPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) udpListener(clientPc *net.UDPConn) {\n\tdefer clientPc.Close()\n\tfor {\n\t\tbuffer := make([]byte, MaxDNSPacketSize-1)\n\t\tlength, clientAddr, err := clientPc.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tpacket := buffer[:length]\n\t\tgo proxy.processIncomingQuery(\"udp\", \"udp\", packet, &clientAddr, clientPc, time.Now(), false)\n\t}\n}\n\nfunc (proxy *Proxy) tcpListener(acceptPc *net.TCPListener) {\n\tdefer acceptPc.Close()\n\tfor {\n\t\tclientPc, err := acceptPc.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo func() {\n\t\t\tdefer clientPc.Close()\n\t\t\tif err := clientPc.SetDeadline(time.Now().Add(proxy.timeout)); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tstart := time.Now()\n\t\t\tpacket, err := ReadPrefixed(&clientPc)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tclientAddr := clientPc.RemoteAddr()\n\t\t\tproxy.processIncomingQuery(\"tcp\", \"tcp\", packet, &clientAddr, clientPc, start, false)\n\t\t}()\n\t}\n}\n\nfunc (proxy *Proxy) startAcceptingClients() {\n\tfor _, clientPc := range proxy.udpListeners {\n\t\tgo proxy.udpListener(clientPc)\n\t}\n\tproxy.udpListeners = nil\n\tfor _, acceptPc := range proxy.tcpListeners {\n\t\tgo proxy.tcpListener(acceptPc)\n\t}\n\tproxy.tcpListeners = nil\n\tfor _, acceptPc := range proxy.localDoHListeners {\n\t\tgo proxy.localDoHListener(acceptPc)\n\t}\n\tproxy.localDoHListeners = nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n)\n\ntype Proxy struct {\n\tudpListeners       []*net.UDPConn\n\ttcpListeners       []*net.TCPListener\n\tlocalDoHListeners  []*net.TCPListener\n}\n\nfunc (p *Proxy) registerUDPListener(conn *net.UDPConn) {\n\tp.udpListeners = append(p.udpListeners, conn)\n}\n\nfunc (p *Proxy) registerTCPListener(listener *net.TCPListener) {\n\tp.tcpListeners = append(p.tcpListeners, listener)\n}\n\nfunc (p *Proxy) registerLocalDoHListener(listener *net.TCPListener) {\n\tp.localDoHListeners = append(p.localDoHListeners, listener)\n}\n\nfunc (p *Proxy) udpListenerFromAddr(addr *net.UDPAddr) error {\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerUDPListener(conn)\n\treturn nil\n}\n\nfunc (p *Proxy) tcpListenerFromAddr(addr *net.TCPAddr) error {\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerTCPListener(listener)\n\treturn nil\n}\n\nfunc (p *Proxy) localDoHListenerFromAddr(addr *net.TCPAddr) error {\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerLocalDoHListener(listener)\n\treturn nil\n}\n\nfunc (p *Proxy) udpListener(conn *net.UDPConn) {\n\tdefer conn.Close()\n\tbuf := make([]byte, 65536)\n\tfor {\n\t\tn, src, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tgo func(data []byte, addr *net.UDPAddr) {\n\t\t}(buf[:n], src)\n\t}\n}\n\nfunc (p *Proxy) tcpListener(listener *net.TCPListener) {\n\tdefer listener.Close()\n\tfor {\n\t\tconn, err := listener.AcceptTCP()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tgo func(c *net.TCPConn) {\n\t\t\tc.Close()\n\t\t}(conn)\n\t}\n}\n\nfunc (p *Proxy) startAcceptingClients() {\n\tfor _, listener := range p.udpListeners {\n\t\tgo p.udpListener(listener)\n\t}\n\tfor _, listener := range p.tcpListeners {\n\t\tgo p.tcpListener(listener)\n\t}\n\tfor _, listener := range p.localDoHListeners {\n\t\tgo p.tcpListener(listener)\n\t}\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a Go struct that manages HTTP requests to interact with a community persistence service, including authentication and community creation functionality.\n\nStruct Description: The Manager struct provides methods to interact with a community persistence API, handling authentication and request/response processing. It maintains connection details and context for request cancellation.\n\nFields:\nurl: string - Base URL of the community persistence service\nusername: string - Username for basic authentication\npassword: string - Password for basic authentication\nctx: context.Context - Context for request cancellation and timeouts\n\nMethods:\nNewManager: (url string, username string, password string, ctx context.Context) -> *Manager - Constructor that initializes a new Manager instance with connection details and context\nCreatePersistentCommunity: (community string, password string) -> (*persisters.Community, error) - Creates a new persistent community by making an authenticated POST request to the service, returning the created community or an error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tjsoniter \"github.com/json-iterator/go\"\n\t\"github.com/pojntfx/weron/internal/persisters\"\n)\n\nvar (\n\tjson = jsoniter.ConfigCompatibleWithStandardLibrary\n)\n\ntype Manager struct {\n\turl      string\n\tusername string\n\tpassword string\n\tctx      context.Context\n}\n\nfunc NewManager(\n\turl string,\n\tusername string,\n\tpassword string,\n\tctx context.Context,\n) *Manager {\n\treturn &Manager{\n\t\turl:      url,\n\t\tusername: username,\n\t\tpassword: password,\n\t\tctx:      ctx,\n\t}\n}\n\nfunc (m *Manager) CreatePersistentCommunity(community string, password string) (*persisters.Community, error) {\n\thc := &http.Client{}\n\n\tu, err := url.Parse(m.url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tq := u.Query()\n\tq.Set(\"community\", community)\n\tq.Set(\"password\", password)\n\tu.RawQuery = q.Encode()\n\n\treq, err := http.NewRequest(http.MethodPost, u.String(), http.NoBody)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(m.username, m.password)\n\n\tres, err := hc.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif res.Body != nil {\n\t\tdefer res.Body.Close()\n\t}\n\tif res.StatusCode != http.StatusOK {\n\t\treturn nil, errors.New(res.Status)\n\t}\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc := persisters.Community{}\n\tif err := json.Unmarshal(body, &c); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &c, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"persisters\"\n)\n\ntype Manager struct {\n\turl      string\n\tusername string\n\tpassword string\n\tctx      context.Context\n}\n\nfunc NewManager(url string, username string, password string, ctx context.Context) *Manager {\n\treturn &Manager{\n\t\turl:      url,\n\t\tusername: username,\n\t\tpassword: password,\n\t\tctx:      ctx,\n\t}\n}\n\nfunc (m *Manager) CreatePersistentCommunity(community string, password string) (*persisters.Community, error) {\n\tpayload, err := json.Marshal(map[string]string{\n\t\t\"community\": community,\n\t\t\"password\":  password,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq, err := http.NewRequestWithContext(m.ctx, \"POST\", m.url, bytes.NewBuffer(payload))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(m.username, m.password)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tvar comm persisters.Community\n\tif err := json.NewDecoder(resp.Body).Decode(&comm); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &comm, nil\n}"
  },
  {
    "Task_id": 190,
    "Instruction": "Task Description: Implement a high-performance TCP server in Go using kqueue for event notification, capable of handling multiple client connections efficiently with non-blocking I/O operations.\n\nStruct Description: The `poller` struct manages a single kqueue instance and handles all I/O operations for its assigned connections. It works as part of an engine (`g *Engine`) to process network events either as a listener (accepting new connections) or as a worker (handling read/write operations).\n\nFields:\n\ng: *Engine - Reference to the parent engine managing all pollers\nmux: sync.Mutex - Mutex for thread-safe access to eventList\nkfd: int - Kqueue file descriptor\nevtfd: int - Event file descriptor (unused in current implementation)\nindex: int - Poller's index in the engine's poller array\nshutdown: bool - Flag to control poller shutdown\nlistener: net.Listener - TCP listener (only for listener pollers)\nisListener: bool - Flag indicating if this is a listener poller\nunixSockAddr: string - Unix socket address (if using UNIX domain sockets)\nReadBuffer: []byte - Buffer for read operations\npollType: string - Type identifier (\"LISTENER\" or \"POLLER\")\neventList: []syscall.Kevent_t - Pending kqueue events to be processed\n\nMethods:\n\naddConn(c *Conn) -> error - Adds a new connection to the poller and registers it for read events\naddDialer(c *Conn) -> error - Adds a dialer connection and registers it for read/write events\ngetConn(fd int) -> *Conn - Retrieves a connection by file descriptor\ndeleteConn(c *Conn) -> - Removes a connection from tracking\ntrigger() -> - Wakes up the kqueue loop\naddRead(fd int) -> - Registers a file descriptor for read events\nresetRead(fd int) -> - Unregisters write events for a file descriptor\nmodWrite(fd int) -> - Registers a file descriptor for write events\naddReadWrite(fd int) -> - Registers a file descriptor for both read and write events\nreadWrite(ev *syscall.Kevent_t) -> - Processes read/write events from kqueue\nstart() -> - Starts the poller's main loop (either acceptorLoop or readWriteLoop)\nacceptorLoop() -> - Listener's main loop that accepts new connections\nreadWriteLoop() -> - Worker's main loop that processes I/O events\nstop() -> - Stops the poller and cleans up resources\nnewPoller(g *Engine, isListener bool, index int) -> (*poller, error) - Constructor that creates either a listener or worker poller",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"runtime\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/lesismal/nbio/logging\"\n)\n\ntype poller struct {\n\tmux sync.Mutex\n\n\tg *Engine\n\n\tkfd   int\n\tevtfd int\n\n\tindex int\n\n\tshutdown bool\n\n\tlistener     net.Listener\n\tisListener   bool\n\tunixSockAddr string\n\n\tReadBuffer []byte\n\n\tpollType string\n\n\teventList []syscall.Kevent_t\n}\n\nfunc (p *poller) addConn(c *Conn) error {\n\tfd := c.fd\n\tif fd >= len(p.g.connsUnix) {\n\t\terr := fmt.Errorf(\"too many open files, fd[%d] >= MaxOpenFiles[%d]\",\n\t\t\tfd,\n\t\t\tlen(p.g.connsUnix))\n\t\tc.closeWithError(err)\n\t\treturn err\n\t}\n\tc.p = p\n\tif c.typ != ConnTypeUDPServer {\n\t\tp.g.onOpen(c)\n\t} else {\n\t\tp.g.onUDPListen(c)\n\t}\n\tp.g.connsUnix[fd] = c\n\tp.addRead(fd)\n\treturn nil\n}\n\nfunc (p *poller) addDialer(c *Conn) error {\n\tfd := c.fd\n\tif fd >= len(p.g.connsUnix) {\n\t\terr := fmt.Errorf(\"too many open files, fd[%d] >= MaxOpenFiles[%d]\",\n\t\t\tfd,\n\t\t\tlen(p.g.connsUnix),\n\t\t)\n\t\tc.closeWithError(err)\n\t\treturn err\n\t}\n\tc.p = p\n\tp.g.connsUnix[fd] = c\n\tc.isWAdded = true\n\tp.addReadWrite(fd)\n\treturn nil\n}\n\nfunc (p *poller) getConn(fd int) *Conn {\n\treturn p.g.connsUnix[fd]\n}\n\nfunc (p *poller) deleteConn(c *Conn) {\n\tif c == nil {\n\t\treturn\n\t}\n\tfd := c.fd\n\n\tif c.typ != ConnTypeUDPClientFromRead {\n\t\tif c == p.g.connsUnix[fd] {\n\t\t\tp.g.connsUnix[fd] = nil\n\t\t}\n\t}\n\n\tif c.typ != ConnTypeUDPServer {\n\t\tp.g.onClose(c, c.closeErr)\n\t}\n}\n\nfunc (p *poller) trigger() {\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{{Ident: 0, Filter: syscall.EVFILT_USER, Fflags: syscall.NOTE_TRIGGER}}, nil, nil)\n}\n\nfunc (p *poller) addRead(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_READ})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) resetRead(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_DELETE, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) modWrite(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) addReadWrite(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_READ})\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) readWrite(ev *syscall.Kevent_t) {\n\tif ev.Flags&syscall.EV_DELETE > 0 {\n\t\treturn\n\t}\n\tfd := int(ev.Ident)\n\tc := p.getConn(fd)\n\tif c != nil {\n\t\tif ev.Filter == syscall.EVFILT_READ {\n\t\t\tif p.g.onRead == nil {\n\t\t\t\tfor {\n\t\t\t\t\tbuffer := p.g.borrow(c)\n\t\t\t\t\trc, n, err := c.ReadAndGetConn(buffer)\n\t\t\t\t\tif n > 0 {\n\t\t\t\t\t\tp.g.onData(rc, buffer[:n])\n\t\t\t\t\t}\n\t\t\t\t\tp.g.payback(c, buffer)\n\t\t\t\t\tif errors.Is(err, syscall.EINTR) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif errors.Is(err, syscall.EAGAIN) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (err != nil || n == 0) && ev.Flags&syscall.EV_DELETE == 0 {\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\terr = io.EOF\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc.closeWithError(err)\n\t\t\t\t\t}\n\t\t\t\t\tif n < len(buffer) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tp.g.onRead(c)\n\t\t\t}\n\n\t\t\tif ev.Flags&syscall.EV_EOF != 0 {\n\t\t\t\tif c.onConnected == nil {\n\t\t\t\t\tc.flush()\n\t\t\t\t} else {\n\t\t\t\t\tc.onConnected(c, nil)\n\t\t\t\t\tc.onConnected = nil\n\t\t\t\t\tc.resetRead()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ev.Filter == syscall.EVFILT_WRITE {\n\t\t\tif c.onConnected == nil {\n\t\t\t\tc.flush()\n\t\t\t} else {\n\t\t\t\tc.resetRead()\n\t\t\t\tc.onConnected(c, nil)\n\t\t\t\tc.onConnected = nil\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) start() {\n\tif p.g.LockPoller {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\tdefer p.g.Done()\n\n\tif p.isListener {\n\t\tp.acceptorLoop()\n\t} else {\n\t\tdefer syscall.Close(p.kfd)\n\t\tp.readWriteLoop()\n\t}\n}\n\nfunc (p *poller) acceptorLoop() {\n\tif p.g.LockListener {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\n\tp.shutdown = false\n\tfor !p.shutdown {\n\t\tconn, err := p.listener.Accept()\n\t\tif err == nil {\n\t\t\tvar c *Conn\n\t\t\tc, err = NBConn(conn)\n\t\t\tif err != nil {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tp.g.pollers[c.Hash()%len(p.g.pollers)].addConn(c)\n\t\t} else {\n\t\t\tvar ne net.Error\n\t\t\tif ok := errors.As(err, &ne); ok && ne.Timeout() {\n\t\t\t\ttime.Sleep(time.Second / 20)\n\t\t\t} else {\n\t\t\t\tif !p.shutdown {\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) readWriteLoop() {\n\tif p.g.LockPoller {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\n\tevents := make([]syscall.Kevent_t, 1024)\n\tvar changes []syscall.Kevent_t\n\n\tp.shutdown = false\n\tfor !p.shutdown {\n\t\tp.mux.Lock()\n\t\tchanges = p.eventList\n\t\tp.eventList = nil\n\t\tp.mux.Unlock()\n\t\tn, err := syscall.Kevent(p.kfd, changes, events, nil)\n\t\tif err != nil && !errors.Is(err, syscall.EINTR) && !errors.Is(err, syscall.EBADF) && !errors.Is(err, syscall.ENOENT) && !errors.Is(err, syscall.EINVAL) {\n\t\t\treturn\n\t\t}\n\n\t\tfor i := 0; i < n; i++ {\n\t\t\tswitch int(events[i].Ident) {\n\t\t\tcase p.evtfd:\n\t\t\tdefault:\n\t\t\t\tp.readWrite(&events[i])\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) stop() {\n\tp.shutdown = true\n\tif p.listener != nil {\n\t\tp.listener.Close()\n\t\tif p.unixSockAddr != \"\" {\n\t\t\tos.Remove(p.unixSockAddr)\n\t\t}\n\t}\n\tp.trigger()\n}\n\nfunc newPoller(g *Engine, isListener bool, index int) (*poller, error) {\n\tif isListener {\n\t\tif len(g.Addrs) == 0 {\n\t\t\tpanic(\"invalid listener num\")\n\t\t}\n\n\t\taddr := g.Addrs[index%len(g.Addrs)]\n\t\tln, err := g.Listen(g.Network, addr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tp := &poller{\n\t\t\tg:          g,\n\t\t\tindex:      index,\n\t\t\tlistener:   ln,\n\t\t\tisListener: isListener,\n\t\t\tpollType:   \"LISTENER\",\n\t\t}\n\t\tif g.Network == \"unix\" {\n\t\t\tp.unixSockAddr = addr\n\t\t}\n\n\t\treturn p, nil\n\t}\n\n\tfd, err := syscall.Kqueue()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, err = syscall.Kevent(fd, []syscall.Kevent_t{{\n\t\tIdent:  0,\n\t\tFilter: syscall.EVFILT_USER,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_CLEAR,\n\t}}, nil, nil)\n\n\tif err != nil {\n\t\tsyscall.Close(fd)\n\t\treturn nil, err\n\t}\n\n\tp := &poller{\n\t\tg:          g,\n\t\tkfd:        fd,\n\t\tindex:      index,\n\t\tisListener: isListener,\n\t\tpollType:   \"POLLER\",\n\t}\n\n\treturn p, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"sync\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\ntype Engine struct {\n}\n\ntype Conn struct {\n\tfd int\n}\n\ntype poller struct {\n\tg           *Engine\n\tmux         sync.Mutex\n\tkfd         int\n\tevtfd       int\n\tindex       int\n\tshutdown    bool\n\tlistener    net.Listener\n\tisListener  bool\n\tunixSockAddr string\n\tReadBuffer  []byte\n\tpollType    string\n\teventList   []syscall.Kevent_t\n}\n\nfunc (p *poller) addConn(c *Conn) error {\n\tfd := c.fd\n\terr := syscall.SetNonblock(fd, true)\n\tif err != nil {\n\t\treturn err\n\t}\n\tev := syscall.Kevent_t{\n\t\tIdent:  uintptr(fd),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t\tUdata:  uintptr(unsafe.Pointer(c)),\n\t}\n\t_, err = syscall.Kevent(p.kfd, []syscall.Kevent_t{ev}, nil, nil)\n\treturn err\n}\n\nfunc (p *poller) addDialer(c *Conn) error {\n\tfd := c.fd\n\terr := syscall.SetNonblock(fd, true)\n\tif err != nil {\n\t\treturn err\n\t}\n\tchanges := []syscall.Kevent_t{\n\t\t{\n\t\t\tIdent:  uintptr(fd),\n\t\t\tFilter: syscall.EVFILT_READ,\n\t\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t\t\tUdata:  uintptr(unsafe.Pointer(c)),\n\t\t},\n\t\t{\n\t\t\tIdent:  uintptr(fd),\n\t\t\tFilter: syscall.EVFILT_WRITE,\n\t\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t\t\tUdata:  uintptr(unsafe.Pointer(c)),\n\t\t},\n\t}\n\t_, err := syscall.Kevent(p.kfd, changes, nil, nil)\n\treturn err\n}\n\nfunc (p *poller) getConn(fd int) *Conn {\n\treturn nil\n}\n\nfunc (p *poller) deleteConn(c *Conn) {\n}\n\nfunc (p *poller) trigger() {\n\tbuf := [1]byte{}\n\tsyscall.Write(p.evtfd, buf[:])\n}\n\nfunc (p *poller) addRead(fd int) {\n\tev := syscall.Kevent_t{\n\t\tIdent:  uintptr(fd),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{ev}, nil, nil)\n}\n\nfunc (p *poller) resetRead(fd int) {\n\tev := syscall.Kevent_t{\n\t\tIdent:  uintptr(fd),\n\t\tFilter: syscall.EVFILT_WRITE,\n\t\tFlags:  syscall.EV_DELETE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{ev}, nil, nil)\n}\n\nfunc (p *poller) modWrite(fd int) {\n\tev := syscall.Kevent_t{\n\t\tIdent:  uintptr(fd),\n\t\tFilter: syscall.EVFILT_WRITE,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{ev}, nil, nil)\n}\n\nfunc (p *poller) addReadWrite(fd int) {\n\tchanges := []syscall.Kevent_t{\n\t\t{\n\t\t\tIdent:  uintptr(fd),\n\t\t\tFilter: syscall.EVFILT_READ,\n\t\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t\t},\n\t\t{\n\t\t\tIdent:  uintptr(fd),\n\t\t\tFilter: syscall.EVFILT_WRITE,\n\t\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t\t},\n\t}\n\tsyscall.Kevent(p.kfd, changes, nil, nil)\n}\n\nfunc (p *poller) readWrite(ev *syscall.Kevent_t) {\n\tc := (*Conn)(unsafe.Pointer(uintptr(ev.Udata)))\n\tif c == nil {\n\t\treturn\n\t}\n\tif ev.Filter == syscall.EVFILT_READ {\n\t}\n\tif ev.Filter == syscall.EVFILT_WRITE {\n\t}\n}\n\nfunc (p *poller) start() {\n\tif p.isListener {\n\t\tp.acceptorLoop()\n\t} else {\n\t\tp.readWriteLoop()\n\t}\n}\n\nfunc (p *poller) acceptorLoop() {\n\tfor {\n\t\tp.mux.Lock()\n\t\tif p.shutdown {\n\t\t\tp.mux.Unlock()\n\t\t\treturn\n\t\t}\n\t\tp.mux.Unlock()\n\t\tconn, err := p.listener.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tc := &Conn{}\n\t\tp.addConn(c)\n\t}\n}\n\nfunc (p *poller) readWriteLoop() {\n\tfor {\n\t\tp.mux.Lock()\n\t\tif p.shutdown {\n\t\t\tp.mux.Unlock()\n\t\t\treturn\n\t\t}\n\t\tp.mux.Unlock()\n\t\tn, err := syscall.Kevent(p.kfd, nil, p.eventList, nil)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tfor i := 0; i < n; i++ {\n\t\t\tp.readWrite(&p.eventList[i])\n\t\t}\n\t}\n}\n\nfunc (p *poller) stop() {\n\tp.mux.Lock()\n\tdefer p.mux.Unlock()\n\tif p.shutdown {\n\t\treturn\n\t}\n\tp.shutdown = true\n\tp.trigger()\n\tsyscall.Close(p.kfd)\n\tif p.listener != nil {\n\t\tp.listener.Close()\n\t}\n\tsyscall.Close(p.evtfd)\n}\n\nfunc newPoller(g *Engine, isListener bool, index int) (*poller, error) {\n\tkfd, err := syscall.Kqueue()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar fds [2]int\n\terr = syscall.Pipe(fds[:])\n\tif err != nil {\n\t\tsyscall.Close(kfd)\n\t\treturn nil, err\n\t}\n\tp := &poller{\n\t\tg:          g,\n\t\tkfd:        kfd,\n\t\tevtfd:      fds[1],\n\t\tindex:      index,\n\t\tisListener: isListener,\n\t\tReadBuffer: make([]byte, 32*1024),\n\t\teventList:  make([]syscall.Kevent_t, 64),\n\t}\n\tev := syscall.Kevent_t{\n\t\tIdent:  uintptr(fds[0]),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\t_, err = syscall.Kevent(p.kfd, []syscall.Kevent_t{ev}, nil, nil)\n\tif err != nil {\n\t\tsyscall.Close(fds[0])\n\t\tsyscall.Close(fds[1])\n\t\tsyscall.Close(kfd)\n\t\treturn nil, err\n\t}\n\tif isListener {\n\t\tp.pollType = \"LISTENER\"\n\t} else {\n\t\tp.pollType = \"POLLER\"\n\t}\n\treturn p, nil\n}"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Implement a TCP listener in Go that supports different listening methods (normal, iptables, and socket reuse) for handling incoming client connections, performing protocol negotiation, and managing client tasks.\n\nStruct Description: The Listen struct represents a TCP listener with configurable listening methods and address. It provides methods to start listening using different techniques and handle client connections.\n\nFields:\nmethod: [int] - Specifies the listening method (NORMAL, IPTABLES, or SOREUSE)\naddr: [string] - The address and port to listen on\n\nMethods:\nnewListen: [Name](method int, addr string) -> *Listen - Creates and returns a new Listen instance with the specified method and address\nstart: [Name](mgr *manager.Manager, options *initial.Options) -> void - Starts the listener in a goroutine using the configured method\nnormalListen: [Name](mgr *manager.Manager, options *initial.Options) -> void - Implements standard TCP listening and client handling\nsoReuseListen: [Name](mgr *manager.Manager, options *initial.Options) -> void - Implements socket reuse listening with additional authentication and proxy capabilities",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/libp2p/go-reuseport\"\n)\n\ntype Listen struct {\n\tmethod int\n\taddr   string\n}\n\nfunc newListen(method int, addr string) *Listen {\n\tlisten := new(Listen)\n\tlisten.method = method\n\tlisten.addr = addr\n\treturn listen\n}\n\nfunc (listen *Listen) start(mgr *manager.Manager, options *initial.Options) {\n\tswitch listen.method {\n\tcase NORMAL:\n\t\tgo listen.normalListen(mgr, options)\n\tcase IPTABLES:\n\t\tgo listen.iptablesListen(mgr, options)\n\tcase SOREUSE:\n\t\tgo listen.soReuseListen(mgr, options)\n\t}\n}\n\nfunc (listen *Listen) normalListen(mgr *manager.Manager, options *initial.Options) {\n\tlistener, err := net.Listen(\"tcp\", listen.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[*] Error occurred: %s\\n\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tparam := new(protocol.NegParam)\n\t\tparam.Conn = conn\n\t\tproto := protocol.NewDownProto(param)\n\t\tproto.SNegotiate()\n\n\t\trMessage := protocol.NewDownMsg(conn, global.G_Component.Secret, protocol.ADMIN_UUID)\n\t\tfHeader, fMessage, err := protocol.DestructMessage(rMessage)\n\t\tif err != nil {\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\tif fHeader.MessageType == protocol.HI {\n\t\t\tmmess := fMessage.(*protocol.HIMess)\n\t\t\tif mmess.Greeting == \"Shhh...\" && mmess.IsAdmin == 0 {\n\t\t\t\tchildrenTask := &manager.ChildrenTask{\n\t\t\t\t\tMode: manager.C_NEWCHILD,\n\t\t\t\t\tUUID: mmess.UUID,\n\t\t\t\t\tConn: conn,\n\t\t\t\t}\n\t\t\t\tmgr.ChildrenManager.TaskChan <- childrenTask\n\t\t\t\t<-mgr.ChildrenManager.ResultChan\n\t\t\t\tmgr.ChildrenManager.ChildComeChan <- &manager.ChildInfo{UUID: mmess.UUID, Conn: conn}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t}\n}\n\nfunc (listen *Listen) soReuseListen(mgr *manager.Manager, options *initial.Options) {\n\tlistenAddr := fmt.Sprintf(\"%s:%s\", options.ReuseHost, options.ReusePort)\n\tlistener, err := reuseport.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[*] Error occurred: %s\\n\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tparam := new(protocol.NegParam)\n\t\tparam.Conn = conn\n\t\tproto := protocol.NewDownProto(param)\n\t\tproto.SNegotiate()\n\n\t\tdefer conn.SetReadDeadline(time.Time{})\n\t\tconn.SetReadDeadline(time.Now().Add(2 * time.Second))\n\n\t\tbuffer := make([]byte, 16)\n\t\tcount, err := io.ReadFull(conn, buffer)\n\n\t\tif err != nil {\n\t\t\tif timeoutErr, ok := err.(net.Error); ok && timeoutErr.Timeout() {\n\t\t\t\tgo initial.ProxyStream(conn, buffer[:count], options.ReusePort)\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif string(buffer[:count]) == share.AuthToken {\n\t\t\tconn.Write([]byte(share.AuthToken))\n\t\t} else {\n\t\t\tgo initial.ProxyStream(conn, buffer[:count], options.ReusePort)\n\t\t\tcontinue\n\t\t}\n\n\t\trMessage := protocol.NewDownMsg(conn, global.G_Component.Secret, protocol.ADMIN_UUID)\n\t\tfHeader, fMessage, err := protocol.DestructMessage(rMessage)\n\n\t\tif err != nil {\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\tif fHeader.MessageType == protocol.HI {\n\t\t\tmmess := fMessage.(*protocol.HIMess)\n\t\t\tif mmess.Greeting == \"Shhh...\" && mmess.IsAdmin == 0 {\n\t\t\t\tchildrenTask := &manager.ChildrenTask{\n\t\t\t\t\tMode: manager.C_NEWCHILD,\n\t\t\t\t\tUUID: mmess.UUID,\n\t\t\t\t\tConn: conn,\n\t\t\t\t}\n\t\t\t\tmgr.ChildrenManager.TaskChan <- childrenTask\n\t\t\t\t<-mgr.ChildrenManager.ResultChan\n\t\t\t\tmgr.ChildrenManager.ChildComeChan <- &manager.ChildInfo{UUID: mmess.UUID, Conn: conn}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"syscall\"\n\n\t\"golang.org/x/sys/unix\"\n\t\"initial\"\n\t\"manager\"\n)\n\nconst (\n\tNORMAL = iota\n\tIPTABLES\n\tSOREUSE\n)\n\ntype Listen struct {\n\tmethod int\n\taddr   string\n}\n\nfunc newListen(method int, addr string) *Listen {\n\treturn &Listen{\n\t\tmethod: method,\n\t\taddr:   addr,\n\t}\n}\n\nfunc (l *Listen) start(mgr *manager.Manager, options *initial.Options) {\n\tgo func() {\n\t\tswitch l.method {\n\t\tcase NORMAL:\n\t\t\tl.normalListen(mgr, options)\n\t\tcase SOREUSE:\n\t\t\tl.soReuseListen(mgr, options)\n\t\tcase IPTABLES:\n\t\t\tl.normalListen(mgr, options)\n\t\t}\n\t}()\n}\n\nfunc (l *Listen) normalListen(mgr *manager.Manager, options *initial.Options) {\n\tlistener, err := net.Listen(\"tcp\", l.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tgo l.handleClient(conn, mgr, options)\n\t}\n}\n\nfunc (l *Listen) handleClient(conn net.Conn, mgr *manager.Manager, options *initial.Options) {\n}\n\nfunc (l *Listen) soReuseListen(mgr *manager.Manager, options *initial.Options) {\n\tlnCfg := &net.ListenConfig{\n\t\tControl: func(network, address string, c syscall.RawConn) error {\n\t\t\tvar opErr error\n\t\t\terr := c.Control(func(fd uintptr) {\n\t\t\t\topErr = unix.SetsockoptInt(int(fd), unix.SOL_SOCKET, unix.SO_REUSEADDR, 1)\n\t\t\t\tif opErr != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\topErr = unix.SetsockoptInt(int(fd), unix.SOL_SOCKET, unix.SO_REUSEPORT, 1)\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn opErr\n\t\t},\n\t}\n\n\tlistener, err := lnCfg.Listen(context.Background(), \"tcp\", l.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tgo l.handleClientWithProxy(conn, mgr, options)\n\t}\n}\n\nfunc (l *Listen) handleClientWithProxy(conn net.Conn, mgr *manager.Manager, options *initial.Options) {\n}"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, handles client requests, and manages connection lifecycle with configurable timeouts.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - The request handler interface\nReadTimeout: time.Duration - Maximum duration for reading the entire request\nWriteTimeout: time.Duration - Maximum duration for writing the response\nIdleTimeout: func() time.Duration - Function returning the maximum idle connection duration\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Main server loop that accepts and handles connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual client connection\ninit() - Initializes server resources\nisStarted() bool - Returns server running status\ngetReadTimeout() time.Duration - Returns configured read timeout or default",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, false, false)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\tlimit := maxTCPQueries\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n\tif srv.Handler == nil {\n\t\tsrv.Handler = DefaultServeMux\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "type Server struct {\n    Addr        string\n    Net         string\n    Handler     Handler\n    ReadTimeout time.Duration\n    WriteTimeout time.Duration\n    IdleTimeout  func() time.Duration\n    lock         sync.RWMutex\n    started      bool\n    shutdown     chan struct{}\n    conns        map[net.Conn]struct{}\n}\n\ntype Handler interface {\n    ServeTCP(net.Conn)\n}\n\nfunc (s *Server) ListenAndServe() error {\n    s.lock.Lock()\n    if s.started {\n        s.lock.Unlock()\n        return errors.New(\"server already started\")\n    }\n    s.lock.Unlock()\n\n    s.init()\n\n    ln, err := net.Listen(s.Net, s.Addr)\n    if err != nil {\n        return err\n    }\n\n    return s.serveTCP(ln)\n}\n\nfunc (s *Server) init() {\n    s.lock.Lock()\n    defer s.lock.Unlock()\n\n    if s.conns == nil {\n        s.conns = make(map[net.Conn]struct{})\n    }\n    if s.shutdown == nil {\n        s.shutdown = make(chan struct{})\n    }\n    s.started = true\n}\n\nfunc (s *Server) isStarted() bool {\n    s.lock.RLock()\n    defer s.lock.RUnlock()\n    return s.started\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n    s.lock.RLock()\n    defer s.lock.RUnlock()\n    if s.ReadTimeout <= 0 {\n        return 10 * time.Second\n    }\n    return s.ReadTimeout\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n    var wg sync.WaitGroup\n    defer wg.Wait()\n\n    for {\n        conn, err := ln.Accept()\n        if err != nil {\n            select {\n            case <-s.shutdown:\n                return nil\n            default:\n                return err\n            }\n        }\n\n        s.lock.Lock()\n        s.conns[conn] = struct{}{}\n        s.lock.Unlock()\n\n        wg.Add(1)\n        go func(c net.Conn) {\n            defer wg.Done()\n            s.serveTCPConn(&wg, c)\n        }(conn)\n    }\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n    defer func() {\n        s.lock.Lock()\n        delete(s.conns, conn)\n        s.lock.Unlock()\n        conn.Close()\n        wg.Done()\n    }()\n\n    readTimeout := s.getReadTimeout()\n    if readTimeout > 0 {\n        conn.SetReadDeadline(time.Now().Add(readTimeout))\n    }\n\n    if s.WriteTimeout > 0 {\n        conn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n    }\n\n    idleTimeout := time.Duration(0)\n    if s.IdleTimeout != nil {\n        idleTimeout = s.IdleTimeout()\n    }\n    if idleTimeout > 0 {\n        conn.SetReadDeadline(time.Now().Add(idleTimeout))\n    }\n\n    s.Handler.ServeTCP(conn)\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection lifecycles, timeouts, and provide hooks for customizing reader/writer behavior.\n\nStruct Description: The Server struct represents a configurable TCP server that can handle DNS queries (though this could be adapted for other protocols). It manages listener lifecycle, connection pooling, and provides various timeout and security configurations.\n\nFields:\n\nAddr: string - The address to listen on (e.g., \":domain\")\nNet: string - Network type (\"tcp\", \"tcp4\", \"tcp6\", or their TLS variants)\nListener: net.Listener - The active TCP listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection (not used in TCP mode)\nHandler: Handler - Handler for incoming requests\nUDPSize: int - UDP buffer size\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nIdleTimeout: func() time.Duration - Function returning idle timeout duration\nTsigProvider: TsigProvider - TSIG provider for DNS\nTsigSecret: map[string]string - TSIG secrets\nNotifyStartedFunc: func() - Callback when server starts\nDecorateReader: DecorateReader - Function to decorate the reader\nDecorateWriter: DecorateWriter - Function to decorate the writer\nMaxTCPQueries: int - Maximum queries per connection\nReusePort: bool - Enable SO_REUSEPORT\nReuseAddr: bool - Enable SO_REUSEADDR\nMsgAcceptFunc: MsgAcceptFunc - Function to filter incoming messages\nlock: sync.RWMutex - Mutex for concurrent access protection\nstarted: bool - Server running state\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\nudpPool: sync.Pool - Pool for UDP buffers\n\nMethods:\n\nListenAndServe: () -> error - Starts the server and begins accepting connections\nserveTCP: (net.Listener) -> error - Internal method to serve TCP connections\nserveTCPConn: (*sync.WaitGroup, net.Conn) -> () - Handles an individual TCP connection\nisStarted: () -> bool - Checks if server is running (internal)\ninit: () -> () - Initializes server state (internal)\ngetReadTimeout: () -> time.Duration - Gets current read timeout (internal)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tListener net.Listener\n\tTLSConfig *tls.Config\n\tPacketConn net.PacketConn\n\tHandler   Handler\n\tUDPSize int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tTsigProvider TsigProvider\n\tTsigSecret map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries int\n\tReusePort bool\n\tReuseAddr bool\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigProvider: srv.tsigProvider(), tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"crypto/tls\"\n)\n\ntype Handler interface {\n\tServeDNS(w io.Writer, r []byte)\n}\n\ntype DecorateReader func(*bufio.Reader) *bufio.Reader\ntype DecorateWriter func(*bufio.Writer) *bufio.Writer\ntype MsgAcceptFunc func([]byte) bool\ntype TsigProvider interface{}\n\ntype Server struct {\n\tAddr             string\n\tNet              string\n\tListener         net.Listener\n\tTLSConfig        *tls.Config\n\tPacketConn       net.PacketConn\n\tHandler          Handler\n\tUDPSize          int\n\tReadTimeout      time.Duration\n\tWriteTimeout     time.Duration\n\tIdleTimeout      func() time.Duration\n\tTsigProvider     TsigProvider\n\tTsigSecret       map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader   DecorateReader\n\tDecorateWriter   DecorateWriter\n\tMaxTCPQueries    int\n\tReusePort        bool\n\tReuseAddr        bool\n\tMsgAcceptFunc    MsgAcceptFunc\n\tlock             sync.RWMutex\n\tstarted          bool\n\tshutdown         chan struct{}\n\tconns            map[net.Conn]struct{}\n\tudpPool          sync.Pool\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tif s.started {\n\t\ts.lock.Unlock()\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.init()\n\ts.started = true\n\ts.lock.Unlock()\n\n\tlc := net.ListenConfig{\n\t\tControl: func(network, address string, c syscall.RawConn) error {\n\t\t\tvar opErr error\n\t\t\tc.Control(func(fd uintptr) {\n\t\t\t\terr := os.NewFile(fd, \"\").SetsockoptInt(syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1)\n\t\t\t\tif err != nil {\n\t\t\t\t\topErr = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif s.ReusePort {\n\t\t\t\t\terr = os.NewFile(fd, \"\").SetsockoptInt(syscall.SOL_SOCKET, syscall.SO_REUSEPORT, 1)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\topErr = err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn opErr\n\t\t},\n\t}\n\n\tln, err := lc.Listen(context.Background(), s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif s.TLSConfig != nil {\n\t\tln = tls.NewListener(ln, s.TLSConfig)\n\t}\n\ts.Listener = ln\n\n\tif s.NotifyStartedFunc != nil {\n\t\tgo s.NotifyStartedFunc()\n\t}\n\n\treturn s.serveTCP(ln)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tvar wg sync.WaitGroup\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\ts.lock.Lock()\n\t\tif s.conns == nil {\n\t\t\ts.conns = make(map[net.Conn]struct{})\n\t\t}\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\ts.serveTCPConn(&wg, conn)\n\t\t}()\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\tconn.Close()\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t}()\n\n\treadTimeout := s.getReadTimeout()\n\tif readTimeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(readTimeout))\n\t}\n\n\twriteTimeout := s.WriteTimeout\n\tif writeTimeout > 0 {\n\t\tconn.SetWriteDeadline(time.Now().Add(writeTimeout))\n\t}\n\n\tmaxQueries := s.MaxTCPQueries\n\tif maxQueries <= 0 {\n\t\tmaxQueries = 128\n\t}\n\n\treader := bufio.NewReader(conn)\n\tif s.DecorateReader != nil {\n\t\treader = s.DecorateReader(reader)\n\t}\n\n\twriter := bufio.NewWriter(conn)\n\tif s.DecorateWriter != nil {\n\t\twriter = s.DecorateWriter(writer)\n\t}\n\n\tfor i := 0; i < maxQueries; i++ {\n\t\tlenBuf := make([]byte, 2)\n\t\tif _, err := io.ReadFull(reader, lenBuf); err != nil {\n\t\t\tbreak\n\t\t}\n\n\t\tlength := binary.BigEndian.Uint16(lenBuf)\n\t\tmsg := make([]byte, length)\n\t\tif _, err := io.ReadFull(reader, msg); err != nil {\n\t\t\tbreak\n\t\t}\n\n\t\tif s.MsgAcceptFunc != nil && !s.MsgAcceptFunc(msg) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif s.Handler != nil {\n\t\t\ts.Handler.ServeDNS(writer, msg)\n\t\t\twriter.Flush()\n\t\t}\n\n\t\tif readTimeout := s.getReadTimeout(); readTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(readTimeout))\n\t\t}\n\t\tif writeTimeout := s.WriteTimeout; writeTimeout > 0 {\n\t\t\tconn.SetWriteDeadline(time.Now().Add(writeTimeout))\n\t\t}\n\t}\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.IdleTimeout != nil {\n\t\treturn s.IdleTimeout()\n\t}\n\treturn s.ReadTimeout\n}\n\nfunc (s *Server) init() {\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a TCP server in Go that can handle multiple client connections concurrently, manage server lifecycle, and track active connections.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, handles client communication, and provides server management capabilities.\n\nFields:\n- Addr: string - The network address to listen on (e.g., \":8080\")\n- Net: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\n- Handler: Handler - Interface for custom request handling (implementation not shown)\n- Listener: net.Listener - The underlying network listener\n- conns: map[net.Conn]struct{} - Track active connections\n- lock: sync.RWMutex - Protects concurrent access to server state\n- started: bool - Indicates if server is running\n- shutdown: chan struct{} - Channel for shutdown signaling\n\nMethods:\n- ListenAndServe() error - Starts the server and begins accepting connections\n- init() - Initializes server resources (internal use)\n- serveTCP(net.Listener) error - Main server loop that accepts connections (internal use)\n- serveTCPConn(*sync.WaitGroup, net.Conn) - Handles individual client connections (internal use)\n- isStarted() bool - Thread-safe check of server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tListener net.Listener\n\tconns    map[net.Conn]struct{}\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tl, err := net.Listen(srv.Net, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tsrv.Listener = l\n\tsrv.started = true\n\tunlock()\n\treturn srv.serveTCP(l)\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer func() {\n\t\tsrv.lock.Lock()\n\t\tdelete(srv.conns, rw)\n\t\tsrv.lock.Unlock()\n\t\trw.Close()\n\t\twg.Done()\n\t}()\n\n\tbuf := make([]byte, 4096)\n\tfor {\n\t\tn, err := rw.Read(buf)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\t_, err = rw.Write(buf[:n])\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc unlockOnce(l sync.Locker) func() {\n\tvar once sync.Once\n\treturn func() { once.Do(l.Unlock) }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n)\n\ntype Handler interface {\n\tServeTCP(net.Conn)\n}\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tHandler  Handler\n\tListener net.Listener\n\tconns    map[net.Conn]struct{}\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.isStarted() {\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.init()\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.Listener = listener\n\treturn s.serveTCP(listener)\n}\n\nfunc (s *Server) init() {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tif s.conns == nil {\n\t\ts.conns = make(map[net.Conn]struct{})\n\t}\n\tif s.shutdown == nil {\n\t\ts.shutdown = make(chan struct{})\n\t}\n\ts.started = true\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tvar wg sync.WaitGroup\n\n\tgo func() {\n\t\t<-s.shutdown\n\t\tlistener.Close()\n\t}()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo s.serveTCPConn(&wg, conn)\n\t}\n\twg.Wait()\n\treturn nil\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\tconn.Close()\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\twg.Done()\n\t}()\n\ts.Handler.ServeTCP(conn)\n}"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a TLS server in Go that handles incoming TCP connections, performs TLS handshakes, manages connection timeouts, and processes domain-specific data through channels.\n\nStruct Description: The TLSServer struct represents a TLS-enabled TCP server that handles secure connections, manages connection state, and processes domain-specific data through channels. It includes functionality for accepting connections, handling TLS handshakes, managing timeouts, and shutting down gracefully.\n\nFields:\n- HTTPSServer: *HTTPSServer - Reference to the parent HTTPSServer containing configuration\n- Cache: *cache.Cache - Cache for storing active connections\n- TCPListen: *net.TCPListener - TCP listener for incoming connections\n- Done: chan byte - Channel for signaling server shutdown\n- DomainData: chan DomainData - Channel for sending domain-specific data\n- Error: chan error - Channel for reporting errors\n\nMethods:\n- NewTLSServer(*HTTPSServer) (*TLSServer, error) - Constructor that initializes a new TLSServer instance\n- ListenAndServe() error - Main server loop that handles domain data and errors\n- Shutdown() - Gracefully shuts down the server\n- Accept() - Accepts incoming connections and handles TLS handshakes (spawned as a goroutine)",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/txthinking/zoro\"\n)\n\ntype DomainData struct {\n\tDomain string\n\tData   []byte\n}\n\ntype TLSServer struct {\n\tHTTPSServer *HTTPSServer\n\tCache       *cache.Cache\n\tTCPListen   *net.TCPListener\n\tDone        chan byte\n\tDomainData  chan DomainData\n\tError       chan error\n}\n\nfunc NewTLSServer(s *HTTPSServer) (*TLSServer, error) {\n\tl, err := net.ListenTCP(\"tcp\", s.TLSAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &TLSServer{\n\t\tHTTPSServer: s,\n\t\tCache:       cache.New(cache.NoExpiration, cache.NoExpiration),\n\t\tTCPListen:   l,\n\t\tDone:        make(chan byte),\n\t\tDomainData:  make(chan DomainData),\n\t\tError:       make(chan error),\n\t}, nil\n}\n\nfunc (s *TLSServer) ListenAndServe() error {\n\tdefer close(s.Done)\n\tdefer s.TCPListen.Close()\n\tgo s.Accept()\n\tfor {\n\t\tselect {\n\t\tcase d := <-s.DomainData:\n\t\t\ti, ok := s.Cache.Get(\"domain:\" + d.Domain)\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tc := i.(*net.TCPConn)\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif _, err := c.Write(d.Data); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase err := <-s.Error:\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *TLSServer) Shutdown() {\n\tselect {\n\tcase <-s.Done:\n\t\treturn\n\tcase s.Error <- nil:\n\t}\n}\n\nfunc (s *TLSServer) Accept() {\n\tfor {\n\t\tc1, err := s.TCPListen.AcceptTCP()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.Done:\n\t\t\t\treturn\n\t\t\tcase s.Error <- err:\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif s.HTTPSServer.TLSTimeout != 0 {\n\t\t\tif err := c1.SetKeepAlivePeriod(time.Duration(s.HTTPSServer.TLSTimeout) * time.Second); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif s.HTTPSServer.TLSDeadline != 0 {\n\t\t\tif err := c1.SetDeadline(time.Now().Add(time.Duration(s.HTTPSServer.TLSDeadline) * time.Second)); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\ttc := tls.Server(c1, s.HTTPSServer.TLSConfig)\n\t\tif err := tc.Handshake(); err != nil {\n\t\t\tc1.Close()\n\t\t\tcontinue\n\t\t}\n\t\tcs := tc.ConnectionState()\n\t\tif cs.ServerName == \"\" {\n\t\t\tlog.Println(tc.RemoteAddr().String() + \" no SNI\")\n\t\t\ttc.Close()\n\t\t\tcontinue\n\t\t}\n\t\ts.Cache.Set(tc.RemoteAddr().String(), tc, cache.DefaultExpiration)\n\t\tgo func(tc *tls.Conn) {\n\t\t\tdefer func() {\n\t\t\t\tp := &zoro.TCPPacket{\n\t\t\t\t\tAddress: tc.RemoteAddr().String(),\n\t\t\t\t}\n\t\t\t\tb, err := proto.Marshal(p)\n\t\t\t\tif err != nil {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-s.Done:\n\t\t\t\t\t\treturn\n\t\t\t\t\tcase s.Error <- err:\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbb := make([]byte, 2)\n\t\t\t\tbinary.BigEndian.PutUint16(bb, uint16(len(b)))\n\t\t\t\td := DomainData{\n\t\t\t\t\tDomain: strings.TrimSuffix(cs.ServerName, \".\"+s.HTTPSServer.Domain),\n\t\t\t\t\tData:   append(append([]byte{0x02}, bb...), b...),\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\tcase s.DomainData <- d:\n\t\t\t\t}\n\t\t\t\ts.Cache.Delete(tc.RemoteAddr().String())\n\t\t\t\ttc.Close()\n\t\t\t}()\n\t\t\tvar bf [1024 * 2]byte\n\t\t\tfor {\n\t\t\t\tif s.HTTPSServer.TLSDeadline != 0 {\n\t\t\t\t\tif err := tc.SetDeadline(time.Now().Add(time.Duration(s.HTTPSServer.TLSDeadline) * time.Second)); err != nil {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti, err := tc.Read(bf[:])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tp := &zoro.TCPPacket{\n\t\t\t\t\tAddress: tc.RemoteAddr().String(),\n\t\t\t\t\tData:    bf[0:i],\n\t\t\t\t}\n\t\t\t\tb, err := proto.Marshal(p)\n\t\t\t\tif err != nil {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-s.Done:\n\t\t\t\t\t\treturn\n\t\t\t\t\tcase s.Error <- err:\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbb := make([]byte, 2)\n\t\t\t\tbinary.BigEndian.PutUint16(bb, uint16(len(b)))\n\t\t\t\td := DomainData{\n\t\t\t\t\tDomain: strings.TrimSuffix(cs.ServerName, \".\"+s.HTTPSServer.Domain),\n\t\t\t\t\tData:   append(append([]byte{0x01}, bb...), b...),\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\tcase s.DomainData <- d:\n\t\t\t\t}\n\t\t\t}\n\t\t}(tc)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\t\"cache\"\n)\n\ntype DomainData struct {\n\tConn *tls.Conn\n}\n\ntype HTTPSServer struct {\n\tAddr           string\n\tTLSConfig      *tls.Config\n\tIdleTimeout    time.Duration\n\tHandshakeTimeout time.Duration\n}\n\ntype TLSServer struct {\n\tHTTPSServer  *HTTPSServer\n\tCache        *cache.Cache\n\tTCPListen    *net.TCPListener\n\tDone         chan byte\n\tDomainData   chan DomainData\n\tError        chan error\n}\n\nfunc NewTLSServer(httpsServer *HTTPSServer) (*TLSServer, error) {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", httpsServer.Addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &TLSServer{\n\t\tHTTPSServer: httpsServer,\n\t\tCache:       cache.New(),\n\t\tTCPListen:   listener,\n\t\tDone:        make(chan byte),\n\t\tDomainData:  make(chan DomainData),\n\t\tError:       make(chan error),\n\t}, nil\n}\n\nfunc (s *TLSServer) ListenAndServe() error {\n\tgo s.Accept()\n\n\tfor {\n\t\tselect {\n\t\tcase data := <-s.DomainData:\n\t\t\tgo func(d DomainData) {\n\t\t\t\tdefer d.Conn.Close()\n\t\t\t\t// Process domain data (e.g., serve HTTP over TLS)\n\t\t\t}(data)\n\t\tcase err := <-s.Error:\n\t\t\tlog.Printf(\"Server error: %v\", err)\n\t\tcase <-s.Done:\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\nfunc (s *TLSServer) Shutdown() {\n\tclose(s.Done)\n\ts.TCPListen.Close()\n}\n\nfunc (s *TLSServer) Accept() {\n\tfor {\n\t\tselect {\n\t\tcase <-s.Done:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\ts.TCPListen.SetDeadline(time.Now().Add(s.HTTPSServer.IdleTimeout))\n\t\ttcpConn, err := s.TCPListen.AcceptTCP()\n\t\tif err != nil {\n\t\t\tif netErr, ok := err.(net.Error); ok && netErr.Timeout() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.Error <- err\n\t\t\tcontinue\n\t\t}\n\n\t\ttcpConn.SetDeadline(time.Now().Add(s.HTTPSServer.HandshakeTimeout))\n\t\ttlsConn := tls.Server(tcpConn, s.HTTPSServer.TLSConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\ts.Error <- err\n\t\t\ttlsConn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\ts.DomainData <- DomainData{Conn: tlsConn}\n\t}\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Implement a TCP-based HTTP proxy server in Go that handles both HTTP and HTTPS requests, supports basic authentication, and can optionally pretend to be a web server.\n\nStruct Description: The HTTP struct represents an HTTP proxy server with configurable authentication and behavior settings.\n\nFields:\naddr: string - The address and port on which the server listens\nuser: string - Username for basic authentication (empty if no auth required)\npassword: string - Password for basic authentication (empty if no auth required)\npretend: bool - Whether to pretend to be a web server (return 404 responses)\nproxy: proxy.Proxy - The underlying proxy implementation for forwarding requests\n\nMethods:\nListenAndServe: () -> () - Starts the TCP listener on the configured address and begins accepting connections\nServe: (net.Conn) -> () - Handles an individual client connection (sets keepalive, parses requests)\nservRequest: (*request, *proxy.Conn) -> () - Processes authenticated requests and routes to HTTP/HTTPS handlers\nservHTTPS: (*request, net.Conn) -> () - Handles HTTPS CONNECT requests by establishing tunnel\nservHTTP: (*request, *proxy.Conn) -> () - Handles regular HTTP requests by forwarding and modifying headers",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/textproto\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype HTTP struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n\tproxy    proxy.Proxy\n}\n\nfunc (s *HTTP) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[http] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[http] listening TCP on %s\", s.addr)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[http] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *HTTP) Serve(cc net.Conn) {\n\tif c, ok := cc.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tc := proxy.NewConn(cc)\n\tdefer c.Close()\n\n\treq, err := parseRequest(c.Reader())\n\tif err != nil {\n\t\tlog.F(\"[http] can not parse request from %s, error: %v\", c.RemoteAddr(), err)\n\t\treturn\n\t}\n\n\tif s.pretend {\n\t\tfmt.Fprintf(c, \"%s 404 Not Found\\r\\nServer: nginx\\r\\n\\r\\n404 Not Found\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s, pretend as web server\", c.RemoteAddr().String(), s.Addr())\n\t\treturn\n\t}\n\n\ts.servRequest(req, c)\n}\n\nfunc (s *HTTP) servRequest(req *request, c *proxy.Conn) {\n\tif s.user != \"\" && s.password != \"\" {\n\t\tif user, pass, ok := extractUserPass(req.auth); !ok || user != s.user || pass != s.password {\n\t\t\tio.WriteString(c, \"HTTP/1.1 407 Proxy Authentication Required\\r\\nProxy-Authenticate: Basic\\r\\n\\r\\n\")\n\t\t\tlog.F(\"[http] auth failed from %s, auth info: %s:%s\", c.RemoteAddr(), user, pass)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif req.method == \"CONNECT\" {\n\t\ts.servHTTPS(req, c)\n\t\treturn\n\t}\n\n\ts.servHTTP(req, c)\n}\n\nfunc (s *HTTP) servHTTPS(r *request, c net.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", r.uri)\n\tif err != nil {\n\t\tio.WriteString(c, r.proto+\" 502 ERROR\\r\\n\\r\\n\")\n\t\tlog.F(\"[http] %s <-> %s [c] via %s, error in dial: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tio.WriteString(c, \"HTTP/1.1 200 Connection established\\r\\n\\r\\n\")\n\n\tlog.F(\"[http] %s <-> %s [c] via %s\", c.RemoteAddr(), r.uri, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[http] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}\n\nfunc (s *HTTP) servHTTP(req *request, c *proxy.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", req.target)\n\tif err != nil {\n\t\tfmt.Fprintf(c, \"%s 502 ERROR\\r\\n\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), req.target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tbuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(buf)\n\n\treq.WriteBuf(buf)\n\t_, err = rc.Write(buf.Bytes())\n\tif err != nil {\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tif _, err := c.Reader().Peek(1); err == nil {\n\t\t\tproxy.Copy(rc, c)\n\t\t\trc.SetDeadline(time.Now())\n\t\t\tc.SetDeadline(time.Now())\n\t\t}\n\t}()\n\n\tr := pool.GetBufReader(rc)\n\tdefer pool.PutBufReader(r)\n\n\ttpr := textproto.NewReader(r)\n\tline, err := tpr.ReadLine()\n\tif err != nil {\n\t\treturn\n\t}\n\n\tproto, code, status, ok := parseStartLine(line)\n\tif !ok {\n\t\treturn\n\t}\n\n\theader, err := tpr.ReadMIMEHeader()\n\tif err != nil {\n\t\tlog.F(\"[http] read header error:%s\", err)\n\t\treturn\n\t}\n\n\theader.Set(\"Proxy-Connection\", \"close\")\n\theader.Set(\"Connection\", \"close\")\n\n\tbuf.Reset()\n\twriteStartLine(buf, proto, code, status)\n\twriteHeaders(buf, header)\n\n\tlog.F(\"[http] %s <-> %s via %s\", c.RemoteAddr(), req.target, dialer.Addr())\n\tc.Write(buf.Bytes())\n\n\tproxy.Copy(c, r)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype HTTP struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n\tproxy    Proxy\n}\n\nfunc (s *HTTP) ListenAndServe() {\n\tln, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo s.Serve(conn)\n\t}\n}\n\nfunc (s *HTTP) Serve(conn net.Conn) {\n\ttcpConn, ok := conn.(*net.TCPConn)\n\tif ok {\n\t\ttcpConn.SetKeepAlive(true)\n\t\ttcpConn.SetKeepAlivePeriod(3 * time.Minute)\n\t}\n\tdefer conn.Close()\n\n\treader := bufio.NewReader(conn)\n\treq, err := http.ReadRequest(reader)\n\tif err != nil {\n\t\treturn\n\t}\n\n\ts.servRequest(req, &proxyConn{conn})\n}\n\nfunc (s *HTTP) servRequest(req *http.Request, pc *proxyConn) {\n\tif (s.user != \"\" || s.password != \"\") && !validBasicAuth(req.Header.Get(\"Proxy-Authorization\"), s.user, s.password) {\n\t\tfmt.Fprintf(pc.conn, \"HTTP/1.1 407 Proxy Authentication Required\\r\\nProxy-Authenticate: Basic realm=\\\"proxy\\\"\\r\\n\\r\\n\")\n\t\treturn\n\t}\n\tif s.pretend {\n\t\tfmt.Fprintf(pc.conn, \"HTTP/1.1 404 Not Found\\r\\n\\r\\n\")\n\t\treturn\n\t}\n\tif req.Method == \"CONNECT\" {\n\t\ts.servHTTPS(req, pc.conn)\n\t} else {\n\t\ts.servHTTP(req, pc)\n\t}\n}\n\nfunc validBasicAuth(auth, user, password string) bool {\n\tif !strings.HasPrefix(auth, \"Basic \") {\n\t\treturn false\n\t}\n\tdec, err := base64.StdEncoding.DecodeString(auth[6:])\n\tif err != nil {\n\t\treturn false\n\t}\n\tparts := strings.SplitN(string(dec), \":\", 2)\n\treturn len(parts) == 2 && parts[0] == user && parts[1] == password\n}\n\nfunc (s *HTTP) servHTTPS(req *http.Request, conn net.Conn) {\n\thost := req.URL.Host\n\tif host == \"\" {\n\t\thost = req.Host\n\t}\n\tif host == \"\" {\n\t\tconn.Write([]byte(\"HTTP/1.1 400 Bad Request\\r\\n\\r\\n\"))\n\t\treturn\n\t}\n\n\ttarget, err := net.Dial(\"tcp\", host)\n\tif err != nil {\n\t\tconn.Write([]byte(\"HTTP/1.1 502 Bad Gateway\\r\\n\\r\\n\"))\n\t\treturn\n\t}\n\tdefer target.Close()\n\n\tconn.Write([]byte(\"HTTP/1.1 200 OK\\r\\n\\r\\n\"))\n\n\tgo func() {\n\t\tbuf := make([]byte, 32768)\n\t\tfor {\n\t\t\tn, err := conn.Read(buf)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ttarget.Write(buf[:n])\n\t\t}\n\t\ttarget.Close()\n\t}()\n\tbuf := make([]byte, 32768)\n\tfor {\n\t\tn, err := target.Read(buf)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tconn.Write(buf[:n])\n\t}\n\tconn.Close()\n}\n\nfunc (s *HTTP) servHTTP(req *http.Request, pc *proxyConn) {\n\treq.RequestURI = \"\"\n\treq.Header.Set(\"Via\", \"1.1 \"+s.addr)\n\treq.Header.Del(\"Proxy-Connection\")\n\treq.Header.Del(\"Proxy-Authenticate\")\n\n\tresp, err := s.proxy.RoundTrip(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tresp.Write(pc.conn)\n}\n\ntype proxyConn struct {\n\tconn net.Conn\n}\n\ntype Proxy interface {\n\tRoundTrip(*http.Request) (*http.Response, error)\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Implement an HTTP transport struct for sending tracing spans to a collector using Thrift serialization and HTTP protocol.\n\nStruct Description: HTTPTransport is a struct that handles batching and sending tracing spans to a remote collector via HTTP. It supports basic authentication and custom HTTP client configuration.\n\nFields:\n- logger: jaeger.Logger - Logger for reporting errors and debug information\n- url: string - The collector endpoint URL\n- client: *http.Client - Custom HTTP client for making requests\n- batchSize: int - Maximum number of spans to batch before flushing\n- batch: []*zipkincore.Span - Current batch of spans waiting to be sent\n- httpCredentials: *HTTPBasicAuthCredentials - Optional basic auth credentials\n\nMethods:\n- NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) - Constructor that creates a new HTTPTransport with default values and applies options\n- Append(span *jaeger.Span) (int, error) - Adds a span to the current batch, flushes if batch size is reached\n- Flush() (int, error) - Sends all batched spans to the collector and resets the batch\n- Close() error - Cleanup method (currently no-op)\n- send(spans []*zipkincore.Span) error - Internal method that serializes and sends spans via HTTP POST\n- httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) - Helper method that serializes spans using Thrift protocol\n\nAdditional Struct:\n- HTTPBasicAuthCredentials: struct - Holds basic authentication credentials\n  Fields:\n  - username: string - Basic auth username\n  - password: string - Basic auth password",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/uber/jaeger-client-go\"\n\t\"github.com/uber/jaeger-client-go/log\"\n\t\"github.com/uber/jaeger-client-go/thrift\"\n\t\"github.com/uber/jaeger-client-go/thrift-gen/zipkincore\"\n)\n\ntype HTTPTransport struct {\n\tlogger          jaeger.Logger\n\turl             string\n\tclient          *http.Client\n\tbatchSize       int\n\tbatch           []*zipkincore.Span\n\thttpCredentials *HTTPBasicAuthCredentials\n}\n\ntype HTTPBasicAuthCredentials struct {\n\tusername string\n\tpassword string\n}\n\nfunc NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) {\n\tc := &HTTPTransport{\n\t\tlogger:    log.NullLogger,\n\t\turl:       url,\n\t\tclient:    &http.Client{Timeout: defaultHTTPTimeout},\n\t\tbatchSize: 100,\n\t\tbatch:     []*zipkincore.Span{},\n\t}\n\n\tfor _, option := range options {\n\t\toption(c)\n\t}\n\treturn c, nil\n}\n\nfunc (c *HTTPTransport) Append(span *jaeger.Span) (int, error) {\n\tzSpan := jaeger.BuildZipkinThrift(span)\n\tc.batch = append(c.batch, zSpan)\n\tif len(c.batch) >= c.batchSize {\n\t\treturn c.Flush()\n\t}\n\treturn 0, nil\n}\n\nfunc (c *HTTPTransport) Flush() (int, error) {\n\tcount := len(c.batch)\n\tif count == 0 {\n\t\treturn 0, nil\n\t}\n\terr := c.send(c.batch)\n\tc.batch = c.batch[:0]\n\treturn count, err\n}\n\nfunc (c *HTTPTransport) Close() error {\n\treturn nil\n}\n\nfunc (c *HTTPTransport) send(spans []*zipkincore.Span) error {\n\tbody, err := httpSerialize(spans)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"POST\", c.url, body)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-thrift\")\n\n\tif c.httpCredentials != nil {\n\t\treq.SetBasicAuth(c.httpCredentials.username, c.httpCredentials.password)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBytes, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"could not read response from collector: %s\", err)\n\t}\n\n\tif resp.StatusCode >= http.StatusBadRequest {\n\t\treturn fmt.Errorf(\"error from collector: code=%d body=%q\", resp.StatusCode, string(respBytes))\n\t}\n\n\treturn nil\n}\n\nfunc httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) {\n\tt := thrift.NewTMemoryBuffer()\n\tp := thrift.NewTBinaryProtocolTransport(t)\n\tctx := context.Background()\n\tif err := p.WriteListBegin(ctx, thrift.STRUCT, len(spans)); err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, s := range spans {\n\t\tif err := s.Write(ctx, p); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif err := p.WriteListEnd(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\treturn t.Buffer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/apache/thrift/lib/go/thrift\"\n\t\"github.com/uber/jaeger-client-go\"\n\t\"github.com/openzipkin/zipkin-go-opentracing/thrift/zipkincore\"\n)\n\ntype HTTPBasicAuthCredentials struct {\n\tusername string\n\tpassword string\n}\n\ntype HTTPTransport struct {\n\tlogger           jaeger.Logger\n\turl              string\n\tclient           *http.Client\n\tbatchSize        int\n\tbatch            []*zipkincore.Span\n\thttpCredentials  *HTTPBasicAuthCredentials\n}\n\ntype HTTPOption func(*HTTPTransport)\n\nfunc NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) {\n\ttransport := &HTTPTransport{\n\t\turl:       url,\n\t\tclient:    http.DefaultClient,\n\t\tbatchSize: 100,\n\t\tbatch:     make([]*zipkincore.Span, 0, 100),\n\t}\n\tfor _, option := range options {\n\t\toption(transport)\n\t}\n\treturn transport, nil\n}\n\nfunc (t *HTTPTransport) Append(span *zipkincore.Span) (int, error) {\n\tt.batch = append(t.batch, span)\n\tif len(t.batch) >= t.batchSize {\n\t\treturn t.Flush()\n\t}\n\treturn len(t.batch), nil\n}\n\nfunc (t *HTTPTransport) Flush() (int, error) {\n\tif len(t.batch) == 0 {\n\t\treturn 0, nil\n\t}\n\terr := t.send(t.batch)\n\tsent := len(t.batch)\n\tt.batch = make([]*zipkincore.Span, 0, t.batchSize)\n\treturn sent, err\n}\n\nfunc (t *HTTPTransport) Close() error {\n\treturn nil\n}\n\nfunc (t *HTTPTransport) send(spans []*zipkincore.Span) error {\n\tbody, err := t.httpSerialize(spans)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"POST\", t.url, body)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-thrift\")\n\tif t.httpCredentials != nil {\n\t\treq.SetBasicAuth(t.httpCredentials.username, t.httpCredentials.password)\n\t}\n\tresp, err := t.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"HTTP request failed with status code: %d\", resp.StatusCode)\n\t}\n\treturn nil\n}\n\nfunc (t *HTTPTransport) httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) {\n\tbuf := thrift.NewTMemoryBuffer()\n\tproto := thrift.NewTBinaryProtocolConf(buf, nil)\n\tfor _, span := range spans {\n\t\tif err := span.Write(proto); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn buf, nil\n}\n\nfunc WithClient(client *http.Client) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.client = client\n\t}\n}\n\nfunc WithBatchSize(size int) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.batchSize = size\n\t}\n}\n\nfunc WithLogger(logger jaeger.Logger) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.logger = logger\n\t}\n}\n\nfunc WithBasicAuth(username, password string) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.httpCredentials = &HTTPBasicAuthCredentials{\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both query and write operations with configurable connection settings, authentication, and request parameters.\n\nStruct Description: The Client struct represents an InfluxDB client with configurable connection settings and methods for executing queries and writing data points.\n\nFields:\n\nurl: url.URL - Base URL of the InfluxDB server\nunixSocket: string - Path to Unix domain socket for connection (alternative to TCP)\nusername: string - Username for basic authentication\npassword: string - Password for basic authentication\nhttpClient: *http.Client - Custom HTTP client with configured transport and timeout\nuserAgent: string - User agent string for HTTP requests\nprecision: string - Default precision for timestamps in queries/writes\n\nMethods:\n\nNewClient: [Name](Config) -> (*Client, error) - Creates a new Client instance with the provided configuration, setting up TLS, proxy, and Unix socket options as needed.\n\nQueryContext: [Name](context.Context, Query) -> (*Response, error) - Executes a query against the InfluxDB server with context support, handling both regular and chunked responses.\n\nWrite: [Name](BatchPoints) -> (*Response, error) - Writes a batch of points to the InfluxDB server, handling serialization and request configuration.\n\nThe Client provides methods for both querying and writing data to InfluxDB with support for:\n- Custom HTTP client configuration (timeouts, TLS, proxies)\n- Unix socket connections\n- Basic authentication\n- Chunked query responses\n- Custom precision for timestamps\n- Context-aware operations\n- Error handling for HTTP and InfluxDB-specific errors",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"path\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tunixSocket string\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := new(tls.Config)\n\tif c.TLS != nil {\n\t\ttlsConfig = c.TLS.Clone()\n\t}\n\ttlsConfig.InsecureSkipVerify = c.UnsafeSsl\n\n\ttr := &http.Transport{\n\t\tProxy:           c.Proxy,\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tif c.UnixSocket != \"\" {\n\t\ttr.DisableCompression = true\n\t\ttr.DialContext = func(_ context.Context, _, _ string) (net.Conn, error) {\n\t\t\treturn net.Dial(\"unix\", c.UnixSocket)\n\t\t}\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tunixSocket: c.UnixSocket,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) QueryContext(ctx context.Context, q Query) (*Response, error) {\n\tu := c.url\n\tu.Path = path.Join(u.Path, \"query\")\n\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.RetentionPolicy != \"\" {\n\t\tvalues.Set(\"rp\", q.RetentionPolicy)\n\t}\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif q.NodeID > 0 {\n\t\tvalues.Set(\"node_id\", strconv.Itoa(q.NodeID))\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"POST\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\treq = req.WithContext(ctx)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = path.Join(u.Path, \"write\")\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package influxdb\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\n// Config defines configuration options for creating a Client.\ntype Config struct {\n\tURL              url.URL\n\tUnixSocket       string\n\tUsername         string\n\tPassword         string\n\tHTTPClient       *http.Client\n\tUserAgent        string\n\tPrecision        string\n\tTimeout          time.Duration\n\tInsecureSkipVerify bool\n\tProxy            func(*http.Request) (*url.URL, error)\n}\n\n// Client represents an InfluxDB client.\ntype Client struct {\n\turl          url.URL\n\tunixSocket   string\n\tusername     string\n\tpassword     string\n\thttpClient   *http.Client\n\tuserAgent    string\n\tprecision    string\n}\n\n// NewClient creates a new Client from the provided configuration.\nfunc NewClient(config Config) (*Client, error) {\n\tc := &Client{\n\t\turl:        config.URL,\n\t\tunixSocket: config.UnixSocket,\n\t\tusername:   config.Username,\n\t\tpassword:   config.Password,\n\t\tuserAgent:  config.UserAgent,\n\t\tprecision:  config.Precision,\n\t}\n\n\tif config.HTTPClient != nil {\n\t\tc.httpClient = config.HTTPClient\n\t} else {\n\t\ttransport := &http.Transport{\n\t\t\tProxy: config.Proxy,\n\t\t}\n\n\t\tif config.UnixSocket != \"\" {\n\t\t\ttransport.DialContext = func(ctx context.Context, _, _ string) (net.Conn, error) {\n\t\t\t\treturn (&net.Dialer{}).DialContext(ctx, \"unix\", config.UnixSocket)\n\t\t\t}\n\t\t} else {\n\t\t\tif config.InsecureSkipVerify {\n\t\t\t\ttransport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n\t\t\t}\n\t\t}\n\n\t\tc.httpClient = &http.Client{\n\t\t\tTransport: transport,\n\t\t\tTimeout:   config.Timeout,\n\t\t}\n\t}\n\n\treturn c, nil\n}\n\n// Query represents an InfluxDB query request.\ntype Query struct {\n\tCommand string\n\tDB      string\n\tParams  map[string]string\n}\n\n// Response represents the response from InfluxDB.\ntype Response struct {\n\tResults []json.RawMessage `json:\"results\"`\n\tErr     error             `json:\"-\"`\n}\n\nfunc (r *Response) Error() string {\n\tif r.Err != nil {\n\t\treturn r.Err.Error()\n\t}\n\treturn \"InfluxDB response error\"\n}\n\n// QueryContext executes a query against the InfluxDB server with context support.\nfunc (c *Client) QueryContext(ctx context.Context, q Query) (*Response, error) {\n\tu := c.url\n\tu.Path = \"/query\"\n\n\tparams := u.Query()\n\tparams.Set(\"q\", q.Command)\n\tif q.DB != \"\" {\n\t\tparams.Set(\"db\", q.DB)\n\t}\n\tfor k, v := range q.Params {\n\t\tparams.Set(k, v)\n\t}\n\tu.RawQuery = params.Encode()\n\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(c.username, c.password)\n\tif c.userAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.userAgent)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode/100 != 2 {\n\t\treturn &Response{Err: errors.New(string(body))}, nil\n\t}\n\n\tvar response Response\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &response, nil\n}\n\n// BatchPoints represents a batch of data points to write.\ntype BatchPoints struct {\n\tDatabase        string\n\tRetentionPolicy string\n\tPoints          []Point\n}\n\n// Point represents a single data point.\ntype Point struct {\n\tMeasurement string\n\tTags        map[string]string\n\tFields      map[string]interface{}\n\tTime        time.Time\n}\n\n// Write sends a batch of points to InfluxDB.\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = \"/write\"\n\n\tparams := u.Query()\n\tparams.Set(\"db\", bp.Database)\n\tif bp.RetentionPolicy != \"\" {\n\t\tparams.Set(\"rp\", bp.RetentionPolicy)\n\t}\n\tparams.Set(\"precision\", c.precision)\n\tu.RawQuery = params.Encode()\n\n\tbody := new(bytes.Buffer)\n\tfor i, point := range bp.Points {\n\t\tline, err := c.marshalPoint(point)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif i > 0 {\n\t\t\tbody.WriteByte('\\n')\n\t\t}\n\t\tbody.Write(line)\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(c.username, c.password)\n\treq.Header.Set(\"Content-Type\", \"text/plain; charset=utf-8\")\n\tif c.userAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.userAgent)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbodyBytes, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode/100 != 2 {\n\t\treturn &Response{Err: fmt.Errorf(\"write failed: %s\", bodyBytes)}, nil\n\t}\n\n\treturn &Response{}, nil\n}\n\nfunc (c *Client) marshalPoint(p Point) ([]byte, error) {\n\tvar b bytes.Buffer\n\n\tb.WriteString(escapeKey(p.Measurement, ' '))\n\tif len(p.Tags) > 0 {\n\t\tb.WriteByte(',')\n\t\ti := 0\n\t\tfor k, v := range p.Tags {\n\t\t\tif i > 0 {\n\t\t\t\tb.WriteByte(',')\n\t\t\t}\n\t\t\tb.WriteString(escapeKey(k, ','))\n\t\t\tb.WriteByte('=')\n\t\t\tb.WriteString(escapeKey(v, ','))\n\t\t\ti++\n\t\t}\n\t}\n\n\tb.WriteByte(' ')\n\ti := 0\n\tfor k, v := range p.Fields {\n\t\tif i > 0 {\n\t\t\tb.WriteByte(',')\n\t\t}\n\t\tb.WriteString(escapeKey(k, ' '))\n\t\tb.WriteByte('=')\n\t\tswitch val := v.(type) {\n\t\tcase float64:\n\t\t\tb.WriteString(fmt.Sprintf(\"%g\", val))\n\t\tcase int64:\n\t\t\tb.WriteString(fmt.Sprintf(\"%di\", val))\n\t\tcase string:\n\t\t\tb.WriteByte('\"')\n\t\t\tb.WriteString(strings.ReplaceAll(val, `\"`, `\\\"`))\n\t\t\tb.WriteByte('\"')\n\t\tcase bool:\n\t\t\tb.WriteString(strconv.FormatBool(val))\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unsupported field type: %T\", v)\n\t\t}\n\t\ti++\n\t}\n\n\tif !p.Time.IsZero() {\n\t\tb.WriteByte(' ')\n\t\tvar ts int64\n\t\tswitch c.precision {\n\t\tcase \"ns\":\n\t\t\tts = p.Time.UnixNano()\n\t\tcase \"u\", \"us\":\n\t\t\tts = p.Time.UnixNano() / 1e3\n\t\tcase \"ms\":\n\t\t\tts = p.Time.UnixNano() / 1e6\n\t\tcase \"s\":\n\t\t\tts = p.Time.Unix()\n\t\tcase \"m\":\n\t\t\tts = p.Time.Unix() / 60\n\t\tcase \"h\":\n\t\t\tts = p.Time.Unix() / 3600\n\t\tdefault:\n\t\t\tts = p.Time.UnixNano()\n\t\t}\n\t\tb.WriteString(strconv.FormatInt(ts, 10))\n\t}\n\n\treturn b.Bytes(), nil\n}\n\nfunc escapeKey(s string, separator rune) string {\n\treplaceWith := func(r rune) string {\n\t\tswitch r {\n\t\tcase ' ':\n\t\t\treturn `\\ `\n\t\tcase ',':\n\t\t\treturn `\\,`\n\t\tcase '=':\n\t\t\treturn `\\=`\n\t\tcase '\"':\n\t\t\treturn `\\\"`\n\t\tcase '\\n':\n\t\t\treturn `\\n`\n\t\tdefault:\n\t\t\treturn string(r)\n\t\t}\n\t}\n\n\tvar result strings.Builder\n\tfor _, r := range s {\n\t\tif r == separator || r == '\\\\' || r == ' ' || r == ',' || r == '=' || r == '\"' || r == '\\n' {\n\t\t\tresult.WriteString(replaceWith(r))\n\t\t} else {\n\t\t\tresult.WriteRune(r)\n\t\t}\n\t}\n\treturn result.String()\n}"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, sets IP TOS (Type of Service) and TTL (Time To Live) values for IPv4 connections, and sends a greeting message to the client.\n\nFunction Description: The function sets up a TCP server on port 1024 that accepts incoming connections. For each IPv4 connection, it configures the TOS and TTL values using the ipv4 package. It then sends a greeting message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. The server runs indefinitely, handling each connection in a separate goroutine.\n\nInput: None (The function takes no explicit parameters; it binds to \"0.0.0.0:1024\" by default)\n\nOutput: None (The function doesn't return any value; it runs indefinitely serving connections)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"golang.org/x/net/ipv4\"\n)\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"0.0.0.0:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To4() != nil {\n\t\t\t\tp := ipv4.NewConn(c)\n\t\t\t\tif err := p.SetTOS(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetTTL(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"golang.org/x/net/ipv4\"\n\t\"net\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tln, err := net.Listen(\"tcp\", \"0.0.0.0:1024\")\n\tif err != nil {\n\t\treturn\n\t}\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(conn net.Conn) {\n\t\t\tdefer conn.Close()\n\t\t\tremoteAddr, ok := conn.RemoteAddr().(*net.TCPAddr)\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif remoteAddr.IP.To4() == nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\ttcpConn, ok := conn.(*net.TCPConn)\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\trawConn, err := tcpConn.SyscallConn()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_ = ipv4.SetTOS(rawConn, 0)\n\t\t\t_ = ipv4.SetTTL(rawConn, 64)\n\t\t\tconn.Write([]byte(\"HELLO-R-U-THERE-ACK\"))\n\t\t}(conn)\n\t}\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and graceful shutdown capabilities.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - Interface for handling incoming requests\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nShutdownContext(context.Context) error - Gracefully shuts down the server with context support\nisStarted() bool - Helper method to check server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw, writer: w}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) ShutdownContext(ctx context.Context) error {\n\tsrv.lock.Lock()\n\tif !srv.started {\n\t\tsrv.lock.Unlock()\n\t\treturn &Error{err: \"server not started\"}\n\t}\n\n\tsrv.started = false\n\n\tif srv.Listener != nil {\n\t\tsrv.Listener.Close()\n\t}\n\n\tfor rw := range srv.conns {\n\t\trw.SetReadDeadline(aLongTimeAgo)\n\t}\n\n\tsrv.lock.Unlock()\n\n\tvar ctxErr error\n\tselect {\n\tcase <-srv.shutdown:\n\tcase <-ctx.Done():\n\t\tctxErr = ctx.Err()\n\t}\n\n\treturn ctxErr\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package tcpserver\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tServeTCP(net.Conn)\n}\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tlock         sync.RWMutex\n\tstarted      bool\n\tshutdown     chan struct{}\n\tconns        map[net.Conn]struct{}\n\tlistener     net.Listener\n\twg           sync.WaitGroup\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tif s.started {\n\t\ts.lock.Unlock()\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n\ts.started = true\n\ts.lock.Unlock()\n\n\tln, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.listener = ln\n\n\treturn s.serveTCP(ln)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tdefer s.wg.Wait()\n\n\tgo func() {\n\t\t<-s.shutdown\n\t\tln.Close()\n\t}()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\ts.wg.Add(1)\n\t\tgo func() {\n\t\t\tdefer s.wg.Done()\n\t\t\ts.serveTCPConn(conn)\n\t\t}()\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\ts.lock.Lock()\n\ts.conns[conn] = struct{}{}\n\ts.lock.Unlock()\n\n\tdefer func() {\n\t\tconn.Close()\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t}()\n\n\tidleTimeout := s.IdleTimeout\n\tif idleTimeout == nil {\n\t\tidleTimeout = func() time.Duration { return 0 }\n\t}\n\n\tfor {\n\t\tif s.ReadTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t\t} else if idleTimeout() > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout()))\n\t\t}\n\n\t\tif s.WriteTimeout > 0 {\n\t\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t\t}\n\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn\n\t\tdefault:\n\t\t\ts.Handler.ServeTCP(conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) ShutdownContext(ctx context.Context) error {\n\ts.lock.Lock()\n\tif !s.started {\n\t\ts.lock.Unlock()\n\t\treturn nil\n\t}\n\ts.started = false\n\ts.lock.Unlock()\n\n\tclose(s.shutdown)\n\n\ts.lock.RLock()\n\tconns := make([]net.Conn, 0, len(s.conns))\n\tfor conn := range s.conns {\n\t\tconns = append(conns, conn)\n\t}\n\ts.lock.RUnlock()\n\n\tfor _, conn := range conns {\n\t\tconn.Close()\n\t}\n\n\tif s.listener != nil {\n\t\ts.listener.Close()\n\t}\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\ts.wg.Wait()\n\t\tclose(done)\n\t}()\n\n\tselect {\n\tcase <-done:\n\t\treturn nil\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection timeouts, track active connections, and provide hooks for custom message handling.\n\nStruct Description: The Server struct represents a TCP server that can listen for incoming connections, handle them concurrently, and manage server lifecycle operations. It supports both plain TCP and TLS configurations.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (tcp, tcp4, tcp6, or their TLS variants)\nListener: net.Listener - The active network listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection handler (unused in TCP implementation)\nHandler: Handler - Interface for handling incoming messages\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nMsgAcceptFunc: MsgAcceptFunc - Function to filter acceptable messages\nlock: sync.RWMutex - Mutex for protecting concurrent access to server state\nstarted: bool - Flag indicating if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Map of active connections\nudpPool: sync.Pool - Pool for UDP resources (unused in TCP implementation)\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nisStarted() bool - Helper method to check server running state\ninit() - Initializes server internal structures\ngetReadTimeout() time.Duration - Gets the current read timeout value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool  sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigSecret: srv.TsigSecret, tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package tcpserver\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\n// Handler defines the interface for handling incoming messages\ntype Handler interface {\n\tHandle(ctx context.Context, conn net.Conn, data []byte) error\n}\n\n// MsgAcceptFunc is a filter function for accepting messages\ntype MsgAcceptFunc func([]byte) bool\n\n// Server represents a TCP server with TLS support and connection management\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAccept    MsgAcceptFunc\n\tlock         sync.RWMutex\n\tstarted      bool\n\tshutdown     chan struct{}\n\tconns        map[net.Conn]struct{}\n\tudpPool      sync.Pool\n}\n\n// ListenAndServe starts the server and begins accepting connections\nfunc (s *Server) ListenAndServe() error {\n\tif err := s.init(); err != nil {\n\t\treturn err\n\t}\n\n\tvar err error\n\ts.Listener, err = net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif s.TLSConfig != nil {\n\t\ts.Listener = tls.NewListener(s.Listener, s.TLSConfig)\n\t}\n\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\ts.started = false\n\t\ts.lock.Unlock()\n\t\tclose(s.shutdown)\n\t}()\n\n\treturn s.serveTCP(s.Listener)\n}\n\n// serveTCP handles TCP connections\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\tln.Close()\n\t\twg.Wait()\n\t}()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\tif s.MsgAccept != nil {\n\t\t\t// Peek at the first message\n\t\t\tif tcpConn, ok := conn.(*net.TCPConn); ok {\n\t\t\t\ttcpConn.SetReadDeadline(time.Now().Add(s.getReadTimeout()))\n\t\t\t\tbuf := make([]byte, 512)\n\t\t\t\tn, _ := tcpConn.Read(buf)\n\t\t\t\tif !s.MsgAccept(buf[:n]) {\n\t\t\t\t\tconn.Close()\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\ttcpConn.SetReadDeadline(time.Time{})\n\t\t\t}\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\ts.serveTCPConn(&wg, conn)\n\t\t}()\n\t}\n}\n\n// serveTCPConn handles an individual TCP connection\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\tconn.Close()\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t}()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tfor {\n\t\tconn.SetReadDeadline(time.Now().Add(s.getReadTimeout()))\n\t\tbuf := make([]byte, 4096)\n\t\tn, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\n\t\tif n > 0 {\n\t\t\tif s.Handler != nil {\n\t\t\t\tif err := s.Handler.Handle(ctx, conn, buf[:n]); err != nil {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// isStarted checks if the server is running\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\n// init initializes server internal structures\nfunc (s *Server) init() error {\n\tif s.conns == nil {\n\t\ts.conns = make(map[net.Conn]struct{})\n\t}\n\tif s.shutdown == nil {\n\t\ts.shutdown = make(chan struct{})\n\t}\n\treturn nil\n}\n\n// getReadTimeout gets the current read timeout value\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.ReadTimeout > 0 {\n\t\treturn s.ReadTimeout\n\t}\n\tif s.IdleTimeout != nil {\n\t\treturn s.IdleTimeout()\n\t}\n\treturn 30 * time.Second\n}"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, handles IPv6 traffic with specific traffic class and hop limit settings, and sends an acknowledgment message to connected clients.\n\nFunction Description: The function sets up a TCP server on port 1024 that accepts incoming connections. For IPv6 clients, it configures specific network parameters (traffic class and hop limit) before sending an acknowledgment message. The server runs indefinitely, handling each connection in a separate goroutine.\n\nInput: None (The function takes no explicit parameters; it binds to a fixed port \"[::]:1024\")\n\nOutput: None (The function doesn't return any value; it runs indefinitely serving clients)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"golang.org/x/net/ipv6\"\n)\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"syscall\"\n)\n\nfunc StartServer() {\n\tlistener, err := net.ListenTCP(\"tcp\", &net.TCPAddr{\n\t\tIP:   net.ParseIP(\"::\"),\n\t\tPort: 1024,\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor {\n\t\tconn, err := listener.AcceptTCP()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(c *net.TCPConn) {\n\t\t\tdefer c.Close()\n\t\t\tip := c.RemoteAddr().(*net.TCPAddr).IP\n\t\t\tif ip.To4() == nil {\n\t\t\t\tfd, err := c.File()\n\t\t\t\tif err == nil {\n\t\t\t\t\tdefer fd.Close()\n\t\t\t\t\tsyscall.SetsockoptInt(int(fd.Fd()), syscall.IPPROTO_IPV6, syscall.IPV6_TCLASS, 0x10)\n\t\t\t\t\tsyscall.SetsockoptInt(int(fd.Fd()), syscall.IPPROTO_IPV6, syscall.IPV6_UNICAST_HOPS, 64)\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.Write([]byte(\"Acknowledged\\n\"))\n\t\t}(conn)\n\t}\n}"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Create a gRPC client in Go that communicates with a Unix domain socket server for various deployment operations.\n\nStruct Description: The DeployClient struct represents a gRPC client that connects to a deployment agent server via Unix domain socket and provides methods for different deployment operations.\n\nFields:\nsocketPath: string - The filesystem path to the Unix domain socket for connecting to the gRPC server\n\nMethods:\nNewDeployClient: [Name](socketPath string) -> *DeployClient - Creates a new DeployClient instance with the specified socket path\nDeployGuestFs: [Name](ctx context.Context, in *deployapi.DeployParams, opts ...grpc.CallOption) -> (*deployapi.DeployGuestFsResponse, error) - Deploys guest filesystem\nResizeFs: [Name](ctx context.Context, in *deployapi.ResizeFsParams, opts ...grpc.CallOption) -> (*deployapi.Empty, error) - Resizes filesystem\nFormatFs: [Name](ctx context.Context, in *deployapi.FormatFsParams, opts ...grpc.CallOption) -> (*deployapi.Empty, error) - Formats filesystem\nSaveToGlance: [Name](ctx context.Context, in *deployapi.SaveToGlanceParams, opts ...grpc.CallOption) -> (*deployapi.SaveToGlanceResponse, error) - Saves image to Glance\nProbeImageInfo: [Name](ctx context.Context, in *deployapi.ProbeImageInfoPramas, opts ...grpc.CallOption) -> (*deployapi.ImageInfo, error) - Probes image information\nConnectEsxiDisks: [Name](ctx context.Context, in *deployapi.ConnectEsxiDisksParams, opts ...grpc.CallOption) -> (*deployapi.EsxiDisksConnectionInfo, error) - Connects ESXi disks\nDisconnectEsxiDisks: [Name](ctx context.Context, in *deployapi.EsxiDisksConnectionInfo, opts ...grpc.CallOption) -> (*deployapi.Empty, error) - Disconnects ESXi disks",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdeployapi \"yunion.io/x/onecloud/pkg/hostman/hostdeployer/apis\"\n)\n\ntype DeployClient struct {\n\tsocketPath string\n}\n\nfunc NewDeployClient(socketPath string) *DeployClient {\n\treturn &DeployClient{socketPath}\n}\n\nfunc grcpDialWithUnixSocket(ctx context.Context, socketPath string) (*grpc.ClientConn, error) {\n\treturn grpc.DialContext(ctx, socketPath, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(time.Second*3),\n\t\tgrpc.WithDialer(func(addr string, timeout time.Duration) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(\"unix\", addr, timeout)\n\t\t}),\n\t)\n}\n\nfunc (c *DeployClient) DeployGuestFs(ctx context.Context, in *deployapi.DeployParams, opts ...grpc.CallOption) (*deployapi.DeployGuestFsResponse, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\tret, err := client.DeployGuestFs(ctx, in, opts...)\n\treturn ret, err\n}\n\nfunc (c *DeployClient) ResizeFs(ctx context.Context, in *deployapi.ResizeFsParams, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.ResizeFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) FormatFs(ctx context.Context, in *deployapi.FormatFsParams, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.FormatFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) SaveToGlance(ctx context.Context, in *deployapi.SaveToGlanceParams, opts ...grpc.CallOption) (*deployapi.SaveToGlanceResponse, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.SaveToGlance(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ProbeImageInfo(ctx context.Context, in *deployapi.ProbeImageInfoPramas, opts ...grpc.CallOption) (*deployapi.ImageInfo, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.ProbeImageInfo(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ConnectEsxiDisks(\n\tctx context.Context, in *deployapi.ConnectEsxiDisksParams, opts ...grpc.CallOption,\n) (*deployapi.EsxiDisksConnectionInfo, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.ConnectEsxiDisks(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) DisconnectEsxiDisks(\n\tctx context.Context, in *deployapi.EsxiDisksConnectionInfo, opts ...grpc.CallOption,\n) (*deployapi.Empty, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.DisconnectEsxiDisks(ctx, in, opts...)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"github.com/example/deployapi\"\n)\n\ntype DeployClient struct {\n\tsocketPath string\n\tconn       *grpc.ClientConn\n\tclient     pb.DeployAgentClient\n}\n\nfunc NewDeployClient(socketPath string) (*DeployClient, error) {\n\tconn, err := grpc.Dial(\"unix://\"+socketPath, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &DeployClient{\n\t\tsocketPath: socketPath,\n\t\tconn:       conn,\n\t\tclient:     pb.NewDeployAgentClient(conn),\n\t}, nil\n}\n\nfunc (c *DeployClient) DeployGuestFs(ctx context.Context, in *pb.DeployParams, opts ...grpc.CallOption) (*pb.DeployGuestFsResponse, error) {\n\treturn c.client.DeployGuestFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ResizeFs(ctx context.Context, in *pb.ResizeFsParams, opts ...grpc.CallOption) (*pb.Empty, error) {\n\treturn c.client.ResizeFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) FormatFs(ctx context.Context, in *pb.FormatFsParams, opts ...grpc.CallOption) (*pb.Empty, error) {\n\treturn c.client.FormatFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) SaveToGlance(ctx context.Context, in *pb.SaveToGlanceParams, opts ...grpc.CallOption) (*pb.SaveToGlanceResponse, error) {\n\treturn c.client.SaveToGlance(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ProbeImageInfo(ctx context.Context, in *pb.ProbeImageInfoPramas, opts ...grpc.CallOption) (*pb.ImageInfo, error) {\n\treturn c.client.ProbeImageInfo(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ConnectEsxiDisks(ctx context.Context, in *pb.ConnectEsxiDisksParams, opts ...grpc.CallOption) (*pb.EsxiDisksConnectionInfo, error) {\n\treturn c.client.ConnectEsxiDisks(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) DisconnectEsxiDisks(ctx context.Context, in *pb.EsxiDisksConnectionInfo, opts ...grpc.CallOption) (*pb.Empty, error) {\n\treturn c.client.DisconnectEsxiDisks(ctx, in, opts...)\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a Go client for interacting with Rancher metadata service, capable of making HTTP requests with custom headers and handling connection testing with exponential backoff.\n\nStruct Description: The Client struct represents a Rancher metadata client that manages HTTP connections to Rancher metadata service endpoints.\n\nFields:\nurl: string - The base URL for Rancher metadata service (default: \"http://rancher-metadata\")\nhttpClient: *http.Client - The HTTP client used for making requests\n\nMethods:\nNewRancherClient: (backendNodes []string) -> (*Client, error) - Creates a new Rancher client instance, optionally using the first backend node if provided, and tests the connection\nmakeMetaDataRequest: (path string) -> ([]byte, error) - Makes a GET request to the specified path with JSON accept header, returns response body\ntestConnection: () -> error - Tests the connection to the metadata service with exponential backoff retry logic (up to 20 seconds)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\turl := \"http://rancher-metadata\"\n\n\tif len(backendNodes) > 0 {\n\t\turl = \"http://\" + backendNodes[0]\n\t}\n\n\tclient := &Client{\n\t\turl:        url,\n\t\thttpClient: &http.Client{},\n\t}\n\n\terr := client.testConnection()\n\treturn client, err\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\treq, _ := http.NewRequest(\"GET\", strings.Join([]string{c.url, path}, \"\"), nil)\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\treturn ioutil.ReadAll(resp.Body)\n}\n\nfunc (c *Client) testConnection() error {\n\tvar err error\n\tmaxTime := 20 * time.Second\n\n\tfor i := 1 * time.Second; i < maxTime; i *= time.Duration(2) {\n\t\tif _, err = c.makeMetaDataRequest(\"/\"); err != nil {\n\t\t\ttime.Sleep(i)\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package rancher\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\tvar url string\n\tif len(backendNodes) > 0 {\n\t\turl = \"http://\" + backendNodes[0]\n\t} else {\n\t\turl = \"http://rancher-metadata\"\n\t}\n\n\tc := &Client{\n\t\turl:        url,\n\t\thttpClient: &http.Client{},\n\t}\n\n\tif err := c.testConnection(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn c, nil\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\tfullURL, err := url.JoinPath(c.url, path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq, err := http.NewRequest(\"GET\", fullURL, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}\n\nfunc (c *Client) testConnection() error {\n\tconst maxWaitTime = 20 * time.Second\n\tstartTime := time.Now()\n\tdelay := 100 * time.Millisecond\n\tvar lastErr error\n\n\tfor {\n\t\tif time.Since(startTime) > maxWaitTime {\n\t\t\tbreak\n\t\t}\n\n\t\treq, err := http.NewRequest(\"GET\", c.url, nil)\n\t\tif err != nil {\n\t\t\tlastErr = err\n\t\t\ttime.Sleep(delay)\n\t\t\tdelay *= 2\n\t\t\tcontinue\n\t\t}\n\n\t\tresp, err := c.httpClient.Do(req)\n\t\tif err == nil {\n\t\t\tresp.Body.Close()\n\t\t\treturn nil\n\t\t}\n\n\t\tlastErr = err\n\t\ttime.Sleep(delay)\n\t\tdelay *= 2\n\t}\n\n\tif lastErr != nil {\n\t\treturn fmt.Errorf(\"failed to connect after %v: %w\", maxWaitTime, lastErr)\n\t}\n\treturn fmt.Errorf(\"failed to connect after %v\", maxWaitTime)\n}"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a function that establishes a secure or insecure gRPC client connection to a server and returns a client instance for making RPC calls.\n\nFunction Description: The function `createGRPCClient` establishes a connection to a gRPC server using the provided server address and security options. It supports both TLS-secured connections (with optional certificate verification) and insecure connections. The function returns a client instance that can be used to make RPC calls to the server.\n\nInput:\n- `serverAddr` (string): The address of the gRPC server in \"host:port\" format\n- `useTLS` (bool): Flag indicating whether to use TLS for the connection\n- `caFile` (string, optional): Path to the CA certificate file for TLS verification (required if useTLS is true)\n- `serverHostOverride` (string, optional): Server name used for TLS hostname verification\n\nOutput:\n- `pb.RouteGuideClient`: A gRPC client instance for making RPC calls\n- `*grpc.ClientConn`: The established gRPC connection (should be closed by the caller when done)\n- `error`: Any error that occurred during connection establishment",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"errors\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"path/to/routeguide\"\n)\n\nfunc createGRPCClient(serverAddr string, useTLS bool, caFile string, serverHostOverride string) (pb.RouteGuideClient, *grpc.ClientConn, error) {\n\tif useTLS && caFile == \"\" {\n\t\treturn nil, nil, errors.New(\"caFile is required when useTLS is true\")\n\t}\n\n\tvar creds credentials.TransportCredentials\n\tvar err error\n\n\tif useTLS {\n\t\tcert, err := os.ReadFile(caFile)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tcertPool := x509.NewCertPool()\n\t\tif !certPool.AppendCertsFromPEM(cert) {\n\t\t\treturn nil, nil, errors.New(\"failed to append CA certificate\")\n\t\t}\n\n\t\ttlsConfig := &tls.Config{RootCAs: certPool}\n\t\tif serverHostOverride != \"\" {\n\t\t\ttlsConfig.ServerName = serverHostOverride\n\t\t}\n\t\tcreds = credentials.NewTLS(tlsConfig)\n\t} else {\n\t\tcreds = insecure.NewCredentials()\n\t}\n\n\tvar opts []grpc.DialOption\n\topts = append(opts, grpc.WithTransportCredentials(creds))\n\n\tif serverHostOverride != \"\" {\n\t\topts = append(opts, grpc.WithAuthority(serverHostOverride))\n\t}\n\n\tconn, err := grpc.Dial(serverAddr, opts...)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tclient := pb.NewRouteGuideClient(conn)\n\treturn client, conn, nil\n}"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, publishes messages, and handles connection cleanup.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, publishes two predefined messages, and ensures proper connection closure. It demonstrates basic gRPC client operations including connection establishment, RPC calls, and resource cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes)\n\nOutput: None (The function publishes messages to the server and logs errors if any occur)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/generated/proto/package\"\n)\n\nfunc MyFunction() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer func() {\n\t\tif err := conn.Close(); err != nil {\n\t\t\tlog.Printf(\"Connection close error: %v\", err)\n\t\t}\n\t}()\n\n\tclient := pb.NewPubSubClient(conn)\n\n\tmsg1 := &pb.PublishRequest{Message: \"Hello from client\"}\n\tmsg2 := &pb.PublishRequest{Message: \"Another test message\"}\n\n\tfor _, req := range []*pb.PublishRequest{msg1, msg2} {\n\t\tif _, err := client.Publish(context.Background(), req); err != nil {\n\t\t\tlog.Printf(\"Publish failed: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a function that connects to a gRPC server, retrieves pod information using the HyperD Public API, and returns the response.\n\nFunction Description: The function establishes an insecure connection to a gRPC server at the specified address, creates a Public API client, sends a PodInfoRequest for a specific pod ID, and returns the pod information response. The connection is automatically closed when the function completes.\n\nInput: \n- server string: The address of the gRPC server (e.g., \"localhost:50051\")\n- podID string: The ID of the pod to query (e.g., \"pod-zpIOTSAjmM\")\n\nOutput:\n- *types.PodInfoResponse: The response containing pod information\n- error: Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/hyperhq/hyperd/types\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure())\n\tif err != nil {\n\t\tfmt.Printf(\"Connect server error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\n\tclient := types.NewPublicAPIClient(conn)\n\trequest := types.PodInfoRequest{\n\t\tPodID: \"pod-zpIOTSAjmM\",\n\t}\n\tresponse, err := client.PodInfo(context.Background(), &request)\n\tif err != nil {\n\t\tfmt.Printf(\"Get PodInfo error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Got response: %v\", response)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc getPodInfo(server string, podID string) (*PodInfoResponse, error) {\n\tconn, err := grpc.NewClient(server, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := NewPublicApiClient(conn)\n\treq := &PodInfoRequest{PodId: podID}\n\treturn client.PodInfo(context.Background(), req)\n}"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a function to send synchronous HTTP requests with custom configurations including headers, authentication, and transport settings.\n\nFunction Description: The function SendWebRequestSync sends an HTTP request with customizable method, headers, body, and authentication. It handles the response, checks for success status codes, and properly manages resources. The function uses a pre-configured HTTP client with custom transport settings for timeout and TLS configuration.\n\nInput:\n- ctx (context.Context): Context for request cancellation and timeouts\n- webhook (*monitor.SendWebhookSync): Pointer to a struct containing request parameters including:\n  - HttpMethod (string): HTTP method (GET, POST, etc.)\n  - Url (string): Target URL\n  - Body (string): Request body content\n  - ContentType (string): Content-Type header value\n  - User (string): Username for basic auth\n  - Password (string): Password for basic auth\n  - HttpHeader (map[string]string): Additional HTTP headers\n\nOutput:\n- error: Returns nil on success (2xx status code), or an error describing the failure (non-2xx status code or transport error)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"golang.org/x/net/context/ctxhttp\"\n\t\"moul.io/http2curl/v2\"\n\n\t\"yunion.io/x/log\"\n\n\t\"yunion.io/x/onecloud/pkg/apis/monitor\"\n)\nvar netTransport = &http.Transport{\n\tTLSClientConfig: &tls.Config{\n\t\tRenegotiation: tls.RenegotiateFreelyAsClient,\n\t},\n\tProxy: http.ProxyFromEnvironment,\n\tDialContext: (&net.Dialer{\n\t\tTimeout: 30 * time.Second,\n\t}).DialContext,\n\tTLSHandshakeTimeout: 5 * time.Second,\n}\nvar netClient = &http.Client{\n\tTimeout:   time.Second * 30,\n\tTransport: netTransport,\n}\nfunc SendWebRequestSync(ctx context.Context, webhook *monitor.SendWebhookSync) error {\n\tif webhook.HttpMethod == \"\" {\n\t\twebhook.HttpMethod = http.MethodPost\n\t}\n\n\trequest, err := http.NewRequest(webhook.HttpMethod, webhook.Url, bytes.NewReader([]byte(webhook.Body)))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif webhook.ContentType == \"\" {\n\t\twebhook.ContentType = \"application/json\"\n\t}\n\n\trequest.Header.Add(\"Content-Type\", webhook.ContentType)\n\trequest.Header.Add(\"User-Agent\", \"OneCloud Monitor\")\n\n\tif webhook.User != \"\" && webhook.Password != \"\" {\n\t\trequest.Header.Add(\"Authorization\", GetBasicAuthHeader(webhook.User, webhook.Password))\n\t}\n\n\tfor k, v := range webhook.HttpHeader {\n\t\trequest.Header.Set(k, v)\n\t}\n\n\tcurlCmd, _ := http2curl.GetCurlCommand(request)\n\tlog.Debugf(\"webhook curl: %s\", curlCmd)\n\n\tresp, err := ctxhttp.Do(ctx, netClient, request)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode/100 == 2 {\n\t\tif _, err := io.Copy(ioutil.Discard, resp.Body); err != nil {\n\t\t\tlog.Errorf(\"Failed to copy resp.Body to ioutil.Discard: %v\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlog.Errorf(\"Webhook failed statuscode: %s, body: %s\", resp.Status, string(body))\n\treturn fmt.Errorf(\"Webhook response status %v\", resp.Status)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"monitor\"\n)\n\nfunc SendWebRequestSync(ctx context.Context, webhook *monitor.SendWebhookSync) error {\n\tbodyReader := strings.NewReader(webhook.Body)\n\treq, err := http.NewRequestWithContext(ctx, webhook.HttpMethod, webhook.Url, bodyReader)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif webhook.ContentType != \"\" {\n\t\treq.Header.Set(\"Content-Type\", webhook.ContentType)\n\t}\n\tfor k, v := range webhook.HttpHeader {\n\t\treq.Header.Set(k, v)\n\t}\n\n\tif webhook.User != \"\" && webhook.Password != \"\" {\n\t\treq.SetBasicAuth(webhook.User, webhook.Password)\n\t}\n\n\ttransport := &http.Transport{\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   10 * time.Second,\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}).DialContext,\n\t\tTLSHandshakeTimeout: 5 * time.Second,\n\t\tTLSClientConfig:     &tls.Config{},\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   30 * time.Second,\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tresponseBody, _ := io.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\"status code: %d, body: %s\", resp.StatusCode, responseBody)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a server, with optional TLS security, and returns a client instance for a specified service.\n\nFunction Description: The function `createGRPCClient` initializes a gRPC client connection to a specified server address. It supports both secure (TLS) and insecure connections based on input parameters. After establishing the connection, it creates and returns a client instance for the RouteGuide service.\n\nInput: \n- `serverAddr` (string): The address of the gRPC server to connect to\n- `useTLS` (bool): Flag indicating whether to use TLS for the connection\n- `caFile` (string): Path to the CA certificate file (required if useTLS is true)\n- `serverHostOverride` (string): Server name used for TLS host verification\n\nOutput:\n- `pb.RouteGuideClient`: The generated gRPC client instance for the RouteGuide service\n- `error`: Any error that occurred during connection establishment",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/examples/data\"\n\tpb \"google.golang.org/grpc/examples/route_guide/routeguide\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tif *caFile == \"\" {\n\t\t\t*caFile = data.Path(\"x509/ca_cert.pem\")\n\t\t}\n\t\tcreds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\tconn, err := grpc.NewClient(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\tgoogle_golang_org_grpc \"google.golang.org/grpc\"\n\tcredentials \"google.golang.org/grpc/credentials\"\n\tinsecure \"google.golang.org/grpc/credentials/insecure\"\n\tpb \"path/to/routeguide\"\n)\n\nfunc createGRPCClient(serverAddr string, useTLS bool, caFile string, serverHostOverride string) (pb.RouteGuideClient, error) {\n\tif useTLS && caFile == \"\" {\n\t\treturn nil, errors.New(\"caFile must be provided when useTLS is true\")\n\t}\n\tvar opts []google_golang_org_grpc.DialOption\n\tif useTLS {\n\t\tcreds, err := credentials.NewClientTLSFromFile(caFile, serverHostOverride)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\topts = append(opts, google_golang_org_grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, google_golang_org_grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\tconn, err := google_golang_org_grpc.Dial(serverAddr, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn pb.NewRouteGuideClient(conn), nil\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Implement a Go struct that interacts with the Pinecone vector database to upsert embeddings and retrieve similar vectors using HTTP requests with custom headers.\n\nStruct Description: The Pinecone struct represents a client for interacting with the Pinecone vector database API. It handles authentication, request construction, and response processing for vector operations.\n\nFields:\nEndpoint: string - The base URL of the Pinecone API endpoint\nApiKey: string - The API key used for authentication with Pinecone\n\nMethods:\nNew: [endpoint string, apiKey string] -> [*Pinecone, error] - Creates a new Pinecone client instance with the given endpoint and API key\n\nUpsertEmbeddings: [embeddings [][]float32, chunks []chunk.Chunk, uuid string] -> [error] - Upserts multiple embeddings into Pinecone in batches, with associated metadata from chunks, under the specified namespace UUID\n\nRetrieve: [questionEmbedding []float32, topK int, uuid string] -> [[]vectordb.QueryMatch, error] - Retrieves the topK most similar vectors to the questionEmbedding from the specified namespace UUID",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/pashpashpash/vault/chunk\"\n\t\"github.com/pashpashpash/vault/vectordb\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint string, apiKey string) (*Pinecone, error) {\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []chunk.Chunk, uuid string) error {\n\turl := p.Endpoint + \"/vectors/upsert\"\n\n\tvectors := make([]PineconeVector, len(embeddings))\n\tfor i, embedding := range embeddings {\n\t\tchunk := chunks[i]\n\t\tvectors[i] = PineconeVector{\n\t\t\tID:     fmt.Sprintf(\"id-%d\", i),\n\t\t\tValues: embedding,\n\t\t\tMetadata: map[string]string{\n\t\t\t\t\"file_name\": chunk.Title,\n\t\t\t\t\"start\":     strconv.Itoa(chunk.Start),\n\t\t\t\t\"end\":       strconv.Itoa(chunk.End),\n\t\t\t\t\"title\":     chunk.Title,\n\t\t\t\t\"text\":      chunk.Text,\n\t\t\t},\n\t\t}\n\t}\n\n\tmaxVectorsPerRequest := 100\n\n\tfor i := 0; i < len(vectors); i += maxVectorsPerRequest {\n\t\tend := i + maxVectorsPerRequest\n\t\tif end > len(vectors) {\n\t\t\tend = len(vectors)\n\t\t}\n\n\t\trequestBody, err := json.Marshal(struct {\n\t\t\tVectors   []PineconeVector `json:\"vectors\"`\n\t\t\tNamespace string           `json:\"namespace\"`\n\t\t}{\n\t\t\tVectors:   vectors[i:end],\n\t\t\tNamespace: uuid,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(requestBody))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\t\treturn errors.New(string(body))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]vectordb.QueryMatch, error) {\n\trequestBody, _ := json.Marshal(PineconeQueryRequest{\n\t\tTopK:            topK,\n\t\tIncludeMetadata: true,\n\t\tNamespace:       uuid,\n\t\tQueries: []PineconeQueryItem{\n\t\t\t{\n\t\t\t\tValues: questionEmbedding,\n\t\t\t},\n\t\t},\n\t})\n\n\tpineconeIndexURL := p.Endpoint + \"/query\"\n\treq, _ := http.NewRequest(\"POST\", pineconeIndexURL, bytes.NewBuffer(requestBody))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tvar pineconeQueryResponse PineconeQueryResponse\n\tjson.Unmarshal(body, &pineconeQueryResponse)\n\n\tif len(pineconeQueryResponse.Results) > 0 {\n\t\treturn pineconeQueryResponse.Results[0].Matches, nil\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package pinecone\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"chunk\"\n\t\"vectordb\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint, apiKey string) (*Pinecone, error) {\n\tif endpoint == \"\" || apiKey == \"\" {\n\t\treturn nil, errors.New(\"endpoint and apiKey are required\")\n\t}\n\tendpoint = strings.TrimSuffix(endpoint, \"/\")\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []chunk.Chunk, uuid string) error {\n\tif len(embeddings) != len(chunks) {\n\t\treturn errors.New(\"embeddings and chunks length mismatch\")\n\t}\n\n\tconst batchSize = 100\n\tfor i := 0; i < len(embeddings); i += batchSize {\n\t\tstart := i\n\t\tend := i + batchSize\n\t\tif end > len(embeddings) {\n\t\t\tend = len(embeddings)\n\t\t}\n\n\t\tvar vectors []Vector\n\t\tfor j := start; j < end; j++ {\n\t\t\temb := embeddings[j]\n\t\t\tch := chunks[j]\n\t\t\tvectors = append(vectors, Vector{\n\t\t\t\tID:     ch.ID,\n\t\t\t\tValues: emb,\n\t\t\t\tMetadata: map[string]interface{}{\n\t\t\t\t\t\"text\": ch.Text,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tbody, err := json.Marshal(&struct {\n\t\t\tVectors []Vector `json:\"vectors\"`\n\t\t}{Vectors: vectors})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\turl := fmt.Sprintf(\"%s/vectors/upsert?namespace=%s\", p.Endpoint, uuid)\n\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(body))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\trespBody, _ := io.ReadAll(resp.Body)\n\t\t\treturn fmt.Errorf(\"upsert failed with status %d: %s\", resp.StatusCode, string(respBody))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]vectordb.QueryMatch, error) {\n\treqBody, err := json.Marshal(&struct {\n\t\tVector          []float32 `json:\"vector\"`\n\t\tTopK            int       `json:\"topK\"`\n\t\tIncludeMetadata bool      `json:\"includeMetadata\"`\n\t}{\n\t\tVector:          questionEmbedding,\n\t\tTopK:            topK,\n\t\tIncludeMetadata: true,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\turl := fmt.Sprintf(\"%s/query?namespace=%s\", p.Endpoint, uuid)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(reqBody))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\trespBody, _ := io.ReadAll(resp.Body)\n\t\treturn nil, fmt.Errorf(\"retrieve failed with status %d: %s\", resp.StatusCode, string(respBody))\n\t}\n\n\tvar pineconeResp struct {\n\t\tMatches []struct {\n\t\t\tID       string             `json:\"id\"`\n\t\t\tScore    float32            `json:\"score\"`\n\t\t\tValues   []float32          `json:\"values\"`\n\t\t\tMetadata map[string]string  `json:\"metadata\"`\n\t\t} `json:\"matches\"`\n\t}\n\n\tif err := json.NewDecoder(resp.Body).Decode(&pineconeResp); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar matches []vectordb.QueryMatch\n\tfor _, m := range pineconeResp.Matches {\n\t\tmatches = append(matches, vectordb.QueryMatch{\n\t\t\tID:       m.ID,\n\t\t\tScore:    m.Score,\n\t\t\tValues:   m.Values,\n\t\t\tMetadata: m.Metadata,\n\t\t})\n\t}\n\n\treturn matches, nil\n}\n\ntype Vector struct {\n\tID       string                 `json:\"id\"`\n\tValues   []float32              `json:\"values\"`\n\tMetadata map[string]interface{} `json:\"metadata,omitempty\"`\n}"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: The task involves creating a gRPC probe client in Go that can establish connections to gRPC servers, perform various probe operations (echo, read, write), and collect metrics about the probe results.\n\nStruct Description: The Probe struct represents a gRPC probe client that manages connections to multiple targets, performs probe operations, and tracks results.\n\nFields:\n\nname: [string] - The name of the probe instance\nsrc: [string] - The source identifier for the probe\nopts: [*options.Options] - Configuration options for the probe\nc: [*configpb.ProbeConf] - gRPC probe-specific configuration\nl: [*logger.Logger] - Logger for recording probe events\ndialOpts: [[]grpc.DialOption] - Options for gRPC dialing\ntargets: [[]endpoint.Endpoint] - List of target endpoints to probe\ncancelFuncs: [map[string]context.CancelFunc] - Map of cancel functions for target operations\ntargetsMu: [sync.Mutex] - Mutex for synchronizing access to targets\nresults: [map[string]*probeRunResult] - Map of probe results by target\n\nMethods:\n\nconnectWithRetry: [func(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn] -> [*grpc.ClientConn] - Establishes a gRPC connection to the target with retry logic, using the specified context, target address, message pattern, and result tracker. Returns the established connection or nil if failed.\n\noneTargetLoop: [func(ctx context.Context, tgt string, index int, result *probeRunResult)] -> [None] - Main probe loop for a single target that continuously performs probe operations (echo/read/write) at regular intervals, using the specified context, target address, target index, and result tracker. Manages connection lifecycle and records metrics.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/google/cloudprober/logger\"\n\t\"github.com/google/cloudprober/metrics\"\n\tconfigpb \"github.com/google/cloudprober/probes/grpc/proto\"\n\t\"github.com/google/cloudprober/probes/options\"\n\t\"github.com/google/cloudprober/probes/probeutils\"\n\t\"github.com/google/cloudprober/targets/endpoint\"\n\n\tgrpcprobepb \"github.com/google/cloudprober/servers/grpc/proto\"\n\tservicepb \"github.com/google/cloudprober/servers/grpc/proto\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\t\"google.golang.org/grpc/credentials/local\"\n\t\"google.golang.org/grpc/peer\"\n)\n\ntype Probe struct {\n\tname     string\n\tsrc      string\n\topts     *options.Options\n\tc        *configpb.ProbeConf\n\tl        *logger.Logger\n\tdialOpts []grpc.DialOption\n\n\ttargets     []endpoint.Endpoint\n\tcancelFuncs map[string]context.CancelFunc\n\ttargetsMu   sync.Mutex\n\n\tresults map[string]*probeRunResult\n}\n\ntype probeRunResult struct {\n\tsync.Mutex\n\ttarget        string\n\ttotal         metrics.Int\n\tsuccess       metrics.Int\n\tlatency       metrics.Value\n\tconnectErrors metrics.Int\n}\n\nfunc (p *Probe) connectWithRetry(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn {\n\tconnectTimeout := p.opts.Timeout\n\tif p.c.GetConnectTimeoutMsec() > 0 {\n\t\tconnectTimeout = time.Duration(p.c.GetConnectTimeoutMsec()) * time.Millisecond\n\t}\n\tvar conn *grpc.ClientConn\n\tvar err error\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Warningf(\"ProbeId(%s): context cancelled in connect loop.\", msgPattern)\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\t\tconnCtx, cancelFunc := context.WithTimeout(ctx, connectTimeout)\n\n\t\tif uriScheme := p.c.GetUriScheme(); uriScheme != \"\" {\n\t\t\ttgt = uriScheme + tgt\n\t\t}\n\t\tconn, err = grpc.DialContext(connCtx, tgt, p.dialOpts...)\n\n\t\tcancelFunc()\n\t\tif err != nil {\n\t\t\tp.l.Warningf(\"ProbeId(%v) connect error: %v\", msgPattern, err)\n\t\t} else {\n\t\t\tp.l.Infof(\"ProbeId(%v) connection established.\", msgPattern)\n\t\t\tbreak\n\t\t}\n\t\tresult.Lock()\n\t\tresult.total.Inc()\n\t\tresult.connectErrors.Inc()\n\t\tresult.Unlock()\n\t}\n\treturn conn\n}\n\nfunc (p *Probe) oneTargetLoop(ctx context.Context, tgt string, index int, result *probeRunResult) {\n\tmsgPattern := fmt.Sprintf(\"%s,%s%s,%03d\", p.src, p.c.GetUriScheme(), tgt, index)\n\n\tconn := p.connectWithRetry(ctx, tgt, msgPattern, result)\n\tif conn == nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := servicepb.NewProberClient(conn)\n\ttimeout := p.opts.Timeout\n\tmethod := p.c.GetMethod()\n\n\tmsgSize := p.c.GetBlobSize()\n\tmsg := make([]byte, msgSize)\n\tprobeutils.PatternPayload(msg, []byte(msgPattern))\n\tticker := time.NewTicker(p.opts.Interval)\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Warningf(\"ProbeId(%s): context cancelled in request loop.\", msgPattern)\n\t\t\tticker.Stop()\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t}\n\n\t\treqCtx, cancelFunc := context.WithTimeout(ctx, timeout)\n\t\tvar success int64\n\t\tvar delta time.Duration\n\t\tstart := time.Now()\n\t\tvar err error\n\t\tvar peer peer.Peer\n\t\topts := []grpc.CallOption{\n\t\t\tgrpc.WaitForReady(true),\n\t\t\tgrpc.Peer(&peer),\n\t\t}\n\t\tswitch method {\n\t\tcase configpb.ProbeConf_ECHO:\n\t\t\treq := &grpcprobepb.EchoMessage{\n\t\t\t\tBlob: []byte(msg),\n\t\t\t}\n\t\t\t_, err = client.Echo(reqCtx, req, opts...)\n\t\tcase configpb.ProbeConf_READ:\n\t\t\treq := &grpcprobepb.BlobReadRequest{\n\t\t\t\tSize: proto.Int32(msgSize),\n\t\t\t}\n\t\t\t_, err = client.BlobRead(reqCtx, req, opts...)\n\t\tcase configpb.ProbeConf_WRITE:\n\t\t\treq := &grpcprobepb.BlobWriteRequest{\n\t\t\t\tBlob: []byte(msg),\n\t\t\t}\n\t\t\t_, err = client.BlobWrite(reqCtx, req, opts...)\n\t\tdefault:\n\t\t\tp.l.Criticalf(\"Method %v not implemented\", method)\n\t\t}\n\t\tcancelFunc()\n\t\tif err != nil {\n\t\t\tpeerAddr := \"unknown\"\n\t\t\tif peer.Addr != nil {\n\t\t\t\tpeerAddr = peer.Addr.String()\n\t\t\t}\n\t\t\tp.l.Warningf(\"ProbeId(%s) request failed: %v. ConnState: %v. Peer: %v\", msgPattern, err, conn.GetState(), peerAddr)\n\t\t} else {\n\t\t\tsuccess = 1\n\t\t\tdelta = time.Since(start)\n\t\t}\n\t\tresult.Lock()\n\t\tresult.total.Inc()\n\t\tresult.success.AddInt64(success)\n\t\tresult.latency.AddFloat64(delta.Seconds() / p.opts.LatencyUnit.Seconds())\n\t\tresult.Unlock()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Probe struct {\n\tname        string\n\tsrc         string\n\topts        *options.Options\n\tc           *configpb.ProbeConf\n\tl           *logger.Logger\n\tdialOpts    []grpc.DialOption\n\ttargets     []endpoint.Endpoint\n\tcancelFuncs map[string]context.CancelFunc\n\ttargetsMu   sync.Mutex\n\tresults     map[string]*probeRunResult\n}\n\nfunc (p *Probe) connectWithRetry(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn {\n\tvar conn *grpc.ClientConn\n\tvar err error\n\n\tmaxRetries := 3\n\tretryDelay := 5 * time.Second\n\n\tfor i := 0; i < maxRetries; i++ {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\n\t\tconn, err = grpc.DialContext(ctx, tgt, p.dialOpts...)\n\t\tif err == nil {\n\t\t\treturn conn\n\t\t}\n\n\t\tp.l.Error(\"Connection retry failed\", \"target\", tgt, \"attempt\", i+1, \"error\", err)\n\t\tresult.retries++\n\n\t\tif i < maxRetries-1 {\n\t\t\ttime.Sleep(retryDelay)\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Probe) oneTargetLoop(ctx context.Context, tgt string, index int, result *probeRunResult) {\n\tticker := time.NewTicker(time.Duration(p.c.IntervalMs) * time.Millisecond)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t}\n\n\t\tconn := p.connectWithRetry(ctx, tgt, \"probe-pattern\", result)\n\t\tif conn == nil {\n\t\t\tp.l.Error(\"Failed to establish connection\", \"target\", tgt)\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, op := range []string{\"echo\", \"read\", \"write\"} {\n\t\t\topCtx, cancel := context.WithTimeout(ctx, 2*time.Second)\n\t\t\tdefer cancel()\n\n\t\t\tswitch op {\n\t\t\tcase \"echo\":\n\t\t\t\t// Simulated echo operation\n\t\t\t\tresult.latency = append(result.latency, 15*time.Millisecond)\n\t\t\t\tresult.successes++\n\t\t\tcase \"read\":\n\t\t\t\t// Simulated read operation\n\t\t\t\tresult.latency = append(result.latency, 10*time.Millisecond)\n\t\t\t\tresult.successes++\n\t\t\tcase \"write\":\n\t\t\t\t// Simulated write operation\n\t\t\t\tresult.latency = append(result.latency, 20*time.Millisecond)\n\t\t\t\tresult.successes++\n\t\t\t}\n\t\t}\n\n\t\tconn.Close()\n\t}\n}"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, subscribes to a specific topic, and continuously receives messages from the subscribed topic until the stream ends or an error occurs.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, and subscribes to a topic specified by the input string. It then enters a loop to receive messages from the subscribed topic, printing each message until the stream is closed or an error occurs. The connection is automatically closed when the function completes.\n\nInput: \n- topic string: The topic to subscribe to (e.g., \"golang:\")\n\nOutput: \n- None (messages are printed to stdout)\n- Errors: Any connection or stream errors will cause the function to terminate and log the error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\tstream, err := client.Subscribe(context.Background(), &pb.String{Value: \"golang:\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"pubsub/proto\"\n)\n\nfunc subscribeToTopic(topic string) {\n\tconn, err := grpc.NewClient(\"localhost:1234\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Printf(\"Failed to connect: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubSubClient(conn)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tstream, err := client.Subscribe(ctx, &pb.TopicRequest{Topic: topic})\n\tif err != nil {\n\t\tlog.Printf(\"Subscribe failed: %v\", err)\n\t\treturn\n\t}\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error receiving message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(msg.Payload)\n\t}\n}"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC server for Google Pub/Sub emulator testing, creates a Pub/Sub client, and properly handles resource cleanup.\n\nFunction Description: The function demonstrates how to set up a testing environment for Google Pub/Sub using the pstest server (in-memory emulator). It creates a gRPC connection to the emulator server, initializes a Pub/Sub client with this connection, and ensures all resources are properly closed when done. This is typically used for local testing and development.\n\nInput: None (The function takes no parameters as it's a self-contained example)\n\nOutput: None (The function doesn't return anything as it's a demonstration, though it creates and manages a Pub/Sub client instance)",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n)\nfunc ExampleNewServer() {\n\tctx := context.Background()\n\tsrv := pstest.NewServer()\n\tdefer srv.Close()\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t}\n\tdefer conn.Close()\n\tclient, err := pubsub.NewClient(ctx, \"project\", option.WithGRPCConn(conn))\n\tif err != nil {\n\t}\n\tdefer client.Close()\n\t_ = client\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"google.golang.org/api/option\"\n)\n\nfunc setupPubSubEmulator() {\n\tsrv := pstest.NewServer()\n\tdefer srv.Close()\n\n\tctx := context.Background()\n\n\tclient, err := pubsub.NewClient(ctx, \"my-project\", option.WithEndpoint(srv.Addr), option.WithoutAuthentication())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create client: %v\", err)\n\t}\n\tdefer client.Close()\n\n\ttopic := client.Topic(\"test-topic\")\n\texists, err := topic.Exists(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"Topic.Exists: %v\", err)\n\t}\n\tif !exists {\n\t\ttopic, err = client.CreateTopic(ctx, \"test-topic\")\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"CreateTopic: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a HelloService server, sends a greeting, and handles the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:1234, creates a client for the HelloService, sends a \"hello\" message, and processes the server's reply. It handles connection errors and RPC call errors appropriately.\n\nInput: None (The server address and message are hardcoded in this example)\n\nOutput: None (The function logs errors and doesn't return any value, though in a real implementation you might want to return the reply or error)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\ths \"ch4.4-1/helloservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := hs.NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &hs.String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc sayHello() {\n\tconn, err := grpc.NewClient(\"localhost:1234\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\treq := &HelloRequest{Message: \"hello\"}\n\treply, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\tlog.Printf(\"RPC failed: %v\", err)\n\t\treturn\n\t}\n\n\tlog.Printf(\"Server response: %s\", reply.GetReply())\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Implement an HTTP probe function that checks the availability and correctness of a remote HTTP service by making a GET request with custom headers and verifying the response.\n\nFunction Description: The function performs an HTTP probe to a specified URL with custom configuration including timeout, headers, and TLS settings. It verifies the response status code and optionally checks for a success flag in the response body. The function logs the probe results and returns a success/failure status.\n\nInput:\n- protocol: string - The protocol to use (http/https)\n- address: string - The target server address\n- path: string - The request path\n- port: int - The target port number\n- headerList: []*types.HTTPHeader - List of custom HTTP headers to include\n- timeout: time.Duration - Request timeout duration\n- responseSuccessFlag: string - Optional string to check in response body for success\n- log: *zap.SugaredLogger - Logger for recording probe results\n\nOutput:\n- string - Probe result status (Success/Failure)\n- error - Error details if probe fails",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/koderover/zadig/v2/pkg/types\"\n\t\"go.uber.org/zap\"\n)\nfunc doHTTPProbe(protocol, address, path string, port int, headerList []*types.HTTPHeader, timeout time.Duration, responseSuccessFlag string, log *zap.SugaredLogger) (string, error) {\n\ttlsConfig := &tls.Config{InsecureSkipVerify: true}\n\ttransport := &http.Transport{\n\t\tTLSClientConfig:   tlsConfig,\n\t\tDisableKeepAlives: true,\n\t\tProxy:             http.ProxyURL(nil),\n\t}\n\tclient := &http.Client{\n\t\tTimeout:       timeout,\n\t\tTransport:     transport,\n\t\tCheckRedirect: redirectChecker(false),\n\t}\n\turl, err := formatURL(protocol, address, path, port)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\theaders := buildHeader(headerList)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\treq.Header = headers\n\treq.Host = headers.Get(\"Host\")\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\n\tif res.StatusCode >= http.StatusOK && res.StatusCode < http.StatusBadRequest {\n\t\tif responseSuccessFlag != \"\" && !strings.Contains(string(body), responseSuccessFlag) {\n\t\t\treturn Failure, fmt.Errorf(\"HTTP probe failed with response success flag: %s\", responseSuccessFlag)\n\t\t}\n\t\tlog.Infof(\"Probe succeeded for %s, Response: %v\", url, *res)\n\t\treturn Success, nil\n\t}\n\tlog.Warnf(\"Probe failed for %s, response body: %v\", url, string(body))\n\treturn Failure, fmt.Errorf(\"HTTP probe failed with statuscode: %d\", res.StatusCode)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"go.uber.org/zap\"\n)\n\nfunc HTTPProbe(protocol, address, path string, port int, headerList []*types.HTTPHeader, timeout time.Duration, responseSuccessFlag string, log *zap.SugaredLogger) (string, error) {\n\turl := fmt.Sprintf(\"%s://%s:%d/%s\", protocol, address, port, path)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to create request: %v\", err)\n\t\treturn \"Failure\", err\n\t}\n\n\tfor _, h := range headerList {\n\t\treq.Header.Set(h.Name, h.Value)\n\t}\n\n\tclient := &http.Client{Timeout: timeout}\n\tresp, err := client.Do(req)\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t}\n\tif err != nil {\n\t\tlog.Errorf(\"HTTP request failed: %v\", err)\n\t\treturn \"Failure\", err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tlog.Errorf(\"Unexpected status code: %d\", resp.StatusCode)\n\t\treturn \"Failure\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tif responseSuccessFlag != \"\" {\n\t\tbody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Failed to read response body: %v\", err)\n\t\t\treturn \"Failure\", err\n\t\t}\n\t\tif !strings.Contains(string(body), responseSuccessFlag) {\n\t\t\tlog.Errorf(\"Response body does not contain success flag: %s\", responseSuccessFlag)\n\t\t\treturn \"Failure\", fmt.Errorf(\"response body does not contain success flag: %s\", responseSuccessFlag)\n\t\t}\n\t}\n\n\tlog.Infof(\"Probe succeeded\")\n\treturn \"Success\", nil\n}"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a function that establishes a gRPC connection to a server, creates a client, and makes a request to retrieve fixture data for a specific event.\n\nFunction Description: The function `TestFixturesReturnsData` tests the gRPC client's ability to connect to a server and retrieve fixture data for a specified event. It establishes a connection, creates a client, sends a request, and handles potential errors. The connection is automatically closed when the function completes.\n\nInput: \n- `t *testing.T`: The testing context for reporting failures and logging.\n- Implicit context with authentication (via `withAuth`).\n\nOutput: \n- None explicitly returned, but the function will fail the test if any step (connection, client creation, or request) encounters an error. The response from the gRPC server is captured in `resp` but not returned.",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\nfunc TestFixturesReturnsData(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Fixture(ctx, &rpc.FixtureRequest{Event: \"customer.created\"})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func TestFixturesReturnsData(t *testing.T) {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewFixtureClient(conn)\n\tctx := withAuth(context.Background())\n\n\treq := &FixtureRequest{EventId: \"test-event-id\"}\n\tresp, err := client.GetFixtureData(ctx, req)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to get fixture data: %v\", err)\n\t}\n\t_ = resp\n}"
  },
  {
    "Task_id": 242,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends a greeting request, and processes the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and returns the server's greeting response. It handles connection errors and request failures appropriately.\n\nInput: \n- address [string]: The network address of the gRPC server (e.g., \"localhost:50051\")\n- name [string]: The name to include in the greeting request (optional, defaults to \"world\")\n\nOutput:\n- [string]: The greeting message received from the server\n- [error]: Any error that occurred during connection or request processing",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"os\"\n\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n)\n\nfunc greet(address, name string) (string, error) {\n\tif name == \"\" {\n\t\tname = \"world\"\n\t}\n\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer func() {\n\t\tif cerr := conn.Close(); cerr != nil {\n\t\t\tlog.Printf(\"Failed to close connection: %v\", cerr)\n\t\t}\n\t}()\n\n\tclient := NewGreeterClient(conn)\n\trequest := &HelloRequest{Name: name}\n\n\tresponse, err := client.SayHello(context.Background(), request)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn response.Message, nil\n}"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC management server for Envoy's xDS (Discovery Service) protocol, supporting dynamic configuration updates and load reporting.\n\nStruct Description: The ManagementServer struct represents a gRPC server that implements Envoy's xDS protocol, including Aggregated Discovery Service (ADS) and optionally Load Reporting Service (LRS). It maintains a snapshot cache of resources and handles gRPC connections.\n\nFields:\n- Address: string - The network address the server is listening on\n- LRSServer: *fakeserver.Server - Optional fake LRS server instance\n- cancel: context.CancelFunc - Function to cancel the server's context\n- xs: v3server.Server - xDS server implementation\n- gs: *grpc.Server - gRPC server instance\n- cache: v3cache.SnapshotCache - Cache for storing configuration snapshots\n- version: int - Current version of the configuration\n- logger: interface{ Logf(format string, args ...any) } - Logger interface for output\n\nMethods:\n- StartManagementServer(*testing.T, ManagementServerOptions) *ManagementServer - Creates and starts a new management server instance. Takes testing context and options, returns initialized server.\n- Update(context.Context, UpdateOptions) error - Updates the server's configuration snapshot with new resources. Takes context and update options, returns error if update fails.\n- Stop() - Stops the server and cleans up resources. No parameters or return values.\n\nThe struct provides dynamic configuration management for Envoy proxies through the xDS protocol, with support for listeners, routes, clusters, and endpoints configuration.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/envoyproxy/go-control-plane/pkg/cache/types\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils/xds/fakeserver\"\n\n\tv3clusterpb \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"\n\tv3endpointpb \"github.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3\"\n\tv3listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"\n\tv3routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3cache \"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"\n\tv3resource \"github.com/envoyproxy/go-control-plane/pkg/resource/v3\"\n\tv3server \"github.com/envoyproxy/go-control-plane/pkg/server/v3\"\n)\n\ntype ManagementServer struct {\n\tAddress   string\n\tLRSServer *fakeserver.Server\n\n\tcancel  context.CancelFunc\n\txs      v3server.Server\n\tgs      *grpc.Server\n\tcache   v3cache.SnapshotCache\n\tversion int\n\n\tlogger interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\twait := !opts.AllowResourceSubset\n\tcache := v3cache.NewSnapshotCache(wait, v3cache.IDHash{}, serverLogger{t})\n\n\tlis := opts.Listener\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to listen on localhost:0: %v\", err)\n\t\t}\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tcallbacks := v3server.CallbackFuncs{\n\t\tStreamOpenFunc:     opts.OnStreamOpen,\n\t\tStreamClosedFunc:   opts.OnStreamClosed,\n\t\tStreamRequestFunc:  opts.OnStreamRequest,\n\t\tStreamResponseFunc: opts.OnStreamResponse,\n\t}\n\n\txs := v3server.NewServer(ctx, cache, callbacks)\n\tgs := grpc.NewServer()\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(gs, xs)\n\n\tmgmtServer := &ManagementServer{\n\t\tAddress: lis.Addr().String(),\n\t\tcancel:  cancel,\n\t\tversion: 0,\n\t\tgs:      gs,\n\t\txs:      xs,\n\t\tcache:   cache,\n\t\tlogger:  t,\n\t}\n\tif opts.SupportLoadReportingService {\n\t\tlrs := fakeserver.NewServer(lis.Addr().String())\n\t\tv3lrsgrpc.RegisterLoadReportingServiceServer(gs, lrs)\n\t\tmgmtServer.LRSServer = lrs\n\t}\n\n\tgo gs.Serve(lis)\n\tt.Cleanup(mgmtServer.Stop)\n\treturn mgmtServer\n}\n\nfunc (s *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\ts.version++\n\n\tresources := map[v3resource.Type][]types.Resource{\n\t\tv3resource.ListenerType: resourceSlice(opts.Listeners),\n\t\tv3resource.RouteType:    resourceSlice(opts.Routes),\n\t\tv3resource.ClusterType:  resourceSlice(opts.Clusters),\n\t\tv3resource.EndpointType: resourceSlice(opts.Endpoints),\n\t}\n\tsnapshot, err := v3cache.NewSnapshot(strconv.Itoa(s.version), resources)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create new snapshot cache: %v\", err)\n\t}\n\tif !opts.SkipValidation {\n\t\tif err := snapshot.Consistent(); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to create new resource snapshot: %v\", err)\n\t\t}\n\t}\n\n\tif err := s.cache.SetSnapshot(ctx, opts.NodeID, snapshot); err != nil {\n\t\treturn fmt.Errorf(\"failed to update resource snapshot in management server: %v\", err)\n\t}\n\treturn nil\n}\n\nfunc (s *ManagementServer) Stop() {\n\tif s.cancel != nil {\n\t\ts.cancel()\n\t}\n\ts.gs.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\t\"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"\n\t\"github.com/envoyproxy/go-control-plane/pkg/server/v3\"\n\t\"github.com/envoyproxy/go-control-plane/test/fakeserver\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ManagementServerOptions struct {\n\tAddress   string\n\tEnableLRS bool\n\tLogger    interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\ntype UpdateOptions struct {\n\tClusters  []interface{}\n\tEndpoints []interface{}\n\tListeners []interface{}\n\tRoutes    []interface{}\n}\n\ntype ManagementServer struct {\n\tAddress   string\n\tLRSServer *fakeserver.Server\n\tcancel    context.CancelFunc\n\txs        v3.Server\n\tgs        *grpc.Server\n\tcache     v3.SnapshotCache\n\tversion   int\n\tlogger    interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer func() {\n\t\tif t == nil {\n\t\t\tcancel()\n\t\t}\n\t}()\n\n\tcache := v3.NewSnapshotCache(false, v3.IDHash{}, nil)\n\txs := v3.NewServer(ctx, cache, nil)\n\tgs := grpc.NewServer()\n\n\tdiscovery.RegisterAggregatedDiscoveryServiceServer(gs, xs)\n\n\tvar lrss *fakeserver.Server\n\tif opts.EnableLRS {\n\t\tlrss = fakeserver.NewServer(ctx, fakeserver.Options{})\n\t\tdiscovery.RegisterLoadReportingServiceServer(gs, lrss)\n\t}\n\n\tlis, err := net.Listen(\"tcp\", opts.Address)\n\tif err != nil {\n\t\tif t != nil {\n\t\t\tt.Fatalf(\"Failed to listen: %v\", err)\n\t\t} else {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\tgo func() {\n\t\tif err := gs.Serve(lis); err != nil {\n\t\t\tif t != nil {\n\t\t\t\tt.Logf(\"gRPC server error: %v\", err)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"gRPC server error: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn &ManagementServer{\n\t\tAddress:   lis.Addr().String(),\n\t\tLRSServer: lrss,\n\t\tcancel:    cancel,\n\t\txs:        xs,\n\t\tgs:        gs,\n\t\tcache:     cache,\n\t\tversion:   0,\n\t\tlogger:    opts.Logger,\n\t}\n}\n\nfunc (ms *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\tsnapshot := v3.NewSnapshot(\n\t\tfmt.Sprintf(\"%d\", ms.version+1),\n\t\topts.Clusters,\n\t\topts.Endpoints,\n\t\topts.Listeners,\n\t\topts.Routes,\n\t\tnil,\n\t\tnil,\n\t)\n\tif err := snapshot.Consistent(); err != nil {\n\t\treturn err\n\t}\n\tms.version++\n\treturn ms.cache.SetSnapshot(ctx, \"node_id\", snapshot)\n}\n\nfunc (ms *ManagementServer) Stop() {\n\tms.cancel()\n\tms.gs.Stop()\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a function that retrieves metadata from a Google Cloud instance using a custom HTTP client with specific headers and returns both the metadata value and its ETag.\n\nFunction Description: The function `getETag` makes an HTTP GET request to the Google Cloud metadata server to fetch instance metadata. It uses a custom HTTP client with timeout configurations and sets required headers (\"Metadata-Flavor\" and \"User-Agent\"). The function handles various response scenarios including errors and not-found statuses, and returns the metadata value along with its ETag if successful.\n\nInput:\n- `client` (*http.Client): A custom HTTP client configured with specific timeout settings\n- `suffix` (string): The metadata path suffix to append to the base metadata URL\n\nOutput:\n- `value` (string): The retrieved metadata value\n- `etag` (string): The ETag header value from the response\n- `err` (error): Any error encountered during the request or processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar (\n\tmetaClient = &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   2 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 2 * time.Second,\n\t\t},\n\t}\n)\n\nfunc getETag(client *http.Client, suffix string) (value, etag string, err error) {\n\thost := os.Getenv(metadataHostEnv)\n\tif host == \"\" {\n\t\thost = metadataIP\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", userAgent)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getETag(client *http.Client, suffix string) (string, string, error) {\n\turl := \"http://metadata.google.internal/computeMetadata/v1/instance/\" + suffix\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", \"Go-http-client\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", fmt.Errorf(\"metadata not found\")\n\t} else if resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbodyBytes, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(bodyBytes), resp.Header.Get(\"ETag\"), nil\n}"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles greeting requests and responses.\n\nStruct Description: The server struct implements the GreeterServer interface generated from the protobuf definition, providing the SayHello method to handle incoming gRPC requests.\n\nFields:\nUnimplementedGreeterServer: pb.UnimplementedGreeterServer - Embedded type to ensure forward compatibility with future gRPC updates\n\nMethods:\nSayHello: [Name](ctx context.Context, in *pb.HelloRequest) -> (*pb.HelloReply, error) - Processes incoming HelloRequest, logs the received name, and returns a HelloReply with a greeting message",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(_ context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\tlog.Printf(\"server listening at %v\", lis.Addr())\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\tpb \"path/to/protobuf\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received name: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a function that sends a multipart/form-data POST request to a specified URL with file upload capabilities and custom headers.\n\nFunction Description: The function performs an HTTP POST request with multipart form data, including file upload functionality. It constructs the request with custom headers, sends it using a custom HTTP client, and returns the response body as a string. The function handles file operations and request/response lifecycle properly with appropriate error handling.\n\nInput:\n- url (string): The target URL for the POST request\n- method (string): HTTP method (typically \"POST\")\n- filePath (string): Path to the file to be uploaded\n- formFields (map[string]string): Key-value pairs for form fields\n- headers (map[string]string): Custom headers to include in the request\n\nOutput:\n- (string): The response body from the server\n- (error): Any error that occurred during the process (nil if successful)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/image/ad/\"\n\tmethod := \"POST\"\n\n\tpayload := &bytes.Buffer{}\n\twriter := multipart.NewWriter(payload)\n\t_ = writer.WriteField(\"advertiser_id\", \"1760312309087432\")\n\t_ = writer.WriteField(\"upload_type\", \"UPLOAD_BY_FILE\")\n\t_ = writer.WriteField(\"image_signature\", \"1faaf9020e0df18fdf0429e0db211f37\")\n\tfile, errFile4 := os.Open(\"/Users/betta/Desktop/\u5e38\u7528/1faaf9020e0df18fdf0429e0db211f37.png\")\n\tdefer file.Close()\n\tpart4,\n\t\terrFile4 := writer.CreateFormFile(\"image_file\", filepath.Base(\"/Users/betta/Desktop/\u5e38\u7528/1faaf9020e0df18fdf0429e0db211f37.png\"))\n\t_, errFile4 = io.Copy(part4, file)\n\tif errFile4 != nil {\n\t\tfmt.Println(errFile4)\n\t\treturn\n\t}\n\t_ = writer.WriteField(\"filename\", \"auto4_huchao.1faaf9020e0df18fdf0429e0db211f37_test\u73af\u5883slicess_\u5361\u901a_P_HC_HC_en_1X1_0s\")\n\terr := writer.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treq.Header.Add(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Add(\"Access-Token\", \"e88f206ab28a97ef494b853982d81739b81a1e37\")\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc sendMultipartRequest(url, method, filePath string, formFields, headers map[string]string) (string, error) {\n\tvar body bytes.Buffer\n\twriter := multipart.NewWriter(&body)\n\n\tfor key, value := range formFields {\n\t\tif err := writer.WriteField(key, value); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t}\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\tpart, err := writer.CreateFormFile(\"file\", filepath.Base(filePath))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif _, err := io.Copy(part, file); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif err := writer.Close(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treq, err := http.NewRequest(method, url, &body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tfor k, v := range headers {\n\t\treq.Header.Set(k, v)\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(respBody), nil\n}"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles DNS queries and watch functionality, supporting TLS encryption and OpenTracing for distributed tracing.\n\nStruct Description: ServergRPC is a gRPC server implementation that processes DNS queries and provides watch capabilities. It manages server lifecycle, handles TLS configuration, and integrates with tracing systems.\n\nFields:\n\nServer: [*Server] - Embedded DNS server instance that handles core DNS functionality\ngrpcServer: [*grpc.Server] - The gRPC server instance\nlistenAddr: [net.Addr] - Network address the server is listening on\ntlsConfig: [*tls.Config] - TLS configuration for secure connections\nwatch: [watch.Watcher] - Watcher instance for handling watch requests\n\nMethods:\n\nNewServergRPC: [func(addr string, group []*Config) (*ServergRPC, error)] -> Creates a new ServergRPC instance with the given address and configuration group\nServe: [func(l net.Listener) error] -> Starts the gRPC server on the provided listener\nQuery: [func(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error)] -> Handles incoming DNS query requests\nWatch: [func(stream pb.DnsService_WatchServer) error] -> Handles watch stream requests\nStop: [func() error] -> Gracefully stops the server and watcher\nShutdown: [func() error] -> Immediately stops the server without waiting for connections to close",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/coredns/coredns/pb\"\n\t\"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\"\n\t\"github.com/miekg/dns\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/peer\"\n)\n\ntype ServergRPC struct {\n\t*Server\n\tgrpcServer *grpc.Server\n\tlistenAddr net.Addr\n\ttlsConfig  *tls.Config\n\twatch      watch.Watcher\n}\n\nfunc NewServergRPC(addr string, group []*Config) (*ServergRPC, error) {\n\ts, err := NewServer(addr, group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar tlsConfig *tls.Config\n\tfor _, conf := range s.zones {\n\t\ttlsConfig = conf.TLSConfig\n\t}\n\treturn &ServergRPC{Server: s, tlsConfig: tlsConfig, watch: watch.NewWatcher(watchables(s.zones))}, nil\n}\n\nfunc (s *ServergRPC) Serve(l net.Listener) error {\n\ts.m.Lock()\n\ts.listenAddr = l.Addr()\n\ts.m.Unlock()\n\n\tif s.Tracer() != nil {\n\t\tonlyIfParent := func(parentSpanCtx opentracing.SpanContext, method string, req, resp interface{}) bool {\n\t\t\treturn parentSpanCtx != nil\n\t\t}\n\t\tintercept := otgrpc.OpenTracingServerInterceptor(s.Tracer(), otgrpc.IncludingSpans(onlyIfParent))\n\t\ts.grpcServer = grpc.NewServer(grpc.UnaryInterceptor(intercept))\n\t} else {\n\t\ts.grpcServer = grpc.NewServer()\n\t}\n\n\tpb.RegisterDnsServiceServer(s.grpcServer, s)\n\n\tif s.tlsConfig != nil {\n\t\tl = tls.NewListener(l, s.tlsConfig)\n\t}\n\treturn s.grpcServer.Serve(l)\n}\n\nfunc (s *ServergRPC) Query(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error) {\n\tmsg := new(dns.Msg)\n\terr := msg.Unpack(in.Msg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tp, ok := peer.FromContext(ctx)\n\tif !ok {\n\t\treturn nil, errors.New(\"no peer in gRPC context\")\n\t}\n\n\ta, ok := p.Addr.(*net.TCPAddr)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no TCP peer in gRPC context: %v\", p.Addr)\n\t}\n\n\tw := &gRPCresponse{localAddr: s.listenAddr, remoteAddr: a, Msg: msg}\n\n\ts.ServeDNS(ctx, w, msg)\n\n\tpacked, err := w.Msg.Pack()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &pb.DnsPacket{Msg: packed}, nil\n}\n\nfunc (s *ServergRPC) Watch(stream pb.DnsService_WatchServer) error {\n\treturn s.watch.Watch(stream)\n}\n\nfunc (s *ServergRPC) Stop() (err error) {\n\ts.m.Lock()\n\tdefer s.m.Unlock()\n\tif s.watch != nil {\n\t\ts.watch.Stop()\n\t}\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.GracefulStop()\n\t}\n\treturn\n}\n\nfunc (s *ServergRPC) Shutdown() error {\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.Stop()\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"path/to/your/proto\"\n\twatch \"your/watch/package\"\n)\n\ntype ServergRPC struct {\n\tserver     *Server\n\tgrpcServer *grpc.Server\n\tlistenAddr net.Addr\n\ttlsConfig  *tls.Config\n\twatch      watch.Watcher\n}\n\nfunc NewServergRPC(addr string, group []*Config) (*ServergRPC, error) {\n\ttlsConfig, err := loadTLSConfig(group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdnsServer, err := NewServer(group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\twatcher := watch.NewWatcher()\n\tgrpcServer := grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConfig)))\n\n\ts := &ServergRPC{\n\t\tserver:     dnsServer,\n\t\tgrpcServer: grpcServer,\n\t\ttlsConfig:  tlsConfig,\n\t\twatch:      watcher,\n\t}\n\n\tpb.RegisterDnsServiceServer(grpcServer, s)\n\treturn s, nil\n}\n\nfunc (s *ServergRPC) Serve(l net.Listener) error {\n\ts.listenAddr = l.Addr()\n\treturn s.grpcServer.Serve(l)\n}\n\nfunc (s *ServergRPC) Query(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error) {\n\tspan, ctx := opentracing.StartSpanFromContext(ctx, \"Query\")\n\tdefer span.Finish()\n\n\tresponse, err := s.server.ProcessDNS(in.Packet)\n\tif err != nil {\n\t\tspan.SetTag(\"error\", true)\n\t\tspan.LogKV(\"event\", \"query_error\", \"message\", err.Error())\n\t\treturn nil, err\n\t}\n\n\treturn &pb.DnsPacket{Packet: response}, nil\n}\n\nfunc (s *ServergRPC) Watch(stream pb.DnsService_WatchServer) error {\n\tspan, _ := opentracing.StartSpanFromContext(stream.Context(), \"Watch\")\n\tdefer span.Finish()\n\n\twatchChan := s.watch.Subscribe()\n\tdefer s.watch.Unsubscribe(watchChan)\n\n\tfor {\n\t\tselect {\n\t\tcase event := <-watchChan:\n\t\t\tif err := stream.Send(event); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase <-stream.Context().Done():\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\nfunc (s *ServergRPC) Stop() error {\n\ts.grpcServer.GracefulStop()\n\ts.watch.Close()\n\treturn nil\n}\n\nfunc (s *ServergRPC) Shutdown() error {\n\ts.grpcServer.Stop()\n\ts.watch.Close()\n\treturn nil\n}\n\nfunc loadTLSConfig(configs []*Config) (*tls.Config, error) {\n\tvar certs []tls.Certificate\n\tfor _, c := range configs {\n\t\tcert, err := tls.LoadX509KeyPair(c.CertFile, c.KeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcerts = append(certs, cert)\n\t}\n\treturn &tls.Config{Certificates: certs}, nil\n}\n\ntype Config struct {\n\tCertFile string\n\tKeyFile  string\n}\n\ntype Server struct{}\n\nfunc NewServer(group []*Config) (*Server, error) {\n\treturn &Server{}, nil\n}\n\nfunc (s *Server) ProcessDNS(packet []byte) ([]byte, error) {\n\treturn process(packet)\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a function to push metrics to a Prometheus push gateway using HTTP requests with custom headers and client configuration.\n\nFunction Description: The function `doPush` sends collected metrics to a Prometheus push gateway. It validates the job name and grouping labels, constructs the appropriate URL, encodes the metrics in Protocol Buffer format, and makes an HTTP request with custom headers. It handles errors during the process and checks the response status.\n\nInput:\n- `job` (string): The job name to associate with the pushed metrics\n- `grouping` (map[string]string): Key-value pairs for metric grouping\n- `pushURL` (string): The base URL of the Prometheus push gateway\n- `g` (prometheus.Gatherer): Interface to gather metrics\n- `method` (string): HTTP method to use for the request (e.g., \"POST\")\n\nOutput:\n- `error`: Returns nil on success, or an error describing any failure during the push operation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/common/expfmt\"\n\t\"github.com/prometheus/common/model\"\n)\n\nconst contentTypeHeader = \"Content-Type\"\n\nvar (\n\tclient         = &http.Client{}\n\tdefaultTimeout = time.Second * 15\n)\n\nfunc doPush(job string, grouping map[string]string, pushURL string, g prometheus.Gatherer, method string) error {\n\tif !strings.Contains(pushURL, \"://\") {\n\t\tpushURL = \"http://\" + pushURL\n\t}\n\tif strings.HasSuffix(pushURL, \"/\") {\n\t\tpushURL = pushURL[:len(pushURL)-1]\n\t}\n\n\tif strings.Contains(job, \"/\") {\n\t\treturn fmt.Errorf(\"job contains '/': %s\", job)\n\t}\n\turlComponents := []string{url.QueryEscape(job)}\n\tfor ln, lv := range grouping {\n\t\tif !model.LabelName(ln).IsValid() {\n\t\t\treturn fmt.Errorf(\"grouping label has invalid name: %s\", ln)\n\t\t}\n\t\tif strings.Contains(lv, \"/\") {\n\t\t\treturn fmt.Errorf(\"value of grouping label %s contains '/': %s\", ln, lv)\n\t\t}\n\t\turlComponents = append(urlComponents, ln, lv)\n\t}\n\tpushURL = fmt.Sprintf(\"%s/metrics/job/%s\", pushURL, strings.Join(urlComponents, \"/\"))\n\n\tmfs, err := g.Gather()\n\tif err != nil {\n\t\treturn err\n\t}\n\tbuf := &bytes.Buffer{}\n\tenc := expfmt.NewEncoder(buf, expfmt.FmtProtoDelim)\n\tfor _, mf := range mfs {\n\t\tfor _, m := range mf.GetMetric() {\n\t\t\tfor _, l := range m.GetLabel() {\n\t\t\t\tif l.GetName() == \"job\" {\n\t\t\t\t\treturn fmt.Errorf(\"pushed metric %s (%s) already contains a job label\", mf.GetName(), m)\n\t\t\t\t}\n\t\t\t\tif _, ok := grouping[l.GetName()]; ok {\n\t\t\t\t\treturn fmt.Errorf(\n\t\t\t\t\t\t\"pushed metric %s (%s) already contains grouping label %s\",\n\t\t\t\t\t\tmf.GetName(), m, l.GetName(),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tenc.Encode(mf)\n\t}\n\treq, err := http.NewRequest(method, pushURL, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(contentTypeHeader, string(expfmt.FmtProtoDelim))\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 202 {\n\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\"unexpected status code %d while pushing to %s: %s\", resp.StatusCode, pushURL, body)\n\t}\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"regexp\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\n\nfunc doPush(job string, grouping map[string]string, pushURL string, g prometheus.Gatherer, method string) error {\n\tvalidNameRegex := regexp.MustCompile(`^[a-zA-Z_][a-zA-Z0-9_]*$`)\n\tif !validNameRegex.MatchString(job) {\n\t\treturn fmt.Errorf(\"invalid job name: %s\", job)\n\t}\n\n\tfor k := range grouping {\n\t\tif k == \"job\" {\n\t\t\treturn fmt.Errorf(\"grouping key cannot be 'job'\")\n\t\t}\n\t\tif !validNameRegex.MatchString(k) {\n\t\t\treturn fmt.Errorf(\"invalid grouping key: %s\", k)\n\t\t}\n\t}\n\n\tvar groupingPath string\n\tfor k, v := range grouping {\n\t\tgroupingPath += \"/\" + url.PathEscape(k) + \"/\" + url.PathEscape(v)\n\t}\n\n\tfullURL := pushURL + \"/metrics/job/\" + url.PathEscape(job) + groupingPath\n\n\tmfs, err := g.Gather()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error gathering metrics: %w\", err)\n\t}\n\n\tvar buf bytes.Buffer\n\tfor _, mf := range mfs {\n\t\tdata, err := proto.Marshal(mf)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error marshaling metric family: %w\", err)\n\t\t}\n\t\tif _, err := buf.Write(data); err != nil {\n\t\t\treturn fmt.Errorf(\"error writing marshaled data: %w\", err)\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, fullURL, &buf)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating HTTP request: %w\", err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/octet-stream\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"HTTP request error: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\"unexpected HTTP status %d: %s\", resp.StatusCode, body)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both unary and bidirectional streaming RPCs for an echo service, with TLS security.\n\nStruct Description: The server struct implements the EchoServer interface generated from the protobuf definition, providing echo functionality for both unary and streaming RPCs.\n\nFields:\n- UnimplementedEchoServer: pb.UnimplementedEchoServer - Embedded type to ensure forward compatibility\n\nMethods:\n- UnaryEcho: (context.Context, *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls by echoing back the received message\n- BidirectionalStreamingEcho: (pb.Echo_BidirectionalStreamingEchoServer) -> error - Handles bidirectional streaming by continuously receiving messages and echoing them back until the stream ends\n\nInput: None (The struct itself doesn't take input parameters, but its methods do as described above)\n\nOutput: None (The struct doesn't return anything directly, but its methods return values as described above)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/examples/data\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(_ context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tfmt.Printf(\"unary echoing message %q\\n\", in.Message)\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc (s *server) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfor {\n\t\tin, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfmt.Printf(\"server: error receiving from stream: %v\\n\", err)\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"bidi echoing message %q\\n\", in.Message)\n\t\tstream.Send(&pb.EchoResponse{Message: in.Message})\n\t}\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"the port to serve on\")\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tcreds, err := credentials.NewServerTLSFromFile(data.Path(\"x509/server_cert.pem\"), data.Path(\"x509/server_key.pem\"))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create credentials: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"io\"\n\n\tpb \"echo/proto\"\n)\n\ntype EchoServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (e *EchoServer) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc (e *EchoServer) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := stream.Send(&pb.EchoResponse{Message: req.Message}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, supports optional transport security, and can register services with reflection capabilities.\n\nFunction Description: The main function sets up and starts a gRPC server with configurable options including transport security (TLS) and logging interceptors. It registers a test service and optionally enables server reflection. The server listens on either a Unix socket or TCP port based on configuration.\n\nInput:\n- *cert (string pointer): Path to certificate file for TLS (optional)\n- *cacert (string pointer): Path to CA certificate file (optional)\n- *key (string pointer): Path to private key file (optional)\n- *requirecert (bool pointer): Whether client certificates are required (optional)\n- *quiet (bool pointer): Whether to disable logging interceptors (optional)\n- *port (int pointer): TCP port to listen on (default used if not provided)\n- getUnixSocket (func() string): Function that returns Unix socket path if available (optional)\n\nOutput:\n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are printed to stderr and the program exits with code 1 on failure\n- Success message with listening address is printed to stdout",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\n\t\"github.com/fullstorydev/grpcurl\"\n\tgrpcurl_testing \"github.com/fullstorydev/grpcurl/internal/testing\"\n)\nfunc main() {\n\tvar opts []grpc.ServerOption\n\tif *cert != \"\" {\n\t\tcreds, err := grpcurl.ServerTransportCredentials(*cacert, *cert, *key, *requirecert)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to configure transport credentials: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tif !*quiet {\n\t\topts = append(opts, grpc.UnaryInterceptor(unaryLogger), grpc.StreamInterceptor(streamLogger))\n\t}\n\n\tvar network, addr string\n\tif getUnixSocket != nil && getUnixSocket() != \"\" {\n\t\tnetwork = \"unix\"\n\t\taddr = getUnixSocket()\n\t} else {\n\t\tnetwork = \"tcp\"\n\t\taddr = fmt.Sprintf(\"127.0.0.1:%d\", *port)\n\t}\n\tl, err := net.Listen(network, addr)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to listen on socket: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"Listening on %v\\n\", l.Addr())\n\n\tsvr := grpc.NewServer(opts...)\n\n\tgrpcurl_testing.RegisterTestServiceServer(svr, grpcurl_testing.TestServer{})\n\tif !*noreflect {\n\t\treflection.Register(svr)\n\t}\n\n\tif err := svr.Serve(l); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GRPC server returned error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/reflection\"\n\tpb \"example.com/testservice\"\n)\n\nvar (\n\tcert        = flag.String(\"cert\", \"\", \"Certificate file for TLS\")\n\tcacert      = flag.String(\"cacert\", \"\", \"CA certificate file\")\n\tkey         = flag.String(\"key\", \"\", \"Private key file\")\n\trequirecert = flag.Bool(\"requirecert\", false, \"Require client certificates\")\n\tquiet       = flag.Bool(\"quiet\", false, \"Disable logging interceptors\")\n\tport        = flag.Int(\"port\", 50051, \"TCP port to listen on\")\n\tunixsocket  = flag.String(\"unixsocket\", \"\", \"Unix socket path to listen on\")\n)\n\nfunc getUnixSocket() string {\n\treturn *unixsocket\n}\n\ntype testServer struct{}\n\nfunc (s *testServer) TestMethod(ctx context.Context, req *pb.TestRequest) (*pb.TestResponse, error) {\n\treturn &pb.TestResponse{Message: \"Success\"}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tvar opts []grpc.ServerOption\n\n\tif (*cert != \"\" || *key != \"\") && (*cert == \"\" || *key == \"\") {\n\t\tlog.SetOutput(os.Stderr)\n\t\tlog.Println(\"Both --cert and --key must be provided for TLS\")\n\t\tos.Exit(1)\n\t}\n\n\tif *cert != \"\" && *key != \"\" {\n\t\tserverCert, err := tls.LoadX509KeyPair(*cert, *key)\n\t\tif err != nil {\n\t\t\tlog.SetOutput(os.Stderr)\n\t\t\tlog.Fatalf(\"Failed to load server TLS certificate: %v\\n\", err)\n\t\t}\n\n\t\ttlsConfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{serverCert},\n\t\t}\n\n\t\tif *cacert != \"\" {\n\t\t\tcaCert, err := ioutil.ReadFile(*cacert)\n\t\t\tif err != nil {\n\t\t\t\tlog.SetOutput(os.Stderr)\n\t\t\t\tlog.Fatalf(\"Failed to read CA certificate: %v\\n\", err)\n\t\t\t}\n\t\t\tcaPool := x509.NewCertPool()\n\t\t\tcaPool.AppendCertsFromPEM(caCert)\n\t\t\ttlsConfig.ClientCAs = caPool\n\t\t\tif *requirecert {\n\t\t\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t\t\t} else {\n\t\t\t\ttlsConfig.ClientAuth = tls.VerifyClientCertIfGiven\n\t\t\t}\n\t\t}\n\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(tlsConfig)))\n\t}\n\n\tif !*quiet {\n\t\topts = append(opts,\n\t\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\t\tlog.Printf(\"Received unary RPC: %s\", info.FullMethod)\n\t\t\t\treturn handler(ctx, req)\n\t\t\t}),\n\t\t\tgrpc.StreamInterceptor(func(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\t\tlog.Printf(\"Received stream RPC: %s\", info.FullMethod)\n\t\t\t\treturn handler(srv, ss)\n\t\t\t}),\n\t\t)\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\tpb.RegisterTestServiceServer(server, &testServer{})\n\treflection.Register(server)\n\n\tvar lis net.Listener\n\tvar err error\n\tsocketPath := getUnixSocket()\n\tif socketPath != \"\" {\n\t\tif _, err := os.Stat(socketPath); err == nil {\n\t\t\tos.Remove(socketPath)\n\t\t}\n\t\tlis, err = net.Listen(\"unix\", socketPath)\n\t\tif err != nil {\n\t\t\tlog.SetOutput(os.Stderr)\n\t\t\tlog.Fatalf(\"Failed to create Unix socket listener: %v\\n\", err)\n\t\t}\n\t\tfmt.Printf(\"Server listening on %s\\n\", socketPath)\n\t} else {\n\t\tlis, err = net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\t\tif err != nil {\n\t\t\tlog.SetOutput(os.Stderr)\n\t\t\tlog.Fatalf(\"Failed to listen on TCP port: %v\\n\", err)\n\t\t}\n\t\tfmt.Printf(\"Server listening on port %d\\n\", *port)\n\t}\n\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.SetOutput(os.Stderr)\n\t\tlog.Fatalf(\"Failed to serve: %v\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Create a gRPC service struct in Go that manages a gRPC server for key management operations, including starting the server, graceful shutdown, and immediate termination capabilities.\n\nStruct Description: GRPCService represents a gRPC server wrapper that handles Unix domain socket communication for key management services. It manages server lifecycle and configuration.\n\nFields:\naddr: string - The Unix domain socket address the server will listen on\ntimeout: time.Duration - Connection timeout duration for gRPC connections\nserver: *grpc.Server - The underlying gRPC server instance\nkmsService: Service - The key management service implementation to be registered with gRPC\n\nMethods:\nNewGRPCService(address string, timeout time.Duration, kmsService Service) -> *GRPCService - Constructor that initializes a new GRPCService instance with the given address, timeout and service implementation\nListenAndServe() -> error - Starts the gRPC server on the configured Unix domain socket address and begins serving requests\nShutdown() -> void - Gracefully stops the gRPC server, allowing existing connections to complete\nClose() -> void - Immediately stops the gRPC server without waiting for connections to complete",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tkmsapi \"k8s.io/kms/apis/v2\"\n)\n\ntype GRPCService struct {\n\taddr    string\n\ttimeout time.Duration\n\tserver  *grpc.Server\n\n\tkmsService Service\n}\n\nfunc NewGRPCService(\n\taddress string,\n\ttimeout time.Duration,\n\tkmsService Service,\n) *GRPCService {\n\treturn &GRPCService{\n\t\taddr:       address,\n\t\ttimeout:    timeout,\n\t\tkmsService: kmsService,\n\t}\n}\n\nfunc (s *GRPCService) ListenAndServe() error {\n\tln, err := net.Listen(\"unix\", s.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ln.Close()\n\n\tgs := grpc.NewServer(\n\t\tgrpc.ConnectionTimeout(s.timeout),\n\t)\n\ts.server = gs\n\n\tkmsapi.RegisterKeyManagementServiceServer(gs, s)\n\n\treturn gs.Serve(ln)\n}\n\nfunc (s *GRPCService) Shutdown() {\n\tif s.server != nil {\n\t\ts.server.GracefulStop()\n\t}\n}\n\nfunc (s *GRPCService) Close() {\n\tif s.server != nil {\n\t\ts.server.Stop()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"google.golang.org/grpc\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Service interface{}\n\ntype GRPCService struct {\n\taddr       string\n\ttimeout    time.Duration\n\tserver     *grpc.Server\n\tkmsService Service\n}\n\nfunc NewGRPCService(address string, timeout time.Duration, kmsService Service) *GRPCService {\n\treturn &GRPCService{\n\t\taddr:       address,\n\t\ttimeout:    timeout,\n\t\tserver:     grpc.NewServer(grpc.ConnectionTimeout(timeout)),\n\t\tkmsService: kmsService,\n\t}\n}\n\nfunc (s *GRPCService) ListenAndServe() error {\n\tlis, err := net.Listen(\"unix\", s.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Replace the following line with actual service registration, e.g.:\n\t// pb.RegisterKMSServiceServer(s.server, s.kmsService)\n\treturn s.server.Serve(lis)\n}\n\nfunc (s *GRPCService) Shutdown() {\n\ts.server.GracefulStop()\n}\n\nfunc (s *GRPCService) Close() {\n\ts.server.Stop()\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a comprehensive HTTP client in Go that can handle various API requests with custom configurations, including base URLs, request headers, and rate limiting. The client should support multiple API services and provide methods for creating and executing HTTP requests.\n\nStruct Description: The Client struct represents an HTTP client with configuration for making API requests. It includes base URLs, user agent, rate limiting capabilities, and various service clients for different API endpoints.\n\nFields:\n\nclientMu: sync.Mutex - Mutex for thread-safe access to the HTTP client\nclient: *http.Client - The underlying HTTP client used for requests\nBaseURL: *url.URL - Base URL for API requests\nUploadURL: *url.URL - Base URL for upload requests\nUserAgent: string - User agent string for requests\nrateMu: sync.Mutex - Mutex for thread-safe rate limiting\nrateLimits: [categories]Rate - Rate limit tracking for different categories\ncommon: service - Shared service implementation\n\nMethods:\n\nNewClient: (*http.Client) -> *Client - Creates a new Client instance with optional custom HTTP client\nNewRequest: (method string, urlStr string, body interface{}) -> (*http.Request, error) - Creates a new HTTP request with proper headers and body encoding\nDo: (ctx context.Context, req *http.Request, v interface{}) -> (*Response, error) - Executes an HTTP request with context support and handles response decoding",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tclientMu sync.Mutex\n\tclient   *http.Client\n\n\tBaseURL   *url.URL\n\tUploadURL *url.URL\n\tUserAgent string\n\n\trateMu     sync.Mutex\n\trateLimits [categories]Rate\n\n\tcommon service\n\n\tActions        *ActionsService\n\tActivity       *ActivityService\n\tAdmin          *AdminService\n\tApps           *AppsService\n\tAuthorizations *AuthorizationsService\n\tChecks         *ChecksService\n\tGists          *GistsService\n\tGit            *GitService\n\tGitignores     *GitignoresService\n\tInteractions   *InteractionsService\n\tIssues         *IssuesService\n\tLicenses       *LicensesService\n\tMarketplace    *MarketplaceService\n\tMigrations     *MigrationService\n\tOrganizations  *OrganizationsService\n\tProjects       *ProjectsService\n\tPullRequests   *PullRequestsService\n\tReactions      *ReactionsService\n\tRepositories   *RepositoriesService\n\tSearch         *SearchService\n\tTeams          *TeamsService\n\tUsers          *UsersService\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{}\n\t}\n\tbaseURL, _ := url.Parse(defaultBaseURL)\n\tuploadURL, _ := url.Parse(uploadBaseURL)\n\n\tc := &Client{client: httpClient, BaseURL: baseURL, UserAgent: userAgent, UploadURL: uploadURL}\n\tc.common.client = c\n\tc.Actions = (*ActionsService)(&c.common)\n\tc.Activity = (*ActivityService)(&c.common)\n\tc.Admin = (*AdminService)(&c.common)\n\tc.Apps = (*AppsService)(&c.common)\n\tc.Authorizations = (*AuthorizationsService)(&c.common)\n\tc.Checks = (*ChecksService)(&c.common)\n\tc.Gists = (*GistsService)(&c.common)\n\tc.Git = (*GitService)(&c.common)\n\tc.Gitignores = (*GitignoresService)(&c.common)\n\tc.Interactions = (*InteractionsService)(&c.common)\n\tc.Issues = (*IssuesService)(&c.common)\n\tc.Licenses = (*LicensesService)(&c.common)\n\tc.Marketplace = &MarketplaceService{client: c}\n\tc.Migrations = (*MigrationService)(&c.common)\n\tc.Organizations = (*OrganizationsService)(&c.common)\n\tc.Projects = (*ProjectsService)(&c.common)\n\tc.PullRequests = (*PullRequestsService)(&c.common)\n\tc.Reactions = (*ReactionsService)(&c.common)\n\tc.Repositories = (*RepositoriesService)(&c.common)\n\tc.Search = (*SearchService)(&c.common)\n\tc.Teams = (*TeamsService)(&c.common)\n\tc.Users = (*UsersService)(&c.common)\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tif !strings.HasSuffix(c.BaseURL.Path, \"/\") {\n\t\treturn nil, fmt.Errorf(\"BaseURL must have a trailing slash, but %q does not\", c.BaseURL)\n\t}\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf io.ReadWriter\n\tif body != nil {\n\t\tbuf = &bytes.Buffer{}\n\t\tenc := json.NewEncoder(buf)\n\t\tenc.SetEscapeHTML(false)\n\t\terr := enc.Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treq.Header.Set(\"Accept\", mediaTypeV3)\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx == nil {\n\t\treturn nil, errors.New(\"context must be non-nil\")\n\t}\n\treq = withContext(ctx, req)\n\n\trateLimitCategory := category(req.URL.Path)\n\n\tif err := c.checkRateLimitBeforeDo(req, rateLimitCategory); err != nil {\n\t\treturn &Response{\n\t\t\tResponse: err.Response,\n\t\t\tRate:     err.Rate,\n\t\t}, err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif e, ok := err.(*url.Error); ok {\n\t\t\tif url, err := url.Parse(e.URL); err == nil {\n\t\t\t\te.URL = sanitizeURL(url).String()\n\t\t\t\treturn nil, e\n\t\t\t}\n\t\t}\n\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponse := newResponse(resp)\n\n\tc.rateMu.Lock()\n\tc.rateLimits[rateLimitCategory] = response.Rate\n\tc.rateMu.Unlock()\n\n\terr = CheckResponse(resp)\n\tif err != nil {\n\t\taerr, ok := err.(*AcceptedError)\n\t\tif ok {\n\t\t\tb, readErr := ioutil.ReadAll(resp.Body)\n\t\t\tif readErr != nil {\n\t\t\t\treturn response, readErr\n\t\t\t}\n\n\t\t\taerr.Raw = b\n\t\t\treturn response, aerr\n\t\t}\n\n\t\treturn response, err\n\t}\n\n\tif v != nil {\n\t\tif w, ok := v.(io.Writer); ok {\n\t\t\tio.Copy(w, resp.Body)\n\t\t} else {\n\t\t\tdecErr := json.NewDecoder(resp.Body).Decode(v)\n\t\t\tif decErr == io.EOF {\n\t\t\t\tdecErr = nil\n\t\t\t}\n\t\t\tif decErr != nil {\n\t\t\t\terr = decErr\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Rate struct {\n\tLimit     int\n\tRemaining int\n\tReset     time.Time\n}\n\ntype service struct {\n\tclient *Client\n}\n\ntype Client struct {\n\tclientMu   sync.Mutex\n\tclient     *http.Client\n\tBaseURL    *url.URL\n\tUploadURL  *url.URL\n\tUserAgent  string\n\trateMu     sync.Mutex\n\trateLimits map[string]Rate\n\tcommon     service\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{\n\t\t\tTimeout: 30 * time.Second,\n\t\t}\n\t}\n\tbaseURL, _ := url.Parse(\"https://api.example.com/\")\n\tuploadURL, _ := url.Parse(\"https://upload.example.com/\")\n\tc := &Client{\n\t\tclient:     httpClient,\n\t\tBaseURL:    baseURL,\n\t\tUploadURL:  uploadURL,\n\t\tUserAgent:  \"Go-http-client\",\n\t\trateLimits: make(map[string]Rate),\n\t}\n\tc.common.client = c\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar reqBody io.Reader\n\tif body != nil {\n\t\treqBody, err = json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), reqBody)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx.Err() != nil {\n\t\treturn nil, ctx.Err()\n\t}\n\n\treq = req.WithContext(ctx)\n\n\trateCategory := \"default\"\n\tc.rateMu.Lock()\n\tnow := time.Now()\n\tlimit, ok := c.rateLimits[rateCategory]\n\tif ok && limit.Remaining <= 0 {\n\t\tif now.Before(limit.Reset) {\n\t\t\twaitTime := time.Until(limit.Reset)\n\t\t\tc.rateMu.Unlock()\n\t\t\tselect {\n\t\t\tcase <-time.After(waitTime):\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn nil, ctx.Err()\n\t\t\t}\n\t\t\tc.rateMu.Lock()\n\t\t}\n\t}\n\tc.rateMu.Unlock()\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tresp.Body.Close()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.rateMu.Lock()\n\tdefer c.rateMu.Unlock()\n\n\tremaining := parseHeaderInt(resp.Header.Get(\"X-RateLimit-Remaining\"))\n\treset := parseHTTPDate(resp.Header.Get(\"X-RateLimit-Reset\"))\n\tlimitValue := parseHeaderInt(resp.Header.Get(\"X-RateLimit-Limit\"))\n\n\tc.rateLimits[rateCategory] = Rate{\n\t\tLimit:     limitValue,\n\t\tRemaining: remaining,\n\t\tReset:     reset,\n\t}\n\n\tif v != nil {\n\t\tif err := json.Unmarshal(body, v); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn &Response{Response: resp}, nil\n}\n\ntype Response struct {\n\t*http.Response\n}\n\nfunc parseHeaderInt(s string) int {\n\tif s == \"\" {\n\t\treturn 0\n\t}\n\tn, _ := strconv.Atoi(s)\n\treturn n\n}\n\nfunc parseHTTPDate(s string) time.Time {\n\tif s == \"\" {\n\t\treturn time.Time{}\n\t}\n\tt, _ := time.Parse(time.RFC1123, s)\n\treturn t\n}"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles log streaming and processing, including batch processing of log events.\n\nStruct Description: The Source struct represents a gRPC server that receives log streams, processes them in batches, and manages the server lifecycle.\n\nFields:\n- name: string - The name identifier for the source\n- eventPool: *event.Pool - Pool for managing event objects\n- config: *Config - Configuration for the source (bind address, port, etc.)\n- grpcServer: *grpc.Server - The gRPC server instance\n- bc: *batchChain - Batch processing chain for handling log events\n\nMethods:\n- ProductLoop: (productFunc api.ProductFunc) -> None - Starts the main processing loop and gRPC server\n  Input: productFunc - Function for processing produced events\n  Output: None (runs indefinitely as goroutine)\n\n- LogStream: (ls pb.LogService_LogStreamServer) -> error - Handles incoming log streams\n  Input: ls - gRPC stream server interface for log messages\n  Output: error - Any error that occurs during stream processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/loggie-io/loggie/pkg/core/api\"\n\t\"github.com/loggie-io/loggie/pkg/core/event\"\n\t\"github.com/loggie-io/loggie/pkg/core/log\"\n\t\"github.com/loggie-io/loggie/pkg/pipeline\"\n\tpb \"github.com/loggie-io/loggie/pkg/sink/grpc/pb\"\n\t\"github.com/loggie-io/loggie/pkg/util/json\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Source struct {\n\tpb.UnimplementedLogServiceServer\n\tname       string\n\teventPool  *event.Pool\n\tconfig     *Config\n\tgrpcServer *grpc.Server\n\tbc         *batchChain\n}\n\nfunc (s *Source) ProductLoop(productFunc api.ProductFunc) {\n\tlog.Info(\"%s start product loop\", s.String())\n\ts.bc = newBatchChain(productFunc, s.config.MaintenanceInterval)\n\tgo s.bc.run()\n\tip := fmt.Sprintf(\"%s:%s\", s.config.Bind, s.config.Port)\n\tlistener, err := net.Listen(s.config.Network, ip)\n\tif err != nil {\n\t\tlog.Panic(\"grpc server listen ip(%s) err: %v\", ip, err)\n\t}\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterLogServiceServer(grpcServer, s)\n\tgo grpcServer.Serve(listener)\n\ts.grpcServer = grpcServer\n\tlog.Info(\"grpc server start listing: %s\", ip)\n}\n\nfunc (s *Source) LogStream(ls pb.LogService_LogStreamServer) error {\n\tb := newBatch(s.config.Timeout)\n\tfor {\n\t\tlogMsg, err := ls.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tsendErr := ls.SendAndClose(&pb.LogResp{\n\t\t\t\tSuccess:  false,\n\t\t\t\tCount:    0,\n\t\t\t\tErrorMsg: err.Error(),\n\t\t\t})\n\t\t\tif sendErr != nil {\n\t\t\t\tlog.Warn(\"send response fail: %s\", sendErr)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\theader := make(map[string]interface{})\n\t\trawHeader := logMsg.GetHeader()\n\t\tif len(rawHeader) > 0 {\n\t\t\tfor k, v := range rawHeader {\n\t\t\t\theader[k] = string(v)\n\t\t\t}\n\t\t}\n\t\tpackedHeader := logMsg.PackedHeader\n\t\tif len(packedHeader) > 0 {\n\t\t\terr = json.Unmarshal(packedHeader, &header)\n\t\t\tif err != nil {\n\t\t\t\tlog.Warn(\"Unmarshal packedHeader error: %s\", err)\n\t\t\t}\n\t\t}\n\t\te := s.eventPool.Get()\n\t\te.Fill(e.Meta(), header, logMsg.GetRawLog())\n\t\tb.append(e)\n\t}\n\tif b.size() > 0 {\n\t\ts.bc.append(b)\n\t\tlogResp := b.wait()\n\t\terr := ls.SendAndClose(logResp)\n\t\tif err != nil {\n\t\t\tlog.Error(\"send response fail: %s\", err)\n\t\t}\n\t\treturn err\n\t}\n\treturn ls.SendAndClose(&pb.LogResp{\n\t\tSuccess: true,\n\t\tCount:   0,\n\t})\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/package/path/pb\"\n\tevent \"your/package/path/event\"\n\tconfig \"your/package/path/config\"\n\tbatch \"your/package/path/batch\"\n)\n\ntype Source struct {\n\tname       string\n\teventPool  *event.Pool\n\tconfig     *config.Config\n\tgrpcServer *grpc.Server\n\tbc         *batch.BatchChain\n}\n\nfunc (s *Source) ProductLoop(productFunc func(context.Context, []interface{})) {\n\tgo func() {\n\t\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", s.config.BindAddr, s.config.Port))\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tpb.RegisterLogServiceServer(s.grpcServer, s)\n\t\tif err := s.grpcServer.Serve(listener); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor {\n\t\t\tbatch := s.bc.GetBatch()\n\t\t\tif batch != nil {\n\t\t\t\tproductFunc(context.Background(), batch)\n\t\t\t}\n\t\t}\n\t}()\n}\n\nfunc (s *Source) LogStream(stream pb.LogService_LogStreamServer) error {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tevent := s.eventPool.Get()\n\t\tevent.PopulateFrom(msg)\n\t\ts.bc.Add(event)\n\t}\n}"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Implement a gRPC server in Go for a log service that supports append, read, discard, and info operations with concurrent access control and log entry management.\n\nStruct Description: The Server struct represents a gRPC server implementation for a log service that maintains an ordered sequence of log entries with configurable size limits and provides thread-safe operations.\n\nFields:\n- ctx: context.Context - Context for managing server lifecycle\n- options: *Options - Configuration options for the server\n- hardLimit: int - Maximum number of entries before truncation\n- lock: sync.Mutex - Mutex for thread-safe operations\n- locked: struct - Protected data structure containing:\n  - startIndex: Index - First available index in the log\n  - entries: []*logspec.Entry - Slice of log entries\n  - changed: chan struct{} - Channel to notify about log changes\n\nMethods:\n- NewServer: [Name](ctx context.Context, options *Options) -> (*Server, error) - Creates and starts a new Server instance\n- Append: [Name](stream logspec.Log_AppendServer) -> error - Handles append requests via gRPC stream\n- append: [Name](proposals [][]byte) -> []Index - Internal method to append entries to the log\n- lastIndexLocked: [Name]() -> Index - Helper method to get last index (requires lock)\n- Discard: [Name](ctx context.Context, req *logspec.DiscardRequest) -> (*logspec.DiscardReply, error) - Handles discard requests\n- discard: [Name](firstIndex Index) -> - Internal method to discard entries\n- Read: [Name](req *logspec.ReadRequest, stream logspec.Log_ReadServer) -> error - Handles read requests via gRPC stream\n- Info: [Name](ctx context.Context, req *logspec.InfoRequest) -> (*logspec.InfoReply, error) - Returns current log info\n- info: [Name]() -> (*logspec.InfoReply, chan struct{}) - Internal method to get log info\n- InfoStream: [Name](req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) -> error - Streams log info updates",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"github.com/ebay/akutan/logspec\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tctx       context.Context\n\toptions   *Options\n\thardLimit int\n\tlock      sync.Mutex\n\tlocked    struct {\n\t\tstartIndex Index\n\t\tentries    []*logspec.Entry\n\t\tchanged    chan struct{}\n\t}\n}\n\ntype Options struct {\n\tAddress string\n\tLimit   int\n}\n\ntype Index = uint64\n\nfunc NewServer(ctx context.Context, options *Options) (*Server, error) {\n\tserver := &Server{\n\t\tctx:       ctx,\n\t\toptions:   options,\n\t\thardLimit: options.Limit * 3 / 2,\n\t}\n\tserver.locked.startIndex = 1\n\tserver.locked.changed = make(chan struct{})\n\tlistener, err := net.Listen(\"tcp\", options.Address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconst maxMsgSize = 1024 * 1024 * 1024\n\tservice := grpc.NewServer(\n\t\tgrpc.MaxRecvMsgSize(maxMsgSize),\n\t\tgrpc.MaxSendMsgSize(maxMsgSize))\n\tlogspec.RegisterLogServer(service, server)\n\tgo service.Serve(listener)\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tlistener.Close()\n\t\tservice.Stop()\n\t}()\n\treturn server, nil\n}\n\nfunc (server *Server) Append(streams logspec.Log_AppendServer) error {\n\tseq := uint64(0)\n\tfor {\n\t\tseq++\n\t\treq, err := streams.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif req.Sequence != seq {\n\t\t\treturn errors.New(\"out of sequence\")\n\t\t}\n\t\tindexes := server.append(req.Proposals)\n\t\tres := logspec.AppendReply{\n\t\t\tReply: &logspec.AppendReply_Ok{\n\t\t\t\tOk: &logspec.AppendReply_OK{\n\t\t\t\t\tSequence: seq,\n\t\t\t\t\tIndexes:  indexes,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\terr = streams.Send(&res)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (server *Server) append(proposals [][]byte) []Index {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\tprevLastIndex := server.lastIndexLocked()\n\tnextIndex := prevLastIndex + 1\n\tindexes := make([]Index, len(proposals))\n\tfor i := range proposals {\n\t\tindexes[i] = nextIndex\n\t\tnextIndex++\n\t\tserver.locked.entries = append(server.locked.entries, &logspec.Entry{\n\t\t\tIndex: indexes[i],\n\t\t\tData:  proposals[i],\n\t\t\tSkip:  false,\n\t\t})\n\t}\n\n\tif server.hardLimit > 0 && len(server.locked.entries) >= server.hardLimit {\n\t\tfirstIndex := nextIndex - uint64(server.options.Limit)\n\t\tdiff := firstIndex - server.locked.startIndex\n\t\tserver.locked.entries = append([]*logspec.Entry(nil),\n\t\t\tserver.locked.entries[diff:]...)\n\t\tserver.locked.startIndex = firstIndex\n\t}\n\n\tclose(server.locked.changed)\n\tserver.locked.changed = make(chan struct{})\n\treturn indexes\n}\n\nfunc (server *Server) lastIndexLocked() Index {\n\treturn server.locked.startIndex + uint64(len(server.locked.entries)) - 1\n}\n\nfunc (server *Server) Discard(ctx context.Context, req *logspec.DiscardRequest) (*logspec.DiscardReply, error) {\n\tserver.discard(req.FirstIndex)\n\treturn &logspec.DiscardReply{\n\t\tReply: &logspec.DiscardReply_Ok{\n\t\t\tOk: &logspec.DiscardReply_OK{},\n\t\t},\n\t}, nil\n}\n\nfunc (server *Server) discard(firstIndex Index) {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\tif firstIndex <= server.locked.startIndex {\n\t\treturn\n\t}\n\tdiff := firstIndex - server.locked.startIndex\n\tif uint64(len(server.locked.entries)) < diff {\n\t\tserver.locked.entries = nil\n\t} else {\n\t\tserver.locked.entries = append([]*logspec.Entry(nil),\n\t\t\tserver.locked.entries[diff:]...)\n\t}\n\tserver.locked.startIndex = firstIndex\n\tclose(server.locked.changed)\n\tserver.locked.changed = make(chan struct{})\n}\n\nfunc (server *Server) Read(req *logspec.ReadRequest, stream logspec.Log_ReadServer) error {\n\tctx := stream.Context()\n\tnextIndex := req.NextIndex\n\tfor {\n\t\tserver.lock.Lock()\n\t\tstartIndex := server.locked.startIndex\n\t\tlastIndex := server.lastIndexLocked()\n\t\tentries := server.locked.entries\n\t\tchangedCh := server.locked.changed\n\t\tserver.lock.Unlock()\n\n\t\tif nextIndex < startIndex {\n\t\t\treturn stream.Send(&logspec.ReadReply{\n\t\t\t\tReply: &logspec.ReadReply_Truncated{\n\t\t\t\t\tTruncated: true,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif nextIndex > lastIndex {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn ctx.Err()\n\t\t\tcase <-server.ctx.Done():\n\t\t\t\treturn server.ctx.Err()\n\t\t\tcase <-changedCh:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tentries = entries[nextIndex-startIndex:]\n\t\tif len(entries) > 10 {\n\t\t\tentries = entries[:10]\n\t\t}\n\t\terr := stream.Send(&logspec.ReadReply{\n\t\t\tReply: &logspec.ReadReply_Ok{\n\t\t\t\tOk: &logspec.ReadReply_OK{\n\t\t\t\t\tEntries: entries,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnextIndex += uint64(len(entries))\n\t}\n}\n\nfunc (server *Server) Info(context.Context, *logspec.InfoRequest) (*logspec.InfoReply, error) {\n\tres, _ := server.info()\n\treturn res, nil\n}\n\nfunc (server *Server) info() (*logspec.InfoReply, chan struct{}) {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\treturn &logspec.InfoReply{\n\t\tReply: &logspec.InfoReply_Ok{\n\t\t\tOk: &logspec.InfoReply_OK{\n\t\t\t\tFirstIndex: server.locked.startIndex,\n\t\t\t\tLastIndex:  server.lastIndexLocked(),\n\t\t\t},\n\t\t},\n\t}, server.locked.changed\n}\n\nfunc (server *Server) InfoStream(req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) error {\n\tfor {\n\t\tres, changedCh := server.info()\n\t\terr := stream.Send(res)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tselect {\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\tcase <-server.ctx.Done():\n\t\t\treturn server.ctx.Err()\n\t\tcase <-changedCh:\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype Index int64\n\ntype Options struct {\n\tSoftLimit int\n}\n\ntype Server struct {\n\tctx       context.Context\n\toptions   *Options\n\thardLimit int\n\tlock      sync.Mutex\n\tlocked    struct {\n\t\tstartIndex Index\n\t\tentries    []*logspec.Entry\n\t\tchanged    chan struct{}\n\t}\n}\n\nfunc NewServer(ctx context.Context, options *Options) (*Server, error) {\n\tif options == nil {\n\t\toptions = &Options{}\n\t}\n\tif options.SoftLimit == 0 {\n\t\toptions.SoftLimit = 1024\n\t}\n\ts := &Server{\n\t\tctx:       ctx,\n\t\toptions:   options,\n\t\thardLimit: options.SoftLimit * 2,\n\t}\n\ts.locked.startIndex = 1\n\ts.locked.entries = make([]*logspec.Entry, 0)\n\ts.locked.changed = make(chan struct{}, 1)\n\treturn s, nil\n}\n\nfunc (s *Server) Append(stream logspec.Log_AppendServer) error {\n\tvar proposals [][]byte\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproposals = append(proposals, req.Data)\n\t}\n\tindexes := s.append(proposals)\n\treturn stream.SendAndClose(&logspec.AppendReply{Index: indexes})\n}\n\nfunc (s *Server) append(proposals [][]byte) []Index {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\toriginalLength := len(s.locked.entries)\n\tstartIndex := s.locked.startIndex + Index(originalLength)\n\tindexes := make([]Index, len(proposals))\n\tfor i := range proposals {\n\t\tindexes[i] = startIndex + Index(i)\n\t}\n\n\tnow := time.Now().UnixNano()\n\tfor i, data := range proposals {\n\t\te := &logspec.Entry{\n\t\t\tIndex:     indexes[i],\n\t\t\tTimestamp: now,\n\t\t\tData:      data,\n\t\t}\n\t\ts.locked.entries = append(s.locked.entries, e)\n\t}\n\n\tif len(s.locked.entries) > s.hardLimit {\n\t\tsoftLimit := s.options.SoftLimit\n\t\ttruncateCount := len(s.locked.entries) - softLimit\n\t\ts.locked.startIndex += Index(truncateCount)\n\t\ts.locked.entries = s.locked.entries[truncateCount:]\n\t}\n\n\tselect {\n\tcase s.locked.changed <- struct{}{}:\n\tdefault:\n\t}\n\n\treturn indexes\n}\n\nfunc (s *Server) lastIndexLocked() Index {\n\tif len(s.locked.entries) == 0 {\n\t\treturn s.locked.startIndex - 1\n\t}\n\treturn s.locked.startIndex + Index(len(s.locked.entries)) - 1\n}\n\nfunc (s *Server) Discard(ctx context.Context, req *logspec.DiscardRequest) (*logspec.DiscardReply, error) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tif req.FirstIndex < s.locked.startIndex {\n\t\treturn nil, status.Errorf(codes.OutOfRange, \"index %d is too old\", req.FirstIndex)\n\t}\n\ts.discard(req.FirstIndex)\n\treturn &logspec.DiscardReply{}, nil\n}\n\nfunc (s *Server) discard(firstIndex Index) {\n\tkeep := firstIndex - s.locked.startIndex\n\tif keep > Index(len(s.locked.entries)) {\n\t\tkeep = Index(len(s.locked.entries))\n\t}\n\ts.locked.entries = s.locked.entries[:keep]\n\ts.locked.startIndex = firstIndex\n\tselect {\n\tcase s.locked.changed <- struct{}{}:\n\tdefault:\n\t}\n}\n\nfunc (s *Server) Read(req *logspec.ReadRequest, stream logspec.Log_ReadServer) error {\n\ts.lock.Lock()\n\tif req.StartIndex < s.locked.startIndex {\n\t\ts.lock.Unlock()\n\t\treturn status.Errorf(codes.OutOfRange, \"index %d is too old\", req.StartIndex)\n\t}\n\n\tstartOffset := req.StartIndex - s.locked.startIndex\n\tif startOffset < 0 {\n\t\tstartOffset = 0\n\t}\n\tstartIdx := int(startOffset)\n\tendIdx := len(s.locked.entries)\n\tif req.Limit > 0 {\n\t\tendIdx = startIdx + int(req.Limit)\n\t\tif endIdx > len(s.locked.entries) {\n\t\t\tendIdx = len(s.locked.entries)\n\t\t}\n\t}\n\tentries := s.locked.entries[startIdx:endIdx]\n\tlastSentIndex := s.locked.startIndex - 1\n\tif len(entries) > 0 {\n\t\tlastSentIndex = entries[len(entries)-1].Index\n\t}\n\ts.lock.Unlock()\n\n\tfor _, e := range entries {\n\t\tif err := stream.Send(e); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif !req.Tail {\n\t\treturn nil\n\t}\n\n\tfor {\n\t\ts.lock.Lock()\n\t\tchangedChan := s.locked.changed\n\t\ts.lock.Unlock()\n\n\t\tselect {\n\t\tcase <-changedChan:\n\t\t\ts.lock.Lock()\n\t\t\tdefer s.lock.Unlock()\n\n\t\t\tif req.StartIndex < s.locked.startIndex {\n\t\t\t\treturn status.Errorf(codes.OutOfRange, \"index %d is too old\", req.StartIndex)\n\t\t\t}\n\n\t\t\tstartOffset := lastSentIndex - s.locked.startIndex + 1\n\t\t\tif startOffset < 0 {\n\t\t\t\tstartOffset = 0\n\t\t\t}\n\t\t\tstartIdx := int(startOffset)\n\t\t\tif startIdx >= len(s.locked.entries) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tendIdx := len(s.locked.entries)\n\t\t\tif req.Limit > 0 {\n\t\t\t\tendIdx = startIdx + int(req.Limit)\n\t\t\t\tif endIdx > len(s.locked.entries) {\n\t\t\t\t\tendIdx = len(s.locked.entries)\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewEntries := s.locked.entries[startIdx:endIdx]\n\t\t\ts.lock.Unlock()\n\n\t\t\tfor _, e := range newEntries {\n\t\t\t\tif err := stream.Send(e); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tlastSentIndex = e.Index\n\t\t\t}\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\t}\n\t}\n}\n\nfunc (s *Server) Info(ctx context.Context, req *logspec.InfoRequest) (*logspec.InfoReply, error) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\treply, _ := s.info()\n\treturn reply, nil\n}\n\nfunc (s *Server) info() (*logspec.InfoReply, chan struct{}) {\n\treturn &logspec.InfoReply{\n\t\tStartIndex: s.locked.startIndex,\n\t\tLastIndex:  s.lastIndexLocked(),\n\t\tCount:      int64(len(s.locked.entries)),\n\t}, s.locked.changed\n}\n\nfunc (s *Server) InfoStream(req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) error {\n\ts.lock.Lock()\n\treply, changedChan := s.info()\n\ts.lock.Unlock()\n\tif err := stream.Send(reply); err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\ts.lock.Lock()\n\t\tchanged := s.locked.changed\n\t\ts.lock.Unlock()\n\n\t\tselect {\n\t\tcase <-changed:\n\t\t\ts.lock.Lock()\n\t\t\treply, _ = s.info()\n\t\t\ts.lock.Unlock()\n\t\t\tif err := stream.Send(reply); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Create a Go HTTP client struct for interacting with an Okta API, handling authentication, session management, and user data retrieval.\n\nStruct Description: The Client struct represents an HTTP client configured to communicate with Okta's API. It maintains client configuration, organization details, and authentication state, providing methods for various API operations.\n\nFields:\n- client: *http.Client - The underlying HTTP client used for requests\n- org: string - The Okta organization domain\n- Url: string - The base Okta URL (defaults to \"okta.com\")\n- ApiToken: string - The API token for authenticated requests\n\nMethods:\n- NewClient(org string) -> *Client - Constructor that initializes a new Client with the specified organization\n- Authenticate(username string, password string) -> (*AuthnResponse, error) - Performs user authentication with username/password\n- Session(sessionToken string) -> (*SessionResponse, error) - Creates a session using a session token\n- User(userID string) -> (*User, error) - Retrieves user details by ID\n- Groups(userID string) -> (*Groups, error) - Gets groups associated with a user\n- call(endpoint string, method string, request interface{}, response interface{}) -> error - Internal method handling the HTTP request/response cycle",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tclient   *http.Client\n\torg      string\n\tUrl      string\n\tApiToken string\n}\n\nfunc NewClient(org string) *Client {\n\tclient := Client{\n\t\tclient: &http.Client{},\n\t\torg:    org,\n\t\tUrl:    \"okta.com\",\n\t}\n\n\treturn &client\n}\n\nfunc (c *Client) Authenticate(username, password string) (*AuthnResponse, error) {\n\tvar request = &AuthnRequest{\n\t\tUsername: username,\n\t\tPassword: password,\n\t}\n\n\tvar response = &AuthnResponse{}\n\terr := c.call(\"authn\", \"POST\", request, response)\n\treturn response, err\n}\n\nfunc (c *Client) Session(sessionToken string) (*SessionResponse, error) {\n\tvar request = &SessionRequest{\n\t\tSessionToken: sessionToken,\n\t}\n\n\tvar response = &SessionResponse{}\n\terr := c.call(\"sessions\", \"POST\", request, response)\n\treturn response, err\n}\n\nfunc (c *Client) User(userID string) (*User, error) {\n\tvar response = &User{}\n\terr := c.call(\"users/\"+userID, \"GET\", nil, response)\n\treturn response, err\n}\n\nfunc (c *Client) Groups(userID string) (*Groups, error) {\n\tvar response = &Groups{}\n\terr := c.call(\"users/\"+userID+\"/groups\", \"GET\", nil, response)\n\treturn response, err\n}\n\nfunc (c *Client) call(endpoint, method string, request, response interface{}) error {\n\tdata, _ := json.Marshal(request)\n\n\tvar url = \"https://\" + c.org + \".\" + c.Url + \"/api/v1/\" + endpoint\n\treq, err := http.NewRequest(method, url, bytes.NewBuffer(data))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treq.Header.Add(\"Accept\", `application/json`)\n\treq.Header.Add(\"Content-Type\", `application/json`)\n\tif c.ApiToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"SSWS \"+c.ApiToken)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif resp.StatusCode == http.StatusOK {\n\t\terr := json.Unmarshal(body, &response)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tvar errors ErrorResponse\n\t\terr = json.Unmarshal(body, &errors)\n\n\t\treturn &errorResponse{\n\t\t\tHTTPCode: resp.StatusCode,\n\t\t\tResponse: errors,\n\t\t\tEndpoint: url,\n\t\t}\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype AuthnResponse struct {\n\tSessionToken string `json:\"sessionToken\"`\n}\n\ntype SessionResponse struct {\n\tID string `json:\"id\"`\n}\n\ntype User struct {\n\tID    string `json:\"id\"`\n\tLogin string `json:\"login\"`\n}\n\ntype Group struct {\n\tID   string `json:\"id\"`\n\tName string `json:\"profile.name\"`\n}\n\ntype Groups struct {\n\tItems []Group `json:\"groups\"`\n}\n\ntype Client struct {\n\tclient   *http.Client\n\torg      string\n\tUrl      string\n\tApiToken string\n}\n\nfunc NewClient(org string) *Client {\n\treturn &Client{\n\t\tclient: &http.Client{},\n\t\torg:    org,\n\t\tUrl:    \"okta.com\",\n\t}\n}\n\nfunc (c *Client) Authenticate(username, password string) (*AuthnResponse, error) {\n\treqBody := struct {\n\t\tUsername string `json:\"username\"`\n\t\tPassword string `json:\"password\"`\n\t}{\n\t\tUsername: username,\n\t\tPassword: password,\n\t}\n\n\tvar authResp AuthnResponse\n\terr := c.call(\"/api/v1/authn\", \"POST\", reqBody, &authResp)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &authResp, nil\n}\n\nfunc (c *Client) Session(sessionToken string) (*SessionResponse, error) {\n\treqBody := struct {\n\t\tSessionToken string `json:\"sessionToken\"`\n\t}{\n\t\tSessionToken: sessionToken,\n\t}\n\n\tvar sessionResp SessionResponse\n\terr := c.call(\"/api/v1/sessions\", \"POST\", reqBody, &sessionResp)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &sessionResp, nil\n}\n\nfunc (c *Client) User(userID string) (*User, error) {\n\tvar user User\n\tendpoint := fmt.Sprintf(\"/api/v1/users/%s\", userID)\n\terr := c.call(endpoint, \"GET\", nil, &user)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &user, nil\n}\n\nfunc (c *Client) Groups(userID string) (*Groups, error) {\n\tvar groups Groups\n\tendpoint := fmt.Sprintf(\"/api/v1/users/%s/groups\", userID)\n\terr := c.call(endpoint, \"GET\", nil, &groups)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &groups, nil\n}\n\nfunc (c *Client) call(endpoint, method string, request, response interface{}) error {\n\tbaseURL := fmt.Sprintf(\"https://%s.%s\", c.org, c.Url)\n\tfullURL := baseURL + endpoint\n\n\tvar body []byte\n\tvar err error\n\n\tif request != nil {\n\t\tbody, err = json.Marshal(request)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, fullURL, bytes.NewBuffer(body))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tif c.ApiToken != \"\" {\n\t\treq.Header.Set(\"Authorization\", \"SSWS \"+c.ApiToken)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tif response != nil {\n\t\terr = json.NewDecoder(resp.Body).Decode(response)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server for management services, including setting up necessary dependencies and configurations.\n\nFunction Description: The function `startManagement` initializes and starts a gRPC server with management services. It sets up a temporary directory for data storage, configures the server with keepalive policies, initializes various managers and stores, and registers the management service. The server listens on a dynamically assigned port and runs in a goroutine.\n\nInput:\n- `t *testing.T`: Testing context for temporary directory creation and cleanup\n- `signalAddr string`: Address of the signal service\n- `counter *int`: Pointer to a counter for tracking server operations (used in mock implementation)\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance\n- `string`: The address the server is listening on\n- `error`: Any error that occurred during initialization",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server\"\n\t\"github.com/netbirdio/netbird/management/server/activity\"\n\t\"github.com/netbirdio/netbird/management/server/settings\"\n\t\"github.com/netbirdio/netbird/management/server/store\"\n\t\"github.com/netbirdio/netbird/management/server/telemetry\"\n)\n\nvar (\n\tkaep = keepalive.EnforcementPolicy{\n\t\tMinTime:             15 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\n\tkasp = keepalive.ServerParameters{\n\t\tMaxConnectionIdle:     15 * time.Second,\n\t\tMaxConnectionAgeGrace: 5 * time.Second,\n\t\tTime:                  5 * time.Second,\n\t\tTimeout:               2 * time.Second,\n\t}\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tt.Helper()\n\tdataDir := t.TempDir()\n\n\tconfig := &server.Config{\n\t\tStuns:      []*server.Host{},\n\t\tTURNConfig: &server.TURNConfig{},\n\t\tSignal: &server.Host{\n\t\t\tProto: \"http\",\n\t\t\tURI:   signalAddr,\n\t\t},\n\t\tDatadir:    dataDir,\n\t\tHttpConfig: nil,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tstore, cleanUp, err := store.NewTestStoreFromSQL(context.Background(), \"\", config.Datadir)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tt.Cleanup(cleanUp)\n\n\tpeersUpdateManager := server.NewPeersUpdateManager(nil)\n\teventStore := &activity.InMemoryEventStore{}\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tia, _ := integrations.NewIntegratedValidator(context.Background(), eventStore)\n\n\tmetrics, err := telemetry.NewDefaultAppMetrics(context.Background())\n\trequire.NoError(t, err)\n\n\taccountManager, err := server.BuildManager(context.Background(), store, peersUpdateManager, nil, \"\", \"netbird.selfhosted\", eventStore, nil, false, ia, metrics)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tsecretsManager := server.NewTimeBasedAuthSecretsManager(peersUpdateManager, config.TURNConfig, config.Relay)\n\tmgmtServer, err := server.NewServer(context.Background(), config, accountManager, settings.NewManager(store), peersUpdateManager, secretsManager, nil, nil)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tmock := &mockServer{\n\t\tManagementServiceServer: mgmtServer,\n\t\tcounter:                 counter,\n\t}\n\tmgmtProto.RegisterManagementServiceServer(s, mock)\n\tgo func() {\n\t\tif err = s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn s, lis.Addr().String(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "import (\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tdataDir := t.TempDir()\n\n\tuserManager := NewUserManager(dataDir)\n\tsessionManager := NewSessionManager(signalAddr, userManager)\n\n\tkaep := grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionIdle: 15 * time.Second,\n\t})\n\n\tgrpcServer := grpc.NewServer(kaep)\n\tmgmtService := &managementService{\n\t\tuserManager:    userManager,\n\t\tsessionManager: sessionManager,\n\t\tcounter:        counter,\n\t}\n\n\tpb.RegisterManagementServiceServer(grpcServer, mgmtService)\n\n\tlistener, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(listener); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn grpcServer, listener.Addr().String(), nil\n}"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Implement a Redis-based session management system in Go that allows storing, retrieving, and managing HTTP session data using Redis as the backend storage.\n\nStruct Description: The implementation consists of two main structs - `SessionStore` for handling individual session operations and `Provider` for managing the Redis connection pool and session lifecycle.\n\nFields:\n\nSessionStore:\n- p: *redis.Pool - Redis connection pool\n- sid: string - Session ID\n- lock: sync.RWMutex - Read-write lock for thread safety\n- values: map[interface{}]interface{} - Key-value pairs storing session data\n- maxlifetime: int64 - Session expiration time in seconds\n\nProvider:\n- maxlifetime: int64 - Default session expiration time\n- savePath: string - Redis server address\n- poolsize: int - Connection pool size\n- password: string - Redis authentication password\n- dbNum: int - Redis database number\n- poollist: *redis.Pool - Redis connection pool instance\n\nMethods:\n\nSessionStore:\n- Set(key, value interface{}) error - Stores a key-value pair in the session\n- Get(key interface{}) interface{} - Retrieves a value by key from the session\n- Delete(key interface{}) error - Removes a key-value pair from the session\n- Flush() error - Clears all session data\n- SessionID() string - Returns the session ID\n- SessionRelease(w http.ResponseWriter) - Persists session data to Redis before closing\n\nProvider:\n- SessionInit(maxlifetime int64, savePath string) error - Initializes the Redis connection pool with configuration\n- SessionRead(sid string) (session.Store, error) - Retrieves session data from Redis\n- SessionExist(sid string) bool - Checks if a session exists in Redis\n- SessionRegenerate(oldsid, sid string) (session.Store, error) - Creates a new session ID while preserving data\n- SessionDestroy(sid string) error - Removes session data from Redis",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/astaxie/beego/session\"\n\t\"github.com/garyburd/redigo/redis\"\n)\n\nvar redispder = &Provider{}\nvar MaxPoolSize = 100\n\ntype SessionStore struct {\n\tp           *redis.Pool\n\tsid         string\n\tlock        sync.RWMutex\n\tvalues      map[interface{}]interface{}\n\tmaxlifetime int64\n}\n\nfunc (rs *SessionStore) Set(key, value interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values[key] = value\n\treturn nil\n}\n\nfunc (rs *SessionStore) Get(key interface{}) interface{} {\n\trs.lock.RLock()\n\tdefer rs.lock.RUnlock()\n\tif v, ok := rs.values[key]; ok {\n\t\treturn v\n\t}\n\treturn nil\n}\n\nfunc (rs *SessionStore) Delete(key interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\tdelete(rs.values, key)\n\treturn nil\n}\n\nfunc (rs *SessionStore) Flush() error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (rs *SessionStore) SessionID() string {\n\treturn rs.sid\n}\n\nfunc (rs *SessionStore) SessionRelease(w http.ResponseWriter) {\n\tb, err := session.EncodeGob(rs.values)\n\tif err != nil {\n\t\treturn\n\t}\n\tc := rs.p.Get()\n\tdefer c.Close()\n\tc.Do(\"SETEX\", rs.sid, rs.maxlifetime, string(b))\n}\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\nfunc (rp *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\trp.maxlifetime = maxlifetime\n\tconfigs := strings.Split(savePath, \",\")\n\tif len(configs) > 0 {\n\t\trp.savePath = configs[0]\n\t}\n\tif len(configs) > 1 {\n\t\tpoolsize, err := strconv.Atoi(configs[1])\n\t\tif err != nil || poolsize <= 0 {\n\t\t\trp.poolsize = MaxPoolSize\n\t\t} else {\n\t\t\trp.poolsize = poolsize\n\t\t}\n\t} else {\n\t\trp.poolsize = MaxPoolSize\n\t}\n\tif len(configs) > 2 {\n\t\trp.password = configs[2]\n\t}\n\tif len(configs) > 3 {\n\t\tdbnum, err := strconv.Atoi(configs[3])\n\t\tif err != nil || dbnum < 0 {\n\t\t\trp.dbNum = 0\n\t\t} else {\n\t\t\trp.dbNum = dbnum\n\t\t}\n\t} else {\n\t\trp.dbNum = 0\n\t}\n\trp.poollist = redis.NewPool(func() (redis.Conn, error) {\n\t\tc, err := redis.Dial(\"tcp\", rp.savePath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif rp.password != \"\" {\n\t\t\tif _, err := c.Do(\"AUTH\", rp.password); err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\t_, err = c.Do(\"SELECT\", rp.dbNum)\n\t\tif err != nil {\n\t\t\tc.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\treturn c, err\n\t}, rp.poolsize)\n\n\treturn rp.poollist.Get().Err()\n}\n\nfunc (rp *Provider) SessionRead(sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionExist(sid string) bool {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, err := redis.Int(c.Do(\"EXISTS\", sid)); err != nil || existed == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (rp *Provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, _ := redis.Int(c.Do(\"EXISTS\", oldsid)); existed == 0 {\n\t\tc.Do(\"SET\", sid, \"\", \"EX\", rp.maxlifetime)\n\t} else {\n\t\tc.Do(\"RENAME\", oldsid, sid)\n\t\tc.Do(\"EXPIRE\", sid, rp.maxlifetime)\n\t}\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionDestroy(sid string) error {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tc.Do(\"DEL\", sid)\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gomodule/redigo/redis\"\n)\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\ntype SessionStore struct {\n\tp           *redis.Pool\n\tsid         string\n\tlock        sync.RWMutex\n\tvalues      map[interface{}]interface{}\n\tmaxlifetime int64\n}\n\nfunc (p *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\tp.maxlifetime = maxlifetime\n\tp.savePath = savePath\n\n\tpool := &redis.Pool{\n\t\tMaxIdle:     3,\n\t\tMaxActive:   p.poolsize,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", p.savePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif p.password != \"\" {\n\t\t\t\tif _, err := c.Do(\"AUTH\", p.password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\tif p.dbNum != 0 {\n\t\t\t\tif _, err := c.Do(\"SELECT\", p.dbNum); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, nil\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\t_, err := c.Do(\"PING\")\n\t\t\treturn err\n\t\t},\n\t}\n\n\tp.poollist = pool\n\treturn nil\n}\n\nfunc (p *Provider) SessionRead(sid string) (session.Store, error) {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\texists, _ := redis.Bool(conn.Do(\"EXISTS\", sid))\n\tif !exists {\n\t\treturn nil, fmt.Errorf(\"session not found\")\n\t}\n\n\tvalues, err := redis.Values(conn.Do(\"HGETALL\", sid))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsessionStore := &SessionStore{\n\t\tp:           p.poollist,\n\t\tsid:         sid,\n\t\tvalues:      make(map[interface{}]interface{}),\n\t\tmaxlifetime: p.maxlifetime,\n\t\tlock:        sync.RWMutex{},\n\t}\n\n\tfor i := 0; i < len(values); i += 2 {\n\t\tkeyBytes, _ := values[i].([]byte)\n\t\tvalBytes, _ := values[i+1].([]byte)\n\t\tsessionStore.values[string(keyBytes)] = string(valBytes)\n\t}\n\n\treturn sessionStore, nil\n}\n\nfunc (p *Provider) SessionExist(sid string) bool {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\texists, _ := redis.Bool(conn.Do(\"EXISTS\", sid))\n\treturn exists\n}\n\nfunc (p *Provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\texists, _ := redis.Bool(conn.Do(\"EXISTS\", oldsid))\n\tif !exists {\n\t\treturn nil, fmt.Errorf(\"old session not found\")\n\t}\n\n\tvalues, _ := redis.Values(conn.Do(\"HGETALL\", oldsid))\n\n\tconn.Do(\"DEL\", oldsid)\n\n\targs := []interface{}{sid}\n\tfor i := 0; i < len(values); i += 2 {\n\t\tkey := values[i].([]byte)\n\t\tval := values[i+1].([]byte)\n\t\targs = append(args, string(key), string(val))\n\t}\n\n\tif len(args) > 1 {\n\t\tconn.Do(\"HSET\", args...)\n\t\tconn.Do(\"EXPIRE\", sid, p.maxlifetime)\n\t}\n\n\tsessionStore := &SessionStore{\n\t\tp:           p.poollist,\n\t\tsid:         sid,\n\t\tvalues:      make(map[interface{}]interface{}),\n\t\tmaxlifetime: p.maxlifetime,\n\t\tlock:        sync.RWMutex{},\n\t}\n\n\tfor i := 0; i < len(values); i += 2 {\n\t\tkey := values[i].([]byte)\n\t\tval := values[i+1].([]byte)\n\t\tsessionStore.values[string(key)] = string(val)\n\t}\n\n\treturn sessionStore, nil\n}\n\nfunc (p *Provider) SessionDestroy(sid string) error {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", sid)\n\treturn err\n}\n\nfunc (st *SessionStore) Set(key, value interface{}) error {\n\tst.lock.Lock()\n\tdefer st.lock.Unlock()\n\tst.values[key] = value\n\treturn nil\n}\n\nfunc (st *SessionStore) Get(key interface{}) interface{} {\n\tst.lock.RLock()\n\tdefer st.lock.RUnlock()\n\treturn st.values[key]\n}\n\nfunc (st *SessionStore) Delete(key interface{}) error {\n\tst.lock.Lock()\n\tdefer st.lock.Unlock()\n\tdelete(st.values, key)\n\treturn nil\n}\n\nfunc (st *SessionStore) Flush() error {\n\tst.lock.Lock()\n\tdefer st.lock.Unlock()\n\tst.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (st *SessionStore) SessionID() string {\n\treturn st.sid\n}\n\nfunc (st *SessionStore) SessionRelease(w http.ResponseWriter) {\n\tst.lock.Lock()\n\tdefer st.lock.Unlock()\n\n\tconn := st.p.Get()\n\tdefer conn.Close()\n\n\tconn.Do(\"DEL\", st.sid)\n\n\tif len(st.values) > 0 {\n\t\targs := []interface{}{st.sid}\n\t\tfor k, v := range st.values {\n\t\t\targs = append(args, k, v)\n\t\t}\n\t\tconn.Do(\"HSET\", args...)\n\t\tconn.Do(\"EXPIRE\", st.sid, st.maxlifetime)\n\t}\n}"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool and methods for interacting with Redis, including setting, getting, deleting keys, and flushing the database.\n\nStruct Description: RedisStore is a struct that manages a connection pool to Redis and provides methods for common Redis operations with support for expiration times.\n\nFields:\n- pool: *redis.Pool - A connection pool to Redis for efficient connection reuse\n- defaultExpiration: time.Duration - The default expiration time for keys when not explicitly specified\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method for executing Redis commands with serialization and expiration handling",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n\n\t\"github.com/gomodule/redigo/redis\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tpool := &redis.Pool{\n\t\tMaxIdle:     10,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif password != \"\" {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, nil\n\t\t},\n\t}\n\treturn &RedisStore{\n\t\tpool:              pool,\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (s *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\tmarshaled, err := json.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\targs := []interface{}{key, marshaled}\n\tif expires > 0 {\n\t\targs = append(args, \"EX\", int64(expires.Seconds()))\n\t}\n\n\t_, err = f(\"SET\", args...)\n\treturn err\n}\n\nfunc (s *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\tif expires == 0 {\n\t\texpires = s.defaultExpiration\n\t}\n\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\n\treturn s.invoke(conn.Do, key, value, expires)\n}\n\nfunc (s *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\n\tval, err := redis.String(conn.Do(\"GET\", key))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn json.Unmarshal([]byte(val), ptrValue)\n}\n\nfunc (s *RedisStore) Delete(key string) error {\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (s *RedisStore) Flush() error {\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"FLUSHDB\")\n\treturn err\n}"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Redis client struct in Go that manages connections to Redis servers and provides common Redis operations. The implementation should use connection pooling and support thread-safe access to multiple Redis instances.\n\nStruct Description: RedisClient is a struct that encapsulates Redis connection pooling and provides methods for common Redis operations. It maintains a thread-safe map of Redis clients for different server addresses.\n\nFields:\n\npool: *redis.Pool - The connection pool for Redis operations\nAddress: string - The Redis server address (URL)\n\nMethods:\n\nGetRedisClient: (address string, maxIdle int, maxActive int) -> *RedisClient - Retrieves or creates a Redis client for the given address with specified pool settings\nGet: (key string) -> (string, error) - Retrieves the value for a given key from Redis\nSet: (key string, val interface{}) -> (interface{}, error) - Sets the value for a given key in Redis\nLPush: (key string, value ...interface{}) -> (int, error) - Pushes values to the left of a Redis list\nLPop: (key string) -> (string, error) - Pops a value from the left of a Redis list\nHSet: (hashID string, field string, val string) -> error - Sets a field in a Redis hash\nHGet: (hashID string, field string) -> (string, error) - Gets a field from a Redis hash",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\tAddress string\n}\n\nvar (\n\tredisMap map[string]*RedisClient\n\tmapMutex *sync.RWMutex\n)\n\nconst (\n\tdefaultMaxIdle   = 10\n\tdefaultMaxActive = 50\n)\n\nfunc init() {\n\tredisMap = make(map[string]*RedisClient)\n\tmapMutex = new(sync.RWMutex)\n}\n\nfunc newPool(redisURL string, maxIdle, maxActive int) *redis.Pool {\n\treturn &redis.Pool{\n\t\tMaxIdle:   maxIdle,\n\t\tMaxActive: maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.DialURL(redisURL)\n\t\t\treturn c, err\n\t\t},\n\t}\n}\n\nfunc GetRedisClient(address string, maxIdle, maxActive int) *RedisClient {\n\tif maxIdle <= 0 {\n\t\tmaxIdle = defaultMaxIdle\n\t}\n\tif maxActive <= 0 {\n\t\tmaxActive = defaultMaxActive\n\t}\n\tvar redis *RedisClient\n\tvar mok bool\n\tmapMutex.RLock()\n\tredis, mok = redisMap[address]\n\tmapMutex.RUnlock()\n\tif !mok {\n\t\tredis = &RedisClient{Address: address, pool: newPool(address, maxIdle, maxActive)}\n\t\tmapMutex.Lock()\n\t\tredisMap[address] = redis\n\t\tmapMutex.Unlock()\n\t}\n\treturn redis\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"GET\", key)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"SET\", key, val))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tret, err := redis.Int(conn.Do(\"LPUSH\", key, value))\n\treturn ret, err\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"LPOP\", key))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"HGET\", hashID, field)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gomodule/redigo/redis\"\n\t\"sync\"\n)\n\nvar (\n\tclientMap sync.Map\n\tmu        sync.Mutex\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\tAddress string\n}\n\nfunc GetRedisClient(address string, maxIdle, maxActive int) *RedisClient {\n\tval, ok := clientMap.Load(address)\n\tif ok {\n\t\treturn val.(*RedisClient)\n\t}\n\n\tmu.Lock()\n\tdefer mu.Unlock()\n\n\tval, ok = clientMap.Load(address)\n\tif ok {\n\t\treturn val.(*RedisClient)\n\t}\n\n\tpool := &redis.Pool{\n\t\tMaxIdle:   maxIdle,\n\t\tMaxActive: maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\treturn redis.Dial(\"tcp\", address)\n\t\t},\n\t}\n\n\tclient := &RedisClient{\n\t\tpool:    pool,\n\t\tAddress: address,\n\t}\n\n\tclientMap.Store(address, client)\n\treturn client\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"GET\", key))\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn conn.Do(\"SET\", key, val)\n}\n\nfunc (rc *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\targs := make([]interface{}, len(value)+1)\n\targs[0] = key\n\tcopy(args[1:], value)\n\treturn redis.Int(conn.Do(\"LPUSH\", args...))\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"LPOP\", key))\n}\n\nfunc (rc *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"HGET\", hashID, field))\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both querying and writing data with configurable settings like authentication, timeout, and TLS.\n\nStruct Description: The Client struct represents an InfluxDB client with configuration for server connection, authentication, and HTTP transport settings.\n\nFields:\n- url: url.URL - The base URL of the InfluxDB server\n- username: string - Username for basic authentication\n- password: string - Password for basic authentication\n- httpClient: *http.Client - Custom HTTP client with timeout and transport settings\n- userAgent: string - User agent string for HTTP requests\n- precision: string - Precision for timestamps in queries and writes\n\nMethods:\n- NewClient: [Name](Config) -> (*Client, error) - Creates a new InfluxDB client with the given configuration\n- Query: [Name](Query) -> (*Response, error) - Executes a query against the InfluxDB server and returns the response\n- Write: [Name](BatchPoints) -> (*Response, error) - Writes batch points to the InfluxDB server and returns the response",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: c.UnsafeSsl,\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) Query(q Query) (*Response, error) {\n\tu := c.url\n\n\tu.Path = \"query\"\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = \"write\"\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package influxdb\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"golang.org/x/net/context\"\n)\n\ntype Config struct {\n\tURL         url.URL\n\tUsername    string\n\tPassword    string\n\tTimeout     time.Duration\n\tTLSConfig   *tls.Config\n\tUserAgent   string\n\tPrecision   string\n}\n\ntype Client struct {\n\turl         url.URL\n\tusername    string\n\tpassword    string\n\thttpClient  *http.Client\n\tuserAgent   string\n\tprecision   string\n}\n\nfunc NewClient(config Config) (*Client, error) {\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: config.TLSConfig,\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   config.Timeout,\n\t}\n\n\tuserAgent := config.UserAgent\n\tif userAgent == \"\" {\n\t\tuserAgent = \"Go-InfluxDB-Client\"\n\t}\n\n\treturn &Client{\n\t\turl:        config.URL,\n\t\tusername:   config.Username,\n\t\tpassword:   config.Password,\n\t\thttpClient: httpClient,\n\t\tuserAgent:  userAgent,\n\t\tprecision:  config.Precision,\n\t}, nil\n}\n\ntype Query struct {\n\tCommand  string\n\tDatabase string\n}\n\ntype Response struct {\n\tBody []byte\n}\n\nfunc (c *Client) Query(q Query) (*Response, error) {\n\tu := c.url.ResolveReference(&url.URL{Path: \"query\"})\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(c.username, c.password)\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode >= 400 {\n\t\treturn &Response{Body: body}, fmt.Errorf(\"query error: %d: %s\", resp.StatusCode, body)\n\t}\n\n\treturn &Response{Body: body}, nil\n}\n\ntype Point struct {\n\tMeasurement string\n\tTags        map[string]string\n\tFields      map[string]interface{}\n\tTime        time.Time\n}\n\ntype BatchPoints struct {\n\tDatabase        string\n\tRetentionPolicy string\n\tPrecision       string\n\tPoints          []Point\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tvar b bytes.Buffer\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t\tif precision == \"\" {\n\t\t\tprecision = \"n\"\n\t\t}\n\t}\n\n\tfor _, p := range bp.Points {\n\t\tb.WriteString(p.Measurement)\n\n\t\tfor k, v := range p.Tags {\n\t\t\tb.WriteByte(',')\n\t\t\tb.WriteString(k)\n\t\t\tb.WriteByte('=')\n\t\t\tb.WriteString(v)\n\t\t}\n\n\t\tb.WriteByte(' ')\n\n\t\tfirstField := true\n\t\tfor k, v := range p.Fields {\n\t\t\tif !firstField {\n\t\t\t\tb.WriteByte(',')\n\t\t\t}\n\t\t\tb.WriteString(k)\n\t\t\tb.WriteByte('=')\n\n\t\t\tswitch v := v.(type) {\n\t\t\tcase float64:\n\t\t\t\tb.WriteString(fmt.Sprintf(\"%g\", v))\n\t\t\tcase int64:\n\t\t\t\tb.WriteString(fmt.Sprintf(\"%d\", v))\n\t\t\tcase string:\n\t\t\t\tb.WriteByte('\"')\n\t\t\t\tb.WriteString(v)\n\t\t\t\tb.WriteByte('\"')\n\t\t\tcase bool:\n\t\t\t\tif v {\n\t\t\t\t\tb.WriteByte('t')\n\t\t\t\t} else {\n\t\t\t\t\tb.WriteByte('f')\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn nil, fmt.Errorf(\"unsupported field type: %T\", v)\n\t\t\t}\n\t\t\tfirstField = false\n\t\t}\n\n\t\tif !p.Time.IsZero() {\n\t\t\tvar t int64\n\t\t\tswitch precision {\n\t\t\tcase \"n\":\n\t\t\t\tt = p.Time.UnixNano()\n\t\t\tcase \"u\":\n\t\t\t\tt = p.Time.UnixNano() / 1000\n\t\t\tcase \"ms\":\n\t\t\t\tt = p.Time.UnixNano() / 1e6\n\t\t\tcase \"s\":\n\t\t\t\tt = p.Time.Unix()\n\t\t\tdefault:\n\t\t\t\treturn nil, fmt.Errorf(\"unsupported precision: %s\", precision)\n\t\t\t}\n\n\t\t\tb.WriteByte(' ')\n\t\t\tb.WriteString(fmt.Sprintf(\"%d\", t))\n\t\t}\n\n\t\tb.WriteByte('\\n')\n\t}\n\n\tu := c.url.ResolveReference(&url.URL{Path: \"write\"})\n\tvalues := u.Query()\n\tvalues.Set(\"db\", bp.Database)\n\tif bp.RetentionPolicy != \"\" {\n\t\tvalues.Set(\"rp\", bp.RetentionPolicy)\n\t}\n\tif precision != \"\" {\n\t\tvalues.Set(\"precision\", precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(c.username, c.password)\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\treq.Header.Set(\"Content-Type\", \"application/octet-stream\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode >= 400 {\n\t\treturn &Response{Body: body}, fmt.Errorf(\"write error: %d: %s\", resp.StatusCode, body)\n\t}\n\n\treturn &Response{Body: body}, nil\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function to fetch video materials from an advertising API using HTTP requests with custom headers and process the response.\n\nFunction Description: The function `getVideo` makes a GET request to a specified API endpoint to retrieve video materials for a given advertiser. It handles request creation, header addition, response processing, and error handling. The response is parsed to extract video information and store it in a global map while returning pagination information.\n\nInput:\n- advertiserId: string - The ID of the advertiser whose videos are being requested\n- page: int - The page number for paginated results\n\nOutput:\n- int - Total number of pages available (for pagination)\n- error - Any error encountered during the HTTP request or response processing",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar videoImageIdMaterialIdMap = map[string]int64{}\n\nfunc getVideo(advertiserId string, page int) (int, error) {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/video/get/\"\n\tmethod := \"GET\"\n\tpayload := strings.NewReader(fmt.Sprintf(`{\n    \t\t\t\"advertiser_id\": %s,\n   \t\t\t\t \"page\":%d,\n   \t\t\t\t \"page_size\":100}`, advertiserId, page))\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq.Header.Add(\"Access-Token\", \"c0bfed085c0dbc19bb2e41920ecd6d2a6d398b32\")\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tvar getVideoMaterialResp GetVideoMaterialResp\n\terr = json.Unmarshal(body, &getVideoMaterialResp)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tif getVideoMaterialResp.Code != 0 {\n\t\treturn 0, err\n\t}\n\tfor _, s := range getVideoMaterialResp.Data.List {\n\t\tvideoImageIdMaterialIdMap[s.Id] = s.MaterialId\n\t}\n\treturn getVideoMaterialResp.Data.PageInfo.TotalPage, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype VideoData struct {\n\tID  string `json:\"id\"`\n\tURL string `json:\"url\"`\n}\n\nvar videoCache = make(map[string][]VideoData)\n\nfunc getVideo(advertiserId string, page int) (int, error) {\n\turl := fmt.Sprintf(\"https://api.example.com/videos?advertiser_id=%s&page=%d\", advertiserId, page)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer YOUR_ACCESS_TOKEN\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\treq.Header.Set(\"X-Custom-Header\", \"CustomValue\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tbodyBytes, _ := io.ReadAll(resp.Body)\n\t\treturn 0, fmt.Errorf(\"API request failed with status %d: %v\", resp.StatusCode, string(bodyBytes))\n\t}\n\n\tvar response struct {\n\t\tTotalPages int       `json:\"total_pages\"`\n\t\tVideos     []VideoData `json:\"videos\"`\n\t}\n\n\tif err := json.NewDecoder(resp.Body).Decode(&response); err != nil {\n\t\treturn 0, err\n\t}\n\n\tvideoCache[advertiserId] = response.Videos\n\n\treturn response.TotalPages, nil\n}"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages to brokers using different modes (Sync, Async, or OneWay) with configurable options.\n\nStruct Description: The Producer struct encapsulates a RocketMQ producer client with methods for starting, closing, and sending messages. It supports configuration options and interceptors.\n\nFields:\n\n- started: bool - Indicates whether the producer has been started\n- Producer: rocketmq.Producer - The underlying RocketMQ producer instance\n- name: string - Name identifier for the producer\n- ProducerConfig: ProducerConfig - Configuration settings for the producer\n- interceptors: []primitive.Interceptor - List of interceptors for message processing\n\nMethods:\n\n- Start() -> error - Initializes and starts the RocketMQ producer with configured options\n- Close() -> error - Shuts down the producer gracefully\n- SendWithContext(ctx context.Context, msg []byte) -> error - Sends a byte array message with context\n- SendWithMsg(ctx context.Context, msg *primitive.Message) -> error - Sends a primitive.Message with context\n- SendWithResult(ctx context.Context, msg []byte, tag string) -> (*primitive.SendResult, error) - Sends a message with tag and returns send result\n- SendMsg(ctx context.Context, msg *primitive.Message) -> (*primitive.SendResult, error) - Sends a message and returns send result",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/douyu/jupiter/pkg/xlog\"\n)\n\ntype Producer struct {\n\tstarted bool\n\n\trocketmq.Producer\n\tname string\n\tProducerConfig\n\tinterceptors []primitive.Interceptor\n}\n\nfunc (pc *Producer) Start() error {\n\tif pc.started {\n\t\treturn nil\n\t}\n\n\tclient, err := rocketmq.NewProducer(\n\t\tproducer.WithGroupName(pc.Group),\n\t\tproducer.WithNameServer(pc.Addr),\n\t\tproducer.WithRetry(pc.Retry),\n\t\tproducer.WithInterceptor(pc.interceptors...),\n\t\tproducer.WithInstanceName(pc.InstanceName),\n\t\tproducer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: pc.AccessKey,\n\t\t\tSecretKey: pc.SecretKey,\n\t\t}),\n\t)\n\tif err != nil {\n\t\txlog.Jupiter().Panic(\"create producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tif err := client.Start(); err != nil {\n\t\txlog.Jupiter().Panic(\"start producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tpc.started = true\n\tpc.Producer = client\n\treturn nil\n}\n\nfunc (pc *Producer) Close() error {\n\terr := pc.Shutdown()\n\tif err != nil {\n\t\txlog.Jupiter().Warn(\"consumer close fail\", xlog.Any(\"error\", err.Error()))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\t_, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tmsg.Topic = pc.Topic\n\t_, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\tif tag != \"\" {\n\t\tm.WithTag(tag)\n\t}\n\n\tres, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", string(msg)))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}\n\nfunc (pc *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tres, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 127,
    "wrong_result": "package rocketmq\n\nimport (\n\t\"context\"\n\t\"errors\"\n\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n)\n\ntype ProducerConfig struct {\n\tGroupName  string\n\tTopic      string\n\tNameServer string\n\tRetry      int32\n\tSendMode   string\n}\n\ntype Producer struct {\n\tstarted        bool\n\tProducer       producer.Producer\n\tname           string\n\tProducerConfig ProducerConfig\n\tinterceptors   []primitive.Interceptor\n}\n\nfunc (p *Producer) Start() error {\n\tif p.started {\n\t\treturn nil\n\t}\n\topts := []producer.Option{\n\t\tproducer.WithGroupName(p.ProducerConfig.GroupName),\n\t\tproducer.WithNameServer([]string{p.ProducerConfig.NameServer}),\n\t\tproducer.WithInterceptors(p.interceptors...),\n\t}\n\tif p.ProducerConfig.Retry > 0 {\n\t\topts = append(opts, producer.WithRetry(p.ProducerConfig.Retry))\n\t}\n\tp.Producer = producer.NewProducer(opts...)\n\tif err := p.Producer.Start(); err != nil {\n\t\treturn err\n\t}\n\tp.started = true\n\treturn nil\n}\n\nfunc (p *Producer) Close() error {\n\tif !p.started {\n\t\treturn nil\n\t}\n\tif err := p.Producer.Shutdown(); err != nil {\n\t\treturn err\n\t}\n\tp.started = false\n\treturn nil\n}\n\nfunc (p *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tmessage := primitive.NewMessage(p.ProducerConfig.Topic, msg)\n\tswitch p.ProducerConfig.SendMode {\n\tcase \"SYNC\":\n\t\t_, err := p.Producer.Send(ctx, message)\n\t\treturn err\n\tcase \"ONEWAY\":\n\t\treturn p.Producer.SendOneway(ctx, message)\n\tdefault:\n\t\treturn errors.New(\"unsupported send mode\")\n\t}\n}\n\nfunc (p *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tswitch p.ProducerConfig.SendMode {\n\tcase \"SYNC\":\n\t\t_, err := p.Producer.Send(ctx, msg)\n\t\treturn err\n\tcase \"ONEWAY\":\n\t\treturn p.Producer.SendOneway(ctx, msg)\n\tdefault:\n\t\treturn errors.New(\"unsupported send mode\")\n\t}\n}\n\nfunc (p *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tmessage := primitive.NewMessage(p.ProducerConfig.Topic, msg)\n\tmessage.SetTags(tag)\n\treturn p.Producer.Send(ctx, message)\n}\n\nfunc (p *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\treturn p.Producer.Send(ctx, msg)\n}"
  },
  {
    "Task_id": 304,
    "Instruction": "Task Description: Implement a stock quote service that retrieves stock information from an external API and processes the response.\n\nStruct Description: The Stock struct represents a service for fetching stock quotes. It contains configuration fields for API access and implements methods to retrieve quote information.\n\nFields:\nApi: [string] - The base URL of the stock API service\nKey: [string] - The API key used for authentication with the stock service\n\nMethods:\nQuote: [Name](ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) -> [error] - Retrieves stock quote information for a given symbol. Validates the input symbol, makes an HTTP GET request to the stock API, processes the response, and populates the response object with the quote data. Returns error if any step fails.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"github.com/micro/micro/v5/service/errors\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/stock/proto\"\n)\n\ntype Stock struct {\n\tApi   string\n\tKey   string\n}\n\nfunc (s *Stock) Quote(ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) error {\n\tif len(req.Symbol) <= 0 || len(req.Symbol) > 5 {\n\t\treturn errors.BadRequest(\"stock.quote\", \"invalid symbol\")\n\t}\n\n\turi := fmt.Sprintf(\"%slast/stock/%s?apikey=%s\", s.Api, req.Symbol, s.Key)\n\n\tresp, err := http.Get(uri)\n\tif err != nil {\n\t\tlogger.Errorf(\"Failed to get quote: %v\\n\", err)\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\tdefer resp.Body.Close()\n\n\tb, _ := ioutil.ReadAll(resp.Body)\n\n\tif resp.StatusCode != 200 {\n\t\tlogger.Errorf(\"Failed to get quote (non 200): %d %v\\n\", resp.StatusCode, string(b))\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\n\tvar respBody struct {\n\t\tSymbol    string\n\t\tAsk       float64\n\t\tBid       float64\n\t\tAsize     int32\n\t\tBsize     int32\n\t\tTimestamp int64\n\t}\n\n\tif err := json.Unmarshal(b, &respBody); err != nil {\n\t\tlogger.Errorf(\"Failed to unmarshal quote: %v\\n\", err)\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\n\trsp.Symbol = respBody.Symbol\n\trsp.AskPrice = respBody.Ask\n\trsp.BidPrice = respBody.Bid\n\trsp.AskSize = respBody.Asize\n\trsp.BidSize = respBody.Bsize\n\trsp.Timestamp = respBody.Timestamp\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "wrong_result": "package stock\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype Stock struct {\n\tApi string\n\tKey string\n}\n\nfunc (s *Stock) Quote(ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) error {\n\tif req.Symbol == \"\" {\n\t\treturn errors.New(\"symbol is required\")\n\t}\n\n\turl := fmt.Sprintf(\"%s/quote?symbol=%s\", s.Api, req.Symbol)\n\thttpReq, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\thttpReq.Header.Set(\"Authorization\", \"Bearer \"+s.Key)\n\tclient := &http.Client{}\n\tresp, err := client.Do(httpReq)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"api error: status code %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar data struct {\n\t\tSymbol string  `json:\"symbol\"`\n\t\tPrice  float64 `json:\"price\"`\n\t}\n\tif err := json.Unmarshal(body, &data); err != nil {\n\t\treturn err\n\t}\n\n\trsp.Symbol = data.Symbol\n\trsp.Price = data.Price\n\treturn nil\n}"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The function handles error cases including failed requests and non-200 status codes. When caching is enabled, subsequent requests for the same URL will return the cached content.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput:\n- `[]byte` - The content of the fetched file as a byte slice\n- `error` - An error object if any step fails (network error, non-200 status, etc.)\n\nNote: The function relies on package-level variables `fileCache` (a map for caching), `fileCacheMutex` (for thread safety), `fileCacheEnable` (boolean to toggle caching), and `verboseReader` (boolean for logging). These should be properly initialized before use.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tfileCache       = make(map[string][]byte)\n\tfileCacheMutex  sync.Mutex\n\tfileCacheEnable = true\n\tverboseReader   = false\n)\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tif fileCacheEnable {\n\t\tfileCacheMutex.Lock()\n\t\tif data, ok := fileCache[fileurl]; ok {\n\t\t\tif verboseReader {\n\t\t\t\tfmt.Printf(\"Using cached content for %s\\n\", fileurl)\n\t\t\t}\n\t\t\tfileCacheMutex.Unlock()\n\t\t\treturn data, nil\n\t\t}\n\t\tfileCacheMutex.Unlock()\n\t}\n\n\tif verboseReader {\n\t\tfmt.Printf(\"Fetching file from %s\\n\", fileurl)\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tdata, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fileCacheEnable {\n\t\tfileCacheMutex.Lock()\n\t\tfileCache[fileurl] = data\n\t\tfileCacheMutex.Unlock()\n\t}\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a function to download a file from a given URL, apply an optional filter to the content, and save it to specified directories.\n\nFunction Description: The function `dl` downloads a file from a provided URL, reads its content, applies an optional filter (if provided), and writes the content to one or more specified directories. It handles errors during the HTTP request, reading the response, and file writing, and provides status feedback via console output.\n\nInput:  \n- `f` (type `dlFile`): A struct containing the following fields:  \n  - `name` (string): The name of the file to be saved.  \n  - `url` (string): The URL from which the file will be downloaded.  \n  - `filt` (func([]byte) []byte): An optional function to filter/modify the downloaded content. Can be `nil` if no filtering is needed.  \n  - `dirs` ([]string): A slice of directory paths where the file will be saved.  \n\nOutput:  \n- None (void): The function does not return any value but prints status messages to the console (e.g., \"Sync [filename]: ok\" on success or error messages on failure).  \n\nNote: The function handles errors for HTTP requests, reading response bodies, and file writing, and ensures the response body is closed properly to prevent resource leaks.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"path/filepath\"\n)\n\nfunc dl(f dlFile) {\n\tfmt.Printf(\"Sync %s: \", f.name)\n\n\tresp, err := http.Get(f.url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tif f.filt != nil {\n\t\tcontent = f.filt(content)\n\t}\n\n\tfor _, dir := range f.dirs {\n\t\tioutil.WriteFile(filepath.Join(dir, f.name), content, 0644)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tfmt.Println(\"ok\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\ntype dlFile struct {\n\tname string\n\turl  string\n\tfilt func([]byte) []byte\n\tdirs []string\n}\n\nfunc dl(f dlFile) {\n\tresp, err := http.Get(f.url)\n\tif err != nil {\n\t\tfmt.Printf(\"Sync %s: error: %v\\n\", f.name, err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tfmt.Printf(\"Sync %s: error: HTTP status %s\\n\", f.name, resp.Status)\n\t\treturn\n\t}\n\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Sync %s: error: %v\\n\", f.name, err)\n\t\treturn\n\t}\n\n\tif f.filt != nil {\n\t\tcontent = f.filt(content)\n\t}\n\n\tif len(f.dirs) == 0 {\n\t\tfmt.Printf(\"Sync %s: error: no directories specified\\n\", f.name)\n\t\treturn\n\t}\n\n\tsuccess := false\n\tfor _, dir := range f.dirs {\n\t\terr := os.MkdirAll(dir, 0755)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Sync %s: error: %v\\n\", f.name, err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfilePath := filepath.Join(dir, f.name)\n\t\terr = os.WriteFile(filePath, content, 0644)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Sync %s: error: %v\\n\", f.name, err)\n\t\t\tcontinue\n\t\t}\n\t\tsuccess = true\n\t}\n\n\tif success {\n\t\tfmt.Printf(\"Sync %s: ok\\n\", f.name)\n\t}\n}"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: Implement a function to fetch and process Google Font CSS data for embedding in SVG documents.\n\nFunction Description: The function `googlefont` retrieves CSS data from Google Fonts API for a specified font family, embeds it in SVG-compatible format, and returns available font variants. It handles HTTP requests, response processing, and error cases gracefully.\n\nInput: \n- `f` [string] - The font family name to query (e.g., \"Roboto\" or \"Open Sans\")\n\nOutput:\n- `[]string` - A slice of strings representing available font variants (split by \"|\"), or an empty slice if the request fails or returns non-200 status",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar (\n\tcanvas = svg.New(os.Stdout)\n)\n\nconst (\n\tgwfURI  = \"http://fonts.googleapis.com/css?family=\"\n\tfontfmt = \"<style type=\\\"text/css\\\">\\n<![CDATA[\\n%s]]>\\n</style>\\n\"\n)\n\nfunc googlefont(f string) []string {\n\tempty := []string{}\n\tr, err := http.Get(gwfURI + url.QueryEscape(f))\n\tif err != nil {\n\t\treturn empty\n\t}\n\tdefer r.Body.Close()\n\tb, rerr := ioutil.ReadAll(r.Body)\n\tif rerr != nil || r.StatusCode != http.StatusOK {\n\t\treturn empty\n\t}\n\tcanvas.Def()\n\tfmt.Fprintf(canvas.Writer, fontfmt, b)\n\tcanvas.DefEnd()\n\treturn strings.Split(fontlist, \"|\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"regexp\"\n\t\"strings\"\n)\n\nfunc googlefont(f string) []string {\n\tresp, err := http.Get(\"https://fonts.googleapis.com/css2?family=\" + url.QueryEscape(f) + \"&display=swap\")\n\tif err != nil {\n\t\treturn []string{}\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn []string{}\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn []string{}\n\t}\n\n\tre := regexp.MustCompile(`@font-face\\s*{([^}]*)}`)\n\tmatches := re.FindAllStringSubmatch(string(body), -1)\n\n\tvariants := make(map[string]bool)\n\tfor _, m := range matches {\n\t\tblock := m[1]\n\n\t\tfontWeight := \"400\"\n\t\tif fw := regexp.MustCompile(`font-weight\\s*:\\s*(\\d+)`).FindStringSubmatch(block); len(fw) > 1 {\n\t\t\tfontWeight = fw[1]\n\t\t}\n\n\t\tfontStyle := \"normal\"\n\t\tif fs := regexp.MustCompile(`font-style\\s*:\\s*([a-z]+)`).FindStringSubmatch(block); len(fs) > 1 {\n\t\t\tfontStyle = strings.ToLower(fs[1])\n\t\t}\n\n\t\tvariant := fontWeight\n\t\tif fontStyle != \"normal\" {\n\t\t\tvariant += fontStyle\n\t\t}\n\t\tvariants[variant] = true\n\t}\n\n\tvar result []string\n\tfor v := range variants {\n\t\tresult = append(result, v)\n\t}\n\treturn result\n}"
  },
  {
    "Task_id": 308,
    "Instruction": "Task Description: Create a function that fetches memory statistics from a specified URL using HTTP GET request and returns the response body.\n\nFunction Description: The function `defaultMemstatsClient` makes an HTTP GET request to the provided URL to fetch memory statistics. It handles the response by reading the body and ensures proper resource cleanup by deferring the closure of the response body. Errors during the request or response handling are returned to the caller.\n\nInput: \n- `url` (string): The URL from which to fetch the memory statistics.\n\nOutput: \n- `[]byte`: The response body containing the memory statistics.\n- `error`: An error object if the HTTP request or response reading fails; otherwise, `nil`.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tutil.Debug(\"Fetching memstats from %s\", url)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tdata, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn data, nil\n}"
  },
  {
    "Task_id": 309,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL with optional custom headers and client configuration, while implementing safety measures like response size limiting and proper resource cleanup.\n\nFunction Description: The function `ReadURL` makes an HTTP GET request to the specified URL using a provided HTTP client and optional headers. It ensures proper resource cleanup, checks for successful response status, limits the maximum readable response size, and returns the response body or an error if any step fails.\n\nInput:\n- `url` [string] - The URL to send the GET request to\n- `client` [*http.Client] - The HTTP client to use for the request (can be nil to use http.DefaultClient)\n- `header` [*http.Header] - Optional headers to include in the request (can be nil)\n\nOutput:\n- `body` [[]byte] - The response body if the request is successful\n- `err` [error] - An error object if any step fails, including:\n  - Request creation failure\n  - Network errors\n  - Non-200 status codes (wrapped in HTTPError)\n  - Read errors\n  - Response size exceeding limit",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nconst (\n\tmaxReadLength = 10 * 1 << 20\n)\n\nfunc ReadURL(url string, client *http.Client, header *http.Header) (body []byte, err error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif header != nil {\n\t\treq.Header = *header\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, &HTTPError{\n\t\t\tStatusCode: resp.StatusCode,\n\t\t\tURL:        url,\n\t\t}\n\t}\n\n\tlimitedReader := &io.LimitedReader{R: resp.Body, N: maxReadLength}\n\tcontents, err := ioutil.ReadAll(limitedReader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif limitedReader.N <= 0 {\n\t\treturn nil, errors.New(\"the read limit is reached\")\n\t}\n\n\treturn contents, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"net/http\"\n)\n\nconst maxResponseSize = 10 * 1024 * 1024 // 10 MB\n\ntype HTTPError struct {\n\tCode int\n\tMsg  string\n}\n\nfunc (e *HTTPError) Error() string {\n\treturn e.Msg\n}\n\nfunc ReadURL(url string, client *http.Client, header *http.Header) ([]byte, error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif header != nil {\n\t\treq.Header = *header\n\t}\n\n\tif client == nil {\n\t\tclient = http.DefaultClient\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, &HTTPError{\n\t\t\tCode: resp.StatusCode,\n\t\t\tMsg:  \"HTTP request failed with status code \" + resp.Status,\n\t\t}\n\t}\n\n\treader := io.LimitReader(resp.Body, maxResponseSize+1)\n\tbody, err := io.ReadAll(reader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(body) > maxResponseSize {\n\t\treturn nil, errors.New(\"response size exceeds limit\")\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: The task involves creating a struct and associated method to handle chunked file uploads to a remote server using HTTP PUT requests with proper content range headers.\n\nStruct Description: The UploadSession struct represents an ongoing file upload session, tracking upload state, metadata, and providing methods for chunked upload operations.\n\nFields:\n\nID: string - Unique identifier for the upload session\nOldID: string - Previous session ID (if applicable)\nParentID: string - ID of parent directory\nNodeID: uint64 - Filesystem node identifier\nName: string - Name of the file being uploaded\nExpirationDateTime: time.Time - When the upload session expires\nSize: uint64 - Total size of the file in bytes\nData: []byte - File content data being uploaded\nQuickXORHash: string - File content hash\nModTime: time.Time - File modification time\nretries: int - Number of upload retry attempts\nUploadURL: string - Server endpoint for chunk uploads\nETag: string - Entity tag from server response\nstate: int - Current upload state\nerror: error - Last encountered error\nsync.Mutex: - Mutex for thread-safe operations\n\nMethods:\n\nuploadChunk: (auth *graph.Auth, offset uint64) -> ([]byte, int, error) - Uploads a file chunk starting at specified offset. Returns response body, HTTP status code, and error if any. Handles authentication refresh and proper Content-Range headers.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/jstaf/onedriver/fs/graph\"\n\t\"github.com/rs/zerolog/log\"\n)\n\ntype UploadSession struct {\n\tID                 string    `json:\"id\"`\n\tOldID              string    `json:\"oldID\"`\n\tParentID           string    `json:\"parentID\"`\n\tNodeID             uint64    `json:\"nodeID\"`\n\tName               string    `json:\"name\"`\n\tExpirationDateTime time.Time `json:\"expirationDateTime\"`\n\tSize               uint64    `json:\"size,omitempty\"`\n\tData               []byte    `json:\"data,omitempty\"`\n\tQuickXORHash       string    `json:\"quickxorhash,omitempty\"`\n\tModTime            time.Time `json:\"modTime,omitempty\"`\n\tretries            int\n\n\tsync.Mutex\n\tUploadURL string `json:\"uploadUrl\"`\n\tETag      string `json:\"eTag,omitempty\"`\n\tstate     int\n\terror\n}\n\nfunc (u *UploadSession) uploadChunk(auth *graph.Auth, offset uint64) ([]byte, int, error) {\n\tu.Lock()\n\turl := u.UploadURL\n\tif url == \"\" {\n\t\tu.Unlock()\n\t\treturn nil, -1, errors.New(\"UploadSession UploadURL cannot be empty\")\n\t}\n\tu.Unlock()\n\n\tend := offset + uploadChunkSize\n\tvar reqChunkSize uint64\n\tif end > u.Size {\n\t\tend = u.Size\n\t\treqChunkSize = end - offset + 1\n\t}\n\tif offset > u.Size {\n\t\treturn nil, -1, errors.New(\"offset cannot be larger than DriveItem size\")\n\t}\n\n\tauth.Refresh()\n\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\n\t\t\"PUT\",\n\t\turl,\n\t\tbytes.NewReader((u.Data)[offset:end]),\n\t)\n\trequest.Header.Add(\"Content-Length\", strconv.Itoa(int(reqChunkSize)))\n\tfrags := fmt.Sprintf(\"bytes %d-%d/%d\", offset, end-1, u.Size)\n\tlog.Info().Str(\"id\", u.ID).Msg(\"Uploading \" + frags)\n\trequest.Header.Add(\"Content-Range\", frags)\n\n\tresp, err := client.Do(request)\n\tif err != nil {\n\t\treturn nil, -1, err\n\t}\n\tdefer resp.Body.Close()\n\tresponse, _ := ioutil.ReadAll(resp.Body)\n\treturn response, resp.StatusCode, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype UploadSession struct {\n\tID               string\n\tOldID            string\n\tParentID         string\n\tNodeID           uint64\n\tName             string\n\tExpirationDateTime time.Time\n\tSize             uint64\n\tData             []byte\n\tQuickXORHash     string\n\tModTime          time.Time\n\tretries          int\n\tUploadURL        string\n\tETag             string\n\tstate            int\n\terr              error\n\tsync.Mutex\n)\n\nfunc (us *UploadSession) uploadChunk(auth *Auth, offset uint64) ([]byte, int, error) {\n\tus.Lock()\n\tdefer us.Unlock()\n\n\tif time.Now().After(us.ExpirationDateTime) {\n\t\tus.err = errors.New(\"upload session expired\")\n\t\treturn nil, http.StatusGone, us.err\n\t}\n\n\tif auth.NeedsRefresh() {\n\t\tif err := auth.Refresh(); err != nil {\n\t\t\tus.err = err\n\t\t\treturn nil, http.StatusUnauthorized, us.err\n\t\t}\n\t}\n\n\tconst chunkSize = 10 * 1024 * 1024 // 10 MB default\n\tend := offset + chunkSize\n\tif end > us.Size {\n\t\tend = us.Size\n\t}\n\n\tcontentRange := fmt.Sprintf(\"bytes %d-%d/%d\", offset, end-1, us.Size)\n\tchunk := us.Data[offset:end]\n\n\treq, err := http.NewRequest(\"PUT\", us.UploadURL, bytes.NewReader(chunk))\n\tif err != nil {\n\t\tus.retries++\n\t\tus.err = err\n\t\treturn nil, http.StatusInternalServerError, us.err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/octet-stream\")\n\treq.Header.Set(\"Content-Range\", contentRange)\n\treq.Header.Set(\"Authorization\", \"Bearer \"+auth.Token)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tus.retries++\n\t\tus.err = err\n\t\treturn nil, http.StatusServiceUnavailable, us.err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tus.err = err\n\t\treturn nil, resp.StatusCode, us.err\n\t}\n\n\tif etag := resp.Header.Get(\"ETag\"); etag != \"\" {\n\t\tus.ETag = etag\n\t}\n\n\tswitch resp.StatusCode {\n\tcase http.StatusOK, http.StatusCreated:\n\t\tus.state = 3 // Upload completed\n\tcase http.StatusPartialContent, http.StatusAccepted:\n\t\tus.state = 2 // Upload in progress\n\tdefault:\n\t\tus.state = 4 // Error state\n\t}\n\n\treturn body, resp.StatusCode, nil\n}\n\ntype Auth struct {\n\tToken string\n}\n\nfunc (a *Auth) NeedsRefresh() bool {\n\treturn false\n}\n\nfunc (a *Auth) Refresh() error {\n\treturn nil\n}"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET. It supports caching of downloaded files to avoid redundant network requests. The function handles HTTP errors, manages resource cleanup, and provides verbose logging options.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput:\n- `[]byte` - The contents of the file as a byte slice\n- `error` - Any error encountered during the fetch operation (nil if successful)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tcache   = make(map[string][]byte)\n\tcacheMu sync.Mutex\n\tverbose bool\n)\n\nfunc EnableVerboseLogging(enable bool) {\n\tverbose = enable\n}\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tcacheMu.Lock()\n\tdata, found := cache[fileurl]\n\tcacheMu.Unlock()\n\tif found {\n\t\tif verbose {\n\t\t\tlog.Printf(\"Cache hit for %s\", fileurl)\n\t\t}\n\t\treturn data, nil\n\t}\n\n\tif verbose {\n\t\tlog.Printf(\"Fetching %s from network\", fileurl)\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tdata, err = io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcacheMu.Lock()\n\tcache[fileurl] = data\n\tcacheMu.Unlock()\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a file fetcher with caching capability that retrieves files from a given URL using HTTP GET requests and caches the results to avoid redundant network calls.\n\nFunction Description: The FetchFile function checks a cache for the requested file URL. If not found in cache, it makes an HTTP GET request to fetch the file, stores the result in cache, and returns the file content. It handles errors during the fetch operation and returns appropriate status codes.\n\nInput: \n- fileurl [string]: The URL of the file to fetch\n\nOutput:\n- []byte: The content of the fetched file\n- error: Any error encountered during the fetch operation (network error, non-200 status code, or read error)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tinitializeFileCache()\n\tbytes, ok := fileCache[fileurl]\n\tif ok {\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t}\n\t\treturn bytes, nil\n\t}\n\tif verboseReader {\n\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tdefer response.Body.Close()\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tcache = make(map[string][]byte)\n\tmu    sync.Mutex\n)\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tmu.RLock()\n\tcachedData, ok := cache[fileurl]\n\tmu.RUnlock()\n\tif ok {\n\t\treturn cachedData, nil\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"HTTP error: status code %d\", resp.StatusCode)\n\t}\n\n\tdata, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmu.Lock()\n\tif existing, ok := cache[fileurl]; ok {\n\t\tmu.Unlock()\n\t\treturn existing, nil\n\t}\n\tcache[fileurl] = data\n\tmu.Unlock()\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response body as a byte slice or an error if the request fails.\n\nFunction Description: The function makes an HTTP GET request to the provided URL, reads the response body, and returns it as a byte slice. It handles errors during the request or reading process and ensures the response body is properly closed to prevent resource leaks.\n\nInput: \n- url (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- ([]byte, error): A byte slice containing the response body if the request is successful, or an error if the request fails or the response body cannot be read.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://api.github.com/repos/zyedidia/micro/releases\")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getResponseBody(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET. It supports caching of downloaded files to avoid redundant network requests. The function handles HTTP errors, manages resource cleanup, and provides verbose logging options.\n\nInput: \n- `fileurl` [string]: The URL of the file to be fetched\n\nOutput: \n- `[]byte`: The contents of the file as a byte slice if successful\n- `error`: An error object if any step fails (network error, HTTP error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tcache = make(map[string][]byte)\n\tmu    sync.Mutex\n)\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tmu.Lock()\n\tif data, ok := cache[fileurl]; ok {\n\t\tmu.Unlock()\n\t\tlog.Printf(\"Cache hit for %s\", fileurl)\n\t\treturn data, nil\n\t}\n\tmu.Unlock()\n\n\tlog.Printf(\"Fetching %s\", fileurl)\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\tlog.Printf(\"HTTP GET error: %v\", err)\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\terr := fmt.Errorf(\"HTTP status code: %d\", resp.StatusCode)\n\t\tlog.Printf(\"HTTP error: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tdata, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Printf(\"Read body error: %v\", err)\n\t\treturn nil, err\n\t}\n\n\tmu.Lock()\n\tcache[fileurl] = data\n\tmu.Unlock()\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Create a function that retrieves the version information from an etcd server using a simple HTTP GET request.\n\nFunction Description: The function `GetEtcdVersion` makes an HTTP GET request to the specified etcd server's `/version` endpoint, reads the response, and returns the version information as a string. It handles errors for connection issues, unsuccessful HTTP responses, and response body reading failures.\n\nInput: \n- `host` (string): The base URL of the etcd server (e.g., \"http://localhost:2379\")\n\nOutput: \n- (string): The version information returned by the etcd server\n- (error): An error object if any step fails (connection, non-200 response, or body reading error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\nfunc GetEtcdVersion(host string) (string, error) {\n\tresponse, err := http.Get(host + \"/version\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unsuccessful response from etcd server %q: %v\", host, err)\n\t}\n\tversionBytes, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(versionBytes), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc GetEtcdVersion(host string) (string, error) {\n\turl := host + \"/version\"\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Create a function that performs a simple HTTP GET request to a remote URL and returns the response body as a string.\n\nFunction Description: The function `remote_get` makes an HTTP GET request to the specified remote URL. It handles the response by checking the status code, reading the response body, and returning it as a string. If any errors occur during the request or response processing, they are returned as part of the error output.\n\nInput: \n- `remote` (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- (string, error): A tuple containing the response body as a string and an error. If the request is successful, the error will be nil. If an error occurs, the string will be empty, and the error will contain the relevant error message.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"remote_get: wrong status code %d\", resp.StatusCode))\n\t}\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a function to retrieve node information by making an HTTP GET request to a local server. The function should handle server setup, request execution, and response processing.\n\nFunction Description: The function `getNode` initiates an HTTP server locally, sends a GET request to retrieve node information based on the provided ID, and returns the response body as a string. It handles server lifecycle management and ensures proper resource cleanup.\n\nInput: \n- `id` [string] - The identifier of the node to retrieve\n\nOutput: \n- [string] - The response body containing the node information",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc getNode(id string) string {\n\tlchan := make(chan net.Listener)\n\thttpServe = func(l net.Listener, h http.Handler) error {\n\t\tlchan <- l\n\t\thttp.Serve(l, h)\n\t\treturn nil\n\t}\n\n\tgo func() { run(&http.ServeMux{}, 0, false, \"nbs:\"+dir) }()\n\tl := <-lchan\n\tdefer l.Close()\n\n\tr, err := http.Get(fmt.Sprintf(\"http://%s/getNode?id=%s\", l.Addr().String(), id))\n\tassert.NoError(err)\n\tdefer r.Body.Close()\n\tbody, err := ioutil.ReadAll(r.Body)\n\treturn string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc getNode(id string) string {\n\tlistener, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tdefer listener.Close()\n\n\tserver := &http.Server{\n\t\tAddr: listener.Addr().String(),\n\t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.URL.Path != \"/node\" {\n\t\t\t\thttp.NotFound(w, r)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tqueryID := r.URL.Query().Get(\"id\")\n\t\t\tif queryID == \"\" {\n\t\t\t\thttp.Error(w, \"Missing id\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Fprintf(w, `{\"id\":\"%s\", \"name\":\"Node %s\"}`, queryID, queryID)\n\t\t}),\n\t}\n\n\tgo server.Serve(listener)\n\n\turl := fmt.Sprintf(\"http://%s/node?id=%s\", listener.Addr(), id)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\tserver.Close()\n\t\treturn \"\"\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tserver.Close()\n\t\treturn \"\"\n\t}\n\n\tserver.Close()\n\treturn string(body)\n}"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to retrieve configuration data from a local admin API endpoint and returns the response body as a string.\n\nFunction Description: The function `getEffectiveConfig` makes an HTTP GET request to a specified local port's admin API endpoint (/api/v1/config_dump). It handles the response by checking the status code, reading the response body, and returning it as a string. It includes proper error handling for failed requests or non-200 status codes.\n\nInput: \n- port [uint32] - The local port number where the admin API is running\n\nOutput:\n- [string] - The response body as a string if the request is successful\n- [error] - An error object describing any issues that occurred during the request (connection error, non-200 status code, or body read error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\nfunc getEffectiveConfig(port uint32) (string, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"call admin api failed response status: %d, %s\", resp.StatusCode, string(b)))\n\t}\n\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc getEffectiveConfig(port uint32) (string, error) {\n\turl := fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\tclient := &http.Client{\n\t\tTimeout: 10 * time.Second,\n\t}\n\t\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer res.Body.Close()\n\t\n\tif res.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", res.StatusCode)\n\t}\n\t\n\tbody, err := io.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: The task involves creating a Go struct that encapsulates functionality for sending push notifications through a push service, handling HTTP communication, and processing responses. The struct should manage HTTP client configuration, request construction, and response handling for push notification delivery.\n\nStruct Description: PushServiceBase is a struct that provides base functionality for push notification services. It manages HTTP client configuration, constructs requests to a push service endpoint, handles authentication, processes responses, and manages delivery results. The struct is designed to be extended by specific push service implementations.\n\nFields:\n\nclient: [*http.Client] - Custom HTTP client configured with TLS settings and timeouts\ninitialism: [string] - Short identifier for the push service\nrawPayloadKey: [string] - Key for raw payload in notification data\nrawNotificationKey: [string] - Key for raw notification in notification data\nserviceURL: [string] - Base URL for the push service endpoint\npushServiceName: [string] - Name of the push service\n\nMethods:\n\nMakePushServiceBase: [func(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase] - Constructor that initializes the PushServiceBase with configuration and creates a custom HTTP client\n\nmulticast: [func(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification)] - Sends push notifications to multiple devices, handles HTTP communication, and processes responses. Takes push service provider, delivery points, result channel, and notification as input, and writes results to the channel\n\nToCMPayload: [func(notif *push.Notification, regIds []string) ([]byte, error)] - Converts notification to payload format (implementation not shown in reference code)\n\nhandleCMMulticastResults: [func(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification, results []CMResult)] - Processes multicast results from push service (implementation not shown in reference code)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/uniqush/uniqush-push/push\"\n\t\"github.com/uniqush/uniqush-push/util\"\n)\n\ntype PushServiceBase struct {\n\tclient             HTTPClient\n\tinitialism         string\n\trawPayloadKey      string\n\trawNotificationKey string\n\tserviceURL         string\n\tpushServiceName    string\n}\n\nfunc MakePushServiceBase(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase {\n\tconf := &tls.Config{InsecureSkipVerify: false}\n\ttr := &http.Transport{\n\t\tTLSClientConfig:     conf,\n\t\tTLSHandshakeTimeout: time.Second * 5,\n\t\tMaxIdleConnsPerHost: 500,\n\t}\n\tclient := &http.Client{\n\t\tTransport: tr,\n\t\tTimeout:   time.Second * 10,\n\t}\n\treturn PushServiceBase{\n\t\tclient:             client,\n\t\tinitialism:         initialism,\n\t\trawPayloadKey:      rawPayloadKey,\n\t\trawNotificationKey: rawNotificationKey,\n\t\tserviceURL:         serviceURL,\n\t\tpushServiceName:    pushServiceName,\n\t}\n}\n\nfunc (psb *PushServiceBase) multicast(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification) {\n\tif len(dpList) == 0 {\n\t\treturn\n\t}\n\tregIds := extractRegIds(dpList)\n\n\tjpayload, e0 := psb.ToCMPayload(notif, regIds)\n\n\tif e0 != nil {\n\t\tsendErrToEachDP(psp, dpList, resQueue, notif, e0)\n\t\treturn\n\t}\n\n\treq, e1 := http.NewRequest(\"POST\", psb.serviceURL, bytes.NewReader(jpayload))\n\tif req != nil {\n\t\tdefer req.Body.Close()\n\t}\n\tif e1 != nil {\n\t\thttpErr := push.NewErrorf(\"Error constructing HTTP request: %v\", e1)\n\t\tsendErrToEachDP(psp, dpList, resQueue, notif, httpErr)\n\t\treturn\n\t}\n\n\tapikey := psp.VolatileData[\"apikey\"]\n\n\treq.Header.Set(\"Authorization\", \"key=\"+apikey)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tr, e2 := psb.client.Do(req)\n\tif r != nil {\n\t\tdefer r.Body.Close()\n\t}\n\tif e2 != nil {\n\t\tfor _, dp := range dpList {\n\t\t\tres := new(push.Result)\n\t\t\tres.Provider = psp\n\t\t\tres.Content = notif\n\n\t\t\tres.Destination = dp\n\t\t\tif err, ok := e2.(net.Error); ok {\n\t\t\t\tif err.Temporary() {\n\t\t\t\t\tafter := 3 * time.Second\n\t\t\t\t\tres.Err = push.NewRetryErrorWithReason(psp, dp, notif, after, err)\n\t\t\t\t}\n\t\t\t} else if err, ok := e2.(*net.DNSError); ok {\n\t\t\t\tafter := 3 * time.Second\n\t\t\t\tres.Err = push.NewRetryErrorWithReason(psp, dp, notif, after, err)\n\t\t\t} else {\n\t\t\t\tres.Err = push.NewErrorf(\"Unrecoverable HTTP error sending to %s: %v\", psb.pushServiceName, e2)\n\t\t\t}\n\t\t\tresQueue <- res\n\t\t}\n\t\treturn\n\t}\n\n\tnewAuthToken := r.Header.Get(\"Update-Client-Auth\")\n\tif newAuthToken != \"\" && apikey != newAuthToken {\n\t\tpsp.VolatileData[\"apikey\"] = newAuthToken\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewPushServiceProviderUpdate(psp)\n\t\tresQueue <- res\n\t}\n\n\tswitch r.StatusCode {\n\tcase 500, 503:\n\t\tafter := 0 * time.Second\n\t\tfor _, dp := range dpList {\n\t\t\tres := new(push.Result)\n\t\t\tres.Provider = psp\n\t\t\tres.Content = notif\n\t\t\tres.Destination = dp\n\t\t\terr := push.NewRetryError(psp, dp, notif, after)\n\t\t\tres.Err = err\n\t\t\tresQueue <- res\n\t\t}\n\t\treturn\n\tcase 401:\n\t\terr := push.NewBadPushServiceProviderWithDetails(psp, fmt.Sprintf(\"push service credentials rejected by %s\", psb.initialism))\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = err\n\t\tresQueue <- res\n\t\treturn\n\tcase 400:\n\t\terr := push.NewBadNotificationWithDetails(fmt.Sprintf(\"push notification payload rejected by %s\", psb.initialism))\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = err\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tcontents, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewErrorf(\"Failed to read %s response: %v\", psb.initialism, err)\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tvar result CMResult\n\terr = json.Unmarshal(contents, &result)\n\n\tif err != nil {\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewErrorf(\"Failed to decode %s response: %v\", psb.initialism, err)\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tpsb.handleCMMulticastResults(psp, dpList, resQueue, notif, result.Results)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"some/path/push\"\n)\n\ntype CMResult struct{}\n\ntype PushServiceBase struct {\n\tclient             *http.Client\n\tinitialism         string\n\trawPayloadKey      string\n\trawNotificationKey string\n\tserviceURL         string\n\tpushServiceName    string\n}\n\nfunc MakePushServiceBase(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase {\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t}\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   30 * time.Second,\n\t}\n\treturn PushServiceBase{\n\t\tclient:             client,\n\t\tinitialism:         initialism,\n\t\trawPayloadKey:      rawPayloadKey,\n\t\trawNotificationKey: rawNotificationKey,\n\t\tserviceURL:         serviceURL,\n\t\tpushServiceName:    pushServiceName,\n\t}\n}\n\nfunc (psb *PushServiceBase) multicast(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification) {\n\tregIds := make([]string, len(dpList))\n\tfor i, dp := range dpList {\n\t\tregIds[i] = dp.RegID\n\t}\n\tpayload, err := psb.ToCMPayload(notif, regIds)\n\tif err != nil {\n\t\treturn\n\t}\n\treq, _ := http.NewRequest(\"POST\", psb.serviceURL, bytes.NewBuffer(payload))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", \"Bearer \"+psp.AuthToken)\n\tresp, err := psb.client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\tvar results []CMResult\n\tjson.Unmarshal(body, &results)\n\tpsb.handleCMMulticastResults(psp, dpList, resQueue, notif, results)\n}\n\nfunc (psb *PushServiceBase) ToCMPayload(notif *push.Notification, regIds []string) ([]byte, error) {\n\treturn nil, nil\n}\n\nfunc (psb *PushServiceBase) handleCMMulticastResults(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification, results []CMResult) {\n}"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of fetched files to avoid redundant network requests when the same URL is requested multiple times. The function includes error handling for network issues and invalid HTTP responses.\n\nInput: \n- `fileurl` (string): The URL of the file to be fetched.\n\nOutput: \n- `[]byte`: The content of the file as a byte slice if successful.\n- `error`: An error object describing any issues encountered during the fetch operation (network errors, non-200 status codes, etc.). Returns nil if no error occurs.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar verboseReader = false\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tcache = make(map[string][]byte)\n\tmu    sync.Mutex\n)\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tmu.Lock()\n\tif data, ok := cache[fileurl]; ok {\n\t\tmu.Unlock()\n\t\treturn data, nil\n\t}\n\tmu.Unlock()\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tdata, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmu.Lock()\n\tcache[fileurl] = data\n\tmu.Unlock()\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Implement a function to fetch a long-lived user access token from Facebook's Graph API using HTTP GET request.\n\nFunction Description: The function makes an HTTP GET request to Facebook's OAuth endpoint to exchange a short-lived access token for a long-lived one. It handles the request, response reading, and JSON parsing, returning the long-lived token or an error if any step fails.\n\nInput: \n- The function is a method on a struct (FacebookBee) that contains the following fields:\n  - clientID (string): Facebook app client ID\n  - clientSecret (string): Facebook app client secret\n  - accessToken (string): Short-lived user access token to exchange\n\nOutput:\n- string: The long-lived access token if successful\n- error: Descriptive error if any step fails (request, reading response, or parsing JSON)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc (mod *FacebookBee) fetchLongLivedUserAccessToken() (string, error) {\n\tbaseURL := \"https://graph.facebook.com/oauth/access_token\"\n\tv := url.Values{}\n\tv.Set(\"grant_type\", \"fb_exchange_token\")\n\tv.Set(\"client_id\", mod.clientID)\n\tv.Set(\"client_secret\", mod.clientSecret)\n\tv.Set(\"fb_exchange_token\", mod.accessToken)\n\tgraphUrl := baseURL + \"?\" + v.Encode()\n\n\tres, err := http.Get(graphUrl)\n\n\tif err != nil || res == nil {\n\t\treturn \"\", fmt.Errorf(\"fetching long lived user access token failed: %w\", err)\n\t}\n\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"reading content while fetching long lived user access token failed: %w\", err)\n\t}\n\n\ttype RequestResult struct {\n\t\tAccessToken string `json:\"access_token\"`\n\t}\n\n\tvar tokenRes RequestResult\n\terr = json.Unmarshal(body, &tokenRes)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"parsing result while fetching long lived user access token failed: %w\", err)\n\t}\n\n\treturn tokenRes.AccessToken, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\ntype FacebookBee struct {\n\tclientID     string\n\tclientSecret string\n\taccessToken  string\n}\n\nfunc (b *FacebookBee) fetchLongLivedToken() (string, error) {\n\tbaseURL := \"https://graph.facebook.com/oauth/access_token\"\n\tparams := url.Values{}\n\tparams.Add(\"client_id\", b.clientID)\n\tparams.Add(\"client_secret\", b.clientSecret)\n\tparams.Add(\"grant_type\", \"fb_exchange_token\")\n\tparams.Add(\"fb_exchange_token\", b.accessToken)\n\tfullURL := baseURL + \"?\" + params.Encode()\n\n\tresp, err := http.Get(fullURL)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to make request: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbodyBytes, _ := io.ReadAll(resp.Body)\n\t\treturn \"\", fmt.Errorf(\"unexpected status code %d: %s\", resp.StatusCode, bodyBytes)\n\t}\n\n\tvar result map[string]interface{}\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to parse JSON: %w\", err)\n\t}\n\n\ttoken, ok := result[\"access_token\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"access_token not found in response\")\n\t}\n\n\treturn token, nil\n}"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Implement a function to retrieve metadata from a metadata server using HTTP GET requests with custom headers.\n\nFunction Description: The function `getMetadata` sends an HTTP GET request to a metadata server with specific headers and retrieves the response. It handles the request creation, response validation, and resource cleanup. The function is designed to work with metadata services like Google Cloud's metadata server.\n\nInput:  \n- `key` (string): The metadata key to retrieve from the metadata server. This is appended to the base metadata path.\n\nOutput:  \n- `[]byte`: The raw response body from the metadata server if the request is successful.  \n- `error`: An error object if the request fails or if the server returns a non-200 status code.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar (\n\tmetadataRequestHeaders = http.Header{\n\t\t\"Metadata-Flavor\": []string{\"Google\"},\n\t}\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\treq := &http.Request{\n\t\tMethod: \"GET\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   metadataHost,\n\t\t\tPath:   metadataPath + key,\n\t\t},\n\t\tHeader: metadataRequestHeaders,\n\t\tHost:   metadataHost,\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"metadata server returned HTTP %d\", resp.StatusCode)\n\t}\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\tkey = strings.TrimPrefix(key, \"/\")\n\turl := \"http://metadata.google.internal/computeMetadata/v1/\" + key\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Metadata-token\", \"1\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"server returned status code %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
  },
  {
    "Task_id": 323,
    "Instruction": "Task Description: Implement a function to fetch the contents of a file from a given URL and return it as an io.Reader for further processing.  \n\nFunction Description: The function `fetchFile` takes a URL as input, sends an HTTP GET request to fetch the file, reads the response body, and returns it as an `io.Reader`. It handles errors during the HTTP request and response reading.  \n\nInput:  \n- `URL` (string) - The URL of the file to be fetched.  \n\nOutput:  \n- `io.Reader` - A reader containing the contents of the fetched file.  \n\n(Note: The `checkErr` function is assumed to handle errors by panicking or logging.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc fetchFile(URL string) io.Reader {\n\tresp, err := http.Get(URL)\n\tcheckErr(err)\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tcheckErr(err)\n\treturn strings.NewReader(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc fetchFile(url string) io.Reader {\n\tresp, err := http.Get(url)\n\tcheckErr(err)\n\tif resp.StatusCode != http.StatusOK {\n\t\tcheckErr(fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode))\n\t}\n\treturn resp.Body\n}"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a function that fetches properties from a given URL, handles HTTP responses appropriately, and processes the content based on its encoding type.\n\nFunction Description: The function LoadURL makes an HTTP GET request to the specified URL, checks the response status code, reads the response body, and determines the content encoding based on the Content-Type header. It then processes the content and returns the parsed properties or an error if any step fails.\n\nInput: \n- url (string): The URL from which to fetch the properties.\n\nOutput: \n- (*Properties, error): A pointer to a Properties struct containing the parsed data and nil error on success, or nil and an error describing the failure.\n\nNote: The function handles special cases like 404 errors (when IgnoreMissing is true) and validates the Content-Type header before processing. It also ensures proper resource cleanup by deferring the closing of the response body.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc (l *Loader) LoadURL(url string) (*Properties, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"properties: error fetching %q. %s\", url, err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == 404 && l.IgnoreMissing {\n\t\tLogPrintf(\"properties: %s returned %d. skipping\", url, resp.StatusCode)\n\t\treturn NewProperties(), nil\n\t}\n\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"properties: %s returned %d\", url, resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"properties: %s error reading response. %s\", url, err)\n\t}\n\n\tct := resp.Header.Get(\"Content-Type\")\n\tct = strings.Join(strings.Fields(ct), \"\")\n\tvar enc Encoding\n\tswitch strings.ToLower(ct) {\n\tcase \"text/plain\", \"text/plain;charset=iso-8859-1\", \"text/plain;charset=latin1\":\n\t\tenc = ISO_8859_1\n\tcase \"\", \"text/plain;charset=utf-8\":\n\t\tenc = UTF8\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"properties: invalid content type %s\", ct)\n\t}\n\n\treturn l.loadBytes(body, enc)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"gopkg.in/yaml.v2\"\n)\n\ntype Properties struct {\n\t// Struct fields depend on expected content\n}\n\nfunc LoadURL(url string) (*Properties, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tif resp.StatusCode == http.StatusNotFound {\n\t\t\treturn nil, fmt.Errorf(\"resource not found\")\n\t\t}\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcontentType := resp.Header.Get(\"Content-Type\")\n\tif contentType == \"\" {\n\t\treturn nil, fmt.Errorf(\"missing Content-Type header\")\n\t}\n\n\tprops := &Properties{}\n\n\tif strings.Contains(contentType, \"json\") {\n\t\tif err := json.Unmarshal(body, props); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else if strings.Contains(contentType, \"yaml\") || strings.Contains(contentType, \"yml\") {\n\t\tif err := yaml.Unmarshal(body, props); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\treturn nil, fmt.Errorf(\"unsupported content type: %s\", contentType)\n\t}\n\n\treturn props, nil\n}"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a function that reads data from a given location, supporting HTTP/HTTPS protocols. The function should handle URL parsing, make HTTP requests, and return the response body or appropriate errors.\n\nFunction Description: The function `ReadLocation` takes a location string (URL) as input, parses it to determine the protocol, and if it's HTTP/HTTPS, makes a GET request to fetch the data. It handles response status checks, reads the response body, and ensures proper resource cleanup.\n\nInput: \n- `loc` (string): A URL string specifying the location to read from (e.g., \"http://example.com/data\")\n\nOutput: \n- `[]byte`: The response body as a byte slice if successful\n- `error`: An error object describing any issues encountered during URL parsing, HTTP request, or response handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc ReadLocation(loc string) ([]byte, error) {\n\tu, err := url.Parse(loc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch u.Scheme {\n\tcase \"http\", \"https\":\n\t\tres, err := http.Get(loc)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer res.Body.Close()\n\t\tif res.StatusCode != http.StatusOK {\n\t\t\treturn nil, fmt.Errorf(\"%s\", res.Status)\n\t\t}\n\t\tb, err := ioutil.ReadAll(res.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn b, nil\n\t}\n\treturn nil, fmt.Errorf(\"Unsupported location to load: %s\", loc)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc ReadLocation(loc string) ([]byte, error) {\n\tu, err := url.Parse(loc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, errors.New(\"invalid protocol\")\n\t}\n\n\tresp, err := http.Get(loc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(io.LimitReader(resp.Body, 512))\n\t\treturn nil, fmt.Errorf(\"unexpected status code %d: %s\", resp.StatusCode, body)\n\t}\n\n\treturn io.ReadAll(resp.Body)\n}"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Implement a GIF search functionality using the Giphy API in Go, handling HTTP requests, response parsing, and error management.\n\nStruct Description: The Gifs struct represents a service for searching GIFs using the Giphy API. It maintains configuration and provides methods to interact with the API.\n\nFields:\n- conf: [conf] - Configuration containing the Giphy API key\n\nMethods:\n- New: [func() *Gifs] - Initializes a new Gifs instance by loading configuration\n- Search: [func(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error] - Searches for GIFs using the Giphy API with the provided query and parameters\n\nInput:\n- ctx: [context.Context] - Context for request cancellation and timeouts\n- request: [*gifs.SearchRequest] - Contains search parameters (query, limit, offset, rating, language)\n- response: [*gifs.SearchResponse] - Will be populated with search results\n\nOutput:\n- error: Returns nil on success or an appropriate error on failure",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"github.com/micro/micro/v5/service/config\"\n\t\"github.com/micro/micro/v5/service/errors\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tgifs \"github.com/micro/services/gifs/proto\"\n)\n\ntype conf struct {\n\tAPIKey string `json:\"api_key\"`\n}\n\ntype Gifs struct {\n\tconf conf\n}\n\nfunc New() *Gifs {\n\tv, err := config.Get(\"micro.gifs\")\n\tif err != nil {\n\t\tlogger.Fatalf(\"Failed to load config %s\", err)\n\t}\n\tvar c conf\n\tif err := v.Scan(&c); err != nil {\n\t\tlogger.Fatalf(\"Failed to load config %s\", err)\n\t}\n\n\treturn &Gifs{conf: c}\n}\n\nfunc (g *Gifs) Search(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error {\n\tif len(request.Query) == 0 {\n\t\treturn errors.BadRequest(\"gifs.Search\", \"Missing query field\")\n\t}\n\tlimit := defaultLimit\n\tif request.Limit > 0 {\n\t\tlimit = request.Limit\n\t}\n\toffset := defaultOffset\n\tif request.Offset > 0 {\n\t\toffset = request.Offset\n\t}\n\n\trating := defaultRating\n\tif len(request.Rating) > 0 {\n\t\trating = request.Rating\n\t}\n\tlan := defaultLang\n\tif len(request.Lang) > 0 {\n\t\tlan = request.Lang\n\t}\n\trsp, err := http.Get(fmt.Sprintf(giphySearch, g.conf.APIKey, request.Query, limit, offset, rating, lan))\n\tif err != nil {\n\t\tlogger.Errorf(\"Error querying giphy %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tdefer rsp.Body.Close()\n\tb, err := ioutil.ReadAll(rsp.Body)\n\tif err != nil {\n\t\tlogger.Errorf(\"Error marshalling giphy response %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tvar gRsp searchResponse\n\tif err := json.Unmarshal(b, &gRsp); err != nil {\n\t\tlogger.Errorf(\"Error marshalling giphy response %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tresponse.Data = marshalGifs(gRsp.Data)\n\tresponse.Pagination = &gifs.Pagination{\n\t\tOffset:     gRsp.Pagination.Offset,\n\t\tTotalCount: gRsp.Pagination.TotalCount,\n\t\tCount:      gRsp.Pagination.Count,\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "wrong_result": "package gifs\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"yourproject/conf\"\n)\n\ntype Gifs struct {\n\tconf   *conf.Config\n\tclient *http.Client\n}\n\nfunc New() *Gifs {\n\treturn &Gifs{\n\t\tconf: conf.Load(),\n\t\tclient: &http.Client{\n\t\t\tTimeout: 10 * time.Second,\n\t\t},\n\t}\n}\n\nfunc (g *Gifs) Search(ctx context.Context, req *SearchRequest, resp *SearchResponse) error {\n\tif g.conf.GiphyAPIKey == \"\" {\n\t\treturn errors.New(\"missing Giphy API key\")\n\t}\n\n\tparams := url.Values{}\n\tparams.Set(\"api_key\", g.conf.GiphyAPIKey)\n\tparams.Set(\"q\", req.Query)\n\tparams.Set(\"limit\", strconv.Itoa(req.Limit))\n\tparams.Set(\"offset\", strconv.Itoa(req.Offset))\n\tparams.Set(\"rating\", req.Rating)\n\tparams.Set(\"lang\", req.Language)\n\n\turl := \"https://api.giphy.com/v1/gifs/search?\" + params.Encode()\n\n\thttpReq, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\thttpResp, err := g.client.Do(httpReq)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer httpResp.Body.Close()\n\n\tif httpResp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(httpResp.Body)\n\t\treturn fmt.Errorf(\"giphy api error: status %d, body: %s\", httpResp.StatusCode, body)\n\t}\n\n\tvar giphyResp struct {\n\t\tData       []struct{ Images struct{ Original struct{ URL string } } } `json:\"data\"`\n\t\tPagination struct{ TotalCount int } `json:\"pagination\"`\n\t}\n\n\tif err := json.NewDecoder(httpResp.Body).Decode(&giphyResp); err != nil {\n\t\treturn err\n\t}\n\n\tresp.Total = giphyResp.Pagination.TotalCount\n\tfor _, gif := range giphyResp.Data {\n\t\tresp.Results = append(resp.Results, gif.Images.Original.URL)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Implement a function that sets up a cron job to make periodic HTTP GET requests to a specified callback URL and logs the results.\n\nFunction Description: The function `Setup` initializes a new cron scheduler, adds a job that makes HTTP GET requests to a specified callback URL at a given interval, and logs the success or failure of each request. The function starts the cron scheduler and returns it for further management.\n\nInput: \n- `job` [*pb.Job] - A protobuf message containing the job details, including:\n  - `Id` [string] - Unique identifier for the job\n  - `Interval` [string] - Cron-formatted interval at which the job should run\n  - `Callback` [string] - URL to which the HTTP GET request will be made\n\nOutput: \n- [*cron.Cron] - A pointer to the started cron scheduler instance, which can be used to stop or manage the scheduled job.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/cron/proto\"\n\t\"github.com/robfig/cron/v3\"\n)\nfunc (c *Cron) Setup(job *pb.Job) *cron.Cron {\n\tlogger.Infof(\"Setting up job id: %s\", job.Id)\n\tcr := cron.New()\n\tcr.AddFunc(job.Interval, func() {\n\t\tlogger.Infof(\"Running job id: %s\", job.Id)\n\t\trsp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlogger.Errorf(\"Failed job id: %s error: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer rsp.Body.Close()\n\t\tb, _ := ioutil.ReadAll(rsp.Body)\n\t\tif rsp.StatusCode != 200 {\n\t\t\tlogger.Errorf(\"Non 200 job id: %s error: %s\", job.Id, string(b))\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Successful job id: %s\", job.Id)\n\t})\n\tcr.Start()\n\treturn cr\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/robfig/cron\"\n)\n\nfunc Setup(job *pb.Job) *cron.Cron {\n\tc := cron.New()\n\t_, err := c.AddFunc(job.Interval, func() {\n\t\tresp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Job %s failed: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\t\tlog.Printf(\"Job %s succeeded with status %d\", job.Id, resp.StatusCode)\n\t\t} else {\n\t\t\tlog.Printf(\"Job %s failed with status %d\", job.Id, resp.StatusCode)\n\t\t}\n\t})\n\tif err != nil {\n\t\tlog.Printf(\"Error scheduling job %s: %v\", job.Id, err)\n\t}\n\tc.Start()\n\treturn c\n}"
  },
  {
    "Task_id": 329,
    "Instruction": "Task Description: Implement a function to retrieve metadata from a metadata server using HTTP GET requests with custom headers.\n\nFunction Description: The function `getMetadata` sends an HTTP GET request to a metadata server with specific headers and retrieves the response. It handles the request creation, response processing, and error checking. The function ensures proper resource cleanup by deferring the closing of the response body.\n\nInput:  \n- `key` (string): The metadata key to be appended to the metadata server's base path.  \n\nOutput:  \n- `[]byte`: The raw response body from the metadata server if the request is successful.  \n- `error`: An error object if the request fails or if the server returns a non-200 status code.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar (\n\tmetadataRequestHeaders = http.Header{\n\t\t\"Metadata-Flavor\": []string{\"Google\"},\n\t}\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\treq := &http.Request{\n\t\tMethod: \"GET\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   metadataHost,\n\t\t\tPath:   metadataPath + key,\n\t\t},\n\t\tHeader: metadataRequestHeaders,\n\t\tHost:   metadataHost,\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"metadata server returned HTTP %d\", resp.StatusCode)\n\t}\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\tfullURL := \"http://metadata-server/\" + url.PathEscape(key)\n\treq, err := http.NewRequest(\"GET\", fullURL, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"X-Metadata-Token\", \"required\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"status code %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
  },
  {
    "Task_id": 330,
    "Instruction": "Task Description: Implement a function to fetch and update search configuration from a remote URL, comparing it with the current configuration and updating if different.\n\nFunction Description: The function fetchSearchConfig retrieves search configuration from a predefined URL, normalizes it, compares it with the current configuration, and updates the system state if the new configuration is different. It handles HTTP requests, response reading, and configuration normalization.\n\nInput: None (uses predefined searchConfigURL and relies on the Server's state)\n\nOutput: error - Returns an error if any step fails (HTTP request, reading response, normalization, or configuration loading), or nil if successful (whether updated or no change needed)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nvar currentConfig, _ = normalize(defaultSearchConfig)\n\nfunc (s *Server) fetchSearchConfig() error {\n\tresp, err := http.Get(searchConfigURL)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tnewConfig, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tnewConfig, err = normalize(newConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif bytes.Equal(currentConfig, newConfig) {\n\t\treturn nil\n\t}\n\tif err := s.scraper.LoadConfig(newConfig); err != nil {\n\t\treturn err\n\t}\n\ts.state.SearchProviders = s.scraper.Config\n\ts.state.Push()\n\tcurrentConfig = newConfig\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nvar searchConfigURL string\nvar currentSearchConfig string\n\nfunc normalizeConfig(data string) (string, error) {\n\tvar parsed interface{}\n\tif err := json.Unmarshal([]byte(data), &parsed); err != nil {\n\t\treturn \"\", err\n\t}\n\tnormalized, err := json.Marshal(parsed)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(normalized), nil\n}\n\nfunc fetchSearchConfig() error {\n\tresp, err := http.Get(searchConfigURL)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to fetch config: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to read response body: %w\", err)\n\t}\n\n\tnormalizedConfig, err := normalizeConfig(string(body))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to normalize config: %w\", err)\n\t}\n\n\tif normalizedConfig != currentSearchConfig {\n\t\tcurrentSearchConfig = normalizedConfig\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The cache can be enabled/disabled globally, and cache hits/misses are logged when verbose mode is active. The function handles HTTP errors and returns the file content as a byte array.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput: \n- `[]byte` - The content of the file as a byte array\n- `error` - Any error encountered during the fetch operation (network error, HTTP status error, etc.)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tcache      = make(map[string][]byte)\n\tcacheMutex sync.RWMutex\n\tCacheEnabled = false\n\tVerbose     = false\n)\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar data []byte\n\tvar ok bool\n\n\tif CacheEnabled {\n\t\tcacheMutex.RLock()\n\t\tdata, ok = cache[fileurl]\n\t\tcacheMutex.RUnlock()\n\t\tif ok {\n\t\t\tif Verbose {\n\t\t\t\tlog.Printf(\"Cache hit for URL: %s\", fileurl)\n\t\t\t}\n\t\t\treturn data, nil\n\t\t}\n\t\tif Verbose {\n\t\t\tlog.Printf(\"Cache miss for URL: %s\", fileurl)\n\t\t}\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %d\", resp.StatusCode)\n\t}\n\n\tdata, err = io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif CacheEnabled {\n\t\tcacheMutex.Lock()\n\t\tcache[fileurl] = data\n\t\tcacheMutex.Unlock()\n\t\tif Verbose {\n\t\t\tlog.Printf(\"Cached URL: %s\", fileurl)\n\t\t}\n\t}\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The `fetchFile` function retrieves the contents of a file from a specified URL using HTTP GET. It supports optional caching of file contents to avoid redundant network requests for the same URL. The function handles HTTP errors and returns the file contents as a byte array if successful.\n\nInput: \n- `fileurl` [string] - The URL of the file to fetch\n\nOutput: \n- `[]byte` - The contents of the file as a byte array\n- `error` - An error object if the fetch operation fails (either network error or non-200 HTTP status)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tcache = make(map[string][]byte)\n\tmu    sync.Mutex\n)\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tmu.Lock()\n\tcached, ok := cache[fileurl]\n\tmu.Unlock()\n\tif ok {\n\t\treturn cached, nil\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tdata, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmu.Lock()\n\tcache[fileurl] = data\n\tmu.Unlock()\n\n\treturn data, nil\n}"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that handles OAuth-based headless authentication by establishing a connection to a server, receiving authentication instructions, and returning a JWT token upon successful authentication.\n\nFunction Description: The `ssoLogin` function establishes a WebSocket connection to a specified endpoint for headless OAuth authentication. It listens for server messages, displays authentication instructions to the user, and waits for the JWT token to be returned. The function handles connection closure and interrupts gracefully.\n\nInput: \n- `endpoint` (string): The URL endpoint of the authentication server (e.g., \"https://example.com\")\n\nOutput: \n- `string`: The JWT authentication token received from the server after successful authentication. Returns an empty string if authentication fails or is interrupted.\n\nNote: The function includes proper error handling and connection cleanup, and it displays the authentication URL to the user when received from the server.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/gravitl/netmaker/logger\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tvar (\n\t\tauthToken string\n\t\tinterrupt = make(chan os.Signal, 1)\n\t\turl, _    = url.Parse(endpoint)\n\t\tsocketURL = fmt.Sprintf(\"wss://%s/api/oauth/headless\", url.Host)\n\t)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tconn, _, err := websocket.DefaultDialer.Dial(socketURL, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"error connecting to endpoint \", socketURL, err.Error())\n\t}\n\tdefer conn.Close()\n\t_, msg, err := conn.ReadMessage()\n\tif err != nil {\n\t\tlog.Fatal(\"error reading from server: \", err.Error())\n\t}\n\tfmt.Printf(\"Please visit:\\n %s \\n to authenticate\\n\", string(msg))\n\tdone := make(chan struct{})\n\tdefer close(done)\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif msgType < 0 {\n\t\t\t\t\tdone <- struct{}{}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(err.Error(), \"normal\") {\n\t\t\t\t\tlog.Fatal(\"read error: \", err.Error())\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif msgType == websocket.CloseMessage {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif strings.Contains(string(msg), \"JWT: \") {\n\t\t\t\tauthToken = strings.TrimPrefix(string(msg), \"JWT: \")\n\t\t\t} else {\n\t\t\t\tlogger.Log(0, \"Message from server:\", string(msg))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn authToken\n\t\tcase <-interrupt:\n\t\t\terr := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlogger.Log(0, \"write close:\", err.Error())\n\t\t\t}\n\t\t\treturn authToken\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"signal\"\n\t\"strings\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tu, err := url.Parse(endpoint)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\twsURL := \"ws\" + u.Scheme[4:] + \"://\" + u.Host\n\n\tdialer := websocket.DefaultDialer\n\tconn, _, err := dialer.Dial(wsURL, nil)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tdefer conn.Close()\n\n\tmessages := make(chan string)\n\terrors := make(chan error)\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\terrors <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\tmessages <- string(message)\n\t\t}\n\t}()\n\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt)\n\n\tvar token string\n\n\tfor {\n\t\tselect {\n\t\tcase msg := <-messages:\n\t\t\tif strings.HasPrefix(msg, \"eyJ\") {\n\t\t\t\ttoken = msg\n\t\t\t\tconn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\t\treturn token\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Authentication URL:\", msg)\n\t\t\t}\n\t\tcase err := <-errors:\n\t\t\treturn \"\"\n\t\tcase <-sigChan:\n\t\t\tconn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\treturn \"\"\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a PKCE (Proof Key for Code Exchange) authorization flow in Go that handles OAuth2 token retrieval through a temporary HTTP server.\n\nStruct Description: PKCEAuthorizationFlow represents an OAuth2 authorization flow using PKCE (Proof Key for Code Exchange) mechanism. It manages the state, code verifier, and OAuth configuration needed for the flow, and provides methods to wait for and handle tokens.\n\nFields:\nproviderConfig: [internal.PKCEAuthProviderConfig] - Configuration for the PKCE auth provider\nstate: [string] - CSRF protection state value\ncodeVerifier: [string] - PKCE code verifier string\noAuthConfig: [*oauth2.Config] - OAuth2 configuration including client ID, secret, and endpoints\n\nMethods:\nWaitToken: [Name](ctx context.Context, _ AuthFlowInfo) -> (TokenInfo, error) - Main method that waits for token retrieval by starting a temporary HTTP server and handling the OAuth callback\nstartServer: [Name](server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) - Starts an HTTP server to handle OAuth callback and sends results through channels\nhandleRequest: [Name](req *http.Request) -> (*oauth2.Token, error) - Handles incoming OAuth callback request, validates state, and exchanges code for token",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/subtle\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"golang.org/x/oauth2\"\n)\n\ntype PKCEAuthorizationFlow struct {\n\tproviderConfig internal.PKCEAuthProviderConfig\n\tstate          string\n\tcodeVerifier   string\n\toAuthConfig    *oauth2.Config\n}\n\nfunc (p *PKCEAuthorizationFlow) WaitToken(ctx context.Context, _ AuthFlowInfo) (TokenInfo, error) {\n\ttokenChan := make(chan *oauth2.Token, 1)\n\terrChan := make(chan error, 1)\n\n\tparsedURL, err := url.Parse(p.oAuthConfig.RedirectURL)\n\tif err != nil {\n\t\treturn TokenInfo{}, fmt.Errorf(\"failed to parse redirect URL: %v\", err)\n\t}\n\n\tserver := &http.Server{Addr: fmt.Sprintf(\":%s\", parsedURL.Port())}\n\tdefer func() {\n\t\tshutdownCtx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\t\tdefer cancel()\n\n\t\tif err := server.Shutdown(shutdownCtx); err != nil {\n\t\t\tlog.Errorf(\"failed to close the server: %v\", err)\n\t\t}\n\t}()\n\n\tgo p.startServer(server, tokenChan, errChan)\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn TokenInfo{}, ctx.Err()\n\tcase token := <-tokenChan:\n\t\treturn p.parseOAuthToken(token)\n\tcase err := <-errChan:\n\t\treturn TokenInfo{}, err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) startServer(server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tcert := p.providerConfig.ClientCertPair\n\t\tif cert != nil {\n\t\t\ttr := &http.Transport{\n\t\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\t\tCertificates: []tls.Certificate{*cert},\n\t\t\t\t},\n\t\t\t}\n\t\t\tsslClient := &http.Client{Transport: tr}\n\t\t\tctx := context.WithValue(req.Context(), oauth2.HTTPClient, sslClient)\n\t\t\treq = req.WithContext(ctx)\n\t\t}\n\n\t\ttoken, err := p.handleRequest(req)\n\t\tif err != nil {\n\t\t\trenderPKCEFlowTmpl(w, err)\n\t\t\terrChan <- fmt.Errorf(\"PKCE authorization flow failed: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\trenderPKCEFlowTmpl(w, nil)\n\t\ttokenChan <- token\n\t})\n\n\tserver.Handler = mux\n\tif err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\terrChan <- err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) handleRequest(req *http.Request) (*oauth2.Token, error) {\n\tquery := req.URL.Query()\n\n\tif authError := query.Get(queryError); authError != \"\" {\n\t\tauthErrorDesc := query.Get(queryErrorDesc)\n\t\treturn nil, fmt.Errorf(\"%s.%s\", authError, authErrorDesc)\n\t}\n\n\tif state := query.Get(queryState); subtle.ConstantTimeCompare([]byte(p.state), []byte(state)) == 0 {\n\t\treturn nil, fmt.Errorf(\"invalid state\")\n\t}\n\n\tcode := query.Get(queryCode)\n\tif code == \"\" {\n\t\treturn nil, fmt.Errorf(\"missing code\")\n\t}\n\n\treturn p.oAuthConfig.Exchange(\n\t\treq.Context(),\n\t\tcode,\n\t\toauth2.SetAuthURLParam(\"code_verifier\", p.codeVerifier),\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"errors\"\n\t\"net/http\"\n\n\t\"golang.org/x/oauth2\"\n)\n\ntype PKCEAuthorizationFlow struct {\n\tproviderConfig internal.PKCEAuthProviderConfig\n\tstate          string\n\tcodeVerifier   string\n\toAuthConfig    *oauth2.Config\n}\n\nfunc (p *PKCEAuthorizationFlow) WaitToken(ctx context.Context, _ AuthFlowInfo) (TokenInfo, error) {\n\tcodeChallenge := generateCodeChallenge(p.codeVerifier)\n\tauthURL := p.oAuthConfig.AuthCodeURL(p.state, oauth2.SetAuthURLParam(\"code_challenge\", codeChallenge), oauth2.SetAuthURLParam(\"code_challenge_method\", \"S256\"))\n\n\tserver := &http.Server{Addr: \":0\"}\n\ttokenChan := make(chan *oauth2.Token)\n\terrChan := make(chan error)\n\n\tgo p.startServer(server, tokenChan, errChan)\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tserver.Shutdown(context.Background())\n\t\treturn nil, ctx.Err()\n\tcase token := <-tokenChan:\n\t\treturn token, nil\n\tcase err := <-errChan:\n\t\tserver.Shutdown(context.Background())\n\t\treturn nil, err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) startServer(server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) {\n\tserver.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttoken, err := p.handleRequest(r)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t\tw.Write([]byte(\"Authentication successful. You can close this window.\"))\n\t\ttokenChan <- token\n\t})\n\n\tif err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\terrChan <- err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) handleRequest(req *http.Request) (*oauth2.Token, error) {\n\tquery := req.URL.Query()\n\tif query.Get(\"state\") != p.state {\n\t\treturn nil, errors.New(\"invalid state parameter\")\n\t}\n\tcode := query.Get(\"code\")\n\tif code == \"\" {\n\t\treturn nil, errors.New(\"missing code parameter\")\n\t}\n\treturn p.oAuthConfig.Exchange(req.Context(), code, oauth2.VerifierOption(p.codeVerifier))\n}\n\nfunc generateCodeChallenge(verifier string) string {\n\th := sha256.New()\n\th.Write([]byte(verifier))\n\treturn base64.RawURLEncoding.EncodeToString(h.Sum(nil))\n}"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that establishes multiple concurrent connections to a WebSocket server, maintains these connections, and handles incoming messages. The client should be able to gracefully handle connection errors and properly close connections when done.\n\nFunction Description: The function establishes WebSocket connections to a specified server endpoint with unique identifiers, maintains these connections in separate goroutines, and continuously reads incoming messages. Each connection includes user identification and authentication parameters in the URL query string.\n\nInput: \n- None (The function uses hardcoded values for demonstration, but could be modified to accept parameters like host, port, path, and connection count)\n\nOutput: \n- None (The function primarily logs its activities and errors to stdout)\n\nNote: The function runs indefinitely until 100,000 connections are established (for testing purposes), with each connection attempt spaced by 1 second. Each connection runs in its own goroutine and includes error handling for both connection establishment and message reading.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\ti := 0\n\tfor {\n\t\ti++\n\t\tif i == 100000 {\n\t\t\tfmt.Println(\"\u5df2\u7ecf\u4e86\u89e310000\u4e2a\u94fe\u63a5\")\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t\tgo func(id int) {\n\t\t\tu := url.URL{Scheme: \"ws\", Host: \"127.0.0.1:8182\", Path: \"/v1/push\", RawQuery: fmt.Sprintf(\"uid=%d&sign=2&time=%d\", id, time.Now().Unix())}\n\t\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"\u94fe\u63a5\u5730\u5740%s,\u5931\u8d25\u539f\u56e0%s\", u.String(), err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer c.Close()\n\t\t\tfor {\n\t\t\t\t_, _, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"ERR_ERR_ERR_ERR_ERR_ERR_read:\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\thost := \"localhost\"\n\tport := \"8080\"\n\tpath := \"/connect\"\n\tconnectionCount := 100000\n\n\tfor i := 0; i < connectionCount; i++ {\n\t\tgo func(id int) {\n\t\t\tu := url.URL{\n\t\t\t\tScheme: \"ws\",\n\t\t\t\tHost:   host + \":\" + port,\n\t\t\t\tPath:   path,\n\t\t\t}\n\t\t\tparams := url.Values{}\n\t\t\tparams.Add(\"user_id\", \"user_\"+string(id))\n\t\t\tparams.Add(\"auth_token\", \"auth_\"+string(id))\n\t\t\tu.RawQuery = params.Encode()\n\n\t\t\tdialer := websocket.DefaultDialer\n\t\t\tconn, _, err := dialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Connection %d failed to connect: %v\", id, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer conn.Close()\n\n\t\t\tfor {\n\t\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Connection %d read error: %v\", id, err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"Connection %d received: %s\", id, msg)\n\t\t\t}\n\t\t}(i)\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\n\tselect {}\n}"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a WebSocket client in Go that can establish a connection to a server, handle bidirectional communication (sending and receiving messages), and properly manage connection lifecycle.\n\nStruct Description: The Listener struct represents a WebSocket client that connects to a specified URL, handles message processing with optional schema transformation, and manages concurrent read/write operations.\n\nFields:\n- URL: *url.URL - The WebSocket server URL to connect to\n- Token: string - Authentication token to be included in the connection URL\n- SchemaFunc: func([]byte) (io.Reader, error) - Optional function to transform incoming messages\n- Out: io.Writer - Output writer for received messages\n- InCh: <-chan []byte - Input channel for sending messages to the server\n\nMethods:\n- NewListener: (url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) -> *Listener - Creates a new Listener instance with the specified configuration\n- Listen: (ctx context.Context) -> error - Establishes WebSocket connection, handles concurrent message reading/writing, and manages connection lifecycle until context cancellation or normal closure",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\ntype Listener struct {\n\tURL        *url.URL\n\tToken      string\n\tSchemaFunc func([]byte) (io.Reader, error)\n\tOut        io.Writer\n\tInCh       <-chan []byte\n}\n\nfunc NewListener(url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) *Listener {\n\treturn &Listener{\n\t\tURL:        url,\n\t\tToken:      token,\n\t\tSchemaFunc: schemaFunc,\n\t\tOut:        out,\n\t\tInCh:       inCh,\n\t}\n}\n\nfunc (l *Listener) Listen(ctx context.Context) error {\n\tif l.Token != \"\" {\n\t\tparams := l.URL.Query()\n\t\tparams.Set(\"token\", l.Token)\n\t\tl.URL.RawQuery = params.Encode()\n\t}\n\n\tc, _, err := websocket.DefaultDialer.Dial(l.URL.String(), nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating websocket connection: %w\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\tgrp, ctx := errgroup.WithContext(ctx)\n\tgrp.Go(func() error {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\treturn fmt.Errorf(\"error reading from websocket: %w\", err)\n\t\t\t}\n\n\t\t\tvar r io.Reader\n\t\t\tif l.SchemaFunc != nil {\n\t\t\t\tr, err = l.SchemaFunc(message)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr = bytes.NewReader(message)\n\t\t\t}\n\n\t\t\tio.Copy(l.Out, r)\n\t\t}\n\t})\n\n\tgrp.Go(func() error {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase data := <-l.InCh:\n\t\t\t\tif err := c.WriteMessage(websocket.TextMessage, data); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"error writing to websocket: %w\", err)\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t\tif err := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\")); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"error writing close message: %w\", err)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\tcase <-done:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t})\n\tif err := grp.Wait(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Listener struct {\n\tURL        *url.URL\n\tToken      string\n\tSchemaFunc func([]byte) (io.Reader, error)\n\tOut        io.Writer\n\tInCh       <-chan []byte\n}\n\nfunc NewListener(url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) *Listener {\n\treturn &Listener{\n\t\tURL:        url,\n\t\tToken:      token,\n\t\tSchemaFunc: schemaFunc,\n\t\tOut:        out,\n\t\tInCh:       inCh,\n\t}\n}\n\nfunc (l *Listener) Listen(ctx context.Context) error {\n\tu := *l.URL\n\tq := u.Query()\n\tq.Set(\"token\", l.Token)\n\tu.RawQuery = q.Encode()\n\n\tconn, _, err := websocket.DefaultDialer.DialContext(ctx, u.String(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\twriteCtx, cancelWrite := context.WithCancel(ctx)\n\tdefer cancelWrite()\n\n\treadDone := make(chan struct{})\n\tvar readErr error\n\n\tgo func() {\n\t\tdefer close(readDone)\n\t\tfor {\n\t\t\tmessageType, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treadErr = err\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif messageType == websocket.TextMessage || messageType == websocket.BinaryMessage {\n\t\t\t\tif l.SchemaFunc != nil {\n\t\t\t\t\ttransformed, err := l.SchemaFunc(message)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treadErr = err\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif transformed != nil {\n\t\t\t\t\t\tif _, err := io.Copy(l.Out, transformed); err != nil {\n\t\t\t\t\t\t\treadErr = err\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif _, err := l.Out.Write(message); err != nil {\n\t\t\t\t\t\treadErr = err\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\twriteDone := make(chan struct{})\n\tvar writeErr error\n\n\tgo func() {\n\t\tdefer close(writeDone)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg, ok := <-l.InCh:\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\t\t\t\twriteErr = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-writeCtx.Done():\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tconn.Close()\n\t\t<-readDone\n\t\t<-writeDone\n\t\treturn ctx.Err()\n\tcase <-readDone:\n\t\tconn.Close()\n\t\tcancelWrite()\n\t\t<-writeDone\n\t\tif readErr != nil && !websocket.IsCloseError(readErr, websocket.CloseNormalClosure) {\n\t\t\treturn readErr\n\t\t}\n\t\treturn nil\n\tcase <-writeDone:\n\t\tconn.Close()\n\t\tcancelWrite()\n\t\t<-readDone\n\t\treturn writeErr\n\t}\n}"
  },
  {
    "Task_id": 342,
    "Instruction": "Task Description: Create a WebSocket client in Go that connects to a server, sends periodic messages, receives messages from the server, and handles graceful shutdown upon interruption.\n\nFunction Description: The main function establishes a WebSocket connection to a specified server, sets up message reading and writing routines, and handles interrupt signals for graceful termination. It continuously sends timestamp messages at regular intervals while concurrently listening for incoming messages from the server.\n\nInput:\n- Command line argument (flag): addr - string - WebSocket server address (e.g., \"localhost:8080\")\n- Implicit input: System interrupt signal (SIGINT)\n\nOutput:\n- Console logs: Connection status, received messages, and error messages\n- WebSocket messages: Sends timestamp messages to server and receives messages from server\n- Return value: None (program runs until interrupted)\n\nNote: The function uses goroutines for concurrent operations and channels for synchronization and interrupt handling.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tu := url.URL{Scheme: \"ws\", Host: *addr, Path: \"/echo\"}\n\tlog.Printf(\"connecting to %s\", u.String())\n\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\taddr := flag.String(\"addr\", \"localhost:8080\", \"WebSocket server address\")\n\tflag.Parse()\n\n\tu := url.URL{Scheme: \"ws\", Host: *addr, Path: \"/\"}\n\tlog.Printf(\"Connecting to %s\", u.String())\n\n\tconn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\n\tvar wg sync.WaitGroup\n\tdone := make(chan struct{})\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\treadLoop(conn)\n\t}()\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\twriteLoop(conn, done)\n\t}()\n\n\t<-interrupt\n\n\tlog.Println(\"Interrupt received, closing connection...\")\n\tconn.Close()\n\tclose(done)\n\n\twg.Wait()\n}\n\nfunc readLoop(conn *websocket.Conn) {\n\tfor {\n\t\t_, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Received: %s\", message)\n\t}\n}\n\nfunc writeLoop(conn *websocket.Conn, done chan struct{}) {\n\tticker := time.NewTicker(5 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ttimestamp := time.Now().Format(time.RFC3339)\n\t\t\tlog.Printf(\"Sending: %s\", timestamp)\n\t\t\tif err := conn.WriteMessage(websocket.TextMessage, []byte(timestamp)); err != nil {\n\t\t\t\tlog.Printf(\"Write error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-done:\n\t\t\tlog.Println(\"Closing write loop\")\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: The task involves testing a WebSocket connection to a runtime service, verifying the connection establishment, message exchange, and validating the received runtime information against expected values.\n\nFunction Description: The function `TestRuntimeGetRuntime` tests the WebSocket-based communication with a runtime service. It establishes a connection, sends a request message, receives and parses the response, then validates the response contents including protocol, version, capabilities, and runtime ID.\n\nInput: \n- None (This is a test function that takes a testing.T pointer as per Go testing conventions)\n\nOutput: \n- None (The function reports errors through the testing.T parameter if any assertions fail)\n- Side effect: The test will pass if all validations succeed or fail with appropriate error messages if any checks don't match expected values",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tensureRuntimeStarted()\n\tws, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:13014/\", nil)\n\tdefer ws.Close()\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif err = sendJSONE(ws, &Message{\"runtime\", \"getruntime\", nil}); err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tvar msg runtimeMessage\n\tvar bytes []byte\n\tif _, bytes, err = ws.ReadMessage(); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif err = json.Unmarshal(bytes, &msg); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif msg.Protocol != \"runtime\" || msg.Command != \"runtime\" {\n\t\tt.Errorf(\"Invalid protocol (%s) or command (%s)\", msg.Protocol, msg.Command)\n\t\treturn\n\t}\n\tres := msg.Payload\n\tif res.Type != \"goflow\" {\n\t\tt.Errorf(\"Invalid protocol type: %s\\n\", res.Type)\n\t}\n\tif res.Version != \"0.4\" {\n\t\tt.Errorf(\"Invalid protocol version: %s\\n\", res.Version)\n\t}\n\tif len(res.Capabilities) != 5 {\n\t\tt.Errorf(\"Invalid number of supported capabilities: %v\\n\", res.Capabilities)\n\t}\n\tif res.Id == \"\" {\n\t\tt.Error(\"Runtime Id is empty\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package yourtest\n\nimport (\n\t\"github.com/gorilla/websocket\"\n\t\"testing\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\texpectedProtocol := \"some_protocol\"\n\texpectedVersion := \"1.0.0\"\n\texpectedCapabilities := []string{\"cap1\", \"cap2\"}\n\texpectedRuntimeID := \"runtime_123\"\n\n\tconn, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:8080/runtime\", nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\trequest := map[string]string{\"method\": \"getRuntime\"}\n\tif err := conn.WriteJSON(request); err != nil {\n\t\tt.Errorf(\"Error sending request: %v\", err)\n\t\treturn\n\t}\n\n\tvar response struct {\n\t\tProtocol     string   `json:\"protocol\"`\n\t\tVersion      string   `json:\"version\"`\n\t\tCapabilities []string `json:\"capabilities\"`\n\t\tRuntimeID    string   `json:\"runtimeId\"`\n\t}\n\tif err := conn.ReadJSON(&response); err != nil {\n\t\tt.Errorf(\"Error reading response: %v\", err)\n\t\treturn\n\t}\n\n\tif response.Protocol != expectedProtocol {\n\t\tt.Errorf(\"Protocol mismatch: got %v, want %v\", response.Protocol, expectedProtocol)\n\t}\n\tif response.Version != expectedVersion {\n\t\tt.Errorf(\"Version mismatch: got %v, want %v\", response.Version, expectedVersion)\n\t}\n\tif len(response.Capabilities) != len(expectedCapabilities) {\n\t\tt.Errorf(\"Capabilities length mismatch: got %v, want %v\", len(response.Capabilities), len(expectedCapabilities))\n\t} else {\n\t\tfor i, cap := range response.Capabilities {\n\t\t\tif cap != expectedCapabilities[i] {\n\t\t\t\tt.Errorf(\"Capability at %d mismatch: got %v, want %v\", i, cap, expectedCapabilities[i])\n\t\t\t}\n\t\t}\n\t}\n\tif response.RuntimeID != expectedRuntimeID {\n\t\tt.Errorf(\"RuntimeID mismatch: got %v, want %v\", response.RuntimeID, expectedRuntimeID)\n\t}\n}"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Implement a WebSocket client in Go that connects to a server, handles incoming messages, and manages connection lifecycle including reconnection logic and graceful shutdown.\n\nFunction Description: The function establishes a WebSocket connection to a specified server endpoint, listens for incoming messages, and prints them to stdout/stderr based on message content. It handles connection errors by implementing automatic reconnection logic and supports graceful shutdown upon receiving an interrupt signal.\n\nInput: None (uses package-level configuration variables for connection details)\n\nOutput: None (writes directly to stdout/stderr, logs to console)\n\nNote: The function relies on several external configuration variables:\n- config.Config.Tap.Proxy.Host (string) - Server hostname\n- config.Config.Tap.Proxy.Front.Port (int) - Server port\n- config.Config.License (string) - License key for authentication\n- kubernetes.GetHubUrl() (string) - Function to get hub URL for health checks",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/kubeshark/kubeshark/config\"\n\t\"github.com/kubeshark/kubeshark/utils\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc runConsoleWithoutProxy() {\n\tlog.Info().Msg(\"Starting scripting console ...\")\n\ttime.Sleep(5 * time.Second)\n\thubUrl := kubernetes.GetHubUrl()\n\tfor {\n\t\tresponse, err := http.Get(fmt.Sprintf(\"%s/echo\", hubUrl))\n\t\tif err != nil || response.StatusCode != 200 {\n\t\t\tlog.Info().Msg(fmt.Sprintf(utils.Yellow, \"Couldn't connect to Hub.\"))\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tinterrupt := make(chan os.Signal, 1)\n\t\tsignal.Notify(interrupt, os.Interrupt)\n\n\t\tlog.Info().Str(\"host\", config.Config.Tap.Proxy.Host).Str(\"url\", hubUrl).Msg(\"Connecting to:\")\n\t\tu := url.URL{\n\t\t\tScheme: \"ws\",\n\t\t\tHost:   fmt.Sprintf(\"%s:%d\", config.Config.Tap.Proxy.Host, config.Config.Tap.Proxy.Front.Port),\n\t\t\tPath:   \"/api/scripts/logs\",\n\t\t}\n\t\theaders := http.Header{}\n\t\theaders.Set(utils.X_KUBESHARK_CAPTURE_HEADER_KEY, utils.X_KUBESHARK_CAPTURE_HEADER_IGNORE_VALUE)\n\t\theaders.Set(\"License-Key\", config.Config.License)\n\n\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), headers)\n\t\tif err != nil {\n\t\t\tlog.Error().Err(err).Msg(\"Websocket dial error, retrying in 5 seconds...\")\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tdefer c.Close()\n\n\t\tdone := make(chan struct{})\n\n\t\tgo func() {\n\t\t\tdefer close(done)\n\t\t\tfor {\n\t\t\t\t_, message, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Error().Err(err).Msg(\"Error reading websocket message, reconnecting...\")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tmsg := string(message)\n\t\t\t\tif strings.Contains(msg, \":ERROR]\") {\n\t\t\t\t\tmsg = fmt.Sprintf(utils.Red, msg)\n\t\t\t\t\tfmt.Fprintln(os.Stderr, msg)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Fprintln(os.Stdout, msg)\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\n\t\tticker := time.NewTicker(time.Second)\n\t\tdefer ticker.Stop()\n\n\t\tselect {\n\t\tcase <-done:\n\t\t\tlog.Warn().Msg(fmt.Sprintf(utils.Yellow, \"Connection closed, reconnecting...\"))\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\tcase <-interrupt:\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Error().Err(err).Send()\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"net/url\"\n\n\tconfig \"your/config/package\"\n\tkubernetes \"your/kubernetes/package\"\n)\n\nvar (\n\treconnectDelay = 5 * time.Second\n)\n\nfunc Run() {\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)\n\tdone := make(chan struct{})\n\tgo func() {\n\t\t<-sigChan\n\t\tclose(done)\n\t}()\n\n\tvar conn *websocket.Conn\n\tvar err error\n\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\tif conn != nil {\n\t\t\t\tconn.Close()\n\t\t\t}\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\thubURL := kubernetes.GetHubUrl()\n\t\tif hubURL != \"\" {\n\t\t\tresp, err := http.Get(hubURL)\n\t\t\tif err != nil || resp.StatusCode != http.StatusOK {\n\t\t\t\tlog.Printf(\"Hub health check failed: %v, status: %d\", err, resp.StatusCode)\n\t\t\t\ttime.Sleep(reconnectDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif conn == nil {\n\t\t\tconn, err = connect()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"WebSocket connection failed: %v\", err)\n\t\t\t\ttime.Sleep(reconnectDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\t\tlog.Println(\"Shutting down connection...\")\n\t\t\t\tconn.Close()\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t}\n\n\t\t\tmsgType, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error reading message: %v\", err)\n\t\t\t\tconn.Close()\n\t\t\t\tconn = nil\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tswitch msgType {\n\t\t\tcase websocket.TextMessage:\n\t\t\t\tmsgStr := string(msg)\n\t\t\t\tif strings.Contains(msgStr, \"ERROR\") {\n\t\t\t\t\tfmt.Fprintf(os.Stderr, \"ERROR: %s\\n\", msgStr)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(msgStr)\n\t\t\t\t}\n\t\t\tcase websocket.BinaryMessage:\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Received binary message of length %d\\n\", len(msg))\n\t\t\tcase websocket.CloseMessage:\n\t\t\t\tfmt.Println(\"Received close message\")\n\t\t\t\tconn.Close()\n\t\t\t\tconn = nil\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc connect() (*websocket.Conn, error) {\n\thost := config.Config.Tap.Proxy.Host\n\tport := config.Config.Tap.Proxy.Front.Port\n\tlicense := config.Config.License\n\tu := fmt.Sprintf(\"ws://%s:%d/?license=%s\", host, port, url.QueryEscape(license))\n\n\tdialer := websocket.DefaultDialer\n\tconn, _, err := dialer.Dial(u, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tconn.SetPingHandler(func(appData string) error {\n\t\treturn conn.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))\n\t})\n\tconn.SetPongHandler(func(appData string) error {\n\t\treturn nil\n\t})\n\n\tlog.Printf(\"Connected to %s\", u)\n\treturn conn, nil\n}"
  },
  {
    "Task_id": 347,
    "Instruction": "Task Description: Implement a WebSocket handler for shell communication that manages bidirectional data transfer between local and remote connections, including connection upgrading, message forwarding, and proper connection cleanup.\n\nStruct Description: The Shell struct represents a shell session manager that maintains active connections and handles WebSocket communication for shell data transfer.\n\nFields:\n- Name: string - Identifier for the shell session\n- links: map[string]*Link - Map of active connections indexed by connection ID\n- RWMutex: sync.RWMutex - Synchronization primitive for thread-safe access to the links map\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages bidirectional data forwarding between local and remote connections\n- localForward: (id string, local *websocket.Conn) -> None - Reads data from local WebSocket connection and forwards to remote\n- remoteForward: (id string, local *websocket.Conn) -> None - Reads data from remote connection and forwards to local WebSocket",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/natpass/code/utils\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype Shell struct {\n\tName string\n\tlinks map[string]*Link\n\tsync.RWMutex\n}\n\nfunc (shell *Shell) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlogging.Error(\"upgrade websocket failed: %s, err=%v\", shell.Name, err)\n\t\thttp.Error(w, err.Error(), http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tdefer local.Close()\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tshell.localForward(id, local)\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tshell.remoteForward(id, local)\n\t}()\n\twg.Wait()\n}\n\nfunc (shell *Shell) localForward(id string, local *websocket.Conn) {\n\tdefer utils.Recover(\"localForward\")\n\tdefer local.Close()\n\tshell.RLock()\n\tlink := shell.links[id]\n\tshell.RUnlock()\n\tdefer link.Close(true)\n\tfor {\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"read local data for %s failed: %v\", shell.Name, err)\n\t\t\treturn\n\t\t}\n\t\tlink.SendData(data)\n\t\tlogging.Debug(\"local read %d bytes: name=%s, id=%s\", len(data), shell.Name, id)\n\t}\n}\n\nfunc (shell *Shell) remoteForward(id string, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteForward\")\n\tdefer local.Close()\n\tshell.RLock()\n\tlink := shell.links[id]\n\tshell.RUnlock()\n\tch := link.remote.ChanRead(id)\n\tdefer link.Close(true)\n\tfor {\n\t\tmsg := <-ch\n\t\tif msg == nil {\n\t\t\treturn\n\t\t}\n\t\tdata, _ := proto.Marshal(msg)\n\t\tlink.recvBytes += uint64(len(data))\n\t\tlink.recvPacket++\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_shell_data:\n\t\t\terr := local.WriteMessage(websocket.TextMessage, msg.GetSdata().GetData())\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"write data for %s failed: %v\", shell.Name, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlogging.Debug(\"remote read %d bytes: name=%s, id=%s\",\n\t\t\t\tlen(msg.GetSdata().GetData()), shell.Name, id)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "package shell\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Shell struct {\n\tName    string\n\tlinks   map[string]*Link\n\tsync.RWMutex\n}\n\ntype Link struct {\n\tlocalConn  *websocket.Conn\n\tremoteConn *conn.Conn\n}\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc (s *Shell) WS(remoteConn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tlocalConn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Upgrade failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tid := generateID()\n\tlink := &Link{\n\t\tlocalConn:  localConn,\n\t\tremoteConn: remoteConn,\n\t}\n\n\ts.Lock()\n\ts.links[id] = link\n\ts.Unlock()\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\ts.localForward(id, localConn)\n\t\twg.Done()\n\t}()\n\n\tgo func() {\n\t\ts.remoteForward(id, localConn)\n\t\twg.Done()\n\t}()\n\n\twg.Wait()\n\n\ts.Lock()\n\tdelete(s.links, id)\n\ts.Unlock()\n\n\tlocalConn.Close()\n\tremoteConn.Close()\n}\n\nfunc (s *Shell) localForward(id string, local *websocket.Conn) {\n\ts.RLock()\n\tlink, ok := s.links[id]\n\ts.RUnlock()\n\tif !ok {\n\t\treturn\n\t}\n\tremote := link.remoteConn\n\n\tfor {\n\t\tmt, p, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tremote.Write(p)\n\t}\n\n\tlocal.Close()\n\tremote.Close()\n}\n\nfunc (s *Shell) remoteForward(id string, local *websocket.Conn) {\n\ts.RLock()\n\tlink, ok := s.links[id]\n\ts.RUnlock()\n\tif !ok {\n\t\treturn\n\t}\n\tremote := link.remoteConn\n\n\tbuffer := make([]byte, 4096)\n\tfor {\n\t\tn, err := remote.Read(buffer)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tif err := local.WriteMessage(websocket.BinaryMessage, buffer[:n]); err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tlocal.Close()\n\tremote.Close()\n}\n\nfunc generateID() string {\n\tb := make([]byte, 16)\n\trand.Read(b)\n\treturn fmt.Sprintf(\"%x\", b)\n}"
  },
  {
    "Task_id": 348,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that manages WebSocket connections, including upgrading HTTP connections, reading incoming messages, writing periodic messages, and properly closing the connection.\n\nFunction Description: The `wsHandler` function creates an HTTP handler that upgrades incoming HTTP requests to WebSocket connections. It continuously writes numbered messages to the client while concurrently reading any incoming messages from the client. The function stops after sending a specified number of messages and closes the connection gracefully.\n\nInput:\n- `t *testing.T`: Testing context for error reporting\n- `recvBuffer *bytes.Buffer`: Buffer to store received messages from the WebSocket client\n\nOutput:\n- Returns an `http.HandlerFunc` that implements the WebSocket handling logic\n\nNote: The function doesn't directly return values but rather creates a handler function that manages WebSocket communication through the provided buffer and testing context.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc wsHandler(t *testing.T, recvBuffer *bytes.Buffer) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tc, err := upgrader.Upgrade(w, r, nil)\n\t\trequire.NoError(t, err)\n\t\tdefer c.Close()\n\t\ti := 0\n\t\tfinish := 5\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\t_, message, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\trecvBuffer.Write(message)\n\t\t\t}\n\t\t}()\n\t\tfor {\n\t\t\ttime.Sleep(time.Millisecond * 10)\n\n\t\t\ti++\n\t\t\tdata := struct {\n\t\t\t\tMessage string `json:\"message\"`\n\t\t\t}{\n\t\t\t\tMessage: fmt.Sprintf(\"%d\\n\", i),\n\t\t\t}\n\t\t\tbuf := new(bytes.Buffer)\n\t\t\terr := json.NewEncoder(buf).Encode(data)\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = c.WriteMessage(websocket.TextMessage, buf.Bytes())\n\t\t\trequire.NoError(t, err)\n\n\t\t\tif i == finish {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\terr = c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\trequire.NoError(t, err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"testing\"\n)\n\nfunc wsHandler(t *testing.T, recvBuffer *bytes.Buffer) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tupgrader := websocket.Upgrader{\n\t\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\t\treturn true\n\t\t\t},\n\t\t}\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Upgrade error: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tdone := make(chan struct{})\n\t\tgo func() {\n\t\t\tdefer close(done)\n\t\t\tfor {\n\t\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tif !websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\t\tt.Errorf(\"Read error: %v\", err)\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\trecvBuffer.Write(msg)\n\t\t\t}\n\t\t}()\n\t\tfor i := 0; i < 5; i++ {\n\t\t\terr := conn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(\"Message %d\", i)))\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Write error: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t\tconn.Close()\n\t\t<-done\n\t}\n}"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a WebSocket proxy struct in Go that can handle WebSocket connections by forwarding messages between a client and a backend server.\n\nStruct Description: The `WebsocketProxy` struct is a reverse proxy for WebSocket connections. It upgrades incoming HTTP connections to WebSocket, connects to a backend WebSocket server, and forwards messages bidirectionally between the client and backend.\n\nFields:\n- Director: `func(incoming *http.Request, out http.Header)` - Optional function to modify the request headers before connecting to the backend.\n- Backend: `func(*http.Request) *url.URL` - Required function that returns the backend URL to connect to.\n- Upgrader: `*websocket.Upgrader` - Optional WebSocket upgrader configuration for client connections.\n- Dialer: `*websocket.Dialer` - Optional WebSocket dialer configuration for backend connections.\n\nMethods:\n- ServeHTTP: `(rw http.ResponseWriter, req *http.Request)` -> `None` - Main handler method that implements the http.Handler interface. It upgrades the client connection, connects to the backend, and sets up bidirectional message forwarding.\n  - Input Parameters:\n    - rw: `http.ResponseWriter` - The HTTP response writer\n    - req: `*http.Request` - The HTTP request\n  - Description: Handles the WebSocket proxy logic including connection upgrading, backend dialing, and message replication between client and backend.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == nil {\n\t\tif prior, ok := req.Header[\"X-Forwarded-For\"]; ok {\n\t\t\tclientIP = strings.Join(prior, \", \") + \", \" + clientIP\n\t\t}\n\t\trequestHeader.Set(\"X-Forwarded-For\", clientIP)\n\t}\n\n\trequestHeader.Set(\"X-Forwarded-Proto\", \"http\")\n\tif req.TLS != nil {\n\t\trequestHeader.Set(\"X-Forwarded-Proto\", \"https\")\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\treplicateWebsocketConn := func(dst, src *websocket.Conn, errc chan error) {\n\t\tfor {\n\t\t\tmsgType, msg, err := src.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\t\tif e, ok := err.(*websocket.CloseError); ok {\n\t\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\terrc <- err\n\t\t\t\tdst.WriteMessage(websocket.CloseMessage, m)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = dst.WriteMessage(msgType, msg)\n\t\t\tif err != nil {\n\t\t\t\terrc <- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\tif e, ok := err.(*websocket.CloseError); !ok || e.Code == websocket.CloseAbnormalClosure {\n\t\tlog.Printf(message, err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\ntype WebsocketProxy struct {\n\tDirector  func(*http.Request, http.Header)\n\tBackend   func(*http.Request) *url.URL\n\tUpgrader  *websocket.Upgrader\n\tDialer    *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tupgrader := p.Upgrader\n\tif upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tCheckOrigin: func(r *http.Request) bool { return true },\n\t\t}\n\t}\n\tclientConn, err := upgrader.Upgrade(rw, req, nil)\n\tif err != nil {\n\t\thttp.Error(rw, \"Failed to upgrade client connection\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := p.Backend(req)\n\tif backendURL == nil {\n\t\thttp.Error(rw, \"Backend URL is nil\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendHeader := http.Header{}\n\tif p.Director != nil {\n\t\tp.Director(req, backendHeader)\n\t}\n\n\tdialer := p.Dialer\n\tif dialer == nil {\n\t\tdialer = &websocket.Dialer{}\n\t}\n\tbackendConn, _, err := dialer.Dial(backendURL.String(), backendHeader)\n\tif err != nil {\n\t\tclientConn.Close()\n\t\thttp.Error(rw, \"Failed to connect to backend\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := clientConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := backendConn.WriteMessage(msgType, msg); err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := backendConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := clientConn.WriteMessage(msgType, msg); err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 352,
    "Instruction": "Task Description: Create a test WebSocket server that echoes received messages back to the client while notifying a channel for each received message.\n\nFunction Description: The function creates an HTTP test server with WebSocket support. It upgrades incoming HTTP connections to WebSocket, reads incoming messages, notifies a channel when a message is received, and echoes the message back to the client. The server runs until the connection is closed.\n\nInput:\n- t *testing.T: Testing context for error reporting\n- received chan struct{}: Channel to notify when a message is received\n\nOutput:\n- *httptest.Server: Pointer to the created HTTP test server instance",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\n\tgorillawebsocket \"github.com/gorilla/websocket\"\n)\n\nfunc testService(t *testing.T, received chan struct{}) *httptest.Server {\n\tvar httpHandler http.HandlerFunc = func(w http.ResponseWriter, r *http.Request) {\n\t\tvar upgrader gorillawebsocket.Upgrader\n\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tt.Fatal(\"error upgrading websocket:\", err)\n\t\t}\n\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\tt, b, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treceived <- struct{}{}\n\n\t\t\tconn.WriteMessage(t, b)\n\t\t}\n\t}\n\n\treturn httptest.NewServer(httpHandler)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "import (\n\t\"golang.org/x/net/websocket\"\n\t\"io\"\n\t\"net/http/httptest\"\n\t\"testing\"\n)\n\nfunc newTestWebSocketServer(t *testing.T, received chan struct{}) *httptest.Server {\n\thandler := websocket.Handler(func(conn *websocket.Conn) {\n\t\tfor {\n\t\t\tmsgType, reader, err := conn.NextReader()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdata, err := io.ReadAll(reader)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase received <- struct{}{}:\n\t\t\tdefault:\n\t\t\t}\n\t\t\twriter, err := conn.NextWriter(msgType)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\twriter.Write(data)\n\t\t\twriter.Close()\n\t\t}\n\t})\n\treturn httptest.NewServer(handler)\n}"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Implement a WebSocket server function in Go that handles client connections, manages online users, and periodically sends server statistics to connected clients.\n\nFunction Description: The `serverStream` function establishes a WebSocket connection with a client, registers the user in an online user tracking system, and continuously sends server statistics at regular intervals. It handles connection upgrades, user authentication, and graceful connection closure.\n\nInput:\n- `c *gin.Context`: Gin framework context object containing HTTP request information and writer for response\n\nOutput:\n- `any`: Placeholder return value (always nil in this implementation)\n- `error`: Error object indicating connection termination reason (wrapped in custom WsError type)\n\nThe function performs the following operations:\n1. Generates a unique connection ID\n2. Upgrades HTTP connection to WebSocket\n3. Extracts user IP and authentication info\n4. Registers user in online tracking system\n5. Periodically sends server statistics\n6. Handles connection cleanup on exit",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"net/url\"\n\t\"unicode/utf8\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/hashicorp/go-uuid\"\n\n\t\"github.com/nezhahq/nezha/model\"\n\t\"github.com/nezhahq/nezha/service/singleton\"\n)\n\nvar upgrader *websocket.Upgrader\n\nfunc serverStream(c *gin.Context) (any, error) {\n\tconnId, err := uuid.GenerateUUID()\n\tif err != nil {\n\t\treturn nil, newWsError(\"%v\", err)\n\t}\n\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\treturn nil, newWsError(\"%v\", err)\n\t}\n\tdefer conn.Close()\n\n\tuserIp := c.GetString(model.CtxKeyRealIPStr)\n\tif userIp == \"\" {\n\t\tuserIp = c.RemoteIP()\n\t}\n\n\tu, isMember := c.Get(model.CtxKeyAuthorizedUser)\n\tvar userId uint64\n\tif isMember {\n\t\tuserId = u.(*model.User).ID\n\t}\n\n\tsingleton.AddOnlineUser(connId, &model.OnlineUser{\n\t\tUserID:      userId,\n\t\tIP:          userIp,\n\t\tConnectedAt: time.Now(),\n\t\tConn:        conn,\n\t})\n\tdefer singleton.RemoveOnlineUser(connId)\n\n\tcount := 0\n\tfor {\n\t\tstat, err := getServerStat(count == 0, isMember)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.WriteMessage(websocket.TextMessage, stat); err != nil {\n\t\t\tbreak\n\t\t}\n\t\tcount += 1\n\t\tif count%4 == 0 {\n\t\t\terr = conn.WriteMessage(websocket.PingMessage, []byte{})\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ttime.Sleep(time.Second * 2)\n\t}\n\treturn nil, newWsError(\"\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/google/uuid\"\n\t\"github.com/gorilla/websocket\"\n\t\"runtime\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype WsError struct {\n\tCause   error\n\tMessage string\n}\n\nfunc (e *WsError) Error() string {\n\treturn fmt.Sprintf(\"%s: %v\", e.Message, e.Cause)\n}\n\ntype User struct {\n\tID       string\n\tUsername string\n\tIP       string\n\tConn     *websocket.Conn\n}\n\nvar onlineUsers = struct {\n\tsync.RWMutex\n\tm map[string]*User\n}{m: make(map[string]*User)}\n\nvar serverStartTime = time.Now()\n\nfunc authenticate(token string) (string, string, error) {\n\tif token == \"\" {\n\t\treturn \"\", \"\", errors.New(\"empty token\")\n\t}\n\treturn \"user_id_123\", \"username\", nil\n}\n\nfunc serverStream(c *gin.Context) (any, error) {\n\tconnID := uuid.NewV4().String()\n\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\treturn nil, &WsError{Cause: err, Message: \"Failed to upgrade connection\"}\n\t}\n\n\tclientIP := c.ClientIP()\n\ttoken := c.Query(\"token\")\n\tif token == \"\" {\n\t\ttoken = c.Request.Header.Get(\"Authorization\")\n\t\tif len(token) > 7 && token[:7] == \"Bearer \" {\n\t\t\ttoken = token[7:]\n\t\t}\n\t}\n\n\tuserID, username, authErr := authenticate(token)\n\tif authErr != nil {\n\t\tconn.Close()\n\t\treturn nil, &WsError{Cause: authErr, Message: \"Authentication failed\"}\n\t}\n\n\tuser := &User{\n\t\tID:       userID,\n\t\tUsername: username,\n\t\tIP:       clientIP,\n\t\tConn:     conn,\n\t}\n\n\tonlineUsers.Lock()\n\tonlineUsers.m[connID] = user\n\tonlineUsers.Unlock()\n\n\tdefer func() {\n\t\tonlineUsers.Lock()\n\t\tdelete(onlineUsers.m, connID)\n\t\tonlineUsers.Unlock()\n\t\tconn.Close()\n\t}()\n\n\treadErrChan := make(chan error, 1)\n\n\tgo func() {\n\t\tconn.SetReadLimit(512)\n\t\tconn.SetPongHandler(func(appData string) error {\n\t\t\treturn nil\n\t\t})\n\t\tfor {\n\t\t\t_, _, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treadErrChan <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(5 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tonlineUsers.RLock()\n\t\t\tuserCount := len(onlineUsers.m)\n\t\t\tonlineUsers.RUnlock()\n\n\t\t\tvar memStats runtime.MemStats\n\t\t\truntime.ReadMemStats(&memStats)\n\n\t\t\tstats := map[string]interface{}{\n\t\t\t\t\"users_online\":  userCount,\n\t\t\t\t\"server_uptime\": time.Since(serverStartTime).Seconds(),\n\t\t\t\t\"memory_usage\":  memStats.Alloc,\n\t\t\t}\n\n\t\t\tif err := conn.WriteJSON(stats); err != nil {\n\t\t\t\treturn nil, &WsError{Cause: err, Message: \"Failed to send stats\"}\n\t\t\t}\n\n\t\tcase err := <-readErrChan:\n\t\t\tif websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {\n\t\t\t\treturn nil, &WsError{Cause: err, Message: \"Connection closed unexpectedly\"}\n\t\t\t}\n\t\t\treturn nil, nil\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, manages WebSocket connections, and handles message reading.\n\nFunction Description: The function `NotifyWS` handles WebSocket connections by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It adds the new WebSocket connection to a global list of connections and ensures a message-sending service is running. The function then continuously reads messages from the WebSocket connection until it is closed.\n\nInput: \n- `ctx echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails, otherwise returns `nil` after the WebSocket connection is closed.\n\nNote: The function does not explicitly return any output other than potential errors, but it interacts with global state (`service.WebSocketConns` and `service.SocketRun`) and performs I/O operations on the WebSocket connection.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/IceWhaleTech/CasaOS/service\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nvar upGrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc NotifyWS(ctx echo.Context) error {\n\tws, err := upGrader.Upgrade(ctx.Response().Writer, ctx.Request(), nil)\n\tif err != nil {\n\t\treturn nil\n\t}\n\tdefer ws.Close()\n\tservice.WebSocketConns = append(service.WebSocketConns, ws)\n\n\tif !service.SocketRun {\n\t\tservice.SocketRun = true\n\t\tservice.SendMeg()\n\t}\n\tfor {\n\t\tmt, message, err := ws.ReadMessage()\n\t\tfmt.Println(mt, message, err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "import \"github.com/gorilla/websocket\"\nimport \"github.com/labstack/echo/v4\"\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc NotifyWS(c echo.Context) error {\n\tconn, err := upgrader.Upgrade(c.Response().Writer, c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tservice.WebSocketConns = append(service.WebSocketConns, conn)\n\tif !service.SocketRun {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t}\n\t\t}()\n\t\tservice.SocketRun = true\n\t}\n\tfor {\n\t\t_, _, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tfor i, v := range service.WebSocketConns {\n\t\t\t\tif v == conn {\n\t\t\t\t\tservice.WebSocketConns = append(service.WebSocketConns[:i], service.WebSocketConns[i+1:]...)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Implement a function to send a Wake-on-LAN (WoL) magic packet to a target device using UDP broadcast.\n\nFunction Description: The function `WakeUp` sends a Wake-on-LAN magic packet to a specified MAC address over UDP broadcast. It allows optional specification of a local network interface for the broadcast and handles the creation and transmission of the magic packet.\n\nInput:\n- `macAddr` (string): The MAC address of the target device to wake up, in format \"XX:XX:XX:XX:XX:XX\"\n- `broadcastIP` (string): The broadcast IP address to use (e.g., \"255.255.255.255\")\n- `bcastInterface` (string): [Optional] The network interface to use for broadcasting. If empty, system default will be used\n- `port` (int): The UDP port number to use for the WoL packet (typically 7 or 9)\n\nOutput:\n- (error): Returns nil on success, or an error if any step fails (invalid MAC, network error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc WakeUp(macAddr, broadcastIP, bcastInterface string, port int) error {\n\tvar localAddr *net.UDPAddr\n\tvar err error\n\tif bcastInterface != \"\" {\n\t\tlocalAddr, err = ipFromInterface(bcastInterface)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tbcastAddr := fmt.Sprintf(\"%s:%d\", broadcastIP, port)\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", bcastAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmp, err := New(macAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbs, err := mp.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", localAddr, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tn, err := conn.Write(bs)\n\tif err == nil && n != 102 {\n\t\terr = fmt.Errorf(\"magic packet sent was %d bytes (expected 102 bytes sent)\", n)\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"strconv\"\n\t\"syscall\"\n)\n\nfunc WakeUp(macAddr string, broadcastIP string, bcastInterface string, port int) error {\n\tmac, err := net.ParseMAC(macAddr)\n\tif err != nil {\n\t\treturn errors.New(\"invalid MAC address: \" + err.Error())\n\t}\n\n\tpacket := make([]byte, 102)\n\tfor i := 0; i < 6; i++ {\n\t\tpacket[i] = 0xFF\n\t}\n\tfor i := range 16 {\n\t\tcopy(packet[6+i*6:6+(i+1)*6], mac)\n\t}\n\n\taddr, err := net.ResolveUDPAddr(\"udp4\", broadcastIP+\":\"+strconv.Itoa(port))\n\tif err != nil {\n\t\treturn errors.New(\"resolve UDP address: \" + err.Error())\n\t}\n\n\tconn, err := net.ListenUDP(\"udp4\", &net.UDPAddr{IP: net.IPv4zero, Port: 0})\n\tif err != nil {\n\t\treturn errors.New(\"create UDP socket: \" + err.Error())\n\t}\n\tdefer conn.Close()\n\n\tif bcastInterface != \"\" {\n\t\tfd, err := conn.File()\n\t\tif err != nil {\n\t\t\treturn errors.New(\"get socket FD: \" + err.Error())\n\t\t}\n\t\tdefer fd.Close()\n\t\tif err = syscall.SetsockoptString(int(fd.Fd()), syscall.SOL_SOCKET, syscall.SO_BINDTODEVICE, bcastInterface); err != nil {\n\t\t\treturn errors.New(\"set interface: \" + err.Error())\n\t\t}\n\t}\n\n\tif _, err = conn.WriteToUDP(packet, addr); err != nil {\n\t\treturn errors.New(\"send packet: \" + err.Error())\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Implement a Go struct that tests the health of an NTP (Network Time Protocol) server by checking its stratum level through UDP communication.\n\nStruct Description: The NtpHealthTester struct is responsible for verifying the health of an NTP server by establishing a UDP connection, sending a query, and validating the server's response based on its stratum level. The struct includes methods for testing the server and providing a string representation of the maximum allowed stratum.\n\nFields:\nmaxStratum: int - The maximum acceptable stratum level for the NTP server to be considered healthy.\n\nMethods:\nTest: (ht *HealthTest) -> bool - Tests the health of an NTP server by sending a UDP packet and validating the response. Returns true if the server's stratum is within the acceptable range, false otherwise.\nString: () -> string - Returns a string representation of the maximum allowed stratum level.\nnewNtpHealthTester: (params map[string]interface{}, htp *HealthTestParameters) -> HealthTester - A constructor function that creates a new NtpHealthTester instance with the specified maximum stratum level.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n)\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc (t *NtpHealthTester) Test(ht *HealthTest) bool {\n\tudpAddress, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(ht.ipAddress.String(), \"123\"))\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdata := make([]byte, 48)\n\tdata[0] = 4<<3 | 3\n\n\tconn, err := net.DialUDP(\"udp\", nil, udpAddress)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdefer conn.Close()\n\n\t_, err = conn.Write(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tconn.SetDeadline(time.Now().Add(ht.timeout))\n\n\t_, err = conn.Read(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tstratum := data[1]\n\n\tif stratum == 0 || stratum > byte(t.maxStratum) {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (t *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"%d\", t.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\tmaxStratum := 3\n\tif v, ok := params[\"max_stratum\"]; ok {\n\t\tmaxStratum = typeutil.ToInt(v)\n\t}\n\treturn &NtpHealthTester{maxStratum: maxStratum}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype HealthTester interface {\n\tTest() bool\n\tString() string\n}\n\ntype HealthTestParameters struct {\n}\n\ntype NtpHealthTester struct {\n\thost       string\n\tport       int\n\tmaxStratum int\n}\n\nfunc (n *NtpHealthTester) Test() bool {\n\taddr := fmt.Sprintf(\"%s:%d\", n.host, n.port)\n\tconn, err := net.Dial(\"udp\", addr)\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer conn.Close()\n\n\treq := []byte{0x1B}\n\tfor len(req) < 48 {\n\t\treq = append(req, 0)\n\t}\n\tconn.Write(req)\n\n\tconn.SetReadDeadline(time.Now().Add(5 * time.Second))\n\n\tresp := make([]byte, 48)\n\t_, err = conn.Read(resp)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tstratum := resp[1]\n\treturn stratum <= uint8(n.maxStratum) && stratum > 0 && stratum < 16\n}\n\nfunc (n *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"max_stratum: %d\", n.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, _ *HealthTestParameters) HealthTester {\n\thost := params[\"host\"].(string)\n\tport := params[\"port\"].(int)\n\tmaxStratum := params[\"max_stratum\"].(int)\n\treturn &NtpHealthTester{\n\t\thost:       host,\n\t\tport:       port,\n\t\tmaxStratum: maxStratum,\n\t}\n}"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Implement a UDP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and connection management.\n\nStruct Description: The Client struct represents a UDP client for communicating with KDC servers. It maintains configuration and provides methods for sending data over UDP.\n\nFields:\n\nConfig: [*Config] - Configuration object containing KDC server information and settings\n\nMethods:\n\nsendKDCUDP: [func(realm string, b []byte) -> ([]byte, error)] - Sends data to a KDC server over UDP for a specific realm. Returns the response or error.\ndialKDCUDP: [func(count int, kdcs map[int]string) -> (*net.UDPConn, error)] - Internal method to establish UDP connection to a KDC server from a list of addresses. Returns the connection or error.\nsendUDP: [func(conn *net.UDPConn, b []byte) -> ([]byte, error)] - Internal method to send data over an established UDP connection and read the response. Returns the response data or error.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCUDP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\tcount, kdcs, err := cl.Config.GetKDCs(realm, false)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tconn, err := dialKDCUDP(count, kdcs)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = cl.sendUDP(conn, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialKDCUDP(count int, kdcs map[int]string) (conn *net.UDPConn, err error) {\n\ti := 1\n\tfor i <= count {\n\t\tudpAddr, e := net.ResolveUDPAddr(\"udp\", kdcs[i])\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"error resolving KDC address: %v\", e)\n\t\t\treturn\n\t\t}\n\t\tconn, err = net.DialUDP(\"udp\", nil, udpAddr)\n\t\tif err == nil {\n\t\t\terr = conn.SetDeadline(time.Now().Add(5 * time.Second))\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\ti++\n\t}\n\terr = errors.New(\"error in getting a UDP connection to any of the KDCs\")\n\treturn\n}\n\nfunc (cl *Client) sendUDP(conn *net.UDPConn, b []byte) ([]byte, error) {\n\tvar r []byte\n\tdefer conn.Close()\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\tudpbuf := make([]byte, 4096)\n\tn, _, err := conn.ReadFrom(udpbuf)\n\tr = udpbuf[:n]\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"sending over UDP failed to %s: %v\", conn.RemoteAddr().String(), err)\n\t}\n\tif len(r) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from %s\", conn.RemoteAddr().String())\n\t}\n\treturn r, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "wrong_result": "package kdc\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Config struct {\n\tKDCs    map[string][]string\n\tTimeout time.Duration\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCUDP(realm string, b []byte) ([]byte, error) {\n\tkdcsSlice, ok := c.Config.KDCs[realm]\n\tif !ok {\n\t\treturn nil, errors.New(\"realm not found in config\")\n\t}\n\tcount := len(kdcsSlice)\n\tkdcs := make(map[int]string)\n\tfor i, addr := range kdcsSlice {\n\t\tkdcs[i] = addr\n\t}\n\n\tconn, err := c.dialKDCUDP(count, kdcs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\treturn c.sendUDP(conn, b)\n}\n\nfunc (c *Client) dialKDCUDP(count int, kdcs map[int]string) (*net.UDPConn, error) {\n\tfor i := 0; i < count; i++ {\n\t\taddrStr, ok := kdcs[i]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tudpAddr, err := net.ResolveUDPAddr(\"udp\", addrStr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tconn, err := net.DialUDP(\"udp\", nil, udpAddr)\n\t\tif err == nil {\n\t\t\treturn conn, nil\n\t\t}\n\t}\n\treturn nil, errors.New(\"could not connect to any KDC\")\n}\n\nfunc (c *Client) sendUDP(conn *net.UDPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttimeout := c.Config.Timeout\n\tif timeout == 0 {\n\t\ttimeout = 5 * time.Second\n\t}\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\tbuf := make([]byte, 4096)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn buf[:n], nil\n}"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Write a Go function that tests UDP communication between a client and server. The function should create a UDP server, establish a client connection, send a test message, and verify the server's response.\n\nFunction Description: The function `TestUDPTransport` tests UDP transport functionality by creating a UDP server, sending a message from a client to the server, and verifying that the server receives the correct message. It uses goroutines for asynchronous server handling and channels for communication between the server and test function.\n\nInput: \n- `t *testing.T`: A testing context provided by the Go testing framework for assertions and logging.\n\nOutput: \n- None (This is a test function, so it reports failures via the testing framework rather than returning values). \n\nNote: The function relies on an external `NewTUDPServerTransport` function (not shown in the reference) to create the server transport and a `serveOnce` helper function (also not shown) to handle the server-side receive operation.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\nfunc TestUDPTransport(t *testing.T) {\n\tserver, err := NewTUDPServerTransport(\"127.0.0.1:0\")\n\trequire.NoError(t, err)\n\tdefer server.Close()\n\n\tassert.NoError(t, server.Open())\n\tassert.True(t, server.IsOpen())\n\tassert.NotNil(t, server.Conn())\n\n\tc := make(chan []byte)\n\tdefer close(c)\n\n\tgo serveOnce(t, server, c)\n\n\tdestAddr, err := net.ResolveUDPAddr(\"udp\", server.Addr().String())\n\trequire.NoError(t, err)\n\n\tconnUDP, err := net.DialUDP(destAddr.Network(), nil, destAddr)\n\trequire.NoError(t, err)\n\tdefer connUDP.Close()\n\n\tn, err := connUDP.Write([]byte(\"test\"))\n\tassert.NoError(t, err)\n\tassert.Equal(t, 4, n)\n\n\tselect {\n\tcase data := <-c:\n\t\tassert.Equal(t, \"test\", string(data))\n\tcase <-time.After(time.Second * 1):\n\t\tt.Error(\"Server did not respond in time\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "package transport\n\nimport (\n\t\"bytes\"\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestUDPTransport(t *testing.T) {\n\tserver, err := NewTUDPServerTransport(\":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer server.Close()\n\n\tserverAddr := server.Addr().String()\n\treceivedChan := make(chan []byte, 1)\n\n\tgo func() {\n\t\tdata := serveOnce(server)\n\t\treceivedChan <- data\n\t}()\n\n\tconn, err := net.DialTimeout(\"udp\", serverAddr, time.Second)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tmsg := []byte(\"test message\")\n\t_, err = conn.Write(msg)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tresponse := make([]byte, 1024)\n\tconn.SetReadDeadline(time.Now().Add(time.Second))\n\tn, err := conn.Read(response)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tresponse = response[:n]\n\n\tif !bytes.Equal(response, msg) {\n\t\tt.Errorf(\"Received response %v, expected %v\", response, msg)\n\t}\n\n\tselect {\n\tcase data := <-receivedChan:\n\t\tif !bytes.Equal(data, msg) {\n\t\t\tt.Errorf(\"Server received %v, expected %v\", data, msg)\n\t\t}\n\tcase <-time.After(time.Second):\n\t\tt.Fatal(\"Server did not receive message\")\n}\n}"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Implement a UDP client in Go that communicates with a NAT-PMP (Port Mapping Protocol) gateway, handling retries and timeouts for reliable communication.\n\nStruct Description: The `network` struct represents a network connection to a NAT-PMP gateway, maintaining the gateway IP address and providing a method to send requests and receive responses.\n\nFields:\n- gateway: net.IP - The IP address of the NAT-PMP gateway\n\nMethods:\n- call: (msg []byte, timeout time.Duration) -> ([]byte, error) - Sends a UDP message to the NAT-PMP gateway and waits for a response. Implements exponential backoff retry logic with configurable timeout. Returns the response bytes or an error if communication fails.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nconst nAT_PMP_PORT = 5351\nconst nAT_TRIES = 9\nconst nAT_INITIAL_MS = 250\n\ntype network struct {\n\tgateway net.IP\n}\n\nfunc (n *network) call(msg []byte, timeout time.Duration) (result []byte, err error) {\n\tvar server net.UDPAddr\n\tserver.IP = n.gateway\n\tserver.Port = nAT_PMP_PORT\n\tconn, err := net.DialUDP(\"udp\", nil, &server)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tresult = make([]byte, 16)\n\n\tvar finalTimeout time.Time\n\tif timeout != 0 {\n\t\tfinalTimeout = time.Now().Add(timeout)\n\t}\n\n\tneedNewDeadline := true\n\n\tvar tries uint\n\tfor tries = 0; (tries < nAT_TRIES && finalTimeout.IsZero()) || time.Now().Before(finalTimeout); {\n\t\tif needNewDeadline {\n\t\t\tnextDeadline := time.Now().Add((nAT_INITIAL_MS << tries) * time.Millisecond)\n\t\t\terr = conn.SetDeadline(minTime(nextDeadline, finalTimeout))\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tneedNewDeadline = false\n\t\t}\n\t\t_, err = conn.Write(msg)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tvar bytesRead int\n\t\tvar remoteAddr *net.UDPAddr\n\t\tbytesRead, remoteAddr, err = conn.ReadFromUDP(result)\n\t\tif err != nil {\n\t\t\tif err.(net.Error).Timeout() {\n\t\t\t\ttries++\n\t\t\t\tneedNewDeadline = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif !remoteAddr.IP.Equal(n.gateway) {\n\t\t\tcontinue\n\t\t}\n\t\tif bytesRead < len(result) {\n\t\t\tresult = result[:bytesRead]\n\t\t}\n\t\treturn\n\t}\n\terr = fmt.Errorf(\"Timed out trying to contact gateway\")\n\treturn\n}\n\nfunc minTime(a, b time.Time) time.Time {\n\tif a.IsZero() {\n\t\treturn b\n\t}\n\tif b.IsZero() {\n\t\treturn a\n\t}\n\tif a.Before(b) {\n\t\treturn a\n\t}\n\treturn b\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "wrong_result": "package natpmp\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype network struct {\n\tgateway net.IP\n}\n\nfunc (n *network) call(msg []byte, timeout time.Duration) ([]byte, error) {\n\tserverAddr := &net.UDPAddr{\n\t\tIP:   n.gateway,\n\t\tPort: 5351,\n\t}\n\n\tconn, err := net.Dial(\"udp\", serverAddr.String())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tdeadline := time.Now().Add(timeout)\n\tmaxRetries := 9\n\tcurrentBackoff := 250 * time.Millisecond\n\n\tfor attempt := 0; attempt <= maxRetries; attempt++ {\n\t\tremainingTime := deadline.Sub(time.Now())\n\t\tif remainingTime <= 0 {\n\t\t\treturn nil, fmt.Errorf(\"timeout after %d attempts\", attempt)\n\t\t}\n\n\t\tif _, err := conn.Write(msg); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treadTimeout := currentBackoff\n\t\tif readTimeout > remainingTime {\n\t\t\treadTimeout = remainingTime\n\t\t}\n\t\tconn.SetDeadline(time.Now().Add(readTimeout))\n\n\t\tvar resp [4096]byte\n\t\tnBytes, err := conn.Read(resp[:])\n\t\tif err != nil {\n\t\t\tif netErr, ok := err.(net.Error); ok && netErr.Timeout() {\n\t\t\t\tcurrentBackoff *= 2\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn resp[:nBytes], nil\n\t}\n\n\treturn nil, fmt.Errorf(\"timeout after %d retries\", maxRetries)\n}"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Implement a UDP server in Go that listens for incoming packets, manages client sessions, and proxies the traffic to a remote destination using a provided proxy dialer.\n\nStruct Description: The UDP struct represents a UDP server that handles incoming connections, manages sessions, and proxies traffic. It maintains session state and coordinates communication between clients and the proxy server.\n\nFields:\n- addr: string - The local address to listen on\n- uaddr: *net.UDPAddr - The resolved UDP address\n- dialer: proxy.Dialer - The dialer used to establish connections\n- proxy: proxy.Proxy - The proxy implementation for forwarding traffic\n\nMethods:\n- NewUDP: (s string, d proxy.Dialer, p proxy.Proxy) -> (*UDP, error) - Creates a new UDP instance by parsing the URL and resolving the address\n- ListenAndServe: () -> () - Starts listening on the UDP port and handles incoming packets\n- serveSession: (session *session) -> () - Handles an individual client session and proxies its traffic\n- DialUDP: (network string, addr string) -> (net.PacketConn, error) - Creates a new packet connection for outbound traffic\n\nAdditional Structs:\n- session: Represents a client session with its communication channels\n  Fields:\n    - key: string - Session identifier\n    - src: *net.UDPAddr - Client address\n    - PacketConn: net.PacketConn - Underlying connection\n    - msgCh: chan []byte - Channel for incoming messages\n    - finCh: chan struct{} - Channel for session termination\n\n- PktConn: Wraps a net.PacketConn with a predefined destination address\n  Fields:\n    - PacketConn: net.PacketConn - Underlying connection\n    - uaddr: *net.UDPAddr - Destination address\n  Methods:\n    - WriteTo: (b []byte, addr net.Addr) -> (int, error) - Writes data to the predefined address",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\nvar nm sync.Map\n\ntype UDP struct {\n\taddr   string\n\tuaddr  *net.UDPAddr\n\tdialer proxy.Dialer\n\tproxy  proxy.Proxy\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\tlog.F(\"[udp] parse url err: %s\", err)\n\t\treturn nil, err\n\t}\n\n\tt := &UDP{\n\t\tdialer: d,\n\t\tproxy:  p,\n\t\taddr:   u.Host,\n\t}\n\n\tt.uaddr, err = net.ResolveUDPAddr(\"udp\", t.addr)\n\treturn t, err\n}\n\nfunc (s *UDP) ListenAndServe() {\n\tc, err := net.ListenPacket(\"udp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[udp] failed to listen on UDP %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\n\tlog.F(\"[udp] listening UDP on %s\", s.addr)\n\n\tfor {\n\t\tbuf := pool.GetBuffer(proxy.UDPBufSize)\n\t\tn, srcAddr, err := c.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\tlog.F(\"[udp] read error: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tvar sess *session\n\t\tsessKey := srcAddr.String()\n\n\t\tv, ok := nm.Load(sessKey)\n\t\tif !ok || v == nil {\n\t\t\tsess = newSession(sessKey, srcAddr, c)\n\t\t\tnm.Store(sessKey, sess)\n\t\t\tgo s.serveSession(sess)\n\t\t} else {\n\t\t\tsess = v.(*session)\n\t\t}\n\n\t\tsess.msgCh <- buf[:n]\n\t}\n}\n\nfunc (s *UDP) serveSession(session *session) {\n\tdstPC, dialer, err := s.proxy.DialUDP(\"udp\", session.src.String())\n\tif err != nil {\n\t\tlog.F(\"[udp] remote dial error: %v\", err)\n\t\tnm.Delete(session.key)\n\t\treturn\n\t}\n\tdefer dstPC.Close()\n\n\tgo func() {\n\t\tproxy.CopyUDP(session, session.src, dstPC, 2*time.Minute, 5*time.Second)\n\t\tnm.Delete(session.key)\n\t\tclose(session.finCh)\n\t}()\n\n\tlog.F(\"[udp] %s <-> %s\", session.src, dialer.Addr())\n\n\tfor {\n\t\tselect {\n\t\tcase p := <-session.msgCh:\n\t\t\t_, err = dstPC.WriteTo(p, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.F(\"[udp] writeTo error: %v\", err)\n\t\t\t}\n\t\t\tpool.PutBuffer(p)\n\t\tcase <-session.finCh:\n\t\t\treturn\n\t\t}\n\t}\n}\n\ntype session struct {\n\tkey string\n\tsrc *net.UDPAddr\n\tnet.PacketConn\n\tmsgCh chan []byte\n\tfinCh chan struct{}\n}\n\nfunc newSession(key string, src net.Addr, srcPC net.PacketConn) *session {\n\tsrcAddr, _ := net.ResolveUDPAddr(\"udp\", src.String())\n\treturn &session{key, srcAddr, srcPC, make(chan []byte, 32), make(chan struct{})}\n}\n\nfunc (s *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tpc, err := s.dialer.DialUDP(network, s.addr)\n\treturn &PktConn{pc, s.uaddr}, err\n}\n\ntype PktConn struct {\n\tnet.PacketConn\n\tuaddr *net.UDPAddr\n}\n\nfunc (pc *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn pc.PacketConn.WriteTo(b, pc.uaddr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 111,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"sync\"\n)\n\ntype UDP struct {\n\taddr     string\n\tuaddr    *net.UDPAddr\n\tdialer   proxy.Dialer\n\tproxy    proxy.Proxy\n\tsessions map[string]*session\n\tmu       sync.Mutex\n\tlistener *net.UDPConn\n}\n\ntype session struct {\n\tkey      string\n\tsrc      *net.UDPAddr\n\tPacketConn net.PacketConn\n\tmsgCh    chan []byte\n\tfinCh    chan struct{}\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\thost := u.Host\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", host)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &UDP{\n\t\taddr:     s,\n\t\tuaddr:    udpAddr,\n\t\tdialer:   d,\n\t\tproxy:    p,\n\t\tsessions: make(map[string]*session),\n\t}, nil\n}\n\nfunc (u *UDP) ListenAndServe() {\n\tconn, err := net.ListenUDP(\"udp\", u.uaddr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tu.listener = conn\n\tdefer conn.Close()\n\n\tbuf := make([]byte, 65536)\n\tfor {\n\t\tn, src, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tkey := src.String()\n\t\tu.mu.Lock()\n\t\tsess, ok := u.sessions[key]\n\t\tif !ok {\n\t\t\tmsgCh := make(chan []byte, 32)\n\t\t\tfinCh := make(chan struct{})\n\t\t\tpacketConn, err := u.DialUDP(\"udp\", \"0.0.0.0:0\")\n\t\t\tif err != nil {\n\t\t\t\tu.mu.Unlock()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tsess = &session{\n\t\t\t\tkey:       key,\n\t\t\t\tsrc:       src,\n\t\t\t\tPacketConn: packetConn,\n\t\t\t\tmsgCh:     msgCh,\n\t\t\t\tfinCh:     finCh,\n\t\t\t}\n\t\t\tu.sessions[key] = sess\n\t\t\tgo u.serveSession(sess)\n\t\t}\n\t\tdata := make([]byte, n)\n\t\tcopy(data, buf[:n])\n\t\tselect {\n\t\tcase sess.msgCh <- data:\n\t\tdefault:\n\t\t}\n\t\tu.mu.Unlock()\n\t}\n}\n\nfunc (u *UDP) serveSession(sess *session) {\n\tgo func() {\n\t\tfor data := range sess.msgCh {\n\t\t\t_, err := sess.PacketConn.WriteTo(data, nil)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tsess.finCh <- struct{}{}\n\t}()\n\n\tbuf := make([]byte, 65536)\n\tfor {\n\t\tn, _, err := sess.PacketConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tu.listener.WriteToUDP(buf[:n], sess.src)\n\t}\n\n\tu.mu.Lock()\n\tdelete(u.sessions, sess.key)\n\tu.mu.Unlock()\n\tsess.PacketConn.Close()\n\tclose(sess.finCh)\n}\n\nfunc (u *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tpc, err := u.dialer.DialUDP(network, addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(network, addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &PktConn{\n\t\tPacketConn: pc,\n\t\tuaddr:      udpAddr,\n\t}, nil\n}\n\ntype PktConn struct {\n\tnet.PacketConn\n\tuaddr *net.UDPAddr\n}\n\nfunc (c *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn c.PacketConn.WriteTo(b, c.uaddr)\n}"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Implement a UDP-based trap listener for SNMP (Simple Network Management Protocol) messages, capable of receiving and processing traps/informs, with support for SNMPv3 security features and proper resource cleanup.\n\nStruct Description: TrapListener is a struct that manages a UDP listener for SNMP traps, handling incoming messages, security validation, and response generation.\n\nFields:\n- done: chan bool - Channel to signal completion of listener shutdown\n- listening: chan bool - Channel to signal when listener is active\n- Mutex: sync.Mutex - Mutex for thread-safe operations\n- Params: *GoSNMP - Configuration parameters for SNMP handling\n- OnNewTrap: TrapHandlerFunc - Callback function for new trap processing\n- CloseTimeout: time.Duration - Timeout for graceful shutdown\n- conn: *net.UDPConn - UDP connection object\n- proto: string - Protocol type (typically \"udp\")\n- usmStatsUnknownEngineIDsCount: uint32 - Counter for unknown engine IDs (SNMPv3)\n- finish: int32 - Atomic flag for shutdown state\n\nMethods:\n- NewTrapListener() -> *TrapListener - Creates and initializes a new TrapListener instance\n- Close() - Gracefully shuts down the listener and cleans up resources\n- SendUDP(packet *SnmpPacket, addr *net.UDPAddr) -> error - Sends an SNMP packet via UDP\n- listenUDP(addr string) -> error - Main listening loop for incoming traps\n- reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) -> error - Handles SNMPv3 engine ID mismatch reporting",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\ntype TrapListener struct {\n\tdone      chan bool\n\tlistening chan bool\n\tsync.Mutex\n\n\tParams *GoSNMP\n\n\tOnNewTrap TrapHandlerFunc\n\n\tCloseTimeout time.Duration\n\n\tconn  *net.UDPConn\n\tproto string\n\n\tusmStatsUnknownEngineIDsCount uint32\n\n\tfinish int32\n}\n\nfunc NewTrapListener() *TrapListener {\n\ttl := &TrapListener{\n\t\tfinish:       0,\n\t\tdone:         make(chan bool),\n\t\tlistening:    make(chan bool, 1),\n\t\tCloseTimeout: defaultCloseTimeout,\n\t}\n\n\treturn tl\n}\n\nfunc (t *TrapListener) Close() {\n\tif atomic.CompareAndSwapInt32(&t.finish, 0, 1) {\n\t\tt.Lock()\n\t\tdefer t.Unlock()\n\n\t\tif t.conn == nil {\n\t\t\treturn\n\t\t}\n\n\t\tif err := t.conn.Close(); err != nil {\n\t\t\tt.Params.Logger.Printf(\"failed to Close() the TrapListener socket: %s\", err)\n\t\t}\n\n\t\tselect {\n\t\tcase <-t.done:\n\t\tcase <-time.After(t.CloseTimeout):\n\t\t\tt.Params.Logger.Printf(\"timeout while awaiting done signal on TrapListener Close()\")\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) SendUDP(packet *SnmpPacket, addr *net.UDPAddr) error {\n\tob, err := packet.marshalMsg()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error marshaling SnmpPacket: %w\", err)\n\t}\n\n\tcount, err := t.conn.WriteTo(ob, addr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error sending SnmpPacket: %w\", err)\n\t}\n\n\tif count != len(ob) {\n\t\tt.Params.Logger.Printf(\"Failed to send all bytes of SnmpPacket!\\n\")\n\t}\n\treturn nil\n}\n\nfunc (t *TrapListener) listenUDP(addr string) error {\n\tudpAddr, err := net.ResolveUDPAddr(t.proto, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tt.conn, err = net.ListenUDP(udp, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer t.conn.Close()\n\n\tt.listening <- true\n\n\tfor {\n\t\tswitch {\n\t\tcase atomic.LoadInt32(&t.finish) == 1:\n\t\t\tt.done <- true\n\t\t\treturn nil\n\n\t\tdefault:\n\t\t\tvar buf [4096]byte\n\t\t\trlen, remote, err := t.conn.ReadFromUDP(buf[:])\n\t\t\tif err != nil {\n\t\t\t\tif atomic.LoadInt32(&t.finish) == 1 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tt.Params.Logger.Printf(\"TrapListener: error in read %s\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tmsg := buf[:rlen]\n\t\t\ttrap, err := t.Params.UnmarshalTrap(msg, false)\n\t\t\tif err != nil {\n\t\t\t\tt.Params.Logger.Printf(\"TrapListener: error in UnmarshalTrap %s\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif trap.Version == Version3 && trap.SecurityModel == UserSecurityModel && t.Params.SecurityModel == UserSecurityModel {\n\t\t\t\tsecurityParams, ok := t.Params.SecurityParameters.(*UsmSecurityParameters)\n\t\t\t\tif !ok {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: Invalid SecurityParameters types\")\n\t\t\t\t}\n\t\t\t\tpacketSecurityParams, ok := trap.SecurityParameters.(*UsmSecurityParameters)\n\t\t\t\tif !ok {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: Invalid SecurityParameters types\")\n\t\t\t\t}\n\t\t\t\tsnmpEngineID := securityParams.AuthoritativeEngineID\n\t\t\t\tmsgAuthoritativeEngineID := packetSecurityParams.AuthoritativeEngineID\n\t\t\t\tif msgAuthoritativeEngineID != snmpEngineID {\n\t\t\t\t\tif len(msgAuthoritativeEngineID) < 5 || len(msgAuthoritativeEngineID) > 32 {\n\t\t\t\t\t\tatomic.AddUint32(&t.usmStatsUnknownEngineIDsCount, 1)\n\t\t\t\t\t\terr := t.reportAuthoritativeEngineID(trap, snmpEngineID, remote)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: %s\\n\", err)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.OnNewTrap(trap, remote)\n\n\t\t\tif trap.PDUType == InformRequest {\n\t\t\t\ttrap.PDUType = GetResponse\n\t\t\t\ttrap.Error = NoError\n\t\t\t\ttrap.ErrorIndex = 0\n\t\t\t\terr := t.SendUDP(trap, remote)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: %s\\n\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) error {\n\tnewSecurityParams, ok := trap.SecurityParameters.Copy().(*UsmSecurityParameters)\n\tif !ok {\n\t\treturn errors.New(\"unable to cast SecurityParams to UsmSecurityParameters\")\n\t}\n\tnewSecurityParams.AuthoritativeEngineID = snmpEngineID\n\treportPacket := trap\n\treportPacket.PDUType = Report\n\treportPacket.MsgFlags &= AuthPriv\n\treportPacket.SecurityParameters = newSecurityParams\n\treportPacket.Variables = []SnmpPDU{\n\t\t{\n\t\t\tName:  usmStatsUnknownEngineIDs,\n\t\t\tValue: int(atomic.LoadUint32(&t.usmStatsUnknownEngineIDsCount)),\n\t\t\tType:  Integer,\n\t\t},\n\t}\n\treturn t.SendUDP(reportPacket, addr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package snmp\n\nimport (\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\ntype TrapHandlerFunc func(*SnmpPacket, *net.UDPAddr)\n\ntype TrapListener struct {\n\tdone      chan bool\n\tlistening chan bool\n\tsync.Mutex\n\tParams *GoSNMP\n\tOnNewTrap TrapHandlerFunc\n\tCloseTimeout time.Duration\n\tconn *net.UDPConn\n\tproto string\n\tusmStatsUnknownEngineIDsCount uint32\n\tfinish int32\n}\n\nfunc NewTrapListener() *TrapListener {\n\treturn &TrapListener{\n\t\tdone:      make(chan bool),\n\t\tlistening: make(chan bool),\n\t\tParams:    &GoSNMP{},\n\t\tCloseTimeout: 5 * time.Second,\n\t\tproto:    \"udp\",\n\t}\n}\n\nfunc (l *TrapListener) Close() {\n\tatomic.StoreInt32(&l.finish, 1)\n\tif l.conn != nil {\n\t\tl.conn.Close()\n\t}\n\ttimer := time.NewTimer(l.CloseTimeout)\n\tselect {\n\tcase <-l.done:\n\tcase <-timer.C:\n\t}\n\tclose(l.listening)\n\tclose(l.done)\n}\n\nfunc (l *TrapListener) SendUDP(packet *SnmpPacket, addr *net.UDPAddr) error {\n\tdata, err := packet.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = l.conn.WriteToUDP(data, addr)\n\treturn err\n}\n\nfunc (l *TrapListener) listenUDP(addr string) error {\n\tudpAddr, err := net.ResolveUDPAddr(l.proto, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl.conn, err = net.ListenUDP(l.proto, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tclose(l.listening)\n\tfor atomic.LoadInt32(&l.finish) == 0 {\n\t\tbuf := make([]byte, 65536)\n\t\tn, raddr, err := l.conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tif atomic.LoadInt32(&l.finish) != 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tpacket := &SnmpPacket{\n\t\t\tVersion: l.Params.Version,\n\t\t}\n\t\tif err := packet.Unmarshal(buf[:n]); err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif packet.Version == Version3 {\n\t\t\tif packet.MsgAuthoritativeEngineID != l.Params.EngineID {\n\t\t\t\tl.reportAuthoritativeEngineID(packet, l.Params.EngineID, raddr)\n\t\t\t\tatomic.AddUint32(&l.usmStatsUnknownEngineIDsCount, 1)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err := l.Params.USM.Validate(packet, raddr); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif l.OnNewTrap != nil {\n\t\t\tl.OnNewTrap(packet, raddr)\n\t\t}\n\t}\n\tclose(l.done)\n\treturn nil\n}\n\nfunc (l *TrapListener) reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) error {\n\treport := &SnmpPacket{\n\t\tVersion:              trap.Version,\n\t\tMsgAuthoritativeEngineID: snmpEngineID,\n\t\tPDUType:              Report,\n\t\tError:                0x0B, // genErrUnknownEngineID from SNMPv3 spec\n\t}\n\treturn l.SendUDP(report, addr)\n}"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: Implement a UDP server for handling SOCKS5 proxy requests, including UDP association and data relay between clients and a Hysteria proxy client.\n\nStruct Description: The Server struct represents a SOCKS5 proxy server with UDP support, handling client connections and relaying UDP traffic through a Hysteria proxy.\n\nFields:\n\nHyClient: [client.Client] - The Hysteria client used for establishing proxy connections\nAuthFunc: [func(username, password string) bool] - Authentication function for SOCKS5 clients\nDisableUDP: [bool] - Flag to disable UDP functionality\nEventLogger: [EventLogger] - Interface for logging server events\n\nMethods:\n\nhandleUDP: [func(conn net.Conn, req *socks5.Request)] - none - Handles a new UDP association request from a SOCKS5 client\nudpServer: [func(udpConn *net.UDPConn, hyUDP client.HyUDPConn)] -> [error] - Manages the UDP relay between client and Hysteria proxy\nsendUDPReply: [func(conn net.Conn, addr *net.UDPAddr)] -> [error] - Sends a UDP association reply to the SOCKS5 client\n\nInterface Description:\n\nEventLogger: Interface for logging UDP-related events\nMethods:\nUDPRequest: [func(addr net.Addr)] - Logs incoming UDP requests\nUDPError: [func(addr net.Addr, err error)] - Logs UDP-related errors",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/txthinking/socks5\"\n\n\t\"github.com/apernet/hysteria/core/v2/client\"\n)\n\ntype Server struct {\n\tHyClient    client.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tdefer conn.Close()\n\n\tif s.EventLogger != nil {\n\t\ts.EventLogger.UDPRequest(conn.RemoteAddr())\n\t}\n\tvar closeErr error\n\tdefer func() {\n\t\tif s.EventLogger != nil {\n\t\t\ts.EventLogger.UDPError(conn.RemoteAddr(), closeErr)\n\t\t}\n\t}()\n\n\thost, _, err := net.SplitHostPort(conn.LocalAddr().String())\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(host, \"0\"))\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpConn, err := net.ListenUDP(\"udp\", udpAddr)\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer udpConn.Close()\n\n\thyUDP, err := s.HyClient.UDP()\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer hyUDP.Close()\n\n\t_ = sendUDPReply(conn, udpConn.LocalAddr().(*net.UDPAddr))\n\n\terrChan := make(chan error, 2)\n\tgo func() {\n\t\terr := s.udpServer(udpConn, hyUDP)\n\t\terrChan <- err\n\t}()\n\tgo func() {\n\t\t_, err := io.Copy(io.Discard, conn)\n\t\terrChan <- err\n\t}()\n\tcloseErr = <-errChan\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tvar clientAddr *net.UDPAddr\n\tbuf := make([]byte, udpBufferSize)\n\tfor {\n\t\tn, cAddr, err := udpConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\td, err := socks5.NewDatagramFromBytes(buf[:n])\n\t\tif err != nil || d.Frag != 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif clientAddr == nil {\n\t\t\tclientAddr = cAddr\n\t\t\tgo func() {\n\t\t\t\tfor {\n\t\t\t\t\tbs, from, err := hyUDP.Receive()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t_ = udpConn.Close()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tatyp, addr, port, err := socks5.ParseAddress(from)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif atyp == socks5.ATYPDomain {\n\t\t\t\t\t\taddr = addr[1:]\n\t\t\t\t\t}\n\t\t\t\t\td := socks5.NewDatagram(atyp, addr, port, bs)\n\t\t\t\t\t_, _ = udpConn.WriteToUDP(d.Bytes(), clientAddr)\n\t\t\t\t}\n\t\t\t}()\n\t\t} else if !clientAddr.IP.Equal(cAddr.IP) || clientAddr.Port != cAddr.Port {\n\t\t\tcontinue\n\t\t}\n\t\t_ = hyUDP.Send(d.Data, d.Address())\n\t}\n}\n\nfunc sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\tvar atyp byte\n\tvar bndAddr, bndPort []byte\n\tif ip4 := addr.IP.To4(); ip4 != nil {\n\t\tatyp = socks5.ATYPIPv4\n\t\tbndAddr = ip4\n\t} else {\n\t\tatyp = socks5.ATYPIPv6\n\t\tbndAddr = addr.IP\n\t}\n\tbndPort = make([]byte, 2)\n\tbinary.BigEndian.PutUint16(bndPort, uint16(addr.Port))\n\tp := socks5.NewReply(socks5.RepSuccess, atyp, bndAddr, bndPort)\n\t_, err := p.WriteTo(conn)\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\n\t\"github.com/hysteria-network/hysteria/core/client\"\n)\n\ntype Server struct {\n\tHyClient    client.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tif s.DisableUDP {\n\t\treturn\n\t}\n\tudpConn, err := net.ListenUDP(\"udp\", &net.UDPAddr{IP: net.IPv4zero, Port: 0})\n\tif err != nil {\n\t\treturn\n\t}\n\thyUDP, err := s.HyClient.DialUDP()\n\tif err != nil {\n\t\treturn\n\t}\n\tlocalAddr := udpConn.LocalAddr().(*net.UDPAddr)\n\tif err := s.sendUDPReply(conn, localAddr); err != nil {\n\t\treturn\n\t}\n\tgo s.udpServer(udpConn, hyUDP)\n}\n\nfunc (s *Server) sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\tvar b bytes.Buffer\n\tb.WriteByte(5)\n\tb.WriteByte(0)\n\tb.WriteByte(0)\n\tip := addr.IP.To4()\n\tif ip != nil {\n\t\tb.WriteByte(1)\n\t\tb.Write(ip)\n\t} else {\n\t\tb.WriteByte(4)\n\t\tb.Write(addr.IP)\n\t}\n\tb.WriteByte(byte(addr.Port >> 8))\n\tb.WriteByte(byte(addr.Port))\n\t_, err := conn.Write(b.Bytes())\n\treturn err\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tvar (\n\t\tclientAddrMu sync.Mutex\n\t\tclientAddr   *net.UDPAddr\n\t\twg           sync.WaitGroup\n\t)\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tbuf := make([]byte, 65536)\n\t\tfor {\n\t\t\tn, srcAddr, err := udpConn.ReadFromUDP(buf)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tclientAddrMu.Lock()\n\t\t\tif clientAddr == nil {\n\t\t\t\tclientAddr = srcAddr\n\t\t\t}\n\t\t\tclientAddrMu.Unlock()\n\t\t\ts.EventLogger.UDPRequest(srcAddr)\n\n\t\t\tr := bytes.NewReader(buf[:n])\n\t\t\tvar ver, rep, rsv, atyp byte\n\t\t\tif binary.Read(r, binary.BigEndian, &ver) != nil || ver != 5 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif binary.Read(r, binary.BigEndian, &rep) != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif binary.Read(r, binary.BigEndian, &rsv) != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif binary.Read(r, binary.BigEndian, &atyp) != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tvar ip net.IP\n\t\t\tswitch atyp {\n\t\t\tcase 1:\n\t\t\t\tip = make([]byte, 4)\n\t\t\tcase 4:\n\t\t\t\tip = make([]byte, 16)\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif _, err := io.ReadFull(r, ip); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tport := make([]byte, 2)\n\t\t\tif _, err := io.ReadFull(r, port); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ttargetPort := int(port[0])<<8 | int(port[1])\n\t\t\tpayload := buf[r.Len():]\n\n\t\t\ttargetAddr := &net.UDPAddr{IP: ip, Port: targetPort}\n\t\t\tif _, err := hyUDP.WriteTo(payload, targetAddr); err != nil {\n\t\t\t\ts.EventLogger.UDPError(srcAddr, err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tbuf := make([]byte, 65536)\n\t\tfor {\n\t\t\tn, srcAddr, err := hyUDP.ReadFrom(buf)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tclientAddrMu.Lock()\n\t\t\tca := clientAddr\n\t\t\tclientAddrMu.Unlock()\n\t\t\tif ca == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tvar header bytes.Buffer\n\t\t\theader.WriteByte(5)\n\t\t\theader.WriteByte(0)\n\t\t\theader.WriteByte(0)\n\t\t\tip := srcAddr.(*net.UDPAddr).IP\n\t\t\tif ip4 := ip.To4(); ip4 != nil {\n\t\t\t\theader.WriteByte(1)\n\t\t\t\theader.Write(ip4)\n\t\t\t} else {\n\t\t\t\theader.WriteByte(4)\n\t\t\t\theader.Write(ip)\n\t\t\t}\n\t\t\tport := uint16(srcAddr.(*net.UDPAddr).Port)\n\t\t\theader.WriteByte(byte(port >> 8))\n\t\t\theader.WriteByte(byte(port))\n\t\t\tcombined := append(header.Bytes(), buf[:n]...)\n\n\t\t\tif _, err := udpConn.WriteToUDP(combined, ca); err != nil {\n\t\t\t\ts.EventLogger.UDPError(ca, err)\n\t\t\t}\n\t\t}\n\t}()\n\n\twg.Wait()\n\treturn nil\n}"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: The provided code demonstrates a WebSocket client implementation in Go for tracker communication in a peer-to-peer network, handling WebSocket connections, message exchange, and WebRTC offer/answer negotiation.\n\nStruct Description: TrackerClient represents a client for interacting with a WebSocket tracker server, managing WebSocket connections, peer connections, and message handling.\n\nFields:\n\nUrl: string - The WebSocket tracker server URL to connect to\nGetAnnounceRequest: func(_ tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error) - Function to generate announce requests\nPeerId: [20]byte - The client's peer identifier\nOnConn: onDataChannelOpen - Callback for when data channels open\nLogger: log.Logger - Logger for client operations\nDialer: *websocket.Dialer - WebSocket dialer configuration\nmu: sync.Mutex - Mutex for thread-safe operations\ncond: sync.Cond - Condition variable for connection state changes\noutboundOffers: map[string]outboundOfferValue - Track outbound WebRTC offers\nwsConn: *websocket.Conn - Active WebSocket connection\nclosed: bool - Connection closed flag\npingTicker: *time.Ticker - Timer for sending ping messages\nWebsocketTrackerHttpHeader: func() http.Header - Function to generate WebSocket headers\nICEServers: []webrtc.ICEServer - List of ICE servers for WebRTC\nrtcPeerConns: map[string]*wrappedPeerConnection - Active WebRTC peer connections\n\nMethods:\n\ndoWebsocket: () -> error - Establishes and maintains WebSocket connection to tracker\ntrackerReadLoop: (*websocket.Conn) -> error - Handles incoming WebSocket messages\nwriteMessage: ([]byte) -> error - Writes message to WebSocket connection\nhandleOffer: (offerContext, string) -> error - Processes incoming WebRTC offers\nhandleAnswer: (string, webrtc.SessionDescription) -> void - Processes incoming WebRTC answers",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/anacrolix/log\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/pion/webrtc/v4\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype TrackerClient struct {\n\tUrl                string\n\tGetAnnounceRequest func(_ tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error)\n\tPeerId             [20]byte\n\tOnConn             onDataChannelOpen\n\tLogger             log.Logger\n\tDialer             *websocket.Dialer\n\n\tmu             sync.Mutex\n\tcond           sync.Cond\n\toutboundOffers map[string]outboundOfferValue\n\twsConn         *websocket.Conn\n\tclosed         bool\n\tpingTicker     *time.Ticker\n\n\tWebsocketTrackerHttpHeader func() http.Header\n\tICEServers                 []webrtc.ICEServer\n\n\trtcPeerConns map[string]*wrappedPeerConnection\n}\n\nfunc (tc *TrackerClient) doWebsocket() error {\n\ttc.mu.Lock()\n\ttc.mu.Unlock()\n\n\tvar header http.Header\n\tif tc.WebsocketTrackerHttpHeader != nil {\n\t\theader = tc.WebsocketTrackerHttpHeader()\n\t}\n\n\tc, _, err := tc.Dialer.Dial(tc.Url, header)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"dialing tracker: %w\", err)\n\t}\n\tdefer c.Close()\n\ttc.Logger.WithDefaultLevel(log.Info).Printf(\"connected\")\n\ttc.mu.Lock()\n\ttc.wsConn = c\n\ttc.cond.Broadcast()\n\ttc.mu.Unlock()\n\tcloseChan := make(chan struct{})\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-tc.pingTicker.C:\n\t\t\t\ttc.mu.Lock()\n\t\t\t\terr := c.WriteMessage(websocket.PingMessage, []byte{})\n\t\t\t\ttc.mu.Unlock()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-closeChan:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\terr = tc.trackerReadLoop(tc.wsConn)\n\tclose(closeChan)\n\ttc.mu.Lock()\n\tc.Close()\n\ttc.mu.Unlock()\n\treturn err\n}\n\nfunc (tc *TrackerClient) trackerReadLoop(tracker *websocket.Conn) error {\n\tfor {\n\t\t_, message, err := tracker.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"read message error: %w\", err)\n\t\t}\n\t\ttc.Logger.Levelf(log.Debug, \"received message: %q\", message)\n\n\t\tvar ar AnnounceResponse\n\t\tif err := json.Unmarshal(message, &ar); err != nil {\n\t\t\ttc.Logger.WithDefaultLevel(log.Warning).Printf(\"error unmarshalling announce response: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tswitch {\n\t\tcase ar.Offer != nil:\n\t\t\tih, err := jsonStringToInfoHash(ar.InfoHash)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.WithDefaultLevel(log.Warning).Printf(\"error decoding info_hash in offer: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = tc.handleOffer(offerContext{\n\t\t\t\tSessDesc: *ar.Offer,\n\t\t\t\tId:       ar.OfferID,\n\t\t\t\tInfoHash: ih,\n\t\t\t}, ar.PeerID)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.Levelf(log.Error, \"handling offer for infohash %x: %v\", ih, err)\n\t\t\t}\n\t\tcase ar.Answer != nil:\n\t\t\ttc.handleAnswer(ar.OfferID, *ar.Answer)\n\t\tdefault:\n\t\t\t_, err := jsonStringToInfoHash(ar.InfoHash)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.Levelf(log.Warning, \"unexpected announce response %q\", message)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (tc *TrackerClient) writeMessage(data []byte) error {\n\tfor tc.wsConn == nil {\n\t\tif tc.closed {\n\t\t\treturn fmt.Errorf(\"%T closed\", tc)\n\t\t}\n\t\ttc.cond.Wait()\n\t}\n\treturn tc.wsConn.WriteMessage(websocket.TextMessage, data)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/pion/webrtc\"\n)\n\ntype TrackerClient struct {\n\tUrl                   string\n\tGetAnnounceRequest    func(tracker.AnnounceEvent, [20]byte) (tracker.AnnounceRequest, error)\n\tPeerId                [20]byte\n\tOnConn                func(*webrtc.DataChannel)\n\tLogger                *log.Logger\n\tDialer                *websocket.Dialer\n\tmu                    sync.Mutex\n\tcond                  *sync.Cond\n\toutboundOffers        map[string]outboundOfferValue\n\twsConn                *websocket.Conn\n\tclosed                bool\n\tpingTicker            *time.Ticker\n\tWebsocketTrackerHttpHeader func() http.Header\n\tICEServers            []webrtc.ICEServer\n\trtcPeerConns          map[string]*wrappedPeerConnection\n}\n\ntype outboundOfferValue struct {\n\t// Placeholder for actual implementation\n}\n\ntype wrappedPeerConnection struct {\n\t// Placeholder for actual implementation\n}\n\nfunc NewTrackerClient(url string, peerID [20]byte) *TrackerClient {\n\tclient := &TrackerClient{\n\t\tUrl:            url,\n\t\tPeerId:         peerID,\n\t\tLogger:         log.New(os.Stdout, \"[TrackerClient] \", log.LstdFlags),\n\t\tDialer:         &websocket.Dialer{},\n\t\toutboundOffers: make(map[string]outboundOfferValue),\n\t\trtcPeerConns:   make(map[string]*wrappedPeerConnection),\n\t\tclosed:         false,\n\t}\n\tclient.cond = sync.NewCond(&client.mu)\n\treturn client\n}\n\nfunc (c *TrackerClient) doWebsocket() error {\n\t// Implementation for establishing WebSocket connection\n\tconn, _, err := c.Dialer.Dial(c.Url, c.WebsocketTrackerHttpHeader())\n\tif err != nil {\n\t\treturn err\n\t}\n\tc.mu.Lock()\n\tc.wsConn = conn\n\tc.mu.Unlock()\n\n\tgo c.trackerReadLoop(conn)\n\tgo func() {\n\t\tticker := time.NewTicker(30 * time.Second)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tc.writeMessage([]byte(\"ping\"))\n\t\t\t}\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (c *TrackerClient) trackerReadLoop(conn *websocket.Conn) error {\n\t// Implementation for handling incoming messages\n\tfor {\n\t\t_, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Process message\n\t}\n}\n\nfunc (c *TrackerClient) writeMessage(message []byte) error {\n\t// Implementation for writing to WebSocket\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\treturn c.wsConn.WriteMessage(websocket.TextMessage, message)\n}\n\nfunc (c *TrackerClient) handleOffer(ctx offerContext, id string) error {\n\t// Implementation for handling WebRTC offers\n\tconfig := webrtc.Configuration{ICEServers: c.ICEServers}\n\tpeerConn, err := webrtc.NewPeerConnection(config)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Additional setup\n\treturn nil\n}\n\nfunc (c *TrackerClient) handleAnswer(id string, answer webrtc.SessionDescription) {\n\t// Implementation for handling WebRTC answers\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\t// Set remote description\n}"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Go function that establishes a WebSocket connection to a specified URL, sends a protobuf message as a JSON payload, and returns the WebSocket connection for further communication.\n\nFunction Description: The function `openWebSocket` establishes a secure WebSocket connection (wss://) to a given URL with optional custom headers. It authenticates using admin macaroon if no custom headers are provided, sends a protobuf message as JSON, and returns the active WebSocket connection. The caller is responsible for closing the connection.\n\nInput:\n- `node` [*node.HarnessNode] - Node configuration containing REST address and authentication details\n- `url` [string] - The endpoint path for the WebSocket connection\n- `method` [string] - The method parameter to include in the query string\n- `req` [proto.Message] - The protobuf message to send as initial payload\n- `customHeader` [http.Header] - Optional custom HTTP headers for the request\n\nOutput:\n- [*websocket.Conn] - Established WebSocket connection for bidirectional communication\n- [error] - Error if any step in the connection process fails",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lightningnetwork/lnd/lnrpc\"\n\t\"github.com/lightningnetwork/lnd/lntest/node\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar (\n\twebSocketDialer = &websocket.Dialer{\n\t\tHandshakeTimeout: time.Second,\n\t\tTLSClientConfig:  insecureTransport.TLSClientConfig,\n\t}\n\tcloseMsg = websocket.FormatCloseMessage(\n\t\twebsocket.CloseNormalClosure, \"done\",\n\t)\n)\n\nfunc openWebSocket(node *node.HarnessNode, url, method string,\n\treq proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\n\theader := customHeader\n\tif header == nil {\n\t\theader = make(http.Header)\n\t\tif err := addAdminMacaroon(node, header); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tfullURL := fmt.Sprintf(\n\t\t\"wss://%s%s?method=%s\", node.Cfg.RESTAddr(), url, method,\n\t)\n\tconn, resp, err := webSocketDialer.Dial(fullURL, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() { _ = resp.Body.Close() }()\n\n\treqMsg, err := lnrpc.RESTJsonMarshalOpts.Marshal(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = conn.WriteMessage(websocket.TextMessage, reqMsg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 117,
    "wrong_result": "import (\n\t\"encoding/hex\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n\tneturl \"net/url\"\n\t\"time\"\n)\n\nfunc openWebSocket(node *node.HarnessNode, url string, method string, req proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\thost := node.RestAddress()\n\tu := neturl.URL{\n\t\tScheme:   \"wss\",\n\t\tHost:     host,\n\t\tPath:     url,\n\t\tRawQuery: \"method=\" + neturl.QueryEscape(method),\n\t}\n\n\tif customHeader == nil {\n\t\tcustomHeader = http.Header{}\n\t\tmac, err := node.AdminMacaroon()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcustomHeader.Set(\"Grpc-Metadata-macaroon\", hex.EncodeToString(mac))\n\t}\n\n\tdialer := &websocket.Dialer{\n\t\tHandshakeTimeout: 45 * time.Second,\n\t}\n\tconn, _, err := dialer.Dial(u.String(), customHeader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tjsonBytes, err := protojson.Marshal(req)\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\tif err := conn.WriteMessage(websocket.TextMessage, jsonBytes); err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that can establish secure connections, handle protocol negotiation, and manage message transmission between client and server. The solution should support TLS configuration, proxy settings, and proper connection cleanup.\n\nStruct Description: The RoundTripper struct implements http.RoundTripper interface to handle WebSocket connections with additional capabilities for Kubernetes API server communication. It manages WebSocket connections with TLS support and proxy configuration.\n\nFields:\n- TLSConfig: *tls.Config - Configuration for TLS/SSL connections\n- Proxier: func(req *http.Request) (*url.URL, error) - Function to determine proxy for requests\n- Conn: *gwebsocket.Conn - Active WebSocket connection\n\nMethods:\n- Connection: () -> *gwebsocket.Conn - Returns the active WebSocket connection\n- DataBufferSize: () -> int - Returns the buffer size for data transmission (32KB by default)\n- TLSClientConfig: () -> *tls.Config - Returns the TLS configuration\n- RoundTrip: (*http.Request) -> (*http.Response, error) - Main method that establishes WebSocket connection, handles protocol negotiation, and returns the HTTP response\n\nAdditional Function:\n- RoundTripperFor: (*restclient.Config) -> (http.RoundTripper, ConnectionHolder, error) - Factory function that creates a configured RoundTripper instance with proper TLS and proxy settings from Kubernetes client configuration",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tgwebsocket \"github.com/gorilla/websocket\"\n\t\"k8s.io/apimachinery/pkg/util/httpstream\"\n\t\"k8s.io/apimachinery/pkg/util/httpstream/wsstream\"\n\tutilnet \"k8s.io/apimachinery/pkg/util/net\"\n\trestclient \"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/transport\"\n)\n\ntype RoundTripper struct {\n\tTLSConfig *tls.Config\n\tProxier   func(req *http.Request) (*url.URL, error)\n\tConn      *gwebsocket.Conn\n}\n\nfunc (rt *RoundTripper) Connection() *gwebsocket.Conn {\n\treturn rt.Conn\n}\n\nfunc (rt *RoundTripper) DataBufferSize() int {\n\treturn 32 * 1024\n}\n\nfunc (rt *RoundTripper) TLSClientConfig() *tls.Config {\n\treturn rt.TLSConfig\n}\n\nfunc (rt *RoundTripper) RoundTrip(request *http.Request) (retResp *http.Response, retErr error) {\n\tdefer func() {\n\t\tif request.Body != nil {\n\t\t\terr := request.Body.Close()\n\t\t\tif retErr == nil {\n\t\t\t\tretErr = err\n\t\t\t}\n\t\t}\n\t}()\n\n\tprotocolVersions := request.Header[wsstream.WebSocketProtocolHeader]\n\tdelete(request.Header, wsstream.WebSocketProtocolHeader)\n\n\tdialer := gwebsocket.Dialer{\n\t\tProxy:           rt.Proxier,\n\t\tTLSClientConfig: rt.TLSConfig,\n\t\tSubprotocols:    protocolVersions,\n\t\tReadBufferSize:  rt.DataBufferSize() + 1024,\n\t\tWriteBufferSize: rt.DataBufferSize() + 1024,\n\t}\n\tswitch request.URL.Scheme {\n\tcase \"https\":\n\t\trequest.URL.Scheme = \"wss\"\n\tcase \"http\":\n\t\trequest.URL.Scheme = \"ws\"\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown url scheme: %s\", request.URL.Scheme)\n\t}\n\twsConn, resp, err := dialer.DialContext(request.Context(), request.URL.String(), request.Header)\n\tif err != nil {\n\t\tif errors.Is(err, gwebsocket.ErrBadHandshake) {\n\t\t\tcause := err\n\t\t\tif resp != nil && len(resp.Status) > 0 {\n\t\t\t\tdefer resp.Body.Close()\n\t\t\t\tcause = fmt.Errorf(\"%w (%s)\", err, resp.Status)\n\t\t\t\tresponseErrorBytes, readErr := io.ReadAll(io.LimitReader(resp.Body, 64*1024))\n\t\t\t\tif readErr != nil {\n\t\t\t\t\tcause = fmt.Errorf(\"%w: unable to read error from server response\", cause)\n\t\t\t\t} else {\n\t\t\t\t\tresponseError := strings.TrimSpace(string(responseErrorBytes))\n\t\t\t\t\tif len(responseError) > 0 {\n\t\t\t\t\t\tif obj, _, decodeErr := statusCodecs.UniversalDecoder().Decode(responseErrorBytes, nil, &metav1.Status{}); decodeErr == nil {\n\t\t\t\t\t\t\tif status, ok := obj.(*metav1.Status); ok {\n\t\t\t\t\t\t\t\tcause = &apierrors.StatusError{ErrStatus: *status}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcause = fmt.Errorf(\"%w: %s\", cause, responseError)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil, &httpstream.UpgradeFailureError{Cause: cause}\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tfoundProtocol := false\n\tfor _, protocolVersion := range protocolVersions {\n\t\tif protocolVersion == wsConn.Subprotocol() {\n\t\t\tfoundProtocol = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !foundProtocol {\n\t\twsConn.Close()\n\t\treturn nil, &httpstream.UpgradeFailureError{Cause: fmt.Errorf(\"invalid protocol, expected one of %q, got %q\", protocolVersions, wsConn.Subprotocol())}\n\t}\n\n\trt.Conn = wsConn\n\n\treturn resp, nil\n}\n\nfunc RoundTripperFor(config *restclient.Config) (http.RoundTripper, ConnectionHolder, error) {\n\ttransportCfg, err := config.TransportConfig()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\ttlsConfig, err := transport.TLSConfigFor(transportCfg)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tproxy := config.Proxy\n\tif proxy == nil {\n\t\tproxy = utilnet.NewProxierWithNoProxyCIDR(http.ProxyFromEnvironment)\n\t}\n\n\tupgradeRoundTripper := &RoundTripper{\n\t\tTLSConfig: tlsConfig,\n\t\tProxier:   proxy,\n\t}\n\twrapper, err := transport.HTTPWrappersForConfig(transportCfg, upgradeRoundTripper)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\treturn wrapper, upgradeRoundTripper, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n\tgwebsocket \"github.com/gorilla/websocket\"\n\t\"k8s.io/client-go/rest\"\n\trestclient \"k8s.io/client-go/rest\"\n)\n\ntype ConnectionHolder interface {\n\tConnection() *gwebsocket.Conn\n}\n\ntype RoundTripper struct {\n\tTLSConfig   *tls.Config\n\tProxier     func(req *http.Request) (*url.URL, error)\n\tConn        *gwebsocket.Conn\n}\n\nfunc (r *RoundTripper) Connection() *gwebsocket.Conn {\n\treturn r.Conn\n}\n\nfunc (r *RoundTripper) DataBufferSize() int {\n\treturn 32 * 1024\n}\n\nfunc (r *RoundTripper) TLSClientConfig() *tls.Config {\n\treturn r.TLSConfig\n}\n\nfunc (r *RoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {\n\tif r.Conn != nil {\n\t\tr.Conn.Close()\n\t\tr.Conn = nil\n\t}\n\n\tu := request.URL\n\tscheme := u.Scheme\n\tif scheme == \"http\" {\n\t\tscheme = \"ws\"\n\t} else if scheme == \"https\" {\n\t\tscheme = \"wss\"\n\t}\n\twsURL := scheme + \"://\" + u.Host + u.Path\n\tif u.RawQuery != \"\" {\n\t\twsURL += \"?\" + u.RawQuery\n\t}\n\n\tdialer := &gwebsocket.Dialer{\n\t\tProxy:            r.Proxier,\n\t\tTLSClientConfig:  r.TLSConfig,\n\t\tSubprotocols:     []string{\"channel.k8s.io\"},\n\t}\n\n\tvar err error\n\tvar resp *http.Response\n\tr.Conn, resp, err = dialer.Dial(wsURL, request.Header)\n\tif err != nil {\n\t\treturn resp, err\n\t}\n\n\tif len(r.Conn.Subprotocols()) == 0 || r.Conn.Subprotocols()[0] != \"channel.k8s.io\" {\n\t\tr.Conn.Close()\n\t\treturn resp, fmt.Errorf(\"unexpected protocol %q\", r.Conn.Subprotocols())\n\t}\n\n\treturn resp, nil\n}\n\nfunc RoundTripperFor(config *restclient.Config) (http.RoundTripper, ConnectionHolder, error) {\n\ttlsConfig, err := restclient.TLSConfigFor(config)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tvar proxier func(req *http.Request) (*url.URL, error)\n\tif config.ProxyURL != \"\" {\n\t\tproxyURL, err := url.Parse(config.ProxyURL)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tproxier = func(req *http.Request) (*url.URL, error) {\n\t\t\treturn proxyURL, nil\n\t\t}\n\t}\n\n\trt := &RoundTripper{\n\t\tTLSConfig: tlsConfig,\n\t\tProxier:   proxier,\n\t}\n\n\treturn rt, rt, nil\n}"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Create a WebSocket client connection wrapper in Go that provides a simplified interface for reading and writing binary messages over a WebSocket connection, with proper error handling and connection management.\n\nStruct Description: The Conn struct wraps a WebSocket connection and provides io.Reader/io.Writer compatible methods for binary message communication, along with standard net.Conn interface methods.\n\nFields:\nwsConn: *websocket.Conn - The underlying WebSocket connection\nreader: io.Reader - Current message reader for streaming message content\n\nMethods:\nNew: (wsConn *websocket.Conn) -> *Conn - Creates a new Conn wrapper instance\nDial: (ctx context.Context, url string, opts ...DialOption) -> (*Conn, error) - Establishes a new WebSocket connection with optional configuration\nRead: (b []byte) -> (int, error) - Reads binary data from the WebSocket connection (implements io.Reader)\nWrite: (b []byte) -> (int, error) - Writes binary data to the WebSocket connection (implements io.Writer)\nClose: () -> error - Closes the WebSocket connection\nLocalAddr: () -> net.Addr - Returns local network address\nRemoteAddr: () -> net.Addr - Returns remote network address\nSetDeadline: (t time.Time) -> error - Sets both read and write deadlines\nSetReadDeadline: (t time.Time) -> error - Sets read deadline\nSetWriteDeadline: (t time.Time) -> error - Sets write deadline",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Conn struct {\n\twsConn *websocket.Conn\n\treader io.Reader\n}\n\nfunc New(wsConn *websocket.Conn) *Conn {\n\treturn &Conn{\n\t\twsConn: wsConn,\n\t\treader: nil,\n\t}\n}\n\nfunc Dial(ctx context.Context, url string, opts ...DialOption) (*Conn, error) {\n\toptions := dialOptions{}\n\tfor _, o := range opts {\n\t\to.apply(&options)\n\t}\n\n\tdialer := &websocket.Dialer{\n\t\tHandshakeTimeout: 60 * time.Second,\n\t}\n\n\tif options.tlsConfig != nil {\n\t\tdialer.TLSClientConfig = options.tlsConfig\n\t}\n\n\theader := make(http.Header)\n\tif options.token != \"\" {\n\t\theader.Set(\"Authorization\", \"Bearer \"+options.token)\n\t}\n\n\twsConn, resp, err := dialer.DialContext(\n\t\tctx, url, header,\n\t)\n\tif err == nil {\n\t\treturn New(wsConn), nil\n\t}\n\tif resp == nil {\n\t\treturn nil, NewRetryableError(err)\n\t}\n\tdefer resp.Body.Close()\n\n\terr = fmt.Errorf(\"%d: %w\", resp.StatusCode, err)\n\tif _, ok := retryableStatusCodes[resp.StatusCode]; ok {\n\t\treturn nil, NewRetryableError(err)\n\t}\n\treturn nil, err\n}\n\nfunc (c *Conn) Read(b []byte) (int, error) {\n\tfor {\n\t\tif c.reader == nil {\n\t\t\tmt, r, err := c.wsConn.NextReader()\n\t\t\tif err != nil {\n\t\t\t\tvar closeErr *websocket.CloseError\n\t\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\t\treturn 0, net.ErrClosed\n\t\t\t\t}\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tif mt != websocket.BinaryMessage {\n\t\t\t\treturn 0, fmt.Errorf(\"unexpected message type: %d\", mt)\n\t\t\t}\n\t\t\tc.reader = r\n\t\t}\n\n\t\tn, err := c.reader.Read(b)\n\t\tif n > 0 {\n\t\t\tif err != nil {\n\t\t\t\tc.reader = nil\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\terr = nil\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n, err\n\t\t}\n\t\tif err != io.EOF {\n\t\t\tvar closeErr *websocket.CloseError\n\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\treturn 0, net.ErrClosed\n\t\t\t}\n\t\t\treturn 0, err\n\t\t}\n\n\t\tc.reader = nil\n\t}\n}\n\nfunc (c *Conn) Write(b []byte) (int, error) {\n\tif err := c.wsConn.WriteMessage(websocket.BinaryMessage, b); err != nil {\n\t\tvar closeErr *websocket.CloseError\n\t\tif errors.As(err, &closeErr) {\n\t\t\treturn 0, net.ErrClosed\n\t\t}\n\t\treturn 0, err\n\t}\n\treturn len(b), nil\n}\n\nfunc (c *Conn) Close() error {\n\treturn c.wsConn.Close()\n}\n\nfunc (c *Conn) LocalAddr() net.Addr {\n\treturn c.wsConn.LocalAddr()\n}\n\nfunc (c *Conn) RemoteAddr() net.Addr {\n\treturn c.wsConn.RemoteAddr()\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\tif err := c.SetReadDeadline(t); err != nil {\n\t\treturn err\n\t}\n\treturn c.SetWriteDeadline(t)\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\treturn c.wsConn.SetReadDeadline(t)\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\treturn c.wsConn.SetWriteDeadline(t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "package websocketwrapper\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Conn struct {\n\twsConn  *websocket.Conn\n\treader  io.Reader\n}\n\ntype DialOption func(*websocket.Dialer)\n\nfunc New(wsConn *websocket.Conn) *Conn {\n\treturn &Conn{\n\t\twsConn: wsConn,\n\t}\n}\n\nfunc Dial(ctx context.Context, url string, opts ...DialOption) (*Conn, error) {\n\td := &websocket.Dialer{}\n\tfor _, opt := range opts {\n\t\topt(d)\n\t}\n\twsConn, _, err := d.DialContext(ctx, url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn New(wsConn), nil\n}\n\nfunc (c *Conn) Read(b []byte) (int, error) {\n\tfor {\n\t\tif c.reader == nil {\n\t\t\tmt, data, err := c.wsConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tif mt != websocket.BinaryMessage {\n\t\t\t\treturn 0, io.ErrUnexpectedEOF\n\t\t\t}\n\t\t\tc.reader = bytes.NewReader(data)\n\t\t}\n\n\t\tn, err := c.reader.Read(b)\n\t\tif err == io.EOF {\n\t\t\tc.reader = nil\n\t\t\tif n > 0 {\n\t\t\t\treturn n, nil\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif err != nil {\n\t\t\treturn n, err\n\t\t}\n\t\treturn n, nil\n\t}\n}\n\nfunc (c *Conn) Write(b []byte) (int, error) {\n\tif err := c.wsConn.WriteMessage(websocket.BinaryMessage, b); err != nil {\n\t\treturn 0, err\n\t}\n\treturn len(b), nil\n}\n\nfunc (c *Conn) Close() error {\n\treturn c.wsConn.Close()\n}\n\nfunc (c *Conn) LocalAddr() net.Addr {\n\treturn c.wsConn.LocalAddr()\n}\n\nfunc (c *Conn) RemoteAddr() net.Addr {\n\treturn c.wsConn.RemoteAddr()\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\treturn c.wsConn.UnderlyingConn().SetDeadline(t)\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\treturn c.wsConn.UnderlyingConn().SetReadDeadline(t)\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\treturn c.wsConn.UnderlyingConn().SetWriteDeadline(t)\n}"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a WebSocket server handler for a DERP (Distributed Encrypted Relay for Packets) server using the nhooyr.io/websocket library in Go. The handler should upgrade HTTP connections to WebSocket, enforce protocol requirements, and establish the connection for DERP communication.\n\nStruct Description: The DERPServer struct represents a DERP server instance that handles WebSocket connections for relaying encrypted packets between Tailscale nodes.\n\nFields:\nkey: [key.NodePrivate] - The private key used for node authentication\ntailscaleDERP: [*derp.Server] - The underlying DERP server instance that manages relay connections\n\nMethods:\nserveWebsocket: [Name](writer http.ResponseWriter, req *http.Request) -> [void] - Handles incoming HTTP requests by upgrading them to WebSocket connections. Validates the subprotocol, creates a network connection wrapper around the WebSocket, and passes it to the DERP server for handling.\n\nInput:\n- writer: [http.ResponseWriter] - The HTTP response writer\n- req: [*http.Request] - The incoming HTTP request\n\nOutput:\n- None (handles connection directly, may write error responses to writer)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/coder/websocket\"\n\t\"tailscale.com/derp\"\n\t\"tailscale.com/net/wsconn\"\n)\n\ntype DERPServer struct {\n\tkey           key.NodePrivate\n\ttailscaleDERP *derp.Server\n}\n\nfunc (d *DERPServer) serveWebsocket(writer http.ResponseWriter, req *http.Request) {\n\twebsocketConn, err := websocket.Accept(writer, req, &websocket.AcceptOptions{\n\t\tSubprotocols:   []string{\"derp\"},\n\t\tOriginPatterns: []string{\"*\"},\n\t\tCompressionMode: websocket.CompressionDisabled,\n\t})\n\tif err != nil {\n\t\twriter.Header().Set(\"Content-Type\", \"text/plain\")\n\t\twriter.WriteHeader(http.StatusInternalServerError)\n\t\t_, err = writer.Write([]byte(\"Failed to upgrade websocket request\"))\n\t\treturn\n\t}\n\tdefer websocketConn.Close(websocket.StatusInternalError, \"closing\")\n\tif websocketConn.Subprotocol() != \"derp\" {\n\t\twebsocketConn.Close(websocket.StatusPolicyViolation, \"client must speak the derp subprotocol\")\n\t\treturn\n\t}\n\n\twc := wsconn.NetConn(req.Context(), websocketConn, websocket.MessageBinary, req.RemoteAddr)\n\tbrw := bufio.NewReadWriter(bufio.NewReader(wc), bufio.NewWriter(wc))\n\td.tailscaleDERP.Accept(req.Context(), wc, brw, req.RemoteAddr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "package derpserver\n\nimport (\n\t\"net/http\"\n\n\t\"nhooyr.io/websocket\"\n)\n\ntype DERPServer struct {\n\tkey             [32]byte\n\ttailscaleDERP   *derp.Server\n}\n\nfunc (s *DERPServer) serveWebsocket(writer http.ResponseWriter, req *http.Request) {\n\tconn, err := websocket.Accept(writer, req, &websocket.AcceptOptions{\n\t\tSubprotocols: []string{\"tailscale-derp-1\"},\n\t})\n\tif err != nil {\n\t\thttp.Error(writer, \"WebSocket upgrade failed: \"+err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tnc := websocket.NetConn(req.Context(), conn, websocket.MessageBinary)\n\tif nc == nil {\n\t\tconn.Close(websocket.StatusInternalError)\n\t\treturn\n\t}\n\n\tgo s.tailscaleDERP.ServeConn(nc)\n}"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a WebSocket server in Go that handles WebSocket connections, messages, and events using the nhooyr.io/websocket package. The server should provide event-based handling for connection establishment, message reception, and connection closure.\n\nStruct Description: The `testServer` struct represents a WebSocket server with event handling capabilities. It manages HTTP routes, WebSocket connections, and provides methods to subscribe to WebSocket events.\n\nFields:\n\n- sync.Mutex: sync.Mutex - Provides thread-safe access to the server's resources\n- eventEmitter: playwright.EventEmitter - Handles event subscription and emission for WebSocket events\n- mux: *http.ServeMux - HTTP request multiplexer for routing\n- testServer: *httptest.Server - HTTP test server instance\n- routes: map[string]http.HandlerFunc - Map of URL paths to their handler functions\n- requestSubscriberes: map[string][]chan *http.Request - Channels for request subscribers\n- PREFIX: string - Server URL prefix\n- EMPTY_PAGE: string - Path to empty page\n- CROSS_PROCESS_PREFIX: string - Prefix for cross-process communication\n- WS_PREFIX: string - WebSocket endpoint prefix\n- PORT: string - Server port number\n\nMethods:\n\n- wsHandler: (w http.ResponseWriter, r *http.Request) -> void - Handles WebSocket connection upgrade and message processing\n- OnceWebSocketConnection: (handler func(c *websocket.Conn, r *http.Request)) -> void - Registers a one-time connection handler\n- OnWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a persistent close handler\n- OnceWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a one-time close handler\n- OnWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a persistent message handler\n- OnceWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a one-time message handler\n- SendOnWebSocketConnection: (msgType websocket.MessageType, data []byte) -> void - Sends a message when a connection is established\n- WaitForWebSocketConnection: () -> <-chan *wsConnection - Returns a channel that receives the first WebSocket connection\n\nAdditional Struct:\n\n- wsConnection: struct - Represents an active WebSocket connection\n  Fields:\n    - Conn: *websocket.Conn - The WebSocket connection\n    - Req: *http.Request - The associated HTTP request\n  Methods:\n    - SendMessage: (msgType websocket.MessageType, data []byte) -> void - Sends a message through the connection",
    "Canonical_solution": "import (\n\t\"github.com/coder/websocket\"\n\t\"github.com/playwright-community/playwright-go\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype testServer struct {\n\tsync.Mutex\n\teventEmitter         playwright.EventEmitter\n\tmux                  *http.ServeMux\n\ttestServer           *httptest.Server\n\troutes               map[string]http.HandlerFunc\n\trequestSubscriberes  map[string][]chan *http.Request\n\tPREFIX               string\n\tEMPTY_PAGE           string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX            string\n\tPORT                 string\n}\n\nfunc (t *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tInsecureSkipVerify: true,\n\t})\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not upgrade ws connection:\", err)\n\t\treturn\n\t}\n\tdefer c.Close(websocket.StatusNormalClosure, \"\")\n\n\tt.eventEmitter.Emit(\"connection\", c, r)\n\n\tfor {\n\t\ttyp, message, err := c.Read(r.Context())\n\t\tif err != nil {\n\t\t\tcloseErr := new(websocket.CloseError)\n\t\t\tif errors.As(err, closeErr) {\n\t\t\t\tt.eventEmitter.Emit(\"close\", closeErr)\n\t\t\t}\n\t\t\tswitch websocket.CloseStatus(err) {\n\t\t\tcase websocket.StatusNormalClosure, websocket.StatusGoingAway, websocket.StatusNoStatusRcvd:\n\t\t\tdefault:\n\t\t\t\tlog.Println(\"testServer: could not read ws message:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tt.eventEmitter.Emit(\"message\", c, r, typ, message)\n\t}\n}\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (c *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\terr := c.Conn.Write(c.Req.Context(), msgType, data)\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\treturn\n\t}\n}\n\nfunc (t *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\tt.eventEmitter.Once(\"connection\", handler)\n}\n\nfunc (t *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.On(\"close\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.Once(\"close\", handler)\n}\n\nfunc (t *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.On(\"message\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.Once(\"message\", handler)\n}\n\nfunc (t *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\terr := c.Write(r.Context(), msgType, data)\n\t\tif err != nil {\n\t\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\t\treturn\n\t\t}\n\t})\n}\n\nfunc (t *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tchannel := make(chan *wsConnection)\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\tchannel <- &wsConnection{Conn: c, Req: r}\n\t\tclose(channel)\n\t})\n\treturn channel\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"sync\"\n\n\t\"github.com/playwright-community/playwright-go\"\n\t\"nhooyr.io/websocket\"\n)\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (w *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\tw.Conn.Write(context.Background(), msgType, data)\n}\n\ntype testServer struct {\n\tsync.Mutex\n\teventEmitter       *playwright.EventEmitter\n\tmux                *http.ServeMux\n\ttestServer         *httptest.Server\n\troutes             map[string]http.HandlerFunc\n\trequestSubscribers map[string][]chan *http.Request\n\tPREFIX             string\n\tEMPTY_PAGE         string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX          string\n\tPORT               string\n}\n\nfunc (s *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tInsecureSkipVerify: true,\n\t})\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tconn := &wsConnection{Conn: c, Req: r}\n\ts.eventEmitter.Emit(\"connection\", c, r)\n\n\tfor {\n\t\tmsgType, msg, err := c.Read(r.Context)\n\t\tif err != nil {\n\t\t\tif closeErr, ok := err.(*websocket.CloseError); ok {\n\t\t\t\ts.eventEmitter.Emit(\"close\", closeErr)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\ts.eventEmitter.Emit(\"message\", c, r, msgType, msg)\n\t}\n}\n\nfunc (s *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\ts.eventEmitter.Once(\"connection\", func(args ...interface{}) {\n\t\tif len(args) == 2 {\n\t\t\tif conn, ok := args[0].(*websocket.Conn); ok {\n\t\t\t\tif req, ok := args[1].(*http.Request); ok {\n\t\t\t\t\thandler(conn, req)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (s *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\ts.eventEmitter.On(\"close\", func(args ...interface{}) {\n\t\tif len(args) == 1 {\n\t\t\tif err, ok := args[0].(*websocket.CloseError); ok {\n\t\t\t\thandler(err)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\ts.eventEmitter.Once(\"close\", func(args ...interface{}) {\n\t\tif len(args) == 1 {\n\t\t\tif err, ok := args[0].(*websocket.CloseError); ok {\n\t\t\t\thandler(err)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (s *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\ts.eventEmitter.On(\"message\", func(args ...interface{}) {\n\t\tif len(args) == 4 {\n\t\t\tif conn, ok := args[0].(*websocket.Conn); ok {\n\t\t\t\tif req, ok := args[1].(*http.Request); ok {\n\t\t\t\t\tif mt, ok := args[2].(websocket.MessageType); ok {\n\t\t\t\t\t\tif msg, ok := args[3].([]byte); ok {\n\t\t\t\t\t\t\thandler(conn, req, mt, msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\ts.eventEmitter.Once(\"message\", func(args ...interface{}) {\n\t\tif len(args) == 4 {\n\t\t\tif conn, ok := args[0].(*websocket.Conn); ok {\n\t\t\t\tif req, ok := args[1].(*http.Request); ok {\n\t\t\t\t\tif mt, ok := args[2].(websocket.MessageType); ok {\n\t\t\t\t\t\tif msg, ok := args[3].([]byte); ok {\n\t\t\t\t\t\t\thandler(conn, req, mt, msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (s *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\ts.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\tc.Write(r.Context, msgType, data)\n\t})\n}\n\nfunc (s *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tch := make(chan *wsConnection, 1)\n\ts.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\tch <- &wsConnection{Conn: c, Req: r}\n\t})\n\treturn ch\n}"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: The task involves creating a WebSocket handler in Go that upgrades HTTP connections to WebSocket connections, manages the connection lifecycle, and handles message exchange between client and server.\n\nStruct Description: The WsHandler struct is responsible for managing WebSocket connections, including upgrading HTTP connections, handling incoming messages, and managing connection state.\n\nFields:\n- svcCtx: *svc.ServiceContext - A reference to the service context containing dependencies and configuration\n\nMethods:\n- Upgrade: (ginCtx *gin.Context) -> void - Upgrades an HTTP connection to a WebSocket connection and manages the connection lifecycle\n  Input: ginCtx *gin.Context - The Gin context containing HTTP request and response objects\n  Output: None (handles connection directly)\n\n- onReceive: (ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) -> (pb.ResponseCode, error) - Handles incoming WebSocket messages\n  Input: \n    - ctx context.Context - Context for the operation\n    - connection *gatewayservicelogic.Connection - The WebSocket connection object\n    - typ websocket.MessageType - Type of the WebSocket message\n    - msg []byte - The message content\n  Output:\n    - pb.ResponseCode - Response code indicating processing result\n    - error - Any error that occurred during processing",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\tgatewayservicelogic \"github.com/cherish-chat/xxim-server/app/gateway/internal/logic/gatewayservice\"\n\t\"github.com/cherish-chat/xxim-server/common/pb\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\toteltrace \"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/protobuf/proto\"\n\t\"io\"\n\t\"math\"\n\t\"nhooyr.io/websocket\"\n\t\"strings\"\n)\n\ntype WsHandler struct {\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc (h *WsHandler) Upgrade(ginCtx *gin.Context) {\n\tr := ginCtx.Request\n\tw := ginCtx.Writer\n\tlogger := logx.WithContext(r.Context())\n\theaders := make(map[string]string)\n\tfor k, v := range r.Header {\n\t\tif len(v) > 0 {\n\t\t\theaders[k] = v[0]\n\t\t}\n\t}\n\theader := &pb.RequestHeader{\n\t\tClientIp: utils.Http.GetClientIP(r),\n\t}\n\tcompressionMode := websocket.CompressionNoContextTakeover\n\tif strings.Contains(r.UserAgent(), \"Safari\") {\n\t\tcompressionMode = websocket.CompressionDisabled\n\t}\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tSubprotocols:         nil,\n\t\tInsecureSkipVerify:   true,\n\t\tOriginPatterns:       nil,\n\t\tCompressionMode:      compressionMode,\n\t\tCompressionThreshold: 0,\n\t})\n\tif err != nil {\n\t\tif r.URL.Path == \"/\" {\n\t\t\treturn\n\t\t}\n\t\tlogger.Errorf(\"failed to accept websocket connection: %v\", err)\n\t\treturn\n\t}\n\tc.SetReadLimit(math.MaxInt32)\n\tbeforeConnectResp, err := h.svcCtx.CallbackService.UserBeforeConnect(r.Context(), &pb.UserBeforeConnectReq{Header: header})\n\tif err != nil {\n\t\tlogger.Errorf(\"beforeConnect error: %v\", err)\n\t\tc.Close(websocket.StatusCode(pb.WebsocketCustomCloseCode_CloseCodeServerInternalError), err.Error())\n\t\treturn\n\t}\n\tif !beforeConnectResp.Success {\n\t\tc.Close(websocket.StatusCode(beforeConnectResp.CloseCode), beforeConnectResp.CloseReason)\n\t\treturn\n\t}\n\n\theader.UserId = beforeConnectResp.UserId\n\n\tdefer c.Close(websocket.StatusInternalError, \"\")\n\n\tctx, cancelFunc := context.WithCancel(r.Context())\n\tconnection := gatewayservicelogic.NewWebsocketConnect(ctx, header, c)\n\tdefer func() {\n\t\tgatewayservicelogic.ConnectionLogic.OnDisconnect(connection)\n\t}()\n\tgo func() {\n\t\tdefer cancelFunc()\n\t\tfor {\n\t\t\tlogger.Debugf(\"start read\")\n\t\t\ttyp, msg, err := c.Read(ctx)\n\t\t\tif err != nil {\n\t\t\t\tif errors.Is(err, io.EOF) {\n\t\t\t\t} else if websocket.CloseStatus(err) == websocket.StatusNormalClosure ||\n\t\t\t\t\twebsocket.CloseStatus(err) == websocket.StatusGoingAway {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else if strings.Contains(err.Error(), \"connection reset by peer\") {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else if strings.Contains(err.Error(), \"corrupt input\") {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else {\n\t\t\t\t\tlogx.Errorf(\"failed to read message: %v\", err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tgo func() {\n\t\t\t\t_, _ = h.onReceive(ctx, connection, typ, msg)\n\t\t\t}()\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (h *WsHandler) onReceive(ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) (pb.ResponseCode, error) {\n\tvar aesKey []byte\n\tvar aesIv []byte\n\tvar isEncrypt bool\n\n\tconnection.PublicKeyLock.RLock()\n\t{\n\t\tif len(connection.SharedSecret) == 0 {\n\t\t\tisEncrypt = false\n\t\t} else {\n\t\t\tisEncrypt = true\n\t\t\taesKey = connection.SharedSecret[:]\n\t\t\taesIv = connection.SharedSecret[8:24]\n\t\t}\n\t}\n\tconnection.PublicKeyLock.RUnlock()\n\n\tif isEncrypt {\n\t\tvar err error\n\t\tmsg, err = utils.Aes.Decrypt(aesKey, aesIv, msg)\n\t\tif err != nil {\n\t\t\tlogx.Errorf(\"decrypt message error: %v\", err)\n\t\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", err)\n\t\t}\n\t}\n\n\tapiRequest := &pb.GatewayApiRequest{}\n\terr := proto.Unmarshal(msg, apiRequest)\n\tif err != nil {\n\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", err)\n\t}\n\tapiRequest.Header = connection.GetHeader()\n\troute, ok := universalRouteMap[apiRequest.Path]\n\ttracer := otel.Tracer(common.TraceName)\n\tpropagator := otel.GetTextMapPropagator()\n\tspanName := apiRequest.Path\n\tcarrier := propagation.MapCarrier{\n\t\t\"appId\":       apiRequest.Header.AppId,\n\t\t\"userId\":      apiRequest.Header.UserId,\n\t\t\"clientIp\":    apiRequest.Header.ClientIp,\n\t\t\"installId\":   apiRequest.Header.InstallId,\n\t\t\"platform\":    apiRequest.Header.Platform.String(),\n\t\t\"deviceModel\": apiRequest.Header.DeviceModel,\n\t\t\"osVersion\":   apiRequest.Header.OsVersion,\n\t\t\"appVersion\":  apiRequest.Header.AppVersion,\n\t\t\"connectTime\": connection.ConnectedTime.Format(\"2006-01-02 15:04:05\"),\n\t\t\"extra\":       apiRequest.Header.Extra,\n\t}\n\tspanCtx := propagator.Extract(ctx, carrier)\n\tspanCtx, span := tracer.Start(spanCtx, spanName,\n\t\toteltrace.WithSpanKind(oteltrace.SpanKindServer),\n\t)\n\tdefer span.End()\n\tpropagator.Inject(spanCtx, carrier)\n\tif !ok {\n\t\tlogx.Errorf(\"path 404 not found: %s\", apiRequest.Path)\n\t\tspan.SetStatus(codes.Error, \"path\"+apiRequest.Path+\"404 not found\")\n\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", \"path 404 not found\")\n\t}\n\tcode, responseBody, err := route(spanCtx, connection, apiRequest)\n\tif len(responseBody) > 0 {\n\t\terr := connection.SendMessage(ctx, responseBody)\n\t\tif err != nil {\n\t\t\tlogx.Infof(\"failed to write message: %v\", err)\n\t\t}\n\t}\n\tspan.SetAttributes(attribute.Int(\"responseBody.length\", len(responseBody)))\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t} else {\n\t\tspan.SetStatus(codes.Ok, \"\")\n\t}\n\treturn code, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "package websocket\n\nimport (\n\t\"context\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\tpb \"github.com/your/package/pb\"\n\tgatewayservicelogic \"github.com/your/package/gatewayservicelogic\"\n\tsvc \"github.com/your/package/svc\"\n\t\"net/http\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype WsHandler struct {\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc NewWsHandler(svcCtx *svc.ServiceContext) *WsHandler {\n\treturn &WsHandler{svcCtx: svcCtx}\n}\n\nfunc (h *WsHandler) Upgrade(ginCtx *gin.Context) {\n\tconn, err := upgrader.Upgrade(ginCtx.Writer, ginCtx.Request, nil)\n\tif err != nil {\n\t\tginCtx.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"WebSocket upgrade failed\"})\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tconnection := &gatewayservicelogic.Connection{Conn: conn}\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\t_, err = h.onReceive(ginCtx.Request.Context(), connection, messageType, message)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t}\n}\n\nfunc (h *WsHandler) onReceive(ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) (pb.ResponseCode, error) {\n\treturn pb.ResponseCode_SUCCESS, nil\n}"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a child process using Go's pipe mechanism. The handler should start the child process, monitor its initialization status through the pipe, and handle potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct encapsulates a child process command and provides methods to manage its execution and IPC communication.\n\nFields:\ncmd: *exec.Cmd - The command to be executed as a child process.\n\nMethods:\nStart: Start() -> error - Initializes the child process, establishes a pipe for communication, monitors the child's initialization status, and returns any errors encountered during startup or a timeout if the child process fails to initialize within the specified duration.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tstdout, err := p.cmd.StdoutPipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\n\tinitDone := make(chan error, 1)\n\n\tgo func() {\n\t\tbuf := make([]byte, 1)\n\t\t_, err := io.ReadFull(stdout, buf)\n\t\tif err != nil {\n\t\t\tinitDone <- fmt.Errorf(\"initialization failed: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tinitDone <- nil\n\t}()\n\n\tselect {\n\tcase <-time.After(5 * time.Second):\n\t\tp.cmd.Process.Kill()\n\t\treturn fmt.Errorf(\"initialization timeout\")\n\tcase err := <-initDone:\n\t\tif err != nil {\n\t\t\tp.cmd.Process.Kill()\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n}"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Go function that securely copies a password to the system clipboard using osascript (AppleScript) via a pipe, ensuring the password is handled safely and the clipboard is cleared after use.\n\nFunction Description: The function `copyViaOsascript` uses an inter-process communication mechanism (pipe) to securely pass a password to the AppleScript command `osascript`, which then sets the password in the system clipboard. The function ensures proper resource cleanup and checks for successful execution.\n\nInput:\n- `ctx context.Context`: Context for managing the command's lifecycle and cancellation.\n- `password string`: The password string to be copied to the clipboard.\n\nOutput:\n- `error`: Returns an error if any step fails (pipe creation, command execution, or clipboard setting). Returns nil on success.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc copyViaOsascript(ctx context.Context, password string) error {\n\targs := []string{\n\t\t\"-e\", `use framework \"Foundation\"`,\n\t\t\"-e\", \"use scripting additions\",\n\t\t\"-e\", \"set type to current application's NSPasteboardTypeString\",\n\t\t\"-e\", \"set pb to current application's NSPasteboard's generalPasteboard()\",\n\t\t\"-e\", \"pb's clearContents()\",\n\t\t\"-e\", `pb's setString:\"\" forType:\"org.nspasteboard.ConcealedType\"`,\n\t\t\"-e\", `pb's setString:(do shell script \"cat 0<&3\") forType:type`,\n\t}\n\tcmd := exec.CommandContext(ctx, \"osascript\", args...)\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcmd.ExtraFiles = []*os.File{r}\n\tgo func() {\n\t\tdefer w.Close()\n\t\t_, _ = io.WriteString(w, password)\n\t}()\n\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif string(out) != \"true\\n\" {\n\t\treturn fmt.Errorf(\"osascript failed to set password: %s\", string(out))\n\t}\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "wrong_result": "import \"context\"; import \"io\"; import \"os/exec\"; import \"sync\"; import \"time\"\n\nfunc copyViaOsascript(ctx context.Context, password string) error {\n\tcmd := exec.CommandContext(ctx, \"osascript\", \"-e\", \"set the clipboard to read stdin\")\n\tstdin, err := cmd.StdinPipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tpass := []byte(password)\n\t_, err = stdin.Write(pass)\n\tfor i := range pass {\n\t\tpass[i] = 0\n\t}\n\tif err != nil {\n\t\tstdin.Close()\n\t\tcmd.Wait()\n\t\treturn err\n\t}\n\tif err := stdin.Close(); err != nil {\n\t\tcmd.Wait()\n\t\treturn err\n\t}\n\tif err := cmd.Wait(); err != nil {\n\t\treturn err\n\t}\n\tgo func() {\n\t\ttimer := time.NewTimer(5 * time.Second)\n\t\tdefer timer.Stop()\n\t\tselect {\n\t\tcase <-timer.C:\n\t\t\tclear := exec.Command(\"osascript\", \"-e\", \"set the clipboard to \\\"\\\"\")\n\t\t\tclear.Run()\n\t\tcase <-ctx.Done():\n\t\t\tclear := exec.Command(\"osascript\", \"-e\", \"set the clipboard to \\\"\\\"\")\n\t\t\tclear.Run()\n\t\t}\n\t}()\n\treturn nil\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Go struct that represents a basic HTTP server capable of serving static files from a specified directory, with fallback to a default page when files are not found.\n\nStruct Description: The Site struct represents a simple HTTP server that serves static files from a \"./site\" directory. It handles file requests and falls back to serving \"index.html\" when the requested file is not found.\n\nFields: (This struct has no explicit fields as it's used purely for organizing HTTP server functionality)\n\nMethods:\n\nMethod1: New() -> *Site - A constructor function that creates and returns a new instance of the Site struct.\n\nMethod2: Run() - Starts the HTTP server on the port specified in the configuration. It sets up a file server handler with custom 404 behavior and begins listening for requests.\n\nMethod3: notFound(http.ResponseWriter, *http.Request) - A helper function that serves the \"./site/index.html\" file when a requested resource is not found. Takes standard HTTP handler parameters and returns nothing.\n\nMethod4: server(http.FileSystem) -> http.Handler - A helper function that creates a custom file server handler with fallback behavior. Takes a filesystem interface and returns an HTTP handler.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n)\n\ntype Site struct {\n}\n\nfunc New() *Site {\n\treturn &Site{}\n}\n\nfunc notFound(w http.ResponseWriter, r *http.Request) {\n\tdata, _ := ioutil.ReadFile(\"./site/index.html\")\n\t_, _ = fmt.Fprintf(w, string(data))\n\treturn\n}\n\nfunc server(fs http.FileSystem) http.Handler {\n\tfileServer := http.FileServer(fs)\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfilePath := path.Clean(\"./site\" + r.URL.Path)\n\t\t_, err := os.Stat(filePath)\n\t\tif err != nil {\n\t\t\tnotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tfileServer.ServeHTTP(w, r)\n\t})\n}\n\nfunc (s *Site) Run() {\n\tport := config.Conf.Site.SiteBase.ListenPort\n\taddr := fmt.Sprintf(\":%d\", port)\n\thttp.ListenAndServe(addr, server(http.Dir(\"./site\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"net/http\"\n)\n\ntype Site struct{}\n\nfunc New() *Site {\n\treturn &Site{}\n}\n\nfunc (s *Site) Run() {\n\tfs := http.Dir(\"./site\")\n\thandler := s.server(fs)\n\thttp.ListenAndServe(\":8080\", handler)\n}\n\nfunc (s *Site) notFound(w http.ResponseWriter, r *http.Request) {\n\thttp.ServeFile(w, r, \"./site/index.html\")\n}\n\nfunc (s *Site) server(fs http.FileSystem) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tpath := r.URL.Path\n\t\tf, err := fs.Open(path)\n\t\tif err != nil {\n\t\t\ts.notFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tdefer f.Close()\n\t\tfi, err := f.Stat()\n\t\tif err != nil {\n\t\t\ts.notFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tif fi.IsDir() {\n\t\t\tindexFile, err := fs.Open(path + \"/index.html\")\n\t\t\tif err != nil {\n\t\t\t\ts.notFound(w, r)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer indexFile.Close()\n\t\t\tindexFi, err := indexFile.Stat()\n\t\t\tif err != nil {\n\t\t\t\ts.notFound(w, r)\n\t\t\t\treturn\n\t\t\t}\n\t\t\thttp.ServeContent(w, r, path, indexFi.ModTime(), indexFile)\n\t\t} else {\n\t\t\thttp.ServeContent(w, r, path, fi.ModTime(), f)\n\t\t}\n\t})\n}"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Write a Go function that spawns a process in a new user namespace to read a file's contents, using pipes for inter-process communication to capture both standard output and error streams.\n\nFunction Description: The function spawns a child process (via CGO) that runs in a new user namespace, reads the specified file, and returns its contents. It uses two pipes for IPC - one for standard output and another for standard error. The function handles process creation, pipe management, error handling, and cleanup of resources.\n\nInput:\n- nsPath (string): Path to the user namespace configuration\n- path (string): Path to the file to be read\n\nOutput:\n- ([]byte, error): Returns the file contents as bytes if successful, or an error if any step fails (pipe creation, process spawning, reading output, or process execution)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\t\"unsafe\"\n\n\t\"github.com/sirupsen/logrus\"\n)\n\n/*\n#include <stdlib.h>\nextern int spawn_userns_cat(char *userns_path, char *path, int outfd, int errfd);\n*/\nimport \"C\"\n\nfunc spawnUserNamespaceCat(nsPath string, path string) ([]byte, error) {\n\trdr, wtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer rdr.Close()\n\tdefer wtr.Close()\n\n\terrRdr, errWtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create error pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer errRdr.Close()\n\tdefer errWtr.Close()\n\n\tcNsPath := C.CString(nsPath)\n\tdefer C.free(unsafe.Pointer(cNsPath))\n\tcPath := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cPath))\n\n\tchildPid := C.spawn_userns_cat(cNsPath, cPath, C.int(wtr.Fd()), C.int(errWtr.Fd()))\n\n\tif childPid < 0 {\n\t\treturn nil, fmt.Errorf(\"failed to spawn fork for userns\")\n\t} else if childPid == 0 {\n\t\tpanic(\"runc executing inside fork child -- unsafe state!\")\n\t}\n\n\twtr.Close()\n\toutput, err := io.ReadAll(rdr)\n\trdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn failed: %w\", err)\n\t}\n\n\terrWtr.Close()\n\terrOutput, err := io.ReadAll(errRdr)\n\terrRdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn error pipe failed: %w\", err)\n\t}\n\terrOutput = bytes.TrimSpace(errOutput)\n\n\tchild, err := os.FindProcess(int(childPid))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not find userns spawn process: %w\", err)\n\t}\n\tstate, err := child.Wait()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to wait for userns spawn process: %w\", err)\n\t}\n\tif !state.Success() {\n\t\terrStr := string(errOutput)\n\t\tif errStr == \"\" {\n\t\t\terrStr = fmt.Sprintf(\"unknown error (status code %d)\", state.ExitCode())\n\t\t}\n\t\treturn nil, fmt.Errorf(\"userns spawn: %s\", errStr)\n\t} else if len(errOutput) > 0 {\n\t\tlogrus.Debugf(\"userns spawn succeeded but unexpected error message found: %s\", string(errOutput))\n\t}\n\treturn output, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"syscall\"\n)\n\nfunc ReadFileInUserNamespace(nsPath, path string) ([]byte, error) {\n\tvar stdoutPipe, stderrPipe [2]int\n\tvar err error\n\n\tif err = syscall.Pipe(stdoutPipe[:]); err != nil {\n\t\treturn nil, err\n\t}\n\tif err = syscall.Pipe(stderrPipe[:]); err != nil {\n\t\tsyscall.Close(stdoutPipe[0])\n\t\tsyscall.Close(stdoutPipe[1])\n\t\treturn nil, err\n\t}\n\n\tpid, err := syscall.Fork()\n\tif err != nil {\n\t\tsyscall.Close(stdoutPipe[0])\n\t\tsyscall.Close(stdoutPipe[1])\n\t\tsyscall.Close(stderrPipe[0])\n\t\tsyscall.Close(stderrPipe[1])\n\t\treturn nil, err\n\t}\n\n\tif pid == 0 {\n\t\tsyscall.Close(stdoutPipe[0])\n\t\tsyscall.Close(stderrPipe[0])\n\n\t\tsyscall.Dup2(stdoutPipe[1], 1)\n\t\tsyscall.Dup2(stderrPipe[1], 2)\n\n\t\tsyscall.Close(stdoutPipe[1])\n\t\tsyscall.Close(stderrPipe[1])\n\n\t\tif err := syscall.Unshare(syscall.CLONE_NEWUSER); err != nil {\n\t\t\tmsg := []byte(\"unshare error: \" + err.Error() + \"\\n\")\n\t\t\tsyscall.Write(2, msg)\n\t\t\tsyscall.Exit(1)\n\t\t}\n\n\t\tuid := syscall.Getuid()\n\t\tgid := syscall.Getgid()\n\n\t\tuidMap := []byte(fmt.Sprintf(\"0 %d 1\\n\", uid))\n\t\tif f, err := os.OpenFile(\"/proc/self/uid_map\", os.O_WRONLY|os.O_TRUNC, 0); err == nil {\n\t\t\tf.Write(uidMap)\n\t\t\tf.Close()\n\t\t}\n\n\t\tgidMap := []byte(fmt.Sprintf(\"0 %d 1\\n\", gid))\n\t\tif f, err := os.OpenFile(\"/proc/self/gid_map\", os.O_WRONLY|os.O_TRUNC, 0); err == nil {\n\t\t\tf.Write(gidMap)\n\t\t\tf.Close()\n\t\t}\n\n\t\tif err := syscall.Exec(\"/bin/cat\", []string{\"cat\", path}, os.Environ()); err != nil {\n\t\t\tmsg := []byte(\"exec error: \" + err.Error() + \"\\n\")\n\t\t\tsyscall.Write(2, msg)\n\t\t\tsyscall.Exit(1)\n\t\t}\n\t} else {\n\t\tsyscall.Close(stdoutPipe[1])\n\t\tsyscall.Close(stderrPipe[1])\n\n\t\tvar status syscall.WaitStatus\n\t\tfor {\n\t\t\twpid, err := syscall.Wait4(pid, &status, 0, nil)\n\t\t\tif err != nil {\n\t\t\t\tif err == syscall.EINTR {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tsyscall.Close(stdoutPipe[0])\n\t\t\t\tsyscall.Close(stderrPipe[0])\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif wpid == pid {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tvar outBuf, errBuf []byte\n\t\tbuf := make([]byte, 4096)\n\n\t\tfor {\n\t\t\tn, err := syscall.Read(stdoutPipe[0], buf)\n\t\t\tif n > 0 {\n\t\t\t\toutBuf = append(outBuf, buf[:n]...)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tif err == syscall.EAGAIN || err == syscall.EINTR {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tsyscall.Close(stdoutPipe[0])\n\t\t\t\tsyscall.Close(stderrPipe[0])\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif n == 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tsyscall.Close(stdoutPipe[0])\n\n\t\tfor {\n\t\t\tn, err := syscall.Read(stderrPipe[0], buf)\n\t\t\tif n > 0 {\n\t\t\t\terrBuf = append(errBuf, buf[:n]...)\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tif err == syscall.EAGAIN || err == syscall.EINTR {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tsyscall.Close(stderrPipe[0])\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif n == 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tsyscall.Close(stderrPipe[0])\n\n\t\tif !status.Success() {\n\t\t\treturn outBuf, fmt.Errorf(\"child failed: %s\", string(errBuf))\n\t\t}\n\n\t\treturn outBuf, nil\n\t}\n}"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a userland proxy using Go's pipe mechanism. The handler starts the proxy process, monitors its initialization status, and handles potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct manages the lifecycle of a userland proxy process, including process execution, IPC communication via pipes, and status monitoring.\n\nFields:\n- cmd: *exec.Cmd - The command object representing the proxy process to be executed.\n- ExtraFiles: []*os.File - Additional file descriptors to be passed to the child process (contains the pipe writer).\n\nMethods:\n- Start() -> error - Initializes the proxy process, establishes IPC via pipe, monitors startup status, and returns any errors encountered during execution or timeout. The method creates a pipe, passes the writer to the child process, reads the initialization status from the pipe reader, and handles errors or timeouts.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd        *exec.Cmd\n\tExtraFiles []*os.File\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.ExtraFiles = append(p.ExtraFiles, w)\n\tp.cmd.ExtraFiles = p.ExtraFiles\n\n\tif err := p.cmd.Start(); err != nil {\n\t\tw.Close()\n\t\treturn err\n\t}\n\tw.Close()\n\n\tstatusChan := make(chan string, 1)\n\terrChan := make(chan error, 1)\n\n\tgo func() {\n\t\tdefer r.Close()\n\t\tscanner := bufio.NewScanner(r)\n\t\tif scanner.Scan() {\n\t\t\tstatusChan <- scanner.Text()\n\t\t} else {\n\t\t\terr := scanner.Err()\n\t\t\tif err == nil {\n\t\t\t\terr = errors.New(\"proxy exited without sending status\")\n\t\t\t}\n\t\t\terrChan <- err\n\t\t}\n\t}()\n\n\tselect {\n\tcase status := <-statusChan:\n\t\tif status != \"OK\" {\n\t\t\tp.cmd.Process.Kill()\n\t\t\tp.cmd.Wait()\n\t\t\treturn errors.New(\"proxy failed to initialize: \" + status)\n\t\t}\n\t\treturn nil\n\tcase err := <-errChan:\n\t\tp.cmd.Process.Kill()\n\t\tp.cmd.Wait()\n\t\treturn err\n\tcase <-time.After(5 * time.Second):\n\t\tp.cmd.Process.Kill()\n\t\tp.cmd.Wait()\n\t\treturn errors.New(\"timeout waiting for proxy initialization\")\n\t}\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a comprehensive HTTP client in Go that can handle various API requests with custom configurations, including base URLs, request headers, and rate limiting. The client should support multiple API services and provide methods for creating and executing HTTP requests.\n\nStruct Description: The Client struct represents an HTTP client with configuration for making API requests. It maintains client state, base URLs, user agent, rate limits, and provides access to various API services. The struct includes methods for creating new requests and executing them.\n\nFields:\n\nclientMu: sync.Mutex - Mutex for thread-safe access to the HTTP client\nclient: *http.Client - The underlying HTTP client used for requests\nBaseURL: *url.URL - Base URL for API requests\nUploadURL: *url.URL - Base URL for upload requests\nUserAgent: string - User agent string for requests\nrateMu: sync.Mutex - Mutex for thread-safe access to rate limits\nrateLimits: [categories]Rate - Rate limit tracking for different API categories\ncommon: service - Shared service instance used by all API services\n\nMethods:\n\nNewClient: (*http.Client) -> *Client - Creates a new Client instance with optional custom HTTP client\nNewRequest: (method string, urlStr string, body interface{}) -> (*http.Request, error) - Creates a new HTTP request with proper headers and body encoding\nDo: (ctx context.Context, req *http.Request, v interface{}) -> (*Response, error) - Executes an HTTP request with context support, rate limiting, and response handling",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tclientMu sync.Mutex\n\tclient   *http.Client\n\n\tBaseURL   *url.URL\n\tUploadURL *url.URL\n\tUserAgent string\n\n\trateMu     sync.Mutex\n\trateLimits [categories]Rate\n\n\tcommon service\n\n\tActions        *ActionsService\n\tActivity       *ActivityService\n\tAdmin          *AdminService\n\tApps           *AppsService\n\tAuthorizations *AuthorizationsService\n\tChecks         *ChecksService\n\tGists          *GistsService\n\tGit            *GitService\n\tGitignores     *GitignoresService\n\tInteractions   *InteractionsService\n\tIssues         *IssuesService\n\tLicenses       *LicensesService\n\tMarketplace    *MarketplaceService\n\tMigrations     *MigrationService\n\tOrganizations  *OrganizationsService\n\tProjects       *ProjectsService\n\tPullRequests   *PullRequestsService\n\tReactions      *ReactionsService\n\tRepositories   *RepositoriesService\n\tSearch         *SearchService\n\tTeams          *TeamsService\n\tUsers          *UsersService\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{}\n\t}\n\tbaseURL, _ := url.Parse(defaultBaseURL)\n\tuploadURL, _ := url.Parse(uploadBaseURL)\n\n\tc := &Client{client: httpClient, BaseURL: baseURL, UserAgent: userAgent, UploadURL: uploadURL}\n\tc.common.client = c\n\tc.Actions = (*ActionsService)(&c.common)\n\tc.Activity = (*ActivityService)(&c.common)\n\tc.Admin = (*AdminService)(&c.common)\n\tc.Apps = (*AppsService)(&c.common)\n\tc.Authorizations = (*AuthorizationsService)(&c.common)\n\tc.Checks = (*ChecksService)(&c.common)\n\tc.Gists = (*GistsService)(&c.common)\n\tc.Git = (*GitService)(&c.common)\n\tc.Gitignores = (*GitignoresService)(&c.common)\n\tc.Interactions = (*InteractionsService)(&c.common)\n\tc.Issues = (*IssuesService)(&c.common)\n\tc.Licenses = (*LicensesService)(&c.common)\n\tc.Marketplace = &MarketplaceService{client: c}\n\tc.Migrations = (*MigrationService)(&c.common)\n\tc.Organizations = (*OrganizationsService)(&c.common)\n\tc.Projects = (*ProjectsService)(&c.common)\n\tc.PullRequests = (*PullRequestsService)(&c.common)\n\tc.Reactions = (*ReactionsService)(&c.common)\n\tc.Repositories = (*RepositoriesService)(&c.common)\n\tc.Search = (*SearchService)(&c.common)\n\tc.Teams = (*TeamsService)(&c.common)\n\tc.Users = (*UsersService)(&c.common)\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tif !strings.HasSuffix(c.BaseURL.Path, \"/\") {\n\t\treturn nil, fmt.Errorf(\"BaseURL must have a trailing slash, but %q does not\", c.BaseURL)\n\t}\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf io.ReadWriter\n\tif body != nil {\n\t\tbuf = &bytes.Buffer{}\n\t\tenc := json.NewEncoder(buf)\n\t\tenc.SetEscapeHTML(false)\n\t\terr := enc.Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treq.Header.Set(\"Accept\", mediaTypeV3)\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx == nil {\n\t\treturn nil, errors.New(\"context must be non-nil\")\n\t}\n\treq = withContext(ctx, req)\n\n\trateLimitCategory := category(req.URL.Path)\n\n\tif err := c.checkRateLimitBeforeDo(req, rateLimitCategory); err != nil {\n\t\treturn &Response{\n\t\t\tResponse: err.Response,\n\t\t\tRate:     err.Rate,\n\t\t}, err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif e, ok := err.(*url.Error); ok {\n\t\t\tif url, err := url.Parse(e.URL); err == nil {\n\t\t\t\te.URL = sanitizeURL(url).String()\n\t\t\t\treturn nil, e\n\t\t\t}\n\t\t}\n\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponse := newResponse(resp)\n\n\tc.rateMu.Lock()\n\tc.rateLimits[rateLimitCategory] = response.Rate\n\tc.rateMu.Unlock()\n\n\terr = CheckResponse(resp)\n\tif err != nil {\n\t\taerr, ok := err.(*AcceptedError)\n\t\tif ok {\n\t\t\tb, readErr := ioutil.ReadAll(resp.Body)\n\t\t\tif readErr != nil {\n\t\t\t\treturn response, readErr\n\t\t\t}\n\n\t\t\taerr.Raw = b\n\t\t\treturn response, aerr\n\t\t}\n\n\t\treturn response, err\n\t}\n\n\tif v != nil {\n\t\tif w, ok := v.(io.Writer); ok {\n\t\t\tio.Copy(w, resp.Body)\n\t\t} else {\n\t\t\tdecErr := json.NewDecoder(resp.Body).Decode(v)\n\t\t\tif decErr == io.EOF {\n\t\t\t\tdecErr = nil\n\t\t\t}\n\t\t\tif decErr != nil {\n\t\t\t\terr = decErr\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package client\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Rate struct {\n\tLimit     int\n\tRemaining int\n\tReset     time.Time\n}\n\ntype Response struct {\n\t*http.Response\n}\n\ntype service struct {\n\tclient *Client\n}\n\ntype Client struct {\n\tclientMu   sync.Mutex\n\tclient     *http.Client\n\tBaseURL    *url.URL\n\tUploadURL  *url.URL\n\tUserAgent  string\n\trateMu     sync.Mutex\n\trateLimits map[string]Rate\n\tcommon     service\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{\n\t\t\tTimeout: 30 * time.Second,\n\t\t}\n\t}\n\n\tbase, _ := url.Parse(\"https://api.example.com/\")\n\tupload, _ := url.Parse(\"https://uploads.example.com/\")\n\n\tc := &Client{\n\t\tclient:     httpClient,\n\t\tBaseURL:    base,\n\t\tUploadURL:  upload,\n\t\tUserAgent:  \"GoClient/1.0\",\n\t\trateLimits: make(map[string]Rate),\n\t}\n\n\tc.common.client = c\n\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tbaseURL := c.BaseURL\n\tif u.Scheme == \"\" && u.Host == \"\" {\n\t\tresolved := baseURL.ResolveReference(u)\n\t\turlStr = resolved.String()\n\t}\n\n\tvar bodyReader io.Reader\n\tif body != nil {\n\t\tb, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tbodyReader = bytes.NewReader(b)\n\t}\n\n\treq, err := http.NewRequest(method, urlStr, bodyReader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tc.rateMu.Lock()\n\tcategory := determineCategory(req.URL)\n\tnow := time.Now()\n\trate, ok := c.rateLimits[category]\n\n\tif ok && rate.Remaining <= 0 && rate.Reset.After(now) {\n\t\tsleepTime := rate.Reset.Sub(now)\n\t\tc.rateMu.Unlock()\n\t\tselect {\n\t\tcase <-time.After(sleepTime):\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\t}\n\t\tc.rateMu.Lock()\n\t\trate = c.rateLimits[category]\n\t}\n\n\tif ok {\n\t\trate.Remaining = max(rate.Remaining-1, 0)\n\t\tc.rateLimits[category] = rate\n\t}\n\tc.rateMu.Unlock()\n\n\tc.clientMu.Lock()\n\tresp, err := c.client.Do(req.WithContext(ctx))\n\tc.clientMu.Unlock()\n\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tdefer resp.Body.Close()\n\n\tresponse := &Response{Response: resp}\n\n\tc.rateMu.Lock()\n\tremaining := 59\n\tlimit := 60\n\tresetTime := time.Now().Add(60 * time.Second)\n\n\tc.rateLimits[category] = Rate{\n\t\tLimit:     limit,\n\t\tRemaining: remaining,\n\t\tReset:     resetTime,\n\t}\n\tc.rateMu.Unlock()\n\n\tif v != nil && resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\tif err := json.NewDecoder(resp.Body).Decode(v); err != nil {\n\t\t\treturn response, err\n\t\t}\n\t}\n\n\treturn response, nil\n}\n\nfunc determineCategory(u *url.URL) string {\n\tif strings.Contains(u.Path, \"/upload/\") {\n\t\treturn \"upload\"\n\t}\n\treturn \"core\"\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a simple HTTP server in Go that responds to requests with a greeting message containing the value of the \"AUTHOR\" environment variable.\n\nFunction Description: The main function sets up a basic HTTP server with a single route (\"/\") that responds to all HTTP requests. The response is a plain text message combining \"hello \" with the value of the \"AUTHOR\" environment variable. The server listens on a specified port.\n\nInput: \n- *addr (string pointer): A command-line flag specifying the server address and port to listen on (e.g., \":8080\")\n\nOutput: \n- None (The function runs indefinitely, serving HTTP requests until interrupted)\n- For each HTTP request to \"/\", outputs \"hello [AUTHOR]\" as the response body\n\nNote: The function does not explicitly return any values but writes to the http.ResponseWriter for each incoming request. The server continues running until terminated.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n)\nfunc main() {\n\tflag.Parse()\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"hello \"+os.Getenv(\"AUTHOR\"))\n\t})\n\thttp.ListenAndServe(*addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"flag\"\n)\n\nfunc main() {\n\taddr := flag.String(\"addr\", \":8080\", \"address to listen on\")\n\tflag.Parse()\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tauthor := os.Getenv(\"AUTHOR\")\n\t\tfmt.Fprintf(w, \"hello %s\", author)\n\t})\n\n\tserver := &http.Server{\n\t\tAddr: *addr,\n\t}\n\n\tserver.ListenAndServe()\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a Go struct that represents a metric sink for sending metrics to a Cortex metrics server using HTTP with advanced configuration options.\n\nStruct Description: The CortexMetricSink struct is responsible for batching and sending metrics to a Cortex server via HTTP with support for custom headers, basic authentication, proxy configuration, and connection pooling.\n\nFields:\n\nURL: string - The endpoint URL of the Cortex server to send metrics to\nRemoteTimeout: time.Duration - Timeout for HTTP requests to Cortex\nProxyURL: string - URL of the proxy server to use (optional)\nClient: *http.Client - Custom HTTP client for making requests\nlogger: *logrus.Entry - Logger for the sink\nname: string - Name identifier for the sink\ntraceClient: *trace.Client - Tracing client for distributed tracing\naddHeaders: map[string]string - Additional headers to include in requests\nbasicAuth: *BasicAuthType - Basic authentication credentials (optional)\nbatchWriteSize: int - Maximum number of metrics to batch before sending\ncounters: map[counterMapKey]float64 - Internal counter storage\nconvertCountersToMonotonic: bool - Flag to convert counters to monotonic values\nexcludedTags: map[string]struct{} - Tags to exclude from metrics\nhost: string - Host identifier for metrics\n\nMethods:\n\nStart: (tc *trace.Client) -> error - Initializes the sink with tracing and HTTP client configuration\nwriteMetrics: (ctx context.Context, metrics []samplers.InterMetric) -> error - Processes and sends a batch of metrics to Cortex\n\nBasicAuthType Struct Description: Nested struct for storing basic authentication credentials\n\nFields:\n\nUsername: util.StringSecret - Basic auth username (secret type)\nPassword: util.StringSecret - Basic auth password (secret type)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/golang/snappy\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/prometheus/prometheus/prompb\"\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/stripe/veneur/v14/samplers\"\n\t\"github.com/stripe/veneur/v14/sinks\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype CortexMetricSink struct {\n\tURL                        string\n\tRemoteTimeout              time.Duration\n\tProxyURL                   string\n\tClient                     *http.Client\n\tlogger                     *logrus.Entry\n\tname                       string\n\ttraceClient                *trace.Client\n\taddHeaders                 map[string]string\n\tbasicAuth                  *BasicAuthType\n\tbatchWriteSize             int\n\tcounters                   map[counterMapKey]float64\n\tconvertCountersToMonotonic bool\n\texcludedTags               map[string]struct{}\n\thost                       string\n}\n\ntype BasicAuthType struct {\n\tUsername util.StringSecret `yaml:\"username\"`\n\tPassword util.StringSecret `yaml:\"password\"`\n}\n\nfunc (s *CortexMetricSink) Start(tc *trace.Client) error {\n\ts.logger.Infof(\"Starting sink for %s\", s.URL)\n\tt := http.DefaultTransport.(*http.Transport).Clone()\n\tt.MaxIdleConns = MaxConns\n\tt.MaxConnsPerHost = MaxConns\n\tt.MaxIdleConnsPerHost = MaxConns\n\n\tif len(s.ProxyURL) > 0 {\n\t\tp, err := url.Parse(s.ProxyURL)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"malformed cortex_proxy_url\")\n\t\t}\n\t\tt.Proxy = http.ProxyURL(p)\n\t}\n\n\ts.Client = &http.Client{\n\t\tTimeout:   s.RemoteTimeout,\n\t\tTransport: t,\n\t}\n\n\ts.traceClient = tc\n\treturn nil\n}\n\nfunc (s *CortexMetricSink) writeMetrics(ctx context.Context, metrics []samplers.InterMetric) error {\n\tspan, _ := trace.StartSpanFromContext(ctx, \"\")\n\tdefer span.ClientFinish(s.traceClient)\n\n\twr := s.makeWriteRequest(metrics)\n\n\tdata, err := wr.Marshal()\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: failed to marshal proto\\\"\")\n\t}\n\n\tvar buf bytes.Buffer\n\tencoded := snappy.Encode(nil, data)\n\tbuf.Write(encoded)\n\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", s.URL, &buf)\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: failed to create http request\\\"\")\n\t}\n\n\treq.Header.Set(\"Content-Encoding\", \"snappy\")\n\treq.Header.Set(\"Content-Type\", \"application/x-protobuf\")\n\treq.Header.Set(\"User-Agent\", \"veneur/cortex\")\n\treq.Header.Set(\"X-Prometheus-Remote-Write-Version\", \"0.1.0\")\n\tfor key, value := range s.addHeaders {\n\t\treq.Header.Set(key, value)\n\t}\n\tif s.basicAuth != nil {\n\t\treq.SetBasicAuth(s.basicAuth.Username.Value, s.basicAuth.Password.Value)\n\t}\n\n\tts := time.Now()\n\tr, err := s.Client.Do(req)\n\tif err != nil {\n\t\tspan.Error(err)\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: misc http client error\\\" duration_secs=%.2f\", time.Since(ts).Seconds())\n\t}\n\tdefer r.Body.Close()\n\n\tif r.StatusCode >= 300 {\n\t\tb, err := ioutil.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: downstream returned error response with unreadable body\\\" response_code=%d\", r.StatusCode)\n\t\t}\n\t\treturn fmt.Errorf(\"cortex_err=\\\"failed to write batch: error response\\\", response_code=%d response_body=\\\"%s\\\"\", r.StatusCode, b)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package metrics\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/go-kit/log\"\n\t\"github.com/go-kit/log/level\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/sirupsen/logrus\"\n\t\"gopkg.in/Netflix-Skunkworks/goose.v3/metrics/samplers\"\n\t\"gopkg.in/Netflix-Skunkworks/goose.v3/metrics/util\"\n\t\"gopkg.in/Netflix-Skunkworks/goose.v3/trace\"\n)\n\n// BasicAuthType stores basic authentication credentials\ntype BasicAuthType struct {\n\tUsername util.StringSecret\n\tPassword util.StringSecret\n}\n\n// CortexMetricSink handles sending metrics to Cortex with advanced configuration\ntype CortexMetricSink struct {\n\tURL                    string\n\tRemoteTimeout          time.Duration\n\tProxyURL               string\n\tClient                 *http.Client\n\tlogger                 *logrus.Entry\n\tname                   string\n\ttraceClient            *trace.Client\n\taddHeaders             map[string]string\n\tbasicAuth              *BasicAuthType\n\tbatchWriteSize         int\n\tcounters               map[struct{ name string; tags map[string]string }]float64\n\tconvertCountersToMonotonic bool\n\texcludedTags           map[string]struct{}\n\thost                   string\n}\n\n// Start initializes the sink with tracing and HTTP client configuration\nfunc (s *CortexMetricSink) Start(tc *trace.Client) error {\n\tif s.Client == nil {\n\t\ttransport := &http.Transport{\n\t\t\tProxy: nil,\n\t\t\tDialContext: (&net.Dialer{\n\t\t\t\tTimeout:   30 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).DialContext,\n\t\t\tMaxIdleConnsPerHost: 100,\n\t\t\tIdleConnTimeout:     90 * time.Second,\n\t\t}\n\n\t\tif s.ProxyURL != \"\" {\n\t\t\tproxyURL, err := url.Parse(s.ProxyURL)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to parse proxy URL: %w\", err)\n\t\t\t}\n\t\t\ttransport.Proxy = http.ProxyURL(proxyURL)\n\t\t}\n\n\t\ts.Client = &http.Client{\n\t\t\tTransport: transport,\n\t\t\tTimeout:   s.RemoteTimeout,\n\t\t}\n\t}\n\n\tif s.logger == nil {\n\t\ts.logger = logrus.NewEntry(logrus.StandardLogger())\n\t}\n\n\ts.traceClient = tc\n\treturn nil\n}\n\n// writeMetrics processes and sends a batch of metrics to Cortex\nfunc (s *CortexMetricSink) writeMetrics(ctx context.Context, metrics []samplers.InterMetric) error {\n\tvar batch []struct{\n\t\tName   string\n\t\tTags   map[string]string\n\t\tValue  float64\n\t\tTime   time.Time\n\t}{\n\t\t// Process metrics with excluded tags filter\n\t}\n\tfor _, m := range metrics {\n\t\tif _, excluded := s.excludedTags[m.Name]; excluded {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Filter excluded tags from metric tags\n\t\tfilteredTags := make(map[string]string)\n\t\tfor k, v := range m.Tags {\n\t\t\tif _, excluded := s.excludedTags[k]; !excluded {\n\t\t\t\tfilteredTags[k] = v\n\t\t\t}\n\t\t}\n\n\t\t// Handle counter conversion logic\n\t\tif s.convertCountersToMonotonic {\n\t\t\t// Implementation-specific counter conversion logic would go here\n\t\t\tkey := struct{\n\t\t\t\tname string\n\t\t\t\ttags map[string]string\n\t\t\t}{m.Name, filteredTags}\n\t\t\t\n\t\t\tprevValue, exists := s.counters[key]\n\t\t\tif exists && m.Value < prevValue {\n\t\t\t\tm.Value = prevValue // Ensure monotonicity\n\t\t\t}\n\t\t\ts.counters[key] = m.Value\n\t\t}\n\n\t\t// Add to batch\n\t\tbatch = append(batch, struct {\n\t\t\tName  string\n\t\t\tTags  map[string]string\n\t\t\tValue float64\n\t\t\tTime  time.Time\n\t\t}{\n\t\t\tName:  m.Name,\n\t\t\tTags:  filteredTags,\n\t\t\tValue: m.Value,\n\t\t\tTime:  m.Timestamp,\n\t\t})\n\n\t\t// Send batch if size threshold reached\n\t\tif len(batch) >= s.batchWriteSize {\n\t\t\tif err := s.sendBatch(ctx, batch); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tbatch = batch[:0]\n\t\t}\n\t}\n\n\t// Send any remaining metrics\n\tif len(batch) > 0 {\n\t\treturn s.sendBatch(ctx, batch)\n\t}\n\treturn nil\n}\n\n// sendBatch handles the actual HTTP request to send metrics\nfunc (s *CortexMetricSink) sendBatch(ctx context.Context, batch []struct{\n\tName   string\n\tTags   map[string]string\n\tValue  float64\n\tTime   time.Time\n}) error {\n\t// Implementation-specific serialization would go here\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", s.URL, nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create request: %w\", err)\n\t}\n\n\t// Set basic auth header if configured\n\tif s.basicAuth != nil {\n\t\treq.SetBasicAuth(string(s.basicAuth.Username), string(s.basicAuth.Password))\n\t}\n\n\t// Set additional headers\n\tfor k, v := range s.addHeaders {\n\t\treq.Header.Set(k, v)\n\t}\n\n\t// Execute request\n\tresp, err := s.Client.Do(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"request failed: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"received non-2xx status code: %d\", resp.StatusCode)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Implement a function to start an HTTP server with configurable parameters including authentication, TLS, and database integration. The function should handle routing, authentication wrapping, and server startup with both HTTP and HTTPS support.\n\nFunction Description: The `Start` function initializes and starts an HTTP server with various endpoints for database operations. It supports optional authentication via a pre-shared token and can be configured to use TLS for secure connections. The server connects to a tiedot database and provides RESTful endpoints for database operations.\n\nInput:\n- `dir` (string): Directory path for the tiedot database\n- `port` (int): Port number to listen on\n- `tlsCrt` (string): Path to TLS certificate file (empty for HTTP)\n- `tlsKey` (string): Path to TLS private key file (empty for HTTP)\n- `jwtPubKey` (string): JWT public key (unused in reference code)\n- `jwtPrivateKey` (string): JWT private key (unused in reference code)\n- `bind` (string): Network interface to bind to (empty for all interfaces)\n- `authToken` (string): Pre-shared token for authentication (empty to disable)\n\nOutput: None (the function runs indefinitely serving HTTP requests or panics on error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/HouzuoGuo/tiedot/db\"\n\t\"github.com/HouzuoGuo/tiedot/tdlog\"\n)\n\nvar (\n\tHttpDB *db.DB\n)\n\nfunc Start(dir string, port int, tlsCrt, tlsKey, jwtPubKey, jwtPrivateKey, bind, authToken string) {\n\tvar err error\n\tHttpDB, err = db.OpenDB(dir)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\thttp.HandleFunc(\"/\", Welcome)\n\thttp.HandleFunc(\"/version\", Version)\n\thttp.HandleFunc(\"/memstats\", MemStats)\n\n\tvar authWrap func(http.HandlerFunc) http.HandlerFunc\n\tif authToken != \"\" {\n\t\ttdlog.Noticef(\"API endpoints now require the pre-shared token in Authorization header.\")\n\t\tauthWrap = func(originalHandler http.HandlerFunc) http.HandlerFunc {\n\t\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif \"token \"+authToken != r.Header.Get(\"Authorization\") {\n\t\t\t\t\thttp.Error(w, \"\", http.StatusUnauthorized)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\toriginalHandler(w, r)\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttdlog.Noticef(\"API endpoints do not require Authorization header.\")\n\t\tauthWrap = func(originalHandler http.HandlerFunc) http.HandlerFunc {\n\t\t\treturn originalHandler\n\t\t}\n\t}\n\n\thttp.HandleFunc(\"/create\", authWrap(Create))\n\thttp.HandleFunc(\"/rename\", authWrap(Rename))\n\thttp.HandleFunc(\"/drop\", authWrap(Drop))\n\thttp.HandleFunc(\"/all\", authWrap(All))\n\thttp.HandleFunc(\"/scrub\", authWrap(Scrub))\n\thttp.HandleFunc(\"/sync\", authWrap(Sync))\n\thttp.HandleFunc(\"/query\", authWrap(Query))\n\thttp.HandleFunc(\"/count\", authWrap(Count))\n\thttp.HandleFunc(\"/insert\", authWrap(Insert))\n\thttp.HandleFunc(\"/get\", authWrap(Get))\n\thttp.HandleFunc(\"/getpage\", authWrap(GetPage))\n\thttp.HandleFunc(\"/update\", authWrap(Update))\n\thttp.HandleFunc(\"/delete\", authWrap(Delete))\n\thttp.HandleFunc(\"/approxdoccount\", authWrap(ApproxDocCount))\n\thttp.HandleFunc(\"/index\", authWrap(Index))\n\thttp.HandleFunc(\"/indexes\", authWrap(Indexes))\n\thttp.HandleFunc(\"/unindex\", authWrap(Unindex))\n\thttp.HandleFunc(\"/shutdown\", authWrap(Shutdown))\n\thttp.HandleFunc(\"/dump\", authWrap(Dump))\n\n\tiface := \"all interfaces\"\n\tif bind != \"\" {\n\t\tiface = bind\n\t}\n\n\tif tlsCrt != \"\" {\n\t\ttdlog.Noticef(\"Will listen on %s (HTTPS), port %d.\", iface, port)\n\t\tif err := http.ListenAndServeTLS(fmt.Sprintf(\"%s:%d\", bind, port), tlsCrt, tlsKey, nil); err != nil {\n\t\t\ttdlog.Panicf(\"Failed to start HTTPS service - %s\", err)\n\t\t}\n\t} else {\n\t\ttdlog.Noticef(\"Will listen on %s (HTTP), port %d.\", iface, port)\n\t\thttp.ListenAndServe(fmt.Sprintf(\"%s:%d\", bind, port), nil)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/HouzuoGuo/tiedot/db\"\n)\n\nfunc Start(dir string, port int, tlsCrt string, tlsKey string, jwtPubKey string, jwtPrivateKey string, bind string, authToken string) {\n\tmydb, err := db.Open(dir)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mydb.Close()\n\n\tmux := http.NewServeMux()\n\n\twrapAuth := func(fn http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif authToken != \"\" {\n\t\t\t\tauthHeader := r.Header.Get(\"Authorization\")\n\t\t\t\tif !strings.HasPrefix(authHeader, \"Bearer \") {\n\t\t\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tactualToken := strings.TrimPrefix(authHeader, \"Bearer \")\n\t\t\t\tif actualToken != authToken {\n\t\t\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tfn(w, r)\n\t\t}\n\t}\n\n\tmux.HandleFunc(\"/db/\", wrapAuth(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Database operations\"))\n\t}))\n\n\tserver := &http.Server{\n\t\tAddr:    fmt.Sprintf(\"%s:%d\", bind, port),\n\t\tHandler: mux,\n\t}\n\n\tvar serveErr error\n\tif tlsCrt != \"\" && tlsKey != \"\" {\n\t\tserveErr = server.ListenAndServeTLS(tlsCrt, tlsKey)\n\t} else {\n\t\tserveErr = server.ListenAndServe()\n\t}\n\n\tif serveErr != nil {\n\t\tpanic(serveErr)\n\t}\n}"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Create a WebSocket server in Go that handles WebSocket connections, upgrades HTTP connections to WebSocket, and manages the connections.\n\nFunction Description: The code consists of two main functions: `StartWSServer` and `wsHandler`. `StartWSServer` initializes and starts an HTTP server that listens for WebSocket connections on a specified address. `wsHandler` is the HTTP handler function that upgrades incoming HTTP requests to WebSocket connections and processes them.\n\nInput: \n- `StartWSServer`: `address` (string) - The network address (e.g., \":8080\") on which the server will listen for incoming connections.\n- `wsHandler`: `w` (http.ResponseWriter) - Used to construct the HTTP response. `r` (*http.Request) - The HTTP request to be upgraded to a WebSocket connection.\n\nOutput: \n- `StartWSServer`: None (panics on error).\n- `wsHandler`: None (logs errors if the WebSocket upgrade fails).",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 65536,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc StartWSServer(address string) {\n\thttp.HandleFunc(\"/ws\", wsHandler)\n\terr := http.ListenAndServe(address, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\twsConn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlogger.Sugar.Error(err)\n\t\treturn\n\t}\n\n\tconn := &Conn{\n\t\tCoonType: ConnTypeWS,\n\t\tWS:       wsConn,\n\t}\n\tDoConn(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc StartWSServer(address string) {\n\tserver := &http.Server{\n\t\tAddr:    address,\n\t\tHandler: http.HandlerFunc(wsHandler),\n\t}\n\tif err := server.ListenAndServe(); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"WebSocket upgrade failed:\", err)\n\t\treturn\n\t}\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Read error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Received: %s\", message)\n\t\tif err := conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Println(\"Write error:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a function that performs an HTTP request with custom headers and handles the response, including error handling and logging for debugging purposes.\n\nFunction Description: The function `realRequest` performs an HTTP request with custom headers, handles authentication, and processes the response. It includes validation of required headers, adds security tokens and user agents, computes signatures for authentication, and handles response errors. Debug logging is available for both requests and responses.\n\nInput:\n- `ctx` (context.Context): Context for the request, allowing cancellation and timeouts.\n- `project` (*LogProject): A struct containing project-specific details like base URL, access keys, and user agent.\n- `method` (string): HTTP method (e.g., \"GET\", \"POST\").\n- `uri` (string): The URI path for the request.\n- `headers` (map[string]string): A map of HTTP headers to include in the request.\n- `body` ([]byte): The request body as a byte slice.\n\nOutput:\n- (*http.Response, error): Returns the HTTP response and an error if any occurred during the request or response handling. The error is wrapped in custom error types for better context.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"time\"\n\n\t\"github.com/go-kit/kit/log/level\"\n)\n\nvar (\n\tdefaultRequestTimeout = 60 * time.Second\n\tdefaultRetryTimeout   = 90 * time.Second\n\tdefaultHttpClient     = &http.Client{\n\t\tTimeout: defaultRequestTimeout,\n\t}\n)\n\nfunc realRequest(ctx context.Context, project *LogProject, method, uri string, headers map[string]string, body []byte) (*http.Response, error) {\n\tif _, ok := headers[\"x-log-bodyrawsize\"]; !ok {\n\t\treturn nil, NewClientError(fmt.Errorf(\"Can't find 'x-log-bodyrawsize' header\"))\n\t}\n\n\tbaseURL := project.getBaseURL()\n\theaders[\"Host\"] = baseURL\n\theaders[\"Date\"] = nowRFC1123()\n\theaders[\"x-log-apiversion\"] = version\n\theaders[\"x-log-signaturemethod\"] = signatureMethod\n\tif len(project.UserAgent) > 0 {\n\t\theaders[\"User-Agent\"] = project.UserAgent\n\t} else {\n\t\theaders[\"User-Agent\"] = DefaultLogUserAgent\n\t}\n\n\tif project.SecurityToken != \"\" {\n\t\theaders[\"x-acs-security-token\"] = project.SecurityToken\n\t}\n\n\tif body != nil {\n\t\tbodyMD5 := fmt.Sprintf(\"%X\", md5.Sum(body))\n\t\theaders[\"Content-MD5\"] = bodyMD5\n\t\tif _, ok := headers[\"Content-Type\"]; !ok {\n\t\t\treturn nil, NewClientError(fmt.Errorf(\"Can't find 'Content-Type' header\"))\n\t\t}\n\t}\n\n\tdigest, err := signature(project.AccessKeySecret, method, uri, headers)\n\tif err != nil {\n\t\treturn nil, NewClientError(err)\n\t}\n\tauth := fmt.Sprintf(\"SLS %v:%v\", project.AccessKeyID, digest)\n\theaders[\"Authorization\"] = auth\n\n\treader := bytes.NewReader(body)\n\turlStr := fmt.Sprintf(\"%s%s\", baseURL, uri)\n\treq, err := http.NewRequest(method, urlStr, reader)\n\tif err != nil {\n\t\treturn nil, NewClientError(err)\n\t}\n\tfor k, v := range headers {\n\t\treq.Header.Add(k, v)\n\t}\n\tif IsDebugLevelMatched(5) {\n\t\tdump, e := httputil.DumpRequest(req, true)\n\t\tif e != nil {\n\t\t\tlevel.Info(Logger).Log(\"msg\", e)\n\t\t}\n\t\tlevel.Info(Logger).Log(\"msg\", \"HTTP Request:\\n%v\", string(dump))\n\t}\n\n\tresp, err := project.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\terr := &Error{}\n\t\terr.HTTPCode = (int32)(resp.StatusCode)\n\t\tdefer resp.Body.Close()\n\t\tbuf, ioErr := ioutil.ReadAll(resp.Body)\n\t\tif ioErr != nil {\n\t\t\treturn nil, NewBadResponseError(ioErr.Error(), resp.Header, resp.StatusCode)\n\t\t}\n\t\tif jErr := json.Unmarshal(buf, err); jErr != nil {\n\t\t\treturn nil, NewBadResponseError(string(buf), resp.Header, resp.StatusCode)\n\t\t}\n\t\terr.RequestID = resp.Header.Get(RequestIDHeader)\n\t\treturn nil, err\n\t}\n\tif IsDebugLevelMatched(5) {\n\t\tdump, e := httputil.DumpResponse(resp, true)\n\t\tif e != nil {\n\t\t\tlevel.Info(Logger).Log(\"msg\", e)\n\t\t}\n\t\tlevel.Info(Logger).Log(\"msg\", \"HTTP Response:\\n%v\", string(dump))\n\t}\n\treturn resp, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc realRequest(ctx context.Context, project *LogProject, method string, uri string, headers map[string]string, body []byte) (*http.Response, error) {\n\tif project == nil {\n\t\treturn nil, fmt.Errorf(\"project is nil\")\n\t}\n\tif headers == nil {\n\t\theaders = make(map[string]string)\n\t}\n\tif _, ok := headers[\"Content-Type\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"missing required header Content-Type\")\n\t}\n\tif _, ok := headers[\"User-Agent\"]; !ok {\n\t\tif project.UserAgent != \"\" {\n\t\t\theaders[\"User-Agent\"] = project.UserAgent\n\t\t}\n\t}\n\ttimestamp := time.Now().UTC().Format(time.RFC1123)\n\tstringToSign := method + \"\\n\" + uri + \"\\n\" + timestamp\n\tsignature := computeSignature(stringToSign, project.SecretKey)\n\theaders[\"Authorization\"] = \"LOG \" + project.AccessKey + \":\" + signature\n\theaders[\"X-Log-Date\"] = timestamp\n\trawURL := project.Endpoint + uri\n\treq, err := http.NewRequestWithContext(ctx, method, rawURL, bytes.NewReader(body))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create request: %w\", err)\n\t}\n\tfor k, v := range headers {\n\t\treq.Header.Set(k, v)\n\t}\n\tif project.Debug {\n\t\tlog.Printf(\"Request: %s %s\\nHeaders: %v\\nBody: %s\", method, rawURL, req.Header, body)\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"HTTP request failed: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\tvar responseBody []byte\n\tif project.Debug {\n\t\tresponseBody, err = io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to read response body for logging: %w\", err)\n\t\t}\n\t\tresp.Body = io.NopCloser(bytes.NewBuffer(responseBody))\n\t\tlog.Printf(\"Response: %d %s\\nHeaders: %v\\nBody: %s\", resp.StatusCode, resp.Status, resp.Header, responseBody)\n\t} else if resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tresponseBody, err = io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn resp, fmt.Errorf(\"failed to read response body for error: %w\", err)\n\t\t}\n\t\tresp.Body = io.NopCloser(bytes.NewBuffer(responseBody))\n\t}\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn resp, fmt.Errorf(\"received non-200 status code: %d, body: %s\", resp.StatusCode, responseBody)\n\t}\n\treturn resp, nil\n}\n\nfunc computeSignature(data, secret string) string {\n\th := hmac.New(sha256.New, []byte(secret))\n\th.Write([]byte(data))\n\treturn base64.StdEncoding.EncodeToString(h.Sum(nil))\n}"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a function that starts a debug HTTP server with various endpoints for monitoring and debugging purposes, including standard debug endpoints (pprof, metrics, trace) and custom endpoints.\n\nFunction Description: The function `Start` initializes and launches an HTTP server with multiple debugging and monitoring endpoints. It sets up handlers for standard endpoints like pprof, expvar, trace, and metrics, along with any additional custom endpoints provided. The server runs on a predefined address and serves an index page with links to all available endpoints.\n\nInput: \n- `extra ...Endpoint`: Variadic parameter accepting zero or more custom endpoint objects. Each Endpoint should have:\n  - `Path`: string - The URL path for the endpoint\n  - `Name`: string - Display name for the endpoint\n  - `Handler`: http.Handler - The handler function for the endpoint\n\nOutput: None (the function runs indefinitely serving HTTP requests, or returns if no address is configured)\n\nNote: The function uses package-level variables (not shown in the reference code) including `addr` for the server address, and assumes the existence of handler functions like `expvarHandler`, `gcHandler`, and `freeOSMemoryHandler`.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n\t\"strings\"\n\n\t\"golang.org/x/net/trace\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\treturn\n\t}\n\n\tpp := http.NewServeMux()\n\tindex := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(`\n\t\t\t\t<a href=\"vars\">Vars</a><br>\n\t\t\t\t<a href=\"debug/pprof/\">PProf</a><br>\n\t\t\t\t<a href=\"metrics\">Metrics</a><br>\n\t\t\t\t<a href=\"debug/requests\">Requests</a><br>\n\t\t\t\t<a href=\"debug/events\">Events</a><br>\n\t\t\t`))\n\t\tfor _, e := range extra {\n\t\t\tfmt.Fprintf(w, `<a href=\"%s\">%s</a><br>`, strings.TrimPrefix(e.Path, \"/\"), e.Name)\n\t\t}\n\t\tw.Write([]byte(`\n\t\t\t\t<br>\n\t\t\t\t<form method=\"post\" action=\"gc\" style=\"display: inline;\"><input type=\"submit\" value=\"GC\"></form>\n\t\t\t\t<form method=\"post\" action=\"freeosmemory\" style=\"display: inline;\"><input type=\"submit\" value=\"Free OS Memory\"></form>\n\t\t\t`))\n\t})\n\tpp.Handle(\"/\", index)\n\tpp.Handle(\"/debug\", index)\n\tpp.Handle(\"/vars\", http.HandlerFunc(expvarHandler))\n\tpp.Handle(\"/gc\", http.HandlerFunc(gcHandler))\n\tpp.Handle(\"/freeosmemory\", http.HandlerFunc(freeOSMemoryHandler))\n\tpp.Handle(\"/debug/pprof/\", http.HandlerFunc(pprof.Index))\n\tpp.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(pprof.Cmdline))\n\tpp.Handle(\"/debug/pprof/profile\", http.HandlerFunc(pprof.Profile))\n\tpp.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(pprof.Symbol))\n\tpp.Handle(\"/debug/pprof/trace\", http.HandlerFunc(pprof.Trace))\n\tpp.Handle(\"/debug/requests\", http.HandlerFunc(trace.Traces))\n\tpp.Handle(\"/debug/events\", http.HandlerFunc(trace.Events))\n\tpp.Handle(\"/metrics\", promhttp.Handler())\n\tfor _, e := range extra {\n\t\tpp.Handle(e.Path, e.Handler)\n\t}\n\tlog.Println(\"warning: could not start debug HTTP server:\", http.ListenAndServe(addr, pp))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n)\n\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\treturn\n\t}\n\tmux := http.NewServeMux()\n\n\t// Register pprof endpoints\n\tmux.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\tmux.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n\tmux.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\tmux.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\tmux.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\n\t// Register standard endpoints\n\tmux.Handle(\"/debug/vars\", expvarHandler)\n\tmux.HandleFunc(\"/debug/gc\", gcHandler)\n\tmux.HandleFunc(\"/debug/freeosmemory\", freeOSMemoryHandler)\n\tmux.Handle(\"/debug/metrics\", metricsHandler)\n\tmux.Handle(\"/debug/trace\", traceHandler)\n\n\t// Collect all endpoints for index page\n\tallEndpoints := []Endpoint{\n\t\t{Path: \"/debug/pprof/\", Name: \"pprof\"},\n\t\t{Path: \"/debug/vars\", Name: \"expvar\"},\n\t\t{Path: \"/debug/gc\", Name: \"gc\"},\n\t\t{Path: \"/debug/freeosmemory\", Name: \"free OS memory\"},\n\t\t{Path: \"/debug/metrics\", Name: \"metrics\"},\n\t\t{Path: \"/debug/trace\", Name: \"trace\"},\n\t}\n\tallEndpoints = append(allEndpoints, extra...)\n\n\t// Register custom endpoints\n\tfor _, e := range extra {\n\t\tmux.Handle(e.Path, e.Handler)\n\t}\n\n\t// Index handler\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tfmt.Fprintf(w, \"<html><head><title>Debug Server</title></head><body><h1>Debug Endpoints</h1><ul>\")\n\t\tfor _, endpoint := range allEndpoints {\n\t\t\tfmt.Fprintf(w, \"<li><a href=\\\"%s\\\">%s</a></li>\", endpoint.Path, endpoint.Name)\n\t\t}\n\t\tfmt.Fprintf(w, \"</ul></body></html>\")\n\t})\n\n\t// Start server\n\thttp.ListenAndServe(addr, mux)\n}"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a Go HTTP server that handles requests on specified routes, supports HTTPS with TLS certificates, and redirects HTTP traffic to HTTPS.\n\nFunction Description: The code demonstrates setting up a basic HTTP server with HTTPS support. It includes a handler function to process requests, sets up an HTTP-to-HTTPS redirect, and starts both HTTP and HTTPS servers concurrently.\n\nInput:\n- Port numbers for HTTP (9999) and HTTPS (10443) servers\n- TLS certificate files (\"cert.pem\" and \"key.pem\")\n- HTTP request objects (*http.Request) for the handler function\n\nOutput:\n- HTTP responses (through http.ResponseWriter)\n- Server logs indicating server status and errors\n- Automatic HTTP-to-HTTPS redirection (301 Moved Permanently)\n\nMethods:\n1. handler(w http.ResponseWriter, req *http.Request) - Processes incoming requests and writes a plain text response\n2. main() - Configures and starts the HTTP and HTTPS servers, including the redirect handler",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, req *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\tw.Write([]byte(\"This is an example server.\\n\"))\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\tlog.Printf(\"About to listen on 10443. Go to https://127.0.0.1:10443/\")\n\tgo http.ListenAndServe(\":9999\", http.RedirectHandler(\"https://127.0.0.1:10443/\", 301))\n\terr := http.ListenAndServeTLS(\":10443\", \"cert.pem\", \"key.pem\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\tfmt.Fprintf(w, \"Hello from HTTPS server\\n\")\n}\n\nfunc main() {\n\thttpsServer := &http.Server{\n\t\tAddr:    \":10443\",\n\t\tHandler: http.HandlerFunc(handler),\n\t}\n\n\tredirectHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\thost, _, err := net.SplitHostPort(r.Host)\n\t\tif err != nil {\n\t\t\thost = r.Host\n\t\t}\n\t\thttpsHost := net.JoinHostPort(host, \"10443\")\n\t\tnewURL := \"https://\" + httpsHost + r.URL.RequestURI()\n\t\thttp.Redirect(w, r, newURL, http.StatusMovedPermanently)\n\t})\n\n\thttpServer := &http.Server{\n\t\tAddr:    \":9999\",\n\t\tHandler: redirectHandler,\n\t}\n\n\tgo func() {\n\t\tlog.Println(\"Starting HTTP server on port 9999 (redirects to HTTPS)\")\n\t\tif err := httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(\"HTTP server error: %v\", err)\n\t\t}\n\t}()\n\n\tlog.Println(\"Starting HTTPS server on port 10443\")\n\tif err := httpsServer.ListenAndServeTLS(\"cert.pem\", \"key.pem\"); err != nil && err != http.ErrServerClosed {\n\t\tlog.Fatalf(\"HTTPS server error: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Create a function that implements a basic HTTP server which echoes back the request body to the response.\n\nFunction Description: The function `httpserver` starts an HTTP server on the specified address. It handles all incoming requests to the root path (\"/\") by copying the request body directly to the response writer. This effectively echoes back the received data to the client. The server runs until an error occurs or is manually stopped.\n\nInput:  \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\").\n\nOutput:  \n- `error`: Returns an error if the server fails to start or encounters a fatal error during operation. Returns nil if the server is terminated gracefully.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tio.Copy(w, req.Body)\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tdefer r.Body.Close()\n\t\tio.Copy(w, r.Body)\n\t}\n\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", handler)\n\tserver := &http.Server{\n\t\tAddr:    addr,\n\t\tHandler: mux,\n\t}\n\n\terr := server.ListenAndServe()\n\tif err != nil {\n\t\tif err == http.ErrServerClosed {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement an HTTP worker struct that can process jobs by making HTTP requests with custom headers and handling the responses appropriately.\n\nStruct Description: HTTPWorker is a struct that handles HTTP job processing with configurable user agent and logging capabilities. It implements job execution by making POST requests to specified URLs with JSON payloads and processing the responses.\n\nFields:\nUserAgent: string - The User-Agent header value to be used in HTTP requests\nLogger: *zerolog.Logger - Logger instance for debug and error logging\n\nMethods:\nWork: (job jobqueue.Job) -> *jobqueue.Result - Processes a job by making an HTTP POST request to the job's URL with the job's payload as JSON. Handles request creation, execution, response reading, and result parsing. Returns a jobqueue.Result indicating the outcome of the job processing.\n\nInput Parameters:\n- job: jobqueue.Job - Contains the job details including URL, payload, and timeout\n\nOutput:\n- *jobqueue.Result - The result of the job processing, including status, code, and message",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/fireworq/fireworq/jobqueue\"\n\t\"github.com/rs/zerolog\"\n)\n\ntype HTTPWorker struct {\n\tUserAgent string\n\tLogger    *zerolog.Logger\n}\n\nfunc (worker *HTTPWorker) Work(job jobqueue.Job) *jobqueue.Result {\n\tclient := &http.Client{\n\t\tTimeout: time.Duration(job.Timeout()) * time.Second,\n\t}\n\treq, err := http.NewRequest(\n\t\t\"POST\",\n\t\tjob.URL(),\n\t\tstrings.NewReader(job.Payload()),\n\t)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusInternalFailure,\n\t\t\tMessage: fmt.Sprintf(\"Cannot create http request: %v\", err),\n\t\t}\n\t}\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\n\tuserAgent := worker.UserAgent\n\tif userAgent == \"\" {\n\t\tuserAgent = defaultUserAgent\n\t}\n\treq.Header.Add(\"User-Agent\", userAgent)\n\n\tresp, err := client.Do(req)\n\n\tworker.Logger.Debug().\n\t\tStr(\"action\", \"dispatch\").\n\t\tStr(\"worker\", \"HTTPWorker\").\n\t\tStr(\"url\", job.URL()).\n\t\tStr(\"payload\", job.Payload()).\n\t\tMsg(\"Dispatched via HTTP\")\n\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusInternalFailure,\n\t\t\tMessage: fmt.Sprintf(\"Request failed: %v\", err),\n\t\t}\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusFailure,\n\t\t\tCode:    resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\"Cannot read body: %v\", err),\n\t\t}\n\t}\n\n\tvar rslt jobqueue.Result\n\terr = json.Unmarshal(body, &rslt)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus: jobqueue.ResultStatusFailure,\n\t\t\tCode:   resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\n\t\t\t\t\"Cannot parse body as JSON: %v\\nOriginal response body:\\n%s\",\n\t\t\t\terr,\n\t\t\t\tstring(body),\n\t\t\t),\n\t\t}\n\t}\n\n\tif !rslt.IsValid() {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusFailure,\n\t\t\tCode:    resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\"Invalid result status: %s\\nOriginal response body:\\n%s\", rslt.Status, string(body)),\n\t\t}\n\t}\n\n\trslt.Code = resp.StatusCode\n\treturn &rslt\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\n\t\"github.com/rs/zerolog\"\n)\n\ntype HTTPWorker struct {\n\tUserAgent string\n\tLogger    *zerolog.Logger\n}\n\nfunc (w *HTTPWorker) Work(job jobqueue.Job) *jobqueue.Result {\n\tpayloadBytes, err := json.Marshal(job.Payload)\n\tif err != nil {\n\t\tw.Logger.Error().Err(err).Msg(\"Failed to marshal job payload\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  false,\n\t\t\tCode:    0,\n\t\t\tMessage: fmt.Sprintf(\"Error marshaling payload: %v\", err),\n\t\t}\n\t}\n\n\tctx, cancel := context.WithTimeout(context.Background(), job.Timeout)\n\tdefer cancel()\n\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", job.URL, bytes.NewBuffer(payloadBytes))\n\tif err != nil {\n\t\tw.Logger.Error().Err(err).Msg(\"Failed to create HTTP request\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  false,\n\t\t\tCode:    0,\n\t\t\tMessage: fmt.Sprintf(\"Error creating request: %v\", err),\n\t\t}\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"User-Agent\", w.UserAgent)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tw.Logger.Error().Err(err).Msg(\"HTTP request failed\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  false,\n\t\t\tCode:    0,\n\t\t\tMessage: fmt.Sprintf(\"HTTP request error: %v\", err),\n\t\t}\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, readErr := io.ReadAll(resp.Body)\n\tif readErr != nil {\n\t\tw.Logger.Error().Err(readErr).Msg(\"Failed to read response body\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  false,\n\t\t\tCode:    0,\n\t\t\tMessage: fmt.Sprintf(\"Error reading response: %v\", readErr),\n\t\t}\n\t}\n\n\tw.Logger.Debug().Int(\"status_code\", resp.StatusCode).Msg(\"Received response\")\n\treturn &jobqueue.Result{\n\t\tStatus:  true,\n\t\tCode:    resp.StatusCode,\n\t\tMessage: string(body),\n\t}\n}"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a Go struct that represents local network services capable of running both a DNS server and an HTTP server concurrently. The DNS server should resolve a specific domain to a local IP address, while the HTTP server should serve predefined webpages.\n\nStruct Description: The `localNetworkServices` struct encapsulates functionality for running concurrent DNS and HTTP servers. The DNS server resolves a configured domain to a local IP address, and the HTTP server serves static web content mapped to specific paths.\n\nFields:\n- domain: string - The domain name that will be resolved by the DNS server\n- webpages: map[string]string - A map of URL paths to their corresponding webpage content\n- ipAddr: string - The local IP address that both servers will bind to\n\nMethods:\n- DNSServerIP() -> string - Returns the IP address of the DNS server\n- URL(subpath string) -> string - Constructs a full URL for a given subpath using the configured domain\n- Serve(ctx context.Context) -> error - Starts both DNS and HTTP servers concurrently using an errgroup, returns any error that occurs during execution\n\nAdditional Helper Struct:\n- dnsHandler: Implements the dns.Handler interface to handle DNS queries\n\nFields:\n- records: map[string]string - A map of domain names to their corresponding IP addresses\n\nMethods:\n- ServeDNS(w dns.ResponseWriter, r *dns.Msg) - Handles incoming DNS queries, responding with A records for configured domains",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"golang.org/x/sync/errgroup\"\n\t\"github.com/miekg/dns\"\n)\n\ntype localNetworkServices struct {\n\tdomain   string\n\twebpages map[string]string\n\tipAddr   string\n}\n\nfunc (l localNetworkServices) DNSServerIP() string {\n\treturn l.ipAddr\n}\n\nfunc (l localNetworkServices) URL(subpath string) string {\n\treturn fmt.Sprintf(\"http://%s/%s\", l.domain, subpath)\n}\n\nfunc (l localNetworkServices) Serve(ctx context.Context) error {\n\terrGroup, _ := errgroup.WithContext(ctx)\n\n\terrGroup.Go(func() error {\n\t\tdnsSrv := &dns.Server{\n\t\t\tAddr: l.ipAddr + \":53\",\n\t\t\tNet:  \"udp\",\n\t\t\tHandler: &dnsHandler{\n\t\t\t\trecords: map[string]string{\n\t\t\t\t\tl.domain + \".\": l.ipAddr,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\treturn dnsSrv.ListenAndServe()\n\t})\n\n\terrGroup.Go(func() error {\n\t\tfor path, contents := range l.webpages {\n\t\t\twebpage := contents\n\t\t\thttp.HandleFunc(\"/\"+path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tio.WriteString(w, webpage)\n\t\t\t})\n\t\t}\n\n\t\treturn http.ListenAndServe(l.ipAddr+\":80\", nil)\n\t})\n\n\treturn errGroup.Wait()\n}\n\ntype dnsHandler struct {\n\trecords map[string]string\n}\n\nfunc (h dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\n\tmsg := dns.Msg{}\n\tmsg.SetReply(r)\n\tif r.Question[0].Qtype == dns.TypeA {\n\t\tmsg.Authoritative = true\n\t\tdomain := msg.Question[0].Name\n\t\taddress, ok := h.records[domain]\n\t\tif ok {\n\t\t\tmsg.Answer = append(msg.Answer, &dns.A{\n\t\t\t\tHdr: dns.RR_Header{Name: domain, Rrtype: dns.TypeA, Class: dns.ClassINET, Ttl: 3600},\n\t\t\t\tA:   net.ParseIP(address),\n\t\t\t})\n\t\t} else {\n\t\t\tmsg.SetRcode(r, dns.RcodeNameError)\n\t\t}\n\t}\n\n\tw.WriteMsg(&msg)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/miekg/dns\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\ntype localNetworkServices struct {\n\tdomain   string\n\twebpages map[string]string\n\tipAddr   string\n}\n\nfunc (l *localNetworkServices) DNSServerIP() string {\n\treturn l.ipAddr\n}\n\nfunc (l *localNetworkServices) URL(subpath string) string {\n\treturn fmt.Sprintf(\"http://%s/%s\", l.domain, subpath)\n}\n\nfunc (l *localNetworkServices) Serve(ctx context.Context) error {\n\tg, ctx := errgroup.WithContext(ctx)\n\n\tg.Go(func() error {\n\t\thandler := &dnsHandler{\n\t\t\trecords: map[string]string{l.domain: l.ipAddr},\n\t\t}\n\t\tsrv := &dns.Server{\n\t\t\tAddr:    l.ipAddr + \":53\",\n\t\t\tNet:     \"udp\",\n\t\t\tHandler: handler,\n\t\t}\n\t\treturn srv.ListenAndServe()\n\t})\n\n\tg.Go(func() error {\n\t\tmux := http.NewServeMux()\n\t\tfor path, content := range l.webpages {\n\t\t\tpath := path\n\t\t\tcontent := content\n\t\t\tmux.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif r.URL.Path != path {\n\t\t\t\t\thttp.NotFound(w, r)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tfmt.Fprint(w, content)\n\t\t\t})\n\t\t}\n\n\t\tsrv := &http.Server{\n\t\t\tAddr:    l.ipAddr + \":80\",\n\t\t\tHandler: mux,\n\t\t}\n\n\t\terrCh := make(chan error, 1)\n\t\tgo func() {\n\t\t\terrCh <- srv.ListenAndServe()\n\t\t}()\n\n\t\tselect {\n\t\tcase err := <-errCh:\n\t\t\treturn err\n\t\tcase <-ctx.Done():\n\t\t\tshutdownCtx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\t\t\tdefer cancel()\n\t\t\treturn srv.Shutdown(shutdownCtx)\n\t\t}\n\t})\n\n\treturn g.Wait()\n}\n\ntype dnsHandler struct {\n\trecords map[string]string\n}\n\nfunc (h *dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\n\tmsg := new(dns.Msg)\n\tmsg.SetReply(r)\n\tmsg.Authoritative = true\n\n\tif len(r.Question) > 0 {\n\t\tq := r.Question[0]\n\t\tif q.Qtype == dns.TypeA {\n\t\t\tif ip, ok := h.records[q.Name]; ok {\n\t\t\t\trr, err := dns.NewRR(fmt.Sprintf(\"%s A %s\", q.Name, ip))\n\t\t\t\tif err == nil {\n\t\t\t\t\tmsg.Answer = append(msg.Answer, rr)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tw.WriteMsg(msg)\n}"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Create a Go HTTP server that handles requests with tracing capabilities using OpenCensus. The server should respond to requests with a simple message, perform tracing operations, and make an external HTTP request while propagating the trace context.\n\nFunction Description: The main function sets up an HTTP server with tracing middleware. It registers a root handler (\"/\") that responds with \"hello world\", creates trace spans, adds annotations/attributes, and makes an external HTTP request to example.com while maintaining trace context.\n\nInput: None (The function takes no direct input parameters. HTTP requests come through the server's routing mechanism.)\n\nOutput: None (The function doesn't return anything directly. It starts an HTTP server that listens indefinitely on port 50030 and handles incoming requests by writing responses to http.ResponseWriter.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.opencensus.io/trace\"\n\t\"go.opencensus.io/plugin/ochttp\"\n)\n\nfunc main() {\n\tclient := &http.Client{Transport: &ochttp.Transport{}}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tfmt.Fprintf(w, \"hello world\")\n\n\t\t_, span := trace.StartSpan(req.Context(), \"child\")\n\t\tdefer span.End()\n\t\tspan.Annotate([]trace.Attribute{trace.StringAttribute(\"key\", \"value\")}, \"something happened\")\n\t\tspan.AddAttributes(trace.StringAttribute(\"hello\", \"world\"))\n\t\ttime.Sleep(time.Millisecond * 125)\n\n\t\tr, _ := http.NewRequest(\"GET\", \"https://example.com\", nil)\n\n\t\tr = r.WithContext(req.Context())\n\t\tresp, err := client.Do(r)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t} else {\n\t\t\tresp.Body.Close()\n\t\t}\n\t})\n\tlog.Fatal(http.ListenAndServe(\":50030\", &ochttp.Handler{}))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"contrib.go.opencensus.io/exporter/ocagent\"\n\t\"contrib.go.opencensus.io/exporter/ocagent/propagation\"\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"go.opencensus.io/trace\"\n\t\"go.opencensus.io/plugin/ochttp\"\n)\n\nfunc main() {\n\texp, err := ocagent.NewExporter(ocagent.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create exporter: %v\", err)\n\t}\n\ttrace.RegisterExporter(exp)\n\ttrace.ApplyConfig(trace.Config{DefaultSampler: trace.ProbabilitySampler(1.0)})\n\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", helloHandler)\n\thandler := &ochttp.Server{}\n\tlog.Println(\"Starting server on :50030\")\n\tlog.Fatal(http.ListenAndServe(\":50030\", handler.Wrap(mux)))\n}\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n\tctx := r.Context()\n\tspan := trace.FromContext(ctx)\n\tspan.AddAttributes(\n\t\ttrace.StringAttribute(\"component\", \"server\"),\n\t\ttrace.StringAttribute(\"endpoint\", \"/\"),\n\t)\n\tspan.Annotate([]trace.Attribute{trace.StringAttribute(\"event\", \"request_received\")}, \"Handling started\")\n\n\tchildSpan := trace.StartSpan(ctx, \"process_data\")\n\tchildSpan.AddAttributes(trace.StringAttribute(\"operation\", \"compute\"))\n\tchildSpan.Annotate(nil, \"Processing data\")\n\tchildSpan.End()\n\n\tclient := &http.Client{}\n\treq, _ := http.NewRequestWithContext(ctx, \"GET\", \"http://example.com\", nil)\n\tpropagation.HTTPFormat{}.Inject(span.SpanContext(), propagation.HeaderCarrier(req.Header))\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tspan.Annotate([]trace.Attribute{trace.StringAttribute(\"error\", err.Error())}, \"External request failed\")\n\t} else {\n\t\tspan.AddAttributes(trace.Int64Attribute(\"response.code\", int64(resp.StatusCode)))\n\t\tresp.Body.Close()\n\t}\n\n\tfmt.Fprintf(w, \"hello world\")\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that performs HTTP requests with customizable options including TLS configuration, request method, headers, and payload.\n\nFunction Description: The function DoRequest executes HTTP requests with various configurable options. It handles TLS configuration (including insecure mode), sets request headers, processes different HTTP methods, and manages response reading. The function is designed to be flexible for different API interaction scenarios while maintaining security and error handling.\n\nInput:\n- opt (EtcdRequestOption struct) - Configuration options for the HTTP request containing:\n  - Endpoint (string): Base URL for the request\n  - Api (string): API endpoint path\n  - PostData (string): Request payload data\n  - TlsConfig (*tls.Config): TLS configuration (nil for insecure)\n  - Method (string): HTTP method (GET, POST, etc.)\n  - Silent (bool): Unused in current implementation\n\nOutput:\n- (string) - Response body content as string\n- (error) - Error object if request fails, nil on success",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cdk-team/CDK/pkg/errors\"\n)\n\ntype EtcdRequestOption struct {\n\tEndpoint  string\n\tApi       string\n\tPostData  string\n\tTlsConfig *tls.Config\n\tMethod    string\n\tSilent    bool\n}\n\nfunc DoRequest(opt EtcdRequestOption) (string, error) {\n\tif opt.TlsConfig == nil || len(opt.TlsConfig.Certificates) == 0 || opt.TlsConfig.RootCAs == nil {\n\t\topt.TlsConfig = &tls.Config{InsecureSkipVerify: true}\n\t}\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: opt.TlsConfig,\n\t\t},\n\t\tTimeout: time.Duration(5) * time.Second,\n\t}\n\n\trequest, err := http.NewRequest(opt.Method, opt.Endpoint+opt.Api, bytes.NewBuffer([]byte(opt.PostData)))\n\tif err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found while generate post request in net.http .\"}\n\t}\n\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(request)\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t} else if err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found in post request.\"}\n\t}\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found in post request.\"}\n\t}\n\n\treturn string(content), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype EtcdRequestOption struct {\n\tEndpoint  string\n\tApi       string\n\tPostData  string\n\tTlsConfig *tls.Config\n\tMethod    string\n\tSilent    bool\n}\n\nfunc DoRequest(opt EtcdRequestOption) (string, error) {\n\tfullURL := strings.TrimRight(opt.Endpoint, \"/\") + \"/\" + strings.TrimLeft(opt.Api, \"/\")\n\tmethod := opt.Method\n\tif method == \"\" {\n\t\tmethod = http.MethodGet\n\t}\n\tvar req *http.Request\n\tvar err error\n\tif opt.PostData != \"\" {\n\t\treq, err = http.NewRequest(method, fullURL, strings.NewReader(opt.PostData))\n\t} else {\n\t\treq, err = http.NewRequest(method, fullURL, nil)\n\t}\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tclient := &http.Client{}\n\tif opt.TlsConfig != nil {\n\t\tclient.Transport = &http.Transport{\n\t\t\tTLSClientConfig: opt.TlsConfig,\n\t\t}\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves static files from an embedded filesystem using the go.rice package.\n\nFunction Description: The main function initializes an Echo web server, sets up route handlers for serving static files from an embedded directory (\"app\"), and starts the server on port 1323. The static files are served under the root path (\"/\") and a static prefix path (\"/static/*\").\n\nInput: None (The function takes no explicit parameters)\n\nOutput: None (The function doesn't return anything explicitly but starts an HTTP server that runs indefinitely until interrupted)\n\nNote: The reference code shows the complete implementation at the package level (main function) rather than as an isolated function or struct. The instruction follows the function-level format as the code primarily demonstrates functional behavior rather than object-oriented structure.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\trice \"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\tassetHandler := http.FileServer(rice.MustFindBox(\"app\").HTTPBox())\n\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static/\", assetHandler)))\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n)\n\nfunc main() {\n\tbox := rice.MustFindBox(\"app\")\n\tfs := box.HTTPBox()\n\n\te := echo.New()\n\te.StaticFS(\"/\", fs)\n\te.StaticFS(\"/static\", fs)\n\tlog.Fatal(e.Start(\":1323\"))\n}"
  }
]