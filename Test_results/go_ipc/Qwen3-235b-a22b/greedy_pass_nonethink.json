[
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles JSONP requests, serving dynamic JSON data wrapped in a callback function.\n\nFunction Description: The main function initializes an Echo server, sets up middleware for logging and recovery, serves static files from a \"public\" directory, and defines a route (\"/jsonp\") that responds to GET requests with JSONP-formatted data containing a response message, current timestamp, and random number.\n\nInput: None (The function takes no direct input parameters, but the \"/jsonp\" endpoint accepts an optional query parameter \"callback\" specifying the JSONP callback function name)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and serves responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tif callback == \"\" {\n\t\t\treturn c.JSON(400, map[string]string{\"error\": \"Missing callback parameter\"})\n\t\t}\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"message\":   \"Success\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t\t\"random\":    rand.Intn(1000),\n\t\t}\n\n\t\treturn c.JSONP(200, callback, data)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic routes and includes middleware for logging and recovery.\n\nFunction Description: The main function initializes a new Echo instance, sets up middleware for logging and panic recovery, defines a route handler for the root path (\"/\"), and starts the HTTP server on port 1323.\n\nInput: None (The function takes no direct input parameters; configuration is done internally)\n\nOutput: None (The function does not return any value; it starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(200, \"Hello, World!\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles POST requests for two different endpoints (/tenhou and /majsoul) to process incoming data and forward it to respective receivers.\n\nStruct Description: The mjHandler struct is a request handler that processes incoming HTTP requests for the Tenhou and Majsoul game platforms, logging errors and forwarding data to appropriate receivers.\n\nFields:\n- log: echo.Logger - Logger for error and info logging\n- tenhouMessageReceiver: *tenhou.MessageReceiver - Receiver for Tenhou game messages\n- majsoulMessageQueue: chan []byte - Channel for buffering Majsoul game messages\n\nMethods:\n- analysisTenhou: (c echo.Context) -> error - Processes POST requests to /tenhou endpoint, reads request body, forwards data to tenhouMessageReceiver, and returns HTTP response\n- analysisMajsoul: (c echo.Context) -> error - Processes POST requests to /majsoul endpoint, reads request body, sends data to majsoulMessageQueue, and returns HTTP response\n\nFunction Description: The runServer function initializes and starts an HTTP server with configurable port and HTTPS options, setting up routes and middleware for the Echo framework.\n\nInput:\n- isHTTPS: bool - Flag indicating whether to use HTTPS\n- port: int - Port number for the server to listen on\n\nOutput:\n- error - Returns any error that occurs during server startup or operation",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/labstack/gommon/log\"\n\tstdLog \"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n)\n\ntype mjHandler struct {\n\tlog echo.Logger\n\n\ttenhouMessageReceiver *tenhou.MessageReceiver\n\tmajsoulMessageQueue   chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.tenhouMessageReceiver.Put(data)\n\treturn c.NoContent(http.StatusOK)\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.majsoulMessageQueue <- data\n\treturn c.NoContent(http.StatusOK)\n}\n\nvar h *mjHandler\n\nfunc runServer(isHTTPS bool, port int) (err error) {\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\te.StdLogger = stdLog.New(ioutil.Discard, \"\", 0)\n\te.Logger.SetLevel(log.INFO)\n\n\th = &mjHandler{\n\t\tlog:                   e.Logger,\n\t\ttenhouMessageReceiver: tenhou.NewMessageReceiver(),\n\t\tmajsoulMessageQueue:   make(chan []byte, 100),\n\t}\n\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORS())\n\te.POST(\"/tenhou\", h.analysisTenhou)\n\te.POST(\"/majsoul\", h.analysisMajsoul)\n\n\taddr := \":\" + strconv.Itoa(port)\n\tif !isHTTPS {\n\t\terr = e.Start(addr)\n\t} else {\n\t\terr = startTLS(e, addr)\n\t}\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype mjHandler struct {\n\tlog                  echo.Logger\n\ttenhouMessageReceiver *tenhou.MessageReceiver\n\tmajsoulMessageQueue   chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tbody, err := io.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.log.Errorf(\"Failed to read Tenhou request body: %v\", err)\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Failed to read request body\")\n\t}\n\n\tgo func() {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\th.log.Errorf(\"Recovered in Tenhou message processing: %v\", r)\n\t\t\t}\n\t\t}()\n\t\th.tenhouMessageReceiver.Receive(body)\n\t}()\n\n\treturn c.String(http.StatusOK, \"OK\")\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tbody, err := io.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.log.Errorf(\"Failed to read Majsoul request body: %v\", err)\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Failed to read request body\")\n\t}\n\n\tselect {\n\tcase h.majsoulMessageQueue <- body:\n\t\treturn c.String(http.StatusOK, \"OK\")\n\tdefault:\n\t\th.log.Warnf(\"Majsoul message queue is full, dropping message\")\n\t\treturn echo.NewHTTPError(http.StatusServiceUnavailable, \"Message queue is full\")\n\t}\n}\n\nfunc runServer(isHTTPS bool, port int) error {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\thandler := &mjHandler{\n\t\tlog:                  e.Logger,\n\t\ttenhouMessageReceiver: tenhou.NewMessageReceiver(),\n\t\tmajsoulMessageQueue:   make(chan []byte, 100),\n\t}\n\n\te.POST(\"/tenhou\", handler.analysisTenhou)\n\te.POST(\"/majsoul\", handler.analysisMajsoul)\n\n\taddr := \":\" + string(port)\n\tif isHTTPS {\n\t\treturn e.StartTLS(addr, \"cert.pem\", \"key.pem\")\n\t}\n\treturn e.Start(addr)\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a Go struct that represents an HTTP server application using the Echo framework, with configurable options and standard middleware.\n\nStruct Description: The `App` struct represents an HTTP server application built on the Echo framework. It encapsulates the Echo engine instance and provides methods to initialize and run the server with common middleware (recovery, logging) and default routes.\n\nFields:\n- Engine: *echo.Echo - The core Echo framework instance that handles HTTP routing and middleware\n- Conf: *conf.Conf - Configuration object for server settings (port, debug mode, etc.)\n\nMethods:\n- NewApp: func(opts ...AppOptions) *App - Constructor that initializes a new App instance with optional configuration. Applies default middleware (recovery, logging) and sets up basic routes.\n  Input: opts ...AppOptions (variadic parameter for configuration options)\n  Output: *App (new App instance)\n\n- Run: func() - Starts the HTTP server using the configured port from Conf. Panics if server fails to start.\n  Input: None\n  Output: None (runs indefinitely until server stops)\n\n- Must: func(error) - Helper function (not shown in reference) that panics on error, typically used for server startup\n  Input: error\n  Output: None",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n}\n\nfunc NewApp(opts ...AppOptions) *App {\n\toptions := AppOptions{}\n\tfor _, i := range opts {\n\t\toptions = i\n\t\tbreak\n\t}\n\n\toptions.init()\n\n\tengine := echo.New()\n\n\tengine.Debug = conf.UBool(\"debug\")\n\n\tengine.Use(middleware.Recover())\n\n\tengine.GET(\"/favicon.ico\", func(c echo.Context) error {\n\t\treturn c.Redirect(http.StatusMovedPermanently, \"/static/images/favicon.ico\")\n\t})\n\n\tengine.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n\t\tFormat: `${method} | ${status} | ${uri} -> ${latency_human}` + \"\\n\",\n\t}))\n\n\tapp := &App{\n\t\tEngine: engine,\n\t}\n\n\treturn app\n}\n\nfunc (app *App) Run() {\n\tMust(app.Engine.Start(\":\" + app.Conf.UString(\"port\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package app\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n\tConf   *conf.Conf\n}\n\n// AppOptions defines a functional option for configuring the App\ntype AppOptions func(*App)\n\n// NewApp creates and initializes a new App instance with default middleware and routes\nfunc NewApp(opts ...AppOptions) *App {\n\te := echo.New()\n\n\tapp := &App{\n\t\tEngine: e,\n\t\tConf:   &conf.Conf{}, // Default empty config; can be overridden by options\n\t}\n\n\t// Apply default middleware\n\tapp.Engine.Use(middleware.Recover())\n\tapp.Engine.Use(middleware.Logger())\n\n\t// Set up basic routes\n\tapp.setupRoutes()\n\n\t// Apply any configuration options\n\tfor _, opt := range opts {\n\t\topt(app)\n\t}\n\n\treturn app\n}\n\n// setupRoutes initializes default HTTP routes for the application\nfunc (a *App) setupRoutes() {\n\ta.Engine.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(200, \"OK\")\n\t})\n}\n\n// Run starts the HTTP server on the configured port\nfunc (a *App) Run() {\n\tif err := a.Engine.Start(\":\" + a.Conf.Port); err != nil {\n\t\ta.Must(err)\n\t}\n}\n\n// Must panics if an error is not nil, useful for critical startup failures\nfunc (a *App) Must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server with WebSocket support using the Echo framework, capable of handling messages, health checks, and streaming, with optional authentication.\n\nStruct Description: The API struct represents an HTTP server with WebSocket capabilities, message buffering, and authentication support. It handles incoming HTTP requests and WebSocket connections while managing message broadcasting and logging.\n\nFields:\n\nMessages: [ring.Ring] - A ring buffer for storing messages with configurable capacity\nRWMutex: [sync.RWMutex] - Read-write mutex for thread-safe operations on shared data\nConfig: [*bridge.Config] - Configuration object containing server settings and parameters\nmrouter: [*melody.Melody] - WebSocket router for handling WebSocket connections and messages\n\nMethods:\n\nNew: [func(cfg *bridge.Config) bridge.Bridger] -> [bridge.Bridger] - Constructor that initializes the API instance, sets up routes, and starts the HTTP server\nhandleWebsocketMessage: [func(message config.Message, s *melody.Session)] -> [void] - Handles incoming WebSocket messages, prepares them for broadcasting, and sends to remote channel\nhandleWebsocket: [func(c echo.Context) error] -> [error] - WebSocket handler that manages WebSocket connections using the melody router\nhandleHealthcheck: [func(c echo.Context) error] -> [error] - Health check endpoint handler (implied by route registration)\nhandleMessages: [func(c echo.Context) error] -> [error] - Messages endpoint handler (implied by route registration)\nhandleStream: [func(c echo.Context) error] -> [error] - Stream endpoint handler (implied by route registration)\nhandlePostMessage: [func(c echo.Context) error] -> [error] - Message posting endpoint handler (implied by route registration)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/olahol/melody\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype API struct {\n\tMessages ring.Ring\n\tsync.RWMutex\n\t*bridge.Config\n\tmrouter *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\tb := &API{Config: cfg}\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\n\tb.mrouter = melody.New()\n\tb.mrouter.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tmessage := config.Message{}\n\t\terr := json.Unmarshal(msg, &message)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to decode message from byte[] '%s'\", string(msg))\n\t\t\treturn\n\t\t}\n\t\tb.handleWebsocketMessage(message, s)\n\t})\n\tb.mrouter.HandleConnect(func(session *melody.Session) {\n\t\tgreet := b.getGreeting()\n\t\tdata, err := json.Marshal(greet)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to encode message '%v'\", greet)\n\t\t\treturn\n\t\t}\n\t\terr = session.Write(data)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to write message '%s'\", string(data))\n\t\t\treturn\n\t\t}\n\t})\n\n\tb.Messages = ring.Ring{}\n\tif b.GetInt(\"Buffer\") != 0 {\n\t\tb.Messages.SetCapacity(b.GetInt(\"Buffer\"))\n\t}\n\tif b.GetString(\"Token\") != \"\" {\n\t\te.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == b.GetString(\"Token\"), nil\n\t\t}))\n\t}\n\n\te.GET(\"/api/health\", b.handleHealthcheck)\n\te.GET(\"/api/messages\", b.handleMessages)\n\te.GET(\"/api/stream\", b.handleStream)\n\te.GET(\"/api/websocket\", b.handleWebsocket)\n\te.POST(\"/api/message\", b.handlePostMessage)\n\tgo func() {\n\t\tif b.GetString(\"BindAddress\") == \"\" {\n\t\t\tb.Log.Fatalf(\"No BindAddress configured.\")\n\t\t}\n\t\tb.Log.Infof(\"Listening on %s\", b.GetString(\"BindAddress\"))\n\t\tb.Log.Fatal(e.Start(b.GetString(\"BindAddress\")))\n\t}()\n\treturn b\n}\n\nfunc (b *API) handleWebsocketMessage(message config.Message, s *melody.Session) {\n\tmessage.Channel = \"api\"\n\tmessage.Protocol = \"api\"\n\tmessage.Account = b.Account\n\tmessage.ID = \"\"\n\tmessage.Timestamp = time.Now()\n\n\tdata, err := json.Marshal(message)\n\tif err != nil {\n\t\tb.Log.Errorf(\"failed to encode message for loopback '%v'\", message)\n\t\treturn\n\t}\n\t_ = b.mrouter.BroadcastOthers(data, s)\n\n\tb.Log.Debugf(\"Sending websocket message from %s on %s to gateway\", message.Username, \"api\")\n\tb.Remote <- message\n}\n\nfunc (b *API) handleWebsocket(c echo.Context) error {\n\terr := b.mrouter.HandleRequest(c.Response(), c.Request())\n\tif err != nil {\n\t\tb.Log.Errorf(\"error in websocket handling  '%v'\", err)\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"sync\"\n\n\t\"github.com/olahol/melody\"\n\t\"github.com/labstack/echo/v4\"\n\t\"yourmodule/bridge\"\n\t\"yourmodule/config\"\n\t\"container/ring\"\n)\n\ntype API struct {\n\tMessages        *ring.Ring\n\tRWMutex         sync.RWMutex\n\tConfig          *bridge.Config\n\tmrouter         *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\te := echo.New()\n\tapi := &API{\n\t\tMessages: ring.New(cfg.BufferSize),\n\t\tRWMutex:  sync.RWMutex{},\n\t\tConfig:   cfg,\n\t\tmrouter:  melody.New(),\n\t}\n\n\tapi.mrouter.Config.MaxMessageSize = cfg.MaxMessageSize\n\n\te.GET(\"/ws\", api.handleWebsocket)\n\te.GET(\"/health\", api.handleHealthcheck)\n\te.GET(\"/messages\", api.handleMessages)\n\te.GET(\"/stream\", api.handleStream)\n\te.POST(\"/message\", api.handlePostMessage)\n\n\tgo func() {\n\t\tif cfg.UseTLS {\n\t\t\te.StartTLS(cfg.ListenAddr, cfg.CertFile, cfg.KeyFile)\n\t\t} else {\n\t\t\te.Start(cfg.ListenAddr)\n\t\t}\n\t}()\n\n\treturn api\n}\n\nfunc (a *API) handleWebsocketMessage(message config.Message, s *melody.Session) {\n\ta.RWMutex.Lock()\n\tmessage.ID = a.Messages.Value.(config.Message).ID + 1\n\ta.Messages.Value = message\n\ta.Messages = a.Messages.Next()\n\ta.RWMutex.Unlock()\n\n\tselect {\n\tcase a.Config.RemoteChan <- message:\n\tdefault:\n\t}\n}\n\nfunc (a *API) handleWebsocket(c echo.Context) error {\n\treturn a.mrouter.HandleRequest(c.Response(), c.Request())\n}\n\nfunc (a *API) handleHealthcheck(c echo.Context) error {\n\treturn c.JSON(200, map[string]string{\"status\": \"ok\"})\n}\n\nfunc (a *API) handleMessages(c echo.Context) error {\n\ta.RWMutex.RLock()\n\tdefer a.RWMutex.RUnlock()\n\n\tvar messages []config.Message\n\ta.Messages.Do(func(p interface{}) {\n\t\tif p != nil {\n\t\t\tmessages = append(messages, p.(config.Message))\n\t\t}\n\t})\n\n\treturn c.JSON(200, messages)\n}\n\nfunc (a *API) handleStream(c echo.Context) error {\n\tflusher, ok := c.Response().Writer.(http.Flusher)\n\tif !ok {\n\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Streaming not supported\")\n\t}\n\n\tc.Response().Header().Set(echo.HeaderContentType, \"text/event-stream\")\n\tc.Response().Header().Set(\"Cache-Control\", \"no-cache\")\n\tc.Response().Header().Set(\"Connection\", \"keep-alive\")\n\n\ta.RWMutex.RLock()\n\tlastID := a.Messages.Prev().Value.(config.Message).ID\n\ta.RWMutex.RUnlock()\n\n\tnotify := c.Request().Context().Done()\n\tticker := time.NewTicker(a.Config.StreamInterval)\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\ta.RWMutex.RLock()\n\t\t\tcurrentID := a.Messages.Prev().Value.(config.Message).ID\n\t\t\tif currentID > lastID {\n\t\t\t\t// Send new messages since last check\n\t\t\t\t// Implementation depends on how you track changes in the ring buffer\n\t\t\t}\n\t\t\ta.RWMutex.RUnlock()\n\t\t\tflusher.Flush()\n\t\tcase <-notify:\n\t\t\tticker.Stop()\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\nfunc (a *API) handlePostMessage(c echo.Context) error {\n\tvar msg config.Message\n\tif err := c.Bind(&msg); err != nil {\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, err.Error())\n\t}\n\n\tif a.Config.AuthEnabled && c.FormValue(\"token\") != a.Config.AuthToken {\n\t\treturn echo.ErrUnauthorized\n\t}\n\n\tmsg.Timestamp = time.Now().UnixNano()\n\n\ta.mrouter.BroadcastFilter([]byte(msg.Content), func(s *melody.Session) bool {\n\t\treturn s.Request.URL.Path == \"/ws\"\n\t})\n\n\tselect {\n\tcase a.Config.RemoteChan <- msg:\n\tdefault:\n\t}\n\n\treturn c.NoContent(http.StatusOK)\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Implement an auto-managed HTTP provider in Go using the Echo framework that can dynamically start/stop an HTTP server with health check capabilities.\n\nStruct Description: AutoManagedProvider is a struct that manages an Echo-based HTTP server with automatic startup/shutdown capabilities and provides health check endpoints.\n\nFields:\n- activeProvider: *echo.Echo - The Echo HTTP server instance\n- activeProviderRunning: bool - Flag indicating if the server is currently running\n- activeProviderTesting: bool - Flag indicating if the server is in testing mode\n- httpClient: *http.Client - HTTP client used for internal communications\n- autoManagePort: int - Port number for the managed HTTP server\n\nMethods:\n- NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider - Constructor that creates a new AutoManagedProvider with configuration\n- UpdateTTL() - Manages the server lifecycle (starts if not running, stops if shutdown)\n- isShutdown() bool - Checks if the server should be shutdown (returns bool)\n- getCurrentNode() interface{} - Returns current node information for health checks (returns interface{})",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyFromEnvironment,\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   5 * time.Second,\n\t\t\tKeepAlive: 5 * time.Second,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          10,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t\tExpectContinueTimeout: 1 * time.Second,\n\t\tMaxConnsPerHost:       10,\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   2 * time.Second,\n\t}\n\n\tp := &AutoManagedProvider{\n\t\thttpClient:            httpClient,\n\t\tautoManagePort:        autoManPort,\n\t\tactiveProviderRunning: false,\n\t}\n\n\treturn p\n}\n\nfunc (p *AutoManagedProvider) UpdateTTL() {\n\tif p.isShutdown() && p.activeProviderRunning {\n\t\tp.activeProvider.Close()\n\t\treturn\n\t}\n\n\tif p.activeProviderRunning {\n\t\treturn\n\t}\n\n\tif !p.activeProviderTesting {\n\t\tp.activeProvider = echo.New()\n\t\tp.activeProvider.HideBanner = true\n\t\tp.activeProvider.GET(\"/_health\", func(context echo.Context) error {\n\t\t\treturn context.JSON(http.StatusOK, p.getCurrentNode())\n\t\t})\n\t}\n\tgo func() {\n\t\tp.activeProviderRunning = true\n\t\tappURI := fmt.Sprintf(\"0.0.0.0:%d\", p.autoManagePort)\n\t\tp.activeProvider.Start(appURI)\n\t\tp.activeProviderRunning = false\n\t}()\n}\n\nfunc (p *AutoManagedProvider) isShutdown() bool {\n\treturn false\n}\n\nfunc (p *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n\tmu                    sync.Mutex\n\trefreshTTL            time.Duration\n\tlastUsed              time.Time\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\tamp := &AutoManagedProvider{\n\t\tautoManagePort: autoManPort,\n\t\trefreshTTL:     refreshTTL,\n\t\thttpClient: &http.Client{\n\t\t\tTimeout: 10 * time.Second,\n\t\t},\n\t}\n\n\t// Initialize the Echo instance with health check route\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/health\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, amp.getCurrentNode())\n\t})\n\n\tamp.activeProvider = e\n\tgo amp.UpdateTTL()\n\n\treturn amp\n}\n\nfunc (amp *AutoManagedProvider) UpdateTTL() {\n\tticker := time.NewTicker(amp.refreshTTL)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tamp.mu.Lock()\n\t\t\tif !amp.isShutdown() && !amp.activeProviderRunning {\n\t\t\t\tgo amp.startServer()\n\t\t\t} else if amp.isShutdown() && amp.activeProviderRunning {\n\t\t\t\tamp.stopServer()\n\t\t\t}\n\t\t\tamp.mu.Unlock()\n\n\t\t}\n\t}\n}\n\nfunc (amp *AutoManagedProvider) isShutdown() bool {\n\treturn time.Since(amp.lastUsed) > amp.refreshTTL\n}\n\nfunc (amp *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn map[string]interface{}{\n\t\t\"status\":   \"active\",\n\t\t\"port\":     amp.autoManagePort,\n\t\t\"ttl\":      amp.refreshTTL,\n\t\t\"lastUsed\": amp.lastUsed,\n\t}\n}\n\nfunc (amp *AutoManagedProvider) startServer() {\n\tif amp.activeProviderRunning || amp.activeProvider == nil {\n\t\treturn\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", amp.autoManagePort)\n\tamp.activeProvider.Server.Addr = addr\n\n\tgo func() {\n\t\tif err := amp.activeProvider.Start(addr); err != nil && err != http.ErrServerClosed {\n\t\t\tfmt.Printf(\"Echo server error: %v\\n\", err)\n\t\t}\n\t}()\n\n\tamp.activeProviderRunning = true\n\tamp.lastUsed = time.Now()\n}\n\nfunc (amp *AutoManagedProvider) stopServer() {\n\tif !amp.activeProviderRunning || amp.activeProvider == nil {\n\t\treturn\n\t}\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tif err := amp.activeProvider.Shutdown(ctx); err != nil {\n\t\tfmt.Printf(\"Echo shutdown error: %v\\n\", err)\n\t}\n\n\tamp.activeProviderRunning = false\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Implement an HTTP server using the Echo framework in Go that handles workflow-related requests with authentication and specific route handlers.\n\nFunction Description: The function `startWorkflowServer` initializes and starts an HTTP server using the Echo framework. It sets up middleware for authentication, defines route handlers for specific endpoints (`/secrets` and `/trigger`), and starts the server on the specified host and port. The server validates incoming requests using a predefined workflow key and performs specific actions based on the route.\n\nInput:  \n- `host` (string): The host address on which the server will listen.  \n- `port` (uint64): The port number on which the server will listen.  \n\nOutput:  \n- None (The function starts an HTTP server and blocks indefinitely unless an error occurs).  \n\nNote: The function uses global variables (`workflowKey`, `builderKey`, `secretsHit`, `triggerHit`, etc.) and external configurations (`config.Current.File.ServerUrl`), which should be defined elsewhere in the code.  \n\n(Strictly followed the format requirements without inserting irrelevant characters.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/rs/zerolog/log\"\n\t\"github.com/ziflex/lecho/v2\"\n)\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\tlogger := lecho.From(log.Logger)\n\te.Logger = logger\n\te.Use(lecho.Middleware(lecho.Config{Logger: logger})\n\n\tkeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == workflowKey, nil\n\t})\n\n\teg := e.Group(\"\", keyAuth)\n\n\teg.POST(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit = true\n\t\tparams, err := c.FormParams()\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tfor key, val := range params {\n\t\t\tswitch key {\n\t\t\tcase \"SECRET_KEY\":\n\t\t\t\tif val[0] != builderKey {\n\t\t\t\t\tlog.Fatal().Msg(\"bad key\")\n\t\t\t\t}\n\t\t\tcase \"SECRET_URL\":\n\t\t\t\tif val[0] != config.Current.File.ServerUrl {\n\t\t\t\t\tlog.Fatal().Msg(\"bad url\")\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tlog.Fatal().Msg(\"unknown secret\")\n\t\t\t}\n\t\t}\n\t\treturn c.NoContent(200)\n\t})\n\n\teg.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit = true\n\t\treturn c.NoContent(200)\n\t})\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar workflowKey string\nvar builderKey string\nvar secretsHit, triggerHit bool\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\tvalidateKey := func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tkey := c.Request().Header.Get(\"X-API-Key\")\n\t\t\tif key != workflowKey {\n\t\t\t\treturn c.JSON(http.StatusUnauthorized, map[string]string{\"error\": \"invalid API key\"})\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t}\n\n\te.POST(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit = true\n\t\treturn c.JSON(http.StatusOK, map[string]bool{\"status\": true})\n\t})\n\n\te.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit = true\n\t\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\t\"builder_key\":   builderKey,\n\t\t\t\"server_url\":    config.Current.File.ServerUrl,\n\t\t\t\"timeout\":       10 * time.Second,\n\t\t\t\"max_retries\":   3,\n\t\t\t\"retry_timeout\": 5 * time.Second,\n\t\t})\n\t})\n\n\taddr := fmt.Sprintf(\"%s:%d\", host, port)\n\te.Logger.Fatal(e.Start(addr))\n}"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user authentication with JWT tokens. The server should have routes for login, accessible content, and restricted content that requires JWT authentication.\n\nFunction Description: The main function initializes an Echo server, configures middleware for logging and recovery, sets up route handlers for login and accessible content, and creates a restricted route group that requires JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger its handlers)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately but are referenced in this main function. The JWT configuration uses a custom claims structure (jwtCustomClaims) which should also be defined elsewhere.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tconfig := middleware.JWTConfig{\n\t\tClaims:     &jwtCustomClaims{},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\tr.Use(middleware.JWTWithConfig(config))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\ntype jwtCustomClaims struct {\n\tName  string `json:\"name\"`\n\tAdmin bool   `json:\"admin\"`\n}\n\nfunc login(c echo.Context) error {\n\t// Implementation for user login and JWT token generation\n\treturn c.String(http.StatusOK, \"Login endpoint\")\n}\n\nfunc accessible(c echo.Context) error {\n\t// Implementation for publicly accessible content\n\treturn c.String(http.StatusOK, \"Accessible content\")\n}\n\nfunc restricted(c echo.Context) error {\n\t// Implementation for content requiring JWT authentication\n\tuser := c.Get(\"user\").(*jwt.Token)\n\tclaims := user.Claims.(*jwtCustomClaims)\n\treturn c.String(http.StatusOK, \"Restricted content. Welcome \"+claims.Name)\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/accessible\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tconfig := middleware.JWTConfig{\n\t\tClaims:     &jwtCustomClaims{},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\tr.Use(middleware.JWTWithConfig(config))\n\tr.GET(\"\", restricted)\n\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user-related requests with CORS support and logging middleware.\n\nFunction Description: The main function initializes an Echo server instance, configures middleware (logger, recovery, and CORS), sets up route handlers, and starts the server on port 1323.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handler function `getUsers` would need to be implemented separately to handle the GET request to \"/api/users\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n\t\tAllowMethods: []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORS())\n\n\t// Routes\n\te.GET(\"/api/users\", getUsers)\n\n\t// Start server\n\te.Start(\":1323\")\n}\n\nfunc getUsers(c echo.Context) error {\n\t// Implementation for handling GET request to /api/users\n\treturn c.JSON(200, map[string]interface{}{\n\t\t\"message\": \"GET request received\",\n\t})\n}"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that includes rate limiting middleware using Sentinel, with custom resource extraction and block fallback handlers.\n\nFunction Description: The function sets up a Fiber web server with Sentinel middleware for rate limiting. The middleware extracts the client's real IP from headers as the resource key and provides a custom JSON response when requests are blocked. The server listens on port 8080 and includes a test endpoint.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import \"github.com/gofiber/fiber/v2\"\n\nfunc Example() {\n\tapp := fiber.New()\n\tapp.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx *fiber.Ctx) string {\n\t\t\t\treturn ctx.GetReqHeaders()[\"X-Real-IP\"]\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx *fiber.Ctx) error {\n\t\t\t\treturn ctx.Status(400).JSON(struct {\n\t\t\t\t\tError string `json:\"error\"`\n\t\t\t\t\tCode  int    `json:\"code\"`\n\t\t\t\t}{\n\t\t\t\t\t\"too many request; the quota used up\",\n\t\t\t\t\t10222,\n\t\t\t\t})\n\t\t\t})),\n\t)\n\n\tapp.Get(\"/test\", func(ctx *fiber.Ctx) error { return nil })\n\t_ = app.Listen(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/alibaba/sentinel-golang/core/flow\"\n\t\"github.com/alibaba/sentinel-golang/pkg/adapters/fiber\"\n)\n\nfunc setupServer() {\n\tapp := fiber.New()\n\n\t// Initialize Sentinel flow rules\n\t_, err := flow.LoadRules([]*flow.Rule{\n\t\t{\n\t\t\tResource:               \"ip_limit\",\n\t\t\tTokenCalculateStrategy: flow.Direct,\n\t\t\tControlBehavior:        flow.Reject,\n\t\t\tThreshold:              5, // Allow 5 requests per second\n\t\t\tStatIntervalInMs:       1000,\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Custom resource extractor: extract client's real IP\n\textractor := func(c *fiber.Ctx) string {\n\t\tip := c.IP()\n\t\tif ip == \"::1\" {\n\t\t\tip = \"127.0.0.1\"\n\t\t}\n\t\treturn ip\n\t}\n\n\t// Custom block fallback handler\n\tblockHandler := func(c *fiber.Ctx) error {\n\t\treturn c.Status(fiber.StatusTooManyRequests).JSON(fiber.Map{\n\t\t\t\"error\": \"Too many requests\",\n\t\t\t\"message\": \"Request blocked due to rate limiting\",\n\t\t})\n\t}\n\n\t// Apply Sentinel middleware with custom extractor and block handler\n\tapp.Use(sentinel_fiber.NewMiddleware(\n\t\tsentinel_fiber.WithResourceExtractor(extractor),\n\t\tsentinel_fiber.WithBlockFallback(blockHandler),\n\t))\n\n\t// Test endpoint\n\tapp.Get(\"/test\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"Hello, Rate Limited World!\")\n\t})\n\n\t// Start server\n\tapp.Listen(\":8080\")\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that handles health checks and image conversion requests.\n\nFunction Description: The main function initializes and configures a Fiber HTTP server, sets up middleware for ETag generation, defines route handlers for health checks and image conversion, and starts the server on a specified host and port.\n\nInput:\n- Configuration parameters (host, port, read buffer size, concurrency, keepalive settings) are read from the config.Config object\n- No direct input parameters to the main function itself\n\nOutput:\n- Running HTTP server that listens on specified address\n- Console output indicating server status\n- Potential fatal error if server fails to start\n\nThe function performs these key operations:\n1. Initializes Fiber app with custom configuration\n2. Adds ETag middleware\n3. Registers route handlers:\n   - /healthz endpoint for health checks\n   - /* catch-all endpoint for image conversion\n4. Starts the server and handles startup errors",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"webp_server_go/config\"\n\t\"webp_server_go/handler\"\n)\n\nvar app = fiber.New(fiber.Config{\n\tServerHeader:          \"WebP Server Go\",\n\tAppName:               \"WebP Server Go\",\n\tDisableStartupMessage: true,\n\tProxyHeader:           \"X-Real-IP\",\n\tReadBufferSize:        config.Config.ReadBufferSize,\n\tConcurrency:           config.Config.Concurrency,\n\tDisableKeepalive:      config.Config.DisableKeepalive,\n})\n\nfunc main() {\n\tapp.Use(etag.New(etag.Config{\n\t\tWeak: true,\n\t}))\n\n\tlistenAddress := config.Config.Host + \":\" + config.Config.Port\n\n\tapp.Get(\"/healthz\", handler.Healthz)\n\tapp.Get(\"/*\", handler.Convert)\n\n\tfmt.Println(\"WebP Server Go is Running on http://\" + listenAddress)\n\n\tbindErr := app.Listen(listenAddress)\n\tif bindErr != nil {\n\t\tlog.Fatal(\"Error starting server: \", bindErr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/etag\"\n\t\"github.com/gofiber/fiber/v2/utils\"\n)\n\nfunc main() {\n\tapp := fiber.New(fiber.Config{\n\t\tAppName:             config.Config.AppName,\n\t\tBodyLimit:           config.Config.BodyLimit,\n\t\tReadBufferSize:      config.Config.ReadBufferSize,\n\t\tWriteBufferSize:     config.Config.WriteBufferSize,\n\t\tConcurrency:         config.Config.Concurrency,\n\t\tIdleTimeout:         config.Config.IdleTimeout,\n\t\tReadTimeout:         config.Config.ReadTimeout,\n\t\tWriteTimeout:        config.Config.WriteTimeout,\n\t\tKeepAlive:           config.Config.KeepAlive,\n\t})\n\n\tapp.Use(etag.New())\n\n\tapp.Get(\"/healthz\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"OK\")\n\t})\n\n\tapp.Get(\"/*\", func(c *fiber.Ctx) error {\n\t\turl := c.Params(\"*\")\n\t\tif url == \"\" {\n\t\t\treturn fiber.ErrBadRequest\n\t\t}\n\n\t\tresp, err := http.Get(url)\n\t\tif err != nil {\n\t\t\treturn fiber.ErrInternalServerError\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\timg, _, err := image.Decode(resp.Body)\n\t\tif err != nil {\n\t\t\treturn fiber.ErrInternalServerError\n\t\t}\n\n\t\tbuf := new(bytes.Buffer)\n\t\terr = jpeg.Encode(buf, img, nil)\n\t\tif err != nil {\n\t\t\treturn fiber.ErrInternalServerError\n\t\t}\n\n\t\tc.Set(fiber.HeaderContentType, fiber.MIMEImageJPEG)\n\t\treturn c.Send(buf.Bytes())\n\t})\n\n\tutils.Logger.Infof(\"Starting server on %s:%d\", config.Config.Host, config.Config.Port)\n\tif err := app.Listen(\":8080\"); err != nil {\n\t\tutils.Logger.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go for a dashboard application that manages queues and tenants, with optional basic authentication and template rendering capabilities.\n\nStruct Description: The Dashboard struct represents a web dashboard that provides queue management functionality through HTTP endpoints. It uses the Fiber framework for routing and middleware, supports HTML template rendering, and can be configured with basic authentication.\n\nFields:\n\nApp: *fiber.App - The Fiber application instance for handling HTTP requests\nqueue: models.Queue - Interface for queue operations\ntenantManager: models.TenantManager - Interface for tenant management operations\ncfg: config.DashboardConfig - Configuration settings for the dashboard\n\nMethods:\n\nNewDashboard: (queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) -> *Dashboard - Initializes a new Dashboard instance with the given dependencies and configuration, sets up template engine, basic auth middleware, and route handlers\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nQueues: (c *fiber.Ctx) -> error - Handler for GET / route\nNewQueue: (c *fiber.Ctx) -> error - Handler for POST /queues route\nQueue: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue route\nQueueSettings: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/settings route\nSaveQueueSettings: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/settings route\nDeleteQueueConfirm: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/delete route\nDeleteQueue: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/delete route\nMessage: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/messages/:message route",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"github.com/gofiber/template/html/v2\"\n)\n\ntype Dashboard struct {\n\tApp *fiber.App\n\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tvar engine *html.Engine\n\n\tif cfg.Dev {\n\t\tengine = html.New(\"./dashboard/views\", \".html\")\n\t\tengine.Reload(true)\n\t\tengine.Debug(true)\n\t} else {\n\t\thttp.FS(viewsfs)\n\t\tfs2, err := fs.Sub(viewsfs, \"views\")\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tengine = html.NewFileSystem(http.FS(fs2), \".html\")\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tViews:                 engine,\n\t\tDisableStartupMessage: true,\n\t})\n\n\tif cfg.User != \"\" && cfg.Pass != \"\" {\n\t\tapp.Use(basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.User: cfg.Pass,\n\t\t\t},\n\t\t}))\n\t}\n\n\td := &Dashboard{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp.Get(\"/\", d.Queues)\n\tapp.Post(\"/queues\", d.NewQueue)\n\tapp.Get(\"/queues/:queue\", d.Queue)\n\tapp.Get(\"/queues/:queue/settings\", d.QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", d.SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", d.DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", d.DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", d.Message)\n\n\treturn d\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"Dashboard: http://localhost:%d\\n\", d.cfg.Port)\n\treturn d.App.Listen(fmt.Sprintf(\":%d\", d.cfg.Port))\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif d.cfg.Enabled {\n\t\treturn d.App.Shutdown()\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package dashboard\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"github.com/gofiber/template/html\"\n\n\t\"your_project/models\"\n\t\"your_project/config\"\n)\n\ntype Dashboard struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\tcfg           config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tengine := html.New(\"./templates\", \".html\")\n\tapp := fiber.New(fiber.Config{\n\t\tViews: engine,\n\t})\n\n\td := &Dashboard{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tif cfg.BasicAuth.Enabled {\n\t\tauthMiddleware := basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.BasicAuth.Username: cfg.BasicAuth.Password,\n\t\t\t},\n\t\t})\n\t\tapp.Use(authMiddleware)\n\t}\n\n\td.setupRoutes()\n\treturn d\n}\n\nfunc (d *Dashboard) setupRoutes() {\n\tapp := d.App\n\n\tapp.Get(\"/\", d.Queues)\n\tapp.Post(\"/queues\", d.NewQueue)\n\n\tapp.Get(\"/queues/:queue\", d.Queue)\n\tapp.Get(\"/queues/:queue/settings\", d.QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", d.SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", d.DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", d.DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", d.Message)\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\taddr := fmt.Sprintf(\":%d\", d.cfg.Port)\n\treturn d.App.Listen(addr)\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn d.App.Shutdown()\n}\n\nfunc (d *Dashboard) Queues(c *fiber.Ctx) error {\n\tqueues, err := d.queue.List()\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Render(\"queues\", fiber.Map{\n\t\t\"Queues\": queues,\n\t})\n}\n\nfunc (d *Dashboard) NewQueue(c *fiber.Ctx) error {\n\tname := c.FormValue(\"name\")\n\tif name == \"\" {\n\t\treturn c.Status(fiber.StatusBadRequest).SendString(\"Missing queue name\")\n\t}\n\terr := d.queue.Create(name)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Redirect(\"/\")\n}\n\nfunc (d *Dashboard) Queue(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tqueueInfo, err := d.queue.Get(name)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Render(\"queue\", fiber.Map{\n\t\t\"Queue\": queueInfo,\n\t})\n}\n\nfunc (d *Dashboard) QueueSettings(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tsettings, err := d.queue.GetSettings(name)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Render(\"settings\", fiber.Map{\n\t\t\"QueueName\": name,\n\t\t\"Settings\":  settings,\n\t})\n}\n\nfunc (d *Dashboard) SaveQueueSettings(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tvar form struct {\n\t\tRetention int `form:\"retention\"`\n\t\tMaxSize   int `form:\"max_size\"`\n\t}\n\tif err := c.BodyParser(&form); err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).SendString(err.Error())\n\t}\n\terr := d.queue.UpdateSettings(name, form.Retention, form.MaxSize)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Redirect(fmt.Sprintf(\"/queues/%s\", name))\n}\n\nfunc (d *Dashboard) DeleteQueueConfirm(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\treturn c.Render(\"delete_queue\", fiber.Map{\n\t\t\"QueueName\": name,\n\t})\n}\n\nfunc (d *Dashboard) DeleteQueue(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\terr := d.queue.Delete(name)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Redirect(\"/\")\n}\n\nfunc (d *Dashboard) Message(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tmessageID := c.Params(\"message\")\n\tmsg, err := d.queue.GetMessage(queueName, messageID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Render(\"message\", fiber.Map{\n\t\t\"QueueName\": queueName,\n\t\t\"Message\":   msg,\n\t})\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that initializes and runs a Fiber-based HTTP server with specific routes for job management, while also starting a background engine process.\n\nFunction Description: The function `Run` initializes a Fiber web server with disabled startup messages, sets up three routes for job management (creating new jobs, checking job status, and retrieving jobs), starts a background engine process in a goroutine, and finally starts listening on a specified host and port.\n\nInput: None (uses package-level constants Host and Port for server configuration)\n\nOutput: None (runs indefinitely as a web server, but technically returns an error if the server fails to start)\n\nNote: The function uses package-level constants Host and Port for server configuration and assumes the existence of handler functions NewJob, GetStatus, and GetJob, as well as an Engine function for background processing.",
    "Canonical_solution": "import (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs/\", NewJob)\n\tapp.Get(\"/jobs/status/:id\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\tapp.Listen(Host + \":\" + Port)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() error {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs\", NewJob)\n\tapp.Get(\"/jobs/:id/status\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\treturn app.Listen(Host + \":\" + Port)\n}"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Implement a Fiber-based HTTP server in Go that handles Amazon SQS (Simple Queue Service) API requests, including authentication, routing, and various SQS operations.\n\nStruct Description: The SQS struct represents an HTTP server that processes Amazon SQS API requests. It uses Fiber framework for HTTP handling and includes queue management functionality with tenant isolation.\n\nFields:\n\nApp: *fiber.App - Fiber application instance for HTTP server\nqueue: models.Queue - Queue management interface\ntenantManager: models.TenantManager - Tenant management interface\ncfg: config.SQSConfig - Configuration for the SQS server\n\nMethods:\n\nNewSQS: (queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) -> *SQS - Constructor that initializes the SQS server with dependencies and configuration\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nAction: (c *fiber.Ctx) -> error - Main request handler that routes SQS API requests based on X-Amz-Target header\nSendMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessage SQS operation\nSendMessageBatch: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessageBatch SQS operation\nReceiveMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles ReceiveMessage SQS operation\nDeleteMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles DeleteMessage SQS operation\nListQueues: (c *fiber.Ctx, tenantId int64) -> error - Handles ListQueues SQS operation\nGetQueueURL: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueUrl SQS operation\nCreateQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles CreateQueue SQS operation\nGetQueueAttributes: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueAttributes SQS operation\nPurgeQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles PurgeQueue SQS operation\nChangeMessageVisibility: (c *fiber.Ctx, tenantId int64) -> error - Handles ChangeMessageVisibility SQS operation\nerrorHandler: (ctx *fiber.Ctx, err error) -> error - Custom error handler for the Fiber app\nauthMiddleware: (c *fiber.Ctx) -> error - Authentication middleware for tenant validation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/valyala/fasthttp/fasthttpadaptor\"\n)\n\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\ts := &SQS{\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t\tErrorHandler:          s.errorHandler,\n\t\tBodyLimit:             cfg.MaxRequestSize,\n\t})\n\n\tapp.Use(s.authMiddleware)\n\tapp.Post(\"/*\", s.Action)\n\n\ts.App = app\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"SQS Endpoint: http://localhost:%d\\n\", s.cfg.Port)\n\treturn s.App.Listen(fmt.Sprintf(\":%d\", s.cfg.Port))\n}\n\nfunc (s *SQS) Stop() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\tawsMethodHeader, ok := c.GetReqHeaders()[\"X-Amz-Target\"]\n\tif !ok {\n\t\treturn errors.New(\"X-Amz-Target header not found\")\n\t}\n\tawsMethod := awsMethodHeader[0]\n\n\tvar r *http.Request = &http.Request{}\n\tfasthttpadaptor.ConvertRequest(c.Context(), r, false)\n\n\ttenantId := c.Locals(\"tenantId\").(int64)\n\n\tvar rc error\n\tswitch awsMethod {\n\tcase \"AmazonSQS.SendMessage\":\n\t\trc = s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\trc = s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\trc = s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\trc = s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\trc = s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\trc = s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\trc = s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\trc = s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\trc = s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\trc = s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\trc = NewSQSError(400, \"UnsupportedOperation\", fmt.Sprintf(\"SQS method %s not implemented\", awsMethod))\n\t}\n\n\treturn rc\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package sqs\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/cors\"\n\t\"github.com/gofiber/fiber/v2/middleware/recover\"\n)\n\ntype SQS struct {\n\tApp          *fiber.App\n\tqueue        models.Queue\n\ttenantManager models.TenantManager\n\tcfg          config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\tapp := fiber.New(fiber.Config{\n\t\tErrorHandler: func(c *fiber.Ctx, err error) error {\n\t\t\treturn app.(*SQS).errorHandler(c, err)\n\t\t},\n\t})\n\n\ts := &SQS{\n\t\tApp:          app,\n\t\tqueue:        queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:          cfg,\n\t}\n\n\ts.App.Use(recover.New())\n\ts.App.Use(cors.New())\n\ts.App.Use(s.authMiddleware)\n\n\ts.App.Post(\"/\", s.Action)\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", s.cfg.Port)\n\treturn s.App.Listen(addr)\n}\n\nfunc (s *SQS) Stop() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Shutdown()\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\ttarget := c.Get(\"X-Amz-Target\")\n\tswitch target {\n\tcase \"AmazonSQS.SendMessage\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\ttenantId := c.Locals(\"tenant_id\").(int64)\n\t\treturn s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\treturn fiber.ErrBadRequest\n\t}\n}\n\nfunc (s *SQS) SendMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for sending a single message\n\tqueueName := c.Query(\"QueueUrl\")\n\tbody := c.FormValue(\"MessageBody\")\n\n\tmsgId, err := s.queue.SendMessage(tenantId, queueName, body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresponse := fmt.Sprintf(\"<SendMessageResult><MessageId>%s</MessageId></SendMessageResult>\", msgId)\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) SendMessageBatch(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for sending multiple messages in batch\n\tqueueName := c.Query(\"QueueUrl\")\n\t\n\t// This is simplified - actual implementation would parse multiple messages from form data\n\t// For demonstration, we'll just send one message\n\tbody := c.FormValue(\"SendMessageBatchRequestEntry.1.MessageBody\")\n\tid := c.FormValue(\"SendMessageBatchRequestEntry.1.Id\")\n\n\tmsgId, err := s.queue.SendMessage(tenantId, queueName, body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresponse := fmt.Sprintf(\"<SendMessageBatchResult><SendMessageBatchResultEntry><Id>%s</Id><MessageId>%s</MessageId></SendMessageBatchResultEntry></SendMessageBatchResult>\", id, msgId)\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) ReceiveMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for receiving messages\n\tqueueName := c.Query(\"QueueUrl\")\n\tmaxMessages := c.FormValue(\"MaxNumberOfMessages\")\n\tvisibilityTimeout := c.FormValue(\"VisibilityTimeout\")\n\twaitTime := c.FormValue(\"WaitTimeSeconds\")\n\n\t// Convert string parameters to appropriate types\n\t// For simplicity, using default values if conversion fails\n\tvar maxMsgInt int = 1\n\tvar visTimeoutInt int = 30\n\tvar waitTimeInt int = 0\n\n\tfmt.Sscanf(maxMessages, \"%d\", &maxMsgInt)\n\tfmt.Sscanf(visibilityTimeout, \"%d\", &visTimeoutInt)\n\tfmt.Sscanf(waitTime, \"%d\", &waitTimeInt)\n\n\tmessages, err := s.queue.ReceiveMessage(tenantId, queueName, maxMsgInt, visTimeoutInt, waitTimeInt)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Build XML response\n\tresponse := \"<ReceiveMessageResult>\"\n\tfor _, msg := range messages {\n\t\tresponse += \"<Message>\"\n\t\tresponse += \"<MessageId>\" + msg.ID + \"</MessageId>\"\n\t\tresponse += \"<ReceiptHandle>\" + msg.ReceiptHandle + \"</ReceiptHandle>\"\n\t\tresponse += \"<Body>\" + msg.Body + \"</Body>\"\n\t\tresponse += \"</Message>\"\n\t}\n\tresponse += \"</ReceiveMessageResult>\"\n\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) DeleteMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for deleting a message\n\tqueueName := c.Query(\"QueueUrl\")\n\treceiptHandle := c.FormValue(\"ReceiptHandle\")\n\n\terr := s.queue.DeleteMessage(tenantId, queueName, receiptHandle)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.SendString(\"<DeleteMessageResult/>\")\n}\n\nfunc (s *SQS) ListQueues(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for listing queues\n\tprefix := c.FormValue(\"QueueNamePrefix\")\n\n\tqueues, err := s.queue.ListQueues(tenantId, prefix)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Build XML response\n\tresponse := \"<ListQueuesResult>\"\n\tfor _, q := range queues {\n\t\tresponse += \"<QueueUrl>\" + q.URL + \"</QueueUrl>\"\n\t}\n\tresponse += \"</ListQueuesResult>\"\n\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) GetQueueURL(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for getting queue URL\n\tqueueName := c.FormValue(\"QueueName\")\n\n\turl, err := s.queue.GetQueueURL(tenantId, queueName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresponse := fmt.Sprintf(\"<GetQueueUrlResult><QueueUrl>%s</QueueUrl></GetQueueUrlResult>\", url)\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) CreateQueue(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for creating a queue\n\tqueueName := c.FormValue(\"QueueName\")\n\tdelaySeconds := c.FormValue(\"DelaySeconds\")\n\tvisibilityTimeout := c.FormValue(\"VisibilityTimeout\")\n\tmaximumMessageSize := c.FormValue(\"MaximumMessageSize\")\n\tmessageRetentionPeriod := c.FormValue(\"MessageRetentionPeriod\")\n\treceiveMessageWaitTime := c.FormValue(\"ReceiveMessageWaitTimeSeconds\")\n\n\t// Convert string parameters to appropriate types\n\t// For simplicity, using default values if conversion fails\n\tvar delayInt int = 0\n\tvar visTimeoutInt int = 30\n\tvar msgSizeInt int = 262144 // 256KB\n\tvar retentionInt int = 345600 // 4 days\n\tvar receiveWaitInt int = 0\n\n\tfmt.Sscanf(delaySeconds, \"%d\", &delayInt)\n\tfmt.Sscanf(visibilityTimeout, \"%d\", &visTimeoutInt)\n\tfmt.Sscanf(maximumMessageSize, \"%d\", &msgSizeInt)\n\tfmt.Sscanf(messageRetentionPeriod, \"%d\", &retentionInt)\n\tfmt.Sscanf(receiveMessageWaitTime, \"%d\", &receiveWaitInt)\n\n\turl, err := s.queue.CreateQueue(tenantId, queueName, delayInt, visTimeoutInt, msgSizeInt, retentionInt, receiveWaitInt)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresponse := fmt.Sprintf(\"<CreateQueueResult><QueueUrl>%s</QueueUrl></CreateQueueResult>\", url)\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) GetQueueAttributes(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for getting queue attributes\n\tqueueName := c.Query(\"QueueUrl\")\n\tattrNames := c.FormValue(\"AttributeName\")\n\n\tattributes, err := s.queue.GetQueueAttributes(tenantId, queueName, attrNames)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Build XML response\n\tresponse := \"<GetQueueAttributesResult>\"\n\tfor name, value := range attributes {\n\t\tresponse += \"<Attribute>\"\n\t\tresponse += \"<Name>\" + name + \"</Name>\"\n\t\tresponse += \"<Value>\" + value + \"</Value>\"\n\t\tresponse += \"</Attribute>\"\n\t}\n\tresponse += \"</GetQueueAttributesResult>\"\n\n\treturn c.SendString(response)\n}\n\nfunc (s *SQS) PurgeQueue(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for purging a queue\n\tqueueName := c.Query(\"QueueUrl\")\n\n\terr := s.queue.PurgeQueue(tenantId, queueName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.SendString(\"<PurgeQueueResult/>\")\n}\n\nfunc (s *SQS) ChangeMessageVisibility(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for changing message visibility timeout\n\tqueueName := c.Query(\"QueueUrl\")\n\treceiptHandle := c.FormValue(\"ReceiptHandle\")\n\tvisibilityTimeout := c.FormValue(\"VisibilityTimeout\")\n\n\tvar visTimeoutInt int = 30\n\tfmt.Sscanf(visibilityTimeout, \"%d\", &visTimeoutInt)\n\n\terr := s.queue.ChangeMessageVisibility(tenantId, queueName, receiptHandle, visTimeoutInt)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn c.SendString(\"<ChangeMessageVisibilityResult/>\")\n}\n\nfunc (s *SQS) errorHandler(ctx *fiber.Ctx, err error) error {\n\tcode := fiber.StatusInternalServerError\n\tif e, ok := err.(*fiber.Error); ok {\n\t\tcode = e.Code\n\t}\n\t\n\terrorType := \"InternalError\"\n\tmessage := err.Error()\n\t\n\txmlResponse := fmt.Sprintf(`\n<ErrorResponse>\n  <Error>\n    <Code>%s</Code>\n    <Message>%s</Message>\n  </Error>\n  <RequestId>request-id-placeholder</RequestId>\n</ErrorResponse>`, errorType, message)\n\n\tctx.Set(fiber.HeaderContentType, fiber.MIMEApplicationXML)\n\treturn ctx.Status(code).SendString(xmlResponse)\n}\n\nfunc (s *SQS) authMiddleware(c *fiber.Ctx) error {\n\t// Extract authentication credentials from headers\n\tauthToken := c.Get(\"X-API-Key\")\n\tif authToken == \"\" {\n\t\treturn fiber.ErrUnauthorized\n\t}\n\n\t// Validate the token and get the tenant ID\n\ttenantId, err := s.tenantManager.ValidateTenant(authToken)\n\tif err != nil {\n\t\treturn fiber.ErrUnauthorized\n\t}\n\n\t// Store tenant ID in context for later use\n\tc.Locals(\"tenant_id\", tenantId)\n\treturn c.Next()\n}"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with configurable settings including middleware, routes, and TLS support.\n\nFunction Description: The function serves as the entry point for starting a Gin-based HTTP server. It initializes the Gin engine with default middleware (Logger and Recovery) and additional custom middleware (CORS, Correlation, Auth, etc.). It registers various route handlers for different endpoints including health checks, metrics, and a home route. The server can be started with or without TLS based on configuration.\n\nInput: \n- None (configuration is read from viper and cobra command context)\n\nOutput: \n- None (runs HTTP server as a blocking operation, panics on error)\n\nMethods:\n- The function itself serves as the main execution method for the cobra.Command's Run field\n\nNote: The function uses global configuration via viper and is designed to work as part of a cobra CLI command structure. It handles server startup errors by panicking, which is appropriate for a main application entry point.\n\n(Strictly following the format with no extra characters)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n)\n\nvar towerCmd = &cobra.Command{\n\tUse:   \"api\",\n\tShort: \"Start beaver api server\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tr := gin.Default()\n\n\t\tr.Use(middleware.Cors())\n\t\tr.Use(middleware.Correlation())\n\t\tr.Use(middleware.Logger())\n\t\tr.Use(middleware.Metric())\n\t\tr.Use(middleware.Auth())\n\n\t\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\t\tc.String(http.StatusNoContent, \"\")\n\t\t})\n\n\t\tr.GET(\"/\", controller.Home)\n\n\t\tr.GET(\"/_health\", controller.Health)\n\n\t\tr.GET(\n\t\t\tviper.GetString(\"app.metrics.prometheus.endpoint\"),\n\t\t\tgin.WrapH(controller.Metrics()),\n\t\t)\n\n\t\tvar runerr error\n\n\t\tif viper.GetBool(\"app.tls.status\") {\n\t\t\trunerr = r.RunTLS(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t\tviper.GetString(\"app.tls.pemPath\"),\n\t\t\t\tviper.GetString(\"app.tls.keyPath\"),\n\t\t\t)\n\t\t} else {\n\t\t\trunerr = r.Run(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t)\n\t\t}\n\n\t\tif runerr != nil {\n\t\t\tpanic(runerr.Error())\n\t\t}\n\t},\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n)\n\nfunc RunServer() {\n\tr := gin.Default()\n\n\t// Additional middleware\n\tr.Use(gin.Logger())\n\tr.Use(gin.Recovery())\n\n\t// CORS middleware (example)\n\tr.Use(func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS, GET, PUT, DELETE\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Accept, Authorization, Content-Type, X-CSRF-Token\")\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t})\n\n\t// Correlation middleware (example)\n\tr.Use(func(c *gin.Context) {\n\t\t// Implement correlation logic here\n\t\tc.Next()\n\t})\n\n\t// Auth middleware placeholder\n\tauthMiddleware := func(c *gin.Context) {\n\t\t// Implement auth check if needed\n\t\tc.Next()\n\t}\n\n\t// Register routes\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Welcome!\")\n\t})\n\n\tr.GET(\"/health\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"status\": \"ok\"})\n\t})\n\n\tr.GET(\"/metrics\", func(c *gin.Context) {\n\t\tc.String(200, \"# HELP some_metric Some metric\\n# TYPE some_metric gauge\\nsome_metric 1\\n\")\n\t})\n\n\t// Authenticated route example\n\tr.Use(authMiddleware)\n\tr.GET(\"/secure\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"This is secure!\"})\n\t})\n\n\t// Server configuration\n\thost := viper.GetString(\"host\")\n\tport := viper.GetInt(\"port\")\n\ttlsEnabled := viper.GetBool(\"tls.enabled\")\n\tcertFile := viper.GetString(\"tls.cert_file\")\n\tkeyFile := viper.GetString(\"tls.key_file\")\n\n\taddr := host + \":\" + string(port)\n\n\tvar err error\n\tif tlsEnabled {\n\t\terr = r.RunTLS(addr, certFile, keyFile)\n\t} else {\n\t\terr = r.Run(addr)\n\t}\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RunServer() {\n\tr := gin.Default()\n\t\n\tr.Static(\"/static\", \"./static\")\n\t\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\t\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that implements a session-based counter. The server should increment and persist a counter value across requests using Redis as the session store.\n\nFunction Description: The main function initializes a Gin web server with Redis-based session management and implements a GET endpoint (\"/incr\") that increments and returns a counter value stored in the session.\n\nInput: None (The function takes no direct input parameters. Input comes through HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly. Output is sent as HTTP responses. The \"/incr\" endpoint returns JSON with the current count value)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/redis\"\n\t\"context\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Initialize Redis client\n\tredisClient := redis.NewClient(&redis.Options{\n\t\tAddr: \"localhost:6379\",\n\t})\n\n\t// Create Redis store for sessions\n\tstore, _ := redisstore.NewRedisStore(context.Background(), 10, \"tcp\", \"localhost:6379\", \"\", redisClient)\n\tdefer redisClient.Close()\n\n\t// Use the session middleware with Redis store\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\t// Define the \"/incr\" endpoint\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\n\t\t// Get current count from session\n\t\tcount := session.Get(\"counter\")\n\t\tvar counter int\n\n\t\t// Type assertion or initialize to 0 if not present\n\t\tif count != nil {\n\t\t\tcounter = count.(int)\n\t\t} else {\n\t\t\tcounter = 0\n\t\t}\n\n\t\t// Increment counter\n\t\tcounter++\n\n\t\t// Save updated counter back to session\n\t\tsession.Set(\"counter\", counter)\n\t\tsession.Save()\n\n\t\t// Return JSON response with current count\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"count\": counter,\n\t\t})\n\t})\n\n\t// Start the server on port 8080\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with caching capabilities for specific routes using in-memory storage.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), configures an in-memory cache store, and sets up a GET route (\"/cache_ping\") that returns a cached response. The cached response includes a \"pong\" message with the current Unix timestamp, and the cache is set to expire after one minute.\n\nInput: None (The function takes no parameters as it sets up the server configuration internally)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8080)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/cache\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore := cache.NewInMemoryStore(time.Second)\n\tr.GET(\"/cache_ping\", cache.CachePage(store, time.Minute, func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t}))\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc setupCachedServer() {\n\tr := gin.Default()\n\tc := cache.New(1*time.Minute, 2*time.Minute)\n\n\tr.GET(\"/cache_ping\", func(c *gin.Context) {\n\t\tkey := \"/cache_ping\"\n\t\tif cached, found := c.Get(key); found {\n\t\t\tc.JSON(http.StatusOK, cached)\n\t\t\treturn\n\t\t}\n\n\t\tresponse := gin.H{\n\t\t\t\"message\":   \"pong\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t}\n\n\t\tc.Set(key, response, cache.DefaultExpiration)\n\t\tc.JSON(http.StatusOK, response)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint to handle and respond to header data.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET handler for the root path (\"/\"), processes incoming request headers, and returns a JSON response containing specific header values. The server listens on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but processes HTTP request headers internally)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\th := testHeader{}\n\n\t\tif err := c.ShouldBindHeader(&h); err != nil {\n\t\t\tc.JSON(http.StatusOK, err)\n\t\t}\n\n\t\tfmt.Printf(\"%#v\\n\", h)\n\t\tc.JSON(http.StatusOK, gin.H{\"Rate\": h.Rate, \"Domain\": h.Domain})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\theaders := map[string]string{\n\t\t\t\"Host\":             c.Request.Host,\n\t\t\t\"User-Agent\":       c.Request.UserAgent(),\n\t\t\t\"Accept-Encoding\":  c.Request.Header.Get(\"Accept-Encoding\"),\n\t\t\t\"Content-Type\":     c.Request.Header.Get(\"Content-Type\"),\n\t\t\t\"Authorization\":    c.Request.Header.Get(\"Authorization\"),\n\t\t}\n\n\t\tc.JSON(200, headers)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin-based HTTP server with TLS support, serving HTML content and static assets, while also implementing HTTP/2 server push for static resources.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up static file serving, configures HTML templates, implements HTTP/2 server push for static assets, and starts the server with TLS encryption. It handles requests to the root path (\"/\") by returning HTML content and pushing a JavaScript file to the client.\n\nInput:\n- port (string): The port number to listen on (e.g., \":8080\")\n- certFile (string): Path to the TLS certificate file (e.g., \"./testdata/server.pem\")\n- keyFile (string): Path to the TLS private key file (e.g., \"./testdata/server.key\")\n- htmlTemplates (template.Template): HTML templates to be used for rendering\n- staticDir (string): Directory path for static assets (e.g., \"./assets\")\n\nOutput: None (the function runs indefinitely as a web server)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/assets\", \"./assets\")\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher := c.Writer.Pusher(); pusher != nil {\n\t\t\tif err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n\t\t\t\tlog.Printf(\"Failed to push: %v\", err)\n\t\t\t}\n\t\t}\n\t\tc.HTML(200, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc runSecureWebServer(port, certFile, keyFile string, htmlTemplates template.Template, staticDir string) {\n\tr := gin.Default()\n\tr.SetHTMLTemplate(&htmlTemplates)\n\tr.Static(\"/static\", staticDir)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tpusher, ok := c.Writer.(http.Pusher)\n\t\tif ok {\n\t\t\tpusher.Push(\"/static/script.js\", nil)\n\t\t}\n\t\tc.HTML(http.StatusOK, \"index.html\", nil)\n\t})\n\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, save the uploaded file to the server, and return a success message with the file details and form fields.\n\nFunction Description: The function initializes a Gin router, configures it to handle multipart form uploads (with a maximum size limit), serves static files from a public directory, and sets up a POST endpoint for file uploads. The endpoint binds the incoming request to a struct containing the file and form fields, saves the file to the server, and returns a success message with the file name and form field values.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it sends HTTP responses through the Gin context)\n\nNote: The function assumes the existence of a `BindFile` struct type which should contain at least these fields:\n- File: *multipart.FileHeader - The uploaded file\n- Name: string - A form field value\n- Email: string - A form field value",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar bindFile BindFile\n\n\t\tif err := c.ShouldBind(&bindFile); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tfile := bindFile.File\n\t\tdst := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"upload file err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, bindFile.Name, bindFile.Email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype BindFile struct {\n\tFile  *gin.FileHeader `form:\"file\" binding:\"required\"`\n\tName  string          `form:\"name\" binding:\"required\"`\n\tEmail string          `form:\"email\" binding:\"required,email\"`\n}\n\nfunc setupServer() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20 // 8 MiB\n\n\trouter.Static(\"/public\", \"./public\")\n\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar form BindFile\n\t\tif err := c.ShouldBind(&form); err != nil {\n\t\t\tc.JSON(400, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tif err := c.SaveUploadedFile(form.File, \"uploads/\"+form.File.Filename); err != nil {\n\t\t\tc.JSON(500, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"File uploaded successfully\",\n\t\t\t\"file\": gin.H{\n\t\t\t\t\"name\": form.File.Filename,\n\t\t\t},\n\t\t\t\"formData\": gin.H{\n\t\t\t\t\"name\":  form.Name,\n\t\t\t\t\"email\": form.Email,\n\t\t\t},\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests for inventory operations, specifically for trying inventory items. The server should parse JSON input, process the inventory try operation, and return appropriate JSON responses.\n\nFunction Description: The main function sets up a Gin HTTP server with a single POST endpoint \"/service-c/try\" that accepts JSON inventory data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing inventory data (structure not shown in reference code but implied to have an ID field)\n- Gin context object providing request/response capabilities\n\nOutput:\n- Success case (200 status):\n  ```json\n  {\n    \"success\": true,\n    \"message\": \"inventory [ID] tried!\"\n  }\n  ```\n- Error case (400 status):\n  ```json\n  {\n    \"success\": false,\n    \"message\": \"[error description]\"\n  }\n  ```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-c/try\", func(context *gin.Context) {\n\t\tinv := &Inventory{}\n\t\terr := context.BindJSON(inv)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"inventory %d tried!\", inv.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"inventory %d tried!\", inv.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8082\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype InventoryRequest struct {\n\tID string `json:\"id\" binding:\"required\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-c/try\", func(c *gin.Context) {\n\t\tvar req InventoryRequest\n\t\tif err := c.ShouldBindJSON(&req); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": \"Invalid request body\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Process the inventory try operation (example implementation)\n\t\tif req.ID == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": \"Inventory ID is required\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Simulate successful operation\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"success\": true,\n\t\t\t\"message\": \"inventory \" + req.ID + \" tried!\",\n\t\t})\n\t})\n\n\t// Run the server\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling multipart form uploads. It processes uploaded files along with name and email form fields, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters but handles HTTP requests with the following expected inputs:\n- POST /upload requests containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - Multipart files: \"files\" (array of files)\n- GET requests for static files from the \"./public\" directory)\n\nOutput: None (The function doesn't return any value but produces the following outputs:\n- For successful uploads: HTTP 200 response with success message\n- For errors: HTTP 400 responses with error messages\n- Static file serving for requests to the root path)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.Static(\"/\", \"./public\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tif name == \"\" || email == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Missing name or email\"})\n\t\t\treturn\n\t\t}\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Error retrieving the form data\"})\n\t\t\treturn\n\t\t}\n\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tdst := \"./uploads/\" + file.Filename\n\t\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Unable to save the file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Files uploaded successfully\",\n\t\t\t\"name\":    name,\n\t\t\t\"email\":   email,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but the server configuration is hardcoded in the function)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The static file directory (\"/tmp\") and server port (\":8080\") are hardcoded in this implementation but could be made configurable through parameters in a more flexible version.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Serve static files from /tmp directory\n\tr.Static(\"/\", \"/tmp\")\n\n\t// Register a basic GET route\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, World!\")\n\t})\n\n\t// Start the server on port 8080\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle GET requests, extract request information, and return a JSON response containing the request path and IP details.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET route handler that captures the request path and IP information (including RemoteAddr, X-Forwarded-For, and X-Real-Ip headers), and returns this information as a JSON response. The server runs on a specified address.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP clients and may log errors during server startup)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nconst (\n\tAddr = \"127.0.0.1:2003\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\treq := c.Request\n\t\turlPath := fmt.Sprintf(\"http://%s%s\", Addr, req.URL.Path)\n\t\trealIP := fmt.Sprintf(\"RemoteAddr=%s,X-Forwarded-For=%v,X-Real-Ip=%v\", req.RemoteAddr, req.Header.Get(\"X-Forwarded-For\"), req.Header.Get(\"X-Real-Ip\"))\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": urlPath,\n\t\t\t\"ip\":   realIP,\n\t\t})\n\t})\n\n\tif err := r.Run(Addr); err != nil {\n\t\tlog.Printf(\"Error: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.GET(\"/*path\", func(c *gin.Context) {\n\t\tpath := c.Param(\"path\")\n\t\tclientIP := c.ClientIP()\n\t\txForwardedFor := c.Request.Header.Get(\"X-Forwarded-For\")\n\t\txRealIP := c.Request.Header.Get(\"X-Real-Ip\")\n\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\":            path,\n\t\t\t\"remote_addr\":     c.Request.RemoteAddr,\n\t\t\t\"x_forwarded_for\": xForwardedFor,\n\t\t\t\"x_real_ip\":       xRealIP,\n\t\t\t\"client_ip\":       clientIP,\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic string response.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler for the \"/ping\" endpoint, and starts the server on the default port (8080). When a GET request is made to \"/ping\", it responds with the string \"pong\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything; it starts an HTTP server that runs until interrupted)",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Go function that implements an HTTP server using the Gin framework, which includes session management using Redis for storing and incrementing a counter value.\n\nFunction Description: The function sets up a Gin web server with Redis-based session management. It provides a single endpoint \"/incr\" that increments a counter stored in the session and returns the current count in JSON format. The server runs on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP requests and runs the web server indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"net/http\"\n)\n\nfunc setupRedis() *redis.Client {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t})\n\treturn client\n}\n\nfunc StartServer() {\n\tr := gin.Default()\n\tredisClient := setupRedis()\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsessionID, err := c.Cookie(\"session_id\")\n\t\tif err != nil {\n\t\t\tsessionID = generateSessionID()\n\t\t\tc.SetCookie(\"session_id\", sessionID, 3600, \"/\", \"\", false, true)\n\t\t}\n\n\t\tcountStr, _ := redisClient.Get(c.Request.Context(), sessionID).Result()\n\t\tvar count int\n\t\tif countStr == \"\" {\n\t\t\tcount = 1\n\t\t} else {\n\t\t\tcount = 1 + parseInt(countStr)\n\t\t}\n\n\t\tredisClient.Set(c.Request.Context(), sessionID, count, 0)\n\n\t\tc.JSON(http.StatusOK, gin.H{\"count\": count})\n\t})\n\n\tr.Run(\":8000\")\n}\n\nfunc generateSessionID() string {\n\treturn \"unique_session_id\" // Simplified for example; use a proper generator in production\n}\n\nfunc parseInt(s string) int {\n\tvar i int\n\tfor _, ch := range s {\n\t\ti = i*10 + int(ch-'0')\n\t}\n\treturn i\n}"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles multiple API routes with different authentication requirements and groups related endpoints together.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), organizes routes into logical groups with different authentication requirements, and starts the server. It demonstrates route grouping, middleware chaining, and modular route registration.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for incoming requests)\n\nNote: The actual route handlers are expected to be implemented in separate packages (users, articles) and registered through their respective Register functions. The server runs indefinitely until interrupted.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tv1 := r.Group(\"/api\")\n\tusers.UsersRegister(v1.Group(\"/users\"))\n\tv1.Use(users.AuthMiddleware(false))\n\tarticles.ArticlesAnonymousRegister(v1.Group(\"/articles\"))\n\tarticles.TagsAnonymousRegister(v1.Group(\"/tags\"))\n\n\tv1.Use(users.AuthMiddleware(true))\n\tusers.UserRegister(v1.Group(\"/user\"))\n\tusers.ProfileRegister(v1.Group(\"/profiles\"))\n\n\tarticles.ArticlesRegister(v1.Group(\"/articles\"))\n\n\ttestAuth := r.Group(\"/api/ping\")\n\n\ttestAuth.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Public routes\n\tpublic := r.Group(\"/api/public\")\n\t{\n\t\tpublic.GET(\"/health\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"status\": \"ok\"})\n\t\t})\n\t}\n\n\t// Authenticated routes (common middleware)\n\tauth := r.Group(\"/api/auth\")\n\t{\n\t\tauth.Use(AuthMiddleware())\n\t\tauth.GET(\"/profile\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"Authenticated user profile\"})\n\t\t})\n\t}\n\n\t// User-related routes (with their own middleware and handlers)\n\tuserGroup := r.Group(\"/api/users\")\n\tuserGroup.Use(AuthMiddleware())\n\t{\n\t\tuserGroup.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"List all users\"})\n\t\t})\n\t\tuserGroup.POST(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(201, gin.H{\"message\": \"Create a new user\"})\n\t\t})\n\t}\n\n\t// Article-related routes (with different middleware if needed)\n\tarticleGroup := r.Group(\"/api/articles\")\n\tarticleGroup.Use(AuthMiddleware(), RateLimitMiddleware())\n\t{\n\t\tarticleGroup.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"List all articles\"})\n\t\t})\n\t\tarticleGroup.POST(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(201, gin.H{\"message\": \"Create a new article\"})\n\t\t})\n\t}\n\n\t// Start the server\n\tr.Run(\":8080\")\n}\n\n// AuthMiddleware is a placeholder for authentication logic\nfunc AuthMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// In a real application, this would validate tokens, sessions, etc.\n\t\tc.Next()\n\t}\n}\n\n// RateLimitMiddleware is a placeholder for rate limiting logic\nfunc RateLimitMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// In a real application, this would enforce rate limits\n\t\tc.Next()\n\t}\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses to clients and runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(gin.Recovery())\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong %d\", gin.Now().Unix())\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Go function that sets up a Gin-based HTTP server with specific API endpoints for handling web information requests. The function should initialize the server, define route handlers, and process incoming requests to return appropriate JSON responses.\n\nFunction Description: The `api` function initializes a Gin HTTP server with default middleware (Logger and Recovery). It defines two main routes: a root endpoint (\"/\") that returns a simple status message, and an API group (\"/api\") with endpoints for handling web information requests (\"/info\" for both GET and POST methods). The function processes incoming requests, validates input, executes business logic through `RunJob`, and returns structured JSON responses.\n\nInput:\n- `options` (*common.ENOptions): A pointer to an options structure containing configuration parameters for the application. This parameter is used to pass various settings to the business logic processing.\n\nOutput:\n- None (direct output via HTTP responses)\n- The function starts an HTTP server that listens on port 31000 and handles incoming requests\n- Returns error if server fails to start (logged via gologger)\n\nThe function does not explicitly return any values but sends HTTP responses in JSON format with the following possible structures:\n1. Success response (200 status code):\n```json\n{\n  \"code\": 200,\n  \"message\": \"ok\",\n  \"data\": [result_data]\n}\n```\n2. Error responses (400/500 status codes):\n```json\n{\n  \"code\": [error_code],\n  \"message\": \"[error_message]\"\n}\n```",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/wgpsec/ENScan/common\"\n\t\"github.com/wgpsec/ENScan/common/gologger\"\n)\nfunc api(options *common.ENOptions) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"OK\",\n\t\t})\n\t})\n\twebInfo := func(c *gin.Context) {\n\t\tvar w webOp\n\t\terr := c.ShouldBind(&w)\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\n\t\t\t\t\"code\":    500,\n\t\t\t\t\"message\": \"\u6570\u636e\u7ed1\u5b9a\u5f02\u5e38\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.OrgName == \"\" {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"code\":    400,\n\t\t\t\t\"message\": \"\u8bf7\u8f93\u5165\u67e5\u8be2\u6761\u4ef6\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.Branch {\n\t\t\toptions.IsGetBranch = true\n\t\t}\n\t\toptions.KeyWord = w.OrgName\n\t\toptions.GetFlags = w.Filed\n\t\toptions.ScanType = w.ScanType\n\t\toptions.InvestNum = w.Invest\n\t\toptions.IsSupplier = w.Supplier\n\t\toptions.IsHold = w.Holds\n\t\toptions.Deep = w.Depth\n\t\toptions.IsMergeOut = true\n\t\tcommon.Parse(options)\n\t\tdata := RunJob(options)\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"ok\",\n\t\t\t\"data\":    data,\n\t\t})\n\t}\n\ta := r.Group(\"/api\")\n\t{\n\t\ta.GET(\"/info\", webInfo)\n\t\ta.POST(\"/info\", webInfo)\n\t}\n\terr := r.Run(\":31000\")\n\tif err != nil {\n\t\tgologger.Error().Msgf(\"API\u670d\u52a1\u542f\u52a8\u5931\u8d25\uff01\")\n\t\tgologger.Fatal().Msgf(err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype Response struct {\n\tCode    int         `json:\"code\"`\n\tMessage string      `json:\"message\"`\n\tData    interface{} `json:\"data,omitempty\"`\n}\n\nfunc api(options *common.ENOptions) {\n\tr := gin.Default()\n\t\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, Response{\n\t\t\tCode:    200,\n\t\t\tMessage: \"ok\",\n\t\t})\n\t})\n\n\tapiGroup := r.Group(\"/api\")\n\t{\n\t\tapiGroup.GET(\"/info\", func(c *gin.Context) {\n\t\t\thandleWebInfoRequest(c, options)\n\t\t})\n\t\tapiGroup.POST(\"/info\", func(c *gin.Context) {\n\t\t\thandleWebInfoRequest(c, options)\n\t\t})\n\t}\n\n\tif err := r.Run(\":31000\"); err != nil {\n\t\tgologger.Error().Msgf(\"Failed to start server: %v\", err)\n\t}\n}\n\nfunc handleWebInfoRequest(c *gin.Context, options *common.ENOptions) {\n\tvar input map[string]interface{}\n\tif c.Request.Method == \"POST\" {\n\t\tif err := c.ShouldBindJSON(&input); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, Response{\n\t\t\t\tCode:    400,\n\t\t\t\tMessage: \"Invalid request body\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n\n\tresult, err := RunJob(input, options)\n\tif err != nil {\n\t\tc.JSON(http.StatusInternalServerError, Response{\n\t\t\tCode:    500,\n\t\t\tMessage: err.Error(),\n\t\t})\n\t\treturn\n\t}\n\n\tc.JSON(http.StatusOK, Response{\n\t\tCode:    200,\n\t\tMessage: \"ok\",\n\t\tData:    result,\n\t})\n}"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Go function that sets up a basic HTTP server using the Gin framework, with routes for login and home pages, including cookie handling for authentication.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), defines two routes (/login and /home), and starts the server on port 8080. The /login route sets a cookie, while the /home route requires cookie authentication through middleware and returns JSON data.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens indefinitely)\n\nNote: The CookieTool() middleware referenced in the home route would need to be defined separately to verify the cookie set by the login route.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\troute := gin.Default()\n\n\troute.GET(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"label\", \"ok\", 30, \"/\", \"localhost\", false, true)\n\t\tc.String(200, \"Login success!\")\n\t})\n\n\troute.GET(\"/home\", CookieTool(), func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"data\": \"Your home page\"})\n\t})\n\n\troute.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\n\tr.POST(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"auth_token\", \"valid\", 3600, \"/\", \"localhost\", false, true)\n\t\tc.JSON(200, gin.H{\"message\": \"Logged in\"})\n\t})\n\n\tr.GET(\"/home\", CookieTool(), func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"data\": \"Protected resource\"})\n\t})\n\n\tr.Run(\":8080\")\n}\n\nfunc CookieTool() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tcookie, err := c.Cookie(\"auth_token\")\n\t\tif err != nil || cookie != \"valid\" {\n\t\t\tc.AbortWithStatusJSON(401, gin.H{\"error\": \"Unauthorized\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint. The endpoint should accept a name parameter, make a gRPC call to a Greeter service, and return the response as JSON. The function should handle both successful responses and errors from the gRPC call.\n\nFunction Description: The function initializes a Gin router with default middleware, establishes a gRPC connection to a Greeter service, and defines a GET endpoint at \"/rest/n/:name\". When called, the endpoint extracts the name parameter, makes a gRPC call to the Greeter service, and returns either the greeting message or an error in JSON format. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters but relies on incoming HTTP requests to the defined endpoint)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/gin-gonic/examples/grpc/example1/gen/helloworld/v1\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := v1.NewGreeterClient(conn)\n\n\tr := gin.Default()\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\n\t\treq := &v1.HelloRequest{Name: name}\n\t\tres, err := client.SayHello(c, req)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"result\": fmt.Sprint(res.Message),\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"could not run server: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"net/http\"\n\tpb \"path/to/your/protobuf/package\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\n\t\treq := &pb.HelloRequest{Name: name}\n\t\tresp, err := client.SayHello(c, req)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": resp.Message})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles user management with versioned API endpoints and authentication middleware.\n\nFunction Description: The main function initializes a Gin router with versioned API endpoints (/v1 and /v2) for user management. Each version has public GET endpoints and protected POST endpoints that require authentication through middleware.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8081)\n\nMethods:\n\nAuthMiddleWare: () -> gin.HandlerFunc - Returns a Gin middleware function that handles authentication for protected routes\nAddV1User: (*gin.Context) -> None - Handles POST requests to add users for API version 1\nAddV2User: (*gin.Context) -> None - Handles POST requests to add users for API version 2",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tapiV1 := router.Group(\"/v1\")\n\n\tapiV1.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V1 Users\")\n\t})\n\n\tauthV1 := apiV1.Group(\"/\", AuthMiddleWare())\n\n\tauthV1.POST(\"users/add\", AddV1User)\n\n\tapiV2 := router.Group(\"/v2\")\n\n\tapiV2.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V2 Users\")\n\t})\n\n\tauthV2 := apiV2.Group(\"/\", AuthMiddleWare())\n\n\tauthV2.POST(\"users/add\", AddV2User)\n\n\t_ = router.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc AuthMiddleWare() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\ttoken := c.GetHeader(\"Authorization\")\n\t\tif token == \"valid-token\" {\n\t\t\tc.Next()\n\t\t} else {\n\t\t\tc.AbortWithStatusJSON(401, gin.H{\"error\": \"unauthorized\"})\n\t\t}\n\t}\n}\n\nfunc AddV1User(c *gin.Context) {\n\tc.JSON(200, gin.H{\"message\": \"v1 user added\"})\n}\n\nfunc AddV2User(c *gin.Context) {\n\tc.JSON(200, gin.H{\"message\": \"v2 user added\"})\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tv1 := r.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/users\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"get v1 users\"})\n\t\t})\n\t\tv1.POST(\"/users\", AuthMiddleWare(), AddV1User)\n\t}\n\n\tv2 := r.Group(\"/v2\")\n\t{\n\t\tv2.GET(\"/users\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"get v2 users\"})\n\t\t})\n\t\tv2.POST(\"/users\", AuthMiddleWare(), AddV2User)\n\t}\n\n\tr.Run(\":8081\")\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that returns a \"pong\" message with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\ttimestamp := time.Now().Unix()\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\":    \"pong\",\n\t\t\t\"timestamp\":  timestamp,\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a JSON message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at \"/api/hello\" that returns a JSON response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/api/hello\" endpoint)\n\nOutput: \n- When successful: The server runs indefinitely, listening on port 8080\n- When failing: An error message is printed if the server fails to start\n- HTTP Response: For GET requests to \"/api/hello\", returns a JSON response with status 200 OK: {\"message\": \"Hello, HTTP!\"}",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\n\terr := router.Run(\":8080\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"Hello, HTTP!\",\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a Go struct that provides HTTP client functionality for making GET and POST requests with custom headers and query parameters.\n\nStruct Description: The `request` struct encapsulates HTTP client operations, providing methods to perform GET and POST requests with support for custom headers and query parameters. It handles URL construction, request execution, and response processing.\n\nFields:\n[Note: The reference implementation doesn't show any struct fields, as it's a stateless utility struct]\n\nMethods:\n\nMethod1: HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP GET request to the specified URL with the given query parameters and headers. Returns the response body as bytes, status code, and any error.\n\nMethod2: HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP POST request to the specified URL with the given form data (as query parameters) and headers. Returns the response body as bytes, status code, and any error.\n\nMethod3: QueryBuilder(queryUrl string, queryValues map[string]string) -> string - Helper method that constructs a URL with query parameters from the given base URL and parameter map. Handles URL encoding of parameters.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar Request = NewRequest()\n\ntype request struct {\n}\n\nfunc NewRequest() *request {\n\treturn &request{}\n}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\treq, err := http.NewRequest(\"GET\", r.QueryBuilder(queryUrl, queryValues), nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\n\treq, err := http.NewRequest(\"POST\", queryUrl, strings.NewReader(queryString))\n\tif err != nil {\n\t\treturn\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\tqueryUrl += queryString\n\n\treturn queryUrl\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\ntype request struct{}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\tclient := &http.Client{\n\t\tTimeout: 10 * time.Second,\n\t\tTransport: &http.Transport{\n\t\t\tDialContext: (&net.Dialer{\n\t\t\t\tTimeout:   30 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).DialContext,\n\t\t\tTLSHandshakeTimeout:   10 * time.Second,\n\t\t\tResponseHeaderTimeout: 10 * time.Second,\n\t\t\tExpectContinueTimeout: 1 * time.Second,\n\t\t},\n\t}\n\n\treqUrl := r.QueryBuilder(queryUrl, queryValues)\n\n\treq, err := http.NewRequest(\"GET\", reqUrl, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tfor key, value := range headerValues {\n\t\treq.Header.Set(key, value)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, resp.StatusCode, err\n\t}\n\n\treturn body, resp.StatusCode, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\tclient := &http.Client{\n\t\tTimeout: 10 * time.Second,\n\t\tTransport: &http.Transport{\n\t\t\tDialContext: (&net.Dialer{\n\t\t\t\tTimeout:   30 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).DialContext,\n\t\t\tTLSHandshakeTimeout:   10 * time.Second,\n\t\t\tResponseHeaderTimeout: 10 * time.Second,\n\t\t\tExpectContinueTimeout: 1 * time.Second,\n\t\t},\n\t}\n\n\tformData := url.Values{}\n\tfor k, v := range queryValues {\n\t\tformData.Add(k, v)\n\t}\n\n\treqUrl := queryUrl\n\tbodyReader := bytes.NewBufferString(formData.Encode())\n\n\treq, err := http.NewRequest(\"POST\", reqUrl, bodyReader)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\n\tfor key, value := range headerValues {\n\t\treq.Header.Set(key, value)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponseBody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, resp.StatusCode, err\n\t}\n\n\treturn responseBody, resp.StatusCode, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tu, _ := url.Parse(queryUrl)\n\tq := u.Query()\n\n\tfor key, value := range queryValues {\n\t\tq.Set(key, value)\n\t}\n\n\tu.RawQuery = q.Encode()\n\treturn u.String()\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and the message \"pong [current_unix_timestamp]\" when the \"/ping\" endpoint is accessed)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\ttimestamp := time.Now().Unix()\n\t\tc.String(200, \"pong %d\", timestamp)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Implement a streaming HTTP server endpoint using Gin in Go that sends chunked data responses to clients.\n\nFunction Description: The function sets up a Gin HTTP server with a single endpoint (\"/stream\") that streams data to the client in real-time using chunked transfer encoding. It demonstrates how to implement server-sent events or real-time data streaming in Go.\n\nInput: None (The function takes no direct input parameters as it's the main server setup function)\n\nOutput: None (The function doesn't return anything but sets up a running HTTP server that outputs streaming data to connected clients)\n\n---\n\nFor completeness, here's the alternative struct-level format (though the reference code is function-level):\n\nTask Description: Create a struct that encapsulates a streaming HTTP server using Gin framework in Go.\n\nStruct Description: The StreamServer struct represents a configurable HTTP server capable of streaming data to clients.\n\nFields:\n- router: *gin.Engine - The Gin router instance\n- port: string - The port number to listen on\n- streamData: chan string - Channel for streaming data to clients\n\nMethods:\n- NewStreamServer(port string) *StreamServer - Constructor that initializes a new StreamServer instance\n- SetupRoutes() - Configures all HTTP routes and handlers\n- GenerateStreamData() - Generates sample data for streaming\n- Start() error - Starts the HTTP server\n- Stop() - Gracefully shuts down the server",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Header(\"Content-Type\", \"text/plain\")\n\t\tc.Header(\"Transfer-Encoding\", \"chunked\")\n\n\t\tdataStream := make(chan string)\n\n\t\tgo func() {\n\t\t\tdefer close(dataStream)\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tdataStream <- fmt.Sprintf(\"Data %d\\n\", i)\n\t\t\t}\n\t\t}()\n\n\t\tfor data := range dataStream {\n\t\t\t_, _ = io.WriteString(c.Writer, data)\n\t\t\tc.Writer.Flush()\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Header(\"Content-Type\", \"text/event-stream\")\n\t\tc.Header(\"Cache-Control\", \"no-cache\")\n\t\tc.Header(\"Connection\", \"keep-alive\")\n\n\t\tflusher, ok := c.Writer.(http.Flusher)\n\t\tif !ok {\n\t\t\tc.AbortWithStatusJSON(500, gin.H{\"error\": \"Streaming unsupported\"})\n\t\t\treturn\n\t\t}\n\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tfmt.Fprintf(c.Writer, \"data: Message %d\\n\\n\", i+1)\n\t\t\tflusher.Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t}\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc runServer() {\n\tr := gin.Default()\n\n\tfs := http.FS(http.Dir(\"static\"))\n\tr.StaticFS(\"/static\", fs)\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, saving the uploaded file to the local filesystem and returning a success message.\n\nFunction Description: The function initializes a Gin router with default middleware, sets up a static file server, and defines a POST endpoint for file uploads. It handles multipart form data containing a file and additional fields (name and email), saves the file to disk, and returns a confirmation message.\n\nInput: \n- None (the function takes no direct input parameters; inputs come via HTTP requests)\n\nOutput:\n- None (the function doesn't return anything; it starts an HTTP server that runs indefinitely)\n\nNote: The function expects HTTP POST requests to the \"/upload\" endpoint with multipart form data containing:\n1. A file (form field name \"file\")\n2. Text fields \"name\" and \"email\"",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, _ := c.FormFile(\"file\")\n\t\tsrc, _ := file.Open()\n\t\tdefer src.Close()\n\n\t\tdst, _ := os.Create(file.Filename)\n\t\tdefer dst.Close()\n\n\t\tio.Copy(dst, src)\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc setupFileUploadServer() {\n\tr := gin.Default()\n\tr.Static(\"/\", \"./views\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.String(400, \"Error retrieving the file\")\n\t\t\treturn\n\t\t}\n\n\t\terr = c.SaveUploadedFile(file, \"./\"+file.Filename)\n\t\tif err != nil {\n\t\t\tc.String(500, \"Unable to save the file\")\n\t\t\treturn\n\t\t}\n\n\t\tc.String(200, \"File %s uploaded successfully by %s (%s)\", file.Filename, name, email)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server that sends responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\ttimestamp := time.Now().Unix()\n\t\tc.String(200, \"pong%d\", timestamp)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session cookie.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/cookie\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore := cookie.NewStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"my_session\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := session.Get(\"count\")\n\t\tvar cnt int\n\t\tif count == nil {\n\t\t\tcnt = 0\n\t\t} else {\n\t\t\tcnt = count.(int)\n\t\t}\n\t\tcnt++\n\t\tsession.Set(\"count\", cnt)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": cnt})\n\t})\n\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/cookie\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore := cookie.NewStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := session.Get(\"count\")\n\t\tvar cnt int\n\t\tif count == nil {\n\t\t\tcnt = 0\n\t\t} else {\n\t\t\tcnt = count.(int)\n\t\t}\n\t\tcnt++\n\t\tsession.Set(\"count\", cnt)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": cnt})\n\t})\n\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Go function that sets up a simple HTTP server using the Gin framework to retrieve and return the client's IP address.\n\nFunction Description: The function initializes a Gin HTTP server with default middleware (Logger and Recovery), registers a GET endpoint \"/getip\" that retrieves the client's IP address from the request context, and returns it as a JSON response. The server listens on port 8080.\n\nInput: None (The function takes no input parameters)\n\nOutput: None (The function does not return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip := c.ClientIP()\n\t\tc.JSON(http.StatusOK, gin.H{\"ip\": ip})\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tclientIP := c.ClientIP()\n\t\tc.JSON(200, gin.H{\n\t\t\t\"ip\": clientIP,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Implement a JWT-based authentication service using Gin framework in Go, which provides public endpoints for token generation and private endpoints that require valid JWT tokens for access.\n\nFunction Description: The main function sets up a Gin HTTP server with JWT authentication. It creates two route groups: a public group for token generation and a private group that requires JWT authentication. The public endpoint generates JWT tokens, while the private endpoint demonstrates protected access.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests with the following possible inputs:\n- GET request to \"/api/\" for token generation\n- GET request to \"/api/private/\" for accessing protected content)\n\nOutput: HTTP responses with the following possible outputs:\n- For \"/api/\": JSON response containing a JWT token or error message\n- For \"/api/private/\": JSON response with protected content or authentication error\n- The server runs continuously on localhost:8080",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar jwtKey = []byte(\"my_secret_key\")\n\ntype Claims struct {\n\tjwt.RegisteredClaims\n}\n\nfunc generateToken() (string, error) {\n\texpirationTime := time.Now().Add(5 * time.Minute)\n\tclaims := &Claims{\n\t\tRegisteredClaims: jwt.RegisteredClaims{\n\t\t\tExpiresAt: jwt.NewNumericDate(expirationTime),\n\t\t\tIssuedAt:  jwt.NewNumericDate(time.Now()),\n\t\t\tNotBefore: jwt.NewNumericDate(time.Now()),\n\t\t},\n\t}\n\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\treturn token.SignedString(jwtKey)\n}\n\nfunc validateToken(tokenString string) bool {\n\tclaims := &Claims{}\n\n\ttoken, err := jwt.ParseWithClaims(tokenString, claims, func(token *jwt.Token) (interface{}, error) {\n\t\treturn jwtKey, nil\n\t})\n\n\tif err != nil || !token.Valid {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tapi := r.Group(\"/api\")\n\t{\n\t\tapi.GET(\"/\", func(c *gin.Context) {\n\t\t\ttoken, err := generateToken()\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Could not generate token\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.JSON(http.StatusOK, gin.H{\"token\": token})\n\t\t})\n\t}\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(func(c *gin.Context) {\n\t\ttokenHeader := c.GetHeader(\"Authorization\")\n\t\tif tokenHeader == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization header\"})\n\t\t\treturn\n\t\t}\n\n\t\tvalid := validateToken(tokenHeader)\n\t\tif !valid {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\treturn\n\t\t}\n\t})\n\n\t{\n\t\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"This is a protected route\"})\n\t\t})\n\t}\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS web server using the Gin framework, serving a welcome page at the \"/welcome\" endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up HTML templates, registers a GET handler for the \"/welcome\" endpoint that returns an HTML response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput:\n- port (string): The port number to listen on, e.g., \":8080\"\n- certFile (string): Path to the TLS certificate file, e.g., \"./testdata/server.pem\"\n- keyFile (string): Path to the TLS private key file, e.g., \"./testdata/server.key\"\n- html (template.Template): HTML template to be used for responses\n\nOutput: None (the function runs indefinitely as a web server)\n\nNote: The function includes a warning about not using embedded certificates in production environments.",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tlogger := log.New(os.Stderr, \"\", 0)\n\tlogger.Println(\"[WARNING] DON'T USE THE EMBED CERTS FROM THIS EXAMPLE IN PRODUCTION ENVIRONMENT, GENERATE YOUR OWN!\")\n\n\tr := gin.Default()\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RunSecureWebServer(port, certFile, keyFile string, htmlTemplate *template.Template) {\n\tr := gin.Default()\n\tr.SetHTMLTemplate(htmlTemplate)\n\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"welcome.html\", gin.H{\n\t\t\t\"title\": \"Welcome Page\",\n\t\t})\n\t})\n\n\t// WARNING: For production environments, consider more robust TLS configurations and certificate management.\n\t// Avoid embedding certificates directly without secure handling mechanisms.\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests to a specific endpoint, processes JSON input, and returns appropriate JSON responses.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint \"/service-b/try\" that receives JSON account data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- None (the function takes no direct input parameters, but receives HTTP requests with JSON payloads matching the Account struct format)\n\nOutput:\n- None (the function doesn't return any value directly, but sends HTTP responses with JSON bodies containing either success or error messages)\n\nNote: The Account struct (not shown in reference code) would typically contain at least an ID field to be properly processed by this endpoint.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-b/try\", func(context *gin.Context) {\n\t\taccount := &Account{}\n\t\terr := context.BindJSON(account)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"account %d tried!\", account.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"account %d tried!\", account.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype Account struct {\n\tID   string `json:\"id\"`\n\t// other fields can be added as needed\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-b/try\", func(c *gin.Context) {\n\t\tvar acc Account\n\t\tif err := c.ShouldBindJSON(&acc); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request body\"})\n\t\t\treturn\n\t\t}\n\n\t\t// Basic validation - check if ID is present\n\t\tif acc.ID == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Account ID is required\"})\n\t\t\treturn\n\t\t}\n\n\t\t// Simulate successful processing\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\":  \"Account processed successfully\",\n\t\t\t\"account\":  acc,\n\t\t})\n\t})\n\n\t// Start the server\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements JWT-based authentication with public and private routes. The server should generate tokens for public access and validate them for private routes.\n\nFunction Description: The main function sets up a Gin server with two route groups: public routes that generate JWT tokens, and private routes that require valid JWT tokens for access. The server runs on localhost:8080.\n\nInput: None (The function takes no direct input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for requests)\n\nMethods:\n\n1. Public route handler: Handles GET requests to \"/api/\" and generates a JWT token\n   - Input: Gin context object\n   - Output: JSON response containing either the token or an error message\n\n2. Private route handler: Handles GET requests to \"/api/private/\" and requires valid JWT\n   - Input: Gin context object (with validated JWT)\n   - Output: JSON response with a private message\n\n3. Server startup: Starts the Gin server on port 8080\n   - Input: Address string (\"localhost:8080\")\n   - Output: None (blocks and serves requests)",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar jwtKey = []byte(\"my_secret_key\")\n\ntype Claims struct {\n\tjwt.RegisteredClaims\n}\n\nfunc generateToken() (string, error) {\n\texpirationTime := time.Now().Add(5 * time.Minute)\n\tclaims := &Claims{\n\t\tRegisteredClaims: jwt.RegisteredClaims{\n\t\t\tExpiresAt: jwt.NewNumericDate(expirationTime),\n\t\t\tIssuedAt:  jwt.NewNumericDate(time.Now()),\n\t\t\tIssuer:    \"localhost\",\n\t\t},\n\t}\n\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\treturn token.SignedString(jwtKey)\n}\n\nfunc validateToken(tokenStr string) bool {\n\tclaims := &Claims{}\n\ttoken, err := jwt.ParseWithClaims(tokenStr, claims, func(t *jwt.Token) (interface{}, error) {\n\t\treturn jwtKey, nil\n\t})\n\n\tif err != nil || !token.Valid {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc publicHandler(c *gin.Context) {\n\ttoken, err := generateToken()\n\tif err != nil {\n\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to generate token\"})\n\t\treturn\n\t}\n\tc.JSON(http.StatusOK, gin.H{\"token\": token})\n}\n\nfunc privateHandler(c *gin.Context) {\n\ttokenStr := c.GetHeader(\"Authorization\")\n\tif !validateToken(tokenStr) {\n\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid or missing token\"})\n\t\treturn\n\t}\n\tc.JSON(http.StatusOK, gin.H{\"message\": \"This is a private route\"})\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\t{\n\t\tpublic.GET(\"/\", publicHandler)\n\t}\n\n\tprivate := r.Group(\"/api/private\")\n\t{\n\t\tprivate.Use(func(c *gin.Context) {\n\t\t\ttokenStr := c.GetHeader(\"Authorization\")\n\t\t\tif !validateToken(tokenStr) {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid or missing token\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.Next()\n\t\t})\n\t\tprivate.GET(\"/\", privateHandler)\n\t}\n\n\tr.Run(\"localhost:8080\")\n}"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with custom template delimiters and a date formatting function, serving HTML content from a template file.\n\nFunction Description: The function initializes a Gin router with custom template delimiters \"{[{\" and \"}]}\", registers a template formatting function \"formatAsDate\", loads an HTML template file, and sets up a GET route handler that renders the template with a predefined date value. The server listens on port 8080.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Delims(\"{[{\", \"}]}\")\n\trouter.SetFuncMap(template.FuncMap{\n\t\t\"formatAsDate\": formatAsDate,\n\t})\n\trouter.LoadHTMLFiles(\"./testdata/raw.tmpl\")\n\n\trouter.GET(\"/raw\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"raw.tmpl\", gin.H{\n\t\t\t\"now\": time.Date(2017, 0o7, 0o1, 0, 0, 0, 0, time.UTC),\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc runServer() {\n\tr := gin.Default()\n\n\t// Custom template delimiters\n\tr.Delims(\"{[{\", \"}]}\")\n\n\t// Date formatting function\n\tr.SetFuncMap(template.FuncMap{\n\t\t\"formatAsDate\": func(t time.Time) string {\n\t\t\treturn t.Format(\"2006-01-02\")\n\t\t},\n\t})\n\n\t// Load HTML template\n\tr.LoadHTMLGlob(\"templates/*.html\")\n\n\t// Route handler\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.html\", gin.H{\n\t\t\t\"now\": time.Date(2023, 1, 1, 0, 0, 0, 0, time.UTC),\n\t\t})\n\t})\n\n\t// Start server\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that serves HTML templates, static files, and a favicon, with routes for the main page and a foo page.\n\nFunction Description: The main function initializes a Gin router, sets up HTML templates from embedded files, serves static files, defines route handlers for the root path (\"/\"), \"/foo\" path, and favicon, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but relies on embedded filesystem content for templates and assets)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)\n\nNote: The implementation assumes the existence of an embedded filesystem (variable 'f' of type embed.FS) containing template files in \"templates/\" and \"templates/foo/\" directories, and assets in an \"assets/\" directory.",
    "Canonical_solution": "import (\n\t\"embed\"\n\t\"html/template\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\ttempl := template.Must(template.New(\"\").ParseFS(f, \"templates/*.tmpl\", \"templates/foo/*.tmpl\"))\n\trouter.SetHTMLTemplate(templ)\n\n\trouter.StaticFS(\"/public\", http.FS(f))\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\n\trouter.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"bar.tmpl\", gin.H{\n\t\t\t\"title\": \"Foo website\",\n\t\t})\n\t})\n\n\trouter.GET(\"favicon.ico\", func(c *gin.Context) {\n\t\tfile, _ := f.ReadFile(\"assets/favicon.ico\")\n\t\tc.Data(\n\t\t\thttp.StatusOK,\n\t\t\t\"image/x-icon\",\n\t\t\tfile,\n\t\t)\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"github.com/gin-gonic/gin\"\n)\n\n//go:embed templates/*\n//go:embed templates/foo/*\n//go:embed assets/*\nvar f embed.FS\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.StaticFS(\"/assets\", gin.Dir(\"assets\", false))\n\tr.LoadHTMLGlob(\"templates/**/*.html\")\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(200, \"main.html\", nil)\n\t})\n\n\tr.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(200, \"foo/index.html\", nil)\n\t})\n\n\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\tc.FileFromFS(\"favicon.ico\", gin.Dir(\"assets\", false))\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a specified directory.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), serves static files from a \"./public\" directory, and handles POST requests to \"/upload\" endpoint for file uploads with additional form fields (name and email). It processes the uploaded files and form data, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it starts an HTTP server on port 8080 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tsrc, _ := file.Open()\n\t\t\tdefer src.Close()\n\n\t\t\tdst, _ := os.Create(file.Filename)\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.Static(\"/\", \"./public\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"Error retrieving the file\")\n\t\t\treturn\n\t\t}\n\n\t\tdst := \"./uploads/\" + file.Filename\n\t\tc.SaveUploadedFile(file, dst)\n\n\t\tc.String(http.StatusOK, \"Name: %s, Email: %s, File %s uploaded successfully\", name, email, file.Filename)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, serving static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling file uploads with additional form fields. It validates the upload, saves the file, and returns a success message with the form data.\n\nInput: None (The function takes no direct input parameters but processes HTTP requests with the following expected form data:\n- \"name\": string - Name field from the form\n- \"email\": string - Email field from the form\n- \"file\": file - File to be uploaded)\n\nOutput: None (The function doesn't return any value but sends HTTP responses:\n- Success: HTTP 200 with upload confirmation message\n- Error: HTTP 400 with error message for invalid requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tfilename := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, \"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.Static(\"/public\", \"./public\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"file upload failed: \" + err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tif name == \"\" || email == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"name and email are required\"})\n\t\t\treturn\n\t\t}\n\n\t\tdst := \"./uploads/\" + file.Filename\n\t\tc.SaveUploadedFile(file, dst)\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Upload successful\",\n\t\t\t\"name\":    name,\n\t\t\t\"email\":   email,\n\t\t\t\"file\":    file.Filename,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves a static favicon file and responds to a GET request with a text message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), serves a static favicon file, registers a GET route handler, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but sends responses to HTTP requests and runs the server indefinitely)\n\nNote: The instruction is for function-level code as the reference code shows a main function implementation rather than a struct/class implementation.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tapp := gin.Default()\n\n\tapp.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\n\tapp.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello favicon.\")\n\t})\n\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, this is a text message response!\")\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using the Gin web framework, which responds to GET requests at the root path with a JSON message.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a GET route handler for the root path (\"/\") that returns a JSON response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput: \n- port (string): The port number on which the server should listen, prefixed with \":\" (e.g., \":5002\")\n- certFile (string): Path to the TLS certificate file (e.g., \"manager.crt\")\n- keyFile (string): Path to the TLS private key file (e.g., \"manager.key\")\n\nOutput: None (The function runs an infinite loop to serve HTTP requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\ts := gin.Default()\n\ts.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"passed\"})\n\t})\n\ts.RunTLS(\":5002\", \"manager.crt\", \"manager.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc runSecureServer(port, certFile, keyFile string) {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"Hello from secure server!\",\n\t\t})\n\t})\n\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Go function that initializes and configures a Gin HTTP server with New Relic monitoring middleware, and defines a simple route handler.\n\nFunction Description: The function sets up a basic Gin web server with default middleware (Logger and Recovery), configures New Relic monitoring if environment variables are present, and registers a root route handler that returns \"Hello World!\". The server runs on the default port (8080).\n\nInput: None (uses environment variables APP_NAME and NEW_RELIC_API_KEY for optional New Relic configuration)\n\nOutput: None (starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tcfg := newrelic.NewConfig(os.Getenv(\"APP_NAME\"), os.Getenv(\"NEW_RELIC_API_KEY\"))\n\tapp, err := newrelic.NewApplication(cfg)\n\tif err != nil {\n\t\tlog.Printf(\"failed to make new_relic app: %v\", err)\n\t} else {\n\t\trouter.Use(NewRelicMonitoring(app))\n\t}\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello World!\\n\")\n\t})\n\trouter.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent/v3/integrations/nrgin\"\n\t\"github.com/newrelic/go-agent/v3/newrelic\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tappName := os.Getenv(\"APP_NAME\")\n\tnewRelicKey := os.Getenv(\"NEW_RELIC_API_KEY\")\n\n\tif appName != \"\" && newRelicKey != \"\" {\n\t\tnrApp, _ := newrelic.NewApplication(\n\t\t\tnewrelic.ConfigAppName(appName),\n\t\t\tnewrelic.ConfigLicense(newRelicKey),\n\t\t\tnewrelic.ConfigDistributedTracerEnabled(true),\n\t\t)\n\t\tr.Use(nrgin.Middleware(nrApp))\n\t}\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello World!\")\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at the \"/ping\" endpoint that responds with \"pong\", and starts the server on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends \"pong\" as a response to GET requests at \"/ping\" and runs the HTTP server continuously until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- None (The function takes no parameters as it's the main entry point)\n\nOutput: \n- None (The function doesn't return but runs an HTTP server indefinitely or until fatal error)\n\nNote: The function uses autotls.Run() which automatically obtains and renews TLS certificates from Let's Encrypt for the specified domains. The server will listen on both HTTP (port 80) and HTTPS (port 443) ports.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc runSecureServer() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\terr := autotls.Run(r, \":443\", []string{\"example.com\", \"www.example.com\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that provides translation services through the DeepLX API. The server should handle GET and POST requests, implement authentication middleware, and support proxy configuration.\n\nFunction Description: The main function initializes a Gin HTTP server with CORS support, sets up routes for translation services, and starts the server on a specified port. It includes:\n1. Configuration initialization\n2. Proxy setup (if configured)\n3. Route handlers for root (/) and translation (/translate) endpoints\n4. Authentication middleware for protected routes\n5. Translation request processing and response handling\n\nInput:\n- Configuration parameters (IP, Port, Proxy, Token) from initConfig()\n- Environment variable PROXY (optional)\n- HTTP requests:\n  * GET / - Returns server information\n  * POST /translate - Accepts JSON payload with translation parameters\n\nOutput:\n- HTTP responses:\n  * For GET /: JSON response with server information\n  * For POST /translate: JSON response with translation results or error message\n- Console output: Server startup message and configuration status\n\nStruct Description: (Not applicable - the reference code is at function level)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\ttranslate \"github.com/OwO-Network/DeepLX/translate\"\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tcfg := initConfig()\n\n\tfmt.Printf(\"DeepL X has been successfully launched! Listening on %v:%v\\n\", cfg.IP, cfg.Port)\n\tfmt.Println(\"Developed by sjlleo <i@leo.moe> and missuo <me@missuo.me>.\")\n\n\tproxyURL := os.Getenv(\"PROXY\")\n\tif proxyURL == \"\" {\n\t\tproxyURL = cfg.Proxy\n\t}\n\tif proxyURL != \"\" {\n\t\tproxy, err := url.Parse(proxyURL)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to parse proxy URL: %v\", err)\n\t\t}\n\t\thttp.DefaultTransport = &http.Transport{\n\t\t\tProxy: http.ProxyURL(proxy),\n\t\t}\n\t}\n\n\tif cfg.Token != \"\" {\n\t\tfmt.Println(\"Access token is set.\")\n\t}\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tr.Use(cors.Default())\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    http.StatusOK,\n\t\t\t\"message\": \"DeepL Free API, Developed by sjlleo and missuo. Go to /translate with POST. http://github.com/OwO-Network/DeepLX\",\n\t\t})\n\t})\n\n\tr.POST(\"/translate\", authMiddleware(cfg), func(c *gin.Context) {\n\t\treq := PayloadFree{}\n\t\tc.BindJSON(&req)\n\n\t\tsourceLang := req.SourceLang\n\t\ttargetLang := req.TargetLang\n\t\ttranslateText := req.TransText\n\t\ttagHandling := req.TagHandling\n\n\t\tproxyURL := cfg.Proxy\n\n\t\tif tagHandling != \"\" && tagHandling != \"html\" && tagHandling != \"xml\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"code\":    http.StatusBadRequest,\n\t\t\t\t\"message\": \"Invalid tag_handling value. Allowed values are 'html' and 'xml'.\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tresult, err := translate.TranslateByDeepLX(sourceLang, targetLang, translateText, tagHandling, proxyURL, \"\")\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Translation failed: %s\", err)\n\t\t}\n\n\t\tif result.Code == http.StatusOK {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":         http.StatusOK,\n\t\t\t\t\"id\":           result.ID,\n\t\t\t\t\"data\":         result.Data,\n\t\t\t\t\"alternatives\": result.Alternatives,\n\t\t\t\t\"source_lang\":  result.SourceLang,\n\t\t\t\t\"target_lang\":  result.TargetLang,\n\t\t\t\t\"method\":       result.Method,\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(result.Code, gin.H{\n\t\t\t\t\"code\":    result.Code,\n\t\t\t\t\"message\": result.Message,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.Run(fmt.Sprintf(\"%v:%v\", cfg.IP, cfg.Port))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/joho/godotenv\"\n)\n\nvar (\n\tdefaultConfig = struct {\n\t\tip       string\n\t\tport     string\n\t\tproxy    string\n\t\ttoken    string\n\t\tdeeplx   string\n\t}{\n\t\tip:     \"0.0.0.0\",\n\t\tport:   \"11234\",\n\t\tproxy:  \"\",\n\t\ttoken:  \"\",\n\t\tdeeplx: \"http://127.0.0.1:1188/translate\",\n\t}\n)\n\nfunc initConfig() (string, string, string, string) {\n\terr := godotenv.Load()\n\tif err != nil {\n\t\tlog.Println(\"No .env file found\")\n\t}\n\n\tip := os.Getenv(\"IP\")\n\tport := os.Getenv(\"PORT\")\n\tproxy := os.Getenv(\"PROXY\")\n\ttoken := os.Getenv(\"TOKEN\")\n\n\tif ip == \"\" {\n\t\tip = defaultConfig.ip\n\t}\n\tif port == \"\" {\n\t\tport = defaultConfig.port\n\t}\n\tif proxy == \"\" {\n\t\tproxy = defaultConfig.proxy\n\t}\n\tif token == \"\" {\n\t\ttoken = defaultConfig.token\n\t}\n\n\treturn ip, port, proxy, token\n}\n\nfunc setupProxy(proxyURL string) func(*http.Request) (*url.URL, error) {\n\tif proxyURL == \"\" {\n\t\treturn nil\n\t}\n\treturn func(req *http.Request) (*url.URL, error) {\n\t\treturn url.Parse(proxyURL)\n\t}\n}\n\nfunc authenticate(token string) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tif token == \"\" {\n\t\t\tc.Next()\n\t\t\treturn\n\t\t}\n\n\t\tauthHeader := c.GetHeader(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"missing authorization header\"})\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.SplitN(authHeader, \" \", 2)\n\t\tif len(parts) != 2 || parts[0] != \"Bearer\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"invalid authorization format\"})\n\t\t\treturn\n\t\t}\n\n\t\tif parts[1] != token {\n\t\t\tc.AbortWithStatusJSON(http.StatusForbidden, gin.H{\"error\": \"invalid token\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t}\n}\n\nfunc translateHandler(deeplx string, proxyURL string) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tvar reqBody map[string]interface{}\n\t\tif err := c.ShouldBindJSON(&reqBody); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"invalid request body\"})\n\t\t\treturn\n\t\t}\n\n\t\treqBytes, _ := json.Marshal(reqBody)\n\t\tdeeplxReq, err := http.NewRequest(\"POST\", deeplx, bytes.NewBuffer(reqBytes))\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to create request\"})\n\t\t\treturn\n\t\t}\n\n\t\tdeeplxReq.Header.Set(\"Content-Type\", \"application/json\")\n\n\t\tclient := &http.Client{}\n\t\tif proxyURL != \"\" {\n\t\t\ttransport := &http.Transport{\n\t\t\t\tProxy: func(req *http.Request) (*url.URL, error) {\n\t\t\t\t\treturn url.Parse(proxyURL)\n\t\t\t\t},\n\t\t\t}\n\t\t\tclient = &http.Client{\n\t\t\t\tTransport: transport,\n\t\t\t}\n\t\t}\n\n\t\tresp, err := client.Do(deeplxReq)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"translation service unavailable\"})\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\trespBody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to read response\"})\n\t\t\treturn\n\t\t}\n\n\t\tvar result map[string]interface{}\n\t\tif err := json.Unmarshal(respBody, &result); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to parse response\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(resp.StatusCode, result)\n\t}\n}\n\nfunc main() {\n\tip, port, proxy, token := initConfig()\n\taddress := net.JoinHostPort(ip, port)\n\n\trouter := gin.Default()\n\n\trouter.Use(func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")\n\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t})\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"name\":    \"DeepLX Proxy Service\",\n\t\t\t\"status\":  \"active\",\n\t\t\t\"ip\":      ip,\n\t\t\t\"port\":    port,\n\t\t\t\"proxy\":   proxy != \"\",\n\t\t\t\"version\": \"1.0.0\",\n\t\t})\n\t})\n\n\tproxyFunc := setupProxy(proxy)\n\tif proxyFunc != nil {\n\t\thttp.DefaultTransport = &http.Transport{\n\t\t\tProxy: proxyFunc,\n\t\t}\n\t}\n\n\tapi := router.Group(\"/translate\")\n\tapi.Use(authenticate(token))\n\t{\n\t\tapi.POST(\"\", translateHandler(defaultConfig.deeplx, proxy))\n\t}\n\n\tlog.Printf(\"Starting server on %s://%s\", \"http\", address)\n\tlog.Printf(\"Configuration: IP=%s, Port=%s, Proxy=%v, Token=%s\",\n\t\tip, port, proxy != \"\", token != \"\")\n\n\tif err := router.Run(address); err != nil {\n\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles various routes including a ping endpoint, user lookup, and authenticated admin updates.\n\nFunction Description: The main function initializes a Gin web server with default middleware (Logger and Recovery), sets up route handlers for different HTTP methods, and starts the server on port 8080. It includes:\n1. A simple ping/pong endpoint\n2. A user lookup endpoint with path parameters\n3. An authenticated admin endpoint for updating values\n4. Basic authentication middleware for protected routes\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything, but sends HTTP responses to clients)\n\nNote: The code assumes the existence of a global DB map variable (not shown in the reference) for storing user values. The actual implementation would need to include this or an alternative storage mechanism.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tuser := c.Params.ByName(\"name\")\n\t\tvalue, ok := DB[user]\n\t\tif ok {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"value\": value})\n\t\t} else {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"status\": \"no value\"})\n\t\t}\n\t})\n\n\tauthorized := r.Group(\"/\", gin.BasicAuth(gin.Accounts{\n\t\t\"foo\":  \"bar\",\n\t\t\"manu\": \"123\",\n\t}))\n\n\tauthorized.POST(\"admin\", func(c *gin.Context) {\n\t\tuser := c.MustGet(gin.AuthUserKey).(string)\n\n\t\tvar json struct {\n\t\t\tValue string `json:\"value\" binding:\"required\"`\n\t\t}\n\n\t\tif c.Bind(&json) == nil {\n\t\t\tDB[user] = json.Value\n\t\t\tc.JSON(200, gin.H{\"status\": \"ok\"})\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar DB = map[string]string{\n\t\"user1\": \"value1\",\n\t\"user2\": \"value2\",\n}\n\nfunc setupRouter() *gin.Engine {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tvalue, ok := DB[name]\n\t\tif !ok {\n\t\t\tc.AbortWithStatusJSON(http.StatusNotFound, gin.H{\"error\": \"user not found\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\"name\": name, \"value\": value})\n\t})\n\n\tadmin := r.Group(\"/admin\")\n\tadmin.Use(func(c *gin.Context) {\n\t\tuser, pass, hasAuth := c.Request.BasicAuth()\n\t\tif !hasAuth || user != \"admin\" || pass != \"password\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"unauthorized\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t})\n\n\tadmin.POST(\"/update/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tvar json struct {\n\t\t\tValue string `json:\"value\" binding:\"required\"`\n\t\t}\n\t\tif err := c.ShouldBindJSON(&json); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tDB[name] = json.Value\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"updated\", \"name\": name, \"value\": json.Value})\n\t})\n\n\treturn r\n}\n\nfunc main() {\n\tr := setupRouter()\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a simple HTTP server in Go using the Gin framework that handles file uploads via POST requests.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint (\"/upload\") that receives and discards uploaded file data, then responds with \"ok\". The server runs on port 8888.\n\nInput: None (The function takes no direct input parameters, but receives HTTP POST requests with file data in the request body)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and body \"ok\" for successful uploads)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tbody := c.Request.Body\n\t\tio.Copy(io.Discard, body)\n\t\tc.String(http.StatusOK, \"ok\")\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t_, _, err := c.Request.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"unable to retrieve the file\"})\n\t\t\treturn\n\t\t}\n\t\tc.String(200, \"ok\")\n\t})\n\n\tr.Run(\":8888\")\n}\n\nfunc main() {\n\tsetupServer()\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Go HTTP client struct that can handle both HTTP and HTTPS requests with custom configurations, including authentication and request headers.\n\nStruct Description: The Client struct represents an HTTP client with configurable protocol, address, authentication, and transport settings. It provides methods to execute HTTP requests and handle responses.\n\nFields:\nProtocol: string - The protocol to use (http or https)\nAddr: string - The server address to connect to\nUser: string - The username for basic authentication\nPassword: string - The password for basic authentication\nc: *http.Client - The underlying HTTP client instance\n\nMethods:\nNewClient: (conf *ClientConfig) -> *Client - Creates a new Client instance with the given configuration, setting up either HTTP or HTTPS transport\nDoRequest: (method string, url string, body *bytes.Buffer) -> (*http.Response, error) - Executes an HTTP request with the given method, URL and body, adding basic auth if configured\nDo: (method string, url string, body map[string]interface{}) -> (*Response, error) - Executes a request with JSON body, parses the response and returns a structured Response object",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/juju/errors\"\n)\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\n\tc *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tc := new(Client)\n\n\tc.Addr = conf.Addr\n\tc.User = conf.User\n\tc.Password = conf.Password\n\n\tif conf.HTTPS {\n\t\tc.Protocol = \"https\"\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t\tc.c = &http.Client{Transport: tr}\n\t} else {\n\t\tc.Protocol = \"http\"\n\t\tc.c = &http.Client{}\n\t}\n\n\treturn c\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\tif len(c.User) > 0 && len(c.Password) > 0 {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tresp, err := c.c.Do(req)\n\n\treturn resp, err\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tbodyData, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tbuf := bytes.NewBuffer(bodyData)\n\tif body == nil {\n\t\tbuf = bytes.NewBuffer(nil)\n\t}\n\n\tresp, err := c.DoRequest(method, url, buf)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tdefer resp.Body.Close()\n\n\tret := new(Response)\n\tret.Code = resp.StatusCode\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tif len(data) > 0 {\n\t\terr = json.Unmarshal(data, &ret.ResponseItem)\n\t}\n\n\treturn ret, errors.Trace(err)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype ClientConfig struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\tTimeout  time.Duration\n}\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\tc        *http.Client\n}\n\ntype Response struct {\n\tStatusCode int\n\tBody       []byte\n\tHeaders    http.Header\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\ttransport := &http.Transport{\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   30 * time.Second,\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          100,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t\tTLSHandshakeTimeout:   10 * time.Second,\n\t\tExpectContinueTimeout: 1 * time.Second,\n\t}\n\n\tif conf.Protocol == \"https\" {\n\t\ttransport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n\t}\n\n\treturn &Client{\n\t\tProtocol: conf.Protocol,\n\t\tAddr:     conf.Addr,\n\t\tUser:     conf.User,\n\t\tPassword: conf.Password,\n\t\tc: &http.Client{\n\t\t\tTransport: transport,\n\t\t\tTimeout:   conf.Timeout,\n\t\t},\n\t}\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif c.User != \"\" && c.Password != \"\" {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\n\treturn c.c.Do(req)\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tvar buf *bytes.Buffer\n\tif body != nil {\n\t\tjsonBody, _ := json.Marshal(body)\n\t\tbuf = bytes.NewBuffer(jsonBody)\n\t} else {\n\t\tbuf = bytes.NewBuffer(nil)\n\t}\n\n\tresp, err := c.DoRequest(method, url, buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbodyBytes, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Response{\n\t\tStatusCode: resp.StatusCode,\n\t\tBody:       bodyBytes,\n\t\tHeaders:    resp.Header,\n\t}, nil\n}"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but configuration is hardcoded: static files are served from \"/tmp\" and the server listens on port 8080)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Static(\"/\", \"/tmp\")\n\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, World!\")\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters. HTTP requests to the \"/ping\" endpoint serve as indirect input.)\n\nOutput: None (The function doesn't return any value directly. It sends HTTP responses to clients as output.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(gin.Recovery())\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong %d\", time.Now().Unix())\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a function that implements an asynchronous Kafka producer in Go, which continuously sends messages to a specified Kafka topic at regular intervals. The function should handle both success and error cases from the producer and properly clean up resources when done.\n\nFunction Description: The function `runAsyncKafkaProducer` initializes and manages an asynchronous Kafka producer that sends alternating message types (\"login\" and \"msg\" events) to a Kafka topic every 10 seconds. It configures the producer with appropriate settings, handles success/error notifications in a separate goroutine, and ensures proper resource cleanup.\n\nInput: None (The function takes no parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function runs indefinitely until terminated, printing success/error messages to stdout)\n\nReference Code Structure:\n\n```go\nfunc runAsyncKafkaProducer() {\n    // 1. Configure Kafka producer\n    config := sarama.NewConfig()\n    config.Producer.RequiredAcks = sarama.WaitForAll\n    config.Producer.Partitioner = sarama.NewRandomPartitioner\n    config.Producer.Return.Successes = true\n    config.Producer.Return.Errors = true\n    \n    // 2. Initialize async producer\n    producer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n    if err != nil {\n        panic(err)\n    }\n    defer producer.AsyncClose()\n    \n    // 3. Start goroutine to handle producer events\n    go func() {\n        for {\n            select {\n            case success := <-producer.Successes():\n                fmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n                    success.Topic, success.Partition, success.Offset)\n            case err := <-producer.Errors():\n                fmt.Printf(\"Failed to send message: %v\\n\", err)\n            }\n        }\n    }()\n    \n    // 4. Main message sending loop\n    var messageType int = 1\n    for {\n        msg := createMessage(messageType)\n        producer.Input() <- msg\n        \n        messageType = toggleMessageType(messageType)\n        time.Sleep(10 * time.Second)\n    }\n}\n\n// Helper functions would be defined here...\n```",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tAsyncProducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer AsyncProducer.AsyncClose()\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase succ := <-AsyncProducer.Successes():\n\t\t\t\tfmt.Println(\"AsyncProducer.Successes()\", succ.Topic, succ.Offset, succ.Timestamp, succ.Partition)\n\t\t\tcase err := <-AsyncProducer.Errors():\n\t\t\t\tfmt.Println(\"AsyncProducer.Errors()\", err.Error())\n\t\t\t}\n\t\t}\n\t}()\n\tvar i = 1\n\tfor {\n\t\tMessage := &sarama.ProducerMessage{\n\t\t\tTopic:     \"msg_event\",\n\t\t\tTimestamp: time.Now(),\n\t\t}\n\t\tvar data []byte\n\t\tdate := time.Now().UnixNano() / 1e6\n\t\tif i == 1 {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"11\",\n\t\t\t\t\"uid\":         1,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"login\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 2\n\t\t} else {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"22\",\n\t\t\t\t\"uid\":         222222,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"msg\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 1\n\t\t}\n\n\t\tMessage.Value = sarama.ByteEncoder(data)\n\t\tAsyncProducer.Input() <- Message\n\t\ttime.Sleep(time.Second * 10)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/Shopify/sarama\"\n)\n\nfunc runAsyncKafkaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\n\tproducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer producer.AsyncClose()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase success := <-producer.Successes():\n\t\t\t\tif success != nil {\n\t\t\t\t\tfmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n\t\t\t\t\t\tsuccess.Topic, success.Partition, success.Offset)\n\t\t\t\t}\n\t\t\tcase err := <-producer.Errors():\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"Failed to send message: %v\\n\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tvar messageType int = 1\n\tfor {\n\t\tmsg := &sarama.ProducerMessage{\n\t\t\tTopic: \"events\",\n\t\t\tValue: sarama.StringEncoder(fmt.Sprintf(`{\"type\":\"%s\",\"timestamp\":%d}`, \n                func() string { \n                    if messageType == 1 { return \"login\" } \n                    return \"msg\" \n                }(), time.Now().Unix())),\n\t\t}\n\t\tproducer.Input() <- msg\n\n\t\tmessageType = toggleMessageType(messageType)\n\t\ttime.Sleep(10 * time.Second)\n\t}\n}\n\nfunc createMessage(msgType int) *sarama.ProducerMessage {\n\treturn &sarama.ProducerMessage{\n\t\tTopic: \"events\",\n\t\tValue: sarama.StringEncoder(fmt.Sprintf(`{\"type\":\"%s\",\"timestamp\":%d}`, \n                func() string { \n                    if msgType == 1 { return \"login\" } \n                    return \"msg\" \n                }(), time.Now().Unix())),\n\t}\n}\n\nfunc toggleMessageType(current int) int {\n\tif current == 1 {\n\t\treturn 2\n\t}\n\treturn 1\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP client in Go that establishes a connection to a server, sends a message, and handles the connection lifecycle properly.\n\nFunction Description: The function establishes a TCP connection to a specified server address, sends a predefined message (\"hello\"), and prints the number of bytes written or any error encountered. It ensures the connection is properly closed after use.\n\nInput: None (The server address is hardcoded as \"127.0.0.1:49153\" in this example)\n\nOutput: \n- On success: Prints the number of bytes written to the connection (integer)\n- On failure: Prints the error encountered during connection or writing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\tdialer := &net.Dialer{\n\t\tLocalAddr: &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(\"127.0.0.1\"),\n\t\t\tPort: 0,\n\t\t},\n\t}\n\n\tconn, err := dialer.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tt := &wrappedConn{conn}\n\tvar w io.Writer = t\n\tif n, err := w.Write([]byte(\"hello\")); err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(n)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tmessage := \"hello\"\n\tn, err := conn.Write([]byte(message))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tfmt.Println(n)\n}"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Implement a TCP client function in Go that establishes a connection to a server, sends data, and receives a response.\n\nFunction Description: The function `Tcp` handles TCP communication with a remote server. It establishes a connection, sends optional data, and reads the server's response. Errors are captured and returned in the response structure. The connection is automatically closed when the function completes.\n\nInput: \n- `ctx context.Context`: Context for managing deadlines and cancellation signals\n- `req *pb.TcpRequest`: Request object containing:\n  - `Address string`: The server address to connect to (format \"host:port\")\n  - `Data string`: Optional data to send to the server\n- `rsp *pb.TcpResponse`: Response object to populate with results\n\nOutput:\n- `error`: Returns an error if address validation fails, otherwise nil (errors during TCP operations are stored in the response)\n- Modifies `rsp` with:\n  - `Status string`: \"OK\" on success or error message\n  - `Data string`: Received data from server (if any)",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\tpb \"github.com/micro/services/ping/proto\"\n)\n\nfunc (p *Ping) Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif len(req.Address) == 0 {\n\t\treturn errors.BadRequest(\"ping.tcp\", \"missing address\")\n\t}\n\n\tc, err := net.Dial(\"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\tdefer c.Close()\n\n\tif len(req.Data) == 0 {\n\t\trsp.Status = \"OK\"\n\t\treturn nil\n\t}\n\n\tfmt.Fprint(c, req.Data)\n\n\tdata, err := bufio.NewReader(c).ReadString('\\n')\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\n\trsp.Status = \"OK\"\n\trsp.Data = data\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n)\n\nfunc Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif req == nil || req.Address == \"\" {\n\t\trsp.Status = \"Invalid request or missing address\"\n\t\treturn fmt.Errorf(\"invalid request\")\n\t}\n\n\tdialer := &net.Dialer{\n\t\tTimeout:   5 * time.Second,\n\t\tKeepAlive: 15 * time.Second,\n\t}\n\n\tconn, err := dialer.DialContext(ctx, \"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = fmt.Sprintf(\"Connection failed: %v\", err)\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\n\tif req.Data != \"\" {\n\t\t_, err = conn.Write([]byte(req.Data))\n\t\tif err != nil {\n\t\t\trsp.Status = fmt.Sprintf(\"Send failed: %v\", err)\n\t\t\treturn nil\n\t\t}\n\t}\n\n\tbuffer := make([]byte, 4096)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\tif err != io.EOF {\n\t\t\trsp.Status = fmt.Sprintf(\"Receive failed: %v\", err)\n\t\t} else {\n\t\t\trsp.Status = \"OK\"\n\t\t}\n\t} else {\n\t\trsp.Data = string(buffer[:n])\n\t\trsp.Status = \"OK\"\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a function that establishes a TCP connection to a server, reads all data from the connection, and returns the data as a string.\n\nFunction Description: The function connects to a TCP server at the specified address, reads all available data from the connection, closes the connection, and returns the received data as a string. If the connection fails, it should panic with the error.\n\nInput: \n- address (string): The server address in the format \"host:port\" (e.g., \"localhost:9000\")\n\nOutput: \n- string: The data received from the server\n- error: Returns an error if the connection or read operation fails (though in the reference code it panics on connection error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tbs, _ := ioutil.ReadAll(conn)\n\tfmt.Println(string(bs))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc readFromServer(address string) (string, error) {\n\tconn, err := net.Dial(\"tcp\", address)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to connect: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\treader := bufio.NewReader(conn)\n\tvar data []byte\n\tbuffer := make([]byte, 4096)\n\n\tfor {\n\t\tn, err := reader.Read(buffer)\n\t\tif n > 0 {\n\t\t\tdata = append(data, buffer[:n]...)\n\t\t}\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"read error: %w\", err)\n\t}\n\n\treturn string(data), nil\n}\n\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Fprintf(os.Stderr, \"Usage: %s host:port\\n\", os.Args[0])\n\t\tos.Exit(1)\n\t}\n\n\taddress := os.Args[1]\n\tresult, err := readFromServer(address)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(result)\n}"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It holds configuration information and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Pointer to configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC server for the specified realm using TCP. Returns the response or error.\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful. Returns the response or accumulated errors.\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a KDC server, including sending data and reading response. Ensures connection is closed when done.",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package kdcclient\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\n// Config holds configuration information for the client including KDC addresses\ntype Config struct {\n\tKDCAddresses map[string]map[int]string // realm -> KDC server addresses\n\tTimeout      time.Duration\n\tRetries      int\n}\n\n// Client represents a TCP client for communicating with KDC servers\ntype Client struct {\n\tConfig *Config\n}\n\n// sendKDCTCP sends data to a KDC server for the specified realm using TCP\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCAddresses[realm]\n\tif !ok || len(kdcs) == 0 {\n\t\treturn nil, errors.New(\"no KDC addresses found for realm\")\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\n// dialSendTCP attempts to connect to each KDC address in sequence until successful\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar lastErr error\n\tfor _, addr := range kdcs {\n\t\tfor i := 0; i <= c.Config.Retries; i++ {\n\t\t\tconn, err := net.DialTimeout(\"tcp\", addr, c.Config.Timeout)\n\t\t\tif err != nil {\n\t\t\t\tlastErr = err\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdefer conn.Close()\n\t\t\treturn c.sendTCP(conn.(*net.TCPConn), b)\n\t\t}\n\t}\n\treturn nil, lastErr\n}\n\n// sendTCP handles the actual TCP communication with a KDC server\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tif err := conn.SetDeadline(time.Now().Add(c.Config.Timeout)); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif _, err := conn.Write(b); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresponse := make([]byte, 4096)\n\tn, err := conn.Read(response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response[:n], nil\n}"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a TCP client in Go that establishes a connection to a server, handles data transmission, and manages connection lifecycle with proper error handling and resource cleanup.\n\nStruct Description: The `Client` struct represents a TCP client that connects to a server using a round-robin server selection strategy. It manages server connections, handles policy enforcement, and processes data transmission for both TCP and UDP protocols.\n\nFields:\n- serverPicker: [protocol.ServerPicker] - Selects servers in a round-robin fashion from available server list  \n- policyManager: [policy.Manager] - Manages connection policies including timeouts and user levels\n\nMethods:\n- NewClient: [func(ctx context.Context, config *ClientConfig) (*Client, error)] -> (*Client, error) - Creates a new Client instance with server configurations and policy manager\n- Process: [func(ctx context.Context, link *transport.Link, dialer internet.Dialer) error] -> error - Main processing method that establishes connection, handles handshake, and manages data transfer between client and server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/xtls/xray-core/common\"\n\t\"github.com/xtls/xray-core/common/buf\"\n\t\"github.com/xtls/xray-core/common/errors\"\n\t\"github.com/xtls/xray-core/common/net\"\n\t\"github.com/xtls/xray-core/common/protocol\"\n\t\"github.com/xtls/xray-core/common/retry\"\n\t\"github.com/xtls/xray-core/common/session\"\n\t\"github.com/xtls/xray-core/common/signal\"\n\t\"github.com/xtls/xray-core/common/task\"\n\t\"github.com/xtls/xray-core/core\"\n\t\"github.com/xtls/xray-core/features/policy\"\n\t\"github.com/xtls/xray-core/transport\"\n\t\"github.com/xtls/xray-core/transport/internet\"\n\t\"github.com/xtls/xray-core/transport/internet/stat\"\n)\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\tserverList := protocol.NewServerList()\n\tfor _, rec := range config.Server {\n\t\ts, err := protocol.NewServerSpecFromPB(rec)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(\"failed to get server spec\").Base(err)\n\t\t}\n\t\tserverList.AddServer(s)\n\t}\n\tif serverList.Size() == 0 {\n\t\treturn nil, errors.New(\"0 target server\")\n\t}\n\n\tv := core.MustFromContext(ctx)\n\tc := &Client{\n\t\tserverPicker:  protocol.NewRoundRobinServerPicker(serverList),\n\t\tpolicyManager: v.GetFeature(policy.ManagerType()).(policy.Manager),\n\t}\n\n\treturn c, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\toutbounds := session.OutboundsFromContext(ctx)\n\tob := outbounds[len(outbounds)-1]\n\tif !ob.Target.IsValid() {\n\t\treturn errors.New(\"target not specified.\")\n\t}\n\tob.Name = \"socks\"\n\tob.CanSpliceCopy = 2\n\tdestination := ob.Target\n\n\tvar server *protocol.ServerSpec\n\tvar dest net.Destination\n\tvar conn stat.Connection\n\n\tif err := retry.ExponentialBackoff(5, 100).On(func() error {\n\t\tserver = c.serverPicker.PickServer()\n\t\tdest = server.Destination()\n\t\trawConn, err := dialer.Dial(ctx, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconn = rawConn\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn errors.New(\"failed to find an available destination\").Base(err)\n\t}\n\n\tdefer func() {\n\t\tif err := conn.Close(); err != nil {\n\t\t\terrors.LogInfoInner(ctx, err, \"failed to closed connection\")\n\t\t}\n\t}()\n\n\tp := c.policyManager.ForLevel(0)\n\n\trequest := &protocol.RequestHeader{\n\t\tVersion: socks5Version,\n\t\tCommand: protocol.RequestCommandTCP,\n\t\tAddress: destination.Address,\n\t\tPort:    destination.Port,\n\t}\n\n\tif destination.Network == net.Network_UDP {\n\t\trequest.Command = protocol.RequestCommandUDP\n\t}\n\n\tuser := server.PickUser()\n\tif user != nil {\n\t\trequest.User = user\n\t\tp = c.policyManager.ForLevel(user.Level)\n\t}\n\n\tif err := conn.SetDeadline(time.Now().Add(p.Timeouts.Handshake)); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to set deadline for handshake\")\n\t}\n\tudpRequest, err := ClientHandshake(request, conn, conn)\n\tif err != nil {\n\t\treturn errors.New(\"failed to establish connection to server\").AtWarning().Base(err)\n\t}\n\tif udpRequest != nil {\n\t\tif udpRequest.Address == net.AnyIP || udpRequest.Address == net.AnyIPv6 {\n\t\t\tudpRequest.Address = dest.Address\n\t\t}\n\t}\n\n\tif err := conn.SetDeadline(time.Time{}); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to clear deadline after handshake\")\n\t}\n\n\tvar newCtx context.Context\n\tvar newCancel context.CancelFunc\n\tif session.TimeoutOnlyFromContext(ctx) {\n\t\tnewCtx, newCancel = context.WithCancel(context.Background())\n\t}\n\n\tctx, cancel := context.WithCancel(ctx)\n\ttimer := signal.CancelAfterInactivity(ctx, func() {\n\t\tcancel()\n\t\tif newCancel != nil {\n\t\t\tnewCancel()\n\t\t}\n\t}, p.Timeouts.ConnectionIdle)\n\n\tvar requestFunc func() error\n\tvar responseFunc func() error\n\tif request.Command == protocol.RequestCommandTCP {\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\treturn buf.Copy(link.Reader, buf.NewWriter(conn), buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treturn buf.Copy(buf.NewReader(conn), link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t} else if request.Command == protocol.RequestCommandUDP {\n\t\tudpConn, err := dialer.Dial(ctx, udpRequest.Destination())\n\t\tif err != nil {\n\t\t\treturn errors.New(\"failed to create UDP connection\").Base(err)\n\t\t}\n\t\tdefer udpConn.Close()\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\twriter := &UDPWriter{Writer: udpConn, Request: request}\n\t\t\treturn buf.Copy(link.Reader, writer, buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treader := &UDPReader{Reader: udpConn}\n\t\t\treturn buf.Copy(reader, link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t}\n\n\tif newCtx != nil {\n\t\tctx = newCtx\n\t}\n\n\tresponseDonePost := task.OnSuccess(responseFunc, task.Close(link.Writer))\n\tif err := task.Run(ctx, requestFunc, responseDonePost); err != nil {\n\t\treturn errors.New(\"connection ends\").Base(err)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/v2fly/v2ray-core/common/protocol\"\n\t\"github.com/v2fly/v2ray-core/common/policy\"\n\t\"github.com/v2fly/v2ray-core/transport\"\n\t\"github.com/v2fly/v2ray-core/transport/internet\"\n)\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\ntype ClientConfig struct {\n\t// Server list and other configurations needed for client initialization\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\t// Initialize server picker and policy manager based on config\n\treturn &Client{\n\t\tserverPicker:  nil, // Replace with actual ServerPicker implementation\n\t\tpolicyManager: nil, // Replace with actual PolicyManager implementation\n\t}, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\tif err := ctx.Err(); err != nil {\n\t\treturn err\n\t}\n\n\t// Get the selected server from round-robin selection\n\tserver, err := c.serverPicker.PickServer()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Get connection policy for this server\n\tconnPolicy := c.policyManager.ConnectionPolicy(server)\n\tif connPolicy == nil {\n\t\treturn errors.New(\"connection policy not found\")\n\t}\n\n\t// Set timeout context if required\n\tif connPolicy.Timeout > 0 {\n\t\tvar cancel context.CancelFunc\n\t\tctx, cancel = context.WithTimeout(ctx, connPolicy.Timeout)\n\t\tdefer cancel()\n\t}\n\n\t// Dial TCP connection to server\n\tconn, err := dialer.Dial(ctx, server.Address, server.Port)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\t// Handle handshake if necessary (e.g., authentication or protocol negotiation)\n\tif err := c.handshake(ctx, conn); err != nil {\n\t\treturn err\n\t}\n\n\t// Wait group to synchronize bidirectional data transfer\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\t// Copy data from inbound to outbound\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t_, err := io.Copy(conn, link.Reader)\n\t\tif err != nil && !errors.Is(err, io.EOF) {\n\t\t\tlink.Reader.CloseWithError(err)\n\t\t}\n\t}()\n\n\t// Copy data from outbound to inbound\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t_, err := io.Copy(link.Writer, conn)\n\t\tif err != nil && !errors.Is(err, io.EOF) {\n\t\t\tlink.Writer.CloseWithError(err)\n\t\t}\n\t}()\n\n\t// Wait for both directions to finish\n\tdoneChan := make(chan struct{})\n\tgo func() {\n\t\tdefer close(doneChan)\n\t\twg.Wait()\n\t}()\n\n\t// Wait until done or context is canceled\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tcase <-doneChan:\n\t\treturn nil\n\t}\n}\n\nfunc (c *Client) handshake(ctx context.Context, conn io.ReadWriteCloser) error {\n\t// Implement any handshake logic specific to your protocol\n\t// For example, send initial handshake bytes or authenticate\n\thandshakeData := []byte{0x05, 0x01, 0x00} // Example SOCKS5 handshake\n\tif _, err := conn.Write(handshakeData); err != nil {\n\t\treturn err\n\t}\n\n\t// Read response if expected\n\tresponse := make([]byte, 2)\n\tif _, err := io.ReadFull(conn, response); err != nil {\n\t\treturn err\n\t}\n\n\t// Validate response if needed\n\tif response[1] != 0x00 { // Expected success response\n\t\treturn errors.New(\"handshake failed\")\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Implement a Go struct that handles DNS queries over UDP with context support and deadline management.\n\nStruct Description: DNSEndpoint represents a DNS server endpoint capable of performing DNS queries with context support, deadline management, and transaction ID matching.\n\nFields:\nAddr: string - The address of the DNS server in \"host:port\" format\n\nMethods:\nExchange: (ctx context.Context, payload, buf []byte) -> (n int, err error) - Performs a DNS query exchange:\n  - Establishes a UDP connection to the server\n  - Sets deadline from context if available\n  - Generates random transaction ID\n  - Sends DNS query payload\n  - Reads response and validates transaction ID\n  - Returns number of bytes read or any error\n  - Automatically closes connection when done",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\td := &net.Dialer{}\n\tc, err := d.DialContext(ctx, \"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"dial: %v\", err)\n\t}\n\tdefer c.Close()\n\tif t, ok := ctx.Deadline(); ok {\n\t\t_ = c.SetDeadline(t)\n\t}\n\tif _, err := rand.Read(payload[:2]); err != nil {\n\t\treturn 0, err\n\t}\n\t_, err = c.Write(payload)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"write: %v\", err)\n\t}\n\tid := uint16(payload[0])<<8 | uint16(buf[1])\n\tfor {\n\t\tif n, err = c.Read(buf[:514]); err != nil {\n\t\t\treturn n, fmt.Errorf(\"read: %v\", err)\n\t\t}\n\t\tif n < 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif id != uint16(buf[0])<<8|uint16(buf[1]) {\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n\treturn\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package dns\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"encoding/binary\"\n\t\"net\"\n\t\"time\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\tconn, err := net.Dial(\"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer conn.Close()\n\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tif err := conn.SetDeadline(deadline); err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t} else {\n\t\tif err := conn.SetDeadline(time.Time{}); err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\n\tif len(payload) < 2 {\n\t\treturn 0, ErrInvalidPayload\n\t}\n\n\ttid := make([]byte, 2)\n\tif _, err := rand.Read(tid); err != nil {\n\t\treturn 0, err\n\t}\n\tcopy(payload[:2], tid)\n\n\tif _, err := conn.Write(payload); err != nil {\n\t\treturn 0, err\n\t}\n\n\tn, err = conn.Read(buf)\n\tif err != nil || n < 2 {\n\t\treturn n, err\n\t}\n\n\tif string(buf[:2]) != string(tid) {\n\t\treturn n, ErrTransactionIDMismatch\n\t}\n\n\treturn n, nil\n}\n\nvar (\n\tErrInvalidPayload         = &net.OpError{Op: \"write\", Net: \"dns\", Source: nil, Addr: nil, Err: errInvalidPayload}\n\tErrTransactionIDMismatch  = &net.OpError{Op: \"read\", Net: \"dns\", Source: nil, Addr: nil, Err: errTransactionIDMismatch}\n\terrInvalidPayload        = &errString{\"invalid payload\"}\n\terrTransactionIDMismatch = &errString{\"transaction ID mismatch\"}\n)\n\ntype errString struct {\n\ts string\n}\n\nfunc (e *errString) Error() string { return e.s }"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It maintains configuration and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC for the specified realm, handling multiple KDC addresses and error cases\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a single KDC connection",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package kdcclient\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\n// Config holds the client configuration including KDC addresses\ntype Config struct {\n\tKDCAddresses map[string]map[int]string // realm -> (index -> address)\n\tTimeout      time.Duration\n\tRetries      int\n}\n\n// Client represents a TCP client for communicating with KDC servers\ntype Client struct {\n\tConfig *Config\n}\n\n// sendKDCTCP sends data to a KDC for the specified realm\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCAddresses[realm]\n\tif !ok || len(kdcs) == 0 {\n\t\treturn nil, errors.New(\"no KDC addresses configured for realm\")\n\t}\n\n\tvar lastErr error\n\tfor i := 0; i <= c.Config.Retries; i++ {\n\t\tresp, err := dialSendTCP(kdcs, b)\n\t\tif err == nil {\n\t\t\treturn resp, nil\n\t\t}\n\t\tlastErr = err\n\t\ttime.Sleep(time.Second * 1) // Simple backoff\n\t}\n\treturn nil, lastErr\n}\n\n// dialSendTCP attempts to connect to each KDC address in sequence\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\taddr, ok := kdcs[i]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTCP(\"tcp\", nil, tcpAddr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tdefer conn.Close()\n\n\t\treturn sendTCP(conn, b)\n\t}\n\treturn nil, errors.New(\"failed to connect to all KDCs\")\n}\n\n// sendTCP handles TCP communication with a single KDC connection\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tconn.SetDeadline(time.Now().Add(5 * time.Second)) // Set timeout\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresponse := make([]byte, 4096)\n\tn, err := conn.Read(response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response[:n], nil\n}"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Implement a TCP client in Go that periodically sends metrics data to an OpenTSDB server, handling different types of metrics (counters, gauges, histograms, meters, and timers) with appropriate formatting.\n\nStruct Description: The OpenTSDBConfig struct contains configuration parameters for connecting to an OpenTSDB server and sending metrics data at regular intervals.\n\nFields:\nAddr: *net.TCPAddr - The TCP address of the OpenTSDB server\nRegistry: Registry - The metrics registry containing all metrics to be reported\nFlushInterval: time.Duration - The interval at which metrics are sent to the server\nDurationUnit: time.Duration - The time unit for converting timer metrics\nPrefix: string - The prefix to be added to all metric names\n\nMethods:\nOpenTSDBWithConfig: OpenTSDBWithConfig(c OpenTSDBConfig) - Starts a ticker that periodically calls openTSDB with the given configuration at the specified FlushInterval\nopenTSDB: openTSDB(c *OpenTSDBConfig) error - Establishes a TCP connection to the OpenTSDB server, formats and sends all metrics from the registry, and returns any error that occurs during the process",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\n\ntype OpenTSDBConfig struct {\n\tAddr          *net.TCPAddr\n\tRegistry      Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tfor _ = range time.Tick(c.FlushInterval) {\n\t\tif err := openTSDB(&c); nil != err {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tshortHostname := getShortHostname()\n\tnow := time.Now().Unix()\n\tdu := float64(c.DurationUnit)\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif nil != err {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\tw := bufio.NewWriter(conn)\n\tc.Registry.Each(func(name string, i interface{}) {\n\t\tswitch metric := i.(type) {\n\t\tcase Counter:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, metric.Count(), shortHostname)\n\t\tcase Gauge:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %d host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase GaugeFloat64:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %f host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase Histogram:\n\t\t\th := metric.Snapshot()\n\t\t\tps := h.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, h.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, h.Min(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, h.Max(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, h.Mean(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, h.StdDev(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4], shortHostname)\n\t\tcase Meter:\n\t\t\tm := metric.Snapshot()\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, m.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, m.RateMean(), shortHostname)\n\t\tcase Timer:\n\t\t\tt := metric.Snapshot()\n\t\t\tps := t.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, t.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, t.Min()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, t.Max()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, t.Mean()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, t.StdDev()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean-rate %d %.2f host=%s\\n\", c.Prefix, name, now, t.RateMean(), shortHostname)\n\t\t}\n\t\tw.Flush()\n\t})\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype OpenTSDBConfig struct {\n\tAddr           *net.TCPAddr\n\tRegistry       Registry\n\tFlushInterval  time.Duration\n\tDurationUnit   time.Duration\n\tPrefix         string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tticker := time.NewTicker(c.FlushInterval)\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tif err := openTSDB(&c); err != nil {\n\t\t\t\tfmt.Println(\"Failed to send metrics to OpenTSDB:\", err)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tnow := time.Now().Unix()\n\tmetrics := c.Registry.GetAll()\n\n\tvar lines []string\n\tfor name, metric := range metrics {\n\t\tfullName := name\n\t\tif c.Prefix != \"\" {\n\t\t\tfullName = c.Prefix + \".\" + name\n\t\t}\n\n\t\tswitch m := metric.(type) {\n\t\tcase Counter:\n\t\t\tlines = append(lines, fmt.Sprintf(\"put %s %d %d\", fullName, now, m.Count()))\n\t\tcase Gauge:\n\t\t\tlines = append(lines, fmt.Sprintf(\"put %s %d %d\", fullName, now, m.Value()))\n\t\tcase Histogram:\n\t\t\th := m.Snapshot()\n\t\t\tps := h.Percentiles([]float64{0.5, 0.75, 0.95, 0.99})\n\t\t\tlines = append(lines,\n\t\t\t\tfmt.Sprintf(\"put %s.count %d %d\", fullName, now, h.Count()),\n\t\t\t\tfmt.Sprintf(\"put %s.min %d %d\", fullName, now, h.Min()),\n\t\t\t\tfmt.Sprintf(\"put %s.max %d %d\", fullName, now, h.Max()),\n\t\t\t\tfmt.Sprintf(\"put %s.mean %d %.2f\", fullName, now, h.Mean()),\n\t\t\t\tfmt.Sprintf(\"put %s.std-dev %d %.2f\", fullName, now, h.StdDev()),\n\t\t\t\tfmt.Sprintf(\"put %s.50-percentile %d %.2f\", fullName, now, ps[0]),\n\t\t\t\tfmt.Sprintf(\"put %s.75-percentile %d %.2f\", fullName, now, ps[1]),\n\t\t\t\tfmt.Sprintf(\"put %s.95-percentile %d %.2f\", fullName, now, ps[2]),\n\t\t\t\tfmt.Sprintf(\"put %s.99-percentile %d %.2f\", fullName, now, ps[3]),\n\t\t\t)\n\t\tcase Meter:\n\t\t\tmeter := m.Snapshot()\n\t\t\tlines = append(lines,\n\t\t\t\tfmt.Sprintf(\"put %s.count %d %d\", fullName, now, meter.Count()),\n\t\t\t\tfmt.Sprintf(\"put %s.m1-rate %d %.2f\", fullName, now, meter.Rate1()),\n\t\t\t\tfmt.Sprintf(\"put %s.m5-rate %d %.2f\", fullName, now, meter.Rate5()),\n\t\t\t\tfmt.Sprintf(\"put %s.m15-rate %d %.2f\", fullName, now, meter.Rate15()),\n\t\t\t\tfmt.Sprintf(\"put %s.mean-rate %d %.2f\", fullName, now, meter.RateMean()),\n\t\t\t)\n\t\tcase Timer:\n\t\t\tt := m.Snapshot()\n\t\t\tps := t.Percentiles([]float64{0.5, 0.75, 0.95, 0.99})\n\t\t\tlines = append(lines,\n\t\t\t\tfmt.Sprintf(\"put %s.count %d %d\", fullName, now, t.Count()),\n\t\t\t\tfmt.Sprintf(\"put %s.min %d %d\", fullName, now, int64(t.Min()/c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.max %d %d\", fullName, now, int64(t.Max()/c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.mean %d %.2f\", fullName, now, t.Mean()/float64(c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.std-dev %d %.2f\", fullName, now, t.StdDev()/float64(c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.50-percentile %d %.2f\", fullName, now, ps[0]/float64(c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.75-percentile %d %.2f\", fullName, now, ps[1]/float64(c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.95-percentile %d %.2f\", fullName, now, ps[2]/float64(c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.99-percentile %d %.2f\", fullName, now, ps[3]/float64(c.DurationUnit)),\n\t\t\t\tfmt.Sprintf(\"put %s.m1-rate %d %.2f\", fullName, now, t.Rate1()),\n\t\t\t\tfmt.Sprintf(\"put %s.m5-rate %d %.2f\", fullName, now, t.Rate5()),\n\t\t\t\tfmt.Sprintf(\"put %s.m15-rate %d %.2f\", fullName, now, t.Rate15()),\n\t\t\t\tfmt.Sprintf(\"put %s.mean-rate %d %.2f\", fullName, now, t.RateMean()),\n\t\t\t)\n\t\t}\n\t}\n\n\tif len(lines) > 0 {\n\t\t_, err = conn.Write([]byte(strings.Join(lines, \"\\n\") + \"\\n\"))\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// Interfaces and types for metrics\ntype Registry interface {\n\tGetAll() map[string]interface{}\n}\n\ntype Counter interface {\n\tCount() int64\n}\n\ntype Gauge interface {\n\tValue() int64\n}\n\ntype Histogram interface {\n\tSnapshot() Histogram\n\tPercentiles(ps []float64) []float64\n\tCount() int64\n\tMin() int64\n\tMax() int64\n\tMean() float64\n\tStdDev() float64\n}\n\ntype Meter interface {\n\tSnapshot() Meter\n\tCount() int64\n\tRate1() float64\n\tRate5() float64\n\tRate15() float64\n\tRateMean() float64\n}\n\ntype Timer interface {\n\tSnapshot() Timer\n\tCount() int64\n\tMin() int64\n\tMax() int64\n\tMean() float64\n\tStdDev() float64\n\tPercentiles(ps []float64) []float64\n\tRate1() float64\n\tRate5() float64\n\tRate15() float64\n\tRateMean() float64\n}"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Implement a TCP client in Go that can establish connections to servers, handle TLS if required, and manage timeouts for network operations.\n\nStruct Description: The Client struct represents a configurable TCP client capable of handling both plain TCP and TLS connections, with various timeout controls and DNS message exchange functionality.\n\nFields:\n\nNet: string - Network type (e.g., \"tcp\", \"tcp-tls\", \"udp\")\nUDPSize: uint16 - UDP buffer size for DNS messages\nTLSConfig: *tls.Config - TLS configuration for secure connections\nDialer: *net.Dialer - Custom dialer for connection establishment\nTimeout: time.Duration - Overall operation timeout\nDialTimeout: time.Duration - Timeout specifically for connection establishment\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nTsigSecret: map[string]string - TSIG authentication secrets\nSingleInflight: bool - Whether to use singleflight for duplicate request suppression\ngroup: singleflight - Internal singleflight group for request deduplication\n\nMethods:\n\nDial: (address string) -> (*Conn, error) - Establishes a connection to the specified address, handling TLS if configured\nExchange: (m *Msg, address string) -> (*Msg, time.Duration, error) - Performs a complete DNS message exchange with timeout handling\nexchange: (m *Msg, a string) -> (*Msg, time.Duration, error) - Internal method for performing the actual message exchange\ngetTimeoutForRequest: (timeout time.Duration) -> time.Duration - Calculates the appropriate timeout for a request considering various configuration options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tNet       string\n\tUDPSize   uint16\n\tTLSConfig *tls.Config\n\tDialer    *net.Dialer\n\tTimeout   time.Duration\n\tDialTimeout    time.Duration\n\tReadTimeout    time.Duration\n\tWriteTimeout   time.Duration\n\tTsigSecret     map[string]string\n\tSingleInflight bool\n\tgroup          singleflight\n}\n\nfunc (c *Client) Dial(address string) (conn *Conn, err error) {\n\tvar d net.Dialer\n\tif c.Dialer == nil {\n\t\td = net.Dialer{Timeout: c.getTimeoutForRequest(c.dialTimeout())}\n\t} else {\n\t\td = *c.Dialer\n\t}\n\n\tnetwork := c.Net\n\tif network == \"\" {\n\t\tnetwork = \"udp\"\n\t}\n\n\tuseTLS := strings.HasPrefix(network, \"tcp\") && strings.HasSuffix(network, \"-tls\")\n\n\tconn = new(Conn)\n\tif useTLS {\n\t\tnetwork = strings.TrimSuffix(network, \"-tls\")\n\t\tconn.Conn, err = tls.DialWithDialer(&d, network, address, c.TLSConfig)\n\t} else {\n\t\tconn.Conn, err = d.Dial(network, address)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (r *Msg, rtt time.Duration, err error) {\n\tif !c.SingleInflight {\n\t\treturn c.exchange(m, address)\n\t}\n\n\tq := m.Question[0]\n\tkey := fmt.Sprintf(\"%s:%d:%d\", q.Name, q.Qtype, q.Qclass)\n\tr, rtt, err, shared := c.group.Do(key, func() (*Msg, time.Duration, error) {\n\t\treturn c.exchange(m, address)\n\t})\n\tif r != nil && shared {\n\t\tr = r.Copy()\n\t}\n\n\treturn r, rtt, err\n}\n\nfunc (c *Client) exchange(m *Msg, a string) (r *Msg, rtt time.Duration, err error) {\n\tvar co *Conn\n\n\tco, err = c.Dial(a)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer co.Close()\n\n\topt := m.IsEdns0()\n\tif opt != nil && opt.UDPSize() >= MinMsgSize {\n\t\tco.UDPSize = opt.UDPSize()\n\t}\n\tif opt == nil && c.UDPSize >= MinMsgSize {\n\t\tco.UDPSize = c.UDPSize\n\t}\n\n\tco.TsigSecret = c.TsigSecret\n\tt := time.Now()\n\tco.SetWriteDeadline(t.Add(c.getTimeoutForRequest(c.writeTimeout())))\n\tif err = co.WriteMsg(m); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tco.SetReadDeadline(time.Now().Add(c.getTimeoutForRequest(c.readTimeout())))\n\tr, err = co.ReadMsg()\n\tif err == nil && r.Id != m.Id {\n\t\terr = ErrId\n\t}\n\trtt = time.Since(t)\n\treturn r, rtt, err\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tvar requestTimeout time.Duration\n\tif c.Timeout != 0 {\n\t\trequestTimeout = c.Timeout\n\t} else {\n\t\trequestTimeout = timeout\n\t}\n\tif c.Dialer != nil && c.Dialer.Timeout != 0 {\n\t\tif c.Dialer.Timeout < requestTimeout {\n\t\t\trequestTimeout = c.Dialer.Timeout\n\t\t}\n\t}\n\treturn requestTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package dns\n\nimport (\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"golang.org/x/sync/singleflight\"\n)\n\ntype Client struct {\n\tNet          string\n\tUDPSize      uint16\n\tTLSConfig    *tls.Config\n\tDialer       *net.Dialer\n\tTimeout      time.Duration\n\tDialTimeout  time.Duration\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tTsigSecret   map[string]string\n\tSingleInflight bool\n\tgroup        singleflight.Group\n}\n\ntype Conn struct {\n\tnet.Conn\n\ttlsConfig *tls.Config\n}\n\nfunc (c *Client) Dial(address string) (*Conn, error) {\n\td := c.Dialer\n\tif d == nil {\n\t\td = &net.Dialer{\n\t\t\tTimeout:   c.getDialTimeout(),\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}\n\t}\n\n\tconn, err := d.Dial(c.Net, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif c.Net == \"tcp-tls\" || c.Net == \"tls\" {\n\t\ttlsConn := tls.Client(conn, c.TLSConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\tconn.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\treturn &Conn{tlsConn, c.TLSConfig}, nil\n\t}\n\n\treturn &Conn{conn, nil}, nil\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (*Msg, time.Duration, error) {\n\tif c.SingleInflight {\n\t\tkey := m.Question[0].Name + m.Question[0].Qtype.String()\n\t\tv, err, _ := c.group.Do(key, func() (interface{}, error) {\n\t\t\treturn c.exchange(m, address)\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\tresp, ok := v.(*Msg)\n\t\tif !ok {\n\t\t\treturn nil, 0, ErrExchangeFailed\n\t\t}\n\t\treturn resp, time.Duration(0), nil\n\t}\n\treturn c.exchange(m, address)\n}\n\nfunc (c *Client) exchange(m *Msg, a string) (*Msg, time.Duration, error) {\n\ttimeout := c.getTimeoutForRequest(c.Timeout)\n\tconn, err := c.Dial(a)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer conn.Close()\n\n\tif err := conn.SetDeadline(time.Now().Add(timeout)); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tif _, err := conn.Write(m.Pack()); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tresponse := make([]byte, c.UDPSize)\n\tn, err := conn.Read(response)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tresp := new(Msg)\n\tif err := resp.Unpack(response[:n]); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\treturn resp, time.Since(time.Now()), nil\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tif timeout > 0 {\n\t\treturn timeout\n\t}\n\tif c.Timeout > 0 {\n\t\treturn c.Timeout\n\t}\n\treturn 2 * time.Minute\n}\n\nfunc (c *Client) getDialTimeout() time.Duration {\n\tif c.DialTimeout > 0 {\n\t\treturn c.DialTimeout\n\t}\n\treturn 30 * time.Second\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, handles IPv6 traffic with specific settings, and sends an acknowledgment message to connected clients.\n\nFunction Description: The function establishes a TCP server on port 1024 that continuously accepts client connections. For each connection, it checks if the client is using IPv6 and applies specific traffic class and hop limit settings if so. It then sends a fixed acknowledgment message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. The server runs indefinitely until terminated.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return any value but maintains persistent network operations)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp6\", \":1024\")\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\n\t\t\ttcpConn, ok := c.(*net.TCPConn)\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tremoteAddr := tcpConn.RemoteAddr().String()\n\t\t\tipStr, _, _ := net.SplitHostPort(remoteAddr)\n\t\t\tip := net.ParseIP(ipStr)\n\n\t\t\tif ip.To4() == nil {\n\t\t\t\terr := tcpConn.SetTrafficClass(0x1E)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Println(\"Error setting traffic class:\", err)\n\t\t\t\t}\n\n\t\t\t\terr = tcpConn.SetHopLimit(64)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Println(\"Error setting hop limit:\", err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmsg := \"HELLO-R-U-THERE-ACK\"\n\t\t\t_, err = tcpConn.Write([]byte(msg))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error sending message:\", err)\n\t\t\t}\n\t\t}(conn)\n\t}\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a Git daemon in Go that handles TCP connections for Git operations, including upload-pack and upload-archive services, with connection management, timeout handling, and access control.\n\nStruct Description: The GitDaemon struct represents a TCP server that handles Git protocol connections. It manages client connections, enforces limits, and processes Git service requests.\n\nFields:\n\nctx: [context.Context] - Context for cancellation and timeout propagation  \naddr: [string] - TCP address to listen on  \nfinished: [chan struct{}] - Channel to signal server shutdown  \nconns: [connections] - Track active connections (wrapper around map[net.Conn]struct{})  \ncfg: [*config.Config] - Server configuration  \nbe: [*backend.Backend] - Backend for repository access and authentication  \nwg: [sync.WaitGroup] - Wait group for graceful shutdown  \nonce: [sync.Once] - Ensure cleanup happens once  \nlogger: [*log.Logger] - Structured logger  \ndone: [atomic.Bool] - Atomic flag indicating server shutdown status  \n\nMethods:\n\nNewGitDaemon: [func(context.Context) (*GitDaemon, error)] -> Creates a new GitDaemon instance with context-derived configuration  \nListenAndServe: [func() error] -> Starts listening on configured address and serves connections  \nServe: [func(net.Listener) error] -> Handles incoming connections on provided listener (main server loop)  \nhandleClient: [func(net.Conn)] -> Processes individual client connections (private method)  \n\nHelper Types:\n\nserverConn: [struct] - Wraps net.Conn with timeout handling  \nconnections: [struct] - Thread-safe connection tracking with sync.Map  \n\nKey Behaviors:\n1. Implements exponential backoff for temporary connection errors\n2. Enforces maximum connection limits\n3. Handles Git protocol packets (pktline format)\n4. Validates repository paths and access permissions\n5. Processes both git-upload-pack and git-upload-archive services\n6. Implements idle and maximum timeout handling\n7. Provides clean shutdown via context cancellation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/charmbracelet/log\"\n\t\"github.com/charmbracelet/soft-serve/pkg/access\"\n\t\"github.com/charmbracelet/soft-serve/pkg/backend\"\n\t\"github.com/charmbracelet/soft-serve/pkg/config\"\n\t\"github.com/charmbracelet/soft-serve/pkg/git\"\n\t\"github.com/charmbracelet/soft-serve/pkg/utils\"\n\t\"github.com/go-git/go-git/v5/plumbing/format/pktline\"\n)\n\ntype GitDaemon struct {\n\tctx      context.Context\n\taddr     string\n\tfinished chan struct{}\n\tconns    connections\n\tcfg      *config.Config\n\tbe       *backend.Backend\n\twg       sync.WaitGroup\n\tonce     sync.Once\n\tlogger   *log.Logger\n\tdone     atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := config.FromContext(ctx)\n\taddr := cfg.Git.ListenAddr\n\td := &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     addr,\n\t\tfinished: make(chan struct{}, 1),\n\t\tcfg:      cfg,\n\t\tbe:       backend.FromContext(ctx),\n\t\tconns:    connections{m: make(map[net.Conn]struct{})},\n\t\tlogger:   log.FromContext(ctx).WithPrefix(\"gitdaemon\"),\n\t}\n\treturn d, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\tlistener, err := net.Listen(\"tcp\", d.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn d.Serve(listener)\n}\n\nfunc (d *GitDaemon) Serve(listener net.Listener) error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\n\td.wg.Add(1)\n\tdefer d.wg.Done()\n\tdefer listener.Close()\n\n\tvar tempDelay time.Duration\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.finished:\n\t\t\t\treturn ErrServerClosed\n\t\t\tdefault:\n\t\t\t\td.logger.Debugf(\"git: error accepting connection: %v\", err)\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay > max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif d.conns.Size()+1 >= d.cfg.Git.MaxConnections {\n\t\t\td.logger.Debugf(\"git: max connections reached, closing %s\", conn.RemoteAddr())\n\t\t\td.fatal(conn, git.ErrMaxConnections)\n\t\t\tcontinue\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\td.handleClient(conn)\n\t\t\td.wg.Done()\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tidleTimeout := time.Duration(d.cfg.Git.IdleTimeout) * time.Second\n\tc := &serverConn{\n\t\tConn:          conn,\n\t\tidleTimeout:   idleTimeout,\n\t\tcloseCanceler: cancel,\n\t}\n\tif d.cfg.Git.MaxTimeout > 0 {\n\t\tdur := time.Duration(d.cfg.Git.MaxTimeout) * time.Second\n\t\tc.maxDeadline = time.Now().Add(dur)\n\t}\n\td.conns.Add(c)\n\tdefer func() {\n\t\td.conns.Close(c)\n\t}()\n\n\terrc := make(chan error, 1)\n\n\ts := pktline.NewScanner(c)\n\tgo func() {\n\t\tif !s.Scan() {\n\t\t\tif err := s.Err(); err != nil {\n\t\t\t\terrc <- err\n\t\t\t}\n\t\t}\n\t\terrc <- nil\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tif err := ctx.Err(); err != nil {\n\t\t\td.logger.Debugf(\"git: connection context error: %v\", err)\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t}\n\t\treturn\n\tcase err := <-errc:\n\t\tif nerr, ok := err.(net.Error); ok && nerr.Timeout() {\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t\treturn\n\t\t} else if err != nil {\n\t\t\td.logger.Debugf(\"git: error scanning pktline: %v\", err)\n\t\t\td.fatal(c, git.ErrSystemMalfunction)\n\t\t\treturn\n\t\t}\n\n\t\tline := s.Bytes()\n\t\tsplit := bytes.SplitN(line, []byte{' '}, 2)\n\t\tif len(split) != 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\tservice := git.Service(split[0])\n\t\tswitch service {\n\t\tcase git.UploadPackService:\n\t\tcase git.UploadArchiveService:\n\t\tdefault:\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\topts := bytes.SplitN(split[1], []byte{0}, 3)\n\t\tif len(opts) < 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\thost := strings.TrimPrefix(string(opts[1]), \"host=\")\n\t\textraParams := map[string]string{}\n\n\t\tif len(opts) > 2 {\n\t\t\tbuf := bytes.TrimPrefix(opts[2], []byte{0})\n\t\t\tfor _, o := range bytes.Split(buf, []byte{0}) {\n\t\t\t\topt := string(o)\n\t\t\t\tif opt == \"\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tkv := strings.SplitN(opt, \"=\", 2)\n\t\t\t\tif len(kv) != 2 {\n\t\t\t\t\td.logger.Errorf(\"git: invalid option %q\", opt)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\textraParams[kv[0]] = kv[1]\n\t\t\t}\n\t\t}\n\n\t\tbe := d.be\n\t\tif !be.AllowKeyless(ctx) {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tname := utils.SanitizeRepo(string(opts[0]))\n\t\td.logger.Debugf(\"git: connect %s %s %s\", c.RemoteAddr(), service, name)\n\t\tdefer d.logger.Debugf(\"git: disconnect %s %s %s\", c.RemoteAddr(), service, name)\n\n\t\trepo := name + \".git\"\n\t\treposDir := filepath.Join(d.cfg.DataPath, \"repos\")\n\t\tif err := git.EnsureWithin(reposDir, repo); err != nil {\n\t\t\td.logger.Debugf(\"git: error ensuring repo path: %v\", err)\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tif _, err := d.be.Repository(ctx, repo); err != nil {\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tauth := be.AccessLevel(ctx, name, \"\")\n\t\tif auth < access.ReadOnlyAccess {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tenvs := []string{\n\t\t\t\"SOFT_SERVE_REPO_NAME=\" + name,\n\t\t\t\"SOFT_SERVE_REPO_PATH=\" + filepath.Join(reposDir, repo),\n\t\t\t\"SOFT_SERVE_HOST=\" + host,\n\t\t\t\"SOFT_SERVE_LOG_PATH=\" + filepath.Join(d.cfg.DataPath, \"log\", \"hooks.log\"),\n\t\t}\n\n\t\tif len(extraParams) > 0 {\n\t\t\tvar gitProto string\n\t\t\tfor k, v := range extraParams {\n\t\t\t\tif len(gitProto) > 0 {\n\t\t\t\t\tgitProto += \":\"\n\t\t\t\t}\n\t\t\t\tgitProto += k + \"=\" + v\n\t\t\t}\n\t\t\tenvs = append(envs, \"GIT_PROTOCOL=\"+gitProto)\n\t\t}\n\n\t\tenvs = append(envs, d.cfg.Environ()...)\n\n\t\tcmd := git.ServiceCommand{\n\t\t\tStdin:  c,\n\t\t\tStdout: c,\n\t\t\tStderr: c,\n\t\t\tEnv:    envs,\n\t\t\tDir:    filepath.Join(reposDir, repo),\n\t\t}\n\n\t\tif err := service.Handler(ctx, cmd); err != nil {\n\t\t\td.logger.Debugf(\"git: error handling request: %v\", err)\n\t\t\td.fatal(c, err)\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"git-daemon/backend\"\n\t\"git-daemon/config\"\n)\n\nvar (\n\tErrMaxConnections = errors.New(\"maximum connections exceeded\")\n\tErrInvalidRequest = errors.New(\"invalid git request\")\n)\n\ntype GitDaemon struct {\n\tctx       context.Context\n\taddr      string\n\tfinished  chan struct{}\n\tconns     connections\n\tcfg       *config.Config\n\tbe        *backend.Backend\n\twg        sync.WaitGroup\n\tonce      sync.Once\n\tlogger    *log.Logger\n\tdone      atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg, err := config.Load()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tbe, err := backend.New(cfg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     fmt.Sprintf(\"%s:%d\", cfg.Host, cfg.Port),\n\t\tfinished: make(chan struct{}),\n\t\tcfg:      cfg,\n\t\tbe:       be,\n\t\tlogger:   log.Default(),\n\t}, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tln, err := net.Listen(\"tcp\", d.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ln.Close()\n\n\td.logger.Printf(\"Git daemon listening on %s\", d.addr)\n\treturn d.Serve(ln)\n}\n\nfunc (d *GitDaemon) Serve(ln net.Listener) error {\n\tvar tempDelay time.Duration\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.ctx.Done():\n\t\t\t\treturn d.ctx.Err()\n\t\t\tdefault:\n\t\t\t\tif ne, ok := err.(interface{ Temporary() bool }); ok && ne.Temporary() {\n\t\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttempDelay *= 2\n\t\t\t\t\t}\n\t\t\t\t\tif tempDelay > time.Second {\n\t\t\t\t\t\ttempDelay = time.Second\n\t\t\t\t\t}\n\t\t\t\t\td.logger.Printf(\"accept error: %v; retrying in %v\", err, tempDelay)\n\t\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\ttempDelay = 0\n\n\t\tif int(d.conns.size()) >= d.cfg.MaxConnections {\n\t\t\td.logger.Printf(\"rejecting connection: maximum connections (%d) exceeded\", d.cfg.MaxConnections)\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\tdefer d.wg.Done()\n\t\t\td.handleClient(conn)\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tsc := newServerConn(conn, d.cfg.IdleTimeout, d.cfg.MaxTimeout)\n\td.conns.add(sc)\n\n\tdefer func() {\n\t\td.conns.delete(sc)\n\t\tsc.Close()\n\t}()\n\n\tif err := sc.SetDeadline(time.Now().Add(d.cfg.IdleTimeout)); err != nil {\n\t\td.logger.Printf(\"failed to set deadline: %v\", err)\n\t\treturn\n\t}\n\n\tserviceName, repoPath, err := d.readGitRequest(sc)\n\tif err != nil {\n\t\tif err != io.EOF {\n\t\t\td.logger.Printf(\"error reading request: %v\", err)\n\t\t}\n\t\treturn\n\t}\n\n\tif !d.validateRepositoryPath(repoPath) {\n\t\td.respondError(sc, \"invalid repository path\")\n\t\treturn\n\t}\n\n\tif !d.checkAccessPermissions(sc.RemoteAddr(), serviceName, repoPath) {\n\t\td.respondError(sc, \"access denied\")\n\t\treturn\n\t}\n\n\tswitch serviceName {\n\tcase \"git-upload-pack\":\n\t\terr = d.handleUploadPack(sc, repoPath)\n\tcase \"git-upload-archive\":\n\t\terr = d.handleUploadArchive(sc, repoPath)\n\tdefault:\n\t\terr = ErrInvalidRequest\n\t}\n\n\tif err != nil {\n\t\td.logger.Printf(\"error handling %s for %s: %v\", serviceName, repoPath, err)\n\t\td.respondError(sc, fmt.Sprintf(\"internal server error: %v\", err))\n\t}\n}\n\nfunc (d *GitDaemon) readGitRequest(conn *serverConn) (string, string, error) {\n\tpkt, err := conn.readPacket()\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\n\tif len(pkt) < 4 || pkt[0] != '#' {\n\t\treturn \"\", \"\", ErrInvalidRequest\n\t}\n\n\tserviceName, ok := pkt[1:].(string)\n\tif !ok || len(serviceName) < 11 || serviceName[:10] != \"git-\" {\n\t\treturn \"\", \"\", ErrInvalidRequest\n\t}\n\n\trepoPath, err := conn.readPacket()\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\n\treturn serviceName, repoPath.(string), nil\n}\n\nfunc (d *GitDaemon) validateRepositoryPath(path string) bool {\n\tif path == \"\" {\n\t\treturn false\n\t}\n\n\tif !d.cfg.AllowNonGitSuffix && len(path) >= 4 && path[len(path)-4:] == \".git\" {\n\t\tpath = path[:len(path)-4]\n\t}\n\n\tfor _, prefix := range d.cfg.RepositoryPrefixes {\n\t\tif len(path) >= len(prefix) && path[:len(prefix)] == prefix {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc (d *GitDaemon) checkAccessPermissions(addr net.Addr, service, path string) bool {\n\treturn d.be.CheckAccess(addr, service, path)\n}\n\nfunc (d *GitDaemon) respondError(conn *serverConn, msg string) {\n\tconn.writePacket(fmt.Sprintf(\"ERR %s\", msg))\n}\n\nfunc (d *GitDaemon) handleUploadPack(conn *serverConn, repoPath string) error {\n\tcmd := fmt.Sprintf(\"git upload-pack %s\", repoPath)\n\treturn d.executeService(conn, cmd)\n}\n\nfunc (d *GitDaemon) handleUploadArchive(conn *serverConn, repoPath string) error {\n\tcmd := fmt.Sprintf(\"git upload-archive %s\", repoPath)\n\treturn d.executeService(conn, cmd)\n}\n\nfunc (d *GitDaemon) executeService(conn *serverConn, cmd string) error {\n\tstdout, stderr, err := d.be.Execute(cmd)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer stdout.Close()\n\tdefer stderr.Close()\n\n\tgo func() {\n\t\t<-conn.closeChan\n\t\tstdout.Close()\n\t\tstderr.Close()\n\t}()\n\n\tgo io.Copy(conn, stdout)\n\tio.Copy(conn, stderr)\n\n\treturn nil\n}\n\nfunc (d *GitDaemon) Shutdown() error {\n\td.once.Do(func() {\n\t\tclose(d.finished)\n\t\td.done.Store(true)\n\t})\n\td.wg.Wait()\n\treturn nil\n}\n\ntype connections struct {\n\tm sync.Map\n}\n\nfunc (c *connections) add(conn *serverConn) {\n\tc.m.Store(conn, struct{}{})\n}\n\nfunc (c *connections) delete(conn *serverConn) {\n\tc.m.Delete(conn)\n}\n\nfunc (c *connections) size() int {\n\tvar count int\n\tc.m.Range(func(_, _ interface{}) bool {\n\t\tcount++\n\t\treturn true\n\t})\n\treturn count\n}\n\ntype serverConn struct {\n\tnet.Conn\n\tidleTimeout time.Duration\n\tmaxTimeout  time.Duration\n\tcloseChan   chan struct{}\n}\n\nfunc newServerConn(conn net.Conn, idleTimeout, maxTimeout time.Duration) *serverConn {\n\tsc := &serverConn{\n\t\tConn:        conn,\n\t\tidleTimeout: idleTimeout,\n\t\tmaxTimeout:  maxTimeout,\n\t\tcloseChan:   make(chan struct{}),\n\t}\n\n\tgo sc.timeoutLoop()\n\treturn sc\n}\n\nfunc (sc *serverConn) Close() error {\n\tclose(sc.closeChan)\n\treturn sc.Conn.Close()\n}\n\nfunc (sc *serverConn) Read(b []byte) (int, error) {\n\tsc.SetReadDeadline(time.Now().Add(sc.maxTimeout))\n\treturn sc.Conn.Read(b)\n}\n\nfunc (sc *serverConn) Write(b []byte) (int, error) {\n\tsc.SetWriteDeadline(time.Now().Add(sc.maxTimeout))\n\treturn sc.Conn.Write(b)\n}\n\nfunc (sc *serverConn) timeoutLoop() {\n\tticker := time.NewTicker(sc.idleTimeout / 2)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tsc.SetDeadline(time.Now().Add(sc.idleTimeout))\n\t\tcase <-sc.closeChan:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (sc *serverConn) readPacket() (interface{}, error) {\n\theader := make([]byte, 4)\n\tn, err := io.ReadFull(sc, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif n != 4 {\n\t\treturn nil, io.ErrUnexpectedEOF\n\t}\n\n\tsize := int(header[0])<<8 | int(header[1])\n\tif size < 4 {\n\t\treturn nil, fmt.Errorf(\"invalid packet size: %d\", size)\n\t}\n\n\tdata := make([]byte, size-2)\n\tn, err = io.ReadFull(sc, data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif n != size-2 {\n\t\treturn nil, io.ErrUnexpectedEOF\n\t}\n\n\treturn string(data), nil\n}\n\nfunc (sc *serverConn) writePacket(data string) error {\n\tsize := len(data) + 2\n\tif size > 65535 {\n\t\treturn fmt.Errorf(\"packet too large: %d bytes\", size)\n\t}\n\n\theader := []byte{\n\t\tbyte(size >> 8),\n\t\tbyte(size),\n\t}\n\n\t_, err := sc.Write(append(header, []byte(data)...))\n\treturn err\n}"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management. The server should be able to start, accept connections, read data from clients, and properly shut down while cleaning up resources.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management capabilities. It maintains state about active connections and provides methods to start, serve, and manage the server lifecycle.\n\nFields:\n\nAddr: [string] - The network address to listen on (e.g., \":8080\")\nNet: [string] - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: [Handler] - The handler for processing incoming requests\nReadTimeout: [time.Duration] - Maximum duration for reading a request\nWriteTimeout: [time.Duration] - Maximum duration for writing a response\nIdleTimeout: [func() time.Duration] - Function returning idle connection timeout\nlock: [sync.RWMutex] - Protects concurrent access to server state\nstarted: [bool] - Indicates if server is running\nshutdown: [chan struct{}] - Channel for shutdown signaling\nconns: [map[net.Conn]struct{}] - Map of active connections\n\nMethods:\n\nListenAndServe: [Name]() -> [error] - Starts the server and begins accepting connections\nserveTCP: [Name](net.Listener) -> [error] - Main TCP serving loop that accepts connections\nserveTCPConn: [Name](*sync.WaitGroup, net.Conn) -> [] - Handles an individual TCP connection\nreadTCP: [Name](net.Conn, time.Duration) -> ([]byte, error) - Reads data from a TCP connection\ninit: [Name]() -> [] - Initializes server resources\nisStarted: [Name]() -> [bool] - Checks if server is running\ngetIdleTimeout: [Name]() -> [time.Duration] - Returns idle timeout duration\ngetReadTimeout: [Name]() -> [time.Duration] - Returns read timeout duration",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := net.Listen(srv.Net, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer wg.Done()\n\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := srv.getIdleTimeout()\n\n\tfor srv.isStarted() {\n\t\tm, err := srv.readTCP(rw, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n}\n\nfunc (srv *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\tvar length uint16\n\tif err := binary.Read(conn, binary.BigEndian, &length); err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := make([]byte, length)\n\tif _, err := io.ReadFull(conn, m); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn m, nil\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getIdleTimeout() time.Duration {\n\tif srv.IdleTimeout != nil {\n\t\treturn srv.IdleTimeout()\n\t}\n\treturn tcpIdleTimeout\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler func(context.Context, []byte) ([]byte, error)\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock      sync.RWMutex\n\tstarted   bool\n\tshutdown  chan struct{}\n\tconns     map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.init()\n\n\tln, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn s.serveTCP(ln)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\tdefer ln.Close()\n\n\tvar wg sync.WaitGroup\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\ts.serveTCPConn(&wg, conn)\n\t\t}()\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tidleTimeout := s.getIdleTimeout()\n\t\tif idleTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t\t}\n\n\t\tdata, err := s.readTCP(conn, s.getReadTimeout())\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error reading from connection: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\t\tresponse, err := s.Handler(ctx, data)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error handling request: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\n\t\tif s.WriteTimeout > 0 {\n\t\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t\t}\n\n\t\t_, err = conn.Write(response)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error writing response: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (s *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tif timeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(timeout))\n\t}\n\n\treader := bufio.NewReader(conn)\n\treturn reader.ReadBytes('\\n')\n}\n\nfunc (s *Server) init() {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tif s.conns == nil {\n\t\ts.conns = make(map[net.Conn]struct{})\n\t}\n\tif s.shutdown == nil {\n\t\ts.shutdown = make(chan struct{})\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getIdleTimeout() time.Duration {\n\tif s.IdleTimeout != nil {\n\t\treturn s.IdleTimeout()\n\t}\n\treturn 0\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\treturn s.ReadTimeout\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection lifecycles, timeouts, and provide hooks for customizing reader/writer behavior.\n\nStruct Description: The Server struct represents a configurable TCP server that can handle DNS queries (though this could be adapted for other protocols). It manages listener lifecycle, connection pooling, and provides various timeout and security configurations.\n\nFields:\n\nAddr: string - The address to listen on (e.g., \":domain\")\nNet: string - Network type (\"tcp\", \"tcp4\", \"tcp6\", or their TLS variants)\nListener: net.Listener - The active TCP listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection (not used in TCP mode)\nHandler: Handler - Handler for incoming requests\nUDPSize: int - UDP buffer size\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nIdleTimeout: func() time.Duration - Function returning idle timeout duration\nTsigProvider: TsigProvider - TSIG provider for DNS\nTsigSecret: map[string]string - TSIG secrets\nNotifyStartedFunc: func() - Callback when server starts\nDecorateReader: DecorateReader - Function to decorate the reader\nDecorateWriter: DecorateWriter - Function to decorate the writer\nMaxTCPQueries: int - Maximum queries per connection\nReusePort: bool - Enable SO_REUSEPORT\nReuseAddr: bool - Enable SO_REUSEADDR\nMsgAcceptFunc: MsgAcceptFunc - Function to filter incoming messages\nlock: sync.RWMutex - Mutex for concurrent access protection\nstarted: bool - Server running state\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\nudpPool: sync.Pool - Pool for UDP buffers\n\nMethods:\n\nListenAndServe: () -> error - Starts the server and begins accepting connections\nserveTCP: (net.Listener) -> error - Internal method to serve TCP connections\nserveTCPConn: (*sync.WaitGroup, net.Conn) -> () - Handles an individual TCP connection\nisStarted: () -> bool - Checks if server is running (internal)\ninit: () -> () - Initializes server state (internal)\ngetReadTimeout: () -> time.Duration - Gets current read timeout (internal)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tListener net.Listener\n\tTLSConfig *tls.Config\n\tPacketConn net.PacketConn\n\tHandler   Handler\n\tUDPSize int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tTsigProvider TsigProvider\n\tTsigSecret map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries int\n\tReusePort bool\n\tReuseAddr bool\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigProvider: srv.tsigProvider(), tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package server\n\nimport (\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler func(net.Conn)\ntype DecorateReader func(*net.TCPConn) error\ntype DecorateWriter func(*net.TCPConn) error\ntype MsgAcceptFunc func([]byte) bool\ntype TsigProvider func(string) (string, bool)\n\ntype Server struct {\n\tAddr           string\n\tNet            string\n\tListener       net.Listener\n\tTLSConfig      *tls.Config\n\tPacketConn     net.PacketConn\n\tHandler        Handler\n\tUDPSize        int\n\tReadTimeout    time.Duration\n\tWriteTimeout   time.Duration\n\tIdleTimeout    func() time.Duration\n\tTsigProvider   TsigProvider\n\tTsigSecret     map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries  int\n\tReusePort      bool\n\tReuseAddr      bool\n\tMsgAcceptFunc  MsgAcceptFunc\n\tlock           sync.RWMutex\n\tstarted        bool\n\tshutdown       chan struct{}\n\tconns          map[net.Conn]struct{}\n\tudpPool        sync.Pool\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tif s.isStarted() {\n\t\treturn errors.New(\"server already started\")\n\t}\n\n\tvar err error\n\tif s.Net == \"tcp\" || s.Net == \"tcp4\" || s.Net == \"tcp6\" {\n\t\taddr, _ := net.ResolveTCPAddr(s.Net, s.Addr)\n\t\tconfig := &net.ListenConfig{\n\t\t\tControl: func(network, address string, c syscall.RawConn) error {\n\t\t\t\tvar opErr error\n\t\t\t\tc.Control(func(fd uintptr) {\n\t\t\t\t\tif s.ReusePort {\n\t\t\t\t\t\topErr = syscall.SetsockoptInt(int(fd), syscall.SOL_SOCKET, syscall.SO_REUSEPORT, 1)\n\t\t\t\t\t}\n\t\t\t\t\tif opErr != nil {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif s.ReuseAddr {\n\t\t\t\t\t\topErr = syscall.SetsockoptInt(int(fd), syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn opErr\n\t\t\t},\n\t\t}\n\t\ts.Listener, err = config.Listen(context.Background(), s.Net, s.Addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else if s.Net == \"tcp-tls\" || s.Net == \"tcp4-tls\" || s.Net == \"tcp6-tls\" {\n\t\tif s.TLSConfig == nil {\n\t\t\treturn errors.New(\"tls config required for tls network\")\n\t\t}\n\t\taddr, _ := net.ResolveTCPAddr(s.Net[:3], s.Addr)\n\t\ttcpListener, err := net.ListenTCP(s.Net[:3], addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.Listener = tls.NewListener(tcpListener, s.TLSConfig)\n\t} else {\n\t\treturn errors.New(\"unsupported network type\")\n\t}\n\n\tcloseOnExecListener, ok := s.Listener.(interface {\n\t\tFile() (*os.File, error)\n\t})\n\tif ok {\n\t\tfile, _ := closeOnExecListener.File()\n\t\tif file != nil {\n\t\t\tsyscall.CloseOnExec(file.Fd())\n\t\t}\n\t}\n\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n\ts.started = true\n\tif s.NotifyStartedFunc != nil {\n\t\tgo s.NotifyStartedFunc()\n\t}\n\treturn s.serveTCP(s.Listener)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tdefer ln.Close()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\ts.started = false\n\t\tclose(s.shutdown)\n\t\tfor conn := range s.conns {\n\t\t\tconn.Close()\n\t\t}\n\t\ts.conns = nil\n\t\ts.lock.Unlock()\n\t}()\n\n\tvar wg sync.WaitGroup\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\twg.Add(1)\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\ts.serveTCPConn(&wg, conn)\n\t\t}()\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tif tcpConn, ok := conn.(*net.TCPConn); ok {\n\t\tif s.DecorateReader != nil {\n\t\t\tif err := s.DecorateReader(tcpConn); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tif s.DecorateWriter != nil {\n\t\t\tif err := s.DecorateWriter(tcpConn); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\tqueries := 0\n\tmaxQueries := s.MaxTCPQueries\n\tif maxQueries <= 0 {\n\t\tmaxQueries = 128 // default\n\t}\n\n\tbuf := make([]byte, 65536)\n\tfor {\n\t\tif s.IdleTimeout != nil {\n\t\t\ttimeout := s.IdleTimeout()\n\t\t\tif timeout > 0 {\n\t\t\t\tconn.SetReadDeadline(time.Now().Add(timeout))\n\t\t\t}\n\t\t} else if s.ReadTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t\t}\n\n\t\tn, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tif s.MsgAcceptFunc != nil && !s.MsgAcceptFunc(buf[:n]) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif queries++; queries >= maxQueries {\n\t\t\treturn\n\t\t}\n\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\ts.Handler(conn)\n\t\t}()\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) init() {\n\tif s.UDPSize <= 0 {\n\t\ts.UDPSize = 65536\n\t}\n\tif s.ReusePort {\n\t\ts.ReusePort = true\n\t}\n\tif s.ReuseAddr {\n\t\ts.ReuseAddr = true\n\t}\n\tif s.MaxTCPQueries <= 0 {\n\t\ts.MaxTCPQueries = 128\n\t}\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.ReadTimeout > 0 {\n\t\treturn s.ReadTimeout\n\t}\n\treturn 2 * time.Minute\n}"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle incoming client connections, optionally with TLS encryption, and relay traffic between clients and target servers through a proxy.\n\nStruct Description: The Trojan struct represents a TCP server that listens for incoming connections, handles TLS encryption if configured, and relays traffic between clients and target servers via a proxy.\n\nFields:\n- addr: string - The address on which the server listens for incoming connections\n- withTLS: bool - Flag indicating whether TLS encryption should be used\n- tlsConfig: *tls.Config - TLS configuration for secure connections\n- certFile: string - Path to TLS certificate file\n- keyFile: string - Path to TLS private key file\n- pass: [56]byte - Password for authentication\n- fallback: string - Fallback address if connection fails\n- proxy: proxy.Proxy - Proxy implementation for relaying traffic\n\nMethods:\n- ListenAndServe() - Starts the TCP server, listens for incoming connections, and handles them in separate goroutines\n  Input: None\n  Output: None\n- Serve(c net.Conn) - Handles an individual client connection, performs TLS handshake if needed, and relays traffic\n  Input: c net.Conn - The client connection to handle\n  Output: None\n- readHeader(r io.Reader) - Reads and parses the header from the client connection\n  Input: r io.Reader - Reader to get header data from\n  Output: cmd socks.Cmd, target socks.Addr, err error - Returns command, target address, and any error\n- serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) - Handles fallback connection when main connection fails\n  Input: \n    c net.Conn - The client connection\n    fallback string - Fallback address\n    buf *bytes.Buffer - Buffer containing initial data\n  Output: None\n- ServeUoT(c net.Conn, target socks.Addr) - Handles UDP-over-TCP connections\n  Input:\n    c net.Conn - The client connection\n    target socks.Addr - Target address\n  Output: None",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/pkg/socks\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype Trojan struct {\n\taddr      string\n\twithTLS   bool\n\ttlsConfig *tls.Config\n\tcertFile  string\n\tkeyFile   string\n\tpass      [56]byte\n\tfallback  string\n\tproxy     proxy.Proxy\n}\n\nfunc (s *Trojan) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[trojan] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[trojan] listening TCP on %s, with TLS: %v\", s.addr, s.withTLS)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[trojan] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *Trojan) Serve(c net.Conn) {\n\tif c, ok := c.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tif s.withTLS {\n\t\ttlsConn := tls.Server(c, s.tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\ttlsConn.Close()\n\t\t\tlog.F(\"[trojan] error in tls handshake: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tc = tlsConn\n\t}\n\tdefer c.Close()\n\n\theadBuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(headBuf)\n\n\tcmd, target, err := s.readHeader(io.TeeReader(c, headBuf))\n\tif err != nil {\n\t\tif s.fallback != \"\" {\n\t\t\ts.serveFallback(c, s.fallback, headBuf)\n\t\t}\n\t\treturn\n\t}\n\n\tnetwork := \"tcp\"\n\tdialer := s.proxy.NextDialer(target.String())\n\n\tif cmd == socks.CmdUDPAssociate {\n\t\tif dialer.Addr() == \"DIRECT\" {\n\t\t\ts.ServeUoT(c, target)\n\t\t\treturn\n\t\t}\n\t\tnetwork = \"udp\"\n\t}\n\n\trc, err := dialer.Dial(network, target.String())\n\tif err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tlog.F(\"[trojan] %s <-> %s via %s\", c.RemoteAddr(), target, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"net\"\n\t\"crypto/tls\"\n)\n\ntype Trojan struct {\n\taddr       string\n\twithTLS    bool\n\ttlsConfig  *tls.Config\n\tcertFile   string\n\tkeyFile    string\n\tpass       [56]byte\n\tfallback   string\n\tproxy      Proxy\n}\n\nfunc (t *Trojan) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", t.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo t.Serve(conn)\n\t}\n}\n\nfunc (t *Trojan) Serve(c net.Conn) {\n\tvar conn net.Conn = c\n\tif t.withTLS {\n\t\tconfig := t.tlsConfig\n\t\tif config == nil {\n\t\t\tconfig = &tls.Config{\n\t\t\t\tCertificates: []tls.Certificate{},\n\t\t\t}\n\t\t\tcert, err := tls.LoadX509KeyPair(t.certFile, t.keyFile)\n\t\t\tif err != nil {\n\t\t\t\tt.serveFallback(c, t.fallback, nil)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconfig.Certificates = append(config.Certificates, cert)\n\t\t}\n\t\ttlsConn := tls.Server(c, config)\n\t\tconn = tlsConn\n\t}\n\n\tcmd, target, err := t.readHeader(conn)\n\tif err != nil {\n\t\tt.serveFallback(conn, t.fallback, nil)\n\t\treturn\n\t}\n\n\tswitch cmd {\n\tcase socks.CmdConnect:\n\t\terr := t.proxy.Proxy(conn, target)\n\tcase socks.CmdUDP:\n\t\tt.ServeUoT(conn, target)\n\tdefault:\n\t\tt.serveFallback(conn, t.fallback, nil)\n\t}\n}\n\nfunc (t *Trojan) readHeader(r io.Reader) (cmd socks.Cmd, target socks.Addr, err error) {\n\theader := make([]byte, 1)\n\tif _, err := io.ReadFull(r, header); err != nil {\n\t\treturn 0, nil, err\n\t}\n\tcmd = socks.Cmd(header[0])\n\n\ttarget, err = socks.ReadAddr(r)\n\tif err != nil {\n\t\treturn 0, nil, err\n\t}\n\treturn cmd, target, nil\n}\n\nfunc (t *Trojan) serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) {\n\tif fallback == \"\" {\n\t\tc.Close()\n\t\treturn\n\t}\n\tconn, err := net.Dial(\"tcp\", fallback)\n\tif err != nil {\n\t\tc.Close()\n\t\treturn\n\t}\n\tif buf != nil {\n\t\tbuf.WriteTo(conn)\n\t}\n\tgo func() {\n\t\tio.Copy(c, conn)\n\t\tc.Close()\n\t}()\n\tgo func() {\n\t\tio.Copy(conn, c)\n\t\tconn.Close()\n\t}()\n}\n\nfunc (t *Trojan) ServeUoT(c net.Conn, target socks.Addr) {\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", target.String())\n\tif err != nil {\n\t\tt.serveFallback(c, \"\", nil)\n\t\treturn\n\t}\n\tconn, err := net.DialUDP(\"udp\", nil, udpAddr)\n\tif err != nil {\n\t\tt.serveFallback(c, \"\", nil)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tgo func() {\n\t\tbuffer := make([]byte, 65535)\n\t\tfor {\n\t\t\tn, _, err := conn.ReadFrom(buffer)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif _, err := c.Write(buffer[:n]); err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tc.Close()\n\t}()\n\n\tio.Copy(conn, c)\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a TCP echo server in Go that listens for incoming connections on a specified port, reads data from clients, and echoes the same data back to them.\n\nFunction Description: The function implements a simple TCP server that continuously accepts client connections, reads data from each connection, and writes the same data back (echo). It handles network errors appropriately and ensures resources are cleaned up.\n\nInput: None (The port number is hardcoded as \":9000\" in the implementation)\n\nOutput: None (The function runs indefinitely until interrupted, with all output being network communication with clients)",
    "Canonical_solution": "import \"net\"\n\nfunc main() {\n\tln, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tfor {\n\t\t\tbs := make([]byte, 1024)\n\t\t\tn, err := conn.Read(bs)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t_, err = conn.Write(bs[:n])\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfmt.Println(\"Server listening on port 9000\")\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tif err != io.EOF {\n\t\t\t\tfmt.Println(\"Error reading from connection:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\n\t\t_, writeErr := conn.Write(buffer[:n])\n\t\tif writeErr != nil {\n\t\t\tfmt.Println(\"Error writing to connection:\", writeErr)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Implement a TCP-based HTTP proxy server in Go that handles both HTTP and HTTPS requests, supports basic authentication, and can optionally pretend to be a web server.\n\nStruct Description: The HTTP struct represents an HTTP proxy server with configurable authentication and behavior settings.\n\nFields:\naddr: string - The address and port on which the server listens\nuser: string - Username for basic authentication (empty if no auth required)\npassword: string - Password for basic authentication (empty if no auth required)\npretend: bool - Whether to pretend to be a web server (return 404 responses)\nproxy: proxy.Proxy - The underlying proxy implementation for forwarding requests\n\nMethods:\nListenAndServe: () -> () - Starts the TCP listener on the configured address and begins accepting connections\nServe: (net.Conn) -> () - Handles an individual client connection (sets keepalive, parses requests)\nservRequest: (*request, *proxy.Conn) -> () - Processes authenticated requests and routes to HTTP/HTTPS handlers\nservHTTPS: (*request, net.Conn) -> () - Handles HTTPS CONNECT requests by establishing tunnel\nservHTTP: (*request, *proxy.Conn) -> () - Handles regular HTTP requests by forwarding and modifying headers",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/textproto\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype HTTP struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n\tproxy    proxy.Proxy\n}\n\nfunc (s *HTTP) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[http] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[http] listening TCP on %s\", s.addr)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[http] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *HTTP) Serve(cc net.Conn) {\n\tif c, ok := cc.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tc := proxy.NewConn(cc)\n\tdefer c.Close()\n\n\treq, err := parseRequest(c.Reader())\n\tif err != nil {\n\t\tlog.F(\"[http] can not parse request from %s, error: %v\", c.RemoteAddr(), err)\n\t\treturn\n\t}\n\n\tif s.pretend {\n\t\tfmt.Fprintf(c, \"%s 404 Not Found\\r\\nServer: nginx\\r\\n\\r\\n404 Not Found\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s, pretend as web server\", c.RemoteAddr().String(), s.Addr())\n\t\treturn\n\t}\n\n\ts.servRequest(req, c)\n}\n\nfunc (s *HTTP) servRequest(req *request, c *proxy.Conn) {\n\tif s.user != \"\" && s.password != \"\" {\n\t\tif user, pass, ok := extractUserPass(req.auth); !ok || user != s.user || pass != s.password {\n\t\t\tio.WriteString(c, \"HTTP/1.1 407 Proxy Authentication Required\\r\\nProxy-Authenticate: Basic\\r\\n\\r\\n\")\n\t\t\tlog.F(\"[http] auth failed from %s, auth info: %s:%s\", c.RemoteAddr(), user, pass)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif req.method == \"CONNECT\" {\n\t\ts.servHTTPS(req, c)\n\t\treturn\n\t}\n\n\ts.servHTTP(req, c)\n}\n\nfunc (s *HTTP) servHTTPS(r *request, c net.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", r.uri)\n\tif err != nil {\n\t\tio.WriteString(c, r.proto+\" 502 ERROR\\r\\n\\r\\n\")\n\t\tlog.F(\"[http] %s <-> %s [c] via %s, error in dial: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tio.WriteString(c, \"HTTP/1.1 200 Connection established\\r\\n\\r\\n\")\n\n\tlog.F(\"[http] %s <-> %s [c] via %s\", c.RemoteAddr(), r.uri, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[http] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}\n\nfunc (s *HTTP) servHTTP(req *request, c *proxy.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", req.target)\n\tif err != nil {\n\t\tfmt.Fprintf(c, \"%s 502 ERROR\\r\\n\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), req.target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tbuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(buf)\n\n\treq.WriteBuf(buf)\n\t_, err = rc.Write(buf.Bytes())\n\tif err != nil {\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tif _, err := c.Reader().Peek(1); err == nil {\n\t\t\tproxy.Copy(rc, c)\n\t\t\trc.SetDeadline(time.Now())\n\t\t\tc.SetDeadline(time.Now())\n\t\t}\n\t}()\n\n\tr := pool.GetBufReader(rc)\n\tdefer pool.PutBufReader(r)\n\n\ttpr := textproto.NewReader(r)\n\tline, err := tpr.ReadLine()\n\tif err != nil {\n\t\treturn\n\t}\n\n\tproto, code, status, ok := parseStartLine(line)\n\tif !ok {\n\t\treturn\n\t}\n\n\theader, err := tpr.ReadMIMEHeader()\n\tif err != nil {\n\t\tlog.F(\"[http] read header error:%s\", err)\n\t\treturn\n\t}\n\n\theader.Set(\"Proxy-Connection\", \"close\")\n\theader.Set(\"Connection\", \"close\")\n\n\tbuf.Reset()\n\twriteStartLine(buf, proto, code, status)\n\twriteHeaders(buf, header)\n\n\tlog.F(\"[http] %s <-> %s via %s\", c.RemoteAddr(), req.target, dialer.Addr())\n\tc.Write(buf.Bytes())\n\n\tproxy.Copy(c, r)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n)\n\ntype request struct {\n\tmethod, host, proto string\n\theaders             map[string]string\n\tbody                []byte\n}\n\ntype Proxy struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n}\n\nfunc (p *Proxy) ListenAndServe() {\n\tlistener, err := net.Listen(\"tcp\", p.addr)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting proxy:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfmt.Printf(\"Proxy server running on %s\\n\", p.addr)\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo p.Serve(conn)\n\t}\n}\n\nfunc (p *Proxy) Serve(conn net.Conn) {\n\tdefer conn.Close()\n\n\treader := bufio.NewReader(conn)\n\treq, err := p.parseRequest(reader)\n\tif err != nil {\n\t\thttpError(conn, 400, \"Bad Request\")\n\t\treturn\n\t}\n\n\tif p.user != \"\" || p.password != \"\" {\n\t\tauth := req.headers[\"proxy-authorization\"]\n\t\tif !authenticate(auth, p.user, p.password) {\n\t\t\tp.sendProxyAuthRequired(conn)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif p.pretend {\n\t\tp.servePretend(conn)\n\t\treturn\n\t}\n\n\tif req.method == \"CONNECT\" {\n\t\tp.servHTTPS(req, conn)\n\t} else {\n\t\tp.servHTTP(req, conn)\n\t}\n}\n\nfunc (p *Proxy) parseRequest(r *bufio.Reader) (*request, error) {\n\tfirstLine, _ := r.ReadString('\\n')\n\tif firstLine == \"\" {\n\t\treturn nil, fmt.Errorf(\"empty request line\")\n\t}\n\n\tparts := strings.Split(strings.TrimSpace(firstLine), \" \")\n\tif len(parts) != 3 {\n\t\treturn nil, fmt.Errorf(\"invalid request line\")\n\t}\n\n\treq := &request{\n\t\tmethod: parts[0],\n\t\thost:   parts[1],\n\t\tproto:  parts[2],\n\t\theaders: make(map[string]string),\n\t}\n\n\tfor {\n\t\tline, _ := r.ReadString('\\n')\n\t\tif line == \"\\r\\n\" || line == \"\\n\" {\n\t\t\tbreak\n\t\t}\n\t\theaderParts := strings.SplitN(line, \":\", 2)\n\t\tif len(headerParts) == 2 {\n\t\t\tkey := strings.ToLower(strings.TrimSpace(headerParts[0]))\n\t\t\tval := strings.TrimSpace(headerParts[1])\n\t\t\treq.headers[key] = val\n\t\t}\n\t}\n\n\treturn req, nil\n}\n\nfunc authenticate(authHeader, user, password string) bool {\n\tif authHeader == \"\" {\n\t\treturn false\n\t}\n\treturn authHeader == \"Basic \"+basicAuth(user, password)\n}\n\nfunc basicAuth(user, password string) string {\n\treturn user + \":\" + password // Simplified for example; proper base64 encoding needed\n}\n\nfunc (p *Proxy) sendProxyAuthRequired(conn net.Conn) {\n\tconn.Write([]byte(\"HTTP/1.1 407 Proxy Authentication Required\\r\\n\"))\n\tconn.Write([]byte(\"Proxy-Authenticate: Basic realm=\\\"Proxy\\\"\\r\\n\"))\n\tconn.Write([]byte(\"Connection: close\\r\\n\\r\\n\"))\n}\n\nfunc httpError(conn net.Conn, code int, msg string) {\n\tconn.Write([]byte(fmt.Sprintf(\"HTTP/1.1 %d %s\\r\\n\\r\\n\", code, msg)))\n}\n\nfunc (p *Proxy) servePretend(conn net.Conn) {\n\tconn.Write([]byte(\"HTTP/1.1 404 Not Found\\r\\n\"))\n\tconn.Write([]byte(\"Content-Length: 0\\r\\n\"))\n\tconn.Write([]byte(\"Connection: close\\r\\n\\r\\n\"))\n}\n\nfunc (p *Proxy) servHTTPS(req *request, conn net.Conn) {\n\thost := req.host\n\tif host == \"\" {\n\t\thttpError(conn, 400, \"Bad Request\")\n\t\treturn\n\t}\n\n\tclientConn, err := net.Dial(\"tcp\", host)\n\tif err != nil {\n\t\thttpError(conn, 502, \"Bad Gateway\")\n\t\treturn\n\t}\n\n\tconn.Write([]byte(\"HTTP/1.1 200 Connection Established\\r\\n\\r\\n\"))\n\n\tgo func() {\n\t\tio.Copy(clientConn, conn)\n\t}()\n\tgo func() {\n\t\tio.Copy(conn, clientConn)\n\t}()\n}\n\nfunc (p *Proxy) servHTTP(req *request, conn net.Conn) {\n\thost := req.host\n\tif host == \"\" {\n\t\thttpError(conn, 400, \"Bad Request\")\n\t\treturn\n\t}\n\n\tdelete(req.headers, \"proxy-authorization\")\n\n\tclientConn, err := net.Dial(\"tcp\", host)\n\tif err != nil {\n\t\thttpError(conn, 502, \"Bad Gateway\")\n\t\treturn\n\t}\n\tdefer clientConn.Close()\n\n\treq.writeTo(clientConn)\n\n\trespReader := bufio.NewReader(clientConn)\n\tfor {\n\t\tline, err := respReader.ReadString('\\n')\n\t\tif err != nil || line == \"\\r\\n\" || line == \"\\n\" {\n\t\t\tbreak\n\t\t}\n\t\tconn.Write([]byte(line))\n\t}\n\n\tio.Copy(conn, respReader)\n}\n\nfunc (r *request) writeTo(w io.Writer) {\n\tfmt.Fprintf(w, \"%s %s %s\\r\\n\", r.method, r.host, r.proto)\n\tfor k, v := range r.headers {\n\t\tfmt.Fprintf(w, \"%s: %s\\r\\n\", k, v)\n\t}\n\tfmt.Fprint(w, \"\\r\\n\")\n}"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection timeouts, track active connections, and provide hooks for custom message handling.\n\nStruct Description: The Server struct represents a TCP server that can listen for incoming connections, handle them concurrently, and manage server lifecycle operations. It supports both plain TCP and TLS configurations.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (tcp, tcp4, tcp6, or their TLS variants)\nListener: net.Listener - The active network listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection handler (unused in TCP implementation)\nHandler: Handler - Interface for handling incoming messages\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nMsgAcceptFunc: MsgAcceptFunc - Function to filter acceptable messages\nlock: sync.RWMutex - Mutex for protecting concurrent access to server state\nstarted: bool - Flag indicating if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Map of active connections\nudpPool: sync.Pool - Pool for UDP resources (unused in TCP implementation)\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nisStarted() bool - Helper method to check server running state\ninit() - Initializes server internal structures\ngetReadTimeout() time.Duration - Gets the current read timeout value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool  sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigSecret: srv.TsigSecret, tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tHandle(conn net.Conn, data []byte)\n}\n\ntype MsgAcceptFunc func([]byte) bool\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAccept    MsgAcceptFunc\n\tlock         sync.RWMutex\n\tstarted      bool\n\tshutdown     chan struct{}\n\tconns        map[net.Conn]struct{}\n\tudpPool      sync.Pool\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.ReadTimeout > 0 {\n\t\treturn s.ReadTimeout\n\t}\n\treturn 10 * time.Second\n}\n\nfunc (s *Server) init() {\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.isStarted() {\n\t\treturn nil\n\t}\n\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\tvar err error\n\tvar listener net.Listener\n\n\tif s.TLSConfig != nil {\n\t\tlistener, err = tls.Listen(s.Net, s.Addr, s.TLSConfig)\n\t} else {\n\t\tlistener, err = net.Listen(s.Net, s.Addr)\n\t}\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.Listener = listener\n\tdefer s.Listener.Close()\n\n\treturn s.serveTCP(listener)\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tvar wg sync.WaitGroup\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tgo func() {\n\t\t<-s.shutdown\n\t\tcancel()\n\t\tlistener.Close()\n\t}()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn ctx.Err()\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\twg.Add(1)\n\t\tgo s.serveTCPConn(&wg, conn)\n\t}\n\n\twg.Wait()\n\treturn nil\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\tconn.Close()\n\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\n\t\twg.Done()\n\t}()\n\n\tidleDuration := 30 * time.Second\n\tif s.IdleTimeout != nil {\n\t\tidleDuration = s.IdleTimeout()\n\t}\n\n\tfor {\n\t\tconn.SetReadDeadline(time.Now().Add(s.getReadTimeout()))\n\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\n\t\tbuffer := make([]byte, 4096)\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tif n > 0 && (s.MsgAccept == nil || s.MsgAccept(buffer[:n])) {\n\t\t\ts.Handler.Handle(conn, buffer[:n])\n\t\t}\n\n\t\ttimer := time.NewTimer(idleDuration)\n\t\tselect {\n\t\tcase <-timer.C:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, sets specific IPv6 traffic class and hop limit for IPv6 connections, and sends an acknowledgment message to each client.\n\nFunction Description: The function establishes a TCP server on port 1024 that continuously accepts client connections. For each connection, it checks if the client is using IPv6 and configures specific network parameters (traffic class and hop limit) if so. It then sends a fixed acknowledgment message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. Each client connection is handled in a separate goroutine.\n\nInput: None (The function takes no explicit parameters but binds to port 1024 by default)\n\nOutput: None (The function doesn't return any value but maintains persistent network operations and may log fatal errors)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp6\", \":1024\")\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to bind to port 1024:\", err)\n\t}\n\tdefer listener.Close()\n\n\tfmt.Println(\"Server listening on port 1024...\")\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleClient(conn)\n\t}\n}\n\nfunc handleClient(conn net.Conn) {\n\tdefer conn.Close()\n\n\tremoteAddr, ok := conn.RemoteAddr().(*net.TCPAddr)\n\tif !ok || remoteAddr.IP.To4() != nil {\n\t\tfmt.Println(\"IPv4 connection from:\", conn.RemoteAddr())\n\t} else {\n\t\tfmt.Println(\"IPv6 connection from:\", conn.RemoteAddr())\n\n\t\tipConn, ok := conn.(*net.TCPConn)\n\t\tif !ok {\n\t\t\tlog.Println(\"Failed to convert Conn to TCPConn\")\n\t\t\treturn\n\t\t}\n\n\t\terr := ipConn.SetTrafficClass(0x18) // Example: Set traffic class to DSCP EF ( Expedited Forwarding )\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to set traffic class:\", err)\n\t\t}\n\n\t\terr = ipConn.SetTTL(64) // Set hop limit for IPv6\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to set hop limit:\", err)\n\t\t}\n\t}\n\n\tackMessage := []byte(\"HELLO-R-U-THERE-ACK\")\n\t_, err := conn.Write(ackMessage)\n\tif err != nil {\n\t\tlog.Println(\"Error sending acknowledgment:\", err)\n\t}\n}"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, handles IPv6 traffic with specific traffic class and hop limit settings, and sends an acknowledgment message to connected clients.\n\nFunction Description: The function sets up a TCP server on port 1024 that accepts incoming connections. For IPv6 clients, it configures specific network parameters (traffic class and hop limit) before sending an acknowledgment message. The server runs indefinitely, handling each connection in a separate goroutine.\n\nInput: None (The function takes no explicit parameters; it binds to a fixed port \"[::]:1024\")\n\nOutput: None (The function doesn't return any value; it runs indefinitely serving clients)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"golang.org/x/net/ipv6\"\n)\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp6\", \"[::]:1024\")\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\ttcpConn, ok := conn.(*net.TCPConn)\n\tif ok {\n\t\terr := tcpConn.SetTrafficClass(0x18) // Example: Set traffic class to 0x18 (DSCP EF PHB)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error setting traffic class:\", err)\n\t\t}\n\n\t\terr = tcpConn.SetTTL(64) // Example: Set hop limit (TTL) to 64\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error setting TTL:\", err)\n\t\t}\n\t}\n\n\tmessage := \"Acknowledgment message from server\\n\"\n\t_, err := conn.Write([]byte(message))\n\tif err != nil {\n\t\tfmt.Println(\"Error sending acknowledgment:\", err)\n\t}\n}"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Implement a gRPC client in Go that establishes a secure connection to a gRPC server with authentication, sends a request, and processes the response.\n\nFunction Description: The function `doClientWork` demonstrates how to create a gRPC client that connects to a server, authenticates using provided credentials, sends a \"Hello\" request, and logs the response. It handles connection setup, authentication, RPC call execution, and connection cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes, but these could be parameterized in a real implementation)\n\nOutput: None (The function logs results to stdout but doesn't return any values)\n\n---\n\nTask Description: Implement an authentication struct for gRPC credentials in Go that provides request metadata and specifies transport security requirements.\n\nStruct Description: The `Authentication` struct implements gRPC's `credentials.PerRPCCredentials` interface to provide per-RPC credentials (login/password) for gRPC requests.\n\nFields:\nLogin: string - The username for authentication\nPassword: string - The password for authentication\n\nMethods:\nGetRequestMetadata: (context.Context, ...string) -> (map[string]string, error) - Returns the authentication metadata (login/password) to be included in RPC requests\nRequireTransportSecurity: () -> bool - Indicates whether transport security is required (returns false in this implementation)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(context.Context, ...string) (map[string]string, error) {\n\treturn map[string]string{\"login\": a.Login, \"password\": a.Password}, nil\n}\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tauth := Authentication{\n\t\tLogin:    \"gopher\",\n\t\tPassword: \"password\",\n\t}\n\n\tconn, err := grpc.Dial(\"localhost\"+port, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&auth))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tc := NewGreeterClient(conn)\n\n\tr, err := c.SayHello(context.Background(), &HelloRequest{Name: \"gopher\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"doClientWork: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n\treturn map[string]string{\n\t\t\"login\":    a.Login,\n\t\t\"password\": a.Password,\n\t}, nil\n}\n\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tauth := &Authentication{\n\t\tLogin:    \"myuser\",\n\t\tPassword: \"mypassword\",\n\t}\n\n\tcreds := credentials.NewClientTLSFromCert(nil, \"\")\n\tconn, err := grpc.Dial(\n\t\t\"localhost:50051\",\n\t\tgrpc.WithTransportCredentials(creds),\n\t\tgrpc.WithPerRPCCredentials(auth),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewYourServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\treq := &HelloRequest{Name: \"World\"}\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Response: %s\", resp.Message)\n}"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Implement a gRPC client function in Go that establishes a bidirectional streaming connection with a gRPC server, sends a chat message, and continuously receives responses from the server until the connection is closed.\n\nFunction Description: The function `Test` is a test function that demonstrates bidirectional streaming gRPC communication. It connects to a gRPC server, sends a chat message, and asynchronously receives responses from the server. The function handles connection errors, stream creation errors, and different types of response errors (including EOF when the server closes the connection).\n\nInput: None (The function is a test function with no explicit input parameters, but it connects to a predefined server address \"127.0.0.1:8089\")\n\nOutput: None (The function doesn't return any value but prints received messages and errors to stdout)\n\nNote: The function uses a deferred connection closure and runs the send operation in a separate goroutine to allow simultaneous sending and receiving. The main loop continues receiving until an EOF error or other fatal error occurs.",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"io\"\n\t\"log\"\n\t\"testing\"\n\n\t\"learning_tools/grpc/bidirectional_streaming_rpc/proto\"\n)\nfunc Test(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tdefer conn.Close()\n\tclient := proto.NewChatServiceClient(conn)\n\tctx := context.Background()\n\tstream, err := client.Chat(ctx)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tgo func() {\n\t\tif err := stream.Send(&proto.Request{Input: \"\u804a\u5929\"}); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"\u670d\u52a1\u7aef\u7ed3\u675f\u901a\u77e5:\", err.Error())\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(\"\u63a5\u53d7\u6570\u636e\u9519\u8bef:\", err.Error())\n\t\t}\n\t\tfmt.Println(\"\u670d\u52a1\u7aef\u8fd4\u56de:\", response.Output)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your_package_name/proto\" // Replace with your actual proto package\n)\n\nfunc Test() {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewChatServiceClient(conn)\n\tstream, err := client.Chat(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to open stream: %v\", err)\n\t}\n\n\twaitc := make(chan struct{})\n\n\tgo func() {\n\t\tfor {\n\t\t\tin, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tclose(waitc)\n\t\t\t\tif err.Error() == \"EOF\" {\n\t\t\t\t\tfmt.Println(\"Server closed the connection\")\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Printf(\"Error receiving message: %v\\n\", err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %s\\n\", in.GetMessage())\n\t\t}\n\t}()\n\n\t// Send a test message\n\tmsg := &pb.ChatMessage{\n\t\tMessage: \"Hello from client\",\n\t}\n\tif err := stream.Send(msg); err != nil {\n\t\tfmt.Printf(\"Failed to send message: %v\\n\", err)\n\t}\n\n\t// Close the send direction of the stream (if needed)\n\tif err := stream.CloseSend(); err != nil {\n\t\tfmt.Printf(\"Failed to close send: %v\\n\", err)\n\t}\n\n\t<-waitc\n}"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Create a Go function that establishes a secure gRPC client connection to a server, performs a math operation (addition) using the gRPC service, and returns the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:8092 using TLS credentials from a specified certificate file. It creates a client for the MathService, sends a request with two integer arguments, and returns the server's response containing the result of the addition operation.\n\nInput: \n- None (all configuration is hardcoded in the function)\n\nOutput:\n- Prints the response code and message from the gRPC server to stdout\n- Returns nothing (void function)\n\nNote: The function handles connection establishment, service client creation, request sending, and connection cleanup automatically. Error conditions will cause the function to panic.",
    "Canonical_solution": "import (\n\t\"google.golang.org/grpc\"\n\t\"grpcSSLCode/message\"\n\t\"context\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"fmt\"\n\t\"google.golang.org/grpc/credentials\"\n)\nfunc main() {\n\tcreds, err := credentials.NewClientTLSFromFile(\"./keys/server.pem\", \"go-grpc-example\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tgrpc.WithInsecure()\n\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer conn.Close()\n\n\tserviceClient := message.NewMathServiceClient(conn)\n\n\taddArgs := message.RequestArgs{Args1: 3, Args2: 5}\n\n\tresponse, err := serviceClient.AddMethod(context.Background(), &addArgs)\n\tif err != nil {\n\t\tgrpclog.Fatal(err.Error())\n\t}\n\n\tfmt.Println(response.GetCode(), response.GetMessage())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\n// Assuming the generated protobuf types are available:\n// - MathServiceClient\n// - AddRequest\n// - AddResponse\n\nfunc performAddition() {\n\tcertFile := \"path/to/server.crt\" // Hardcoded certificate path\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(loadTLSCredentials(certFile)))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewMathServiceClient(conn)\n\treq := &AddRequest{A: 42, B: 13}\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tres, err := client.Add(ctx, req)\n\tif err != nil {\n\t\tlog.Fatalf(\"RPC failed: %v\", err)\n\t}\n\n\tfmt.Printf(\"Response Code: %d\\nMessage: %s\\n\", res.GetCode(), res.GetMessage())\n}\n\nfunc loadTLSCredentials(certFile string) credentials.TransportCredentials {\n\tcertPool := x509.NewCertPool()\n\tbs, err := ioutil.ReadFile(certFile)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to read certificate file: %v\", err)\n\t}\n\tif ok := certPool.AppendCertsFromPEM(bs); !ok {\n\t\tlog.Fatalf(\"Failed to append certificate\")\n\t}\n\n\tconfig := &tls.Config{\n\t\tRootCAs: certPool,\n\t}\n\n\treturn credentials.NewTLS(config)\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a Go client for interacting with Rancher metadata service, capable of making HTTP requests with custom headers and handling connection testing with exponential backoff.\n\nStruct Description: The Client struct represents a Rancher metadata client that manages HTTP connections to Rancher metadata service endpoints.\n\nFields:\nurl: string - The base URL for Rancher metadata service (default: \"http://rancher-metadata\")\nhttpClient: *http.Client - The HTTP client used for making requests\n\nMethods:\nNewRancherClient: (backendNodes []string) -> (*Client, error) - Creates a new Rancher client instance, optionally using the first backend node if provided, and tests the connection\nmakeMetaDataRequest: (path string) -> ([]byte, error) - Makes a GET request to the specified path with JSON accept header, returns response body\ntestConnection: () -> error - Tests the connection to the metadata service with exponential backoff retry logic (up to 20 seconds)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\turl := \"http://rancher-metadata\"\n\n\tif len(backendNodes) > 0 {\n\t\turl = \"http://\" + backendNodes[0]\n\t}\n\n\tclient := &Client{\n\t\turl:        url,\n\t\thttpClient: &http.Client{},\n\t}\n\n\terr := client.testConnection()\n\treturn client, err\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\treq, _ := http.NewRequest(\"GET\", strings.Join([]string{c.url, path}, \"\"), nil)\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\treturn ioutil.ReadAll(resp.Body)\n}\n\nfunc (c *Client) testConnection() error {\n\tvar err error\n\tmaxTime := 20 * time.Second\n\n\tfor i := 1 * time.Second; i < maxTime; i *= time.Duration(2) {\n\t\tif _, err = c.makeMetaDataRequest(\"/\"); err != nil {\n\t\t\ttime.Sleep(i)\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "right_result": "package rancher\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n)\n\nconst defaultMetadataURL = \"http://rancher-metadata\"\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\tclient := &Client{\n\t\thttpClient: &http.Client{\n\t\t\tTimeout: 10 * time.Second,\n\t\t},\n\t}\n\n\tif len(backendNodes) > 0 {\n\t\tclient.url = fmt.Sprintf(\"http://%s\", backendNodes[0])\n\t} else {\n\t\tclient.url = defaultMetadataURL\n\t}\n\n\tif err := client.testConnection(); err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to connect to Rancher metadata service\")\n\t}\n\n\treturn client, nil\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\tctx := context.Background()\n\treq, err := http.NewRequestWithContext(ctx, \"GET\", c.url+path, nil)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to create request\")\n\t}\n\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"request failed\")\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to read response body\")\n\t}\n\n\treturn body, nil\n}\n\nfunc (c *Client) testConnection() error {\n\tvar lastErr error\n\n\tfor i := 0; i < 5; i++ {\n\t\ttimeout := time.Duration(1<<uint(i)) * time.Second\n\t\tif timeout > 20*time.Second {\n\t\t\ttimeout = 20 * time.Second\n\t\t}\n\n\t\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\n\t\treq, err := http.NewRequestWithContext(ctx, \"GET\", c.url+\"/version\", nil)\n\t\tif err != nil {\n\t\t\tlastErr = errors.Wrap(err, \"failed to create version check request\")\n\t\t\ttime.Sleep(time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tresp, err := c.httpClient.Do(req)\n\t\tif err != nil {\n\t\t\tif ctx.Err() == context.DeadlineExceeded {\n\t\t\t\tlastErr = fmt.Errorf(\"connection timed out after %v\", timeout)\n\t\t\t} else {\n\t\t\t\tlastErr = errors.Wrap(err, \"connection attempt failed\")\n\t\t\t}\n\t\t\ttime.Sleep(time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tresp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\t\treturn nil\n\t\t}\n\n\t\tlastErr = fmt.Errorf(\"received unexpected status code: %d\", resp.StatusCode)\n\t\ttime.Sleep(time.Second)\n\t}\n\n\treturn lastErr\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a Go function that makes a gRPC call to a test service's EmptyCall method, handling connection establishment and cleanup.\n\nFunction Description: The function invokes the EmptyCall RPC method on a gRPC test service. It establishes a connection to the server with timeout and blocking options, makes the RPC call, and properly closes the connection. The function handles both connection errors and RPC call errors.\n\nInput:\n- address: string - The server address to connect to\n- dialOptions: []grpc.DialOption - List of gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tdialOptions = append(dialOptions, grpc.WithBlock())\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewTestServiceClient(clientConn)\n\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/stretchr/testify/mock/testpb\"\n)\n\nfunc emptyCallGRPC(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := testpb.NewTestServiceClient(conn)\n\tresp, err := client.EmptyCall(ctx, &testpb.Empty{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Implement a function to register a mapper with a gRPC server using the Device Management Interface (DMI) API. The function should establish a connection to the server, send a registration request, and return the list of devices and device models provided by the server.\n\nFunction Description: The `RegisterMapper` function connects to a gRPC server using Unix domain socket, sends a mapper registration request with the provided configuration, and returns the device and device model lists from the server response. It handles connection establishment, timeout context, and proper cleanup of resources.\n\nInput: \n- `withData` [bool]: A flag indicating whether to include data in the registration request.\n\nOutput:\n- `[]*dmiapi.Device`: A slice of pointers to Device objects returned by the server.\n- `[]*dmiapi.DeviceModel`: A slice of pointers to DeviceModel objects returned by the server.\n- `error`: An error object if any step fails, nil otherwise.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/common\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tresp, err := c.MapperRegister(ctx, &dmiapi.MapperRegisterRequest{\n\t\tWithData: withData,\n\t\tMapper: &dmiapi.MapperInfo{\n\t\t\tName:       cfg.Common.Name,\n\t\t\tVersion:    cfg.Common.Version,\n\t\t\tApiVersion: cfg.Common.APIVersion,\n\t\t\tProtocol:   cfg.Common.Protocol,\n\t\t\tAddress:    []byte(cfg.GrpcServer.SocketPath),\n\t\t\tState:      common.DeviceStatusOK,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.DeviceList, resp.ModelList, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/godbus/dbus/v5\"\n\tdmiapi \"path/to/dmiapi\" // Replace with actual import path\n)\n\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tconn, err := grpc.Dial(\"unix:///path/to/socket\", grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewMapperRegistrationClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\treq := &dmiapi.MapperRegistrationRequest{}\n\tif withData {\n\t\treq.Data = []byte(\"mapper-data-payload\") // Example data payload\n\t}\n\n\tresp, err := client.RegisterMapper(ctx, req)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.Devices, resp.DeviceModels, nil\n}"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Implement a gRPC client in Go that connects to a gRPC server over a Unix domain socket, retrieves configuration information, and manages base virtual machine instances.\n\nStruct Description: The grpccache struct represents a gRPC client cache that maintains a connection to a gRPC server and stores VM configuration information.\n\nFields:\nconn: *grpc.ClientConn - Maintains the active connection to the gRPC server\nconfig: *vc.VMConfig - Stores the virtual machine configuration obtained from the server\n\nMethods:\nNew: [Name](ctx context.Context, endpoint string) -> (base.FactoryBase, error) - Creates a new grpccache instance by establishing a connection to the gRPC server at the specified endpoint and retrieving the VM configuration.\nGetBaseVM: [Name](ctx context.Context, config vc.VMConfig) -> (*vc.VM, error) - Retrieves a base VM instance from the cache server and closes the connection when done. The method converts the gRPC response to a local VM object.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\n\ttypes \"github.com/gogo/protobuf/types\"\n\tpb \"github.com/kata-containers/runtime/protocols/cache\"\n\tvc \"github.com/kata-containers/runtime/virtcontainers\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\tconn, err := grpc.Dial(fmt.Sprintf(\"unix://%s\", endpoint), grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to connect %q\", endpoint)\n\t}\n\n\tjConfig, err := pb.NewCacheServiceClient(conn).Config(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to Config\")\n\t}\n\n\tconfig, err := vc.GrpcToVMConfig(jConfig)\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to convert JSON to VMConfig\")\n\t}\n\n\treturn &grpccache{conn: conn, config: config}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tdefer g.conn.Close()\n\tgVM, err := pb.NewCacheServiceClient(g.conn).GetBaseVM(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to GetBaseVM\")\n\t}\n\treturn vc.NewVMFromGrpc(ctx, gVM, *g.config)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tvc \"path/to/vmconfig\" // Replace with actual import path for vc package\n\tbase \"path/to/factorybase\" // Replace with actual import path for base package if needed\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\tctx, cancel := context.WithTimeout(ctx, 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, \"unix:\"+endpoint, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := vc.NewVMServiceClient(conn)\n\tresp, err := client.GetVMConfig(ctx, &vc.Empty{})\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\n\treturn &grpccache{\n\t\tconn:   conn,\n\t\tconfig: resp,\n\t}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tdefer g.conn.Close()\n\n\tclient := vc.NewVMServiceClient(g.conn)\n\tresp, err := client.GetBaseVM(ctx, &config)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvm := &vc.VM{\n\t\tId:       resp.Id,\n\t\tName:     resp.Name,\n\t\tState:    resp.State,\n\t\tCpu:      resp.Cpu,\n\t\tMemory:   resp.Memory,\n\t\tStorage:  resp.Storage,\n\t\tNetwork:  resp.Network,\n\t\tBootTime: resp.BootTime,\n\t}\n\n\treturn vm, nil\n}"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a remote server, performs profiling operations based on input flags, and handles connection cleanup.\n\nFunction Description: The function `remoteCommand` establishes an insecure gRPC connection to a specified address, creates a profiling client, and executes either profiling enable/disable operations or retrieves a snapshot based on command-line flags. It handles connection timeouts and ensures proper connection closure.\n\nInput:\n- Context (implicit through package variables)\n- Command-line flags (implicit through package variables):\n  - `flagAddress`: string - gRPC server address to connect to\n  - `flagTimeout`: int - connection timeout in seconds (0 for no timeout)\n  - `flagEnableProfiling`: bool - whether to enable profiling\n  - `flagDisableProfiling`: bool - whether to disable profiling\n  - `flagRetrieveSnapshot`: bool - whether to retrieve a snapshot\n  - `flagSnapshot`: string - snapshot identifier (when retrieving)\n\nOutput:\n- error - returns nil on success, or an error describing what went wrong during execution",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tppb \"google.golang.org/grpc/profiling/proto\"\n)\nfunc remoteCommand() error {\n\tctx := context.Background()\n\tif *flagTimeout > 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(context.Background(), time.Duration(*flagTimeout)*time.Second)\n\t\tdefer cancel()\n\t}\n\n\tlogger.Infof(\"dialing %s\", *flagAddress)\n\tcc, err := grpc.Dial(*flagAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Errorf(\"cannot dial %s: %v\", *flagAddress, err)\n\t\treturn err\n\t}\n\tdefer cc.Close()\n\n\tc := ppb.NewProfilingClient(cc)\n\n\tif *flagEnableProfiling || *flagDisableProfiling {\n\t\treturn setEnabled(ctx, c, *flagEnableProfiling)\n\t}\n\tif *flagRetrieveSnapshot {\n\t\treturn retrieveSnapshot(ctx, c, *flagSnapshot)\n\t}\n\treturn fmt.Errorf(\"what should I do with the remote target?\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/package/name/proto\" // Replace with actual proto package\n)\n\nvar (\n\tflagAddress           string\n\tflagTimeout           int\n\tflagEnableProfiling   bool\n\tflagDisableProfiling  bool\n\tflagRetrieveSnapshot  bool\n\tflagSnapshot          string\n)\n\nfunc remoteCommand() error {\n\tctx := context.Background()\n\tif flagTimeout > 0 {\n\t\tvar cancel context.CancelFunc\n\t\tctx, cancel = context.WithTimeout(ctx, time.Duration(flagTimeout)*time.Second)\n\t\tdefer cancel()\n\t}\n\n\tconn, err := grpc.DialContext(ctx, flagAddress, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewProfilingServiceClient(conn)\n\n\tswitch {\n\tcase flagEnableProfiling:\n\t\t_, err = client.EnableProfiling(ctx, &pb.EnableProfilingRequest{})\n\tcase flagDisableProfiling:\n\t\t_, err = client.DisableProfiling(ctx, &pb.DisableProfilingRequest{})\n\tcase flagRetrieveSnapshot:\n\t\t_, err = client.RetrieveSnapshot(ctx, &pb.RetrieveSnapshotRequest{SnapshotId: flagSnapshot})\n\tdefault:\n\t\treturn nil\n\t}\n\n\treturn err\n}"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, publishes messages, and handles connection cleanup.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, publishes two predefined messages, and ensures proper connection closure. It demonstrates basic gRPC client operations including connection establishment, RPC calls, and resource cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes)\n\nOutput: None (The function publishes messages to the server and logs errors if any occur)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/pubsub/proto\" // Update with actual proto package path\n)\n\nfunc publishMessages() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubSubServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\tmsg1 := &pb.Message{Content: \"Hello from gRPC client!\"}\n\t_, err = client.Publish(ctx, msg1)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to publish message 1: %v\", err)\n\t}\n\n\tmsg2 := &pb.Message{Content: \"This is another test message.\"}\n\t_, err = client.Publish(ctx, msg2)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to publish message 2: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC server for Google Pub/Sub emulator and initializes a Pub/Sub client using that connection.\n\nFunction Description: The function demonstrates how to set up a connection to a local gRPC server (Pub/Sub emulator) using insecure credentials, then creates a Pub/Sub client with the established connection. The client should be properly closed when no longer needed.\n\nInput: None (uses hardcoded values for demonstration purposes)\n\nOutput: None (function demonstrates setup pattern, actual Pub/Sub client is created but not used)\n\nNote: The function uses context.Background() for simplicity in the example, and hardcodes \"project\" as the Google Cloud project ID for demonstration purposes. In production code, these would typically be parameters.",
    "Canonical_solution": "import (\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n)\nfunc ExampleNewServer() {\n\tctx := context.Background()\n\tsrv := pstest.NewServer()\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t}\n\tclient, err := pubsub.NewClient(ctx, \"project\", option.WithGRPCConn(conn))\n\tif err != nil {\n\t}\n\tdefer client.Close()\n\t_ = client\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tpubsub \"cloud.google.com/go/pubsub/apiv1\"\n)\n\nfunc setupPubSubClient() {\n\tctx := context.Background()\n\n\t// Hardcoded emulator host and project ID for demonstration\n\temulatorHost := \"localhost:8085\"\n\tprojectID := \"project\"\n\n\t// Set up the gRPC connection to the Pub/Sub emulator\n\tconn, err := grpc.Dial(emulatorHost, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to Pub/Sub emulator: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\t// Create a Pub/Sub client using the established connection\n\tclient, err := pubsub.NewPublisherClient(ctx, projectID, option.WithGRPCConn(conn))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create Pub/Sub client: %v\", err)\n\t}\n\tdefer client.Close()\n\n\tfmt.Println(\"Pub/Sub client successfully created and will be closed after this message.\")\n\ttime.Sleep(2 * time.Second)\n}"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a Dragonfly daemon server over a Unix domain socket to download files from a specified URL to a local output path, with various download configuration options.\n\nFunction Description: The function establishes a gRPC connection to a Dragonfly daemon server running on a Unix domain socket, initiates a file download operation with specified parameters including authentication headers for S3 storage, and streams the download results until completion.\n\nInput:\n- ctx context.Context - Context for controlling the gRPC call lifecycle\n- unixSocketPath string - Path to the Unix domain socket (e.g., \"/run/dfdaemon.sock\")\n- downloadRequest *dfdaemonv1.DownRequest - Download request containing:\n  * Uuid: string - Unique identifier for the download\n  * Url: string - Source URL to download from\n  * Output: string - Local output path\n  * Recursive: bool - Whether to download recursively\n  * UrlMeta: *commonv1.UrlMeta - Metadata including S3 authentication headers\n  * Other download configuration parameters\n\nOutput:\n- map[string]*dfdaemonv1.DownResult - Map of download results keyed by output path\n- error - Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tdfdaemonv1 \"d7y.io/api/v2/pkg/apis/dfdaemon/v1\"\n)\nfunc main() {\n\tdialer := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", addr)\n\t}\n\n\tunixAddr := \"/run/dfdaemon.sock\"\n\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tunixAddr,\n\t\tgrpc.WithContextDialer(dialer),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tvar (\n\t\tclient = dfdaemonv1.NewDaemonClient(conn)\n\t\tctx    = context.Background()\n\t)\n\n\tdownloadClient, err := client.Download(ctx, &dfdaemonv1.DownRequest{\n\t\tUuid:              \"95305fa2-138b-4466-acec-62865ab6403c\",\n\t\tUrl:               \"s3://minio-test-bucket/dragonfly-test/usr/\" + *subDir,\n\t\tOutput:            \"/var/lib/dragonfly-grpc-test/usr/\" + *subDir,\n\t\tRecursive:         true,\n\t\tTimeout:           0,\n\t\tLimit:             0,\n\t\tDisableBackSource: false,\n\t\tUrlMeta: &commonv1.UrlMeta{\n\t\t\tDigest: \"\",\n\t\t\tTag:    \"\",\n\t\t\tRange:  \"\",\n\t\t\tFilter: \"Expires&Signature\",\n\t\t\tHeader: map[string]string{\n\t\t\t\t\"awsEndpoint\":         \"http://minio.dragonfly-e2e.svc:9000\",\n\t\t\t\t\"awsRegion\":           \"us-west-1\",\n\t\t\t\t\"awsAccessKeyID\":      \"root\",\n\t\t\t\t\"awsSecretAccessKey\":  \"password\",\n\t\t\t\t\"awsS3ForcePathStyle\": \"true\",\n\t\t\t},\n\t\t},\n\t\tUid:                1000,\n\t\tGid:                1000,\n\t\tKeepOriginalOffset: false,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tresults := map[string]*dfdaemonv1.DownResult{}\n\tfor {\n\t\tresp, err := downloadClient.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package grpcclient\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tdfdaemonv1 \"path/to/dfdaemonv1\" // Replace with actual import path\n)\n\n// DownloadFile establishes a gRPC connection to a Dragonfly daemon over Unix domain socket and initiates a download.\nfunc DownloadFile(ctx context.Context, unixSocketPath string, downloadRequest *dfdaemonv1.DownRequest) (map[string]*dfdaemonv1.DownResult, error) {\n\t// Set up connection to the Unix domain socket\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(\"unix://%s\", unixSocketPath),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {\n\t\t\treturn (&net.Dialer{}).DialContext(ctx, \"unix\", unixSocketPath)\n\t\t}),\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect to Dragonfly daemon: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := dfdaemonv1.NewDownloadServiceClient(conn)\n\n\t// Call the Download method\n\tstream, err := client.Download(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to initiate download: %w\", err)\n\t}\n\n\t// Send the initial download request\n\tif err := stream.Send(downloadRequest); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to send download request: %w\", err)\n\t}\n\n\tresults := make(map[string]*dfdaemonv1.DownResult)\n\n\t// Receive results from the server until the stream ends\n\tfor {\n\t\tresult, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tresults[result.Output] = result\n\t}\n\n\treturn results, nil\n}"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a function that connects to a gRPC server, retrieves pod information using the HyperD Public API, and returns the response.\n\nFunction Description: The function establishes an insecure connection to a gRPC server at the specified address, creates a Public API client, sends a PodInfoRequest for a specific pod ID, and returns the pod information response. The connection is automatically closed when the function completes.\n\nInput: \n- server string: The address of the gRPC server (e.g., \"localhost:50051\")\n- podID string: The ID of the pod to query (e.g., \"pod-zpIOTSAjmM\")\n\nOutput:\n- *types.PodInfoResponse: The response containing pod information\n- error: Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/hyperhq/hyperd/types\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure())\n\tif err != nil {\n\t\tfmt.Printf(\"Connect server error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\n\tclient := types.NewPublicAPIClient(conn)\n\trequest := types.PodInfoRequest{\n\t\tPodID: \"pod-zpIOTSAjmM\",\n\t}\n\tresponse, err := client.PodInfo(context.Background(), &request)\n\tif err != nil {\n\t\tfmt.Printf(\"Get PodInfo error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Got response: %v\", response)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/G-Node/hyperd/api/go-api/types\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc GetPodInfo(server string, podID string) (*types.PodInfoResponse, error) {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := types.NewPublicAPIClient(conn)\n\treq := &types.PodInfoRequest{PodId: podID}\n\n\tresp, err := client.PodInfo(context.Background(), req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Implement a gRPC client function in Go that reports device status to a gRPC server using a Unix domain socket connection.\n\nFunction Description: The function `ReportDeviceStatus` establishes a connection to a gRPC server through a Unix domain socket, sends a device status report request, and handles the response. It manages connection lifecycle including setup, error handling, and cleanup.\n\nInput: \n- request *dmiapi.ReportDeviceStatusRequest: A pointer to the gRPC request message containing device status information to be reported.\n\nOutput:\n- error: Returns an error if any step fails (connection establishment, RPC call, etc.), or nil if successful.\n\nNote: The function uses configuration from `config.Cfg()` to determine the Unix socket path and includes proper connection timeout handling.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\t_, err = c.ReportDeviceStatus(ctx, request)\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"your_project/dmiapi\"\n\t\"your_project/config\"\n)\n\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tsocketPath := config.Cfg().UnixSocketPath\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, \"unix:\"+socketPath, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewDeviceManagementServiceClient(conn)\n\tresp, err := client.ReportDeviceStatus(ctx, request)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Handle response if needed\n\t_ = resp\n\n\treturn nil\n}"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC metrics server, creates a client for the MetricsService, and prints the metrics retrieved from the server.\n\nFunction Description: The function connects to a gRPC server specified by the metricsServerAddress, initializes a MetricsService client, and prints the metrics. If the connection fails, it logs a fatal error. The connection is automatically closed when the function completes.\n\nInput: \n- metricsServerAddress: string - The address of the gRPC metrics server to connect to.\n- totalOnly: bool - A flag indicating whether to print only the total metrics or all metrics.\n\nOutput: None (prints metrics to the console or logs errors).",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tgrpclog.Fatalf(\"Metrics server address is empty.\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/metrics/proto\" // Replace with actual metrics proto package\n)\n\nfunc printMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.Dial(metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewMetricsServiceClient(conn)\n\tresp, err := client.GetMetrics(context.Background(), &pb.MetricsRequest{TotalOnly: totalOnly})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to retrieve metrics: %v\", err)\n\t}\n\n\tfmt.Println(\"Metrics:\")\n\tif totalOnly {\n\t\tfmt.Printf(\"Total Metrics Count: %d\\n\", resp.TotalCount)\n\t} else {\n\t\tfor _, metric := range resp.Metrics {\n\t\t\tfmt.Printf(\"%+v\\n\", metric)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and processes the response.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and logs the server's response or any errors encountered during the process.\n\nInput: \n- address: string - The server address in format \"host:port\" (default: \"localhost:50051\")\n- name: string - The name to send in the greeting request (default: \"world\")\n\nOutput:\n- None (directly logs results to console)\n- Side effect: Sends gRPC request and receives response",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"go.opencensus.io/examples/grpc/proto\"\n\t\"go.opencensus.io/plugin/ocgrpc\"\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"world\"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithStatsHandler(&ocgrpc.ClientHandler{}), grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Cannot connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Printf(\"Could not greet: %v\", err)\n\t} else {\n\t\tlog.Printf(\"Greeting: %s\", r.Message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n\t\"time\"\n\tpb \"path/to/your/greeter/proto\" // Update this path to your actual proto package\n)\n\nfunc greetServer(address string, name string) {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.GetMessage())\n}"
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Create a gRPC client in Go that connects to a RouteGuide service, performs various operations (getting features, listing features within a rectangle, recording a route, and conducting route chat), and handles secure/insecure connections.\n\nFunction Description: The main function establishes a connection to a gRPC server, creates a RouteGuide client, and demonstrates various service operations. It handles both secure (TLS) and insecure connections based on input flags.\n\nInput:\n- Command line flags (implicit):\n  - tls (bool): Whether to use TLS encryption\n  - serverHostOverride (string): Server name for certificate validation\n  - caFile (string): Path to CA certificate file\n  - serverAddr (string): Server address in format host:port\n\nOutput:\n- None (direct output to console/logger)\n- Side effects: Makes gRPC calls to server and prints results\n\nMethods called (from RouteGuideClient):\n1. printFeature(client, point) - Gets and prints a feature at given point\n2. printFeatures(client, rectangle) - Lists features within given rectangle\n3. runRecordRoute(client) - Records a route and prints statistics\n4. runRouteChat(client) - Conducts bidirectional route chat",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"io\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/credentials\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n\n\tprintFeature(client, &pb.Point{409146138, -746188906})\n\tprintFeature(client, &pb.Point{0, 0})\n\tprintFeatures(client, &pb.Rectangle{&pb.Point{400000000, -750000000}, &pb.Point{420000000, -730000000}})\n\trunRecordRoute(client)\n\trunRouteChat(client)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/examples/routeguide/routeguide\"\n)\n\nvar (\n\ttls                = flag.Bool(\"tls\", false, \"Connection uses TLS if true, else plain TCP\")\n\tserverAddr         = flag.String(\"server_addr\", \"localhost:10000\", \"The server address in the format of host:port\")\n\tserverHostOverride = flag.String(\"server_host_override\", \"x.test.youtube.com\", \"The server name used to verify the hostname returned by the TLS certificate\")\n\tcaFile             = flag.String(\"ca_file\", \"\", \"The absolute path to a CA certificate file\")\n)\n\nfunc printFeature(client routeguide.RouteGuideClient, point *routeguide.Point) {\n\tlog.Printf(\"Getting feature for point (%d, %d)\", point.Latitude, point.Longitude)\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tfeature, err := client.GetFeature(ctx, point)\n\tif err != nil {\n\t\tlog.Fatalf(\"client.GetFeature failed: %v\", err)\n\t}\n\tlog.Println(feature)\n}\n\nfunc printFeatures(client routeguide.RouteGuideClient, rect *routeguide.Rectangle) {\n\tlog.Printf(\"Looking for features within %v\", rect)\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.ListFeatures(ctx, rect)\n\tif err != nil {\n\t\tlog.Fatalf(\"client.ListFeatures failed: %v\", err)\n\t}\n\tfor {\n\t\tfeature, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"client.ListFeatures recv failed: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Feature: name: %q, point:(%v,%v)\", feature.GetName(), feature.GetLocation().GetLatitude(), feature.GetLocation().GetLongitude())\n\t}\n}\n\nfunc runRecordRoute(client routeguide.RouteGuideClient) {\n\tpoints := []*routeguide.Point{\n\t\t{Latitude: 409146138, Longitude: -746188906},\n\t\t{Latitude: 406957478, Longitude: -739440152},\n\t}\n\tlog.Printf(\"Recording route with %d points\", len(points))\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.RecordRoute(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"client.RecordRoute failed: %v\", err)\n\t}\n\tfor _, point := range points {\n\t\tif err := stream.Send(point); err != nil {\n\t\t\tlog.Fatalf(\"client.RecordRoute: Send() failed: %v\", err)\n\t\t}\n\t}\n\treply, err := stream.CloseAndRecv()\n\tif err != nil {\n\t\tlog.Fatalf(\"client.RecordRoute failed to receive: %v\", err)\n\t}\n\tlog.Printf(\"Summary: %v\", reply)\n}\n\nfunc runRouteChat(client routeguide.RouteGuideClient) {\n\tnotes := []*routeguide.RouteNote{\n\t\t{Name: \"First Message\", Location: &routeguide.Point{Latitude: 0, Longitude: 0}},\n\t\t{Name: \"Second Message\", Location: &routeguide.Point{Latitude: 0, Longitude: 1}},\n\t\t{Name: \"Third Message\", Location: &routeguide.Point{Latitude: 1, Longitude: 0}},\n\t\t{Name: \"Fourth Message\", Location: &routeguide.Point{Latitude: 0, Longitude: 0}},\n\t\t{Name: \"Fifth Message\", Location: &routeguide.Point{Latitude: 1, Longitude: 1}},\n\t}\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tstream, err := client.RouteChat(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"client.RouteChat failed: %v\", err)\n\t}\n\twaitc := make(chan struct{})\n\tgo func() {\n\t\tfor {\n\t\t\tin, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tclose(waitc)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"Got message %s at point(%d, %d)\", in.Message, in.Location.Latitude, in.Location.Longitude)\n\t\t}\n\t}()\n\tfor _, note := range notes {\n\t\tif err := stream.Send(note); err != nil {\n\t\t\tlog.Fatalf(\"client.RouteChat: Send() failed: %v\", err)\n\t\t}\n\t}\n\tstream.CloseSend()\n\t<-waitc\n}\n\nfunc newClientConn() *grpc.ClientConn {\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tcreds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\treturn conn\n}\n\nfunc main() {\n\tflag.Parse()\n\tconn := newClientConn()\n\tdefer conn.Close()\n\n\tclient := routeguide.NewRouteGuideClient(conn)\n\n\tprintFeature(client, &routeguide.Point{Latitude: 409146138, Longitude: -746188906})\n\tfmt.Println(\"\\n--------------------------------------------------------------\\n\")\n\n\trect := &routeguide.Rectangle{\n\t\tLo: &routeguide.Point{Latitude: 400000000, Longitude: -750000000},\n\t\tHi: &routeguide.Point{Latitude: 420000000, Longitude: -730000000},\n\t}\n\tprintFeatures(client, rect)\n\tfmt.Println(\"\\n--------------------------------------------------------------\\n\")\n\n\trunRecordRoute(client)\n\tfmt.Println(\"\\n--------------------------------------------------------------\\n\")\n\n\trunRouteChat(client)\n\tfmt.Println(\"\\n--------------------------------------------------------------\\n\")\n}"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a server, invokes an empty call RPC method, and returns the response.\n\nFunction Description: The function `invokeEmptyCall` connects to a gRPC server at the specified address, creates a client for the EmptyService, makes an empty call RPC, and returns the response. It handles connection establishment and cleanup, including context timeout and connection closure.\n\nInput: \n- address: string - The address of the gRPC server to connect to\n- dialOptions: variadic grpc.DialOption - Optional gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during the connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), testTimeout)\n\tdefer cancel()\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewEmptyServiceClient(clientConn)\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"your/package/path/testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := testpb.NewEmptyServiceClient(conn)\n\tresp, err := client.EmptyCall(ctx, &testpb.Empty{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and receives a response.\n\nFunction Description: The function establishes a connection to a gRPC server using the provided address, creates a client for the HelloService, sends a HelloRequest with the specified name, and returns the server's response. It handles connection errors and timeout contexts.\n\nInput:\n- addr: string - The address of the gRPC server to connect to (e.g., \"127.0.0.1:8972\")\n- name: string - The name to include in the greeting request\n\nOutput:\n- string - The greeting response from the server\n- error - Any error that occurred during the process\n\nNote: The function should properly close the connection when done and handle context timeouts.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"hello_grpc_client/proto\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &proto.HelloRequest{\n\t\tName: *name,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/protobuf/package\"\n)\n\nfunc greetServer(addr string, name string) (string, error) {\n\tconn, err := grpc.Dial(addr, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\treq := &pb.HelloRequest{Name: name}\n\tres, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn res.Message, nil\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and properly handle the connection lifecycle.\n\nFunction Description: The function tests gRPC client functionality by connecting to a user authentication service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper gRPC connection management and metadata handling.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None directly returned, but prints authentication tokens to stdout\n- Returns error if connection or RPC calls fail\n\nNote: The function includes error handling and connection cleanup via defer. It uses metadata to pass a UUID for request tracking and demonstrates multiple RPC calls in a loop.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/src\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\n// Assume the following proto-generated code exists:\n// type AuthServiceClient interface {\n// \tLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)\n// }\n// type LoginRequest struct {\n// \tAccount  string\n// \tPassword string\n// }\n\nfunc testGRPCClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect to gRPC server: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewAuthServiceClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\tuuid := generateUUID()\n\t\tctx := metadata.NewOutgoingContext(\n\t\t\tcontext.Background(),\n\t\t\tmetadata.Pairs(\"request-id\", uuid),\n\t\t)\n\n\t\treq := &LoginRequest{\n\t\t\tAccount:  account,\n\t\t\tPassword: password,\n\t\t}\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"RPC call failed (attempt %d): %v\", i+1, err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Authentication token received (Request ID: %s): %s\\n\", uuid, resp.Token)\n\t\ttime.Sleep(500 * time.Millisecond)\n\t}\n\n\treturn nil\n}\n\nfunc generateUUID() string {\n\t// Simplified UUID generation for demonstration purposes\n\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"\n}"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, publishes messages, and handles connection cleanup.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client for the PubsubService, publishes two predefined messages, and ensures proper connection closure. The function handles potential connection errors and publishing failures.\n\nInput: None (The target server address is hardcoded as \"localhost:1234\" and messages are predefined)\n\nOutput: None (The function performs side effects by publishing messages to the gRPC server and may terminate the program on errors)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"ch4.4-3/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\tpb \"path/to/your/pubsub/proto\" // Update with actual proto package path\n\t\"google.golang.org/grpc\"\n)\n\nfunc publishMessages() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to gRPC server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\tmsg1 := &pb.Message{Content: \"Hello from Go client!\", Topic: \"greetings\"}\n\tmsg2 := &pb.Message{Content: \"This is a test message.\", Topic: \"tests\"}\n\n\tfor i, msg := range []*pb.Message{msg1, msg2} {\n\t\tresp, err := client.Publish(context.Background(), msg)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to publish message %d: %v\", i+1, err)\n\t\t}\n\t\tlog.Printf(\"Published message %d, response: %s\", i+1, resp.GetStatus())\n\t}\n}"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and handle the responses.\n\nFunction Description: The function tests a gRPC client implementation by connecting to a user service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper connection handling, metadata usage, and error handling in gRPC communications.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None (prints tokens to stdout)\n- Returns error if connection or RPC fails\n\nNote: The function includes proper connection cleanup using defer and demonstrates metadata handling for request tracing.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/utils\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/user_agent/pb\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\n// Assuming the service and message definitions exist\ntype UserServiceClient interface {\n\tLogin(context.Context, *LoginRequest) (*LoginResponse, error)\n}\n\ntype LoginRequest struct {\n\tAccount  string `protobuf:\"bytes,1,opt,name=account,proto3\" json:\"account,omitempty\"`\n\tPassword string `protobuf:\"bytes,2,opt,name=password,proto3\" json:\"password,omitempty\"`\n}\n\ntype LoginResponse struct {\n\tToken string `protobuf:\"bytes,1,opt,name=token,proto3\" json:\"token,omitempty\"`\n}\n\nfunc testGrpcClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := &userServiceClient{conn}\n\n\tfor i := 0; i < testCount; i++ {\n\t\tctx := metadata.AppendToOutgoingContext(context.Background(), \"uuid\", fmt.Sprintf(\"req-%d\", i+1))\n\n\t\treq := &LoginRequest{\n\t\t\tAccount:  account,\n\t\t\tPassword: password,\n\t\t}\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"RPC failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Received token: %s\\n\", resp.Token)\n\t}\n\n\treturn nil\n}\n\ntype userServiceClient struct {\n\tconn *grpc.ClientConn\n}\n\nfunc (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {\n\tout := new(LoginResponse)\n\terr := c.conn.Invoke(ctx, \"/UserService/Login\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a function that tests a gRPC client connection to a user authentication service, sends multiple login requests, and prints the received authentication tokens.\n\nFunction Description: The function establishes an insecure gRPC connection to a specified server address, creates a user client, and sends 20 consecutive login requests with metadata containing a UUID. Each successful response's token is printed, while errors cause immediate termination.\n\nInput: None (The service address is hardcoded as \"127.0.0.1:8881\" and login credentials are fixed as account \"hwholiday\" and password \"123456\")\n\nOutput: None (The function prints tokens to stdout and may return early on error through testing.T's Error method)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\n// Assuming these are the generated protobuf types\ntype UserClient interface {\n\tLogin(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)\n}\n\ntype LoginRequest struct {\n\tAccount  string `protobuf:\"bytes,1,opt,name=account,proto3\" json:\"account,omitempty\"`\n\tPassword string `protobuf:\"bytes,2,opt,name=password,proto3\" json:\"password,omitempty\"`\n}\n\ntype LoginResponse struct {\n\tToken string `protobuf:\"bytes,1,opt,name=token,proto3\" json:\"token,omitempty\"`\n}\n\nfunc testUserLogin(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8881\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(time.Second*5))\n\tif err != nil {\n\t\tt.Error(\"Failed to connect:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := UserClient(conn)\n\n\treq := &LoginRequest{\n\t\tAccount:  \"hwholiday\",\n\t\tPassword: \"123456\",\n\t}\n\n\tfor i := 0; i < 20; i++ {\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\n\t\t\t\"uuid\", \"test-uuid-\"+fmt.Sprintf(\"%02d\", i+1),\n\t\t))\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tt.Error(\"Login failed:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Println(\"Received token:\", resp.Token)\n\t}\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Implement a Go struct that interacts with the Pinecone vector database to upsert embeddings and retrieve similar vectors using HTTP requests with custom headers.\n\nStruct Description: The Pinecone struct represents a client for interacting with the Pinecone vector database API. It handles authentication, request construction, and response processing for vector operations.\n\nFields:\nEndpoint: string - The base URL of the Pinecone API endpoint\nApiKey: string - The API key used for authentication with Pinecone\n\nMethods:\nNew: [endpoint string, apiKey string] -> [*Pinecone, error] - Creates a new Pinecone client instance with the given endpoint and API key\n\nUpsertEmbeddings: [embeddings [][]float32, chunks []chunk.Chunk, uuid string] -> [error] - Upserts multiple embeddings into Pinecone in batches, with associated metadata from chunks, under the specified namespace UUID\n\nRetrieve: [questionEmbedding []float32, topK int, uuid string] -> [[]vectordb.QueryMatch, error] - Retrieves the topK most similar vectors to the questionEmbedding from the specified namespace UUID",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/pashpashpash/vault/chunk\"\n\t\"github.com/pashpashpash/vault/vectordb\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint string, apiKey string) (*Pinecone, error) {\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []chunk.Chunk, uuid string) error {\n\turl := p.Endpoint + \"/vectors/upsert\"\n\n\tvectors := make([]PineconeVector, len(embeddings))\n\tfor i, embedding := range embeddings {\n\t\tchunk := chunks[i]\n\t\tvectors[i] = PineconeVector{\n\t\t\tID:     fmt.Sprintf(\"id-%d\", i),\n\t\t\tValues: embedding,\n\t\t\tMetadata: map[string]string{\n\t\t\t\t\"file_name\": chunk.Title,\n\t\t\t\t\"start\":     strconv.Itoa(chunk.Start),\n\t\t\t\t\"end\":       strconv.Itoa(chunk.End),\n\t\t\t\t\"title\":     chunk.Title,\n\t\t\t\t\"text\":      chunk.Text,\n\t\t\t},\n\t\t}\n\t}\n\n\tmaxVectorsPerRequest := 100\n\n\tfor i := 0; i < len(vectors); i += maxVectorsPerRequest {\n\t\tend := i + maxVectorsPerRequest\n\t\tif end > len(vectors) {\n\t\t\tend = len(vectors)\n\t\t}\n\n\t\trequestBody, err := json.Marshal(struct {\n\t\t\tVectors   []PineconeVector `json:\"vectors\"`\n\t\t\tNamespace string           `json:\"namespace\"`\n\t\t}{\n\t\t\tVectors:   vectors[i:end],\n\t\t\tNamespace: uuid,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(requestBody))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\t\treturn errors.New(string(body))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]vectordb.QueryMatch, error) {\n\trequestBody, _ := json.Marshal(PineconeQueryRequest{\n\t\tTopK:            topK,\n\t\tIncludeMetadata: true,\n\t\tNamespace:       uuid,\n\t\tQueries: []PineconeQueryItem{\n\t\t\t{\n\t\t\t\tValues: questionEmbedding,\n\t\t\t},\n\t\t},\n\t})\n\n\tpineconeIndexURL := p.Endpoint + \"/query\"\n\treq, _ := http.NewRequest(\"POST\", pineconeIndexURL, bytes.NewBuffer(requestBody))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tvar pineconeQueryResponse PineconeQueryResponse\n\tjson.Unmarshal(body, &pineconeQueryResponse)\n\n\tif len(pineconeQueryResponse.Results) > 0 {\n\t\treturn pineconeQueryResponse.Results[0].Matches, nil\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "right_result": "package pinecone\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\ntype Chunk struct {\n\tText string `json:\"text\"`\n}\n\ntype Vector struct {\n\tID       string                 `json:\"id\"`\n\tValues   []float32              `json:\"values\"`\n\tMetadata map[string]interface{} `json:\"metadata\"`\n}\n\ntype UpsertRequest struct {\n\tVectors []Vector `json:\"vectors\"`\n}\n\ntype QueryRequest struct {\n\tVector  []float32 `json:\"vector\"`\n\tTopK    int       `json:\"topK\"`\n\tIncludeMetadata bool   `json:\"includeMetadata\"`\n\tNamespace string  `json:\"namespace\"`\n}\n\ntype QueryMatch struct {\n\tID        string                 `json:\"id\"`\n\tScore     float32                `json:\"score\"`\n\tMetadata  map[string]interface{} `json:\"metadata\"`\n}\n\ntype QueryResponse struct {\n\tMatches []QueryMatch `json:\"matches\"`\n}\n\nfunc New(endpoint string, apiKey string) (*Pinecone, error) {\n\tif endpoint == \"\" || apiKey == \"\" {\n\t\treturn nil, errors.New(\"endpoint and api key are required\")\n\t}\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []Chunk, uuid string) error {\n\tif len(embeddings) != len(chunks) {\n\t\treturn fmt.Errorf(\"embeddings and chunks must have the same length\")\n\t}\n\n\tbatchSize := 100\n\ttotal := len(embeddings)\n\n\tfor i := 0; i < total; i += batchSize {\n\t\tend := i + batchSize\n\t\tif end > total {\n\t\t\tend = total\n\t\t}\n\n\t\tvectors := make([]Vector, 0, end-i)\n\t\tfor j := i; j < end; j++ {\n\t\t\tvectorID := fmt.Sprintf(\"%d\", j)\n\t\t\tmetadata := map[string]interface{}{\n\t\t\t\t\"text\": chunks[j].Text,\n\t\t\t}\n\t\t\tvectors = append(vectors, Vector{\n\t\t\t\tID:       vectorID,\n\t\t\t\tValues:   embeddings[j],\n\t\t\t\tMetadata: metadata,\n\t\t\t})\n\t\t}\n\n\t\treqBody, _ := json.Marshal(UpsertRequest{Vectors: vectors})\n\t\treq, err := http.NewRequestWithContext(context.Background(), \"POST\", p.Endpoint+\"/vectors/upsert\", bytes.NewBuffer(reqBody))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\t\treq.Header.Set(\"Accept\", \"*/*\")\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusAccepted {\n\t\t\tbodyBytes, _ := ioutil.ReadAll(resp.Body)\n\t\t\treturn fmt.Errorf(\"upsert failed with status %d: %s\", resp.StatusCode, string(bodyBytes))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]QueryMatch, error) {\n\treqBody, _ := json.Marshal(QueryRequest{\n\t\tVector:  questionEmbedding,\n\t\tTopK:    topK,\n\t\tIncludeMetadata: true,\n\t\tNamespace: uuid,\n\t})\n\n\treq, err := http.NewRequestWithContext(context.Background(), \"POST\", p.Endpoint+\"/query\", bytes.NewBuffer(reqBody))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\treq.Header.Set(\"Accept\", \"*/*\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbodyBytes, _ := ioutil.ReadAll(resp.Body)\n\t\treturn nil, fmt.Errorf(\"retrieve failed with status %d: %s\", resp.StatusCode, string(bodyBytes))\n\t}\n\n\tvar queryResponse QueryResponse\n\tif err := json.NewDecoder(resp.Body).Decode(&queryResponse); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn queryResponse.Matches, nil\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Write a Go function that tests the version retrieval functionality of a gRPC service using the Stripe CLI client. The function should establish a connection to the gRPC server, call the Version method, and verify the response matches the expected version.\n\nFunction Description: The function `TestVersionReturnsCLIVersion` is a test function that verifies the version information returned by a gRPC service. It establishes an authenticated connection to a gRPC server, calls the Version RPC method, and checks that the returned version matches the expected value (\"master\"). The connection is properly closed after the test completes.\n\nInput: \n- `t *testing.T`: The testing context provided by Go's testing framework for reporting test failures and logging.\n- Implicit context from `withAuth(context.Background())`: An authenticated context for the gRPC call.\n\nOutput: \n- The function does not return any value but will fail the test if any of the following occur:\n  - The gRPC connection cannot be established\n  - The Version RPC call fails\n  - The returned version does not match the expected value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Version(ctx, &rpc.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version failed: %v\", err)\n\t}\n\n\texpected := rpc.VersionResponse{\n\t\tVersion: \"master\",\n\t}\n\n\tassert.Equal(t, expected.Version, resp.Version)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/stretchr/testify/assert\"\n\tpb \"path/to/your/grpc/service/proto\" // Update with actual proto package path\n\t\"somecompany.com/stripe-cli/client\"  // Hypothetical import for Stripe CLI client\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect to gRPC server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewYourServiceClient(conn)\n\tctx := withAuth(context.Background()) // Assuming withAuth is a defined function that injects auth into context\n\n\tresp, err := client.Version(ctx, &pb.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version RPC failed: %v\", err)\n\t}\n\n\tassert.Equal(t, \"master\", resp.GetVersion(), \"The returned version does not match the expected value\")\n}"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: The task involves creating a gRPC client in Go that connects to a CloudSlack service, establishes a bidirectional stream, and handles incoming events while managing connection lifecycle and errors.\n\nFunction Description: The `start` function initializes a gRPC connection to a CloudSlack server, establishes a bidirectional stream for communication, sends a connection request, and continuously listens for incoming events. It handles connection errors, server closures, and context cancellations appropriately.\n\nInput: \n- `ctx context.Context`: The context for managing the lifecycle of the gRPC connection and handling cancellations.\n- The function also relies on the struct's fields (`log`, `cfg`, `client`, `commGroupMetadata`, `clusterName`, and `botID`) for configuration and logging.\n\nOutput: \n- `error`: Returns an error if any step in the connection or communication process fails, including gRPC connection errors, credential errors, or stream errors. Returns nil if the context is canceled gracefully.\n\nNote: The function uses deferred calls to ensure proper cleanup of resources (closing the gRPC connection and stream) and includes detailed error handling for various gRPC-specific scenarios.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"github.com/kubeshop/botkube/pkg/api/cloudslack\"\n\t\"github.com/kubeshop/botkube/pkg/grpcx\"\n\t\"github.com/kubeshop/botkube/pkg/config\"\n\t\"github.com/kubeshop/botkube/pkg/api/cloudplatform\"\n\t\"github.com/kubeshop/botkube/internal/config/remote\"\n)\n\ntype CloudSlack struct {\n\tlog               logrus.FieldLogger\n\tcfg               config.CloudSlack\n\tclient            *slack.Client\n\tcommGroupMetadata CommGroupMetadata\n\tclusterName       string\n}\n\nfunc (b *CloudSlack) start(ctx context.Context) error {\n\tremoteConfig, ok := remote.GetConfig()\n\tif !ok {\n\t\treturn fmt.Errorf(\"while getting remote config for %s\", config.CloudSlackCommPlatformIntegration)\n\t}\n\n\tcreds, err := grpcx.ClientTransportCredentials(b.log, b.cfg.Server)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC credentials: %w\", err)\n\t}\n\n\topts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(creds),\n\t\tgrpc.WithStreamInterceptor(cloudplatform.AddStreamingClientCredentials(remoteConfig)),\n\t\tgrpc.WithUnaryInterceptor(cloudplatform.AddUnaryClientCredentials(remoteConfig)),\n\t}\n\n\tconn, err := grpc.Dial(b.cfg.Server.URL, opts...)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC connection: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\treq := &pb.ConnectRequest{\n\t\tInstanceId: remoteConfig.Identifier,\n\t\tBotId:      b.botID,\n\t}\n\tc, err := pb.NewCloudSlackClient(conn).Connect(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while initializing gRPC cloud client: %w\", err)\n\t}\n\tdefer func(c pb.CloudSlack_ConnectClient) {\n\t\terr := c.CloseSend()\n\t\tif err != nil {\n\t\t\tb.log.Errorf(\"while closing connection: %s\", err.Error())\n\t\t}\n\t}(c)\n\n\terr = c.Send(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while sending gRPC connection request. %w\", err)\n\t}\n\n\tfor {\n\t\tdata, err := c.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tb.log.Warn(\"gRPC connection was closed by server\")\n\t\t\t\treturn errors.New(\"gRPC connection closed\")\n\t\t\t}\n\t\t\terrStatus, ok := status.FromError(err)\n\t\t\tif ok && errStatus.Code() == codes.Canceled && errStatus.Message() == context.Canceled.Error() {\n\t\t\t\tb.log.Debugf(\"Context was cancelled. Skipping returning error...\")\n\t\t\t\treturn fmt.Errorf(\"while resolving error from gRPC response %s\", errStatus.Err())\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"while receiving cloud slack events: %w\", err)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"github.com/sirupsen/logrus\"\n)\n\ntype CloudSlackClient struct {\n\tlog               *logrus.Logger\n\tcfg               Config\n\tclient            CloudSlackServiceClient\n\tcommGroupMetadata map[string]string\n\tclusterName       string\n\tbotID             string\n}\n\nfunc (c *CloudSlackClient) start(ctx context.Context) error {\n\tvar conn *grpc.ClientConn\n\tvar stream CloudSlackService_BidirectionalStreamClient\n\tvar err error\n\n\t// Set up connection credentials\n\tcreds, err := credentials.NewClientTLSFromFile(c.cfg.CertFile, \"\")\n\tif err != nil {\n\t\tc.log.Errorf(\"Failed to create TLS credentials: %v\", err)\n\t\treturn fmt.Errorf(\"failed to load client TLS credentials: %w\", err)\n\t}\n\n\t// Establish gRPC connection with retry logic\n\tconnAttempts := 0\n\tfor {\n\t\tconn, err = grpc.DialContext(\n\t\t\tctx,\n\t\t\tfmt.Sprintf(\"%s:%d\", c.cfg.Host, c.cfg.Port),\n\t\t\tgrpc.WithTransportCredentials(creds),\n\t\t\tgrpc.WithBlock(),\n\t\t)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tconnAttempts++\n\t\tif connAttempts > c.cfg.MaxRetries {\n\t\t\tc.log.Errorf(\"Failed to connect to CloudSlack after %d attempts: %v\", c.cfg.MaxRetries, err)\n\t\t\treturn fmt.Errorf(\"failed to establish gRPC connection: %w\", err)\n\t\t}\n\t\tc.log.Warnf(\"Connection attempt %d failed, retrying in %v...\", connAttempts, c.cfg.RetryDelay)\n\t\tselect {\n\t\tcase <-time.After(c.cfg.RetryDelay):\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\t}\n\t}\n\tdefer conn.Close()\n\n\t// Create the gRPC client\n\tc.client = NewCloudSlackServiceClient(conn)\n\n\t// Create bidirectional stream\n\tstream, err = c.client.BidirectionalStream(ctx)\n\tif err != nil {\n\t\tc.log.Errorf(\"Failed to create bidirectional stream: %v\", err)\n\t\treturn fmt.Errorf(\"failed to create stream: %w\", err)\n\t}\n\n\t// Prepare and send initial connection request\n\treq := &ConnectionRequest{\n\t\tMetadata:        c.commGroupMetadata,\n\t\tClusterName:     c.clusterName,\n\t\tBotId:           c.botID,\n\t\tTimestamp:       time.Now().UnixNano(),\n\t}\n\n\tif err := stream.Send(req); err != nil {\n\t\tc.log.Errorf(\"Failed to send connection request: %v\", err)\n\t\treturn fmt.Errorf(\"failed to send connection request: %w\", err)\n\t}\n\n\t// Channel to synchronize goroutines\n\tdone := make(chan struct{})\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\tresp, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tc.log.Errorf(\"Stream receive error: %v\", err)\n\t\t\t\tif status.Code(err) == codes.Unavailable || status.Code(err) == codes.Internal {\n\t\t\t\t\tc.handleReconnect(ctx)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif resp == nil {\n\t\t\t\tc.log.Warn(\"Received nil response from server\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tc.processIncomingEvent(resp)\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\n\t// Context canceled, gracefully shutdown\n\tc.log.Info(\"Shutting down CloudSlack client due to context cancellation\")\n\n\t// Attempt graceful stream closure\n\tif err := stream.CloseSend(); err != nil {\n\t\tc.log.Warnf(\"Error closing stream send direction: %v\", err)\n\t}\n\n\t// Wait for the receiving goroutine to finish\n\t<-done\n\n\treturn nil\n}\n\nfunc (c *CloudSlackClient) handleReconnect(ctx context.Context) {\n\tc.log.Warn(\"Initiating reconnection logic...\")\n\t// Implement reconnection logic here\n\t// This could involve:\n\t// - Backoff strategies\n\t// - Updating connection state\n\t// - Notifying other components of connectivity issues\n\t// - Attempting to re-establish connection\n}\n\nfunc (c *CloudSlackClient) processIncomingEvent(event *Event) {\n\t// Process incoming event logic here\n\tc.log.Infof(\"Processing event: %s\", event.Type)\n\t// Handle different event types\n\tswitch event.Type {\n\tcase \"message\":\n\t\tc.handleMessage(event.Payload)\n\tcase \"presence_update\":\n\t\tc.handlePresenceUpdate(event.Payload)\n\t// Add more cases as needed\n\tdefault:\n\t\tc.log.Warnf(\"Unknown event type received: %s\", event.Type)\n\t}\n}\n\nfunc (c *CloudSlackClient) handleMessage(payload []byte) {\n\t// Message handling implementation\n}\n\nfunc (c *CloudSlackClient) handlePresenceUpdate(payload []byte) {\n\t// Presence update handling implementation\n}"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, subscribes to a specific topic, and continuously receives messages from the subscribed topic until the stream ends or an error occurs.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, and subscribes to a topic specified by the input string. It then enters a loop to receive messages from the subscribed topic, printing each message until the stream is closed or an error occurs. The connection is automatically closed when the function completes.\n\nInput: \n- topic string: The topic to subscribe to (e.g., \"golang:\")\n\nOutput: \n- None (messages are printed to stdout)\n- Errors: Any connection or stream errors will cause the function to terminate and log the error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\tstream, err := client.Subscribe(context.Background(), &pb.String{Value: \"golang:\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\tpb \"path/to/your/pubsub/proto\" // Replace with actual proto package path\n\t\"google.golang.org/grpc\"\n)\n\nfunc subscribeToTopic(topic string) {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubSubClient(conn)\n\n\treq := &pb.SubscribeRequest{\n\t\tTopic: topic,\n\t}\n\n\tstream, err := client.Subscribe(context.Background(), req)\n\tif err != nil {\n\t\tlog.Fatalf(\"error subscribing: %v\", err)\n\t}\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"error receiving message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\"Received message: %s\\n\", msg.Payload)\n\t}\n}"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC server for Google Pub/Sub emulator testing, creates a Pub/Sub client, and properly handles resource cleanup.\n\nFunction Description: The function demonstrates how to set up a testing environment for Google Pub/Sub using the pstest server (in-memory emulator). It creates a gRPC connection to the emulator server, initializes a Pub/Sub client with this connection, and ensures all resources are properly closed when done. This is typically used for local testing and development.\n\nInput: None (The function takes no parameters as it's a self-contained example)\n\nOutput: None (The function doesn't return anything as it's a demonstration, though it creates and manages a Pub/Sub client instance)",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n)\nfunc ExampleNewServer() {\n\tctx := context.Background()\n\tsrv := pstest.NewServer()\n\tdefer srv.Close()\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t}\n\tdefer conn.Close()\n\tclient, err := pubsub.NewClient(ctx, \"project\", option.WithGRPCConn(conn))\n\tif err != nil {\n\t}\n\tdefer client.Close()\n\t_ = client\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\tpb \"cloud.google.com/go/pubsub/apiv1\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc setupPubSubTestEnvironment() {\n\tctx := context.Background()\n\n\t// Start the local Pub/Sub emulator server\n\tsrv := pstest.NewServer()\n\tdefer srv.Close()\n\n\t// Create a gRPC connection to the emulator\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to emulator: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\t// Create a Pub/Sub client using the gRPC connection\n\tclient, err := pb.NewPublisherClient(ctx, option.WithGRPCConn(conn))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create Pub/Sub client: %v\", err)\n\t}\n\tdefer client.Close()\n\n\t// Example: List topics (to verify connectivity)\n\treq := &pb.ListTopicsRequest{\n\t\tProject: \"projects/my-project\",\n\t}\n\ttopics, err := client.ListTopics(ctx, req)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error listing topics: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"Found %d topics:\\n\", len(topics.Topics))\n\tfor _, topic := range topics.Topics {\n\t\tfmt.Println(topic.Name)\n\t}\n}"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Implement a gRPC client function in Go that connects to a gRPC server, performs unary and streaming RPCs, and handles communication with the server.\n\nFunction Description: The function `doClientWork` establishes a connection to a gRPC server, performs a unary RPC call (`Hello`), and then sets up bidirectional streaming (`Channel`). It sends messages periodically in one goroutine while receiving messages in the main goroutine.\n\nInput: None (The server address is hardcoded as \"localhost:1234\")\n\nOutput: None (The function prints received messages to stdout and logs errors to stderr)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(reply.GetValue())\n\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tif err := stream.Send(&String{Value: \"hi\"}); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}()\n\n\tfor {\n\t\tlog.Println(222)\n\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/protobuf/package\"\n)\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewYourServiceClient(conn)\n\n\t// Unary RPC\n\tfunc() {\n\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\t\tdefer cancel()\n\t\tresp, err := client.Hello(ctx, &pb.HelloRequest{Message: \"Hello from client\"})\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Hello failed: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"Received from unary Hello: %s\\n\", resp.GetMessage())\n\t}()\n\n\t// Bidirectional Streaming\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to open channel: %v\", err)\n\t}\n\n\t// Goroutine to send messages periodically\n\tgo func() {\n\t\tticker := time.NewTicker(2 * time.Second)\n\t\tdefer ticker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\terr := stream.Send(&pb.StreamRequest{Message: \"Ping from client\"})\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Send error: %v\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-time.After(10 * time.Second): // Stop after 10 seconds for demo purposes\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Main goroutine to receive messages\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Recv error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\"Received from stream: %s\\n\", resp.GetMessage())\n\t}\n}"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a function to test gRPC client functionality for user login using Go's gRPC package. The function should establish a connection to a gRPC server, send multiple login requests with metadata, and handle responses.\n\nFunction Description: The function tests the gRPC client's ability to communicate with a user service. It establishes an insecure connection to the specified server address, creates a client instance, and sends 20 consecutive login requests with generated UUID metadata. Each request uses the same account credentials and prints the received authentication token.\n\nInput: None (The function is a test function with hardcoded values)\n\nOutput: None (The function prints tokens to stdout and may return errors through the testing framework)\n\nNote: The function uses package-level variables and imports from external packages as shown in the reference code. The connection is automatically closed when the function completes.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/utils\"\n\tuuid \"github.com/satori/go.uuid\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\n// Assuming the generated protobuf package is named \"pb\" and the service is \"UserService\"\n// These imports would typically come from .proto-generated code\ntype LoginRequest struct {\n\tUsername string `protobuf:\"bytes,1,opt,name=username,proto3\" json:\"username,omitempty\"`\n\tPassword string `protobuf:\"bytes,2,opt,name=password,proto3\" json:\"password,omitempty\"`\n}\n\ntype LoginResponse struct {\n\tToken string `protobuf:\"bytes,1,opt,name=token,proto3\" json:\"token,omitempty\"`\n}\n\ntype UserServiceClient interface {\n\tLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)\n}\n\nfunc testGRPCLogin() {\n\t// Connect to gRPC server (insecure for testing)\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := &userServiceClient{conn}\n\n\tusername := \"testuser\"\n\tpassword := \"testpass\"\n\n\tfor i := 0; i < 20; i++ {\n\t\t// Create metadata with a generated UUID (simplified for example)\n\t\tmd := metadata.Pairs(\n\t\t\t\"request-id\", fmt.Sprintf(\"req-%d\", i),\n\t\t\t\"timestamp\", fmt.Sprintf(\"%d\", time.Now().UnixNano()),\n\t\t)\n\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\n\t\tresp, err := client.Login(ctx, &LoginRequest{\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Login request %d failed: %v\", i+1, err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Received token: %s\\n\", resp.Token)\n\t}\n}\n\n// userServiceClient is a simple wrapper implementing UserServiceClient\ntype userServiceClient struct {\n\tconn *grpc.ClientConn\n}\n\nfunc (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {\n\tout := new(LoginResponse)\n\terr := c.conn.Invoke(ctx, \"/UserService/Login\", in, out, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a HelloService server, sends a greeting, and handles the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:1234, creates a client for the HelloService, sends a \"hello\" message, and processes the server's reply. It handles connection errors and RPC call errors appropriately.\n\nInput: None (The server address and message are hardcoded in this example)\n\nOutput: None (The function logs errors and doesn't return any value, though in a real implementation you might want to return the reply or error)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\ths \"ch4.4-1/helloservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := hs.NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &hs.String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/hello_service_proto\" // Update this with the correct import path\n)\n\nconst (\n\taddress = \"localhost:1234\"\n)\n\nfunc greetAndHandleResponse() {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := pb.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.GetMessage())\n}"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a function that establishes a gRPC connection to a server, creates a client, and makes a request to retrieve fixture data for a specific event.\n\nFunction Description: The function `TestFixturesReturnsData` tests the gRPC client's ability to connect to a server and retrieve fixture data for a specified event. It establishes a connection, creates a client, sends a request, and handles potential errors. The connection is automatically closed when the function completes.\n\nInput: \n- `t *testing.T`: The testing context for reporting failures and logging.\n- Implicit context with authentication (via `withAuth`).\n\nOutput: \n- None explicitly returned, but the function will fail the test if any step (connection, client creation, or request) encounters an error. The response from the gRPC server is captured in `resp` but not returned.",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\nfunc TestFixturesReturnsData(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Fixture(ctx, &rpc.FixtureRequest{Event: \"customer.created\"})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/protobuf/package\" // Update with actual protobuf package path\n)\n\nfunc TestFixturesReturnsData(t *testing.T) {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewFixtureServiceClient(conn)\n\n\tctx := context.Background()\n\t// Replace with actual function to inject authentication if needed\n\t// ctx = withAuth(ctx)\n\n\treq := &pb.FixtureRequest{\n\t\tEventId: 123, // Example event ID; replace with actual value or variable\n\t}\n\n\tresp, err := client.GetFixture(ctx, req)\n\tif err != nil {\n\t\tt.Errorf(\"could not get fixture: %v\", err)\n\t\treturn\n\t}\n\n\t_ = resp // Use resp as needed, e.g., log or validate\n}"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a metrics server, retrieves metrics, and prints them. The function should handle connection setup and teardown, and provide options for controlling output format.\n\nFunction Description: The function connects to a gRPC metrics server using the provided address, creates a metrics service client, and prints the retrieved metrics. It supports a flag to determine whether to print all metrics or just the total. The connection is automatically closed when the function completes.\n\nInput:\n- metricsServerAddress (string): The address of the gRPC metrics server to connect to\n- totalOnly (bool): Flag indicating whether to print only the total metrics or all metrics\n\nOutput: None (prints metrics to stdout directly)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/interop/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tlogger.Fatal(\"-metrics_server_address is unset\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/package/path/metrics\" // Replace with actual metrics protobuf package path\n)\n\nfunc printMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.Dial(metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewMetricsServiceClient(conn)\n\treq := &pb.GetMetricsRequest{TotalOnly: totalOnly}\n\n\tresp, err := client.GetMetrics(context.Background(), req)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not get metrics: %v\", err)\n\t}\n\n\tif totalOnly {\n\t\tfmt.Printf(\"Total Metrics:\\n%+v\\n\", resp.Total)\n\t} else {\n\t\tfmt.Printf(\"All Metrics:\\n%+v\\n\", resp)\n\t}\n}"
  },
  {
    "Task_id": 242,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends a greeting request, and processes the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and returns the server's greeting response. It handles connection errors and request failures appropriately.\n\nInput: \n- address [string]: The network address of the gRPC server (e.g., \"localhost:50051\")\n- name [string]: The name to include in the greeting request (optional, defaults to \"world\")\n\nOutput:\n- [string]: The greeting message received from the server\n- [error]: Any error that occurred during connection or request processing",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"os\"\n\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/greeter/proto\" // Update this path to your actual proto package\n)\n\nfunc greetServer(address string, name string) (string, error) {\n\tif name == \"\" {\n\t\tname = \"world\"\n\t}\n\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithTimeout(time.Second*5))\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"could not connect to server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\n\treq := &pb.HelloRequest{Name: name}\n\tresp, err := client.SayHello(context.Background(), req)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"request failed: %v\", err)\n\t}\n\n\treturn resp.GetMessage(), nil\n}"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends multiple requests, and processes the responses using the GoFrame framework.\n\nFunction Description: The function connects to a gRPC server using service discovery, creates a client stub, and makes repeated calls to a SayHello RPC method. It handles connection errors and response processing, with built-in logging and graceful connection closure.\n\nInput: None (uses package-level constants and context)\n\nOutput: None (logs results to console via GoFrame's logging system)\n\nNote: The function includes an internal loop that makes 10 RPC calls with a 1-second delay between calls. Connection is automatically closed when function completes.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/gsvc\"\n\t\"github.com/gogf/gf/v2/os/gctx\"\n\n\t\"github.com/gogf/gf/contrib/rpc/grpcx/v2\"\n\n\tpb \"github.com/gogf/gf/example/rpc/grpcx/rawgrpc/helloworld\"\n)\nfunc main() {\n\tvar (\n\t\tctx     = gctx.GetInitCtx()\n\t\tservice = gsvc.NewServiceWithName(`hello`)\n\t)\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(`%s://%s`, gsvc.Schema, service.GetKey()),\n\t\tgrpcx.Balancer.WithRandom(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tg.Log().Fatalf(ctx, \"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tfor i := 0; i < 10; i++ {\n\t\tres, err := client.SayHello(ctx, &pb.HelloRequest{Name: `GoFrame`})\n\t\tif err != nil {\n\t\t\tg.Log().Fatalf(ctx, \"could not greet: %+v\", err)\n\t\t}\n\t\tg.Log().Printf(ctx, \"Greeting: %s\", res.Message)\n\t\ttime.Sleep(time.Second)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/os/glog\"\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/helloworld/proto\" // Replace with actual proto package path\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tserviceName = \"helloworld.Greeter\"\n\ttimeout     = 5 * time.Second\n\tretries     = 3\n\tinterval    = 1 * time.Second\n)\n\nfunc callGRPCWithGF() {\n\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, address, grpc.WithInsecure())\n\tif err != nil {\n\t\tglog.Error(ctx, \"Failed to connect to gRPC server:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\n\tfor i := 0; i < 10; i++ {\n\t\treqCtx, reqCancel := context.WithTimeout(context.Background(), timeout)\n\t\tresp, err := client.SayHello(reqCtx, &pb.HelloRequest{Name: \"GoFrame Client\"})\n\t\treqCancel()\n\t\tif err != nil {\n\t\t\tglog.Error(reqCtx, \"gRPC SayHello failed:\", err)\n\t\t} else {\n\t\t\tglog.Info(reqCtx, \"Received response:\", resp.Message)\n\t\t}\n\t\ttime.Sleep(interval)\n\t}\n}"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC management server for Envoy's xDS (Discovery Service) protocol, supporting dynamic configuration updates and load reporting.\n\nStruct Description: The ManagementServer struct represents a gRPC server that implements Envoy's xDS protocol, including Aggregated Discovery Service (ADS) and optionally Load Reporting Service (LRS). It maintains a snapshot cache of resources and handles gRPC connections.\n\nFields:\n- Address: string - The network address the server is listening on\n- LRSServer: *fakeserver.Server - Optional fake LRS server instance\n- cancel: context.CancelFunc - Function to cancel the server's context\n- xs: v3server.Server - xDS server implementation\n- gs: *grpc.Server - gRPC server instance\n- cache: v3cache.SnapshotCache - Cache for storing configuration snapshots\n- version: int - Current version of the configuration\n- logger: interface{ Logf(format string, args ...any) } - Logger interface for output\n\nMethods:\n- StartManagementServer(*testing.T, ManagementServerOptions) *ManagementServer - Creates and starts a new management server instance. Takes testing context and options, returns initialized server.\n- Update(context.Context, UpdateOptions) error - Updates the server's configuration snapshot with new resources. Takes context and update options, returns error if update fails.\n- Stop() - Stops the server and cleans up resources. No parameters or return values.\n\nThe struct provides dynamic configuration management for Envoy proxies through the xDS protocol, with support for listeners, routes, clusters, and endpoints configuration.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/envoyproxy/go-control-plane/pkg/cache/types\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils/xds/fakeserver\"\n\n\tv3clusterpb \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"\n\tv3endpointpb \"github.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3\"\n\tv3listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"\n\tv3routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3cache \"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"\n\tv3resource \"github.com/envoyproxy/go-control-plane/pkg/resource/v3\"\n\tv3server \"github.com/envoyproxy/go-control-plane/pkg/server/v3\"\n)\n\ntype ManagementServer struct {\n\tAddress   string\n\tLRSServer *fakeserver.Server\n\n\tcancel  context.CancelFunc\n\txs      v3server.Server\n\tgs      *grpc.Server\n\tcache   v3cache.SnapshotCache\n\tversion int\n\n\tlogger interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\twait := !opts.AllowResourceSubset\n\tcache := v3cache.NewSnapshotCache(wait, v3cache.IDHash{}, serverLogger{t})\n\n\tlis := opts.Listener\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to listen on localhost:0: %v\", err)\n\t\t}\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tcallbacks := v3server.CallbackFuncs{\n\t\tStreamOpenFunc:     opts.OnStreamOpen,\n\t\tStreamClosedFunc:   opts.OnStreamClosed,\n\t\tStreamRequestFunc:  opts.OnStreamRequest,\n\t\tStreamResponseFunc: opts.OnStreamResponse,\n\t}\n\n\txs := v3server.NewServer(ctx, cache, callbacks)\n\tgs := grpc.NewServer()\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(gs, xs)\n\n\tmgmtServer := &ManagementServer{\n\t\tAddress: lis.Addr().String(),\n\t\tcancel:  cancel,\n\t\tversion: 0,\n\t\tgs:      gs,\n\t\txs:      xs,\n\t\tcache:   cache,\n\t\tlogger:  t,\n\t}\n\tif opts.SupportLoadReportingService {\n\t\tlrs := fakeserver.NewServer(lis.Addr().String())\n\t\tv3lrsgrpc.RegisterLoadReportingServiceServer(gs, lrs)\n\t\tmgmtServer.LRSServer = lrs\n\t}\n\n\tgo gs.Serve(lis)\n\tt.Cleanup(mgmtServer.Stop)\n\treturn mgmtServer\n}\n\nfunc (s *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\ts.version++\n\n\tresources := map[v3resource.Type][]types.Resource{\n\t\tv3resource.ListenerType: resourceSlice(opts.Listeners),\n\t\tv3resource.RouteType:    resourceSlice(opts.Routes),\n\t\tv3resource.ClusterType:  resourceSlice(opts.Clusters),\n\t\tv3resource.EndpointType: resourceSlice(opts.Endpoints),\n\t}\n\tsnapshot, err := v3cache.NewSnapshot(strconv.Itoa(s.version), resources)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create new snapshot cache: %v\", err)\n\t}\n\tif !opts.SkipValidation {\n\t\tif err := snapshot.Consistent(); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to create new resource snapshot: %v\", err)\n\t\t}\n\t}\n\n\tif err := s.cache.SetSnapshot(ctx, opts.NodeID, snapshot); err != nil {\n\t\treturn fmt.Errorf(\"failed to update resource snapshot in management server: %v\", err)\n\t}\n\treturn nil\n}\n\nfunc (s *ManagementServer) Stop() {\n\tif s.cancel != nil {\n\t\ts.cancel()\n\t}\n\ts.gs.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package controlplane\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"\n\t\"github.com/envoyproxy/go-control-plane/pkg/server/v3\"\n\t\"github.com/stretchr/testify/require\"\n\t\"google.golang.org/grpc\"\n)\n\ntype UpdateOptions struct {\n\tListeners []cache.Resource\n\tRoutes    []cache.Resource\n\tClusters  []cache.Resource\n\tEndpoints []cache.Resource\n}\n\ntype ManagementServerOptions struct {\n\tAddress string\n\tUseLRS  bool\n}\n\ntype ManagementServer struct {\n\tAddress   string\n\tLRSServer *fakeserver.Server\n\tcancel    context.CancelFunc\n\txs        v3.Server\n\tgs        *grpc.Server\n\tcache     cache.SnapshotCache\n\tversion   int\n\tlogger    interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\tctx, cancel := context.WithCancel(context.Background())\n\tserver := &ManagementServer{\n\t\tAddress: opts.Address,\n\t\tcancel:  cancel,\n\t\tcache:   cache.NewSnapshotCache(false, cache.IDHash{}, nil),\n\t\tversion: 0,\n\t\tlogger:  t,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", opts.Address)\n\trequire.NoError(t, err)\n\n\tserver.gs = grpc.NewServer()\n\tif opts.UseLRS {\n\t\tlrsServer := fakeserver.New(opts.Address)\n\t\tserver.LRSServer = lrsServer\n\t\tv3.RegisterLrsServer(server.gs, server.xs)\n\t}\n\n\tv3.RegisterAdsServer(server.gs, server.xs)\n\tgo func() {\n\t\terr := server.gs.Serve(lis)\n\t\tif err != nil {\n\t\t\tt.Logf(\"gRPC server error: %v\", err)\n\t\t}\n\t}()\n\n\treturn server\n}\n\nfunc (ms *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\tms.version++\n\tsnapshot := cache.NewSnapshot(\n\t\tfmt.Sprintf(\"v%d\", ms.version),\n\t\tmap[resource.Type][]cache.Resource{\n\t\t\tresource.ListenerType: opts.Listeners,\n\t\t\tresource.RouteType:    opts.Routes,\n\t\t\tresource.ClusterType:  opts.Clusters,\n\t\t\tresource.EndpointType: opts.Endpoints,\n\t\t},\n\t)\n\n\tif err := snapshot.Consistent(); err != nil {\n\t\treturn fmt.Errorf(\"snapshot inconsistent: %w\", err)\n\t}\n\n\tms.cache.SetSnapshot(ctx, \"node1\", snapshot)\n\treturn nil\n}\n\nfunc (ms *ManagementServer) Stop() {\n\tms.cancel()\n\tms.gs.Stop()\n\tif ms.LRSServer != nil {\n\t\tms.LRSServer.Stop()\n\t}\n}"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles plugin registration and message streaming between clients and middleware components.\n\nStruct Description: The pluginServer struct implements a gRPC service for plugin registration and message handling, managing concurrent access with synchronization and supporting both middleware and non-middleware listeners.\n\nFields:\n- UnimplementedPluginServer: pb.UnimplementedPluginServer - Embedded type for forward compatibility\n- lock: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n- RegisterListener: (stream pb.Plugin_RegisterListenerServer) -> error - Handles client registration and message streaming\n  - Input: gRPC bidirectional stream of pb.Plugin_RegisterListenerServer\n  - Output: error indicating operation status\n  - Description: Registers listeners, processes incoming messages, matches against regex patterns, handles middleware responses, and manages one-time listeners\n\n- rpcInit: () -> () - Initializes and starts the gRPC server\n  - Input: None (uses package-level Integrations.RPC configuration)\n  - Output: None (runs as goroutine)\n  - Description: Creates TCP listener, configures gRPC server with interceptors and keepalive, registers service, and starts serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock sync.Mutex\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\ts.lock.Lock()\n\tinitialData, err := stream.Recv()\n\tif err == io.EOF {\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlistener := initialData.GetListener()\n\tif listener == nil {\n\t\treturn status.Error(codes.InvalidArgument, \"First message must be a listener\")\n\t}\n\n\tisMiddleware := listener.Middleware != nil && *listener.Middleware\n\tisOnce := listener.Once != nil && *listener.Once\n\n\tvar regex *regexp.Regexp\n\tif listener.Regex != nil {\n\t\tregex, err = regexp.Compile(*listener.Regex)\n\t\tif err != nil {\n\t\t\treturn status.Error(codes.InvalidArgument, \"Invalid regex\")\n\t\t}\n\t}\n\n\tvar listenerList *[]chan pb.MiddlewareChannelMessage\n\n\tif isMiddleware {\n\t\tlistenerList = &ListenersMiddleware\n\t} else {\n\t\tlistenerList = &ListenersNonMiddleware\n\t}\n\n\tc := make(chan pb.MiddlewareChannelMessage)\n\t*listenerList = append(*listenerList, c)\n\n\ts.lock.Unlock()\n\tdefer func() {\n\t\tfor i := range *listenerList {\n\t\t\tif (*listenerList)[i] == c {\n\t\t\t\t*listenerList = append((*listenerList)[:i], (*listenerList)[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tmessage := <-c\n\n\t\tsendNilResponse := func() {\n\t\t\tc <- &pb.ListenerClientData_Response{\n\t\t\t\tResponse: &pb.MiddlewareResponse{\n\t\t\t\t\tMsg: nil,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\tif listener.Regex != nil && !regex.MatchString(message.(*pb.Event).Msg) {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\terr = stream.Send(message.(*pb.Event))\n\t\tif err != nil {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif isMiddleware {\n\t\t\tmwRes, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tswitch data := mwRes.Data.(type) {\n\t\t\tcase *pb.ListenerClientData_Listener:\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn status.Error(codes.InvalidArgument, \"Middleware returned a listener instead of a response\")\n\t\t\tcase *pb.ListenerClientData_Response:\n\t\t\t\tc <- data\n\t\t\t}\n\t\t}\n\n\t\tif isOnce {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc rpcInit() {\n\tif Integrations.RPC == nil {\n\t\treturn\n\t}\n\tgo func() {\n\t\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", Integrations.RPC.Port))\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tgrpcServer := grpc.NewServer(\n\t\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\t\tif err := authorize(ctx); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn handler(ctx, req)\n\t\t\t}),\n\t\t\tgrpc.StreamInterceptor(func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\t\tif err := authorize(stream.Context()); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\treturn handler(srv, stream)\n\t\t\t}),\n\t\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{Time: time.Second * 10}),\n\t\t)\n\t\tpb.RegisterPluginServer(grpcServer, &pluginServer{})\n\t\tgrpcServer.Serve(lis)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"net\"\n\t\"regexp\"\n\t\"sync\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock sync.Mutex\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\tctx := stream.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\ts.lock.Lock()\n\t\t// Process incoming message and match against regex patterns\n\t\tmatched := false\n\t\tfor _, pattern := range req.GetPatterns() {\n\t\t\tmatched, _ = regexp.MatchString(pattern, req.Message)\n\t\t\tif matched {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ts.lock.Unlock()\n\n\t\tif !matched {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Handle middleware response or direct reply\n\t\tresp := &pb.PluginResponse{\n\t\t\tMessage: fmt.Sprintf(\"Processed: %s\", req.Message),\n\t\t}\n\n\t\tif err := stream.Send(resp); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *pluginServer) rpcInit() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", Integrations.RPC.Port))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{MaxConnectionIdle: Integrations.RPC.Keepalive}),\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\trecovery.UnaryServerInterceptor(),\n\t\t\tlogging.UnaryServerInterceptor(nil),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\trecovery.StreamServerInterceptor(),\n\t\t\tlogging.StreamServerInterceptor(nil),\n\t\t),\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\tpb.RegisterPluginServer(server, s)\n\treflection.Register(server)\n\n\tgo func() {\n\t\tif err := server.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework. The server should be able to gracefully shut down when the context is canceled.\n\nFunction Description: The MainExt function initializes and starts a gRPC server. It sets up a network listener, creates a gRPC server instance, registers the service implementation, and starts the server in a goroutine. The function waits for the context to be canceled before gracefully shutting down the server.\n\nInput:\n- ctx [context.Context]: The context used to control the lifecycle of the gRPC server. Canceling this context will trigger a graceful shutdown.\n- cfg [Config]: A configuration object containing the port number on which the server should listen.\n\nOutput: None (The function runs indefinitely until the context is canceled or an error occurs.)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\ttriggerpb \"github.com/vanus-labs/vanus/api/trigger\"\n)\n\ntype TriggerServer struct {\n\tcfg Config\n}\n\nfunc NewTriggerServer(cfg Config) *TriggerServer {\n\treturn &TriggerServer{\n\t\tcfg: cfg,\n\t}\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlisten, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\tlog.Error().Msg(\"failed to listen\")\n\t\tos.Exit(-1)\n\t}\n\n\tsrv := NewTriggerServer(cfg)\n\n\tvar opts []grpc.ServerOption\n\tgrpcServer := grpc.NewServer(opts...)\n\ttriggerpb.RegisterTriggerWorkerServer(grpcServer, srv)\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tlog.Info(ctx).Msg(\"the grpc server ready to work\")\n\t\terr = grpcServer.Serve(listen)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx).Err(err).Msg(\"grpc server occurred an error\")\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\tgrpcServer.GracefulStop()\n\twg.Wait()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Config struct {\n\tPort int\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed to listen: %v\\n\", err)\n\t\treturn\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"failed to serve: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\n\tgrpcServer.GracefulStop()\n}"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, creates a new gRPC server instance, registers a service implementation, and starts serving incoming requests.\n\nInput: \n- port: string - The network port on which the server should listen (e.g., \":50051\")\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/helloworld/helloworld\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\ts.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\n// Define a server struct that implements the service interface (not provided in task, left as placeholder)\ntype server struct{}\n\nfunc main() {\n\t// Listen on the specified port\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\t// Create a new gRPC server\n\ts := grpc.NewServer()\n\n\t// Register the service implementation with the server (replace pb.RegisterYourServiceNameServer with actual service registration)\n\t// pb.RegisterYourServiceNameServer(s, &server{})\n\n\t// Start serving\n\tlog.Println(\"Starting gRPC server on :50051\")\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including receiving metrics and processing them through a handler function.\n\nStruct Description: The Server struct represents a gRPC server that listens for incoming metric data and processes it using a provided handler function. It manages server lifecycle and handles gRPC communication.\n\nFields:\n- Server: *grpc.Server - The underlying gRPC server instance\n- lis: net.Listener - The network listener for the server\n- handler: func([]*metricpb.Metric) - The function that processes received metrics\n- startMtx: sync.Mutex - Mutex to ensure thread-safe server startup\n\nMethods:\n- NewServer: (handler func([]*metricpb.Metric)) -> *Server - Creates a new Server instance with the given metric handler and initializes the gRPC server\n- Start: (t testing.TB) -> () - Starts the gRPC server on a random available port and begins listening for requests\n- SendMetrics: (ctx context.Context, mlist *forwardrpc.MetricList) -> (*empty.Empty, error) - Handles unary RPC calls for metric submission\n- SendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles streaming RPC calls for metric submission",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/samplers/metricpb\"\n)\n\ntype Server struct {\n\t*grpc.Server\n\tlis      net.Listener\n\thandler  func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\tres := &Server{\n\t\tServer:  grpc.NewServer(),\n\t\thandler: handler,\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.Server, res)\n\treturn res\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tvar err error\n\ts.lis, err = net.Listen(\"tcp\", \"127.0.0.1:\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to create a TCP connection for a test GRPC \"+\n\t\t\t\"server: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := s.Serve(s.lis); err != nil && err != grpc.ErrServerStopped {\n\t\t\tt.Logf(\"failed to stop the test forwarding gRPC server: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tmetrics := []*metricpb.Metric{}\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetrics = append(metrics, metric)\n\t}\n\t_, err := s.SendMetrics(context.Background(), &forwardrpc.MetricList{\n\t\tMetrics: metrics,\n\t})\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package server\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\tempty \"google.golang.org/protobuf/types/known/emptypb\"\n\tforwardrpc \"path/to/forwardrpc\" // replace with actual import path\n\tmetricpb \"path/to/metricpb\"     // replace with actual import path\n)\n\ntype Server struct {\n\tServer   *grpc.Server\n\tlis      net.Listener\n\thandler  func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\treturn &Server{\n\t\tServer:  grpc.NewServer(),\n\t\thandler: handler,\n\t}\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tif s.lis == nil {\n\t\tvar err error\n\t\ts.lis, err = net.Listen(\"tcp\", \":0\")\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to listen: %v\", err)\n\t\t}\n\t}\n\n\tgo func() {\n\t\tif err := s.Server.Serve(s.lis); err != nil {\n\t\t\tt.Logf(\"gRPC server stopped with error: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(stream forwardrpc.Forward_SendMetricsV2Server) error {\n\tfor {\n\t\tmlist, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.handler(mlist.Metrics)\n\t}\n}"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both physical data source operations and execution of data processing tasks, using Unix domain sockets for inter-process communication.\n\nStruct Description: The implementation consists of two main structs: physicalServer handles the materialization of data sources, while executionServer manages the execution of data processing tasks.\n\nFields:\n\nphysicalServer:\n- database: physical.Database - The underlying database implementation\n- socketDir: string - Directory where Unix domain sockets will be created\n- wg: *sync.WaitGroup - WaitGroup for managing server goroutines\n\nexecutionServer:\n- node: execution.Node - The execution node to process data\n\nMethods:\n\nphysicalServer:\n- Materialize(context.Context, *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) - Materializes a data source and starts a gRPC server for execution\n\nexecutionServer:\n- Run(*plugins.RunRequest, plugins.ExecutionDatasource_RunServer) error - Executes the data processing task and streams results back to the client",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cube2222/octosql/execution\"\n\t\"github.com/cube2222/octosql/physical\"\n\t\"github.com/cube2222/octosql/plugins/internal/plugins\"\n)\n\ntype physicalServer struct {\n\tplugins.UnimplementedDatasourceServer\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, request *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\timpl, _, err := s.database.GetTable(ctx, request.TableContext.TableName, request.TableContext.Options)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't get table: %w\", err)\n\t}\n\n\tnode, err := impl.Materialize(\n\t\tctx,\n\t\tphysical.Environment{\n\t\t\tVariableContext: request.VariableContext.ToNativePhysicalVariableContext(),\n\t\t},\n\t\trequest.Schema.ToNativeSchema(),\n\t\tpushedDownPredicates,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't materialize datasource: %w\", err)\n\t}\n\n\tsocketName := ulid.MustNew(ulid.Now(), rand.Reader).String() + \".sock\"\n\tsocketPath := filepath.Join(s.socketDir, socketName)\n\tlog.Printf(\"Listening execution on %s\", socketPath)\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\texecServer := &executionServer{\n\t\tnode: node,\n\t}\n\ts.wg.Add(1)\n\n\tgrpcServer := grpc.NewServer()\n\tplugins.RegisterExecutionDatasourceServer(grpcServer, execServer)\n\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\ntype executionServer struct {\n\tplugins.UnimplementedExecutionDatasourceServer\n\tnode execution.Node\n}\n\nfunc (e *executionServer) Run(request *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tif err := e.node.Run(\n\t\texecution.ExecutionContext{\n\t\t\tContext:         stream.Context(),\n\t\t\tVariableContext: request.VariableContext.ToNativeExecutionVariableContext(),\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, record execution.Record) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tRecord: plugins.NativeRecordToProto(record),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send record to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, msg execution.MetadataMessage) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tMetadata: plugins.NativeMetadataMessageToProto(msg),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send metadata message to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t); err != nil {\n\t\treturn fmt.Errorf(\"couldn't run node: %w\", err)\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\n// Assume these packages and interfaces are defined elsewhere\ntype physicalServer struct {\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\ntype executionServer struct {\n\tnode execution.Node\n}\n\ntype MaterializeRequest struct {\n\tSource string\n}\ntype MaterializeResponse struct {\n\tSocketPath string\n}\ntype RunRequest struct {\n\tTask string\n}\ntype ExecutionDatasource_RunServer interface {\n\tSend(*RunResponse) error\n\tContext() context.Context\n}\ntype RunResponse struct {\n\tResult string\n}\n\nfunc (p *physicalServer) Materialize(ctx context.Context, req *MaterializeRequest) (*MaterializeResponse, error) {\n\tsocketPath := filepath.Join(p.socketDir, fmt.Sprintf(\"%s.sock\", req.Source))\n\n\tos.Remove(socketPath)\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\texecSrv := grpc.NewServer()\n\texecServer := &executionServer{\n\t\tnode: p.database.GetNode(req.Source),\n\t}\n\tRegisterExecutionDatasourceServer(execSrv, execServer)\n\n\tp.wg.Add(1)\n\tgo func() {\n\t\tdefer p.wg.Done()\n\t\tif err := execSrv.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn &MaterializeResponse{SocketPath: socketPath}, nil\n}\n\nfunc (e *executionServer) Run(req *RunRequest, stream ExecutionDatasource_RunServer) error {\n\tresult := e.node.Execute(req.Task)\n\tfor _, line := range result {\n\t\tif err := stream.Send(&RunResponse{Result: line}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc NewPhysicalServer(db physical.Database, socketDir string) *physicalServer {\n\treturn &physicalServer{\n\t\tdatabase:  db,\n\t\tsocketDir: socketDir,\n\t\twg:        &sync.WaitGroup{},\n\t}\n}\n\nfunc StartServers() {\n\tdb := physical.NewDatabase()\n\tsocketDir, _ := os.MkdirTemp(\"\", \"grpc_sockets\")\n\tphysSrv := NewPhysicalServer(db, socketDir)\n\n\tgrpcServer := grpc.NewServer()\n\tRegisterDataSourceServiceServer(grpcServer, physSrv)\n\n\tlistener, _ := net.Listen(\"tcp\", \":50051\")\n\tgo grpcServer.Serve(listener)\n}\n\nfunc StopServers(grpcServer *grpc.Server, physSrv *physicalServer) {\n\tgrpcServer.Stop()\n\tphysSrv.wg.Wait()\n\tos.RemoveAll(physSrv.socketDir)\n}"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a gRPC server for remote actor communication in a distributed actor system using Proto.Actor and Go's gRPC framework.\n\nStruct Description: The Remote struct manages the gRPC server and associated components for remote actor communication in a Proto.Actor system.\n\nFields:\n\nactorSystem: *actor.ActorSystem - Reference to the actor system this remote belongs to\ns: *grpc.Server - The gRPC server instance\nedpReader: *endpointReader - Handles incoming gRPC connections\nedpManager: *endpointManager - Manages active endpoints\nconfig: *Config - Configuration for the remote server\nkinds: map[string]*actor.Props - Map of actor kinds to their properties\nactivatorPid: *actor.PID - Process ID for the activator actor\nblocklist: *BlockList - List of blocked endpoints\n\nMethods:\n\nNewRemote: (actorSystem *actor.ActorSystem, config *Config) -> *Remote - Constructor that initializes a new Remote instance with given actor system and configuration\nStart: () -> () - Starts the gRPC server and initializes all remote communication components\nShutdown: (graceful bool) -> () - Stops the gRPC server, either gracefully or forcefully",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log/slog\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/asynkron/protoactor-go/extensions\"\n\t\"github.com/asynkron/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n)\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\tr := &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n\tfor k, v := range config.Kinds {\n\t\tr.kinds[k] = v\n\t}\n\n\tactorSystem.Extensions.Register(r)\n\n\treturn r\n}\n\nfunc (r *Remote) Start() {\n\tgrpclog.SetLoggerV2(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))\n\tlis, err := net.Listen(\"tcp\", r.config.Address())\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to listen: %v\", err))\n\t}\n\n\tvar address string\n\tif r.config.AdvertisedHost != \"\" {\n\t\taddress = r.config.AdvertisedHost\n\t} else {\n\t\taddress = lis.Addr().String()\n\t}\n\n\tr.actorSystem.ProcessRegistry.RegisterAddressResolver(r.remoteHandler)\n\tr.actorSystem.ProcessRegistry.Address = address\n\tr.Logger().Info(\"Starting remote with address\", slog.String(\"address\", address))\n\n\tr.edpManager = newEndpointManager(r)\n\tr.edpManager.start()\n\n\tr.s = grpc.NewServer(r.config.ServerOptions...)\n\tr.edpReader = newEndpointReader(r)\n\tRegisterRemotingServer(r.s, r.edpReader)\n\tr.Logger().Info(\"Starting Proto.Actor server\", slog.String(\"address\", address))\n\tgo r.s.Serve(lis)\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.edpReader.suspend(true)\n\t\tr.edpManager.stop()\n\n\t\tc := make(chan bool, 1)\n\t\tgo func() {\n\t\t\tr.s.GracefulStop()\n\t\t\tc <- true\n\t\t}()\n\n\t\tselect {\n\t\tcase <-c:\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\")\n\t\tcase <-time.After(time.Second * 10):\n\t\t\tr.s.Stop()\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\", slog.String(\"err\", \"timeout\"))\n\t\t}\n\t} else {\n\t\tr.s.Stop()\n\t\tr.Logger().Info(\"Killed Proto.Actor server\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package remote\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/AsynkronIT/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Remote struct {\n\tactorSystem *actor.ActorSystem\n\ts           *grpc.Server\n\tedpReader   *endpointReader\n\tedpManager  *endpointManager\n\tconfig      *Config\n\tkinds       map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\treturn &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n}\n\nfunc (r *Remote) Start() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", r.config.Port))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tr.s = grpc.NewServer()\n\tr.edpManager = newEndpointManager(r.actorSystem, r.config)\n\tr.edpReader = newEndpointReader(r.actorSystem, r.edpManager, r.blocklist)\n\n\tRegisterRemoteServer(r.s, r)\n\tgo r.s.Serve(lis)\n\n\tactivatorProps := actor.FromProducer(func() actor.Actor {\n\t\treturn &activator{remote: r}\n\t})\n\tr.activatorPid = r.actorSystem.Root.Spawn(activatorProps)\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.s.GracefulStop()\n\t} else {\n\t\tr.s.Stop()\n\t}\n\tr.edpManager.closeAll()\n\tr.actorSystem.Root.Stop(r.activatorPid)\n}\n\ntype Config struct {\n\tPort int\n}\n\ntype BlockList struct {\n\t// implementation omitted for brevity\n}\n\nfunc NewBlockList() *BlockList {\n\treturn &BlockList{}\n}\n\ntype endpointReader struct {\n\tactorSystem *actor.ActorSystem\n\tedpManager  *endpointManager\n\tblocklist   *BlockList\n}\n\nfunc newEndpointReader(actorSystem *actor.ActorSystem, edpManager *endpointManager, blocklist *BlockList) *endpointReader {\n\treturn &endpointReader{\n\t\tactorSystem: actorSystem,\n\t\tedpManager:  edpManager,\n\t\tblocklist:   blocklist,\n\t}\n}\ntype endpointManager struct {\n\tactorSystem *actor.ActorSystem\n\tconfig      *Config\n}\n\nfunc newEndpointManager(actorSystem *actor.ActorSystem, config *Config) *endpointManager {\n\treturn &endpointManager{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t}\n}\n\nfunc (m *endpointManager) closeAll() {\n\t// close all active endpoints\n}\n\ntype activator struct {\n\tremote *Remote\n}\n\nfunc (a *activator) Receive(ctx actor.Context) {\n\tswitch msg := ctx.Message().(type) {\n\tcase *SpawnRequest:\n\t\tprops, ok := a.remote.kinds[msg.Kind]\n\t\tif !ok {\n\t\t\tctx.Respond(&SpawnResponse{Pid: nil, Error: \"kind not found\"})\n\t\t\treturn\n\t\t}\n\t\tpid := a.remote.actorSystem.Root.Spawn(props)\n\t\tctx.Respond(&SpawnResponse{Pid: pid, Error: \"\"})\n\t}\n}\n\ntype SpawnRequest struct {\n\tKind string\n}\n\ntype SpawnResponse struct {\n\tPid   *actor.PID\n\tError string\n}\n\ntype RemoteServer interface {\n\tSpawn(context.Context, *SpawnRequest) (*SpawnResponse, error)\n}\n\nfunc RegisterRemoteServer(s *grpc.Server, srv RemoteServer) {\n\tpb.RegisterRemoteServer(s, &remoteServer{srv})\n}\n\ntype remoteServer struct {\n\tsrv RemoteServer\n}\n\nfunc (s *remoteServer) Spawn(ctx context.Context, in *SpawnRequest) (*SpawnResponse, error) {\n\treturn s.srv.Spawn(ctx, in)\n}"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Create a gRPC server in Go that collects and processes metrics data using OpenTelemetry protocol, with capabilities for handling incoming requests, storing metrics, and managing server lifecycle.\n\nStruct Description: GRPCCollector is a gRPC server implementation that handles metrics collection following the OpenTelemetry protocol. It manages incoming requests, stores metrics data, tracks headers, and provides server control functionality.\n\nFields:\n\nField1: collpb.UnimplementedMetricsServiceServer - Embedded type to satisfy gRPC interface requirements\nField2: headersMu sync.Mutex - Mutex for thread-safe access to headers\nField3: headers metadata.MD - Stores incoming request headers\nField4: storage *Storage - Stores collected metrics data\nField5: resultCh <-chan ExportResult - Channel for receiving export results\nField6: listener net.Listener - Network listener for the server\nField7: srv *grpc.Server - gRPC server instance\n\nMethods:\n\nMethod1: NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) - Creates and starts a new gRPC collector instance\nMethod2: Shutdown() - Stops the gRPC server gracefully\nMethod3: Addr() net.Addr - Returns the network address the server is listening on\nMethod4: Collect() *Storage - Returns the storage containing collected metrics\nMethod5: Headers() map[string][]string - Returns collected headers in a thread-safe manner\nMethod6: Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) - Handles incoming metrics export requests and processes them",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/proto/otlp/collector/metrics/v1\"\n)\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\n\tresultCh <-chan ExportResult\n\tlistener net.Listener\n\tsrv      *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tif endpoint == \"\" {\n\t\tendpoint = \"localhost:0\"\n\t}\n\n\tc := &GRPCCollector{\n\t\tstorage:  NewStorage(),\n\t\tresultCh: resultCh,\n\t}\n\n\tvar err error\n\tc.listener, err = net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.srv = grpc.NewServer()\n\tcollpb.RegisterMetricsServiceServer(c.srv, c)\n\tgo func() { _ = c.srv.Serve(c.listener) }()\n\n\treturn c, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() { c.srv.Stop() }\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\treturn metadata.Join(c.headers)\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tc.storage.Add(req)\n\n\tif h, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tc.headersMu.Lock()\n\t\tc.headers = metadata.Join(c.headers, h)\n\t\tc.headersMu.Unlock()\n\t}\n\n\tif c.resultCh != nil {\n\t\tr := <-c.resultCh\n\t\tif r.Response == nil {\n\t\t\treturn &collpb.ExportMetricsServiceResponse{}, r.Err\n\t\t}\n\t\treturn r.Response, r.Err\n\t}\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package collector\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\tcollpb \"go.opentelemetry.io/proto/otlp/collector/metrics/v1\"\n)\n\ntype Storage struct {\n\t// Placeholder for actual metrics storage implementation\n\tData map[string]interface{}\n}\n\ntype ExportResult struct {\n\tSuccess bool\n\tError   error\n}\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\tresultCh  <-chan ExportResult\n\tlistener  net.Listener\n\tsrv       *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tlis, err := net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts := grpc.NewServer()\n\tc := &GRPCCollector{\n\t\tstorage:  &Storage{Data: make(map[string]interface{})},\n\t\tresultCh: resultCh,\n\t\tlistener: lis,\n\t\tsrv:      s,\n\t}\n\n\tcollpb.RegisterMetricsServiceServer(s, c)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn c, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() {\n\tc.srv.GracefulStop()\n}\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\theadersCopy := make(map[string][]string)\n\tfor k, v := range c.headers {\n\t\theadersCopy[k] = append([]string{}, v...)\n\t}\n\treturn headersCopy\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tc.headersMu.Lock()\n\t\tc.headers = md.Copy()\n\t\tc.headersMu.Unlock()\n\t}\n\n\t// Process the request and store metrics in storage\n\t// This is a placeholder for actual processing logic\n\t_ = req\n\n\tselect {\n\tcase result := <-c.resultCh:\n\t\tif !result.Success {\n\t\t\treturn nil, result.Error\n\t\t}\n\tcase <-ctx.Done():\n\t\treturn nil, ctx.Err()\n\t}\n\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls with ORCA (Open Request Cost Aggregation) metrics recording capabilities.\n\nStruct Description: The server struct implements the gRPC service interface (generated from the protobuf definition) and includes ORCA metrics recording functionality.\n\nFields:\n- UnimplementedEchoServer: [pb.UnimplementedEchoServer] - Embedded type to satisfy the gRPC service interface requirements\n\nMethods:\n- UnaryEcho: [Name](ctx context.Context, in *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls, records request costs using ORCA metrics, and returns an echo response\n- main: [Name]() -> None - Sets up the gRPC server, registers the service, configures ORCA metrics reporting, and starts the server\n\nInput Parameters for UnaryEcho:\n- ctx: [context.Context] - Context containing call information and ORCA metrics recorder\n- in: [*pb.EchoRequest] - Incoming request message containing the message to echo\n\nOutput for UnaryEcho:\n- [*pb.EchoResponse] - Response message containing the echoed message\n- [error] - Potential error during processing\n\nNote: The main function doesn't have explicit input/output but performs server setup and execution.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/orca\"\n\t\"google.golang.org/grpc/internal\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tcmr := orca.CallMetricsRecorderFromContext(ctx)\n\tif cmr == nil {\n\t\treturn nil, status.Errorf(codes.Internal, \"unable to retrieve call metrics recorder (missing ORCA ServerOption?)\")\n\t}\n\tcmr.SetRequestCost(\"db_queries\", 10)\n\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(orca.CallMetricsServerOption(nil))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tsmr := orca.NewServerMetricsRecorder()\n\topts := orca.ServiceOptions{\n\t\tMinReportingInterval:  3 * time.Second,\n\t\tServerMetricsProvider: smr,\n\t}\n\tinternal.ORCAAllowAnyMinReportingInterval.(func(so *orca.ServiceOptions))(&opts)\n\tif err := orca.Register(s, opts); err != nil {\n\t\tlog.Fatalf(\"Failed to register ORCA service: %v\", err)\n\t}\n\n\ts.Serve(lis)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/grpc/orca\"\n\tpb \"your_package_name\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\t// Record ORCA metrics: CPU utilization and memory usage\n\torcaRecorder := orca.FromContext(ctx)\n\tif orcaRecorder != nil {\n\t\terr := orcaRecorder.AddMetric(\"cpu_utilization\", 0.75)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Failed to record CPU utilization: %v\", err)\n\t\t}\n\t\terr = orcaRecorder.AddMetric(\"memory_usage\", 128.5)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Failed to record memory usage: %v\", err)\n\t\t}\n\t}\n\n\t// Return the echo response\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\t// Create a new ORCA reporting interceptor\n\treportingOpts := []orca.Option{\n\t\torca.WithReportInterval(5),\n\t\torca.WithLROReporting(true),\n\t}\n\tinterceptor, err := orca.NewServerInterceptor(reportingOpts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create ORCA interceptor: %v\", err)\n\t}\n\n\t// Configure gRPC server with ORCA metrics handling\n\ts := grpc.NewServer(grpc.ChainUnaryInterceptor(interceptor))\n\tpb.RegisterEchoServer(s, &server{})\n\tlog.Printf(\"server listening at %v\", lis.Addr())\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, registers service implementations, and starts serving on a specified port with optional TLS credentials.\n\nFunction Description: The main function initializes and starts a gRPC server that hosts two services: a custom SpannerExecutorProxy service and a standard health check service. It validates required configuration parameters, sets up the network listener, creates the gRPC server instance, registers services, and begins serving requests.\n\nInput:\n- proxyPort (string): The port number on which the gRPC server should listen\n- spannerPort (string): The port number for Spanner service (validation only)\n- cert (string): Path to certificate file for TLS (validation only)\n- Additional client options are obtained internally through getClientOptionsForSysTests()\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Logs server startup information or errors to stdout\n\nNote: The function doesn't explicitly return values but may terminate the program with log.Fatal or log.Fatalf in case of errors during setup. Successful execution results in a continuously running gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"cloud.google.com/go/spanner/executor/apiv1/executorpb\"\n\t\"cloud.google.com/go/spanner/test/cloudexecutor/executor\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *proxyPort == \"\" {\n\t\tlog.Fatal(\"Proxy port need to be assigned in order to start worker proxy.\")\n\t}\n\tif *spannerPort == \"\" {\n\t\tlog.Fatal(\"Spanner proxyPort need to be assigned in order to start worker proxy.\")\n\t}\n\tif *cert == \"\" {\n\t\tlog.Fatalf(\"Certificate need to be assigned in order to start worker proxy.\")\n\t}\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%s\", *proxyPort))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\tclientOptions := getClientOptionsForSysTests()\n\tcloudProxyServer, err := executor.NewCloudProxyServer(context.Background(), clientOptions)\n\tif err != nil {\n\t\tlog.Fatalf(\"Creating Cloud Proxy Server failed: %v\", err)\n\t}\n\texecutorpb.RegisterSpannerExecutorProxyServer(grpcServer, cloudProxyServer)\n\n\thealthServer := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(grpcServer, healthServer)\n\n\tlog.Printf(\"Server started on proxyPort:%s\\n\", *proxyPort)\n\terr = grpcServer.Serve(lis)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to start server on proxyPort: %s\\n\", *proxyPort)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\n// SpannerExecutorProxyServer is a placeholder for the actual service implementation\ntype SpannerExecutorProxyServer struct{}\n\nfunc (s *SpannerExecutorProxyServer) ExecuteQuery(stream grpc.ServerStreamingServer[SomeRequestType]) error {\n\t// Implementation here\n\treturn nil\n}\n\n// getClientOptionsForSysTests simulates fetching client options internally\nfunc getClientOptionsForSysTests() []grpc.DialOption {\n\treturn []grpc.DialOption{\n\t\tgrpc.WithInsecure(),\n\t}\n}\n\nfunc main() {\n\tproxyPort := \"50051\"\n\tspannerPort := \"9010\"\n\tcert := \"server.crt\"\n\n\t// Validate required ports and certificate\n\tif proxyPort == \"\" || spannerPort == \"\" || cert == \"\" {\n\t\tlog.Fatal(\"All configuration parameters must be provided\")\n\t}\n\n\t// Setup TLS credentials\n\tcreds, err := tls.LoadX509KeyPair(cert, \"server.key\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load TLS credentials: %v\", err)\n\t}\n\n\t// Create listener\n\tlis, err := net.Listen(\"tcp\", \":\"+proxyPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen on port %s: %v\", proxyPort, err)\n\t}\n\n\t// Create gRPC server with TLS\n\tgrpcServer := grpc.NewServer(\n\t\tgrpc.Creds(&tls.Certificate{Certificate: [][]byte{creds.Certificate}}),\n\t)\n\n\t// Register services\n\tgrpc_health_v1.RegisterHealthServer(grpcServer, health.NewServer())\n\n\tspannerClientOpts := getClientOptionsForSysTests()\n\t// Assuming SpannerExecutorProxy service registration requires a client connection\n\tspannerConn, err := grpc.Dial(fmt.Sprintf(\"localhost:%s\", spannerPort), spannerClientOpts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to Spanner service: %v\", err)\n\t}\n\n\t// Register the proxy service with the established connection\n\tRegisterSpannerExecutorProxyServer(grpcServer, &SpannerExecutorProxyServer{})\n\n\tlog.Printf(\"Starting gRPC server on port %s with TLS\", proxyPort)\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve gRPC server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both xDS (Discovery Service) and LRS (Load Reporting Service) protocols, with proper request/response channels and connection monitoring capabilities.\n\nStruct Description: The Server struct represents a gRPC server that implements both xDS v3 and LRS v3 services. It manages communication channels for requests/responses and tracks connection state.\n\nFields:\n\nXDSRequestChan: *testutils.Channel - Channel for receiving xDS requests\nXDSResponseChan: chan *Response - Channel for sending xDS responses\nLRSRequestChan: *testutils.Channel - Channel for receiving LRS requests\nLRSResponseChan: chan *Response - Channel for sending LRS responses\nLRSStreamOpenChan: *testutils.Channel - Channel for tracking LRS stream openings\nLRSStreamCloseChan: *testutils.Channel - Channel for tracking LRS stream closings\nNewConnChan: *testutils.Channel - Channel for tracking new connections\nAddress: string - Server's listening address\nxdsServerV3: *xdsServerV3 - xDS v3 server implementation\nlrsServerV3: *lrsServerV3 - LRS v3 server implementation\n\nMethods:\n\nNewServer: (addr string) -> *Server - Creates a new Server instance with initialized channels\nStartServer: (lis net.Listener) -> (*Server, func(), error) - Starts the gRPC server on given listener and returns cleanup function\nStreamAggregatedResources: (s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) -> error - Handles xDS v3 streaming RPC\nStreamLoadStats: (s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) -> error - Handles LRS v3 streaming RPC",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils\"\n\t\"google.golang.org/protobuf/proto\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3lrspb \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n)\n\ntype Server struct {\n\tXDSRequestChan *testutils.Channel\n\tXDSResponseChan chan *Response\n\tLRSRequestChan *testutils.Channel\n\tLRSResponseChan chan *Response\n\tLRSStreamOpenChan *testutils.Channel\n\tLRSStreamCloseChan *testutils.Channel\n\tNewConnChan *testutils.Channel\n\tAddress string\n\t*xdsServerV3\n\t*lrsServerV3\n}\n\ntype wrappedListener struct {\n\tnet.Listener\n\tserver *Server\n}\n\nfunc (wl *wrappedListener) Accept() (net.Conn, error) {\n\tc, err := wl.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\twl.server.NewConnChan.Send(struct{}{})\n\treturn c, err\n}\n\nfunc StartServer(lis net.Listener) (*Server, func(), error) {\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\treturn nil, func() {}, fmt.Errorf(\"net.Listen() failed: %v\", err)\n\t\t}\n\t}\n\n\ts := NewServer(lis.Addr().String())\n\twp := &wrappedListener{\n\t\tListener: lis,\n\t\tserver:   s,\n\t}\n\n\tserver := grpc.NewServer()\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(server, s)\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(server, s)\n\tgo server.Serve(wp)\n\n\treturn s, func() { server.Stop() }, nil\n}\n\nfunc NewServer(addr string) *Server {\n\ts := &Server{\n\t\tXDSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tNewConnChan:        testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tXDSResponseChan:    make(chan *Response, defaultChannelBufferSize),\n\t\tLRSResponseChan:    make(chan *Response, 1),\n\t\tLRSStreamOpenChan:  testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSStreamCloseChan: testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tAddress:            addr,\n\t}\n\ts.xdsServerV3 = &xdsServerV3{reqChan: s.XDSRequestChan, respChan: s.XDSResponseChan}\n\ts.lrsServerV3 = &lrsServerV3{reqChan: s.LRSRequestChan, respChan: s.LRSResponseChan, streamOpenChan: s.LRSStreamOpenChan, streamCloseChan: s.LRSStreamCloseChan}\n\treturn s\n}\n\ntype xdsServerV3 struct {\n\treqChan  *testutils.Channel\n\trespChan chan *Response\n}\n\nfunc (xdsS *xdsServerV3) StreamAggregatedResources(s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\terrCh := make(chan error, 2)\n\tgo func() {\n\t\tfor {\n\t\t\treq, err := s.Recv()\n\t\t\tif err != nil {\n\t\t\t\terrCh <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\txdsS.reqChan.Send(&Request{req, err})\n\t\t}\n\t}()\n\tgo func() {\n\t\tvar retErr error\n\t\tdefer func() {\n\t\t\terrCh <- retErr\n\t\t}()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase r := <-xdsS.respChan:\n\t\t\t\tif r.Err != nil {\n\t\t\t\t\tretErr = r.Err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := s.Send(r.Resp.(*v3discoverypb.DiscoveryResponse)); err != nil {\n\t\t\t\t\tretErr = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-s.Context().Done():\n\t\t\t\tretErr = s.Context().Err()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tif err := <-errCh; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\ntype lrsServerV3 struct {\n\treqChan         *testutils.Channel\n\trespChan        chan *Response\n\tstreamOpenChan  *testutils.Channel\n\tstreamCloseChan *testutils.Channel\n}\n\nfunc (lrsS *lrsServerV3) StreamLoadStats(s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\tlrsS.streamOpenChan.Send(nil)\n\tdefer lrsS.streamCloseChan.Send(nil)\n\n\treq, err := s.Recv()\n\tlrsS.reqChan.Send(&Request{req, err})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase r := <-lrsS.respChan:\n\t\tif r.Err != nil {\n\t\t\treturn r.Err\n\t\t}\n\t\tif err := s.Send(r.Resp.(*v3lrspb.LoadStatsResponse)); err != nil {\n\t\t\treturn err\n\t\t}\n\tcase <-s.Context().Done():\n\t\treturn s.Context().Err()\n\t}\n\n\tfor {\n\t\treq, err := s.Recv()\n\t\tlrsS.reqChan.Send(&Request{req, err})\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/stretchr/testify/mock/testutils\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\t\"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n)\n\ntype Server struct {\n\tXDSRequestChan     *testutils.Channel\n\tXDSResponseChan    chan *envoy_discovery_v3.DiscoveryResponse\n\tLRSRequestChan     *testutils.Channel\n\tLRSResponseChan    chan *envoy_load_stats_v3.LoadStatsResponse\n\tLRSStreamOpenChan  *testutils.Channel\n\tLRSStreamCloseChan *testutils.Channel\n\tNewConnChan        *testutils.Channel\n\tAddress            string\n\txdsServerV3        *xdsServerV3\n\tlrsServerV3        *lrsServerV3\n}\n\nfunc NewServer(addr string) *Server {\n\treturn &Server{\n\t\tXDSRequestChan:     testutils.NewChannel(),\n\t\tXDSResponseChan:    make(chan *envoy_discovery_v3.DiscoveryResponse, 1),\n\t\tLRSRequestChan:     testutils.NewChannel(),\n\t\tLRSResponseChan:    make(chan *envoy_load_stats_v3.LoadStatsResponse, 1),\n\t\tLRSStreamOpenChan:  testutils.NewChannel(),\n\t\tLRSStreamCloseChan: testutils.NewChannel(),\n\t\tNewConnChan:        testutils.NewChannel(),\n\t\tAddress:            addr,\n\t\txdsServerV3:        &xdsServerV3{},\n\t\tlrsServerV3:        &lrsServerV3{},\n\t}\n}\n\nfunc (s *Server) StartServer(lis net.Listener) (*Server, func(), error) {\n\tgrpcServer := grpc.NewServer()\n\tenvoy_discovery_v3.RegisterAggregatedDiscoveryServiceServer(grpcServer, s)\n\tenvoy_load_stats_v3.RegisterLoadReportingServiceServer(grpcServer, s)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tpanic(fmt.Sprintf(\"Failed to serve gRPC server: %v\", err))\n\t\t}\n\t}()\n\n\tcleanup := func() {\n\t\tgrpcServer.Stop()\n\t\tclose(s.XDSResponseChan)\n\t\tclose(s.LRSResponseChan)\n\t}\n\n\ts.Address = lis.Addr().String()\n\n\treturn s, cleanup, nil\n}\n\nfunc (s *Server) StreamAggregatedResources(stream envoy_discovery_v3.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.XDSRequestChan.Send(req)\n\t\tselect {\n\t\tcase resp := <-s.XDSResponseChan:\n\t\t\tif resp == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err := stream.Send(resp); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tdefault:\n\t\t}\n\t}\n}\n\nfunc (s *Server) StreamLoadStats(stream envoy_load_stats_v3.LoadReportingService_StreamLoadStatsServer) error {\n\ts.LRSStreamOpenChan.Send(struct{}{})\n\tdefer s.LRSStreamCloseChan.Send(struct{}{})\n\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.LRSRequestChan.Send(req)\n\t\tselect {\n\t\tcase resp := <-s.LRSResponseChan:\n\t\t\tif resp == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err := stream.Send(resp); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tdefault:\n\t\t}\n\t}\n}\n\ntype xdsServerV3 struct{}\n\ntype lrsServerV3 struct{}"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and handles gRPC communications.\n\nFunction Description: The main function sets up a gRPC server that listens on port 50051, registers the gRPC service implementation, and starts serving requests. It includes error handling for server setup and operation.\n\nInput: None (The function takes no explicit parameters but uses a hardcoded port \":50051\" for listening)\n\nOutput: None (The function doesn't return anything but will log fatal errors if the server fails to start or serve)\n\nNote: The actual gRPC service implementation (greeter struct) is not shown in the reference code but would need to be defined separately to implement the proto.GreeterServer interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"grpc-hello/proto\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tserver := grpc.NewServer()\n\treflection.Register(server)\n\tproto.RegisterGreeterServer(server, &greeter{})\n\n\tfmt.Println(\"grpc server start ...\")\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/proto\" // Update with actual proto package path\n)\n\nconst (\n\tport = \":50051\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a gRPC server for chaincode communication in a Hyperledger Fabric network, supporting both secure (TLS) and insecure connections, with the ability to handle chaincode registration and message echoing.\n\nStruct Description: ccSrv represents a chaincode gRPC server that listens for incoming connections, handles chaincode registration, and echoes received messages back to the client.\n\nFields:\nl: net.Listener - The network listener for incoming connections\ngrpcSrv: *grpc.Server - The gRPC server instance\nt: *testing.T - Testing context for assertions\nexpectedCCname: string - The expected chaincode name for validation during registration\n\nMethods:\nRegister: (stream pb.ChaincodeSupport_RegisterServer) -> error - Handles the chaincode registration stream, validates the chaincode name, and echoes messages back to the client\nstop: () -> () - Stops the gRPC server and closes the listener\nnewCCServer: (t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) -> *ccSrv - Creates and configures a new chaincode server instance with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\tpb \"github.com/hyperledger/fabric-protos-go-apiv2/peer\"\n\t\"github.com/hyperledger/fabric/common/crypto/tlsgen\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype ccSrv struct {\n\tl              net.Listener\n\tgrpcSrv        *grpc.Server\n\tt              *testing.T\n\texpectedCCname string\n}\n\nfunc (cs *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\tmsg, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\trequire.Equal(cs.t, pb.ChaincodeMessage_REGISTER.String(), msg.Type.String())\n\tchaincodeID := &pb.ChaincodeID{}\n\terr = proto.Unmarshal(msg.Payload, chaincodeID)\n\tif err != nil {\n\t\treturn err\n\t}\n\trequire.Equal(cs.t, cs.expectedCCname, chaincodeID.Name)\n\tfor {\n\t\tmsg, _ = stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = stream.Send(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (cs *ccSrv) stop() {\n\tcs.grpcSrv.Stop()\n\tcs.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tvar s *grpc.Server\n\tif withTLS {\n\t\tkeyPair, err := ca.NewServerCertKeyPair(\"localhost\")\n\t\trequire.NoError(t, err)\n\t\tcert, err := tls.X509KeyPair(keyPair.Cert, keyPair.Key)\n\t\trequire.NoError(t, err)\n\t\ttlsConf := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t\t\tClientCAs:    x509.NewCertPool(),\n\t\t}\n\t\ttlsConf.ClientCAs.AppendCertsFromPEM(ca.CertBytes())\n\t\ts = grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConf)))\n\t} else {\n\t\ts = grpc.NewServer()\n\t}\n\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", \"\", port))\n\trequire.NoError(t, err, \"%v\", err)\n\treturn &ccSrv{\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t\tl:              l,\n\t\tgrpcSrv:        s,\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/hyperledger/fabric/core/chaincode/pb\"\n\t\"github.com/stretchr/testify/require\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype ccSrv struct {\n\tl              net.Listener\n\tgrpcSrv        *grpc.Server\n\tt              *testing.T\n\texpectedCCname string\n}\n\nfunc (s *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\t_, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tccName := \"test_cc\"\n\trequire.Equal(s.t, s.expectedCCname, ccName)\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = stream.Send(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *ccSrv) stop() {\n\ts.grpcSrv.Stop()\n\ts.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"127.0.0.1:%d\", port))\n\trequire.NoError(t, err)\n\n\tvar opts []grpc.ServerOption\n\tif withTLS {\n\t\ttlsCreds, err := ca.ServerCertKeyPair()\n\t\trequire.NoError(t, err)\n\t\tcreds, err := credentials.NewServerTLSFromCert(&tlsCreds)\n\t\trequire.NoError(t, err)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tgrpcSrv := grpc.NewServer(opts...)\n\tpb.RegisterChaincodeSupportServer(grpcSrv, &ccSrv{\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t})\n\n\tgo grpcSrv.Serve(l)\n\treturn &ccSrv{\n\t\tl:              l,\n\t\tgrpcSrv:        grpcSrv,\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t}\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and registers a service to handle those requests.\n\nFunction Description: The function sets up a gRPC server that listens on a given TCP port, creates a new gRPC server instance, registers a service to handle incoming requests, and starts the server in a goroutine. The server runs until it is stopped or encounters an error.\n\nInput: None (The port is hardcoded as \":50052\" in the example, but could be parameterized)\n\nOutput: None (The function runs indefinitely until stopped or an error occurs, with side effects of starting the gRPC server)\n\nNote: The actual service implementation (ChannelzService) would need to be defined elsewhere and imported. The example shows the server setup pattern but assumes the service is already implemented.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tdefer lis.Close()\n\ts := grpc.NewServer()\n\tservice.RegisterChannelzServiceToServer(s)\n\tgo s.Serve(lis)\n\tdefer s.Stop()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/package/path\" // Update with actual package path\n)\n\nfunc startGRPCServer() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to listen: %v\\n\", err)\n\t\treturn\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterChannelzServiceServer(grpcServer, &pb.ChannelzService{}) // Assumes ChannelzService implements the server interface\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tfmt.Printf(\"Failed to serve: %v\\n\", err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The function `Run` initializes and starts a gRPC server with the provided network options. It sets up a network listener, creates a gRPC server instance, registers a key service, and handles graceful shutdown upon receiving interrupt or termination signals.\n\nInput: \n- `opts` [struct] - Configuration options for the server, containing:\n  - `Network` [string] - The network type (e.g., \"tcp\")\n  - `Address` [string] - The address to listen on (e.g., \":50051\")\n  - `Prompt` [interface{}] - Optional prompt for the key service\n\nOutput: \n- `error` - Returns an error if the server fails to start or encounters issues during execution",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/getsops/sops/v3/keyservice\"\n\t\"google.golang.org/grpc\"\n)\nfunc Run(opts Opts) error {\n\tlis, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer lis.Close()\n\tgrpcServer := grpc.NewServer()\n\tkeyservice.RegisterKeyServiceServer(grpcServer, keyservice.Server{\n\t\tPrompt: opts.Prompt,\n\t})\n\n\tsigc := make(chan os.Signal, 1)\n\tsignal.Notify(sigc, os.Interrupt, os.Kill, syscall.SIGTERM)\n\tgo func(c chan os.Signal) {\n\t\tsig := <-c\n\t\tlis.Close()\n\t\tos.Exit(0)\n\t}(sigc)\n\treturn grpcServer.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype KeyServiceServer interface {\n\t// Define your service methods here\n}\n\ntype ServerOptions struct {\n\tNetwork string\n\tAddress string\n\tPrompt  interface{}\n}\n\nfunc Run(opts ServerOptions) error {\n\tlis, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to listen: %v\", err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\t\n\t// Register your service here, example:\n\t// pb.RegisterYourServiceServer(grpcServer, &yourServiceImplementation{})\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"gRPC server failed: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\t<-quit\n\n\tfmt.Println(\"Shutting down gRPC server...\")\n\tgrpcServer.GracefulStop()\n\n\treturn nil\n}"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a Go struct that implements a mock gRPC server proxy for testing purposes, with start and stop functionality.\n\nStruct Description: The ProxyGRPCMock struct provides a mock implementation of a gRPC server that can be started and stopped programmatically. It allows for custom gRPC service implementations and registration routines to be injected for testing purposes.\n\nFields:\n- GRPCImplementer: [interface{}] - The implementation of the gRPC service handler\n- GRPCRegister: [func(s *grpc.Server, srv interface{})] - The function to register the gRPC service implementation with the server\n- listener: [net.Listener] - The network listener for the gRPC server\n\nMethods:\n- Start: [func(URL string) error] -> [error] - Starts the gRPC server on the specified URL (format \"scheme://path\"). Returns error if initialization fails.\n- Stop: [func() error] -> [error] - Stops the gRPC server by closing the listener. Returns error if no listener exists or closing fails.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister func(s *grpc.Server, srv interface{})\n\tlistener net.Listener\n}\n\nfunc (p *ProxyGRPCMock) Start(URL string) error {\n\tif p.GRPCImplementer == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC handler\")\n\t}\n\n\tif p.GRPCRegister == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC registration routine\")\n\t}\n\n\turl, err := url.Parse(URL)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tl, err := net.Listen(url.Scheme, url.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.listener = l\n\n\tgrpcServer := grpc.NewServer()\n\tp.GRPCRegister(grpcServer, p.GRPCImplementer)\n\n\tgo func() {\n\t\tgrpcServer.Serve(l)\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.listener == nil {\n\t\treturn fmt.Errorf(\"Missing proxy listener\")\n\t}\n\n\treturn p.listener.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister    func(s *grpc.Server, srv interface{})\n\tlistener        net.Listener\n\tserver          *grpc.Server\n\tmu              sync.Mutex\n}\n\nfunc (p *ProxyGRPCMock) Start(URL string) error {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\tlis, err := net.Listen(\"tcp\", URL)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.listener = lis\n\n\ts := grpc.NewServer()\n\tp.server = s\n\n\tif p.GRPCRegister != nil && p.GRPCImplementer != nil {\n\t\tp.GRPCRegister(s, p.GRPCImplementer)\n\t}\n\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\tif p.listener == nil {\n\t\treturn context.Canceled\n\t}\n\n\terr := p.listener.Close()\n\tp.listener = nil\n\tp.server.Stop()\n\tp.server = nil\n\n\treturn err\n}"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Implement a gRPC server in Go that can handle incoming requests with configurable message size limits, TLS support, and OpenTracing integration.\n\nStruct Description: The Server struct represents a gRPC server instance with configurable settings for buffer size and server options.\n\nFields:\ngrpcServer: *grpc.Server - The underlying gRPC server instance\nbufferSize: int - The buffer size for server operations (currently unused in reference code)\n\nMethods:\nNewServer: () -> *Server - Creates and returns a new Server instance with default values\n\nStart: (url *common.URL) -> () - Starts the gRPC server with the specified URL configuration. Handles:\n  - Network listener setup\n  - Message size configuration\n  - TLS setup if configured\n  - OpenTracing integration\n  - Service registration\n  - Server reflection\n\nStop: () -> () - Immediately stops the gRPC server\n\nGracefulStop: () -> () - Gracefully stops the gRPC server, allowing existing RPCs to complete",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\nimport (\n\t\"github.com/dubbogo/gost/log/logger\"\n\t\"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/common\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t\"dubbo.apache.org/dubbo-go/v3/config\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n)\n\ntype Server struct {\n\tgrpcServer *grpc.Server\n\tbufferSize int\n}\n\nfunc NewServer() *Server {\n\treturn &Server{}\n}\n\nfunc (s *Server) Start(url *common.URL) {\n\tvar (\n\t\taddr string\n\t\terr  error\n\t)\n\taddr = url.Location\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmaxServerRecvMsgSize := constant.DefaultMaxServerRecvMsgSize\n\tif recvMsgSize, convertErr := humanize.ParseBytes(url.GetParam(constant.MaxServerRecvMsgSize, \"\")); convertErr == nil && recvMsgSize != 0 {\n\t\tmaxServerRecvMsgSize = int(recvMsgSize)\n\t}\n\tmaxServerSendMsgSize := constant.DefaultMaxServerSendMsgSize\n\tif sendMsgSize, convertErr := humanize.ParseBytes(url.GetParam(constant.MaxServerSendMsgSize, \"\")); err == convertErr && sendMsgSize != 0 {\n\t\tmaxServerSendMsgSize = int(sendMsgSize)\n\t}\n\n\ttracer := opentracing.GlobalTracer()\n\tvar serverOpts []grpc.ServerOption\n\tserverOpts = append(serverOpts,\n\t\tgrpc.UnaryInterceptor(otgrpc.OpenTracingServerInterceptor(tracer)),\n\t\tgrpc.StreamInterceptor(otgrpc.OpenTracingStreamServerInterceptor(tracer)),\n\t\tgrpc.MaxRecvMsgSize(maxServerRecvMsgSize),\n\t\tgrpc.MaxSendMsgSize(maxServerSendMsgSize),\n\t)\n\n\ttlsConfig := config.GetRootConfig().TLSConfig\n\tif tlsConfig != nil {\n\t\tvar cfg *tls.Config\n\t\tcfg, err = config.GetServerTlsConfig(&config.TLSConfig{\n\t\t\tCACertFile:    tlsConfig.CACertFile,\n\t\t\tTLSCertFile:   tlsConfig.TLSCertFile,\n\t\t\tTLSKeyFile:    tlsConfig.TLSKeyFile,\n\t\t\tTLSServerName: tlsConfig.TLSServerName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Grpc Server initialized the TLSConfig configuration\")\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(cfg)))\n\t} else {\n\t\tserverOpts = append(serverOpts, grpc.Creds(insecure.NewCredentials()))\n\t}\n\tserver := grpc.NewServer(serverOpts...)\n\ts.grpcServer = server\n\n\tgo func() {\n\t\tproviderServices := config.GetProviderConfig().Services\n\n\t\tif len(providerServices) == 0 {\n\t\t\tpanic(\"provider service map is null\")\n\t\t}\n\t\twaitGrpcExporter(providerServices)\n\t\tregisterService(providerServices, server)\n\t\treflection.Register(server)\n\n\t\tif err = server.Serve(lis); err != nil {\n\t\t\tlogger.Errorf(\"server serve failed with err: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Stop() {\n\ts.grpcServer.Stop()\n}\n\nfunc (s *Server) GracefulStop() {\n\ts.grpcServer.GracefulStop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package grpc\n\nimport (\n\t\"net\"\n\t\"os\"\n\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype Server struct {\n\tgrpcServer *grpc.Server\n\tbufferSize int\n}\n\nfunc NewServer() *Server {\n\treturn &Server{\n\t\tgrpcServer: nil,\n\t\tbufferSize: 1024 * 1024, // Default buffer size 1MB (unused in this implementation)\n\t}\n}\n\nfunc (s *Server) Start(url *common.URL) {\n\tlis, err := net.Listen(\"tcp\", url.Address)\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\t// Message size configuration\n\tmaxRecvMsgSize := 4 * 1024 * 1024 // 4MB default\n\tif size, ok := url.Parameters[\"max_recv_msg_size\"]; ok {\n\t\t// In real code you'd parse the size value here\n\t\topts = append(opts, grpc.MaxRecvMsgSize(size))\n\t}\n\topts = append(opts, grpc.MaxSendMsgSize(maxRecvMsgSize))\n\n\t// TLS setup if configured\n\tif url.Protocol == \"grpcs\" {\n\t\t// Load TLS credentials - this is just a placeholder for actual TLS loading logic\n\t\t// tlsCredentials, err := loadTLSCredentials()\n\t\t// if err != nil {\n\t\t//     log.Fatal(\"cannot load TLS credentials: \", err)\n\t\t// }\n\t\t// opts = append(opts, grpc.Creds(tlsCredentials))\n\t}\n\n\t// OpenTracing integration\n\tif tracer := opentracing.GlobalTracer(); tracer != nil {\n\t\topts = append(opts, grpc.UnaryInterceptor(grpc_opentracing.UnaryServerInterceptor()))\n\t\topts = append(opts, grpc.StreamInterceptor(grpc_opentracing.StreamServerInterceptor()))\n\t}\n\n\ts.grpcServer = grpc.NewServer(opts...)\n\n\t// Register services here\n\t// pb.RegisterYourServiceServer(s.grpcServer, yourServiceInstance)\n\n\t// Register server reflection\n\treflection.Register(s.grpcServer)\n\n\tgo func() {\n\t\tif err := s.grpcServer.Serve(lis); err != nil {\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Stop() {\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.Stop()\n\t}\n}\n\nfunc (s *Server) GracefulStop() {\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.GracefulStop()\n\t}\n}"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles various WebSocket operations including checking user online status, sending messages to users, broadcasting messages to all users, and retrieving user lists.\n\nStruct Description: The `server` struct implements the gRPC service interface defined in the protobuf file, providing concrete implementations for WebSocket operations.\n\nFields:\n- UnimplementedAccServerServer: [protobuf.UnimplementedAccServerServer] - Embedded type to ensure forward compatibility with gRPC service updates\n\nMethods:\n- QueryUsersOnline: [Name](ctx context.Context, req *protobuf.QueryUsersOnlineReq) -> (*protobuf.QueryUsersOnlineRsp, error) - Checks if a specified user is currently online\n- SendMsg: [Name](ctx context.Context, req *protobuf.SendMsgReq) -> (*protobuf.SendMsgRsp, error) - Sends a message to a specific user\n- SendMsgAll: [Name](ctx context.Context, req *protobuf.SendMsgAllReq) -> (*protobuf.SendMsgAllRsp, error) - Broadcasts a message to all connected users\n- GetUserList: [Name](ctx context.Context, req *protobuf.GetUserListReq) -> (*protobuf.GetUserListRsp, error) - Retrieves the list of currently connected users\n- Init: [Name]() -> () - Initializes and starts the gRPC server with configuration from Viper",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/link1st/gowebsocket/v2/common\"\n\t\"github.com/link1st/gowebsocket/v2/models\"\n\t\"github.com/link1st/gowebsocket/v2/protobuf\"\n\t\"github.com/link1st/gowebsocket/v2/servers/websocket\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n}\n\nfunc (s *server) QueryUsersOnline(c context.Context, req *protobuf.QueryUsersOnlineReq) (rsp *protobuf.QueryUsersOnlineRsp, err error) {\n\trsp = &protobuf.QueryUsersOnlineRsp{}\n\tonline := websocket.CheckUserOnline(req.GetAppID(), req.GetUserID())\n\tsetErr(req, common.OK, \"\")\n\trsp.Online = online\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsg(c context.Context, req *protobuf.SendMsgReq) (rsp *protobuf.SendMsgRsp, err error) {\n\trsp = &protobuf.SendMsgRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\tsendResults, err := websocket.SendUserMessageLocal(req.GetAppID(), req.GetUserID(), data)\n\tif err != nil {\n\t\tsetErr(rsp, common.ServerError, \"\")\n\t\treturn rsp, nil\n\t}\n\tif !sendResults {\n\t\tsetErr(rsp, common.OperationFailure, \"\")\n\t\treturn rsp, nil\n\t}\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsgAll(c context.Context, req *protobuf.SendMsgAllReq) (rsp *protobuf.SendMsgAllRsp, err error) {\n\trsp = &protobuf.SendMsgAllRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\twebsocket.AllSendMessages(req.GetAppID(), req.GetUserID(), data)\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) GetUserList(c context.Context, req *protobuf.GetUserListReq) (rsp *protobuf.GetUserListRsp, err error) {\n\trsp = &protobuf.GetUserListRsp{}\n\tuserList := websocket.GetUserList(req.GetAppID())\n\tsetErr(rsp, common.OK, \"\")\n\trsp.UserID = userList\n\treturn rsp, nil\n}\n\nfunc Init() {\n\trpcPort := viper.GetString(\"app.rpcPort\")\n\tlis, err := net.Listen(\"tcp\", \":\"+rpcPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n\t\"net\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n\tuserManager *UserManager // Assuming a UserManager handles user tracking and message routing\n}\n\nfunc (s *server) QueryUsersOnline(ctx context.Context, req *protobuf.QueryUsersOnlineReq) (*protobuf.QueryUsersOnlineRsp, error) {\n\tisOnline := s.userManager.IsUserOnline(req.UserId)\n\treturn &protobuf.QueryUsersOnlineRsp{IsOnline: isOnline}, nil\n}\n\nfunc (s *server) SendMsg(ctx context.Context, req *protobuf.SendMsgReq) (*protobuf.SendMsgRsp, error) {\n\terr := s.userManager.SendMessage(req.UserId, req.Message)\n\tif err != nil {\n\t\treturn &protobuf.SendMsgRsp{Success: false}, err\n\t}\n\treturn &protobuf.SendMsgRsp{Success: true}, nil\n}\n\nfunc (s *server) SendMsgAll(ctx context.Context, req *protobuf.SendMsgAllReq) (*protobuf.SendMsgAllRsp, error) {\n\terr := s.userManager.BroadcastMessage(req.Message)\n\tif err != nil {\n\t\treturn &protobuf.SendMsgAllRsp{Success: false}, err\n\t}\n\treturn &protobuf.SendMsgAllRsp{Success: true}, nil\n}\n\nfunc (s *server) GetUserList(ctx context.Context, req *protobuf.GetUserListReq) (*protobuf.GetUserListRsp, error) {\n\tusers := s.userManager.GetConnectedUsers()\n\treturn &protobuf.GetUserListRsp{Users: users}, nil\n}\n\nfunc (s *server) Init() {\n\tport := viper.GetString(\"server.port\")\n\tlis, err := net.Listen(\"tcp\", \":\"+port)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsrv := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(srv, s)\n\n\tif err := srv.Serve(lis); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server to handle incoming requests on a specified network address.\n\nFunction Description: The function `startServer` sets up a gRPC server that listens on the provided TCP address. It creates a new gRPC server instance, registers the Echo service implementation, and begins serving requests. If any step fails, it logs the error and terminates the program.\n\nInput: \n- `addr` [string] - The network address (including port) on which the gRPC server should listen (e.g., \"localhost:50051\").\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error).",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &ecServer{addr: addr})\n\tlog.Printf(\"serving on %s\\n\", addr)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/protobuf/package\" // Update with actual proto package\n)\n\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterEchoServiceServer(grpcServer, &echoService{}) // Assumes echoService implements EchoServiceServer\n\n\tlog.Printf(\"Server listening on %s\", addr)\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Create a mock CSI (Container Storage Interface) provider server in Go that implements the gRPC interface for a secrets store CSI driver. This server should be able to simulate both successful and error responses for testing purposes.\n\nStruct Description: The MockCSIProviderServer struct represents a mock implementation of a CSI provider server that communicates via gRPC over a Unix domain socket. It allows configuration of mock responses and error conditions for testing the CSI driver integration.\n\nFields:\n- grpcServer: *grpc.Server - The gRPC server instance\n- listener: net.Listener - The network listener for the gRPC server\n- socketPath: string - The filesystem path for the Unix domain socket\n- returnErr: error - An error to return for simulated error conditions\n- errorCode: string - The error code to include in responses\n- objects: []*v1alpha1.ObjectVersion - Mock object versions to return\n- files: []*v1alpha1.File - Mock files to return\n\nMethods:\n- NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) - Creates a new mock server instance with the given socket path\n- SetReturnError(err error) - Sets an error to be returned by the mock server\n- SetObjects(objects map[string]string) - Configures mock object versions to return\n- SetFiles(files []*v1alpha1.File) - Configures mock files to return\n- SetProviderErrorCode(errorCode string) - Sets the error code for responses\n- Start() error - Starts the gRPC server listening on the configured socket\n- Stop() - Gracefully stops the gRPC server\n- Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) - Implements the Mount gRPC method\n- Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) - Implements the Version gRPC method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"sigs.k8s.io/secrets-store-csi-driver/provider/v1alpha1\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer *grpc.Server\n\tlistener   net.Listener\n\tsocketPath string\n\treturnErr  error\n\terrorCode  string\n\tobjects    []*v1alpha1.ObjectVersion\n\tfiles      []*v1alpha1.File\n}\n\nfunc NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tserver := grpc.NewServer()\n\ts := &MockCSIProviderServer{\n\t\tgrpcServer: server,\n\t\tsocketPath: socketPath,\n\t}\n\tv1alpha1.RegisterCSIDriverProviderServer(server, s)\n\treturn s, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tvar ov []*v1alpha1.ObjectVersion\n\tfor k, v := range objects {\n\t\tov = append(ov, &v1alpha1.ObjectVersion{Id: k, Version: v})\n\t}\n\tm.objects = ov\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tvar ov []*v1alpha1.File\n\tfor _, v := range files {\n\t\tov = append(ov, &v1alpha1.File{\n\t\t\tPath:     v.Path,\n\t\t\tMode:     v.Mode,\n\t\t\tContents: v.Contents,\n\t\t})\n\t}\n\tm.files = ov\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\tvar err error\n\tm.listener, err = net.Listen(\"unix\", m.socketPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tgo func() {\n\t\tif err = m.grpcServer.Serve(m.listener); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.GracefulStop()\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tvar attrib, secret map[string]string\n\tvar filePermission os.FileMode\n\tvar err error\n\n\tif m.returnErr != nil {\n\t\treturn &v1alpha1.MountResponse{}, m.returnErr\n\t}\n\tif err = json.Unmarshal([]byte(req.GetAttributes()), &attrib); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal attributes, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetSecrets()), &secret); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal secrets, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetPermission()), &filePermission); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal file permission, error: %w\", err)\n\t}\n\treturn &v1alpha1.MountResponse{\n\t\tObjectVersion: m.objects,\n\t\tError: &v1alpha1.Error{\n\t\t\tCode: m.errorCode,\n\t\t},\n\t\tFiles: m.files,\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion:        \"v1alpha1\",\n\t\tRuntimeName:    \"fakeprovider\",\n\t\tRuntimeVersion: \"0.0.10\",\n\t}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"github.com/container-storage-interface/spec/lib/go/csi\"\n\t\"google.golang.org/grpc\"\n\tv1alpha1 \"path/to/your/v1alpha1\" // Replace with actual import path\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer  *grpc.Server\n\tlistener    net.Listener\n\tsocketPath  string\n\treturnErr   error\n\terrorCode   string\n\tobjects     []*v1alpha1.ObjectVersion\n\tfiles       []*v1alpha1.File\n\tmu          sync.Mutex\n}\n\nfunc NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tif err := os.RemoveAll(socketPath); err != nil && !os.IsNotExist(err) {\n\t\treturn nil, err\n\t}\n\tdir := filepath.Dir(socketPath)\n\tif err := os.MkdirAll(dir, 0755); err != nil {\n\t\treturn nil, err\n\t}\n\n\tserver := &MockCSIProviderServer{\n\t\tsocketPath: socketPath,\n\t}\n\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserver.listener = lis\n\n\tgrpcServer := grpc.NewServer()\n\tserver.grpcServer = grpcServer\n\n\tcsi.RegisterIdentityServer(grpcServer, server)\n\tcsi.RegisterNodeServer(grpcServer, server)\n\n\treturn server, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tobjs := make([]*v1alpha1.ObjectVersion, 0, len(objects))\n\tfor name, version := range objects {\n\t\tobjs = append(objs, &v1alpha1.ObjectVersion{\n\t\t\tName:    name,\n\t\t\tVersion: version,\n\t\t})\n\t}\n\tm.objects = objs\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.files = files\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\treturn m.grpcServer.Serve(m.listener)\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.Stop()\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tif m.returnErr != nil {\n\t\treturn &v1alpha1.MountResponse{\n\t\t\tObjectVersions: m.objects,\n\t\t\tFiles:          m.files,\n\t\t\tErrorCode:      m.errorCode,\n\t\t}, m.returnErr\n\t}\n\n\treturn &v1alpha1.MountResponse{\n\t\tObjectVersions: m.objects,\n\t\tFiles:          m.files,\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion: \"1.0.0\",\n\t}, nil\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a gRPC server in Go that handles authentication services, connects to Redis for data storage, and exposes Prometheus metrics for monitoring.\n\nStruct Description: The authHandler struct implements the AuthServiceServer interface and provides authentication functionality using Redis as the backend storage.\n\nFields:\nredisClient: *redis.Client - The Redis client used for data storage and retrieval\n\nMethods:\nServe: (listener net.Listener) -> error - Starts the gRPC server and begins listening for incoming requests\nRegisterWithPrometheus: () -> error - Registers gRPC and custom metrics with Prometheus\nStartMetricsServer: () -> error - Starts an HTTP server for Prometheus metrics collection\n\nNote: The struct implements all required gRPC service methods defined in the auth.proto file, though these are not shown in the reference code. The main functionality includes:\n1. Setting up a gRPC server with Prometheus monitoring\n2. Establishing Redis connection\n3. Combining gRPC and HTTP servers for both RPC calls and metrics collection\n4. Proper error handling and logging throughout the process",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/go-redis/redis\"\n\t\"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/lucperkins/colossus/proto/auth\"\n)\nfunc main() {\n\tlog.Printf(\"Starting up the gRPC auth server on localhost:%d\", PORT)\n\n\tlog.Print(\"Attempting to connect to Redis\")\n\n\tredisClient := redis.NewClient(&redis.Options{\n\t\tAddr: \"colossus-redis-cluster:6379\",\n\t})\n\n\t_, err := redisClient.Ping().Result()\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect to Redis cluster: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully connected to Redis\")\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", PORT))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully created TCP listener\")\n\n\tserver := grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n\t)\n\n\tauthServer := authHandler{\n\t\tredisClient: redisClient,\n\t}\n\n\thttpServer := &http.Server{\n\t\tHandler: promhttp.HandlerFor(metricsRegistry, promhttp.HandlerOpts{}),\n\t\tAddr:    fmt.Sprintf(\"0.0.0.0:%d\", PROMETHEUS_PORT),\n\t}\n\n\tauth.RegisterAuthServiceServer(server, &authServer)\n\n\tgrpcMetrics.InitializeMetrics(server)\n\n\tmetricsRegistry.MustRegister(grpcMetrics, authCounter, failCounter)\n\n\tlog.Print(\"Successfully registered with Prometheus\")\n\n\tgo func() {\n\t\tlog.Print(\"Starting up HTTP server for Prometheus metrics collection\")\n\n\t\tif err := httpServer.ListenAndServe(); err != nil {\n\t\t\tlog.Fatalf(\"Unable to start HTTP server for Prometheus metrics: %v\", err)\n\t\t}\n\t}()\n\n\tlog.Fatal(server.Serve(listener))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/go-redis/redis/v8\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n)\n\nvar (\n\tgrpcRequestsCounter = prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"grpc_requests_total\",\n\t\t\tHelp: \"Total number of gRPC requests received.\",\n\t\t},\n\t\t[]string{\"service\", \"method\"},\n\t)\n\n\tcustomAuthCounter = prometheus.NewCounter(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"custom_authentication_attempts_total\",\n\t\t\tHelp: \"Total number of authentication attempts.\",\n\t\t},\n\t)\n)\n\ntype authHandler struct {\n\tredisClient *redis.Client\n}\n\nfunc (a *authHandler) Serve(listener net.Listener) error {\n\ts := grpc.NewServer()\n\tRegisterAuthServiceServer(s, a)\n\n\tlog.Println(\"Starting gRPC server...\")\n\treturn s.Serve(listener)\n}\n\nfunc (a *authHandler) RegisterWithPrometheus() error {\n\tif err := prometheus.Register(grpcRequestsCounter); err != nil {\n\t\treturn fmt.Errorf(\"failed to register grpcRequestsCounter: %w\", err)\n\t}\n\tif err := prometheus.Register(customAuthCounter); err != nil {\n\t\treturn fmt.Errorf(\"failed to register customAuthCounter: %w\", err)\n\t}\n\treturn nil\n}\n\nfunc (a *authHandler) StartMetricsServer() error {\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Println(\"Starting metrics server on :8080...\")\n\treturn http.ListenAndServe(\":8080\", nil)\n}\n\nfunc NewAuthHandler(redisAddr string) (*authHandler, error) {\n\tclient := redis.NewClient(&redis.Options{\n\t\tAddr: redisAddr,\n\t})\n\n\tif _, err := client.Ping(context.Background()).Result(); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect to Redis: %w\", err)\n\t}\n\n\treturn &authHandler{\n\t\tredisClient: client,\n\t}, nil\n}\n\nfunc main() {\n\tauth, err := NewAuthHandler(\"localhost:6379\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to initialize auth handler: %v\", err)\n\t}\n\n\tif err := auth.RegisterWithPrometheus(); err != nil {\n\t\tlog.Fatalf(\"Failed to register Prometheus metrics: %v\", err)\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := auth.StartMetricsServer(); err != nil {\n\t\t\tlog.Fatalf(\"Failed to start metrics server: %v\", err)\n\t\t}\n\t}()\n\n\tif err := auth.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve gRPC server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Implement a gRPC server in Go that collects and manages execution statistics for tasks in a distributed system.\n\nStruct Description: The Executor struct represents a gRPC server that handles execution statistics collection and management. It maintains a list of execution stats and provides methods to serve gRPC requests and process incoming statistics.\n\nFields:\nstats: []*pb.ExecutionStat - A slice of pointers to ExecutionStat protobuf messages, storing the collected execution statistics.\n\nMethods:\nserveGrpc: (listener net.Listener) -> () - Starts a gRPC server on the given listener, registering the Executor as a GleamExecutorServer implementation.\nCollectExecutionStatistics: (stream pb.GleamExecutor_CollectExecutionStatisticsServer) -> error - Processes a stream of execution statistics, updating the internal stats collection when matching task IDs are found. Returns nil on successful completion or an error if stream processing fails.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/chrislusf/gleam/pb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (exe *Executor) serveGrpc(listener net.Listener) {\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(grpcServer, exe)\n\tgrpcServer.Serve(listener)\n}\n\nfunc (exe *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstats, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, stat := range stats.Stats {\n\t\t\tfor i, current := range exe.stats {\n\t\t\t\tif current.StepId == stat.StepId && current.TaskId == stat.TaskId {\n\t\t\t\t\texe.stats[i] = stat\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/protobuf/package\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (e *Executor) serveGrpc(listener net.Listener) {\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(grpcServer, e)\n\tgrpcServer.Serve(listener)\n}\n\nfunc (e *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstat, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfound := false\n\t\tfor i, s := range e.stats {\n\t\t\tif s.TaskId == stat.TaskId {\n\t\t\t\te.stats[i] = stat\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\te.stats = append(e.stats, stat)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (e *Executor) GetExecutionStats(ctx context.Context, req *pb.GetExecutionStatsRequest) (*pb.ExecutionStatsResponse, error) {\n\treturn &pb.ExecutionStatsResponse{Stats: e.stats}, nil\n}"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a function that sets up and starts a gRPC server with reflection capabilities, registering multiple services and handling incoming requests.\n\nFunction Description: The Serve function initializes a gRPC server on a specified TCP port, registers multiple service implementations (RouteGuide and Foobar), enables server reflection for debugging, and starts listening for incoming RPC requests. It also demonstrates protobuf JSON marshaling of a well-known type.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but runs indefinitely to serve requests)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":5001\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"server: failed to create listener: %v\", err)\n\t}\n\n\te, _ := protojson.Marshal(&WellKnownRequest{Timestamp: timestamppb.Now()})\n\tfmt.Printf(\"string(e) = %+v\\n\", string(e))\n\n\ts := newServer()\n\tgs := grpc.NewServer()\n\tRegisterRouteGuideServer(gs, s)\n\tRegisterFoobarServer(gs, s)\n\treflection.Register(gs)\n\tgs.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\t\"google.golang.org/protobuf/types/known/wrapperspb\"\n)\n\n// RouteGuideServer is an example service interface\ntype RouteGuideServer struct {\n\tgrpc.ServerStream\n}\n\n// FoobarServer is another example service interface\ntype FoobarServer struct {\n\tgrpc.ServerStream\n}\n\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\n\t// Register multiple services\n\tRegisterRouteGuideServer(s, &RouteGuideServer{})\n\tRegisterFoobarServer(s, &FoobarServer{})\n\n\t// Register reflection service on gRPC server\n\treflection.Register(s)\n\n\t// Demonstrate protobuf JSON marshaling of a well-known type\n\twrapped := wrapperspb.String(\"hello world\")\n\tjsonBytes, _ := protojson.Marshal(wrapped)\n\tfmt.Printf(\"Marshaled JSON: %s\\n\", jsonBytes)\n\n\tlog.Println(\"Starting gRPC server on port 50051...\")\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n\n// Service registration boilerplate (empty implementations for this example)\n\nfunc RegisterRouteGuideServer(s *grpc.Server, srv RouteGuideServer) {\n\ts.RegisterService(&_RouteGuide_serviceDesc, srv)\n}\n\nfunc RegisterFoobarServer(s *grpc.Server, srv FoobarServer) {\n\ts.RegisterService(&_Foobar_serviceDesc, srv)\n}\n\nvar _ = context.Background() // prevent unused import error if needed elsewhere"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement a gRPC server for a CSI (Container Storage Interface) driver in Go, including server lifecycle management, request interception, and authentication.\n\nStruct Description: CSIDriver represents a gRPC server implementation for CSI driver operations, managing server lifecycle, intercepting requests, and handling authentication.\n\nFields:\n- listener: net.Listener - Network listener for incoming connections\n- server: *grpc.Server - gRPC server instance\n- servers: *CSIDriverServers - CSI service implementations (Controller, Identity, Node)\n- wg: sync.WaitGroup - Synchronization for graceful shutdown\n- running: bool - Server running state flag\n- lock: sync.Mutex - Mutex for thread-safe operations\n- creds: *CSICreds - Authentication credentials\n- logGRPC: LogGRPC - Callback for logging gRPC calls\n\nMethods:\n- NewCSIDriver(*CSIDriverServers) -> *CSIDriver - Constructor that creates a new CSIDriver instance with given service implementations\n- Start(net.Listener, grpc.UnaryServerInterceptor) -> error - Starts the gRPC server with optional interceptor\n- goServe(chan<- bool) -> - Internal method to start server in goroutine\n- Stop() -> - Stops the server gracefully\n- callInterceptor(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) -> (interface{}, error) - Request interceptor handling authentication and logging",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype CSIDriver struct {\n\tlistener net.Listener\n\tserver   *grpc.Server\n\tservers  *CSIDriverServers\n\twg       sync.WaitGroup\n\trunning  bool\n\tlock     sync.Mutex\n\tcreds    *CSICreds\n\tlogGRPC  LogGRPC\n}\n\ntype LogGRPC func(method string, request, reply interface{}, err error)\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t}\n}\n\nfunc (c *CSIDriver) Start(l net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tc.listener = l\n\n\tif interceptor == nil {\n\t\tinterceptor = c.callInterceptor\n\t}\n\tc.server = grpc.NewServer(grpc.UnaryInterceptor(interceptor))\n\n\tif c.servers.Controller != nil {\n\t\tcsi.RegisterControllerServer(c.server, c.servers.Controller)\n\t}\n\tif c.servers.Identity != nil {\n\t\tcsi.RegisterIdentityServer(c.server, c.servers.Identity)\n\t}\n\tif c.servers.Node != nil {\n\t\tcsi.RegisterNodeServer(c.server, c.servers.Node)\n\t}\n\n\twaitForServer := make(chan bool)\n\tc.goServe(waitForServer)\n\t<-waitForServer\n\tc.running = true\n\treturn nil\n}\n\nfunc (c *CSIDriver) goServe(started chan<- bool) {\n\tgo func() {\n\t\tc.wg.Add(1)\n\t\tdefer c.wg.Done()\n\t\tstarted <- true\n\t\tc.server.Serve(c.listener)\n\t}()\n}\n\nfunc (c *CSIDriver) Stop() {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif !c.running {\n\t\treturn\n\t}\n\n\tc.server.Stop()\n\tc.wg.Wait()\n}\n\nfunc (c *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\terr := authInterceptor(c.creds, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trsp, err := handler(ctx, req)\n\tif c.logGRPC != nil {\n\t\tc.logGRPC(info.FullMethod, req, rsp, err)\n\t}\n\treturn rsp, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package csi\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype CSICreds struct {\n\tUsername string\n\tPassword string\n\tToken    string\n}\n\ntype LogGRPC func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error)\n\ntype CSIDriverServers struct {\n\tController *ControllerService\n\tIdentity   *IdentityService\n\tNode       *NodeService\n}\n\ntype CSIDriver struct {\n\tlistener  net.Listener\n\tserver    *grpc.Server\n\tservers   *CSIDriverServers\n\twg        sync.WaitGroup\n\trunning   bool\n\tlock      sync.Mutex\n\tcreds     *CSICreds\n\tlogGRPC   LogGRPC\n}\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t\trunning: false,\n\t}\n}\n\nfunc (d *CSIDriver) Start(listener net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\td.lock.Lock()\n\tdefer d.lock.Unlock()\n\n\tif d.running {\n\t\treturn nil\n\t}\n\n\td.listener = listener\n\n\tvar opts []grpc.ServerOption\n\tif interceptor != nil {\n\t\topts = append(opts, grpc.UnaryInterceptor(interceptor))\n\t}\n\n\tif d.creds != nil {\n\t\t// Assuming TLS or other credentials setup here\n\t\t// Example: opts = append(opts, grpc.Creds(...))\n\t}\n\n\td.server = grpc.NewServer(opts...)\n\n\tif d.servers.Controller != nil {\n\t\tRegisterControllerServer(d.server, d.servers.Controller)\n\t}\n\tif d.servers.Identity != nil {\n\t\tRegisterIdentityServer(d.server, d.servers.Identity)\n\t}\n\tif d.servers.Node != nil {\n\t\tRegisterNodeServer(d.server, d.servers.Node)\n\t}\n\n\td.running = true\n\tgo d.goServe(make(chan bool))\n\n\treturn nil\n}\n\nfunc (d *CSIDriver) goServe(ready chan<- bool) {\n\td.wg.Add(1)\n\tdefer d.wg.Done()\n\n\tclose(ready)\n\tif err := d.server.Serve(d.listener); err != nil {\n\t\t// Handle error if needed\n\t\td.Stop()\n\t}\n}\n\nfunc (d *CSIDriver) Stop() {\n\td.lock.Lock()\n\tdefer d.lock.Unlock()\n\n\tif !d.running {\n\t\treturn\n\t}\n\n\td.server.GracefulStop()\n\td.running = false\n\td.listener = nil\n\td.server = nil\n}\n\nfunc (d *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tif d.creds != nil {\n\t\t// Authentication logic here, e.g., validate token, username/password\n\t\t// Example:\n\t\t// if err := authenticate(ctx, d.creds); err != nil {\n\t\t//     return nil, err\n\t\t// }\n\t}\n\n\tif d.logGRPC != nil {\n\t\treturn d.logGRPC(ctx, req, info, handler)\n\t}\n\n\treturn handler(ctx, req)\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown.\n\nStruct Description: The Plumber struct represents a gRPC server instance with configuration options, logging, and shutdown capabilities.\n\nFields:\n- Config: *options.Config - Configuration settings for the server\n- CLIOptions: *options.CLIOptions - Command line interface options\n- PersistentConfig: *options.PersistentConfig - Persistent configuration settings\n- Actions: *actions.Actions - Server actions and operations\n- Bus: bus.IBus - Message bus interface\n- ServiceShutdownCtx: context.Context - Context for shutdown signaling\n- log: *logrus.Entry - Logger instance\n\nMethods:\n- startGRPCServer: () -> error - Starts the gRPC server and listens for incoming requests\n- watchServiceShutdown: (*grpc.Server) -> () - Monitors for shutdown signals and stops the gRPC server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/batchcorp/plumber-schemas/build/go/protos\"\n\t\"github.com/streamdal/plumber/server\"\n)\n\ntype Plumber struct {\n\tConfig               *options.Config\n\tCLIOptions           *options.CLIOptions\n\tPersistentConfig     *options.PersistentConfig\n\tActions              *actions.Actions\n\tBus                  bus.IBus\n\tServiceShutdownCtx   context.Context\n\tlog                  *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlis, err := net.Listen(\"tcp\", p.CLIOptions.Server.GrpcListenAddress)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to listen on '%s': %s\", p.CLIOptions.Server.GrpcListenAddress, err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tgrpcServer := grpc.NewServer(opts...)\n\n\tp.PersistentConfig.ClusterID = p.CLIOptions.Server.ClusterId\n\n\tplumberServer := &server.Server{\n\t\tActions:          p.Actions,\n\t\tPersistentConfig: p.PersistentConfig,\n\t\tAuthToken:        p.CLIOptions.Server.AuthToken,\n\t\tBus:              p.Bus,\n\t\tLog:              logrus.WithField(\"pkg\", \"plumber/cli_server.go\"),\n\t\tCLIOptions:       p.CLIOptions,\n\t}\n\n\tprotos.RegisterPlumberServerServer(grpcServer, plumberServer)\n\n\tgo p.watchServiceShutdown(grpcServer)\n\n\tp.log.Debugf(\"starting gRPC server on %s\", p.CLIOptions.Server.GrpcListenAddress)\n\n\terrCh := make(chan error, 1)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\terrCh <- errors.Wrap(err, \"unable to start gRPC server\")\n\t\t}\n\t}()\n\n\tafterCh := time.After(5 * time.Second)\n\n\tselect {\n\tcase <-afterCh:\n\t\treturn nil\n\tcase err := <-errCh:\n\t\treturn err\n\t}\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\n\tp.log.Debug(\"received shutdown request in gRPC server via ServiceShutdownCtx\")\n\n\ttime.Sleep(5 * time.Second)\n\n\tgrpcServer.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Plumber struct {\n\tConfig             *options.Config\n\tCLIOptions         *options.CLIOptions\n\tPersistentConfig   *options.PersistentConfig\n\tActions            *actions.Actions\n\tBus                bus.IBus\n\tServiceShutdownCtx context.Context\n\tlog                *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlistener, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\tgo p.watchServiceShutdown(grpcServer)\n\n\tlog.Println(\"Starting gRPC server...\")\n\tif err := grpcServer.Serve(listener); err != nil {\n\t\tgrpcServer.Stop()\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\n\tp.log.Info(\"Shutting down gRPC server gracefully...\")\n\n\tgrpcServer.GracefulStop()\n}"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles incoming requests with custom stream preprocessing and graceful shutdown capabilities.\n\nStruct Description: The `server` struct represents a gRPC server instance with additional control for graceful shutdown and stream preprocessing.\n\nFields:\n- grpcSrv: *grpc.Server - The underlying gRPC server instance\n- closeC: chan struct{} - Channel used to signal server shutdown\n\nMethods:\n- Serve: (lis net.Listener) -> error - Starts the gRPC server on the provided listener, initializing it with custom stream preprocessing\n- preGrpcStream: (ctx context.Context, info *tap.Info) -> (context.Context, error) - Intercepts incoming gRPC streams before processing, with special handling for the \"/vanus.core.raft.RaftServer/SendMessage\" method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\tsrv := grpc.NewServer(\n\t\tgrpc.InTapHandle(s.preGrpcStream),\n\t)\n\ts.grpcSrv = srv\n\n\treturn srv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tcCtx, cancel := context.WithCancel(ctx)\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-cCtx.Done():\n\t\t\tcase <-s.closeC:\n\t\t\t\tcancel()\n\t\t\t}\n\t\t}()\n\t\treturn cCtx, nil\n\t}\n\treturn ctx, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/peer\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\topts := []grpc.ServerOption{\n\t\tgrpc.ChainUnaryInterceptor(),\n\t\tgrpc.ChainStreamInterceptor(),\n\t\tgrpc.Tap(tap.WithPreprocessing(s.preGrpcStream)),\n\t}\n\ts.grpcSrv = grpc.NewServer(opts...)\n\treturn s.grpcSrv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tif p, ok := peer.FromContext(ctx); ok && p.AuthInfo != nil {\n\t\t\treturn context.WithValue(ctx, \"custom_peer\", p), nil\n\t\t}\n\t\treturn nil, grpc.Errorf(\"unauthenticated\")\n\t}\n\treturn ctx, nil\n}"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests using ALTS (Application Layer Transport Security) for authentication.\n\nFunction Description: The main function sets up a gRPC server with ALTS credentials, registers an Echo service implementation, and starts listening on a specified TCP port.\n\nInput:\n- port (int): The TCP port number on which the server should listen (passed via command-line flag)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)\n\nMethods:\n- None (this is a function-level implementation, not a struct)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\taltsTC := alts.NewServerCreds(alts.DefaultServerOptions())\n\n\ts := grpc.NewServer(grpc.Creds(altsTC))\n\n\tpb.RegisterEchoServer(s, &ecServer{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\tpb \"your/package/path/echo\" // Update this with your actual proto package path\n)\n\nvar (\n\tport = flag.Int(\"port\", 50051, \"TCP port number to listen on\")\n)\n\n// echoServer is an implementation of the Echo service.\ntype echoServer struct {\n\tpb.UnimplementedEchoServer\n}\n\n// EchoMessage implements the Echo RPC method.\nfunc (s *echoServer) EchoMessage(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\t// Create ALTS credentials\n\taltsCreds, err := alts.NewServerCredentials(alts.DefaultServerOptions())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create ALTS credentials: %v\", err)\n\t}\n\n\t// Create gRPC server with ALTS credentials\n\ts := grpc.NewServer(grpc.Creds(altsCreds))\n\n\t// Register Echo service\n\tpb.RegisterEchoServer(s, &echoServer{})\n\n\tlog.Printf(\"Server listening on port %d\", *port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Create a gRPC server configuration and management system in Go that handles server setup, TLS configuration, client credentials, and network listeners with support for both buffered and regular network connections.\n\nStruct Description: GRPCServerConfig represents a configuration for setting up a gRPC server with various options including network settings, TLS configuration, and connection parameters.\n\nFields:\n- Address: string - The network address to listen on\n- Network: string - The network type (e.g., \"tcp\", \"unix\", or \"buffered\")\n- TLSCertPath: string - Path to TLS certificate file\n- TLSKeyPath: string - Path to TLS private key file\n- MaxConnAge: time.Duration - Maximum connection age before termination\n- Enabled: bool - Whether the server is enabled\n- BufferSize: int - Size of buffer for buffered connections\n- ClientCAPath: string - Path to client CA certificate file\n- MaxWorkers: uint32 - Maximum number of stream workers\n- flagPrefix: string - Prefix for configuration flags\n\nMethods:\n- Complete: (level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) -> (RunnableGRPCServer, error) - Completes the configuration and returns a runnable server instance\n- listenerAndDialer: () -> (net.Listener, DialFunc, NetDialFunc, error) - Creates a network listener and dialer functions based on configuration\n- tlsOpts: () -> ([]grpc.ServerOption, *certwatcher.CertWatcher, error) - Generates TLS server options based on certificate configuration\n- clientCreds: () -> (credentials.TransportCredentials, error) - Creates client transport credentials based on TLS configuration\n\nStruct Description: completedGRPCServer represents a fully configured and runnable gRPC server instance.\n\nFields:\n- opts: []grpc.ServerOption - Server options\n- listener: net.Listener - Network listener\n- svcRegistrationFn: func(*grpc.Server) - Service registration function\n- listenFunc: func() error - Function to start listening\n- prestopFunc: func() - Function to run before stopping\n- stopFunc: func() - Function to stop the server\n- dial: func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error) - Dial function for clients\n- netDial: func(context.Context, string) (net.Conn, error) - Raw network dial function\n- creds: credentials.TransportCredentials - Client transport credentials\n- certWatcher: *certwatcher.CertWatcher - Certificate watcher for TLS\n\nMethods:\n- WithOpts: (...grpc.ServerOption) -> RunnableGRPCServer - Adds additional server options\n- Listen: (context.Context) -> func() error - Starts the server and returns a listen function\n- DialContext: (context.Context, ...grpc.DialOption) -> (*grpc.ClientConn, error) - Creates a client connection\n- NetDialContext: (context.Context, string) -> (net.Conn, error) - Creates a raw network connection\n- Insecure: () -> bool - Returns whether the connection is insecure\n- GracefulStop: () - Stops the server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/test/bufconn\"\n\n\t\"sigs.k8s.io/controller-runtime/pkg/certwatcher\"\n\n\t\"github.com/authzed/spicedb/internal/grpchelpers\"\n\t\"github.com/authzed/spicedb/pkg/x509util\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\n\tflagPrefix string\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(server *grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn &disabledGrpcServer{}, nil\n\t}\n\tif c.BufferSize == 0 {\n\t\tc.BufferSize = 1024 * 1024\n\t}\n\topts = append(opts, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionAge: c.MaxConnAge,\n\t}), grpc.NumStreamWorkers(c.MaxWorkers))\n\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\topts = append(opts, tlsOpts...)\n\n\tclientCreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tl, dial, netDial, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to listen on addr for gRPC server: %w\", err)\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tsvcRegistrationFn(srv)\n\treturn &completedGRPCServer{\n\t\topts:              opts,\n\t\tlistener:          l,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tlistenFunc: func() error {\n\t\t\treturn srv.Serve(l)\n\t\t},\n\t\tdial:    dial,\n\t\tnetDial: netDial,\n\t\tprestopFunc: func() {\n\t\t},\n\t\tstopFunc:    srv.GracefulStop,\n\t\tcreds:       clientCreds,\n\t\tcertWatcher: certWatcher,\n\t}, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, DialFunc, NetDialFunc, error) {\n\tif c.Network == BufferedNetwork {\n\t\tbl := bufconn.Listen(c.BufferSize)\n\t\treturn bl, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\t\topts = append(opts, grpc.WithContextDialer(func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t\t}))\n\n\t\t\t\treturn grpchelpers.Dial(ctx, BufferedNetwork, opts...)\n\t\t\t}, func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t}, nil\n\t}\n\tl, err := net.Listen(c.Network, c.Address)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\treturn l, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\treturn grpchelpers.Dial(ctx, c.Address, opts...)\n\t}, nil, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn nil, nil, nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\twatcher, err := certwatcher.New(c.TLSCertPath, c.TLSKeyPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\tGetCertificate: watcher.GetCertificate,\n\t\t\tMinVersion:     tls.VersionTLS12,\n\t\t})\n\t\treturn []grpc.ServerOption{grpc.Creds(creds)}, watcher, nil\n\tdefault:\n\t\treturn nil, nil, nil\n\t}\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn insecure.NewCredentials(), nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\tvar err error\n\t\tvar pool *x509.CertPool\n\t\tif c.ClientCAPath != \"\" {\n\t\t\tpool, err = x509util.CustomCertPool(c.ClientCAPath)\n\t\t} else {\n\t\t\tpool, err = x509.SystemCertPool()\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn credentials.NewTLS(&tls.Config{RootCAs: pool, MinVersion: tls.VersionTLS12}), nil\n\tdefault:\n\t\treturn nil, nil\n\t}\n}\n\ntype completedGRPCServer struct {\n\topts              []grpc.ServerOption\n\tlistener          net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc        func() error\n\tprestopFunc       func()\n\tstopFunc          func()\n\tdial              func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial           func(ctx context.Context, s string) (net.Conn, error)\n\tcreds             credentials.TransportCredentials\n\tcertWatcher       *certwatcher.CertWatcher\n}\n\nfunc (c *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\tc.opts = append(c.opts, opts...)\n\tsrv := grpc.NewServer(c.opts...)\n\tc.svcRegistrationFn(srv)\n\tc.listenFunc = func() error {\n\t\treturn srv.Serve(c.listener)\n\t}\n\tc.stopFunc = srv.GracefulStop\n\treturn c\n}\n\nfunc (c *completedGRPCServer) Listen(ctx context.Context) func() error {\n\tif c.certWatcher != nil {\n\t\tgo func() {\n\t\t\tif err := c.certWatcher.Start(ctx); err != nil {\n\t\t\t}\n\t\t}()\n\t}\n\treturn c.listenFunc\n}\n\nfunc (c *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\topts = append(opts, grpc.WithTransportCredentials(c.creds))\n\treturn c.dial(ctx, opts...)\n}\n\nfunc (c *completedGRPCServer) NetDialContext(ctx context.Context, s string) (net.Conn, error) {\n\treturn c.netDial(ctx, s)\n}\n\nfunc (c *completedGRPCServer) Insecure() bool {\n\treturn c.creds.Info().SecurityProtocol == \"insecure\"\n}\n\nfunc (c *completedGRPCServer) GracefulStop() {\n\tc.prestopFunc()\n\tc.stopFunc()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package grpcserver\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/logging/zap/ctxzap\"\n\t\"go.uber.org/zap\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\tflagPrefix   string\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn nil, errors.New(\"server is disabled\")\n\t}\n\n\tlistener, dial, netDial, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create listener and dialer: %w\", err)\n\t}\n\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create TLS options: %w\", err)\n\t}\n\n\tclientCreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create client credentials: %w\", err)\n\t}\n\n\tserverOpts := append([]grpc.ServerOption{}, opts...)\n\tserverOpts = append(serverOpts, tlsOpts...)\n\n\tif c.MaxConnAge > 0 {\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tMaxConnectionAge: c.MaxConnAge,\n\t\t}))\n\t}\n\n\tif c.MaxWorkers > 0 {\n\t\tserverOpts = append(serverOpts, grpc.MaxConcurrentStreams(c.MaxWorkers))\n\t}\n\n\tlogger := ctxzap.Extract(context.Background()).With(zap.String(\"component\", \"grpc-server\"))\n\tserver := grpc.NewServer(serverOpts...)\n\n\tvar prestopFunc func() = server.Stop\n\tvar stopFunc func() = server.GracefulStop\n\n\tcompleted := &completedGRPCServer{\n\t\topts:           serverOpts,\n\t\tlistener:       listener,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tcreds:          clientCreds,\n\t\tcertWatcher:    certWatcher,\n\t\tdial: func(ctx context.Context, dialOpts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\treturn grpc.DialContext(ctx, c.Address, dialOpts...)\n\t\t},\n\t\tnetDial: netDial,\n\t}\n\n\tcompleted.listenFunc = func() error {\n\t\tdefer logger.Info(\"gRPC server started\", zap.String(\"address\", c.Address))\n\t\tsvcRegistrationFn(server)\n\t\treturn server.Serve(listener)\n\t}\n\n\tcompleted.prestopFunc = prestopFunc\n\tcompleted.stopFunc = stopFunc\n\n\treturn completed, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error), func(context.Context, string) (net.Conn, error), error) {\n\tvar ln net.Listener\n\tvar err error\n\n\tswitch c.Network {\n\tcase \"tcp\":\n\t\tln, err = net.Listen(\"tcp\", c.Address)\n\tcase \"unix\":\n\t\tln, err = net.Listen(\"unix\", c.Address)\n\tcase \"buffered\":\n\t\tln, err = newBufferedListener(c.Address, c.BufferSize)\n\tdefault:\n\t\terr = fmt.Errorf(\"unsupported network type: %s\", c.Network)\n\t}\n\n\tif err != nil {\n\t\treturn nil, nil, nil, fmt.Errorf(\"failed to create listener: %w\", err)\n\t}\n\n\tdial := func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\treturn grpc.DialContext(ctx, c.Address, opts...)\n\t}\n\n\tnetDial := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\treturn (&net.Dialer{}).DialContext(ctx, c.Network, addr)\n\t}\n\n\treturn ln, dial, netDial, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tif c.TLSCertPath == \"\" || c.TLSKeyPath == \"\" {\n\t\treturn []grpc.ServerOption{grpc.InsecureServerCredentials()}, nil, nil\n\t}\n\n\tcertWatcher, err := certwatcher.NewCertWatcher(c.TLSCertPath, c.TLSKeyPath)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to create certificate watcher: %w\", err)\n\t}\n\n\tcreds := credentials.NewTLS(&tls.Config{\n\t\tGetCertificate: certWatcher.GetCertificate,\n\t\tClientAuth:     tls.NoClientCert,\n\t})\n\n\treturn []grpc.ServerOption{grpc.Creds(creds)}, certWatcher, nil\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tif c.ClientCAPath == \"\" && c.TLSCertPath == \"\" {\n\t\treturn credentials.NewPlaintext(), nil\n\t}\n\n\tcertPool, err := x509.SystemCertPool()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to load system cert pool: %w\", err)\n\t}\n\n\tif c.ClientCAPath != \"\" {\n\t\tcaCert, err := os.ReadFile(c.ClientCAPath)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to read CA certificate: %w\", err)\n\t\t}\n\t\tif ok := certPool.AppendCertsFromPEM(caCert); !ok {\n\t\t\treturn nil, errors.New(\"failed to append CA certificate\")\n\t\t}\n\t}\n\n\treturn credentials.NewTLS(&tls.Config{\n\t\tRootCAs:            certPool,\n\t\tInsecureSkipVerify: false,\n\t}), nil\n}\n\ntype RunnableGRPCServer interface {\n\tWithOpts(...grpc.ServerOption) RunnableGRPCServer\n\tListen(context.Context) func() error\n\tDialContext(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tNetDialContext(context.Context, string) (net.Conn, error)\n\tInsecure() bool\n\tGracefulStop()\n}\n\ntype completedGRPCServer struct {\n\topts           []grpc.ServerOption\n\tlistener       net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc     func() error\n\tprestopFunc    func()\n\tstopFunc       func()\n\tdial           func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial        func(context.Context, string) (net.Conn, error)\n\tcreds          credentials.TransportCredentials\n\tcertWatcher    *certwatcher.CertWatcher\n}\n\nfunc (s *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\ts.opts = append(s.opts, opts...)\n\ts.stopFunc()\n\tnewServer := grpc.NewServer(s.opts...)\n\ts.svcRegistrationFn(newServer)\n\ts.prestopFunc = s.stopFunc\n\ts.listenFunc = func() error {\n\t\treturn newServer.Serve(s.listener)\n\t}\n\treturn s\n}\n\nfunc (s *completedGRPCServer) Listen(_ context.Context) func() error {\n\treturn s.listenFunc\n}\n\nfunc (s *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\treturn s.dial(ctx, opts...)\n}\n\nfunc (s *completedGRPCServer) NetDialContext(ctx context.Context, addr string) (net.Conn, error) {\n\treturn s.netDial(ctx, addr)\n}\n\nfunc (s *completedGRPCServer) Insecure() bool {\n\treturn s.creds == nil || s.creds.Info().SecurityProtocol == \"insecure\"\n}\n\nfunc (s *completedGRPCServer) GracefulStop() {\n\ts.stopFunc()\n}"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including server initialization, startup, and metric processing.\n\nStruct Description: The Server struct represents a gRPC server for forwarding metrics. It manages server lifecycle, handles incoming metric data, and provides logging capabilities.\n\nFields:\n\nserver: *grpc.Server - The gRPC server instance\naddress: string - Network address to bind the server to\ningest: sources.Ingest - Interface for processing incoming metrics\nlistener: net.Listener - Network listener for incoming connections\nlogger: *logrus.Entry - Logger for server operations\nopts: *options - Configuration options for the server\nreadyChannel: chan struct{} - Channel to signal when server is ready\n\nMethods:\n\nNew: (address string, logger *logrus.Entry, opts ...Option) -> *Server - Creates a new Server instance with specified address, logger, and optional configurations. Initializes gRPC server and registers services.\n\nStart: (ingest sources.Ingest) -> error - Starts the gRPC server, binds to the specified address, and begins listening for incoming connections. Takes a metric ingestion interface as input. Returns any error that occurs during startup or operation.\n\nSendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles incoming metric streams from clients. Processes each metric received and sends back an empty response when done. Returns any error that occurs during stream processing.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/sources\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\tres := &Server{\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\topts:         &options{},\n\t\tserver:       grpc.NewServer(),\n\t\treadyChannel: make(chan struct{}),\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(res.opts)\n\t}\n\n\tif res.opts.traceClient == nil {\n\t\tres.opts.traceClient = trace.DefaultClient\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.server, res)\n\n\treturn res\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\n\tvar err error\n\ts.listener, err = net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\ts.logger.WithError(err).WithField(\"address\", s.address).\n\t\t\tErrorf(\"failed to bind import server\")\n\t\treturn err\n\t}\n\n\tlogger := s.logger.WithFields(logrus.Fields{\"address\": s.listener.Addr()})\n\tlogger.Info(\"Starting gRPC server\")\n\n\tclose(s.readyChannel)\n\terr = s.server.Serve(s.listener)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"gRPC server was not shut down cleanly\")\n\t}\n\tlogger.Info(\"Stopped gRPC server\")\n\treturn err\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\ts.logger.WithError(err).Error(\"error recieving metrics\")\n\t\t\treturn err\n\t\t}\n\t\ts.ingest.IngestMetricProto(metric)\n\t}\n\terr := server.SendAndClose(&emptypb.Empty{})\n\tif err != nil {\n\t\ts.logger.WithError(err).Error(\"error closing stream\")\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package server\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\n\tforwardrpc \"your_module/forwardrpc\"\n\tsources \"your_module/sources\"\n\toptions \"your_module/server/options\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\toptions := &options{}\n\tfor _, apply := range opts {\n\t\tapply(options)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\treturn &Server{\n\t\tserver:       grpcServer,\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\topts:         options,\n\t\treadyChannel: make(chan struct{}),\n\t}\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\n\tlis, err := net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to listen on address %s: %v\", s.address, err)\n\t}\n\ts.listener = lis\n\n\t// Register services\n\tforwardrpc.RegisterForwardServer(s.server, s)\n\n\tclose(s.readyChannel)\n\n\ts.logger.Infof(\"Starting gRPC server on %s\", s.address)\n\tif err := s.server.Serve(lis); err != nil {\n\t\treturn fmt.Errorf(\"gRPC server failed: %v\", err)\n\t}\n\n\treturn nil\n}\n\nfunc (s *Server) SendMetricsV2(stream forwardrpc.Forward_SendMetricsV2Server) error {\n\tfor {\n\t\tmetric, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif metric != nil {\n\t\t\tif err := s.ingest.ProcessMetric(metric); err != nil {\n\t\t\t\ts.logger.Errorf(\"Failed to process metric: %v\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn stream.SendAndClose(&forwardrpc.Empty{})\n}"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, optionally with TLS security, and registers a test service for handling RPC calls.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, configures TLS if enabled, creates a new gRPC server instance, registers a test service, and starts serving incoming requests.\n\nInput:\n- port (int): The port number on which the server should listen\n- useTLS (bool): Flag indicating whether to use TLS security\n- certFile (string): Path to the TLS certificate file (required if useTLS is true)\n- keyFile (string): Path to the TLS private key file (required if useTLS is true)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"google.golang.org/grpc/interop\"\n\ttestpb \"google.golang.org/grpc/interop/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tp := strconv.Itoa(*port)\n\tlis, err := net.Listen(\"tcp\", \":\"+p)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tgrpclog.Fatalf(\"Failed to generate credentials %v\", err)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tserver := grpc.NewServer(opts...)\n\ttestpb.RegisterTestServiceServer(server, interop.NewTestServer())\n\tserver.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\n// TestServiceServer is a placeholder for the actual service implementation.\ntype TestServiceServer struct{}\n\n// Implement necessary RPC methods here if needed.\n\nfunc main() {\n\tport := 50051     // Example port\n\tuseTLS := true    // Example TLS usage\n\tcertFile := \"cert.pem\"\n\tkeyFile := \"key.pem\"\n\n\taddress := fmt.Sprintf(\":%d\", port)\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to listen: %v\\n\", err)\n\t\treturn\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(certFile, keyFile)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Failed to generate credentials: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tgrpcServer := grpc.NewServer(opts...)\n\tRegisterTestServiceServer(grpcServer, &TestServiceServer{})\n\n\tfmt.Printf(\"Starting gRPC server on port %d with TLS: %v\\n\", port, useTLS)\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tfmt.Printf(\"Failed to serve: %v\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a gRPC server in Go that handles Bigtable administration and operations, with proper initialization and cleanup capabilities.\n\nStruct Description: The Server struct represents a gRPC server instance that manages Bigtable table administration and operations. It handles network connections, server lifecycle, and maintains internal state.\n\nFields:\nAddr: [string] - The network address the server is listening on\nl: [net.Listener] - The network listener for incoming connections\nsrv: [*grpc.Server] - The gRPC server instance\ns: [*server] - The internal server implementation handling business logic\n\nMethods:\nNewServer: [func(laddr string, opt ...grpc.ServerOption) (*Server, error)] -> Creates and starts a new Server instance\n- Input: laddr (string) - The address to listen on, opt (...grpc.ServerOption) - Optional gRPC server configurations\n- Output: (*Server, error) - Returns the server instance or an error if initialization fails\n- Description: Initializes the server, sets up the listener, registers gRPC services, and starts serving requests in a goroutine\n\nClose: [func(s *Server)] -> Properly shuts down the Server instance\n- Input: None (method receiver)\n- Output: None\n- Description: Stops the gRPC server, closes the listener, and cleans up internal resources",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl   net.Listener\n\tsrv *grpc.Server\n\ts   *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tsrv:  grpc.NewServer(opt...),\n\t\ts: &server{\n\t\t\ttables: make(map[string]*table),\n\t\t},\n\t}\n\tbtapb.RegisterBigtableTableAdminServer(s.srv, s.s)\n\tbtpb.RegisterBigtableServer(s.srv, s.s)\n\n\tgo s.srv.Serve(s.l)\n\n\treturn s, nil\n}\n\nfunc (s *Server) Close() {\n\ts.s.mu.Lock()\n\tif s.s.gcc != nil {\n\t\tclose(s.s.gcc)\n\t}\n\ts.s.mu.Unlock()\n\n\ts.srv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl    net.Listener\n\tsrv  *grpc.Server\n\ts    *server\n}\n\ntype server struct{}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsrv := grpc.NewServer(opt...)\n\ts := &server{}\n\t// Register gRPC services here with srv.RegisterService()\n\t// Example: pb.RegisterYourServiceServer(srv, s)\n\n\tserverInstance := &Server{\n\t\tAddr: laddr,\n\t\tl:    l,\n\t\tsrv:  srv,\n\t\ts:    s,\n\t}\n\n\tgo func() {\n\t\tif err := srv.Serve(l); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn serverInstance, nil\n}\n\nfunc (s *Server) Close() {\n\ts.srv.Stop()\n\ts.l.Close()\n}"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests, supports optional TLS encryption, and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The Start function initializes and runs a gRPC server with configurable network address and TLS settings. It sets up keepalive parameters, registers the service implementation, and handles OS signals for graceful shutdown.\n\nInput:\n- addr: string - The network address (host:port) to listen on\n- enableTLS: bool - Flag to enable/disable TLS encryption\n- certificate: auth.Certificate - Certificate configuration for TLS (when enabled)\n\nOutput: None (the function runs indefinitely until a termination signal is received)",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\tpb \"github.com/ouqiang/gocron/internal/modules/rpc/proto\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\nfunc Start(addr string, enableTLS bool, certificate auth.Certificate) {\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepAliveParams),\n\t\tgrpc.KeepaliveEnforcementPolicy(keepAlivePolicy),\n\t}\n\tif enableTLS {\n\t\ttlsConfig, err := certificate.GetTLSConfigForServer()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\topt := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\topts = append(opts, opt)\n\t}\n\tserver := grpc.NewServer(opts...)\n\tpb.RegisterTaskServer(server, Server{})\n\tlog.Infof(\"server listen on %s\", addr)\n\n\tgo func() {\n\t\terr = server.Serve(l)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM)\n\tfor {\n\t\ts := <-c\n\t\tlog.Infoln(\"\u6536\u5230\u4fe1\u53f7 -- \", s)\n\t\tswitch s {\n\t\tcase syscall.SIGHUP:\n\t\t\tlog.Infoln(\"\u6536\u5230\u7ec8\u7aef\u65ad\u5f00\u4fe1\u53f7, \u5ffd\u7565\")\n\t\tcase syscall.SIGINT, syscall.SIGTERM:\n\t\t\tlog.Info(\"\u5e94\u7528\u51c6\u5907\u9000\u51fa\")\n\t\t\tserver.GracefulStop()\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Certificate struct {\n\tCertFile string\n\tKeyFile  string\n\tCAFile   string\n}\n\nfunc Start(addr string, enableTLS bool, certificate Certificate) error {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to listen: %v\", err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tkasp := keepalive.ServerParameters{\n\t\tMaxConnectionIdle: 15,\n\t\tTime:                30,\n\t\tTimeout:             10,\n\t}\n\topts = append(opts, grpc.KeepaliveParams(kasp))\n\n\tif enableTLS {\n\t\ttlsConfig := &tls.Config{}\n\t\tcert, certErr := tls.LoadX509KeyPair(certificate.CertFile, certificate.KeyFile)\n\t\tif certErr != nil {\n\t\t\treturn fmt.Errorf(\"failed to load server certificate: %v\", certErr)\n\t\t}\n\t\ttlsConfig.Certificates = []tls.Certificate{cert}\n\n\t\tif certificate.CAFile != \"\" {\n\t\t\tb, readErr := os.ReadFile(certificate.CAFile)\n\t\t\tif readErr != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to read CA certificate: %v\", readErr)\n\t\t\t}\n\t\t\tcp := x509.NewCertPool()\n\t\t\tif !cp.AppendCertsFromPEM(b) {\n\t\t\t\treturn fmt.Errorf(\"failed to append CA certificate\")\n\t\t\t}\n\t\t\ttlsConfig.ClientCAs = cp\n\t\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t\t}\n\n\t\topts = append(opts, grpc.Creds(tls.NewServerTLSFromConfig(tlsConfig)))\n\t}\n\n\ts := grpc.NewServer(opts...)\n\n\t// Register your gRPC service here using:\n\t// pb.RegisterYourServiceServer(s, &yourServiceImpl{})\n\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"gRPC server failed: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)\n\t<-quit\n\n\ts.GracefulStop()\n\treturn nil\n}"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: Create a gRPC test server for monitoring metrics that can handle metric descriptor creation and time series requests, while tracking user agents and request counts.\n\nStruct Description: MetricsTestServer is a gRPC server implementation for testing metric monitoring functionality. It maintains state for tracking incoming requests and user agents, and provides methods for server control and data retrieval.\n\nFields:\n- lis: net.Listener - Network listener for the gRPC server\n- srv: *grpc.Server - gRPC server instance\n- Endpoint: string - Server's network endpoint address\n- userAgent: string - Last received User-Agent header from requests\n- createMetricDescriptorReqs: []*monitoringpb.CreateMetricDescriptorRequest - Collected metric descriptor requests\n- createServiceTimeSeriesReqs: []*monitoringpb.CreateTimeSeriesRequest - Collected time series requests\n- RetryCount: int - Number of retry attempts (usage context not shown in code)\n- mu: sync.Mutex - Mutex for thread-safe access to shared fields\n\nMethods:\n- Shutdown() -> None - Gracefully stops the gRPC server\n- UserAgent() -> string - Retrieves and clears the stored User-Agent\n- CreateServiceTimeSeriesRequests() -> []*monitoringpb.CreateTimeSeriesRequest - Retrieves and clears stored time series requests\n- appendCreateMetricDescriptorReq(context.Context, *monitoringpb.CreateMetricDescriptorRequest) -> None - Thread-safe method to store metric descriptor requests\n- appendCreateServiceTimeSeriesReq(context.Context, *monitoringpb.CreateTimeSeriesRequest) -> None - Thread-safe method to store time series requests and capture User-Agent\n- Serve() -> error - Starts serving gRPC requests\n- NewMetricTestServer() -> (*MetricsTestServer, error) - Constructor that initializes the server with default keepalive parameters and registers the metric service",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"cloud.google.com/go/monitoring/apiv3/v2/monitoringpb\"\n\tmetricpb \"google.golang.org/genproto/googleapis/api/metric\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\ntype MetricsTestServer struct {\n\tlis                         net.Listener\n\tsrv                         *grpc.Server\n\tEndpoint                    string\n\tuserAgent                   string\n\tcreateMetricDescriptorReqs  []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount                  int\n\tmu                          sync.Mutex\n}\n\nfunc (m *MetricsTestServer) Shutdown() {\n\tm.srv.GracefulStop()\n}\n\nfunc (m *MetricsTestServer) UserAgent() string {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tua := m.userAgent\n\tm.userAgent = \"\"\n\treturn ua\n}\n\nfunc (m *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\treqs := m.createServiceTimeSeriesReqs\n\tm.createServiceTimeSeriesReqs = nil\n\treturn reqs\n}\n\nfunc (m *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createMetricDescriptorReqs = append(m.createMetricDescriptorReqs, req)\n}\n\nfunc (m *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createServiceTimeSeriesReqs = append(m.createServiceTimeSeriesReqs, req)\n\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tm.userAgent = strings.Join(md.Get(\"User-Agent\"), \";\")\n\t}\n}\n\nfunc (m *MetricsTestServer) Serve() error {\n\treturn m.srv.Serve(m.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tsrv := grpc.NewServer(grpc.KeepaliveParams(keepalive.ServerParameters{Time: 5 * time.Minute}))\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttestServer := &MetricsTestServer{\n\t\tEndpoint: lis.Addr().String(),\n\t\tlis:      lis,\n\t\tsrv:      srv,\n\t}\n\n\tmonitoringpb.RegisterMetricServiceServer(\n\t\tsrv,\n\t\t&fakeMetricServiceServer{metricsTestServer: testServer},\n\t)\n\n\treturn testServer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"github.com/cenkalti/backoff/v4\"\n\tmonitoringpb \"path/to/monitoring/proto\" // replace with actual proto import path\n)\n\ntype MetricsTestServer struct {\n\tlis                          net.Listener\n\tsrv                          *grpc.Server\n\tEndpoint                     string\n\tuserAgent                    string\n\tcreateMetricDescriptorReqs   []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs  []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount                   int\n\tmu                           sync.Mutex\n}\n\nfunc (s *MetricsTestServer) Shutdown() {\n\ts.srv.GracefulStop()\n}\n\nfunc (s *MetricsTestServer) UserAgent() string {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tua := s.userAgent\n\ts.userAgent = \"\"\n\treturn ua\n}\n\nfunc (s *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\treqs := make([]*monitoringpb.CreateTimeSeriesRequest, len(s.createServiceTimeSeriesReqs))\n\tcopy(reqs, s.createServiceTimeSeriesReqs)\n\ts.createServiceTimeSeriesReqs = nil\n\treturn reqs\n}\n\nfunc (s *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.createMetricDescriptorReqs = append(s.createMetricDescriptorReqs, req.Clone())\n}\n\nfunc (s *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\tif userAgent, ok := grpc.GetPeer(ctx); ok && userAgent != nil && userAgent.AuthInfo != nil {\n\t\ts.userAgent = userAgent.Addr.String()\n\t}\n\ts.createServiceTimeSeriesReqs = append(s.createServiceTimeSeriesReqs, req.Clone())\n}\n\nfunc (s *MetricsTestServer) Serve() error {\n\treturn s.srv.Serve(s.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tkaParams := keepalive.ServerParameters{\n\t\tMaxConnectionIdle: backoff.DefaultMaxElapsedTime,\n\t\tTime:              backoff.DefaultInitialInterval,\n\t\tTimeout:           backoff.DefaultInitialInterval,\n\t}\n\n\tsrv := grpc.NewServer(grpc.KeepaliveParams(kaParams))\n\n\ts := &MetricsTestServer{\n\t\tlis: lis,\n\t\tsrv: srv,\n\t\tEndpoint: lis.Addr().String(),\n\t}\n\n\tmonitoringpb.RegisterMetricServiceServer(srv, s)\n\n\treturn s, nil\n}"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a mock gRPC server for OpenTelemetry traces receiver that can handle incoming trace data requests, track request metrics, and optionally use TLS for secure communication.\n\nStruct Description: The mockTracesReceiver struct implements a gRPC server for receiving OpenTelemetry trace data, tracking request counts and spans, and handling metadata. It embeds a base mockReceiver struct and implements the ptraceotlp.GRPCServer interface.\n\nFields:\n\nsrv: [*grpc.Server] - The gRPC server instance\nln: [net.Listener] - Network listener for the server\nrequestCount: [*atomic.Int32] - Counter for received requests\ntotalItems: [*atomic.Int32] - Counter for total spans received\nmux: [sync.Mutex] - Mutex for thread-safe operations\nmetadata: [metadata.MD] - Stores metadata from incoming requests\nexportError: [error] - Error to return from export operations\nexportResponse: [func() ptraceotlp.ExportResponse] - Function to generate export responses\nlastRequest: [ptrace.Traces] - Stores the last received trace data\nhasMetadata: [bool] - Flag indicating whether to process metadata\nspanCountByMetadata: [map[string]int] - Tracks span counts by metadata keys\n\nMethods:\n\nExport: [Name](ctx context.Context, req ptraceotlp.ExportRequest) -> (ptraceotlp.ExportResponse, error) - Handles incoming trace export requests, updates counters, and processes metadata\nstart: [Name]() -> () - Starts the gRPC server in a goroutine\n\nAssociated Functions:\n\notelArrowTracesReceiverOnGRPCServer: [Name](ln net.Listener, useTLS bool) -> (*mockTracesReceiver, error) - Creates and configures a new mock traces receiver with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype mockReceiver struct {\n\tsrv          *grpc.Server\n\tln           net.Listener\n\trequestCount *atomic.Int32\n\ttotalItems   *atomic.Int32\n\tmux          sync.Mutex\n\tmetadata     metadata.MD\n\texportError  error\n}\n\ntype mockTracesReceiver struct {\n\tptraceotlp.UnimplementedGRPCServer\n\tmockReceiver\n\texportResponse      func() ptraceotlp.ExportResponse\n\tlastRequest         ptrace.Traces\n\thasMetadata         bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (r *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tr.requestCount.Add(int32(1))\n\ttd := req.Traces()\n\tr.totalItems.Add(int32(td.SpanCount()))\n\tr.mux.Lock()\n\tdefer r.mux.Unlock()\n\tr.metadata, _ = metadata.FromIncomingContext(ctx)\n\tif r.hasMetadata {\n\t\tv1 := r.metadata.Get(\"key1\")\n\t\tv2 := r.metadata.Get(\"key2\")\n\t\thashKey := fmt.Sprintf(\"%s|%s\", v1, v2)\n\t\tr.spanCountByMetadata[hashKey] += (td.SpanCount())\n\t}\n\tr.lastRequest = td\n\treturn r.exportResponse(), r.exportError\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tsopts := []grpc.ServerOption{}\n\n\tif useTLS {\n\t\t_, currentFile, _, _ := runtime.Caller(0)\n\t\tbasepath := filepath.Dir(currentFile)\n\t\tcertpath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_cert.pem\"))\n\t\tkeypath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_key.pem\"))\n\n\t\tcreds, err := credentials.NewServerTLSFromFile(certpath, keypath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsopts = append(sopts, grpc.Creds(creds))\n\t}\n\n\trcv := &mockTracesReceiver{\n\t\tmockReceiver: mockReceiver{\n\t\t\tsrv:          grpc.NewServer(sopts...),\n\t\t\tln:           ln,\n\t\t\trequestCount: &atomic.Int32{},\n\t\t\ttotalItems:   &atomic.Int32{},\n\t\t},\n\t\texportResponse: ptraceotlp.NewExportResponse,\n\t}\n\n\tptraceotlp.RegisterGRPCServer(rcv.srv, rcv)\n\n\treturn rcv, nil\n}\n\nfunc (r *mockTracesReceiver) start() {\n\tgo func() {\n\t\t_ = r.srv.Serve(r.ln)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/collector\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.uber.org/atomic\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\ntype mockReceiver struct{}\n\ntype mockTracesReceiver struct {\n\tmockReceiver\n\tsrv              *grpc.Server\n\tln               net.Listener\n\trequestCount     *atomic.Int32\n\ttotalItems       *atomic.Int32\n\tmux              sync.Mutex\n\tmetadata         metadata.MD\n\texportError      error\n\texportResponse   func() ptraceotlp.ExportResponse\n\tlastRequest      ptrace.Traces\n\thasMetadata      bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (m *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tm.requestCount.Inc()\n\ttraceData := req.Traces()\n\tresourceSpans := traceData.ResourceSpans()\n\tvar spanCount int\n\n\tfor i := 0; i < resourceSpans.Len(); i++ {\n\t\trs := resourceSpans.At(i)\n\t\tscopeSpans := rs.ScopeSpans()\n\t\tfor j := 0; j < scopeSpans.Len(); j++ {\n\t\t\tspans := scopeSpans.At(j).Spans()\n\t\t\tspanCount += spans.Len()\n\t\t}\n\t}\n\n\tm.totalItems.Add(int32(spanCount))\n\tm.mux.Lock()\n\tm.lastRequest = traceData\n\n\tif m.hasMetadata {\n\t\tmd, ok := metadata.FromIncomingContext(ctx)\n\t\tif ok {\n\t\t\tm.metadata = md.Copy()\n\t\t}\n\t}\n\n\tif m.spanCountByMetadata != nil && len(m.spanCountByMetadata) > 0 {\n\t\tfor key := range m.spanCountByMetadata {\n\t\t\tif values := m.metadata.Get(key); len(values) > 0 {\n\t\t\t\tm.spanCountByMetadata[key] += spanCount\n\t\t\t}\n\t\t}\n\t}\n\tm.mux.Unlock()\n\n\tif m.exportError != nil {\n\t\treturn ptraceotlp.NewExportResponse(), m.exportError\n\t}\n\n\tif m.exportResponse != nil {\n\t\treturn m.exportResponse(), nil\n\t}\n\n\treturn ptraceotlp.NewExportResponse(), nil\n}\n\nfunc (m *mockTracesReceiver) start() {\n\tgo func() {\n\t\tif err := m.srv.Serve(m.ln); err != nil {\n\t\t\tfmt.Printf(\"failed to serve: %v\\n\", err)\n\t\t}\n\t}()\n\ttime.Sleep(100 * time.Millisecond)\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\topts := []grpc.ServerOption{}\n\tif useTLS {\n\t\tcfg := &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t}\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(cfg)))\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tmtr := &mockTracesReceiver{\n\t\tsrv:                 srv,\n\t\tln:                  ln,\n\t\trequestCount:        atomic.NewInt32(0),\n\t\ttotalItems:          atomic.NewInt32(0),\n\t\tspanCountByMetadata: make(map[string]int),\n\t}\n\n\tptraceotlp.RegisterGRPCServer(srv, mtr)\n\tmtr.start()\n\treturn mtr, nil\n}"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a gRPC server for handling OpenTelemetry Protocol (OTLP) trace data, including setup of tracing components and a bounded queue for admission control.\n\nStruct Description: The otlpReceiver struct represents a receiver for OTLP trace data over gRPC, which processes incoming traces and forwards them to the next consumer in the pipeline.\n\nFields:\n- nextConsumer: consumer.Traces - The next trace consumer in the processing pipeline\n- obsrecv: *receiverhelper.ObsReport - Observability reporter for receiver metrics\n- bq: *admission2.BoundedQueue - Bounded queue for admission control of incoming requests\n\nMethods:\n- New: (logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) -> *otlpReceiver - Constructor function that creates a new otlpReceiver instance\n- otlpReceiverOnGRPCServer: (t *testing.T, tc consumer.Traces) -> (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) - Sets up and starts a gRPC server with OTLP trace receiver capabilities, returning the server address, in-memory exporter, and tracer provider for testing purposes",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"go.opentelemetry.io/collector/receiver/receivertest\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\tln, err := net.Listen(\"tcp\", \"localhost:\")\n\trequire.NoError(t, err, \"Failed to find an available address to run the gRPC server: %v\", err)\n\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, ln.Close())\n\t})\n\n\texp := tracetest.NewInMemoryExporter()\n\n\ttp := trace.NewTracerProvider(trace.WithSyncer(exp))\n\ttelset := componenttest.NewNopTelemetrySettings()\n\ttelset.TracerProvider = tp\n\n\tset := receivertest.NewNopSettings()\n\tset.TelemetrySettings = telset\n\n\tset.ID = component.NewIDWithName(component.MustNewType(\"otlp\"), \"trace\")\n\tobsrecv, err := receiverhelper.NewObsReport(receiverhelper.ObsReportSettings{\n\t\tReceiverID:             set.ID,\n\t\tTransport:              \"grpc\",\n\t\tReceiverCreateSettings: set,\n\t})\n\trequire.NoError(t, err)\n\tbq, err := admission2.NewBoundedQueue(set.ID, telset, maxBytes, 0)\n\trequire.NoError(t, err)\n\tr := New(zap.NewNop(), tc, obsrecv, bq)\n\tsrv := grpc.NewServer()\n\tptraceotlp.RegisterGRPCServer(srv, r)\n\tgo func() {\n\t\t_ = srv.Serve(ln)\n\t}()\n\n\treturn ln.Addr(), exp, tp\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"testing\"\n\n\t\"go.opentelemetry.io/otel/sdk/export/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"google.golang.org/grpc\"\n\n\t\"go.uber.org/zap\"\n\tadmission2 \"your/module/path/admission\"\n\tconsumer \"your/module/path/consumer\"\n\treceiverhelper \"your/module/path/receiverhelper\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\texp := tracetest.NewInMemoryExporter()\n\ttp := trace.NewTracerProvider(trace.WithBatcher(exp))\n\n\tgrpcServer := grpc.NewServer()\n\t// Assuming OTLP gRPC service registration here, e.g., otlp.RegisterTraceServiceServer\n\t// Replace the line below with actual OTLP service registration\n\t// otlp.RegisterTraceServiceServer(grpcServer, yourHandler)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn lis.Addr(), exp, tp\n}"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with basic lifecycle management capabilities, including initialization, startup, and shutdown.\n\nStruct Description: The Server struct represents a gRPC server instance with network listening capabilities. It manages the server lifecycle and provides methods to start and stop the server gracefully.\n\nFields:\nAddr: [string] - The network address (IP:port) where the server is listening\nPort: [int] - The port number on which the server is listening\nl: [net.Listener] - The network listener for incoming connections\nGsrv: [*grpc.Server] - The gRPC server instance\n\nMethods:\nNewServer: [func(opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance with default settings (random available port)\nNewServerWithPort: [func(port int, opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance on the specified port\nStart: [func()] -> [] - Starts the gRPC server in a goroutine to handle incoming requests\nClose: [func()] -> [] - Gracefully stops the gRPC server and closes the network listener",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\treturn NewServerWithPort(0, opts...)\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"127.0.0.1:%d\", port))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tPort: parsePort(l.Addr().String()),\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) Start() {\n\tgo func() {\n\t\tif err := s.Gsrv.Serve(s.l); err != nil {\n\t\t\tlog.Printf(\"testutil.Server.Start: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Close() {\n\ts.Gsrv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\treturn NewServerWithPort(0, opts...)\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\taddr := fmt.Sprintf(\":%d\", port)\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Get actual port if 0 (random available port) was specified\n\tif port == 0 {\n\t\t_, actualPort, _ := net.SplitHostPort(l.Addr().String())\n\t\tfmt.Sscanf(actualPort, \"%d\", &port)\n\t}\n\n\tsrv := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tPort: port,\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\n\treturn srv, nil\n}\n\nfunc (s *Server) Start() {\n\tgo func() {\n\t\tif err := s.Gsrv.Serve(s.l); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"gRPC server stopped with error: %v\\n\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Close() {\n\tif s.Gsrv != nil {\n\t\ts.Gsrv.GracefulStop()\n\t}\n\tif s.l != nil {\n\t\ts.l.Close()\n\t}\n}"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls for an Echo service, including secure communication with transport credentials.\n\nFunction Description: The `startGRPCServer` function initializes and starts a gRPC server with the provided listener and transport credentials. It registers an Echo service implementation and begins serving incoming requests.\n\nInput:\n- `lis` [net.Listener] - A network listener that specifies the address and port to listen on\n- `creds` [credentials.TransportCredentials] - Transport credentials for secure communication (TLS)\n\nOutput:\n- `error` - Returns an error if the server fails to start or encounters a fatal error during operation, otherwise runs indefinitely serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype ecServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *ecServer) UnaryEcho(_ context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc newServer() *ecServer {\n\treturn &ecServer{}\n}\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, newServer())\n\treturn s.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype echoServer struct{}\n\nfunc (s *echoServer) UnaryEcho(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {\n\treturn &EchoResponse{Message: req.Message}, nil\n}\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\topts := []grpc.ServerOption{}\n\tif creds != nil {\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tgrpcServer := grpc.NewServer(opts...)\n\tRegisterEchoServiceServer(grpcServer, &echoServer{})\n\n\treturn grpcServer.Serve(lis)\n}"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the specified gRPC service.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified TCP port, configures keepalive policies, registers the Echo service, and starts serving requests. It handles any errors that occur during setup or serving.\n\nInput: \n- port (string): The port number on which the server should listen, formatted as a string (e.g., \":50051\").\n- kaep (keepalive.EnforcementPolicy): The keepalive enforcement policy for the server.\n- kasp (keepalive.ServerParameters): The keepalive server parameters.\n\nOutput: \n- None (the function runs indefinitely until an error occurs or the server is stopped).\n- Errors during setup or serving are logged and the program exits.\n\nNote: The function assumes the existence of a pre-defined `server` struct that implements the `EchoServer` interface from the generated protobuf code.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\taddress := fmt.Sprintf(\":%v\", *port)\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\nfunc main() {\n\tport := \":50051\"\n\tkaep := keepalive.EnforcementPolicy{\n\t\tMinTime:             5,\n\t\tPermitWithoutStream: true,\n\t}\n\tkasp := keepalive.ServerParameters{\n\t\tMaxConnectionIdle: 15,\n\t\tTime:                30,\n\t\tTimeout:             20,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveEnforcementPolicy(kaep),\n\t\tgrpc.KeepaliveParams(kasp),\n\t}\n\n\ts := grpc.NewServer(opts...)\n\tRegisterEchoServer(s, &server{})\n\n\tlog.Printf(\"Server listening on %s\", port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Create a function to start a gRPC server for signal exchange, including setting up a network listener and registering the server with gRPC.\n\nFunction Description: The function `startSignal` initializes and starts a gRPC server for signal exchange. It creates a TCP listener on an available port, initializes a new gRPC server instance, registers the signal exchange service, and starts the server in a goroutine. The function is designed for testing purposes and includes error handling.\n\nInput: \n- `t *testing.T`: A testing context for error reporting and test helpers.\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance.\n- `net.Listener`: The network listener used by the gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tsigProto \"github.com/netbirdio/netbird/signal/proto\"\n\tsig \"github.com/netbirdio/netbird/signal/server\"\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts := grpc.NewServer()\n\tsrv, err := sig.NewServer(context.Background(), otel.Meter(\"\"))\n\trequire.NoError(t, err)\n\n\tsigProto.RegisterSignalExchangeServer(s, srv)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn s, lis\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/package/path/pb\" // Replace with actual proto package path\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tt.Helper()\n\n\tctx := context.Background()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create listener: %v\", err)\n\t}\n\n\tserver := grpc.NewServer()\n\tsignalService := &signalExchangeService{ctx: ctx}\n\tpb.RegisterSignalExchangeServer(server, signalService)\n\n\tgo func() {\n\t\tif err := server.Serve(lis); err != nil {\n\t\t\tt.Logf(\"gRPC server stopped with error: %v\", err)\n\t\t}\n\t}()\n\n\treturn server, lis\n}\n\ntype signalExchangeService struct {\n\tctx context.Context\n\tpb.UnimplementedSignalExchangeServer\n}\n\nfunc (s *signalExchangeService) Exchange(stream pb.SignalExchange_ExchangeServer) error {\n\t// Implement required streaming logic for testing if needed\n\treturn nil\n}"
  },
  {
    "Task_id": 291,
    "Instruction": "The provided reference code is at the function level, so I'll provide instructions in the function-level format:\n\nTask Description: Implement a gRPC server setup in Go that handles both Unix domain sockets and TCP connections with TLS support and keepalive configurations.\n\nFunction Description: The code consists of two main functions for setting up a gRPC server: `createListener` creates a network listener for the server, and `grpcServer` configures and creates a gRPC server instance with optional TLS and keepalive settings.\n\nInput:\n1. For `createListener` function:\n   - config [Config] - Configuration object containing listener address and other settings\n\n2. For `grpcServer` function:\n   - config [Config] - Configuration object containing gRPC server settings and TLS configuration\n\nOutput:\n1. For `createListener` function:\n   - [net.Listener] - Network listener ready for gRPC server\n   - [error] - Error if listener creation fails\n\n2. For `grpcServer` function:\n   - [*grpc.Server] - Configured gRPC server instance\n   - [error] - Error if server creation fails\n\nThe Config struct used as input is defined as:\n- GRPCServer [*grpc.Server] - Optional pre-configured gRPC server instance\n- Listener [string] - Network address to listen on (e.g., \"unix:///path/to/socket\" or \"tcp://:port\")\n- Endpoint [string] - Server endpoint\n- ServerTLSConfig [tls.Config] - TLS configuration for secure connections",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/k3s-io/kine/pkg/util\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"go.etcd.io/etcd/server/v3/embed\"\n)\n\ntype Config struct {\n\tGRPCServer           *grpc.Server\n\tListener             string\n\tEndpoint             string\n\tServerTLSConfig      tls.Config\n}\n\nfunc createListener(config Config) (ret net.Listener, rerr error) {\n\tif config.Listener == \"\" {\n\t\tconfig.Listener = KineSocket\n\t}\n\tscheme, address := util.SchemeAndAddress(config.Listener)\n\n\tif scheme == \"unix\" {\n\t\tif err := os.Remove(address); err != nil && !os.IsNotExist(err) {\n\t\t\tlogrus.Warnf(\"failed to remove socket %s: %v\", address, err)\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := os.Chmod(address, 0600); err != nil {\n\t\t\t\trerr = err\n\t\t\t}\n\t\t}()\n\t} else {\n\t\tscheme = \"tcp\"\n\t}\n\n\treturn net.Listen(scheme, address)\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\tgopts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\t\tMinTime:             embed.DefaultGRPCKeepAliveMinTime,\n\t\t\tPermitWithoutStream: false,\n\t\t}),\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tTime:    embed.DefaultGRPCKeepAliveInterval,\n\t\t\tTimeout: embed.DefaultGRPCKeepAliveTimeout,\n\t\t}),\n\t}\n\n\tif config.ServerTLSConfig.CertFile != \"\" && config.ServerTLSConfig.KeyFile != \"\" {\n\t\tcreds, err := credentials.NewServerTLSFromFile(config.ServerTLSConfig.CertFile, config.ServerTLSConfig.KeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tgopts = append(gopts, grpc.Creds(creds))\n\t}\n\n\treturn grpc.NewServer(gopts...), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Config struct {\n\tGRPCServer   *grpc.Server\n\tListener     string\n\tEndpoint     string\n\tServerTLSConfig tls.Config\n}\n\nfunc createListener(config Config) (net.Listener, error) {\n\taddr := config.Listener\n\tif addr == \"\" {\n\t\taddr = \"tcp:://0.0.0.0:50051\"\n\t}\n\n\tvar network, address string\n\tswitch {\n\tcase len(addr) >= 5 && addr[:5] == \"unix:\":\n\t\tnetwork = \"unix\"\n\t\taddress = addr[5:]\n\tcase len(addr) >= 4 && addr[:4] == \"tcp:\":\n\t\tnetwork = \"tcp\"\n\t\taddress = addr[4:]\n\tdefault:\n\t\tnetwork = \"tcp\"\n\t\taddress = addr\n\t}\n\n\treturn net.Listen(network, address)\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tvar opts []grpc.ServerOption\n\n\tif config.ServerTLSConfig.Certificates != nil || config.ServerTLSConfig.GetCertificate != nil {\n\t\tcreds := grpc.Creds(&config.ServerTLSConfig)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tka := keepalive.ServerParameters{\n\t\tMaxConnectionIdle: 15,\n\t\tTime:                30,\n\t\tTimeout:             10,\n\t}\n\topts = append(opts, grpc.KeepaliveParams(ka))\n\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\treturn grpc.NewServer(opts...), nil\n}"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server for management services, including setting up necessary dependencies and configurations.\n\nFunction Description: The function `startManagement` initializes and starts a gRPC server with management services. It sets up a temporary directory for data storage, configures the server with keepalive policies, initializes various managers and stores, and registers the management service. The server listens on a dynamically assigned port and runs in a goroutine.\n\nInput:\n- `t *testing.T`: Testing context for temporary directory creation and cleanup\n- `signalAddr string`: Address of the signal service\n- `counter *int`: Pointer to a counter for tracking server operations (used in mock implementation)\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance\n- `string`: The address the server is listening on\n- `error`: Any error that occurred during initialization",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server\"\n\t\"github.com/netbirdio/netbird/management/server/activity\"\n\t\"github.com/netbirdio/netbird/management/server/settings\"\n\t\"github.com/netbirdio/netbird/management/server/store\"\n\t\"github.com/netbirdio/netbird/management/server/telemetry\"\n)\n\nvar (\n\tkaep = keepalive.EnforcementPolicy{\n\t\tMinTime:             15 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\n\tkasp = keepalive.ServerParameters{\n\t\tMaxConnectionIdle:     15 * time.Second,\n\t\tMaxConnectionAgeGrace: 5 * time.Second,\n\t\tTime:                  5 * time.Second,\n\t\tTimeout:               2 * time.Second,\n\t}\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tt.Helper()\n\tdataDir := t.TempDir()\n\n\tconfig := &server.Config{\n\t\tStuns:      []*server.Host{},\n\t\tTURNConfig: &server.TURNConfig{},\n\t\tSignal: &server.Host{\n\t\t\tProto: \"http\",\n\t\t\tURI:   signalAddr,\n\t\t},\n\t\tDatadir:    dataDir,\n\t\tHttpConfig: nil,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tstore, cleanUp, err := store.NewTestStoreFromSQL(context.Background(), \"\", config.Datadir)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tt.Cleanup(cleanUp)\n\n\tpeersUpdateManager := server.NewPeersUpdateManager(nil)\n\teventStore := &activity.InMemoryEventStore{}\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tia, _ := integrations.NewIntegratedValidator(context.Background(), eventStore)\n\n\tmetrics, err := telemetry.NewDefaultAppMetrics(context.Background())\n\trequire.NoError(t, err)\n\n\taccountManager, err := server.BuildManager(context.Background(), store, peersUpdateManager, nil, \"\", \"netbird.selfhosted\", eventStore, nil, false, ia, metrics)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tsecretsManager := server.NewTimeBasedAuthSecretsManager(peersUpdateManager, config.TURNConfig, config.Relay)\n\tmgmtServer, err := server.NewServer(context.Background(), config, accountManager, settings.NewManager(store), peersUpdateManager, secretsManager, nil, nil)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tmock := &mockServer{\n\t\tManagementServiceServer: mgmtServer,\n\t\tcounter:                 counter,\n\t}\n\tmgmtProto.RegisterManagementServiceServer(s, mock)\n\tgo func() {\n\t\tif err = s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn s, lis.Addr().String(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"os\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype ManagementService struct {\n\t// Service implementation fields\n}\n\nfunc (m *ManagementService) SomeManagementMethod() {\n\t// Mock method\n}\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\ttempDir, err := ioutil.TempDir(\"\", \"management-test-*\")\n\tif err != nil {\n\t\treturn nil, \"\", fmt.Errorf(\"failed to create temp dir: %v\", err)\n\t}\n\tt.Cleanup(func() {\n\t\tos.RemoveAll(tempDir)\n\t})\n\n\t// Example managers and stores - mock implementations or initializations\n\t_ = signalAddr // Use signalAddr in actual implementation\n\t_ = counter    // Use counter in actual implementation\n\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, \"\", fmt.Errorf(\"failed to listen: %v\", err)\n\t}\n\n\tkaParams := keepalive.ServerParameters{\n\t\tMaxConnectionIdle: 15,\n\t\tTime:                30,\n\t\tTimeout:             10,\n\t}\n\n\tserver := grpc.NewServer(grpc.KeepaliveParams(kaParams))\n\n\t// Register management service\n\tmanagementService := &ManagementService{}\n\t// pb.RegisterManagementServiceServer(server, managementService) // Actual registration line with generated protobuf package\n\n\tgo func() {\n\t\tif err := server.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t*counter++\n\t}()\n\n\treturn server, lis.Addr().String(), nil\n}"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Create a gRPC server in Go that implements an echo service and health checking functionality. The server should listen on a specified port, handle incoming gRPC requests, and periodically toggle its health status between SERVING and NOT_SERVING states.\n\nFunction Description: The main function sets up a gRPC server with echo service and health check capabilities. It creates a TCP listener, initializes the gRPC server, registers services, and starts serving requests. A background goroutine periodically changes the health status for demonstration purposes.\n\nInput:\n- port (int): The TCP port number on which the server should listen\n- sleep (time.Duration): The interval at which health status should toggle\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Errors are logged if they occur during server setup or operation\n\nNote: The function uses package-level variables for port and sleep duration (typically set via command-line flags) and assumes the existence of an echoServer struct that implements the Echo service interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n\t\"google.golang.org/grpc/health\"\n\thealthgrpc \"google.golang.org/grpc/health/grpc_health_v1\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\thealthcheck := health.NewServer()\n\thealthgrpc.RegisterHealthServer(s, healthcheck)\n\tpb.RegisterEchoServer(s, &echoServer{})\n\n\tgo func() {\n\t\tnext := healthpb.HealthCheckResponse_SERVING\n\n\t\tfor {\n\t\t\thealthcheck.SetServingStatus(system, next)\n\n\t\t\tif next == healthpb.HealthCheckResponse_SERVING {\n\t\t\t\tnext = healthpb.HealthCheckResponse_NOT_SERVING\n\t\t\t} else {\n\t\t\t\tnext = healthpb.HealthCheckResponse_SERVING\n\t\t\t}\n\n\t\t\ttime.Sleep(*sleep)\n\t\t}\n\t}()\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\nvar (\n\tport = 50051\n\tsleepDuration = 5 * time.Second\n)\n\ntype echoServer struct{}\n\nfunc (s *echoServer) Echo(in *EchoRequest, out *EchoResponse) error {\n\tout.Message = in.Message\n\treturn nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":\"+string(port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\techoSrv := &echoServer{}\n\tRegisterEchoServiceServer(s, echoSrv)\n\n\thealthServer := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(s, healthServer)\n\n\tgo func() {\n\t\tticker := time.NewTicker(sleepDuration)\n\t\tcurrentStatus := grpc_health_v1.HealthCheckResponse_SERVING\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tif currentStatus == grpc_health_v1.HealthCheckResponse_SERVING {\n\t\t\t\t\tcurrentStatus = grpc_health_v1.HealthCheckResponse_NOT_SERVING\n\t\t\t\t} else {\n\t\t\t\t\tcurrentStatus = grpc_health_v1.HealthCheckResponse_SERVING\n\t\t\t\t}\n\t\t\t\thealthServer.SetServingStatus(\"\", currentStatus)\n\t\t\t}\n\t\t}\n\t}()\n\n\tlog.Printf(\"Server listening on port %d\", port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a gRPC server in Go that provides a simple key-value store service with various RPC methods for setting, getting, and streaming items.\n\nStruct Description: The intStoreServer struct implements a gRPC server for a key-value store service, handling item storage and retrieval operations through different RPC patterns (unary, server streaming, client streaming, and bidirectional streaming).\n\nFields:\nAddr: string - The network address where the server is listening\nl: net.Listener - The network listener for incoming connections\ngsrv: *grpc.Server - The gRPC server instance\nitems: map[string]int32 - The internal storage for key-value pairs\n\nMethods:\nnewIntStoreServer: () -> *intStoreServer - Creates and starts a new server instance on an available port\nstop: () -> () - Gracefully shuts down the server\nSet: (context.Context, *pb.Item) -> (*pb.SetResponse, error) - Unary RPC to set a key-value pair\nsetItem: (*pb.Item) -> int32 - Internal helper method to store an item\nGet: (context.Context, *pb.GetRequest) -> (*pb.Item, error) - Unary RPC to retrieve a value by key\nListItems: (*pb.ListItemsRequest, pb.IntStore_ListItemsServer) -> error - Server streaming RPC to list items matching criteria\nSetStream: (pb.IntStore_SetStreamServer) -> error - Client streaming RPC to set multiple items\nStreamChat: (pb.IntStore_StreamChatServer) -> error - Bidirectional streaming RPC for chat-like communication",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"cloud.google.com/go/rpcreplay/proto/intstore\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype intStoreServer struct {\n\tpb.IntStoreServer\n\n\tAddr string\n\tl    net.Listener\n\tgsrv *grpc.Server\n\n\titems map[string]int32\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts := &intStoreServer{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tgsrv: grpc.NewServer(),\n\t}\n\tpb.RegisterIntStoreServer(s.gsrv, s)\n\tgo s.gsrv.Serve(s.l)\n\treturn s\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.gsrv.Stop()\n\ts.l.Close()\n}\n\nfunc (s *intStoreServer) Set(_ context.Context, item *pb.Item) (*pb.SetResponse, error) {\n\told := s.setItem(item)\n\treturn &pb.SetResponse{PrevValue: old}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *pb.Item) int32 {\n\tif s.items == nil {\n\t\ts.items = map[string]int32{}\n\t}\n\told := s.items[item.Name]\n\ts.items[item.Name] = item.Value\n\treturn old\n}\n\nfunc (s *intStoreServer) Get(_ context.Context, req *pb.GetRequest) (*pb.Item, error) {\n\tval, ok := s.items[req.Name]\n\tif !ok {\n\t\treturn nil, status.Errorf(codes.NotFound, \"%q\", req.Name)\n\t}\n\treturn &pb.Item{Name: req.Name, Value: val}, nil\n}\n\nfunc (s *intStoreServer) ListItems(req *pb.ListItemsRequest, ss pb.IntStore_ListItemsServer) error {\n\tfor name, val := range s.items {\n\t\tif val > req.GreaterThan {\n\t\t\tif err := ss.Send(&pb.Item{Name: name, Value: val}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(ss pb.IntStore_SetStreamServer) error {\n\tn := 0\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.setItem(item)\n\t\tn++\n\t}\n\treturn ss.SendAndClose(&pb.Summary{Count: int32(n)})\n}\n\nfunc (s *intStoreServer) StreamChat(ss pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := ss.Send(item); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype intStoreServer struct {\n\tAddr  string\n\tl     net.Listener\n\tgsrv  *grpc.Server\n\titems map[string]int32\n\tmu    sync.RWMutex\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\ts := &intStoreServer{\n\t\titems: make(map[string]int32),\n\t}\n\tvar err error\n\ts.l, err = net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts.Addr = s.l.Addr().String()\n\ts.gsrv = grpc.NewServer()\n\tRegisterIntStoreServer(s.gsrv, s)\n\tgo s.gsrv.Serve(s.l)\n\treturn s\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.gsrv.GracefulStop()\n}\n\nfunc (s *intStoreServer) Set(ctx context.Context, item *Item) (*SetResponse, error) {\n\tvalue := s.setItem(item)\n\treturn &SetResponse{Value: value}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *Item) int32 {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.items[item.Key] = item.Value\n\treturn item.Value\n}\n\nfunc (s *intStoreServer) Get(ctx context.Context, req *GetRequest) (*Item, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tvalue, ok := s.items[req.Key]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"key not found\")\n\t}\n\treturn &Item{Key: req.Key, Value: value}, nil\n}\n\nfunc (s *intStoreServer) ListItems(req *ListItemsRequest, stream IntStore_ListItemsServer) error {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tfor k, v := range s.items {\n\t\tif req.Prefix == \"\" || len(k) >= len(req.Prefix) && k[:len(req.Prefix)] == req.Prefix {\n\t\t\tif err := stream.Send(&Item{Key: k, Value: v}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(stream IntStore_SetStreamServer) error {\n\tfor {\n\t\titem, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn stream.SendAndClose(&SetStreamResponse{Count: int32(len(s.items))})\n\t\t}\n\t\ts.setItem(item)\n\t}\n}\n\nfunc (s *intStoreServer) StreamChat(stream IntStore_StreamChatServer) error {\n\tfor {\n\t\tin, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tresp := &ChatResponse{Message: fmt.Sprintf(\"echo: %s\", in.Message)}\n\t\tif err := stream.Send(resp); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with configurable network settings, TLS security, and keepalive parameters.\n\nStruct Description: The Server struct represents a gRPC server instance with network listener capabilities. It provides methods to start and stop the server, and handles configuration of security and connection parameters.\n\nFields:\nListener: [net.Listener] - The network listener for incoming connections\nServer: [*grpc.Server] - The gRPC server instance\n\nMethods:\nStart: [Name]() -> [error] - Starts the gRPC server and begins listening for incoming requests. Returns an error if the listener or server is not initialized.\nStop: [Name]() -> [void] - Gracefully stops the gRPC server if it's running.\nNewServer: [Name](address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) -> (*Server, error) - Creates a new Server instance with the specified address, TLS configuration, and keepalive parameters. Sets up default values for message sizes, connection timeout, and enforcement policy if not provided. Returns the server instance or an error if initialization fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil {\n\t\treturn errors.New(\"nil listener\")\n\t}\n\n\tif s.Server == nil {\n\t\treturn errors.New(\"nil server\")\n\t}\n\n\treturn s.Server.Serve(s.Listener)\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.Stop()\n\t}\n}\n\nfunc NewServer(\n\taddress string,\n\ttlsConf *tls.Config,\n\tsrvKaOpts *keepalive.ServerParameters,\n) (*Server, error) {\n\tif address == \"\" {\n\t\treturn nil, errors.New(\"server listen address not provided\")\n\t}\n\n\tlistener, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar serverOpts []grpc.ServerOption\n\n\tif srvKaOpts != nil {\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(*srvKaOpts))\n\t} else {\n\t\tserverKeepAliveParameters := keepalive.ServerParameters{\n\t\t\tTime:    1 * time.Minute,\n\t\t\tTimeout: 20 * time.Second,\n\t\t}\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(serverKeepAliveParameters))\n\t}\n\n\tif tlsConf != nil {\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(tlsConf)))\n\t}\n\n\tserverOpts = append(serverOpts, grpc.MaxSendMsgSize(maxSendMessageSize))\n\tserverOpts = append(serverOpts, grpc.MaxRecvMsgSize(maxRecvMessageSize))\n\n\tkep := keepalive.EnforcementPolicy{\n\t\tMinTime:             serverMinInterval,\n\t\tPermitWithoutStream: true,\n\t}\n\tserverOpts = append(serverOpts, grpc.KeepaliveEnforcementPolicy(kep))\n\n\tserverOpts = append(serverOpts, grpc.ConnectionTimeout(connectionTimeout))\n\n\tserver := grpc.NewServer(serverOpts...)\n\n\treturn &Server{Listener: listener, Server: server}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil || s.Server == nil {\n\t\treturn grpc.Errorf(grpc.Code(grpc.Unavailable), \"server or listener not initialized\")\n\t}\n\treturn s.Server.Serve(s.Listener)\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.Stop()\n\t}\n}\n\nfunc NewServer(address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) (*Server, error) {\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Set default gRPC server options\n\tvar opts []grpc.ServerOption\n\n\t// Apply TLS configuration if provided\n\tif tlsConf != nil {\n\t\topts = append(opts, grpc.Creds(&dynamicCredentials{config: tlsConf}))\n\t}\n\n\t// Set default max message sizes if not specified in keepalive\n\tif srvKaOpts == nil {\n\t\tsrvKaOpts = &keepalive.ServerParameters{\n\t\t\tMaxConnectionIdle: 15,\n\t\t\tTime:              30,\n\t\t\tTimeout:           10,\n\t\t}\n\t}\n\topts = append(opts, grpc.KeepaliveParams(*srvKaOpts))\n\n\t// Set connection timeout if not already set\n\topts = append(opts, grpc.ConnectionTimeout(120))\n\n\t// Create the gRPC server with the provided options\n\tgrpcServer := grpc.NewServer(opts...)\n\n\treturn &Server{\n\t\tListener: lis,\n\t\tServer:   grpcServer,\n\t}, nil\n}\n\n// dynamicCredentials is a custom credential type that allows dynamic TLS config updates.\ntype dynamicCredentials struct {\n\tconfig *tls.Config\n}\n\nfunc (d *dynamicCredentials) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n\treturn map[string]string{}, nil\n}\n\nfunc (d *dynamicCredentials) RequireTransportSecurity() bool {\n\treturn d.config != nil\n}"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that sets up and starts a mock gRPC server for management service testing, including generating a WireGuard key for authentication purposes.\n\nFunction Description: The function `startMockManagement` initializes and starts a mock gRPC server that implements a management service interface. It creates a TCP listener on an available port, generates a WireGuard key pair for server authentication, and registers mock implementations of the management service methods. The server runs in a goroutine to handle incoming requests asynchronously.\n\nInput: \n- t *testing.T: Testing context for error reporting and test helpers\n\nOutput:\n- *grpc.Server: The created gRPC server instance\n- net.Listener: The network listener for the server\n- *mock_server.ManagementServiceServerMock: The mock implementation of the management service\n- wgtypes.Key: The generated WireGuard private key for the server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server/mock_server\"\n\t\"golang.zx2c4.com/wireguard/wgctrl/wgtypes\"\n)\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\ts := grpc.NewServer()\n\n\tserverKey, err := wgtypes.GenerateKey()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmgmtMockServer := &mock_server.ManagementServiceServerMock{\n\t\tGetServerKeyFunc: func(context.Context, *mgmtProto.Empty) (*mgmtProto.ServerKeyResponse, error) {\n\t\t\tresponse := &mgmtProto.ServerKeyResponse{\n\t\t\t\tKey: serverKey.PublicKey().String(),\n\t\t\t}\n\t\t\treturn response, nil\n\t\t},\n\t}\n\n\tmgmtProto.RegisterManagementServiceServer(s, mgmtMockServer)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\treturn s, lis, mgmtMockServer, serverKey\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package testutil\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"golang.zx2c4.com/wireguard/wgtypes\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\n\tpb \"your/package/path/management/v1\"\n)\n\ntype ManagementServiceServerMock struct {\n\tmock.Mock\n}\n\nfunc (m *ManagementServiceServerMock) CreateTunnel(ctx context.Context, req *pb.CreateTunnelRequest) (*pb.CreateTunnelResponse, error) {\n\targs := m.Called(ctx, req)\n\treturn args.Get(0).(*pb.CreateTunnelResponse), args.Error(1)\n}\n\nfunc (m *ManagementServiceServerMock) DeleteTunnel(ctx context.Context, req *pb.DeleteTunnelRequest) (*pb.DeleteTunnelResponse, error) {\n\targs := m.Called(ctx, req)\n\treturn args.Get(0).(*pb.DeleteTunnelResponse), args.Error(1)\n}\n\nfunc (m *ManagementServiceServerMock) ListTunnels(ctx context.Context, req *pb.ListTunnelsRequest) (*pb.ListTunnelsResponse, error) {\n\targs := m.Called(ctx, req)\n\treturn args.Get(0).(*pb.ListTunnelsResponse), args.Error(1)\n}\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *ManagementServiceServerMock, wgtypes.Key) {\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create listener: %v\", err)\n\t}\n\n\tprivateKey, err := wgtypes.GeneratePrivateKey()\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to generate WireGuard private key: %v\", err)\n\t}\n\n\tcreds := &mockPerRPCCredentials{\n\t\tkey: privateKey,\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.Creds(creds),\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\n\tmockSvc := &ManagementServiceServerMock{}\n\tpb.RegisterManagementServiceServer(srv, mockSvc)\n\n\tgo func() {\n\t\tif err := srv.Serve(lis); err != nil {\n\t\t\tt.Logf(\"gRPC server stopped with error: %v\", err)\n\t\t}\n\t}()\n\n\treturn srv, lis, mockSvc, privateKey\n}\n\ntype mockPerRPCCredentials struct {\n\tkey wgtypes.Key\n}\n\nfunc (m *mockPerRPCCredentials) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n\treturn map[string]string{\n\t\t\"authorization\": fmt.Sprintf(\"Bearer %s\", m.key.PublicKey().String()),\n\t}, nil\n}\n\nfunc (m *mockPerRPCCredentials) RequireTransportSecurity() bool {\n\treturn true\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both querying and writing data with configurable settings like authentication, timeout, and TLS.\n\nStruct Description: The Client struct represents an InfluxDB client with configuration for server connection, authentication, and HTTP transport settings.\n\nFields:\n- url: url.URL - The base URL of the InfluxDB server\n- username: string - Username for basic authentication\n- password: string - Password for basic authentication\n- httpClient: *http.Client - Custom HTTP client with timeout and transport settings\n- userAgent: string - User agent string for HTTP requests\n- precision: string - Precision for timestamps in queries and writes\n\nMethods:\n- NewClient: [Name](Config) -> (*Client, error) - Creates a new InfluxDB client with the given configuration\n- Query: [Name](Query) -> (*Response, error) - Executes a query against the InfluxDB server and returns the response\n- Write: [Name](BatchPoints) -> (*Response, error) - Writes batch points to the InfluxDB server and returns the response",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: c.UnsafeSsl,\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) Query(q Query) (*Response, error) {\n\tu := c.url\n\n\tu.Path = \"query\"\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = \"write\"\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "right_result": "package influxdb\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\n// Client represents an InfluxDB client with configurable settings.\ntype Client struct {\n\turl       url.URL\n\tusername  string\n\tpassword  string\n\thttpClient *http.Client\n\tuserAgent string\n\tprecision string\n}\n\n// Config holds the configuration for creating a new InfluxDB client.\ntype Config struct {\n\tURL       url.URL\n\tUsername  string\n\tPassword  string\n\tTimeout   time.Duration\n\tTLSConfig *TLSConfig\n\tUserAgent string\n\tPrecision string\n}\n\n// TLSConfig holds TLS-related configuration for the HTTP client.\ntype TLSConfig struct {\n\tInsecureSkipVerify bool\n}\n\n// Response represents the response from an InfluxDB server.\ntype Response struct {\n\tResults []Result `json:\"results,omitempty\"`\n\tErr     string `json:\"error,omitempty\"`\n}\n\n// Result represents a single result from a query.\ntype Result struct {\n\tSeries  []Series `json:\"series,omitempty\"`\n\tStatementID int    `json:\"statement_id,omitempty\"`\n}\n\n// Series represents a data series in the response.\ntype Series struct {\n\tName    string   `json:\"name,omitempty\"`\n\tColumns []string `json:\"columns,omitempty\"`\n\tValues  [][]interface{} `json:\"values,omitempty\"`\n}\n\n// BatchPoints represents a batch of data points to be written to InfluxDB.\ntype BatchPoints struct {\n\tPoints    []Point  `json:\"points\"`\n\tDatabase  string `json:\"database\"`\n\tRetentionPolicy string `json:\"retentionPolicy\"`\n}\n\n// Point represents a single data point.\ntype Point struct {\n\tMeasurement string                 `json:\"measurement\"`\n\tTags        map[string]string      `json:\"tags,omitempty\"`\n\tFields      map[string]interface{} `json:\"fields\"`\n\tTime        time.Time              `json:\"time,omitempty\"`\n}\n\n// NewClient creates a new InfluxDB client with the given configuration.\nfunc NewClient(cfg Config) (*Client, error) {\n\t// Ensure the URL has a scheme\n\tif cfg.URL.Scheme != \"http\" && cfg.URL.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"invalid URL scheme: %s\", cfg.URL.Scheme)\n\t}\n\n\t// Create a custom transport with TLS settings\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyURL(nil),\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   30 * time.Second,\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          100,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t\tTLSHandshakeTimeout:   10 * time.Second,\n\t\tExpectContinueTimeout: 1 * time.Second,\n\t}\n\n\tif cfg.TLSConfig != nil {\n\t\ttransport.TLSClientConfig = &tls.Config{\n\t\t\tInsecureSkipVerify: cfg.TLSConfig.InsecureSkipVerify,\n\t\t}\n\t}\n\n\t// Create HTTP client with timeout and custom transport\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   cfg.Timeout,\n\t}\n\n\t// Set default user agent if not provided\n\tif cfg.UserAgent == \"\" {\n\t\tcfg.UserAgent = \"InfluxDB-Go-Client\"\n\t}\n\n\t// Set default precision if not provided\n\tif cfg.Precision == \"\" {\n\t\tcfg.Precision = \"ns\"\n\t}\n\n\treturn &Client{\n\t\turl:        cfg.URL,\n\t\tusername:   cfg.Username,\n\t\tpassword:   cfg.Password,\n\t\thttpClient: httpClient,\n\t\tuserAgent:  cfg.UserAgent,\n\t\tprecision:  cfg.Precision,\n\t}, nil\n}\n\n// Query executes a query against the InfluxDB server and returns the response.\nfunc (c *Client) Query(query Query) (*Response, error) {\n\t// Build query parameters\n\tparams := url.Values{}\n\tparams.Add(\"q\", query.String())\n\tparams.Add(\"epoch\", c.precision)\n\n\t// Build request URL\n\treqURL := c.url.ResolveReference(&url.URL{\n\t\tPath:     \"/query\",\n\t\tRawQuery: params.Encode(),\n\t})\n\n\t// Create request\n\treq, err := http.NewRequest(\"GET\", reqURL.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Set headers\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\treq.SetBasicAuth(c.username, c.password)\n\n\t// Execute request\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\t// Read response body\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Handle non-2xx status codes\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"non-2xx response code: %d, body: %s\", resp.StatusCode, body)\n\t}\n\n\t// Parse JSON response\n\tvar response Response\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check for error in response body\n\tif response.Err != \"\" {\n\t\treturn nil, fmt.Errorf(\"influxdb error: %s\", response.Err)\n\t}\n\n\treturn &response, nil\n}\n\n// Write writes batch points to the InfluxDB server and returns the response.\nfunc (c *Client) Write(batch BatchPoints) (*Response, error) {\n\t// Marshal batch points to JSON\n\tbodyBytes, err := json.Marshal(batch)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Build query parameters\n\tparams := url.Values{}\n\tparams.Add(\"precision\", c.precision)\n\n\t// Build request URL\n\treqURL := c.url.ResolveReference(&url.URL{\n\t\tPath:     \"/write\",\n\t\tRawQuery: params.Encode(),\n\t})\n\n\t// Create request\n\treq, err := http.NewRequest(\"POST\", reqURL.String(), bytes.NewBuffer(bodyBytes))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Set headers\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\treq.SetBasicAuth(c.username, c.password)\n\n\t// Execute request\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\t// Read response body\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Handle non-2xx status codes\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"non-2xx response code: %d, body: %s\", resp.StatusCode, body)\n\t}\n\n\t// Parse JSON response\n\tvar response Response\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check for error in response body\n\tif response.Err != \"\" {\n\t\treturn nil, fmt.Errorf(\"influxdb error: %s\", response.Err)\n\t}\n\n\treturn &response, nil\n}"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Create a Go struct that implements a RocketMQ push consumer with configurable options, message handling, and tracing capabilities.\n\nStruct Description: The PushConsumer struct encapsulates a RocketMQ push consumer with additional features like rate limiting, tracing, and message processing. It manages consumer lifecycle and message subscription.\n\nFields:\n\nname: string - Name identifier for the consumer  \nPushConsumer: rocketmq.PushConsumer - Embedded RocketMQ push consumer instance  \nPushConsumerConfig: PushConsumerConfig - Configuration for the consumer  \nsubscribers: map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error) - Map of topic to message handler functions  \ninterceptors: []primitive.Interceptor - List of interceptors for message processing  \nbucket: *ratelimit.Bucket - Rate limiter bucket for controlling consumption rate  \nstarted: bool - Flag indicating if consumer is running  \n\nMethods:\n\nRegisterSingleMessage: (f func(context.Context, *primitive.MessageExt) error) -> *PushConsumer - Registers a single message handler function with tracing and panic recovery  \nStart: () -> error - Initializes and starts the RocketMQ consumer with configured options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"runtime/debug\"\n\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/juju/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.12.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype PushConsumer struct {\n\trocketmq.PushConsumer\n\tname string\n\tPushConsumerConfig\n\n\tsubscribers  map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors []primitive.Interceptor\n\tbucket       *ratelimit.Bucket\n\tstarted      bool\n}\n\nfunc (cc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\ttracer := xtrace.NewTracer(trace.SpanKindConsumer)\n\tattrs := []attribute.KeyValue{\n\t\tsemconv.MessagingSystemKey.String(\"rocketmq\"),\n\t\tsemconv.MessagingRocketmqClientGroupKey.String(cc.Group),\n\t\tsemconv.MessagingRocketmqClientIDKey.String(cc.InstanceName),\n\t\tsemconv.MessagingRocketmqConsumptionModelKey.String(cc.MessageModel),\n\t}\n\n\tfn := func(ctx context.Context, msgs ...*primitive.MessageExt) (result consumer.ConsumeResult, err error) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tresult, err = consumer.ConsumeRetryLater, errors.New(\"consumer message panic\")\n\t\t\t}\n\t\t}()\n\t\tfor _, msg := range msgs {\n\t\t\tvar (\n\t\t\t\tspan trace.Span\n\t\t\t)\n\n\t\t\tif cc.EnableTrace {\n\t\t\t\tcarrier := propagation.MapCarrier{}\n\t\t\t\tfor key, value := range msg.GetProperties() {\n\t\t\t\t\tcarrier[key] = value\n\t\t\t\t}\n\t\t\t\tctx, span = tracer.Start(ctx, msg.Topic, carrier, trace.WithAttributes(attrs...))\n\t\t\t\tspan.SetAttributes(\n\t\t\t\t\tsemconv.MessagingRocketmqNamespaceKey.String(msg.Topic),\n\t\t\t\t\tsemconv.MessagingRocketmqMessageTagKey.String(msg.GetTags()),\n\t\t\t\t)\n\t\t\t\tdefer span.End()\n\t\t\t}\n\n\t\t\tif cc.bucket != nil {\n\t\t\t\tif ok := cc.bucket.WaitMaxDuration(1, cc.WaitMaxDuration); !ok {\n\t\t\t\t\treturn consumer.ConsumeRetryLater, nil\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\tif cc.EnableTrace && span != nil {\n\t\t\t\t\tspan.RecordError(err)\n\t\t\t\t}\n\t\t\t\treturn consumer.ConsumeRetryLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\tcc.subscribers[cc.Topic] = fn\n\treturn cc\n}\n\nfunc (cc *PushConsumer) Start() error {\n\tif cc.started {\n\t\treturn nil\n\t}\n\n\tvar opts = []consumer.Option{\n\t\tconsumer.WithGroupName(cc.Group),\n\t\tconsumer.WithInstance(cc.InstanceName),\n\t\tconsumer.WithNameServer(cc.Addr),\n\t\tconsumer.WithMaxReconsumeTimes(cc.Reconsume),\n\t\tconsumer.WithInterceptor(cc.interceptors...),\n\t\tconsumer.WithConsumeMessageBatchMaxSize(cc.ConsumeMessageBatchMaxSize),\n\t\tconsumer.WithPullBatchSize(cc.PullBatchSize),\n\t\tconsumer.WithConsumeGoroutineNums(cc.ConsumeGoroutineNums),\n\t\tconsumer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: cc.AccessKey,\n\t\t\tSecretKey: cc.SecretKey,\n\t\t}),\n\t}\n\tif cc.PushConsumerConfig.MessageModel == \"BroadCasting\" {\n\t\topts = append(opts, consumer.WithConsumerModel(consumer.BroadCasting))\n\t}\n\n\tclient, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcc.PushConsumer = client\n\n\tselector := consumer.MessageSelector{\n\t\tType:       consumer.TAG,\n\t\tExpression: \"\",\n\t}\n\tif cc.PushConsumerConfig.SubExpression != \"*\" {\n\t\tselector.Expression = cc.PushConsumerConfig.SubExpression\n\t}\n\n\tfor topic, fn := range cc.subscribers {\n\t\tif err := cc.PushConsumer.Subscribe(topic, selector, fn); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cc.Enable {\n\t\tif err := client.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tcc.started = true\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 128,
    "right_result": "package rocketmq\n\nimport (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/go-kit/kit/ratelimit\"\n\t\"time\"\n)\n\ntype PushConsumerConfig struct {\n\tGroupID           string\n\tNameServer        string\n\tTopics            []string\n\tRateLimit         int\n\tTraceEnable       bool\n\tInterceptorEnable bool\n}\n\ntype PushConsumer struct {\n\tname             string\n\trocketmq.PushConsumer\n\tPushConsumerConfig\n\tsubscribers   map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors  []primitive.Interceptor\n\tbucket        *ratelimit.Bucket\n\tstarted       bool\n}\n\nfunc NewPushConsumer(name string, cfg PushConsumerConfig) *PushConsumer {\n\treturn &PushConsumer{\n\t\tname:             name,\n\t\tPushConsumerConfig: cfg,\n\t\tsubscribers:      make(map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)),\n\t\tstarted:          false,\n\t}\n}\n\nfunc (pc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\thandler := func(ctx context.Context, msgs ...*primitive.MessageExt) (consumer.ConsumeResult, error) {\n\t\tfor _, msg := range msgs {\n\t\t\tif pc.bucket != nil {\n\t\t\t\tpc.bucket.Wait(1)\n\t\t\t}\n\t\t\tif pc.TraceEnable {\n\t\t\t\tctx = primitive.WithTraceID(ctx, primitive.NewTraceID())\n\t\t\t}\n\t\t\tif pc.InterceptorEnable && len(pc.interceptors) > 0 {\n\t\t\t\tfor _, interceptor := range pc.interceptors {\n\t\t\t\t\tmsg = interceptor(msg)\n\t\t\t\t}\n\t\t\t}\n\t\t\terr := f(ctx, msg)\n\t\t\tif err != nil {\n\t\t\t\treturn consumer.ConsumeConcurrentlyLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeConcurrentlySuccess, nil\n\t}\n\n\tfor _, topic := range pc.Topics {\n\t\tpc.subscribers[topic] = handler\n\t}\n\treturn pc\n}\n\nfunc (pc *PushConsumer) Start() error {\n\tif pc.started {\n\t\treturn nil\n\t}\n\n\tvar opts []rocketmq.Option\n\topts = append(opts, rocketmq.WithGroupName(pc.GroupID))\n\topts = append(opts, rocketmq.WithNameServer([]string{pc.NameServer}))\n\n\tif pc.RateLimit > 0 {\n\t\tpc.bucket = ratelimit.NewBucketWithRate(float64(pc.RateLimit), int64(pc.RateLimit))\n\t}\n\n\tconsumer, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpc.PushConsumer = consumer\n\n\tfor topic, handler := range pc.subscribers {\n\t\terr = pc.Subscribe(topic, \"*\", handler)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\terr = pc.Start()\n\tif err != nil {\n\t\treturn err\n\t}\n\tpc.started = true\n\treturn nil\n}"
  },
  {
    "Task_id": 302,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages in different modes (Sync, Async, OneWay) and support delayed messages.\n\nFunction Description: The following functions provide different ways to send messages to RocketMQ brokers. The producer must be initialized before sending messages.\n\nInput: \n- ctx: context.Context - Context for controlling the message sending process\n- topic: string - The topic to which the message will be sent\n- body: []byte - The message body/content\n- tag: string (for delay message) - Message tag for filtering\n- keys: []string (for delay message) - Message keys for filtering\n- delayLevel: int (for delay message) - Delay level for delayed messages\n- callback: func(ctx context.Context, result *primitive.SendResult, err error) (for async message) - Callback function for async message sending\n\nOutput:\n- error: For OneWay and Async modes, returns error if sending fails\n- (*primitive.SendResult, error): For Sync mode, returns send result and potential error\n- (*primitive.SendResult, error): For delayed sync message, returns send result and potential error\n\nMethods:\n\ninitProducer: () -> error - Initializes the RocketMQ producer with default configuration\n\nsendOneWayMessage: (ctx context.Context, topic string, body []byte) -> error - Sends a message in OneWay mode (fire-and-forget)\n\nsendSyncMessage: (ctx context.Context, topic string, body []byte) -> (*primitive.SendResult, error) - Sends a message in Sync mode (waits for acknowledgment)\n\nsendAsyncMessage: (ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) -> error - Sends a message in Async mode (uses callback)\n\nsendDelaySyncMessage: (ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) -> (*primitive.SendResult, error) - Sends a delayed message in Sync mode",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n)\n\nvar mqProducer rocketmq.Producer\n\nfunc initProducer() error {\n\tvar err error\n\tmqProducer, err = rocketmq.NewProducer(\n\t\tproducer.WithNsResovler(primitive.NewPassthroughResolver([]string{\"172.13.3.160:9876\"})),\n\t\tproducer.WithRetry(3),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn mqProducer.Start()\n}\n\nfunc sendOneWayMessage(ctx context.Context, topic string, body []byte) error {\n\treturn mqProducer.SendOneWay(ctx, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendSyncMessage(ctx context.Context, topic string, body []byte) (*primitive.SendResult, error) {\n\treturn mqProducer.SendSync(ctx, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendAsyncMessage(ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) error {\n\treturn mqProducer.SendAsync(ctx, callback, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendDelaySyncMessage(ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) (*primitive.SendResult, error) {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t}\n\tmsg.WithTag(tag)\n\tmsg.WithKeys(keys)\n\tmsg.WithDelayTimeLevel(delayLevel)\n\treturn mqProducer.SendSync(ctx, msg)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 127,
    "right_result": "package rocketmq\n\nimport (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n)\n\ntype RocketMQProducer struct {\n\tprod producer.Producer\n}\n\nvar mqProducer *RocketMQProducer\n\nfunc initProducer() error {\n\tp, err := rocketmq.NewProducer(\n\t\tproducer.WithNameServer([]string{\"127.0.0.1:9876\"}),\n\t\tproducer.WithRetry(2),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tmqProducer = &RocketMQProducer{prod: p}\n\treturn p.Start()\n}\n\nfunc sendOneWayMessage(ctx context.Context, topic string, body []byte) error {\n\tmsg := primitive.NewMessage(topic, body)\n\treturn mqProducer.prod.SendOneWay(ctx, msg)\n}\n\nfunc sendSyncMessage(ctx context.Context, topic string, body []byte) (*primitive.SendResult, error) {\n\tmsg := primitive.NewMessage(topic, body)\n\treturn mqProducer.prod.SendSync(ctx, msg)\n}\n\nfunc sendAsyncMessage(ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) error {\n\tmsg := primitive.NewMessage(topic, body)\n\treturn mqProducer.prod.SendAsync(ctx, func(ctx context.Context, result *primitive.SendResult, err error) {\n\t\tcallback(ctx, result, err)\n\t}, msg)\n}\n\nfunc sendDelaySyncMessage(ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) (*primitive.SendResult, error) {\n\tmsg := primitive.NewMessage(topic, body)\n\tmsg.WithTag(tag)\n\tmsg.WithKeys(keys)\n\tmsg.WithDelayTimeLevel(delayLevel)\n\treturn mqProducer.prod.SendSync(ctx, msg)\n}"
  },
  {
    "Task_id": 308,
    "Instruction": "Task Description: Create a function that fetches memory statistics from a specified URL using HTTP GET request and returns the response body.\n\nFunction Description: The function `defaultMemstatsClient` makes an HTTP GET request to the provided URL to fetch memory statistics. It handles the response by reading the body and ensures proper resource cleanup by deferring the closure of the response body. Errors during the request or response handling are returned to the caller.\n\nInput: \n- `url` (string): The URL from which to fetch the memory statistics.\n\nOutput: \n- `[]byte`: The response body containing the memory statistics.\n- `error`: An error object if the HTTP request or response reading fails; otherwise, `nil`.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tutil.Debug(\"Fetching memstats from %s\", url)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Create a function that retrieves the version information from an etcd server using a simple HTTP GET request.\n\nFunction Description: The function `GetEtcdVersion` makes an HTTP GET request to the specified etcd server's `/version` endpoint, reads the response, and returns the version information as a string. It handles errors for connection issues, unsuccessful HTTP responses, and response body reading failures.\n\nInput: \n- `host` (string): The base URL of the etcd server (e.g., \"http://localhost:2379\")\n\nOutput: \n- (string): The version information returned by the etcd server\n- (error): An error object if any step fails (connection, non-200 response, or body reading error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\nfunc GetEtcdVersion(host string) (string, error) {\n\tresponse, err := http.Get(host + \"/version\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unsuccessful response from etcd server %q: %v\", host, err)\n\t}\n\tversionBytes, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(versionBytes), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc GetEtcdVersion(host string) (string, error) {\n\turl := host + \"/version\"\n\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Create a function that performs a simple HTTP GET request to a remote URL and returns the response body as a string.\n\nFunction Description: The function `remote_get` makes an HTTP GET request to the specified remote URL. It handles the response by checking the status code, reading the response body, and returning it as a string. If any errors occur during the request or response processing, they are returned as part of the error output.\n\nInput: \n- `remote` (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- (string, error): A tuple containing the response body as a string and an error. If the request is successful, the error will be nil. If an error occurs, the string will be empty, and the error will contain the relevant error message.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"remote_get: wrong status code %d\", resp.StatusCode))\n\t}\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn \"\", fmt.Errorf(\"received non-2xx status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a function to retrieve node information by making an HTTP GET request to a local server. The function should handle server setup, request execution, and response processing.\n\nFunction Description: The function `getNode` initiates an HTTP server locally, sends a GET request to retrieve node information based on the provided ID, and returns the response body as a string. It handles server lifecycle management and ensures proper resource cleanup.\n\nInput: \n- `id` [string] - The identifier of the node to retrieve\n\nOutput: \n- [string] - The response body containing the node information",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc getNode(id string) string {\n\tlchan := make(chan net.Listener)\n\thttpServe = func(l net.Listener, h http.Handler) error {\n\t\tlchan <- l\n\t\thttp.Serve(l, h)\n\t\treturn nil\n\t}\n\n\tgo func() { run(&http.ServeMux{}, 0, false, \"nbs:\"+dir) }()\n\tl := <-lchan\n\tdefer l.Close()\n\n\tr, err := http.Get(fmt.Sprintf(\"http://%s/getNode?id=%s\", l.Addr().String(), id))\n\tassert.NoError(err)\n\tdefer r.Body.Close()\n\tbody, err := ioutil.ReadAll(r.Body)\n\treturn string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc getNode(id string) string {\n\tlistener, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tport := listener.Addr().(*net.TCPAddr).Port\n\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/node/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tnodeID := r.URL.Path[len(\"/node/\"):]\n\t\tfmt.Fprintf(w, \"Node Info for ID: %s\", nodeID)\n\t})\n\n\tgo func() {\n\t\thttp.Serve(listener, mux)\n\t}()\n\n\turl := fmt.Sprintf(\"http://localhost:%d/node/%s\", port, id)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tos.Exit(0)\n\treturn string(body)\n}\n```"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to retrieve configuration data from a local admin API endpoint and returns the response body as a string.\n\nFunction Description: The function `getEffectiveConfig` makes an HTTP GET request to a specified local port's admin API endpoint (/api/v1/config_dump). It handles the response by checking the status code, reading the response body, and returning it as a string. It includes proper error handling for failed requests or non-200 status codes.\n\nInput: \n- port [uint32] - The local port number where the admin API is running\n\nOutput:\n- [string] - The response body as a string if the request is successful\n- [error] - An error object describing any issues that occurred during the request (connection error, non-200 status code, or body read error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\nfunc getEffectiveConfig(port uint32) (string, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"call admin api failed response status: %d, %s\", resp.StatusCode, string(b)))\n\t}\n\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc getEffectiveConfig(port uint32) (string, error) {\n\turl := fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port)\n\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to make GET request: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"received non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, readErr := ioutil.ReadAll(resp.Body)\n\tif readErr != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to read response body: %w\", readErr)\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a function to retrieve a proxy address from a specified HTTP endpoint and return it in a formatted string.\n\nFunction Description: The function `getOneProxy` makes an HTTP GET request to a predefined proxy server endpoint, reads the response body to obtain the proxy address, formats it with an \"http://\" prefix, and returns both the formatted and raw proxy strings. It includes basic error handling for the response reading process.\n\nInput: None (The function takes no input parameters)\n\nOutput: \n1. A string representing the formatted proxy address with \"http://\" prefix\n2. A string representing the raw proxy address from the response body",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, _ := http.Get(\"http://45.78.45.70:5015/get/\")\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t}\n\tproxy := \"http://\" + string(body)\n\tfmt.Println(\"\u4f7f\u7528\u9ed8\u8ba4\u4ee3\u7406\uff1a\" + proxy)\n\treturn proxy, string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc getOneProxy() (string, string, error) {\n\tresp, err := http.Get(\"http://proxy.example.com/get-proxy\")\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\n\trawProxy := string(body)\n\tformattedProxy := \"http://\" + rawProxy\n\n\treturn formattedProxy, rawProxy, nil\n}\n```"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of fetched files to avoid redundant network requests when the same URL is requested multiple times. The function includes error handling for network issues and invalid HTTP responses.\n\nInput: \n- `fileurl` (string): The URL of the file to be fetched.\n\nOutput: \n- `[]byte`: The content of the file as a byte slice if successful.\n- `error`: An error object describing any issues encountered during the fetch operation (network errors, non-200 status codes, etc.). Returns nil if no error occurs.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar verboseReader = false\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar cache = struct {\n\tsync.RWMutex\n\tm map[string][]byte\n}{m: make(map[string][]byte)}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tcache.RLock()\n\tif content, ok := cache.m[fileurl]; ok {\n\t\tcache.RUnlock()\n\t\treturn content, nil\n\t}\n\tcache.RUnlock()\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error fetching URL: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading response body: %v\", err)\n\t}\n\n\tcache.Lock()\n\tcache.m[fileurl] = content\n\tcache.Unlock()\n\n\treturn content, nil\n}"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Implement a function to fetch a long-lived user access token from Facebook's Graph API using HTTP GET request.\n\nFunction Description: The function makes an HTTP GET request to Facebook's OAuth endpoint to exchange a short-lived access token for a long-lived one. It handles the request, response reading, and JSON parsing, returning the long-lived token or an error if any step fails.\n\nInput: \n- The function is a method on a struct (FacebookBee) that contains the following fields:\n  - clientID (string): Facebook app client ID\n  - clientSecret (string): Facebook app client secret\n  - accessToken (string): Short-lived user access token to exchange\n\nOutput:\n- string: The long-lived access token if successful\n- error: Descriptive error if any step fails (request, reading response, or parsing JSON)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc (mod *FacebookBee) fetchLongLivedUserAccessToken() (string, error) {\n\tbaseURL := \"https://graph.facebook.com/oauth/access_token\"\n\tv := url.Values{}\n\tv.Set(\"grant_type\", \"fb_exchange_token\")\n\tv.Set(\"client_id\", mod.clientID)\n\tv.Set(\"client_secret\", mod.clientSecret)\n\tv.Set(\"fb_exchange_token\", mod.accessToken)\n\tgraphUrl := baseURL + \"?\" + v.Encode()\n\n\tres, err := http.Get(graphUrl)\n\n\tif err != nil || res == nil {\n\t\treturn \"\", fmt.Errorf(\"fetching long lived user access token failed: %w\", err)\n\t}\n\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"reading content while fetching long lived user access token failed: %w\", err)\n\t}\n\n\ttype RequestResult struct {\n\t\tAccessToken string `json:\"access_token\"`\n\t}\n\n\tvar tokenRes RequestResult\n\terr = json.Unmarshal(body, &tokenRes)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"parsing result while fetching long lived user access token failed: %w\", err)\n\t}\n\n\treturn tokenRes.AccessToken, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype FacebookBee struct {\n\tclientID     string\n\tclientSecret string\n\taccessToken  string\n}\n\ntype tokenResponse struct {\n\tAccessToken string `json:\"access_token\"`\n\tExpiresIn   int    `json:\"expires_in\"`\n\tTokenType   string `json:\"token_type\"`\n\tError       struct {\n\t\tMessage string `json:\"message\"`\n\t\tType    string `json:\"type\"`\n\t\tCode    int    `json:\"code\"`\n\t} `json:\"error,omitempty\"`\n}\n\nfunc (b *FacebookBee) GetLongLivedToken() (string, error) {\n\turl := fmt.Sprintf(\"https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&client_id=%s&client_secret=%s&fb_exchange_token=%s\",\n\t\tb.clientID, b.clientSecret, b.accessToken)\n\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to make request: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, readErr := ioutil.ReadAll(resp.Body)\n\tif readErr != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to read response body: %v\", readErr)\n\t}\n\n\tvar tr tokenResponse\n\tjsonErr := json.Unmarshal(body, &tr)\n\tif jsonErr != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to parse JSON response: %v. Raw response: %s\", jsonErr, body)\n\t}\n\n\tif tr.Error.Code != 0 {\n\t\treturn \"\", fmt.Errorf(\"API error - Type: %s, Message: %s, Code: %d\", tr.Error.Type, tr.Error.Message, tr.Error.Code)\n\t}\n\n\tif tr.AccessToken == \"\" {\n\t\treturn \"\", fmt.Errorf(\"no access token found in response: %s\", body)\n\t}\n\n\treturn tr.AccessToken, nil\n}"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Implement a function that sets up a cron job to make periodic HTTP GET requests to a specified callback URL and logs the results.\n\nFunction Description: The function `Setup` initializes a new cron scheduler, adds a job that makes HTTP GET requests to a specified callback URL at a given interval, and logs the success or failure of each request. The function starts the cron scheduler and returns it for further management.\n\nInput: \n- `job` [*pb.Job] - A protobuf message containing the job details, including:\n  - `Id` [string] - Unique identifier for the job\n  - `Interval` [string] - Cron-formatted interval at which the job should run\n  - `Callback` [string] - URL to which the HTTP GET request will be made\n\nOutput: \n- [*cron.Cron] - A pointer to the started cron scheduler instance, which can be used to stop or manage the scheduled job.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/cron/proto\"\n\t\"github.com/robfig/cron/v3\"\n)\nfunc (c *Cron) Setup(job *pb.Job) *cron.Cron {\n\tlogger.Infof(\"Setting up job id: %s\", job.Id)\n\tcr := cron.New()\n\tcr.AddFunc(job.Interval, func() {\n\t\tlogger.Infof(\"Running job id: %s\", job.Id)\n\t\trsp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlogger.Errorf(\"Failed job id: %s error: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer rsp.Body.Close()\n\t\tb, _ := ioutil.ReadAll(rsp.Body)\n\t\tif rsp.StatusCode != 200 {\n\t\t\tlogger.Errorf(\"Non 200 job id: %s error: %s\", job.Id, string(b))\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Successful job id: %s\", job.Id)\n\t})\n\tcr.Start()\n\treturn cr\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/robfig/cron/v3\"\n)\n\n// Assuming pb package contains the Job definition\ntype pb struct{}\n\nfunc (p *pb) Job struct {\n\tId       string\n\tInterval string\n\tCallback string\n}\n\nfunc Setup(job *pb.Job) *cron.Cron {\n\tc := cron.New()\n\n\t_, err := c.AddFunc(job.Interval, func() {\n\t\tresp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Job %s: HTTP GET request failed: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tbody, readErr := ioutil.ReadAll(resp.Body)\n\t\tif readErr != nil {\n\t\t\tlog.Printf(\"Job %s: Failed to read response body: %v\", job.Id, readErr)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Printf(\"Job %s: Success. Response: %s\", job.Id, body)\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to add cron job: %v\", err)\n\t}\n\n\tc.Start()\n\treturn c\n}"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified address with JSON payload and room parameters, then processes the response.\n\nFunction Description: The function sends a POST request to a server endpoint with room information and a JSON payload containing a test value. It handles the response by reading the body and printing the result along with a timestamp.\n\nInput:\n- addr (string): The server address to which the POST request will be sent.\n- i (int64): A numeric value that will be included in the JSON payload.\n\nOutput: None (prints response details to stdout, returns nothing)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc post(addr string, i int64) {\n\tresp, err := http.Post(\"http://\"+addr+\"/goim/push/room?operation=1000&type=test&room=\"+os.Args[1], \"application/json\", bytes.NewBufferString(fmt.Sprintf(\"{\\\"test\\\":%d}\", i)))\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"%s postId:%d, response:%s\\n\", time.Now().Format(\"2006-01-02 15:04:05\"), i, string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc sendPostRequest(addr string, i int64) {\n\turl := fmt.Sprintf(\"http://%s/room?param=%d\", addr, i)\n\t\n\tpayload := map[string]interface{}{\n\t\t\"test\": i,\n\t}\n\t\n\tjsonData, _ := json.Marshal(payload)\n\t\n\tresp, err := http.Post(url, \"application/json\", bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\tfmt.Printf(\"[%s] Error sending request: %v\\n\", time.Now().Format(time.RFC3339), err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\t\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\n\tfmt.Printf(\"[%s] Response: %s\\n\", time.Now().Format(time.RFC3339), body)\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a Proxy struct that manages different types of servers (UDS, mTLS, admin, and health) for handling proxy connections with various protocols (HTTP and gRPC).\n\nStruct Description: The Proxy struct provides methods to run different server types with configurable options, including Unix Domain Socket (UDS) servers, mTLS-secured servers, admin servers for metrics and profiling, and health servers for liveness/readiness checks.\n\nMethods:\n\nMethod1: runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a master server using Unix Domain Socket (UDS) for communication. Supports both gRPC and HTTP modes based on configuration. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod2: runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a mTLS-secured master server listening on a TCP port. Supports both gRPC and HTTP modes. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod3: runAdminServer(o *options.ProxyRunOptions) -> void - Starts an admin server for metrics and optional profiling endpoints. Runs on a localhost port specified in options.\n\nMethod4: runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) -> void - Starts a health server providing liveness (/healthz) and readiness (/ready) endpoints. Runs on a port specified in options.\n\nNote: StopFunc is a function type defined as: type StopFunc func()",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\t\"syscall\"\n)\n\ntype Proxy struct {\n}\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tif o.DeleteUDSFile {\n\t\tif err := os.Remove(o.UdsName); err != nil && !os.IsNotExist(err) {\n\t\t\tklog.ErrorS(err, \"failed to delete file\", \"file\", o.UdsName)\n\t\t}\n\t}\n\tvar stop StopFunc\n\tif o.Mode == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := getUDSListener(ctx, o.UdsName)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to get uds listener: %v\", err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\tserver := &http.Server{\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tklog.ErrorS(err, \"error shutting down server\")\n\t\t}\n\t\tgo func() {\n\t\t\tudsListener, err := getUDSListener(ctx, o.UdsName)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to get uds listener\")\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\terr := udsListener.Close()\n\t\t\t\tklog.ErrorS(err, \"failed to close uds listener\")\n\t\t\t}()\n\t\t\terr = server.Serve(udsListener)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to serve uds requests\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tvar stop StopFunc\n\n\tvar tlsConfig *tls.Config\n\tvar err error\n\tif tlsConfig, err = p.getTLSConfig(o.ServerCaCert, o.ServerCert, o.ServerKey); err != nil {\n\t\treturn nil, err\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", o.ServerPort)\n\n\tif o.Mode == grpcMode {\n\t\tserverOption := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\tgrpcServer := grpc.NewServer(serverOption)\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to listen on %s: %v\", addr, err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\thttpServer := &http.Server{\n\t\t\tAddr: \":8088\",\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tserver := &http.Server{\n\t\t\tAddr:      addr,\n\t\t\tTLSConfig: tlsConfig,\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t\tTLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler)),\n\t\t}\n\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown server\")\n\t\t\t}\n\t\t\terr = httpServer.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown httpServer\")\n\t\t\t}\n\t\t}\n\t\tgo func() {\n\t\t\terr := server.ListenAndServeTLS(\"\", \"\")\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on master port\")\n\t\t\t}\n\t\t}()\n\t\tgo func() {\n\t\t\terr := httpServer.ListenAndServe()\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on http master port\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.Handle(\"/metrics\", promhttp.Handler())\n\tif o.EnableProfiling {\n\t\tmuxHandler.HandleFunc(\"/debug/pprof\", util.RedirectTo(\"/debug/pprof/\"))\n\t\tmuxHandler.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tif o.EnableContentionProfiling {\n\t\t\truntime.SetBlockProfileRate(1)\n\t\t}\n\t}\n\tadminServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\"127.0.0.1:%d\", o.AdminPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := adminServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"admin server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Admin server stopped listening\")\n\t}()\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\tlivenessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"ok\")\n\t})\n\treadinessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tready, msg := server.Readiness.Ready()\n\t\tif ready {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\tfmt.Fprintf(w, \"ok\")\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, msg)\n\t})\n\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.HandleFunc(\"/healthz\", livenessHandler)\n\tmuxHandler.HandleFunc(\"/ready\", readinessHandler)\n\thealthServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\":%d\", o.HealthPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := healthServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"health server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Health server stopped listening\")\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "right_result": "package proxy\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"runtime/pprof\"\n\n\t\"google.golang.org/grpc\"\n\t\"yourproject/internal/options\"\n\t\"yourproject/internal/server\"\n\t\"yourproject/internal/transport\"\n)\n\ntype StopFunc func()\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tlistener, err := net.Listen(\"unix\", o.UDS.Address)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create UDS listener: %v\", err)\n\t}\n\n\tif err := os.Chmod(o.UDS.Address, 0755); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to set permissions on UDS socket: %v\", err)\n\t}\n\n\tvar stopFunc StopFunc\n\tif o.UDS.Protocol == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\ttransport.RegisterGRPCServices(grpcServer, s)\n\t\tgo func() {\n\t\t\tif err := grpcServer.Serve(listener); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\t\tstopFunc = func() {\n\t\t\tgrpcServer.Stop()\n\t\t\tlistener.Close()\n\t\t}\n\t} else if o.UDS.Protocol == \"http\" {\n\t\tmux := http.NewServeMux()\n\t\ttransport.RegisterHTTPHandlers(mux, s)\n\t\thttpServer := &http.Server{Handler: mux}\n\t\tgo func() {\n\t\t\tif err := httpServer.Serve(listener); err != nil && err != http.ErrServerClosed {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\t\tstopFunc = func() {\n\t\t\thttpServer.Shutdown(ctx)\n\t\t\tlistener.Close()\n\t\t}\n\t} else {\n\t\treturn nil, fmt.Errorf(\"unsupported protocol for UDS server: %s\", o.UDS.Protocol)\n\t}\n\n\treturn stopFunc, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\ttcpAddr := fmt.Sprintf(\"%s:%d\", o.MTLS.BindAddress, o.MTLS.Port)\n\tlistener, err := net.Listen(\"tcp\", tcpAddr)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create mTLS TCP listener: %v\", err)\n\t}\n\n\ttlsConfig, err := transport.LoadMTLSServerConfig(o.MTLS.CertFile, o.MTLS.KeyFile, o.MTLS.ClientCAFile)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to load mTLS server config: %v\", err)\n\t}\n\n\tvar stopFunc StopFunc\n\tif o.MTLS.Protocol == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\ttransport.RegisterGRPCServices(grpcServer, s)\n\t\tgo func() {\n\t\t\tif err := grpcServer.Serve(&tlsListener{listener, tlsConfig}); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\t\tstopFunc = func() {\n\t\t\tgrpcServer.Stop()\n\t\t\tlistener.Close()\n\t\t}\n\t} else if o.MTLS.Protocol == \"http\" {\n\t\tmux := http.NewServeMux()\n\t\ttransport.RegisterHTTPHandlers(mux, s)\n\t\thttpServer := &http.Server{\n\t\t\tHandler:   mux,\n\t\t\tTLSConfig: tlsConfig,\n\t\t}\n\t\tgo func() {\n\t\t\tif err := httpServer.ServeTLS(listener, \"\", \"\"); err != nil && err != http.ErrServerClosed {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\t\tstopFunc = func() {\n\t\t\thttpServer.Shutdown(ctx)\n\t\t\tlistener.Close()\n\t\t}\n\t} else {\n\t\treturn nil, fmt.Errorf(\"unsupported protocol for mTLS server: %s\", o.MTLS.Protocol)\n\t}\n\n\treturn stopFunc, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/metrics\", transport.ServeMetrics)\n\tif o.Admin.EnableProfiling {\n\t\tmux.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tmux.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n\t\tmux.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\t\tmux.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\t\tmux.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\t}\n\n\tadminAddr := fmt.Sprintf(\"localhost:%d\", o.Admin.Port)\n\tserver := &http.Server{Addr: adminAddr, Handler: mux}\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/healthz\", transport.HealthCheckHandler(server.CheckLiveness))\n\tmux.HandleFunc(\"/ready\", transport.HealthCheckHandler(server.CheckReadiness))\n\n\thealthAddr := fmt.Sprintf(\"%s:%d\", o.Health.BindAddress, o.Health.Port)\n\thealthServer := &http.Server{Addr: healthAddr, Handler: mux}\n\tgo func() {\n\t\tif err := healthServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}\n\ntype tlsListener struct {\n\tnet.Listener\n\tconfig *tls.Config\n}\n\nfunc (l *tlsListener) Accept() (net.Conn, error) {\n\tconn, err := l.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tls.Server(conn, l.config), nil\n}"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The cache can be enabled/disabled globally, and cache hits/misses are logged when verbose mode is active. The function handles HTTP errors and returns the file content as a byte array.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput: \n- `[]byte` - The content of the file as a byte array\n- `error` - Any error encountered during the fetch operation (network error, HTTP status error, etc.)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tCacheEnabled = true\n\tVerboseMode  = false\n\tcache        = make(map[string][]byte)\n\tcacheMutex   sync.RWMutex{}\n)\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tif CacheEnabled {\n\t\tcacheMutex.RLock()\n\t\tif content, ok := cache[fileurl]; ok {\n\t\t\tif VerboseMode {\n\t\t\t\tlog.Printf(\"Cache hit for URL: %s\", fileurl)\n\t\t\t}\n\t\t\tcacheMutex.RUnlock()\n\t\t\treturn content, nil\n\t\t}\n\t\tcacheMutex.RUnlock()\n\t}\n\n\tif VerboseMode {\n\t\tlog.Printf(\"Fetching URL: %s\", fileurl)\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error fetching URL: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"unexpected status code %d while fetching URL: %s\", resp.StatusCode, fileurl)\n\t}\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading response body: %w\", err)\n\t}\n\n\tif CacheEnabled {\n\t\tcacheMutex.Lock()\n\t\tcache[fileurl] = content\n\t\tcacheMutex.Unlock()\n\t\tif VerboseMode {\n\t\t\tlog.Printf(\"Cached URL content: %s\", fileurl)\n\t\t}\n\t}\n\n\treturn content, nil\n}"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Implement a WorkWeiXin struct in Go that interacts with the WeChat Work API to send messages and manage authentication tokens.\n\nStruct Description: The WorkWeiXin struct represents a client for interacting with WeChat Work's API, handling authentication and message sending functionality.\n\nFields:\nCorpID: string - The corporation ID for WeChat Work authentication\nAgentID: string - The application agent ID for message sending\nCorpSecret: string - The corporation secret for authentication\nToken: string - The access token for API requests (may be empty initially)\n\nMethods:\ngetToken: () -> (string, error) - Retrieves an access token from WeChat Work API using CorpID and CorpSecret. Returns the token or an error.\nSend: (receivers []string, title string, content []byte, others ...string) -> error - Sends a markdown message to specified receivers via WeChat Work API. Handles token retrieval if needed. Returns nil on success or an error.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string `json:\"corpId\"`\n\tAgentID    string `json:\"agentId\"`\n\tCorpSecret string `json:\"corpSecret\"`\n\tToken      string `json:\"token\"`\n}\n\nfunc (w WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\n\treqBody := make(map[string]interface{})\n\treqBody[\"msgtype\"] = \"markdown\"\n\n\ttoUser := \"\"\n\tfor _, v := range receivers {\n\t\ttoUser = v + \"|\"\n\t}\n\treqBody[\"touser\"] = toUser\n\treqBody[\"agentid\"] = w.AgentID\n\tmarkdown := make(map[string]string)\n\tmarkdown[\"content\"] = string(content)\n\treqBody[\"markdown\"] = markdown\n\tdata, _ := json.Marshal(reqBody)\n\tbody := strings.NewReader(string(data))\n\treq, err := http.NewRequest(\n\t\thttp.MethodPost,\n\t\tfmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s\", w.Token),\n\t\tbody,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json;charset=utf-8\")\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn nil\n\t\t} else {\n\t\t\treturn errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}\n\nfunc (w WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn result[\"access_token\"].(string), nil\n\t\t} else {\n\t\t\treturn \"\", errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "right_result": "package workweixin\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string\n\tAgentID    string\n\tCorpSecret string\n\tToken      string\n}\n\ntype TokenResponse struct {\n\tErrcode     int    `json:\"errcode\"`\n\tErrmsg      string `json:\"errmsg\"`\n\tAccessToken string `json:\"access_token\"`\n\tExpiresIn   int    `json:\"expires_in\"`\n}\n\ntype MessageRequest struct {\n\tToUser  string `json:\"touser\"`\n\tMsgType string `json:\"msgtype\"`\n\tAgentID int    `json:\"agentid\"`\n\tMarkdown struct {\n\t\tContent string `json:\"content\"`\n\t} `json:\"markdown\"`\n\tSafe int `json:\"safe\"`\n}\n\nfunc (w *WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tvar tokenResp TokenResponse\n\terr = json.Unmarshal(body, &tokenResp)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif tokenResp.Errcode != 0 {\n\t\treturn \"\", fmt.Errorf(\"failed to get token: %s\", tokenResp.Errmsg)\n\t}\n\n\tw.Token = tokenResp.AccessToken\n\treturn w.Token, nil\n}\n\nfunc (w *WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\n\ttoUser := strings.Join(receivers, \"|\")\n\tmessageURL := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s\", w.Token)\n\n\tmsgReq := MessageRequest{\n\t\tToUser:  toUser,\n\t\tMsgType: \"markdown\",\n\t\tAgentID: int(w.AgentID[0]), // assuming AgentID is numeric\n\t\tSafe:    0,\n\t}\n\n\tcontentStr := fmt.Sprintf(\"### %s\\n\\n%s\", title, string(content))\n\tmsgReq.Markdown.Content = contentStr\n\n\tjsonBody, _ := json.Marshal(msgReq)\n\n\treq, err := http.NewRequest(\"POST\", messageURL, bytes.NewBuffer(jsonBody))\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{Timeout: time.Second * 10}\n\tresponse, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer response.Body.Close()\n\n\tif response.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", response.StatusCode)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Create a robust RabbitMQ producer in Go that handles connection management, channel initialization, and message publishing with automatic reconnection capabilities.\n\nStruct Description: The Session struct represents a RabbitMQ producer session that maintains connection state and provides message publishing functionality with automatic reconnection.\n\nFields:\n- name: string - The name of the queue to publish to\n- logger: *log.Logger - Logger for session events\n- connection: *amqp.Connection - RabbitMQ connection object\n- channel: *amqp.Channel - RabbitMQ channel object\n- done: chan bool - Channel to signal shutdown\n- notifyConnClose: chan *amqp.Error - Channel for connection close notifications\n- notifyChanClose: chan *amqp.Error - Channel for channel close notifications\n- notifyConfirm: chan amqp.Confirmation - Channel for publish confirmations\n- isReady: bool - Flag indicating if session is ready to publish\n\nMethods:\n- New(name string, addr string) -> *Session - Creates a new Session instance and starts connection management\n- handleReconnect(addr string) - Manages reconnection logic in a goroutine\n- connect(addr string) -> (*amqp.Connection, error) - Establishes connection to RabbitMQ server\n- handleReInit(conn *amqp.Connection) -> bool - Handles channel reinitialization after connection\n- init(conn *amqp.Connection) -> error - Initializes channel and declares queue\n- changeConnection(connection *amqp.Connection) - Updates connection and sets up close notifications\n- changeChannel(channel *amqp.Channel) - Updates channel and sets up close/confirm notifications\n- Push(data []byte) -> error - Safely publishes message with retry logic\n- UnsafePush(data []byte) -> error - Publishes message without safety checks (used internally)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n)\n\ntype Session struct {\n\tname            string\n\tlogger          *log.Logger\n\tconnection      *amqp.Connection\n\tchannel         *amqp.Channel\n\tdone            chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n}\n\nfunc New(name string, addr string) *Session {\n\tsession := Session{\n\t\tlogger: log.New(os.Stdout, \"\", log.LstdFlags),\n\t\tname:   name,\n\t\tdone:   make(chan bool),\n\t}\n\tgo session.handleReconnect(addr)\n\treturn &session\n}\n\nfunc (session *Session) handleReconnect(addr string) {\n\tfor {\n\t\tsession.isReady = false\n\t\tlog.Println(\"Attempting to connect\")\n\n\t\tconn, err := session.connect(addr)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to connect. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif done := session.handleReInit(conn); done {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (session *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsession.changeConnection(conn)\n\tlog.Println(\"Connected!\")\n\treturn conn, nil\n}\n\nfunc (session *Session) handleReInit(conn *amqp.Connection) bool {\n\tfor {\n\t\tsession.isReady = false\n\n\t\terr := session.init(conn)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to initialize channel. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn true\n\t\t\tcase <-time.After(2 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tselect {\n\t\tcase <-session.done:\n\t\t\treturn true\n\t\tcase <-session.notifyConnClose:\n\t\t\tlog.Println(\"Connection closed. Reconnecting...\")\n\t\t\treturn false\n\t\tcase <-session.notifyChanClose:\n\t\t\tlog.Println(\"Channel closed. Re-running init...\")\n\t\t}\n\t}\n}\n\nfunc (session *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ch.Confirm(false)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = ch.QueueDeclare(\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsession.changeChannel(ch)\n\tsession.isReady = true\n\tlog.Println(\"Setup!\")\n\n\treturn nil\n}\n\nfunc (session *Session) changeConnection(connection *amqp.Connection) {\n\tsession.connection = connection\n\tsession.notifyConnClose = make(chan *amqp.Error)\n\tsession.connection.NotifyClose(session.notifyConnClose)\n}\n\nfunc (session *Session) changeChannel(channel *amqp.Channel) {\n\tsession.channel = channel\n\tsession.notifyChanClose = make(chan *amqp.Error)\n\tsession.notifyConfirm = make(chan amqp.Confirmation, 1)\n\tsession.channel.NotifyClose(session.notifyChanClose)\n\tsession.channel.NotifyPublish(session.notifyConfirm)\n}\n\nfunc (session *Session) Push(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"failed to push: not connected\")\n\t}\n\tfor {\n\t\terr := session.UnsafePush(data)\n\t\tif err != nil {\n\t\t\tsession.logger.Println(\"Push failed. Retrying...\")\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn errors.New(\"session is shutting down\")\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tselect {\n\t\tcase confirm := <-session.notifyConfirm:\n\t\t\tif confirm.Ack {\n\t\t\t\tsession.logger.Println(\"Push confirmed!\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\tcase <-time.After(5 * time.Second):\n\t\t}\n\t\tsession.logger.Println(\"Push didn't confirm. Retrying...\")\n\t}\n}\n\nfunc (session *Session) UnsafePush(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"not connected to a server\")\n\t}\n\treturn session.channel.Publish(\n\t\t\"\",\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        data,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Session struct {\n\tname             string\n\tlogger           *log.Logger\n\tconnection       *amqp.Connection\n\tchannel          *amqp.Channel\n\tdone             chan bool\n\tnotifyConnClose  chan *amqp.Error\n\tnotifyChanClose  chan *amqp.Error\n\tnotifyConfirm    chan amqp.Confirmation\n\tisReady          bool\n\tmutex            sync.RWMutex\n\treconnectTimeout time.Duration\n)\n\nfunc New(name string, addr string) *Session {\n\ts := &Session{\n\t\tname:             name,\n\t\tlogger:           log.New(log.Writer(), \"RabbitMQ-Session \", log.Flags()),\n\t\tdone:             make(chan bool),\n\t\tnotifyConnClose:  make(chan *amqp.Error, 1),\n\t\tnotifyChanClose:  make(chan *amqp.Error, 1),\n\t\tnotifyConfirm:    make(chan amqp.Confirmation, 1),\n\t\tisReady:          false,\n\t\treconnectTimeout: 5 * time.Second,\n\t}\n\n\tgo s.handleReconnect(addr)\n\treturn s\n}\n\nfunc (s *Session) handleReconnect(addr string) {\n\tfor {\n\t\tif conn, err := s.connect(addr); err == nil {\n\t\t\tif s.handleReInit(conn) {\n\t\t\t\ts.logger.Println(\"Successfully reconnected to RabbitMQ\")\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\ts.logger.Printf(\"Reconnecting to RabbitMQ in %v\\n\", s.reconnectTimeout)\n\t\tselect {\n\t\tcase <-s.done:\n\t\t\treturn\n\t\tcase <-time.After(s.reconnectTimeout):\n\t\t}\n\t}\n}\n\nfunc (s *Session) connect(addr string) (*amqp.Connection, error) {\n\tvar err error\n\tfor i := 0; i < 3; i++ {\n\t\tconn, err := amqp.Dial(addr)\n\t\tif err == nil {\n\t\t\treturn conn, nil\n\t\t}\n\t\ttime.Sleep(2 * time.Second)\n\t}\n\treturn nil, err\n}\n\nfunc (s *Session) handleReInit(conn *amqp.Connection) bool {\n\ts.mutex.Lock()\n\tdefer s.mutex.Unlock()\n\n\tif conn == nil {\n\t\treturn false\n\t}\n\n\tif err := s.init(conn); err != nil {\n\t\ts.logger.Printf(\"Failed to initialize channel: %v\\n\", err)\n\t\treturn false\n\t}\n\n\ts.changeConnection(conn)\n\treturn true\n}\n\nfunc (s *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := ch.Confirm(false); err != nil {\n\t\tch.Close()\n\t\treturn err\n\t}\n\n\t_, err = ch.QueueDeclare(\n\t\ts.name,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tch.Close()\n\t\treturn err\n\t}\n\n\ts.changeChannel(ch)\n\ts.isReady = true\n\treturn nil\n}\n\nfunc (s *Session) changeConnection(connection *amqp.Connection) {\n\toldConn := s.connection\n\ts.connection = connection\n\tif oldConn != nil {\n\t\toldConn.Close()\n\t}\n\ts.notifyConnClose = make(chan *amqp.Error, 1)\n\tconnection.NotifyClose(s.notifyConnClose)\n}\n\nfunc (s *Session) changeChannel(channel *amqp.Channel) {\n\toldChan := s.channel\n\ts.channel = channel\n\tif oldChan != nil {\n\t\toldChan.Close()\n\t}\n\ts.notifyChanClose = make(chan *amqp.Error, 1)\n\ts.notifyConfirm = make(chan amqp.Confirmation, 1)\n\tchannel.NotifyClose(s.notifyChanClose)\n\tchannel.NotifyPublish(s.notifyConfirm)\n}\n\nfunc (s *Session) Push(data []byte) error {\n\ts.mutex.RLock()\n\tisReady := s.isReady\n\ts.mutex.RUnlock()\n\n\tif isReady {\n\t\treturn s.UnsafePush(data)\n\t}\n\n\treturn amqp.ErrClosed\n}\n\nfunc (s *Session) UnsafePush(data []byte) error {\n\ts.mutex.RLock()\n\tchannel := s.channel\n\ts.mutex.RUnlock()\n\n\tif channel == nil {\n\t\treturn amqp.ErrClosed\n\t}\n\n\terr := channel.Publish(\n\t\t\"\",\n\t\ts.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType:  \"application/json\",\n\t\t\tBody:         data,\n\t\t\tDeliveryMode: amqp.Persistent,\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Wait for confirmation or timeout\n\tselect {\n\tcase confirm := <-s.notifyConfirm:\n\t\tif confirm.Ack {\n\t\t\treturn nil\n\t\t}\n\t\treturn amqp.ErrClosed\n\tcase <-time.After(5 * time.Second):\n\t\treturn amqp.ErrTimeout\n\t}\n}"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Implement a RabbitMQ client in Go that handles connection management, queue declaration, and message publishing with retry logic for reliability.\n\nStruct Description: RabbitClient is a struct that encapsulates the functionality for interacting with a RabbitMQ server, including establishing connections, declaring queues, and publishing messages with automatic reconnection attempts on failures.\n\nFields:\n- url: string - The connection URL for the RabbitMQ server\n- queueName: string - The name of the queue to interact with\n- connection: *amqp.Connection - The active RabbitMQ connection\n- channel: *amqp.Channel - The channel for communication with RabbitMQ\n\nMethods:\n- Connect() -> void - Establishes connection to RabbitMQ server, creates a channel, and declares a queue with TTL and priority settings. Implements retry logic on failures.\n- PublishTgMessage(messageBag MessageBag) -> void - Publishes a message to the declared queue after JSON serialization. Implements retry logic on failures and handles reconnection.\n- Close() -> void - Properly closes the channel and connection to RabbitMQ if they exist.\n- NewRabbitClient(url string, queueName string) -> *RabbitClient - Constructor function that initializes and returns a new RabbitClient instance with established connection.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"time\"\n)\n\ntype RabbitClient struct {\n\turl\t\t\tstring\n\tqueueName\tstring\n\tconnection\t*amqp.Connection\n\tchannel\t\t*amqp.Channel\n}\n\nfunc (rc *RabbitClient) Connect() {\n\tfor {\n\t\tvar err error\n\n\t\trc.connection, err = amqp.Dial(rc.url)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't connect to rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\trc.channel, err = rc.connection.Channel()\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't create channel (connect was ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\targs := make(amqp.Table)\n\t\targs[\"x-message-ttl\"] = int32(1000 * 60 * 60 * 24 * 10)\n\t\targs[\"x-max-priority\"] = int32(255)\n\n\t\t_, err = rc.channel.QueueDeclare(\n\t\t\trc.queueName,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\targs,\n\t\t)\n\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't declare queue (connect, channel were ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tfor {\n\t\tbody, err := json.Marshal(messageBag)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error marshaling a message.\")\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Printf(\"Publishing %+v ...\\n\", string(body))\n\n\t\terr = rc.channel.Publish(\n\t\t\t\"\",\n\t\t\trc.queueName,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tamqp.Publishing{\n\t\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\t\tContentType: \"text/plain\",\n\t\t\t\tBody: body,\n\t\t\t\tPriority: messageBag.Priority,\n\t\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't publish text '%s', will retry in 1 sec: %s\", string(body), err)\n\t\t\trc.Close()\n\t\t\trc.Connect()\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) Close() {\n\tif rc.channel != nil {\n\t\trc.channel.Close()\n\t}\n\tif rc.connection != nil {\n\t\trc.connection.Close()\n\t}\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\trabbit := &RabbitClient{\n\t\turl: url,\n\t\tqueueName: queueName,\n\t}\n\trabbit.Connect()\n\tlog.Println(\"Successfully connected to RabbitMQ\")\n\treturn rabbit\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\nconst (\n\tmaxReconnectAttempts = 3\n\treconnectDelay       = 5 * time.Second\n\tqueueTTL             = 86400000 // 24 hours in milliseconds\n)\n\ntype MessageBag struct {\n\tID      string `json:\"id\"`\n\tPayload string `json:\"payload\"`\n}\n\ntype RabbitClient struct {\n\turl       string\n\tqueueName string\n\tconn      *amqp.Connection\n\tchannel   *amqp.Channel\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\tclient := &RabbitClient{\n\t\turl:       url,\n\t\tqueueName: queueName,\n\t}\n\tclient.Connect()\n\treturn client\n}\n\nfunc (c *RabbitClient) Connect() {\n\tvar err error\n\tfor attempt := 1; attempt <= maxReconnectAttempts; attempt++ {\n\t\tc.conn, err = amqp.Dial(c.url)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Failed to connect to RabbitMQ (attempt %d): %v\", attempt, err)\n\t\tif attempt < maxReconnectAttempts {\n\t\t\ttime.Sleep(reconnectDelay)\n\t\t}\n\t}\n\n\tif c.conn == nil {\n\t\tlog.Fatalf(\"Could not connect to RabbitMQ after %d attempts\", maxReconnectAttempts)\n\t}\n\n\tc.channel, err = c.conn.Channel()\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to open a channel: %v\", err)\n\t}\n\n\targs := make(amqp.Table)\n\targs[\"x-message-ttl\"] = queueTTL\n\targs[\"x-max-priority\"] = 10\n\n\t_, err = c.channel.QueueDeclare(\n\t\tc.queueName,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\targs,\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to declare queue: %v\", err)\n\t}\n}\n\nfunc (c *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tbody, err := json.Marshal(messageBag)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to marshal message: %v\", err)\n\t\treturn\n\t}\n\n\terr = c.channel.Publish(\n\t\t\"\",\n\t\tc.queueName,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"application/json\",\n\t\t\tBody:        body,\n\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\tPriority:    5,\n\t\t},\n\t)\n\tif err == nil {\n\t\treturn\n\t}\n\n\tlog.Printf(\"Failed to publish message: %v. Attempting reconnection...\", err)\n\tc.reconnect()\n\n\terr = c.channel.Publish(\n\t\t\"\",\n\t\tc.queueName,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"application/json\",\n\t\t\tBody:        body,\n\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\tPriority:    5,\n\t\t},\n\t)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to publish message after reconnection: %v\", err)\n\t}\n}\n\nfunc (c *RabbitClient) reconnect() {\n\tc.Close()\n\n\tvar err error\n\tfor attempt := 1; attempt <= maxReconnectAttempts; attempt++ {\n\t\tc.conn, err = amqp.Dial(c.url)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Reconnecting to RabbitMQ (attempt %d): %v\", attempt, err)\n\t\tif attempt < maxReconnectAttempts {\n\t\t\ttime.Sleep(reconnectDelay)\n\t\t}\n\t}\n\n\tif c.conn == nil {\n\t\tlog.Fatalf(\"Could not reconnect to RabbitMQ after %d attempts\", maxReconnectAttempts)\n\t}\n\n\tc.channel, err = c.conn.Channel()\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create new channel: %v\", err)\n\t}\n\n\targs := make(amqp.Table)\n\targs[\"x-message-ttl\"] = queueTTL\n\targs[\"x-max-priority\"] = 10\n\n\t_, err = c.channel.QueueDeclare(\n\t\tc.queueName,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\targs,\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to redeclare queue: %v\", err)\n\t}\n}\n\nfunc (c *RabbitClient) Close() {\n\tif c.channel != nil {\n\t\tif err := c.channel.Close(); err != nil {\n\t\t\tlog.Printf(\"Error closing channel: %v\", err)\n\t\t}\n\t}\n\tif c.conn != nil {\n\t\tif err := c.conn.Close(); err != nil {\n\t\t\tlog.Printf(\"Error closing connection: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Implement a thread-safe RabbitMQ producer in Go that handles connection management, queue/exchange declaration, and message publishing.\n\nStruct Description: AMQPConn represents a RabbitMQ connection with built-in connection pooling and thread safety. It manages the AMQP connection, channel, and provides message sending capability.\n\nFields:\n\nmu: [sync.Mutex] - Mutex for thread-safe operations\nep: [Endpoint] - Configuration endpoint containing AMQP settings\nconn: [*amqp.Connection] - Underlying AMQP connection\nchannel: [*amqp.Channel] - AMQP channel for message operations\nex: [bool] - Flag indicating if connection is expired\nt: [time.Time] - Timestamp of last operation\n\nMethods:\n\nSend: [Name](msg string) -> [error] - Publishes a message to RabbitMQ. Handles connection establishment, channel creation, and queue/exchange declaration if not already done. Returns error if operation fails.\n[Input Parameters]:\n- msg: string - The message to be published\n[Return Type]:\n- error - Returns nil on success, error on failure",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc (conn *AMQPConn) Send(msg string) error {\n\tconn.mu.Lock()\n\tdefer conn.mu.Unlock()\n\n\tif conn.ex {\n\t\treturn errExpired\n\t}\n\tconn.t = time.Now()\n\n\tif conn.conn == nil {\n\t\tprefix := \"amqp://\"\n\t\tif conn.ep.AMQP.SSL {\n\t\t\tprefix = \"amqps://\"\n\t\t}\n\n\t\tvar cfg amqp.Config\n\t\tcfg.Dial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(network, addr, time.Second)\n\t\t}\n\t\tc, err := amqp.DialConfig(fmt.Sprintf(\"%s%s\", prefix, conn.ep.AMQP.URI), cfg)\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tchannel, err := c.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := channel.ExchangeDeclare(\n\t\t\tconn.ep.AMQP.QueueName,\n\t\t\tconn.ep.AMQP.Type,\n\t\t\tconn.ep.AMQP.Durable,\n\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\tconn.ep.AMQP.Internal,\n\t\t\tconn.ep.AMQP.NoWait,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif conn.ep.AMQP.Type != \"topic\" {\n\t\t\tif _, err := channel.QueueDeclare(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.Durable,\n\t\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\t\tfalse,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err := channel.QueueBind(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.RouteKey,\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tconn.conn = c\n\t\tconn.channel = channel\n\t}\n\n\treturn conn.channel.Publish(\n\t\tconn.ep.AMQP.QueueName,\n\t\tconn.ep.AMQP.RouteKey,\n\t\tconn.ep.AMQP.Mandatory,\n\t\tconn.ep.AMQP.Immediate,\n\t\tamqp.Publishing{\n\t\t\tHeaders:         amqp.Table{},\n\t\t\tContentType:     \"application/json\",\n\t\t\tContentEncoding: \"\",\n\t\t\tBody:            []byte(msg),\n\t\t\tDeliveryMode:    conn.ep.AMQP.DeliveryMode,\n\t\t\tPriority:        conn.ep.AMQP.Priority,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package amqp\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Endpoint struct {\n\tAmqpURI          string\n\tExchange         string\n\tExchangeType     string\n\tQueue            string\n\tBindingKey       string\n\tContentType      string\n\tPersistent       bool\n\tDeliveryMode     uint8\n\tArgs             amqp.Table\n\tPoolSize         int\n\tReconnectTimeout time.Duration\n}\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc NewAMQPConn(ep Endpoint) *AMQPConn {\n\treturn &AMQPConn{\n\t\tep: ep,\n\t\tex: true,\n\t}\n}\n\nfunc (c *AMQPConn) connect() error {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif !c.ex && c.conn != nil && !c.conn.IsClosed() {\n\t\treturn nil\n\t}\n\n\tvar err error\n\tc.conn, err = amqp.Dial(c.ep.AmqpURI)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.channel, err = c.conn.Channel()\n\tif err != nil {\n\t\tc.conn.Close()\n\t\treturn err\n\t}\n\n\terr = c.channel.ExchangeDeclare(\n\t\tc.ep.Exchange,\n\t\tc.ep.ExchangeType,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tc.channel.Close()\n\t\tc.conn.Close()\n\t\treturn err\n\t}\n\n\t_, err = c.channel.QueueDeclare(\n\t\tc.ep.Queue,\n\t\tc.ep.Persistent,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tc.channel.Close()\n\t\tc.conn.Close()\n\t\treturn err\n\t}\n\n\terr = c.channel.QueueBind(\n\t\tc.ep.Queue,\n\t\tc.ep.BindingKey,\n\t\tc.ep.Exchange,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tc.channel.Close()\n\t\tc.conn.Close()\n\t\treturn err\n\t}\n\n\tc.ex = false\n\tc.t = time.Now()\n\treturn nil\n}\n\nfunc (c *AMQPConn) Send(msg string) error {\n\tc.mu.Lock()\n\tif c.ex || c.conn == nil || c.conn.IsClosed() || c.channel == nil || c.channel.IsClosed() {\n\t\tc.mu.Unlock()\n\t\tif err := c.connect(); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tc.mu.Unlock()\n\t}\n\n\terr := c.channel.Publish(\n\t\tc.ep.Exchange,\n\t\tc.ep.BindingKey,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType:  c.ep.ContentType,\n\t\t\tBody:         []byte(msg),\n\t\t\tDeliveryMode: c.ep.DeliveryMode,\n\t\t\tHeaders:      c.ep.Args,\n\t\t},\n\t)\n\tif err != nil {\n\t\tc.mu.Lock()\n\t\tc.ex = true\n\t\tc.mu.Unlock()\n\t\treturn err\n\t}\n\n\tc.mu.Lock()\n\tc.t = time.Now()\n\tc.mu.Unlock()\n\treturn nil\n}"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that handles OAuth-based headless authentication by establishing a connection to a server, receiving authentication instructions, and returning a JWT token upon successful authentication.\n\nFunction Description: The `ssoLogin` function establishes a WebSocket connection to a specified endpoint for headless OAuth authentication. It listens for server messages, displays authentication instructions to the user, and waits for the JWT token to be returned. The function handles connection closure and interrupts gracefully.\n\nInput: \n- `endpoint` (string): The URL endpoint of the authentication server (e.g., \"https://example.com\")\n\nOutput: \n- `string`: The JWT authentication token received from the server after successful authentication. Returns an empty string if authentication fails or is interrupted.\n\nNote: The function includes proper error handling and connection cleanup, and it displays the authentication URL to the user when received from the server.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/gravitl/netmaker/logger\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tvar (\n\t\tauthToken string\n\t\tinterrupt = make(chan os.Signal, 1)\n\t\turl, _    = url.Parse(endpoint)\n\t\tsocketURL = fmt.Sprintf(\"wss://%s/api/oauth/headless\", url.Host)\n\t)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tconn, _, err := websocket.DefaultDialer.Dial(socketURL, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"error connecting to endpoint \", socketURL, err.Error())\n\t}\n\tdefer conn.Close()\n\t_, msg, err := conn.ReadMessage()\n\tif err != nil {\n\t\tlog.Fatal(\"error reading from server: \", err.Error())\n\t}\n\tfmt.Printf(\"Please visit:\\n %s \\n to authenticate\\n\", string(msg))\n\tdone := make(chan struct{})\n\tdefer close(done)\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif msgType < 0 {\n\t\t\t\t\tdone <- struct{}{}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(err.Error(), \"normal\") {\n\t\t\t\t\tlog.Fatal(\"read error: \", err.Error())\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif msgType == websocket.CloseMessage {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif strings.Contains(string(msg), \"JWT: \") {\n\t\t\t\tauthToken = strings.TrimPrefix(string(msg), \"JWT: \")\n\t\t\t} else {\n\t\t\t\tlogger.Log(0, \"Message from server:\", string(msg))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn authToken\n\t\tcase <-interrupt:\n\t\t\terr := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlogger.Log(0, \"write close:\", err.Error())\n\t\t\t}\n\t\t\treturn authToken\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar jwtToken string\n\nfunc ssoLogin(endpoint string) string {\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)\n\n\twsURL := \"wss://\" + endpoint\n\tconn, _, err := websocket.DefaultDialer.Dial(wsURL, nil)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"WebSocket connection error: %v\\n\", err)\n\t\treturn \"\"\n\t}\n\tdefer conn.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Read error: %v\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmsgStr := string(message)\n\t\t\tif msgStr == \"auth_complete\" {\n\t\t\t\tbreak\n\t\t\t} else if len(msgStr) > 0 {\n\t\t\t\tfmt.Println(\"Authentication instruction:\", msgStr)\n\t\t\t}\n\t\t}\n\t}()\n\n\tselect {\n\tcase <-interrupt:\n\t\tfmt.Println(\"\\nInterrupt signal received. Closing connection...\")\n\t\tconn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t<-done\n\t\treturn \"\"\n\tcase <-done:\n\t\t// Authentication completed, JWT token should be available\n\t\treturn jwtToken\n\t}\n}"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)\n\n---\n\nTask Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/ghttp\"\n\t\"github.com/gogf/gf/v2/test/gtest\"\n\t\"github.com/gogf/gf/v2/util/guid\"\n)\nfunc Test_WebSocket(t *testing.T) {\n\ts := g.Server(guid.S())\n\ts.BindHandler(\"/ws\", func(r *ghttp.Request) {\n\t\tws, err := r.WebSocket()\n\t\tif err != nil {\n\t\t\tr.Exit()\n\t\t}\n\t\tfor {\n\t\t\tmsgType, msg, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = ws.WriteMessage(msgType, msg); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\ts.SetDumpRouterMap(false)\n\ts.Start()\n\tdefer s.Shutdown()\n\n\ttime.Sleep(100 * time.Millisecond)\n\tgtest.C(t, func(t *gtest.T) {\n\t\tconn, _, err := websocket.DefaultDialer.Dial(fmt.Sprintf(\n\t\t\t\"ws://127.0.0.1:%d/ws\", s.GetListenedPort(),\n\t\t), nil)\n\t\tt.AssertNil(err)\n\t\tdefer conn.Close()\n\n\t\tmsg := []byte(\"hello\")\n\t\terr = conn.WriteMessage(websocket.TextMessage, msg)\n\t\tt.AssertNil(err)\n\n\t\tmt, data, err := conn.ReadMessage()\n\t\tt.AssertNil(err)\n\t\tt.Assert(mt, websocket.TextMessage)\n\t\tt.Assert(data, msg)\n\t})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n}\n\nfunc TestWebSocketClient(t *testing.T, serverPort int) {\n\turl := fmt.Sprintf(\"ws://localhost:%d/ws\", serverPort)\n\tconn, _, err := websocket.DefaultDialer.Dial(url, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect to WebSocket server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tmessage := []byte(\"Hello, WebSocket!\")\n\terr = conn.WriteMessage(websocket.TextMessage, message)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to send message: %v\", err)\n\t}\n\n\t_, response, err := conn.ReadMessage()\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to read response: %v\", err)\n\t}\n\n\tif string(response) != string(message) {\n\t\tt.Errorf(\"Expected response '%s', got '%s'\", message, response)\n\t}\n}"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a WebSocket client in Go that can establish a connection to a server, handle bidirectional communication (sending and receiving messages), and properly manage connection lifecycle.\n\nStruct Description: The Listener struct represents a WebSocket client that connects to a specified URL, handles message processing with optional schema transformation, and manages concurrent read/write operations.\n\nFields:\n- URL: *url.URL - The WebSocket server URL to connect to\n- Token: string - Authentication token to be included in the connection URL\n- SchemaFunc: func([]byte) (io.Reader, error) - Optional function to transform incoming messages\n- Out: io.Writer - Output writer for received messages\n- InCh: <-chan []byte - Input channel for sending messages to the server\n\nMethods:\n- NewListener: (url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) -> *Listener - Creates a new Listener instance with the specified configuration\n- Listen: (ctx context.Context) -> error - Establishes WebSocket connection, handles concurrent message reading/writing, and manages connection lifecycle until context cancellation or normal closure",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\ntype Listener struct {\n\tURL        *url.URL\n\tToken      string\n\tSchemaFunc func([]byte) (io.Reader, error)\n\tOut        io.Writer\n\tInCh       <-chan []byte\n}\n\nfunc NewListener(url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) *Listener {\n\treturn &Listener{\n\t\tURL:        url,\n\t\tToken:      token,\n\t\tSchemaFunc: schemaFunc,\n\t\tOut:        out,\n\t\tInCh:       inCh,\n\t}\n}\n\nfunc (l *Listener) Listen(ctx context.Context) error {\n\tif l.Token != \"\" {\n\t\tparams := l.URL.Query()\n\t\tparams.Set(\"token\", l.Token)\n\t\tl.URL.RawQuery = params.Encode()\n\t}\n\n\tc, _, err := websocket.DefaultDialer.Dial(l.URL.String(), nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating websocket connection: %w\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\tgrp, ctx := errgroup.WithContext(ctx)\n\tgrp.Go(func() error {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\treturn fmt.Errorf(\"error reading from websocket: %w\", err)\n\t\t\t}\n\n\t\t\tvar r io.Reader\n\t\t\tif l.SchemaFunc != nil {\n\t\t\t\tr, err = l.SchemaFunc(message)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr = bytes.NewReader(message)\n\t\t\t}\n\n\t\t\tio.Copy(l.Out, r)\n\t\t}\n\t})\n\n\tgrp.Go(func() error {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase data := <-l.InCh:\n\t\t\t\tif err := c.WriteMessage(websocket.TextMessage, data); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"error writing to websocket: %w\", err)\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t\tif err := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\")); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"error writing close message: %w\", err)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\tcase <-done:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t})\n\tif err := grp.Wait(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/url\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Listener struct {\n\tURL       *url.URL\n\tToken     string\n\tSchemaFunc func([]byte) (io.Reader, error)\n\tOut       io.Writer\n\tInCh      <-chan []byte\n}\n\nfunc NewListener(u *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) *Listener {\n\treturn &Listener{\n\t\tURL:        u,\n\t\tToken:      token,\n\t\tSchemaFunc: schemaFunc,\n\t\tOut:        out,\n\t\tInCh:       inCh,\n\t}\n}\n\nfunc (l *Listener) Listen(ctx context.Context) error {\n\tu := l.URL.String()\n\tif l.Token != \"\" {\n\t\tvalues := u.Query()\n\t\tvalues.Set(\"token\", l.Token)\n\t\tu = fmt.Sprintf(\"%s?%s\", l.URL.Scheme+\"://\"+l.URL.Host+l.URL.Path, values.Encode())\n\t}\n\n\tconn, _, err := websocket.DefaultDialer.Dial(u, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tvar wg sync.WaitGroup\n\terrChan := make(chan error, 2)\n\n\t// Reader goroutine\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\terrChan <- err\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif l.SchemaFunc != nil {\n\t\t\t\treader, transformErr := l.SchemaFunc(message)\n\t\t\t\tif transformErr != nil {\n\t\t\t\t\terrChan <- transformErr\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif reader != nil {\n\t\t\t\t\tif _, copyErr := io.Copy(l.Out, reader); copyErr != nil {\n\t\t\t\t\t\terrChan <- copyErr\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, copyErr := l.Out.Write(message); copyErr != nil {\n\t\t\t\t\terrChan <- copyErr\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Writer goroutine\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg, ok := <-l.InCh:\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\t\t\t\terrChan <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Wait for errors or context cancellation\n\tselect {\n\tcase err := <-errChan:\n\t\treturn err\n\tcase <-ctx.Done():\n\t\treturn conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t}\n\n\twg.Wait()\n\treturn nil\n}"
  },
  {
    "Task_id": 342,
    "Instruction": "Task Description: Create a WebSocket client in Go that connects to a server, sends periodic messages, receives messages from the server, and handles graceful shutdown upon interruption.\n\nFunction Description: The main function establishes a WebSocket connection to a specified server, sets up message reading and writing routines, and handles interrupt signals for graceful termination. It continuously sends timestamp messages at regular intervals while concurrently listening for incoming messages from the server.\n\nInput:\n- Command line argument (flag): addr - string - WebSocket server address (e.g., \"localhost:8080\")\n- Implicit input: System interrupt signal (SIGINT)\n\nOutput:\n- Console logs: Connection status, received messages, and error messages\n- WebSocket messages: Sends timestamp messages to server and receives messages from server\n- Return value: None (program runs until interrupted)\n\nNote: The function uses goroutines for concurrent operations and channels for synchronization and interrupt handling.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tu := url.URL{Scheme: \"ws\", Host: *addr, Path: \"/echo\"}\n\tlog.Printf(\"connecting to %s\", u.String())\n\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar addr = flag.String(\"addr\", \"localhost:8080\", \"WebSocket server address\")\n\nfunc main() {\n\tflag.Parse()\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tu := \"ws://\" + *addr + \"/ws\"\n\tc, _, err := websocket.DefaultDialer.Dial(u, nil)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"dial error: %s\\n\", err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"read error: %s\\n\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %s\\n\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(5 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tmsg := fmt.Sprintf(\"Timestamp: %v\", time.Now())\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(msg))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"write error: %s\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Sent: %s\\n\", msg)\n\t\tcase <-interrupt:\n\t\t\tfmt.Println(\"Interrupt signal received. Closing connection...\")\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"close error: %s\\n\", err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: The task involves testing a WebSocket connection to a runtime service, verifying the connection establishment, message exchange, and validating the received runtime information against expected values.\n\nFunction Description: The function `TestRuntimeGetRuntime` tests the WebSocket-based communication with a runtime service. It establishes a connection, sends a request message, receives and parses the response, then validates the response contents including protocol, version, capabilities, and runtime ID.\n\nInput: \n- None (This is a test function that takes a testing.T pointer as per Go testing conventions)\n\nOutput: \n- None (The function reports errors through the testing.T parameter if any assertions fail)\n- Side effect: The test will pass if all validations succeed or fail with appropriate error messages if any checks don't match expected values",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tensureRuntimeStarted()\n\tws, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:13014/\", nil)\n\tdefer ws.Close()\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif err = sendJSONE(ws, &Message{\"runtime\", \"getruntime\", nil}); err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tvar msg runtimeMessage\n\tvar bytes []byte\n\tif _, bytes, err = ws.ReadMessage(); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif err = json.Unmarshal(bytes, &msg); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif msg.Protocol != \"runtime\" || msg.Command != \"runtime\" {\n\t\tt.Errorf(\"Invalid protocol (%s) or command (%s)\", msg.Protocol, msg.Command)\n\t\treturn\n\t}\n\tres := msg.Payload\n\tif res.Type != \"goflow\" {\n\t\tt.Errorf(\"Invalid protocol type: %s\\n\", res.Type)\n\t}\n\tif res.Version != \"0.4\" {\n\t\tt.Errorf(\"Invalid protocol version: %s\\n\", res.Version)\n\t}\n\tif len(res.Capabilities) != 5 {\n\t\tt.Errorf(\"Invalid number of supported capabilities: %v\\n\", res.Capabilities)\n\t}\n\tif res.Id == \"\" {\n\t\tt.Error(\"Runtime Id is empty\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package runtime\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nconst (\n\twsURL         = \"ws://localhost:8080/runtime\"\n\texpectedProto = \"v1\"\n\texpectedVer   = \"1.0.0\"\n\texpectedCap   = \"basic\"\n\texpectedID    = \"test-runtime-id\"\n)\n\ntype RuntimeInfo struct {\n\tProtocol     string `json:\"protocol\"`\n\tVersion      string `json:\"version\"`\n\tCapabilities string `json:\"capabilities\"`\n\tID           string `json:\"id\"`\n}\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tconn, _, err := websocket.DefaultDialer.Dial(wsURL, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tmsg := []byte(`{\"action\": \"get_runtime\"}`)\n\tif err := conn.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\tt.Fatalf(\"Failed to send message: %v\", err)\n\t}\n\n\t_, respMsg, err := conn.ReadMessage()\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to read response: %v\", err)\n\t}\n\n\tvar runtimeInfo RuntimeInfo\n\tif err := json.Unmarshal(respMsg, &runtimeInfo); err != nil {\n\t\tt.Fatalf(\"Failed to parse JSON: %v\", err)\n\t}\n\n\tif runtimeInfo.Protocol != expectedProto {\n\t\tt.Errorf(\"Expected protocol %s, got %s\", expectedProto, runtimeInfo.Protocol)\n\t}\n\n\tif runtimeInfo.Version != expectedVer {\n\t\tt.Errorf(\"Expected version %s, got %s\", expectedVer, runtimeInfo.Version)\n\t}\n\n\tif runtimeInfo.Capabilities != expectedCap {\n\t\tt.Errorf(\"Expected capabilities %s, got %s\", expectedCap, runtimeInfo.Capabilities)\n\t}\n\n\tif runtimeInfo.ID != expectedID {\n\t\tt.Errorf(\"Expected ID %s, got %s\", expectedID, runtimeInfo.ID)\n\t}\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that handles specific command requests through a web interface. The server should process incoming commands and forward them to a command parser.\n\nFunction Description: The `cmdHandle` function is an HTTP handler that processes POST requests containing a \"cmd\" parameter. It extracts the command and passes it to a command parser. The `InitWeb` function initializes the web server, registers the handler, and starts listening on a specified URL.\n\nInput:\n- For `cmdHandle`:\n  - `w http.ResponseWriter` - Used to write the HTTP response\n  - `r *http.Request` - Contains the incoming HTTP request\n- For `InitWeb`:\n  - None (uses package-level variable `world.Web_Url` for server address)\n\nOutput:\n- For `cmdHandle`:\n  - None (writes response directly to `http.ResponseWriter`)\n- For `InitWeb`:\n  - None (starts server as a side effect, may log errors)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\tcmd := r.FormValue(\"cmd\")\n\tif cmd != \"\" {\n\t\tcm.ParseConsole(g_Cmd, (cmd))\n\t}\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/gm\", cmdHandle)\n\terr := http.ListenAndServe(world.Web_Url, nil)\n\tif err != nil {\n\t\tbase.LOG.Println(\"World Web Server : \", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar Web_Url string = \":8080\"\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"POST\" {\n\t\tcmd := r.FormValue(\"cmd\")\n\t\tif cmd != \"\" {\n\t\t\tparts := strings.Fields(cmd)\n\t\t\tif len(parts) > 0 {\n\t\t\t\tcommandParser(parts[0], parts[1:])\n\t\t\t\tfmt.Fprintf(w, \"Command received: %s\\n\", cmd)\n\t\t\t} else {\n\t\t\t\thttp.Error(w, \"Invalid command format\", http.StatusBadRequest)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(w, \"Missing 'cmd' parameter\", http.StatusBadRequest)\n\t\t}\n\t} else {\n\t\thttp.Error(w, \"Only POST method is allowed\", http.StatusMethodNotAllowed)\n\t}\n}\n\nfunc commandParser(command string, args []string) {\n\tfmt.Printf(\"Parsing command: %s with arguments: %v\\n\", command, args)\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/cmd\", cmdHandle)\n\tfmt.Printf(\"Starting server on %s\\n\", Web_Url)\n\tif err := http.ListenAndServe(Web_Url, nil); err != nil {\n\t\tfmt.Printf(\"Error starting server: %v\\n\", err)\n\t}\n}\n\nfunc main() {\n\tInitWeb()\n}"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Implement a WebSocket server for RDP (Remote Desktop Protocol) connections using the Gorilla WebSocket library in Go. The server should handle WebSocket connections, manage RDP sessions through a Guacamole tunnel, and support bidirectional communication between the client and the RDP server.\n\nStruct Description: The RDPServer struct represents an RDP WebSocket server that manages WebSocket connections and RDP sessions via Guacamole tunnels.\n\nFields:\n- Session: *session.SSession - The current user session information\n- Host: string - The RDP server host address\n- Port: int - The RDP server port number\n- Username: string - The username for RDP authentication\n- Password: string - The password for RDP authentication\n- ConnectionId: string - Unique identifier for the RDP connection\n- Width: int - The screen width for the RDP session\n- Height: int - The screen height for the RDP session\n- Dpi: int - The DPI setting for the RDP session\n\nMethods:\n- ServeHTTP: (w http.ResponseWriter, r *http.Request) -> None - Handles HTTP requests by upgrading them to WebSocket connections, establishing a Guacamole tunnel, and managing bidirectional communication between the client and RDP server. This method implements the http.Handler interface.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"yunion.io/x/log\"\n\t\"yunion.io/x/pkg/errors\"\n\n\t\"yunion.io/x/onecloud/pkg/webconsole/guac\"\n\t\"yunion.io/x/onecloud/pkg/webconsole/options\"\n\t\"yunion.io/x/onecloud/pkg/webconsole/session\"\n)\n\ntype RDPServer struct {\n\tSession *session.SSession\n\n\tHost         string\n\tPort         int\n\tUsername     string\n\tPassword     string\n\tConnectionId string\n\n\tWidth  int\n\tHeight int\n\tDpi    int\n}\n\nfunc (s *RDPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tvar up = websocket.Upgrader{\n\t\tReadBufferSize:  1024,\n\t\tWriteBufferSize: 1024,\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\n\tws, err := up.Upgrade(w, r, http.Header{\"Sec-Websocket-Protocol\": []string{\n\t\tr.Header.Get(\"Sec-Websocket-Protocol\"),\n\t}})\n\tif err != nil {\n\t\tlog.Errorf(\"upgrade error: %v\", err)\n\t\treturn\n\t}\n\n\tdefer ws.Close()\n\n\ttunnel, err := guac.NewGuacamoleTunnel(\n\t\ts.Host,\n\t\ts.Port,\n\t\ts.Username,\n\t\ts.Password,\n\t\ts.ConnectionId,\n\t\ts.Width,\n\t\ts.Height,\n\t\ts.Dpi,\n\t\ts.Session.GetClientSession().GetUserId(),\n\t)\n\tif err != nil {\n\t\tlog.Errorf(\"NewGuacamoleTunnel error: %v\", err)\n\t\treturn\n\t}\n\n\terr = tunnel.Start()\n\tif err != nil {\n\t\tlog.Errorf(\"Start error: %v\", err)\n\t\treturn\n\t}\n\n\tdone := make(chan bool, 4)\n\ttimer := time.NewTimer(time.Microsecond * 100)\n\tsetDone := func() {\n\t\tdone <- true\n\t}\n\n\tgo func() {\n\t\tdefer setDone()\n\n\t\tfor {\n\t\t\tins, err := tunnel.ReadOne()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 && timer != nil {\n\t\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t\t}\n\t\t\terr = ws.WriteMessage(websocket.TextMessage, []byte(ins.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed writing to guacd %s: %v\", ins.String(), err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer setDone()\n\t\tdefer tunnel.Stop()\n\n\t\tfor {\n\t\t\t_, p, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Errorf(\"read message error %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 && timer != nil {\n\t\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t\t}\n\t\t\t_, err = tunnel.Write(p)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed writing to guacd: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tstop := make(chan bool)\n\tgo func() {\n\t\tif options.Options.RdpSessionTimeoutMinutes > 0 {\n\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t}\n\t\tdefer timer.Stop()\n\t\tdefer setDone()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\treturn\n\t\t\tcase <-timer.C:\n\t\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\ttimer.Reset(time.Microsecond * 100)\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer setDone()\n\n\t\terr = tunnel.Wait()\n\t\tif err != nil && errors.Cause(err) != guac.TunnerClose {\n\t\t\tlog.Errorf(\"wait error: %v\", err)\n\t\t}\n\t}()\n\n\t<-done\n\tstop <- true\n\tlog.Infof(\"rdp %s@%s:%d complete\", s.Username, s.Host, s.Port)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/guac-gui/guac\"\n\t\"github.com/guac-gui/guac/session\"\n\t\"net/http\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype RDPServer struct {\n\tSession     *session.SSession\n\tHost        string\n\tPort        int\n\tUsername    string\n\tPassword    string\n\tConnectionId string\n\tWidth       int\n\tHeight      int\n\tDpi         int\n}\n\nfunc (r *RDPServer) ServeHTTP(w http.ResponseWriter, r_http *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r_http, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Could not open websocket connection\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\ttunnel, err := guac.NewTunnel(\n\t\tr.Host,\n\t\tr.Port,\n\t\tr.Username,\n\t\tr.Password,\n\t\tr.ConnectionId,\n\t\tr.Width,\n\t\tr.Height,\n\t\tr.Dpi,\n\t)\n\tif err != nil {\n\t\tconn.WriteMessage(websocket.CloseMessage, []byte(fmt.Sprintf(\"Failed to create RDP tunnel: %v\", err)))\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\tmessageType, p, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = tunnel.Write(p)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif messageType == websocket.CloseMessage {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\tbuf := make([]byte, 4096)\n\t\t\tn, err := tunnel.Read(buf)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif n > 0 {\n\t\t\t\terr = conn.WriteMessage(websocket.BinaryMessage, buf[:n])\n\t\t\t\tif err != nil {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, sends a greeting message to the client, and echoes back any messages received from the client.\n\nFunction Description: The function `hello` handles WebSocket communication by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It then enters a loop where it sends a greeting message to the client and reads messages from the client, printing them to the console. The connection is properly closed when the function exits.\n\nInput: \n- `c echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails or if there is an error during message reading/writing. Otherwise, it returns nil once the connection is closed.\n\nNote: The function runs indefinitely in a loop until the WebSocket connection is closed or an error occurs.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc hello(c echo.Context) error {\n\tconn, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\terr = conn.WriteMessage(websocket.TextMessage, []byte(\"Hello from server!\"))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"Received: %s\\n\", message)\n\t\terr = conn.WriteMessage(messageType, message)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Create a WebSocket handler function that establishes an SSH connection through a WebSocket interface, allowing for terminal-like interaction with a remote host.\n\nFunction Description: The function `ConnectSshPmExec` handles WebSocket connections to facilitate SSH terminal sessions. It upgrades an HTTP connection to WebSocket, validates host credentials, establishes an SSH connection, and manages bidirectional communication between the WebSocket client and SSH server. The function includes error handling and resource cleanup.\n\nInput:\n- `c` (gin.Context) - Gin framework context for HTTP request handling\n- `username` (string) - Username for authentication (unused in current implementation)\n- `envName` (string) - Environment name (unused in current implementation)\n- `productName` (string) - Product name (unused in current implementation)\n- `ip` (string) - IP address of the target host\n- `hostId` (string) - Identifier for the host's private key\n- `cols` (int) - Terminal column size\n- `rows` (int) - Terminal row size\n- `log` (*zap.SugaredLogger) - Logger for error reporting\n\nOutput:\n- `error` - Returns nil on success, or an error object if any step fails",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/ssh\"\n\n\tcommonrepo \"github.com/koderover/zadig/v2/pkg/microservice/aslan/core/common/repository/mongodb\"\n\t\"github.com/koderover/zadig/v2/pkg/setting\"\n\te \"github.com/koderover/zadig/v2/pkg/tool/errors\"\n\ttoolssh \"github.com/koderover/zadig/v2/pkg/tool/ssh\"\n\t\"github.com/koderover/zadig/v2/pkg/tool/wsconn\"\n\t\"github.com/koderover/zadig/v2/pkg/util\"\n)\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\nfunc ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tws, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"ws upgrade err:%s\", err)\n\t\treturn e.ErrLoginPm.AddErr(err)\n\t}\n\n\tdefer ws.Close()\n\tresp, err := commonrepo.NewPrivateKeyColl().Find(commonrepo.FindPrivateKeyOption{\n\t\tID: hostId,\n\t})\n\tif err != nil {\n\t\tlog.Errorf(\"PrivateKey.Find ip %s id %s error: %s\", ip, hostId, err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrGetPrivateKey.Error()))\n\t\treturn e.ErrGetPrivateKey\n\n\t}\n\tif resp.Status != setting.PMHostStatusNormal {\n\t\tlog.Errorf(\"host %s status %s, is not normal\", ip, resp.Status)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s status %s,is not normal\", ip, resp.Status))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.ScheduleWorkflow {\n\t\tlog.Errorf(\"host %s is not enable login\", ip)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s is not enable ssh\", ip))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.Port == 0 {\n\t\tresp.Port = setting.PMHostDefaultPort\n\t}\n\n\tsDec, err := base64.StdEncoding.DecodeString(resp.PrivateKey)\n\tif err != nil {\n\t\tlog.Errorf(\"base64 decode failed ip:%s, error:%s\", ip, err)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"base64 decode failed ip:%s, error:%s\", ip, err))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\n\tsshCli, err := toolssh.NewSshCli(sDec, resp.UserName, resp.IP, resp.Port)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshCli err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshCli.Close()\n\n\tsshConn, err := wsconn.NewSshConn(cols, rows, sshCli)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshConn err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshConn.Close()\n\n\tstopChan := make(chan bool, 3)\n\tgo sshConn.ReadWsMessage(ws, stopChan)\n\tgo sshConn.SendWsWriteMessage(ws, stopChan)\n\tgo sshConn.SessionWait(stopChan)\n\n\t<-stopChan\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/ssh\"\n\t\"golang.org/x/sync/errgroup\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to upgrade connection to WebSocket: %v\", err)\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tprivateKey, err := os.ReadFile(fmt.Sprintf(\"/path/to/private/keys/%s\", hostId))\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to read private key for host ID %s: %v\", hostId, err)\n\t\treturn err\n\t}\n\n\tsigner, err := ssh.ParsePrivateKey(privateKey)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to parse private key for host ID %s: %v\", hostId, err)\n\t\treturn err\n\t}\n\n\tconfig := &ssh.ClientConfig{\n\t\tUser: \"root\",\n\t\tAuth: []ssh.AuthMethod{\n\t\t\tssh.PublicKeys(signer),\n\t\t},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t\tTimeout:         5 * time.Second,\n\t}\n\n\tsshConn, err := ssh.Dial(\"tcp\", fmt.Sprintf(\"%s:22\", ip), config)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to connect to SSH server at %s: %v\", ip, err)\n\t\treturn err\n\t}\n\tdefer sshConn.Close()\n\n\tsession, err := sshConn.NewSession()\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to create SSH session: %v\", err)\n\t\treturn err\n\t}\n\tdefer session.Close()\n\n\tmodes := ssh.TerminalModes{\n\t\tssh.ECHO:          1,\n\t\tssh.TTY_OP_ISPEED: 14400,\n\t\tssh.TTY_OP_OSPEED: 14400,\n\t}\n\n\terr = session.RequestPty(\"xterm\", rows, cols, modes)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to request PTY: %v\", err)\n\t\treturn err\n\t}\n\n\tstdinPipe, err := session.StdinPipe()\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to get stdin pipe: %v\", err)\n\t\treturn err\n\t}\n\n\tstdoutPipe, err := session.StdoutPipe()\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to get stdout pipe: %v\", err)\n\t\treturn err\n\t}\n\n\tstderrPipe, err := session.StderrPipe()\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to get stderr pipe: %v\", err)\n\t\treturn err\n\t}\n\n\terr = session.Shell()\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to start shell: %v\", err)\n\t\treturn err\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tg, ctx := errgroup.WithContext(ctx)\n\n\tg.Go(func() error {\n\t\treader := bufio.NewReader(conn.UnderlyingConn())\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn ctx.Err()\n\t\t\tdefault:\n\t\t\t\tdata, err := reader.ReadByte()\n\t\t\t\tif err != nil {\n\t\t\t\t\tif errors.Is(err, io.EOF) {\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t}\n\t\t\t\t\tlog.Errorf(\"WebSocket read error: %v\", err)\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\t_, writeErr := stdinPipe.Write([]byte{data})\n\t\t\t\tif writeErr != nil {\n\t\t\t\t\tlog.Errorf(\"SSH stdin write error: %v\", writeErr)\n\t\t\t\t\treturn writeErr\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\n\tg.Go(func() error {\n\t\tscanner := bufio.NewScanner(stdoutPipe)\n\t\tfor scanner.Scan() {\n\t\t\tmsg := scanner.Text() + \"\\n\"\n\t\t\terr := conn.WriteMessage(websocket.TextMessage, []byte(msg))\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"WebSocket write error: %v\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tlog.Errorf(\"Stdout scanner error: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\tg.Go(func() error {\n\t\tscanner := bufio.NewScanner(stderrPipe)\n\t\tfor scanner.Scan() {\n\t\t\tmsg := scanner.Text() + \"\\n\"\n\t\t\terr := conn.WriteMessage(websocket.TextMessage, []byte(msg))\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"WebSocket write error: %v\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tlog.Errorf(\"Stderr scanner error: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\terr = g.Wait()\n\tif err != nil && !errors.Is(err, context.Canceled) {\n\t\tlog.Errorf(\"Connection error: %v\", err)\n\t\treturn err\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Implement a WebSocket handler for VNC (Virtual Network Computing) functionality that enables remote desktop interaction through a WebSocket connection, including image transmission, clipboard sharing, and input event handling.\n\nStruct Description: The VNC struct represents a VNC over WebSocket handler that manages the connection between a client and a remote VNC server, facilitating bidirectional communication for remote desktop operations.\n\nFields:\n- link: *network.Link - Represents the network link to the remote VNC server\n- chClipboard: chan string - Channel for transmitting clipboard content between client and server\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages the VNC session lifecycle\n- remoteRead: (ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) -> None - Processes incoming messages from the remote VNC server\n- localRead: (ctx context.Context, local *websocket.Conn, remote *conn.Conn) -> None - Handles messages received from the WebSocket client\n- mouseEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse movement and click events\n- keyboardEvent: (remote *conn.Conn, data []byte) -> None - Handles keyboard input events\n- cadEvent: (remote *conn.Conn) -> None - Manages Ctrl+Alt+Del special key combination\n- scrollEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse scroll wheel events",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/binary\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"image\"\n\t\"image/draw\"\n\t\"image/jpeg\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/runtime\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype VNC struct {\n\tlink         *network.Link\n\tchClipboard  chan string\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer local.Close()\n\tch := conn.ChanRead(id)\n\tdefer conn.SendDisconnect(v.link.target, v.link.id)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.remoteRead(ctx, ch, local)\n\t}()\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.localRead(ctx, local, conn)\n\t}()\n\twg.Wait()\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteRead\")\n\tfor {\n\t\tvar msg *network.Msg\n\t\tselect {\n\t\tcase msg = <-ch:\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_vnc_image:\n\t\t\tdata, err := decodeImage(msg.GetVimg())\n\t\t\truntime.Assert(err)\n\t\t\treplyImage(local, msg.GetVimg(), data, len(msg.GetVimg().GetData()))\n\t\tcase network.Msg_vnc_clipboard:\n\t\t\tv.chClipboard <- msg.GetVclipboard()\n\t\tdefault:\n\t\t\tlogging.Error(\"on message: %s\", msg.GetXType().String())\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tdefer utils.Recover(\"localRead\")\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"local read: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tvar msg struct {\n\t\t\tAction string `json:\"action\"`\n\t\t}\n\t\terr = json.Unmarshal(data, &msg)\n\t\tif err != nil {\n\t\t\tlogging.Error(\"unmarshal: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tswitch msg.Action {\n\t\tcase \"mouse\":\n\t\t\tv.mouseEvent(remote, data)\n\t\tcase \"keyboard\":\n\t\t\tv.keyboardEvent(remote, data)\n\t\tcase \"cad\":\n\t\t\tv.cadEvent(remote)\n\t\tcase \"scroll\":\n\t\t\tv.scrollEvent(remote, data)\n\t\t}\n\t}\n}\n\nfunc decodeImage(data *network.VncImage) ([]byte, error) {\n\tswitch data.GetEncode() {\n\tcase network.VncImage_raw:\n\t\treturn data.GetData(), nil\n\tcase network.VncImage_jpeg:\n\t\timg, err := jpeg.Decode(bytes.NewReader(data.GetData()))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\trect := img.Bounds()\n\t\traw := image.NewRGBA(rect)\n\t\tdraw.Draw(raw, rect, img, rect.Min, draw.Src)\n\t\treturn raw.Pix, nil\n\tcase network.VncImage_png:\n\t}\n\treturn nil, errors.New(\"unsupported\")\n}\n\nfunc replyImage(conn *websocket.Conn, msg *network.VncImage, data []byte, srcSize int) {\n\tinfo := msg.GetXInfo()\n\tbuf := make([]byte, len(data)+28)\n\tbinary.BigEndian.PutUint32(buf, info.GetScreenWidth())\n\tbinary.BigEndian.PutUint32(buf[4:], info.GetScreenHeight())\n\tbinary.BigEndian.PutUint32(buf[8:], info.GetRectX())\n\tbinary.BigEndian.PutUint32(buf[12:], info.GetRectY())\n\tbinary.BigEndian.PutUint32(buf[16:], info.GetRectWidth())\n\tbinary.BigEndian.PutUint32(buf[20:], info.GetRectHeight())\n\tbinary.BigEndian.PutUint32(buf[24:], uint32(srcSize))\n\tcopy(buf[28:], data)\n\tconn.WriteMessage(websocket.BinaryMessage, buf)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package vnc\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"yourmodule/network\"\n\t\"yourmodule/conn\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype VNC struct {\n\tlink        *network.Link\n\tchClipboard chan string\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tc, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Could not open websocket connection\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer c.Close()\n\n\tctx, cancel := context.WithCancel(r.Context())\n\tdefer cancel()\n\n\tgo v.remoteRead(ctx, conn.ReceiveChannel(), c)\n\tgo v.localRead(ctx, c, conn)\n\n\t<-ctx.Done()\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase msg := <-ch:\n\t\t\tif msg.Type == network.MsgImage {\n\t\t\t\terr := local.WriteMessage(websocket.BinaryMessage, msg.Payload)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t} else if msg.Type == network.MsgClipboard {\n\t\t\t\tv.chClipboard <- string(msg.Payload)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t\t_, data, err := local.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tswitch data[0] {\n\t\t\tcase 'm':\n\t\t\t\tv.mouseEvent(remote, data[1:])\n\t\t\tcase 'k':\n\t\t\t\tv.keyboardEvent(remote, data[1:])\n\t\t\tcase 'c':\n\t\t\t\tv.cadEvent(remote)\n\t\t\tcase 's':\n\t\t\t\tv.scrollEvent(remote, data[1:])\n\t\t\tcase 'C':\n\t\t\t\tgo func() { v.chClipboard <- string(data[1:]) }()\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (v *VNC) mouseEvent(remote *conn.Conn, data []byte) {\n\tremote.Send(network.NewMsg(network.MsgMouse, data))\n}\n\nfunc (v *VNC) keyboardEvent(remote *conn.Conn, data []byte) {\n\tremote.Send(network.NewMsg(network.MsgKeyboard, data))\n}\n\nfunc (v *VNC) cadEvent(remote *conn.Conn) {\n\tremote.Send(network.NewMsg(network.MsgCAD, nil))\n}\n\nfunc (v *VNC) scrollEvent(remote *conn.Conn, data []byte) {\n\tremote.Send(network.NewMsg(network.MsgScroll, data))\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests on the root path (\"/\") and returns a welcome message.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. When accessed, it responds with a welcome message. The server listens on port 8080.\n\nInput: None (The HTTP server handles incoming requests automatically)\n\nOutput: None (The function runs indefinitely, serving HTTP responses to incoming requests)\n\n---\n\nNote: Since the reference code is at the package level (with `main` function) rather than a struct/class level, I've provided the function-level instruction format. The code demonstrates a complete executable program rather than a reusable struct/class component.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\tmyHandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to my website!\")\n\t}\n\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome!\")\n\t})\n\n\tfmt.Println(\"Server is running on port 8080...\")\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a UDP client in Go that can send data to a specified server address and port using the net package's DialUDP function.\n\nStruct Description: The SocketBee struct represents a UDP client capable of sending data to a server. It embeds a bees.Bee for base functionality and includes a channel for event handling.\n\nFields:\neventChan: chan bees.Event - Channel for handling events within the bee framework.\n\nMethods:\nAction: [Name](action bees.Action) -> []bees.Placeholder - Handles the \"send\" action to transmit data to a UDP server. Takes an action object containing the target address, port, and data to send. Returns a list of placeholders (currently unused). Panics on errors during address resolution, connection establishment, or data transmission.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/muesli/beehive/bees\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\n\teventChan chan bees.Event\n}\n\nfunc (mod *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\touts := []bees.Placeholder{}\n\n\tvar data string\n\tvar addr string\n\tvar port int\n\n\taction.Options.Bind(\"address\", &addr)\n\taction.Options.Bind(\"port\", &port)\n\taction.Options.Bind(\"data\", &data)\n\n\tswitch action.Name {\n\tcase \"send\":\n\t\tsa, err := net.ResolveUDPAddr(\"udp\", addr+\":\"+strconv.Itoa(port))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, sa)\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tdefer conn.Close()\n\t\t_, err = conn.Write([]byte(data))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\tdefault:\n\t\tpanic(\"Unknown action triggered in \" + mod.Name() + \": \" + action.Name)\n\t}\n\n\treturn outs\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package socketbee\n\nimport (\n\t\"net\"\n\t\"github.com/warkid/bees\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\teventChan chan bees.Event\n}\n\nfunc (b *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\tswitch action.Name {\n\tcase \"send\":\n\t\taddrStr := action.Options[\"address\"].(string)\n\t\tport := action.Options[\"port\"].(int)\n\t\tdata := action.Options[\"data\"].([]byte)\n\n\t\taddr, err := net.ResolveUDPAddr(\"udp\", addrStr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer conn.Close()\n\n\t\t_, err = conn.Write(data)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\treturn []bees.Placeholder{}\n\tdefault:\n\t\treturn []bees.Placeholder{}\n\t}\n}"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Implement a function to send a Wake-on-LAN (WoL) magic packet to a target device using UDP broadcast.\n\nFunction Description: The function `WakeUp` sends a Wake-on-LAN magic packet to a specified MAC address over UDP broadcast. It allows optional specification of a local network interface for the broadcast and handles the creation and transmission of the magic packet.\n\nInput:\n- `macAddr` (string): The MAC address of the target device to wake up, in format \"XX:XX:XX:XX:XX:XX\"\n- `broadcastIP` (string): The broadcast IP address to use (e.g., \"255.255.255.255\")\n- `bcastInterface` (string): [Optional] The network interface to use for broadcasting. If empty, system default will be used\n- `port` (int): The UDP port number to use for the WoL packet (typically 7 or 9)\n\nOutput:\n- (error): Returns nil on success, or an error if any step fails (invalid MAC, network error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc WakeUp(macAddr, broadcastIP, bcastInterface string, port int) error {\n\tvar localAddr *net.UDPAddr\n\tvar err error\n\tif bcastInterface != \"\" {\n\t\tlocalAddr, err = ipFromInterface(bcastInterface)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tbcastAddr := fmt.Sprintf(\"%s:%d\", broadcastIP, port)\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", bcastAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmp, err := New(macAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbs, err := mp.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", localAddr, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tn, err := conn.Write(bs)\n\tif err == nil && n != 102 {\n\t\terr = fmt.Errorf(\"magic packet sent was %d bytes (expected 102 bytes sent)\", n)\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"strings\"\n)\n\nfunc WakeUp(macAddr, broadcastIP, bcastInterface string, port int) error {\n\t// Validate MAC address format\n\tmac, err := net.ParseMAC(macAddr)\n\tif err != nil {\n\t\treturn errors.New(\"invalid MAC address format\")\n\t}\n\n\t// Create the magic packet\n\tpacket := make([]byte, 102)\n\t// First 6 bytes are 0xFF\n\tfor i := 0; i < 6; i++ {\n\t\tpacket[i] = 0xFF\n\t}\n\t// Next 96 bytes (16 repetitions of the MAC address)\n\tfor i := 0; i < 16; i++ {\n\t\tcopy(packet[6+i*6:], mac)\n\t}\n\n\t// Resolve the UDP address\n\taddr := &net.UDPAddr{\n\t\tIP:   net.ParseIP(broadcastIP),\n\t\tPort: port,\n\t\tZone: \"\",\n\t}\n\n\tif addr.IP == nil {\n\t\treturn errors.New(\"invalid broadcast IP address\")\n\t}\n\n\t// Configure local address if interface is specified\n\tvar laddr *net.UDPAddr\n\tif bcastInterface != \"\" {\n\t\tief, err := net.InterfaceByName(bcastInterface)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\taddrs, err := ief.Addrs()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, a := range addrs {\n\t\t\tif ipnet, ok := a.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {\n\t\t\t\tladdr = &net.UDPAddr{\n\t\t\t\t\tIP: ipnet.IP,\n\t\t\t\t\tPort: 0,\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif laddr == nil {\n\t\t\treturn errors.New(\"could not find suitable local IP for interface \" + bcastInterface)\n\t\t}\n\t}\n\n\t// Setup connection\n\tconn, err := net.DialUDP(\"udp4\", laddr, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\t// Set broadcast permission\n\tif err := conn.SetBroadcast(true); err != nil {\n\t\treturn err\n\t}\n\n\t// Send the packet\n\t_, err = conn.Write(packet)\n\treturn err\n}"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Write a Go function that tests UDP communication between a client and server. The function should create a UDP server, establish a client connection, send a test message, and verify the server's response.\n\nFunction Description: The function `TestUDPTransport` tests UDP transport functionality by creating a UDP server, sending a message from a client to the server, and verifying that the server receives the correct message. It uses goroutines for asynchronous server handling and channels for communication between the server and test function.\n\nInput: \n- `t *testing.T`: A testing context provided by the Go testing framework for assertions and logging.\n\nOutput: \n- None (This is a test function, so it reports failures via the testing framework rather than returning values). \n\nNote: The function relies on an external `NewTUDPServerTransport` function (not shown in the reference) to create the server transport and a `serveOnce` helper function (also not shown) to handle the server-side receive operation.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\nfunc TestUDPTransport(t *testing.T) {\n\tserver, err := NewTUDPServerTransport(\"127.0.0.1:0\")\n\trequire.NoError(t, err)\n\tdefer server.Close()\n\n\tassert.NoError(t, server.Open())\n\tassert.True(t, server.IsOpen())\n\tassert.NotNil(t, server.Conn())\n\n\tc := make(chan []byte)\n\tdefer close(c)\n\n\tgo serveOnce(t, server, c)\n\n\tdestAddr, err := net.ResolveUDPAddr(\"udp\", server.Addr().String())\n\trequire.NoError(t, err)\n\n\tconnUDP, err := net.DialUDP(destAddr.Network(), nil, destAddr)\n\trequire.NoError(t, err)\n\tdefer connUDP.Close()\n\n\tn, err := connUDP.Write([]byte(\"test\"))\n\tassert.NoError(t, err)\n\tassert.Equal(t, 4, n)\n\n\tselect {\n\tcase data := <-c:\n\t\tassert.Equal(t, \"test\", string(data))\n\tcase <-time.After(time.Second * 1):\n\t\tt.Error(\"Server did not respond in time\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package transport\n\nimport (\n\t\"net\"\n\t\"testing\"\n)\n\nfunc TestUDPTransport(t *testing.T) {\n\tserverAddr := \"127.0.0.1:8080\"\n\n\t// Create a UDP server\n\tserver, err := NewTUDPServerTransport(serverAddr)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create UDP server: %v\", err)\n\t}\n\tdefer server.Close()\n\n\t// Channel to receive the message on the server side\n\tmsgChan := make(chan []byte, 1)\n\n\t// Start the server in a goroutine\n\tgo func() {\n\t\terr := server.ServeOnce(func(data []byte, addr *net.UDPAddr) ([]byte, error) {\n\t\t\tmsgChan <- data\n\t\t\treturn []byte(\"ACK\"), nil\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Server error: %v\", err)\n\t\t}\n\t}()\n\n\t// Give the server a moment to start\n\ttime.Sleep(100 * time.Millisecond)\n\n\t// Client sends a test message\n\tclientAddr, err := net.ResolveUDPAddr(\"udp\", serverAddr)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to resolve UDP address: %v\", err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, clientAddr)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect to UDP server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\ttestMsg := []byte(\"TEST\")\n\t_, err = conn.Write(testMsg)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to send UDP message: %v\", err)\n\t}\n\n\t// Wait for the server to receive the message\n\tselect {\n\tcase received := <-msgChan:\n\t\tif string(received) != string(testMsg) {\n\t\t\tt.Errorf(\"Received incorrect message: got %v, want %v\", received, testMsg)\n\t\t}\n\tcase <-time.After(1 * time.Second):\n\t\tt.Error(\"Timeout waiting for server to receive message\")\n\t}\n\n\t// Read response from server\n\tvar resp [3]byte\n\tn, err := conn.Read(resp[:])\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to read UDP response: %v\", err)\n\t}\n\tif string(resp[:n]) != \"ACK\" {\n\t\tt.Errorf(\"Expected ACK response, got: %v\", resp[:n])\n\t}\n}"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a function that establishes a UDP connection to a target server, sends a payload, and reads the server's response.\n\nFunction Description: The function `connectUDP` initiates a UDP connection to a specified target address, sends a given payload, and reads the response from the server. It handles local and remote address resolution, connection establishment, and error handling for network operations.\n\nInput: \n- `target` [string] - The target server address in the format \"host:port\" (e.g., \"127.0.0.1:8080\").\n- `payload` [string] - The data to be sent to the server.\n\nOutput: \n- None (prints the server's response to stdout). The function panics on errors during connection setup, sending, or receiving.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc connectUDP(target, payload string) {\n\tLocalAddr, err := net.ResolveUDPAddr(\"udp\", \":54321\")\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to resolve UDP local address on port 54321 %v\", err))\n\t}\n\tRemoteAddr, err := net.ResolveUDPAddr(\"udp\", target)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to resolve UDP remote address [%s] %v\", target, err))\n\t}\n\tconn, err := net.DialUDP(\"udp\", LocalAddr, RemoteAddr)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to open connection to [%s] %v\", target, err))\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(payload))\n\tif err != nil {\n\t\tpanic(\"Failed to send payload\")\n\t}\n\t_, err = conn.Write([]byte(\"\\n\"))\n\tif err != nil {\n\t\tpanic(\"Failed to send payload\")\n\t}\n\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tpanic(\"Failed to read from socket\")\n\t}\n\tfmt.Print(string(buf[:n]))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc connectUDP(target string, payload string) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(payload))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuffer := make([]byte, 1024)\n\tn, _, err := conn.ReadFromUDP(buffer)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(string(buffer[:n]))\n}"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Implement a UDP client in Go that communicates with a NAT-PMP (Port Mapping Protocol) gateway, handling retries and timeouts for reliable communication.\n\nStruct Description: The `network` struct represents a network connection to a NAT-PMP gateway, maintaining the gateway IP address and providing a method to send requests and receive responses.\n\nFields:\n- gateway: net.IP - The IP address of the NAT-PMP gateway\n\nMethods:\n- call: (msg []byte, timeout time.Duration) -> ([]byte, error) - Sends a UDP message to the NAT-PMP gateway and waits for a response. Implements exponential backoff retry logic with configurable timeout. Returns the response bytes or an error if communication fails.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nconst nAT_PMP_PORT = 5351\nconst nAT_TRIES = 9\nconst nAT_INITIAL_MS = 250\n\ntype network struct {\n\tgateway net.IP\n}\n\nfunc (n *network) call(msg []byte, timeout time.Duration) (result []byte, err error) {\n\tvar server net.UDPAddr\n\tserver.IP = n.gateway\n\tserver.Port = nAT_PMP_PORT\n\tconn, err := net.DialUDP(\"udp\", nil, &server)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tresult = make([]byte, 16)\n\n\tvar finalTimeout time.Time\n\tif timeout != 0 {\n\t\tfinalTimeout = time.Now().Add(timeout)\n\t}\n\n\tneedNewDeadline := true\n\n\tvar tries uint\n\tfor tries = 0; (tries < nAT_TRIES && finalTimeout.IsZero()) || time.Now().Before(finalTimeout); {\n\t\tif needNewDeadline {\n\t\t\tnextDeadline := time.Now().Add((nAT_INITIAL_MS << tries) * time.Millisecond)\n\t\t\terr = conn.SetDeadline(minTime(nextDeadline, finalTimeout))\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tneedNewDeadline = false\n\t\t}\n\t\t_, err = conn.Write(msg)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tvar bytesRead int\n\t\tvar remoteAddr *net.UDPAddr\n\t\tbytesRead, remoteAddr, err = conn.ReadFromUDP(result)\n\t\tif err != nil {\n\t\t\tif err.(net.Error).Timeout() {\n\t\t\t\ttries++\n\t\t\t\tneedNewDeadline = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif !remoteAddr.IP.Equal(n.gateway) {\n\t\t\tcontinue\n\t\t}\n\t\tif bytesRead < len(result) {\n\t\t\tresult = result[:bytesRead]\n\t\t}\n\t\treturn\n\t}\n\terr = fmt.Errorf(\"Timed out trying to contact gateway\")\n\treturn\n}\n\nfunc minTime(a, b time.Time) time.Time {\n\tif a.IsZero() {\n\t\treturn b\n\t}\n\tif b.IsZero() {\n\t\treturn a\n\t}\n\tif a.Before(b) {\n\t\treturn a\n\t}\n\treturn b\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\t\"time\"\n)\n\ntype network struct {\n\tgateway net.IP\n}\n\nfunc (n *network) call(msg []byte, timeout time.Duration) ([]byte, error) {\n\tvar conn *net.UDPConn\n\tvar err error\n\n\taddr := &net.UDPAddr{\n\t\tIP:   n.gateway,\n\t\tPort: 5351, // NAT-PMP default port\n\t}\n\n\tconn, err = net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tretryWait := time.Millisecond * 500\n\tmaxWait := time.Second * 16\n\tdeadline := time.Now().Add(timeout)\n\n\tfor {\n\t\tconn.SetWriteDeadline(time.Now().Add(retryWait))\n\t\t_, werr := conn.Write(msg)\n\t\tif werr != nil {\n\t\t\treturn nil, werr\n\t\t}\n\n\t\tbuf := make([]byte, 1500)\n\t\tconn.SetReadDeadline(deadline)\n\t\tnr, rerr := conn.Read(buf)\n\t\tif rerr == nil {\n\t\t\treturn buf[:nr], nil\n\t\t}\n\n\t\tif deadline.Sub(time.Now()) <= 0 {\n\t\t\treturn nil, rerr\n\t\t}\n\n\t\ttime.Sleep(retryWait)\n\t\tif retryWait < maxWait {\n\t\t\tretryWait *= 2\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a function that sends a predefined stop marker to a destination address over UDP protocol.\n\nFunction Description: The function `sendStopMarker` establishes a UDP connection between a source address and a destination address, then sends a fixed byte sequence (stop marker) to indicate a stopping condition. It handles basic error logging if the connection fails.\n\nInput: \n- `src` [string]: The source IP address or hostname (without port)\n- `dst` [string]: The destination IP address or hostname (without port)\n\nOutput: None (void function). The function writes the stop marker to the UDP connection but doesn't return any value. Errors are logged if they occur.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n)\n\nvar stopMarker = []byte{2, 2, 2, 2, 2, 2, 2, 2}\n\nfunc sendStopMarker(src, dst string) {\n\tl, _ := net.ResolveUDPAddr(\"udp\", src+\":2222\")\n\tr, _ := net.ResolveUDPAddr(\"udp\", dst+\":2222\")\n\tconn, err := net.DialUDP(\"udp\", l, r)\n\tif err != nil {\n\t\tlog.Printf(\"fail to send stopmarker: %s\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tconn.Write(stopMarker)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n)\n\nfunc sendStopMarker(src, dst string) {\n\tsrcAddr, err := net.ResolveUDPAddr(\"udp\", src+\":0\")\n\tif err != nil {\n\t\tlog.Printf(\"Error resolving source address: %v\", err)\n\t\treturn\n\t}\n\n\tdstAddr, err := net.ResolveUDPAddr(\"udp\", dst+\":0\")\n\tif err != nil {\n\t\tlog.Printf(\"Error resolving destination address: %v\", err)\n\t\treturn\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", srcAddr, dstAddr)\n\tif err != nil {\n\t\tlog.Printf(\"Error creating UDP connection: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tstopMarker := []byte{0x00, 0xFF, 0x00, 0xFF} // Example fixed byte sequence\n\n\t_, err = conn.Write(stopMarker)\n\tif err != nil {\n\t\tlog.Printf(\"Error sending stop marker: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that serves a health check endpoint and starts listening on a specified host and port.\n\nFunction Description: The function `startHTTPServer` initializes and starts an HTTP server with a single `/healthz` endpoint that returns a 200 OK status and \"ok\" response. The server listens on the IP address and port specified by the input parameters.\n\nInput: \n- `argHealthzIP` (string pointer): The IP address on which the server should listen.\n- `argHealthzPort` (int pointer): The port number on which the server should listen.\n\nOutput: \n- None (the function runs indefinitely or until an error occurs, in which case it logs the error and exits).",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc startHTTPServer() {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(200)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\n\tklog.Info(\"Starting eventer http service\")\n\tklog.Fatal(http.ListenAndServe(net.JoinHostPort(*argHealthzIP, strconv.Itoa(int(*argHealthzPort))), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc startHTTPServer(argHealthzIP *string, argHealthzPort *int) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tfmt.Fprintf(w, \"ok\")\n\t})\n\n\taddr := fmt.Sprintf(\"%s:%d\", *argHealthzIP, *argHealthzPort)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, processes incoming messages using ROT13 cipher, and sends the transformed messages back to the client.\n\nFunction Description: The function initializes a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it applies the ROT13 cipher transformation and sends the result back to the originating client. The server handles network errors and cleans up resources properly on exit.\n\nInput:\n- port: int - The UDP port number to listen on (passed as a pointer in the original code)\n\nOutput: None (the function runs indefinitely until terminated or an unrecoverable error occurs)\n\nNote: The function uses external packages for logging (github.com/enfein/mieru/v3/pkg/log) and ROT13 transformation (github.com/enfein/mieru/v3/pkg/testtool). The main processing loop includes error handling for network operations and message processing.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n)\nfunc main() {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.Itoa(*port))\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ResolveUDPAddr() failed: %v\", err)\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ListenUDP() failed: %v\", err)\n\t}\n\tlog.Infof(\"UDP server is initialized, listening to %s\", addr.String())\n\tdefer conn.Close()\n\tbuf := make([]byte, 1500)\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Read() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif n == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tout, err := testtool.TestHelperRot13(buf[:n])\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"rot13() failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tif _, err = conn.WriteToUDP(out, addr); err != nil {\n\t\t\tlog.Errorf(\"Write() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n\t\"net\"\n)\n\nfunc startUDPServer(port *int) {\n\taddr := &net.UDPAddr{\n\t\tPort: *port,\n\t\tIP:   net.IPv4zero,\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen on UDP port: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tlog.Infof(\"UDP server listening on port %d\", *port)\n\n\tfor {\n\t\tbuffer := make([]byte, 1024)\n\t\tn, clientAddr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Error reading from UDP: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tplaintext := buffer[:n]\n\t\tciphertext := testtool.Rot13(plaintext)\n\n\t\t_, err = conn.WriteToUDP(ciphertext, clientAddr)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Error writing to UDP: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: Implement a UDP server for handling SOCKS5 proxy requests, including UDP association and data relay between clients and a Hysteria proxy client.\n\nStruct Description: The Server struct represents a SOCKS5 proxy server with UDP support, handling client connections and relaying UDP traffic through a Hysteria proxy.\n\nFields:\n\nHyClient: [client.Client] - The Hysteria client used for establishing proxy connections\nAuthFunc: [func(username, password string) bool] - Authentication function for SOCKS5 clients\nDisableUDP: [bool] - Flag to disable UDP functionality\nEventLogger: [EventLogger] - Interface for logging server events\n\nMethods:\n\nhandleUDP: [func(conn net.Conn, req *socks5.Request)] - none - Handles a new UDP association request from a SOCKS5 client\nudpServer: [func(udpConn *net.UDPConn, hyUDP client.HyUDPConn)] -> [error] - Manages the UDP relay between client and Hysteria proxy\nsendUDPReply: [func(conn net.Conn, addr *net.UDPAddr)] -> [error] - Sends a UDP association reply to the SOCKS5 client\n\nInterface Description:\n\nEventLogger: Interface for logging UDP-related events\nMethods:\nUDPRequest: [func(addr net.Addr)] - Logs incoming UDP requests\nUDPError: [func(addr net.Addr, err error)] - Logs UDP-related errors",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/txthinking/socks5\"\n\n\t\"github.com/apernet/hysteria/core/v2/client\"\n)\n\ntype Server struct {\n\tHyClient    client.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tdefer conn.Close()\n\n\tif s.EventLogger != nil {\n\t\ts.EventLogger.UDPRequest(conn.RemoteAddr())\n\t}\n\tvar closeErr error\n\tdefer func() {\n\t\tif s.EventLogger != nil {\n\t\t\ts.EventLogger.UDPError(conn.RemoteAddr(), closeErr)\n\t\t}\n\t}()\n\n\thost, _, err := net.SplitHostPort(conn.LocalAddr().String())\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(host, \"0\"))\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpConn, err := net.ListenUDP(\"udp\", udpAddr)\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer udpConn.Close()\n\n\thyUDP, err := s.HyClient.UDP()\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer hyUDP.Close()\n\n\t_ = sendUDPReply(conn, udpConn.LocalAddr().(*net.UDPAddr))\n\n\terrChan := make(chan error, 2)\n\tgo func() {\n\t\terr := s.udpServer(udpConn, hyUDP)\n\t\terrChan <- err\n\t}()\n\tgo func() {\n\t\t_, err := io.Copy(io.Discard, conn)\n\t\terrChan <- err\n\t}()\n\tcloseErr = <-errChan\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tvar clientAddr *net.UDPAddr\n\tbuf := make([]byte, udpBufferSize)\n\tfor {\n\t\tn, cAddr, err := udpConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\td, err := socks5.NewDatagramFromBytes(buf[:n])\n\t\tif err != nil || d.Frag != 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif clientAddr == nil {\n\t\t\tclientAddr = cAddr\n\t\t\tgo func() {\n\t\t\t\tfor {\n\t\t\t\t\tbs, from, err := hyUDP.Receive()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t_ = udpConn.Close()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tatyp, addr, port, err := socks5.ParseAddress(from)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif atyp == socks5.ATYPDomain {\n\t\t\t\t\t\taddr = addr[1:]\n\t\t\t\t\t}\n\t\t\t\t\td := socks5.NewDatagram(atyp, addr, port, bs)\n\t\t\t\t\t_, _ = udpConn.WriteToUDP(d.Bytes(), clientAddr)\n\t\t\t\t}\n\t\t\t}()\n\t\t} else if !clientAddr.IP.Equal(cAddr.IP) || clientAddr.Port != cAddr.Port {\n\t\t\tcontinue\n\t\t}\n\t\t_ = hyUDP.Send(d.Data, d.Address())\n\t}\n}\n\nfunc sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\tvar atyp byte\n\tvar bndAddr, bndPort []byte\n\tif ip4 := addr.IP.To4(); ip4 != nil {\n\t\tatyp = socks5.ATYPIPv4\n\t\tbndAddr = ip4\n\t} else {\n\t\tatyp = socks5.ATYPIPv6\n\t\tbndAddr = addr.IP\n\t}\n\tbndPort = make([]byte, 2)\n\tbinary.BigEndian.PutUint16(bndPort, uint16(addr.Port))\n\tp := socks5.NewReply(socks5.RepSuccess, atyp, bndAddr, bndPort)\n\t_, err := p.WriteTo(conn)\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "right_result": "package socks5\n\nimport (\n\t\"net\"\n\n\t\"github.com/apex/log\"\n\t\"github.com/xtaci/smux\"\n\n\t\"gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/snowflake/v2/client\"\n)\n\n// EventLogger interface for logging UDP-related events\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\n// Server represents a SOCKS5 proxy server with UDP support\ntype Server struct {\n\tHyClient    *client.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\n// handleUDP handles a new UDP association request from a SOCKS5 client\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tif s.DisableUDP {\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\taddr := &net.UDPAddr{\n\t\tIP:   net.ParseIP(\"0.0.0.0\"),\n\t\tPort: 0,\n\t}\n\n\terr := s.sendUDPReply(conn, addr)\n\tif err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tudpConn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t\tconn.Close()\n\t\treturn\n\t}\n\tdefer udpConn.Close()\n\n\thyUDP, err := s.HyClient.OpenUDP()\n\tif err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t\tconn.Close()\n\t\treturn\n\t}\n\tdefer hyUDP.Close()\n\n\ts.EventLogger.UDPRequest(conn.RemoteAddr())\n\terr = s.udpServer(udpConn, hyUDP)\n\tif err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t}\n}\n\n// udpServer manages the UDP relay between client and Hysteria proxy\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tbuffer := make([]byte, 65536)\n\n\tfor {\n\t\tn, srcAddr, err := udpConn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t_, err = hyUDP.WriteTo(buffer[:n], srcAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\n// sendUDPReply sends a UDP association reply to the SOCKS5 client\nfunc (s *Server) sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\treply := []byte{\n\t\t0x05, 0x00, 0x00, 0x01,\n\t\t0x00, 0x00, 0x00, 0x00,\n\t\t0x00, 0x00,\n\t}\n\n\tif addr != nil {\n\t\tip := addr.IP.To4()\n\t\tif ip == nil {\n\t\t\tip = addr.IP\n\t\t}\n\t\tcopy(reply[4:4+len(ip)], ip)\n\t\treply[8] = byte(addr.Port >> 8)\n\t\treply[9] = byte(addr.Port)\n\t}\n\n\t_, err := conn.Write(reply)\n\treturn err\n}"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Implement a UDP server in Go that handles incoming UDP packets, performs authentication checks, and manages communication with clients through specified ports. The server should include functionality for initialization, packet handling, listening for incoming data, and graceful shutdown.\n\nStruct Description: The UDPServer struct represents a UDP server instance that manages UDP connections, handles authentication, and processes incoming/outgoing packets. It maintains connection state and integrates with a parent Server instance.\n\nFields:\n\nServer: [*Server] - Reference to the parent Server instance containing shared resources\nUDPConn: [*net.UDPConn] - Active UDP connection for the server\nAddr: [*net.UDPAddr] - Address information for the server's UDP endpoint\n\nMethods:\n\nNewUDPServer: [func(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error)] -> [*UDPServer, error] - Initializes a new UDP server instance with authentication checks and port validation. Returns the server instance or error if initialization fails.\n\nListenAndServe: [func(s *UDPServer) error] -> [error] - Starts listening for incoming UDP packets and handles them in a loop until an error occurs or the server is shut down. Automatically closes the connection when finished.\n\nShutdown: [func(s *UDPServer)] -> [void] - Gracefully shuts down the UDP server by closing the active connection.\n\nHandlePacket: [func(s *UDPServer, p *UDPPacket) error] -> [error] - Processes an incoming UDP packet, either forwarding data to the specified address or updating the connection deadline. Returns error if processing fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n)\n\ntype UDPServer struct {\n\tServer  *Server\n\tUDPConn *net.UDPConn\n\tAddr    *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tbye := func(err error) {\n\t\tp := &UDPPacket{\n\t\t\tAddress: err.Error(),\n\t\t}\n\t\tb, err1 := proto.Marshal(p)\n\t\tif err1 != nil {\n\t\t\tlog.Println(err1)\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tif p.Port == 0 {\n\t\tbye(errors.New(\"Missed port\"))\n\t\treturn nil, errors.New(addr.String() + \" missed port\")\n\t}\n\tif len(s.PortCkv) == 0 {\n\t\ttmp, err := s.Ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tif len(s.PortCkv) != 0 {\n\t\tckv, ok := s.PortCkv[p.Port]\n\t\tif !ok {\n\t\t\tbye(errors.New(\"Not allowed port\"))\n\t\t\treturn nil, errors.New(addr.String() + \" try to open not allowed UDP port: \" + strconv.FormatInt(p.Port, 10))\n\t\t}\n\t\ttmp, err := ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.FormatInt(p.Port, 10))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc1, err := net.ListenUDP(\"udp\", uaddr)\n\tif err != nil {\n\t\tbye(err)\n\t\treturn nil, err\n\t}\n\tif err := c1.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tp = &UDPPacket{\n\t\tAddress: \"0\",\n\t}\n\tb, err := proto.Marshal(p)\n\tif err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: c1,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\ti, a, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tp := &UDPPacket{\n\t\t\tAddress: a.String(),\n\t\t\tData:    b[0:i],\n\t\t}\n\t\tb, err = proto.Marshal(p)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.Server.UDPConn.WriteToUDP(b, s.Addr); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *UDPServer) Shutdown() {\n\ts.UDPConn.Close()\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif p.Address != \"0\" {\n\t\tuaddr, err := net.ResolveUDPAddr(\"udp\", p.Address)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(p.Data, uaddr); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\tif err := s.UDPConn.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"net\"\n)\n\ntype UDPServer struct {\n\tServer   *Server\n\tUDPConn  *net.UDPConn\n\tAddr     *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tif !isValidPort(addr.Port) {\n\t\treturn nil, ErrInvalidPort\n\t}\n\n\tif err := authenticate(p); err != nil {\n\t\treturn nil, err\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &UDPServer{\n\t\tServer:   s,\n\t\tUDPConn:  conn,\n\t\tAddr:     addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tdefer s.UDPConn.Close()\n\n\tbuf := make([]byte, 65536)\n\tfor {\n\t\tn, clientAddr, err := s.UDPConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tpacket := &UDPPacket{\n\t\t\tData: buf[:n],\n\t\t\tAddr: clientAddr,\n\t\t}\n\n\t\tif err := s.HandlePacket(packet); err != nil {\n\t\t\tcontinue\n\t\t}\n\t}\n}\n\nfunc (s *UDPServer) Shutdown() {\n\tif s.UDPConn != nil {\n\t\ts.UDPConn.Close()\n\t}\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif err := validatePacket(p); err != nil {\n\t\treturn err\n\t}\n\n\tif p.ForwardAddr != nil {\n\t\t_, err := s.UDPConn.WriteToUDP(p.Data, p.ForwardAddr)\n\t\treturn err\n\t}\n\n\treturn s.UDPConn.SetReadDeadline(time.Now().Add(30 * time.Second))\n}\n\nfunc isValidPort(port int) bool {\n\treturn port > 0 && port <= 65535\n}\n\nfunc authenticate(p *UDPPacket) error {\n\tif !validCredentials(p) {\n\t\treturn ErrAuthenticationFailed\n\t}\n\treturn nil\n}\n\nfunc validatePacket(p *UDPPacket) error {\n\tif len(p.Data) == 0 {\n\t\treturn ErrEmptyPacket\n\t}\n\treturn nil\n}\n\nvar (\n\tErrInvalidPort           = errors.New(\"invalid UDP port specified\")\n\tErrAuthenticationFailed  = errors.New(\"packet authentication failed\")\n\tErrEmptyPacket           = errors.New(\"received empty packet\")\n)\n\ntype UDPPacket struct {\n\tData       []byte\n\tAddr       *net.UDPAddr\n\tForwardAddr *net.UDPAddr\n}\n\ntype Server struct {\n\t// Shared resources go here\n}"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a UDP server in Go that listens for incoming messages on a specified port and prints received messages along with the sender's address.\n\nFunction Description: The function sets up a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it trims whitespace, prints the message content and the sender's address, and continues listening for new messages.\n\nInput: None (The port and IP address are hardcoded in the function)\n\nOutput: None (The function prints output to stdout but doesn't return any values)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\nfunc main() {\n\tconn, err := net.ListenUDP(\"udp\", &net.UDPAddr{\n\t\tPort: 3000,\n\t\tIP:   net.ParseIP(\"0.0.0.0\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer conn.Close()\n\tfmt.Printf(\"server listening %s\\n\", conn.LocalAddr().String())\n\n\tfor {\n\t\tmessage := make([]byte, 20)\n\t\trlen, remote, err := conn.ReadFromUDP(message[:])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tdata := strings.TrimSpace(string(message[:rlen]))\n\t\tfmt.Printf(\"received: %s from %s\\n\", data, remote)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// Hardcoded IP and port\n\tip := \"0.0.0.0\" // Listen on all interfaces\n\tport := \"8080\"\n\n\t// Resolve the UDP address\n\taddr, err := net.ResolveUDPAddr(\"udp\", ip+\":\"+port)\n\tif err != nil {\n\t\tfmt.Printf(\"Error resolving address: %s\\n\", err)\n\t\treturn\n\t}\n\n\t// Listen for incoming UDP packets\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tfmt.Printf(\"Error starting UDP server: %s\\n\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfmt.Printf(\"UDP server listening on %s:%s\\n\", ip, port)\n\n\tbuffer := make([]byte, 1024)\n\n\tfor {\n\t\t// Read incoming message\n\t\tn, senderAddr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error reading from UDP: %s\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\t// Trim whitespace and print message and sender address\n\t\tmessage := strings.TrimSpace(string(buffer[:n]))\n\t\tfmt.Printf(\"Received message from %s: %s\\n\", senderAddr, message)\n\t}\n}"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, receives messages from clients, and echoes them back to the sender.\n\nFunction Description: The function sets up a UDP server that binds to a given port, continuously listens for incoming messages, and responds by sending the received message back to the client. It handles network errors gracefully and ensures resources are properly cleaned up.\n\nInput: \n- port [string] - The port number on which the UDP server should listen (e.g., \":10002\")\n\nOutput: \n- None (The function runs indefinitely until interrupted)\n- Error messages are printed to stdout if any occur during setup or operation\n\nNote: The function does not return any values but prints status and error messages to stdout. It runs in an infinite loop to handle continuous incoming UDP messages.\n\nThe function performs the following key operations:\n1. Resolves the UDP address using the provided port\n2. Creates and binds a UDP listener\n3. Sets up deferred cleanup for the connection\n4. Enters a loop to read incoming messages and echo them back\n5. Handles and reports any network errors that occur",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc main() {\n\tserverType := strings.ToLower(os.Getenv(\"serverType\"))\n\n\tif serverType == \"udp\" {\n\t\tServerAddr, err := net.ResolveUDPAddr(\"udp\", \":10002\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Started UDP server on port 10002\")\n\n\t\tServerConn, err := net.ListenUDP(\"udp\", ServerAddr)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tdefer ServerConn.Close()\n\n\t\tbuf := make([]byte, 1024)\n\n\t\tfor {\n\t\t\tn, addr, err := ServerConn.ReadFromUDP(buf)\n\t\t\tfmt.Printf(\"received: %s from: %s\\n\", string(buf[0:n]), addr)\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"error: \", err)\n\t\t\t}\n\n\t\t\tServerConn.WriteTo(buf[0:n], addr)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc startUDPEchoServer(port string) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", port)\n\tif err != nil {\n\t\tfmt.Printf(\"Error resolving address: %v\\n\", err)\n\t\treturn\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tfmt.Printf(\"Error starting UDP server: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfmt.Printf(\"UDP echo server started on %s\\n\", port)\n\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, clientAddr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error reading from UDP: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tmessage := buffer[:n]\n\t\tfmt.Printf(\"Received message from %s: %s\\n\", clientAddr, string(message))\n\n\t\t_, err = conn.WriteToUDP(message, clientAddr)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error writing to UDP: %v\\n\", err)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tstartUDPEchoServer(\":10002\")\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and returns a simple text response.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" message to the response writer. The `main` function sets up the HTTP server by registering the handler and starting the server on port 8080.\n\nInput: \n- `w http.ResponseWriter`: Used to write the HTTP response.\n- `r *http.Request`: Contains information about the incoming HTTP request.\n\nOutput: \n- The `handler` function writes \"Hello World, I'm Golang!\" to the response writer (`w`).\n- The `main` function starts an HTTP server that listens on port 8080 and serves the response from the `handler` function.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Go function that implements a basic HTTP server which responds to all requests with a repeated character response of specified size.\n\nFunction Description: The function should start an HTTP server on a specified port that handles all incoming requests by writing a response consisting of a repeated character ('a') with a length determined by the responseSize parameter. The server should log any errors that occur during writing or server startup.\n\nInput: \n- serverPort: string - The port number on which the HTTP server should listen (e.g., \"8080\")\n- responseSize: int - The size/length of the response to be generated (number of 'a' characters to repeat)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are logged to stdout if any occur during server operation\n\nNote: The function doesn't explicitly return values but runs an HTTP server that handles requests and may log errors. The response is written directly to the http.ResponseWriter for each incoming request.\n\nExample usage:\n```go\nfunc main() {\n    startHTTPServer(\"8080\", 1024)  // Starts server on port 8080 with 1024-byte responses\n}\n```",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresponse := bytes.Repeat([]byte(\"a\"), int(*responseSize))\n\taddr := \"localhost:\" + *serverPort\n\tlog.Println(\"Starting HTTP server on:\", addr)\n\tlserr := http.ListenAndServe(addr, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t_, werr := w.Write(response)\n\t\tif werr != nil {\n\t\t\tlog.Println(werr)\n\t\t}\n\t}))\n\tif lserr != nil {\n\t\tlog.Println(lserr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc startHTTPServer(serverPort string, responseSize int) {\n\thandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tresponse := strings.Repeat(\"a\", responseSize)\n\t\t_, err := w.Write([]byte(response))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error writing response: %v\", err)\n\t\t}\n\t}\n\n\thttp.HandleFunc(\"/\", handler)\n\taddr := fmt.Sprintf(\":%s\", serverPort)\n\tlog.Printf(\"Starting server on port %s\", serverPort)\n\terr := http.ListenAndServe(addr, nil)\n\tif err != nil {\n\t\tlog.Printf(\"Error starting server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes and ports concurrently, with specific handlers for different endpoints. The server should mirror incoming requests (displaying request details) by default and respond with \"hello\" for specific pipeline activity routes.\n\nFunction Description: The main function sets up an HTTP server with multiple handlers and listens on multiple ports concurrently. It includes:\n1. A simple helloHandler that responds with \"hello\"\n2. A mirrorHandler that displays detailed request information\n3. Concurrent server instances on ports 9091-9097\n4. A primary server instance on port 9098\n\nInput: None (The functions handle HTTP requests which contain their own input data)\n\nOutput: None (The functions write responses to http.ResponseWriter)\n\nMethods:\n\nhelloHandler: func(w http.ResponseWriter, req *http.Request) - Responds with \"hello\" string\nmirrorHandler: func(w http.ResponseWriter, req *http.Request) - Displays detailed request information including method, URL, headers, and body\nListenAndServe: Called on multiple ports to start HTTP servers concurrently\n\nNote: The code uses http.HandleFunc to register routes and starts servers on multiple ports using goroutines for concurrent operation. The mirrorHandler includes a 10ms delay and outputs request details to both the response and stdout using a TeeWriter.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\thelloHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\tio.WriteString(w, \"hello\")\n\t}\n\tmirrorHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\ttime.Sleep(10 * time.Millisecond)\n\t\tbody, err := io.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tbody = []byte(fmt.Sprintf(\"<read failed: %v>\", err))\n\t\t}\n\n\t\ttw := NewTeeWriter(w, os.Stdout)\n\n\t\turl := req.URL.Path\n\t\tif req.URL.Query().Encode() != \"\" {\n\t\t\turl += \"?\" + req.URL.Query().Encode()\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Your Request\")\n\t\tfmt.Fprintln(tw, \"==============\")\n\t\tfmt.Fprintln(tw, \"Method:\", req.Method)\n\t\tfmt.Fprintln(tw, \"URL   :\", url)\n\n\t\tfmt.Fprintln(tw, \"Header:\")\n\t\tfor k, v := range req.Header {\n\t\t\tfmt.Fprintf(tw, \"    %s: %v\\n\", k, v)\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Body  :\", string(body))\n\t}\n\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\thttp.HandleFunc(\"/pipeline/activity/1\", helloHandler)\n\thttp.HandleFunc(\"/pipeline/activity/2\", helloHandler)\n\n\tfor _, port := range []int{9091, 9092, 9093, 9094, 9095, 9096, 9097} {\n\t\tgo http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}\n\n\thttp.ListenAndServe(\":9098\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc helloHandler(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello\")\n}\n\nfunc mirrorHandler(w http.ResponseWriter, req *http.Request) {\n\ttime.Sleep(10 * time.Millisecond)\n\tbody, _ := io.ReadAll(req.Body)\n\treq.Body = io.NopCloser(strings.NewReader(string(body)))\n\n\ttee := io.MultiWriter(w, log.Writer())\n\n\tfmt.Fprintf(tee, \"Method: %s\\n\", req.Method)\n\tfmt.Fprintf(tee, \"URL: %s\\n\", req.URL)\n\tfmt.Fprintf(tee, \"Header: %v\\n\", req.Header)\n\tif len(body) > 0 {\n\t\tfmt.Fprintf(tee, \"Body:\\n%s\\n\", body)\n\t}\n\tfmt.Fprintf(tee, \"\\n\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/hello\", helloHandler)\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\n\tports := []string{\"9091\", \"9092\", \"9093\", \"9094\", \"9095\", \"9096\", \"9097\"}\n\tfor _, port := range ports {\n\t\tgo func(p string) {\n\t\t\tlog.Printf(\"Starting server on port %s\", p)\n\t\t\terr := http.ListenAndServe(\":\"+p, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to start server on port %s: %v\", p, err)\n\t\t\t}\n\t\t}(port)\n\t}\n\n\tlog.Println(\"Starting primary server on port 9098\")\n\terr := http.ListenAndServe(\":9098\", nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to start primary server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Go HTTP server that handles incoming requests, processes JSON payloads, and returns a modified response with a large body and custom headers.\n\nFunction Description: The main function sets up an HTTP server that listens on port 10000. It defines a handler for the root path (\"/\") that:\n1. Reads and closes the request body\n2. Unmarshals the JSON body into a contextEntity struct\n3. Modifies the response status, headers, and body\n4. Marshals the modified contextEntity back to JSON and sends it as the response\n5. Handles errors appropriately with status codes\n\nInput: \n- HTTP requests with JSON body containing a contextEntity structure\n- The handler expects the request body to be a valid JSON representation of contextEntity\n\nOutput:\n- HTTP responses with:\n  - Status 200 on success with modified JSON payload\n  - Status 400 for bad requests (invalid JSON or read errors)\n  - Status 500 for internal server errors (marshaling failures)\n- Response includes:\n  - Custom header \"X-Remote-Name: G.O.O.D\"\n  - Large body (64KB of '-' characters)\n  - Modified contextEntity structure as JSON",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tlargeBodySize := 64 * 1024\n\tlargeBody := bytes.Repeat([]byte(`-`), largeBodySize)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer r.Body.Close()\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity := &contextEntity{}\n\t\terr = json.Unmarshal(body, ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity.Response.StatusCode = 200\n\t\tctxEntity.Response.Header.Add(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tctxEntity.Response.Body = largeBody\n\n\t\tbuff, err := json.Marshal(ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write(buff)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nconst largeBodySize = 64 * 1024 // 64KB\n\ntype contextEntity struct {\n\tID   string `json:\"id,omitempty\"`\n\tType string `json:\"type,omitempty\"`\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Read and close the request body\n\t\tvar body []byte\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tr.Body.Close()\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Failed to read request body\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\t// Unmarshal JSON into contextEntity\n\t\tvar entity contextEntity\n\t\tif err := json.Unmarshal(body, &entity); err != nil {\n\t\t\thttp.Error(w, \"Invalid JSON format\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\t// Modify the entity\n\t\tentity.ID += \"-modified\"\n\t\tentity.Type += \"-modified\"\n\n\t\t// Create a large body of '-' characters\n\t\tlargeBody := strings.Repeat(\"-\", largeBodySize)\n\n\t\t// Marshal the modified entity back to JSON\n\t\tmodifiedJSON, err := json.Marshal(entity)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Failed to marshal response\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\t// Set custom headers\n\t\tw.Header().Set(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\n\t\t// Write the response status\n\t\tw.WriteHeader(http.StatusOK)\n\n\t\t// Write the large body followed by the JSON content\n\t\tfmt.Fprintf(w, \"%s\\n%s\", largeBody, modifiedJSON)\n\t})\n\n\t// Start the server on port 10000\n\tfmt.Println(\"Server is listening on :10000\")\n\tif err := http.ListenAndServe(\":10000\", nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a POST request and serves an HTML form for file submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it serves an HTML form (rendered from a template). For POST requests, it processes file uploads by saving the uploaded file to the filesystem.\n\nInput:\n- None (The function takes no direct input parameters, but handles HTTP requests with the following characteristics:\n  - GET requests to \"/\" trigger form rendering\n  - POST requests to \"/\" with a \"file\" form field trigger file upload processing)\n\nOutput:\n- None (The function doesn't return any value, but has the following side effects:\n  - Starts an HTTP server on port 9000\n  - Writes responses to http.ResponseWriter\n  - Creates files on the filesystem for successful uploads)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\ttpl, err := template.ParseFiles(\"form.gohtml\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tif req.Method == \"POST\" {\n\t\t\tsrc, _, err := req.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer src.Close()\n\n\t\t\tdst, err := os.Create(filepath.Join(\"./\", \"file.txt\"))\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\terr = tpl.Execute(res, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20)\n\t\t\tfile, handler, err := r.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\tdst, err := os.Create(handler.Filename)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Unable to save the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tif _, err := io.Copy(dst, file); err != nil {\n\t\t\t\thttp.Error(w, \"Error saving the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfmt.Fprintf(w, \"File %s uploaded successfully\", handler.Filename)\n\t\t\treturn\n\t\t}\n\n\t\tconst form = `<html><body><form enctype=\"multipart/form-data\" method=\"post\">\n<input type=\"file\" name=\"file\"><input type=\"submit\" value=\"Upload\">\n</form></body></html>`\n\t\ttmpl, _ := template.New(\"form\").Parse(form)\n\t\ttmpl.Execute(w, nil)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a simple HTTP server in Go that sets a cookie when the root path (\"/\") is accessed.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. When a request is made to the root path, it responds by setting a cookie named \"my-cookie\" with the value \"some value\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\thttp.SetCookie(res, &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t})\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t})\n\t\tfmt.Fprintf(w, \"Cookie set!\")\n\t})\n\n\tfmt.Println(\"Server listening on port 9000\")\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a function that serves a genesis file over HTTP on a specified port, setting the appropriate content type and handling the file serving.\n\nFunction Description: The function `ServeGenesisFileAtPort` creates a basic HTTP server that serves a specified genesis file when requested at the `/genesis.car` endpoint. The server sets the content type to `application/octet-stream` and uses the `http.ServeFile` function to handle the file serving. The server runs on the specified port and panics if it fails to start.\n\nInput:  \n- `genesisFilePath` (string): The file path to the genesis file that will be served.  \n- `port` (int): The port number on which the HTTP server will listen.  \n\nOutput:  \n- None (the function does not return; it panics if the server fails to start).",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\tpanic(http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\n\taddr := fmt.Sprintf(\":%d\", port)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Create a Go HTTP server that acts as a proxy, forwarding requests based on a header value and returning the corresponding stored response.\n\nFunction Description: The main function sets up an HTTP server with a root handler that retrieves and forwards responses based on the \"proxify\" header. It stores responses in a global map and cleans up after forwarding. The server runs concurrently.\n\nInput: \n- options.HTTPListenerAddress (string): The address and port on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (the function runs indefinitely as a server)\n- Errors are logged fatally if the server fails to start\n\nNote: The implementation uses global variables (response and responses) for storing and retrieving HTTP responses. The handler expects requests to contain a \"proxify\" header that serves as a key to look up pre-stored responses in the responses map. After forwarding a response, it removes the corresponding entry from the map.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"io\"\n)\n\nvar (\n\tresponse   *http.Response\n\tresponses  map[string]*http.Response\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tkey := req.Header.Get(\"proxify\")\n\t\tresponse := responses[key]\n\t\tdelete(responses, key)\n\n\t\tfor k, v := range response.Header {\n\t\t\tw.Header().Add(k, strings.Join(v, \"; \"))\n\t\t}\n\t\tw.WriteHeader(response.StatusCode)\n\t\tio.Copy(w, response.Body)\n\t})\n\tgo func() {\n\t\tif err := http.ListenAndServe(options.HTTPListenerAddress, nil); err != nil {\n\t\t\tgologger.Fatal().Msgf(\"Could not listen and serve: %s\\n\", err)\n\t\t}\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tresponses = make(map[string]*http.Response)\n\tmu        sync.RWMutex{}\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tkey := r.Header.Get(\"proxify\")\n\t\tif key == \"\" {\n\t\t\thttp.Error(w, \"missing proxify header\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tmu.RLock()\n\t\tresp, ok := responses[key]\n\t\tmu.RUnlock()\n\n\t\tif !ok {\n\t\t\thttp.Error(w, \"response not found\", http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\n\t\tdefer func() {\n\t\t\tmu.Lock()\n\t\t\tdelete(responses, key)\n\t\t\tmu.Unlock()\n\t\t}()\n\n\t\tfor k, v := range resp.Header {\n\t\t\tw.Header()[k] = v\n\t\t}\n\t\tw.WriteHeader(resp.StatusCode)\n\t\tresp.Write(w)\n\t})\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a Go HTTP server that serves as an interface for running and displaying scorecard results for GitHub repositories. The server should handle requests, process repository information, execute scorecard checks, and return results in either JSON or HTML format based on the request's content type.\n\nFunction Description: The `serveCmd` function creates and configures a Cobra command that starts an HTTP server. The server listens for requests, processes GitHub repository URLs, runs scorecard checks on those repositories, and returns the results. The function handles template parsing, route registration, and server startup.\n\nInput: \n- `o *options.Options`: A pointer to an options struct containing configuration settings like log level and commit depth\n\nOutput: \n- `*cobra.Command`: Returns a configured Cobra command that can be executed to start the HTTP server\n\nThe function does not explicitly return any values from its Run method, but it does:\n1. Write HTTP responses to the client (through http.ResponseWriter)\n2. Output logs through the logger\n3. May panic in case of critical errors during template parsing or server startup",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/ossf/scorecard/v5/clients/githubrepo\"\n\t\"github.com/ossf/scorecard/v5/clients/ossfuzz\"\n\t\"github.com/ossf/scorecard/v5/log\"\n\t\"github.com/ossf/scorecard/v5/options\"\n\t\"github.com/ossf/scorecard/v5/pkg/scorecard\"\n)\nfunc serveCmd(o *options.Options) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve the scorecard program over http\",\n\t\tLong:  ``,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tlogger := log.NewLogger(log.ParseLevel(o.LogLevel))\n\n\t\t\tt, err := template.New(\"webpage\").Parse(tpl)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"parsing webpage template\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\thttp.HandleFunc(\"/\", func(rw http.ResponseWriter, r *http.Request) {\n\t\t\t\trepoParam := r.URL.Query().Get(\"repo\")\n\t\t\t\tconst length = 3\n\t\t\t\ts := strings.SplitN(repoParam, \"/\", length)\n\t\t\t\tif len(s) != length {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\trepo, err := githubrepo.MakeGithubRepo(repoParam)\n\t\t\t\tif err != nil {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\tctx := r.Context()\n\t\t\t\trepoClient := githubrepo.CreateGithubRepoClient(ctx, logger)\n\t\t\t\tossFuzzRepoClient, err := ossfuzz.CreateOSSFuzzClientEager(ossfuzz.StatusURL)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"initializing clients\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t\tdefer ossFuzzRepoClient.Close()\n\t\t\t\trepoResult, err := scorecard.Run(ctx, repo,\n\t\t\t\t\tscorecard.WithCommitDepth(o.CommitDepth),\n\t\t\t\t\tscorecard.WithRepoClient(repoClient),\n\t\t\t\t\tscorecard.WithOSSFuzzClient(ossFuzzRepoClient),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"running enabled scorecard checks on repo\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\n\t\t\t\tif r.Header.Get(\"Content-Type\") == \"application/json\" {\n\t\t\t\t\tif err := repoResult.AsJSON(o.ShowDetails, log.ParseLevel(o.LogLevel), rw); err != nil {\n\t\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := t.Execute(rw, repoResult); err != nil {\n\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t}\n\t\t\t})\n\t\t\tport := os.Getenv(\"PORT\")\n\t\t\tif port == \"\" {\n\t\t\t\tport = \"8080\"\n\t\t\t}\n\t\t\tlogger.Info(\"Listening on localhost:\" + port + \"\\n\")\n\t\t\terr = http.ListenAndServe(fmt.Sprintf(\"0.0.0.0:%s\", port), nil)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"listening and serving\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t},\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package cmd\n\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nfunc serveCmd(o *options.Options) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Start an HTTP server to run and display scorecard results for GitHub repos\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\t// Set log level\n\t\t\tlog.SetFlags(0)\n\t\t\tif o.Verbose {\n\t\t\t\tlog.SetFlags(log.LstdFlags)\n\t\t\t}\n\n\t\t\t// Parse templates\n\t\t\ttemplateDir := \"./templates\"\n\t\t\ttmpl, err := template.ParseGlob(filepath.Join(templateDir, \"*.tmpl\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to parse templates: %v\", err)\n\t\t\t}\n\n\t\t\t// Define handler function\n\t\t\thttp.HandleFunc(\"/scorecard\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\trepoURL := r.URL.Query().Get(\"repo\")\n\t\t\t\tif repoURL == \"\" {\n\t\t\t\t\thttp.Error(w, \"Missing 'repo' query parameter\", http.StatusBadRequest)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Run scorecard checks (mock implementation)\n\t\t\t\tresult := mockRunScorecard(repoURL, o.CommitDepth)\n\n\t\t\t\t// Determine response format\n\t\t\t\taccept := r.Header.Get(\"Accept\")\n\t\t\t\tif accept == \"application/json\" || r.URL.Query().Get(\"format\") == \"json\" {\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\t\t\tif err := json.NewEncoder(w).Encode(result); err != nil {\n\t\t\t\t\t\thttp.Error(w, \"Failed to encode JSON response\", http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t\t\t\tif err := tmpl.ExecuteTemplate(w, \"scorecard.tmpl\", result); err != nil {\n\t\t\t\t\t\thttp.Error(w, \"Failed to render template\", http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Start the server\n\t\t\taddr := \":8080\"\n\t\t\tlog.Printf(\"Starting server on %s\", addr)\n\t\t\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t\t\t}\n\t\t},\n\t}\n}\n\n// Mock function to simulate running scorecard checks\nfunc mockRunScorecard(repo string, depth int) interface{} {\n\t// In a real implementation, this would call actual scorecard logic\n\treturn struct {\n\t\tRepo   string\n\t\tScore  float64\n\t\tChecks []string\n\t}{\n\t\tRepo:   repo,\n\t\tScore:  9.5,\n\t\tChecks: []string{\"License\", \"CI-Tests\", \"Code-Review\", \"Signed-Releases\"},\n\t}\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Go HTTP server that handles Stripe webhook events, specifically processing billing meter error reports and other event types.\n\nFunction Description: The main function sets up an HTTP server with a \"/webhook\" endpoint that receives and processes Stripe webhook events. It validates the webhook signature, retrieves full event details from Stripe, and handles specific event types (particularly \"v1.billing.meter.error_report_triggered\").\n\nInput:\n- HTTP POST requests to \"/webhook\" endpoint containing:\n  - Request body with Stripe event payload (JSON format)\n  - \"Stripe-Signature\" header for webhook validation\n- Environment variables:\n  - apiKey: Stripe API key for authentication\n  - webhookSecret: Secret for validating webhook signatures\n\nOutput:\n- HTTP responses:\n  - 200 OK for successful processing\n  - 500 Internal Server Error for any processing failures\n- Console output:\n  - Success messages with meter IDs for handled events\n  - Error messages for any processing failures\n  - Notifications for unhandled event types\n\nThe function does not explicitly return values but writes to the HTTP response and console.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v81\"\n\tbillingMeters \"github.com/stripe/stripe-go/v81/billing/meter\"\n\t\"github.com/stripe/stripe-go/v81/rawrequest\"\n\twebhook \"github.com/stripe/stripe-go/v81/webhook\"\n)\nfunc main() {\n\tb, err := stripe.GetRawRequestBackend(stripe.APIBackend)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tclient := rawrequest.Client{B: b, Key: apiKey}\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, req *http.Request) {\n\t\tconst MaxBodyBytes = int64(65536)\n\t\treq.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)\n\t\tpayload, err := ioutil.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\terr = webhook.ValidatePayload(payload, req.Header.Get(\"Stripe-Signature\"), webhookSecret)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tvar thinEvent map[string]interface{}\n\n\t\tif err := json.Unmarshal(payload, &thinEvent); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse thin event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\teventID := thinEvent[\"id\"].(string)\n\n\t\tvar event map[string]interface{}\n\n\t\tresp, err := client.RawRequest(http.MethodGet, \"/v2/core/events/\"+eventID, \"\", nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get pull event: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tif err := json.Unmarshal(resp.RawJSON, &event); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse pull event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tswitch t := event[\"type\"].(string); t {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\trelatedObject := event[\"related_object\"].(map[string]interface{})\n\t\t\tmeter, err := billingMeters.Get(relatedObject[\"id\"].(string), nil)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get related meter object: %v\\n\", err.Error())\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmeterID := meter.ID\n\t\t\tfmt.Printf(\"Success! %s\\n\", meterID)\n\t\t\tfmt.Println(fmt.Sprint(event[\"data\"]))\n\t\tdefault:\n\t\t\tfmt.Fprintf(os.Stderr, \"Unhandled event type: %s\\n\", t)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\terr = http.ListenAndServe(\":4242\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v72\"\n\t\"github.com/stripe/stripe-go/v72/webhook\"\n)\n\nconst (\n\tapiKey        = \"your-stripe-api-key\"\n\twebhookSecret = \"your-webhook-secret\"\n)\n\nfunc handleWebhook(w http.ResponseWriter, r *http.Request) {\n\tsig := r.Header.Get(\"Stripe-Signature\")\n\tbody, err := bufio.NewReader(r.Body).ReadBytes('\\x00')\n\tif err != nil {\n\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\tlog.Println(\"Error reading request body:\", err)\n\t\treturn\n\t}\n\n\tevent, err := webhook.ConstructEvent(body, sig, webhookSecret)\n\tif err != nil {\n\t\thttp.Error(w, \"Invalid signature\", http.StatusBadRequest)\n\t\tlog.Printf(\"Failed to validate webhook signature: %v\", err)\n\t\treturn\n\t}\n\n\tstripe.Key = apiKey\n\tretrievedEvent, err := stripe.Events.Get(event.ID, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Failed to retrieve event from Stripe\", http.StatusInternalServerError)\n\t\tlog.Printf(\"Failed to retrieve event from Stripe: %v\", err)\n\t\treturn\n\t}\n\n\tswitch retrievedEvent.Type {\n\tcase \"v1.billing.meter.error_report_triggered\":\n\t\tvar meterError stripe.BillingMeterErrorReport\n\t\terr := json.Unmarshal(retrievedEvent.Data.Raw, &meterError)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error parsing meter error report\", http.StatusInternalServerError)\n\t\t\tlog.Printf(\"Error parsing meter error report: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Handled billing meter error report for meter ID: %s\", meterError.MeterID)\n\tdefault:\n\t\tlog.Printf(\"Unhandled event type: %s\", retrievedEvent.Type)\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprintf(w, \"OK\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/webhook\", handleWebhook)\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\tlog.Printf(\"Server starting on port %s...\", port)\n\tlog.Fatal(http.ListenAndServe(\":\"+port, nil))\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles user authentication through cookies, displaying different HTML content based on login status.\n\nFunction Description: The main function sets up an HTTP server with a single route handler that manages user authentication. It checks for a \"logged-in\" cookie, processes login/logout requests, and serves different HTML content based on the authentication status.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but serves HTTP responses and maintains server state)\n\nNote: The function handles three main scenarios:\n1. Initial visit (no cookie set)\n2. Successful login (POST with correct password)\n3. Logout request (/logout path)\nFor each scenario, it sets appropriate cookies and returns corresponding HTML content.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"logged-in\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"logged-in\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\n\t\tif req.Method == \"POST\" {\n\t\t\tpassword := req.FormValue(\"password\")\n\t\t\tif password == \"secret\" {\n\t\t\t\tcookie = &http.Cookie{\n\t\t\t\t\tName:  \"logged-in\",\n\t\t\t\t\tValue: \"1\",\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif req.URL.Path == \"/logout\" {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:   \"logged-in\",\n\t\t\t\tValue:  \"0\",\n\t\t\t\tMaxAge: -1,\n\t\t\t}\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\t\tvar html string\n\n\t\tif cookie.Value == strconv.Itoa(0) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1>LOG IN</h1>\n\t\t\t<form method=\"post\" action=\"http://localhost:9000/\">\n\t\t\t\t<h3>User name</h3>\n\t\t\t\t<input type=\"text\" name=\"userName\" id=\"userName\">\n\t\t\t\t<h3>Password</h3>\n\t\t\t\t<input type=\"text\" name=\"password\" id=\"password\">\n\t\t\t\t<br>\n\t\t\t\t<input type=\"submit\">\n\t\t\t\t<input type=\"submit\" name=\"logout\" value=\"logout\">\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tif cookie.Value == strconv.Itoa(1) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1><a href=\"http://localhost:9000/logout\">LOG OUT</a></h1>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tio.WriteString(res, html)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"logged-in\")\n\t\tisLoggedIn := err == nil && cookie.Value == \"true\"\n\n\t\tif r.URL.Path == \"/logout\" {\n\t\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\t\tName:   \"logged-in\",\n\t\t\t\tValue:  \"false\",\n\t\t\t\tPath:   \"/\",\n\t\t\t\tMaxAge: -1,\n\t\t\t})\n\t\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tpassword := r.FormValue(\"password\")\n\t\t\tif password == \"secret123\" {\n\t\t\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\t\t\tName:   \"logged-in\",\n\t\t\t\t\tValue:  \"true\",\n\t\t\t\t\tPath:   \"/\",\n\t\t\t\t\tMaxAge: 3600,\n\t\t\t\t})\n\t\t\t\tisLoggedIn = true\n\t\t\t}\n\t\t}\n\n\t\tvar htmlContent string\n\t\tif isLoggedIn {\n\t\t\thtmlContent = `\n\t\t\t\t<h1>Welcome!</h1>\n\t\t\t\t<p>You are logged in.</p>\n\t\t\t\t<a href=\"/logout\">Logout</a>\n\t\t\t`\n\t\t} else {\n\t\t\thtmlContent = `\n\t\t\t\t<h1>Login</h1>\n\t\t\t\t<form method=\"POST\">\n\t\t\t\t\t<label>Password:</label>\n\t\t\t\t\t<input type=\"password\" name=\"password\">\n\t\t\t\t\t<input type=\"submit\" value=\"Login\">\n\t\t\t\t</form>\n\t\t\t\t<p>Try with password: secret123</p>\n\t\t\t`\n\t\t}\n\n\t\tfullHTML := fmt.Sprintf(\"<html><body>%s</body></html>\", htmlContent)\n\t\tfmt.Fprintf(w, fullHTML)\n\t})\n\n\tfmt.Println(\"Server is running on http://localhost:8080\")\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a simple HTTP server in Go that tracks and displays the number of visits by maintaining a cookie-based counter.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles incoming requests. For each request, it checks for a cookie named \"my-cookie\". If the cookie doesn't exist, it creates one with an initial value of \"0\". The function increments the cookie value on each visit and sends it back in the response, effectively maintaining a visit counter.\n\nInput: None (The function takes no direct input parameters. It responds to HTTP requests received on port 9000.)\n\nOutput: None (The function doesn't return any value. It writes the current visit count to the HTTP response and sets/updates the cookie in the response header.)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"my-cookie\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"my-cookie\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\tcount++\n\t\tcookie.Value = strconv.Itoa(count)\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, cookie.Value)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"my-cookie\")\n\t\tif err != nil {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"my-cookie\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\n\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\tcount++\n\t\tcookie.Value = strconv.Itoa(count)\n\n\t\thttp.SetCookie(w, cookie)\n\t\tfmt.Fprintf(w, \"Visit count: %s\", cookie.Value)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server with health check and metrics endpoints using Go's net/http package.\n\nFunction Description: The function `serveMetrics` initializes an HTTP server with two endpoints: `/healthz` for health checks (returns \"OK\" with 200 status) and `/metrics` for Prometheus metrics (handled by promhttp). The server listens on the specified address and runs until terminated.\n\nInput: \n- `address` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (function runs indefinitely until server termination)\n- Logs fatal errors if server fails to start",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tlog.Fatal(http.ListenAndServe(address, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tfmt.Fprintf(w, \"OK\")\n\t})\n\n\treg := prometheus.NewRegistry()\n\t// Optionally register some default metrics\n\treg.MustRegister(prometheus.NewGoCollector())\n\treg.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{}))\n\n\thttp.Handle(\"/metrics\", promhttp.HandlerFor(reg, promhttp.HandlerOpts{Registry: reg}))\n\n\tlog.Printf(\"Starting metrics server on %s\", address)\n\tif err := http.ListenAndServe(address, nil); err != nil {\n\t\tlog.Fatalf(\"Failed to start metrics server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles form submissions and displays a simple HTML form.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form. For POST requests, it reads the form value and prints it to the console while still displaying the form. The server listens on port 9000.\n\nInput: None (The function takes no direct input parameters, but receives HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but writes to the HTTP response and prints to console)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t <input type=\"text\" name=\"q\">\n\t\t <input type=\"submit\">\n\n\t\t</form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tvalue := r.FormValue(\"input\")\n\t\t\tfmt.Println(\"Received value:\", value)\n\t\t}\n\t\tfmt.Fprintf(w, `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head><title>Form</title></head>\n\t\t\t<body>\n\t\t\t\t<form method=\"POST\">\n\t\t\t\t\t<input type=\"text\" name=\"input\" />\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>\n\t\t`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and starts an HTTP server listening on port 8080.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response.\n- `r *http.Request` - Represents the HTTP request received from the client.\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles form submissions and displays the submitted value. The server should respond to both GET and POST requests on the root path (\"/\") and render an HTML form with a checkbox input.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path (\"/\"). The handler processes form submissions, extracts the form value, and returns an HTML response containing the form and the submitted value.\n\nInput: None (The function takes no direct input parameters. Input is received through HTTP requests.)\n\nOutput: None (The function doesn't return any value. Output is sent through the HTTP response writer.)\n\nNote: The function internally uses http.ResponseWriter to send responses and *http.Request to receive requests. The handler checks for a form value with key \"q\" and includes it in the response. The server listens on port 9000.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t<input type=\"checkbox\" name=\"q\">\n\t\t<input type=\"submit\">\n\n\t\t</form>`+val)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tvar value string\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tvalue = r.FormValue(\"q\")\n\t\t}\n\t\tfmt.Fprintf(w, `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head><title>Checkbox Form</title></head>\n\t\t\t<body>\n\t\t\t\t<form method=\"post\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"q\" value=\"checked\" %s> Check me\n\t\t\t\t\t</label>\n\t\t\t\t\t<br>\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\">\n\t\t\t\t</form>\n\t\t\t\t<p>Submitted value: %s</p>\n\t\t\t</body>\n\t\t\t</html>\n\t\t`, checkedAttr(value), value)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}\n\nfunc checkedAttr(val string) string {\n\tif val == \"checked\" {\n\t\treturn `checked`\n\t}\n\treturn \"\"\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with \"hello world\".\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. The handler writes \"hello world\" as the response. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters; requests are handled via HTTP)\n\nOutput: None (The function doesn't return anything; responses are written to the http.ResponseWriter)\n\nNote: The reference code shows a complete implementation where:\n1. A handler function is defined to write \"hello world\" response\n2. The handler is registered for the root path \"/\"\n3. The server starts listening on port 8080",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nvar myHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\"hello world\")) })\n\nfunc main() {\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"hello world\")\n\t})\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a Go HTTP server that implements WebDAV functionality with custom logging and special handling for specific HTTP headers.\n\nStruct Description: The webdav.Handler struct provides WebDAV server functionality with in-memory storage for files and locks. We'll wrap this with custom request handling.\n\nFields:\n- FileSystem: webdav.FileSystem - In-memory filesystem implementation\n- LockSystem: webdav.LockSystem - In-memory lock system implementation\n- Logger: func(*http.Request, error) - Custom logging function for request tracking\n\nMethods:\n- ServeHTTP: (http.ResponseWriter, *http.Request) -> () - Main handler method that processes HTTP requests\n- NewMemFS: () -> webdav.FileSystem - Creates new in-memory filesystem\n- NewMemLS: () -> webdav.LockSystem - Creates new in-memory lock system\n\nAdditional Functions:\n- main: () -> () - Entry point that sets up the server and routes\n- requestHandler: (http.ResponseWriter, *http.Request) -> () - Custom middleware for special header handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"golang.org/x/net/webdav\"\n)\n\ntype webdavHandler struct {\n\tFileSystem  webdav.FileSystem\n\tLockSystem  webdav.LockSystem\n\tLogger      func(*http.Request, error)\n}\n\nfunc (h *webdavHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\thandler := &webdav.Handler{\n\t\tFS:     h.FileSystem,\n\t\tLockSystem: h.LockSystem,\n\t}\n\th.Logger(r, nil)\n\thandler.ServeHTTP(w, r)\n}\n\nfunc NewMemFS() webdav.FileSystem {\n\treturn webdav.NewMemFS()\n}\n\nfunc NewMemLS() webdav.LockSystem {\n\treturn webdav.NewMemLS()\n}\n\nfunc requestHandler(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Special-Header\") == \"no-log\" {\n\t\t\tr = r.WithContext(context.WithValue(r.Context(), \"skipLog\", true))\n\t\t}\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nfunc main() {\n\tfs := NewMemFS()\n\tls := NewMemLS()\n\n\thandler := &webdavHandler{\n\t\tFileSystem: fs,\n\t\tLockSystem: ls,\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tif skipLog, ok := r.Context().Value(\"skipLog\").(bool); !ok || !skipLog {\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Request failed: %s %s - Error: %v\", r.Method, r.URL.Path, err)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"Handled request: %s %s\", r.Method, r.URL.Path)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/webdav/\", requestHandler(handler))\n\n\tlog.Println(\"Starting WebDAV server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a Go HTTP server that handles user sessions through cookies, specifically managing a session ID cookie that can be updated with a user's email address via form submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both displaying a form and processing form submissions. It manages a session cookie named \"session-id\" which initially has no value but can be updated with the user's email when submitted through the form. The function writes an HTML response containing the current cookie value and a form for submitting an email address.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests which may contain form data in the \"email\" field)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 9000 and responds to requests with HTML content and cookie operations)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"session-id\")\n\t\tif err != nil {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName: \"session-id\",\n\t\t\t}\n\t\t}\n\n\t\tif req.FormValue(\"email\") != \"\" {\n\t\t\tcookie.Value = req.FormValue(\"email\")\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, `<!DOCTYPE html>\n<html>\n  <body>\n    <form>\n    `+cookie.Value+`\n      <input type=\"email\" name=\"email\">\n      <input type=\"submit\">\n    </form>\n  </body>\n</html>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"text/template\"\n)\n\nconst page = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Session Manager</title>\n</head>\n<body>\n    <h1>Current Session ID: {{.CookieValue}}</h1>\n    <form method=\"POST\">\n        <label for=\"email\">Enter Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required>\n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n`\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"session-id\")\n\t\tif err != nil {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"session-id\",\n\t\t\t\tValue: \"\",\n\t\t\t}\n\t\t}\n\n\t\ttmpl, _ := template.New(\"page\").Parse(page)\n\t\tdata := struct {\n\t\t\tCookieValue string\n\t\t}{\n\t\t\tCookieValue: cookie.Value,\n\t\t}\n\n\t\tif r.Method == http.MethodPost {\n\t\t\temail := r.FormValue(\"email\")\n\t\t\tif email != \"\" {\n\t\t\t\tcookie.Value = email\n\t\t\t\thttp.SetCookie(w, cookie)\n\t\t\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\ttmpl.Execute(w, data)\n\t})\n\n\tfmt.Println(\"Server started on :9000\")\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Create a WebSocket server in Go that handles WebSocket connections, upgrades HTTP connections to WebSocket, and manages the connections.\n\nFunction Description: The code consists of two main functions: `StartWSServer` and `wsHandler`. `StartWSServer` initializes and starts an HTTP server that listens for WebSocket connections on a specified address. `wsHandler` is the HTTP handler function that upgrades incoming HTTP requests to WebSocket connections and processes them.\n\nInput: \n- `StartWSServer`: `address` (string) - The network address (e.g., \":8080\") on which the server will listen for incoming connections.\n- `wsHandler`: `w` (http.ResponseWriter) - Used to construct the HTTP response. `r` (*http.Request) - The HTTP request to be upgraded to a WebSocket connection.\n\nOutput: \n- `StartWSServer`: None (panics on error).\n- `wsHandler`: None (logs errors if the WebSocket upgrade fails).",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 65536,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc StartWSServer(address string) {\n\thttp.HandleFunc(\"/ws\", wsHandler)\n\terr := http.ListenAndServe(address, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\twsConn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlogger.Sugar.Error(err)\n\t\treturn\n\t}\n\n\tconn := &Conn{\n\t\tCoonType: ConnTypeWS,\n\t\tWS:       wsConn,\n\t}\n\tDoConn(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Printf(\"WebSocket upgrade error: %v\", err)\n\t\treturn\n\t}\n\tgo handleMessages(conn)\n}\n\nfunc handleMessages(conn *websocket.Conn) {\n\tfor {\n\t\tmessageType, p, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tif err := conn.WriteMessage(messageType, p); err != nil {\n\t\t\tlog.Printf(\"Write error: %v\", err)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc StartWSServer(address string) {\n\thttp.HandleFunc(\"/ws\", wsHandler)\n\tlog.Printf(\"Starting WebSocket server on %s\", address)\n\terr := http.ListenAndServe(address, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with plain text.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes a plain text response (\"Dog\") to the client. The handler also sets the Content-Type header to \"text/plain\".\n\nInput: None (The function takes no direct input parameters; it handles HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return anything; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tres.Header()[\"Content-Type\"] = []string{\"text/plain\"}\n\t\tfmt.Fprint(res, \"Dog\")\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprintf(w, \"Dog\")\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server to serve web content, including handling specific routes for examples and serving static files.\n\nFunction Description: The `serve` function initializes an HTTP server that handles multiple routes. It serves a home page, handles requests for WASM execution files, and processes example-related routes with dynamic content generation. The function uses Go's `net/http` package to create routes and serve content, including HTML templates and static files.\n\nInput: \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput:\n- `error`: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nThe function performs these key operations:\n1. Loads example data using `getExamples()`\n2. Sets up template handling for the home page and example pages\n3. Configures route handlers for:\n   - Root path (\"/\") serving the home page\n   - WASM execution file (\"/wasm_exec.js\")\n   - Example paths (\"/example/[type]/[link]/...\")\n4. Starts the HTTP server on the specified address",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\thomeTemplate := template.Must(template.ParseFiles(\"index.html\"))\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\turl := r.URL.Path\n\t\tif url == \"/wasm_exec.js\" {\n\t\t\thttp.FileServer(http.Dir(filepath.Join(build.Default.GOROOT, \"misc/wasm/\"))).ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(url, \"/\")\n\t\tif len(parts) > 4 &&\n\t\t\tparts[1] == \"example\" {\n\t\t\texampleType := parts[2]\n\t\t\texampleLink := parts[3]\n\t\t\tfor _, example := range *examples {\n\t\t\t\tif example.Link != exampleLink {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfiddle := filepath.Join(exampleLink, \"jsfiddle\")\n\t\t\t\tif len(parts[4]) != 0 {\n\t\t\t\t\thttp.StripPrefix(\"/example/\"+exampleType+\"/\"+exampleLink+\"/\", http.FileServer(http.Dir(fiddle))).ServeHTTP(w, r)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\ttemp := template.Must(template.ParseFiles(\"example.html\"))\n\t\t\t\t_, err := temp.ParseFiles(filepath.Join(fiddle, \"demo.html\"))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tdata := struct {\n\t\t\t\t\t*Example\n\t\t\t\t\tJS bool\n\t\t\t\t}{\n\t\t\t\t\texample,\n\t\t\t\t\texampleType == \"js\",\n\t\t\t\t}\n\n\t\t\t\terr = temp.Execute(w, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\terr := homeTemplate.Execute(w, examples)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\n// getExamples is a placeholder for whatever logic you have to load example data.\nfunc getExamples() map[string]interface{} {\n\treturn map[string]interface{}{\n\t\t\"type1\": []string{\"example1\", \"example2\"},\n\t\t\"type2\": []string{\"example3\", \"example4\"},\n\t}\n}\n\n// serve initializes and starts the HTTP server.\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\t// Serve static files from the \"static\" directory\n\tfs := http.FileServer(http.Dir(\"static\"))\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", fs))\n\n\t// Load templates\n\ttemplates := template.Must(template.ParseGlob(\"templates/*.html\"))\n\n\t// Root handler - home page\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif err := templates.ExecuteTemplate(w, \"home.html\", examples); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t})\n\n\t// WASM execution file\n\thttp.HandleFunc(\"/wasm_exec.js\", func(w http.ResponseWriter, r *http.Request) {\n\t\twasmExecPath := filepath.Join(os.Getenv(\"GOROOT\"), \"misc/wasm/wasm_exec.js\")\n\t\thttp.ServeFile(w, r, wasmExecPath)\n\t})\n\n\t// Example route handler\n\thttp.HandleFunc(\"/example/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tpath := r.URL.Path[len(\"/example/\"):]\n\t\tparts := make([]string, 0)\n\t\tfor len(path) > 0 {\n\t\t\ti := 0\n\t\t\tfor i < len(path) && path[i] != '/' {\n\t\t\t\ti++\n\t\t\t}\n\t\t\tif i == 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tparts = append(parts, path[:i])\n\t\t\tpath = path[i+1:]\n\t\t}\n\n\t\tif len(parts) >= 2 {\n\t\t\texampleType := parts[0]\n\t\t\texampleName := parts[1]\n\n\t\t\t// Check if this example type exists\n\t\t\texamplesList, ok := examples[exampleType].([]string)\n\t\t\tif !ok {\n\t\t\t\thttp.NotFound(w, r)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Check if this example name exists in the type\n\t\t\tfound := false\n\t\t\tfor _, name := range examplesList {\n\t\t\t\tif name == exampleName {\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !found {\n\t\t\t\thttp.NotFound(w, r)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Serve example content\n\t\t\tdata := map[string]interface{}{\n\t\t\t\t\"Type\":  exampleType,\n\t\t\t\t\"Name\":  exampleName,\n\t\t\t\t\"Title\": fmt.Sprintf(\"%s - %s\", exampleType, exampleName),\n\t\t\t}\n\t\t\tif err := templates.ExecuteTemplate(w, \"example.html\", data); err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t// If we reach here, the URL doesn't match an example pattern\n\t\thttp.NotFound(w, r)\n\t})\n\n\tfmt.Printf(\"Starting server on %s\\n\", addr)\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes with different authentication methods (Basic Auth and Bearer Token) and serves Prometheus metrics on authenticated endpoints.\n\nFunction Description: The main function sets up an HTTP server with three routes:\n1. Root (\"/\") route with a basic handler\n2. \"/metrics\" route protected by Basic Authentication\n3. \"/bearer-metrics\" route protected by Bearer Token authentication\nThe server listens on port 8080 and uses the net/http package for HTTP operations.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The implementation assumes the existence of two helper functions:\n1. checkBasicAuth(w http.ResponseWriter, r *http.Request) bool\n2. checkBearerAuth(w http.ResponseWriter, r *http.Request) bool\nwhich handle the respective authentication methods.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBasicAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Basic realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBearerAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Bearer realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\taddress := \":8080\"\n\n\t_ = http.ListenAndServe(address, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc checkBasicAuth(w http.ResponseWriter, r *http.Request) bool {\n\tuser, pass, ok := r.BasicAuth()\n\tif !ok || user != \"admin\" || pass != \"password\" {\n\t\tw.Header().Set(\"WWW-Authenticate\", `Basic realm=\"restricted\", charset=\"UTF-8\"`)\n\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc checkBearerAuth(w http.ResponseWriter, r *http.Request) bool {\n\tauth := r.Header.Get(\"Authorization\")\n\tif len(auth) < 7 || auth[:7] != \"Bearer \" {\n\t\thttp.Error(w, \"Missing or invalid token\", http.StatusUnauthorized)\n\t\treturn false\n\t}\n\ttoken := auth[7:]\n\tif token != \"valid_token_123\" {\n\t\thttp.Error(w, \"Invalid token\", http.StatusForbidden)\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc rootHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Welcome to the root endpoint!\")\n}\n\nfunc metricsHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"# HELP sample_metric A sample metric\\n# TYPE sample_metric gauge\\nsample_metric 42\\n\")\n}\n\nfunc authenticatedMetricsHandler(authCheck func(http.ResponseWriter, *http.Request) bool, handler http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tif authCheck(w, r) {\n\t\t\thandler(w, r)\n\t\t}\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", rootHandler)\n\thttp.HandleFunc(\"/metrics\", authenticatedMetricsHandler(checkBasicAuth, metricsHandler))\n\thttp.HandleFunc(\"/bearer-metrics\", authenticatedMetricsHandler(checkBearerAuth, metricsHandler))\n\n\tfmt.Println(\"Server starting on port 8080...\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles multiple routes with different functionalities, including a root route, a route to display request headers, and a route to show build information.\n\nFunction Description: The HTTP server will respond to different endpoints with specific behaviors:\n1. Root endpoint (\"/\") returns a greeting message\n2. \"/headers\" endpoint returns all request headers\n3. \"/api/buildstamp\" endpoint returns build information\n\nInput: \n- HTTP requests to specified endpoints (/, /headers, /api/buildstamp)\n- BuildStamp string variable containing build information\n\nOutput: \n- For \"/\": Plain text response \"hello, my name is Go~~\"\n- For \"/headers\": List of all request headers in \"name: value\" format\n- For \"/api/buildstamp\": Current value of BuildStamp variable\n- HTTP responses through the http.ResponseWriter interface",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar BuildStamp = \"No Build Stamp Provided\"\n\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello, my name is Go~~\\n\")\n}\n\nfunc headers(w http.ResponseWriter, req *http.Request) {\n\tfor name, headers := range req.Header {\n\t\tfor _, h := range headers {\n\t\t\tfmt.Fprintf(w, \"%v: %v\\n\", name, h)\n\t\t}\n\t}\n}\n\nfunc buildStamp(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"%s\", BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.HandleFunc(\"/api/buildstamp\", buildStamp)\n\thttp.HandleFunc(\"/headers\", headers)\n\n\thttp.ListenAndServe(\":20219\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar BuildStamp string = \"v1.0.0\"\n\nfunc rootHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"hello, my name is Go~~\")\n}\n\nfunc headersHandler(w http.ResponseWriter, r *http.Request) {\n\tfor name, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\tfmt.Fprintf(w, \"%s: %s\\n\", name, value)\n\t\t}\n\t}\n}\n\nfunc buildstampHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"%s\", BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", rootHandler)\n\thttp.HandleFunc(\"/headers\", headersHandler)\n\thttp.HandleFunc(\"/api/buildstamp\", buildstampHandler)\n\t\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- port [int] - The port number on which the HTTP server should listen\n\nOutput:\n- [chan string] - A channel that will receive the SDP data from incoming HTTP requests",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\t\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tbody, err := ioutil.ReadAll(r.Body)\n\t\t\tif err == nil {\n\t\t\t\tsdpChan <- string(body)\n\t\t\t\tfmt.Fprintf(w, \"done\")\n\t\t\t} else {\n\t\t\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t}\n\t})\n\t\n\tgo func() {\n\t\thttp.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}()\n\t\n\treturn sdpChan\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles requests to the root path (\"/\") and returns a welcome message combined with a predefined string variable and a version string.\n\nFunction Description: The main function sets up a basic HTTP server that listens on port 8080. It registers a handler function for the root path (\"/\") which writes a welcome message concatenated with a local string variable and a package-level version string to the response.\n\nInput: None (The HTTP server listens for incoming requests on the specified port)\n\nOutput: None (The function runs indefinitely, serving HTTP responses. The handler writes output to the http.ResponseWriter)\n\nNote: The reference code is at the package level (main package) rather than being encapsulated in a struct or class. The instruction follows the function-level format as requested.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\ta := \"hello \"\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"Welcome to my website! \", a, v)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar version = \"1.0.0\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tmessage := \"Welcome to the server - \"\n\t\tlocalString := \"Enhanced Experience\"\n\t\tfmt.Fprintf(w, \"%s%s v%s\", message, localString, version)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with \"Hello World!\" to all requests on the root path.\n\nFunction Description: The main function sets up an HTTP server that handles requests to the root path (\"/\") by responding with a \"Hello World!\" message. It uses the net/http package to register a handler function and start the server.\n\nInput: None (The function takes no direct input parameters, but the HTTP server will process incoming HTTP requests)\n\nOutput: None (The function doesn't return anything directly, but it will output \"Hello World!\" as an HTTP response to requests, and may output error messages to the log if the server fails to start)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc helloWorld(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path != \"/\" {\n\t\thttp.Error(w, \"404 not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\tfmt.Fprintf(w, \"Hello World!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", helloWorld)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with a simple greeting message to all incoming requests.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles all incoming requests. When a request is received, it writes a \"Hello!\" response. The server listens on port 80 and logs any errors that occur during startup.\n\nInput: None (The function takes no direct input parameters; configuration is hardcoded)\n\nOutput: None (The function doesn't return anything directly but starts a long-running HTTP server process that handles incoming requests and writes responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log/slog\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\tlog.Info(\"Starting server at port 80\")\n\tif err := http.ListenAndServe(\":80\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\tfmt.Println(\"Server is starting on port 80...\")\n\tif err := http.ListenAndServe(\":80\", nil); err != nil {\n\t\tfmt.Printf(\"Error starting server: %s\\n\", err.Error())\n\t}\n}"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a Go HTTP server that handles requests on specified routes, supports HTTPS with TLS certificates, and redirects HTTP traffic to HTTPS.\n\nFunction Description: The code demonstrates setting up a basic HTTP server with HTTPS support. It includes a handler function to process requests, sets up an HTTP-to-HTTPS redirect, and starts both HTTP and HTTPS servers concurrently.\n\nInput:\n- Port numbers for HTTP (9999) and HTTPS (10443) servers\n- TLS certificate files (\"cert.pem\" and \"key.pem\")\n- HTTP request objects (*http.Request) for the handler function\n\nOutput:\n- HTTP responses (through http.ResponseWriter)\n- Server logs indicating server status and errors\n- Automatic HTTP-to-HTTPS redirection (301 Moved Permanently)\n\nMethods:\n1. handler(w http.ResponseWriter, req *http.Request) - Processes incoming requests and writes a plain text response\n2. main() - Configures and starts the HTTP and HTTPS servers, including the redirect handler",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, req *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\tw.Write([]byte(\"This is an example server.\\n\"))\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\tlog.Printf(\"About to listen on 10443. Go to https://127.0.0.1:10443/\")\n\tgo http.ListenAndServe(\":9999\", http.RedirectHandler(\"https://127.0.0.1:10443/\", 301))\n\terr := http.ListenAndServeTLS(\":10443\", \"cert.pem\", \"key.pem\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, req *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\tfmt.Fprintf(w, \"This is an example server.\\n\")\n}\n\nfunc main() {\n\thttpPort := \":9999\"\n\thttpsPort := \":10443\"\n\tcertFile := \"cert.pem\"\n\tkeyFile := \"key.pem\"\n\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", handler)\n\n\t// HTTPS Server configuration\n\thttpsServer := &http.Server{\n\t\tAddr:    httpsPort,\n\t\tHandler: mux,\n\t}\n\n\t// HTTP Server for redirecting to HTTPS\n\tgo func() {\n\t\tlog.Printf(\"Starting HTTP server on port %s\\n\", httpPort)\n\t\tredirectHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\thttp.Redirect(w, r, \"https://\"+r.Host+r.URL.String(), http.StatusMovedPermanently)\n\t\t})\n\t\tif err := http.ListenAndServe(httpPort, redirectHandler); err != nil {\n\t\t\tlog.Fatalf(\"HTTP server error: %v\", err)\n\t\t}\n\t}()\n\n\t// Start HTTPS server\n\tlog.Printf(\"Starting HTTPS server on port %s with TLS\\n\", httpsPort)\n\tif err := httpsServer.ListenAndServeTLS(certFile, keyFile); err != nil {\n\t\tlog.Fatalf(\"HTTPS server error: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when a request is received. The server listens on port 8080.\n\nInput:  \n- `w http.ResponseWriter`: Used to construct the HTTP response.  \n- `r *http.Request`: Contains information about the incoming HTTP request.  \n\nOutput:  \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response body. No explicit return value.  \n\nExample usage:  \n```go\nhttp.HandleFunc(\"/\", handler)  \nhttp.ListenAndServe(\":8080\", nil)  \n```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a multipart form and displays an upload form to the client.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form for file uploads. For POST requests, it processes the uploaded file. The server listens on port 9000.\n\nInput: \n- None (The function takes no direct input parameters, but handles HTTP requests with:\n  - GET requests to \"/\" path\n  - POST requests with multipart/form-data containing a file under the \"q\" field)\n\nOutput:\n- For GET requests: Returns HTML form for file upload (content-type: text/html)\n- For POST requests: Processes the uploaded file (prints file info to console)\n- Server runs continuously on port 9000 until terminated",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tfile, hdr, err := req.FormFile(key)\n\t\tfmt.Println(file, hdr, err)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"q\">\n      <input type=\"submit\">\n    </form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tfmt.Fprintf(w, `\n\t\t\t\t<!DOCTYPE html>\n\t\t\t\t<html>\n\t\t\t\t<head><title>Upload File</title></head>\n\t\t\t\t<body>\n\t\t\t\t\t<form method=\"POST\" enctype=\"multipart/form-data\">\n\t\t\t\t\t\t<input type=\"file\" name=\"q\"><br>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Upload\">\n\t\t\t\t\t</form>\n\t\t\t\t</body>\n\t\t\t\t</html>\n\t\t\t`)\n\t\t\treturn\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20) // 10 MB\n\t\t\tfile, handler, err := r.FormFile(\"q\")\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusInternalServerError)\n\t\t\t\tfmt.Printf(\"Error while retrieving the file: %v\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\tfmt.Printf(\"Uploaded File: %s\\n\", handler.Filename)\n\t\t\tfmt.Printf(\"File Size: %d\\n\", handler.Size)\n\t\t\tfmt.Printf(\"MIME Header: %v\\n\", handler.Header)\n\n\t\t\t// Optionally save the file to disk\n\t\t\tdst, err := os.Create(handler.Filename)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Unable to save the file\", http.StatusInternalServerError)\n\t\t\t\tfmt.Printf(\"Error while creating the file: %v\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tif _, err := io.Copy(dst, file); err != nil {\n\t\t\t\thttp.Error(w, \"Error saving the file\", http.StatusInternalServerError)\n\t\t\t\tfmt.Printf(\"Error while copying the file: %v\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfmt.Fprintf(w, \"File %s uploaded successfully\\n\", handler.Filename)\n\t\t\treturn\n\t\t}\n\n\t\thttp.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n\t})\n\n\tfmt.Println(\"Server started on :9000\")\n\tif err := http.ListenAndServe(\":9000\", nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when the server receives a request to that path.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response back to the client.\n- `r *http.Request` - Contains information about the incoming HTTP request (not used in this simple example).\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the response writer (`w`), which is sent back to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Create a function that implements a basic HTTP server which echoes back the request body to the response.\n\nFunction Description: The function `httpserver` starts an HTTP server on the specified address. It handles all incoming requests to the root path (\"/\") by copying the request body directly to the response writer. This effectively echoes back the received data to the client. The server runs until an error occurs or is manually stopped.\n\nInput:  \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\").\n\nOutput:  \n- `error`: Returns an error if the server fails to start or encounters a fatal error during operation. Returns nil if the server is terminated gracefully.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tio.Copy(w, req.Body)\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\t_, err := io.Copy(w, r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\t}\n\t})\n\n\terr := http.ListenAndServe(addr, nil)\n\treturn err\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- `port` [int] - The port number on which the HTTP server should listen.\n\nOutput:\n- `chan string` - A channel that will receive the SDP data from incoming HTTP requests.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tbody, err := ioutil.ReadAll(r.Body)\n\t\t\tif err == nil {\n\t\t\t\tsdpChan <- string(body)\n\t\t\t}\n\t\t\tfmt.Fprintf(w, \"done\")\n\t\t}\n\t})\n\n\tgo func() {\n\t\thttp.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}()\n\n\treturn sdpChan\n}"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and responds with the requested URL path.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes the requested URL path as plain text in the response.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return any value; it continuously serves HTTP requests until terminated)\n\nNote: The handler function takes two parameters:\n1. res http.ResponseWriter - used to write the HTTP response\n2. req *http.Request - contains information about the incoming request",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprint(res, req.URL.Path)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tfmt.Fprintf(res, \"%s\", req.URL.Path)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a basic HTTP server in Go that echoes back the request headers to the client. The server should handle requests on the root path (\"/\") and respond by writing the request headers to the response.\n\nFunction Description: The `ServeHTTP` function is an HTTP handler that writes the request headers to the response writer. It is registered to handle requests on the root path (\"/\") and starts an HTTP server listening on `127.0.0.1:8080`.\n\nInput: \n- `w http.ResponseWriter`: Used to construct the HTTP response.\n- `r *http.Request`: Contains the incoming HTTP request details, including headers.\n\nOutput: None (writes directly to the `http.ResponseWriter`).",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tr.Header.Write(w)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tfor key, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\tfmt.Fprintf(w, \"%s: %s\\n\", key, value)\n\t\t}\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)\n}"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a basic HTTP server in Go that serves a template-based web page and handles requests on a configurable port.\n\nFunction Description: The main function sets up an HTTP server with a root route handler that renders a template. It configures the server port from environment variables with a default fallback, then starts the server.\n\nInput: \n- Environment variable \"PORT\" (optional): Specifies the port number to listen on\n- Template file \"todos/index.jet\": The template to be rendered and served\n\nOutput:\n- HTTP server running on the specified port, serving the rendered template at the root path (\"/\")\n- Log output indicating the server's running status and any template errors\n\nNote: The reference code shows the implementation but doesn't explicitly define separate functions for each operation. The main function combines:\n1. Route handling (with template rendering)\n2. Port configuration\n3. Server startup",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tview, err := views.GetTemplate(\"todos/index.jet\")\n\t\tif err != nil {\n\t\t\tlog.Println(\"Unexpected template err:\", err.Error())\n\t\t}\n\t\tview.Execute(w, nil, todos)\n\t})\n\n\tport := os.Getenv(\"PORT\")\n\tif len(port) == 0 {\n\t\tport = \":8080\"\n\t} else if !strings.HasPrefix(\":\", port) {\n\t\tport = \":\" + port\n\t}\n\n\tlog.Println(\"Serving on \" + port)\n\thttp.ListenAndServe(port, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\ttmpl, err := template.ParseFiles(\"todos/index.jet\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error parsing template: %v\", err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\terr := tmpl.Execute(w, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(w, fmt.Sprintf(\"Template execution error: %v\", err), http.StatusInternalServerError)\n\t\t}\n\t})\n\n\tlog.Printf(\"Starting server on :%s\", port)\n\terr = http.ListenAndServe(\":\"+port, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles multiple routes with different response messages.\n\nFunction Description: The code demonstrates how to set up a simple HTTP server with two route handlers. The first handler responds to the root path (\"/\") with a \"doggy\" message, while the second handler responds to the \"/cat/\" path with a \"catty\" message. The server listens on port 9000.\n\nInput: \n- None (HTTP requests are automatically handled by the server)\n\nOutput: \n- None (The server writes responses directly to the http.ResponseWriter)\n\nMethods:\n- upTown: Handles requests to the root path (\"/\") and writes \"doggy doggy doggy\" to the response\n- youUp: Handles requests to the \"/cat/\" path and writes \"catty catty catty\" to the response\n- main: Registers the route handlers and starts the HTTP server on port 9000",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc upTown(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"doggy doggy doggy\")\n}\n\nfunc youUp(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc upTown(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"doggy doggy doggy\")\n}\n\nfunc youUp(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a Go HTTP server that serves PNG images generated by a package function.\n\nFunction Description: The main function sets up a basic HTTP server that responds to requests at the root path (\"/\") by generating a PNG image using an external package function and serving it with the correct content type.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the http.ResponseWriter and *http.Request parameters in the handler function)\n\nOutput: None (The function doesn't return any value but serves HTTP responses with PNG image data)",
    "Canonical_solution": "import (\n    \"fmt\"\n    \"net/http\"\n    \"io\"\n    \"bytes\"\n    \"davidhampgonsalves/lifedashboard/pkg\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        png := pkg.Generate();\n        w.Header().Set(\"Content-Type\", \"image/png\")\n        io.Copy(w, bytes.NewBuffer(png))\n    })\n\n    fmt.Println(\"Server listening on http://localhost:8080\")\n    http.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"net/http\"\n)\n\nfunc generatePNG() image.Image {\n\t// Create a new RGBA image with a specific size\n\timg := image.NewRGBA(image.Rect(0, 0, 200, 200))\n\n\t// Fill the image with a solid color (e.g., blue)\n\tblue := color.RGBA{0, 0, 255, 255}\n\tfor y := img.Rect.Min.Y; y < img.Rect.Max.Y; y++ {\n\t\tfor x := img.Rect.Min.X; x < img.Rect.Max.X; x++ {\n\t\t\timg.Set(x, y, blue)\n\t\t}\n\t}\n\n\treturn img\n}\n\nfunc pngHandler(w http.ResponseWriter, r *http.Request) {\n\t// Set the Content-Type header to indicate PNG image\n\tw.Header().Set(\"Content-Type\", \"image/png\")\n\n\t// Generate the PNG image\n\timg := generatePNG()\n\n\t// Encode and send the image to the client\n\terr := png.Encode(w, img)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Failed to encode image: %v\", err), http.StatusInternalServerError)\n\t}\n}\n\nfunc main() {\n\t// Register handler function for root path\n\thttp.HandleFunc(\"/\", pngHandler)\n\n\t// Start HTTP server on port 8080\n\tfmt.Println(\"Starting server at :8080\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebDAV requests with custom logging and special handling for certain Litmus test cases.\n\nFunction Description: The main function sets up a WebDAV server with in-memory storage (MemFS) and in-memory locking (MemLS). It includes custom logging for WebDAV operations and special handling for a specific Litmus test case (\"props: 3 (propfind_invalid2)\"). The server listens on a specified port and handles all incoming HTTP requests.\n\nInput: None (though the code uses a command-line flag for port configuration which would be handled by the flag package)\n\nOutput: None (the function runs indefinitely as a server, but may log errors or fatal conditions)\n\nNote: The actual implementation shows the server uses a port flag (not shown in parameters) and produces log output, but these are side effects rather than formal outputs.\n\n---\n\nFor completeness, if we were to describe the webdav.Handler struct being used (though not explicitly defined in this code):\n\nStruct Description: webdav.Handler is a struct from golang.org/x/net/webdav that implements http.Handler for WebDAV protocol operations.\n\nFields:\nFileSystem: webdav.FileSystem - The underlying file system implementation\nLockSystem: webdav.LockSystem - The locking system implementation\nLogger: func(*http.Request, error) - Optional function for logging requests and errors\n\nMethods:\nServeHTTP: ServeHTTP(http.ResponseWriter, *http.Request) -> None - Main handler method that processes HTTP requests according to WebDAV protocol",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"golang.org/x/net/webdav\"\n)\n\nvar port = flag.String(\"port\", \"8080\", \"port to listen on\")\n\nfunc handleWebDAV(fs webdav.FileSystem, ls webdav.LockSystem) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path == \"/props_invalid2\" && r.Method == \"PROPFIND\" {\n\t\t\tw.Header().Set(\"Content-Type\", \"application/xml; charset=utf-8\")\n\t\t\tw.WriteHeader(http.StatusMultiStatus)\n\t\t\tfmt.Fprintf(w, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<D:multistatus xmlns:D=\\\"DAV:\\\">\\n  <D:response>\\n    <D:href>/props_invalid2</D:href>\\n    <D:propstat>\\n      <D:prop>\\n        <D:getlastmodified>Wed, 15 Mar 2023 12:00:00 GMT</D:getlastmodified>\\n      </D:prop>\\n      <D:status>HTTP/1.1 200 OK</D:status>\\n    </D:propstat>\\n  </D:response>\\n</D:multistatus>\")\n\t\t\tlog.Printf(\"Special handling for props_invalid2: %s %s %s\", r.Method, r.URL, r.Proto)\n\t\t\treturn\n\t\t}\n\n\t\th := &webdav.Handler{\n\t\t\tFileSystem: fs,\n\t\t\tLockSystem: ls,\n\t\t\tLogger: func(r *http.Request, err error) {\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"WebDAV error: %v, Request: %s %s %s\", err, r.Method, r.URL, r.Proto)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"WebDAV success: %s %s %s\", r.Method, r.URL, r.Proto)\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tfs := webdav.NewMemFS()\n\tls := webdav.NewMemLS()\n\n\thttp.HandleFunc(\"/\", handleWebDAV(fs, ls))\n\n\taddr := fmt.Sprintf(\":%s\", *port)\n\tlog.Printf(\"Starting WebDAV server on port %s\", *port)\n\terr := http.ListenAndServe(addr, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Implement a Certificate Authority (CA) service in Go using the Chi router for HTTP routing, supporting both secure and insecure servers, with background jobs and proper shutdown handling.\n\nStruct Description: The CA struct represents a Certificate Authority service that manages HTTP servers (secure and insecure), configuration, authentication, and background tasks.\n\nFields:\n\nauth: [*authority.Authority] - The authority component handling certificate operations  \nconfig: [*config.Config] - Configuration settings for the CA service  \nsrv: [*server.Server] - The main secure HTTP server  \ninsecureSrv: [*server.Server] - Optional insecure HTTP server for certain endpoints  \nmetricsSrv: [*server.Server] - Optional metrics server  \nopts: [*options] - Additional service options  \nrenewer: [*TLSRenewer] - Component handling TLS certificate renewal  \ncompactStop: [chan struct{}] - Channel for stopping the background compaction job  \n\nMethods:\n\nInit: [func(cfg *config.Config) (*CA, error)] - Initializes the CA service with configuration, sets up routers, and prepares servers  \nRun: [func() error] - Starts all servers and background jobs, handles graceful shutdown on errors  \nshouldServeInsecureServer: [func() bool] - (implied private method) Determines if insecure server should be started  \nrunCompactJob: [func()] - (implied private method) Runs background compaction task  \nStop: [func() error] - (implied method) Handles service shutdown and cleanup",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n)\n\ntype CA struct {\n\tauth        *authority.Authority\n\tconfig      *config.Config\n\tsrv         *server.Server\n\tinsecureSrv *server.Server\n\tmetricsSrv  *server.Server\n\topts        *options\n\trenewer     *TLSRenewer\n\tcompactStop chan struct{}\n}\n\nfunc (ca *CA) Init(cfg *config.Config) (*CA, error) {\n\tmux := chi.NewRouter()\n\thandler := http.Handler(mux)\n\n\tinsecureMux := chi.NewRouter()\n\tinsecureHandler := http.Handler(insecureMux)\n\n\tmux.Use(middleware.GetHead)\n\tinsecureMux.Use(middleware.GetHead)\n\n\tapi.Route(mux)\n\tmux.Route(\"/1.0\", func(r chi.Router) {\n\t\tapi.Route(r)\n\t})\n\n\tinsecureMux.Get(\"/crl\", api.CRL)\n\tinsecureMux.Get(\"/1.0/crl\", api.CRL)\n\n\tbaseContext := buildContext(auth, scepAuthority, acmeDB, acmeLinker)\n\n\tca.srv = server.New(cfg.Address, handler, tlsConfig)\n\tca.srv.BaseContext = func(net.Listener) context.Context {\n\t\treturn baseContext\n\t}\n\n\tif ca.shouldServeInsecureServer() {\n\t\tca.insecureSrv = server.New(cfg.InsecureAddress, insecureHandler, nil)\n\t\tca.insecureSrv.BaseContext = func(net.Listener) context.Context {\n\t\t\treturn baseContext\n\t\t}\n\t}\n\n\treturn ca, nil\n}\n\nfunc (ca *CA) Run() error {\n\tvar wg sync.WaitGroup\n\terrs := make(chan error, 1)\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tca.runCompactJob()\n\t}()\n\n\tif ca.insecureSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.insecureSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\tif ca.metricsSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.metricsSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terrs <- ca.srv.ListenAndServe()\n\t}()\n\n\terr := <-errs\n\n\tif !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Println(\"shutting down due to startup error ...\")\n\t\tif stopErr := ca.Stop(); stopErr != nil {\n\t\t\terr = fmt.Errorf(\"failed stopping CA after error occurred: %w: %w\", err, stopErr)\n\t\t} else {\n\t\t\terr = fmt.Errorf(\"stopped CA after error occurred: %w\", err)\n\t\t}\n\t}\n\n\twg.Wait()\n\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 108,
    "right_result": "package ca\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\ntype CA struct {\n\tauth           *authority.Authority\n\tconfig         *config.Config\n\tsrv            *server.Server\n\tinsecureSrv    *server.Server\n\tmetricsSrv     *server.Server\n\topts           *options\n\trenewer        *TLSRenewer\n\tcompactStop    chan struct{}\n}\n\nfunc (c *CA) Init(cfg *config.Config) (*CA, error) {\n\tc.config = cfg\n\tc.opts = &options{\n\t\tInsecurePort: 80,\n\t\tSecurePort:   443,\n\t\tEnableMetrics: true,\n\t\tMetricsPort:  9090,\n\t}\n\t\n\tvar err error\n\n\tc.auth, err = authority.NewAuthority(cfg)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create authority: %w\", err)\n\t}\n\n\tc.renewer, err = NewTLSRenewer(cfg)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create TLS renewer: %w\", err)\n\t}\n\n\trouter := chi.NewRouter()\n\tc.setupSecureRoutes(router)\n\n\tc.srv = server.NewServer(&server.Config{\n\t\tAddr:      fmt.Sprintf(\":%d\", c.opts.SecurePort),\n\t\tHandler:   router,\n\t\tTLSConfig: c.renewer.GetTLSConfig(),\n\t})\n\n\tif c.shouldServeInsecureServer() {\n\t\tinsecureRouter := chi.NewRouter()\n\t\tc.setupInsecureRoutes(insecureRouter)\n\t\tc.insecureSrv = server.NewServer(&server.Config{\n\t\t\tAddr:    fmt.Sprintf(\":%d\", c.opts.InsecurePort),\n\t\t\tHandler: insecureRouter,\n\t\t})\n\t}\n\n\tif c.opts.EnableMetrics {\n\t\tmetricsRouter := chi.NewRouter()\n\t\tmetricsRouter.Handle(\"/metrics\", promhttp.Handler())\n\t\tc.metricsSrv = server.NewServer(&server.Config{\n\t\t\tAddr:    fmt.Sprintf(\":%d\", c.opts.MetricsPort),\n\t\t\tHandler: metricsRouter,\n\t\t})\n\t}\n\n\tgo c.runCompactJob()\n\n\treturn c, nil\n}\n\nfunc (c *CA) Run() error {\n\terrChan := make(chan error, 3)\n\n\tgo func() {\n\t\tif c.srv != nil {\n\t\t\tif err := c.srv.ListenAndServeTLS(\"\", \"\"); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\t\terrChan <- fmt.Errorf(\"secure server error: %w\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tif c.insecureSrv != nil {\n\t\t\tif err := c.insecureSrv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\t\terrChan <- fmt.Errorf(\"insecure server error: %w\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tif c.metricsSrv != nil {\n\t\t\tif err := c.metricsSrv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\t\terrChan <- fmt.Errorf(\"metrics server error: %w\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tselect {\n\tcase err := <-errChan:\n\t\tc.Stop()\n\t\treturn err\n\t}\n}\n\nfunc (c *CA) shouldServeInsecureServer() bool {\n\treturn c.opts.InsecurePort > 0 && c.opts.InsecurePort != c.opts.SecurePort\n}\n\nfunc (c *CA) runCompactJob() {\n\tticker := time.NewTicker(24 * time.Hour)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tif err := c.auth.Compact(); err != nil {\n\t\t\t\t// Log error and continue\n\t\t\t}\n\t\tcase <-c.compactStop:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (c *CA) Stop() error {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tvar result error\n\n\tif c.srv != nil {\n\t\tif err := c.srv.Shutdown(ctx); err != nil {\n\t\t\tresult = fmt.Errorf(\"secure server shutdown failed: %w\", err)\n\t\t}\n\t}\n\n\tif c.insecureSrv != nil {\n\t\tif err := c.insecureSrv.Shutdown(ctx); err != nil {\n\t\t\tif result != nil {\n\t\t\t\tresult = fmt.Errorf(\"%v; insecure server shutdown failed: %w\", result, err)\n\t\t\t} else {\n\t\t\t\tresult = fmt.Errorf(\"insecure server shutdown failed: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\tif c.metricsSrv != nil {\n\t\tif err := c.metricsSrv.Shutdown(ctx); err != nil {\n\t\t\tif result != nil {\n\t\t\t\tresult = fmt.Errorf(\"%v; metrics server shutdown failed: %w\", result, err)\n\t\t\t} else {\n\t\t\t\tresult = fmt.Errorf(\"metrics server shutdown failed: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\tclose(c.compactStop)\n\n\tif c.renewer != nil {\n\t\tif err := c.renewer.Stop(); err != nil {\n\t\t\tif result != nil {\n\t\t\t\tresult = fmt.Errorf(\"%v; TLS renewer stop failed: %w\", result, err)\n\t\t\t} else {\n\t\t\t\tresult = fmt.Errorf(\"TLS renewer stop failed: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc (c *CA) setupSecureRoutes(router chi.Router) {\n\t// Setup secure routes here\n\trouter.Post(\"/issue\", c.issueCertHandler)\n\trouter.Post(\"/revoke\", c.revokeCertHandler)\n}\n\nfunc (c *CA) setupInsecureRoutes(router chi.Router) {\n\t// Setup insecure routes here\n\trouter.Get(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tfmt.Fprint(w, \"OK\")\n\t})\n}"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes middleware for request logging and rate limiting using Sentinel. The server should handle a GET request at the \"/test\" endpoint.\n\nFunction Description: The function sets up an Echo HTTP server with middleware for logging and rate limiting. The rate limiting is implemented using Sentinel middleware, which extracts the client's real IP from the request headers and applies a block fallback response when the rate limit is exceeded. The server listens on port 1323.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 1323.)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\nfunc Example() {\n\tr := echo.New()\n\tr.Use(middleware.Logger())\n\tr.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx echo.Context) string {\n\t\t\t\tif res, ok := ctx.Get(\"X-Real-IP\").(string); ok {\n\t\t\t\t\treturn res\n\t\t\t\t}\n\t\t\t\treturn \"\"\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx echo.Context) error {\n\t\t\t\treturn ctx.JSON(400, map[string]interface{}{\n\t\t\t\t\t\"err\":  \"too many requests; the quota used up\",\n\t\t\t\t\t\"code\": 10222,\n\t\t\t\t})\n\t\t\t}),\n\t\t),\n\t)\n\n\tr.GET(\"/test\", func(c echo.Context) error {\n\t\treturn nil\n\t})\n\tr.Logger.Fatal(r.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\tsentinel \"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/core/system\"\n)\n\nfunc setupServer() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Initialize Sentinel\n\terr := sentinel.InitDefault()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Configure system rule for rate limiting\n\t_, err = system.LoadRules([]*system.SystemRule{\n\t\t{\n\t\t\tMetricType:   system.InboundQPS,\n\t\t\tTriggerCount: 10, // Limit to 10 requests per second\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Sentinel middleware to handle rate limiting\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tentry, blockErr := sentinel.Entry(\"http_api\", sentinel.WithTrafficType(sentinel.Inbound))\n\t\t\tif blockErr != nil {\n\t\t\t\treturn c.String(429, \"Too many requests\")\n\t\t\t}\n\t\t\tdefer entry.Exit()\n\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\t// Get client's real IP\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tip := c.RealIP()\n\t\t\tc.Set(\"client_ip\", ip)\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\t// Test endpoint\n\te.GET(\"/test\", func(c echo.Context) error {\n\t\treturn c.String(200, \"Hello, World!\")\n\t})\n\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes route handling, middleware integration, and JWT-based authentication for restricted routes.\n\nFunction Description: The main function initializes an Echo server, configures middleware (logger and recovery), sets up routes for login and accessible content, and creates a restricted route group with JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger route handlers)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately as they're referenced but not shown in the provided code.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tr.Use(middleware.JWT([]byte(\"secret\")))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\t// Middleware\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\t// Routes\n\te.POST(\"/login\", login)\n\te.GET(\"/accessible\", accessible)\n\n\t// Restricted group\n\tr := e.Group(\"/restricted\")\n\tr.Use(middleware.JWT([]byte(\"secret-key\")))\n\n\t// Start server\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server using the Echo framework in Go, with basic middleware and a simple route handler.\n\nFunction Description: The function `StartHTTPServer` initializes a new Echo instance, adds logger and recovery middleware, registers a GET route handler for the root path (\"/\"), and starts the HTTP server on the specified address.\n\nInput:  \n- `address` (string): The network address (e.g., \":8080\") on which the HTTP server should listen.\n\nOutput:  \n- `error`: Returns an error if the server fails to start; otherwise, it blocks until the server is stopped.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\treturn e.Start(address)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\treturn e.Start(address)\n}"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that streams JSON-encoded location data with a delay between each transmission.\n\nFunction Description: The main function initializes an Echo server, sets up a GET route handler at the root path (\"/\") that streams location data as JSON with a 1-second delay between each location. The response uses proper HTTP headers for JSON content type and flushes after each location is sent.\n\nInput: None (The function takes no direct input parameters, but relies on a predefined 'locations' collection that should be available in scope)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"encoding/json\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\t\tfor _, l := range locations {\n\t\t\tif err := json.NewEncoder(c.Response()).Encode(l); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar locations = []map[string]interface{}{\n\t{\"name\": \"Location A\", \"lat\": 37.7749, \"lon\": -122.4194},\n\t{\"name\": \"Location B\", \"lat\": 21.3069, \"lon\": -157.9226},\n\t{\"name\": \"Location C\", \"lat\": 51.5074, \"lon\": -0.1278},\n}\n\nfunc streamLocations(c echo.Context) error {\n\tres := c.Response()\n\tres.Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\tres.WriteHeader(http.StatusOK)\n\n\tflusher, ok := res.Writer.(http.Flusher)\n\tif !ok {\n\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Streaming not supported\")\n\t}\n\n\tfor _, loc := range locations {\n\t\tif _, err := res.Write([]byte(c.JSONPretty(loc, \"\", \"  \"))); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tflusher.Flush()\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", streamLocations)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves static files from an embedded filesystem using the go.rice package.\n\nFunction Description: The main function initializes an Echo web server, sets up route handlers for serving static files from an embedded directory (\"app\"), and starts the server on port 1323. The static files are served under the root path (\"/\") and a static prefix path (\"/static/*\").\n\nInput: None (The function takes no explicit parameters)\n\nOutput: None (The function doesn't return anything explicitly but starts an HTTP server that runs indefinitely until interrupted)\n\nNote: The reference code shows the complete implementation at the package level (main function) rather than as an isolated function or struct. The instruction follows the function-level format as the code primarily demonstrates functional behavior rather than object-oriented structure.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\trice \"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\tassetHandler := http.FileServer(rice.MustFindBox(\"app\").HTTPBox())\n\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static/\", assetHandler)))\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\tappBox, err := rice.FindBox(\"app\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tstaticHandler := echo.WrapHandler(http.FileServer(appBox.HTTPBox()))\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.Redirect(302, \"/index.html\")\n\t})\n\te.GET(\"/static/*\", func(c echo.Context) error {\n\t\thttp.StripPrefix(\"/static/\", staticHandler).ServeHTTP(c.Response(), c.Request())\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various routes with authentication middleware and serves different endpoints for application management.\n\nFunction Description: The `serve` function initializes and starts an HTTP server using the Echo framework. It sets up route handlers for various endpoints related to application management, including upload, installation, renaming, and deletion of apps. The function also implements authentication middleware (BasicAuth and KeyAuth) to secure certain endpoints. The server runs on the specified host and port.\n\nInput: \n- `host` (string): The host address where the server will run (e.g., \"localhost\" or \"0.0.0.0\")\n- `port` (uint64): The port number on which the server will listen (e.g., 8080)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error, at which point it logs the error and exits)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\n\tforcedBasicAuth := middleware.BasicAuth(func(username string, password string, c echo.Context) (bool, error) {\n\t\treturn username == config.Current.BasicAuth.Username && password == config.Current.BasicAuth.Password, nil\n\t})\n\tbasicAuth := func(f echo.HandlerFunc) echo.HandlerFunc {\n\t\tif config.Current.BasicAuth.Enable {\n\t\t\treturn forcedBasicAuth(f)\n\t\t} else {\n\t\t\treturn f\n\t\t}\n\t}\n\tworkflowKeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == config.Current.BuilderKey, nil\n\t})\n\n\te.GET(\"/\", renderIndex, basicAuth)\n\te.GET(\"/favicon.png\", getFavIcon, basicAuth)\n\te.POST(\"/apps\", uploadUnsignedApp, basicAuth)\n\te.GET(\"/apps/:id/install\", appResolver(renderInstall))\n\te.GET(\"/apps/:id/manifest\", appResolver(getManifest))\n\te.GET(\"/apps/:id/resign\", appResolver(resignApp), basicAuth)\n\te.GET(\"/apps/:id/delete\", appResolver(deleteApp), basicAuth)\n\te.GET(\"/apps/:id/rename\", appResolver(renderRenameApp), basicAuth)\n\te.POST(\"/apps/:id/rename\", appResolver(renameApp), basicAuth)\n\te.GET(\"/apps/:id/2fa\", appResolver(render2FAPage), basicAuth)\n\te.POST(\"/apps/:id/2fa\", appResolver(set2FA), basicAuth)\n\te.GET(\"/jobs\", getLastJob, workflowKeyAuth)\n\te.GET(\"/jobs/:id/2fa\", jobResolver(get2FA), workflowKeyAuth)\n\te.POST(\"/jobs/:id/signed\", jobResolver(uploadSignedApp), workflowKeyAuth)\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\n\tappGroup := e.Group(\"/app\")\n\n\tusers := map[string]string{\n\t\t\"admin\": \"password\",\n\t}\n\n\tbasicAuth := middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\t\tif users[username] == password {\n\t\t\treturn true, nil\n\t\t}\n\t\treturn false, nil\n\t})\n\n\tkeyAuth := middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\tif key == \"secret-key\" {\n\t\t\treturn true, nil\n\t\t}\n\t\treturn false, nil\n\t})\n\n\tappGroup.Use(basicAuth)\n\tappGroup.Use(keyAuth)\n\n\tappGroup.POST(\"/upload\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"App uploaded\")\n\t})\n\n\tappGroup.POST(\"/install\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"App installed\")\n\t})\n\n\tappGroup.POST(\"/rename\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"App renamed\")\n\t})\n\n\tappGroup.DELETE(\"/:id\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"App deleted\")\n\t})\n\n\taddr := fmt.Sprintf(\"%s:%d\", host, port)\n\te.Logger.Fatal(e.Start(addr))\n}"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves basic server information and runs on a configurable address.\n\nFunction Description: The main function initializes an Echo HTTP server, configures middleware for logging and compression, sets up a route handler for server information, and starts the server on the specified address.\n\nInput: \n- Command-line argument (optional): \"--addr\" to specify the server address (default: \"127.0.0.1:9090\")\n\nOutput: \n- Running HTTP server that responds to GET requests at \"/serverinfo\" with server hostname and address\n- No explicit return value (runs indefinitely until interrupted)\n\nNote: The reference code shows a complete implementation at the package level (main function) rather than a standalone function or struct level. The instruction follows the function-level format as the code primarily demonstrates functional behavior through the main function.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo\"\n\tmd \"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:9090\", \"addr for backend\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\tserver := echo.New()\n\tserver.Use(md.Logger())\n\tserver.Use(md.Gzip())\n\n\tserver.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thostname, _ := os.Hostname()\n\t\treturn c.String(http.StatusOK, hostname+\"\\n\"+*addr)\n\t})\n\n\tserver.Start(*addr)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\taddr := \"127.0.0.1:9090\"\n\tfor i := 1; i < len(os.Args); i++ {\n\t\tif os.Args[i] == \"--addr\" && i+1 < len(os.Args) {\n\t\t\taddr = os.Args[i+1]\n\t\t}\n\t}\n\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thost, _ := os.Hostname()\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"hostname\": host,\n\t\t\t\"address\":  addr,\n\t\t})\n\t})\n\n\te.Start(addr)\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests on two different endpoints (\"/request\" and \"/stream\") and serves over HTTPS.\n\nFunction Description: The main function initializes an Echo server instance, registers route handlers for two GET endpoints, and starts an HTTPS server using provided TLS certificate files.\n\nInput: None (The function takes no direct input parameters, but relies on external TLS certificate files \"cert.pem\" and \"key.pem\")\n\nOutput: None (The function doesn't return anything but starts a persistent HTTP server process)\n\nNote: The actual route handler functions (request and stream) would need to be implemented separately to handle the respective endpoints. The server will run indefinitely until interrupted, listening on port 1323 with TLS encryption.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/request\", request)\n\te.GET(\"/stream\", stream)\n\te.Logger.Fatal(e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\t// Register route handlers\n\te.GET(\"/request\", requestHandler)\n\te.GET(\"/stream\", streamHandler)\n\n\t// Start HTTPS server with TLS certificate files\n\te.StartTLS(\":1323\", \"cert.pem\", \"key.pem\")\n}\n\n// Placeholder for the /request endpoint handler\nfunc requestHandler(c echo.Context) error {\n\t// Implementation goes here\n\treturn nil\n}\n\n// Placeholder for the /stream endpoint handler\nfunc streamHandler(c echo.Context) error {\n\t// Implementation goes here\n\treturn nil\n}"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server using the Echo framework, supporting both HTTP/2 and HTTPS configurations, with customizable timeouts and root path handling.\n\nStruct Description: The Api struct represents an HTTP server configuration with support for TLS, HTTP/2, and customizable timeouts. It provides methods to start and stop the server gracefully.\n\nFields:\nport: int - The port number on which the server will listen\nbindIp: string - The IP address to bind the server to\ntlsCertFile: string - Path to TLS certificate file (empty for non-HTTPS)\ntlsKeyFile: string - Path to TLS private key file (empty for non-HTTPS)\ntimeout: time.Duration - Server timeout duration for read/write operations\nrootPath: string - The root path for the server's default route\nsrv: *echo.Echo - The Echo server instance\n\nMethods:\nStart: () -> error - Initializes and starts the HTTP server in a goroutine, supporting both TLS and HTTP/2 configurations. Returns nil on successful startup.\nStop: (ctx context.Context) -> error - Gracefully shuts down the server using the provided context. Returns any error that occurs during shutdown.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"golang.org/x/net/http2\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.HideBanner = true\n\ta.srv.HidePort = true\n\ta.srv.Server.ReadTimeout = a.timeout\n\ta.srv.Server.IdleTimeout = a.timeout\n\ta.srv.Server.WriteTimeout = a.timeout + a.timeout\n\n\ta.srv.GET(\n\t\ta.rootPath,\n\t\tfunc(c echo.Context) error {\n\t\t\treturn c.HTML(http.StatusOK, `Hey, Gotenberg has no UI, it's an API. Head to the <a href=\"https://gotenberg.dev\">documentation</a> to learn how to interact with it \ud83d\ude80`)\n\t\t},\n\t)\n\n\tgo func() {\n\t\tvar err error\n\t\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\t\terr = a.srv.StartTLS(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), a.tlsCertFile, a.tlsKeyFile)\n\t\t} else {\n\t\t\tserver := &http2.Server{}\n\t\t\terr = a.srv.StartH2CServer(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), server)\n\t\t}\n\t\tif !errors.Is(err, http.ErrServerClosed) {\n\t\t\ta.logger.Fatal(err.Error())\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Shutdown(ctx)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\ntype Api struct {\n\tport         int\n\tbindIp       string\n\ttlsCertFile  string\n\ttlsKeyFile   string\n\ttimeout      time.Duration\n\trootPath     string\n\tsrv          *echo.Echo\n\tgroup        errgroup.Group\n}\n\nfunc NewApi(port int, bindIp, tlsCertFile, tlsKeyFile string, timeout time.Duration, rootPath string) *Api {\n\treturn &Api{\n\t\tport:         port,\n\t\tbindIp:       bindIp,\n\t\ttlsCertFile:  tlsCertFile,\n\t\ttlsKeyFile:   tlsKeyFile,\n\t\ttimeout:      timeout,\n\t\trootPath:     rootPath,\n\t\tsrv:          echo.New(),\n\t}\n}\n\nfunc (a *Api) Start() error {\n\ta.srv.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{\n\t\tTimeout: a.timeout,\n\t}))\n\n\ta.srv.GET(a.rootPath, func(c echo.Context) error {\n\t\treturn c.String(200, \"Welcome to the API\")\n\t})\n\n\taddr := a.bindIp + \":\" + string(a.port)\n\tvar err error\n\n\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\ta.group.Go(func() error {\n\t\t\treturn a.srv.StartTLS(addr, a.tlsCertFile, a.tlsKeyFile)\n\t\t})\n\t} else {\n\t\ta.group.Go(func() error {\n\t\t\treturn a.srv.Start(addr)\n\t\t})\n\t}\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\tif err := a.srv.Shutdown(ctx); err != nil {\n\t\treturn err\n\t}\n\treturn a.group.Wait()\n}"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic requests and includes middleware for processing statistics.\n\nStruct Description: The Stats struct is used to track and handle statistics for HTTP requests processed by the server.\n\nFields:\n- Count: [int] - Tracks the number of requests processed\n- StartTime: [time.Time] - Records the time when the server started processing requests\n\nMethods:\n- Process: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that increments the request count for each processed request\n- Handle: [func(c echo.Context) error] -> [error] - Handler function that returns the current statistics (request count and uptime) in JSON format\n- NewStats: [func() *Stats] -> [*Stats] - Constructor function that initializes a new Stats instance with default values\n\nAdditional Functions:\n- ServerHeader: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that adds a Server header to responses\n- main: [func()] -> [None] - Entry point that creates the Echo server, registers routes and middleware, and starts the server on port 1323",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Debug = true\n\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle)\n\n\te.Use(ServerHeader)\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype Stats struct {\n\tCount    int\n\tStartTime time.Time\n}\n\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ts.Count++\n\t\treturn next(c)\n\t}\n}\n\nfunc (s *Stats) Handle(c echo.Context) error {\n\tuptime := time.Since(s.StartTime).Seconds()\n\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\"count\":   s.Count,\n\t\t\"uptime\":  uptime,\n\t})\n}\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tCount:    0,\n\t\tStartTime: time.Now(),\n\t}\n}\n\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(\"Server\", \"EchoServer\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\tstats := NewStats()\n\n\te.Use(stats.Process)\n\te.Use(ServerHeader)\n\n\te.GET(\"/stats\", stats.Handle)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests and serves HTML content with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The main function initializes an Echo server, configures middleware for recovery and logging, sets up a route handler for the root path (\"/\") that returns HTML content, and starts the server with automatic TLS on port 443.\n\nInput: None (The function takes no explicit input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(200, \"<h1>Hello, HTTPS!</h1>\")\n\t})\n\n\tgo func() {\n\t\te.Start(\":80\")\n\t}()\n\n\tcertManager := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"yourdomain.com\"),\n\t\tCache:      autocert.DirCache(\"certs\"),\n\t}\n\n\te.AutoTLSManager = &certManager\n\te.StartTLS(\":443\", \"\", \"\")\n}"
  }
]