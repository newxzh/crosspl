[
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles JSONP requests, serving dynamic JSON data wrapped in a callback function.\n\nFunction Description: The main function initializes an Echo server, sets up middleware for logging and recovery, serves static files from a \"public\" directory, and defines a route (\"/jsonp\") that responds to GET requests with JSONP-formatted data containing a response message, current timestamp, and random number.\n\nInput: None (The function takes no direct input parameters, but the \"/jsonp\" endpoint accepts an optional query parameter \"callback\" specifying the JSONP callback function name)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and serves responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"response\":  \"This is a response message\",\n\t\t\t\"timestamp\": time.Now().UnixNano() / int64(time.Millisecond),\n\t\t\t\"random\":    rand.Intn(100),\n\t\t}\n\n\t\tjsonData, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif callback != \"\" {\n\t\t\tc.Response().Header().Set(echo.HeaderContentType, \"application/javascript\")\n\t\t\tc.Response().Write([]byte(callback + \"(\"))\n\t\t\tc.Response().Write(jsonData)\n\t\t\tc.Response().Write([]byte(\");\"))\n\t\t\treturn nil\n\t\t}\n\n\t\treturn c.JSON(200, data)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic routes and includes middleware for logging and recovery.\n\nFunction Description: The main function initializes a new Echo instance, sets up middleware for logging and panic recovery, defines a route handler for the root path (\"/\"), and starts the HTTP server on port 1323.\n\nInput: None (The function takes no direct input parameters; configuration is done internally)\n\nOutput: None (The function does not return any value; it starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger(), middleware.Recover())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles POST requests for two different endpoints (/tenhou and /majsoul) to process incoming data and forward it to respective receivers.\n\nStruct Description: The mjHandler struct is a request handler that processes incoming HTTP requests for the Tenhou and Majsoul game platforms, logging errors and forwarding data to appropriate receivers.\n\nFields:\n- log: echo.Logger - Logger for error and info logging\n- tenhouMessageReceiver: *tenhou.MessageReceiver - Receiver for Tenhou game messages\n- majsoulMessageQueue: chan []byte - Channel for buffering Majsoul game messages\n\nMethods:\n- analysisTenhou: (c echo.Context) -> error - Processes POST requests to /tenhou endpoint, reads request body, forwards data to tenhouMessageReceiver, and returns HTTP response\n- analysisMajsoul: (c echo.Context) -> error - Processes POST requests to /majsoul endpoint, reads request body, sends data to majsoulMessageQueue, and returns HTTP response\n\nFunction Description: The runServer function initializes and starts an HTTP server with configurable port and HTTPS options, setting up routes and middleware for the Echo framework.\n\nInput:\n- isHTTPS: bool - Flag indicating whether to use HTTPS\n- port: int - Port number for the server to listen on\n\nOutput:\n- error - Returns any error that occurs during server startup or operation",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/labstack/gommon/log\"\n\tstdLog \"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n)\n\ntype mjHandler struct {\n\tlog echo.Logger\n\n\ttenhouMessageReceiver *tenhou.MessageReceiver\n\tmajsoulMessageQueue   chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.tenhouMessageReceiver.Put(data)\n\treturn c.NoContent(http.StatusOK)\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.majsoulMessageQueue <- data\n\treturn c.NoContent(http.StatusOK)\n}\n\nvar h *mjHandler\n\nfunc runServer(isHTTPS bool, port int) (err error) {\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\te.StdLogger = stdLog.New(ioutil.Discard, \"\", 0)\n\te.Logger.SetLevel(log.INFO)\n\n\th = &mjHandler{\n\t\tlog:                   e.Logger,\n\t\ttenhouMessageReceiver: tenhou.NewMessageReceiver(),\n\t\tmajsoulMessageQueue:   make(chan []byte, 100),\n\t}\n\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORS())\n\te.POST(\"/tenhou\", h.analysisTenhou)\n\te.POST(\"/majsoul\", h.analysisMajsoul)\n\n\taddr := \":\" + strconv.Itoa(port)\n\tif !isHTTPS {\n\t\terr = e.Start(addr)\n\t} else {\n\t\terr = startTLS(e, addr)\n\t}\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"yourproject/tenhou\"\n)\n\ntype mjHandler struct {\n\tlog                   echo.Logger\n\ttenhouMessageReceiver *tenhou.MessageReceiver\n\tmajsoulMessageQueue   chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tbody := c.Request().Body\n\tdata, err := io.ReadAll(body)\n\tif err != nil {\n\t\th.log.Errorf(\"Failed to read Tenhou request body: %v\", err)\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Invalid request\")\n\t}\n\terr = h.tenhouMessageReceiver.Receive(data)\n\tif err != nil {\n\t\th.log.Errorf(\"Tenhou message processing error: %v\", err)\n\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Processing failed\")\n\t}\n\treturn c.JSON(http.StatusOK, map[string]bool{\"success\": true})\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tbody := c.Request().Body\n\tdata, err := io.ReadAll(body)\n\tif err != nil {\n\t\th.log.Errorf(\"Failed to read Majsoul request body: %v\", err)\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Invalid request\")\n\t}\n\tselect {\n\tcase h.majsoulMessageQueue <- data:\n\t\treturn c.JSON(http.StatusOK, map[string]bool{\"success\": true})\n\tdefault:\n\t\th.log.Errorf(\"Majsoul message queue is full\")\n\t\treturn echo.NewHTTPError(http.StatusServiceUnavailable, \"Queue full\")\n\t}\n}\n\nfunc runServer(isHTTPS bool, port int) error {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\thandler := &mjHandler{\n\t\tlog:                   e.Logger,\n\t\ttenhouMessageReceiver: &tenhou.MessageReceiver{},\n\t\tmajsoulMessageQueue:   make(chan []byte, 1024),\n\t}\n\n\te.POST(\"/tenhou\", handler.analysisTenhou)\n\te.POST(\"/majsoul\", handler.analysisMajsoul)\n\n\taddr := \":\" + strconv.Itoa(port)\n\tif isHTTPS {\n\t\treturn e.StartTLS(addr, \"cert.pem\", \"key.pem\")\n\t} else {\n\t\treturn e.Start(addr)\n\t}\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a Go struct that represents an HTTP server application using the Echo framework, with configurable options and standard middleware.\n\nStruct Description: The `App` struct represents an HTTP server application built on the Echo framework. It encapsulates the Echo engine instance and provides methods to initialize and run the server with common middleware (recovery, logging) and default routes.\n\nFields:\n- Engine: *echo.Echo - The core Echo framework instance that handles HTTP routing and middleware\n- Conf: *conf.Conf - Configuration object for server settings (port, debug mode, etc.)\n\nMethods:\n- NewApp: func(opts ...AppOptions) *App - Constructor that initializes a new App instance with optional configuration. Applies default middleware (recovery, logging) and sets up basic routes.\n  Input: opts ...AppOptions (variadic parameter for configuration options)\n  Output: *App (new App instance)\n\n- Run: func() - Starts the HTTP server using the configured port from Conf. Panics if server fails to start.\n  Input: None\n  Output: None (runs indefinitely until server stops)\n\n- Must: func(error) - Helper function (not shown in reference) that panics on error, typically used for server startup\n  Input: error\n  Output: None",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n}\n\nfunc NewApp(opts ...AppOptions) *App {\n\toptions := AppOptions{}\n\tfor _, i := range opts {\n\t\toptions = i\n\t\tbreak\n\t}\n\n\toptions.init()\n\n\tengine := echo.New()\n\n\tengine.Debug = conf.UBool(\"debug\")\n\n\tengine.Use(middleware.Recover())\n\n\tengine.GET(\"/favicon.ico\", func(c echo.Context) error {\n\t\treturn c.Redirect(http.StatusMovedPermanently, \"/static/images/favicon.ico\")\n\t})\n\n\tengine.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n\t\tFormat: `${method} | ${status} | ${uri} -> ${latency_human}` + \"\\n\",\n\t}))\n\n\tapp := &App{\n\t\tEngine: engine,\n\t}\n\n\treturn app\n}\n\nfunc (app *App) Run() {\n\tMust(app.Engine.Start(\":\" + app.Conf.UString(\"port\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"conf\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n\tConf   *conf.Conf\n}\n\ntype AppOption func(*App)\n\nfunc NewApp(opts ...AppOption) *App {\n\te := echo.New()\n\tapp := &App{\n\t\tEngine: e,\n\t\tConf:   nil,\n\t}\n\tfor _, opt := range opts {\n\t\topt(app)\n\t}\n\tapp.Engine.Use(middleware.Recover())\n\tapp.Engine.Use(middleware.Logger())\n\tapp.Engine.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Server is running\")\n\t})\n\treturn app\n}\n\nfunc (a *App) Run() {\n\tport := a.Conf.Port\n\tMust(a.Engine.Start(fmt.Sprintf(\":%d\", port)))\n}\n\nfunc Must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server with WebSocket support using the Echo framework, capable of handling messages, health checks, and streaming, with optional authentication.\n\nStruct Description: The API struct represents an HTTP server with WebSocket capabilities, message buffering, and authentication support. It handles incoming HTTP requests and WebSocket connections while managing message broadcasting and logging.\n\nFields:\n\nMessages: [ring.Ring] - A ring buffer for storing messages with configurable capacity\nRWMutex: [sync.RWMutex] - Read-write mutex for thread-safe operations on shared data\nConfig: [*bridge.Config] - Configuration object containing server settings and parameters\nmrouter: [*melody.Melody] - WebSocket router for handling WebSocket connections and messages\n\nMethods:\n\nNew: [func(cfg *bridge.Config) bridge.Bridger] -> [bridge.Bridger] - Constructor that initializes the API instance, sets up routes, and starts the HTTP server\nhandleWebsocketMessage: [func(message config.Message, s *melody.Session)] -> [void] - Handles incoming WebSocket messages, prepares them for broadcasting, and sends to remote channel\nhandleWebsocket: [func(c echo.Context) error] -> [error] - WebSocket handler that manages WebSocket connections using the melody router\nhandleHealthcheck: [func(c echo.Context) error] -> [error] - Health check endpoint handler (implied by route registration)\nhandleMessages: [func(c echo.Context) error] -> [error] - Messages endpoint handler (implied by route registration)\nhandleStream: [func(c echo.Context) error] -> [error] - Stream endpoint handler (implied by route registration)\nhandlePostMessage: [func(c echo.Context) error] -> [error] - Message posting endpoint handler (implied by route registration)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/olahol/melody\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype API struct {\n\tMessages ring.Ring\n\tsync.RWMutex\n\t*bridge.Config\n\tmrouter *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\tb := &API{Config: cfg}\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\n\tb.mrouter = melody.New()\n\tb.mrouter.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tmessage := config.Message{}\n\t\terr := json.Unmarshal(msg, &message)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to decode message from byte[] '%s'\", string(msg))\n\t\t\treturn\n\t\t}\n\t\tb.handleWebsocketMessage(message, s)\n\t})\n\tb.mrouter.HandleConnect(func(session *melody.Session) {\n\t\tgreet := b.getGreeting()\n\t\tdata, err := json.Marshal(greet)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to encode message '%v'\", greet)\n\t\t\treturn\n\t\t}\n\t\terr = session.Write(data)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to write message '%s'\", string(data))\n\t\t\treturn\n\t\t}\n\t})\n\n\tb.Messages = ring.Ring{}\n\tif b.GetInt(\"Buffer\") != 0 {\n\t\tb.Messages.SetCapacity(b.GetInt(\"Buffer\"))\n\t}\n\tif b.GetString(\"Token\") != \"\" {\n\t\te.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == b.GetString(\"Token\"), nil\n\t\t}))\n\t}\n\n\te.GET(\"/api/health\", b.handleHealthcheck)\n\te.GET(\"/api/messages\", b.handleMessages)\n\te.GET(\"/api/stream\", b.handleStream)\n\te.GET(\"/api/websocket\", b.handleWebsocket)\n\te.POST(\"/api/message\", b.handlePostMessage)\n\tgo func() {\n\t\tif b.GetString(\"BindAddress\") == \"\" {\n\t\t\tb.Log.Fatalf(\"No BindAddress configured.\")\n\t\t}\n\t\tb.Log.Infof(\"Listening on %s\", b.GetString(\"BindAddress\"))\n\t\tb.Log.Fatal(e.Start(b.GetString(\"BindAddress\")))\n\t}()\n\treturn b\n}\n\nfunc (b *API) handleWebsocketMessage(message config.Message, s *melody.Session) {\n\tmessage.Channel = \"api\"\n\tmessage.Protocol = \"api\"\n\tmessage.Account = b.Account\n\tmessage.ID = \"\"\n\tmessage.Timestamp = time.Now()\n\n\tdata, err := json.Marshal(message)\n\tif err != nil {\n\t\tb.Log.Errorf(\"failed to encode message for loopback '%v'\", message)\n\t\treturn\n\t}\n\t_ = b.mrouter.BroadcastOthers(data, s)\n\n\tb.Log.Debugf(\"Sending websocket message from %s on %s to gateway\", message.Username, \"api\")\n\tb.Remote <- message\n}\n\nfunc (b *API) handleWebsocket(c echo.Context) error {\n\terr := b.mrouter.HandleRequest(c.Response(), c.Request())\n\tif err != nil {\n\t\tb.Log.Errorf(\"error in websocket handling  '%v'\", err)\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"container/ring\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/olahol/melody\"\n)\n\ntype API struct {\n\tMessages  *ring.Ring\n\tRWMutex   sync.RWMutex\n\tConfig    *bridge.Config\n\tmrouter   *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\te := echo.New()\n\tm := melody.New()\n\tapi := &API{\n\t\tMessages: ring.New(int(cfg.BufferSize)),\n\t\tConfig:   cfg,\n\t\tmrouter:  m,\n\t}\n\n\tm.OnMessage = func(s *melody.Session, payload []byte) {\n\t\tvar msg bridge.Message\n\t\tif err := json.Unmarshal(payload, &msg); err != nil {\n\t\t\treturn\n\t\t}\n\t\tapi.handleWebsocketMessage(msg, s)\n\t}\n\n\tif cfg.Auth != nil {\n\t\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\t\treturn func(c echo.Context) error {\n\t\t\t\tif cfg.Auth.Validate(c.Request().Header.Get(\"Authorization\")) {\n\t\t\t\t\treturn next(c)\n\t\t\t\t}\n\t\t\t\treturn echo.ErrUnauthorized\n\t\t\t}\n\t\t})\n\t}\n\n\te.GET(\"/healthcheck\", api.handleHealthcheck)\n\te.GET(\"/messages\", api.handleMessages)\n\te.GET(\"/stream\", api.handleStream)\n\te.POST(\"/message\", api.handlePostMessage)\n\te.GET(\"/ws\", api.handleWebsocket)\n\n\tgo e.Start(\":8080\")\n\n\treturn api\n}\n\nfunc (a *API) handleWebsocketMessage(message bridge.Message, s *melody.Session) {\n\ta.RWMutex.Lock()\n\ta.Messages.Value = message\n\ta.Messages = a.Messages.Next()\n\ta.RWMutex.Unlock()\n\ta.mrouter.Broadcast(message)\n}\n\nfunc (a *API) handleWebsocket(c echo.Context) error {\n\treturn a.mrouter.HandleRequest(c)\n}\n\nfunc (a *API) handleHealthcheck(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"OK\")\n}\n\nfunc (a *API) handleMessages(c echo.Context) error {\n\tvar messages []bridge.Message\n\ta.RWMutex.RLock()\n\ta.Messages.Do(func(p interface{}) {\n\t\tif msg, ok := p.(bridge.Message); ok {\n\t\t\tmessages = append(messages, msg)\n\t\t}\n\t})\n\ta.RWMutex.RUnlock()\n\treturn c.JSON(http.StatusOK, messages)\n}\n\nfunc (a *API) handleStream(c echo.Context) error {\n\tc.Response().Header().Set(\"Content-Type\", \"text/event-stream\")\n\tc.Response().WriteHeader(http.StatusOK)\n\n\ta.RWMutex.RLock()\n\ta.Messages.Do(func(p interface{}) {\n\t\tif msg, ok := p.(bridge.Message); ok {\n\t\t\tdata, _ := json.Marshal(msg)\n\t\t\tc.Write(data)\n\t\t\tc.Write([]byte(\"\\n\"))\n\t\t}\n\t})\n\ta.RWMutex.RUnlock()\n\n\treturn nil\n}\n\nfunc (a *API) handlePostMessage(c echo.Context) error {\n\tvar msg bridge.Message\n\tif err := c.Bind(&msg); err != nil {\n\t\treturn c.NoContent(http.StatusBadRequest)\n\t}\n\ta.RWMutex.Lock()\n\ta.Messages.Value = msg\n\ta.Messages = a.Messages.Next()\n\ta.RWMutex.Unlock()\n\ta.mrouter.Broadcast(msg)\n\treturn c.NoContent(http.StatusOK)\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Implement an auto-managed HTTP provider in Go using the Echo framework that can dynamically start/stop an HTTP server with health check capabilities.\n\nStruct Description: AutoManagedProvider is a struct that manages an Echo-based HTTP server with automatic startup/shutdown capabilities and provides health check endpoints.\n\nFields:\n- activeProvider: *echo.Echo - The Echo HTTP server instance\n- activeProviderRunning: bool - Flag indicating if the server is currently running\n- activeProviderTesting: bool - Flag indicating if the server is in testing mode\n- httpClient: *http.Client - HTTP client used for internal communications\n- autoManagePort: int - Port number for the managed HTTP server\n\nMethods:\n- NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider - Constructor that creates a new AutoManagedProvider with configuration\n- UpdateTTL() - Manages the server lifecycle (starts if not running, stops if shutdown)\n- isShutdown() bool - Checks if the server should be shutdown (returns bool)\n- getCurrentNode() interface{} - Returns current node information for health checks (returns interface{})",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyFromEnvironment,\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   5 * time.Second,\n\t\t\tKeepAlive: 5 * time.Second,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          10,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t\tExpectContinueTimeout: 1 * time.Second,\n\t\tMaxConnsPerHost:       10,\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   2 * time.Second,\n\t}\n\n\tp := &AutoManagedProvider{\n\t\thttpClient:            httpClient,\n\t\tautoManagePort:        autoManPort,\n\t\tactiveProviderRunning: false,\n\t}\n\n\treturn p\n}\n\nfunc (p *AutoManagedProvider) UpdateTTL() {\n\tif p.isShutdown() && p.activeProviderRunning {\n\t\tp.activeProvider.Close()\n\t\treturn\n\t}\n\n\tif p.activeProviderRunning {\n\t\treturn\n\t}\n\n\tif !p.activeProviderTesting {\n\t\tp.activeProvider = echo.New()\n\t\tp.activeProvider.HideBanner = true\n\t\tp.activeProvider.GET(\"/_health\", func(context echo.Context) error {\n\t\t\treturn context.JSON(http.StatusOK, p.getCurrentNode())\n\t\t})\n\t}\n\tgo func() {\n\t\tp.activeProviderRunning = true\n\t\tappURI := fmt.Sprintf(\"0.0.0.0:%d\", p.autoManagePort)\n\t\tp.activeProvider.Start(appURI)\n\t\tp.activeProviderRunning = false\n\t}()\n}\n\nfunc (p *AutoManagedProvider) isShutdown() bool {\n\treturn false\n}\n\nfunc (p *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\te := echo.New()\n\tamp := &AutoManagedProvider{\n\t\tactiveProvider:        e,\n\t\tactiveProviderRunning: false,\n\t\tactiveProviderTesting: false,\n\t\thttpClient:            &http.Client{},\n\t\tautoManagePort:        autoManPort,\n\t}\n\te.GET(\"/health\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, amp.getCurrentNode())\n\t})\n\treturn amp\n}\n\nfunc (amp *AutoManagedProvider) UpdateTTL() {\n\tif amp.isShutdown() {\n\t\tif amp.activeProviderRunning {\n\t\t\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t\t\tdefer cancel()\n\t\t\tamp.activeProvider.Shutdown(ctx)\n\t\t\tamp.activeProviderRunning = false\n\t\t}\n\t} else {\n\t\tif !amp.activeProviderRunning {\n\t\t\tgo func() {\n\t\t\t\taddr := \":\" + strconv.Itoa(amp.autoManagePort)\n\t\t\t\tif err := amp.activeProvider.Start(addr); err != nil {\n\t\t\t\t\tamp.activeProvider.Logger.Fatal(err)\n\t\t\t\t}\n\t\t\t}()\n\t\t\tamp.activeProviderRunning = true\n\t\t}\n\t}\n}\n\nfunc (amp *AutoManagedProvider) isShutdown() bool {\n\treturn amp.activeProviderTesting\n}\n\nfunc (amp *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn map[string]interface{}{\n\t\t\"port\":    amp.autoManagePort,\n\t\t\"running\": amp.activeProviderRunning,\n\t\t\"testing\": amp.activeProviderTesting,\n\t}\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Implement an HTTP server using the Echo framework in Go that handles workflow-related requests with authentication and specific route handlers.\n\nFunction Description: The function `startWorkflowServer` initializes and starts an HTTP server using the Echo framework. It sets up middleware for authentication, defines route handlers for specific endpoints (`/secrets` and `/trigger`), and starts the server on the specified host and port. The server validates incoming requests using a predefined workflow key and performs specific actions based on the route.\n\nInput:  \n- `host` (string): The host address on which the server will listen.  \n- `port` (uint64): The port number on which the server will listen.  \n\nOutput:  \n- None (The function starts an HTTP server and blocks indefinitely unless an error occurs).  \n\nNote: The function uses global variables (`workflowKey`, `builderKey`, `secretsHit`, `triggerHit`, etc.) and external configurations (`config.Current.File.ServerUrl`), which should be defined elsewhere in the code.  \n\n(Strictly followed the format requirements without inserting irrelevant characters.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/rs/zerolog/log\"\n\t\"github.com/ziflex/lecho/v2\"\n)\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\tlogger := lecho.From(log.Logger)\n\te.Logger = logger\n\te.Use(lecho.Middleware(lecho.Config{Logger: logger})\n\n\tkeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == workflowKey, nil\n\t})\n\n\teg := e.Group(\"\", keyAuth)\n\n\teg.POST(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit = true\n\t\tparams, err := c.FormParams()\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tfor key, val := range params {\n\t\t\tswitch key {\n\t\t\tcase \"SECRET_KEY\":\n\t\t\t\tif val[0] != builderKey {\n\t\t\t\t\tlog.Fatal().Msg(\"bad key\")\n\t\t\t\t}\n\t\t\tcase \"SECRET_URL\":\n\t\t\t\tif val[0] != config.Current.File.ServerUrl {\n\t\t\t\t\tlog.Fatal().Msg(\"bad url\")\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tlog.Fatal().Msg(\"unknown secret\")\n\t\t\t}\n\t\t}\n\t\treturn c.NoContent(200)\n\t})\n\n\teg.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit = true\n\t\treturn c.NoContent(200)\n\t})\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\te.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\treturn key == workflowKey, nil\n\t}))\n\te.POST(\"/secrets\", secretsHit)\n\te.POST(\"/trigger\", triggerHit)\n\te.Logger.Fatal(e.Start(fmt.Sprintf(\"%s:%d\", host, port)))\n}"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user authentication with JWT tokens. The server should have routes for login, accessible content, and restricted content that requires JWT authentication.\n\nFunction Description: The main function initializes an Echo server, configures middleware for logging and recovery, sets up route handlers for login and accessible content, and creates a restricted route group that requires JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger its handlers)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately but are referenced in this main function. The JWT configuration uses a custom claims structure (jwtCustomClaims) which should also be defined elsewhere.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tconfig := middleware.JWTConfig{\n\t\tClaims:     &jwtCustomClaims{},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\tr.Use(middleware.JWTWithConfig(config))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\ntype jwtCustomClaims struct {\n\tName string `json:\"name\"`\n\t*middleware.JWT\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", loginHandler)\n\te.GET(\"/accessible\", accessibleHandler)\n\n\trestricted := e.Group(\"/restricted\")\n\trestricted.Use(middleware.JWTWithConfig(middleware.JWTConfig{\n\t\tSigningKey: []byte(\"secret-key\"),\n\t\tClaims:     &jwtCustomClaims{},\n\t}))\n\n\trestricted.GET(\"/content\", restrictedHandler)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n\nfunc loginHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"login endpoint\"})\n}\n\nfunc accessibleHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"public content\"})\n}\n\nfunc restrictedHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"protected content\"})\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various API endpoints for a Vault management system, including authentication, token management, secret management, and more.\n\nFunction Description: The StartListener function initializes and starts an Echo HTTP server with configured routes and middleware. It sets up various API endpoints for Vault operations, applies middleware for logging, recovery, and request handling, and serves static assets if provided. The server can be started with or without TLS based on configuration.\n\nInput:\n- listener: config.ListenerConfig - Configuration for the server listener including address and TLS settings\n- assets: *rice.Box - Optional box containing static assets to be served by the server\n\nOutput: None (the function starts the server which runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\t\"log\"\n\n\t\"github.com/caiyeon/goldfish/config\"\n\t\"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\te        *echo.Echo\n)\n\nfunc StartListener(listener config.ListenerConfig, assets *rice.Box) {\n\te = echo.New()\n\te.HideBanner = true\n\te.Server.ReadTimeout = 10 * time.Second\n\te.Server.WriteTimeout = 2 * time.Minute\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.BodyLimit(\"32M\"))\n\te.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n\t\tLevel: 5,\n\t}))\n\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tc.Response().Header().Set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\")\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\tif assets != nil {\n\t\tassetHandler := http.FileServer(assets.HTTPBox())\n\t\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\t\te.GET(\"/assets/css/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/js/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/fonts/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/img/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t}\n\n\te.GET(\"/v1/health\", handlers.Health())\n\te.GET(\"/v1/vaulthealth\", handlers.VaultHealth())\n\te.POST(\"/v1/bootstrap\", handlers.Bootstrap())\n\n\te.POST(\"/v1/login\", handlers.Login())\n\te.POST(\"/v1/login/renew-self\", handlers.RenewSelf())\n\n\te.GET(\"/v1/token/accessors\", handlers.GetTokenAccessors())\n\te.POST(\"/v1/token/lookup-accessor\", handlers.LookupTokenByAccessor())\n\te.POST(\"/v1/token/revoke-accessor\", handlers.RevokeTokenByAccessor())\n\te.POST(\"/v1/token/revoke-self\", handlers.RevokeSelf())\n\te.POST(\"/v1/token/create\", handlers.CreateToken())\n\te.GET(\"/v1/token/listroles\", handlers.ListRoles())\n\te.GET(\"/v1/token/role\", handlers.GetRole())\n\n\te.GET(\"/v1/userpass/users\", handlers.GetUserpassUsers())\n\te.POST(\"/v1/userpass/delete\", handlers.DeleteUserpassUser())\n\n\te.GET(\"/v1/approle/roles\", handlers.GetApproleRoles())\n\te.POST(\"/v1/approle/delete\", handlers.DeleteApproleRole())\n\n\te.GET(\"/v1/ldap/groups\", handlers.GetLDAPGroups())\n\te.GET(\"/v1/ldap/users\", handlers.GetLDAPUsers())\n\n\te.GET(\"/v1/policy\", handlers.GetPolicy())\n\te.DELETE(\"/v1/policy\", handlers.DeletePolicy())\n\te.GET(\"/v1/policy-capabilities\", handlers.PolicyCapabilities())\n\n\te.GET(\"/v1/request\", handlers.GetRequest())\n\te.POST(\"/v1/request/add\", handlers.AddRequest())\n\te.POST(\"/v1/request/approve\", handlers.ApproveRequest())\n\te.DELETE(\"/v1/request/reject\", handlers.RejectRequest())\n\n\te.GET(\"/v1/transit\", handlers.TransitInfo())\n\te.POST(\"/v1/transit/encrypt\", handlers.EncryptString())\n\te.POST(\"/v1/transit/decrypt\", handlers.DecryptString())\n\n\te.GET(\"/v1/mount\", handlers.GetMount())\n\te.POST(\"/v1/mount\", handlers.ConfigMount())\n\n\te.GET(\"/v1/secrets\", handlers.GetSecrets())\n\te.POST(\"/v1/secrets\", handlers.PostSecrets())\n\te.DELETE(\"/v1/secrets\", handlers.DeleteSecrets())\n\n\te.GET(\"/v1/bulletins\", handlers.GetBulletins())\n\n\te.POST(\"/v1/wrapping/wrap\", handlers.WrapHandler())\n\te.POST(\"/v1/wrapping/unwrap\", handlers.UnwrapHandler())\n\n\tif listener.Tls_disable {\n\t\te.Logger.Fatal(e.Start(listener.Address))\n\t\treturn\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/GeertJohan/rice\"\n)\n\nfunc StartListener(listener config.ListenerConfig, assets *rice.Box) {\n\te := echo.New()\n\te.Use(middleware.Logger(), middleware.Recover())\n\n\tapi := e.Group(\"/api/v1\")\n\t{\n\t\tauth := api.Group(\"/auth\")\n\t\tauth.POST(\"/login\", func(c echo.Context) error { return c.NoContent(501) })\n\t\tauth.POST(\"/logout\", func(c echo.Context) error { return c.NoContent(501) })\n\t\tauth.POST(\"/refresh\", func(c echo.Context) error { return c.NoContent(501) })\n\n\t\ttokens := api.Group(\"/tokens\")\n\t\ttokens.POST(\"\", func(c echo.Context) error { return c.NoContent(501) })\n\t\ttokens.GET(\"/:id\", func(c echo.Context) error { return c.NoContent(501) })\n\t\ttokens.DELETE(\"/:id\", func(c echo.Context) error { return c.NoContent(501) })\n\t\ttokens.GET(\"/lookup\", func(c echo.Context) error { return c.NoContent(501) })\n\n\t\tsecrets := api.Group(\"/secrets\")\n\t\tsecrets.POST(\"/:path\", func(c echo.Context) error { return c.NoContent(501) })\n\t\tsecrets.GET(\"/:path\", func(c echo.Context) error { return c.NoContent(501) })\n\t\tsecrets.DELETE(\"/:path\", func(c echo.Context) error { return c.NoContent(501) })\n\t}\n\n\tif assets != nil {\n\t\te.Use(static.Serve(\"/\", assets.HTTPBox()))\n\t}\n\n\tif listener.TLS != nil {\n\t\te.Logger.Fatal(e.StartTLS(listener.Address, listener.TLS.CertFile, listener.TLS.KeyFile))\n\t} else {\n\t\te.Logger.Fatal(e.Start(listener.Address))\n\t}\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user-related requests with CORS support and logging middleware.\n\nFunction Description: The main function initializes an Echo server instance, configures middleware (logger, recovery, and CORS), sets up route handlers, and starts the server on port 1323.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handler function `getUsers` would need to be implemented separately to handle the GET request to \"/api/users\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n\t\tAllowMethods: []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc getUsers(c echo.Context) error {\n\treturn nil\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORS())\n\te.GET(\"/api/users\", getUsers)\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that includes rate limiting middleware using Sentinel, with custom resource extraction and block fallback handlers.\n\nFunction Description: The function sets up a Fiber web server with Sentinel middleware for rate limiting. The middleware extracts the client's real IP from headers as the resource key and provides a custom JSON response when requests are blocked. The server listens on port 8080 and includes a test endpoint.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import \"github.com/gofiber/fiber/v2\"\n\nfunc Example() {\n\tapp := fiber.New()\n\tapp.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx *fiber.Ctx) string {\n\t\t\t\treturn ctx.GetReqHeaders()[\"X-Real-IP\"]\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx *fiber.Ctx) error {\n\t\t\t\treturn ctx.Status(400).JSON(struct {\n\t\t\t\t\tError string `json:\"error\"`\n\t\t\t\t\tCode  int    `json:\"code\"`\n\t\t\t\t}{\n\t\t\t\t\t\"too many request; the quota used up\",\n\t\t\t\t\t10222,\n\t\t\t\t})\n\t\t\t})),\n\t)\n\n\tapp.Get(\"/test\", func(ctx *fiber.Ctx) error { return nil })\n\t_ = app.Listen(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/core/base\"\n\t\"github.com/alibaba/sentinel-golang/core/config\"\n\t\"github.com/alibaba/sentinel-golang/core/flow\"\n)\n\nfunc setupServer() {\n\tcfg := config.NewDefaultConfig()\n\tif err := api.InitWithConfig(cfg); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif _, err := flow.LoadRules([]*flow.Rule{\n\t\t{\n\t\t\tResource:               \"client_ip\",\n\t\t\tMetricType:             flow.QPS,\n\t\t\tCount:                  10,\n\t\t\tControlBehavior:        flow.Reject,\n\t\t\tTokenCalculateStrategy: flow.Direct,\n\t\t},\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tapp := fiber.New()\n\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\tip := c.Get(\"X-Forwarded-For\")\n\t\tif ip == \"\" {\n\t\t\tip = c.Get(\"X-Real-IP\")\n\t\t\tif ip == \"\" {\n\t\t\t\tip = c.IP()\n\t\t\t}\n\t\t}\n\n\t\te, err := api.Entry(\"client_ip\", base.WithTrafficType(base.Inbound), base.WithResourceAssociation(ip))\n\t\tif err != nil {\n\t\t\treturn blockHandler(c)\n\t\t}\n\t\tdefer e.Exit()\n\n\t\treturn c.Next()\n\t})\n\n\tapp.Get(\"/test\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"Test endpoint accessed\")\n\t})\n\n\tapp.Listen(\":8080\")\n}\n\nfunc blockHandler(c *fiber.Ctx) error {\n\treturn c.Status(429).JSON(fiber.Map{\n\t\t\"error\": \"Too many requests, please try again later\",\n\t})\n}\n\nfunc main() {\n\tsetupServer()\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that handles health checks and image conversion requests.\n\nFunction Description: The main function initializes and configures a Fiber HTTP server, sets up middleware for ETag generation, defines route handlers for health checks and image conversion, and starts the server on a specified host and port.\n\nInput:\n- Configuration parameters (host, port, read buffer size, concurrency, keepalive settings) are read from the config.Config object\n- No direct input parameters to the main function itself\n\nOutput:\n- Running HTTP server that listens on specified address\n- Console output indicating server status\n- Potential fatal error if server fails to start\n\nThe function performs these key operations:\n1. Initializes Fiber app with custom configuration\n2. Adds ETag middleware\n3. Registers route handlers:\n   - /healthz endpoint for health checks\n   - /* catch-all endpoint for image conversion\n4. Starts the server and handles startup errors",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"webp_server_go/config\"\n\t\"webp_server_go/handler\"\n)\n\nvar app = fiber.New(fiber.Config{\n\tServerHeader:          \"WebP Server Go\",\n\tAppName:               \"WebP Server Go\",\n\tDisableStartupMessage: true,\n\tProxyHeader:           \"X-Real-IP\",\n\tReadBufferSize:        config.Config.ReadBufferSize,\n\tConcurrency:           config.Config.Concurrency,\n\tDisableKeepalive:      config.Config.DisableKeepalive,\n})\n\nfunc main() {\n\tapp.Use(etag.New(etag.Config{\n\t\tWeak: true,\n\t}))\n\n\tlistenAddress := config.Config.Host + \":\" + config.Config.Port\n\n\tapp.Get(\"/healthz\", handler.Healthz)\n\tapp.Get(\"/*\", handler.Convert)\n\n\tfmt.Println(\"WebP Server Go is Running on http://\" + listenAddress)\n\n\tbindErr := app.Listen(listenAddress)\n\tif bindErr != nil {\n\t\tlog.Fatal(\"Error starting server: \", bindErr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/etag\"\n\t\"myapp/config\"\n)\n\nfunc main() {\n\tapp := fiber.New(fiber.Config{\n\t\tReadBufferSize: config.ReadBufferSize,\n\t\tConcurrency:    config.Concurrency,\n\t\tIdleTimeout:    config.KeepaliveTimeout,\n\t})\n\n\tapp.Use(etag.New())\n\n\tapp.Get(\"/healthz\", func(c *fiber.Ctx) error {\n\t\treturn c.SendStatus(http.StatusOK)\n\t})\n\n\tapp.Get(\"/*\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"Image conversion endpoint\")\n\t})\n\n\taddress := fmt.Sprintf(\"%s:%d\", config.Host, config.Port)\n\tlog.Printf(\"Starting server on %s\", address)\n\tif err := app.Listen(address); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go for a dashboard application that manages queues and tenants, with optional basic authentication and template rendering capabilities.\n\nStruct Description: The Dashboard struct represents a web dashboard that provides queue management functionality through HTTP endpoints. It uses the Fiber framework for routing and middleware, supports HTML template rendering, and can be configured with basic authentication.\n\nFields:\n\nApp: *fiber.App - The Fiber application instance for handling HTTP requests\nqueue: models.Queue - Interface for queue operations\ntenantManager: models.TenantManager - Interface for tenant management operations\ncfg: config.DashboardConfig - Configuration settings for the dashboard\n\nMethods:\n\nNewDashboard: (queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) -> *Dashboard - Initializes a new Dashboard instance with the given dependencies and configuration, sets up template engine, basic auth middleware, and route handlers\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nQueues: (c *fiber.Ctx) -> error - Handler for GET / route\nNewQueue: (c *fiber.Ctx) -> error - Handler for POST /queues route\nQueue: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue route\nQueueSettings: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/settings route\nSaveQueueSettings: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/settings route\nDeleteQueueConfirm: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/delete route\nDeleteQueue: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/delete route\nMessage: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/messages/:message route",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"github.com/gofiber/template/html/v2\"\n)\n\ntype Dashboard struct {\n\tApp *fiber.App\n\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tvar engine *html.Engine\n\n\tif cfg.Dev {\n\t\tengine = html.New(\"./dashboard/views\", \".html\")\n\t\tengine.Reload(true)\n\t\tengine.Debug(true)\n\t} else {\n\t\thttp.FS(viewsfs)\n\t\tfs2, err := fs.Sub(viewsfs, \"views\")\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tengine = html.NewFileSystem(http.FS(fs2), \".html\")\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tViews:                 engine,\n\t\tDisableStartupMessage: true,\n\t})\n\n\tif cfg.User != \"\" && cfg.Pass != \"\" {\n\t\tapp.Use(basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.User: cfg.Pass,\n\t\t\t},\n\t\t}))\n\t}\n\n\td := &Dashboard{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp.Get(\"/\", d.Queues)\n\tapp.Post(\"/queues\", d.NewQueue)\n\tapp.Get(\"/queues/:queue\", d.Queue)\n\tapp.Get(\"/queues/:queue/settings\", d.QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", d.SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", d.DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", d.DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", d.Message)\n\n\treturn d\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"Dashboard: http://localhost:%d\\n\", d.cfg.Port)\n\treturn d.App.Listen(fmt.Sprintf(\":%d\", d.cfg.Port))\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif d.cfg.Enabled {\n\t\treturn d.App.Shutdown()\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package dashboard\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/template/html\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"yourproject/models\"\n\t\"yourproject/config\"\n)\n\ntype Dashboard struct {\n\tApp          *fiber.App\n\tqueue        models.Queue\n\ttenantManager models.TenantManager\n\tcfg          config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tengine := html.New(\"./templates\", \".html\")\n\tengine.Debug(cfg.TemplateDebug)\n\n\tapp := fiber.New(fiber.Config{\n\t\tViews: engine,\n\t})\n\n\td := &Dashboard{\n\t\tApp:          app,\n\t\tqueue:        queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:          cfg,\n\t}\n\n\tif cfg.BasicAuthEnabled {\n\t\tauthMiddleware := basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.BasicAuthUser: cfg.BasicAuthPass,\n\t\t\t},\n\t\t})\n\t\tapp.Use(authMiddleware)\n\t}\n\n\tapp.Get(\"/\", d.Queues)\n\tapp.Post(\"/queues\", d.NewQueue)\n\tapp.Get(\"/queues/:queue\", d.Queue)\n\tapp.Get(\"/queues/:queue/settings\", d.QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", d.SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", d.DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", d.DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", d.Message)\n\n\treturn d\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn d.App.Listen(d.cfg.Addr)\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn d.App.Shutdown()\n}\n\nfunc (d *Dashboard) Queues(c *fiber.Ctx) error {\n\tqueues, err := d.queue.List()\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Render(\"queues\", fiber.Map{\"Queues\": queues})\n}\n\nfunc (d *Dashboard) NewQueue(c *fiber.Ctx) error {\n\tname := c.FormValue(\"name\")\n\tif err := d.queue.Create(name); err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Redirect(\"/\")\n}\n\nfunc (d *Dashboard) Queue(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tq, err := d.queue.Get(name)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).SendString(\"Queue not found\")\n\t}\n\treturn c.Render(\"queue\", fiber.Map{\"Queue\": q})\n}\n\nfunc (d *Dashboard) QueueSettings(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tq, err := d.queue.Get(name)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).SendString(\"Queue not found\")\n\t}\n\treturn c.Render(\"settings\", fiber.Map{\"Queue\": q})\n}\n\nfunc (d *Dashboard) SaveQueueSettings(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tconfig := make(map[string]string)\n\t// Parse form values and update config\n\tif err := d.queue.UpdateConfig(name, config); err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Redirect(\"/queues/\" + name)\n}\n\nfunc (d *Dashboard) DeleteQueueConfirm(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\treturn c.Render(\"delete_queue\", fiber.Map{\"QueueName\": name})\n}\n\nfunc (d *Dashboard) DeleteQueue(c *fiber.Ctx) error {\n\tname := c.Params(\"queue\")\n\tif err := d.queue.Delete(name); err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n\t}\n\treturn c.Redirect(\"/\")\n}\n\nfunc (d *Dashboard) Message(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tmessageID := c.Params(\"message\")\n\tmsg, err := d.queue.GetMessage(queueName, messageID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).SendString(\"Message not found\")\n\t}\n\treturn c.Render(\"message\", fiber.Map{\"Message\": msg})\n}"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Implement a Fiber-based HTTP server in Go that handles Amazon SQS (Simple Queue Service) API requests, including authentication, routing, and various SQS operations.\n\nStruct Description: The SQS struct represents an HTTP server that processes Amazon SQS API requests. It uses Fiber framework for HTTP handling and includes queue management functionality with tenant isolation.\n\nFields:\n\nApp: *fiber.App - Fiber application instance for HTTP server\nqueue: models.Queue - Queue management interface\ntenantManager: models.TenantManager - Tenant management interface\ncfg: config.SQSConfig - Configuration for the SQS server\n\nMethods:\n\nNewSQS: (queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) -> *SQS - Constructor that initializes the SQS server with dependencies and configuration\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nAction: (c *fiber.Ctx) -> error - Main request handler that routes SQS API requests based on X-Amz-Target header\nSendMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessage SQS operation\nSendMessageBatch: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessageBatch SQS operation\nReceiveMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles ReceiveMessage SQS operation\nDeleteMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles DeleteMessage SQS operation\nListQueues: (c *fiber.Ctx, tenantId int64) -> error - Handles ListQueues SQS operation\nGetQueueURL: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueUrl SQS operation\nCreateQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles CreateQueue SQS operation\nGetQueueAttributes: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueAttributes SQS operation\nPurgeQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles PurgeQueue SQS operation\nChangeMessageVisibility: (c *fiber.Ctx, tenantId int64) -> error - Handles ChangeMessageVisibility SQS operation\nerrorHandler: (ctx *fiber.Ctx, err error) -> error - Custom error handler for the Fiber app\nauthMiddleware: (c *fiber.Ctx) -> error - Authentication middleware for tenant validation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/valyala/fasthttp/fasthttpadaptor\"\n)\n\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\ts := &SQS{\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t\tErrorHandler:          s.errorHandler,\n\t\tBodyLimit:             cfg.MaxRequestSize,\n\t})\n\n\tapp.Use(s.authMiddleware)\n\tapp.Post(\"/*\", s.Action)\n\n\ts.App = app\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"SQS Endpoint: http://localhost:%d\\n\", s.cfg.Port)\n\treturn s.App.Listen(fmt.Sprintf(\":%d\", s.cfg.Port))\n}\n\nfunc (s *SQS) Stop() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\tawsMethodHeader, ok := c.GetReqHeaders()[\"X-Amz-Target\"]\n\tif !ok {\n\t\treturn errors.New(\"X-Amz-Target header not found\")\n\t}\n\tawsMethod := awsMethodHeader[0]\n\n\tvar r *http.Request = &http.Request{}\n\tfasthttpadaptor.ConvertRequest(c.Context(), r, false)\n\n\ttenantId := c.Locals(\"tenantId\").(int64)\n\n\tvar rc error\n\tswitch awsMethod {\n\tcase \"AmazonSQS.SendMessage\":\n\t\trc = s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\trc = s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\trc = s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\trc = s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\trc = s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\trc = s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\trc = s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\trc = s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\trc = s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\trc = s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\trc = NewSQSError(400, \"UnsupportedOperation\", fmt.Sprintf(\"SQS method %s not implemented\", awsMethod))\n\t}\n\n\treturn rc\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package sqs\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/recover\"\n\t\"github.com/gofiber/fiber/v2/utils\"\n\t\"yourmodule/config\"\n\t\"yourmodule/models\"\n)\n\ntype SQS struct {\n\tApp          *fiber.App\n\tqueue        models.Queue\n\ttenantManager models.TenantManager\n\tcfg          config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\tapp := fiber.New(fiber.Config{\n\t\tErrorHandler: func(c *fiber.Ctx, err error) error {\n\t\t\treturn app.errorHandler(c, err)\n\t\t},\n\t})\n\n\ts := &SQS{\n\t\tApp:          app,\n\t\tqueue:        queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:          cfg,\n\t}\n\n\tapp.Use(recover.New())\n\tapp.Use(s.authMiddleware)\n\n\tapp.Post(\"/\", s.Action)\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Listen(s.cfg.Addr)\n}\n\nfunc (s *SQS) Stop() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Shutdown()\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\ttarget := c.Get(\"X-Amz-Target\")\n\tif target == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\n\t// Extract operation from target (format: \"AmazonSQS.[Operation]\")\n\tparts := utils.Split(target, \".\")\n\tif len(parts) != 2 {\n\t\treturn fiber.ErrBadRequest\n\t}\n\n\toperation := parts[1]\n\ttenantId := c.Locals(\"tenantID\").(int64)\n\n\tswitch operation {\n\tcase \"SendMessage\":\n\t\treturn s.SendMessage(c, tenantId)\n\tcase \"SendMessageBatch\":\n\t\treturn s.SendMessageBatch(c, tenantId)\n\tcase \"ReceiveMessage\":\n\t\treturn s.ReceiveMessage(c, tenantId)\n\tcase \"DeleteMessage\":\n\t\treturn s.DeleteMessage(c, tenantId)\n\tcase \"ListQueues\":\n\t\treturn s.ListQueues(c, tenantId)\n\tcase \"GetQueueUrl\":\n\t\treturn s.GetQueueURL(c, tenantId)\n\tcase \"CreateQueue\":\n\t\treturn s.CreateQueue(c, tenantId)\n\tcase \"GetQueueAttributes\":\n\t\treturn s.GetQueueAttributes(c, tenantId)\n\tcase \"PurgeQueue\":\n\t\treturn s.PurgeQueue(c, tenantId)\n\tcase \"ChangeMessageVisibility\":\n\t\treturn s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\treturn fiber.ErrNotImplemented\n\t}\n}\n\nfunc (s *SQS) errorHandler(c *fiber.Ctx, err error) error {\n\tcode := fiber.StatusInternalServerError\n\tif e, ok := err.(*fiber.Error); ok {\n\t\tcode = e.Code\n\t}\n\treturn c.Status(code).JSON(fiber.Map{\"error\": err.Error()})\n}\n\nfunc (s *SQS) authMiddleware(c *fiber.Ctx) error {\n\t// Example: Extract tenant ID from API key in Authorization header\n\tauthHeader := c.Get(\"Authorization\")\n\tif authHeader == \"\" {\n\t\treturn fiber.ErrUnauthorized\n\t}\n\n\t// Validate API key and get tenant ID\n\ttenantID, err := s.tenantManager.ValidateAPIKey(context.Background(), authHeader)\n\tif err != nil {\n\t\treturn fiber.ErrUnauthorized\n\t}\n\n\tc.Locals(\"tenantID\", tenantID)\n\treturn c.Next()\n}\n\nfunc (s *SQS) SendMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS SendMessage logic\n\treturn nil\n}\n\nfunc (s *SQS) SendMessageBatch(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS SendMessageBatch logic\n\treturn nil\n}\n\nfunc (s *SQS) ReceiveMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS ReceiveMessage logic\n\treturn nil\n}\n\nfunc (s *SQS) DeleteMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS DeleteMessage logic\n\treturn nil\n}\n\nfunc (s *SQS) ListQueues(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS ListQueues logic\n\treturn nil\n}\n\nfunc (s *SQS) GetQueueURL(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS GetQueueUrl logic\n\treturn nil\n}\n\nfunc (s *SQS) CreateQueue(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS CreateQueue logic\n\treturn nil\n}\n\nfunc (s *SQS) GetQueueAttributes(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS GetQueueAttributes logic\n\treturn nil\n}\n\nfunc (s *SQS) PurgeQueue(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS PurgeQueue logic\n\treturn nil\n}\n\nfunc (s *SQS) ChangeMessageVisibility(c *fiber.Ctx, tenantId int64) error {\n\t// Implement SQS ChangeMessageVisibility logic\n\treturn nil\n}"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with configurable settings including middleware, routes, and TLS support.\n\nFunction Description: The function serves as the entry point for starting a Gin-based HTTP server. It initializes the Gin engine with default middleware (Logger and Recovery) and additional custom middleware (CORS, Correlation, Auth, etc.). It registers various route handlers for different endpoints including health checks, metrics, and a home route. The server can be started with or without TLS based on configuration.\n\nInput: \n- None (configuration is read from viper and cobra command context)\n\nOutput: \n- None (runs HTTP server as a blocking operation, panics on error)\n\nMethods:\n- The function itself serves as the main execution method for the cobra.Command's Run field\n\nNote: The function uses global configuration via viper and is designed to work as part of a cobra CLI command structure. It handles server startup errors by panicking, which is appropriate for a main application entry point.\n\n(Strictly following the format with no extra characters)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n)\n\nvar towerCmd = &cobra.Command{\n\tUse:   \"api\",\n\tShort: \"Start beaver api server\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tr := gin.Default()\n\n\t\tr.Use(middleware.Cors())\n\t\tr.Use(middleware.Correlation())\n\t\tr.Use(middleware.Logger())\n\t\tr.Use(middleware.Metric())\n\t\tr.Use(middleware.Auth())\n\n\t\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\t\tc.String(http.StatusNoContent, \"\")\n\t\t})\n\n\t\tr.GET(\"/\", controller.Home)\n\n\t\tr.GET(\"/_health\", controller.Health)\n\n\t\tr.GET(\n\t\t\tviper.GetString(\"app.metrics.prometheus.endpoint\"),\n\t\t\tgin.WrapH(controller.Metrics()),\n\t\t)\n\n\t\tvar runerr error\n\n\t\tif viper.GetBool(\"app.tls.status\") {\n\t\t\trunerr = r.RunTLS(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t\tviper.GetString(\"app.tls.pemPath\"),\n\t\t\t\tviper.GetString(\"app.tls.keyPath\"),\n\t\t\t)\n\t\t} else {\n\t\t\trunerr = r.Run(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t)\n\t\t}\n\n\t\tif runerr != nil {\n\t\t\tpanic(runerr.Error())\n\t\t}\n\t},\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n)\n\nfunc StartServer(cmd *cobra.Command, args []string) {\n\tr := gin.Default()\n\n\tr.Use(middleware.CORS())\n\tr.Use(middleware.Correlation())\n\tr.Use(middleware.Auth())\n\n\tr.GET(\"/\", handlers.HomeHandler)\n\tr.GET(\"/health\", handlers.HealthCheck)\n\tr.GET(\"/metrics\", handlers.MetricsHandler)\n\n\taddr := viper.GetString(\"server.address\")\n\n\tif viper.GetBool(\"server.tls.enabled\") {\n\t\tcert := viper.GetString(\"server.tls.cert\")\n\t\tkey := viper.GetString(\"server.tls.key\")\n\t\tif err := r.RunTLS(addr, cert, key); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t} else {\n\t\tif err := r.Run(addr); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\n//go:embed static\nvar staticFiles embed.FS\n\nfunc startServer() {\n\trouter := gin.Default()\n\trouter.StaticFS(\"/static\", http.FS(staticFiles))\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that implements a session-based counter. The server should increment and persist a counter value across requests using Redis as the session store.\n\nFunction Description: The main function initializes a Gin web server with Redis-based session management and implements a GET endpoint (\"/incr\") that increments and returns a counter value stored in the session.\n\nInput: None (The function takes no direct input parameters. Input comes through HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly. Output is sent as HTTP responses. The \"/incr\" endpoint returns JSON with the current count value)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/contrib/sessions/redis\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore, err := redis.NewStore(\"tcp\", \"localhost:6379\", \"\", 0)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tr.Use(sessions.Sessions(\"counter-session\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := 0\n\t\tif v := session.Get(\"count\"); v != nil {\n\t\t\tcount = v.(int)\n\t\t}\n\t\tcount++\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with caching capabilities for specific routes using in-memory storage.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), configures an in-memory cache store, and sets up a GET route (\"/cache_ping\") that returns a cached response. The cached response includes a \"pong\" message with the current Unix timestamp, and the cache is set to expire after one minute.\n\nInput: None (The function takes no parameters as it sets up the server configuration internally)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8080)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/cache\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore := cache.NewInMemoryStore(time.Second)\n\tr.GET(\"/cache_ping\", cache.CachePage(store, time.Minute, func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t}))\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"time\"\n)\n\nfunc setupServer() {\n\tcache := cache.New(1*time.Minute, 1*time.Minute)\n\tr := gin.Default()\n\tr.GET(\"/cache_ping\", func(c *gin.Context) {\n\t\tif cached, found := cache.Get(\"pong\"); found {\n\t\t\tc.JSON(200, cached)\n\t\t\treturn\n\t\t}\n\t\tresponse := map[string]interface{}{\n\t\t\t\"message\":   \"pong\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t}\n\t\tcache.SetDefault(\"pong\", response)\n\t\tc.JSON(200, response)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint to handle and respond to header data.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET handler for the root path (\"/\"), processes incoming request headers, and returns a JSON response containing specific header values. The server listens on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but processes HTTP request headers internally)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\th := testHeader{}\n\n\t\tif err := c.ShouldBindHeader(&h); err != nil {\n\t\t\tc.JSON(http.StatusOK, err)\n\t\t}\n\n\t\tfmt.Printf(\"%#v\\n\", h)\n\t\tc.JSON(http.StatusOK, gin.H{\"Rate\": h.Rate, \"Domain\": h.Domain})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\theaders := gin.H{\n\t\t\t\"user_agent\":      c.GetHeader(\"User-Agent\"),\n\t\t\t\"accept_language\": c.GetHeader(\"Accept-Language\"),\n\t\t\t\"authorization\":   c.GetHeader(\"Authorization\"),\n\t\t}\n\t\tc.JSON(http.StatusOK, headers)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, save the uploaded file to the server, and return a success message with the file details and form fields.\n\nFunction Description: The function initializes a Gin router, configures it to handle multipart form uploads (with a maximum size limit), serves static files from a public directory, and sets up a POST endpoint for file uploads. The endpoint binds the incoming request to a struct containing the file and form fields, saves the file to the server, and returns a success message with the file name and form field values.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it sends HTTP responses through the Gin context)\n\nNote: The function assumes the existence of a `BindFile` struct type which should contain at least these fields:\n- File: *multipart.FileHeader - The uploaded file\n- Name: string - A form field value\n- Email: string - A form field value",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar bindFile BindFile\n\n\t\tif err := c.ShouldBind(&bindFile); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tfile := bindFile.File\n\t\tdst := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"upload file err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, bindFile.Name, bindFile.Email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc SetupServer() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/public\", \"./public\")\n\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar form BindFile\n\t\tif err := c.ShouldBind(&form); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tfilePath := \"uploads/\" + form.File.Filename\n\t\tif err := c.SaveUploadedFile(form.File, filePath); err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Upload successful\",\n\t\t\t\"file\":    form.File.Filename,\n\t\t\t\"name\":    form.Name,\n\t\t\t\"email\":   form.Email,\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests for inventory operations, specifically for trying inventory items. The server should parse JSON input, process the inventory try operation, and return appropriate JSON responses.\n\nFunction Description: The main function sets up a Gin HTTP server with a single POST endpoint \"/service-c/try\" that accepts JSON inventory data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing inventory data (structure not shown in reference code but implied to have an ID field)\n- Gin context object providing request/response capabilities\n\nOutput:\n- Success case (200 status):\n  ```json\n  {\n    \"success\": true,\n    \"message\": \"inventory [ID] tried!\"\n  }\n  ```\n- Error case (400 status):\n  ```json\n  {\n    \"success\": false,\n    \"message\": \"[error description]\"\n  }\n  ```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-c/try\", func(context *gin.Context) {\n\t\tinv := &Inventory{}\n\t\terr := context.BindJSON(inv)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"inventory %d tried!\", inv.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"inventory %d tried!\", inv.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8082\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype InventoryRequest struct {\n\tID string `json:\"id\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/service-c/try\", func(c *gin.Context) {\n\t\tvar req InventoryRequest\n\t\tif err := c.BindJSON(&req); err != nil {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(200, gin.H{\n\t\t\t\"success\": true,\n\t\t\t\"message\": \"inventory \" + req.ID + \" tried!\",\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling multipart form uploads. It processes uploaded files along with name and email form fields, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters but handles HTTP requests with the following expected inputs:\n- POST /upload requests containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - Multipart files: \"files\" (array of files)\n- GET requests for static files from the \"./public\" directory)\n\nOutput: None (The function doesn't return any value but produces the following outputs:\n- For successful uploads: HTTP 200 response with success message\n- For errors: HTTP 400 responses with error messages\n- Static file serving for requests to the root path)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\tr.Static(\"/\", \"./public\")\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tif name == \"\" || email == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Name and email are required\"})\n\t\t\treturn\n\t\t}\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Error parsing form\"})\n\t\t\treturn\n\t\t}\n\n\t\tfiles := form.File[\"files\"]\n\t\tif len(files) == 0 {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"No files uploaded\"})\n\t\t\treturn\n\t\t}\n\n\t\tuploadDir := \"./uploads\"\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to create upload directory\"})\n\t\t\treturn\n\t\t}\n\n\t\tfor _, file := range files {\n\t\t\tdst := filepath.Join(uploadDir, file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to save file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Files uploaded successfully\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but the server configuration is hardcoded in the function)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The static file directory (\"/tmp\") and server port (\":8080\") are hardcoded in this implementation but could be made configurable through parameters in a more flexible version.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/static\", \"/tmp\")\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Basic GET request handled\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle GET requests, extract request information, and return a JSON response containing the request path and IP details.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET route handler that captures the request path and IP information (including RemoteAddr, X-Forwarded-For, and X-Real-Ip headers), and returns this information as a JSON response. The server runs on a specified address.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP clients and may log errors during server startup)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nconst (\n\tAddr = \"127.0.0.1:2003\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\treq := c.Request\n\t\turlPath := fmt.Sprintf(\"http://%s%s\", Addr, req.URL.Path)\n\t\trealIP := fmt.Sprintf(\"RemoteAddr=%s,X-Forwarded-For=%v,X-Real-Ip=%v\", req.RemoteAddr, req.Header.Get(\"X-Forwarded-For\"), req.Header.Get(\"X-Real-Ip\"))\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": urlPath,\n\t\t\t\"ip\":   realIP,\n\t\t})\n\t})\n\n\tif err := r.Run(Addr); err != nil {\n\t\tlog.Printf(\"Error: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\tr.GET(\"/*path\", func(c *gin.Context) {\n\t\tpath := c.Request.URL.Path\n\t\txForwardedFor := c.Request.Header.Get(\"X-Forwarded-For\")\n\t\txRealIp := c.Request.Header.Get(\"X-Real-Ip\")\n\t\tremoteAddr := c.Request.RemoteAddr\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": path,\n\t\t\t\"ip_details\": gin.H{\n\t\t\t\t\"remote_addr\":     remoteAddr,\n\t\t\t\t\"x_forwarded_for\": xForwardedFor,\n\t\t\t\t\"x_real_ip\":       xRealIp,\n\t\t\t},\n\t\t})\n\t})\n\terr := r.Run(\":8080\")\n\tif err != nil {\n\t\tlog.Println(\"Error starting server:\", err)\n\t}\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic string response.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler for the \"/ping\" endpoint, and starts the server on the default port (8080). When a GET request is made to \"/ping\", it responds with the string \"pong\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything; it starts an HTTP server that runs until interrupted)",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Go function that implements an HTTP server using the Gin framework, which includes session management using Redis for storing and incrementing a counter value.\n\nFunction Description: The function sets up a Gin web server with Redis-based session management. It provides a single endpoint \"/incr\" that increments a counter stored in the session and returns the current count in JSON format. The server runs on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP requests and runs the web server indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/sessions\"\n\t\"github.com/gin-gonic/sessions/redis\"\n)\n\nfunc main() {\n\tstore, _ := redis.NewRedisStore(redis.Options{Addr: \"localhost:6379\"})\n\n\tr := gin.Default()\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := 0\n\t\tif v, ok := session.Get(\"counter\").(int); ok {\n\t\t\tcount = v\n\t\t}\n\t\tcount++\n\t\tsession.Set(\"counter\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses to clients and runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/gzip\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\ttimestamp := time.Now().Unix()\n\t\tc.String(http.StatusOK, \"pong %d\", timestamp)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Go function that sets up a Gin-based HTTP server with specific API endpoints for handling web information requests. The function should initialize the server, define route handlers, and process incoming requests to return appropriate JSON responses.\n\nFunction Description: The `api` function initializes a Gin HTTP server with default middleware (Logger and Recovery). It defines two main routes: a root endpoint (\"/\") that returns a simple status message, and an API group (\"/api\") with endpoints for handling web information requests (\"/info\" for both GET and POST methods). The function processes incoming requests, validates input, executes business logic through `RunJob`, and returns structured JSON responses.\n\nInput:\n- `options` (*common.ENOptions): A pointer to an options structure containing configuration parameters for the application. This parameter is used to pass various settings to the business logic processing.\n\nOutput:\n- None (direct output via HTTP responses)\n- The function starts an HTTP server that listens on port 31000 and handles incoming requests\n- Returns error if server fails to start (logged via gologger)\n\nThe function does not explicitly return any values but sends HTTP responses in JSON format with the following possible structures:\n1. Success response (200 status code):\n```json\n{\n  \"code\": 200,\n  \"message\": \"ok\",\n  \"data\": [result_data]\n}\n```\n2. Error responses (400/500 status codes):\n```json\n{\n  \"code\": [error_code],\n  \"message\": \"[error_message]\"\n}\n```",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/wgpsec/ENScan/common\"\n\t\"github.com/wgpsec/ENScan/common/gologger\"\n)\nfunc api(options *common.ENOptions) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"OK\",\n\t\t})\n\t})\n\twebInfo := func(c *gin.Context) {\n\t\tvar w webOp\n\t\terr := c.ShouldBind(&w)\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\n\t\t\t\t\"code\":    500,\n\t\t\t\t\"message\": \"\u6570\u636e\u7ed1\u5b9a\u5f02\u5e38\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.OrgName == \"\" {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"code\":    400,\n\t\t\t\t\"message\": \"\u8bf7\u8f93\u5165\u67e5\u8be2\u6761\u4ef6\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.Branch {\n\t\t\toptions.IsGetBranch = true\n\t\t}\n\t\toptions.KeyWord = w.OrgName\n\t\toptions.GetFlags = w.Filed\n\t\toptions.ScanType = w.ScanType\n\t\toptions.InvestNum = w.Invest\n\t\toptions.IsSupplier = w.Supplier\n\t\toptions.IsHold = w.Holds\n\t\toptions.Deep = w.Depth\n\t\toptions.IsMergeOut = true\n\t\tcommon.Parse(options)\n\t\tdata := RunJob(options)\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"ok\",\n\t\t\t\"data\":    data,\n\t\t})\n\t}\n\ta := r.Group(\"/api\")\n\t{\n\t\ta.GET(\"/info\", webInfo)\n\t\ta.POST(\"/info\", webInfo)\n\t}\n\terr := r.Run(\":31000\")\n\tif err != nil {\n\t\tgologger.Error().Msgf(\"API\u670d\u52a1\u542f\u52a8\u5931\u8d25\uff01\")\n\t\tgologger.Fatal().Msgf(err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/projectdiscovery/gologger\"\n\t\"net/http\"\n)\n\nfunc api(options *common.ENOptions) {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"ok\",\n\t\t\t\"data\":    nil,\n\t\t})\n\t})\n\n\tapiGroup := r.Group(\"/api\")\n\t{\n\t\tapiGroup.GET(\"/info\", func(c *gin.Context) {\n\t\t\turl := c.Query(\"url\")\n\t\t\tif url == \"\" {\n\t\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    400,\n\t\t\t\t\t\"message\": \"url is required\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresult, err := RunJob(options, url)\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\t\"code\":    500,\n\t\t\t\t\t\"message\": err.Error(),\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":    200,\n\t\t\t\t\"message\": \"ok\",\n\t\t\t\t\"data\":    result,\n\t\t\t})\n\t\t})\n\n\t\tapiGroup.POST(\"/info\", func(c *gin.Context) {\n\t\t\tvar reqBody struct {\n\t\t\t\tURL string `json:\"url\"`\n\t\t\t}\n\t\t\tif err := c.ShouldBindJSON(&reqBody); err != nil {\n\t\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    400,\n\t\t\t\t\t\"message\": \"Invalid request body\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif reqBody.URL == \"\" {\n\t\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    400,\n\t\t\t\t\t\"message\": \"url is required\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresult, err := RunJob(options, reqBody.URL)\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\t\"code\":    500,\n\t\t\t\t\t\"message\": err.Error(),\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":    200,\n\t\t\t\t\"message\": \"ok\",\n\t\t\t\t\"data\":    result,\n\t\t\t})\n\t\t})\n\t}\n\n\tif err := r.Run(\":31000\"); err != nil {\n\t\tgologger.Error().Msgf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Go function that sets up a basic HTTP server using the Gin framework, with routes for login and home pages, including cookie handling for authentication.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), defines two routes (/login and /home), and starts the server on port 8080. The /login route sets a cookie, while the /home route requires cookie authentication through middleware and returns JSON data.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens indefinitely)\n\nNote: The CookieTool() middleware referenced in the home route would need to be defined separately to verify the cookie set by the login route.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\troute := gin.Default()\n\n\troute.GET(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"label\", \"ok\", 30, \"/\", \"localhost\", false, true)\n\t\tc.String(200, \"Login success!\")\n\t})\n\n\troute.GET(\"/home\", CookieTool(), func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"data\": \"Your home page\"})\n\t})\n\n\troute.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"auth_token\", \"123456\", 3600, \"/\", \"\", false, true)\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Logged in\"})\n\t})\n\n\tr.GET(\"/home\", CookieTool(), func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Welcome to home\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint. The endpoint should accept a name parameter, make a gRPC call to a Greeter service, and return the response as JSON. The function should handle both successful responses and errors from the gRPC call.\n\nFunction Description: The function initializes a Gin router with default middleware, establishes a gRPC connection to a Greeter service, and defines a GET endpoint at \"/rest/n/:name\". When called, the endpoint extracts the name parameter, makes a gRPC call to the Greeter service, and returns either the greeting message or an error in JSON format. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters but relies on incoming HTTP requests to the defined endpoint)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/gin-gonic/examples/grpc/example1/gen/helloworld/v1\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := v1.NewGreeterClient(conn)\n\n\tr := gin.Default()\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\n\t\treq := &v1.HelloRequest{Name: name}\n\t\tres, err := client.SayHello(c, req)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"result\": fmt.Sprint(res.Message),\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"could not run server: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"your_project/proto\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(5*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to gRPC server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tctx, cancel := context.WithTimeout(c, 5*time.Second)\n\t\tdefer cancel()\n\n\t\treq := &pb.HelloRequest{Name: name}\n\t\tres, err := client.SayHello(ctx, req)\n\t\tif err != nil {\n\t\t\tif st, ok := status.FromError(err); ok {\n\t\t\t\tswitch st.Code() {\n\t\t\t\tcase codes.InvalidArgument:\n\t\t\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": st.Message()})\n\t\t\t\tcase codes.NotFound:\n\t\t\t\t\tc.JSON(http.StatusNotFound, gin.H{\"error\": st.Message()})\n\t\t\t\tcase codes.Unavailable:\n\t\t\t\t\tc.JSON(http.StatusServiceUnavailable, gin.H{\"error\": \"Service unavailable\"})\n\t\t\t\tdefault:\n\t\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Internal server error\"})\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Internal server error\"})\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": res.Message})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"Failed to run server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles user management with versioned API endpoints and authentication middleware.\n\nFunction Description: The main function initializes a Gin router with versioned API endpoints (/v1 and /v2) for user management. Each version has public GET endpoints and protected POST endpoints that require authentication through middleware.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8081)\n\nMethods:\n\nAuthMiddleWare: () -> gin.HandlerFunc - Returns a Gin middleware function that handles authentication for protected routes\nAddV1User: (*gin.Context) -> None - Handles POST requests to add users for API version 1\nAddV2User: (*gin.Context) -> None - Handles POST requests to add users for API version 2",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tapiV1 := router.Group(\"/v1\")\n\n\tapiV1.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V1 Users\")\n\t})\n\n\tauthV1 := apiV1.Group(\"/\", AuthMiddleWare())\n\n\tauthV1.POST(\"users/add\", AddV1User)\n\n\tapiV2 := router.Group(\"/v2\")\n\n\tapiV2.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V2 Users\")\n\t})\n\n\tauthV2 := apiV2.Group(\"/\", AuthMiddleWare())\n\n\tauthV2.POST(\"users/add\", AddV2User)\n\n\t_ = router.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc AuthMiddleWare() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\ttoken := c.GetHeader(\"Authorization\")\n\t\tif token != \"valid-token\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"unauthorized\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}\n\nfunc AddV1User(c *gin.Context) {\n\tc.JSON(http.StatusCreated, gin.H{\"message\": \"v1 user added\"})\n}\n\nfunc AddV2User(c *gin.Context) {\n\tc.JSON(http.StatusCreated, gin.H{\"message\": \"v2 user added\"})\n}\n\nfunc main() {\n\trouter := gin.Default()\n\n\tv1 := router.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/users\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"version\": \"v1\", \"method\": \"GET\"})\n\t\t})\n\t\tv1.POST(\"/users\", AuthMiddleWare(), AddV1User)\n\t}\n\n\tv2 := router.Group(\"/v2\")\n\t{\n\t\tv2.GET(\"/users\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"version\": \"v2\", \"method\": \"GET\"})\n\t\t})\n\t\tv2.POST(\"/users\", AuthMiddleWare(), AddV2User)\n\t}\n\n\trouter.Run(\":8081\")\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a Go function that implements an HTTP server using the Gin framework, with endpoints for basic operations including ping, info retrieval, and counter manipulation with thread-safe increment/reset functionality.\n\nFunction Description: The Run function initializes a Gin HTTP server with four API endpoints under the \"/api/v1\" route group. It handles concurrent counter operations safely using mutex locks and logs requests using klog. The server runs on the specified address from the Options parameter.\n\nInput: \n- op *Options: A pointer to an Options struct containing the ListenAddr field specifying the server's listening address (e.g., \":8080\")\n\nOutput:\n- error: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nStruct Description: (Not applicable as the reference code is at function level)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"k8s.io/klog/v2\"\n)\n\nvar (\n\tCount int\n\tMutex sync.Mutex\n)\n\nfunc Run(op *Options) error {\n\tr := gin.Default()\n\n\tapiv1 := r.Group(\"/api/v1\")\n\t{\n\t\tapiv1.GET(\"/ping\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\")\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": \"pong\",\n\t\t\t})\n\t\t})\n\n\t\tapiv1.GET(\"/info\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\", \"headers\", c.Request.Header)\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": \"app3\",\n\t\t\t})\n\t\t})\n\n\t\tapiv1.PUT(\"/count\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\", \"headers\", c.Request.Header)\n\n\t\t\tMutex.Lock()\n\t\t\tCount += 1\n\t\t\tMutex.Unlock()\n\n\t\t\tklog.InfoS(\"app-3 info\", \"count\", Count)\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": fmt.Sprintf(\"app3: %d\", Count),\n\t\t\t})\n\t\t})\n\n\t\tapiv1.DELETE(\"/count\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\", \"headers\", c.Request.Header)\n\n\t\t\tMutex.Lock()\n\t\t\tCount = 0\n\t\t\tMutex.Unlock()\n\n\t\t\tklog.InfoS(\"app-3 info\", \"count\", Count)\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": fmt.Sprintf(\"app1: %d\", Count),\n\t\t\t})\n\t\t})\n\t}\n\n\treturn r.Run(op.ListenAddr)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"k8s.io/klog/v2\"\n)\n\nvar (\n\tversion   string\n\tgitCommit string\n\tbuildTime string\n)\n\ntype Options struct {\n\tListenAddr string\n}\n\nfunc Run(op *Options) error {\n\tr := gin.Default()\n\n\tcounter := struct {\n\t\tcount int\n\t\tmu    sync.Mutex\n\t}{}\n\n\tr.Use(func(c *gin.Context) {\n\t\tklog.Infof(\"Handling request: %s %s\", c.Request.Method, c.Request.URL.Path)\n\t\tc.Next()\n\t})\n\n\tapi := r.Group(\"/api/v1\")\n\t{\n\t\tapi.GET(\"/ping\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"pong\"})\n\t\t})\n\n\t\tapi.GET(\"/info\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"version\":     version,\n\t\t\t\t\"git_commit\":  gitCommit,\n\t\t\t\t\"build_time\":  buildTime,\n\t\t\t})\n\t\t})\n\n\t\tapi.POST(\"/counter/increment\", func(c *gin.Context) {\n\t\t\tcounter.mu.Lock()\n\t\t\tdefer counter.mu.Unlock()\n\t\t\tcounter.count++\n\t\t\tc.JSON(http.StatusOK, gin.H{\"count\": counter.count})\n\t\t})\n\n\t\tapi.POST(\"/counter/reset\", func(c *gin.Context) {\n\t\t\tcounter.mu.Lock()\n\t\t\tdefer counter.mu.Unlock()\n\t\t\tcounter.count = 0\n\t\t\tc.JSON(http.StatusOK, gin.H{\"count\": counter.count})\n\t\t})\n\t}\n\n\treturn r.Run(op.ListenAddr)\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that returns a \"pong\" message with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"time\"\n)\n\nfunc main() {\n    router := gin.Default()\n    router.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\":     \"pong\",\n            \"timestamp\": time.Now().Unix(),\n        })\n    })\n    router.Run(\":8080\")\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a JSON message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at \"/api/hello\" that returns a JSON response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/api/hello\" endpoint)\n\nOutput: \n- When successful: The server runs indefinitely, listening on port 8080\n- When failing: An error message is printed if the server fails to start\n- HTTP Response: For GET requests to \"/api/hello\", returns a JSON response with status 200 OK: {\"message\": \"Hello, HTTP!\"}",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\n\terr := router.Run(\":8080\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\terr := router.Run(\":8080\")\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to start server: %v\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and the message \"pong [current_unix_timestamp]\" when the \"/ping\" endpoint is accessed)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\ttimestamp := time.Now().Unix()\n\t\tc.String(200, fmt.Sprintf(\"pong %d\", timestamp))\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t}\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\n//go:embed static/*\nvar staticFiles embed.FS\n\nfunc initializeAndRunServer() {\n\tr := gin.Default()\n\tr.StaticFS(\"/static\", http.FS(staticFiles))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Go struct that represents a main server application using the Gin web framework, with capabilities for logging configuration, route grouping, and JWT authentication middleware integration.\n\nStruct Description: The Main struct represents a web server application that uses Gin as its web framework. It handles server initialization, route configuration with JWT authentication for protected routes, and serves as the entry point for the application.\n\nFields:\nrouter: *gin.Engine - The Gin engine instance that handles all HTTP routing and middleware\n\nMethods:\ninitServer: () -> error - Initializes the Gin server with configured logging settings (file and console logging based on configuration). Returns error if initialization fails.\nmain: () - Entry point of the application that creates the Main instance, initializes the server, sets up route handlers with JWT authentication for protected routes, and starts the server on the configured port.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"os\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/jwt\"\n)\n\ntype Main struct {\n\trouter *gin.Engine\n}\n\nfunc (m *Main) initServer() error {\n\tvar err error\n\n\tif common.Config.EnableGinFileLog {\n\t\tf, _ := os.Create(\"logs/gin.log\")\n\t\tif common.Config.EnableGinConsoleLog {\n\t\t\tgin.DefaultWriter = io.MultiWriter(os.Stdout, f)\n\t\t} else {\n\t\t\tgin.DefaultWriter = io.MultiWriter(f)\n\t\t}\n\t} else {\n\t\tif !common.Config.EnableGinConsoleLog {\n\t\t\tgin.DefaultWriter = io.MultiWriter()\n\t\t}\n\t}\n\n\tm.router = gin.Default()\n\n\treturn nil\n}\n\nfunc main() {\n\tm := Main{}\n\n\tif m.initServer() != nil {\n\t\treturn\n\t}\n\n\tc := controllers.User{}\n\tv1 := m.router.Group(\"/api/v1\")\n\t{\n\t\tadmin := v1.Group(\"/admin\")\n\t\t{\n\t\t\tadmin.POST(\"/auth\", c.Authenticate)\n\t\t}\n\n\t\tuser := v1.Group(\"/users\")\n\n\t\tuser.Use(jwt.Auth(common.Config.JwtSecretPassword))\n\t\t{\n\t\t\tuser.POST(\"\", c.AddUser)\n\t\t\tuser.GET(\"/list\", c.ListUsers)\n\t\t\tuser.GET(\"detail/:id\", c.GetUserByID)\n\t\t\tuser.GET(\"/\", c.GetUserByParams)\n\t\t\tuser.DELETE(\":id\", c.DeleteUserByID)\n\t\t\tuser.PATCH(\"\", c.UpdateUser)\n\t\t}\n\t}\n\n\tm.router.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n\n\tm.router.Run(common.Config.Port)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/appleboy/gin-jwt/v2\"\n)\n\ntype Main struct {\n\trouter *gin.Engine\n}\n\nfunc (m *Main) initServer() error {\n\tlogFile, err := os.OpenFile(\"server.log\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)\n\tif err != nil {\n\t\treturn err\n\t}\n\tgin.DefaultWriter = io.MultiWriter(os.Stdout, logFile)\n\tm.router = gin.New()\n\tm.router.Use(gin.Logger())\n\tm.router.Use(gin.Recovery())\n\treturn nil\n}\n\nfunc main() {\n\tapp := &Main{}\n\tif err := app.initServer(); err != nil {\n\t\tlog.Fatalf(\"Server init failed: %v\", err)\n\t}\n\n\tjwtMiddleware, err := ginjwt.New(&ginjwt.GinJWTMiddleware{\n\t\tRealm:       \"main-server\",\n\t\tKey:         []byte(\"secret-key\"),\n\t\tTimeout:     0,\n\t\tMaxRefresh:  0,\n\t\tAuthenticator: func(c *gin.Context) (interface{}, error) {\n\t\t\treturn \"user\", nil\n\t\t},\n\t\tAuthorizator: func(data interface{}, c *gin.Context) bool {\n\t\t\treturn true\n\t\t},\n\t\tUnauthorized: func(c *gin.Context, code int, message string) {\n\t\t\tc.JSON(code, gin.H{\"error\": message})\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"JWT setup failed: %v\", err)\n\t}\n\n\tapp.router.POST(\"/login\", jwtMiddleware.LoginHandler)\n\n\tprotected := app.router.Group(\"/api\")\n\tprotected.Use(jwtMiddleware.MiddlewareFunc())\n\tprotected.GET(\"/protected\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Secure access granted\"})\n\t})\n\n\tif err := app.router.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, saving the uploaded file to the local filesystem and returning a success message.\n\nFunction Description: The function initializes a Gin router with default middleware, sets up a static file server, and defines a POST endpoint for file uploads. It handles multipart form data containing a file and additional fields (name and email), saves the file to disk, and returns a confirmation message.\n\nInput: \n- None (the function takes no direct input parameters; inputs come via HTTP requests)\n\nOutput:\n- None (the function doesn't return anything; it starts an HTTP server that runs indefinitely)\n\nNote: The function expects HTTP POST requests to the \"/upload\" endpoint with multipart form data containing:\n1. A file (form field name \"file\")\n2. Text fields \"name\" and \"email\"",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, _ := c.FormFile(\"file\")\n\t\tsrc, _ := file.Open()\n\t\tdefer src.Close()\n\n\t\tdst, _ := os.Create(file.Filename)\n\t\tdefer dst.Close()\n\n\t\tio.Copy(dst, src)\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc StartServer() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./static\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"Error retrieving the file\")\n\t\t\treturn\n\t\t}\n\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, \"Error opening uploaded file\")\n\t\t\treturn\n\t\t}\n\t\tdefer src.Close()\n\n\t\tdst, err := os.Create(file.Filename)\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, \"Error creating destination file\")\n\t\t\treturn\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err := io.Copy(dst, src); err != nil {\n\t\t\tc.String(http.StatusInternalServerError, \"Error saving the file\")\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\":  \"File uploaded successfully\",\n\t\t\t\"name\":     name,\n\t\t\t\"email\":    email,\n\t\t\t\"filename\": file.Filename,\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server that sends responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\ttimestamp := time.Now().Unix()\n\t\tc.String(200, \"pong%d\", timestamp)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with a single route handler that responds to GET requests.\n\nFunction Description: The function initializes a default Gin engine with built-in middleware (Logger and Recovery), registers a GET route handler at the path \"/hello\" that responds with a plain text message, and starts the server on port 80. The function is designed to be the main entry point of a Go application using the Gin web framework.\n\nInput: \n- ctx *app.Context: A context object from the eggos framework (used for logging in this example)\n\nOutput: \n- error: Returns any error that occurs during server execution, otherwise nil when the server is properly shut down",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/icexin/eggos/app\"\n)\nfunc main(ctx *app.Context) error {\n\tr := gin.Default()\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"hello from eggos\")\n\t})\n\tctx.Printf(\"run gin server on :80\")\n\treturn r.Run(\":80\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/eggos/app\"\n\t\"net/http\"\n)\n\nfunc Main(ctx *app.Context) error {\n\tgin.DefaultWriter = ctx.Logger()\n\tr := gin.Default()\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello, Gin server is running!\")\n\t})\n\treturn r.Run(\":80\")\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session cookie.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/sessions\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"session\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := session.Get(\"count\")\n\t\tif count == nil {\n\t\t\tcount = 0\n\t\t}\n\t\tcountInt := count.(int)\n\t\tcountInt++\n\t\tsession.Set(\"count\", countInt)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": countInt})\n\t})\n\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Implement a rate-limited HTTP server using the Gin framework in Go, which includes middleware for request rate limiting and a simple endpoint to test the rate limiting functionality.\n\nFunction Description: The `ginRun` function initializes and starts a Gin HTTP server with rate limiting capabilities. It sets up a leaky bucket rate limiter middleware and provides a single endpoint (\"/rate\") for testing the rate limiting. The server runs on port 8080.\n\nInput: \n- `rps` (int): The maximum number of requests per second that the server will allow (rate limit value)\n\nOutput: \n- None (The function starts an HTTP server that runs indefinitely until interrupted)\n- Logs the current rate limit setting to stdout\n- Responds to HTTP requests on the \"/rate\" endpoint with a JSON message",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc ginRun(rps int) {\n\tlimit = ratelimit.New(rps)\n\n\tapp := gin.Default()\n\tapp.Use(leakBucket())\n\n\tapp.GET(\"/rate\", func(ctx *gin.Context) {\n\t\tctx.JSON(200, \"rate limiting test\")\n\t})\n\n\tlog.Printf(color.CyanString(\"Current Rate Limit: %v requests/s\", rps))\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/time/rate\"\n)\n\nfunc ginRun(rps int) {\n\tlog.Printf(\"Rate limit set to %d requests per second\", rps)\n\tr := gin.Default()\n\n\tlimiter := rate.NewLimiter(rate.Limit(rps), 1)\n\n\tr.Use(func(c *gin.Context) {\n\t\tif limiter.Allow() {\n\t\t\tc.Next()\n\t\t} else {\n\t\t\tc.AbortWithStatusJSON(http.StatusTooManyRequests, gin.H{\"message\": \"Too Many Requests\"})\n\t\t}\n\t})\n\n\tr.GET(\"/rate\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Rate limited response\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/sessions\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"counter-session\", store))\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := session.Get(\"count\")\n\t\tif count == nil {\n\t\t\tcount = 0\n\t\t}\n\t\tcount = count.(int) + 1\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Go function that sets up a simple HTTP server using the Gin framework to retrieve and return the client's IP address.\n\nFunction Description: The function initializes a Gin HTTP server with default middleware (Logger and Recovery), registers a GET endpoint \"/getip\" that retrieves the client's IP address from the request context, and returns it as a JSON response. The server listens on port 8080.\n\nInput: None (The function takes no input parameters)\n\nOutput: None (The function does not return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip := c.ClientIP()\n\t\tc.JSON(http.StatusOK, gin.H{\"ip\": ip})\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RunServer() {\n\tr := gin.Default()\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip := c.ClientIP()\n\t\tc.JSON(200, gin.H{\"ip\": ip})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Implement a JWT-based authentication service using Gin framework in Go, which provides public endpoints for token generation and private endpoints that require valid JWT tokens for access.\n\nFunction Description: The main function sets up a Gin HTTP server with JWT authentication. It creates two route groups: a public group for token generation and a private group that requires JWT authentication. The public endpoint generates JWT tokens, while the private endpoint demonstrates protected access.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests with the following possible inputs:\n- GET request to \"/api/\" for token generation\n- GET request to \"/api/private/\" for accessing protected content)\n\nOutput: HTTP responses with the following possible outputs:\n- For \"/api/\": JSON response containing a JWT token or error message\n- For \"/api/private/\": JSON response with protected content or authentication error\n- The server runs continuously on localhost:8080",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/appleboy/gin-jwt/v2\"\n\t\"github.com/dgrijalva/jwt-go\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar jwtKey = []byte(\"secret key\")\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n\t\t\t\"exp\": time.Now().Add(5 * time.Minute).Unix(),\n\t\t\t\"iss\": \"gin jwt\",\n\t\t})\n\n\t\ttokenString, err := token.SignedString(jwtKey)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to generate token\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\"token\": tokenString})\n\t})\n\n\tauthMiddleware, err := ginjwt.New(&ginjwt.GinJWTMiddleware{\n\t\tRealm: \"gin jwt\",\n\t\tKey:   jwtKey,\n\t\tTimeout: 5 * time.Minute,\n\t\tAuthenticator: func(c *gin.Context) (interface{}, error) {\n\t\t\treturn nil, nil\n\t\t},\n\t})\n\n\tif err != nil {\n\t\tpanic(\"Failed to create JWT middleware: \" + err.Error())\n\t}\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(authMiddleware.ServeHTTP)\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Access to private endpoint successful!\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS web server using the Gin framework, serving a welcome page at the \"/welcome\" endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up HTML templates, registers a GET handler for the \"/welcome\" endpoint that returns an HTML response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput:\n- port (string): The port number to listen on, e.g., \":8080\"\n- certFile (string): Path to the TLS certificate file, e.g., \"./testdata/server.pem\"\n- keyFile (string): Path to the TLS private key file, e.g., \"./testdata/server.key\"\n- html (template.Template): HTML template to be used for responses\n\nOutput: None (the function runs indefinitely as a web server)\n\nNote: The function includes a warning about not using embedded certificates in production environments.",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tlogger := log.New(os.Stderr, \"\", 0)\n\tlogger.Println(\"[WARNING] DON'T USE THE EMBED CERTS FROM THIS EXAMPLE IN PRODUCTION ENVIRONMENT, GENERATE YOUR OWN!\")\n\n\tr := gin.Default()\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"text/template\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RunSecureServer(port, certFile, keyFile string, html template.Template) {\n\tr := gin.Default()\n\tr.SetHTMLTemplate(&html)\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"welcome.html\", nil)\n\t})\n\tlog.Printf(\"Warning: Do not use embedded TLS certificates in production environments.\")\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests to a specific endpoint, processes JSON input, and returns appropriate JSON responses.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint \"/service-b/try\" that receives JSON account data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- None (the function takes no direct input parameters, but receives HTTP requests with JSON payloads matching the Account struct format)\n\nOutput:\n- None (the function doesn't return any value directly, but sends HTTP responses with JSON bodies containing either success or error messages)\n\nNote: The Account struct (not shown in reference code) would typically contain at least an ID field to be properly processed by this endpoint.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-b/try\", func(context *gin.Context) {\n\t\taccount := &Account{}\n\t\terr := context.BindJSON(account)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"account %d tried!\", account.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"account %d tried!\", account.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype Account struct {\n\tID string `json:\"id\"`\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/service-b/try\", func(c *gin.Context) {\n\t\tvar account Account\n\t\tif err := c.BindJSON(&account); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": \"Invalid request payload\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tif account.ID == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"error\": \"Missing required account ID\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Account processed successfully\",\n\t\t\t\"account\": account,\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles file uploads, saves them to a specified directory, and returns the file URL.\n\nFunction Description: The main function initializes a Gin HTTP server with file upload capabilities. It sets up a static file server for serving uploaded files and implements a POST endpoint for uploading files. The server saves uploaded files with unique names and returns their access URLs.\n\nInput: \n- HTTP POST request with multipart/form-data containing a file field named \"file\"\n- File content in the request body\n\nOutput:\n- JSON response containing:\n  - Status code (0 for success, non-zero for errors)\n  - Message describing the operation result\n  - Data object containing the URL to access the uploaded file (on success)\n  OR\n  - Error message (on failure)\n\nThe server runs on port 8085 and serves static files from \"/root/file/\" directory. Uploaded files are saved with names formatted as \"timestamp-randomstring.extension\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"gim/pkg/util\"\n)\n\nconst baseUrl = \"http://111.229.238.28:8085/file/\"\n\ntype Response struct {\n\tCode    int         `json:\"code\"`\n\tMessage string      `json:\"message\"`\n\tData    interface{} `json:\"data\"`\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/file\", \"/root/file\")\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusOK, Response{Code: 1001, Message: err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tfilenames := strings.Split(file.Filename, \".\")\n\t\tname := strconv.FormatInt(time.Now().UnixNano(), 10) + \"-\" + util.RandString(30) + \".\" + filenames[len(filenames)-1]\n\t\tfilePath := \"/root/file/\" + name\n\t\terr = c.SaveUploadedFile(file, filePath)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusOK, Response{Code: 1001, Message: err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, Response{\n\t\t\tCode:    0,\n\t\t\tMessage: \"success\",\n\t\t\tData:    map[string]string{\"url\": baseUrl + name},\n\t\t})\n\t})\n\terr := router.Run(\":8085\")\n\tif err != nil {\n\t\tlogger.Logger.Error(\"Run error\", zap.Error(err))\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"os\"\n)\n\nfunc randString(n int) string {\n\tconst letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = letters[rand.Intn(len(letters))]\n\t}\n\treturn string(b)\n}\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\trouter := gin.Default()\n\n\trouter.Static(\"/static\", \"/root/file\")\n\n\tos.MkdirAll(\"/root/file\", os.ModePerm)\n\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"status\":  1,\n\t\t\t\t\"message\": \"Error retrieving the file\",\n\t\t\t\t\"data\":    nil,\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\text := filepath.Ext(file.Filename)\n\n\t\ttimestamp := time.Now().UnixNano()\n\t\trandomStr := randString(8)\n\t\tnewFilename := fmt.Sprintf(\"%d-%s%s\", timestamp, randomStr, ext)\n\n\t\tdst := filepath.Join(\"/root/file\", newFilename)\n\n\t\tif err := file.Save(dst); err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"status\":  1,\n\t\t\t\t\"message\": \"Error saving the file\",\n\t\t\t\t\"data\":    nil,\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tfileURL := \"/static/\" + newFilename\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"status\":  0,\n\t\t\t\"message\": \"File uploaded successfully\",\n\t\t\t\"data\": gin.H{\n\t\t\t\t\"url\": fileURL,\n\t\t\t},\n\t\t})\n\t})\n\n\trouter.Run(\":8085\")\n}"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with custom template delimiters and a date formatting function, serving HTML content from a template file.\n\nFunction Description: The function initializes a Gin router with custom template delimiters \"{[{\" and \"}]}\", registers a template formatting function \"formatAsDate\", loads an HTML template file, and sets up a GET route handler that renders the template with a predefined date value. The server listens on port 8080.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Delims(\"{[{\", \"}]}\")\n\trouter.SetFuncMap(template.FuncMap{\n\t\t\"formatAsDate\": formatAsDate,\n\t})\n\trouter.LoadHTMLFiles(\"./testdata/raw.tmpl\")\n\n\trouter.GET(\"/raw\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"raw.tmpl\", gin.H{\n\t\t\t\"now\": time.Date(2017, 0o7, 0o1, 0, 0, 0, 0, time.UTC),\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"html/template\"\n\t\"time\"\n)\n\nfunc formatAsDate(t time.Time) string {\n\treturn t.Format(\"2006-01-02\")\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.Delims(\"{[{\", \"}]}\")\n\trouter.SetFuncMap(template.FuncMap{\n\t\t\"formatAsDate\": formatAsDate,\n\t})\n\trouter.LoadHTMLFiles(\"template.html\")\n\n\tpredefinedDate := time.Date(2023, 1, 1, 0, 0, 0, 0, time.UTC)\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(200, \"template.html\", gin.H{\n\t\t\t\"date\": predefinedDate,\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that serves HTML templates, static files, and a favicon, with routes for the main page and a foo page.\n\nFunction Description: The main function initializes a Gin router, sets up HTML templates from embedded files, serves static files, defines route handlers for the root path (\"/\"), \"/foo\" path, and favicon, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but relies on embedded filesystem content for templates and assets)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)\n\nNote: The implementation assumes the existence of an embedded filesystem (variable 'f' of type embed.FS) containing template files in \"templates/\" and \"templates/foo/\" directories, and assets in an \"assets/\" directory.",
    "Canonical_solution": "import (\n\t\"embed\"\n\t\"html/template\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\ttempl := template.Must(template.New(\"\").ParseFS(f, \"templates/*.tmpl\", \"templates/foo/*.tmpl\"))\n\trouter.SetHTMLTemplate(templ)\n\n\trouter.StaticFS(\"/public\", http.FS(f))\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\n\trouter.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"bar.tmpl\", gin.H{\n\t\t\t\"title\": \"Foo website\",\n\t\t})\n\t})\n\n\trouter.GET(\"favicon.ico\", func(c *gin.Context) {\n\t\tfile, _ := f.ReadFile(\"assets/favicon.ico\")\n\t\tc.Data(\n\t\t\thttp.StatusOK,\n\t\t\t\"image/x-icon\",\n\t\t\tfile,\n\t\t)\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"io/fs\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n//go:embed templates/* templates/foo/* assets/*\nvar f embed.FS\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Load HTML templates from embedded filesystem\n\tr.LoadHTMLFS(\"templates\", http.FS(f))\n\n\t// Serve static assets from embedded filesystem\n\tassetSub, _ := fs.Sub(f, \"assets\")\n\tr.StaticFS(\"/assets\", http.FS(assetSub))\n\n\t// Favicon route\n\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\tc.FileFromFS(\"favicon.ico\", http.FS(assetSub))\n\t})\n\n\t// Route handlers\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(200, \"index.html\", nil)\n\t})\n\n\tr.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(200, \"foo/index.html\", nil)\n\t})\n\n\t// Start HTTP server\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a specified directory.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), serves static files from a \"./public\" directory, and handles POST requests to \"/upload\" endpoint for file uploads with additional form fields (name and email). It processes the uploaded files and form data, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it starts an HTTP server on port 8080 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tsrc, _ := file.Open()\n\t\t\tdefer src.Close()\n\n\t\t\tdst, _ := os.Create(file.Filename)\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\tr.Static(\"/\", \"./public\")\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"No file uploaded\"})\n\t\t\treturn\n\t\t}\n\t\tif err := c.SaveUploadedFile(file, file.Filename); err != nil {\n\t\t\tc.AbortWithStatusJSON(500, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(200, gin.H{\"message\": \"Success\", \"name\": name, \"email\": email})\n\t})\n\tr.Run(\":8080\")\n}\n\nfunc main() {\n\tsetupServer()\n}"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, serving static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling file uploads with additional form fields. It validates the upload, saves the file, and returns a success message with the form data.\n\nInput: None (The function takes no direct input parameters but processes HTTP requests with the following expected form data:\n- \"name\": string - Name field from the form\n- \"email\": string - Email field from the form\n- \"file\": file - File to be uploaded)\n\nOutput: None (The function doesn't return any value but sends HTTP responses:\n- Success: HTTP 200 with upload confirmation message\n- Error: HTTP 400 with error message for invalid requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tfilename := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, \"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\tr.Static(\"/static\", \"./public\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tif err := c.Request.ParseMultipartForm(10 << 20); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Request too large\"})\n\t\t\treturn\n\t\t}\n\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif name == \"\" || email == \"\" || err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Missing required fields\"})\n\t\t\treturn\n\t\t}\n\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Error opening uploaded file\"})\n\t\t\treturn\n\t\t}\n\t\tdefer src.Close()\n\n\t\tdst, err := os.Create(\"./uploads/\" + file.Filename)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Unable to create file\"})\n\t\t\treturn\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err := io.Copy(dst, src); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Error saving file\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\":  \"Upload successful\",\n\t\t\t\"name\":     name,\n\t\t\t\"email\":    email,\n\t\t\t\"filename\": file.Filename,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves a static favicon file and responds to a GET request with a text message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), serves a static favicon file, registers a GET route handler, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but sends responses to HTTP requests and runs the server indefinitely)\n\nNote: The instruction is for function-level code as the reference code shows a main function implementation rather than a struct/class implementation.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tapp := gin.Default()\n\n\tapp.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\n\tapp.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello favicon.\")\n\t})\n\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Welcome to the Gin server\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using the Gin web framework, which responds to GET requests at the root path with a JSON message.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a GET route handler for the root path (\"/\") that returns a JSON response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput: \n- port (string): The port number on which the server should listen, prefixed with \":\" (e.g., \":5002\")\n- certFile (string): Path to the TLS certificate file (e.g., \"manager.crt\")\n- keyFile (string): Path to the TLS private key file (e.g., \"manager.key\")\n\nOutput: None (The function runs an infinite loop to serve HTTP requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\ts := gin.Default()\n\ts.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"passed\"})\n\t})\n\ts.RunTLS(\":5002\", \"manager.crt\", \"manager.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc StartSecureServer(port, certFile, keyFile string) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Secure Hello World\"})\n\t})\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Go function that initializes and configures a Gin HTTP server with New Relic monitoring middleware, and defines a simple route handler.\n\nFunction Description: The function sets up a basic Gin web server with default middleware (Logger and Recovery), configures New Relic monitoring if environment variables are present, and registers a root route handler that returns \"Hello World!\". The server runs on the default port (8080).\n\nInput: None (uses environment variables APP_NAME and NEW_RELIC_API_KEY for optional New Relic configuration)\n\nOutput: None (starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tcfg := newrelic.NewConfig(os.Getenv(\"APP_NAME\"), os.Getenv(\"NEW_RELIC_API_KEY\"))\n\tapp, err := newrelic.NewApplication(cfg)\n\tif err != nil {\n\t\tlog.Printf(\"failed to make new_relic app: %v\", err)\n\t} else {\n\t\trouter.Use(NewRelicMonitoring(app))\n\t}\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello World!\\n\")\n\t})\n\trouter.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent/v3/integrations/nrgin\"\n\t\"github.com/newrelic/go-agent/v3/newrelic\"\n)\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tappName := os.Getenv(\"APP_NAME\")\n\tapiKey := os.Getenv(\"NEW_RELIC_API_KEY\")\n\n\tif appName != \"\" && apiKey != \"\" {\n\t\tconfig := newrelic.NewConfig(appName, apiKey)\n\t\tnrApp, _ := newrelic.NewApplication(config)\n\t\tif nrApp != nil {\n\t\t\tr.Use(nrgin.Middleware(nrApp))\n\t\t}\n\t}\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello World!\")\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at the \"/ping\" endpoint that responds with \"pong\", and starts the server on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends \"pong\" as a response to GET requests at \"/ping\" and runs the HTTP server continuously until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- None (The function takes no parameters as it's the main entry point)\n\nOutput: \n- None (The function doesn't return but runs an HTTP server indefinitely or until fatal error)\n\nNote: The function uses autotls.Run() which automatically obtains and renews TLS certificates from Let's Encrypt for the specified domains. The server will listen on both HTTP (port 80) and HTTPS (port 443) ports.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/autotls\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tautotls.Run(router, []string{\"example.com\", \"www.example.com\"}, \"admin@example.com\")\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that provides translation services through the DeepLX API. The server should handle GET and POST requests, implement authentication middleware, and support proxy configuration.\n\nFunction Description: The main function initializes a Gin HTTP server with CORS support, sets up routes for translation services, and starts the server on a specified port. It includes:\n1. Configuration initialization\n2. Proxy setup (if configured)\n3. Route handlers for root (/) and translation (/translate) endpoints\n4. Authentication middleware for protected routes\n5. Translation request processing and response handling\n\nInput:\n- Configuration parameters (IP, Port, Proxy, Token) from initConfig()\n- Environment variable PROXY (optional)\n- HTTP requests:\n  * GET / - Returns server information\n  * POST /translate - Accepts JSON payload with translation parameters\n\nOutput:\n- HTTP responses:\n  * For GET /: JSON response with server information\n  * For POST /translate: JSON response with translation results or error message\n- Console output: Server startup message and configuration status\n\nStruct Description: (Not applicable - the reference code is at function level)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\ttranslate \"github.com/OwO-Network/DeepLX/translate\"\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tcfg := initConfig()\n\n\tfmt.Printf(\"DeepL X has been successfully launched! Listening on %v:%v\\n\", cfg.IP, cfg.Port)\n\tfmt.Println(\"Developed by sjlleo <i@leo.moe> and missuo <me@missuo.me>.\")\n\n\tproxyURL := os.Getenv(\"PROXY\")\n\tif proxyURL == \"\" {\n\t\tproxyURL = cfg.Proxy\n\t}\n\tif proxyURL != \"\" {\n\t\tproxy, err := url.Parse(proxyURL)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to parse proxy URL: %v\", err)\n\t\t}\n\t\thttp.DefaultTransport = &http.Transport{\n\t\t\tProxy: http.ProxyURL(proxy),\n\t\t}\n\t}\n\n\tif cfg.Token != \"\" {\n\t\tfmt.Println(\"Access token is set.\")\n\t}\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tr.Use(cors.Default())\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    http.StatusOK,\n\t\t\t\"message\": \"DeepL Free API, Developed by sjlleo and missuo. Go to /translate with POST. http://github.com/OwO-Network/DeepLX\",\n\t\t})\n\t})\n\n\tr.POST(\"/translate\", authMiddleware(cfg), func(c *gin.Context) {\n\t\treq := PayloadFree{}\n\t\tc.BindJSON(&req)\n\n\t\tsourceLang := req.SourceLang\n\t\ttargetLang := req.TargetLang\n\t\ttranslateText := req.TransText\n\t\ttagHandling := req.TagHandling\n\n\t\tproxyURL := cfg.Proxy\n\n\t\tif tagHandling != \"\" && tagHandling != \"html\" && tagHandling != \"xml\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"code\":    http.StatusBadRequest,\n\t\t\t\t\"message\": \"Invalid tag_handling value. Allowed values are 'html' and 'xml'.\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tresult, err := translate.TranslateByDeepLX(sourceLang, targetLang, translateText, tagHandling, proxyURL, \"\")\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Translation failed: %s\", err)\n\t\t}\n\n\t\tif result.Code == http.StatusOK {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":         http.StatusOK,\n\t\t\t\t\"id\":           result.ID,\n\t\t\t\t\"data\":         result.Data,\n\t\t\t\t\"alternatives\": result.Alternatives,\n\t\t\t\t\"source_lang\":  result.SourceLang,\n\t\t\t\t\"target_lang\":  result.TargetLang,\n\t\t\t\t\"method\":       result.Method,\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(result.Code, gin.H{\n\t\t\t\t\"code\":    result.Code,\n\t\t\t\t\"message\": result.Message,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.Run(fmt.Sprintf(\"%v:%v\", cfg.IP, cfg.Port))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"net/url\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype Config struct {\n\tIP    string\n\tPort  string\n\tProxy string\n\tToken string\n}\n\nfunc initConfig() Config {\n\treturn Config{\n\t\tIP:    os.Getenv(\"IP\"),\n\t\tPort:  os.Getenv(\"PORT\"),\n\t\tProxy: os.Getenv(\"PROXY\"),\n\t\tToken: os.Getenv(\"TOKEN\"),\n\t}\n}\n\nfunc setupHTTPClient(proxyURL string) *http.Client {\n\tif proxyURL == \"\" {\n\t\treturn http.DefaultClient\n\t}\n\tproxy, err := url.Parse(proxyURL)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Invalid proxy URL: %v\\n\", err)\n\t\treturn http.DefaultClient\n\t}\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyURL(proxy),\n\t}\n\treturn &http.Client{\n\t\tTransport: transport,\n\t}\n}\n\nfunc authMiddleware(token string) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tif token == \"\" {\n\t\t\tc.Next()\n\t\t\treturn\n\t\t}\n\t\tauthHeader := c.GetHeader(\"Authorization\")\n\t\tif authHeader != token {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}\n\nfunc translateHandler(client *http.Client) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tvar reqBody map[string]interface{}\n\t\tif err := c.BindJSON(&reqBody); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request body\"})\n\t\t\treturn\n\t\t}\n\n\t\tbody, _ := json.Marshal(reqBody)\n\t\tdeeplxReq, _ := http.NewRequestWithContext(c.Request.Context(), \"POST\", \"https://api.deeplx.org/translate\", bytes.NewBuffer(body))\n\t\tdeeplxReq.Header.Set(\"Content-Type\", \"application/json\")\n\n\t\tresp, err := client.Do(deeplxReq)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tvar result map[string]interface{}\n\t\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to parse response\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, result)\n\t}\n}\n\nfunc main() {\n\tconfig := initConfig()\n\tclient := setupHTTPClient(config.Proxy)\n\n\tr := gin.Default()\n\n\tr.Use(func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t})\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"server\": \"DeepLX Translation Service\",\n\t\t\t\"status\": \"active\",\n\t\t})\n\t})\n\n\tr.POST(\"/translate\", authMiddleware(config.Token), translateHandler(client))\n\n\taddr := net.JoinHostPort(config.IP, config.Port)\n\tfmt.Printf(\"Starting server on %s\\n\", addr)\n\tif err := r.Run(addr); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Server failed: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles various routes including a ping endpoint, user lookup, and authenticated admin updates.\n\nFunction Description: The main function initializes a Gin web server with default middleware (Logger and Recovery), sets up route handlers for different HTTP methods, and starts the server on port 8080. It includes:\n1. A simple ping/pong endpoint\n2. A user lookup endpoint with path parameters\n3. An authenticated admin endpoint for updating values\n4. Basic authentication middleware for protected routes\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything, but sends HTTP responses to clients)\n\nNote: The code assumes the existence of a global DB map variable (not shown in the reference) for storing user values. The actual implementation would need to include this or an alternative storage mechanism.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tuser := c.Params.ByName(\"name\")\n\t\tvalue, ok := DB[user]\n\t\tif ok {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"value\": value})\n\t\t} else {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"status\": \"no value\"})\n\t\t}\n\t})\n\n\tauthorized := r.Group(\"/\", gin.BasicAuth(gin.Accounts{\n\t\t\"foo\":  \"bar\",\n\t\t\"manu\": \"123\",\n\t}))\n\n\tauthorized.POST(\"admin\", func(c *gin.Context) {\n\t\tuser := c.MustGet(gin.AuthUserKey).(string)\n\n\t\tvar json struct {\n\t\t\tValue string `json:\"value\" binding:\"required\"`\n\t\t}\n\n\t\tif c.Bind(&json) == nil {\n\t\t\tDB[user] = json.Value\n\t\t\tc.JSON(200, gin.H{\"status\": \"ok\"})\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nvar DB = make(map[string]string)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tr.GET(\"/user/:id\", func(c *gin.Context) {\n\t\tid := c.Param(\"id\")\n\t\tvalue, ok := DB[id]\n\t\tif !ok {\n\t\t\tc.AbortWithStatusJSON(http.StatusNotFound, gin.H{\"error\": \"User not found\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\"id\": id, \"value\": value})\n\t})\n\n\tadmins := gin.Accounts{\n\t\t\"admin\": \"password\",\n\t}\n\tadminGroup := r.Group(\"/admin\", gin.BasicAuth(admins))\n\t{\n\t\tadminGroup.POST(\"/update\", func(c *gin.Context) {\n\t\t\tkey := c.PostForm(\"key\")\n\t\t\tvalue := c.PostForm(\"value\")\n\t\t\tif key == \"\" || value == \"\" {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Missing key or value\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tDB[key] = value\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Updated successfully\"})\n\t\t})\n\t}\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a simple HTTP server in Go using the Gin framework that handles file uploads via POST requests.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint (\"/upload\") that receives and discards uploaded file data, then responds with \"ok\". The server runs on port 8888.\n\nInput: None (The function takes no direct input parameters, but receives HTTP POST requests with file data in the request body)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and body \"ok\" for successful uploads)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tbody := c.Request.Body\n\t\tio.Copy(io.Discard, body)\n\t\tc.String(http.StatusOK, \"ok\")\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t_, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatus(400)\n\t\t\treturn\n\t\t}\n\t\tc.String(200, \"ok\")\n\t})\n\tr.Run(\":8888\")\n}"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but configuration is hardcoded: static files are served from \"/tmp\" and the server listens on port 8080)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/static\", \"/tmp\")\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello from Gin!\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters. HTTP requests to the \"/ping\" endpoint serve as indirect input.)\n\nOutput: None (The function doesn't return any value directly. It sends HTTP responses to clients as output.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"time\"\n\n\t\"github.com/gin-contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong %d\", time.Now().Unix())\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a function that demonstrates how to use the Kafka synchronous producer in Go to send a message to a Kafka topic.\n\nFunction Description: The function initializes and configures a synchronous Kafka producer, sends a single message to a specified Kafka topic, and handles any errors that may occur during the process. The producer is properly closed after use.\n\nInput: None (The function is self-contained with hardcoded values for demonstration purposes)\n\nOutput: The function returns the result of the message send operation (partition and offset if successful, or error if failed) and prints it to the console. The function itself doesn't return any value but may terminate early if producer initialization fails.\n\nTask Description: Create a function that demonstrates how to use the Kafka synchronous producer in Go to send a message to a Kafka topic.\n\nFunction Description: The function initializes and configures a synchronous Kafka producer, sends a single message to a specified Kafka topic, and handles any errors that may occur during the process. The producer is properly closed after use.\n\nInput: None (The function is self-contained with hardcoded values for demonstration purposes)\n\nOutput: The function returns the result of the message send operation (partition and offset if successful, or error if failed) and prints it to the console. The function itself doesn't return any value but may terminate early if producer initialization fails.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"testing\"\n)\n\nfunc TestKafkaSyncProducer(t *testing.T) {\n\tconf := sarama.NewConfig()\n\tconf.Producer.RequiredAcks = sarama.WaitForAll\n\tconf.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconf.Producer.Return.Successes = true\n\tconf.Producer.Return.Errors = true\n\tconf.Producer.Retry.Max = 1000\n\tconf.Version = sarama.V2_8_0_0\n\tproducer, err := sarama.NewSyncProducer([]string{\"172.12.12.165:9092\"}, conf)\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tdefer producer.Close()\n\tfmt.Println(producer.SendMessage(&sarama.ProducerMessage{\n\t\tTopic: \"gs_pay_transaction_topic\",\n\t\tValue: sarama.ByteEncoder(\"123123\"),\n\t}))\n\tselect {}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 123,
    "right_result": "package main\n\nimport (\n\t\"github.com/Shopify/sarama\"\n\t\"log\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.Return.Successes = true\n\n\tbrokers := []string{\"localhost:9092\"}\n\ttopic := \"test-topic\"\n\n\tproducer, err := sarama.NewSyncProducer(brokers, config)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating producer: %v\", err)\n\t}\n\tdefer producer.Close()\n\n\tmsg := &sarama.ProducerMessage{\n\t\tTopic: topic,\n\t\tKey:   sarama.StringEncoder(\"key\"),\n\t\tValue: sarama.StringEncoder(\"Hello Kafka\"),\n\t}\n\n\tpartition, offset, err := producer.SendMessage(msg)\n\tif err != nil {\n\t\tlog.Printf(\"Error sending message: %v\", err)\n\t} else {\n\t\tfmt.Printf(\"Message sent to partition %d at offset %d\\n\", partition, offset)\n\t}\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP client in Go that establishes a connection to a server, sends a message, and handles the connection lifecycle properly.\n\nFunction Description: The function establishes a TCP connection to a specified server address, sends a predefined message (\"hello\"), and prints the number of bytes written or any error encountered. It ensures the connection is properly closed after use.\n\nInput: None (The server address is hardcoded as \"127.0.0.1:49153\" in this example)\n\nOutput: \n- On success: Prints the number of bytes written to the connection (integer)\n- On failure: Prints the error encountered during connection or writing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\tdialer := &net.Dialer{\n\t\tLocalAddr: &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(\"127.0.0.1\"),\n\t\t\tPort: 0,\n\t\t},\n\t}\n\n\tconn, err := dialer.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tt := &wrappedConn{conn}\n\tvar w io.Writer = t\n\tif n, err := w.Write([]byte(\"hello\")); err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(n)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n    \"fmt\"\n    \"net\"\n)\n\nfunc main() {\n    conn, err := net.Dial(\"tcp\", \"127.0.0.1:49153\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer conn.Close()\n    \n    n, err := conn.Write([]byte(\"hello\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    fmt.Println(n)\n}"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Implement a TCP client function in Go that establishes a connection to a server, sends data, and receives a response.\n\nFunction Description: The function `Tcp` handles TCP communication with a remote server. It establishes a connection, sends optional data, and reads the server's response. Errors are captured and returned in the response structure. The connection is automatically closed when the function completes.\n\nInput: \n- `ctx context.Context`: Context for managing deadlines and cancellation signals\n- `req *pb.TcpRequest`: Request object containing:\n  - `Address string`: The server address to connect to (format \"host:port\")\n  - `Data string`: Optional data to send to the server\n- `rsp *pb.TcpResponse`: Response object to populate with results\n\nOutput:\n- `error`: Returns an error if address validation fails, otherwise nil (errors during TCP operations are stored in the response)\n- Modifies `rsp` with:\n  - `Status string`: \"OK\" on success or error message\n  - `Data string`: Received data from server (if any)",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\tpb \"github.com/micro/services/ping/proto\"\n)\n\nfunc (p *Ping) Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif len(req.Address) == 0 {\n\t\treturn errors.BadRequest(\"ping.tcp\", \"missing address\")\n\t}\n\n\tc, err := net.Dial(\"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\tdefer c.Close()\n\n\tif len(req.Data) == 0 {\n\t\trsp.Status = \"OK\"\n\t\treturn nil\n\t}\n\n\tfmt.Fprint(c, req.Data)\n\n\tdata, err := bufio.NewReader(c).ReadString('\\n')\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\n\trsp.Status = \"OK\"\n\trsp.Data = data\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"github.com/your/package/pb\"\n)\n\nfunc Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif req.Address == \"\" {\n\t\treturn errors.New(\"address is empty\")\n\t}\n\n\taddr, err := net.ResolveTCPAddr(\"tcp\", req.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconn, err := (&net.Dialer{}).DialContext(ctx, \"tcp\", addr.String())\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tconn.SetDeadline(deadline)\n\t}\n\n\tif req.Data != \"\" {\n\t\t_, err = conn.Write([]byte(req.Data))\n\t\tif err != nil {\n\t\t\trsp.Status = err.Error()\n\t\t\treturn nil\n\t\t}\n\t}\n\n\tvar response []byte\n\tbuffer := make([]byte, 4096)\n\tfor {\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\trsp.Status = err.Error()\n\t\t\treturn nil\n\t\t}\n\t\tresponse = append(response, buffer[:n]...)\n\t}\n\n\trsp.Data = string(response)\n\trsp.Status = \"OK\"\n\treturn nil\n}"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a function that establishes a TCP connection to a server, reads all data from the connection, and returns the data as a string.\n\nFunction Description: The function connects to a TCP server at the specified address, reads all available data from the connection, closes the connection, and returns the received data as a string. If the connection fails, it should panic with the error.\n\nInput: \n- address (string): The server address in the format \"host:port\" (e.g., \"localhost:9000\")\n\nOutput: \n- string: The data received from the server\n- error: Returns an error if the connection or read operation fails (though in the reference code it panics on connection error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tbs, _ := ioutil.ReadAll(conn)\n\tfmt.Println(string(bs))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net\"\n)\n\nfunc FetchData(address string) (string, error) {\n\tconn, err := net.Dial(\"tcp\", address)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tdata, err := io.ReadAll(conn)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Implement a TCP/UDP port scanner with proxy support and configurable source IP addresses.\n\nStruct Description: The Scanner struct provides functionality to check if a specific port is open on a given host, supporting both TCP and UDP protocols. It includes timeout configuration, proxy support, and the ability to specify source IP addresses for the connection.\n\nFields:\n- timeout: time.Duration - Maximum duration to wait for a connection attempt\n- proxyDialer: proxy.Dialer - Optional proxy dialer for making connections through a proxy\n- ListenHandler: *ListenHandler - Configuration for source IP addresses (both IPv4 and IPv6)\n\nMethods:\n- ConnectPort: (host string, p *port.Port, timeout time.Duration) -> (bool, error) - Attempts to connect to the specified port on the given host. Returns true if the port is open/reachable, along with any error that occurred during the connection attempt. The port parameter includes the protocol (TCP/UDP) and port number. The timeout parameter specifies the maximum duration for the connection attempt.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\t\"golang.org/x/net/proxy\"\n)\n\ntype Scanner struct {\n\ttimeout     time.Duration\n\tproxyDialer proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *port.Port, timeout time.Duration) (bool, error) {\n\thostport := net.JoinHostPort(host, fmt.Sprint(p.Port))\n\tvar (\n\t\terr  error\n\t\tconn net.Conn\n\t)\n\tif s.proxyDialer != nil {\n\t\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tproxyDialer, ok := s.proxyDialer.(proxy.ContextDialer)\n\t\tif !ok {\n\t\t\treturn false, errors.New(\"invalid proxy dialer\")\n\t\t}\n\t\tconn, err = proxyDialer.DialContext(ctx, p.Protocol.String(), hostport)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t} else {\n\t\tnetDialer := net.Dialer{\n\t\t\tTimeout: timeout,\n\t\t}\n\t\tif s.ListenHandler.SourceIp4 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIp4}\n\t\t} else if s.ListenHandler.SourceIP6 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIP6}\n\t\t}\n\t\tconn, err = netDialer.Dial(p.Protocol.String(), hostport)\n\t}\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer conn.Close()\n\n\tswitch p.Protocol {\n\tcase protocol.UDP:\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif _, err := conn.Write(nil); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif err := conn.SetReadDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tn, err := io.Copy(io.Discard, conn)\n\t\tif err != nil && !os.IsTimeout(err) {\n\t\t\treturn false, err\n\t\t}\n\t\treturn n > 0, nil\n\t}\n\n\treturn true, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package scanner\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"golang.org/x/net/proxy\"\n)\n\ntype ListenHandler struct {\n\tLocalAddr net.Addr\n}\n\ntype Port struct {\n\tNumber   uint16\n\tProtocol string\n}\n\ntype Scanner struct {\n\ttimeout       time.Duration\n\tproxyDialer   proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *Port, timeout time.Duration) (bool, error) {\n\tnetwork := p.Protocol\n\tif network != \"tcp\" && network != \"udp\" {\n\t\treturn false, errors.New(\"unsupported protocol\")\n\t}\n\n\tvar dialer proxy.Dialer\n\tif s.proxyDialer != nil {\n\t\tdialer = s.proxyDialer\n\t} else {\n\t\tlocalAddr := net.Addr(nil)\n\t\tif s.ListenHandler != nil {\n\t\t\tlocalAddr = s.ListenHandler.LocalAddr\n\t\t}\n\t\tdialer = &net.Dialer{\n\t\t\tTimeout:   timeout,\n\t\t\tLocalAddr: localAddr,\n\t\t}\n\t}\n\n\taddress := net.JoinHostPort(host, strconv.Itoa(int(p.Number)))\n\tconn, err := dialer.Dial(network, address)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer conn.Close()\n\n\tif network == \"tcp\" {\n\t\treturn true, nil\n\t}\n\n\tudpConn, ok := conn.(net.PacketConn)\n\tif !ok {\n\t\treturn false, errors.New(\"packet connection not available for UDP\")\n\t}\n\n\tudpAddr := &net.UDPAddr{\n\t\tIP:   net.ParseIP(host),\n\t\tPort: int(p.Number),\n\t}\n\tif udpAddr.IP == nil {\n\t\treturn false, errors.New(\"invalid UDP address\")\n\t}\n\n\tif _, err := udpConn.WriteTo([]byte{}, udpAddr); err != nil {\n\t\treturn false, err\n\t}\n\n\tudpConn.SetReadDeadline(time.Now().Add(timeout))\n\tbuf := make([]byte, 1024)\n\t_, _, err = udpConn.ReadFrom(buf)\n\tif err != nil {\n\t\tif netErr, ok := err.(net.Error); ok && netErr.Timeout() {\n\t\t\treturn true, nil\n\t\t}\n\t\treturn false, err\n\t}\n\treturn true, nil\n}"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It holds configuration information and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Pointer to configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC server for the specified realm using TCP. Returns the response or error.\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful. Returns the response or accumulated errors.\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a KDC server, including sending data and reading response. Ensures connection is closed when done.",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"sort\"\n)\n\ntype Config struct {\n\tKDCs map[string]map[int]string\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCs[realm]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no KDCs configured for realm %s\", realm)\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar keys []int\n\tfor k := range kdcs {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Ints(keys)\n\n\tvar errorsList []error\n\n\tfor _, k := range keys {\n\t\taddrStr := kdcs[k]\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", addrStr)\n\t\tif err != nil {\n\t\t\terrorsList = append(errorsList, fmt.Errorf(\"failed to resolve address %s: %v\", addrStr, err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTCP(\"tcp\", nil, tcpAddr)\n\t\tif err != nil {\n\t\t\terrorsList = append(errorsList, fmt.Errorf(\"failed to connect to KDC %s: %v\", addrStr, err))\n\t\t\tcontinue\n\t\t}\n\n\t\tresp, err := c.sendTCP(conn, b)\n\t\tif err == nil {\n\t\t\treturn resp, nil\n\t\t}\n\n\t\terrorsList = append(errorsList, fmt.Errorf(\"error sending data to KDC %s: %v\", addrStr, err))\n\t}\n\n\treturn nil, errors.Join(errorsList...)\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to send data: %v\", err)\n\t}\n\n\tvar resp []byte\n\tbuf := make([]byte, 4096)\n\tfor {\n\t\tn, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"error reading response: %v\", err)\n\t\t}\n\t\tresp = append(resp, buf[:n]...)\n\t}\n\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a TCP client in Go that establishes a connection to a server, handles data transmission, and manages connection lifecycle with proper error handling and resource cleanup.\n\nStruct Description: The `Client` struct represents a TCP client that connects to a server using a round-robin server selection strategy. It manages server connections, handles policy enforcement, and processes data transmission for both TCP and UDP protocols.\n\nFields:\n- serverPicker: [protocol.ServerPicker] - Selects servers in a round-robin fashion from available server list  \n- policyManager: [policy.Manager] - Manages connection policies including timeouts and user levels\n\nMethods:\n- NewClient: [func(ctx context.Context, config *ClientConfig) (*Client, error)] -> (*Client, error) - Creates a new Client instance with server configurations and policy manager\n- Process: [func(ctx context.Context, link *transport.Link, dialer internet.Dialer) error] -> error - Main processing method that establishes connection, handles handshake, and manages data transfer between client and server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/xtls/xray-core/common\"\n\t\"github.com/xtls/xray-core/common/buf\"\n\t\"github.com/xtls/xray-core/common/errors\"\n\t\"github.com/xtls/xray-core/common/net\"\n\t\"github.com/xtls/xray-core/common/protocol\"\n\t\"github.com/xtls/xray-core/common/retry\"\n\t\"github.com/xtls/xray-core/common/session\"\n\t\"github.com/xtls/xray-core/common/signal\"\n\t\"github.com/xtls/xray-core/common/task\"\n\t\"github.com/xtls/xray-core/core\"\n\t\"github.com/xtls/xray-core/features/policy\"\n\t\"github.com/xtls/xray-core/transport\"\n\t\"github.com/xtls/xray-core/transport/internet\"\n\t\"github.com/xtls/xray-core/transport/internet/stat\"\n)\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\tserverList := protocol.NewServerList()\n\tfor _, rec := range config.Server {\n\t\ts, err := protocol.NewServerSpecFromPB(rec)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(\"failed to get server spec\").Base(err)\n\t\t}\n\t\tserverList.AddServer(s)\n\t}\n\tif serverList.Size() == 0 {\n\t\treturn nil, errors.New(\"0 target server\")\n\t}\n\n\tv := core.MustFromContext(ctx)\n\tc := &Client{\n\t\tserverPicker:  protocol.NewRoundRobinServerPicker(serverList),\n\t\tpolicyManager: v.GetFeature(policy.ManagerType()).(policy.Manager),\n\t}\n\n\treturn c, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\toutbounds := session.OutboundsFromContext(ctx)\n\tob := outbounds[len(outbounds)-1]\n\tif !ob.Target.IsValid() {\n\t\treturn errors.New(\"target not specified.\")\n\t}\n\tob.Name = \"socks\"\n\tob.CanSpliceCopy = 2\n\tdestination := ob.Target\n\n\tvar server *protocol.ServerSpec\n\tvar dest net.Destination\n\tvar conn stat.Connection\n\n\tif err := retry.ExponentialBackoff(5, 100).On(func() error {\n\t\tserver = c.serverPicker.PickServer()\n\t\tdest = server.Destination()\n\t\trawConn, err := dialer.Dial(ctx, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconn = rawConn\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn errors.New(\"failed to find an available destination\").Base(err)\n\t}\n\n\tdefer func() {\n\t\tif err := conn.Close(); err != nil {\n\t\t\terrors.LogInfoInner(ctx, err, \"failed to closed connection\")\n\t\t}\n\t}()\n\n\tp := c.policyManager.ForLevel(0)\n\n\trequest := &protocol.RequestHeader{\n\t\tVersion: socks5Version,\n\t\tCommand: protocol.RequestCommandTCP,\n\t\tAddress: destination.Address,\n\t\tPort:    destination.Port,\n\t}\n\n\tif destination.Network == net.Network_UDP {\n\t\trequest.Command = protocol.RequestCommandUDP\n\t}\n\n\tuser := server.PickUser()\n\tif user != nil {\n\t\trequest.User = user\n\t\tp = c.policyManager.ForLevel(user.Level)\n\t}\n\n\tif err := conn.SetDeadline(time.Now().Add(p.Timeouts.Handshake)); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to set deadline for handshake\")\n\t}\n\tudpRequest, err := ClientHandshake(request, conn, conn)\n\tif err != nil {\n\t\treturn errors.New(\"failed to establish connection to server\").AtWarning().Base(err)\n\t}\n\tif udpRequest != nil {\n\t\tif udpRequest.Address == net.AnyIP || udpRequest.Address == net.AnyIPv6 {\n\t\t\tudpRequest.Address = dest.Address\n\t\t}\n\t}\n\n\tif err := conn.SetDeadline(time.Time{}); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to clear deadline after handshake\")\n\t}\n\n\tvar newCtx context.Context\n\tvar newCancel context.CancelFunc\n\tif session.TimeoutOnlyFromContext(ctx) {\n\t\tnewCtx, newCancel = context.WithCancel(context.Background())\n\t}\n\n\tctx, cancel := context.WithCancel(ctx)\n\ttimer := signal.CancelAfterInactivity(ctx, func() {\n\t\tcancel()\n\t\tif newCancel != nil {\n\t\t\tnewCancel()\n\t\t}\n\t}, p.Timeouts.ConnectionIdle)\n\n\tvar requestFunc func() error\n\tvar responseFunc func() error\n\tif request.Command == protocol.RequestCommandTCP {\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\treturn buf.Copy(link.Reader, buf.NewWriter(conn), buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treturn buf.Copy(buf.NewReader(conn), link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t} else if request.Command == protocol.RequestCommandUDP {\n\t\tudpConn, err := dialer.Dial(ctx, udpRequest.Destination())\n\t\tif err != nil {\n\t\t\treturn errors.New(\"failed to create UDP connection\").Base(err)\n\t\t}\n\t\tdefer udpConn.Close()\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\twriter := &UDPWriter{Writer: udpConn, Request: request}\n\t\t\treturn buf.Copy(link.Reader, writer, buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treader := &UDPReader{Reader: udpConn}\n\t\t\treturn buf.Copy(reader, link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t}\n\n\tif newCtx != nil {\n\t\tctx = newCtx\n\t}\n\n\tresponseDonePost := task.OnSuccess(responseFunc, task.Close(link.Writer))\n\tif err := task.Run(ctx, requestFunc, responseDonePost); err != nil {\n\t\treturn errors.New(\"connection ends\").Base(err)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package tcpclient\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"sync\"\n\t\"time\"\n\n\t\"v2ray.com/core/common/protocol\"\n\t\"v2ray.com/core/common/policy\"\n\t\"v2ray.com/core/transport/internet\"\n\t\"v2ray.com/core/transport\"\n)\n\ntype ClientConfig struct {\n\tServers       []string\n\tPolicyManager policy.Manager\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\tif len(config.Servers) == 0 {\n\t\treturn nil, errors.New(\"no servers configured\")\n\t}\n\tpicker := protocol.NewServerPicker(config.Servers)\n\treturn &Client{\n\t\tserverPicker:  picker,\n\t\tpolicyManager: config.PolicyManager,\n\t}, nil\n}\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\tserver := c.serverPicker.Next()\n\tif server == nil {\n\t\treturn errors.New(\"no server available\")\n\t}\n\n\ttimeout := 30 * time.Second\n\tif c.policyManager != nil {\n\t\ttimeout = c.policyManager.GetTimeout(ctx)\n\t}\n\n\tctx, cancel := context.WithTimeout(ctx, timeout)\n\tdefer cancel()\n\n\tconn, err := dialer.Dial(ctx, server.Address(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tif err := c.handshake(ctx, conn); err != nil {\n\t\treturn err\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t_, copyErr := io.Copy(conn, link.Reader)\n\t\tif copyErr != nil && !isClosedError(copyErr) {\n\t\t\tlink.Reader.CloseWithError(copyErr)\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t_, copyErr := io.Copy(link.Writer, conn)\n\t\tif copyErr != nil && !isClosedError(copyErr) {\n\t\t\tlink.Writer.CloseWithError(copyErr)\n\t\t}\n\t}()\n\n\twg.Wait()\n\treturn nil\n}\n\nfunc (c *Client) handshake(ctx context.Context, conn internet.Connection) error {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tdefault:\n\t\treturn nil\n\t}\n}\n\nfunc isClosedError(err error) bool {\n\treturn errors.Is(err, io.EOF) || errors.Is(err, io.ErrUnexpectedEOF)\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Implement a Go struct that handles DNS queries over UDP with context support and deadline management.\n\nStruct Description: DNSEndpoint represents a DNS server endpoint capable of performing DNS queries with context support, deadline management, and transaction ID matching.\n\nFields:\nAddr: string - The address of the DNS server in \"host:port\" format\n\nMethods:\nExchange: (ctx context.Context, payload, buf []byte) -> (n int, err error) - Performs a DNS query exchange:\n  - Establishes a UDP connection to the server\n  - Sets deadline from context if available\n  - Generates random transaction ID\n  - Sends DNS query payload\n  - Reads response and validates transaction ID\n  - Returns number of bytes read or any error\n  - Automatically closes connection when done",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\td := &net.Dialer{}\n\tc, err := d.DialContext(ctx, \"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"dial: %v\", err)\n\t}\n\tdefer c.Close()\n\tif t, ok := ctx.Deadline(); ok {\n\t\t_ = c.SetDeadline(t)\n\t}\n\tif _, err := rand.Read(payload[:2]); err != nil {\n\t\treturn 0, err\n\t}\n\t_, err = c.Write(payload)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"write: %v\", err)\n\t}\n\tid := uint16(payload[0])<<8 | uint16(buf[1])\n\tfor {\n\t\tif n, err = c.Read(buf[:514]); err != nil {\n\t\t\treturn n, fmt.Errorf(\"read: %v\", err)\n\t\t}\n\t\tif n < 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif id != uint16(buf[0])<<8|uint16(buf[1]) {\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n\treturn\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\tif ctx.Err() != nil {\n\t\treturn 0, ctx.Err()\n\t}\n\n\tserverAddr, err := net.ResolveUDPAddr(\"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, serverAddr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer conn.Close()\n\n\tctxDone := ctx.Done()\n\tif ctxDone != nil {\n\t\tgo func() {\n\t\t\t<-ctxDone\n\t\t\tconn.Close()\n\t\t}()\n\t}\n\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tif err := conn.SetDeadline(deadline); err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\n\tvar txID [2]byte\n\tif _, err := io.ReadFull(rand.Reader, txID[:]); err != nil {\n\t\treturn 0, err\n\t}\n\n\tif len(payload) < 2 {\n\t\treturn 0, errors.New(\"payload too short for transaction ID\")\n\t}\n\tpayload[0] = txID[0]\n\tpayload[1] = txID[1]\n\n\tif _, err := conn.Write(payload); err != nil {\n\t\treturn 0, err\n\t}\n\n\tn, err = conn.Read(buf)\n\tif err != nil {\n\t\treturn n, err\n\t}\n\n\tif n >= 2 && (buf[0] != txID[0] || buf[1] != txID[1]) {\n\t\treturn n, errors.New(\"transaction ID mismatch\")\n\t}\n\n\treturn n, nil\n}"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Implement a TCP client in Go that periodically sends metrics data to an OpenTSDB server, handling different types of metrics (counters, gauges, histograms, meters, and timers) with appropriate formatting.\n\nStruct Description: The OpenTSDBConfig struct contains configuration parameters for connecting to an OpenTSDB server and sending metrics data at regular intervals.\n\nFields:\nAddr: *net.TCPAddr - The TCP address of the OpenTSDB server\nRegistry: Registry - The metrics registry containing all metrics to be reported\nFlushInterval: time.Duration - The interval at which metrics are sent to the server\nDurationUnit: time.Duration - The time unit for converting timer metrics\nPrefix: string - The prefix to be added to all metric names\n\nMethods:\nOpenTSDBWithConfig: OpenTSDBWithConfig(c OpenTSDBConfig) - Starts a ticker that periodically calls openTSDB with the given configuration at the specified FlushInterval\nopenTSDB: openTSDB(c *OpenTSDBConfig) error - Establishes a TCP connection to the OpenTSDB server, formats and sends all metrics from the registry, and returns any error that occurs during the process",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\n\ntype OpenTSDBConfig struct {\n\tAddr          *net.TCPAddr\n\tRegistry      Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tfor _ = range time.Tick(c.FlushInterval) {\n\t\tif err := openTSDB(&c); nil != err {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tshortHostname := getShortHostname()\n\tnow := time.Now().Unix()\n\tdu := float64(c.DurationUnit)\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif nil != err {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\tw := bufio.NewWriter(conn)\n\tc.Registry.Each(func(name string, i interface{}) {\n\t\tswitch metric := i.(type) {\n\t\tcase Counter:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, metric.Count(), shortHostname)\n\t\tcase Gauge:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %d host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase GaugeFloat64:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %f host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase Histogram:\n\t\t\th := metric.Snapshot()\n\t\t\tps := h.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, h.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, h.Min(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, h.Max(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, h.Mean(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, h.StdDev(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4], shortHostname)\n\t\tcase Meter:\n\t\t\tm := metric.Snapshot()\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, m.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, m.RateMean(), shortHostname)\n\t\tcase Timer:\n\t\t\tt := metric.Snapshot()\n\t\t\tps := t.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, t.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, t.Min()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, t.Max()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, t.Mean()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, t.StdDev()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean-rate %d %.2f host=%s\\n\", c.Prefix, name, now, t.RateMean(), shortHostname)\n\t\t}\n\t\tw.Flush()\n\t})\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Registry interface {\n\tCollect() map[string]interface{}\n}\n\ntype Counter interface {\n\tValue() int64\n}\n\ntype Gauge interface {\n\tValue() int64\n}\n\ntype Histogram interface {\n\tCount() int64\n\tSum() int64\n\tMean() float64\n}\n\ntype Meter interface {\n\tRate1() float64\n\tRate5() float64\n\tRate15() float64\n\tCount() int64\n}\n\ntype Timer interface {\n\tHistogram\n\tMeter\n}\n\ntype OpenTSDBConfig struct {\n\tAddr          *net.TCPAddr\n\tRegistry      Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tgo func() {\n\t\tticker := time.NewTicker(c.FlushInterval)\n\t\tdefer ticker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tif err := openTSDB(&c); err != nil {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tnow := time.Now().Unix()\n\tmetrics := c.Registry.Collect()\n\tbuf := &bytes.Buffer{}\n\n\tfor name, metric := range metrics {\n\t\tfullMetricName := c.Prefix + \".\" + name\n\t\tswitch v := metric.(type) {\n\t\tcase Counter:\n\t\t\tfmt.Fprintf(buf, \"put %s %d %d\\n\", fullMetricName, now, v.Value())\n\t\tcase Gauge:\n\t\t\tfmt.Fprintf(buf, \"put %s %d %d\\n\", fullMetricName, now, v.Value())\n\t\tcase Histogram:\n\t\t\tfmt.Fprintf(buf, \"put %s.count %d %d\\n\", fullMetricName, now, v.Count())\n\t\t\tfmt.Fprintf(buf, \"put %s.sum %d %d\\n\", fullMetricName, now, v.Sum())\n\t\t\tfmt.Fprintf(buf, \"put %s.mean %d %f\\n\", fullMetricName, now, v.Mean())\n\t\tcase Meter:\n\t\t\tfmt.Fprintf(buf, \"put %s.rate1 %d %f\\n\", fullMetricName, now, v.Rate1())\n\t\t\tfmt.Fprintf(buf, \"put %s.rate5 %d %f\\n\", fullMetricName, now, v.Rate5())\n\t\t\tfmt.Fprintf(buf, \"put %s.rate15 %d %f\\n\", fullMetricName, now, v.Rate15())\n\t\tcase Timer:\n\t\t\tmean := v.Mean()\n\t\t\tconvertedMean := float64(mean) / float64(c.DurationUnit)\n\t\t\tfmt.Fprintf(buf, \"put %s.duration.mean %d %f\\n\", fullMetricName, now, convertedMean)\n\t\t\tfmt.Fprintf(buf, \"put %s.duration.count %d %d\\n\", fullMetricName, now, v.Count())\n\t\t\tfmt.Fprintf(buf, \"put %s.rate1 %d %f\\n\", fullMetricName, now, v.Rate1())\n\t\t\tfmt.Fprintf(buf, \"put %s.rate5 %d %f\\n\", fullMetricName, now, v.Rate5())\n\t\t\tfmt.Fprintf(buf, \"put %s.rate15 %d %f\\n\", fullMetricName, now, v.Rate15())\n\t\t}\n\t}\n\n\t_, err = conn.Write(buf.Bytes())\n\treturn err\n}"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Implement a TCP client in Go that can establish connections to servers, handle TLS if required, and manage timeouts for network operations.\n\nStruct Description: The Client struct represents a configurable TCP client capable of handling both plain TCP and TLS connections, with various timeout controls and DNS message exchange functionality.\n\nFields:\n\nNet: string - Network type (e.g., \"tcp\", \"tcp-tls\", \"udp\")\nUDPSize: uint16 - UDP buffer size for DNS messages\nTLSConfig: *tls.Config - TLS configuration for secure connections\nDialer: *net.Dialer - Custom dialer for connection establishment\nTimeout: time.Duration - Overall operation timeout\nDialTimeout: time.Duration - Timeout specifically for connection establishment\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nTsigSecret: map[string]string - TSIG authentication secrets\nSingleInflight: bool - Whether to use singleflight for duplicate request suppression\ngroup: singleflight - Internal singleflight group for request deduplication\n\nMethods:\n\nDial: (address string) -> (*Conn, error) - Establishes a connection to the specified address, handling TLS if configured\nExchange: (m *Msg, address string) -> (*Msg, time.Duration, error) - Performs a complete DNS message exchange with timeout handling\nexchange: (m *Msg, a string) -> (*Msg, time.Duration, error) - Internal method for performing the actual message exchange\ngetTimeoutForRequest: (timeout time.Duration) -> time.Duration - Calculates the appropriate timeout for a request considering various configuration options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tNet       string\n\tUDPSize   uint16\n\tTLSConfig *tls.Config\n\tDialer    *net.Dialer\n\tTimeout   time.Duration\n\tDialTimeout    time.Duration\n\tReadTimeout    time.Duration\n\tWriteTimeout   time.Duration\n\tTsigSecret     map[string]string\n\tSingleInflight bool\n\tgroup          singleflight\n}\n\nfunc (c *Client) Dial(address string) (conn *Conn, err error) {\n\tvar d net.Dialer\n\tif c.Dialer == nil {\n\t\td = net.Dialer{Timeout: c.getTimeoutForRequest(c.dialTimeout())}\n\t} else {\n\t\td = *c.Dialer\n\t}\n\n\tnetwork := c.Net\n\tif network == \"\" {\n\t\tnetwork = \"udp\"\n\t}\n\n\tuseTLS := strings.HasPrefix(network, \"tcp\") && strings.HasSuffix(network, \"-tls\")\n\n\tconn = new(Conn)\n\tif useTLS {\n\t\tnetwork = strings.TrimSuffix(network, \"-tls\")\n\t\tconn.Conn, err = tls.DialWithDialer(&d, network, address, c.TLSConfig)\n\t} else {\n\t\tconn.Conn, err = d.Dial(network, address)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (r *Msg, rtt time.Duration, err error) {\n\tif !c.SingleInflight {\n\t\treturn c.exchange(m, address)\n\t}\n\n\tq := m.Question[0]\n\tkey := fmt.Sprintf(\"%s:%d:%d\", q.Name, q.Qtype, q.Qclass)\n\tr, rtt, err, shared := c.group.Do(key, func() (*Msg, time.Duration, error) {\n\t\treturn c.exchange(m, address)\n\t})\n\tif r != nil && shared {\n\t\tr = r.Copy()\n\t}\n\n\treturn r, rtt, err\n}\n\nfunc (c *Client) exchange(m *Msg, a string) (r *Msg, rtt time.Duration, err error) {\n\tvar co *Conn\n\n\tco, err = c.Dial(a)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer co.Close()\n\n\topt := m.IsEdns0()\n\tif opt != nil && opt.UDPSize() >= MinMsgSize {\n\t\tco.UDPSize = opt.UDPSize()\n\t}\n\tif opt == nil && c.UDPSize >= MinMsgSize {\n\t\tco.UDPSize = c.UDPSize\n\t}\n\n\tco.TsigSecret = c.TsigSecret\n\tt := time.Now()\n\tco.SetWriteDeadline(t.Add(c.getTimeoutForRequest(c.writeTimeout())))\n\tif err = co.WriteMsg(m); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tco.SetReadDeadline(time.Now().Add(c.getTimeoutForRequest(c.readTimeout())))\n\tr, err = co.ReadMsg()\n\tif err == nil && r.Id != m.Id {\n\t\terr = ErrId\n\t}\n\trtt = time.Since(t)\n\treturn r, rtt, err\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tvar requestTimeout time.Duration\n\tif c.Timeout != 0 {\n\t\trequestTimeout = c.Timeout\n\t} else {\n\t\trequestTimeout = timeout\n\t}\n\tif c.Dialer != nil && c.Dialer.Timeout != 0 {\n\t\tif c.Dialer.Timeout < requestTimeout {\n\t\t\trequestTimeout = c.Dialer.Timeout\n\t\t}\n\t}\n\treturn requestTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tNet           string\n\tUDPSize       uint16\n\tTLSConfig     *tls.Config\n\tDialer        *net.Dialer\n\tTimeout       time.Duration\n\tDialTimeout   time.Duration\n\tReadTimeout   time.Duration\n\tWriteTimeout  time.Duration\n\tTsigSecret    map[string]string\n\tSingleInflight bool\n\tgroup         singleflight.Group\n}\n\ntype Conn struct {\n\tnetConn    net.Conn\n\tudpConn    *net.UDPConn\n\tremoteAddr *net.UDPAddr\n}\n\nfunc (c *Conn) Read(b []byte) (n int, err error) {\n\tif c.udpConn != nil {\n\t\treturn c.udpConn.ReadFromUDP(b)\n\t}\n\treturn c.netConn.Read(b)\n}\n\nfunc (c *Conn) Write(b []byte) (n int, err error) {\n\tif c.udpConn != nil {\n\t\treturn c.udpConn.WriteToUDP(b, c.remoteAddr)\n\t}\n\treturn c.netConn.Write(b)\n}\n\nfunc (c *Conn) Close() error {\n\tif c.udpConn != nil {\n\t\treturn c.udpConn.Close()\n\t}\n\tif c.netConn != nil {\n\t\treturn c.netConn.Close()\n\t}\n\treturn nil\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\tif c.udpConn != nil {\n\t\treturn c.udpConn.SetDeadline(t)\n\t}\n\treturn c.netConn.SetDeadline(t)\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\tif c.udpConn != nil {\n\t\treturn c.udpConn.SetReadDeadline(t)\n\t}\n\treturn c.netConn.SetReadDeadline(t)\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\tif c.udpConn != nil {\n\t\treturn c.udpConn.SetWriteDeadline(t)\n\t}\n\treturn c.netConn.SetWriteDeadline(t)\n}\n\nfunc (c *Client) Dial(address string) (*Conn, error) {\n\tswitch c.Net {\n\tcase \"tcp\", \"tcp-tls\":\n\t\tdialer := c.Dialer\n\t\tif dialer == nil {\n\t\t\tdialer = &net.Dialer{}\n\t\t}\n\t\tif dialer.Timeout == 0 {\n\t\t\tdialer.Timeout = c.DialTimeout\n\t\t}\n\t\tconn, err := dialer.Dial(\"tcp\", address)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif c.Net == \"tcp-tls\" {\n\t\t\ttlsConfig := c.TLSConfig\n\t\t\tif tlsConfig == nil {\n\t\t\t\ttlsConfig = &tls.Config{}\n\t\t\t}\n\t\t\ttlsConn := tls.Client(conn, tlsConfig)\n\t\t\treturn &Conn{netConn: tlsConn}, nil\n\t\t}\n\t\treturn &Conn{netConn: conn}, nil\n\tcase \"udp\":\n\t\taddr, err := net.ResolveUDPAddr(\"udp\", address)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tudpConn, err := net.ListenUDP(\"udp\", nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn &Conn{\n\t\t\tudpConn:    udpConn,\n\t\t\tremoteAddr: addr,\n\t\t}, nil\n\tdefault:\n\t\treturn nil, errors.New(\"unsupported network type\")\n\t}\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (*Msg, time.Duration, error) {\n\tif c.SingleInflight {\n\t\tkey := m.Question[0].Name\n\t\tv, err, _ := c.group.Do(key, func() (interface{}, error) {\n\t\t\treturn c.exchange(m, address)\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\tresp := v.(*struct {\n\t\t\tmsg *Msg\n\t\t\tdur time.Duration\n\t\t})\n\t\treturn resp.msg, resp.dur, nil\n\t}\n\treturn c.exchange(m, address)\n}\n\nfunc (c *Client) exchange(m *Msg, address string) (*Msg, time.Duration, error) {\n\tstart := time.Now()\n\ttimeout := c.getTimeoutForRequest(0)\n\tconn, err := c.Dial(address)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer conn.Close()\n\n\twire, err := m.Pack()\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\twriteDeadline := c.WriteTimeout\n\tif writeDeadline <= 0 {\n\t\twriteDeadline = timeout\n\t}\n\tif writeDeadline > 0 {\n\t\tconn.SetWriteDeadline(time.Now().Add(writeDeadline))\n\t}\n\n\tif c.Net == \"tcp\" || c.Net == \"tcp-tls\" {\n\t\tbuf := make([]byte, 2+len(wire))\n\t\tbinary.BigEndian.PutUint16(buf[:2], uint16(len(wire)))\n\t\tcopy(buf[2:], wire)\n\t\twire = buf\n\t}\n\n\t_, err = conn.Write(wire)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\treadDeadline := c.ReadTimeout\n\tif readDeadline <= 0 {\n\t\treadDeadline = timeout\n\t}\n\tif readDeadline > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(readDeadline))\n\t}\n\n\tvar response []byte\n\tif c.Net == \"tcp\" || c.Net == \"tcp-tls\" {\n\t\trespLen := make([]byte, 2)\n\t\t_, err = io.ReadFull(conn, respLen)\n\t\tif err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\tlength := binary.BigEndian.Uint16(respLen)\n\t\tresponse = make([]byte, length)\n\t\t_, err = io.ReadFull(conn, response)\n\t\tif err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t} else {\n\t\tresponse = make([]byte, 65536)\n\t\tn, _, err := conn.udpConn.ReadFromUDP(response)\n\t\tif err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\tresponse = response[:n]\n\t}\n\n\tvar msg Msg\n\terr = msg.Unpack(response)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\telapsed := time.Since(start)\n\treturn &msg, elapsed, nil\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tif timeout > 0 {\n\t\treturn timeout\n\t}\n\tif c.Timeout > 0 {\n\t\treturn c.Timeout\n\t}\n\treturn 0\n}\n\ntype Msg struct {\n\tQuestion []Question\n}\n\nfunc (m *Msg) Pack() ([]byte, error) {\n\treturn []byte{}, nil\n}\n\nfunc (m *Msg) Unpack(b []byte) error {\n\treturn nil\n}\n\ntype Question struct {\n\tName string\n}"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management. The server should be able to start, accept connections, read data from clients, and properly shut down while cleaning up resources.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management capabilities. It maintains state about active connections and provides methods to start, serve, and manage the server lifecycle.\n\nFields:\n\nAddr: [string] - The network address to listen on (e.g., \":8080\")\nNet: [string] - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: [Handler] - The handler for processing incoming requests\nReadTimeout: [time.Duration] - Maximum duration for reading a request\nWriteTimeout: [time.Duration] - Maximum duration for writing a response\nIdleTimeout: [func() time.Duration] - Function returning idle connection timeout\nlock: [sync.RWMutex] - Protects concurrent access to server state\nstarted: [bool] - Indicates if server is running\nshutdown: [chan struct{}] - Channel for shutdown signaling\nconns: [map[net.Conn]struct{}] - Map of active connections\n\nMethods:\n\nListenAndServe: [Name]() -> [error] - Starts the server and begins accepting connections\nserveTCP: [Name](net.Listener) -> [error] - Main TCP serving loop that accepts connections\nserveTCPConn: [Name](*sync.WaitGroup, net.Conn) -> [] - Handles an individual TCP connection\nreadTCP: [Name](net.Conn, time.Duration) -> ([]byte, error) - Reads data from a TCP connection\ninit: [Name]() -> [] - Initializes server resources\nisStarted: [Name]() -> [bool] - Checks if server is running\ngetIdleTimeout: [Name]() -> [time.Duration] - Returns idle timeout duration\ngetReadTimeout: [Name]() -> [time.Duration] - Returns read timeout duration",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := net.Listen(srv.Net, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer wg.Done()\n\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := srv.getIdleTimeout()\n\n\tfor srv.isStarted() {\n\t\tm, err := srv.readTCP(rw, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n}\n\nfunc (srv *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\tvar length uint16\n\tif err := binary.Read(conn, binary.BigEndian, &length); err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := make([]byte, length)\n\tif _, err := io.ReadFull(conn, m); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn m, nil\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getIdleTimeout() time.Duration {\n\tif srv.IdleTimeout != nil {\n\t\treturn srv.IdleTimeout()\n\t}\n\treturn tcpIdleTimeout\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tServeTCP(conn net.Conn)\n}\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tHandler     Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown    chan struct{}\n\tconns       map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tif s.started {\n\t\ts.lock.Unlock()\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n\ts.started = true\n\ts.lock.Unlock()\n\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn s.serveTCP(listener)\n}\n\nfunc (s *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\twg := &sync.WaitGroup{}\n\t\twg.Add(1)\n\t\tgo func(conn net.Conn) {\n\t\t\tdefer wg.Done()\n\t\t\ts.serveTCPConn(conn)\n\t\t}(conn)\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer conn.Close()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tidleTimeout := s.getIdleTimeout()\n\t\tif idleTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t\t} else {\n\t\t\tconn.SetReadDeadline(time.Time{})\n\t\t}\n\n\t\tdata, err := s.readTCP(conn, idleTimeout)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tif s.WriteTimeout > 0 {\n\t\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t\t} else {\n\t\t\tconn.SetWriteDeadline(time.Time{})\n\t\t}\n\n\t\ts.Handler.ServeTCP(conn)\n\t\t_ = data\n\t}\n}\n\nfunc (s *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tif timeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(timeout))\n\t} else {\n\t\tconn.SetReadDeadline(time.Time{})\n\t}\n\n\tbuf := make([]byte, 4096)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf[:n], nil\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getIdleTimeout() time.Duration {\n\tif s.IdleTimeout == nil {\n\t\treturn 0\n\t}\n\treturn s.IdleTimeout()\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\treturn s.ReadTimeout\n}\n```"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Implement a TCP server in Go that handles client connections, processes incoming messages, and generates appropriate responses based on the message type. The server should support graceful shutdown and concurrent client handling.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, processes client requests, and maintains server state including messages, errors, and connection information.\n\nFields:\n- Addr: net.Addr - The network address the server is listening on\n- mu: sync.Mutex - Mutex for thread-safe operations\n- wg: sync.WaitGroup - WaitGroup for managing goroutines\n- closed: bool - Flag indicating if the server is closed\n- closing: chan struct{} - Channel for shutdown signaling\n- messages: []Message - Collection of processed messages\n- errors: []error - Collection of encountered errors\n- brokerMessage: []byte - Pre-prepared broker message data\n- nodeID: int32 - Identifier for the server node\n- partitionCount: int32 - Number of partitions for topic handling\n\nMethods:\n- NewServer() -> (*Server, error) - Creates and starts a new Server instance\n- prepareBrokerMsg() - Prepares the broker message with server information\n- Close() - Gracefully shuts down the server\n- run(net.Listener) - Main server loop handling connections\n- handle(net.Conn) -> error - Processes individual client connections\n- readProduceRequest([]byte) -> (string, []Response, error) - Helper for produce requests\n- readStrList([]byte) -> ([]string, int) - Helper for reading string lists",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr net.Addr\n\tmu   sync.Mutex\n\twg   sync.WaitGroup\n\n\tclosed  bool\n\tclosing chan struct{}\n\n\tmessages []Message\n\terrors   []error\n\n\tbrokerMessage []byte\n\tnodeID        int32\n\n\tpartitionCount int32\n}\n\nfunc NewServer() (*Server, error) {\n\ts := &Server{\n\t\tclosing:        make(chan struct{}),\n\t\tnodeID:         1,\n\t\tpartitionCount: 3,\n\t}\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.Addr = l.Addr()\n\n\ts.prepareBrokerMsg()\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\ts.run(l)\n\t}()\n\treturn s, nil\n}\n\nfunc (s *Server) prepareBrokerMsg() {\n\thost, port, _ := net.SplitHostPort(s.Addr.String())\n\ts.brokerMessage = make([]byte, 0, 4+2+len(host)+4)\n\ts.brokerMessage = writeInt32(s.brokerMessage, s.nodeID)\n\ts.brokerMessage = writeStr(s.brokerMessage, host)\n\tportN, _ := strconv.Atoi(port)\n\ts.brokerMessage = writeInt32(s.brokerMessage, int32(portN))\n\ts.brokerMessage = writeInt16(s.brokerMessage, -1)\n}\n\nfunc (s *Server) Close() {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif s.closed {\n\t\treturn\n\t}\n\ts.closed = true\n\tclose(s.closing)\n\ts.wg.Wait()\n}\n\nfunc (s *Server) run(l net.Listener) {\n\tdefer l.Close()\n\n\taccepts := make(chan net.Conn)\n\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tfor {\n\t\t\tc, err := l.Accept()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase accepts <- c:\n\t\t\tcase <-s.closing:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase c := <-accepts:\n\t\t\tgo func() {\n\t\t\t\tdefer c.Close()\n\t\t\t\tfor {\n\t\t\t\t\tif err := s.handle(c); err != nil {\n\t\t\t\t\t\tif err == io.EOF {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.mu.Lock()\n\t\t\t\t\t\ts.errors = append(s.errors, err)\n\t\t\t\t\t\ts.mu.Unlock()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\tcase <-s.closing:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (s *Server) handle(c net.Conn) error {\n\tvar size int32\n\terr := binary.Read(c, binary.BigEndian, &size)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbuf := make([]byte, int(size))\n\n\t_, err = io.ReadFull(c, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tapiKey := int16(binary.BigEndian.Uint16(buf[:2]))\n\tversion := int16(binary.BigEndian.Uint16(buf[2:4]))\n\t_, n := readStr(buf[8:])\n\trequest := buf[8+n:]\n\n\tresponse := make([]byte, 8, 1024)\n\tcopy(response[4:], buf[4:8])\n\n\tswitch apiKey {\n\tcase 0:\n\t\ttopic, responses, err := s.readProduceRequest(request)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tresponse = writeArrayHeader(response, 1)\n\t\tresponse = writeStr(response, topic)\n\t\tresponse = writeArrayHeader(response, int32(len(responses)))\n\t\tfor _, r := range responses {\n\t\t\tresponse = writeInt32(response, 0)\n\t\t\tresponse = writeInt16(response, 0)\n\t\t\tresponse = writeInt64(response, r.offset)\n\t\t\tresponse = writeInt64(response, 0)\n\t\t\tif version >= 5 {\n\t\t\t\tresponse = writeInt64(response, 0)\n\t\t\t}\n\t\t}\n\t\tresponse = writeInt32(response, 0)\n\n\tcase 3:\n\t\ttopics, _ := readStrList(request)\n\t\tresponse = writeInt32(response, 0)\n\t\tresponse = writeArray(response, [][]byte{s.brokerMessage})\n\t\tresponse = writeInt16(response, -1)\n\t\tresponse = writeInt32(response, 0)\n\t\tresponse = writeArrayHeader(response, int32(len(topics)))\n\t\tfor _, t := range topics {\n\t\t\tresponse = writeInt16(response, 0)\n\t\t\tresponse = writeStr(response, t)\n\t\t\tresponse = writeBool(response, false)\n\t\t\tresponse = writeArrayHeader(response, s.partitionCount)\n\t\t\tfor i := int32(0); i < s.partitionCount; i++ {\n\t\t\t\tresponse = writeInt16(response, 0)\n\t\t\t\tresponse = writeInt32(response, i+1)\n\t\t\t\tresponse = writeInt32(response, s.nodeID)\n\t\t\t\tif version >= 7 {\n\t\t\t\t\tresponse = writeInt32(response, 0)\n\t\t\t\t}\n\t\t\t\tresponse = writeArrayHeader(response, 0)\n\t\t\t\tresponse = writeArrayHeader(response, 0)\n\t\t\t\tresponse = writeArrayHeader(response, 0)\n\t\t\t}\n\t\t}\n\tcase 18:\n\t\tresponse = writeInt16(response, 0)\n\t\tresponse = writeArrayHeader(response, 2)\n\t\tresponse = writeInt16(response, 0)\n\t\tresponse = writeInt16(response, 2)\n\t\tresponse = writeInt16(response, 2)\n\t\tresponse = writeInt16(response, 3)\n\t\tresponse = writeInt16(response, 1)\n\t\tresponse = writeInt16(response, 1)\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported apiKey %d\", apiKey)\n\t}\n\n\tresponseSize := len(response) - 4\n\tbinary.BigEndian.PutUint32(response[:4], uint32(responseSize))\n\t_, err = c.Write(response)\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n)\n\ntype Message struct {\n\tData  []byte\n\tTopic string\n}\n\ntype Server struct {\n\tAddr           net.Addr\n\tmu             sync.Mutex\n\twg             sync.WaitGroup\n\tclosed         bool\n\tclosing        chan struct{}\n\tmessages       []Message\n\terrors         []error\n\tbrokerMessage  []byte\n\tnodeID         int32\n\tpartitionCount int32\n\tlistener       net.Listener\n}\n\nfunc NewServer(nodeID, partitionCount int32) (*Server, error) {\n\ts := &Server{\n\t\tnodeID:         nodeID,\n\t\tpartitionCount: partitionCount,\n\t\tclosing:        make(chan struct{}),\n\t}\n\ts.prepareBrokerMsg()\n\tln, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.Addr = ln.Addr()\n\ts.listener = ln\n\tgo s.run(ln)\n\treturn s, nil\n}\n\nfunc (s *Server) prepareBrokerMsg() {\n\tbuf := new(bytes.Buffer)\n\tbinary.Write(buf, binary.BigEndian, s.nodeID)\n\tbinary.Write(buf, binary.BigEndian, s.partitionCount)\n\ts.brokerMessage = buf.Bytes()\n}\n\nfunc (s *Server) Close() {\n\ts.mu.Lock()\n\tif s.closed {\n\t\ts.mu.Unlock()\n\t\treturn\n\t}\n\ts.closed = true\n\tclose(s.closing)\n\ts.mu.Unlock()\n\ts.listener.Close()\n\ts.wg.Wait()\n}\n\nfunc (s *Server) run(ln net.Listener) {\n\tdefer ln.Close()\n\tfor {\n\t\tselect {\n\t\tcase <-s.closing:\n\t\t\treturn\n\t\tdefault:\n\t\t\tconn, err := ln.Accept()\n\t\t\tif err != nil {\n\t\t\t\ts.mu.Lock()\n\t\t\t\ts.errors = append(s.errors, err)\n\t\t\t\ts.mu.Unlock()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.wg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer s.wg.Done()\n\t\t\t\ts.handle(conn)\n\t\t\t}()\n\t\t}\n\t}\n}\n\nfunc (s *Server) handle(conn net.Conn) error {\n\tdefer conn.Close()\n\tfor {\n\t\tmsgType := make([]byte, 1)\n\t\tif _, err := conn.Read(msgType); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tswitch msgType[0] {\n\t\tcase 1:\n\t\t\tvar length int32\n\t\t\tif err := binary.Read(conn, binary.BigEndian, &length); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif length < 0 {\n\t\t\t\treturn errors.New(\"invalid message length\")\n\t\t\t}\n\t\t\tdata := make([]byte, length)\n\t\t\tif _, err := io.ReadFull(conn, data); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ttopic, resps, err := s.readProduceRequest(data)\n\t\t\tif err != nil {\n\t\t\t\ts.mu.Lock()\n\t\t\t\ts.errors = append(s.errors, err)\n\t\t\t\ts.mu.Unlock()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.mu.Lock()\n\t\t\tfor _, r := range resps {\n\t\t\t\ts.messages = append(s.messages, Message{Topic: topic, Data: r.Data})\n\t\t\t}\n\t\t\ts.mu.Unlock()\n\t\t\tfor _, r := range resps {\n\t\t\t\tif _, err := conn.Write(r.Data); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\tcase 2:\n\t\t\tif _, err := conn.Write(s.brokerMessage); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tdefault:\n\t\t\treturn errors.New(\"unknown message type\")\n\t\t}\n\t}\n}\n\ntype Response struct {\n\tData []byte\n}\n\nfunc (s *Server) readProduceRequest(data []byte) (string, []Response, error) {\n\ttopics, offset := s.readStrList(data)\n\tif len(topics) == 0 {\n\t\treturn \"\", nil, errors.New(\"no topics found\")\n\t}\n\treturn topics[0], []Response{{Data: data[offset:]}}, nil\n}\n\nfunc (s *Server) readStrList(data []byte) ([]string, int) {\n\tvar offset int\n\tr := bytes.NewReader(data)\n\tvar count int32\n\tif err := binary.Read(r, binary.BigEndian, &count); err != nil {\n\t\treturn nil, 0\n\t}\n\toffset += 4\n\tvar strs []string\n\tfor i := int32(0); i < count; i++ {\n\t\tvar length int16\n\t\tif err := binary.Read(r, binary.BigEndian, &length); err != nil {\n\t\t\treturn nil, 0\n\t\t}\n\t\toffset += 2\n\t\tif length <= 0 {\n\t\t\tstrs = append(strs, \"\")\n\t\t\tcontinue\n\t\t}\n\t\tif offset+int(length) > len(data) {\n\t\t\treturn nil, 0\n\t\t}\n\t\tstr := string(data[offset : offset+int(length)])\n\t\tstrs = append(strs, str)\n\t\toffset += int(length)\n\t}\n\treturn strs, offset\n}"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle incoming client connections, optionally with TLS encryption, and relay traffic between clients and target servers through a proxy.\n\nStruct Description: The Trojan struct represents a TCP server that listens for incoming connections, handles TLS encryption if configured, and relays traffic between clients and target servers via a proxy.\n\nFields:\n- addr: string - The address on which the server listens for incoming connections\n- withTLS: bool - Flag indicating whether TLS encryption should be used\n- tlsConfig: *tls.Config - TLS configuration for secure connections\n- certFile: string - Path to TLS certificate file\n- keyFile: string - Path to TLS private key file\n- pass: [56]byte - Password for authentication\n- fallback: string - Fallback address if connection fails\n- proxy: proxy.Proxy - Proxy implementation for relaying traffic\n\nMethods:\n- ListenAndServe() - Starts the TCP server, listens for incoming connections, and handles them in separate goroutines\n  Input: None\n  Output: None\n- Serve(c net.Conn) - Handles an individual client connection, performs TLS handshake if needed, and relays traffic\n  Input: c net.Conn - The client connection to handle\n  Output: None\n- readHeader(r io.Reader) - Reads and parses the header from the client connection\n  Input: r io.Reader - Reader to get header data from\n  Output: cmd socks.Cmd, target socks.Addr, err error - Returns command, target address, and any error\n- serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) - Handles fallback connection when main connection fails\n  Input: \n    c net.Conn - The client connection\n    fallback string - Fallback address\n    buf *bytes.Buffer - Buffer containing initial data\n  Output: None\n- ServeUoT(c net.Conn, target socks.Addr) - Handles UDP-over-TCP connections\n  Input:\n    c net.Conn - The client connection\n    target socks.Addr - Target address\n  Output: None",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/pkg/socks\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype Trojan struct {\n\taddr      string\n\twithTLS   bool\n\ttlsConfig *tls.Config\n\tcertFile  string\n\tkeyFile   string\n\tpass      [56]byte\n\tfallback  string\n\tproxy     proxy.Proxy\n}\n\nfunc (s *Trojan) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[trojan] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[trojan] listening TCP on %s, with TLS: %v\", s.addr, s.withTLS)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[trojan] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *Trojan) Serve(c net.Conn) {\n\tif c, ok := c.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tif s.withTLS {\n\t\ttlsConn := tls.Server(c, s.tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\ttlsConn.Close()\n\t\t\tlog.F(\"[trojan] error in tls handshake: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tc = tlsConn\n\t}\n\tdefer c.Close()\n\n\theadBuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(headBuf)\n\n\tcmd, target, err := s.readHeader(io.TeeReader(c, headBuf))\n\tif err != nil {\n\t\tif s.fallback != \"\" {\n\t\t\ts.serveFallback(c, s.fallback, headBuf)\n\t\t}\n\t\treturn\n\t}\n\n\tnetwork := \"tcp\"\n\tdialer := s.proxy.NextDialer(target.String())\n\n\tif cmd == socks.CmdUDPAssociate {\n\t\tif dialer.Addr() == \"DIRECT\" {\n\t\t\ts.ServeUoT(c, target)\n\t\t\treturn\n\t\t}\n\t\tnetwork = \"udp\"\n\t}\n\n\trc, err := dialer.Dial(network, target.String())\n\tif err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tlog.F(\"[trojan] %s <-> %s via %s\", c.RemoteAddr(), target, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"proxy\"\n\t\"socks\"\n)\n\ntype Trojan struct {\n\taddr       string\n\twithTLS    bool\n\ttlsConfig  *tls.Config\n\tcertFile   string\n\tkeyFile    string\n\tpass       [56]byte\n\tfallback   string\n\tproxy      proxy.Proxy\n}\n\nfunc (t *Trojan) ListenAndServe() {\n\tvar listener net.Listener\n\tvar err error\n\tif t.withTLS {\n\t\tlistener, err = tls.Listen(\"tcp\", t.addr, t.tlsConfig)\n\t} else {\n\t\tlistener, err = net.Listen(\"tcp\", t.addr)\n\t}\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo t.Serve(conn)\n\t}\n}\n\nfunc (t *Trojan) Serve(c net.Conn) {\n\tbuf := new(bytes.Buffer)\n\treader := io.TeeReader(c, buf)\n\tcmd, target, err := t.readHeader(reader)\n\tif err != nil {\n\t\tt.serveFallback(c, t.fallback, buf)\n\t\treturn\n\t}\n\n\tswitch cmd {\n\tcase socks.CmdConnect:\n\t\ttargetConn, err := t.proxy.Dial(\"tcp\", target.String())\n\t\tif err != nil {\n\t\t\tt.serveFallback(c, target.String(), buf)\n\t\t\treturn\n\t\t}\n\t\tgo io.Copy(targetConn, c)\n\t\tio.Copy(c, targetConn)\n\tcase socks.CmdUDP:\n\t\tt.ServeUoT(c, target)\n\tdefault:\n\t\tc.Close()\n\t}\n}\n\nfunc (t *Trojan) readHeader(r io.Reader) (cmd socks.Cmd, target socks.Addr, err error) {\n\tvar pass [56]byte\n\tif _, err = io.ReadFull(r, pass[:]); err != nil {\n\t\treturn\n\t}\n\tif pass != t.pass {\n\t\terr = errors.New(\"invalid password\")\n\t\treturn\n\t}\n\tcmd, target, err = socks.ReadHeader(r)\n\treturn\n}\n\nfunc (t *Trojan) serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) {\n\tfallbackConn, err := net.Dial(\"tcp\", fallback)\n\tif err != nil {\n\t\tc.Close()\n\t\treturn\n\t}\n\tdefer fallbackConn.Close()\n\n\tif buf.Len() > 0 {\n\t\tfallbackConn.Write(buf.Bytes())\n\t}\n\n\tgo io.Copy(fallbackConn, c)\n\tio.Copy(c, fallbackConn)\n}\n\nfunc (t *Trojan) ServeUoT(c net.Conn, target socks.Addr) {\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", target.String())\n\tif err != nil {\n\t\tc.Close()\n\t\treturn\n\t}\n\n\tudpConn, err := net.ListenUDP(\"udp\", nil)\n\tif err != nil {\n\t\tc.Close()\n\t\treturn\n\t}\n\tdefer udpConn.Close()\n\n\tgo func() {\n\t\tfor {\n\t\t\tbuf := make([]byte, 65536)\n\t\t\tn, srcAddr, err := udpConn.ReadFromUDP(buf)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tc.Write(buf[:n])\n\t\t}\n\t}()\n\n\tfor {\n\t\tbuf := make([]byte, 65536)\n\t\tn, err := c.Read(buf)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tudpConn.WriteToUDP(buf[:n], udpAddr)\n\t}\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a TCP echo server in Go that listens for incoming connections on a specified port, reads data from clients, and echoes the same data back to them.\n\nFunction Description: The function implements a simple TCP server that continuously accepts client connections, reads data from each connection, and writes the same data back (echo). It handles network errors appropriately and ensures resources are cleaned up.\n\nInput: None (The port number is hardcoded as \":9000\" in the implementation)\n\nOutput: None (The function runs indefinitely until interrupted, with all output being network communication with clients)",
    "Canonical_solution": "import \"net\"\n\nfunc main() {\n\tln, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tfor {\n\t\t\tbs := make([]byte, 1024)\n\t\t\tn, err := conn.Read(bs)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t_, err = conn.Write(bs[:n])\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to bind to port 9000:\", err)\n\t}\n\tdefer listener.Close()\n\tfmt.Println(\"Server is running on port 9000...\")\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo handleClient(conn)\n\t}\n}\n\nfunc handleClient(conn net.Conn) {\n\tdefer conn.Close()\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tlog.Printf(\"Client disconnected: %s\\n\", conn.RemoteAddr())\n\t\t\t} else {\n\t\t\t\tlog.Printf(\"Error reading from client: %v\\n\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\t_, wErr := conn.Write(buffer[:n])\n\t\tif wErr != nil {\n\t\t\tlog.Printf(\"Error writing to client: %v\\n\", wErr)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Unix domain socket server in Go that listens for incoming connections, handles client communication, and processes received data through a product function. The server should manage connection limits, timeouts, and proper resource cleanup.\n\nStruct Description: The `unix` struct represents a Unix domain socket server with configuration options for path, permissions, and connection handling. It manages the socket lifecycle and processes incoming data.\n\nFields:\n- name: string - Identifier for the server instance\n- config: *Config - Pointer to configuration containing path, mode, timeout, max connections, and max bytes\n- done: chan struct{} - Channel to signal server shutdown\n- eventPool: *event.Pool - Pool for managing event objects\n\nMethods:\n- ProductLoop(productFunc api.ProductFunc) -> void - Main server loop that listens for connections and delegates handling to worker goroutines. Takes a product function for processing events.\n- handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) -> void - Handles individual client connections, reads data, and passes it to the product function. Manages connection timeouts and cleanup.\n- checkBind(path string) -> error - Validates and prepares the socket path by removing existing files if necessary\n- chmod(path string, mode string) -> error - Sets filesystem permissions on the socket file",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/loggie-io/loggie/pkg/core/api\"\n\t\"github.com/loggie-io/loggie/pkg/core/event\"\n\t\"github.com/loggie-io/loggie/pkg/core/log\"\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/net/netutil\"\n)\n\ntype unix struct {\n\tname      string\n\tconfig    *Config\n\tdone      chan struct{}\n\teventPool *event.Pool\n}\n\nfunc (k *unix) ProductLoop(productFunc api.ProductFunc) {\n\tlog.Info(\"%s start product loop\", k.String())\n\n\tif err := checkBind(k.config.Path); err != nil {\n\t\tlog.Error(\"check unix sock path error: %+v\", err)\n\t\treturn\n\t}\n\n\tlistener, err := net.Listen(\"unix\", k.config.Path)\n\tif err != nil {\n\t\tlog.Error(\"setup unix listener failed: %v\", err)\n\t\treturn\n\t}\n\n\tif err := chmod(k.config.Path, k.config.Mode); err != nil {\n\t\tlog.Error(\"chmod unix path %s with %s failed: %v\", k.config.Path, k.config.Mode, err)\n\t\treturn\n\t}\n\n\tif k.config.MaxConnections > 0 {\n\t\tlistener = netutil.LimitListener(listener, k.config.MaxConnections)\n\t}\n\n\tdefer listener.Close()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tfor {\n\t\tselect {\n\t\tcase <-k.done:\n\t\t\treturn\n\n\t\tdefault:\n\t\t}\n\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Warn(\"unix sock listener accept connection failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo k.handleConn(ctx, conn, productFunc)\n\t}\n}\n\nfunc (k *unix) handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) {\n\tdefer conn.Close()\n\n\tbuf := bufio.NewReader(conn)\n\tscan := bufio.NewScanner(buf)\n\n\tinitBuffer := make([]byte, k.config.MaxBytes/4)\n\tscan.Buffer(initBuffer, k.config.MaxBytes)\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\n\t\tdefault:\n\t\t}\n\n\t\tif err := conn.SetDeadline(time.Now().Add(k.config.Timeout)); err != nil {\n\t\t\tlog.Warn(\"set connection timeout error: %v\", err)\n\t\t}\n\n\t\tif !scan.Scan() {\n\t\t\tif scan.Err() != nil {\n\t\t\t\tlog.Warn(\"scan connection error: %v\", scan.Err())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tbreak\n\t\t}\n\n\t\tbody := scan.Bytes()\n\t\tcopyBody := make([]byte, len(body))\n\t\tcopy(copyBody, body)\n\t\te := k.eventPool.Get()\n\t\te.Fill(e.Meta(), e.Header(), copyBody)\n\n\t\tproductFunc(e)\n\t}\n}\n\nfunc checkBind(path string) error {\n\t_, err := os.Lstat(path)\n\tif err != nil {\n\t\tif os.IsNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\n\t\treturn errors.WithMessagef(err, \"stat path %s failed\", path)\n\t}\n\n\tif err := os.Remove(path); err != nil {\n\t\treturn errors.WithMessagef(err, \"remove path %s failed\", path)\n\t}\n\n\treturn nil\n}\n\nfunc chmod(path string, mode string) error {\n\tparsed, err := strconv.ParseUint(mode, 8, 32)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err = os.Chmod(path, os.FileMode(parsed)); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Event struct{}\n\ntype Config struct {\n\tPath     string\n\tMode     string\n\tTimeout  time.Duration\n\tMaxConns int\n\tMaxBytes int\n}\n\ntype unix struct {\n\tname      string\n\tconfig    *Config\n\tdone      chan struct{}\n\teventPool *sync.Pool\n}\n\nfunc (u *unix) ProductLoop(productFunc func(*Event, []byte)) {\n\tu.checkBind(u.config.Path)\n\tlistener, err := net.Listen(\"unix\", u.config.Path)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer listener.Close()\n\tu.chmod(u.config.Path, u.config.Mode)\n\n\tgo func() {\n\t\t<-u.done\n\t\tlistener.Close()\n\t\tos.Remove(u.config.Path)\n\t}()\n\n\tsem := make(chan struct{}, u.config.MaxConns)\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-u.done:\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif u.config.MaxConns > 0 {\n\t\t\tselect {\n\t\t\tcase sem <- struct{}{}:\n\t\t\tdefault:\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tctx := context.Background()\n\t\tif u.config.Timeout > 0 {\n\t\t\tctx, cancel := context.WithTimeout(ctx, u.config.Timeout)\n\t\t\tgo func() {\n\t\t\t\tu.handleConn(ctx, conn, productFunc)\n\t\t\t\tif u.config.MaxConns > 0 {\n\t\t\t\t\t<-sem\n\t\t\t\t}\n\t\t\t\tcancel()\n\t\t\t}()\n\t\t} else {\n\t\t\tgo func() {\n\t\t\t\tu.handleConn(ctx, conn, productFunc)\n\t\t\t\tif u.config.MaxConns > 0 {\n\t\t\t\t\t<-sem\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t}\n}\n\nfunc (u *unix) handleConn(ctx context.Context, conn net.Conn, productFunc func(*Event, []byte)) {\n\tdefer conn.Close()\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tconn.SetReadDeadline(deadline)\n\t}\n\tbuf := make([]byte, u.config.MaxBytes)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\treturn\n\t}\n\tdata := buf[:n]\n\tevent := u.eventPool.Get().(*Event)\n\tdefer u.eventPool.Put(event)\n\tproductFunc(event, data)\n}\n\nfunc (u *unix) checkBind(path string) error {\n\tif info, err := os.Stat(path); err == nil {\n\t\tif err := os.Remove(path); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else if !os.IsNotExist(err) {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (u *unix) chmod(path string, mode string) error {\n\tif mode == \"\" {\n\t\treturn nil\n\t}\n\tm, err := strconv.ParseUint(mode, 8, 32)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn os.Chmod(path, os.FileMode(m))\n}"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, sets specific IPv6 traffic class and hop limit for IPv6 connections, and sends an acknowledgment message to each client.\n\nFunction Description: The function establishes a TCP server on port 1024 that continuously accepts client connections. For each connection, it checks if the client is using IPv6 and configures specific network parameters (traffic class and hop limit) if so. It then sends a fixed acknowledgment message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. Each client connection is handled in a separate goroutine.\n\nInput: None (The function takes no explicit parameters but binds to port 1024 by default)\n\nOutput: None (The function doesn't return any value but maintains persistent network operations and may log fatal errors)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"syscall\"\n\n\t\"golang.org/x/sys/unix\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\tip, ok := conn.RemoteAddr().(*net.TCPAddr).IP\n\tif ok && ip.To4() == nil {\n\t\ttcpConn, ok := conn.(*net.TCPConn)\n\t\tif !ok {\n\t\t\tlog.Println(\"Failed to cast to TCPConn\")\n\t\t\treturn\n\t\t}\n\t\terr := tcpConn.SyscallConn().Control(func(fd uintptr) {\n\t\t\terr1 := syscall.SetsockoptInt(int(fd), unix.SOL_IPV6, unix.IPV6_UNICAST_HOPS, 64)\n\t\t\tif err1 != nil {\n\t\t\t\tlog.Println(\"SetsockoptInt(IPV6_UNICAST_HOPS) error:\", err1)\n\t\t\t}\n\t\t\terr2 := syscall.SetsockoptInt(int(fd), unix.SOL_IPV6, unix.IPV6_TCLASS, 48)\n\t\t\tif err2 != nil {\n\t\t\t\tlog.Println(\"SetsockoptInt(IPV6_TCLASS) error:\", err2)\n\t\t\t}\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Println(\"SyscallConn.Control error:\", err)\n\t\t}\n\t}\n\n\t_, err = conn.Write([]byte(\"HELLO-R-U-THERE-ACK\"))\n\tif err != nil {\n\t\tlog.Println(\"Write error:\", err)\n\t}\n}"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Implement a gRPC client in Go that establishes a secure connection to a gRPC server with authentication, sends a request, and processes the response.\n\nFunction Description: The function `doClientWork` demonstrates how to create a gRPC client that connects to a server, authenticates using provided credentials, sends a \"Hello\" request, and logs the response. It handles connection setup, authentication, RPC call execution, and connection cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes, but these could be parameterized in a real implementation)\n\nOutput: None (The function logs results to stdout but doesn't return any values)\n\n---\n\nTask Description: Implement an authentication struct for gRPC credentials in Go that provides request metadata and specifies transport security requirements.\n\nStruct Description: The `Authentication` struct implements gRPC's `credentials.PerRPCCredentials` interface to provide per-RPC credentials (login/password) for gRPC requests.\n\nFields:\nLogin: string - The username for authentication\nPassword: string - The password for authentication\n\nMethods:\nGetRequestMetadata: (context.Context, ...string) -> (map[string]string, error) - Returns the authentication metadata (login/password) to be included in RPC requests\nRequireTransportSecurity: () -> bool - Indicates whether transport security is required (returns false in this implementation)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(context.Context, ...string) (map[string]string, error) {\n\treturn map[string]string{\"login\": a.Login, \"password\": a.Password}, nil\n}\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tauth := Authentication{\n\t\tLogin:    \"gopher\",\n\t\tPassword: \"password\",\n\t}\n\n\tconn, err := grpc.Dial(\"localhost\"+port, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&auth))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tc := NewGreeterClient(conn)\n\n\tr, err := c.SayHello(context.Background(), &HelloRequest{Name: \"gopher\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"doClientWork: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n\tpb \"path/to/protos\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n\treturn map[string]string{\n\t\t\"login\":    a.Login,\n\t\t\"password\": a.Password,\n\t}, nil\n}\n\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tauth := &Authentication{\n\t\tLogin:    \"user\",\n\t\tPassword: \"pass\",\n\t}\n\n\tconn, err := grpc.Dial(\n\t\t\"localhost:50051\",\n\t\tgrpc.WithTransportCredentials(credentials.NewClientTLSFromCert(nil, \"\")),\n\t\tgrpc.WithPerRPCCredentials(auth),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\tdefer cancel()\n\n\treq := &pb.HelloRequest{Name: \"World\"}\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\tlog.Fatalf(\"RPC failed: %v\", err)\n\t}\n\n\tlog.Printf(\"Received message: %s\", resp.GetMessage())\n}"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Implement a gRPC client function in Go that establishes a bidirectional streaming connection with a gRPC server, sends a chat message, and continuously receives responses from the server until the connection is closed.\n\nFunction Description: The function `Test` is a test function that demonstrates bidirectional streaming gRPC communication. It connects to a gRPC server, sends a chat message, and asynchronously receives responses from the server. The function handles connection errors, stream creation errors, and different types of response errors (including EOF when the server closes the connection).\n\nInput: None (The function is a test function with no explicit input parameters, but it connects to a predefined server address \"127.0.0.1:8089\")\n\nOutput: None (The function doesn't return any value but prints received messages and errors to stdout)\n\nNote: The function uses a deferred connection closure and runs the send operation in a separate goroutine to allow simultaneous sending and receiving. The main loop continues receiving until an EOF error or other fatal error occurs.",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"io\"\n\t\"log\"\n\t\"testing\"\n\n\t\"learning_tools/grpc/bidirectional_streaming_rpc/proto\"\n)\nfunc Test(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tdefer conn.Close()\n\tclient := proto.NewChatServiceClient(conn)\n\tctx := context.Background()\n\tstream, err := client.Chat(ctx)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tgo func() {\n\t\tif err := stream.Send(&proto.Request{Input: \"\u804a\u5929\"}); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"\u670d\u52a1\u7aef\u7ed3\u675f\u901a\u77e5:\", err.Error())\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(\"\u63a5\u53d7\u6570\u636e\u9519\u8bef:\", err.Error())\n\t\t}\n\t\tfmt.Println(\"\u670d\u52a1\u7aef\u8fd4\u56de:\", response.Output)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc Test() {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(5*time.Second))\n\tif err != nil {\n\t\tfmt.Println(\"Connection failed:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := NewChatClient(conn)\n\tstream, err := client.ChatStream(context.Background())\n\tif err != nil {\n\t\tfmt.Println(\"Stream creation failed:\", err)\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tmsg := &Message{\n\t\t\tContent: \"Hello from client\",\n\t\t}\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\tfmt.Println(\"Send error:\", err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"Server closed the connection\")\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Receive error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(\"Received:\", resp.Content)\n\t}\n}\n\ntype Message struct {\n\tContent string\n}\n\ntype ChatClient interface {\n\tChatStream(ctx context.Context) (Chat_ChatStreamClient, error)\n}\n\ntype Chat_ChatStreamClient interface {\n\tSend(*Message) error\n\tRecv() (*Message, error)\n\tgrpc.ClientStream\n}"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Create a Go function that establishes a secure gRPC client connection to a server, performs a math operation (addition) using the gRPC service, and returns the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:8092 using TLS credentials from a specified certificate file. It creates a client for the MathService, sends a request with two integer arguments, and returns the server's response containing the result of the addition operation.\n\nInput: \n- None (all configuration is hardcoded in the function)\n\nOutput:\n- Prints the response code and message from the gRPC server to stdout\n- Returns nothing (void function)\n\nNote: The function handles connection establishment, service client creation, request sending, and connection cleanup automatically. Error conditions will cause the function to panic.",
    "Canonical_solution": "import (\n\t\"google.golang.org/grpc\"\n\t\"grpcSSLCode/message\"\n\t\"context\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"fmt\"\n\t\"google.golang.org/grpc/credentials\"\n)\nfunc main() {\n\tcreds, err := credentials.NewClientTLSFromFile(\"./keys/server.pem\", \"go-grpc-example\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tgrpc.WithInsecure()\n\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer conn.Close()\n\n\tserviceClient := message.NewMathServiceClient(conn)\n\n\taddArgs := message.RequestArgs{Args1: 3, Args2: 5}\n\n\tresponse, err := serviceClient.AddMethod(context.Background(), &addArgs)\n\tif err != nil {\n\t\tgrpclog.Fatal(err.Error())\n\t}\n\n\tfmt.Println(response.GetCode(), response.GetMessage())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\nfunc performAddition() {\n\tcertFile := \"cert.pem\"\n\tcreds, err := credentials.NewClientTLSFromFile(certFile, \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewMathServiceClient(conn)\n\n\treq := &AddRequest{A: 5, B: 7}\n\n\tresp, err := client.Add(context.Background(), req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Response code: 0, message: %d\\n\", resp.Result)\n}\n\ntype AddRequest struct {\n\tA int32 `protobuf:\"varint,1,opt,name=a,proto3\" json:\"a,omitempty\"`\n\tB int32 `protobuf:\"varint,2,opt,name=b,proto3\" json:\"b,omitempty\"`\n}\n\ntype AddResponse struct {\n\tResult int32 `protobuf:\"varint,1,opt,name=result,proto3\" json:\"result,omitempty\"`\n}\n\ntype MathServiceClient interface {\n\tAdd(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)\n}\n\nfunc NewMathServiceClient(cc *grpc.ClientConn) MathServiceClient {\n\treturn &mathServiceClient{cc}\n}\n\ntype mathServiceClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc (c *mathServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {\n\tout := new(AddResponse)\n\terr := c.cc.Invoke(ctx, \"/math.MathService/Add\", in, out, opts...)\n\treturn out, err\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a Go function that makes a gRPC call to a test service's EmptyCall method, handling connection establishment and cleanup.\n\nFunction Description: The function invokes the EmptyCall RPC method on a gRPC test service. It establishes a connection to the server with timeout and blocking options, makes the RPC call, and properly closes the connection. The function handles both connection errors and RPC call errors.\n\nInput:\n- address: string - The server address to connect to\n- dialOptions: []grpc.DialOption - List of gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tdialOptions = append(dialOptions, grpc.WithBlock())\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewTestServiceClient(clientConn)\n\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\ttestpb \"path/to/testpb\"\n)\n\nfunc EmptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, address, append(dialOptions, grpc.WithBlock())...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := testpb.NewTestServiceClient(conn)\n\tresp, err := client.EmptyCall(context.Background(), &testpb.Empty{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Implement a function to register a mapper with a gRPC server using the Device Management Interface (DMI) API. The function should establish a connection to the server, send a registration request, and return the list of devices and device models provided by the server.\n\nFunction Description: The `RegisterMapper` function connects to a gRPC server using Unix domain socket, sends a mapper registration request with the provided configuration, and returns the device and device model lists from the server response. It handles connection establishment, timeout context, and proper cleanup of resources.\n\nInput: \n- `withData` [bool]: A flag indicating whether to include data in the registration request.\n\nOutput:\n- `[]*dmiapi.Device`: A slice of pointers to Device objects returned by the server.\n- `[]*dmiapi.DeviceModel`: A slice of pointers to DeviceModel objects returned by the server.\n- `error`: An error object if any step fails, nil otherwise.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/common\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tresp, err := c.MapperRegister(ctx, &dmiapi.MapperRegisterRequest{\n\t\tWithData: withData,\n\t\tMapper: &dmiapi.MapperInfo{\n\t\t\tName:       cfg.Common.Name,\n\t\t\tVersion:    cfg.Common.Version,\n\t\t\tApiVersion: cfg.Common.APIVersion,\n\t\t\tProtocol:   cfg.Common.Protocol,\n\t\t\tAddress:    []byte(cfg.GrpcServer.SocketPath),\n\t\t\tState:      common.DeviceStatusOK,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.DeviceList, resp.ModelList, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/example/dmiapi\"\n)\n\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, \"unix:///var/run/dmiapi.sock\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to connect: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewMapperClient(conn)\n\treq := &dmiapi.RegisterMapperRequest{WithData: withData}\n\n\tresp, err := client.RegisterMapper(ctx, req)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"registration failed: %w\", err)\n\t}\n\n\treturn resp.Devices, resp.DeviceModels, nil\n}"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Implement a gRPC client in Go that connects to a gRPC server over a Unix domain socket, retrieves configuration information, and manages base virtual machine instances.\n\nStruct Description: The grpccache struct represents a gRPC client cache that maintains a connection to a gRPC server and stores VM configuration information.\n\nFields:\nconn: *grpc.ClientConn - Maintains the active connection to the gRPC server\nconfig: *vc.VMConfig - Stores the virtual machine configuration obtained from the server\n\nMethods:\nNew: [Name](ctx context.Context, endpoint string) -> (base.FactoryBase, error) - Creates a new grpccache instance by establishing a connection to the gRPC server at the specified endpoint and retrieving the VM configuration.\nGetBaseVM: [Name](ctx context.Context, config vc.VMConfig) -> (*vc.VM, error) - Retrieves a base VM instance from the cache server and closes the connection when done. The method converts the gRPC response to a local VM object.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\n\ttypes \"github.com/gogo/protobuf/types\"\n\tpb \"github.com/kata-containers/runtime/protocols/cache\"\n\tvc \"github.com/kata-containers/runtime/virtcontainers\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\tconn, err := grpc.Dial(fmt.Sprintf(\"unix://%s\", endpoint), grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to connect %q\", endpoint)\n\t}\n\n\tjConfig, err := pb.NewCacheServiceClient(conn).Config(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to Config\")\n\t}\n\n\tconfig, err := vc.GrpcToVMConfig(jConfig)\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to convert JSON to VMConfig\")\n\t}\n\n\treturn &grpccache{conn: conn, config: config}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tdefer g.conn.Close()\n\tgVM, err := pb.NewCacheServiceClient(g.conn).GetBaseVM(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to GetBaseVM\")\n\t}\n\treturn vc.NewVMFromGrpc(ctx, gVM, *g.config)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"vc\"\n\t\"base\"\n\tpb \"some/package/proto\"\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\tconn, err := grpc.Dial(endpoint, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclient := pb.NewConfigServiceClient(conn)\n\tresp, err := client.GetVMConfig(ctx, &pb.GetVMConfigRequest{})\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\tvmConfig := &vc.VMConfig{}\n\treturn &grpccache{\n\t\tconn:   conn,\n\t\tconfig: vmConfig,\n\t}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tdefer g.conn.Close()\n\tvmClient := pb.NewVMServiceClient(g.conn)\n\treq := &pb.GetBaseVMRequest{\n\t\tConfig: &config,\n\t}\n\tresp, err := vmClient.GetBaseVM(ctx, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvm := &vc.VM{}\n\treturn vm, nil\n}"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a remote server, performs profiling operations based on input flags, and handles connection cleanup.\n\nFunction Description: The function `remoteCommand` establishes an insecure gRPC connection to a specified address, creates a profiling client, and executes either profiling enable/disable operations or retrieves a snapshot based on command-line flags. It handles connection timeouts and ensures proper connection closure.\n\nInput:\n- Context (implicit through package variables)\n- Command-line flags (implicit through package variables):\n  - `flagAddress`: string - gRPC server address to connect to\n  - `flagTimeout`: int - connection timeout in seconds (0 for no timeout)\n  - `flagEnableProfiling`: bool - whether to enable profiling\n  - `flagDisableProfiling`: bool - whether to disable profiling\n  - `flagRetrieveSnapshot`: bool - whether to retrieve a snapshot\n  - `flagSnapshot`: string - snapshot identifier (when retrieving)\n\nOutput:\n- error - returns nil on success, or an error describing what went wrong during execution",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tppb \"google.golang.org/grpc/profiling/proto\"\n)\nfunc remoteCommand() error {\n\tctx := context.Background()\n\tif *flagTimeout > 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(context.Background(), time.Duration(*flagTimeout)*time.Second)\n\t\tdefer cancel()\n\t}\n\n\tlogger.Infof(\"dialing %s\", *flagAddress)\n\tcc, err := grpc.Dial(*flagAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Errorf(\"cannot dial %s: %v\", *flagAddress, err)\n\t\treturn err\n\t}\n\tdefer cc.Close()\n\n\tc := ppb.NewProfilingClient(cc)\n\n\tif *flagEnableProfiling || *flagDisableProfiling {\n\t\treturn setEnabled(ctx, c, *flagEnableProfiling)\n\t}\n\tif *flagRetrieveSnapshot {\n\t\treturn retrieveSnapshot(ctx, c, *flagSnapshot)\n\t}\n\treturn fmt.Errorf(\"what should I do with the remote target?\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc remoteCommand() error {\n\tvar dialCtx context.Context\n\tvar cancel context.CancelFunc\n\tif *flagTimeout > 0 {\n\t\tdialCtx, cancel = context.WithTimeout(context.Background(), time.Duration(*flagTimeout)*time.Second)\n\t\tdefer cancel()\n\t} else {\n\t\tdialCtx = context.Background()\n\t}\n\n\tdialOpts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t}\n\tif *flagTimeout > 0 {\n\t\tdialOpts = append(dialOpts, grpc.WithBlock())\n\t}\n\n\tconn, err := grpc.DialContext(dialCtx, *flagAddress, dialOpts...)\n\tif err != nil {\n\t\tif err == context.DeadlineExceeded {\n\t\t\treturn fmt.Errorf(\"connection timeout\")\n\t\t}\n\t\treturn fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewProfilingClient(conn)\n\n\tif *flagEnableProfiling {\n\t\t_, err := client.EnableProfiling(context.Background(), &EnableProfilingRequest{})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"enable profiling failed: %v\", err)\n\t\t}\n\t} else if *flagDisableProfiling {\n\t\t_, err := client.DisableProfiling(context.Background(), &DisableProfilingRequest{})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"disable profiling failed: %v\", err)\n\t\t}\n\t} else if *flagRetrieveSnapshot {\n\t\treq := &RetrieveSnapshotRequest{Id: *flagSnapshot}\n\t\tresp, err := client.RetrieveSnapshot(context.Background(), req)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"retrieve snapshot failed: %v\", err)\n\t\t}\n\t\t_ = resp\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC server for Google Pub/Sub emulator and initializes a Pub/Sub client using that connection.\n\nFunction Description: The function demonstrates how to set up a connection to a local gRPC server (Pub/Sub emulator) using insecure credentials, then creates a Pub/Sub client with the established connection. The client should be properly closed when no longer needed.\n\nInput: None (uses hardcoded values for demonstration purposes)\n\nOutput: None (function demonstrates setup pattern, actual Pub/Sub client is created but not used)\n\nNote: The function uses context.Background() for simplicity in the example, and hardcodes \"project\" as the Google Cloud project ID for demonstration purposes. In production code, these would typically be parameters.",
    "Canonical_solution": "import (\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n)\nfunc ExampleNewServer() {\n\tctx := context.Background()\n\tsrv := pstest.NewServer()\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t}\n\tclient, err := pubsub.NewClient(ctx, \"project\", option.WithGRPCConn(conn))\n\tif err != nil {\n\t}\n\tdefer client.Close()\n\t_ = client\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"cloud.google.com/go/pubsub\"\n)\n\nfunc setupPubSubClient() {\n\tctx := context.Background()\n\tconn, err := grpc.DialContext(ctx, \"localhost:8085\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tclient, err := pubsub.NewClientWithConn(ctx, \"project\", conn)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer client.Close()\n}"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a Dragonfly daemon server over a Unix domain socket to download files from a specified URL to a local output path, with various download configuration options.\n\nFunction Description: The function establishes a gRPC connection to a Dragonfly daemon server running on a Unix domain socket, initiates a file download operation with specified parameters including authentication headers for S3 storage, and streams the download results until completion.\n\nInput:\n- ctx context.Context - Context for controlling the gRPC call lifecycle\n- unixSocketPath string - Path to the Unix domain socket (e.g., \"/run/dfdaemon.sock\")\n- downloadRequest *dfdaemonv1.DownRequest - Download request containing:\n  * Uuid: string - Unique identifier for the download\n  * Url: string - Source URL to download from\n  * Output: string - Local output path\n  * Recursive: bool - Whether to download recursively\n  * UrlMeta: *commonv1.UrlMeta - Metadata including S3 authentication headers\n  * Other download configuration parameters\n\nOutput:\n- map[string]*dfdaemonv1.DownResult - Map of download results keyed by output path\n- error - Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tdfdaemonv1 \"d7y.io/api/v2/pkg/apis/dfdaemon/v1\"\n)\nfunc main() {\n\tdialer := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", addr)\n\t}\n\n\tunixAddr := \"/run/dfdaemon.sock\"\n\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tunixAddr,\n\t\tgrpc.WithContextDialer(dialer),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tvar (\n\t\tclient = dfdaemonv1.NewDaemonClient(conn)\n\t\tctx    = context.Background()\n\t)\n\n\tdownloadClient, err := client.Download(ctx, &dfdaemonv1.DownRequest{\n\t\tUuid:              \"95305fa2-138b-4466-acec-62865ab6403c\",\n\t\tUrl:               \"s3://minio-test-bucket/dragonfly-test/usr/\" + *subDir,\n\t\tOutput:            \"/var/lib/dragonfly-grpc-test/usr/\" + *subDir,\n\t\tRecursive:         true,\n\t\tTimeout:           0,\n\t\tLimit:             0,\n\t\tDisableBackSource: false,\n\t\tUrlMeta: &commonv1.UrlMeta{\n\t\t\tDigest: \"\",\n\t\t\tTag:    \"\",\n\t\t\tRange:  \"\",\n\t\t\tFilter: \"Expires&Signature\",\n\t\t\tHeader: map[string]string{\n\t\t\t\t\"awsEndpoint\":         \"http://minio.dragonfly-e2e.svc:9000\",\n\t\t\t\t\"awsRegion\":           \"us-west-1\",\n\t\t\t\t\"awsAccessKeyID\":      \"root\",\n\t\t\t\t\"awsSecretAccessKey\":  \"password\",\n\t\t\t\t\"awsS3ForcePathStyle\": \"true\",\n\t\t\t},\n\t\t},\n\t\tUid:                1000,\n\t\tGid:                1000,\n\t\tKeepOriginalOffset: false,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tresults := map[string]*dfdaemonv1.DownResult{}\n\tfor {\n\t\tresp, err := downloadClient.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/dragonflyoss/dfdaemon/api/v1/dfdaemon\"\n\t\"github.com/dragonflyoss/dfdaemon/api/v1/common\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc DownloadFile(ctx context.Context, unixSocketPath string, downloadRequest *dfdaemon.DownRequest) (map[string]*dfdaemon.DownResult, error) {\n\tconn, err := grpc.Dial(unixSocketPath,\n\t\tgrpc.WithContextDialer(func(ctx context.Context, addr string) (net.Conn, error) {\n\t\t\treturn net.Dial(\"unix\", addr)\n\t\t}),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := dfdaemon.NewDfdaemonServiceClient(conn)\n\tstream, err := client.Download(ctx, downloadRequest)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresults := make(map[string]*dfdaemon.DownResult)\n\tfor {\n\t\tresult, recvErr := stream.Recv()\n\t\tif recvErr == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif recvErr != nil {\n\t\t\treturn nil, recvErr\n\t\t}\n\t\tresults[result.OutputPath] = result\n\t}\n\n\treturn results, nil\n}"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Implement a gRPC client function in Go that reports device status to a gRPC server using a Unix domain socket connection.\n\nFunction Description: The function `ReportDeviceStatus` establishes a connection to a gRPC server through a Unix domain socket, sends a device status report request, and handles the response. It manages connection lifecycle including setup, error handling, and cleanup.\n\nInput: \n- request *dmiapi.ReportDeviceStatusRequest: A pointer to the gRPC request message containing device status information to be reported.\n\nOutput:\n- error: Returns an error if any step fails (connection establishment, RPC call, etc.), or nil if successful.\n\nNote: The function uses configuration from `config.Cfg()` to determine the Unix socket path and includes proper connection timeout handling.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\t_, err = c.ReportDeviceStatus(ctx, request)\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\t\"config\"\n\t\"dmiapi\"\n)\n\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tsocketPath := config.Cfg().UnixSocketPath\n\ttarget := \"unix://\" + socketPath\n\n\tdialCtx, dialCancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer dialCancel()\n\n\tconn, err := grpc.DialContext(\n\t\tdialCtx,\n\t\ttarget,\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithBlock(),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewDeviceManagementClient(conn)\n\n\trpcCtx, rpcCancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer rpcCancel()\n\n\t_, err = client.ReportDeviceStatus(rpcCtx, request)\n\treturn err\n}"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC metrics server, creates a client for the MetricsService, and prints the metrics retrieved from the server.\n\nFunction Description: The function connects to a gRPC server specified by the metricsServerAddress, initializes a MetricsService client, and prints the metrics. If the connection fails, it logs a fatal error. The connection is automatically closed when the function completes.\n\nInput: \n- metricsServerAddress: string - The address of the gRPC metrics server to connect to.\n- totalOnly: bool - A flag indicating whether to print only the total metrics or all metrics.\n\nOutput: None (prints metrics to the console or logs errors).",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tgrpclog.Fatalf(\"Metrics server address is empty.\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"your/package/metrics\"\n)\n\nfunc printMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.Dial(metricsServerAddress, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewMetricsServiceClient(conn)\n\tresp, err := client.GetMetrics(context.Background(), &pb.GetMetricsRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to retrieve metrics: %v\", err)\n\t}\n\n\tif totalOnly {\n\t\tlog.Printf(\"Total Metrics: %v\", resp.GetTotal())\n\t} else {\n\t\tlog.Printf(\"All Metrics: %+v\", resp)\n\t}\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and processes the response.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and logs the server's response or any errors encountered during the process.\n\nInput: \n- address: string - The server address in format \"host:port\" (default: \"localhost:50051\")\n- name: string - The name to send in the greeting request (default: \"world\")\n\nOutput:\n- None (directly logs results to console)\n- Side effect: Sends gRPC request and receives response",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"go.opencensus.io/examples/grpc/proto\"\n\t\"go.opencensus.io/plugin/ocgrpc\"\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"world\"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithStatsHandler(&ocgrpc.ClientHandler{}), grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Cannot connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Printf(\"Could not greet: %v\", err)\n\t} else {\n\t\tlog.Printf(\"Greeting: %s\", r.Message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"helloworld\"\n)\n\nfunc greet(address string, name string) {\n\tif address == \"\" {\n\t\taddress = \"localhost:50051\"\n\t}\n\tif name == \"\" {\n\t\tname = \"world\"\n\t}\n\n\tconn, err := grpc.Dial(address, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Printf(\"did not connect: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\treq := &pb.HelloRequest{Name: name}\n\tresp, err := client.SayHello(context.Background(), req)\n\tif err != nil {\n\t\tlog.Printf(\"could not greet: %v\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"Greeting: %s\", resp.Message)\n}"
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Create a gRPC client in Go that connects to a RouteGuide service, performs various operations (getting features, listing features within a rectangle, recording a route, and conducting route chat), and handles secure/insecure connections.\n\nFunction Description: The main function establishes a connection to a gRPC server, creates a RouteGuide client, and demonstrates various service operations. It handles both secure (TLS) and insecure connections based on input flags.\n\nInput:\n- Command line flags (implicit):\n  - tls (bool): Whether to use TLS encryption\n  - serverHostOverride (string): Server name for certificate validation\n  - caFile (string): Path to CA certificate file\n  - serverAddr (string): Server address in format host:port\n\nOutput:\n- None (direct output to console/logger)\n- Side effects: Makes gRPC calls to server and prints results\n\nMethods called (from RouteGuideClient):\n1. printFeature(client, point) - Gets and prints a feature at given point\n2. printFeatures(client, rectangle) - Lists features within given rectangle\n3. runRecordRoute(client) - Records a route and prints statistics\n4. runRouteChat(client) - Conducts bidirectional route chat",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"io\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/credentials\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n\n\tprintFeature(client, &pb.Point{409146138, -746188906})\n\tprintFeature(client, &pb.Point{0, 0})\n\tprintFeatures(client, &pb.Rectangle{&pb.Point{400000000, -750000000}, &pb.Point{420000000, -730000000}})\n\trunRecordRoute(client)\n\trunRouteChat(client)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"path/to/routeguide\"\n)\n\nvar (\n\ttls                = flag.Bool(\"tls\", false, \"Use TLS connection\")\n\tserverHostOverride = flag.String(\"server_host_override\", \"\", \"Server name for certificate validation\")\n\tcaFile             = flag.String(\"ca_file\", \"\", \"CA certificate file\")\n\tserverAddr         = flag.String(\"server_addr\", \"localhost:50051\", \"Server address\")\n)\n\nfunc printFeature(client pb.RouteGuideClient, point *pb.Point) {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tfeature, err := client.GetFeature(ctx, point)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"Feature: %v\\n\", feature)\n}\n\nfunc printFeatures(client pb.RouteGuideClient, rect *pb.Rectangle) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.ListFeatures(ctx, rect)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor {\n\t\tfeature, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"Feature: %v\\n\", feature)\n\t}\n}\n\nfunc runRecordRoute(client pb.RouteGuideClient) {\n\tpts := []*pb.Point{\n\t\t{Latitude: 409146138, Longitude: -746188906},\n\t\t{Latitude: 409146139, Longitude: -746188907},\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.RecordRoute(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, pt := range pts {\n\t\tif err := stream.Send(pt); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n\treply, err := stream.CloseAndRecv()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"Route summary: %v\\n\", reply)\n}\n\nfunc runRouteChat(client pb.RouteGuideClient) {\n\tnotes := []*pb.RouteNote{\n\t\t{Location: &pb.Point{Latitude: 0, Longitude: 0}, Message: \"First message\"},\n\t\t{Location: &pb.Point{Latitude: 1, Longitude: 1}, Message: \"Second message\"},\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.RouteChat(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\twaitc := make(chan struct{})\n\tgo func() {\n\t\tfor {\n\t\t\tmsg, err := stream.Recv()\n\t\t\tif err == io.EOF {\n\t\t\t\tclose(waitc)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %v\\n\", msg)\n\t\t}\n\t}()\n\tfor _, note := range notes {\n\t\tif err := stream.Send(note); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n\tstream.CloseSend()\n\t<-waitc\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar creds credentials.TransportCredentials\n\t\tvar err error\n\t\tif *caFile != \"\" {\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\t} else {\n\t\t\tcreds, err = credentials.NewClientTLSFromCert(nil, *serverHostOverride)\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewRouteGuideClient(conn)\n\n\tpoint := &pb.Point{Latitude: 409146138, Longitude: -746188906}\n\tprintFeature(client, point)\n\n\trect := &pb.Rectangle{\n\t\tLo: &pb.Point{Latitude: 400000000, Longitude: -750000000},\n\t\tHi: &pb.Point{Latitude: 420000000, Longitude: -730000000},\n\t}\n\tprintFeatures(client, rect)\n\n\trunRecordRoute(client)\n\trunRouteChat(client)\n}"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a server, invokes an empty call RPC method, and returns the response.\n\nFunction Description: The function `invokeEmptyCall` connects to a gRPC server at the specified address, creates a client for the EmptyService, makes an empty call RPC, and returns the response. It handles connection establishment and cleanup, including context timeout and connection closure.\n\nInput: \n- address: string - The address of the gRPC server to connect to\n- dialOptions: variadic grpc.DialOption - Optional gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during the connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), testTimeout)\n\tdefer cancel()\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewEmptyServiceClient(clientConn)\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := testpb.NewEmptyServiceClient(conn)\n\n\tresponse, err := client.EmptyCall(ctx, &testpb.Empty{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and receives a response.\n\nFunction Description: The function establishes a connection to a gRPC server using the provided address, creates a client for the HelloService, sends a HelloRequest with the specified name, and returns the server's response. It handles connection errors and timeout contexts.\n\nInput:\n- addr: string - The address of the gRPC server to connect to (e.g., \"127.0.0.1:8972\")\n- name: string - The name to include in the greeting request\n\nOutput:\n- string - The greeting response from the server\n- error - Any error that occurred during the process\n\nNote: The function should properly close the connection when done and handle context timeouts.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"hello_grpc_client/proto\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &proto.HelloRequest{\n\t\tName: *name,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc greetClient(addr string, name string) (string, error) {\n\tconn, err := grpc.Dial(addr, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\treq := &HelloRequest{Name: name}\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn resp.Message, nil\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and properly handle the connection lifecycle.\n\nFunction Description: The function tests gRPC client functionality by connecting to a user authentication service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper gRPC connection management and metadata handling.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None directly returned, but prints authentication tokens to stdout\n- Returns error if connection or RPC calls fail\n\nNote: The function includes error handling and connection cleanup via defer. It uses metadata to pass a UUID for request tracking and demonstrates multiple RPC calls in a loop.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/src\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\ntype LoginRequest struct {\n\tUsername string\n\tPassword string\n}\n\ntype LoginResponse struct {\n\tToken string\n}\n\ntype AuthServiceClient interface {\n\tLogin(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)\n}\n\ntype authServiceClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {\n\treturn &authServiceClient{cc}\n}\n\nfunc (c *authServiceClient) Login(ctx context.Context, req *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {\n\treturn &LoginResponse{Token: \"dummy\"}, nil\n}\n\nfunc testAuthClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(), grpc.WithTimeout(10*time.Second))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\tclient := NewAuthServiceClient(conn)\n\tfor i := 0; i < testCount; i++ {\n\t\tuuid := generateUUID()\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\"request-id\", uuid))\n\t\treq := &LoginRequest{Username: account, Password: password}\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"Auth token %d: %s\\n\", i+1, resp.Token)\n\t}\n\treturn nil\n}\n\nfunc generateUUID() string {\n\tvar u [16]byte\n\tif _, err := rand.Read(u[:]); err != nil {\n\t\treturn \"uuid-error\"\n\t}\n\tu[6] = (u[6]&0x0f) | 0x40\n\tu[8] = (u[8]&0x3f) | 0x80\n\treturn fmt.Sprintf(\"%x-%x-%x-%x-%x\", u[0:4], u[4:6], u[6:8], u[8:10], u[10:])}"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, publishes messages, and handles connection cleanup.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client for the PubsubService, publishes two predefined messages, and ensures proper connection closure. The function handles potential connection errors and publishing failures.\n\nInput: None (The target server address is hardcoded as \"localhost:1234\" and messages are predefined)\n\nOutput: None (The function performs side effects by publishing messages to the gRPC server and may terminate the program on errors)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"ch4.4-3/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"path/to/pubsub\"\n)\n\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tconn, err := grpc.DialContext(ctx, \"localhost:1234\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to server: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewPubsubServiceClient(conn)\n\tif _, err := client.Publish(ctx, &pb.PublishRequest{Message: \"Message 1\"}); err != nil {\n\t\tlog.Fatalf(\"Failed to publish message 1: %v\", err)\n\t}\n\tif _, err := client.Publish(ctx, &pb.PublishRequest{Message: \"Message 2\"}); err != nil {\n\t\tlog.Fatalf(\"Failed to publish message 2: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and handle the responses.\n\nFunction Description: The function tests a gRPC client implementation by connecting to a user service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper connection handling, metadata usage, and error handling in gRPC communications.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None (prints tokens to stdout)\n- Returns error if connection or RPC fails\n\nNote: The function includes proper connection cleanup using defer and demonstrates metadata handling for request tracing.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/utils\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/user_agent/pb\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/google/uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nfunc TestGRPCClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserServiceClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\trequestID := uuid.NewString()\n\t\tmd := metadata.Pairs(\"request-id\", requestID)\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\n\t\tresp, err := client.Login(ctx, &LoginRequest{\n\t\t\tAccount:  account,\n\t\t\tPassword: password,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(resp.Token)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a function that tests a gRPC client connection to a user authentication service, sends multiple login requests, and prints the received authentication tokens.\n\nFunction Description: The function establishes an insecure gRPC connection to a specified server address, creates a user client, and sends 20 consecutive login requests with metadata containing a UUID. Each successful response's token is printed, while errors cause immediate termination.\n\nInput: None (The service address is hardcoded as \"127.0.0.1:8881\" and login credentials are fixed as account \"hwholiday\" and password \"123456\")\n\nOutput: None (The function prints tokens to stdout and may return early on error through testing.T's Error method)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/google/uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tpb \"github.com/example/auth/proto\"\n)\n\nfunc TestLogin(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8881\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Error(\"Failed to connect:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewUserServiceClient(conn)\n\n\tfor i := 0; i < 20; i++ {\n\t\trequestID := uuid.New().String()\n\t\tmd := metadata.Pairs(\"request-id\", requestID)\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\n\t\treq := &pb.LoginRequest{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t}\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tt.Error(\"Login failed:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Printf(\"Token %d: %s\\n\", i+1, resp.GetToken())\n\t}\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Write a Go function that tests the version retrieval functionality of a gRPC service using the Stripe CLI client. The function should establish a connection to the gRPC server, call the Version method, and verify the response matches the expected version.\n\nFunction Description: The function `TestVersionReturnsCLIVersion` is a test function that verifies the version information returned by a gRPC service. It establishes an authenticated connection to a gRPC server, calls the Version RPC method, and checks that the returned version matches the expected value (\"master\"). The connection is properly closed after the test completes.\n\nInput: \n- `t *testing.T`: The testing context provided by Go's testing framework for reporting test failures and logging.\n- Implicit context from `withAuth(context.Background())`: An authenticated context for the gRPC call.\n\nOutput: \n- The function does not return any value but will fail the test if any of the following occur:\n  - The gRPC connection cannot be established\n  - The Version RPC call fails\n  - The returned version does not match the expected value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Version(ctx, &rpc.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version failed: %v\", err)\n\t}\n\n\texpected := rpc.VersionResponse{\n\t\tVersion: \"master\",\n\t}\n\n\tassert.Equal(t, expected.Version, resp.Version)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"github.com/stripe/stripe-cli/v2/rpc/version\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\tconn, err := grpc.DialContext(ctx, \"unix:///var/run/stripe.sock\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewVersionClient(conn)\n\tresp, err := client.Version(ctx, &pb.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version call failed: %v\", err)\n\t}\n\n\texpected := \"master\"\n\tif resp.GetVersion() != expected {\n\t\tt.Errorf(\"Expected version %q, got %q\", expected, resp.GetVersion())\n\t}\n}"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: The task involves creating a gRPC client in Go that connects to a CloudSlack service, establishes a bidirectional stream, and handles incoming events while managing connection lifecycle and errors.\n\nFunction Description: The `start` function initializes a gRPC connection to a CloudSlack server, establishes a bidirectional stream for communication, sends a connection request, and continuously listens for incoming events. It handles connection errors, server closures, and context cancellations appropriately.\n\nInput: \n- `ctx context.Context`: The context for managing the lifecycle of the gRPC connection and handling cancellations.\n- The function also relies on the struct's fields (`log`, `cfg`, `client`, `commGroupMetadata`, `clusterName`, and `botID`) for configuration and logging.\n\nOutput: \n- `error`: Returns an error if any step in the connection or communication process fails, including gRPC connection errors, credential errors, or stream errors. Returns nil if the context is canceled gracefully.\n\nNote: The function uses deferred calls to ensure proper cleanup of resources (closing the gRPC connection and stream) and includes detailed error handling for various gRPC-specific scenarios.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"github.com/kubeshop/botkube/pkg/api/cloudslack\"\n\t\"github.com/kubeshop/botkube/pkg/grpcx\"\n\t\"github.com/kubeshop/botkube/pkg/config\"\n\t\"github.com/kubeshop/botkube/pkg/api/cloudplatform\"\n\t\"github.com/kubeshop/botkube/internal/config/remote\"\n)\n\ntype CloudSlack struct {\n\tlog               logrus.FieldLogger\n\tcfg               config.CloudSlack\n\tclient            *slack.Client\n\tcommGroupMetadata CommGroupMetadata\n\tclusterName       string\n}\n\nfunc (b *CloudSlack) start(ctx context.Context) error {\n\tremoteConfig, ok := remote.GetConfig()\n\tif !ok {\n\t\treturn fmt.Errorf(\"while getting remote config for %s\", config.CloudSlackCommPlatformIntegration)\n\t}\n\n\tcreds, err := grpcx.ClientTransportCredentials(b.log, b.cfg.Server)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC credentials: %w\", err)\n\t}\n\n\topts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(creds),\n\t\tgrpc.WithStreamInterceptor(cloudplatform.AddStreamingClientCredentials(remoteConfig)),\n\t\tgrpc.WithUnaryInterceptor(cloudplatform.AddUnaryClientCredentials(remoteConfig)),\n\t}\n\n\tconn, err := grpc.Dial(b.cfg.Server.URL, opts...)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC connection: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\treq := &pb.ConnectRequest{\n\t\tInstanceId: remoteConfig.Identifier,\n\t\tBotId:      b.botID,\n\t}\n\tc, err := pb.NewCloudSlackClient(conn).Connect(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while initializing gRPC cloud client: %w\", err)\n\t}\n\tdefer func(c pb.CloudSlack_ConnectClient) {\n\t\terr := c.CloseSend()\n\t\tif err != nil {\n\t\t\tb.log.Errorf(\"while closing connection: %s\", err.Error())\n\t\t}\n\t}(c)\n\n\terr = c.Send(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while sending gRPC connection request. %w\", err)\n\t}\n\n\tfor {\n\t\tdata, err := c.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tb.log.Warn(\"gRPC connection was closed by server\")\n\t\t\t\treturn errors.New(\"gRPC connection closed\")\n\t\t\t}\n\t\t\terrStatus, ok := status.FromError(err)\n\t\t\tif ok && errStatus.Code() == codes.Canceled && errStatus.Message() == context.Canceled.Error() {\n\t\t\t\tb.log.Debugf(\"Context was cancelled. Skipping returning error...\")\n\t\t\t\treturn fmt.Errorf(\"while resolving error from gRPC response %s\", errStatus.Err())\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"while receiving cloud slack events: %w\", err)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"path/to/cloudslack/proto\"\n)\n\ntype CloudSlackClient struct {\n\tlog               *log.Logger\n\tcfg               *Config\n\tclient            pb.CloudSlackClient\n\tcommGroupMetadata string\n\tclusterName       string\n\tbotID             string\n}\n\nfunc (c *CloudSlackClient) start(ctx context.Context) error {\n\tcreds, err := credentials.NewClientTLSFromFile(\"\", \"\")\n\tif err != nil {\n\t\tc.log.Printf(\"Failed to load TLS credentials: %v\", err)\n\t\treturn err\n\t}\n\n\tconn, err := grpc.DialContext(ctx, c.cfg.Address, grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tc.log.Printf(\"Failed to connect to server: %v\", err)\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewCloudSlackClient(conn)\n\n\tstream, err := client.EstablishStream(ctx)\n\tif err != nil {\n\t\tc.log.Printf(\"Stream creation failed: %v\", err)\n\t\treturn err\n\t}\n\tdefer stream.CloseSend()\n\n\tconnectReq := &pb.ConnectRequest{\n\t\tCommGroupMetadata: c.commGroupMetadata,\n\t\tClusterName:       c.clusterName,\n\t\tBotID:             c.botID,\n\t}\n\tif err := stream.Send(connectReq); err != nil {\n\t\tc.log.Printf(\"Connect request send failed: %v\", err)\n\t\treturn err\n\t}\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif ctx.Err() != nil {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif status.Code(err) == codes.Canceled || err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tc.log.Printf(\"Stream receive error: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\tgo c.handleEvent(msg)\n\t}\n}\n\nfunc (c *CloudSlackClient) handleEvent(msg *pb.Event) {\n\t// Event handling logic\n}"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Implement a gRPC client function in Go that connects to a gRPC server, performs unary and streaming RPCs, and handles communication with the server.\n\nFunction Description: The function `doClientWork` establishes a connection to a gRPC server, performs a unary RPC call (`Hello`), and then sets up bidirectional streaming (`Channel`). It sends messages periodically in one goroutine while receiving messages in the main goroutine.\n\nInput: None (The server address is hardcoded as \"localhost:1234\")\n\nOutput: None (The function prints received messages to stdout and logs errors to stderr)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(reply.GetValue())\n\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tif err := stream.Send(&String{Value: \"hi\"}); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}()\n\n\tfor {\n\t\tlog.Println(222)\n\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/package/path\"\n)\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\thelloResp, err := client.Hello(ctx, &pb.HelloRequest{})\n\tif err != nil {\n\t\tlog.Printf(\"Hello failed: %v\", err)\n\t} else {\n\t\tfmt.Println(\"Hello response:\", helloResp.Message)\n\t}\n\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Printf(\"Failed to create stream: %v\", err)\n\t\treturn\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tticker := time.NewTicker(5 * time.Second)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tmsg := &pb.StreamMessage{Content: \"Client message\"}\n\t\t\t\tif err := stream.Send(msg); err != nil {\n\t\t\t\t\tlog.Printf(\"Send error: %v\", err)\n\t\t\t\t\tticker.Stop()\n\t\t\t\t\tstream.CloseSend()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tlog.Println(\"Stream closed by server\")\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Recv error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\"Server says: %s\\n\", msg.Content)\n\t}\n\n\twg.Wait()\n}"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a function that demonstrates how to establish a gRPC client connection, make a login request to a user service, and handle the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client for the User service, sends a login request with account credentials, and returns the authentication token. It includes error handling and connection cleanup.\n\nInput: \n- serviceAddress (string): The address of the gRPC server in \"host:port\" format\n- account (string): The user's account name for login\n- password (string): The user's password for login\n\nOutput:\n- token (string): The authentication token returned by the server upon successful login\n- error: Any error that occurs during the connection or RPC call\n\nNote: The function assumes the existence of generated gRPC client code from a protobuf definition that includes a User service with RpcUserLogin method.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v5/v5_user/pb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(v5_service.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\tAccount:  \"hw\",\n\t\tPassword: \"123\",\n\t})\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tt.Log(res.Token)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\tuserpb \"yourproject/proto/user\"\n)\n\nfunc login(serviceAddress, account, password string) (string, error) {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := userpb.NewUserServiceClient(conn)\n\treq := &userpb.LoginRequest{\n\t\tAccount:  account,\n\t\tPassword: password,\n\t}\n\n\tresp, err := client.RpcUserLogin(context.Background(), req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn resp.Token, nil\n}"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a function to test gRPC client functionality for user login using Go's gRPC package. The function should establish a connection to a gRPC server, send multiple login requests with metadata, and handle responses.\n\nFunction Description: The function tests the gRPC client's ability to communicate with a user service. It establishes an insecure connection to the specified server address, creates a client instance, and sends 20 consecutive login requests with generated UUID metadata. Each request uses the same account credentials and prints the received authentication token.\n\nInput: None (The function is a test function with hardcoded values)\n\nOutput: None (The function prints tokens to stdout and may return errors through the testing framework)\n\nNote: The function uses package-level variables and imports from external packages as shown in the reference code. The connection is automatically closed when the function completes.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/utils\"\n\tuuid \"github.com/satori/go.uuid\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nfunc testLogin() {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserServiceClient(conn)\n\n\tfor i := 0; i < 20; i++ {\n\t\tuuidStr := uuid.New().String()\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\"uuid\", uuidStr))\n\n\t\treq := &LoginRequest{\n\t\t\tUsername: \"testuser\",\n\t\t\tPassword: \"testpass\",\n\t\t}\n\n\t\tres, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Request %d failed: %v\", i+1, err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Authentication token: %s\\n\", res.Token)\n\t\ttime.Sleep(50 * time.Millisecond)\n\t}\n}\n\ntype LoginRequest struct {\n\tUsername string\n\tPassword string\n}\n\ntype LoginResponse struct {\n\tToken string\n}\n\ntype UserServiceClient interface {\n\tLogin(ctx context.Context, req *LoginRequest) (*LoginResponse, error)\n}\n\nfunc NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {\n\treturn &userServiceClient{cc}\n}\n\ntype userServiceClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc (c *userServiceClient) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {\n\t// This is a placeholder for the actual gRPC implementation\n\treturn &LoginResponse{Token: \"mock_token\"}, nil\n}"
  },
  {
    "Task_id": 238,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a login request, and retrieves an authentication token.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a gRPC client for the User service, sends a login request with account credentials, and returns the authentication token received from the server. The function includes error handling and connection cleanup.\n\nInput:\n- serviceAddress (string): The address of the gRPC server in format \"host:port\"\n- account (string): The user account name for login\n- password (string): The user password for login\n\nOutput:\n- token (string): The authentication token returned by the server\n- error: Any error that occurs during the connection or RPC call\n\nNote: The function generates a unique request UUID for tracking purposes and uses insecure connection (for testing purposes only). In production, you should use proper TLS credentials.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v6/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v6/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\tAccount:  \"hw\",\n\t\tPassword: \"123\",\n\t})\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tt.Log(res.Token)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\"context\";\"github.com/google/uuid\";\"google.golang.org/grpc\";\"google.golang.org/grpc/credentials/insecure\")\n\nfunc Login(serviceAddress, account, password string) (string, error) {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil { return \"\", err }\n\tdefer conn.Close()\n\n\tclient := NewUserServiceClient(conn)\n\treq := &LoginRequest{\n\t\tAccountId: account,\n\t\tPassword: password,\n\t\tRequestId: uuid.NewString(),\n\t}\n\tres, err := client.Login(context.Background(), req)\n\tif err != nil { return \"\", err }\n\treturn res.Token, nil\n}"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a metrics server, retrieves metrics, and prints them. The function should handle connection setup and teardown, and provide options for controlling output format.\n\nFunction Description: The function connects to a gRPC metrics server using the provided address, creates a metrics service client, and prints the retrieved metrics. It supports a flag to determine whether to print all metrics or just the total. The connection is automatically closed when the function completes.\n\nInput:\n- metricsServerAddress (string): The address of the gRPC metrics server to connect to\n- totalOnly (bool): Flag indicating whether to print only the total metrics or all metrics\n\nOutput: None (prints metrics to stdout directly)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/interop/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tlogger.Fatal(\"-metrics_server_address is unset\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"your/module/path/metricspb\"\n)\n\nfunc PrintMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.Dial(metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewMetricsServiceClient(conn)\n\tresp, err := client.GetMetrics(context.Background(), &pb.GetMetricsRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to retrieve metrics: %v\", err)\n\t}\n\n\tif totalOnly {\n\t\tfmt.Printf(\"Total: %d\\n\", resp.GetTotal())\n\t} else {\n\t\tfmt.Println(\"All metrics:\")\n\t\tfor key, value := range resp.GetMetrics() {\n\t\t\tfmt.Printf(\"%s: %d\\n\", key, value)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends multiple requests, and processes the responses using the GoFrame framework.\n\nFunction Description: The function connects to a gRPC server using service discovery, creates a client stub, and makes repeated calls to a SayHello RPC method. It handles connection errors and response processing, with built-in logging and graceful connection closure.\n\nInput: None (uses package-level constants and context)\n\nOutput: None (logs results to console via GoFrame's logging system)\n\nNote: The function includes an internal loop that makes 10 RPC calls with a 1-second delay between calls. Connection is automatically closed when function completes.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/gsvc\"\n\t\"github.com/gogf/gf/v2/os/gctx\"\n\n\t\"github.com/gogf/gf/contrib/rpc/grpcx/v2\"\n\n\tpb \"github.com/gogf/gf/example/rpc/grpcx/rawgrpc/helloworld\"\n)\nfunc main() {\n\tvar (\n\t\tctx     = gctx.GetInitCtx()\n\t\tservice = gsvc.NewServiceWithName(`hello`)\n\t)\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(`%s://%s`, gsvc.Schema, service.GetKey()),\n\t\tgrpcx.Balancer.WithRandom(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tg.Log().Fatalf(ctx, \"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tfor i := 0; i < 10; i++ {\n\t\tres, err := client.SayHello(ctx, &pb.HelloRequest{Name: `GoFrame`})\n\t\tif err != nil {\n\t\t\tg.Log().Fatalf(ctx, \"could not greet: %+v\", err)\n\t\t}\n\t\tg.Log().Printf(ctx, \"Greeting: %s\", res.Message)\n\t\ttime.Sleep(time.Second)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/gogf/gf/v2/os/glog\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"your_module/proto\"\n)\n\nconst (\n\taddress = \"localhost:50051\"\n)\n\nfunc SayHelloClient() {\n\tconn, err := grpc.Dial(address, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n\tif err != nil {\n\t\tglog.Error(context.TODO(), \"Failed to connect to gRPC server: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\n\tfor i := 0; i < 10; i++ {\n\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second*5)\n\t\treq := &pb.HelloRequest{Name: \"User\"}\n\t\tresponse, err := client.SayHello(ctx, req)\n\t\tif err != nil {\n\t\t\tglog.Error(ctx, \"RPC call failed: %v\", err)\n\t\t} else {\n\t\t\tglog.Info(ctx, \"Received response: %s\", response.Message)\n\t\t}\n\t\tcancel()\n\t\ttime.Sleep(time.Second)\n\t}\n}"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles plugin registration and message streaming between clients and middleware components.\n\nStruct Description: The pluginServer struct implements a gRPC service for plugin registration and message handling, managing concurrent access with synchronization and supporting both middleware and non-middleware listeners.\n\nFields:\n- UnimplementedPluginServer: pb.UnimplementedPluginServer - Embedded type for forward compatibility\n- lock: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n- RegisterListener: (stream pb.Plugin_RegisterListenerServer) -> error - Handles client registration and message streaming\n  - Input: gRPC bidirectional stream of pb.Plugin_RegisterListenerServer\n  - Output: error indicating operation status\n  - Description: Registers listeners, processes incoming messages, matches against regex patterns, handles middleware responses, and manages one-time listeners\n\n- rpcInit: () -> () - Initializes and starts the gRPC server\n  - Input: None (uses package-level Integrations.RPC configuration)\n  - Output: None (runs as goroutine)\n  - Description: Creates TCP listener, configures gRPC server with interceptors and keepalive, registers service, and starts serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock sync.Mutex\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\ts.lock.Lock()\n\tinitialData, err := stream.Recv()\n\tif err == io.EOF {\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlistener := initialData.GetListener()\n\tif listener == nil {\n\t\treturn status.Error(codes.InvalidArgument, \"First message must be a listener\")\n\t}\n\n\tisMiddleware := listener.Middleware != nil && *listener.Middleware\n\tisOnce := listener.Once != nil && *listener.Once\n\n\tvar regex *regexp.Regexp\n\tif listener.Regex != nil {\n\t\tregex, err = regexp.Compile(*listener.Regex)\n\t\tif err != nil {\n\t\t\treturn status.Error(codes.InvalidArgument, \"Invalid regex\")\n\t\t}\n\t}\n\n\tvar listenerList *[]chan pb.MiddlewareChannelMessage\n\n\tif isMiddleware {\n\t\tlistenerList = &ListenersMiddleware\n\t} else {\n\t\tlistenerList = &ListenersNonMiddleware\n\t}\n\n\tc := make(chan pb.MiddlewareChannelMessage)\n\t*listenerList = append(*listenerList, c)\n\n\ts.lock.Unlock()\n\tdefer func() {\n\t\tfor i := range *listenerList {\n\t\t\tif (*listenerList)[i] == c {\n\t\t\t\t*listenerList = append((*listenerList)[:i], (*listenerList)[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tmessage := <-c\n\n\t\tsendNilResponse := func() {\n\t\t\tc <- &pb.ListenerClientData_Response{\n\t\t\t\tResponse: &pb.MiddlewareResponse{\n\t\t\t\t\tMsg: nil,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\tif listener.Regex != nil && !regex.MatchString(message.(*pb.Event).Msg) {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\terr = stream.Send(message.(*pb.Event))\n\t\tif err != nil {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif isMiddleware {\n\t\t\tmwRes, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tswitch data := mwRes.Data.(type) {\n\t\t\tcase *pb.ListenerClientData_Listener:\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn status.Error(codes.InvalidArgument, \"Middleware returned a listener instead of a response\")\n\t\t\tcase *pb.ListenerClientData_Response:\n\t\t\t\tc <- data\n\t\t\t}\n\t\t}\n\n\t\tif isOnce {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc rpcInit() {\n\tif Integrations.RPC == nil {\n\t\treturn\n\t}\n\tgo func() {\n\t\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", Integrations.RPC.Port))\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tgrpcServer := grpc.NewServer(\n\t\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\t\tif err := authorize(ctx); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn handler(ctx, req)\n\t\t\t}),\n\t\t\tgrpc.StreamInterceptor(func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\t\tif err := authorize(stream.Context()); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\treturn handler(srv, stream)\n\t\t\t}),\n\t\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{Time: time.Second * 10}),\n\t\t)\n\t\tpb.RegisterPluginServer(grpcServer, &pluginServer{})\n\t\tgrpcServer.Serve(lis)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\tpb \"some/package\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock sync.Mutex\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.lock.Lock()\n\t\t// Process message: regex matching, middleware handling, one-time listener management\n\t\t// Example response:\n\t\tstream.Send(&pb.MessageResponse{Handled: true})\n\t\ts.lock.Unlock()\n\t}\n}\n\nfunc rpcInit() {\n\tlis, err := net.Listen(\"tcp\", Integrations.RPC.Addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\topts := []grpc.ServerOption{\n\t\tgrpc.UnaryInterceptor(auth.Interceptor),\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tMaxConnectionIdle: 15 * 60, // 15 minutes\n\t\t}),\n\t}\n\tgrpcServer := grpc.NewServer(opts...)\n\tpb.RegisterPluginServer(grpcServer, &pluginServer{})\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework. The server should be able to gracefully shut down when the context is canceled.\n\nFunction Description: The MainExt function initializes and starts a gRPC server. It sets up a network listener, creates a gRPC server instance, registers the service implementation, and starts the server in a goroutine. The function waits for the context to be canceled before gracefully shutting down the server.\n\nInput:\n- ctx [context.Context]: The context used to control the lifecycle of the gRPC server. Canceling this context will trigger a graceful shutdown.\n- cfg [Config]: A configuration object containing the port number on which the server should listen.\n\nOutput: None (The function runs indefinitely until the context is canceled or an error occurs.)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\ttriggerpb \"github.com/vanus-labs/vanus/api/trigger\"\n)\n\ntype TriggerServer struct {\n\tcfg Config\n}\n\nfunc NewTriggerServer(cfg Config) *TriggerServer {\n\treturn &TriggerServer{\n\t\tcfg: cfg,\n\t}\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlisten, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\tlog.Error().Msg(\"failed to listen\")\n\t\tos.Exit(-1)\n\t}\n\n\tsrv := NewTriggerServer(cfg)\n\n\tvar opts []grpc.ServerOption\n\tgrpcServer := grpc.NewServer(opts...)\n\ttriggerpb.RegisterTriggerWorkerServer(grpcServer, srv)\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tlog.Info(ctx).Msg(\"the grpc server ready to work\")\n\t\terr = grpcServer.Serve(listen)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx).Err(err).Msg(\"grpc server occurred an error\")\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\tgrpcServer.GracefulStop()\n\twg.Wait()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\treturn\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\t// Register the service implementation here.\n\t// Example: pb.RegisterYourServiceServer(grpcServer, &yourServiceInstance{})\n\n\tgo grpcServer.Serve(lis)\n\n\t<-ctx.Done()\n\n\tgrpcServer.GracefulStop()\n}\n\ntype Config struct {\n\tPort int\n}"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, creates a new gRPC server instance, registers a service implementation, and starts serving incoming requests.\n\nInput: \n- port: string - The network port on which the server should listen (e.g., \":50051\")\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/helloworld/helloworld\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\ts.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\nvar (\n\tport = flag.String(\"port\", \":50051\", \"port to listen on\")\n)\n\ntype server struct{}\n\nfunc (s *server) ExampleMethod(ctx context.Context, in *ExampleRequest) (*ExampleResponse, error) {\n\treturn &ExampleResponse{}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", *port)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tRegisterExampleServiceServer(s, &server{})\n\tlog.Printf(\"Server listening on %s\", *port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including receiving metrics and processing them through a handler function.\n\nStruct Description: The Server struct represents a gRPC server that listens for incoming metric data and processes it using a provided handler function. It manages server lifecycle and handles gRPC communication.\n\nFields:\n- Server: *grpc.Server - The underlying gRPC server instance\n- lis: net.Listener - The network listener for the server\n- handler: func([]*metricpb.Metric) - The function that processes received metrics\n- startMtx: sync.Mutex - Mutex to ensure thread-safe server startup\n\nMethods:\n- NewServer: (handler func([]*metricpb.Metric)) -> *Server - Creates a new Server instance with the given metric handler and initializes the gRPC server\n- Start: (t testing.TB) -> () - Starts the gRPC server on a random available port and begins listening for requests\n- SendMetrics: (ctx context.Context, mlist *forwardrpc.MetricList) -> (*empty.Empty, error) - Handles unary RPC calls for metric submission\n- SendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles streaming RPC calls for metric submission",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/samplers/metricpb\"\n)\n\ntype Server struct {\n\t*grpc.Server\n\tlis      net.Listener\n\thandler  func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\tres := &Server{\n\t\tServer:  grpc.NewServer(),\n\t\thandler: handler,\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.Server, res)\n\treturn res\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tvar err error\n\ts.lis, err = net.Listen(\"tcp\", \"127.0.0.1:\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to create a TCP connection for a test GRPC \"+\n\t\t\t\"server: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := s.Serve(s.lis); err != nil && err != grpc.ErrServerStopped {\n\t\t\tt.Logf(\"failed to stop the test forwarding gRPC server: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tmetrics := []*metricpb.Metric{}\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetrics = append(metrics, metric)\n\t}\n\t_, err := s.SendMetrics(context.Background(), &forwardrpc.MetricList{\n\t\tMetrics: metrics,\n\t})\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\tforwardrpc \"your/project/proto/forwardrpc\"\n\tmetricpb \"your/project/proto/metricpb\"\n)\n\ntype Server struct {\n\tServer  *grpc.Server\n\tlis     net.Listener\n\thandler func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\ts := &Server{\n\t\tServer:  grpc.NewServer(),\n\t\thandler: handler,\n\t}\n\tforwardrpc.RegisterForwardServer(s.Server, s)\n\treturn s\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tif s.lis != nil {\n\t\treturn\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts.lis = lis\n\n\tgo s.Server.Serve(s.lis)\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(stream forwardrpc.Forward_SendMetricsV2Server) error {\n\tfor {\n\t\tmlist, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\ts.handler(mlist.Metrics)\n\t}\n}"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both physical data source operations and execution of data processing tasks, using Unix domain sockets for inter-process communication.\n\nStruct Description: The implementation consists of two main structs: physicalServer handles the materialization of data sources, while executionServer manages the execution of data processing tasks.\n\nFields:\n\nphysicalServer:\n- database: physical.Database - The underlying database implementation\n- socketDir: string - Directory where Unix domain sockets will be created\n- wg: *sync.WaitGroup - WaitGroup for managing server goroutines\n\nexecutionServer:\n- node: execution.Node - The execution node to process data\n\nMethods:\n\nphysicalServer:\n- Materialize(context.Context, *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) - Materializes a data source and starts a gRPC server for execution\n\nexecutionServer:\n- Run(*plugins.RunRequest, plugins.ExecutionDatasource_RunServer) error - Executes the data processing task and streams results back to the client",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cube2222/octosql/execution\"\n\t\"github.com/cube2222/octosql/physical\"\n\t\"github.com/cube2222/octosql/plugins/internal/plugins\"\n)\n\ntype physicalServer struct {\n\tplugins.UnimplementedDatasourceServer\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, request *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\timpl, _, err := s.database.GetTable(ctx, request.TableContext.TableName, request.TableContext.Options)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't get table: %w\", err)\n\t}\n\n\tnode, err := impl.Materialize(\n\t\tctx,\n\t\tphysical.Environment{\n\t\t\tVariableContext: request.VariableContext.ToNativePhysicalVariableContext(),\n\t\t},\n\t\trequest.Schema.ToNativeSchema(),\n\t\tpushedDownPredicates,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't materialize datasource: %w\", err)\n\t}\n\n\tsocketName := ulid.MustNew(ulid.Now(), rand.Reader).String() + \".sock\"\n\tsocketPath := filepath.Join(s.socketDir, socketName)\n\tlog.Printf(\"Listening execution on %s\", socketPath)\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\texecServer := &executionServer{\n\t\tnode: node,\n\t}\n\ts.wg.Add(1)\n\n\tgrpcServer := grpc.NewServer()\n\tplugins.RegisterExecutionDatasourceServer(grpcServer, execServer)\n\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\ntype executionServer struct {\n\tplugins.UnimplementedExecutionDatasourceServer\n\tnode execution.Node\n}\n\nfunc (e *executionServer) Run(request *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tif err := e.node.Run(\n\t\texecution.ExecutionContext{\n\t\t\tContext:         stream.Context(),\n\t\t\tVariableContext: request.VariableContext.ToNativeExecutionVariableContext(),\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, record execution.Record) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tRecord: plugins.NativeRecordToProto(record),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send record to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, msg execution.MetadataMessage) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tMetadata: plugins.NativeMetadataMessageToProto(msg),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send metadata message to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t); err != nil {\n\t\treturn fmt.Errorf(\"couldn't run node: %w\", err)\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"plugins\"\n\t\"physical\"\n\t\"execution\"\n)\n\ntype physicalServer struct {\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, req *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\tdataSource, err := s.database.CreateDataSource(req.Config)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsocketPath := filepath.Join(s.socketDir, dataSource.ID+\".sock\")\n\tos.Remove(socketPath)\n\n\tlistener, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\texecServer := &executionServer{\n\t\tnode: execution.NewNode(dataSource),\n\t}\n\tplugins.RegisterExecutionDatasourceServer(grpcServer, execServer)\n\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := grpcServer.Serve(listener); err != nil {\n\t\t\t// Handle error silently as per problem statement\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\ntype executionServer struct {\n\tnode execution.Node\n}\n\nfunc (e *executionServer) Run(req *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tresults, err := e.node.Execute(req.Task)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, result := range results {\n\t\tif err := stream.Send(&result); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a gRPC server for remote actor communication in a distributed actor system using Proto.Actor and Go's gRPC framework.\n\nStruct Description: The Remote struct manages the gRPC server and associated components for remote actor communication in a Proto.Actor system.\n\nFields:\n\nactorSystem: *actor.ActorSystem - Reference to the actor system this remote belongs to\ns: *grpc.Server - The gRPC server instance\nedpReader: *endpointReader - Handles incoming gRPC connections\nedpManager: *endpointManager - Manages active endpoints\nconfig: *Config - Configuration for the remote server\nkinds: map[string]*actor.Props - Map of actor kinds to their properties\nactivatorPid: *actor.PID - Process ID for the activator actor\nblocklist: *BlockList - List of blocked endpoints\n\nMethods:\n\nNewRemote: (actorSystem *actor.ActorSystem, config *Config) -> *Remote - Constructor that initializes a new Remote instance with given actor system and configuration\nStart: () -> () - Starts the gRPC server and initializes all remote communication components\nShutdown: (graceful bool) -> () - Stops the gRPC server, either gracefully or forcefully",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log/slog\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/asynkron/protoactor-go/extensions\"\n\t\"github.com/asynkron/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n)\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\tr := &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n\tfor k, v := range config.Kinds {\n\t\tr.kinds[k] = v\n\t}\n\n\tactorSystem.Extensions.Register(r)\n\n\treturn r\n}\n\nfunc (r *Remote) Start() {\n\tgrpclog.SetLoggerV2(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))\n\tlis, err := net.Listen(\"tcp\", r.config.Address())\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to listen: %v\", err))\n\t}\n\n\tvar address string\n\tif r.config.AdvertisedHost != \"\" {\n\t\taddress = r.config.AdvertisedHost\n\t} else {\n\t\taddress = lis.Addr().String()\n\t}\n\n\tr.actorSystem.ProcessRegistry.RegisterAddressResolver(r.remoteHandler)\n\tr.actorSystem.ProcessRegistry.Address = address\n\tr.Logger().Info(\"Starting remote with address\", slog.String(\"address\", address))\n\n\tr.edpManager = newEndpointManager(r)\n\tr.edpManager.start()\n\n\tr.s = grpc.NewServer(r.config.ServerOptions...)\n\tr.edpReader = newEndpointReader(r)\n\tRegisterRemotingServer(r.s, r.edpReader)\n\tr.Logger().Info(\"Starting Proto.Actor server\", slog.String(\"address\", address))\n\tgo r.s.Serve(lis)\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.edpReader.suspend(true)\n\t\tr.edpManager.stop()\n\n\t\tc := make(chan bool, 1)\n\t\tgo func() {\n\t\t\tr.s.GracefulStop()\n\t\t\tc <- true\n\t\t}()\n\n\t\tselect {\n\t\tcase <-c:\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\")\n\t\tcase <-time.After(time.Second * 10):\n\t\t\tr.s.Stop()\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\", slog.String(\"err\", \"timeout\"))\n\t\t}\n\t} else {\n\t\tr.s.Stop()\n\t\tr.Logger().Info(\"Killed Proto.Actor server\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package remote\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/AsynkronIT/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Config struct {\n\tPort int\n}\n\ntype BlockList struct{}\n\nfunc NewBlockList() *BlockList {\n\treturn &BlockList{}\n}\n\ntype endpointReader struct{}\n\ntype endpointManager struct{}\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\treturn &Remote{\n\t\tactorSystem:  actorSystem,\n\t\tconfig:       config,\n\t\tkinds:        make(map[string]*actor.Props),\n\t\tblocklist:    NewBlockList(),\n\t\tedpReader:    &endpointReader{},\n\t\tedpManager:   &endpointManager{},\n\t\tactivatorPid: nil,\n\t}\n}\n\nfunc (r *Remote) Start() {\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", r.config.Port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tr.s = grpc.NewServer()\n\tRegisterRemoteServiceServer(r.s, r.edpReader)\n\tgo func() {\n\t\tif err := r.s.Serve(listener); err != nil {\n\t\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.s.GracefulStop()\n\t} else {\n\t\tr.s.Stop()\n\t}\n}"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Create a gRPC server in Go that collects and processes metrics data using OpenTelemetry protocol, with capabilities for handling incoming requests, storing metrics, and managing server lifecycle.\n\nStruct Description: GRPCCollector is a gRPC server implementation that handles metrics collection following the OpenTelemetry protocol. It manages incoming requests, stores metrics data, tracks headers, and provides server control functionality.\n\nFields:\n\nField1: collpb.UnimplementedMetricsServiceServer - Embedded type to satisfy gRPC interface requirements\nField2: headersMu sync.Mutex - Mutex for thread-safe access to headers\nField3: headers metadata.MD - Stores incoming request headers\nField4: storage *Storage - Stores collected metrics data\nField5: resultCh <-chan ExportResult - Channel for receiving export results\nField6: listener net.Listener - Network listener for the server\nField7: srv *grpc.Server - gRPC server instance\n\nMethods:\n\nMethod1: NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) - Creates and starts a new gRPC collector instance\nMethod2: Shutdown() - Stops the gRPC server gracefully\nMethod3: Addr() net.Addr - Returns the network address the server is listening on\nMethod4: Collect() *Storage - Returns the storage containing collected metrics\nMethod5: Headers() map[string][]string - Returns collected headers in a thread-safe manner\nMethod6: Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) - Handles incoming metrics export requests and processes them",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/proto/otlp/collector/metrics/v1\"\n)\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\n\tresultCh <-chan ExportResult\n\tlistener net.Listener\n\tsrv      *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tif endpoint == \"\" {\n\t\tendpoint = \"localhost:0\"\n\t}\n\n\tc := &GRPCCollector{\n\t\tstorage:  NewStorage(),\n\t\tresultCh: resultCh,\n\t}\n\n\tvar err error\n\tc.listener, err = net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.srv = grpc.NewServer()\n\tcollpb.RegisterMetricsServiceServer(c.srv, c)\n\tgo func() { _ = c.srv.Serve(c.listener) }()\n\n\treturn c, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() { c.srv.Stop() }\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\treturn metadata.Join(c.headers)\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tc.storage.Add(req)\n\n\tif h, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tc.headersMu.Lock()\n\t\tc.headers = metadata.Join(c.headers, h)\n\t\tc.headersMu.Unlock()\n\t}\n\n\tif c.resultCh != nil {\n\t\tr := <-c.resultCh\n\t\tif r.Response == nil {\n\t\t\treturn &collpb.ExportMetricsServiceResponse{}, r.Err\n\t\t}\n\t\treturn r.Response, r.Err\n\t}\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\tcollpb \"github.com/open-telemetry/opentelemetry-proto/gen/go/collector/metrics/v1\"\n)\n\ntype ExportResult struct {\n\t// Placeholder for actual result fields\n}\n\ntype Storage struct {\n\t// Placeholder for actual storage implementation\n}\n\nfunc (s *Storage) AddMetrics(req *collpb.ExportMetricsServiceRequest) {\n\t// Implementation to store metrics\n}\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\tresultCh  <-chan ExportResult\n\tlistener  net.Listener\n\tsrv       *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tlistener, err := net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsrv := grpc.NewServer()\n\tstorage := &Storage{}\n\n\tcollector := &GRPCCollector{\n\t\theadersMu: sync.Mutex{},\n\t\theaders:   metadata.MD{},\n\t\tstorage:   storage,\n\t\tresultCh:  resultCh,\n\t\tlistener:  listener,\n\t\tsrv:       srv,\n\t}\n\n\tcollpb.RegisterMetricsServiceServer(srv, collector)\n\n\tgo func() {\n\t\tif err := srv.Serve(listener); err != nil {\n\t\t\t// Handle error (e.g., log)\n\t\t}\n\t}()\n\n\treturn collector, nil\n}\n\nfunc (g *GRPCCollector) Shutdown() {\n\tg.srv.GracefulStop()\n}\n\nfunc (g *GRPCCollector) Addr() net.Addr {\n\treturn g.listener.Addr()\n}\n\nfunc (g *GRPCCollector) Collect() *Storage {\n\treturn g.storage\n}\n\nfunc (g *GRPCCollector) Headers() map[string][]string {\n\tg.headersMu.Lock()\n\tdefer g.headersMu.Unlock()\n\n\theadersCopy := make(map[string][]string, len(g.headers))\n\tfor k, v := range g.headers {\n\t\theadersCopy[k] = append([]string{}, v...)\n\t}\n\treturn headersCopy\n}\n\nfunc (g *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif ok {\n\t\tg.headersMu.Lock()\n\t\tdefer g.headersMu.Unlock()\n\t\tfor k, v := range md {\n\t\t\tg.headers[k] = append(g.headers[k], v...)\n\t\t}\n\t}\n\n\tg.storage.AddMetrics(req)\n\n\tselect {\n\tcase <-g.resultCh:\n\tdefault:\n\t}\n\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls with ORCA (Open Request Cost Aggregation) metrics recording capabilities.\n\nStruct Description: The server struct implements the gRPC service interface (generated from the protobuf definition) and includes ORCA metrics recording functionality.\n\nFields:\n- UnimplementedEchoServer: [pb.UnimplementedEchoServer] - Embedded type to satisfy the gRPC service interface requirements\n\nMethods:\n- UnaryEcho: [Name](ctx context.Context, in *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls, records request costs using ORCA metrics, and returns an echo response\n- main: [Name]() -> None - Sets up the gRPC server, registers the service, configures ORCA metrics reporting, and starts the server\n\nInput Parameters for UnaryEcho:\n- ctx: [context.Context] - Context containing call information and ORCA metrics recorder\n- in: [*pb.EchoRequest] - Incoming request message containing the message to echo\n\nOutput for UnaryEcho:\n- [*pb.EchoResponse] - Response message containing the echoed message\n- [error] - Potential error during processing\n\nNote: The main function doesn't have explicit input/output but performs server setup and execution.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/orca\"\n\t\"google.golang.org/grpc/internal\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tcmr := orca.CallMetricsRecorderFromContext(ctx)\n\tif cmr == nil {\n\t\treturn nil, status.Errorf(codes.Internal, \"unable to retrieve call metrics recorder (missing ORCA ServerOption?)\")\n\t}\n\tcmr.SetRequestCost(\"db_queries\", 10)\n\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(orca.CallMetricsServerOption(nil))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tsmr := orca.NewServerMetricsRecorder()\n\topts := orca.ServiceOptions{\n\t\tMinReportingInterval:  3 * time.Second,\n\t\tServerMetricsProvider: smr,\n\t}\n\tinternal.ORCAAllowAnyMinReportingInterval.(func(so *orca.ServiceOptions))(&opts)\n\tif err := orca.Register(s, opts); err != nil {\n\t\tlog.Fatalf(\"Failed to register ORCA service: %v\", err)\n\t}\n\n\ts.Serve(lis)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/orca\"\n\tpb \"your/package/path\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tif recorder, ok := orca.FromContext(ctx); ok {\n\t\trecorder.Add(orca.MetricValue{\n\t\t\tName:  \"cpu_ms\",\n\t\t\tValue: 100.0,\n\t\t})\n\t}\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer(grpc.StatsHandler(orca.New()))\n\tpb.RegisterEchoServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, registers service implementations, and starts serving on a specified port with optional TLS credentials.\n\nFunction Description: The main function initializes and starts a gRPC server that hosts two services: a custom SpannerExecutorProxy service and a standard health check service. It validates required configuration parameters, sets up the network listener, creates the gRPC server instance, registers services, and begins serving requests.\n\nInput:\n- proxyPort (string): The port number on which the gRPC server should listen\n- spannerPort (string): The port number for Spanner service (validation only)\n- cert (string): Path to certificate file for TLS (validation only)\n- Additional client options are obtained internally through getClientOptionsForSysTests()\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Logs server startup information or errors to stdout\n\nNote: The function doesn't explicitly return values but may terminate the program with log.Fatal or log.Fatalf in case of errors during setup. Successful execution results in a continuously running gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"cloud.google.com/go/spanner/executor/apiv1/executorpb\"\n\t\"cloud.google.com/go/spanner/test/cloudexecutor/executor\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *proxyPort == \"\" {\n\t\tlog.Fatal(\"Proxy port need to be assigned in order to start worker proxy.\")\n\t}\n\tif *spannerPort == \"\" {\n\t\tlog.Fatal(\"Spanner proxyPort need to be assigned in order to start worker proxy.\")\n\t}\n\tif *cert == \"\" {\n\t\tlog.Fatalf(\"Certificate need to be assigned in order to start worker proxy.\")\n\t}\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%s\", *proxyPort))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\tclientOptions := getClientOptionsForSysTests()\n\tcloudProxyServer, err := executor.NewCloudProxyServer(context.Background(), clientOptions)\n\tif err != nil {\n\t\tlog.Fatalf(\"Creating Cloud Proxy Server failed: %v\", err)\n\t}\n\texecutorpb.RegisterSpannerExecutorProxyServer(grpcServer, cloudProxyServer)\n\n\thealthServer := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(grpcServer, healthServer)\n\n\tlog.Printf(\"Server started on proxyPort:%s\\n\", *proxyPort)\n\terr = grpcServer.Serve(lis)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to start server on proxyPort: %s\\n\", *proxyPort)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\thealthv1 \"google.golang.org/grpc/health/grpc_health_v1\"\n\tpb \"path/to/your/proto/package\"\n)\n\ntype healthServer struct{}\n\nfunc (h *healthServer) Check(ctx context.Context, req *healthv1.HealthCheckRequest) (*healthv1.HealthCheckResponse, error) {\n\treturn &healthv1.HealthCheckResponse{Status: healthv1.HealthCheckResponse_SERVING}, nil\n}\n\ntype spannerProxy struct {\n\tpb.UnimplementedSpannerExecutorProxyServiceServer\n}\n\nfunc main() {\n\tproxyPort := flag.String(\"proxyPort\", \"\", \"Port for gRPC server\")\n\tspannerPort := flag.String(\"spannerPort\", \"\", \"Spanner service port\")\n\tcert := flag.String(\"cert\", \"\", \"Path to certificate file\")\n\tflag.Parse()\n\n\tif *proxyPort == \"\" {\n\t\tlog.Fatal(\"proxyPort is required\")\n\t}\n\n\tif *spannerPort == \"\" {\n\t\tlog.Fatal(\"spannerPort is required\")\n\t}\n\n\tif *cert != \"\" {\n\t\tif _, err := os.Stat(*cert); os.IsNotExist(err) {\n\t\t\tlog.Fatalf(\"Certificate file %s does not exist\", *cert)\n\t\t}\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \":\"+*proxyPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif *cert != \"\" {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*cert, *cert)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to generate TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\ts := grpc.NewServer(opts...)\n\n\thealthv1.RegisterHealthServer(s, &healthServer{})\n\tpb.RegisterSpannerExecutorProxyServiceServer(s, &spannerProxy{})\n\n\tlog.Printf(\"Server listening on port %s\", *proxyPort)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both xDS (Discovery Service) and LRS (Load Reporting Service) protocols, with proper request/response channels and connection monitoring capabilities.\n\nStruct Description: The Server struct represents a gRPC server that implements both xDS v3 and LRS v3 services. It manages communication channels for requests/responses and tracks connection state.\n\nFields:\n\nXDSRequestChan: *testutils.Channel - Channel for receiving xDS requests\nXDSResponseChan: chan *Response - Channel for sending xDS responses\nLRSRequestChan: *testutils.Channel - Channel for receiving LRS requests\nLRSResponseChan: chan *Response - Channel for sending LRS responses\nLRSStreamOpenChan: *testutils.Channel - Channel for tracking LRS stream openings\nLRSStreamCloseChan: *testutils.Channel - Channel for tracking LRS stream closings\nNewConnChan: *testutils.Channel - Channel for tracking new connections\nAddress: string - Server's listening address\nxdsServerV3: *xdsServerV3 - xDS v3 server implementation\nlrsServerV3: *lrsServerV3 - LRS v3 server implementation\n\nMethods:\n\nNewServer: (addr string) -> *Server - Creates a new Server instance with initialized channels\nStartServer: (lis net.Listener) -> (*Server, func(), error) - Starts the gRPC server on given listener and returns cleanup function\nStreamAggregatedResources: (s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) -> error - Handles xDS v3 streaming RPC\nStreamLoadStats: (s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) -> error - Handles LRS v3 streaming RPC",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils\"\n\t\"google.golang.org/protobuf/proto\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3lrspb \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n)\n\ntype Server struct {\n\tXDSRequestChan *testutils.Channel\n\tXDSResponseChan chan *Response\n\tLRSRequestChan *testutils.Channel\n\tLRSResponseChan chan *Response\n\tLRSStreamOpenChan *testutils.Channel\n\tLRSStreamCloseChan *testutils.Channel\n\tNewConnChan *testutils.Channel\n\tAddress string\n\t*xdsServerV3\n\t*lrsServerV3\n}\n\ntype wrappedListener struct {\n\tnet.Listener\n\tserver *Server\n}\n\nfunc (wl *wrappedListener) Accept() (net.Conn, error) {\n\tc, err := wl.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\twl.server.NewConnChan.Send(struct{}{})\n\treturn c, err\n}\n\nfunc StartServer(lis net.Listener) (*Server, func(), error) {\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\treturn nil, func() {}, fmt.Errorf(\"net.Listen() failed: %v\", err)\n\t\t}\n\t}\n\n\ts := NewServer(lis.Addr().String())\n\twp := &wrappedListener{\n\t\tListener: lis,\n\t\tserver:   s,\n\t}\n\n\tserver := grpc.NewServer()\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(server, s)\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(server, s)\n\tgo server.Serve(wp)\n\n\treturn s, func() { server.Stop() }, nil\n}\n\nfunc NewServer(addr string) *Server {\n\ts := &Server{\n\t\tXDSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tNewConnChan:        testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tXDSResponseChan:    make(chan *Response, defaultChannelBufferSize),\n\t\tLRSResponseChan:    make(chan *Response, 1),\n\t\tLRSStreamOpenChan:  testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSStreamCloseChan: testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tAddress:            addr,\n\t}\n\ts.xdsServerV3 = &xdsServerV3{reqChan: s.XDSRequestChan, respChan: s.XDSResponseChan}\n\ts.lrsServerV3 = &lrsServerV3{reqChan: s.LRSRequestChan, respChan: s.LRSResponseChan, streamOpenChan: s.LRSStreamOpenChan, streamCloseChan: s.LRSStreamCloseChan}\n\treturn s\n}\n\ntype xdsServerV3 struct {\n\treqChan  *testutils.Channel\n\trespChan chan *Response\n}\n\nfunc (xdsS *xdsServerV3) StreamAggregatedResources(s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\terrCh := make(chan error, 2)\n\tgo func() {\n\t\tfor {\n\t\t\treq, err := s.Recv()\n\t\t\tif err != nil {\n\t\t\t\terrCh <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\txdsS.reqChan.Send(&Request{req, err})\n\t\t}\n\t}()\n\tgo func() {\n\t\tvar retErr error\n\t\tdefer func() {\n\t\t\terrCh <- retErr\n\t\t}()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase r := <-xdsS.respChan:\n\t\t\t\tif r.Err != nil {\n\t\t\t\t\tretErr = r.Err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := s.Send(r.Resp.(*v3discoverypb.DiscoveryResponse)); err != nil {\n\t\t\t\t\tretErr = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-s.Context().Done():\n\t\t\t\tretErr = s.Context().Err()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tif err := <-errCh; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\ntype lrsServerV3 struct {\n\treqChan         *testutils.Channel\n\trespChan        chan *Response\n\tstreamOpenChan  *testutils.Channel\n\tstreamCloseChan *testutils.Channel\n}\n\nfunc (lrsS *lrsServerV3) StreamLoadStats(s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\tlrsS.streamOpenChan.Send(nil)\n\tdefer lrsS.streamCloseChan.Send(nil)\n\n\treq, err := s.Recv()\n\tlrsS.reqChan.Send(&Request{req, err})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase r := <-lrsS.respChan:\n\t\tif r.Err != nil {\n\t\t\treturn r.Err\n\t\t}\n\t\tif err := s.Send(r.Resp.(*v3lrspb.LoadStatsResponse)); err != nil {\n\t\t\treturn err\n\t\t}\n\tcase <-s.Context().Done():\n\t\treturn s.Context().Err()\n\t}\n\n\tfor {\n\t\treq, err := s.Recv()\n\t\tlrsS.reqChan.Send(&Request{req, err})\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\ttestutils \"some/package/testutils\"\n)\n\ntype Response v3discoverygrpc.DiscoveryResponse\n\ntype Server struct {\n\tXDSRequestChan     *testutils.Channel\n\tXDSResponseChan    chan *Response\n\tLRSRequestChan     *testutils.Channel\n\tLRSResponseChan    chan *Response\n\tLRSStreamOpenChan  *testutils.Channel\n\tLRSStreamCloseChan *testutils.Channel\n\tNewConnChan        *testutils.Channel\n\tAddress            string\n\txdsServerV3        *xdsServerV3\n\tlrsServerV3        *lrsServerV3\n}\n\nfunc NewServer(addr string) *Server {\n\treturn &Server{\n\t\tXDSRequestChan:     testutils.NewChannel(),\n\t\tXDSResponseChan:    make(chan *Response),\n\t\tLRSRequestChan:     testutils.NewChannel(),\n\t\tLRSResponseChan:    make(chan *Response),\n\t\tLRSStreamOpenChan:  testutils.NewChannel(),\n\t\tLRSStreamCloseChan: testutils.NewChannel(),\n\t\tNewConnChan:        testutils.NewChannel(),\n\t\tAddress:            addr,\n\t}\n}\n\nfunc (s *Server) StartServer(lis net.Listener) (*Server, func(), error) {\n\tgrpcServer := grpc.NewServer()\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(grpcServer, s)\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(grpcServer, s)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tcleanup := func() {\n\t\tgrpcServer.Stop()\n\t\tclose(s.XDSResponseChan)\n\t\tclose(s.LRSResponseChan)\n\t}\n\n\treturn s, cleanup, nil\n}\n\nfunc (s *Server) StreamAggregatedResources(stream v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\tif s.NewConnChan != nil {\n\t\ts.NewConnChan.Send(nil)\n\t}\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\treq, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\ts.XDSRequestChan.Send(req)\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase resp := <-s.XDSResponseChan:\n\t\t\tif err := stream.Send((*v3discoverygrpc.DiscoveryResponse)(resp)); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase <-done:\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\nfunc (s *Server) StreamLoadStats(stream v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\tif s.LRSStreamOpenChan != nil {\n\t\ts.LRSStreamOpenChan.Send(nil)\n\t}\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\treq, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\ts.LRSRequestChan.Send(req)\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase resp := <-s.LRSResponseChan:\n\t\t\tif err := stream.Send((*v3lrsgrpc.LoadStatsResponse)(resp)); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase <-done:\n\t\t\tif s.LRSStreamCloseChan != nil {\n\t\t\t\ts.LRSStreamCloseChan.Send(nil)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and handles gRPC communications.\n\nFunction Description: The main function sets up a gRPC server that listens on port 50051, registers the gRPC service implementation, and starts serving requests. It includes error handling for server setup and operation.\n\nInput: None (The function takes no explicit parameters but uses a hardcoded port \":50051\" for listening)\n\nOutput: None (The function doesn't return anything but will log fatal errors if the server fails to start or serve)\n\nNote: The actual gRPC service implementation (greeter struct) is not shown in the reference code but would need to be defined separately to implement the proto.GreeterServer interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"grpc-hello/proto\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tserver := grpc.NewServer()\n\treflection.Register(server)\n\tproto.RegisterGreeterServer(server, &greeter{})\n\n\tfmt.Println(\"grpc server start ...\")\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\tgrpcServer := grpc.NewServer()\n\t// RegisterGreeterServer(grpcServer, &greeter{}) // Implementation assumed elsewhere\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a gRPC server for chaincode communication in a Hyperledger Fabric network, supporting both secure (TLS) and insecure connections, with the ability to handle chaincode registration and message echoing.\n\nStruct Description: ccSrv represents a chaincode gRPC server that listens for incoming connections, handles chaincode registration, and echoes received messages back to the client.\n\nFields:\nl: net.Listener - The network listener for incoming connections\ngrpcSrv: *grpc.Server - The gRPC server instance\nt: *testing.T - Testing context for assertions\nexpectedCCname: string - The expected chaincode name for validation during registration\n\nMethods:\nRegister: (stream pb.ChaincodeSupport_RegisterServer) -> error - Handles the chaincode registration stream, validates the chaincode name, and echoes messages back to the client\nstop: () -> () - Stops the gRPC server and closes the listener\nnewCCServer: (t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) -> *ccSrv - Creates and configures a new chaincode server instance with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\tpb \"github.com/hyperledger/fabric-protos-go-apiv2/peer\"\n\t\"github.com/hyperledger/fabric/common/crypto/tlsgen\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype ccSrv struct {\n\tl              net.Listener\n\tgrpcSrv        *grpc.Server\n\tt              *testing.T\n\texpectedCCname string\n}\n\nfunc (cs *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\tmsg, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\trequire.Equal(cs.t, pb.ChaincodeMessage_REGISTER.String(), msg.Type.String())\n\tchaincodeID := &pb.ChaincodeID{}\n\terr = proto.Unmarshal(msg.Payload, chaincodeID)\n\tif err != nil {\n\t\treturn err\n\t}\n\trequire.Equal(cs.t, cs.expectedCCname, chaincodeID.Name)\n\tfor {\n\t\tmsg, _ = stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = stream.Send(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (cs *ccSrv) stop() {\n\tcs.grpcSrv.Stop()\n\tcs.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tvar s *grpc.Server\n\tif withTLS {\n\t\tkeyPair, err := ca.NewServerCertKeyPair(\"localhost\")\n\t\trequire.NoError(t, err)\n\t\tcert, err := tls.X509KeyPair(keyPair.Cert, keyPair.Key)\n\t\trequire.NoError(t, err)\n\t\ttlsConf := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t\t\tClientCAs:    x509.NewCertPool(),\n\t\t}\n\t\ttlsConf.ClientCAs.AppendCertsFromPEM(ca.CertBytes())\n\t\ts = grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConf)))\n\t} else {\n\t\ts = grpc.NewServer()\n\t}\n\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", \"\", port))\n\trequire.NoError(t, err, \"%v\", err)\n\treturn &ccSrv{\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t\tl:              l,\n\t\tgrpcSrv:        s,\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/hyperledger/fabric/protos/peer\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/tls/certprovider\"\n)\n\ntype ccSrv struct {\n\tl              net.Listener\n\tgrpcSrv        *grpc.Server\n\tt              *testing.T\n\texpectedCCname string\n}\n\nfunc (s *ccSrv) Register(stream peer.ChaincodeSupport_RegisterServer) error {\n\tmsg, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif msg.ChaincodeId.Name != s.expectedCCname {\n\t\treturn fmt.Errorf(\"expected chaincode name %s, got %s\", s.expectedCCname, msg.ChaincodeId.Name)\n\t}\n\tif err := stream.Send(msg); err != nil {\n\t\treturn err\n\t}\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *ccSrv) stop() {\n\ts.grpcSrv.GracefulStop()\n\ts.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca certprovider.CA) *ccSrv {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif withTLS {\n\t\tcert, err := ca.IdentityCertAndKey()\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to get identity cert and key: %v\", err)\n\t\t}\n\t\ttlsConfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{*cert},\n\t\t\tClientAuth:   tls.NoClientCert,\n\t\t}\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(tlsConfig)))\n\t} else {\n\t\topts = append(opts, grpc.Creds(insecure.NewCredentials()))\n\t}\n\n\tgrpcSrv := grpc.NewServer(opts...)\n\tsrv := &ccSrv{\n\t\tl:              l,\n\t\tgrpcSrv:        grpcSrv,\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t}\n\n\tpeer.RegisterChaincodeSupportServer(grpcSrv, srv)\n\n\tgo func() {\n\t\tif err := grpcSrv.Serve(l); err != nil {\n\t\t\tt.Fatalf(\"Server stopped with error: %v\", err)\n\t\t}\n\t}()\n\n\treturn srv\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and registers a service to handle those requests.\n\nFunction Description: The function sets up a gRPC server that listens on a given TCP port, creates a new gRPC server instance, registers a service to handle incoming requests, and starts the server in a goroutine. The server runs until it is stopped or encounters an error.\n\nInput: None (The port is hardcoded as \":50052\" in the example, but could be parameterized)\n\nOutput: None (The function runs indefinitely until stopped or an error occurs, with side effects of starting the gRPC server)\n\nNote: The actual service implementation (ChannelzService) would need to be defined elsewhere and imported. The example shows the server setup pattern but assumes the service is already implemented.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tdefer lis.Close()\n\ts := grpc.NewServer()\n\tservice.RegisterChannelzServiceToServer(s)\n\tgo s.Serve(lis)\n\tdefer s.Stop()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/channelzservice\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterChannelzServiceServer(s, &pb.ChannelzService{})\n\tgo s.Serve(lis)\n\tselect {}\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The function `Run` initializes and starts a gRPC server with the provided network options. It sets up a network listener, creates a gRPC server instance, registers a key service, and handles graceful shutdown upon receiving interrupt or termination signals.\n\nInput: \n- `opts` [struct] - Configuration options for the server, containing:\n  - `Network` [string] - The network type (e.g., \"tcp\")\n  - `Address` [string] - The address to listen on (e.g., \":50051\")\n  - `Prompt` [interface{}] - Optional prompt for the key service\n\nOutput: \n- `error` - Returns an error if the server fails to start or encounters issues during execution",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/getsops/sops/v3/keyservice\"\n\t\"google.golang.org/grpc\"\n)\nfunc Run(opts Opts) error {\n\tlis, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer lis.Close()\n\tgrpcServer := grpc.NewServer()\n\tkeyservice.RegisterKeyServiceServer(grpcServer, keyservice.Server{\n\t\tPrompt: opts.Prompt,\n\t})\n\n\tsigc := make(chan os.Signal, 1)\n\tsignal.Notify(sigc, os.Interrupt, os.Kill, syscall.SIGTERM)\n\tgo func(c chan os.Signal) {\n\t\tsig := <-c\n\t\tlis.Close()\n\t\tos.Exit(0)\n\t}(sigc)\n\treturn grpcServer.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype keyService struct {\n\tprompt interface{}\n}\n\nfunc Run(opts struct {\n\tNetwork string\n\tAddress string\n\tPrompt  interface{}\n}) error {\n\tln, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsrv := grpc.NewServer()\n\tservice := &keyService{prompt: opts.Prompt}\n\tpb.RegisterKeyServiceServer(srv, service)\n\n\tstop := make(chan os.Signal, 1)\n\tsignal.Notify(stop, os.Interrupt, syscall.SIGTERM)\n\n\tserverExited := make(chan struct{})\n\tvar serverErr error\n\n\tgo func() {\n\t\tserverErr = srv.Serve(ln)\n\t\tclose(serverExited)\n\t}()\n\n\tselect {\n\tcase <-stop:\n\t\tsrv.GracefulStop()\n\t\t<-serverExited\n\t\treturn nil\n\tcase <-serverExited:\n\t\treturn serverErr\n\t}\n}"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a Go struct that implements a mock gRPC server proxy for testing purposes, with start and stop functionality.\n\nStruct Description: The ProxyGRPCMock struct provides a mock implementation of a gRPC server that can be started and stopped programmatically. It allows for custom gRPC service implementations and registration routines to be injected for testing purposes.\n\nFields:\n- GRPCImplementer: [interface{}] - The implementation of the gRPC service handler\n- GRPCRegister: [func(s *grpc.Server, srv interface{})] - The function to register the gRPC service implementation with the server\n- listener: [net.Listener] - The network listener for the gRPC server\n\nMethods:\n- Start: [func(URL string) error] -> [error] - Starts the gRPC server on the specified URL (format \"scheme://path\"). Returns error if initialization fails.\n- Stop: [func() error] -> [error] - Stops the gRPC server by closing the listener. Returns error if no listener exists or closing fails.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister func(s *grpc.Server, srv interface{})\n\tlistener net.Listener\n}\n\nfunc (p *ProxyGRPCMock) Start(URL string) error {\n\tif p.GRPCImplementer == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC handler\")\n\t}\n\n\tif p.GRPCRegister == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC registration routine\")\n\t}\n\n\turl, err := url.Parse(URL)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tl, err := net.Listen(url.Scheme, url.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.listener = l\n\n\tgrpcServer := grpc.NewServer()\n\tp.GRPCRegister(grpcServer, p.GRPCImplementer)\n\n\tgo func() {\n\t\tgrpcServer.Serve(l)\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.listener == nil {\n\t\treturn fmt.Errorf(\"Missing proxy listener\")\n\t}\n\n\treturn p.listener.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"strings\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister    func(*grpc.Server, interface{})\n\tlistener        net.Listener\n}\n\nfunc (p *ProxyGRPCMock) Start(urlStr string) error {\n\tparts := strings.SplitN(urlStr, \"://\", 2)\n\tif len(parts) != 2 {\n\t\treturn errors.New(\"invalid URL format\")\n\t}\n\tnetwork, address := parts[0], parts[1]\n\n\tl, err := net.Listen(network, address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.listener = l\n\n\tgrpcServer := grpc.NewServer()\n\tp.GRPCRegister(grpcServer, p.GRPCImplementer)\n\n\tgo func() {\n\t\tgrpcServer.Serve(l)\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.listener == nil {\n\t\treturn errors.New(\"no listener exists\")\n\t}\n\treturn p.listener.Close()\n}"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Implement a gRPC server in Go that can handle incoming requests with configurable message size limits, TLS support, and OpenTracing integration.\n\nStruct Description: The Server struct represents a gRPC server instance with configurable settings for buffer size and server options.\n\nFields:\ngrpcServer: *grpc.Server - The underlying gRPC server instance\nbufferSize: int - The buffer size for server operations (currently unused in reference code)\n\nMethods:\nNewServer: () -> *Server - Creates and returns a new Server instance with default values\n\nStart: (url *common.URL) -> () - Starts the gRPC server with the specified URL configuration. Handles:\n  - Network listener setup\n  - Message size configuration\n  - TLS setup if configured\n  - OpenTracing integration\n  - Service registration\n  - Server reflection\n\nStop: () -> () - Immediately stops the gRPC server\n\nGracefulStop: () -> () - Gracefully stops the gRPC server, allowing existing RPCs to complete",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\nimport (\n\t\"github.com/dubbogo/gost/log/logger\"\n\t\"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/common\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t\"dubbo.apache.org/dubbo-go/v3/config\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n)\n\ntype Server struct {\n\tgrpcServer *grpc.Server\n\tbufferSize int\n}\n\nfunc NewServer() *Server {\n\treturn &Server{}\n}\n\nfunc (s *Server) Start(url *common.URL) {\n\tvar (\n\t\taddr string\n\t\terr  error\n\t)\n\taddr = url.Location\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmaxServerRecvMsgSize := constant.DefaultMaxServerRecvMsgSize\n\tif recvMsgSize, convertErr := humanize.ParseBytes(url.GetParam(constant.MaxServerRecvMsgSize, \"\")); convertErr == nil && recvMsgSize != 0 {\n\t\tmaxServerRecvMsgSize = int(recvMsgSize)\n\t}\n\tmaxServerSendMsgSize := constant.DefaultMaxServerSendMsgSize\n\tif sendMsgSize, convertErr := humanize.ParseBytes(url.GetParam(constant.MaxServerSendMsgSize, \"\")); err == convertErr && sendMsgSize != 0 {\n\t\tmaxServerSendMsgSize = int(sendMsgSize)\n\t}\n\n\ttracer := opentracing.GlobalTracer()\n\tvar serverOpts []grpc.ServerOption\n\tserverOpts = append(serverOpts,\n\t\tgrpc.UnaryInterceptor(otgrpc.OpenTracingServerInterceptor(tracer)),\n\t\tgrpc.StreamInterceptor(otgrpc.OpenTracingStreamServerInterceptor(tracer)),\n\t\tgrpc.MaxRecvMsgSize(maxServerRecvMsgSize),\n\t\tgrpc.MaxSendMsgSize(maxServerSendMsgSize),\n\t)\n\n\ttlsConfig := config.GetRootConfig().TLSConfig\n\tif tlsConfig != nil {\n\t\tvar cfg *tls.Config\n\t\tcfg, err = config.GetServerTlsConfig(&config.TLSConfig{\n\t\t\tCACertFile:    tlsConfig.CACertFile,\n\t\t\tTLSCertFile:   tlsConfig.TLSCertFile,\n\t\t\tTLSKeyFile:    tlsConfig.TLSKeyFile,\n\t\t\tTLSServerName: tlsConfig.TLSServerName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Grpc Server initialized the TLSConfig configuration\")\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(cfg)))\n\t} else {\n\t\tserverOpts = append(serverOpts, grpc.Creds(insecure.NewCredentials()))\n\t}\n\tserver := grpc.NewServer(serverOpts...)\n\ts.grpcServer = server\n\n\tgo func() {\n\t\tproviderServices := config.GetProviderConfig().Services\n\n\t\tif len(providerServices) == 0 {\n\t\t\tpanic(\"provider service map is null\")\n\t\t}\n\t\twaitGrpcExporter(providerServices)\n\t\tregisterService(providerServices, server)\n\t\treflection.Register(server)\n\n\t\tif err = server.Serve(lis); err != nil {\n\t\t\tlogger.Errorf(\"server serve failed with err: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Stop() {\n\ts.grpcServer.Stop()\n}\n\nfunc (s *Server) GracefulStop() {\n\ts.grpcServer.GracefulStop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\n\t\"common\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype Server struct {\n\tgrpcServer *grpc.Server\n\tbufferSize int\n}\n\nfunc NewServer() *Server {\n\treturn &Server{\n\t\tbufferSize: 1024,\n\t}\n}\n\nfunc (s *Server) Start(url *common.URL) {\n\tlis, err := net.Listen(\"tcp\", url.Address)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tvar maxSize int\n\tif sizeStr := url.Params[\"max-message-size\"]; sizeStr != \"\" {\n\t\t_, err := fmt.Sscanf(sizeStr, \"%d\", &maxSize)\n\t\tif err != nil {\n\t\t\tmaxSize = 1024 * 1024\n\t\t}\n\t} else {\n\t\tmaxSize = 1024 * 1024\n\t}\n\topts = append(opts, grpc.MaxRecvMsgSize(maxSize), grpc.MaxSendMsgSize(maxSize))\n\n\tif url.TLS != nil {\n\t\tcreds, err := credentials.NewServerTLSFromFile(url.TLS.CertFile, url.TLS.KeyFile)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tif url.EnableTracing {\n\t\ttracer := opentracing.GlobalTracer()\n\t\topts = append(opts,\n\t\t\tgrpc.UnaryInterceptor(grpc_tracing_opentracing.UnaryServerInterceptor(tracer)),\n\t\t\tgrpc.StreamInterceptor(grpc_tracing_opentracing.StreamServerInterceptor(tracer)),\n\t\t)\n\t}\n\n\ts.grpcServer = grpc.NewServer(opts...)\n\treflection.Register(s.grpcServer)\n\n\tif err := s.grpcServer.Serve(lis); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (s *Server) Stop() {\n\ts.grpcServer.Stop()\n}\n\nfunc (s *Server) GracefulStop() {\n\ts.grpcServer.GracefulStop()\n}"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles various WebSocket operations including checking user online status, sending messages to users, broadcasting messages to all users, and retrieving user lists.\n\nStruct Description: The `server` struct implements the gRPC service interface defined in the protobuf file, providing concrete implementations for WebSocket operations.\n\nFields:\n- UnimplementedAccServerServer: [protobuf.UnimplementedAccServerServer] - Embedded type to ensure forward compatibility with gRPC service updates\n\nMethods:\n- QueryUsersOnline: [Name](ctx context.Context, req *protobuf.QueryUsersOnlineReq) -> (*protobuf.QueryUsersOnlineRsp, error) - Checks if a specified user is currently online\n- SendMsg: [Name](ctx context.Context, req *protobuf.SendMsgReq) -> (*protobuf.SendMsgRsp, error) - Sends a message to a specific user\n- SendMsgAll: [Name](ctx context.Context, req *protobuf.SendMsgAllReq) -> (*protobuf.SendMsgAllRsp, error) - Broadcasts a message to all connected users\n- GetUserList: [Name](ctx context.Context, req *protobuf.GetUserListReq) -> (*protobuf.GetUserListRsp, error) - Retrieves the list of currently connected users\n- Init: [Name]() -> () - Initializes and starts the gRPC server with configuration from Viper",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/link1st/gowebsocket/v2/common\"\n\t\"github.com/link1st/gowebsocket/v2/models\"\n\t\"github.com/link1st/gowebsocket/v2/protobuf\"\n\t\"github.com/link1st/gowebsocket/v2/servers/websocket\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n}\n\nfunc (s *server) QueryUsersOnline(c context.Context, req *protobuf.QueryUsersOnlineReq) (rsp *protobuf.QueryUsersOnlineRsp, err error) {\n\trsp = &protobuf.QueryUsersOnlineRsp{}\n\tonline := websocket.CheckUserOnline(req.GetAppID(), req.GetUserID())\n\tsetErr(req, common.OK, \"\")\n\trsp.Online = online\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsg(c context.Context, req *protobuf.SendMsgReq) (rsp *protobuf.SendMsgRsp, err error) {\n\trsp = &protobuf.SendMsgRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\tsendResults, err := websocket.SendUserMessageLocal(req.GetAppID(), req.GetUserID(), data)\n\tif err != nil {\n\t\tsetErr(rsp, common.ServerError, \"\")\n\t\treturn rsp, nil\n\t}\n\tif !sendResults {\n\t\tsetErr(rsp, common.OperationFailure, \"\")\n\t\treturn rsp, nil\n\t}\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsgAll(c context.Context, req *protobuf.SendMsgAllReq) (rsp *protobuf.SendMsgAllRsp, err error) {\n\trsp = &protobuf.SendMsgAllRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\twebsocket.AllSendMessages(req.GetAppID(), req.GetUserID(), data)\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) GetUserList(c context.Context, req *protobuf.GetUserListReq) (rsp *protobuf.GetUserListRsp, err error) {\n\trsp = &protobuf.GetUserListRsp{}\n\tuserList := websocket.GetUserList(req.GetAppID())\n\tsetErr(rsp, common.OK, \"\")\n\trsp.UserID = userList\n\treturn rsp, nil\n}\n\nfunc Init() {\n\trpcPort := viper.GetString(\"app.rpcPort\")\n\tlis, err := net.Listen(\"tcp\", \":\"+rpcPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n\tprotobuf \"your/module/path/protobuf\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n}\n\nfunc (s *server) QueryUsersOnline(ctx context.Context, req *protobuf.QueryUsersOnlineReq) (*protobuf.QueryUsersOnlineRsp, error) {\n\treturn &protobuf.QueryUsersOnlineRsp{}, nil\n}\n\nfunc (s *server) SendMsg(ctx context.Context, req *protobuf.SendMsgReq) (*protobuf.SendMsgRsp, error) {\n\treturn &protobuf.SendMsgRsp{}, nil\n}\n\nfunc (s *server) SendMsgAll(ctx context.Context, req *protobuf.SendMsgAllReq) (*protobuf.SendMsgAllRsp, error) {\n\treturn &protobuf.SendMsgAllRsp{}, nil\n}\n\nfunc (s *server) GetUserList(ctx context.Context, req *protobuf.GetUserListReq) (*protobuf.GetUserListRsp, error) {\n\treturn &protobuf.GetUserListRsp{}, nil\n}\n\nfunc (s *server) Init() {\n\tport := viper.GetString(\"server.port\")\n\tlis, _ := net.Listen(\"tcp\", \":\"+port)\n\tgrpcServer := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(grpcServer, s)\n\tgrpcServer.Serve(lis)\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server to handle incoming requests on a specified network address.\n\nFunction Description: The function `startServer` sets up a gRPC server that listens on the provided TCP address. It creates a new gRPC server instance, registers the Echo service implementation, and begins serving requests. If any step fails, it logs the error and terminates the program.\n\nInput: \n- `addr` [string] - The network address (including port) on which the gRPC server should listen (e.g., \"localhost:50051\").\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error).",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &ecServer{addr: addr})\n\tlog.Printf(\"serving on %s\\n\", addr)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/protobuf/package\"\n)\n\ntype echoServer struct{}\n\nfunc (s *echoServer) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &echoServer{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Create a mock CSI (Container Storage Interface) provider server in Go that implements the gRPC interface for a secrets store CSI driver. This server should be able to simulate both successful and error responses for testing purposes.\n\nStruct Description: The MockCSIProviderServer struct represents a mock implementation of a CSI provider server that communicates via gRPC over a Unix domain socket. It allows configuration of mock responses and error conditions for testing the CSI driver integration.\n\nFields:\n- grpcServer: *grpc.Server - The gRPC server instance\n- listener: net.Listener - The network listener for the gRPC server\n- socketPath: string - The filesystem path for the Unix domain socket\n- returnErr: error - An error to return for simulated error conditions\n- errorCode: string - The error code to include in responses\n- objects: []*v1alpha1.ObjectVersion - Mock object versions to return\n- files: []*v1alpha1.File - Mock files to return\n\nMethods:\n- NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) - Creates a new mock server instance with the given socket path\n- SetReturnError(err error) - Sets an error to be returned by the mock server\n- SetObjects(objects map[string]string) - Configures mock object versions to return\n- SetFiles(files []*v1alpha1.File) - Configures mock files to return\n- SetProviderErrorCode(errorCode string) - Sets the error code for responses\n- Start() error - Starts the gRPC server listening on the configured socket\n- Stop() - Gracefully stops the gRPC server\n- Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) - Implements the Mount gRPC method\n- Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) - Implements the Version gRPC method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"sigs.k8s.io/secrets-store-csi-driver/provider/v1alpha1\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer *grpc.Server\n\tlistener   net.Listener\n\tsocketPath string\n\treturnErr  error\n\terrorCode  string\n\tobjects    []*v1alpha1.ObjectVersion\n\tfiles      []*v1alpha1.File\n}\n\nfunc NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tserver := grpc.NewServer()\n\ts := &MockCSIProviderServer{\n\t\tgrpcServer: server,\n\t\tsocketPath: socketPath,\n\t}\n\tv1alpha1.RegisterCSIDriverProviderServer(server, s)\n\treturn s, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tvar ov []*v1alpha1.ObjectVersion\n\tfor k, v := range objects {\n\t\tov = append(ov, &v1alpha1.ObjectVersion{Id: k, Version: v})\n\t}\n\tm.objects = ov\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tvar ov []*v1alpha1.File\n\tfor _, v := range files {\n\t\tov = append(ov, &v1alpha1.File{\n\t\t\tPath:     v.Path,\n\t\t\tMode:     v.Mode,\n\t\t\tContents: v.Contents,\n\t\t})\n\t}\n\tm.files = ov\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\tvar err error\n\tm.listener, err = net.Listen(\"unix\", m.socketPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tgo func() {\n\t\tif err = m.grpcServer.Serve(m.listener); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.GracefulStop()\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tvar attrib, secret map[string]string\n\tvar filePermission os.FileMode\n\tvar err error\n\n\tif m.returnErr != nil {\n\t\treturn &v1alpha1.MountResponse{}, m.returnErr\n\t}\n\tif err = json.Unmarshal([]byte(req.GetAttributes()), &attrib); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal attributes, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetSecrets()), &secret); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal secrets, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetPermission()), &filePermission); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal file permission, error: %w\", err)\n\t}\n\treturn &v1alpha1.MountResponse{\n\t\tObjectVersion: m.objects,\n\t\tError: &v1alpha1.Error{\n\t\t\tCode: m.errorCode,\n\t\t},\n\t\tFiles: m.files,\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion:        \"v1alpha1\",\n\t\tRuntimeName:    \"fakeprovider\",\n\t\tRuntimeVersion: \"0.0.10\",\n\t}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\tv1alpha1 \"github.com/example/v1alpha1\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer   *grpc.Server\n\tlistener     net.Listener\n\tsocketPath   string\n\treturnErr    error\n\terrorCode    string\n\tobjects      []*v1alpha1.ObjectVersion\n\tfiles        []*v1alpha1.File\n}\n\nfunc NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\treturn &MockCSIProviderServer{\n\t\tsocketPath: socketPath,\n\t\tgrpcServer: grpc.NewServer(),\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tm.objects = make([]*v1alpha1.ObjectVersion, 0, len(objects))\n\tfor k, v := range objects {\n\t\tm.objects = append(m.objects, &v1alpha1.ObjectVersion{\n\t\t\tName:    k,\n\t\t\tVersion: v,\n\t\t})\n\t}\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tm.files = files\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\tos.Remove(m.socketPath)\n\tvar err error\n\tm.listener, err = net.Listen(\"unix\", m.socketPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tv1alpha1.RegisterCSIProviderServer(m.grpcServer, m)\n\tgo m.grpcServer.Serve(m.listener)\n\treturn nil\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.Stop()\n\tm.listener.Close()\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tif m.returnErr != nil {\n\t\treturn nil, m.returnErr\n\t}\n\treturn &v1alpha1.MountResponse{\n\t\tFiles:      m.files,\n\t\tObjects:    m.objects,\n\t\tErrorCode:  m.errorCode,\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\tif m.returnErr != nil {\n\t\treturn nil, m.returnErr\n\t}\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion:           \"1.0.0\",\n\t\tMinVersion:        \"1.0.0\",\n\t\tNegotiatedVersion: \"1.0.0\",\n\t\tErrorCode:         m.errorCode,\n\t}, nil\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a gRPC server in Go that handles authentication services, connects to Redis for data storage, and exposes Prometheus metrics for monitoring.\n\nStruct Description: The authHandler struct implements the AuthServiceServer interface and provides authentication functionality using Redis as the backend storage.\n\nFields:\nredisClient: *redis.Client - The Redis client used for data storage and retrieval\n\nMethods:\nServe: (listener net.Listener) -> error - Starts the gRPC server and begins listening for incoming requests\nRegisterWithPrometheus: () -> error - Registers gRPC and custom metrics with Prometheus\nStartMetricsServer: () -> error - Starts an HTTP server for Prometheus metrics collection\n\nNote: The struct implements all required gRPC service methods defined in the auth.proto file, though these are not shown in the reference code. The main functionality includes:\n1. Setting up a gRPC server with Prometheus monitoring\n2. Establishing Redis connection\n3. Combining gRPC and HTTP servers for both RPC calls and metrics collection\n4. Proper error handling and logging throughout the process",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/go-redis/redis\"\n\t\"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/lucperkins/colossus/proto/auth\"\n)\nfunc main() {\n\tlog.Printf(\"Starting up the gRPC auth server on localhost:%d\", PORT)\n\n\tlog.Print(\"Attempting to connect to Redis\")\n\n\tredisClient := redis.NewClient(&redis.Options{\n\t\tAddr: \"colossus-redis-cluster:6379\",\n\t})\n\n\t_, err := redisClient.Ping().Result()\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect to Redis cluster: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully connected to Redis\")\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", PORT))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully created TCP listener\")\n\n\tserver := grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n\t)\n\n\tauthServer := authHandler{\n\t\tredisClient: redisClient,\n\t}\n\n\thttpServer := &http.Server{\n\t\tHandler: promhttp.HandlerFor(metricsRegistry, promhttp.HandlerOpts{}),\n\t\tAddr:    fmt.Sprintf(\"0.0.0.0:%d\", PROMETHEUS_PORT),\n\t}\n\n\tauth.RegisterAuthServiceServer(server, &authServer)\n\n\tgrpcMetrics.InitializeMetrics(server)\n\n\tmetricsRegistry.MustRegister(grpcMetrics, authCounter, failCounter)\n\n\tlog.Print(\"Successfully registered with Prometheus\")\n\n\tgo func() {\n\t\tlog.Print(\"Starting up HTTP server for Prometheus metrics collection\")\n\n\t\tif err := httpServer.ListenAndServe(); err != nil {\n\t\t\tlog.Fatalf(\"Unable to start HTTP server for Prometheus metrics: %v\", err)\n\t\t}\n\t}()\n\n\tlog.Fatal(server.Serve(listener))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"flag\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/redis/go-redis/v9\"\n)\n\ntype authHandler struct {\n\tredisClient *redis.Client\n}\n\nfunc NewAuthHandler(redisAddr string) (*authHandler, error) {\n\tclient := redis.NewClient(&redis.Options{Addr: redisAddr})\n\tif _, err := client.Ping(context.Background()).Result(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &authHandler{redisClient: client}, nil\n}\n\nfunc (h *authHandler) Serve(listener net.Listener) error {\n\tgrpcServer := grpc.NewServer()\n\tRegisterAuthServiceServer(grpcServer, h)\n\treturn grpcServer.Serve(listener)\n}\n\nvar (\n\tgrpcRequestsTotal = prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"grpc_requests_total\",\n\t\t\tHelp: \"Total number of gRPC requests.\",\n\t\t},\n\t\t[]string{\"method\", \"status\"},\n\t)\n\trequestLatency = prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:    \"request_latency_seconds\",\n\t\t\tHelp:    \"Latency of requests in seconds.\",\n\t\t\tBuckets: prometheus.DefBuckets,\n\t\t},\n\t\t[]string{\"method\"},\n\t)\n)\n\nfunc (h *authHandler) RegisterWithPrometheus() error {\n\tprometheus.MustRegister(grpcRequestsTotal, requestLatency)\n\treturn nil\n}\n\nfunc (h *authHandler) StartMetricsServer(port string) error {\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\treturn http.ListenAndServe(\":\"+port, nil)\n}\n\ntype AuthServiceServer interface {\n\t// Implement auth service methods here (Login, Register, etc.)\n}\n\nfunc RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {\n\ts.RegisterService(&_AuthService_serviceDesc, srv)\n}\n\nvar _AuthService_serviceDesc = grpc.ServiceDesc{\n\tServiceName: \"AuthService\",\n\tHandlerType: (*AuthServiceServer)(nil),\n\tMethods:     []grpc.MethodDesc{},\n\tStreams:     []grpc.StreamDesc{},\n}\n\nfunc main() {\n\tredisAddr := flag.String(\"redis-addr\", \"localhost:6379\", \"Redis server address\")\n\tgrpcPort := flag.String(\"grpc-port\", \"50051\", \"gRPC server port\")\n\tmetricsPort := flag.String(\"metrics-port\", \"8080\", \"Prometheus metrics port\")\n\tflag.Parse()\n\n\thandler, err := NewAuthHandler(*redisAddr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to Redis: %v\", err)\n\t}\n\n\tif err := handler.RegisterWithPrometheus(); err != nil {\n\t\tlog.Fatalf(\"Failed to register metrics: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := handler.StartMetricsServer(*metricsPort); err != nil {\n\t\t\tlog.Fatalf(\"Failed to start metrics server: %v\", err)\n\t\t}\n\t}()\n\n\tlistener, err := net.Listen(\"tcp\", \":\"+*grpcPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tif err := handler.Serve(listener); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Implement a gRPC server in Go that collects and manages execution statistics for tasks in a distributed system.\n\nStruct Description: The Executor struct represents a gRPC server that handles execution statistics collection and management. It maintains a list of execution stats and provides methods to serve gRPC requests and process incoming statistics.\n\nFields:\nstats: []*pb.ExecutionStat - A slice of pointers to ExecutionStat protobuf messages, storing the collected execution statistics.\n\nMethods:\nserveGrpc: (listener net.Listener) -> () - Starts a gRPC server on the given listener, registering the Executor as a GleamExecutorServer implementation.\nCollectExecutionStatistics: (stream pb.GleamExecutor_CollectExecutionStatisticsServer) -> error - Processes a stream of execution statistics, updating the internal stats collection when matching task IDs are found. Returns nil on successful completion or an error if stream processing fails.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/chrislusf/gleam/pb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (exe *Executor) serveGrpc(listener net.Listener) {\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(grpcServer, exe)\n\tgrpcServer.Serve(listener)\n}\n\nfunc (exe *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstats, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, stat := range stats.Stats {\n\t\t\tfor i, current := range exe.stats {\n\t\t\t\tif current.StepId == stat.StepId && current.TaskId == stat.TaskId {\n\t\t\t\t\texe.stats[i] = stat\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/yourorg/yourrepo/pb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (e *Executor) serveGrpc(listener net.Listener) {\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(grpcServer, e)\n\tif err := grpcServer.Serve(listener); err != nil {\n\t\tlog.Fatal(\"Failed to serve gRPC: \", err)\n\t}\n}\n\nfunc (e *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstat, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfound := false\n\t\tfor i, existing := range e.stats {\n\t\t\tif existing.TaskId == stat.TaskId {\n\t\t\t\te.stats[i] = stat\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\te.stats = append(e.stats, stat)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a function that sets up and starts a gRPC server with reflection capabilities, registering multiple services and handling incoming requests.\n\nFunction Description: The Serve function initializes a gRPC server on a specified TCP port, registers multiple service implementations (RouteGuide and Foobar), enables server reflection for debugging, and starts listening for incoming RPC requests. It also demonstrates protobuf JSON marshaling of a well-known type.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but runs indefinitely to serve requests)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":5001\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"server: failed to create listener: %v\", err)\n\t}\n\n\te, _ := protojson.Marshal(&WellKnownRequest{Timestamp: timestamppb.Now()})\n\tfmt.Printf(\"string(e) = %+v\\n\", string(e))\n\n\ts := newServer()\n\tgs := grpc.NewServer()\n\tRegisterRouteGuideServer(gs, s)\n\tRegisterFoobarServer(gs, s)\n\treflection.Register(gs)\n\tgs.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/golang/protobuf/jsonpb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\trouteguide \"example.com/services/routeguide\"\n\tfoobar \"example.com/services/foobar\"\n)\n\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\n\trouteguide.RegisterRouteGuideServer(s, &routeguide.RouteGuideServer{})\n\tfoobar.RegisterFoobarServer(s, &foobar.FoobarServer{})\n\treflection.Register(s)\n\n\tt := &timestamppb.Timestamp{\n\t\tSeconds: 1234567890,\n\t\tNanos:   123456789,\n\t}\n\tmarshaler := &jsonpb.Marshaler{}\n\tjsonStr, _ := marshaler.MarshalToString(t)\n\tlog.Println(\"JSON Marshaled Timestamp:\", jsonStr)\n\n\tlog.Println(\"Starting gRPC server on :50051\")\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement a gRPC server for a CSI (Container Storage Interface) driver in Go, including server lifecycle management, request interception, and authentication.\n\nStruct Description: CSIDriver represents a gRPC server implementation for CSI driver operations, managing server lifecycle, intercepting requests, and handling authentication.\n\nFields:\n- listener: net.Listener - Network listener for incoming connections\n- server: *grpc.Server - gRPC server instance\n- servers: *CSIDriverServers - CSI service implementations (Controller, Identity, Node)\n- wg: sync.WaitGroup - Synchronization for graceful shutdown\n- running: bool - Server running state flag\n- lock: sync.Mutex - Mutex for thread-safe operations\n- creds: *CSICreds - Authentication credentials\n- logGRPC: LogGRPC - Callback for logging gRPC calls\n\nMethods:\n- NewCSIDriver(*CSIDriverServers) -> *CSIDriver - Constructor that creates a new CSIDriver instance with given service implementations\n- Start(net.Listener, grpc.UnaryServerInterceptor) -> error - Starts the gRPC server with optional interceptor\n- goServe(chan<- bool) -> - Internal method to start server in goroutine\n- Stop() -> - Stops the server gracefully\n- callInterceptor(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) -> (interface{}, error) - Request interceptor handling authentication and logging",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype CSIDriver struct {\n\tlistener net.Listener\n\tserver   *grpc.Server\n\tservers  *CSIDriverServers\n\twg       sync.WaitGroup\n\trunning  bool\n\tlock     sync.Mutex\n\tcreds    *CSICreds\n\tlogGRPC  LogGRPC\n}\n\ntype LogGRPC func(method string, request, reply interface{}, err error)\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t}\n}\n\nfunc (c *CSIDriver) Start(l net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tc.listener = l\n\n\tif interceptor == nil {\n\t\tinterceptor = c.callInterceptor\n\t}\n\tc.server = grpc.NewServer(grpc.UnaryInterceptor(interceptor))\n\n\tif c.servers.Controller != nil {\n\t\tcsi.RegisterControllerServer(c.server, c.servers.Controller)\n\t}\n\tif c.servers.Identity != nil {\n\t\tcsi.RegisterIdentityServer(c.server, c.servers.Identity)\n\t}\n\tif c.servers.Node != nil {\n\t\tcsi.RegisterNodeServer(c.server, c.servers.Node)\n\t}\n\n\twaitForServer := make(chan bool)\n\tc.goServe(waitForServer)\n\t<-waitForServer\n\tc.running = true\n\treturn nil\n}\n\nfunc (c *CSIDriver) goServe(started chan<- bool) {\n\tgo func() {\n\t\tc.wg.Add(1)\n\t\tdefer c.wg.Done()\n\t\tstarted <- true\n\t\tc.server.Serve(c.listener)\n\t}()\n}\n\nfunc (c *CSIDriver) Stop() {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif !c.running {\n\t\treturn\n\t}\n\n\tc.server.Stop()\n\tc.wg.Wait()\n}\n\nfunc (c *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\terr := authInterceptor(c.creds, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trsp, err := handler(ctx, req)\n\tif c.logGRPC != nil {\n\t\tc.logGRPC(info.FullMethod, req, rsp, err)\n\t}\n\treturn rsp, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype CSICreds struct{}\n\nfunc (c *CSICreds) Validate(ctx context.Context) error {\n\treturn nil\n}\n\ntype LogGRPC func(string, error)\n\ntype ControllerServer interface{}\ntype IdentityServer interface{}\ntype NodeServer interface{}\n\ntype CSIDriverServers struct {\n\tController ControllerServer\n\tIdentity   IdentityServer\n\tNode       NodeServer\n}\n\ntype CSIDriver struct {\n\tlistener  net.Listener\n\tserver    *grpc.Server\n\tservers   *CSIDriverServers\n\twg        sync.WaitGroup\n\trunning   bool\n\tlock      sync.Mutex\n\tcreds     *CSICreds\n\tlogGRPC   LogGRPC\n}\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t\twg:      sync.WaitGroup{},\n\t\trunning: false,\n\t\tlock:    sync.Mutex{},\n\t}\n}\n\nfunc (d *CSIDriver) Start(listener net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\td.lock.Lock()\n\tif d.running {\n\t\td.lock.Unlock()\n\t\treturn errors.New(\"server already running\")\n\t}\n\td.listener = listener\n\td.running = true\n\td.lock.Unlock()\n\n\tvar interceptors []grpc.UnaryServerInterceptor\n\tinterceptors = append(interceptors, d.callInterceptor)\n\tif interceptor != nil {\n\t\tinterceptors = append(interceptors, interceptor)\n\t}\n\n\tserverOpts := []grpc.ServerOption{\n\t\tgrpc.UnaryInterceptor(grpc.ChainUnaryInterceptor(interceptors...)),\n\t}\n\n\td.server = grpc.NewServer(serverOpts...)\n\n\td.wg.Add(1)\n\tgo d.goServe(make(chan bool))\n\treturn nil\n}\n\nfunc (d *CSIDriver) goServe(doneChan chan<- bool) {\n\tdefer d.wg.Done()\n\tif err := d.server.Serve(d.listener); err != nil {\n\t}\n\tclose(doneChan)\n}\n\nfunc (d *CSIDriver) Stop() {\n\td.lock.Lock()\n\tif !d.running {\n\t\td.lock.Unlock()\n\t\treturn\n\t}\n\td.running = false\n\td.lock.Unlock()\n\n\td.server.GracefulStop()\n\td.wg.Wait()\n}\n\nfunc (d *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tif d.creds != nil {\n\t\tif err := d.creds.Validate(ctx); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tresp, err := handler(ctx, req)\n\tif d.logGRPC != nil {\n\t\td.logGRPC(info.FullMethod, err)\n\t}\n\treturn resp, err\n}\n```"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown.\n\nStruct Description: The Plumber struct represents a gRPC server instance with configuration options, logging, and shutdown capabilities.\n\nFields:\n- Config: *options.Config - Configuration settings for the server\n- CLIOptions: *options.CLIOptions - Command line interface options\n- PersistentConfig: *options.PersistentConfig - Persistent configuration settings\n- Actions: *actions.Actions - Server actions and operations\n- Bus: bus.IBus - Message bus interface\n- ServiceShutdownCtx: context.Context - Context for shutdown signaling\n- log: *logrus.Entry - Logger instance\n\nMethods:\n- startGRPCServer: () -> error - Starts the gRPC server and listens for incoming requests\n- watchServiceShutdown: (*grpc.Server) -> () - Monitors for shutdown signals and stops the gRPC server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/batchcorp/plumber-schemas/build/go/protos\"\n\t\"github.com/streamdal/plumber/server\"\n)\n\ntype Plumber struct {\n\tConfig               *options.Config\n\tCLIOptions           *options.CLIOptions\n\tPersistentConfig     *options.PersistentConfig\n\tActions              *actions.Actions\n\tBus                  bus.IBus\n\tServiceShutdownCtx   context.Context\n\tlog                  *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlis, err := net.Listen(\"tcp\", p.CLIOptions.Server.GrpcListenAddress)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to listen on '%s': %s\", p.CLIOptions.Server.GrpcListenAddress, err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tgrpcServer := grpc.NewServer(opts...)\n\n\tp.PersistentConfig.ClusterID = p.CLIOptions.Server.ClusterId\n\n\tplumberServer := &server.Server{\n\t\tActions:          p.Actions,\n\t\tPersistentConfig: p.PersistentConfig,\n\t\tAuthToken:        p.CLIOptions.Server.AuthToken,\n\t\tBus:              p.Bus,\n\t\tLog:              logrus.WithField(\"pkg\", \"plumber/cli_server.go\"),\n\t\tCLIOptions:       p.CLIOptions,\n\t}\n\n\tprotos.RegisterPlumberServerServer(grpcServer, plumberServer)\n\n\tgo p.watchServiceShutdown(grpcServer)\n\n\tp.log.Debugf(\"starting gRPC server on %s\", p.CLIOptions.Server.GrpcListenAddress)\n\n\terrCh := make(chan error, 1)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\terrCh <- errors.Wrap(err, \"unable to start gRPC server\")\n\t\t}\n\t}()\n\n\tafterCh := time.After(5 * time.Second)\n\n\tselect {\n\tcase <-afterCh:\n\t\treturn nil\n\tcase err := <-errCh:\n\t\treturn err\n\t}\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\n\tp.log.Debug(\"received shutdown request in gRPC server via ServiceShutdownCtx\")\n\n\ttime.Sleep(5 * time.Second)\n\n\tgrpcServer.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"github.com/grpc-ecosystem/go-grpc-middleware\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/recovery\"\n\t\"github.com/grpc-ecosystem/go-grpc-logrus\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype Plumber struct {\n\tConfig             *options.Config\n\tCLIOptions         *options.CLIOptions\n\tPersistentConfig   *options.PersistentConfig\n\tActions            *actions.Actions\n\tBus                bus.IBus\n\tServiceShutdownCtx context.Context\n\tlog                *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlis, err := net.Listen(\"tcp\", p.Config.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar interceptors []grpc.UnaryServerInterceptor\n\tinterceptors = append(interceptors, grpc_logrus.UnaryServerInterceptor(p.log))\n\tinterceptors = append(interceptors, grpc_recovery.UnaryServerInterceptor())\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(interceptors...)),\n\t}\n\n\tif p.Config.TLS != nil {\n\t\tcreds, err := credentials.NewServerTLSFromFile(p.Config.TLS.CertFile, p.Config.TLS.KeyFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\tp.Actions.RegisterServices(server)\n\n\tgo func() {\n\t\tif err := server.Serve(lis); err != nil {\n\t\t\tp.log.WithError(err).Fatal(\"Failed to serve gRPC\")\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (p *Plumber) watchServiceShutdown(server *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\tp.log.Info(\"Shutting down gRPC server\")\n\tserver.GracefulStop()\n}"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles incoming requests with custom stream preprocessing and graceful shutdown capabilities.\n\nStruct Description: The `server` struct represents a gRPC server instance with additional control for graceful shutdown and stream preprocessing.\n\nFields:\n- grpcSrv: *grpc.Server - The underlying gRPC server instance\n- closeC: chan struct{} - Channel used to signal server shutdown\n\nMethods:\n- Serve: (lis net.Listener) -> error - Starts the gRPC server on the provided listener, initializing it with custom stream preprocessing\n- preGrpcStream: (ctx context.Context, info *tap.Info) -> (context.Context, error) - Intercepts incoming gRPC streams before processing, with special handling for the \"/vanus.core.raft.RaftServer/SendMessage\" method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\tsrv := grpc.NewServer(\n\t\tgrpc.InTapHandle(s.preGrpcStream),\n\t)\n\ts.grpcSrv = srv\n\n\treturn srv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tcCtx, cancel := context.WithCancel(ctx)\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-cCtx.Done():\n\t\t\tcase <-s.closeC:\n\t\t\t\tcancel()\n\t\t\t}\n\t\t}()\n\t\treturn cCtx, nil\n\t}\n\treturn ctx, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\topts := []grpc.ServerOption{\n\t\tgrpc.StreamInterceptor(tap.ServerInterceptStreamHandler(s.preGrpcStream)),\n\t}\n\ts.grpcSrv = grpc.NewServer(opts...)\n\tgo func() {\n\t\t<-s.closeC\n\t\ts.grpcSrv.GracefulStop()\n\t}()\n\treturn s.grpcSrv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\t// Special handling for RaftServer/SendMessage\n\t}\n\treturn ctx, nil\n}"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests using ALTS (Application Layer Transport Security) for authentication.\n\nFunction Description: The main function sets up a gRPC server with ALTS credentials, registers an Echo service implementation, and starts listening on a specified TCP port.\n\nInput:\n- port (int): The TCP port number on which the server should listen (passed via command-line flag)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)\n\nMethods:\n- None (this is a function-level implementation, not a struct)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\taltsTC := alts.NewServerCreds(alts.DefaultServerOptions())\n\n\ts := grpc.NewServer(grpc.Creds(altsTC))\n\n\tpb.RegisterEchoServer(s, &ecServer{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\n\tpb \"path/to/echopb\"\n)\n\nvar (\n\tport = flag.Int(\"port\", 50051, \"TCP port number to listen on\")\n)\n\ntype server struct{}\n\nfunc (s *server) Echo(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\topts, err := alts.DefaultServerOptions()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to get ALTS default options: %v\", err)\n\t}\n\n\tcreds, err := alts.NewServerCreds(opts)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create ALTS credentials: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServiceServer(s, &server{})\n\tlog.Printf(\"Server listening on port %d\", *port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Create a gRPC server configuration and management system in Go that handles server setup, TLS configuration, client credentials, and network listeners with support for both buffered and regular network connections.\n\nStruct Description: GRPCServerConfig represents a configuration for setting up a gRPC server with various options including network settings, TLS configuration, and connection parameters.\n\nFields:\n- Address: string - The network address to listen on\n- Network: string - The network type (e.g., \"tcp\", \"unix\", or \"buffered\")\n- TLSCertPath: string - Path to TLS certificate file\n- TLSKeyPath: string - Path to TLS private key file\n- MaxConnAge: time.Duration - Maximum connection age before termination\n- Enabled: bool - Whether the server is enabled\n- BufferSize: int - Size of buffer for buffered connections\n- ClientCAPath: string - Path to client CA certificate file\n- MaxWorkers: uint32 - Maximum number of stream workers\n- flagPrefix: string - Prefix for configuration flags\n\nMethods:\n- Complete: (level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) -> (RunnableGRPCServer, error) - Completes the configuration and returns a runnable server instance\n- listenerAndDialer: () -> (net.Listener, DialFunc, NetDialFunc, error) - Creates a network listener and dialer functions based on configuration\n- tlsOpts: () -> ([]grpc.ServerOption, *certwatcher.CertWatcher, error) - Generates TLS server options based on certificate configuration\n- clientCreds: () -> (credentials.TransportCredentials, error) - Creates client transport credentials based on TLS configuration\n\nStruct Description: completedGRPCServer represents a fully configured and runnable gRPC server instance.\n\nFields:\n- opts: []grpc.ServerOption - Server options\n- listener: net.Listener - Network listener\n- svcRegistrationFn: func(*grpc.Server) - Service registration function\n- listenFunc: func() error - Function to start listening\n- prestopFunc: func() - Function to run before stopping\n- stopFunc: func() - Function to stop the server\n- dial: func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error) - Dial function for clients\n- netDial: func(context.Context, string) (net.Conn, error) - Raw network dial function\n- creds: credentials.TransportCredentials - Client transport credentials\n- certWatcher: *certwatcher.CertWatcher - Certificate watcher for TLS\n\nMethods:\n- WithOpts: (...grpc.ServerOption) -> RunnableGRPCServer - Adds additional server options\n- Listen: (context.Context) -> func() error - Starts the server and returns a listen function\n- DialContext: (context.Context, ...grpc.DialOption) -> (*grpc.ClientConn, error) - Creates a client connection\n- NetDialContext: (context.Context, string) -> (net.Conn, error) - Creates a raw network connection\n- Insecure: () -> bool - Returns whether the connection is insecure\n- GracefulStop: () - Stops the server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/test/bufconn\"\n\n\t\"sigs.k8s.io/controller-runtime/pkg/certwatcher\"\n\n\t\"github.com/authzed/spicedb/internal/grpchelpers\"\n\t\"github.com/authzed/spicedb/pkg/x509util\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\n\tflagPrefix string\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(server *grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn &disabledGrpcServer{}, nil\n\t}\n\tif c.BufferSize == 0 {\n\t\tc.BufferSize = 1024 * 1024\n\t}\n\topts = append(opts, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionAge: c.MaxConnAge,\n\t}), grpc.NumStreamWorkers(c.MaxWorkers))\n\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\topts = append(opts, tlsOpts...)\n\n\tclientCreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tl, dial, netDial, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to listen on addr for gRPC server: %w\", err)\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tsvcRegistrationFn(srv)\n\treturn &completedGRPCServer{\n\t\topts:              opts,\n\t\tlistener:          l,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tlistenFunc: func() error {\n\t\t\treturn srv.Serve(l)\n\t\t},\n\t\tdial:    dial,\n\t\tnetDial: netDial,\n\t\tprestopFunc: func() {\n\t\t},\n\t\tstopFunc:    srv.GracefulStop,\n\t\tcreds:       clientCreds,\n\t\tcertWatcher: certWatcher,\n\t}, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, DialFunc, NetDialFunc, error) {\n\tif c.Network == BufferedNetwork {\n\t\tbl := bufconn.Listen(c.BufferSize)\n\t\treturn bl, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\t\topts = append(opts, grpc.WithContextDialer(func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t\t}))\n\n\t\t\t\treturn grpchelpers.Dial(ctx, BufferedNetwork, opts...)\n\t\t\t}, func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t}, nil\n\t}\n\tl, err := net.Listen(c.Network, c.Address)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\treturn l, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\treturn grpchelpers.Dial(ctx, c.Address, opts...)\n\t}, nil, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn nil, nil, nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\twatcher, err := certwatcher.New(c.TLSCertPath, c.TLSKeyPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\tGetCertificate: watcher.GetCertificate,\n\t\t\tMinVersion:     tls.VersionTLS12,\n\t\t})\n\t\treturn []grpc.ServerOption{grpc.Creds(creds)}, watcher, nil\n\tdefault:\n\t\treturn nil, nil, nil\n\t}\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn insecure.NewCredentials(), nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\tvar err error\n\t\tvar pool *x509.CertPool\n\t\tif c.ClientCAPath != \"\" {\n\t\t\tpool, err = x509util.CustomCertPool(c.ClientCAPath)\n\t\t} else {\n\t\t\tpool, err = x509.SystemCertPool()\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn credentials.NewTLS(&tls.Config{RootCAs: pool, MinVersion: tls.VersionTLS12}), nil\n\tdefault:\n\t\treturn nil, nil\n\t}\n}\n\ntype completedGRPCServer struct {\n\topts              []grpc.ServerOption\n\tlistener          net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc        func() error\n\tprestopFunc       func()\n\tstopFunc          func()\n\tdial              func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial           func(ctx context.Context, s string) (net.Conn, error)\n\tcreds             credentials.TransportCredentials\n\tcertWatcher       *certwatcher.CertWatcher\n}\n\nfunc (c *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\tc.opts = append(c.opts, opts...)\n\tsrv := grpc.NewServer(c.opts...)\n\tc.svcRegistrationFn(srv)\n\tc.listenFunc = func() error {\n\t\treturn srv.Serve(c.listener)\n\t}\n\tc.stopFunc = srv.GracefulStop\n\treturn c\n}\n\nfunc (c *completedGRPCServer) Listen(ctx context.Context) func() error {\n\tif c.certWatcher != nil {\n\t\tgo func() {\n\t\t\tif err := c.certWatcher.Start(ctx); err != nil {\n\t\t\t}\n\t\t}()\n\t}\n\treturn c.listenFunc\n}\n\nfunc (c *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\topts = append(opts, grpc.WithTransportCredentials(c.creds))\n\treturn c.dial(ctx, opts...)\n}\n\nfunc (c *completedGRPCServer) NetDialContext(ctx context.Context, s string) (net.Conn, error) {\n\treturn c.netDial(ctx, s)\n}\n\nfunc (c *completedGRPCServer) Insecure() bool {\n\treturn c.creds.Info().SecurityProtocol == \"insecure\"\n}\n\nfunc (c *completedGRPCServer) GracefulStop() {\n\tc.prestopFunc()\n\tc.stopFunc()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package grpcserver\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/rs/zerolog\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/test/bufconn\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\tflagPrefix   string\n}\n\ntype completedGRPCServer struct {\n\topts           []grpc.ServerOption\n\tlistener       net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc     func() error\n\tprestopFunc    func()\n\tstopFunc       func()\n\tdial           func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial        func(context.Context, string) (net.Conn, error)\n\tcreds          credentials.TransportCredentials\n\tcertWatcher    *certwatcher.CertWatcher\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, func(context.Context, string) (net.Conn, error), func(context.Context, string) (net.Conn, error), error) {\n\tswitch c.Network {\n\tcase \"buffered\":\n\t\tl := bufconn.Listen(c.BufferSize)\n\t\treturn l, l.Dialer(), l.Dialer(), nil\n\tcase \"tcp\", \"unix\":\n\t\tl, err := net.Listen(c.Network, c.Address)\n\t\tif err != nil {\n\t\t\treturn nil, nil, nil, err\n\t\t}\n\t\tdialer := func(ctx context.Context, target string) (net.Conn, error) {\n\t\t\treturn (&net.Dialer{}).DialContext(ctx, c.Network, c.Address)\n\t\t}\n\t\tnetDialer := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\t\treturn (&net.Dialer{}).DialContext(ctx, c.Network, addr)\n\t\t}\n\t\treturn l, dialer, netDialer, nil\n\tdefault:\n\t\treturn nil, nil, nil, errors.New(\"unsupported network type\")\n\t}\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tvar opts []grpc.ServerOption\n\tif c.TLSCertPath == \"\" || c.TLSKeyPath == \"\" {\n\t\treturn opts, nil, nil\n\t}\n\tcw, err := certwatcher.New(c.TLSCertPath, c.TLSKeyPath)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tcert, err := cw.CurrentCert()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\ttlsConfig := &tls.Config{\n\t\tCertificates: []tls.Certificate{*cert},\n\t\tClientAuth:   tls.NoClientCert,\n\t}\n\tif c.ClientCAPath != \"\" {\n\t\tcaBytes, err := ioutil.ReadFile(c.ClientCAPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\troots := x509.NewCertPool()\n\t\tif ok := roots.AppendCertsFromPEM(caBytes); !ok {\n\t\t\treturn nil, nil, errors.New(\"failed to parse client CA\")\n\t\t}\n\t\ttlsConfig.ClientCAs = roots\n\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t}\n\tcreds := credentials.NewTLS(tlsConfig)\n\topts = append(opts, grpc.Creds(creds))\n\treturn opts, cw, nil\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tif c.TLSCertPath == \"\" {\n\t\treturn credentials.NewTLS(&tls.Config{InsecureSkipVerify: true}), nil\n\t}\n\tcerts := x509.NewCertPool()\n\tcertBytes, err := ioutil.ReadFile(c.TLSCertPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif ok := certs.AppendCertsFromPEM(certBytes); !ok {\n\t\treturn nil, errors.New(\"failed to parse server cert\")\n\t}\n\tif c.ClientCAPath != \"\" {\n\t\tcaBytes, err := ioutil.ReadFile(c.ClientCAPath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif ok := certs.AppendCertsFromPEM(caBytes); !ok {\n\t\t\treturn nil, errors.New(\"failed to parse client CA\")\n\t\t}\n\t}\n\treturn credentials.NewTLS(&tls.Config{RootCAs: certs}), nil\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn nil, errors.New(\"server disabled\")\n\t}\n\tlistener, dialer, netDialer, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclientCreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserverOpts := append([]grpc.ServerOption{}, tlsOpts...)\n\tif c.MaxConnAge > 0 {\n\t\tserverOpts = append(serverOpts, grpc.MaxConnAge(c.MaxConnAge))\n\t}\n\tif c.MaxWorkers > 0 {\n\t\tserverOpts = append(serverOpts, grpc.NumStreamWorkers(c.MaxWorkers))\n\t}\n\tserverOpts = append(serverOpts, opts...)\n\tvar server *grpc.Server\n\tvar stopOnce sync.Once\n\tlistenFunc := func() error {\n\t\tserver = grpc.NewServer(serverOpts...)\n\t\tsvcRegistrationFn(server)\n\t\treturn server.Serve(listener)\n\t}\n\tstopFunc := func() {\n\t\tstopOnce.Do(func() {\n\t\t\tif server != nil {\n\t\t\t\tserver.GracefulStop()\n\t\t\t}\n\t\t\tif certWatcher != nil {\n\t\t\t\tcertWatcher.Stop()\n\t\t\t}\n\t\t})\n\t}\n\tdial := func(ctx context.Context, dialOpts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\tif clientCreds != nil {\n\t\t\tdialOpts = append(dialOpts, grpc.WithTransportCredentials(clientCreds))\n\t\t} else {\n\t\t\tdialOpts = append(dialOpts, grpc.WithInsecure())\n\t\t}\n\t\tdialOpts = append(dialOpts, grpc.WithContextDialer(dialer))\n\t\treturn grpc.DialContext(ctx, \"\", dialOpts...)\n\t}\n\treturn &completedGRPCServer{\n\t\topts:            serverOpts,\n\t\tlistener:        listener,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tlistenFunc:      listenFunc,\n\t\tstopFunc:        stopFunc,\n\t\tdial:            dial,\n\t\tnetDial:         netDialer,\n\t\tcreds:           clientCreds,\n\t\tcertWatcher:     certWatcher,\n\t}, nil\n}\n\nfunc (s *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\tnewOpts := append([]grpc.ServerOption{}, s.opts...)\n\tnewOpts = append(newOpts, opts...)\n\treturn &completedGRPCServer{\n\t\topts:            newOpts,\n\t\tlistener:        s.listener,\n\t\tsvcRegistrationFn: s.svcRegistrationFn,\n\t\tlistenFunc:      s.listenFunc,\n\t\tstopFunc:        s.stopFunc,\n\t\tdial:            s.dial,\n\t\tnetDial:         s.netDial,\n\t\tcreds:           s.creds,\n\t\tcertWatcher:     s.certWatcher,\n\t}\n}\n\nfunc (s *completedGRPCServer) Listen(ctx context.Context) func() error {\n\treturn s.listenFunc\n}\n\nfunc (s *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\treturn s.dial(ctx, opts...)\n}\n\nfunc (s *completedGRPCServer) NetDialContext(ctx context.Context, addr string) (net.Conn, error) {\n\treturn s.netDial(ctx, addr)\n}\n\nfunc (s *completedGRPCServer) Insecure() bool {\n\treturn s.creds == nil\n}\n\nfunc (s *completedGRPCServer) GracefulStop() {\n\ts.stopFunc()\n}"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including server initialization, startup, and metric processing.\n\nStruct Description: The Server struct represents a gRPC server for forwarding metrics. It manages server lifecycle, handles incoming metric data, and provides logging capabilities.\n\nFields:\n\nserver: *grpc.Server - The gRPC server instance\naddress: string - Network address to bind the server to\ningest: sources.Ingest - Interface for processing incoming metrics\nlistener: net.Listener - Network listener for incoming connections\nlogger: *logrus.Entry - Logger for server operations\nopts: *options - Configuration options for the server\nreadyChannel: chan struct{} - Channel to signal when server is ready\n\nMethods:\n\nNew: (address string, logger *logrus.Entry, opts ...Option) -> *Server - Creates a new Server instance with specified address, logger, and optional configurations. Initializes gRPC server and registers services.\n\nStart: (ingest sources.Ingest) -> error - Starts the gRPC server, binds to the specified address, and begins listening for incoming connections. Takes a metric ingestion interface as input. Returns any error that occurs during startup or operation.\n\nSendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles incoming metric streams from clients. Processes each metric received and sends back an empty response when done. Returns any error that occurs during stream processing.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/sources\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\tres := &Server{\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\topts:         &options{},\n\t\tserver:       grpc.NewServer(),\n\t\treadyChannel: make(chan struct{}),\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(res.opts)\n\t}\n\n\tif res.opts.traceClient == nil {\n\t\tres.opts.traceClient = trace.DefaultClient\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.server, res)\n\n\treturn res\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\n\tvar err error\n\ts.listener, err = net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\ts.logger.WithError(err).WithField(\"address\", s.address).\n\t\t\tErrorf(\"failed to bind import server\")\n\t\treturn err\n\t}\n\n\tlogger := s.logger.WithFields(logrus.Fields{\"address\": s.listener.Addr()})\n\tlogger.Info(\"Starting gRPC server\")\n\n\tclose(s.readyChannel)\n\terr = s.server.Serve(s.listener)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"gRPC server was not shut down cleanly\")\n\t}\n\tlogger.Info(\"Stopped gRPC server\")\n\treturn err\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\ts.logger.WithError(err).Error(\"error recieving metrics\")\n\t\t\treturn err\n\t\t}\n\t\ts.ingest.IngestMetricProto(metric)\n\t}\n\terr := server.SendAndClose(&emptypb.Empty{})\n\tif err != nil {\n\t\ts.logger.WithError(err).Error(\"error closing stream\")\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\tforwardrpc \"your/package/path/forwardrpc\"\n\tsources \"your/package/path/sources\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\ntype options struct {\n\tmaxConcurrentStreams uint32\n}\n\ntype Option func(*options)\n\nfunc WithMaxConcurrentStreams(n uint32) Option {\n\treturn func(o *options) {\n\t\to.maxConcurrentStreams = n\n\t}\n}\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\to := &options{\n\t\tmaxConcurrentStreams: 100,\n\t}\n\tfor _, opt := range opts {\n\t\topt(o)\n\t}\n\n\ts := &Server{\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\topts:         o,\n\t\treadyChannel: make(chan struct{}),\n\t}\n\n\tgrpcOpts := []grpc.ServerOption{\n\t\tgrpc.MaxConcurrentStreams(o.maxConcurrentStreams),\n\t}\n\ts.server = grpc.NewServer(grpcOpts...)\n\tforwardrpc.RegisterForwardServer(s.server, s)\n\treturn s\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\tlistener, err := net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.listener = listener\n\tclose(s.readyChannel)\n\treturn s.server.Serve(listener)\n}\n\nfunc (s *Server) SendMetricsV2(stream forwardrpc.Forward_SendMetricsV2Server) error {\n\tfor {\n\t\tmetric, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn stream.SendAndClose(&forwardrpc.SendMetricsResponse{})\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := s.ingest.ProcessMetric(metric); err != nil {\n\t\t\ts.logger.WithError(err).Error(\"Failed to process metric\")\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, optionally with TLS security, and registers a test service for handling RPC calls.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, configures TLS if enabled, creates a new gRPC server instance, registers a test service, and starts serving incoming requests.\n\nInput:\n- port (int): The port number on which the server should listen\n- useTLS (bool): Flag indicating whether to use TLS security\n- certFile (string): Path to the TLS certificate file (required if useTLS is true)\n- keyFile (string): Path to the TLS private key file (required if useTLS is true)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"google.golang.org/grpc/interop\"\n\ttestpb \"google.golang.org/grpc/interop/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tp := strconv.Itoa(*port)\n\tlis, err := net.Listen(\"tcp\", \":\"+p)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tgrpclog.Fatalf(\"Failed to generate credentials %v\", err)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tserver := grpc.NewServer(opts...)\n\ttestpb.RegisterTestServiceServer(server, interop.NewTestServer())\n\tserver.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype server struct{}\n\nfunc (s *server) TestRPC(ctx context.Context, req *TestRequest) (*TestResponse, error) {\n\treturn &TestResponse{Message: \"OK\"}, nil\n}\n\ntype TestRequest struct {\n\tData string\n}\n\ntype TestResponse struct {\n\tMessage string\n}\n\nfunc RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {\n\ts.RegisterService(&_TestService_serviceDesc, srv)\n}\n\ntype TestServiceServer interface {\n\tTestRPC(context.Context, *TestRequest) (*TestResponse, error)\n}\n\nvar _TestService_serviceDesc = grpc.ServiceDesc{\n\tServiceName: \"TestService\",\n\tHandlerType: (*TestServiceServer)(nil),\n\tMethods: []grpc.MethodDesc{\n\t\t{\n\t\t\tMethodName: \"TestRPC\",\n\t\t\tHandler: func(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\t\t\t\tin := new(TestRequest)\n\t\t\t\tif err := dec(in); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tif interceptor == nil {\n\t\t\t\t\treturn srv.(TestServiceServer).TestRPC(ctx, in)\n\t\t\t\t}\n\t\t\t\tinfo := &grpc.UnaryServerInfo{\n\t\t\t\t\tServer:     srv,\n\t\t\t\t\tFullMethod: \"/TestService/TestRPC\",\n\t\t\t\t}\n\t\t\t\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\t\t\t\treturn srv.(TestServiceServer).TestRPC(ctx, req.(*TestRequest))\n\t\t\t\t}\n\t\t\t\treturn interceptor(ctx, in, info, handler)\n\t\t\t},\n\t\t},\n\t},\n\tStreams:  []grpc.StreamDesc{},\n\tMetadata: \"test.proto\",\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"Port to listen on\")\n\tuseTLS := flag.Bool(\"useTLS\", false, \"Enable TLS\")\n\tcertFile := flag.String(\"certFile\", \"\", \"TLS certificate file\")\n\tkeyFile := flag.String(\"keyFile\", \"\", \"TLS private key file\")\n\tflag.Parse()\n\n\tif *useTLS && (*certFile == \"\" || *keyFile == \"\") {\n\t\tlog.Fatalf(\"certFile and keyFile are required when useTLS is true\")\n\t}\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to generate credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\ts := grpc.NewServer(opts...)\n\tRegisterTestServiceServer(s, &server{})\n\tlog.Printf(\"Server listening on port %d\", *port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a gRPC server in Go that handles Bigtable administration and operations, with proper initialization and cleanup capabilities.\n\nStruct Description: The Server struct represents a gRPC server instance that manages Bigtable table administration and operations. It handles network connections, server lifecycle, and maintains internal state.\n\nFields:\nAddr: [string] - The network address the server is listening on\nl: [net.Listener] - The network listener for incoming connections\nsrv: [*grpc.Server] - The gRPC server instance\ns: [*server] - The internal server implementation handling business logic\n\nMethods:\nNewServer: [func(laddr string, opt ...grpc.ServerOption) (*Server, error)] -> Creates and starts a new Server instance\n- Input: laddr (string) - The address to listen on, opt (...grpc.ServerOption) - Optional gRPC server configurations\n- Output: (*Server, error) - Returns the server instance or an error if initialization fails\n- Description: Initializes the server, sets up the listener, registers gRPC services, and starts serving requests in a goroutine\n\nClose: [func(s *Server)] -> Properly shuts down the Server instance\n- Input: None (method receiver)\n- Output: None\n- Description: Stops the gRPC server, closes the listener, and cleans up internal resources",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl   net.Listener\n\tsrv *grpc.Server\n\ts   *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tsrv:  grpc.NewServer(opt...),\n\t\ts: &server{\n\t\t\ttables: make(map[string]*table),\n\t\t},\n\t}\n\tbtapb.RegisterBigtableTableAdminServer(s.srv, s.s)\n\tbtpb.RegisterBigtableServer(s.srv, s.s)\n\n\tgo s.srv.Serve(s.l)\n\n\treturn s, nil\n}\n\nfunc (s *Server) Close() {\n\ts.s.mu.Lock()\n\tif s.s.gcc != nil {\n\t\tclose(s.s.gcc)\n\t}\n\ts.s.mu.Unlock()\n\n\ts.srv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl    net.Listener\n\tsrv  *grpc.Server\n\ts    *server\n}\n\ntype server struct{}\n\nfunc NewServer(laddr string, opts ...grpc.ServerOption) (*Server, error) {\n\tln, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tinternalServer := &server{}\n\n\t// Register gRPC services here\n\t// pb.RegisterBigtableAdminServer(srv, internalServer)\n\n\tserverInstance := &Server{\n\t\tAddr: laddr,\n\t\tl:    ln,\n\t\tsrv:  srv,\n\t\ts:    internalServer,\n\t}\n\n\tgo func() {\n\t\tif err := srv.Serve(ln); err != nil {\n\t\t}\n\t}()\n\n\treturn serverInstance, nil\n}\n\nfunc (s *Server) Close() {\n\ts.srv.Stop()\n\ts.l.Close()\n}"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests, supports optional TLS encryption, and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The Start function initializes and runs a gRPC server with configurable network address and TLS settings. It sets up keepalive parameters, registers the service implementation, and handles OS signals for graceful shutdown.\n\nInput:\n- addr: string - The network address (host:port) to listen on\n- enableTLS: bool - Flag to enable/disable TLS encryption\n- certificate: auth.Certificate - Certificate configuration for TLS (when enabled)\n\nOutput: None (the function runs indefinitely until a termination signal is received)",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\tpb \"github.com/ouqiang/gocron/internal/modules/rpc/proto\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\nfunc Start(addr string, enableTLS bool, certificate auth.Certificate) {\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepAliveParams),\n\t\tgrpc.KeepaliveEnforcementPolicy(keepAlivePolicy),\n\t}\n\tif enableTLS {\n\t\ttlsConfig, err := certificate.GetTLSConfigForServer()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\topt := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\topts = append(opts, opt)\n\t}\n\tserver := grpc.NewServer(opts...)\n\tpb.RegisterTaskServer(server, Server{})\n\tlog.Infof(\"server listen on %s\", addr)\n\n\tgo func() {\n\t\terr = server.Serve(l)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM)\n\tfor {\n\t\ts := <-c\n\t\tlog.Infoln(\"\u6536\u5230\u4fe1\u53f7 -- \", s)\n\t\tswitch s {\n\t\tcase syscall.SIGHUP:\n\t\t\tlog.Infoln(\"\u6536\u5230\u7ec8\u7aef\u65ad\u5f00\u4fe1\u53f7, \u5ffd\u7565\")\n\t\tcase syscall.SIGINT, syscall.SIGTERM:\n\t\t\tlog.Info(\"\u5e94\u7528\u51c6\u5907\u9000\u51fa\")\n\t\t\tserver.GracefulStop()\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tauth \"example.com/auth\"\n)\n\nfunc Start(addr string, enableTLS bool, certificate auth.Certificate) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tka := keepalive.ServerParameters{\n\t\tTime:    30 * time.Second,\n\t\tTimeout: 10 * time.Second,\n\t}\n\topts = append(opts, grpc.KeepaliveParams(ka))\n\n\tif enableTLS {\n\t\tcert, err := tls.LoadX509KeyPair(certificate.CertFile, certificate.KeyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to load key pair: %v\", err)\n\t\t}\n\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t})\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tgrpcServer := grpc.NewServer(opts...)\n\n\t// Register your service implementation here\n\t// pb.RegisterYourServiceServer(grpcServer, &yourServiceImpl{})\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)\n\t<-sigChan\n\n\tgrpcServer.GracefulStop()\n}"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: Create a gRPC test server for monitoring metrics that can handle metric descriptor creation and time series requests, while tracking user agents and request counts.\n\nStruct Description: MetricsTestServer is a gRPC server implementation for testing metric monitoring functionality. It maintains state for tracking incoming requests and user agents, and provides methods for server control and data retrieval.\n\nFields:\n- lis: net.Listener - Network listener for the gRPC server\n- srv: *grpc.Server - gRPC server instance\n- Endpoint: string - Server's network endpoint address\n- userAgent: string - Last received User-Agent header from requests\n- createMetricDescriptorReqs: []*monitoringpb.CreateMetricDescriptorRequest - Collected metric descriptor requests\n- createServiceTimeSeriesReqs: []*monitoringpb.CreateTimeSeriesRequest - Collected time series requests\n- RetryCount: int - Number of retry attempts (usage context not shown in code)\n- mu: sync.Mutex - Mutex for thread-safe access to shared fields\n\nMethods:\n- Shutdown() -> None - Gracefully stops the gRPC server\n- UserAgent() -> string - Retrieves and clears the stored User-Agent\n- CreateServiceTimeSeriesRequests() -> []*monitoringpb.CreateTimeSeriesRequest - Retrieves and clears stored time series requests\n- appendCreateMetricDescriptorReq(context.Context, *monitoringpb.CreateMetricDescriptorRequest) -> None - Thread-safe method to store metric descriptor requests\n- appendCreateServiceTimeSeriesReq(context.Context, *monitoringpb.CreateTimeSeriesRequest) -> None - Thread-safe method to store time series requests and capture User-Agent\n- Serve() -> error - Starts serving gRPC requests\n- NewMetricTestServer() -> (*MetricsTestServer, error) - Constructor that initializes the server with default keepalive parameters and registers the metric service",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"cloud.google.com/go/monitoring/apiv3/v2/monitoringpb\"\n\tmetricpb \"google.golang.org/genproto/googleapis/api/metric\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\ntype MetricsTestServer struct {\n\tlis                         net.Listener\n\tsrv                         *grpc.Server\n\tEndpoint                    string\n\tuserAgent                   string\n\tcreateMetricDescriptorReqs  []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount                  int\n\tmu                          sync.Mutex\n}\n\nfunc (m *MetricsTestServer) Shutdown() {\n\tm.srv.GracefulStop()\n}\n\nfunc (m *MetricsTestServer) UserAgent() string {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tua := m.userAgent\n\tm.userAgent = \"\"\n\treturn ua\n}\n\nfunc (m *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\treqs := m.createServiceTimeSeriesReqs\n\tm.createServiceTimeSeriesReqs = nil\n\treturn reqs\n}\n\nfunc (m *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createMetricDescriptorReqs = append(m.createMetricDescriptorReqs, req)\n}\n\nfunc (m *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createServiceTimeSeriesReqs = append(m.createServiceTimeSeriesReqs, req)\n\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tm.userAgent = strings.Join(md.Get(\"User-Agent\"), \";\")\n\t}\n}\n\nfunc (m *MetricsTestServer) Serve() error {\n\treturn m.srv.Serve(m.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tsrv := grpc.NewServer(grpc.KeepaliveParams(keepalive.ServerParameters{Time: 5 * time.Minute}))\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttestServer := &MetricsTestServer{\n\t\tEndpoint: lis.Addr().String(),\n\t\tlis:      lis,\n\t\tsrv:      srv,\n\t}\n\n\tmonitoringpb.RegisterMetricServiceServer(\n\t\tsrv,\n\t\t&fakeMetricServiceServer{metricsTestServer: testServer},\n\t)\n\n\treturn testServer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\tmonitoringpb \"your/module/path/genproto/monitoringpb\"\n\tmetricpb \"your/module/path/genproto/metricpb\"\n\temptypb \"google.golang.org/protobuf/types/known/emptypb\"\n)\n\ntype MetricsTestServer struct {\n\tlis                          net.Listener\n\tsrv                          *grpc.Server\n\tEndpoint                     string\n\tuserAgent                    string\n\tcreateMetricDescriptorReqs   []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs  []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount                   int\n\tmu                           sync.Mutex\n}\n\nfunc (m *MetricsTestServer) Shutdown() {\n\tm.srv.GracefulStop()\n}\n\nfunc (m *MetricsTestServer) UserAgent() string {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tua := m.userAgent\n\tm.userAgent = \"\"\n\treturn ua\n}\n\nfunc (m *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\treqs := m.createServiceTimeSeriesReqs\n\tm.createServiceTimeSeriesReqs = make([]*monitoringpb.CreateTimeSeriesRequest, 0)\n\treturn reqs\n}\n\nfunc (m *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createMetricDescriptorReqs = append(m.createMetricDescriptorReqs, req)\n}\n\nfunc (m *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createServiceTimeSeriesReqs = append(m.createServiceTimeSeriesReqs, req)\n\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tif agents := md[\"user-agent\"]; len(agents) > 0 {\n\t\t\tm.userAgent = agents[0]\n\t\t}\n\t}\n}\n\nfunc (m *MetricsTestServer) Serve() error {\n\treturn m.srv.Serve(m.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tsrv := grpc.NewServer()\n\tmts := &MetricsTestServer{\n\t\tlis:                          lis,\n\t\tsrv:                          srv,\n\t\tEndpoint:                     lis.Addr().String(),\n\t\tuserAgent:                    \"\",\n\t\tcreateMetricDescriptorReqs:   make([]*monitoringpb.CreateMetricDescriptorRequest, 0),\n\t\tcreateServiceTimeSeriesReqs:  make([]*monitoringpb.CreateTimeSeriesRequest, 0),\n\t\tRetryCount:                   0,\n\t\tmu:                           sync.Mutex{},\n\t}\n\tmonitoringpb.RegisterMetricServiceServer(srv, mts)\n\treturn mts, nil\n}\n\nfunc (m *MetricsTestServer) CreateMetricDescriptor(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) (*metricpb.MetricDescriptor, error) {\n\tm.appendCreateMetricDescriptorReq(ctx, req)\n\treturn &metricpb.MetricDescriptor{}, nil\n}\n\nfunc (m *MetricsTestServer) CreateTimeSeries(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) (*emptypb.Empty, error) {\n\tm.appendCreateServiceTimeSeriesReq(ctx, req)\n\treturn &emptypb.Empty{}, nil\n}"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a mock gRPC server for OpenTelemetry traces receiver that can handle incoming trace data requests, track request metrics, and optionally use TLS for secure communication.\n\nStruct Description: The mockTracesReceiver struct implements a gRPC server for receiving OpenTelemetry trace data, tracking request counts and spans, and handling metadata. It embeds a base mockReceiver struct and implements the ptraceotlp.GRPCServer interface.\n\nFields:\n\nsrv: [*grpc.Server] - The gRPC server instance\nln: [net.Listener] - Network listener for the server\nrequestCount: [*atomic.Int32] - Counter for received requests\ntotalItems: [*atomic.Int32] - Counter for total spans received\nmux: [sync.Mutex] - Mutex for thread-safe operations\nmetadata: [metadata.MD] - Stores metadata from incoming requests\nexportError: [error] - Error to return from export operations\nexportResponse: [func() ptraceotlp.ExportResponse] - Function to generate export responses\nlastRequest: [ptrace.Traces] - Stores the last received trace data\nhasMetadata: [bool] - Flag indicating whether to process metadata\nspanCountByMetadata: [map[string]int] - Tracks span counts by metadata keys\n\nMethods:\n\nExport: [Name](ctx context.Context, req ptraceotlp.ExportRequest) -> (ptraceotlp.ExportResponse, error) - Handles incoming trace export requests, updates counters, and processes metadata\nstart: [Name]() -> () - Starts the gRPC server in a goroutine\n\nAssociated Functions:\n\notelArrowTracesReceiverOnGRPCServer: [Name](ln net.Listener, useTLS bool) -> (*mockTracesReceiver, error) - Creates and configures a new mock traces receiver with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype mockReceiver struct {\n\tsrv          *grpc.Server\n\tln           net.Listener\n\trequestCount *atomic.Int32\n\ttotalItems   *atomic.Int32\n\tmux          sync.Mutex\n\tmetadata     metadata.MD\n\texportError  error\n}\n\ntype mockTracesReceiver struct {\n\tptraceotlp.UnimplementedGRPCServer\n\tmockReceiver\n\texportResponse      func() ptraceotlp.ExportResponse\n\tlastRequest         ptrace.Traces\n\thasMetadata         bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (r *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tr.requestCount.Add(int32(1))\n\ttd := req.Traces()\n\tr.totalItems.Add(int32(td.SpanCount()))\n\tr.mux.Lock()\n\tdefer r.mux.Unlock()\n\tr.metadata, _ = metadata.FromIncomingContext(ctx)\n\tif r.hasMetadata {\n\t\tv1 := r.metadata.Get(\"key1\")\n\t\tv2 := r.metadata.Get(\"key2\")\n\t\thashKey := fmt.Sprintf(\"%s|%s\", v1, v2)\n\t\tr.spanCountByMetadata[hashKey] += (td.SpanCount())\n\t}\n\tr.lastRequest = td\n\treturn r.exportResponse(), r.exportError\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tsopts := []grpc.ServerOption{}\n\n\tif useTLS {\n\t\t_, currentFile, _, _ := runtime.Caller(0)\n\t\tbasepath := filepath.Dir(currentFile)\n\t\tcertpath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_cert.pem\"))\n\t\tkeypath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_key.pem\"))\n\n\t\tcreds, err := credentials.NewServerTLSFromFile(certpath, keypath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsopts = append(sopts, grpc.Creds(creds))\n\t}\n\n\trcv := &mockTracesReceiver{\n\t\tmockReceiver: mockReceiver{\n\t\t\tsrv:          grpc.NewServer(sopts...),\n\t\t\tln:           ln,\n\t\t\trequestCount: &atomic.Int32{},\n\t\t\ttotalItems:   &atomic.Int32{},\n\t\t},\n\t\texportResponse: ptraceotlp.NewExportResponse,\n\t}\n\n\tptraceotlp.RegisterGRPCServer(rcv.srv, rcv)\n\n\treturn rcv, nil\n}\n\nfunc (r *mockTracesReceiver) start() {\n\tgo func() {\n\t\t_ = r.srv.Serve(r.ln)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/ecdsa\"\n\t\"crypto/elliptic\"\n\t\"crypto/rand\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"encoding/pem\"\n\t\"math/big\"\n\t\"sync\"\n\t\"time\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"sync/atomic\"\n)\n\ntype mockReceiver struct{}\n\ntype mockTracesReceiver struct {\n\t*mockReceiver\n\tsrv              *grpc.Server\n\tln               net.Listener\n\trequestCount     atomic.Int32\n\ttotalItems       atomic.Int32\n\tmux              sync.Mutex\n\tmetadata         metadata.MD\n\texportError      error\n\texportResponse   func() ptraceotlp.ExportResponse\n\tlastRequest      ptrace.Traces\n\thasMetadata      bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (r *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tr.requestCount.Add(1)\n\ttraces := req.Traces()\n\tspanCount := 0\n\ttraces.ResourceSpans().ForEach(func(rs ptrace.ResourceSpans) {\n\t\trs.ScopeSpans().ForEach(func(ils ptrace.ScopeSpans) {\n\t\t\tspanCount += ils.Spans().Len()\n\t\t})\n\t})\n\tr.totalItems.Add(int32(spanCount))\n\n\tif r.hasMetadata {\n\t\tmd, ok := metadata.FromIncomingContext(ctx)\n\t\tif ok {\n\t\t\tr.mux.Lock()\n\t\t\tdefer r.mux.Unlock()\n\t\t\tr.metadata = md.Copy()\n\t\t\tfor key := range md {\n\t\t\t\tr.spanCountByMetadata[key] += spanCount\n\t\t\t}\n\t\t}\n\t}\n\n\tr.mux.Lock()\n\tdefer r.mux.Unlock()\n\tr.lastRequest = traces.Clone()\n\n\tif r.exportError != nil {\n\t\treturn ptraceotlp.NewExportResponse(), r.exportError\n\t}\n\tif r.exportResponse != nil {\n\t\treturn r.exportResponse(), nil\n\t}\n\treturn ptraceotlp.NewExportResponse(), nil\n}\n\nfunc (r *mockTracesReceiver) start() {\n\tgo r.srv.Serve(r.ln)\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tvar opts []grpc.ServerOption\n\tif useTLS {\n\t\tcert, err := generateSelfSignedCert()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(&tls.Config{Certificates: []tls.Certificate{cert}, MinVersion: tls.VersionTLS12})))\n\t}\n\tsrv := grpc.NewServer(opts...)\n\trcvr := &mockTracesReceiver{\n\t\tmockReceiver: &mockReceiver{},\n\t\tsrv:          srv,\n\t\tln:           ln,\n\t\trequestCount: atomic.Int32{},\n\t\ttotalItems:   atomic.Int32{},\n\t\tmux:          sync.Mutex{},\n\t\tmetadata:     metadata.MD{},\n\t\tspanCountByMetadata: make(map[string]int),\n\t\thasMetadata:  true,\n\t}\n\tptraceotlp.RegisterGRPCServer(srv, rcvr)\n\treturn rcvr, nil\n}\n\nfunc generateSelfSignedCert() (tls.Certificate, error) {\n\tpriv, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)\n\tif err != nil {\n\t\treturn tls.Certificate{}, err\n\t}\n\tserialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)\n\tserialNumber, err := rand.Int(rand.Reader, serialNumberLimit)\n\tif err != nil {\n\t\treturn tls.Certificate{}, err\n\t}\n\ttemplate := x509.Certificate{\n\t\tSerialNumber: serialNumber,\n\t\tSubject: pkix.Name{\n\t\t\tOrganization: []string{\"Mock Service\"},\n\t\t},\n\t\tNotBefore:             time.Now(),\n\t\tNotAfter:              time.Now().Add(1 * time.Hour),\n\t\tKeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment,\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\n\t\tBasicConstraintsValid: true,\n\t}\n\tderBytes, err := x509.CreateCertificate(rand.Reader, &template, &template, &priv.PublicKey, priv)\n\tif err != nil {\n\t\treturn tls.Certificate{}, err\n\t}\n\tcertPEM := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: derBytes})\n\tkeyBytes, err := x509.MarshalPKCS8PrivateKey(priv)\n\tif err != nil {\n\t\treturn tls.Certificate{}, err\n\t}\n\tkeyPEM := pem.EncodeToMemory(&pem.Block{Type: \"PRIVATE KEY\", Bytes: keyBytes})\n\treturn tls.X509KeyPair(certPEM, keyPEM)\n}"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a gRPC server for handling OpenTelemetry Protocol (OTLP) trace data, including setup of tracing components and a bounded queue for admission control.\n\nStruct Description: The otlpReceiver struct represents a receiver for OTLP trace data over gRPC, which processes incoming traces and forwards them to the next consumer in the pipeline.\n\nFields:\n- nextConsumer: consumer.Traces - The next trace consumer in the processing pipeline\n- obsrecv: *receiverhelper.ObsReport - Observability reporter for receiver metrics\n- bq: *admission2.BoundedQueue - Bounded queue for admission control of incoming requests\n\nMethods:\n- New: (logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) -> *otlpReceiver - Constructor function that creates a new otlpReceiver instance\n- otlpReceiverOnGRPCServer: (t *testing.T, tc consumer.Traces) -> (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) - Sets up and starts a gRPC server with OTLP trace receiver capabilities, returning the server address, in-memory exporter, and tracer provider for testing purposes",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"go.opentelemetry.io/collector/receiver/receivertest\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\tln, err := net.Listen(\"tcp\", \"localhost:\")\n\trequire.NoError(t, err, \"Failed to find an available address to run the gRPC server: %v\", err)\n\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, ln.Close())\n\t})\n\n\texp := tracetest.NewInMemoryExporter()\n\n\ttp := trace.NewTracerProvider(trace.WithSyncer(exp))\n\ttelset := componenttest.NewNopTelemetrySettings()\n\ttelset.TracerProvider = tp\n\n\tset := receivertest.NewNopSettings()\n\tset.TelemetrySettings = telset\n\n\tset.ID = component.NewIDWithName(component.MustNewType(\"otlp\"), \"trace\")\n\tobsrecv, err := receiverhelper.NewObsReport(receiverhelper.ObsReportSettings{\n\t\tReceiverID:             set.ID,\n\t\tTransport:              \"grpc\",\n\t\tReceiverCreateSettings: set,\n\t})\n\trequire.NoError(t, err)\n\tbq, err := admission2.NewBoundedQueue(set.ID, telset, maxBytes, 0)\n\trequire.NoError(t, err)\n\tr := New(zap.NewNop(), tc, obsrecv, bq)\n\tsrv := grpc.NewServer()\n\tptraceotlp.RegisterGRPCServer(srv, r)\n\tgo func() {\n\t\t_ = srv.Serve(ln)\n\t}()\n\n\treturn ln.Addr(), exp, tp\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"go.opentelemetry.io/collector/component\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/receiver/receiverhelper\"\n\t\"go.opentelemetry.io/proto/otlp/trace/v1/otlppb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\t\"go.uber.org/zap\"\n\t\"go.opentelemetry.io/sdk/trace\"\n\ttracetest \"go.opentelemetry.io/sdk/export/trace\"\n\tadmission2 \"github.com/example/admission\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc (r *otlpReceiver) Export(ctx context.Context, req *otlppb.ExportTraceServiceRequest) (*otlppb.ExportTraceServiceResponse, error) {\n\tif r.bq != nil && !r.bq.TryOffer() {\n\t\treturn nil, status.Errorf(codes.ResourceExhausted, \"admission queue full\")\n\t}\n\tdefer func() {\n\t\tif r.bq != nil {\n\t\t\tr.bq.Release()\n\t\t}\n\t}()\n\n\tctx = r.obsrecv.StartTracesOp(ctx)\n\tdefer r.obsrecv.EndTracesOp(ctx, \"otlp\", 0, nil)\n\n\ttd, err := ptrace.ProtoUnmarshaler{}.UnmarshalTraces(req.ResourceSpans)\n\tif err != nil {\n\t\treturn nil, status.Errorf(codes.InvalidArgument, \"failed to unmarshal traces: %v\", err)\n\t}\n\n\tif err := r.nextConsumer.ConsumeTraces(ctx, td); err != nil {\n\t\treturn nil, status.Errorf(codes.Internal, \"failed to process traces: %v\", err)\n\t}\n\n\treturn &otlppb.ExportTraceServiceResponse{}, nil\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\texporter := tracetest.NewInMemoryExporter(t)\n\ttp := trace.NewTracerProvider(trace.WithSyncer(exporter))\n\n\tbq := admission2.NewBoundedQueue(100)\n\n\tobsrecv, err := receiverhelper.NewObsReport(receiverhelper.Settings{\n\t\tReceiverID: component.NewID(\"otlp\"),\n\t\tTransport:  \"grpc\",\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\treceiver := New(zap.NewNop(), tc, obsrecv, bq)\n\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\totlppb.RegisterTraceServiceServer(grpcServer, receiver)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tt.Logf(\"gRPC server error: %v\", err)\n\t\t}\n\t}()\n\n\treturn lis.Addr(), exporter, tp\n}"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with basic lifecycle management capabilities, including initialization, startup, and shutdown.\n\nStruct Description: The Server struct represents a gRPC server instance with network listening capabilities. It manages the server lifecycle and provides methods to start and stop the server gracefully.\n\nFields:\nAddr: [string] - The network address (IP:port) where the server is listening\nPort: [int] - The port number on which the server is listening\nl: [net.Listener] - The network listener for incoming connections\nGsrv: [*grpc.Server] - The gRPC server instance\n\nMethods:\nNewServer: [func(opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance with default settings (random available port)\nNewServerWithPort: [func(port int, opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance on the specified port\nStart: [func()] -> [] - Starts the gRPC server in a goroutine to handle incoming requests\nClose: [func()] -> [] - Gracefully stops the gRPC server and closes the network listener",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\treturn NewServerWithPort(0, opts...)\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"127.0.0.1:%d\", port))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tPort: parsePort(l.Addr().String()),\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) Start() {\n\tgo func() {\n\t\tif err := s.Gsrv.Serve(s.l); err != nil {\n\t\t\tlog.Printf(\"testutil.Server.Start: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Close() {\n\ts.Gsrv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\taddr := l.Addr().String()\n\t_, portStr, err := net.SplitHostPort(addr)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn nil, err\n\t}\n\n\tport, err := strconv.Atoi(portStr)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn nil, err\n\t}\n\n\treturn &Server{\n\t\tAddr: addr,\n\t\tPort: port,\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}, nil\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\taddr := l.Addr().String()\n\t_, portStr, err := net.SplitHostPort(addr)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn nil, err\n\t}\n\n\tparsedPort, err := strconv.Atoi(portStr)\n\tif err != nil {\n\t\tl.Close()\n\t\treturn nil, err\n\t}\n\n\treturn &Server{\n\t\tAddr: addr,\n\t\tPort: parsedPort,\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}, nil\n}\n\nfunc (s *Server) Start() {\n\tgo s.Gsrv.Serve(s.l)\n}\n\nfunc (s *Server) Close() {\n\ts.Gsrv.GracefulStop()\n\ts.l.Close()\n}"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls for an Echo service, including secure communication with transport credentials.\n\nFunction Description: The `startGRPCServer` function initializes and starts a gRPC server with the provided listener and transport credentials. It registers an Echo service implementation and begins serving incoming requests.\n\nInput:\n- `lis` [net.Listener] - A network listener that specifies the address and port to listen on\n- `creds` [credentials.TransportCredentials] - Transport credentials for secure communication (TLS)\n\nOutput:\n- `error` - Returns an error if the server fails to start or encounters a fatal error during operation, otherwise runs indefinitely serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype ecServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *ecServer) UnaryEcho(_ context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc newServer() *ecServer {\n\treturn &ecServer{}\n}\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, newServer())\n\treturn s.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\tserver := grpc.NewServer(grpc.Creds(creds))\n\tRegisterEchoServer(server, &echoServer{})\n\treturn server.Serve(lis)\n}\n\ntype echoServer struct{}"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the specified gRPC service.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified TCP port, configures keepalive policies, registers the Echo service, and starts serving requests. It handles any errors that occur during setup or serving.\n\nInput: \n- port (string): The port number on which the server should listen, formatted as a string (e.g., \":50051\").\n- kaep (keepalive.EnforcementPolicy): The keepalive enforcement policy for the server.\n- kasp (keepalive.ServerParameters): The keepalive server parameters.\n\nOutput: \n- None (the function runs indefinitely until an error occurs or the server is stopped).\n- Errors during setup or serving are logged and the program exits.\n\nNote: The function assumes the existence of a pre-defined `server` struct that implements the `EchoServer` interface from the generated protobuf code.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\taddress := fmt.Sprintf(\":%v\", *port)\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\tpb \"example.com/echopb\"\n)\n\nfunc main() {\n\tport := \":50051\"\n\tkaep := keepalive.EnforcementPolicy{\n\t\tMinTime:             30 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\tkasp := keepalive.ServerParameters{\n\t\tTime:    30 * time.Second,\n\t\tTimeout: 10 * time.Second,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tgrpcServer := grpc.NewServer(\n\t\tgrpc.KeepaliveEnforcementPolicy(kaep),\n\t\tgrpc.KeepaliveParams(kasp),\n\t)\n\n\tpb.RegisterEchoServer(grpcServer, &server{})\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Create a function to start a gRPC server for signal exchange, including setting up a network listener and registering the server with gRPC.\n\nFunction Description: The function `startSignal` initializes and starts a gRPC server for signal exchange. It creates a TCP listener on an available port, initializes a new gRPC server instance, registers the signal exchange service, and starts the server in a goroutine. The function is designed for testing purposes and includes error handling.\n\nInput: \n- `t *testing.T`: A testing context for error reporting and test helpers.\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance.\n- `net.Listener`: The network listener used by the gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tsigProto \"github.com/netbirdio/netbird/signal/proto\"\n\tsig \"github.com/netbirdio/netbird/signal/server\"\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts := grpc.NewServer()\n\tsrv, err := sig.NewServer(context.Background(), otel.Meter(\"\"))\n\trequire.NoError(t, err)\n\n\tsigProto.RegisterSignalExchangeServer(s, srv)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn s, lis\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"example.com/signal_exchange/proto\" // Placeholder for actual proto package\n)\n\ntype signalExchangeServer struct {\n\tpb.UnimplementedSignalExchangeServiceServer\n}\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create listener: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\tpb.RegisterSignalExchangeServiceServer(s, &signalExchangeServer{})\n\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tt.Fatalf(\"Failed to serve gRPC: %v\", err)\n\t\t}\n\t}()\n\n\treturn s, lis\n}"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Create a gRPC server for a translation service that can handle text translation requests and return mock translations for testing purposes.\n\nStruct Description: The fakeTranslationServer struct implements a mock gRPC server for the TranslationService, providing a simple translation response without requiring an actual translation service.\n\nFields:\n- UnimplementedTranslationServiceServer: embed - Base type from translatepb package that provides default implementations for all service methods\n\nMethods:\n- TranslateText: [Name](ctx context.Context, req *translatepb.TranslateTextRequest) -> (*translatepb.TranslateTextResponse, error) - Handles translation requests by returning a mock response containing \"Hello World\" as the translated text",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\ttranslate \"cloud.google.com/go/translate/apiv3\"\n\t\"cloud.google.com/go/translate/apiv3/translatepb\"\n\t\"google.golang.org/api/option\"\n)\n\ntype fakeTranslationServer struct {\n\ttranslatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n\tresp := &translatepb.TranslateTextResponse{\n\t\tTranslations: []*translatepb.Translation{\n\t\t\t{TranslatedText: \"Hello World\"},\n\t\t},\n\t}\n\treturn resp, nil\n}\n\nfunc TestTranslateTextWithConcreteClient(t *testing.T) {\n\tctx := context.Background()\n\n\tfakeTranslationServer := &fakeTranslationServer{}\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgsrv := grpc.NewServer()\n\ttranslatepb.RegisterTranslationServiceServer(gsrv, fakeTranslationServer)\n\tfakeServerAddr := l.Addr().String()\n\tgo func() {\n\t\tif err := gsrv.Serve(l); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tclient, err := translate.NewTranslationClient(ctx,\n\t\toption.WithEndpoint(fakeServerAddr),\n\t\toption.WithoutAuthentication(),\n\t\toption.WithGRPCDialOption(grpc.WithInsecure()),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"translatepb\"\n)\n\ntype fakeTranslationServer struct {\n\tpb.UnimplementedTranslationServiceServer\n}\n\nfunc (s *fakeTranslationServer) TranslateText(ctx context.Context, req *pb.TranslateTextRequest) (*pb.TranslateTextResponse, error) {\n\treturn &pb.TranslateTextResponse{\n\t\tTranslatedText: \"Hello World\",\n\t}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterTranslationServiceServer(grpcServer, &fakeTranslationServer{})\n\tfmt.Println(\"Mock translation server running on port 50051\")\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 291,
    "Instruction": "The provided reference code is at the function level, so I'll provide instructions in the function-level format:\n\nTask Description: Implement a gRPC server setup in Go that handles both Unix domain sockets and TCP connections with TLS support and keepalive configurations.\n\nFunction Description: The code consists of two main functions for setting up a gRPC server: `createListener` creates a network listener for the server, and `grpcServer` configures and creates a gRPC server instance with optional TLS and keepalive settings.\n\nInput:\n1. For `createListener` function:\n   - config [Config] - Configuration object containing listener address and other settings\n\n2. For `grpcServer` function:\n   - config [Config] - Configuration object containing gRPC server settings and TLS configuration\n\nOutput:\n1. For `createListener` function:\n   - [net.Listener] - Network listener ready for gRPC server\n   - [error] - Error if listener creation fails\n\n2. For `grpcServer` function:\n   - [*grpc.Server] - Configured gRPC server instance\n   - [error] - Error if server creation fails\n\nThe Config struct used as input is defined as:\n- GRPCServer [*grpc.Server] - Optional pre-configured gRPC server instance\n- Listener [string] - Network address to listen on (e.g., \"unix:///path/to/socket\" or \"tcp://:port\")\n- Endpoint [string] - Server endpoint\n- ServerTLSConfig [tls.Config] - TLS configuration for secure connections",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/k3s-io/kine/pkg/util\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"go.etcd.io/etcd/server/v3/embed\"\n)\n\ntype Config struct {\n\tGRPCServer           *grpc.Server\n\tListener             string\n\tEndpoint             string\n\tServerTLSConfig      tls.Config\n}\n\nfunc createListener(config Config) (ret net.Listener, rerr error) {\n\tif config.Listener == \"\" {\n\t\tconfig.Listener = KineSocket\n\t}\n\tscheme, address := util.SchemeAndAddress(config.Listener)\n\n\tif scheme == \"unix\" {\n\t\tif err := os.Remove(address); err != nil && !os.IsNotExist(err) {\n\t\t\tlogrus.Warnf(\"failed to remove socket %s: %v\", address, err)\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := os.Chmod(address, 0600); err != nil {\n\t\t\t\trerr = err\n\t\t\t}\n\t\t}()\n\t} else {\n\t\tscheme = \"tcp\"\n\t}\n\n\treturn net.Listen(scheme, address)\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\tgopts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\t\tMinTime:             embed.DefaultGRPCKeepAliveMinTime,\n\t\t\tPermitWithoutStream: false,\n\t\t}),\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tTime:    embed.DefaultGRPCKeepAliveInterval,\n\t\t\tTimeout: embed.DefaultGRPCKeepAliveTimeout,\n\t\t}),\n\t}\n\n\tif config.ServerTLSConfig.CertFile != \"\" && config.ServerTLSConfig.KeyFile != \"\" {\n\t\tcreds, err := credentials.NewServerTLSFromFile(config.ServerTLSConfig.CertFile, config.ServerTLSConfig.KeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tgopts = append(gopts, grpc.Creds(creds))\n\t}\n\n\treturn grpc.NewServer(gopts...), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"net/url\"\n\t\"os\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Config struct {\n\tGRPCServer       *grpc.Server\n\tListener         string\n\tEndpoint         string\n\tServerTLSConfig  tls.Config\n}\n\nfunc createListener(config Config) (net.Listener, error) {\n\tu, err := url.Parse(config.Listener)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar listener net.Listener\n\tswitch u.Scheme {\n\tcase \"unix\":\n\t\tsocketPath := u.Path\n\t\tif _, err := os.Stat(socketPath); err == nil {\n\t\t\tif err := os.Remove(socketPath); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\tlistener, err = net.Listen(\"unix\", socketPath)\n\tcase \"tcp\":\n\t\thost := u.Host\n\t\tif host == \"\" {\n\t\t\thost = \":0\"\n\t\t}\n\t\tlistener, err = net.Listen(\"tcp\", host)\n\tdefault:\n\t\treturn nil, errors.New(\"unsupported protocol scheme\")\n\t}\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn listener, nil\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\tvar options []grpc.ServerOption\n\n\tif config.ServerTLSConfig != nil {\n\t\tcreds := credentials.NewTLS(&config.ServerTLSConfig)\n\t\toptions = append(options, grpc.Creds(creds))\n\t}\n\n\tkaep := keepalive.ServerParameters{\n\t\tMaxConnectionIdle:     15 * time.Minute,\n\t\tMaxConnectionAge:      30 * time.Minute,\n\t\tMaxConnectionAgeGrace: 5 * time.Minute,\n\t\tTime:                  30 * time.Second,\n\t\tTimeout:               10 * time.Second,\n\t}\n\toptions = append(options, grpc.KeepaliveParams(kaep))\n\n\tserver := grpc.NewServer(options...)\n\treturn server, nil\n}"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Create a gRPC server in Go that implements an echo service and health checking functionality. The server should listen on a specified port, handle incoming gRPC requests, and periodically toggle its health status between SERVING and NOT_SERVING states.\n\nFunction Description: The main function sets up a gRPC server with echo service and health check capabilities. It creates a TCP listener, initializes the gRPC server, registers services, and starts serving requests. A background goroutine periodically changes the health status for demonstration purposes.\n\nInput:\n- port (int): The TCP port number on which the server should listen\n- sleep (time.Duration): The interval at which health status should toggle\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Errors are logged if they occur during server setup or operation\n\nNote: The function uses package-level variables for port and sleep duration (typically set via command-line flags) and assumes the existence of an echoServer struct that implements the Echo service interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n\t\"google.golang.org/grpc/health\"\n\thealthgrpc \"google.golang.org/grpc/health/grpc_health_v1\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\thealthcheck := health.NewServer()\n\thealthgrpc.RegisterHealthServer(s, healthcheck)\n\tpb.RegisterEchoServer(s, &echoServer{})\n\n\tgo func() {\n\t\tnext := healthpb.HealthCheckResponse_SERVING\n\n\t\tfor {\n\t\t\thealthcheck.SetServingStatus(system, next)\n\n\t\t\tif next == healthpb.HealthCheckResponse_SERVING {\n\t\t\t\tnext = healthpb.HealthCheckResponse_NOT_SERVING\n\t\t\t} else {\n\t\t\t\tnext = healthpb.HealthCheckResponse_SERVING\n\t\t\t}\n\n\t\t\ttime.Sleep(*sleep)\n\t\t}\n\t}()\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\thealth \"google.golang.org/grpc/health\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\nvar (\n\tport  = flag.Int(\"port\", 50051, \"Port to serve on\")\n\tsleep = flag.Duration(\"sleep\", 5*time.Second, \"Health toggle interval\")\n)\n\ntype echoServer struct{}\n\nfunc (s *echoServer) Echo(ctx context.Context, req *struct{}) (*struct{}, error) {\n\treturn &struct{}{}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\thealthServer := health.NewServer()\n\tgrpcServer := grpc.NewServer()\n\n\thealthpb.RegisterHealthServer(grpcServer, healthServer)\n\tRegisterEchoServer(grpcServer, &echoServer{})\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tstatus := true\n\t\tfor {\n\t\t\ttime.Sleep(*sleep)\n\t\t\tif status {\n\t\t\t\thealthServer.SetServingStatus(\"\", healthpb.HealthCheckResponse_NOT_SERVING)\n\t\t\t} else {\n\t\t\t\thealthServer.SetServingStatus(\"\", healthpb.HealthCheckResponse_SERVING)\n\t\t\t}\n\t\t\tstatus = !status\n\t\t}\n\t}()\n\n\tlog.Printf(\"Starting server on port %d\", *port)\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a gRPC server in Go that provides a simple key-value store service with various RPC methods for setting, getting, and streaming items.\n\nStruct Description: The intStoreServer struct implements a gRPC server for a key-value store service, handling item storage and retrieval operations through different RPC patterns (unary, server streaming, client streaming, and bidirectional streaming).\n\nFields:\nAddr: string - The network address where the server is listening\nl: net.Listener - The network listener for incoming connections\ngsrv: *grpc.Server - The gRPC server instance\nitems: map[string]int32 - The internal storage for key-value pairs\n\nMethods:\nnewIntStoreServer: () -> *intStoreServer - Creates and starts a new server instance on an available port\nstop: () -> () - Gracefully shuts down the server\nSet: (context.Context, *pb.Item) -> (*pb.SetResponse, error) - Unary RPC to set a key-value pair\nsetItem: (*pb.Item) -> int32 - Internal helper method to store an item\nGet: (context.Context, *pb.GetRequest) -> (*pb.Item, error) - Unary RPC to retrieve a value by key\nListItems: (*pb.ListItemsRequest, pb.IntStore_ListItemsServer) -> error - Server streaming RPC to list items matching criteria\nSetStream: (pb.IntStore_SetStreamServer) -> error - Client streaming RPC to set multiple items\nStreamChat: (pb.IntStore_StreamChatServer) -> error - Bidirectional streaming RPC for chat-like communication",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"cloud.google.com/go/rpcreplay/proto/intstore\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype intStoreServer struct {\n\tpb.IntStoreServer\n\n\tAddr string\n\tl    net.Listener\n\tgsrv *grpc.Server\n\n\titems map[string]int32\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts := &intStoreServer{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tgsrv: grpc.NewServer(),\n\t}\n\tpb.RegisterIntStoreServer(s.gsrv, s)\n\tgo s.gsrv.Serve(s.l)\n\treturn s\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.gsrv.Stop()\n\ts.l.Close()\n}\n\nfunc (s *intStoreServer) Set(_ context.Context, item *pb.Item) (*pb.SetResponse, error) {\n\told := s.setItem(item)\n\treturn &pb.SetResponse{PrevValue: old}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *pb.Item) int32 {\n\tif s.items == nil {\n\t\ts.items = map[string]int32{}\n\t}\n\told := s.items[item.Name]\n\ts.items[item.Name] = item.Value\n\treturn old\n}\n\nfunc (s *intStoreServer) Get(_ context.Context, req *pb.GetRequest) (*pb.Item, error) {\n\tval, ok := s.items[req.Name]\n\tif !ok {\n\t\treturn nil, status.Errorf(codes.NotFound, \"%q\", req.Name)\n\t}\n\treturn &pb.Item{Name: req.Name, Value: val}, nil\n}\n\nfunc (s *intStoreServer) ListItems(req *pb.ListItemsRequest, ss pb.IntStore_ListItemsServer) error {\n\tfor name, val := range s.items {\n\t\tif val > req.GreaterThan {\n\t\t\tif err := ss.Send(&pb.Item{Name: name, Value: val}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(ss pb.IntStore_SetStreamServer) error {\n\tn := 0\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.setItem(item)\n\t\tn++\n\t}\n\treturn ss.SendAndClose(&pb.Summary{Count: int32(n)})\n}\n\nfunc (s *intStoreServer) StreamChat(ss pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := ss.Send(item); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"example.com/proto\"\n)\n\ntype intStoreServer struct {\n\tAddr  string\n\tl     net.Listener\n\tgsrv  *grpc.Server\n\titems map[string]int32\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsrv := &intStoreServer{\n\t\tAddr:  l.Addr().String(),\n\t\tl:     l,\n\t\tgsrv:  grpc.NewServer(),\n\t\titems: make(map[string]int32),\n\t}\n\tpb.RegisterIntStoreServer(srv.gsrv, srv)\n\tgo srv.gsrv.Serve(srv.l)\n\treturn srv\n}\n\nfunc (srv *intStoreServer) stop() {\n\tsrv.gsrv.GracefulStop()\n\tsrv.l.Close()\n}\n\nfunc (srv *intStoreServer) Set(ctx context.Context, item *pb.Item) (*pb.SetResponse, error) {\n\tprev := srv.setItem(item)\n\treturn &pb.SetResponse{PreviousValue: prev}, nil\n}\n\nfunc (srv *intStoreServer) setItem(item *pb.Item) int32 {\n\tkey := item.Key\n\tval := item.Value\n\tprev := srv.items[key]\n\tsrv.items[key] = val\n\treturn prev\n}\n\nfunc (srv *intStoreServer) Get(ctx context.Context, req *pb.GetRequest) (*pb.Item, error) {\n\tkey := req.Key\n\tval, exists := srv.items[key]\n\tif !exists {\n\t\treturn nil, status.Errorf(codes.NotFound, \"key %s not found\", key)\n\t}\n\treturn &pb.Item{Key: key, Value: val}, nil\n}\n\nfunc (srv *intStoreServer) ListItems(req *pb.ListItemsRequest, stream pb.IntStore_ListItemsServer) error {\n\tctx := stream.Context()\n\tprefix := req.Prefix\n\tfor k, v := range srv.items {\n\t\tif strings.HasPrefix(k, prefix) {\n\t\t\tif err := stream.Send(&pb.Item{Key: k, Value: v}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif done := ctx.Done(); done != nil {\n\t\t\t\treturn ctx.Err()\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (srv *intStoreServer) SetStream(stream pb.IntStore_SetStreamServer) error {\n\tcount := int32(0)\n\tfor {\n\t\titem, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.setItem(item)\n\t\tcount++\n\t}\n\treturn stream.SendAndClose(&pb.SetStreamResponse{Count: count})\n}\n\nfunc (srv *intStoreServer) StreamChat(stream pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tkey := msg.Key\n\t\tval, ok := srv.items[key]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tif err := stream.Send(&pb.Item{Key: key, Value: val}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with configurable network settings, TLS security, and keepalive parameters.\n\nStruct Description: The Server struct represents a gRPC server instance with network listener capabilities. It provides methods to start and stop the server, and handles configuration of security and connection parameters.\n\nFields:\nListener: [net.Listener] - The network listener for incoming connections\nServer: [*grpc.Server] - The gRPC server instance\n\nMethods:\nStart: [Name]() -> [error] - Starts the gRPC server and begins listening for incoming requests. Returns an error if the listener or server is not initialized.\nStop: [Name]() -> [void] - Gracefully stops the gRPC server if it's running.\nNewServer: [Name](address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) -> (*Server, error) - Creates a new Server instance with the specified address, TLS configuration, and keepalive parameters. Sets up default values for message sizes, connection timeout, and enforcement policy if not provided. Returns the server instance or an error if initialization fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil {\n\t\treturn errors.New(\"nil listener\")\n\t}\n\n\tif s.Server == nil {\n\t\treturn errors.New(\"nil server\")\n\t}\n\n\treturn s.Server.Serve(s.Listener)\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.Stop()\n\t}\n}\n\nfunc NewServer(\n\taddress string,\n\ttlsConf *tls.Config,\n\tsrvKaOpts *keepalive.ServerParameters,\n) (*Server, error) {\n\tif address == \"\" {\n\t\treturn nil, errors.New(\"server listen address not provided\")\n\t}\n\n\tlistener, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar serverOpts []grpc.ServerOption\n\n\tif srvKaOpts != nil {\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(*srvKaOpts))\n\t} else {\n\t\tserverKeepAliveParameters := keepalive.ServerParameters{\n\t\t\tTime:    1 * time.Minute,\n\t\t\tTimeout: 20 * time.Second,\n\t\t}\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(serverKeepAliveParameters))\n\t}\n\n\tif tlsConf != nil {\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(tlsConf)))\n\t}\n\n\tserverOpts = append(serverOpts, grpc.MaxSendMsgSize(maxSendMessageSize))\n\tserverOpts = append(serverOpts, grpc.MaxRecvMsgSize(maxRecvMessageSize))\n\n\tkep := keepalive.EnforcementPolicy{\n\t\tMinTime:             serverMinInterval,\n\t\tPermitWithoutStream: true,\n\t}\n\tserverOpts = append(serverOpts, grpc.KeepaliveEnforcementPolicy(kep))\n\n\tserverOpts = append(serverOpts, grpc.ConnectionTimeout(connectionTimeout))\n\n\tserver := grpc.NewServer(serverOpts...)\n\n\treturn &Server{Listener: listener, Server: server}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil || s.Server == nil {\n\t\treturn errors.New(\"server or listener not initialized\")\n\t}\n\treturn s.Server.Serve(s.Listener)\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.GracefulStop()\n\t}\n}\n\nfunc NewServer(address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) (*Server, error) {\n\tln, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tif tlsConf != nil {\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(tlsConf)))\n\t}\n\n\tif srvKaOpts != nil {\n\t\topts = append(opts, grpc.KeepaliveParams(*srvKaOpts))\n\t} else {\n\t\topts = append(opts, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tMaxConnectionIdle: 15 * time.Minute,\n\t\t\tTime:              30 * time.Second,\n\t\t\tTimeout:           10 * time.Second,\n\t\t\tPermitWithoutStream: true,\n\t\t}))\n\t}\n\n\topts = append(opts, grpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\tMinTime:             5 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}))\n\n\topts = append(opts, grpc.MaxRecvMsgSize(4*1024*1024))\n\topts = append(opts, grpc.MaxSendMsgSize(4*1024*1024))\n\topts = append(opts, grpc.ConnectionTimeout(120*time.Second))\n\n\tgrpcServer := grpc.NewServer(opts...)\n\treturn &Server{\n\t\tListener: ln,\n\t\tServer:   grpcServer,\n\t}, nil\n}"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that sets up and starts a mock gRPC server for management service testing, including generating a WireGuard key for authentication purposes.\n\nFunction Description: The function `startMockManagement` initializes and starts a mock gRPC server that implements a management service interface. It creates a TCP listener on an available port, generates a WireGuard key pair for server authentication, and registers mock implementations of the management service methods. The server runs in a goroutine to handle incoming requests asynchronously.\n\nInput: \n- t *testing.T: Testing context for error reporting and test helpers\n\nOutput:\n- *grpc.Server: The created gRPC server instance\n- net.Listener: The network listener for the server\n- *mock_server.ManagementServiceServerMock: The mock implementation of the management service\n- wgtypes.Key: The generated WireGuard private key for the server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server/mock_server\"\n\t\"golang.zx2c4.com/wireguard/wgctrl/wgtypes\"\n)\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\ts := grpc.NewServer()\n\n\tserverKey, err := wgtypes.GenerateKey()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmgmtMockServer := &mock_server.ManagementServiceServerMock{\n\t\tGetServerKeyFunc: func(context.Context, *mgmtProto.Empty) (*mgmtProto.ServerKeyResponse, error) {\n\t\t\tresponse := &mgmtProto.ServerKeyResponse{\n\t\t\t\tKey: serverKey.PublicKey().String(),\n\t\t\t}\n\t\t\treturn response, nil\n\t\t},\n\t}\n\n\tmgmtProto.RegisterManagementServiceServer(s, mgmtMockServer)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\treturn s, lis, mgmtMockServer, serverKey\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"crypto/rand\"\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/mock\"\n\t\"google.golang.org/grpc\"\n\t\"golang.org/x/crypto/curve25519\"\n\t\"gitlab.com/wireguard/wgctrl/wgtypes\"\n\tmock_server \"your_module_path/mock\"\n)\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create listener: %v\", err)\n\t}\n\n\tvar privKey [32]byte\n\tif _, err := rand.Read(privKey[:]); err != nil {\n\t\tt.Fatalf(\"Failed to generate private key: %v\", err)\n\t}\n\tvar pubKey [32]byte\n\tcurve25519.ScalarBaseMult(&pubKey, &privKey)\n\twgPrivateKey := wgtypes.Key(privKey)\n\n\tserver := grpc.NewServer()\n\tmockService := &mock_server.ManagementServiceServerMock{}\n\tmock_server.RegisterManagementServiceServer(server, mockService)\n\n\tgo func() {\n\t\tif err := server.Serve(lis); err != nil {\n\t\t\tt.Logf(\"Server stopped: %v\", err)\n\t\t}\n\t}()\n\n\treturn server, lis, mockService, wgPrivateKey\n}"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool to interact with a Redis server, supporting common operations like Set, Get, Delete, and Flush with configurable expiration times.\n\nStruct Description: RedisStore is a struct that manages a pool of Redis connections and provides methods to interact with Redis, including setting, getting, deleting keys, and flushing the database. It supports configurable expiration times for cached items.\n\nFields:\n- pool: *redis.Pool - A connection pool to manage Redis connections efficiently\n- defaultExpiration: time.Duration - The default expiration time for cached items\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method to handle Redis operations with expiration logic",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "right_result": "package redisstore\n\nimport (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\treturn &RedisStore{\n\t\tpool: &redis.Pool{\n\t\t\tMaxIdle: 10,\n\t\t\tDial: func() (redis.Conn, error) {\n\t\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tif password != \"\" {\n\t\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\t\tc.Close()\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn c, nil\n\t\t\t},\n\t\t},\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (r *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\n\tif expires <= 0 {\n\t\texpires = r.defaultExpiration\n\t}\n\n\tvar args []interface{}\n\targs = append(args, key)\n\tif value != nil {\n\t\targs = append(args, value)\n\t}\n\n\tif expires > 0 {\n\t\targs = append(args, \"PX\", int64(expires/time.Millisecond))\n\t}\n\n\t_, err := f(\"SET\", args...)\n\treturn err\n}\n\nfunc (r *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn r.invoke(func(cmd string, args ...interface{}) (interface{}, error) {\n\t\treturn conn.Do(cmd, args...)\n\t}, key, value, expires)\n}\n\nfunc (r *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\n\treply, err := conn.Do(\"GET\", key)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif reply == nil {\n\t\treturn redis.ErrNil\n\t}\n\n\treturn redis.Scan(reply, ptrValue)\n}\n\nfunc (r *RedisStore) Delete(key string) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (r *RedisStore) Flush() error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"FLUSHDB\")\n\treturn err\n}"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Create a Go struct that implements a RocketMQ push consumer with configurable options, message handling, and tracing capabilities.\n\nStruct Description: The PushConsumer struct encapsulates a RocketMQ push consumer with additional features like rate limiting, tracing, and message processing. It manages consumer lifecycle and message subscription.\n\nFields:\n\nname: string - Name identifier for the consumer  \nPushConsumer: rocketmq.PushConsumer - Embedded RocketMQ push consumer instance  \nPushConsumerConfig: PushConsumerConfig - Configuration for the consumer  \nsubscribers: map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error) - Map of topic to message handler functions  \ninterceptors: []primitive.Interceptor - List of interceptors for message processing  \nbucket: *ratelimit.Bucket - Rate limiter bucket for controlling consumption rate  \nstarted: bool - Flag indicating if consumer is running  \n\nMethods:\n\nRegisterSingleMessage: (f func(context.Context, *primitive.MessageExt) error) -> *PushConsumer - Registers a single message handler function with tracing and panic recovery  \nStart: () -> error - Initializes and starts the RocketMQ consumer with configured options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"runtime/debug\"\n\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/juju/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.12.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype PushConsumer struct {\n\trocketmq.PushConsumer\n\tname string\n\tPushConsumerConfig\n\n\tsubscribers  map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors []primitive.Interceptor\n\tbucket       *ratelimit.Bucket\n\tstarted      bool\n}\n\nfunc (cc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\ttracer := xtrace.NewTracer(trace.SpanKindConsumer)\n\tattrs := []attribute.KeyValue{\n\t\tsemconv.MessagingSystemKey.String(\"rocketmq\"),\n\t\tsemconv.MessagingRocketmqClientGroupKey.String(cc.Group),\n\t\tsemconv.MessagingRocketmqClientIDKey.String(cc.InstanceName),\n\t\tsemconv.MessagingRocketmqConsumptionModelKey.String(cc.MessageModel),\n\t}\n\n\tfn := func(ctx context.Context, msgs ...*primitive.MessageExt) (result consumer.ConsumeResult, err error) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tresult, err = consumer.ConsumeRetryLater, errors.New(\"consumer message panic\")\n\t\t\t}\n\t\t}()\n\t\tfor _, msg := range msgs {\n\t\t\tvar (\n\t\t\t\tspan trace.Span\n\t\t\t)\n\n\t\t\tif cc.EnableTrace {\n\t\t\t\tcarrier := propagation.MapCarrier{}\n\t\t\t\tfor key, value := range msg.GetProperties() {\n\t\t\t\t\tcarrier[key] = value\n\t\t\t\t}\n\t\t\t\tctx, span = tracer.Start(ctx, msg.Topic, carrier, trace.WithAttributes(attrs...))\n\t\t\t\tspan.SetAttributes(\n\t\t\t\t\tsemconv.MessagingRocketmqNamespaceKey.String(msg.Topic),\n\t\t\t\t\tsemconv.MessagingRocketmqMessageTagKey.String(msg.GetTags()),\n\t\t\t\t)\n\t\t\t\tdefer span.End()\n\t\t\t}\n\n\t\t\tif cc.bucket != nil {\n\t\t\t\tif ok := cc.bucket.WaitMaxDuration(1, cc.WaitMaxDuration); !ok {\n\t\t\t\t\treturn consumer.ConsumeRetryLater, nil\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\tif cc.EnableTrace && span != nil {\n\t\t\t\t\tspan.RecordError(err)\n\t\t\t\t}\n\t\t\t\treturn consumer.ConsumeRetryLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\tcc.subscribers[cc.Topic] = fn\n\treturn cc\n}\n\nfunc (cc *PushConsumer) Start() error {\n\tif cc.started {\n\t\treturn nil\n\t}\n\n\tvar opts = []consumer.Option{\n\t\tconsumer.WithGroupName(cc.Group),\n\t\tconsumer.WithInstance(cc.InstanceName),\n\t\tconsumer.WithNameServer(cc.Addr),\n\t\tconsumer.WithMaxReconsumeTimes(cc.Reconsume),\n\t\tconsumer.WithInterceptor(cc.interceptors...),\n\t\tconsumer.WithConsumeMessageBatchMaxSize(cc.ConsumeMessageBatchMaxSize),\n\t\tconsumer.WithPullBatchSize(cc.PullBatchSize),\n\t\tconsumer.WithConsumeGoroutineNums(cc.ConsumeGoroutineNums),\n\t\tconsumer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: cc.AccessKey,\n\t\t\tSecretKey: cc.SecretKey,\n\t\t}),\n\t}\n\tif cc.PushConsumerConfig.MessageModel == \"BroadCasting\" {\n\t\topts = append(opts, consumer.WithConsumerModel(consumer.BroadCasting))\n\t}\n\n\tclient, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcc.PushConsumer = client\n\n\tselector := consumer.MessageSelector{\n\t\tType:       consumer.TAG,\n\t\tExpression: \"\",\n\t}\n\tif cc.PushConsumerConfig.SubExpression != \"*\" {\n\t\tselector.Expression = cc.PushConsumerConfig.SubExpression\n\t}\n\n\tfor topic, fn := range cc.subscribers {\n\t\tif err := cc.PushConsumer.Subscribe(topic, selector, fn); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cc.Enable {\n\t\tif err := client.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tcc.started = true\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 128,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"runtime\"\n\t\"sync\"\n\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"go.uber.org/ratelimit\"\n)\n\ntype PushConsumerConfig struct {\n\tGroupName         string\n\tTopic             string\n\tRateLimitEnabled  bool\n\tRateLimitCapacity int\n\tRateLimitRate     float64\n}\n\ntype PushConsumer struct {\n\tname             string\n\trocketmq.PushConsumer\n\tPushConsumerConfig\n\tsubscribers map[string]func(context.Context, []*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors []primitive.Interceptor\n\tbucket       *ratelimit.Bucket\n\tstarted      bool\n\tmu           sync.Mutex\n}\n\ntype messageListener struct {\n\thandler func(context.Context, []*primitive.MessageExt) (consumer.ConsumeResult, error)\n}\n\nfunc (ml *messageListener) ConsumeMessage(ctx context.Context, msgs []*primitive.MessageExt) (consumer.ConsumeResult, error) {\n\treturn ml.handler(ctx, msgs)\n}\n\nfunc (pc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\twrapped := func(ctx context.Context, msgs ...*primitive.MessageExt) (consumer.ConsumeResult, error) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tfmt.Printf(\"Recovered from panic: %v\\n\", r)\n\t\t\t\tvar buf [4096]byte\n\t\t\t\tn := runtime.Stack(buf[:], false)\n\t\t\t\tfmt.Printf(\"Stack trace: %s\\n\", buf[:n])\n\t\t\t}\n\t\t}()\n\t\tvar allErr error\n\t\tvar result consumer.ConsumeResult\n\n\t\tfor _, msg := range msgs {\n\t\t\tif pc.bucket != nil {\n\t\t\t\tpc.bucket.Take()\n\t\t\t}\n\t\t\terr := f(ctx, msg)\n\t\t\tif err != nil {\n\t\t\t\tallErr = fmt.Errorf(\"%w: %v\", allErr, err)\n\t\t\t}\n\t\t}\n\n\t\tif allErr == nil {\n\t\t\tresult = consumer.ConsumeSuccess\n\t\t} else {\n\t\t\tresult = consumer.ConsumeConcurrentlyStatus\n\t\t}\n\n\t\treturn result, allErr\n\t}\n\n\tpc.subscribers[pc.Topic] = wrapped\n\treturn pc\n}\n\nfunc (pc *PushConsumer) Start() error {\n\tpc.mu.Lock()\n\tif pc.started {\n\t\tpc.mu.Unlock()\n\t\treturn fmt.Errorf(\"consumer already started\")\n\t}\n\tpc.mu.Unlock()\n\n\tif pc.RateLimitEnabled {\n\t\tpc.bucket = ratelimit.NewBucketWithRate(pc.RateLimitRate, int64(pc.RateLimitCapacity))\n\t}\n\n\topts := []consumer.Option{\n\t\tconsumer.WithGroupName(pc.GroupName),\n\t\tconsumer.WithInterceptors(pc.interceptors...),\n\t}\n\n\tmqConsumer, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpc.PushConsumer = mqConsumer\n\n\tfor topic, handler := range pc.subscribers {\n\t\tml := &messageListener{handler: handler}\n\t\tselector := primitive.MessageSelector{\n\t\t\tType:  primitive.SelectorTypeTag,\n\t\t\tValue: \"*\",\n\t\t}\n\t\terr := pc.PushConsumer.Subscribe(topic, selector, ml)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := pc.PushConsumer.Start(); err != nil {\n\t\treturn err\n\t}\n\n\tpc.mu.Lock()\n\tpc.started = true\n\tpc.mu.Unlock()\n\n\treturn nil\n}"
  },
  {
    "Task_id": 302,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages in different modes (Sync, Async, OneWay) and support delayed messages.\n\nFunction Description: The following functions provide different ways to send messages to RocketMQ brokers. The producer must be initialized before sending messages.\n\nInput: \n- ctx: context.Context - Context for controlling the message sending process\n- topic: string - The topic to which the message will be sent\n- body: []byte - The message body/content\n- tag: string (for delay message) - Message tag for filtering\n- keys: []string (for delay message) - Message keys for filtering\n- delayLevel: int (for delay message) - Delay level for delayed messages\n- callback: func(ctx context.Context, result *primitive.SendResult, err error) (for async message) - Callback function for async message sending\n\nOutput:\n- error: For OneWay and Async modes, returns error if sending fails\n- (*primitive.SendResult, error): For Sync mode, returns send result and potential error\n- (*primitive.SendResult, error): For delayed sync message, returns send result and potential error\n\nMethods:\n\ninitProducer: () -> error - Initializes the RocketMQ producer with default configuration\n\nsendOneWayMessage: (ctx context.Context, topic string, body []byte) -> error - Sends a message in OneWay mode (fire-and-forget)\n\nsendSyncMessage: (ctx context.Context, topic string, body []byte) -> (*primitive.SendResult, error) - Sends a message in Sync mode (waits for acknowledgment)\n\nsendAsyncMessage: (ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) -> error - Sends a message in Async mode (uses callback)\n\nsendDelaySyncMessage: (ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) -> (*primitive.SendResult, error) - Sends a delayed message in Sync mode",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n)\n\nvar mqProducer rocketmq.Producer\n\nfunc initProducer() error {\n\tvar err error\n\tmqProducer, err = rocketmq.NewProducer(\n\t\tproducer.WithNsResovler(primitive.NewPassthroughResolver([]string{\"172.13.3.160:9876\"})),\n\t\tproducer.WithRetry(3),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn mqProducer.Start()\n}\n\nfunc sendOneWayMessage(ctx context.Context, topic string, body []byte) error {\n\treturn mqProducer.SendOneWay(ctx, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendSyncMessage(ctx context.Context, topic string, body []byte) (*primitive.SendResult, error) {\n\treturn mqProducer.SendSync(ctx, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendAsyncMessage(ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) error {\n\treturn mqProducer.SendAsync(ctx, callback, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendDelaySyncMessage(ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) (*primitive.SendResult, error) {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t}\n\tmsg.WithTag(tag)\n\tmsg.WithKeys(keys)\n\tmsg.WithDelayTimeLevel(delayLevel)\n\treturn mqProducer.SendSync(ctx, msg)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 127,
    "right_result": "package rocketmq\n\nimport (\n\t\"context\"\n\t\"errors\"\n\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n)\n\nvar producerInstance *rocketmq.Producer\n\nfunc initProducer() error {\n\tp, err := rocketmq.NewProducer(producer.WithGroup(\"DEFAULT_PRODUCER_GROUP\"))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := p.Start(); err != nil {\n\t\treturn err\n\t}\n\tproducerInstance = p\n\treturn nil\n}\n\nfunc sendOneWayMessage(ctx context.Context, topic string, body []byte) error {\n\tif producerInstance == nil {\n\t\treturn errors.New(\"producer not initialized\")\n\t}\n\tmsg := primitive.NewMessage(topic, body)\n\treturn producerInstance.SendOneway(ctx, msg)\n}\n\nfunc sendSyncMessage(ctx context.Context, topic string, body []byte) (*primitive.SendResult, error) {\n\tif producerInstance == nil {\n\t\treturn nil, errors.New(\"producer not initialized\")\n\t}\n\tmsg := primitive.NewMessage(topic, body)\n\treturn producerInstance.Send(ctx, msg)\n}\n\nfunc sendAsyncMessage(ctx context.Context, topic string, body []byte, callback func(context.Context, *primitive.SendResult, error)) error {\n\tif producerInstance == nil {\n\t\treturn errors.New(\"producer not initialized\")\n\t}\n\tmsg := primitive.NewMessage(topic, body)\n\treturn producerInstance.SendAsync(ctx, callback, msg)\n}\n\nfunc sendDelaySyncMessage(ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) (*primitive.SendResult, error) {\n\tif producerInstance == nil {\n\t\treturn nil, errors.New(\"producer not initialized\")\n\t}\n\tmsg := primitive.NewMessage(topic, body).\n\t\tSetTag(tag).\n\t\tSetKeys(keys).\n\t\tSetDelayTimeLevel(delayLevel)\n\treturn producerInstance.Send(ctx, msg)\n}"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Write a Go function that retrieves the private IPv4 address of an Amazon EC2 instance by querying the instance metadata service.\n\nFunction Description: The function should make an HTTP GET request to the EC2 instance metadata service at the well-known endpoint (169.254.169.254) to fetch the local IPv4 address. It should handle potential errors during the request, response reading, and IP parsing, and return the IPv4 address in net.IP format.\n\nInput: None (the function takes no parameters)\n\nOutput: \n- On success: Returns the private IPv4 address as a net.IP object (IPv4 format)\n- On failure: Returns nil and an error describing what went wrong (failed request, invalid response, or invalid IP address)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc amazonEC2PrivateIPv4() (net.IP, error) {\n\tres, err := http.Get(\"http://169.254.169.254/latest/meta-data/local-ipv4\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tip := net.ParseIP(string(body))\n\tif ip == nil {\n\t\treturn nil, errors.New(\"invalid ip address\")\n\t}\n\treturn ip.To4(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc getPrivateIPv4() (net.IP, error) {\n\turl := \"http://169.254.169.254/latest/meta-data/local-ipv4\"\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to query metadata service: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbodyBytes, _ := ioutil.ReadAll(resp.Body)\n\t\treturn nil, fmt.Errorf(\"unexpected HTTP status %d: %s\", resp.StatusCode, string(bodyBytes))\n\t}\n\n\tbodyBytes, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read response body: %w\", err)\n\t}\n\n\tipStr := string(bodyBytes)\n\tif ipStr == \"\" {\n\t\treturn nil, fmt.Errorf(\"empty response body\")\n\t}\n\n\tip := net.ParseIP(ipStr)\n\tif ip == nil {\n\t\treturn nil, fmt.Errorf(\"invalid IP address format: %s\", ipStr)\n\t}\n\n\tif ip.To4() == nil {\n\t\treturn nil, fmt.Errorf(\"retrieved IP is not IPv4: %s\", ipStr)\n\t}\n\n\treturn ip, nil\n}"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a function to retrieve a proxy address from a specified HTTP endpoint and return it in a formatted string.\n\nFunction Description: The function `getOneProxy` makes an HTTP GET request to a predefined proxy server endpoint, reads the response body to obtain the proxy address, formats it with an \"http://\" prefix, and returns both the formatted and raw proxy strings. It includes basic error handling for the response reading process.\n\nInput: None (The function takes no input parameters)\n\nOutput: \n1. A string representing the formatted proxy address with \"http://\" prefix\n2. A string representing the raw proxy address from the response body",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, _ := http.Get(\"http://45.78.45.70:5015/get/\")\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t}\n\tproxy := \"http://\" + string(body)\n\tfmt.Println(\"\u4f7f\u7528\u9ed8\u8ba4\u4ee3\u7406\uff1a\" + proxy)\n\treturn proxy, string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc getOneProxy() (string, string) {\n\turl := \"http://proxyserver.com/api/v1/proxy\"\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\"\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\n\traw := string(body)\n\tformatted := \"http://\" + raw\n\treturn formatted, raw\n}"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified address with JSON payload and room parameters, then processes the response.\n\nFunction Description: The function sends a POST request to a server endpoint with room information and a JSON payload containing a test value. It handles the response by reading the body and printing the result along with a timestamp.\n\nInput:\n- addr (string): The server address to which the POST request will be sent.\n- i (int64): A numeric value that will be included in the JSON payload.\n\nOutput: None (prints response details to stdout, returns nothing)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc post(addr string, i int64) {\n\tresp, err := http.Post(\"http://\"+addr+\"/goim/push/room?operation=1000&type=test&room=\"+os.Args[1], \"application/json\", bytes.NewBufferString(fmt.Sprintf(\"{\\\"test\\\":%d}\", i)))\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"%s postId:%d, response:%s\\n\", time.Now().Format(\"2006-01-02 15:04:05\"), i, string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc sendRequest(addr string, i int64) {\n\tpayload := map[string]int64{\"test\": i}\n\tbody, _ := json.Marshal(payload)\n\tresp, err := http.Post(addr, \"application/json\", bytes.NewBuffer(body))\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tdata, _ := ioutil.ReadAll(resp.Body)\n\tfmt.Printf(\"Response: %s at %s\\n\", data, time.Now().Format(time.RFC3339))\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a Proxy struct that manages different types of servers (UDS, mTLS, admin, and health) for handling proxy connections with various protocols (HTTP and gRPC).\n\nStruct Description: The Proxy struct provides methods to run different server types with configurable options, including Unix Domain Socket (UDS) servers, mTLS-secured servers, admin servers for metrics and profiling, and health servers for liveness/readiness checks.\n\nMethods:\n\nMethod1: runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a master server using Unix Domain Socket (UDS) for communication. Supports both gRPC and HTTP modes based on configuration. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod2: runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a mTLS-secured master server listening on a TCP port. Supports both gRPC and HTTP modes. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod3: runAdminServer(o *options.ProxyRunOptions) -> void - Starts an admin server for metrics and optional profiling endpoints. Runs on a localhost port specified in options.\n\nMethod4: runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) -> void - Starts a health server providing liveness (/healthz) and readiness (/ready) endpoints. Runs on a port specified in options.\n\nNote: StopFunc is a function type defined as: type StopFunc func()",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\t\"syscall\"\n)\n\ntype Proxy struct {\n}\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tif o.DeleteUDSFile {\n\t\tif err := os.Remove(o.UdsName); err != nil && !os.IsNotExist(err) {\n\t\t\tklog.ErrorS(err, \"failed to delete file\", \"file\", o.UdsName)\n\t\t}\n\t}\n\tvar stop StopFunc\n\tif o.Mode == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := getUDSListener(ctx, o.UdsName)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to get uds listener: %v\", err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\tserver := &http.Server{\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tklog.ErrorS(err, \"error shutting down server\")\n\t\t}\n\t\tgo func() {\n\t\t\tudsListener, err := getUDSListener(ctx, o.UdsName)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to get uds listener\")\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\terr := udsListener.Close()\n\t\t\t\tklog.ErrorS(err, \"failed to close uds listener\")\n\t\t\t}()\n\t\t\terr = server.Serve(udsListener)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to serve uds requests\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tvar stop StopFunc\n\n\tvar tlsConfig *tls.Config\n\tvar err error\n\tif tlsConfig, err = p.getTLSConfig(o.ServerCaCert, o.ServerCert, o.ServerKey); err != nil {\n\t\treturn nil, err\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", o.ServerPort)\n\n\tif o.Mode == grpcMode {\n\t\tserverOption := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\tgrpcServer := grpc.NewServer(serverOption)\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to listen on %s: %v\", addr, err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\thttpServer := &http.Server{\n\t\t\tAddr: \":8088\",\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tserver := &http.Server{\n\t\t\tAddr:      addr,\n\t\t\tTLSConfig: tlsConfig,\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t\tTLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler)),\n\t\t}\n\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown server\")\n\t\t\t}\n\t\t\terr = httpServer.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown httpServer\")\n\t\t\t}\n\t\t}\n\t\tgo func() {\n\t\t\terr := server.ListenAndServeTLS(\"\", \"\")\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on master port\")\n\t\t\t}\n\t\t}()\n\t\tgo func() {\n\t\t\terr := httpServer.ListenAndServe()\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on http master port\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.Handle(\"/metrics\", promhttp.Handler())\n\tif o.EnableProfiling {\n\t\tmuxHandler.HandleFunc(\"/debug/pprof\", util.RedirectTo(\"/debug/pprof/\"))\n\t\tmuxHandler.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tif o.EnableContentionProfiling {\n\t\t\truntime.SetBlockProfileRate(1)\n\t\t}\n\t}\n\tadminServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\"127.0.0.1:%d\", o.AdminPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := adminServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"admin server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Admin server stopped listening\")\n\t}()\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\tlivenessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"ok\")\n\t})\n\treadinessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tready, msg := server.Readiness.Ready()\n\t\tif ready {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\tfmt.Fprintf(w, \"ok\")\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, msg)\n\t})\n\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.HandleFunc(\"/healthz\", livenessHandler)\n\tmuxHandler.HandleFunc(\"/ready\", readinessHandler)\n\thealthServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\":%d\", o.HealthPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := healthServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"health server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Health server stopped listening\")\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "right_result": "package proxy\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t_ \"net/http/pprof\"\n\t\"google.golang.org/grpc\"\n\n\t\"your/module/path/options\"\n\t\"your/module/path/server\"\n)\n\ntype StopFunc func()\n\ntype Proxy struct{}\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tsocketPath := o.UDSSocketPath\n\tos.Remove(socketPath)\n\tlistener, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar stopFunc StopFunc\n\tif o.Protocol == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\ts.RegisterGRPCServices(grpcServer)\n\t\tgo grpcServer.Serve(listener)\n\t\tstopFunc = func() {\n\t\t\tgrpcServer.Stop()\n\t\t}\n\t} else {\n\t\tmux := http.NewServeMux()\n\t\ts.RegisterHTTPHandlers(mux)\n\t\thttpServer := &http.Server{Handler: mux}\n\t\tgo httpServer.Serve(listener)\n\t\tstopFunc = func() {\n\t\t\thttpServer.Shutdown(context.Background())\n\t\t}\n\t}\n\n\treturn func() {\n\t\tstopFunc()\n\t\tlistener.Close()\n\t\tos.Remove(socketPath)\n\t}, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tcert, err := tls.LoadX509KeyPair(o.TLSCertFile, o.TLSKeyFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttlsConfig := &tls.Config{\n\t\tCertificates: []tls.Certificate{cert},\n\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t}\n\n\tlistener, err := tls.Listen(\"tcp\", o.Address, tlsConfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar stopFunc StopFunc\n\tif o.Protocol == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\ts.RegisterGRPCServices(grpcServer)\n\t\tgo grpcServer.Serve(listener)\n\t\tstopFunc = func() {\n\t\t\tgrpcServer.Stop()\n\t\t}\n\t} else {\n\t\tmux := http.NewServeMux()\n\t\ts.RegisterHTTPHandlers(mux)\n\t\thttpServer := &http.Server{Handler: mux}\n\t\tgo httpServer.Serve(listener)\n\t\tstopFunc = func() {\n\t\t\thttpServer.Shutdown(context.Background())\n\t\t}\n\t}\n\n\treturn func() {\n\t\tstopFunc()\n\t\tlistener.Close()\n\t}, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/metrics\", promhttp.Handler())\n\tif o.EnableProfiling {\n\t\tmux.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tmux.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n\t\tmux.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\t\tmux.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\t\tmux.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\t}\n\n\tserver := &http.Server{\n\t\tAddr:    o.AdminPort,\n\t\tHandler: mux,\n\t}\n\tlog.Fatal(server.ListenAndServe())\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\tmux.HandleFunc(\"/ready\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif server.IsReady() {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t} else {\n\t\t\tw.WriteHeader(http.StatusServiceUnavailable)\n\t\t}\n\t})\n\n\tsrv := &http.Server{\n\t\tAddr:    o.HealthPort,\n\t\tHandler: mux,\n\t}\n\tlog.Fatal(srv.ListenAndServe())\n}"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Implement a WorkWeiXin struct in Go that interacts with the WeChat Work API to send messages and manage authentication tokens.\n\nStruct Description: The WorkWeiXin struct represents a client for interacting with WeChat Work's API, handling authentication and message sending functionality.\n\nFields:\nCorpID: string - The corporation ID for WeChat Work authentication\nAgentID: string - The application agent ID for message sending\nCorpSecret: string - The corporation secret for authentication\nToken: string - The access token for API requests (may be empty initially)\n\nMethods:\ngetToken: () -> (string, error) - Retrieves an access token from WeChat Work API using CorpID and CorpSecret. Returns the token or an error.\nSend: (receivers []string, title string, content []byte, others ...string) -> error - Sends a markdown message to specified receivers via WeChat Work API. Handles token retrieval if needed. Returns nil on success or an error.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string `json:\"corpId\"`\n\tAgentID    string `json:\"agentId\"`\n\tCorpSecret string `json:\"corpSecret\"`\n\tToken      string `json:\"token\"`\n}\n\nfunc (w WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\n\treqBody := make(map[string]interface{})\n\treqBody[\"msgtype\"] = \"markdown\"\n\n\ttoUser := \"\"\n\tfor _, v := range receivers {\n\t\ttoUser = v + \"|\"\n\t}\n\treqBody[\"touser\"] = toUser\n\treqBody[\"agentid\"] = w.AgentID\n\tmarkdown := make(map[string]string)\n\tmarkdown[\"content\"] = string(content)\n\treqBody[\"markdown\"] = markdown\n\tdata, _ := json.Marshal(reqBody)\n\tbody := strings.NewReader(string(data))\n\treq, err := http.NewRequest(\n\t\thttp.MethodPost,\n\t\tfmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s\", w.Token),\n\t\tbody,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json;charset=utf-8\")\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn nil\n\t\t} else {\n\t\t\treturn errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}\n\nfunc (w WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn result[\"access_token\"].(string), nil\n\t\t} else {\n\t\t\treturn \"\", errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string\n\tAgentID    string\n\tCorpSecret string\n\tToken      string\n}\n\ntype tokenResponse struct {\n\tErrcode     int    `json:\"errcode\"`\n\tErrmsg      string `json:\"errmsg\"`\n\tAccessToken string `json:\"access_token\"`\n}\n\nfunc (w *WorkWeiXin) getToken() (string, error) {\n\turlStr := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\",\n\t\turl.QueryEscape(w.CorpID), url.QueryEscape(w.CorpSecret))\n\n\tresp, err := http.Get(urlStr)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tvar tr tokenResponse\n\tif err := json.Unmarshal(body, &tr); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif tr.Errcode != 0 {\n\t\treturn \"\", fmt.Errorf(\"getToken failed: %s\", tr.Errmsg)\n\t}\n\n\treturn tr.AccessToken, nil\n}\n\nfunc (w *WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\n\ttoUser := strings.Join(receivers, \"|\")\n\tfullContent := \"# \" + title + \"\\n\\n\" + string(content)\n\n\tagentIDInt, err := strconv.Atoi(w.AgentID)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid AgentID: %v\", err)\n\t}\n\n\ttype markdownMsg struct {\n\t\tToUser   string `json:\"touser\"`\n\t\tMsgType  string `json:\"msgtype\"`\n\t\tAgentID  int    `json:\"agentid\"`\n\t\tMarkdown struct {\n\t\t\tContent string `json:\"content\"`\n\t\t} `json:\"markdown\"`\n\t}\n\n\tmsg := markdownMsg{\n\t\tToUser:  toUser,\n\t\tMsgType: \"markdown\",\n\t\tAgentID: agentIDInt,\n\t\tMarkdown: struct {\n\t\t\tContent string\n\t\t}{\n\t\t\tContent: fullContent,\n\t\t},\n\t}\n\n\tbodyBytes, err := json.Marshal(msg)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsendURL := \"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=\" + url.QueryEscape(w.Token)\n\n\treq, err := http.NewRequest(\"POST\", sendURL, bytes.NewBuffer(bodyBytes))\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponseBody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar apiResp struct {\n\t\tErrcode int    `json:\"errcode\"`\n\t\tErrmsg  string `json:\"errmsg\"`\n\t}\n\n\tif err := json.Unmarshal(responseBody, &apiResp); err != nil {\n\t\treturn err\n\t}\n\n\tif apiResp.Errcode != 0 {\n\t\treturn fmt.Errorf(\"send failed: %s\", apiResp.Errmsg)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a RabbitMQ consumer in Go that connects to a RabbitMQ server, declares necessary exchanges and queues, binds them, and consumes messages from the queue. The consumer should be able to gracefully shut down when requested.\n\nStruct Description: The Consumer struct represents a RabbitMQ consumer with connection and channel management capabilities. It handles the lifecycle of consuming messages from a RabbitMQ queue and provides shutdown functionality.\n\nFields:\n- conn: *amqp.Connection - The connection to the RabbitMQ server\n- channel: *amqp.Channel - The communication channel for RabbitMQ operations\n- tag: string - The consumer tag for identifying this consumer\n- done: chan error - Channel for signaling when the consumer has finished shutting down\n\nMethods:\n- NewConsumer: (amqpURI string, exchange string, exchangeType string, queueName string, key string, ctag string) -> (*Consumer, error) - Creates a new Consumer instance, establishes connection, declares exchange and queue, binds them, and starts consuming messages\n- Shutdown: () -> error - Gracefully shuts down the consumer by canceling consumption and closing the connection\n- handle: (deliveries <-chan amqp.Delivery, done chan error) -> () - Internal method for processing incoming messages (note: this is not exported as it starts with lowercase)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n)\n\ntype Consumer struct {\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\ttag     string\n\tdone    chan error\n}\n\nfunc NewConsumer(amqpURI, exchange, exchangeType, queueName, key, ctag string) (*Consumer, error) {\n\tc := &Consumer{\n\t\tconn:    nil,\n\t\tchannel: nil,\n\t\ttag:     ctag,\n\t\tdone:    make(chan error),\n\t}\n\n\tvar err error\n\n\tlog.Printf(\"dialing %q\", amqpURI)\n\tc.conn, err = amqp.Dial(amqpURI)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Dial: %s\", err)\n\t}\n\n\tgo func() {\n\t\tfmt.Printf(\"closing: %s\", <-c.conn.NotifyClose(make(chan *amqp.Error)))\n\t}()\n\n\tlog.Printf(\"got Connection, getting Channel\")\n\tc.channel, err = c.conn.Channel()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Channel: %s\", err)\n\t}\n\n\tlog.Printf(\"got Channel, declaring Exchange (%q)\", exchange)\n\tif err = c.channel.ExchangeDeclare(\n\t\texchange,\n\t\texchangeType,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"Exchange Declare: %s\", err)\n\t}\n\n\tlog.Printf(\"declared Exchange, declaring Queue %q\", queueName)\n\tqueue, err := c.channel.QueueDeclare(\n\t\tqueueName,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Queue Declare: %s\", err)\n\t}\n\n\tlog.Printf(\"declared Queue (%q %d messages, %d consumers), binding to Exchange (key %q)\",\n\t\tqueue.Name, queue.Messages, queue.Consumers, key)\n\n\tif err = c.channel.QueueBind(\n\t\tqueue.Name,\n\t\tkey,\n\t\texchange,\n\t\tfalse,\n\t\tnil,\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"Queue Bind: %s\", err)\n\t}\n\n\tlog.Printf(\"Queue bound to Exchange, starting Consume (consumer tag %q)\", c.tag)\n\tdeliveries, err := c.channel.Consume(\n\t\tqueue.Name,\n\t\tc.tag,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Queue Consume: %s\", err)\n\t}\n\n\tgo handle(deliveries, c.done)\n\n\treturn c, nil\n}\n\nfunc (c *Consumer) Shutdown() error {\n\tif err := c.channel.Cancel(c.tag, true); err != nil {\n\t\treturn fmt.Errorf(\"Consumer cancel failed: %s\", err)\n\t}\n\n\tif err := c.conn.Close(); err != nil {\n\t\treturn fmt.Errorf(\"AMQP connection close error: %s\", err)\n\t}\n\n\treturn <-c.done\n}\n\nfunc handle(deliveries <-chan amqp.Delivery, done chan error) {\n\tfor d := range deliveries {\n\t\tlog.Printf(\n\t\t\t\"got %dB delivery: [%v] %q\",\n\t\t\tlen(d.Body),\n\t\t\td.DeliveryTag,\n\t\t\td.Body,\n\t\t)\n\t\td.Ack(false)\n\t}\n\tdone <- nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 122,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Consumer struct {\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\ttag     string\n\tdone    chan error\n}\n\nfunc NewConsumer(amqpURI string, exchange string, exchangeType string, queueName string, key string, ctag string) (*Consumer, error) {\n\tconn, err := amqp.Dial(amqpURI)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed to connect to RabbitMQ: %v\", err)\n\t}\n\tchannel, err := conn.Channel()\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, fmt.Errorf(\"Failed to open a channel: %v\", err)\n\t}\n\n\terr = channel.ExchangeDeclare(\n\t\texchange,\n\t\texchangeType,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tchannel.Close()\n\t\tconn.Close()\n\t\treturn nil, fmt.Errorf(\"Failed to declare exchange: %v\", err)\n\t}\n\n\tqueue, err := channel.QueueDeclare(\n\t\tqueueName,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tchannel.Close()\n\t\tconn.Close()\n\t\treturn nil, fmt.Errorf(\"Failed to declare queue: %v\", err)\n\t}\n\n\terr = channel.QueueBind(\n\t\tqueue.Name,\n\t\tkey,\n\t\texchange,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tchannel.Close()\n\t\tconn.Close()\n\t\treturn nil, fmt.Errorf(\"Failed to bind queue: %v\", err)\n\t}\n\n\tdeliveries, err := channel.Consume(\n\t\tqueue.Name,\n\t\tctag,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tchannel.Close()\n\t\tconn.Close()\n\t\treturn nil, fmt.Errorf(\"Failed to start consuming: %v\", err)\n\t}\n\n\tdoneChan := make(chan error)\n\tconsumer := &Consumer{\n\t\tconn:    conn,\n\t\tchannel: channel,\n\t\ttag:     ctag,\n\t\tdone:    doneChan,\n\t}\n\n\tgo consumer.handle(deliveries, doneChan)\n\n\treturn consumer, nil\n}\n\nfunc (c *Consumer) handle(deliveries <-chan amqp.Delivery, done chan error) {\n\tdefer close(done)\n\tfor delivery := range deliveries {\n\t\tlog.Printf(\"Received a message: %s\", delivery.Body)\n\t\tif err := delivery.Ack(false); err != nil {\n\t\t\tlog.Printf(\"Error acknowledging message: %v\", err)\n\t\t}\n\t}\n\tdone <- nil\n}\n\nfunc (c *Consumer) Shutdown() error {\n\tif err := c.channel.Cancel(c.tag, false); err != nil {\n\t\treturn fmt.Errorf(\"Failed to cancel consumer: %v\", err)\n\t}\n\n\t<-c.done\n\n\tif err := c.channel.Close(); err != nil {\n\t\treturn fmt.Errorf(\"Failed to close channel: %v\", err)\n\t}\n\n\tif err := c.conn.Close(); err != nil {\n\t\treturn fmt.Errorf(\"Failed to close connection: %v\", err)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Create a robust RabbitMQ producer in Go that handles connection management, channel initialization, and message publishing with automatic reconnection capabilities.\n\nStruct Description: The Session struct represents a RabbitMQ producer session that maintains connection state and provides message publishing functionality with automatic reconnection.\n\nFields:\n- name: string - The name of the queue to publish to\n- logger: *log.Logger - Logger for session events\n- connection: *amqp.Connection - RabbitMQ connection object\n- channel: *amqp.Channel - RabbitMQ channel object\n- done: chan bool - Channel to signal shutdown\n- notifyConnClose: chan *amqp.Error - Channel for connection close notifications\n- notifyChanClose: chan *amqp.Error - Channel for channel close notifications\n- notifyConfirm: chan amqp.Confirmation - Channel for publish confirmations\n- isReady: bool - Flag indicating if session is ready to publish\n\nMethods:\n- New(name string, addr string) -> *Session - Creates a new Session instance and starts connection management\n- handleReconnect(addr string) - Manages reconnection logic in a goroutine\n- connect(addr string) -> (*amqp.Connection, error) - Establishes connection to RabbitMQ server\n- handleReInit(conn *amqp.Connection) -> bool - Handles channel reinitialization after connection\n- init(conn *amqp.Connection) -> error - Initializes channel and declares queue\n- changeConnection(connection *amqp.Connection) - Updates connection and sets up close notifications\n- changeChannel(channel *amqp.Channel) - Updates channel and sets up close/confirm notifications\n- Push(data []byte) -> error - Safely publishes message with retry logic\n- UnsafePush(data []byte) -> error - Publishes message without safety checks (used internally)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n)\n\ntype Session struct {\n\tname            string\n\tlogger          *log.Logger\n\tconnection      *amqp.Connection\n\tchannel         *amqp.Channel\n\tdone            chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n}\n\nfunc New(name string, addr string) *Session {\n\tsession := Session{\n\t\tlogger: log.New(os.Stdout, \"\", log.LstdFlags),\n\t\tname:   name,\n\t\tdone:   make(chan bool),\n\t}\n\tgo session.handleReconnect(addr)\n\treturn &session\n}\n\nfunc (session *Session) handleReconnect(addr string) {\n\tfor {\n\t\tsession.isReady = false\n\t\tlog.Println(\"Attempting to connect\")\n\n\t\tconn, err := session.connect(addr)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to connect. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif done := session.handleReInit(conn); done {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (session *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsession.changeConnection(conn)\n\tlog.Println(\"Connected!\")\n\treturn conn, nil\n}\n\nfunc (session *Session) handleReInit(conn *amqp.Connection) bool {\n\tfor {\n\t\tsession.isReady = false\n\n\t\terr := session.init(conn)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to initialize channel. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn true\n\t\t\tcase <-time.After(2 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tselect {\n\t\tcase <-session.done:\n\t\t\treturn true\n\t\tcase <-session.notifyConnClose:\n\t\t\tlog.Println(\"Connection closed. Reconnecting...\")\n\t\t\treturn false\n\t\tcase <-session.notifyChanClose:\n\t\t\tlog.Println(\"Channel closed. Re-running init...\")\n\t\t}\n\t}\n}\n\nfunc (session *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ch.Confirm(false)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = ch.QueueDeclare(\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsession.changeChannel(ch)\n\tsession.isReady = true\n\tlog.Println(\"Setup!\")\n\n\treturn nil\n}\n\nfunc (session *Session) changeConnection(connection *amqp.Connection) {\n\tsession.connection = connection\n\tsession.notifyConnClose = make(chan *amqp.Error)\n\tsession.connection.NotifyClose(session.notifyConnClose)\n}\n\nfunc (session *Session) changeChannel(channel *amqp.Channel) {\n\tsession.channel = channel\n\tsession.notifyChanClose = make(chan *amqp.Error)\n\tsession.notifyConfirm = make(chan amqp.Confirmation, 1)\n\tsession.channel.NotifyClose(session.notifyChanClose)\n\tsession.channel.NotifyPublish(session.notifyConfirm)\n}\n\nfunc (session *Session) Push(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"failed to push: not connected\")\n\t}\n\tfor {\n\t\terr := session.UnsafePush(data)\n\t\tif err != nil {\n\t\t\tsession.logger.Println(\"Push failed. Retrying...\")\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn errors.New(\"session is shutting down\")\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tselect {\n\t\tcase confirm := <-session.notifyConfirm:\n\t\t\tif confirm.Ack {\n\t\t\t\tsession.logger.Println(\"Push confirmed!\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\tcase <-time.After(5 * time.Second):\n\t\t}\n\t\tsession.logger.Println(\"Push didn't confirm. Retrying...\")\n\t}\n}\n\nfunc (session *Session) UnsafePush(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"not connected to a server\")\n\t}\n\treturn session.channel.Publish(\n\t\t\"\",\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        data,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package rabbitmq\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Session struct {\n\tsync.RWMutex\n\tname             string\n\tlogger           *log.Logger\n\tconnection       *amqp.Connection\n\tchannel          *amqp.Channel\n\tdone             chan bool\n\tnotifyConnClose  chan *amqp.Error\n\tnotifyChanClose  chan *amqp.Error\n\tnotifyConfirm    chan amqp.Confirmation\n\tisReady          bool\n}\n\nfunc New(name string, addr string) *Session {\n\ts := &Session{\n\t\tname:             name,\n\t\tlogger:           log.New(log.Writer(), \"RabbitMQ Session: \", log.LstdFlags),\n\t\tdone:             make(chan bool),\n\t\tnotifyConnClose:  make(chan *amqp.Error),\n\t\tnotifyChanClose:  make(chan *amqp.Error),\n\t\tnotifyConfirm:    make(chan amqp.Confirmation),\n\t\tisReady:          false,\n\t}\n\tgo s.handleReconnect(addr)\n\treturn s\n}\n\nfunc (s *Session) handleReconnect(addr string) {\n\tvar backoff time.Duration\n\tfor {\n\t\tif s.isReady {\n\t\t\tbackoff = 0\n\t\t} else {\n\t\t\tbackoff = 2 * time.Second\n\t\t}\n\n\t\tselect {\n\t\tcase <-s.done:\n\t\t\ts.cleanup()\n\t\t\treturn\n\t\tcase <-time.After(backoff):\n\t\t}\n\n\t\tconn, err := s.connect(addr)\n\t\tif err != nil {\n\t\t\ts.logger.Printf(\"Failed to connect to RabbitMQ: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\ts.Lock()\n\t\tprevConn := s.connection\n\t\ts.Unlock()\n\n\t\tif prevConn != nil {\n\t\t\tprevConn.Close()\n\t\t}\n\n\t\ts.changeConnection(conn)\n\n\t\tif !s.handleReInit(conn) {\n\t\t\tconn.Close()\n\t\t\ts.logger.Println(\"Failed to initialize channel after reconnect\")\n\t\t\tcontinue\n\t\t}\n\n\t\ts.Lock()\n\t\ts.isReady = true\n\t\ts.Unlock()\n\n\t\ts.logger.Println(\"Successfully reconnected to RabbitMQ\")\n\n\t\tselect {\n\t\tcase <-s.notifyConnClose:\n\t\t\ts.logger.Println(\"Connection closed, reconnecting...\")\n\t\tcase <-s.notifyChanClose:\n\t\t\ts.logger.Println(\"Channel closed, reinitializing...\")\n\t\tcase <-s.done:\n\t\t\ts.cleanup()\n\t\t\treturn\n\t\t}\n\n\t\ts.Lock()\n\t\ts.isReady = false\n\t\ts.Unlock()\n\t}\n}\n\nfunc (s *Session) connect(addr string) (*amqp.Connection, error) {\n\ts.logger.Printf(\"Connecting to RabbitMQ at %s\", addr)\n\treturn amqp.Dial(addr)\n}\n\nfunc (s *Session) handleReInit(conn *amqp.Connection) bool {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tch, err := conn.Channel()\n\tif err != nil {\n\t\ts.logger.Printf(\"Failed to open channel: %v\", err)\n\t\treturn false\n\t}\n\n\tif err := ch.Confirm(false); err != nil {\n\t\tch.Close()\n\t\ts.logger.Printf(\"Failed to enable confirm mode: %v\", err)\n\t\treturn false\n\t}\n\n\t_, err = ch.QueueDeclare(\n\t\ts.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tch.Close()\n\t\ts.logger.Printf(\"QueueDeclare failed: %v\", err)\n\t\treturn false\n\t}\n\n\ts.changeChannel(ch)\n\treturn true\n}\n\nfunc (s *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := ch.Confirm(false); err != nil {\n\t\tch.Close()\n\t\treturn err\n\t}\n\n\t_, err = ch.QueueDeclare(\n\t\ts.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\tch.Close()\n\t\treturn err\n\t}\n\n\ts.changeChannel(ch)\n\treturn nil\n}\n\nfunc (s *Session) changeConnection(conn *amqp.Connection) {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tif s.connection != nil {\n\t\ts.connection.Close()\n\t}\n\ts.connection = conn\n\ts.notifyConnClose = make(chan *amqp.Error)\n\tconn.NotifyClose(s.notifyConnClose)\n}\n\nfunc (s *Session) changeChannel(channel *amqp.Channel) {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tif s.channel != nil {\n\t\ts.channel.Close()\n\t}\n\ts.channel = channel\n\ts.notifyChanClose = make(chan *amqp.Error)\n\tchannel.NotifyClose(s.notifyChanClose)\n\ts.notifyConfirm = make(chan amqp.Confirmation)\n\tchannel.NotifyPublish(s.notifyConfirm)\n}\n\nfunc (s *Session) Push(data []byte) error {\n\tconst maxRetries = 3\n\tfor i := 0; i < maxRetries; i++ {\n\t\ts.RLock()\n\t\tready := s.isReady\n\t\ts.RUnlock()\n\n\t\tif !ready {\n\t\t\tif i == maxRetries-1 {\n\t\t\t\treturn errors.New(\"session not ready\")\n\t\t\t}\n\t\t\ttime.Sleep(2 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\terr := s.UnsafePush(data)\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\n\t\tvar amqpError *amqp.Error\n\t\tif errors.As(err, &amqpError) {\n\t\t\ts.Lock()\n\t\t\ts.isReady = false\n\t\t\ts.Unlock()\n\t\t\ts.logger.Printf(\"AMQP error during push: %v\", amqpError)\n\t\t\tif i < maxRetries-1 {\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\treturn err\n\t}\n\treturn errors.New(\"failed to publish after retries\")\n}\n\nfunc (s *Session) UnsafePush(data []byte) error {\n\ts.RLock()\n\tchannel := s.channel\n\ts.RUnlock()\n\n\tif channel == nil {\n\t\treturn errors.New(\"channel is nil\")\n\t}\n\treturn channel.Publish(\n\t\t\"\",\n\t\ts.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"application/octet-stream\",\n\t\t\tBody:        data,\n\t\t},\n\t)\n}\n\nfunc (s *Session) cleanup() {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tif s.connection != nil {\n\t\ts.connection.Close()\n\t}\n\tif s.channel != nil {\n\t\ts.channel.Close()\n\t}\n\tclose(s.done)\n}"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Implement a RabbitMQ client in Go that handles connection management, queue declaration, and message publishing with retry logic for reliability.\n\nStruct Description: RabbitClient is a struct that encapsulates the functionality for interacting with a RabbitMQ server, including establishing connections, declaring queues, and publishing messages with automatic reconnection attempts on failures.\n\nFields:\n- url: string - The connection URL for the RabbitMQ server\n- queueName: string - The name of the queue to interact with\n- connection: *amqp.Connection - The active RabbitMQ connection\n- channel: *amqp.Channel - The channel for communication with RabbitMQ\n\nMethods:\n- Connect() -> void - Establishes connection to RabbitMQ server, creates a channel, and declares a queue with TTL and priority settings. Implements retry logic on failures.\n- PublishTgMessage(messageBag MessageBag) -> void - Publishes a message to the declared queue after JSON serialization. Implements retry logic on failures and handles reconnection.\n- Close() -> void - Properly closes the channel and connection to RabbitMQ if they exist.\n- NewRabbitClient(url string, queueName string) -> *RabbitClient - Constructor function that initializes and returns a new RabbitClient instance with established connection.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"time\"\n)\n\ntype RabbitClient struct {\n\turl\t\t\tstring\n\tqueueName\tstring\n\tconnection\t*amqp.Connection\n\tchannel\t\t*amqp.Channel\n}\n\nfunc (rc *RabbitClient) Connect() {\n\tfor {\n\t\tvar err error\n\n\t\trc.connection, err = amqp.Dial(rc.url)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't connect to rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\trc.channel, err = rc.connection.Channel()\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't create channel (connect was ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\targs := make(amqp.Table)\n\t\targs[\"x-message-ttl\"] = int32(1000 * 60 * 60 * 24 * 10)\n\t\targs[\"x-max-priority\"] = int32(255)\n\n\t\t_, err = rc.channel.QueueDeclare(\n\t\t\trc.queueName,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\targs,\n\t\t)\n\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't declare queue (connect, channel were ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tfor {\n\t\tbody, err := json.Marshal(messageBag)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error marshaling a message.\")\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Printf(\"Publishing %+v ...\\n\", string(body))\n\n\t\terr = rc.channel.Publish(\n\t\t\t\"\",\n\t\t\trc.queueName,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tamqp.Publishing{\n\t\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\t\tContentType: \"text/plain\",\n\t\t\t\tBody: body,\n\t\t\t\tPriority: messageBag.Priority,\n\t\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't publish text '%s', will retry in 1 sec: %s\", string(body), err)\n\t\t\trc.Close()\n\t\t\trc.Connect()\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) Close() {\n\tif rc.channel != nil {\n\t\trc.channel.Close()\n\t}\n\tif rc.connection != nil {\n\t\trc.connection.Close()\n\t}\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\trabbit := &RabbitClient{\n\t\turl: url,\n\t\tqueueName: queueName,\n\t}\n\trabbit.Connect()\n\tlog.Println(\"Successfully connected to RabbitMQ\")\n\treturn rabbit\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype MessageBag struct {\n\tID   string `json:\"id\"`\n\tBody string `json:\"body\"`\n}\n\ntype RabbitClient struct {\n\turl        string\n\tqueueName  string\n\tconnection *amqp.Connection\n\tchannel    *amqp.Channel\n}\n\nfunc (r *RabbitClient) Connect() {\n\tvar conn *amqp.Connection\n\tvar ch *amqp.Channel\n\tvar err error\n\n\tfor i := 0; i < 5; i++ {\n\t\tconn, err = amqp.Dial(r.url)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Failed to connect to RabbitMQ: %v. Retrying...\", err)\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tch, err = conn.Channel()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Failed to create channel: %v. Retrying...\", err)\n\t\t\tconn.Close()\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\targs := make(amqp.Table)\n\t\targs[\"x-max-priority\"] = int32(10)\n\t\targs[\"x-message-ttl\"] = int32(86400000)\n\n\t\t_, declareErr := ch.QueueDeclare(\n\t\t\tr.queueName,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\targs,\n\t\t)\n\t\tif declareErr != nil {\n\t\t\tlog.Printf(\"Queue declare failed: %v. Retrying...\", declareErr)\n\t\t\tch.Close()\n\t\t\tconn.Close()\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tr.connection = conn\n\t\tr.channel = ch\n\t\treturn\n\t}\n\n\tlog.Fatalf(\"Failed to connect to RabbitMQ after retries\")\n}\n\nfunc (r *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tbody, err := json.Marshal(messageBag)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to marshal message: %v\", err)\n\t\treturn\n\t}\n\n\tfor i := 0; i < 5; i++ {\n\t\terr := r.channel.Publish(\n\t\t\t\"\",\n\t\t\tr.queueName,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tamqp.Publishing{\n\t\t\t\tContentType: \"application/json\",\n\t\t\t\tBody:        body,\n\t\t\t\tPriority:    0,\n\t\t\t},\n\t\t)\n\t\tif err == nil {\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Failed to publish message: %v. Reconnecting...\", err)\n\t\tr.Close()\n\t\tr.Connect()\n\t\ttime.Sleep(5 * time.Second)\n\t}\n\n\tlog.Printf(\"Failed to publish message after retries\")\n}\n\nfunc (r *RabbitClient) Close() {\n\tif r.channel != nil {\n\t\tr.channel.Close()\n\t}\n\tif r.connection != nil {\n\t\tr.connection.Close()\n\t}\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\tclient := &RabbitClient{\n\t\turl:       url,\n\t\tqueueName: queueName,\n\t}\n\tclient.Connect()\n\treturn client\n}"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Implement a thread-safe RabbitMQ producer in Go that handles connection management, queue/exchange declaration, and message publishing.\n\nStruct Description: AMQPConn represents a RabbitMQ connection with built-in connection pooling and thread safety. It manages the AMQP connection, channel, and provides message sending capability.\n\nFields:\n\nmu: [sync.Mutex] - Mutex for thread-safe operations\nep: [Endpoint] - Configuration endpoint containing AMQP settings\nconn: [*amqp.Connection] - Underlying AMQP connection\nchannel: [*amqp.Channel] - AMQP channel for message operations\nex: [bool] - Flag indicating if connection is expired\nt: [time.Time] - Timestamp of last operation\n\nMethods:\n\nSend: [Name](msg string) -> [error] - Publishes a message to RabbitMQ. Handles connection establishment, channel creation, and queue/exchange declaration if not already done. Returns error if operation fails.\n[Input Parameters]:\n- msg: string - The message to be published\n[Return Type]:\n- error - Returns nil on success, error on failure",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc (conn *AMQPConn) Send(msg string) error {\n\tconn.mu.Lock()\n\tdefer conn.mu.Unlock()\n\n\tif conn.ex {\n\t\treturn errExpired\n\t}\n\tconn.t = time.Now()\n\n\tif conn.conn == nil {\n\t\tprefix := \"amqp://\"\n\t\tif conn.ep.AMQP.SSL {\n\t\t\tprefix = \"amqps://\"\n\t\t}\n\n\t\tvar cfg amqp.Config\n\t\tcfg.Dial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(network, addr, time.Second)\n\t\t}\n\t\tc, err := amqp.DialConfig(fmt.Sprintf(\"%s%s\", prefix, conn.ep.AMQP.URI), cfg)\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tchannel, err := c.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := channel.ExchangeDeclare(\n\t\t\tconn.ep.AMQP.QueueName,\n\t\t\tconn.ep.AMQP.Type,\n\t\t\tconn.ep.AMQP.Durable,\n\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\tconn.ep.AMQP.Internal,\n\t\t\tconn.ep.AMQP.NoWait,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif conn.ep.AMQP.Type != \"topic\" {\n\t\t\tif _, err := channel.QueueDeclare(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.Durable,\n\t\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\t\tfalse,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err := channel.QueueBind(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.RouteKey,\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tconn.conn = c\n\t\tconn.channel = channel\n\t}\n\n\treturn conn.channel.Publish(\n\t\tconn.ep.AMQP.QueueName,\n\t\tconn.ep.AMQP.RouteKey,\n\t\tconn.ep.AMQP.Mandatory,\n\t\tconn.ep.AMQP.Immediate,\n\t\tamqp.Publishing{\n\t\t\tHeaders:         amqp.Table{},\n\t\t\tContentType:     \"application/json\",\n\t\t\tContentEncoding: \"\",\n\t\t\tBody:            []byte(msg),\n\t\t\tDeliveryMode:    conn.ep.AMQP.DeliveryMode,\n\t\t\tPriority:        conn.ep.AMQP.Priority,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Endpoint struct {\n\tURL             string\n\tExchange        string\n\tExchangeType    string\n\tExchangeDurable bool\n\tQueue           string\n\tQueueDurable    bool\n\tKey             string\n}\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc (c *AMQPConn) Send(msg string) error {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tvar err error\n\n\tif c.ex || c.conn == nil {\n\t\tif c.channel != nil {\n\t\t\tc.channel.Close()\n\t\t\tc.channel = nil\n\t\t}\n\t\tif c.conn != nil {\n\t\t\tc.conn.Close()\n\t\t\tc.conn = nil\n\t\t}\n\n\t\tc.conn, err = amqp.Dial(c.ep.URL)\n\t\tif err != nil {\n\t\t\tc.ex = true\n\t\t\treturn err\n\t\t}\n\t\tc.ex = false\n\t}\n\n\tif c.channel == nil {\n\t\tc.channel, err = c.conn.Channel()\n\t\tif err != nil {\n\t\t\tc.ex = true\n\t\t\treturn err\n\t\t}\n\n\t\tif err := c.channel.ExchangeDeclare(\n\t\t\tc.ep.Exchange,\n\t\t\tc.ep.ExchangeType,\n\t\t\tc.ep.ExchangeDurable,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif _, err := c.channel.QueueDeclare(\n\t\t\tc.ep.Queue,\n\t\t\tc.ep.QueueDurable,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := c.channel.QueueBind(\n\t\t\tc.ep.Queue,\n\t\t\tc.ep.Key,\n\t\t\tc.ep.Exchange,\n\t\t\tfalse,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := c.channel.Publish(\n\t\tc.ep.Exchange,\n\t\tc.ep.Key,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(msg),\n\t\t},\n\t); err != nil {\n\t\tc.channel.Close()\n\t\tc.channel = nil\n\t\treturn err\n\t}\n\n\tc.t = time.Now()\n\n\treturn nil\n}"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)\n\n---\n\nTask Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/ghttp\"\n\t\"github.com/gogf/gf/v2/test/gtest\"\n\t\"github.com/gogf/gf/v2/util/guid\"\n)\nfunc Test_WebSocket(t *testing.T) {\n\ts := g.Server(guid.S())\n\ts.BindHandler(\"/ws\", func(r *ghttp.Request) {\n\t\tws, err := r.WebSocket()\n\t\tif err != nil {\n\t\t\tr.Exit()\n\t\t}\n\t\tfor {\n\t\t\tmsgType, msg, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = ws.WriteMessage(msgType, msg); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\ts.SetDumpRouterMap(false)\n\ts.Start()\n\tdefer s.Shutdown()\n\n\ttime.Sleep(100 * time.Millisecond)\n\tgtest.C(t, func(t *gtest.T) {\n\t\tconn, _, err := websocket.DefaultDialer.Dial(fmt.Sprintf(\n\t\t\t\"ws://127.0.0.1:%d/ws\", s.GetListenedPort(),\n\t\t), nil)\n\t\tt.AssertNil(err)\n\t\tdefer conn.Close()\n\n\t\tmsg := []byte(\"hello\")\n\t\terr = conn.WriteMessage(websocket.TextMessage, msg)\n\t\tt.AssertNil(err)\n\n\t\tmt, data, err := conn.ReadMessage()\n\t\tt.AssertNil(err)\n\t\tt.Assert(mt, websocket.TextMessage)\n\t\tt.Assert(data, msg)\n\t})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"github.com/gorilla/websocket\"\n\t\"strconv\"\n\t\"testing\"\n)\n\nfunc TestWebSocketClient(t *testing.T, serverPort int) {\n\turl := \"ws://localhost:\" + strconv.Itoa(serverPort)\n\tconn, _, err := websocket.DefaultDialer.Dial(url, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tmsg := \"test message\"\n\tif err := conn.WriteMessage(websocket.TextMessage, []byte(msg)); err != nil {\n\t\tt.Errorf(\"Write error: %v\", err)\n\t}\n\n\tmt, resp, err := conn.ReadMessage()\n\tif err != nil {\n\t\tt.Errorf(\"Read error: %v\", err)\n\t} else {\n\t\tif mt != websocket.TextMessage {\n\t\t\tt.Errorf(\"Unexpected message type: %d\", mt)\n\t\t}\n\t\tif string(resp) != msg {\n\t\t\tt.Errorf(\"Expected %q, got %q\", msg, string(resp))\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that connects to a server, sends multiple messages at random intervals, and handles incoming messages concurrently.\n\nFunction Description: The function establishes a WebSocket connection to a specified server, spawns a goroutine to continuously read incoming messages, and sends a random number of messages to the server with small delays between each send. The function should properly handle connection errors and ensure the connection is closed when done.\n\nInput:\n- i (int64): Seed value for random number generation\n- room (string): Identifier for the message room/context\n\nOutput: None (the function performs operations but doesn't return any value)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/rs/xid\"\n)\n\nfunc testClient(i int64, room string) {\n\tr := rand.New(rand.NewSource(i))\n\tconn, _, err := websocket.DefaultDialer.Dial(SERVER, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo func() {\n\t\tfor {\n\t\t\t_ = conn.SetReadDeadline(time.Now().Add(10 * time.Second))\n\t\t\t_, _, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tdefer conn.Close()\n\n\tops := r.Intn(100)\n\tfor i := 0; i < ops; i++ {\n\t\tm := msg(r, room)\n\t\terr = conn.WriteMessage(websocket.TextMessage, m)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"err\", err)\n\t\t}\n\t\ttime.Sleep(30 * time.Millisecond)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc processMessages(i int64, room string) {\n\trand.Seed(i)\n\tconn, _, err := websocket.DefaultDialer.Dial(\"ws://example.com/socket\", nil)\n\tif err != nil {\n\t\tlog.Printf(\"Connection error: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"Received: %s\", msg)\n\t\t}\n\t}()\n\n\tnumMessages := rand.Intn(5) + 1\n\tfor j := 0; j < numMessages; j++ {\n\t\tpayload := map[string]string{\n\t\t\t\"room\":    room,\n\t\t\t\"content\": \"message-\" + strconv.Itoa(j),\n\t\t}\n\t\tdata, _ := json.Marshal(payload)\n\t\tif err := conn.WriteMessage(websocket.TextMessage, data); err != nil {\n\t\t\tlog.Printf(\"Write error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tdelay := time.Duration(rand.Intn(1000)) * time.Millisecond\n\t\ttime.Sleep(delay)\n\t}\n}"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Create a function that handles WebSocket connections by upgrading HTTP connections, reading incoming messages, and forwarding them to a channel for further processing.\n\nFunction Description: The function `makeUpgradeOnConnect` generates and returns an HTTP handler function that upgrades incoming HTTP connections to WebSocket connections. It reads messages from the WebSocket connection and sends them to a provided channel. The WebSocket connection is properly closed when processing is complete.\n\nInput: \n- `ch chan string`: A channel of strings used to forward incoming WebSocket messages for further processing.\n\nOutput: \n- Returns a function of type `func(http.ResponseWriter, *http.Request)` that serves as an HTTP handler for WebSocket connections.\n\nNote: The returned HTTP handler function does not explicitly return any value but handles WebSocket communication and message forwarding internally.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc makeUpgradeOnConnect(ch chan string) func(http.ResponseWriter, *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tc, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer c.Close()\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tgo func() {\n\t\t\t\tch <- string(message)\n\t\t\t}()\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n)\n\nfunc makeUpgradeOnConnect(ch chan string) func(http.ResponseWriter, *http.Request) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Could not upgrade connection\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\t_, p, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tch <- string(p)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 349,
    "Instruction": "Task Description: Implement a WebSocket handler for processing VNC-related messages, including image capture data and clipboard events, using gorilla WebSocket library in Go.\n\nStruct Description: The Process struct manages WebSocket connections for VNC operations, handling message passing between the WebSocket connection and internal channels.\n\nFields:\n- srv: *http.Server - HTTP server instance\n- chWrite: chan *vncnetwork.VncMsg - Channel for outgoing VNC messages\n- chImage: chan *vncnetwork.ImageData - Channel for incoming image data\n- chClipboard: chan *vncnetwork.ClipboardData - Channel for incoming clipboard data\n\nMethods:\n- ws: (w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket connections, upgrades HTTP to WebSocket, and manages message reading/writing\n- Close: () -> None - Closes the WebSocket connection and cleans up resources (implied by defer p.Close() in ws method)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/rule/vnc/vncnetwork\"\n\t\"github.com/lwch/natpass/code/utils\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype Process struct {\n\tsrv         *http.Server\n\tchWrite     chan *vncnetwork.VncMsg\n\tchImage     chan *vncnetwork.ImageData\n\tchClipboard chan *vncnetwork.ClipboardData\n}\n\nvar upgrader = websocket.Upgrader{EnableCompression: true}\n\nfunc (p *Process) ws(w http.ResponseWriter, r *http.Request) {\n\tlogging.Info(\"child process connected\")\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tdefer p.Close()\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer utils.Recover(\"ws read\")\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t_, data, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"read message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar msg vncnetwork.VncMsg\n\t\t\terr = proto.Unmarshal(data, &msg)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tswitch msg.GetXType() {\n\t\t\tcase vncnetwork.VncMsg_capture_data:\n\t\t\t\tp.chImage <- msg.GetData()\n\t\t\tcase vncnetwork.VncMsg_clipboard_event:\n\t\t\t\tp.chClipboard <- msg.GetClipboard()\n\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer utils.Recover(\"ws write\")\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tmsg := <-p.chWrite\n\t\t\tdata, err := proto.Marshal(msg)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\terr = conn.WriteMessage(websocket.BinaryMessage, data)\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"write message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\twg.Wait()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  8192,\n\tWriteBufferSize: 8192,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype Process struct {\n\tsrv           *http.Server\n\tchWrite       chan *vncnetwork.VncMsg\n\tchImage       chan *vncnetwork.ImageData\n\tchClipboard   chan *vncnetwork.ClipboardData\n}\n\nfunc (p *Process) ws(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"WebSocket upgrade failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer p.Close()\n\n\tdone := make(chan struct{})\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\tmsgType, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tswitch msgType {\n\t\t\tcase websocket.TextMessage:\n\t\t\t\tclipboard := &vncnetwork.ClipboardData{Content: string(message)}\n\t\t\t\tselect {\n\t\t\t\tcase p.chClipboard <- clipboard:\n\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\tcase websocket.BinaryMessage:\n\t\t\t\timage := &vncnetwork.ImageData{Data: message}\n\t\t\t\tselect {\n\t\t\t\tcase p.chImage <- image:\n\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg := <-p.chWrite:\n\t\t\t\tif err := conn.WriteJSON(msg); err != nil {\n\t\t\t\t\tconn.Close()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-done:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\t<-done\n\tconn.Close()\n}\n\nfunc (p *Process) Close() {\n\tclose(p.chWrite)\n\tclose(p.chImage)\n\tclose(p.chClipboard)\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that handles specific command requests through a web interface. The server should process incoming commands and forward them to a command parser.\n\nFunction Description: The `cmdHandle` function is an HTTP handler that processes POST requests containing a \"cmd\" parameter. It extracts the command and passes it to a command parser. The `InitWeb` function initializes the web server, registers the handler, and starts listening on a specified URL.\n\nInput:\n- For `cmdHandle`:\n  - `w http.ResponseWriter` - Used to write the HTTP response\n  - `r *http.Request` - Contains the incoming HTTP request\n- For `InitWeb`:\n  - None (uses package-level variable `world.Web_Url` for server address)\n\nOutput:\n- For `cmdHandle`:\n  - None (writes response directly to `http.ResponseWriter`)\n- For `InitWeb`:\n  - None (starts server as a side effect, may log errors)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\tcmd := r.FormValue(\"cmd\")\n\tif cmd != \"\" {\n\t\tcm.ParseConsole(g_Cmd, (cmd))\n\t}\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/gm\", cmdHandle)\n\terr := http.ListenAndServe(world.Web_Url, nil)\n\tif err != nil {\n\t\tbase.LOG.Println(\"World Web Server : \", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"world\"\n)\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tcmd := r.FormValue(\"cmd\")\n\tif cmd == \"\" {\n\t\thttp.Error(w, \"Missing 'cmd' parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tw.Write([]byte(\"Received command: \" + cmd))\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/command\", cmdHandle)\n\tlog.Println(\"Starting server on\", world.Web_Url)\n\tif err := http.ListenAndServe(world.Web_Url, nil); err != nil {\n\t\tlog.Fatal(\"Error starting server:\", err)\n\t}\n}"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Implement a WebSocket server for RDP (Remote Desktop Protocol) connections using the Gorilla WebSocket library in Go. The server should handle WebSocket connections, manage RDP sessions through a Guacamole tunnel, and support bidirectional communication between the client and the RDP server.\n\nStruct Description: The RDPServer struct represents an RDP WebSocket server that manages WebSocket connections and RDP sessions via Guacamole tunnels.\n\nFields:\n- Session: *session.SSession - The current user session information\n- Host: string - The RDP server host address\n- Port: int - The RDP server port number\n- Username: string - The username for RDP authentication\n- Password: string - The password for RDP authentication\n- ConnectionId: string - Unique identifier for the RDP connection\n- Width: int - The screen width for the RDP session\n- Height: int - The screen height for the RDP session\n- Dpi: int - The DPI setting for the RDP session\n\nMethods:\n- ServeHTTP: (w http.ResponseWriter, r *http.Request) -> None - Handles HTTP requests by upgrading them to WebSocket connections, establishing a Guacamole tunnel, and managing bidirectional communication between the client and RDP server. This method implements the http.Handler interface.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"yunion.io/x/log\"\n\t\"yunion.io/x/pkg/errors\"\n\n\t\"yunion.io/x/onecloud/pkg/webconsole/guac\"\n\t\"yunion.io/x/onecloud/pkg/webconsole/options\"\n\t\"yunion.io/x/onecloud/pkg/webconsole/session\"\n)\n\ntype RDPServer struct {\n\tSession *session.SSession\n\n\tHost         string\n\tPort         int\n\tUsername     string\n\tPassword     string\n\tConnectionId string\n\n\tWidth  int\n\tHeight int\n\tDpi    int\n}\n\nfunc (s *RDPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tvar up = websocket.Upgrader{\n\t\tReadBufferSize:  1024,\n\t\tWriteBufferSize: 1024,\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\n\tws, err := up.Upgrade(w, r, http.Header{\"Sec-Websocket-Protocol\": []string{\n\t\tr.Header.Get(\"Sec-Websocket-Protocol\"),\n\t}})\n\tif err != nil {\n\t\tlog.Errorf(\"upgrade error: %v\", err)\n\t\treturn\n\t}\n\n\tdefer ws.Close()\n\n\ttunnel, err := guac.NewGuacamoleTunnel(\n\t\ts.Host,\n\t\ts.Port,\n\t\ts.Username,\n\t\ts.Password,\n\t\ts.ConnectionId,\n\t\ts.Width,\n\t\ts.Height,\n\t\ts.Dpi,\n\t\ts.Session.GetClientSession().GetUserId(),\n\t)\n\tif err != nil {\n\t\tlog.Errorf(\"NewGuacamoleTunnel error: %v\", err)\n\t\treturn\n\t}\n\n\terr = tunnel.Start()\n\tif err != nil {\n\t\tlog.Errorf(\"Start error: %v\", err)\n\t\treturn\n\t}\n\n\tdone := make(chan bool, 4)\n\ttimer := time.NewTimer(time.Microsecond * 100)\n\tsetDone := func() {\n\t\tdone <- true\n\t}\n\n\tgo func() {\n\t\tdefer setDone()\n\n\t\tfor {\n\t\t\tins, err := tunnel.ReadOne()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 && timer != nil {\n\t\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t\t}\n\t\t\terr = ws.WriteMessage(websocket.TextMessage, []byte(ins.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed writing to guacd %s: %v\", ins.String(), err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer setDone()\n\t\tdefer tunnel.Stop()\n\n\t\tfor {\n\t\t\t_, p, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Errorf(\"read message error %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 && timer != nil {\n\t\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t\t}\n\t\t\t_, err = tunnel.Write(p)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed writing to guacd: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tstop := make(chan bool)\n\tgo func() {\n\t\tif options.Options.RdpSessionTimeoutMinutes > 0 {\n\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t}\n\t\tdefer timer.Stop()\n\t\tdefer setDone()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\treturn\n\t\t\tcase <-timer.C:\n\t\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\ttimer.Reset(time.Microsecond * 100)\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer setDone()\n\n\t\terr = tunnel.Wait()\n\t\tif err != nil && errors.Cause(err) != guac.TunnerClose {\n\t\t\tlog.Errorf(\"wait error: %v\", err)\n\t\t}\n\t}()\n\n\t<-done\n\tstop <- true\n\tlog.Infof(\"rdp %s@%s:%d complete\", s.Username, s.Host, s.Port)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype RDPServer struct {\n\tSession      *session.SSession\n\tHost         string\n\tPort         int\n\tUsername     string\n\tPassword     string\n\tConnectionId string\n\tWidth        int\n\tHeight       int\n\tDpi          int\n}\n\nfunc (s *RDPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"WebSocket upgrade failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tguacdConn, err := net.Dial(\"unix\", \"/var/run/guacd.sock\")\n\tif err != nil {\n\t\tlog.Printf(\"Failed to connect to guacd: %v\", err)\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tselectInstr := guacInstruction(\"select\", s.ConnectionId)\n\tif _, err := guacdConn.Write(selectInstr); err != nil {\n\t\tlog.Printf(\"Failed to send select: %v\", err)\n\t\tconn.Close()\n\t\tguacdConn.Close()\n\t\treturn\n\t}\n\n\tsizeInstr := guacInstruction(\"size\", strconv.Itoa(s.Width), strconv.Itoa(s.Height), strconv.Itoa(s.Dpi))\n\tif _, err := guacdConn.Write(sizeInstr); err != nil {\n\t\tlog.Printf(\"Failed to send size: %v\", err)\n\t\tconn.Close()\n\t\tguacdConn.Close()\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tdefer conn.Close()\n\t\tdefer guacdConn.Close()\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"WebSocket read error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := guacdConn.Write(message); err != nil {\n\t\t\t\tlog.Printf(\"Guacd write error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer conn.Close()\n\t\tdefer guacdConn.Close()\n\t\tbuffer := make([]byte, 4096)\n\t\tfor {\n\t\t\tn, err := guacdConn.Read(buffer)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Guacd read error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := conn.WriteMessage(websocket.TextMessage, buffer[:n]); err != nil {\n\t\t\t\tlog.Printf(\"WebSocket write error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n}\n\nfunc guacInstruction(opcode string, args ...string) []byte {\n\tparts := append([]string{opcode}, args...)\n\tbody := strings.Join(parts, \",\")\n\treturn []byte(fmt.Sprintf(\"%d.%s;\", len(body), body))\n}"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, reads incoming messages, and echoes them back to the client.\n\nFunction Description: The handler function manages WebSocket connections by upgrading HTTP requests, handling incoming messages, and maintaining the connection until closure. It includes error handling for connection issues and logs key events.\n\nInput:\n- w http.ResponseWriter: The HTTP response writer used to send responses\n- r *http.Request: The HTTP request containing connection details\n\nOutput: None (void function), but it performs the following actions:\n- Upgrades HTTP connection to WebSocket\n- Reads and echoes messages\n- Closes the connection when done or on error\n- Logs connection events and errors",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\tnetheader \"knative.dev/networking/pkg/http/header\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tif netheader.IsKubeletProbe(r) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\treturn\n\t}\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"Error upgrading websocket:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tlog.Println(\"Connection upgraded to WebSocket. Entering receive loop.\")\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tif websocket.IsCloseError(err, websocket.CloseAbnormalClosure) {\n\t\t\t\tlog.Println(\"Client disconnected.\")\n\t\t\t} else {\n\t\t\t\tlog.Println(\"Handler exiting on error:\", err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Successfully received: %q\", message)\n\t\tif err = conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Println(\"Failed to write message:\", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Successfully wrote: %q\", message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Printf(\"Upgrade failed: %v\", err)\n\t\thttp.Error(w, \"WebSocket upgrade failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tlog.Println(\"WebSocket connection established\")\n\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Received message: %s\", message)\n\t\tif err := conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Printf(\"Write error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t}\n\tlog.Println(\"WebSocket connection closed\")\n}"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, sends a greeting message to the client, and echoes back any messages received from the client.\n\nFunction Description: The function `hello` handles WebSocket communication by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It then enters a loop where it sends a greeting message to the client and reads messages from the client, printing them to the console. The connection is properly closed when the function exits.\n\nInput: \n- `c echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails or if there is an error during message reading/writing. Otherwise, it returns nil once the connection is closed.\n\nNote: The function runs indefinitely in a loop until the WebSocket connection is closed or an error occurs.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc hello(c echo.Context) error {\n\tconn, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tif err := conn.WriteMessage(websocket.TextMessage, []byte(\"Hello from server\")); err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\tmsgType, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(string(msg))\n\t\tif err := conn.WriteMessage(msgType, msg); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Create a WebSocket handler function that establishes an SSH connection through a WebSocket interface, allowing for terminal-like interaction with a remote host.\n\nFunction Description: The function `ConnectSshPmExec` handles WebSocket connections to facilitate SSH terminal sessions. It upgrades an HTTP connection to WebSocket, validates host credentials, establishes an SSH connection, and manages bidirectional communication between the WebSocket client and SSH server. The function includes error handling and resource cleanup.\n\nInput:\n- `c` (gin.Context) - Gin framework context for HTTP request handling\n- `username` (string) - Username for authentication (unused in current implementation)\n- `envName` (string) - Environment name (unused in current implementation)\n- `productName` (string) - Product name (unused in current implementation)\n- `ip` (string) - IP address of the target host\n- `hostId` (string) - Identifier for the host's private key\n- `cols` (int) - Terminal column size\n- `rows` (int) - Terminal row size\n- `log` (*zap.SugaredLogger) - Logger for error reporting\n\nOutput:\n- `error` - Returns nil on success, or an error object if any step fails",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/ssh\"\n\n\tcommonrepo \"github.com/koderover/zadig/v2/pkg/microservice/aslan/core/common/repository/mongodb\"\n\t\"github.com/koderover/zadig/v2/pkg/setting\"\n\te \"github.com/koderover/zadig/v2/pkg/tool/errors\"\n\ttoolssh \"github.com/koderover/zadig/v2/pkg/tool/ssh\"\n\t\"github.com/koderover/zadig/v2/pkg/tool/wsconn\"\n\t\"github.com/koderover/zadig/v2/pkg/util\"\n)\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\nfunc ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tws, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"ws upgrade err:%s\", err)\n\t\treturn e.ErrLoginPm.AddErr(err)\n\t}\n\n\tdefer ws.Close()\n\tresp, err := commonrepo.NewPrivateKeyColl().Find(commonrepo.FindPrivateKeyOption{\n\t\tID: hostId,\n\t})\n\tif err != nil {\n\t\tlog.Errorf(\"PrivateKey.Find ip %s id %s error: %s\", ip, hostId, err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrGetPrivateKey.Error()))\n\t\treturn e.ErrGetPrivateKey\n\n\t}\n\tif resp.Status != setting.PMHostStatusNormal {\n\t\tlog.Errorf(\"host %s status %s, is not normal\", ip, resp.Status)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s status %s,is not normal\", ip, resp.Status))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.ScheduleWorkflow {\n\t\tlog.Errorf(\"host %s is not enable login\", ip)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s is not enable ssh\", ip))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.Port == 0 {\n\t\tresp.Port = setting.PMHostDefaultPort\n\t}\n\n\tsDec, err := base64.StdEncoding.DecodeString(resp.PrivateKey)\n\tif err != nil {\n\t\tlog.Errorf(\"base64 decode failed ip:%s, error:%s\", ip, err)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"base64 decode failed ip:%s, error:%s\", ip, err))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\n\tsshCli, err := toolssh.NewSshCli(sDec, resp.UserName, resp.IP, resp.Port)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshCli err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshCli.Close()\n\n\tsshConn, err := wsconn.NewSshConn(cols, rows, sshCli)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshConn err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshConn.Close()\n\n\tstopChan := make(chan bool, 3)\n\tgo sshConn.ReadWsMessage(ws, stopChan)\n\tgo sshConn.SendWsWriteMessage(ws, stopChan)\n\tgo sshConn.SessionWait(stopChan)\n\n\t<-stopChan\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package sshws\n\nimport (\n\t\"encoding/json\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"golang.org/x/crypto/ssh\"\n\t\"go.uber.org/zap\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"Upgrade error: %v\", err)\n\t\treturn err\n\t}\n\n\thostInfo, err := getHostInfo(hostId)\n\tif err != nil {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"Failed to get host info: \" + err.Error()}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn err\n\t}\n\n\tif !validateHost(hostId, ip) {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"Host validation failed\"}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn nil\n\t}\n\n\tsigner, err := ssh.ParsePrivateKey([]byte(hostInfo.PrivateKey))\n\tif err != nil {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"Failed to parse private key: \" + err.Error()}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn err\n\t}\n\n\tsshConfig := &ssh.ClientConfig{\n\t\tUser: hostInfo.Username,\n\t\tAuth: []ssh.AuthMethod{\n\t\t\tssh.PublicKeys(signer),\n\t\t},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t}\n\n\tsshClient, err := ssh.Dial(\"tcp\", ip+\":22\", sshConfig)\n\tif err != nil {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"SSH connection failed: \" + err.Error()}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn err\n\t}\n\n\tsession, err := sshClient.NewSession()\n\tif err != nil {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"SSH session creation failed: \" + err.Error()}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn err\n\t}\n\n\tmodes := ssh.TerminalModes{\n\t\tssh.ECHO: 1,\n\t}\n\tif err := session.RequestPty(\"xterm\", rows, cols, modes); err != nil {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"PTY request failed: \" + err.Error()}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn err\n\t}\n\n\tif err := session.Shell(); err != nil {\n\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"Shell start failed: \" + err.Error()}\n\t\tif writeErr := conn.WriteJSON(payload); writeErr != nil {\n\t\t\tlog.Errorw(\"Failed to send error message\", \"error\", writeErr)\n\t\t}\n\t\treturn err\n\t}\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer conn.Close()\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\tn, err := session.Stdout.Read(buf)\n\t\t\tif err != nil {\n\t\t\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"SSH read error: \" + err.Error()}\n\t\t\t\t_ = conn.WriteJSON(payload)\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := conn.WriteJSON(map[string]string{\"type\": \"output\", \"data\": string(buf[:n])}); err != nil {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar msg struct {\n\t\t\t\tType string `json:\"type\"`\n\t\t\t\tData string `json:\"data\"`\n\t\t\t}\n\t\t\tif err := json.Unmarshal(message, &msg); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif msg.Type == \"input\" {\n\t\t\t\tif _, err := session.Stdin.Write([]byte(msg.Data)); err != nil {\n\t\t\t\t\tpayload := map[string]string{\"type\": \"error\", \"data\": \"SSH stdin write error: \" + err.Error()}\n\t\t\t\t\t_ = conn.WriteJSON(payload)\n\t\t\t\t\tdone <- struct{}{}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\t<-done\n\n\tsession.Close()\n\tsshClient.Close()\n\n\treturn nil\n}\n\ntype hostInfo struct {\n\tUsername    string\n\tPrivateKey  string\n}\n\nfunc getHostInfo(hostId string) (hostInfo, error) {\n\treturn hostInfo{\n\t\tUsername:    \"sshuser\",\n\t\tPrivateKey:  \"dummy_private_key\",\n\t}, nil\n}\n\nfunc validateHost(hostId, ip string) bool {\n\treturn true\n}"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Implement a WebSocket handler for VNC (Virtual Network Computing) functionality that enables remote desktop interaction through a WebSocket connection, including image transmission, clipboard sharing, and input event handling.\n\nStruct Description: The VNC struct represents a VNC over WebSocket handler that manages the connection between a client and a remote VNC server, facilitating bidirectional communication for remote desktop operations.\n\nFields:\n- link: *network.Link - Represents the network link to the remote VNC server\n- chClipboard: chan string - Channel for transmitting clipboard content between client and server\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages the VNC session lifecycle\n- remoteRead: (ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) -> None - Processes incoming messages from the remote VNC server\n- localRead: (ctx context.Context, local *websocket.Conn, remote *conn.Conn) -> None - Handles messages received from the WebSocket client\n- mouseEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse movement and click events\n- keyboardEvent: (remote *conn.Conn, data []byte) -> None - Handles keyboard input events\n- cadEvent: (remote *conn.Conn) -> None - Manages Ctrl+Alt+Del special key combination\n- scrollEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse scroll wheel events",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/binary\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"image\"\n\t\"image/draw\"\n\t\"image/jpeg\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/runtime\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype VNC struct {\n\tlink         *network.Link\n\tchClipboard  chan string\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer local.Close()\n\tch := conn.ChanRead(id)\n\tdefer conn.SendDisconnect(v.link.target, v.link.id)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.remoteRead(ctx, ch, local)\n\t}()\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.localRead(ctx, local, conn)\n\t}()\n\twg.Wait()\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteRead\")\n\tfor {\n\t\tvar msg *network.Msg\n\t\tselect {\n\t\tcase msg = <-ch:\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_vnc_image:\n\t\t\tdata, err := decodeImage(msg.GetVimg())\n\t\t\truntime.Assert(err)\n\t\t\treplyImage(local, msg.GetVimg(), data, len(msg.GetVimg().GetData()))\n\t\tcase network.Msg_vnc_clipboard:\n\t\t\tv.chClipboard <- msg.GetVclipboard()\n\t\tdefault:\n\t\t\tlogging.Error(\"on message: %s\", msg.GetXType().String())\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tdefer utils.Recover(\"localRead\")\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"local read: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tvar msg struct {\n\t\t\tAction string `json:\"action\"`\n\t\t}\n\t\terr = json.Unmarshal(data, &msg)\n\t\tif err != nil {\n\t\t\tlogging.Error(\"unmarshal: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tswitch msg.Action {\n\t\tcase \"mouse\":\n\t\t\tv.mouseEvent(remote, data)\n\t\tcase \"keyboard\":\n\t\t\tv.keyboardEvent(remote, data)\n\t\tcase \"cad\":\n\t\t\tv.cadEvent(remote)\n\t\tcase \"scroll\":\n\t\t\tv.scrollEvent(remote, data)\n\t\t}\n\t}\n}\n\nfunc decodeImage(data *network.VncImage) ([]byte, error) {\n\tswitch data.GetEncode() {\n\tcase network.VncImage_raw:\n\t\treturn data.GetData(), nil\n\tcase network.VncImage_jpeg:\n\t\timg, err := jpeg.Decode(bytes.NewReader(data.GetData()))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\trect := img.Bounds()\n\t\traw := image.NewRGBA(rect)\n\t\tdraw.Draw(raw, rect, img, rect.Min, draw.Src)\n\t\treturn raw.Pix, nil\n\tcase network.VncImage_png:\n\t}\n\treturn nil, errors.New(\"unsupported\")\n}\n\nfunc replyImage(conn *websocket.Conn, msg *network.VncImage, data []byte, srcSize int) {\n\tinfo := msg.GetXInfo()\n\tbuf := make([]byte, len(data)+28)\n\tbinary.BigEndian.PutUint32(buf, info.GetScreenWidth())\n\tbinary.BigEndian.PutUint32(buf[4:], info.GetScreenHeight())\n\tbinary.BigEndian.PutUint32(buf[8:], info.GetRectX())\n\tbinary.BigEndian.PutUint32(buf[12:], info.GetRectY())\n\tbinary.BigEndian.PutUint32(buf[16:], info.GetRectWidth())\n\tbinary.BigEndian.PutUint32(buf[20:], info.GetRectHeight())\n\tbinary.BigEndian.PutUint32(buf[24:], uint32(srcSize))\n\tcopy(buf[28:], data)\n\tconn.WriteMessage(websocket.BinaryMessage, buf)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package vnc\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype VNC struct {\n\tlink          *network.Link\n\tchClipboard   chan string\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool { return true },\n\t}\n\twsConn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"WebSocket upgrade failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer wsConn.Close()\n\n\tctx, cancel := context.WithCancel(r.Context())\n\tdefer cancel()\n\n\tgo v.remoteRead(ctx, v.link.ReceiveChannel(), wsConn)\n\tgo v.localRead(ctx, wsConn, conn)\n\n\t<-ctx.Done()\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tfor {\n\t\tselect {\n\t\tcase msg := <-ch:\n\t\t\tswitch msg.Type {\n\t\t\tcase network.MsgImage:\n\t\t\t\tlocal.WriteMessage(websocket.BinaryMessage, msg.Payload)\n\t\t\tcase network.MsgClipboard:\n\t\t\t\tlocal.WriteMessage(websocket.TextMessage, []byte(msg.Payload))\n\t\t\t\tv.chClipboard <- string(msg.Payload)\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tfor {\n\t\tmsgType, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tswitch msgType {\n\t\tcase websocket.TextMessage:\n\t\t\tgo func() { v.chClipboard <- string(data) }()\n\t\tcase websocket.BinaryMessage:\n\t\t\tremote.Send(data)\n\t\t}\n\t}\n}\n\nfunc (v *VNC) mouseEvent(remote *conn.Conn, data []byte) {\n\t// Parse mouse event data (x, y, buttons)\n\tremote.Send([]byte{0x05, data[0], data[1], data[2], data[3]})\n}\n\nfunc (v *VNC) keyboardEvent(remote *conn.Conn, data []byte) {\n\t// Parse key code and state\n\tremote.Send([]byte{0x04, data[0], data[1], data[2], data[3]})\n}\n\nfunc (v *VNC) cadEvent(remote *conn.Conn) {\n\tremote.Send([]byte{0x10, 0x01, 0x02, 0x03, 0x04})\n}\n\nfunc (v *VNC) scrollEvent(remote *conn.Conn, data []byte) {\n\t// Parse scroll direction and delta\n\tremote.Send([]byte{0x06, data[0], data[1], data[2], data[3]})\n}"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Implement a WebSocket echo server function in Go that handles WebSocket connections, reads incoming messages, and echoes them back to the client.\n\nFunction Description: The `echo` function upgrades an HTTP connection to a WebSocket connection, continuously reads messages from the client, and echoes them back. It handles connection errors and ensures proper cleanup by closing the connection when done.\n\nInput: \n- `ctx *gin.Context`: A Gin context object containing the HTTP request and response writer needed for WebSocket upgrade.\n\nOutput: \n- None (void function), but it performs the following operations:\n  - Upgrades the HTTP connection to WebSocket\n  - Reads and echoes messages until connection is closed\n  - Handles and logs errors\n  - Closes the WebSocket connection when done",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc echo(ctx *gin.Context) {\n\tw,r := ctx.Writer, ctx.Request\n\tc, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"upgrade:\", err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\tfor {\n\t\tmt, message, err := c.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"read:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"recv:%s\", message)\n\t\terr = c.WriteMessage(mt, message)\n\t\tif err != nil {\n\t\t\tlog.Println(\"write:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc echo(ctx *gin.Context) {\n\tconn, err := upgrader.Upgrade(ctx.Writer, ctx.Request, nil)\n\tif err != nil {\n\t\tlog.Println(\"Upgrade error:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfor {\n\t\tmsgType, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Read error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tif err := conn.WriteMessage(msgType, msg); err != nil {\n\t\t\tlog.Println(\"Write error:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests on the root path (\"/\") and returns a welcome message.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. When accessed, it responds with a welcome message. The server listens on port 8080.\n\nInput: None (The HTTP server handles incoming requests automatically)\n\nOutput: None (The function runs indefinitely, serving HTTP responses to incoming requests)\n\n---\n\nNote: Since the reference code is at the package level (with `main` function) rather than a struct/class level, I've provided the function-level instruction format. The code demonstrates a complete executable program rather than a reusable struct/class component.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\tmyHandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to my website!\")\n\t}\n\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome to the server!\")\n\t})\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a UDP client in Go that can send data to a specified server address and port using the net package's DialUDP function.\n\nStruct Description: The SocketBee struct represents a UDP client capable of sending data to a server. It embeds a bees.Bee for base functionality and includes a channel for event handling.\n\nFields:\neventChan: chan bees.Event - Channel for handling events within the bee framework.\n\nMethods:\nAction: [Name](action bees.Action) -> []bees.Placeholder - Handles the \"send\" action to transmit data to a UDP server. Takes an action object containing the target address, port, and data to send. Returns a list of placeholders (currently unused). Panics on errors during address resolution, connection establishment, or data transmission.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/muesli/beehive/bees\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\n\teventChan chan bees.Event\n}\n\nfunc (mod *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\touts := []bees.Placeholder{}\n\n\tvar data string\n\tvar addr string\n\tvar port int\n\n\taction.Options.Bind(\"address\", &addr)\n\taction.Options.Bind(\"port\", &port)\n\taction.Options.Bind(\"data\", &data)\n\n\tswitch action.Name {\n\tcase \"send\":\n\t\tsa, err := net.ResolveUDPAddr(\"udp\", addr+\":\"+strconv.Itoa(port))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, sa)\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tdefer conn.Close()\n\t\t_, err = conn.Write([]byte(data))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\tdefault:\n\t\tpanic(\"Unknown action triggered in \" + mod.Name() + \": \" + action.Name)\n\t}\n\n\treturn outs\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"github.com/muesli/bees\"\n\t\"net\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\teventChan chan bees.Event\n}\n\nfunc (b *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\tif action.Name == \"send\" {\n\t\topts := action.Options()\n\t\taddrStr, ok := opts[\"address\"].(string)\n\t\tif !ok {\n\t\t\tpanic(\"address missing\")\n\t\t}\n\t\tportStr, ok := opts[\"port\"].(string)\n\t\tif !ok {\n\t\t\tpanic(\"port missing\")\n\t\t}\n\t\tdata, ok := opts[\"data\"].([]byte)\n\t\tif !ok {\n\t\t\tpanic(\"data missing\")\n\t\t}\n\n\t\taddr, err := net.ResolveUDPAddr(\"udp\", addrStr+\":\"+portStr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer conn.Close()\n\n\t\tif _, err := conn.Write(data); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\treturn []bees.Placeholder{}\n}"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a function that establishes a UDP connection to a target server, sends a payload, and reads the server's response.\n\nFunction Description: The function `connectUDP` initiates a UDP connection to a specified target address, sends a given payload, and reads the response from the server. It handles local and remote address resolution, connection establishment, and error handling for network operations.\n\nInput: \n- `target` [string] - The target server address in the format \"host:port\" (e.g., \"127.0.0.1:8080\").\n- `payload` [string] - The data to be sent to the server.\n\nOutput: \n- None (prints the server's response to stdout). The function panics on errors during connection setup, sending, or receiving.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc connectUDP(target, payload string) {\n\tLocalAddr, err := net.ResolveUDPAddr(\"udp\", \":54321\")\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to resolve UDP local address on port 54321 %v\", err))\n\t}\n\tRemoteAddr, err := net.ResolveUDPAddr(\"udp\", target)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to resolve UDP remote address [%s] %v\", target, err))\n\t}\n\tconn, err := net.DialUDP(\"udp\", LocalAddr, RemoteAddr)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to open connection to [%s] %v\", target, err))\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(payload))\n\tif err != nil {\n\t\tpanic(\"Failed to send payload\")\n\t}\n\t_, err = conn.Write([]byte(\"\\n\"))\n\tif err != nil {\n\t\tpanic(\"Failed to send payload\")\n\t}\n\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tpanic(\"Failed to read from socket\")\n\t}\n\tfmt.Print(string(buf[:n]))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc connectUDP(target, payload string) {\n\tremoteAddr, err := net.ResolveUDPAddr(\"udp\", target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, remoteAddr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(payload))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuffer := make([]byte, 1024)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(string(buffer[:n]))\n}"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Implement a function that establishes UDP connections between two remote endpoints, optionally encrypts the initial handshake packets, and forwards traffic between them.\n\nFunction Description: The function `remote2remoteUDP` creates two UDP connections to specified remote endpoints, handles optional encryption of initialization packets, and sets up bidirectional forwarding between the connections. It uses custom networking and crypto utilities for connection management and encryption.\n\nInput:\n- remoteA: string - First remote endpoint address in \"host:port\" format\n- remoteB: string - Second remote endpoint address in \"host:port\" format\n- raenc: bool - Flag to enable encryption for first remote endpoint\n- rbenc: bool - Flag to enable encryption for second remote endpoint\n\nOutput: None (The function runs indefinitely forwarding traffic or returns on error)",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"iox/netio\"\n\t\"iox/crypto\"\n)\n\nfunc remote2remoteUDP(remoteA string, remoteB string, raenc bool, rbenc bool) {\n\tremoteAddrA, err := net.ResolveUDPAddr(\"udp\", remoteA)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteConnA, err := net.DialUDP(\"udp\", nil, remoteAddrA)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer remoteConnA.Close()\n\n\tremoteAddrB, err := net.ResolveUDPAddr(\"udp\", remoteB)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteConnB, err := net.DialUDP(\"udp\", nil, remoteAddrB)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer remoteConnB.Close()\n\n\tremoteCtxA, err := netio.NewUDPCtx(remoteConnA, raenc, true)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteCtxB, err := netio.NewUDPCtx(remoteConnB, rbenc, true)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif raenc {\n\t\tiv, err := crypto.RandomNonce()\n\t\tcipher, err := crypto.NewCipher(iv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tb := make([]byte, 4, 20)\n\t\tcopy(b, netio.UDP_INIT_PACKET)\n\n\t\tcipher.StreamXOR(b, b)\n\t\tb = append(b, iv...)\n\t\tremoteCtxA.Write(b)\n\t} else {\n\t\tremoteCtxA.Write(netio.UDP_INIT_PACKET)\n\t}\n\tif rbenc {\n\t\tiv, err := crypto.RandomNonce()\n\t\tcipher, err := crypto.NewCipher(iv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tb := make([]byte, 4, 20)\n\t\tcopy(b, netio.UDP_INIT_PACKET)\n\n\t\tcipher.StreamXOR(b, b)\n\t\tb = append(b, iv...)\n\t\tremoteCtxB.Write(b)\n\t} else {\n\t\tremoteCtxB.Write(netio.UDP_INIT_PACKET)\n\t}\n\n\tnetio.ForwardUDP(remoteCtxA, remoteCtxB)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net\"\n)\n\nfunc remote2remoteUDP(remoteA string, remoteB string, raenc bool, rbenc bool) error {\n\taddrA, err := net.ResolveUDPAddr(\"udp\", remoteA)\n\tif err != nil {\n\t\treturn err\n\t}\n\taddrB, err := net.ResolveUDPAddr(\"udp\", remoteB)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconnA, err := net.DialUDP(\"udp\", nil, addrA)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer connA.Close()\n\n\tconnB, err := net.DialUDP(\"udp\", nil, addrB)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer connB.Close()\n\n\thandshakeA := []byte(\"INIT_A\")\n\tif raenc {\n\t\thandshakeA, err = encryptPacket(handshakeA)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif _, err := connA.Write(handshakeA); err != nil {\n\t\treturn err\n\t}\n\n\thandshakeB := []byte(\"INIT_B\")\n\tif rbenc {\n\t\thandshakeB, err = encryptPacket(handshakeB)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif _, err := connB.Write(handshakeB); err != nil {\n\t\treturn err\n\t}\n\n\terrChan := make(chan error, 2)\n\n\tgo forward(connA, connB, errChan)\n\tgo forward(connB, connA, errChan)\n\n\treturn <-errChan\n}\n\nfunc forward(src, dst *net.UDPConn, errChan chan<- error) {\n\tbuffer := make([]byte, 65536)\n\tfor {\n\t\tn, _, err := src.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t\tif _, err := dst.Write(buffer[:n]); err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc encryptPacket(data []byte) ([]byte, error) {\n\treturn data, nil\n}"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: The task involves creating a DNS bootstrap resolver that can query DNS servers to resolve domain names to IP addresses using UDP protocol. The resolver should handle concurrent operations, retry failed queries, and manage connection lifecycle properly.\n\nStruct Description: The Bootstrap struct represents a DNS bootstrap resolver that maintains state for DNS queries, including target domain, server address, and query status. It handles concurrent resolution requests and manages connection retries.\n\nFields:\nfqdn: [string] - The fully qualified domain name to resolve\nport: [uint16] - The port number of the DNS server\nbootstrap: [*net.UDPAddr] - The UDP address of the DNS bootstrap server\nqt: [uint16] - The DNS query type (e.g., A or AAAA records)\nlogger: [*zap.Logger] - Logger for debugging and error reporting\nupdating: [atomic.Bool] - Atomic flag indicating if an update is in progress\nnextUpdate: [time.Time] - Timestamp for the next scheduled update\nreadyNotify: [chan struct{}] - Channel to notify when resolution is complete\nm: [sync.Mutex] - Mutex for protecting shared state\nready: [bool] - Flag indicating if resolution is complete\naddrStr: [string] - The resolved address string\n\nMethods:\nresolve: [Name](ctx context.Context, qt uint16) -> (netip.Addr, uint32, error) - Resolves the configured domain name to an IP address using the specified query type. Handles UDP communication with retries and timeout management. Returns the resolved address, its TTL, or an error.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/netip\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/IrineSistiana/mosdns/v5/pkg/dnsutils\"\n\t\"github.com/miekg/dns\"\n\t\"go.uber.org/zap\"\n)\n\ntype Bootstrap struct {\n\tfqdn      string\n\tport      uint16\n\tbootstrap *net.UDPAddr\n\tqt        uint16\n\tlogger    *zap.Logger\n\n\tupdating   atomic.Bool\n\tnextUpdate time.Time\n\n\treadyNotify chan struct{}\n\tm           sync.Mutex\n\tready       bool\n\taddrStr     string\n}\n\nfunc (sp *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tconst edns0UdpSize = 1200\n\n\tq := new(dns.Msg)\n\tq.SetQuestion(sp.fqdn, qt)\n\tq.SetEdns0(edns0UdpSize, false)\n\n\tc, err := net.DialUDP(\"udp\", nil, sp.bootstrap)\n\tif err != nil {\n\t\treturn netip.Addr{}, 0, err\n\t}\n\tdefer c.Close()\n\n\twriteErrC := make(chan error, 1)\n\ttype res struct {\n\t\tresp *dns.Msg\n\t\terr  error\n\t}\n\treadResC := make(chan res, 1)\n\n\tcancelWrite := make(chan struct{})\n\tdefer close(cancelWrite)\n\tgo func() {\n\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\twriteErrC <- err\n\t\t\treturn\n\t\t}\n\n\t\tretryTicker := time.NewTicker(time.Second)\n\t\tdefer retryTicker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-cancelWrite:\n\t\t\t\treturn\n\t\t\tcase <-retryTicker.C:\n\t\t\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\t\t\twriteErrC <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tm, _, err := dnsutils.ReadMsgFromUDP(c, edns0UdpSize)\n\t\treadResC <- res{resp: m, err: err}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn netip.Addr{}, 0, context.Cause(ctx)\n\tcase err := <-writeErrC:\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to write query, %w\", err)\n\tcase r := <-readResC:\n\t\tresp := r.resp\n\t\terr := r.err\n\t\tif err != nil {\n\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to read resp, %w\", err)\n\t\t}\n\n\t\tfor _, v := range resp.Answer {\n\t\t\tvar ip net.IP\n\t\t\tvar ttl uint32\n\t\t\tswitch rr := v.(type) {\n\t\t\tcase *dns.A:\n\t\t\t\tip = rr.A\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tcase *dns.AAAA:\n\t\t\t\tip = rr.AAAA\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\taddr, ok := netip.AddrFromSlice(ip)\n\t\t\tif ok {\n\t\t\t\treturn addr, ttl, nil\n\t\t\t}\n\t\t}\n\n\t\treturn netip.Addr{}, 0, errNoAddrInResp\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/miekg/dns\"\n\t\"go.uber.org/zap\"\n\t\"net/netip\"\n)\n\ntype Bootstrap struct {\n\tfqdn        string\n\tport        uint16\n\tbootstrap   *net.UDPAddr\n\tqt          uint16\n\tlogger      *zap.Logger\n\tupdating    atomic.Bool\n\tnextUpdate  time.Time\n\treadyNotify chan struct{}\n\tm           sync.Mutex\n\tready       bool\n\taddrStr     string\n\tttl         uint32\n}\n\nfunc (b *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tb.m.Lock()\n\tif b.ready && !time.Now().After(b.nextUpdate) {\n\t\tip, _ := netip.ParseAddr(b.addrStr)\n\t\tb.m.Unlock()\n\t\treturn ip, b.ttl, nil\n\t}\n\tif !b.updating.CompareAndSwap(false, true) {\n\t\tch := b.readyNotify\n\t\tif ch == nil {\n\t\t\tch = make(chan struct{})\n\t\t\tb.readyNotify = ch\n\t\t}\n\t\tb.m.Unlock()\n\t\tselect {\n\t\tcase <-ch:\n\t\t\tb.m.Lock()\n\t\t\tip, _ := netip.ParseAddr(b.addrStr)\n\t\t\tttl := b.ttl\n\t\t\tb.m.Unlock()\n\t\t\treturn ip, ttl, nil\n\t\tcase <-ctx.Done():\n\t\t\treturn netip.Addr{}, 0, ctx.Err()\n\t\t}\n\t}\n\tch := make(chan struct{})\n\tb.readyNotify = ch\n\tb.ready = false\n\tb.m.Unlock()\n\n\tvar ip netip.Addr\n\tvar ttl uint32\n\tvar err error\n\tconst maxAttempts = 3\n\tfor attempt := 0; attempt < maxAttempts; attempt++ {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\terr = ctx.Err()\n\t\t\tbreak\n\t\tdefault:\n\t\t}\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\n\t\tconn, dialErr := net.DialUDP(\"udp\", nil, b.bootstrap)\n\t\tif dialErr != nil {\n\t\t\tb.logger.Error(\"DNS dial failure\", zap.Error(dialErr))\n\t\t\ttime.Sleep(time.Second * time.Duration(attempt+1))\n\t\t\tcontinue\n\t\t}\n\t\tdeadline, ok := ctx.Deadline()\n\t\tif !ok {\n\t\t\tdeadline = time.Now().Add(5 * time.Second)\n\t\t}\n\t\tconn.SetDeadline(deadline)\n\t\tdefer conn.Close()\n\n\t\tmsg := &dns.Msg{\n\t\t\tId: dns.Id(),\n\t\t\tQuestion: []dns.Question{{\n\t\t\t\tName:   dns.Fqdn(b.fqdn),\n\t\t\t\tQtype:  qt,\n\t\t\t\tQclass: dns.ClassINET,\n\t\t\t}},\n\t\t\tRecursionDesired: true,\n\t\t}\n\t\tbuf, packErr := msg.Pack()\n\t\tif packErr != nil {\n\t\t\tb.logger.Error(\"DNS pack failure\", zap.Error(packErr))\n\t\t\tcontinue\n\t\t}\n\n\t\tif _, writeErr := conn.Write(buf); writeErr != nil {\n\t\t\tb.logger.Error(\"DNS write failure\", zap.Error(writeErr))\n\t\t\tcontinue\n\t\t}\n\n\t\tresp := make([]byte, 512)\n\t\tn, readErr := conn.Read(resp)\n\t\tif readErr != nil {\n\t\t\tb.logger.Error(\"DNS read failure\", zap.Error(readErr))\n\t\t\tcontinue\n\t\t}\n\n\t\tans := new(dns.Msg)\n\t\tif unpackErr := ans.Unpack(resp[:n]); unpackErr != nil {\n\t\t\tb.logger.Error(\"DNS unpack failure\", zap.Error(unpackErr))\n\t\t\tcontinue\n\t\t}\n\n\t\tif !ans.Response || ans.Id != msg.Id {\n\t\t\tb.logger.Warn(\"Invalid DNS response\")\n\t\t\tcontinue\n\t\t}\n\n\t\tfound := false\n\t\tfor _, answer := range ans.Answer {\n\t\t\tswitch qt {\n\t\t\tcase dns.TypeA:\n\t\t\t\tif a, ok := answer.(*dns.A); ok {\n\t\t\t\t\tip = netip.AddrFrom4(a.A)\n\t\t\t\t\tttl = a.Hdr.Ttl\n\t\t\t\t\tfound = true\n\t\t\t\t}\n\t\t\tcase dns.TypeAAAA:\n\t\t\t\tif aaaa, ok := answer.(*dns.AAAA); ok {\n\t\t\t\t\tip = netip.AddrFrom16(aaaa.AAAA)\n\t\t\t\t\tttl = aaaa.Hdr.Ttl\n\t\t\t\t\tfound = true\n\t\t\t\t}\n\t\t\t}\n\t\t\tif found {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif found {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif ip.IsValid() {\n\t\tb.m.Lock()\n\t\tb.addrStr = ip.String()\n\t\tb.ready = true\n\t\tb.ttl = ttl\n\t\tb.nextUpdate = time.Now().Add(time.Duration(ttl) * time.Second)\n\t\tclose(b.readyNotify)\n\t\tb.m.Unlock()\n\t\treturn ip, ttl, nil\n\t}\n\n\tb.updating.Store(false)\n\tclose(b.readyNotify)\n\tif err == nil {\n\t\terr = context.DeadlineExceeded\n\t}\n\treturn netip.Addr{}, 0, err\n}"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a function that sends a predefined stop marker to a destination address over UDP protocol.\n\nFunction Description: The function `sendStopMarker` establishes a UDP connection between a source address and a destination address, then sends a fixed byte sequence (stop marker) to indicate a stopping condition. It handles basic error logging if the connection fails.\n\nInput: \n- `src` [string]: The source IP address or hostname (without port)\n- `dst` [string]: The destination IP address or hostname (without port)\n\nOutput: None (void function). The function writes the stop marker to the UDP connection but doesn't return any value. Errors are logged if they occur.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n)\n\nvar stopMarker = []byte{2, 2, 2, 2, 2, 2, 2, 2}\n\nfunc sendStopMarker(src, dst string) {\n\tl, _ := net.ResolveUDPAddr(\"udp\", src+\":2222\")\n\tr, _ := net.ResolveUDPAddr(\"udp\", dst+\":2222\")\n\tconn, err := net.DialUDP(\"udp\", l, r)\n\tif err != nil {\n\t\tlog.Printf(\"fail to send stopmarker: %s\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tconn.Write(stopMarker)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n)\n\nfunc sendStopMarker(src, dst string) {\n\tstopMarker := []byte{0x53, 0x54, 0x4F, 0x50} // ASCII \"STOP\"\n\tdstIPs, err := net.LookupIP(dst)\n\tif err != nil {\n\t\tlog.Printf(\"Error resolving destination: %v\", err)\n\t\treturn\n\t}\n\tsrcIPs, err := net.LookupIP(src)\n\tif err != nil {\n\t\tlog.Printf(\"Error resolving source: %v\", err)\n\t\treturn\n\t}\n\tlocalAddr := &net.UDPAddr{\n\t\tIP:   srcIPs[0],\n\t\tPort: 0,\n\t}\n\tremoteAddr := &net.UDPAddr{\n\t\tIP:   dstIPs[0],\n\t\tPort: 8080,\n\t}\n\tconn, err := net.DialUDP(\"udp\", localAddr, remoteAddr)\n\tif err != nil {\n\t\tlog.Printf(\"Error creating UDP connection: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\t_, err = conn.Write(stopMarker)\n\tif err != nil {\n\t\tlog.Printf(\"Error sending stop marker: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that serves a health check endpoint and starts listening on a specified host and port.\n\nFunction Description: The function `startHTTPServer` initializes and starts an HTTP server with a single `/healthz` endpoint that returns a 200 OK status and \"ok\" response. The server listens on the IP address and port specified by the input parameters.\n\nInput: \n- `argHealthzIP` (string pointer): The IP address on which the server should listen.\n- `argHealthzPort` (int pointer): The port number on which the server should listen.\n\nOutput: \n- None (the function runs indefinitely or until an error occurs, in which case it logs the error and exits).",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc startHTTPServer() {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(200)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\n\tklog.Info(\"Starting eventer http service\")\n\tklog.Fatal(http.ListenAndServe(net.JoinHostPort(*argHealthzIP, strconv.Itoa(int(*argHealthzPort))), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc startHTTPServer(argHealthzIP *string, argHealthzPort *int) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\n\taddr := fmt.Sprintf(\"%s:%d\", *argHealthzIP, *argHealthzPort)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatalf(\"Server error: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Create a UDP server in Go that handles incoming UDP packets, processes them, and manages connections using a cache system for tracking active connections. The server should support multiple ports with different encryption keys and handle both connection establishment and data packet processing.\n\nStruct Description: The Server struct represents a UDP server instance with TCP and UDP capabilities, including connection caching and encryption support for multiple ports.\n\nFields:\n\nTCPAddr: *net.TCPAddr - TCP address information for the server\nUDPAddr: *net.UDPAddr - UDP address information for the server\nTCPListen: *net.TCPListener - TCP listener instance\nUDPConn: *net.UDPConn - UDP connection instance\nCache: *cache.Cache - Cache for storing active connections\nCkv: *crypto.KV - Default encryption key-value pair\nPortCkv: map[int64]*crypto.KV - Map of port numbers to their respective encryption key-value pairs\n\nMethods:\n\nNewServer: (addr string, password string, portPassword []string) -> (*Server, error) - Creates a new Server instance with the given address, default password, and port-specific passwords\nRunUDPServer: () -> error - Starts the UDP server and begins listening for incoming packets\nUDPHandle: (addr *net.UDPAddr, b []byte) -> error - Handles incoming UDP packets, either establishing new connections or forwarding data to existing connections",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/txthinking/crypto\"\n)\n\ntype Server struct {\n\tTCPAddr   *net.TCPAddr\n\tUDPAddr   *net.UDPAddr\n\tTCPListen *net.TCPListener\n\tUDPConn   *net.UDPConn\n\tCache     *cache.Cache\n\tCkv       *crypto.KV\n\tPortCkv   map[int64]*crypto.KV\n}\n\nfunc NewServer(addr, password string, portPassword []string) (*Server, error) {\n\tpc := make(map[int64]*crypto.KV)\n\tfor _, v := range portPassword {\n\t\tl := strings.Split(v, \" \")\n\t\tif len(l) != 2 {\n\t\t\treturn nil, errors.New(\"Wrong format: \" + v)\n\t\t}\n\t\tport, err := strconv.ParseInt(l[0], 10, 64)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tckv := &crypto.KV{\n\t\t\tAESKey: []byte(l[1]),\n\t\t}\n\t\tpc[port] = ckv\n\t}\n\ttaddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tTCPAddr: taddr,\n\t\tUDPAddr: uaddr,\n\t\tCache:   cache.New(cache.NoExpiration, cache.NoExpiration),\n\t\tCkv: &crypto.KV{\n\t\t\tAESKey: []byte(password),\n\t\t},\n\t\tPortCkv: pc,\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) RunUDPServer() error {\n\tvar err error\n\ts.UDPConn, err = net.ListenUDP(\"udp\", s.UDPAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\tn, addr, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func(addr *net.UDPAddr, b []byte) {\n\t\t\tif err := s.UDPHandle(addr, b); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t}\n\t\t}(addr, b[0:n])\n\t}\n\treturn nil\n}\n\nfunc (s *Server) UDPHandle(addr *net.UDPAddr, b []byte) error {\n\tp := &UDPPacket{}\n\tif err := proto.Unmarshal(b, p); err != nil {\n\t\treturn nil\n\t}\n\tif p.Address == \"\" {\n\t\tu, err := NewUDPServer(s, p, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.Cache.Set(\"u:\"+strconv.FormatInt(p.Port, 10), u, cache.DefaultExpiration)\n\t\tdefer s.Cache.Delete(\"u:\" + strconv.FormatInt(p.Port, 10))\n\t\tif err := u.ListenAndServe(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\ti, ok := s.Cache.Get(\"u:\" + strconv.FormatInt(p.Port, 10))\n\tif !ok {\n\t\treturn nil\n\t}\n\tc := i.(*UDPServer)\n\tif err := c.HandlePacket(p); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\n// cache package mock\ntype Cache struct {\n\tmu sync.RWMutex\n\tmp map[string]interface{}\n}\n\nfunc (c *Cache) Get(key string) interface{} {\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\treturn c.mp[key]\n}\n\nfunc (c *Cache) Set(key string, value interface{}, ttl ...time.Duration) {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.mp[key] = value\n}\n\nfunc NewCache() *Cache {\n\treturn &Cache{mp: make(map[string]interface{})}\n}\n\n// crypto package mock\ntype KV struct {\n\tKey []byte\n}\n\nfunc KeyForPassword(password string) *KV {\n\t// mock implementation\n\treturn &KV{Key: []byte(password)}\n}\n\ntype Connection struct {\n\tAddr *net.UDPAddr\n\tKey  *KV\n}\n\ntype Server struct {\n\tTCPAddr   *net.TCPAddr\n\tUDPAddr   *net.UDPAddr\n\tTCPListen *net.TCPListener\n\tUDPConn   *net.UDPConn\n\tCache     *Cache\n\tCkv       *KV\n\tPortCkv   map[int64]*KV\n}\n\nfunc NewServer(addr string, password string, portPassword []string) (*Server, error) {\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tTCPAddr: tcpAddr,\n\t\tUDPAddr: udpAddr,\n\t\tCache:   NewCache(),\n\t\tPortCkv: make(map[int64]*KV),\n\t}\n\ts.Ckv = KeyForPassword(password)\n\tfor _, pp := range portPassword {\n\t\tparts := strings.Split(pp, \":\")\n\t\tif len(parts) != 2 {\n\t\t\tcontinue\n\t\t}\n\t\tport, err := strconv.ParseInt(parts[0], 10, 64)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\ts.PortCkv[port] = KeyForPassword(parts[1])\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) RunUDPServer() error {\n\tconn, err := net.ListenUDP(\"udp\", s.UDPAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.UDPConn = conn\n\tdefer conn.Close()\n\tbuf := make([]byte, 65536)\n\tfor {\n\t\tn, remoteAddr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo s.UDPHandle(remoteAddr, buf[:n])\n\t}\n\treturn nil\n}\n\nfunc (s *Server) UDPHandle(addr *net.UDPAddr, b []byte) error {\n\tcacheKey := addr.String()\n\tif conn := s.Cache.Get(cacheKey); conn != nil {\n\t\t// Process data for existing connection\n\t\treturn nil\n\t}\n\t// Establish new connection\n\tvar key *KV\n\t// Determine encryption key based on server's listening port\n\tserverPort := int64(s.UDPAddr.Port)\n\tif kv, ok := s.PortCkv[serverPort]; ok {\n\t\tkey = kv\n\t} else {\n\t\tkey = s.Ckv\n\t}\n\t// Create new connection\n\tnewConn := &Connection{\n\t\tAddr: addr,\n\t\tKey:  key,\n\t}\n\t// Add to cache with TTL\n\ts.Cache.Set(cacheKey, newConn, 5*time.Minute)\n\t// Process initial packet\n\treturn nil\n}"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, processes incoming messages using ROT13 cipher, and sends the transformed messages back to the client.\n\nFunction Description: The function initializes a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it applies the ROT13 cipher transformation and sends the result back to the originating client. The server handles network errors and cleans up resources properly on exit.\n\nInput:\n- port: int - The UDP port number to listen on (passed as a pointer in the original code)\n\nOutput: None (the function runs indefinitely until terminated or an unrecoverable error occurs)\n\nNote: The function uses external packages for logging (github.com/enfein/mieru/v3/pkg/log) and ROT13 transformation (github.com/enfein/mieru/v3/pkg/testtool). The main processing loop includes error handling for network operations and message processing.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n)\nfunc main() {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.Itoa(*port))\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ResolveUDPAddr() failed: %v\", err)\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ListenUDP() failed: %v\", err)\n\t}\n\tlog.Infof(\"UDP server is initialized, listening to %s\", addr.String())\n\tdefer conn.Close()\n\tbuf := make([]byte, 1500)\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Read() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif n == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tout, err := testtool.TestHelperRot13(buf[:n])\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"rot13() failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tif _, err = conn.WriteToUDP(out, addr); err != nil {\n\t\t\tlog.Errorf(\"Write() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n\t\"net\"\n)\n\nfunc UDPServer(port *int) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":\"+string(*port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to resolve UDP address: %v\", err)\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen on UDP: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tlog.Infof(\"UDP server started on port %d\", *port)\n\n\tfor {\n\t\tbuffer := make([]byte, 65535)\n\t\tn, clientAddr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Error reading from UDP: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\ttransformed := testtool.Rot13(buffer[:n])\n\t\t_, err = conn.WriteToUDP(transformed, clientAddr)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Error sending response: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Implement a UDP server in Go that handles incoming UDP packets, performs authentication checks, and manages communication with clients through specified ports. The server should include functionality for initialization, packet handling, listening for incoming data, and graceful shutdown.\n\nStruct Description: The UDPServer struct represents a UDP server instance that manages UDP connections, handles authentication, and processes incoming/outgoing packets. It maintains connection state and integrates with a parent Server instance.\n\nFields:\n\nServer: [*Server] - Reference to the parent Server instance containing shared resources\nUDPConn: [*net.UDPConn] - Active UDP connection for the server\nAddr: [*net.UDPAddr] - Address information for the server's UDP endpoint\n\nMethods:\n\nNewUDPServer: [func(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error)] -> [*UDPServer, error] - Initializes a new UDP server instance with authentication checks and port validation. Returns the server instance or error if initialization fails.\n\nListenAndServe: [func(s *UDPServer) error] -> [error] - Starts listening for incoming UDP packets and handles them in a loop until an error occurs or the server is shut down. Automatically closes the connection when finished.\n\nShutdown: [func(s *UDPServer)] -> [void] - Gracefully shuts down the UDP server by closing the active connection.\n\nHandlePacket: [func(s *UDPServer, p *UDPPacket) error] -> [error] - Processes an incoming UDP packet, either forwarding data to the specified address or updating the connection deadline. Returns error if processing fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n)\n\ntype UDPServer struct {\n\tServer  *Server\n\tUDPConn *net.UDPConn\n\tAddr    *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tbye := func(err error) {\n\t\tp := &UDPPacket{\n\t\t\tAddress: err.Error(),\n\t\t}\n\t\tb, err1 := proto.Marshal(p)\n\t\tif err1 != nil {\n\t\t\tlog.Println(err1)\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tif p.Port == 0 {\n\t\tbye(errors.New(\"Missed port\"))\n\t\treturn nil, errors.New(addr.String() + \" missed port\")\n\t}\n\tif len(s.PortCkv) == 0 {\n\t\ttmp, err := s.Ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tif len(s.PortCkv) != 0 {\n\t\tckv, ok := s.PortCkv[p.Port]\n\t\tif !ok {\n\t\t\tbye(errors.New(\"Not allowed port\"))\n\t\t\treturn nil, errors.New(addr.String() + \" try to open not allowed UDP port: \" + strconv.FormatInt(p.Port, 10))\n\t\t}\n\t\ttmp, err := ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.FormatInt(p.Port, 10))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc1, err := net.ListenUDP(\"udp\", uaddr)\n\tif err != nil {\n\t\tbye(err)\n\t\treturn nil, err\n\t}\n\tif err := c1.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tp = &UDPPacket{\n\t\tAddress: \"0\",\n\t}\n\tb, err := proto.Marshal(p)\n\tif err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: c1,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\ti, a, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tp := &UDPPacket{\n\t\t\tAddress: a.String(),\n\t\t\tData:    b[0:i],\n\t\t}\n\t\tb, err = proto.Marshal(p)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.Server.UDPConn.WriteToUDP(b, s.Addr); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *UDPServer) Shutdown() {\n\ts.UDPConn.Close()\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif p.Address != \"0\" {\n\t\tuaddr, err := net.ResolveUDPAddr(\"udp\", p.Address)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(p.Data, uaddr); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\tif err := s.UDPConn.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\ntype UDPPacket struct {\n\tData []byte\n\tAddr *net.UDPAddr\n}\n\ntype Server struct {\n}\n\ntype UDPServer struct {\n\tServer  *Server\n\tUDPConn *net.UDPConn\n\tAddr    *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tif addr == nil || addr.IP == nil {\n\t\treturn nil, errors.New(\"invalid address\")\n\t}\n\tif p == nil || len(p.Data) == 0 {\n\t\treturn nil, errors.New(\"authentication failed: empty packet data\")\n\t}\n\tif addr.Port <= 0 {\n\t\treturn nil, errors.New(\"invalid port\")\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: conn,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tif s.UDPConn == nil {\n\t\treturn errors.New(\"UDP connection not established\")\n\t}\n\tdefer s.UDPConn.Close()\n\tbuffer := make([]byte, 65536)\n\tfor {\n\t\tn, clientAddr, err := s.UDPConn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpacket := &UDPPacket{\n\t\t\tData: buffer[:n],\n\t\t\tAddr: clientAddr,\n\t\t}\n\t\tgo s.HandlePacket(packet)\n\t}\n}\n\nfunc (s *UDPServer) Shutdown() {\n\tif s.UDPConn != nil {\n\t\ts.UDPConn.Close()\n\t}\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif p == nil {\n\t\treturn errors.New(\"packet is nil\")\n\t}\n\terr := s.UDPConn.SetDeadline(time.Now().Add(30 * time.Second))\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = s.UDPConn.WriteToUDP(p.Data, p.Addr)\n\treturn err\n}"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a UDP server in Go that listens for incoming messages on a specified port and prints received messages along with the sender's address.\n\nFunction Description: The function sets up a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it trims whitespace, prints the message content and the sender's address, and continues listening for new messages.\n\nInput: None (The port and IP address are hardcoded in the function)\n\nOutput: None (The function prints output to stdout but doesn't return any values)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\nfunc main() {\n\tconn, err := net.ListenUDP(\"udp\", &net.UDPAddr{\n\t\tPort: 3000,\n\t\tIP:   net.ParseIP(\"0.0.0.0\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer conn.Close()\n\tfmt.Printf(\"server listening %s\\n\", conn.LocalAddr().String())\n\n\tfor {\n\t\tmessage := make([]byte, 20)\n\t\trlen, remote, err := conn.ReadFromUDP(message[:])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tdata := strings.TrimSpace(string(message[:rlen]))\n\t\tfmt.Printf(\"received: %s from %s\\n\", data, remote)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"strings\"\n)\n\nfunc main() {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":8080\")\n\tif err != nil {\n\t\tlog.Fatal(\"ResolveUDPAddr failed: \", err)\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(\"ListenUDP failed: \", err)\n\t}\n\tdefer conn.Close()\n\n\tfor {\n\t\tbuffer := make([]byte, 1024)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tlog.Println(\"ReadFromUDP error: \", err)\n\t\t\tcontinue\n\t\t}\n\t\tmessage := strings.TrimSpace(string(buffer[:n]))\n\t\tfmt.Printf(\"Received: %s from %s\\n\", message, remoteAddr)\n\t}\n}"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, receives messages from clients, and echoes them back to the sender.\n\nFunction Description: The function sets up a UDP server that binds to a given port, continuously listens for incoming messages, and responds by sending the received message back to the client. It handles network errors gracefully and ensures resources are properly cleaned up.\n\nInput: \n- port [string] - The port number on which the UDP server should listen (e.g., \":10002\")\n\nOutput: \n- None (The function runs indefinitely until interrupted)\n- Error messages are printed to stdout if any occur during setup or operation\n\nNote: The function does not return any values but prints status and error messages to stdout. It runs in an infinite loop to handle continuous incoming UDP messages.\n\nThe function performs the following key operations:\n1. Resolves the UDP address using the provided port\n2. Creates and binds a UDP listener\n3. Sets up deferred cleanup for the connection\n4. Enters a loop to read incoming messages and echo them back\n5. Handles and reports any network errors that occur",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc main() {\n\tserverType := strings.ToLower(os.Getenv(\"serverType\"))\n\n\tif serverType == \"udp\" {\n\t\tServerAddr, err := net.ResolveUDPAddr(\"udp\", \":10002\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Started UDP server on port 10002\")\n\n\t\tServerConn, err := net.ListenUDP(\"udp\", ServerAddr)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tdefer ServerConn.Close()\n\n\t\tbuf := make([]byte, 1024)\n\n\t\tfor {\n\t\t\tn, addr, err := ServerConn.ReadFromUDP(buf)\n\t\t\tfmt.Printf(\"received: %s from: %s\\n\", string(buf[0:n]), addr)\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"error: \", err)\n\t\t\t}\n\n\t\t\tServerConn.WriteTo(buf[0:n], addr)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc main() {\n\tstartUDPEchoServer(\":10002\")\n}\n\nfunc startUDPEchoServer(port string) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", port)\n\tif err != nil {\n\t\tfmt.Println(\"Error resolving UDP address:\", err)\n\t\treturn\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting UDP server:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfmt.Printf(\"UDP echo server started on port %s\\n\", port)\n\n\tfor {\n\t\tbuffer := make([]byte, 1024)\n\t\tn, clientAddr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error reading UDP message:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Received message from %s: %s\\n\", clientAddr.String(), string(buffer[:n]))\n\n\t\t_, writeErr := conn.WriteToUDP(buffer[:n], clientAddr)\n\t\tif writeErr != nil {\n\t\t\tfmt.Println(\"Error writing UDP message:\", writeErr)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a WebSocket proxy struct in Go that can handle bidirectional communication between a client and a backend server, including connection upgrading, message replication, and error handling.\n\nStruct Description: The WebsocketProxy struct acts as a reverse proxy for WebSocket connections, forwarding messages between clients and backend servers while handling connection upgrades and error scenarios.\n\nFields:\n\nDirector: func(*http.Request, http.Header) - A function that can modify the outgoing request headers before connecting to the backend.\nBackend: func(*http.Request) *url.URL - A function that returns the backend URL to connect to.\nUpgrader: *websocket.Upgrader - Configures the WebSocket connection upgrade from HTTP.\nDialer: *websocket.Dialer - Configures how to dial the backend WebSocket connection.\n\nMethods:\n\nServeHTTP: (http.ResponseWriter, *http.Request) -> None - The main handler method that:\n  1. Determines the backend URL\n  2. Establishes connection to backend\n  3. Upgrades client connection\n  4. Sets up bidirectional message replication\n  5. Handles ping/pong messages\n  6. Manages connection errors and closures\n\nreplicateWebsocketConn: (*websocket.Conn, *websocket.Conn, chan error) -> None - A helper method that:\n  1. Continuously reads messages from source connection\n  2. Forwards them to destination connection\n  3. Handles connection errors and closure messages\n  4. Reports errors through the provided channel",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/samber/lo\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tconnPub.SetPingHandler(func(appData string) error {\n\t\terr := connBackend.WriteControl(websocket.PingMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\terr = connPub.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif errors.Is(err, websocket.ErrCloseSent) {\n\t\t\treturn nil\n\t\t} else if e, ok := lo.ErrorsAs[net.Error](err); ok && e.Timeout() {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t})\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\n\tvar closeError *websocket.CloseError\n\tif ok := errors.As(err, &closeError); !ok || (closeError != nil && closeError.Code == websocket.CloseAbnormalClosure) {\n\t\tlog.Printf(message, err)\n\t}\n}\n\nfunc replicateWebsocketConn(dst, src *websocket.Conn, errc chan error) {\n\tfor {\n\t\tmsgType, msg, err := src.ReadMessage()\n\t\tif err != nil {\n\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\tif e, ok := lo.ErrorsAs[*websocket.CloseError](err); ok && e != nil {\n\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t}\n\t\t\t}\n\t\t\terrc <- err\n\t\t\t_ = dst.WriteMessage(websocket.CloseMessage, m)\n\t\t\tbreak\n\t\t}\n\t\terr = dst.WriteMessage(msgType, msg)\n\t\tif err != nil {\n\t\t\terrc <- err\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector  func(*http.Request, http.Header)\n\tBackend   func(*http.Request) *url.URL\n\tUpgrader  *websocket.Upgrader\n\tDialer    *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tbackendURL := p.Backend(r)\n\tif backendURL == nil {\n\t\thttp.Error(w, \"Backend URL is nil\", http.StatusBadGateway)\n\t\treturn\n\t}\n\n\theader := make(http.Header)\n\tif p.Director != nil {\n\t\tp.Director(r, header)\n\t}\n\n\tbackendConn, resp, err := p.Dialer.Dial(backendURL.String(), header)\n\tif err != nil {\n\t\thttp.Error(w, \"Error connecting to backend: \"+err.Error(), http.StatusBadGateway)\n\t\tif resp != nil {\n\t\t\tfor k := range resp.Header {\n\t\t\t\tw.Header()[k] = resp.Header.Values(k)\n\t\t\t}\n\t\t\tw.WriteHeader(resp.StatusCode)\n\t\t\tresp.Write(w.(http.ResponseWriter))\n\t\t}\n\t\treturn\n\t}\n\tdefer backendConn.Close()\n\n\tclientConn, err := p.Upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Error upgrading connection: \"+err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer clientConn.Close()\n\n\terrChan := make(chan error, 2)\n\tgo p.replicateWebsocketConn(clientConn, backendConn, errChan)\n\tgo p.replicateWebsocketConn(backendConn, clientConn, errChan)\n\n\t<-errChan\n\tclientConn.Close()\n\tbackendConn.Close()\n}\n\nfunc (p *WebsocketProxy) replicateWebsocketConn(src, dst *websocket.Conn, errChan chan error) {\n\tdefer func() { errChan <- nil }()\n\tfor {\n\t\tmsgType, data, err := src.ReadMessage()\n\t\tif err != nil {\n\t\t\tif !websocket.IsCloseError(err, websocket.CloseNormalClosure, websocket.CloseNoStatusReceived) {\n\t\t\t\terrChan <- err\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\tif msgType == websocket.PingMessage {\n\t\t\tsrc.WriteMessage(websocket.PongMessage, data)\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := dst.WriteMessage(msgType, data); err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and returns a simple text response.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" message to the response writer. The `main` function sets up the HTTP server by registering the handler and starting the server on port 8080.\n\nInput: \n- `w http.ResponseWriter`: Used to write the HTTP response.\n- `r *http.Request`: Contains information about the incoming HTTP request.\n\nOutput: \n- The `handler` function writes \"Hello World, I'm Golang!\" to the response writer (`w`).\n- The `main` function starts an HTTP server that listens on port 8080 and serves the response from the `handler` function.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Write a Go function that spawns a process in a new user namespace to read a file's contents, using pipes for inter-process communication to capture both standard output and error streams.\n\nFunction Description: The function spawnUserNamespaceCat creates a child process in a new user namespace to read a specified file. It establishes two pipes (one for standard output and one for standard error) to communicate between the parent and child processes. The function handles process creation, data transfer through pipes, process waiting, and error handling.\n\nInput:\n- nsPath (string): Path to the user namespace to spawn the process in\n- path (string): Path to the file that should be read by the child process\n\nOutput:\n- ([]byte, error): Returns the file contents as a byte slice if successful, or an error if any step fails. The error contains detailed information about the failure.\n\nNote: The function relies on an external C function spawn_userns_cat which handles the actual process creation in the new namespace. The function manages proper resource cleanup through defer statements and handles both successful and error cases with appropriate return values.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\t\"unsafe\"\n\n\t\"github.com/opencontainers/runc/libcontainer/configs\"\n\t\"github.com/sirupsen/logrus\"\n)\n/*\n#include <stdlib.h>\nextern int spawn_userns_cat(char *userns_path, char *path, int outfd, int errfd);\n*/\nimport \"C\"\nfunc spawnUserNamespaceCat(nsPath string, path string) ([]byte, error) {\n\trdr, wtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer rdr.Close()\n\tdefer wtr.Close()\n\n\terrRdr, errWtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create error pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer errRdr.Close()\n\tdefer errWtr.Close()\n\n\tcNsPath := C.CString(nsPath)\n\tdefer C.free(unsafe.Pointer(cNsPath))\n\tcPath := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cPath))\n\n\tchildPid := C.spawn_userns_cat(cNsPath, cPath, C.int(wtr.Fd()), C.int(errWtr.Fd()))\n\n\tif childPid < 0 {\n\t\treturn nil, fmt.Errorf(\"failed to spawn fork for userns\")\n\t} else if childPid == 0 {\n\t\tpanic(\"runc executing inside fork child -- unsafe state!\")\n\t}\n\n\twtr.Close()\n\toutput, err := io.ReadAll(rdr)\n\trdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn failed: %w\", err)\n\t}\n\n\terrWtr.Close()\n\terrOutput, err := io.ReadAll(errRdr)\n\terrRdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn error pipe failed: %w\", err)\n\t}\n\terrOutput = bytes.TrimSpace(errOutput)\n\n\tchild, err := os.FindProcess(int(childPid))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not find userns spawn process: %w\", err)\n\t}\n\tstate, err := child.Wait()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to wait for userns spawn process: %w\", err)\n\t}\n\tif !state.Success() {\n\t\terrStr := string(errOutput)\n\t\tif errStr == \"\" {\n\t\t\terrStr = fmt.Sprintf(\"unknown error (status code %d)\", state.ExitCode())\n\t\t}\n\t\treturn nil, fmt.Errorf(\"userns spawn: %s\", errStr)\n\t} else if len(errOutput) > 0 {\n\t\tlogrus.Debugf(\"userns spawn succeeded but unexpected error message found: %s\", string(errOutput))\n\t}\n\treturn output, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "right_result": "import \"C\"\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nfunc spawnUserNamespaceCat(nsPath, path string) ([]byte, error) {\n\tstdoutR, stdoutW, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create stdout pipe: %v\", err)\n\t}\n\tdefer stdoutR.Close()\n\n\tstderrR, stderrW, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create stderr pipe: %v\", err)\n\t}\n\tdefer stderrR.Close()\n\n\tcNsPath := C.CString(nsPath)\n\tdefer C.free(unsafe.Pointer(cNsPath))\n\tcPath := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cPath))\n\n\tpid := C.spawn_userns_cat(cNsPath, cPath, C.int(stdoutW.Fd()), C.int(stderrW.Fd()))\n\tif pid < 0 {\n\t\treturn nil, fmt.Errorf(\"failed to spawn child process: %v\", syscall.Errno(-pid))\n\t}\n\n\tstdoutW.Close()\n\tstderrW.Close()\n\n\tvar status syscall.WaitStatus\n\t_, errWait := syscall.Wait4(int(pid), &status, 0, nil)\n\tif errWait != nil {\n\t\treturn nil, fmt.Errorf(\"wait4 failed: %v\", errWait)\n\t}\n\n\tstdoutData, errReadStdout := io.ReadAll(stdoutR)\n\tstderrData, errReadStderr := io.ReadAll(stderrR)\n\n\tif errReadStdout != nil || errReadStderr != nil {\n\t\treturn stdoutData, fmt.Errorf(\"failed to read output: stdout: %v, stderr: %v\", errReadStdout, errReadStderr)\n\t}\n\n\tif !status.Success() {\n\t\treturn stdoutData, fmt.Errorf(\"child process exited with error: %v, stderr: %s\", status, stderrData)\n\t}\n\n\treturn stdoutData, nil\n}"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a Go struct that manages a proxy command process with inter-process communication capabilities using pipes for error handling and status reporting.\n\nStruct Description: The proxyCommand struct represents a proxy process manager that uses os.Pipe for IPC to monitor the startup status of a userland proxy. It handles process execution, pipe communication, and timeout management.\n\nFields:\ncmd: *exec.Cmd - The command to be executed as the proxy process\n\nMethods:\nStart: () -> error - Starts the proxy command and monitors its initialization status through a pipe. Returns nil if successful or an error if the proxy fails to start or times out. Uses a pipe to communicate startup status from the child process and implements a 16-second timeout.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tp.cmd.Env = append(p.cmd.Env, \"PROXY_PIPE_FD=3\")\n\n\tif err := p.cmd.Start(); err != nil {\n\t\tr.Close()\n\t\tw.Close()\n\t\treturn err\n\t}\n\n\tw.Close()\n\n\ttimer := time.NewTimer(16 * time.Second)\n\tdefer timer.Stop()\n\n\tdone := make(chan error, 1)\n\n\tgo func() {\n\t\tdefer r.Close()\n\t\tbuf := make([]byte, 1)\n\t\tn, err := r.Read(buf)\n\t\tif err != nil {\n\t\t\tdone <- err\n\t\t} else if n == 0 {\n\t\t\tdone <- io.EOF\n\t\t} else {\n\t\t\tdone <- nil\n\t\t}\n\t}()\n\n\tselect {\n\tcase err := <-done:\n\t\tif err != nil {\n\t\t\tp.cmd.Process.Kill()\n\t\t\tp.cmd.Wait()\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\tcase <-timer.C:\n\t\tp.cmd.Process.Kill()\n\t\tp.cmd.Wait()\n\t\treturn errors.New(\"proxy process timed out after 16 seconds\")\n\t}\n}"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Create a Go struct that implements a log retrieval mechanism using pipes for inter-process communication, allowing for reading logs from a file and writing them to a pipe for consumption by another process.\n\nStruct Description: The `logRetriever` struct provides a way to read logs from a file and write them to a pipe, implementing `io.ReadCloser` for standard read and close operations. It also includes methods to manage the pipe's writer and output.\n\nFields:\n- reader: *os.File - The read end of the pipe used to consume log data.\n- writer: *os.File - The write end of the pipe used to send log data.\n- output: *fileCloner - A helper component that clones the writer's output to a log file.\n\nMethods:\n- newlogRetriever: (logFile string) -> (*logRetriever, error) - Initializes a new logRetriever instance, creates a pipe, and sets up file cloning. If the log file exists, copies its contents to the pipe.\n- Read: (p []byte) -> (int, error) - Implements io.Reader to read data from the pipe's reader.\n- CloseWriter: () -> error - Closes the pipe's writer to signal the end of data transmission.\n- Close: () -> error - Implements io.Closer to close the pipe's reader and release resources.\n- Opt: () -> cio.Opt - Returns an option for configuring IO streams, using a null reader and the output cloner.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"os\"\n)\n\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (l *logRetriever, err error) {\n\tl = &logRetriever{}\n\tif l.reader, l.writer, err = os.Pipe(); err != nil {\n\t\treturn\n\t}\n\n\tif l.output, err = newFileCloner(l.writer, logFile); err != nil {\n\t\treturn\n\t}\n\n\tif util.FileExists(logFile) {\n\t\tvar reader io.ReadCloser\n\t\tif reader, err = os.Open(logFile); err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer util.DeferErr(&err, reader.Close)\n\n\t\tif _, err = io.Copy(l.writer, reader); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}\n\nvar _ io.ReadCloser = &logRetriever{}\n\nfunc (l *logRetriever) Opt() cio.Opt {\n\treturn cio.WithStreams(&nullReader{}, l.output, l.output)\n}\n\nfunc (l *logRetriever) Read(p []byte) (n int, err error) {\n\treturn l.reader.Read(p)\n}\n\nfunc (l *logRetriever) CloseWriter() (err error) {\n\treturn l.writer.Close()\n}\n\nfunc (l *logRetriever) Close() error {\n\treturn l.reader.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"os\"\n)\n\ntype fileCloner struct {\n\t// Assume this type exists and is properly implemented elsewhere\n}\n\ntype logRetriever struct {\n\treader  *os.File\n\twriter  *os.File\n\toutput  *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (*logRetriever, error) {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Assume fileCloner is initialized with the writer and log file path\n\tfc, err := newFileCloner(w, logFile)\n\tif err != nil {\n\t\tw.Close()\n\t\tr.Close()\n\t\treturn nil, err\n\t}\n\n\tlr := &logRetriever{\n\t\treader: r,\n\t\twriter: w,\n\t\toutput: fc,\n\t}\n\n\t// Check if the log file exists\n\tif _, err := os.Stat(logFile); err == nil {\n\t\tf, err := os.Open(logFile)\n\t\tif err != nil {\n\t\t\tlr.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer f.Close()\n\n\t\tif _, err := io.Copy(w, f); err != nil {\n\t\t\tlr.Close()\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn lr, nil\n}\n\nfunc (lr *logRetriever) Read(p []byte) (int, error) {\n\treturn lr.reader.Read(p)\n}\n\nfunc (lr *logRetriever) CloseWriter() error {\n\treturn lr.writer.Close()\n}\n\nfunc (lr *logRetriever) Close() error {\n\treturn lr.reader.Close()\n}\n\nfunc (lr *logRetriever) Opt() cio.Opt {\n\treturn cio.Opt{\n\t\tSrc:  nil,\n\t\tDest: lr.output,\n\t}\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Go function that implements a basic HTTP server which responds to all requests with a repeated character response of specified size.\n\nFunction Description: The function should start an HTTP server on a specified port that handles all incoming requests by writing a response consisting of a repeated character ('a') with a length determined by the responseSize parameter. The server should log any errors that occur during writing or server startup.\n\nInput: \n- serverPort: string - The port number on which the HTTP server should listen (e.g., \"8080\")\n- responseSize: int - The size/length of the response to be generated (number of 'a' characters to repeat)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are logged to stdout if any occur during server operation\n\nNote: The function doesn't explicitly return values but runs an HTTP server that handles requests and may log errors. The response is written directly to the http.ResponseWriter for each incoming request.\n\nExample usage:\n```go\nfunc main() {\n    startHTTPServer(\"8080\", 1024)  // Starts server on port 8080 with 1024-byte responses\n}\n```",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresponse := bytes.Repeat([]byte(\"a\"), int(*responseSize))\n\taddr := \"localhost:\" + *serverPort\n\tlog.Println(\"Starting HTTP server on:\", addr)\n\tlserr := http.ListenAndServe(addr, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t_, werr := w.Write(response)\n\t\tif werr != nil {\n\t\t\tlog.Println(werr)\n\t\t}\n\t}))\n\tif lserr != nil {\n\t\tlog.Println(lserr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc startHTTPServer(serverPort string, responseSize int) {\n\tresponse := bytes.Repeat([]byte{'a'}, responseSize)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif _, err := w.Write(response); err != nil {\n\t\t\tlog.Printf(\"Error writing response: %v\", err)\n\t\t}\n\t})\n\tlog.Printf(\"Starting server on port %s\", serverPort)\n\tif err := http.ListenAndServe(\":\"+serverPort, nil); err != nil {\n\t\tlog.Printf(\"Error starting server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes and ports concurrently, with specific handlers for different endpoints. The server should mirror incoming requests (displaying request details) by default and respond with \"hello\" for specific pipeline activity routes.\n\nFunction Description: The main function sets up an HTTP server with multiple handlers and listens on multiple ports concurrently. It includes:\n1. A simple helloHandler that responds with \"hello\"\n2. A mirrorHandler that displays detailed request information\n3. Concurrent server instances on ports 9091-9097\n4. A primary server instance on port 9098\n\nInput: None (The functions handle HTTP requests which contain their own input data)\n\nOutput: None (The functions write responses to http.ResponseWriter)\n\nMethods:\n\nhelloHandler: func(w http.ResponseWriter, req *http.Request) - Responds with \"hello\" string\nmirrorHandler: func(w http.ResponseWriter, req *http.Request) - Displays detailed request information including method, URL, headers, and body\nListenAndServe: Called on multiple ports to start HTTP servers concurrently\n\nNote: The code uses http.HandleFunc to register routes and starts servers on multiple ports using goroutines for concurrent operation. The mirrorHandler includes a 10ms delay and outputs request details to both the response and stdout using a TeeWriter.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\thelloHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\tio.WriteString(w, \"hello\")\n\t}\n\tmirrorHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\ttime.Sleep(10 * time.Millisecond)\n\t\tbody, err := io.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tbody = []byte(fmt.Sprintf(\"<read failed: %v>\", err))\n\t\t}\n\n\t\ttw := NewTeeWriter(w, os.Stdout)\n\n\t\turl := req.URL.Path\n\t\tif req.URL.Query().Encode() != \"\" {\n\t\t\turl += \"?\" + req.URL.Query().Encode()\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Your Request\")\n\t\tfmt.Fprintln(tw, \"==============\")\n\t\tfmt.Fprintln(tw, \"Method:\", req.Method)\n\t\tfmt.Fprintln(tw, \"URL   :\", url)\n\n\t\tfmt.Fprintln(tw, \"Header:\")\n\t\tfor k, v := range req.Header {\n\t\t\tfmt.Fprintf(tw, \"    %s: %v\\n\", k, v)\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Body  :\", string(body))\n\t}\n\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\thttp.HandleFunc(\"/pipeline/activity/1\", helloHandler)\n\thttp.HandleFunc(\"/pipeline/activity/2\", helloHandler)\n\n\tfor _, port := range []int{9091, 9092, 9093, 9094, 9095, 9096, 9097} {\n\t\tgo http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}\n\n\thttp.ListenAndServe(\":9098\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\t\"os\"\n)\n\nfunc helloHandler(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprint(w, \"hello\")\n}\n\nfunc mirrorHandler(w http.ResponseWriter, req *http.Request) {\n\tbody, err := io.ReadAll(req.Body)\n\tif err != nil {\n\t\thttp.Error(w, \"Error reading body\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\treq.Body.Close()\n\n\ttime.Sleep(10 * time.Millisecond)\n\n\tvar headers strings.Builder\n\tfor k, v := range req.Header {\n\t\theaders.WriteString(fmt.Sprintf(\"%s: %v\\n\", k, v))\n\t}\n\n\tmulti := io.MultiWriter(w, os.Stdout)\n\tfmt.Fprintf(multi, \"Method: %s\\nURL: %s\\nHeaders:\\n%sBody:\\n%s\\n\", req.Method, req.URL, headers.String(), body)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/pipeline/activity\", helloHandler)\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\n\tports := []string{\"9091\", \"9092\", \"9093\", \"9094\", \"9095\", \"9096\", \"9097\", \"9098\"}\n\n\tfor _, port := range ports {\n\t\tgo func(p string) {\n\t\t\thttp.ListenAndServe(\":\"+p, nil)\n\t\t}(port)\n\t}\n\n\tselect {}\n}"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create a Go struct that represents a financial chart for trading visualization, with capabilities to serve HTTP endpoints for health checks, trading data, and trading history. The struct should maintain candle data, orders, and wallet information, and provide methods to serve this data via HTTP endpoints.\n\nStruct Description: The Chart struct represents a financial trading chart with HTTP server capabilities. It maintains candle data, order information, and paper wallet details, and provides methods to serve this data through HTTP endpoints (/health, /data, /history). The struct uses synchronization to handle concurrent access and provides real-time trading visualization data.\n\nFields:\n\nport: int - The port number on which the HTTP server will listen\ncandles: map[string][]Candle - Stores candle data grouped by trading pairs\ndataframe: map[string]*model.Dataframe - Stores dataframe information for each trading pair\nordersIDsByPair: map[string]*set.LinkedHashSetINT64 - Maintains order IDs organized by trading pairs\norderByID: map[int64]model.Order - Maps order IDs to their corresponding order details\npaperWallet: *exchange.PaperWallet - Pointer to the paper trading wallet information\nlastUpdate: time.Time - Timestamp of the last data update\nMutex: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n\nhandleHealth: (w http.ResponseWriter, _ *http.Request) -> None - Handles health check requests, returning service status based on last update time\nhandleData: (w http.ResponseWriter, r *http.Request) -> None - Serves trading data (candles, asset values, equity values) for a specific trading pair in JSON format\nhandleTradingHistoryData: (w http.ResponseWriter, r *http.Request) -> None - Serves trading history data for a specific pair in CSV format\nStart: () -> error - Starts the HTTP server and registers all endpoint handlers",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/csv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/rodrigo-brito/ninjabot/exchange\"\n\t\"github.com/rodrigo-brito/ninjabot/model\"\n\t\"github.com/StudioSol/set\"\n\tlog \"github.com/sirupsen/logrus\"\n)\n\ntype Chart struct {\n\tsync.Mutex\n\tport            int\n\tcandles         map[string][]Candle\n\tdataframe       map[string]*model.Dataframe\n\tordersIDsByPair map[string]*set.LinkedHashSetINT64\n\torderByID       map[int64]model.Order\n\tpaperWallet     *exchange.PaperWallet\n\tlastUpdate      time.Time\n}\n\nfunc (c *Chart) handleHealth(w http.ResponseWriter, _ *http.Request) {\n\tif time.Since(c.lastUpdate) > time.Hour+10*time.Minute {\n\t\t_, err := w.Write([]byte(c.lastUpdate.String()))\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t\tw.WriteHeader(http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc (c *Chart) handleData(w http.ResponseWriter, r *http.Request) {\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-type\", \"text/json\")\n\n\tvar maxDrawdown *drawdown\n\tif c.paperWallet != nil {\n\t\tvalue, start, end := c.paperWallet.MaxDrawdown()\n\t\tmaxDrawdown = &drawdown{\n\t\t\tStart: start,\n\t\t\tEnd:   end,\n\t\t\tValue: fmt.Sprintf(\"%.1f\", value*100),\n\t\t}\n\t}\n\n\tasset, quote := exchange.SplitAssetQuote(pair)\n\tassetValues, equityValues := c.equityValuesByPair(pair)\n\terr := json.NewEncoder(w).Encode(map[string]interface{}{\n\t\t\"candles\":       c.candlesByPair(pair),\n\t\t\"asset_values\":  assetValues,\n\t\t\"equity_values\": equityValues,\n\t\t\"quote\":         quote,\n\t\t\"asset\":         asset,\n\t\t\"max_drawdown\":  maxDrawdown,\n\t})\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n}\n\nfunc (c *Chart) handleTradingHistoryData(w http.ResponseWriter, r *http.Request) {\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-type\", \"text/csv\")\n\tw.Header().Set(\"Content-Disposition\", \"attachment;filename=history_\"+pair+\".csv\")\n\tw.Header().Set(\"Transfer-Encoding\", \"chunked\")\n\n\torders := c.orderStringByPair(pair)\n\n\tbuffer := bytes.NewBuffer(nil)\n\tcsvWriter := csv.NewWriter(buffer)\n\terr := csvWriter.Write([]string{\"created_at\", \"status\", \"side\", \"id\", \"type\", \"quantity\", \"price\", \"total\", \"profit\"})\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing header file: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\n\terr = csvWriter.WriteAll(orders)\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing data: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\tcsvWriter.Flush()\n\n\tw.WriteHeader(http.StatusOK)\n\t_, err = w.Write(buffer.Bytes())\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing response: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n}\n\nfunc (c *Chart) Start() error {\n\thttp.HandleFunc(\"/health\", c.handleHealth)\n\thttp.HandleFunc(\"/history\", c.handleTradingHistoryData)\n\thttp.HandleFunc(\"/data\", c.handleData)\n\n\tfmt.Printf(\"Chart available at http://localhost:%d\\n\", c.port)\n\treturn http.ListenAndServe(fmt.Sprintf(\":%d\", c.port), nil)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"exchange\"\n\t\"model\"\n\t\"set\"\n)\n\ntype Candle struct {\n\tTime   time.Time\n\tOpen   float64\n\tHigh   float64\n\tLow    float64\n\tClose  float64\n\tVolume float64\n}\n\ntype Chart struct {\n\tport             int\n\tcandles          map[string][]Candle\n\tdataframe        map[string]*model.Dataframe\n\tordersIDsByPair  map[string]*set.LinkedHashSetINT64\n\torderByID        map[int64]model.Order\n\tpaperWallet      *exchange.PaperWallet\n\tlastUpdate       time.Time\n\tsync.Mutex\n}\n\nfunc (c *Chart) handleHealth(w http.ResponseWriter, r *http.Request) {\n\tc.Lock()\n\tdefer c.Unlock()\n\n\tif time.Since(c.lastUpdate) > 5*time.Minute {\n\t\thttp.Error(w, \"Service Unavailable\", http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tjson.NewEncoder(w).Encode(map[string]string{\n\t\t\"status\":       \"ok\",\n\t\t\"last_updated\": c.lastUpdate.String(),\n\t})\n}\n\nfunc (c *Chart) handleData(w http.ResponseWriter, r *http.Request) {\n\tc.Lock()\n\tdefer c.Unlock()\n\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\thttp.Error(w, \"Missing pair parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tcandles, ok := c.candles[pair]\n\tif !ok {\n\t\thttp.Error(w, \"Pair not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\torderIDs, exists := c.ordersIDsByPair[pair]\n\tif !exists {\n\t\thttp.Error(w, \"No orders for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\tvar orders []model.Order\n\tfor _, id := range orderIDs.Iter() {\n\t\tif order, found := c.orderByID[id]; found {\n\t\t\torders = append(orders, order)\n\t\t}\n\t}\n\n\tassetValue := c.paperWallet.BalanceFor(pair)\n\tequityValue := c.paperWallet.EquityFor(pair)\n\n\tresponse := struct {\n\t\tCandles     []Candle\n\t\tAssetValue  float64\n\t\tEquityValue float64\n\t\tOrders      []model.Order\n\t}{\n\t\tCandles:     candles,\n\t\tAssetValue:  assetValue,\n\t\tEquityValue: equityValue,\n\t\tOrders:      orders,\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(response)\n}\n\nfunc (c *Chart) handleTradingHistoryData(w http.ResponseWriter, r *http.Request) {\n\tc.Lock()\n\tdefer c.Unlock()\n\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\thttp.Error(w, \"Missing pair parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\torderIDs, exists := c.ordersIDsByPair[pair]\n\tif !exists {\n\t\thttp.Error(w, \"No orders for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\tvar orders []model.Order\n\tfor _, id := range orderIDs.Iter() {\n\t\tif order, found := c.orderByID[id]; found {\n\t\t\torders = append(orders, order)\n\t\t}\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"text/csv\")\n\tw.Header().Set(\"Content-Disposition\", \"attachment;filename=trading_history.csv\")\n\n\twriter := csv.NewWriter(w)\n\tdefer writer.Flush()\n\n\twriter.Write([]string{\"OrderID\", \"Pair\", \"Type\", \"Side\", \"Price\", \"Quantity\", \"Timestamp\"})\n\n\tfor _, order := range orders {\n\t\twriter.Write([]string{\n\t\t\tstrconv.FormatInt(order.ID, 10),\n\t\t\torder.Pair,\n\t\t\torder.Type,\n\t\t\torder.Side,\n\t\t\tfmt.Sprintf(\"%v\", order.Price),\n\t\t\tfmt.Sprintf(\"%v\", order.Quantity),\n\t\t\torder.Timestamp.Format(time.RFC3339),\n\t\t})\n\t}\n}\n\nfunc (c *Chart) Start() error {\n\thttp.HandleFunc(\"/health\", c.handleHealth)\n\thttp.HandleFunc(\"/data\", c.handleData)\n\thttp.HandleFunc(\"/history\", c.handleTradingHistoryData)\n\n\taddr := fmt.Sprintf(\":%d\", c.port)\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Go HTTP server that handles incoming requests, processes JSON payloads, and returns a modified response with a large body and custom headers.\n\nFunction Description: The main function sets up an HTTP server that listens on port 10000. It defines a handler for the root path (\"/\") that:\n1. Reads and closes the request body\n2. Unmarshals the JSON body into a contextEntity struct\n3. Modifies the response status, headers, and body\n4. Marshals the modified contextEntity back to JSON and sends it as the response\n5. Handles errors appropriately with status codes\n\nInput: \n- HTTP requests with JSON body containing a contextEntity structure\n- The handler expects the request body to be a valid JSON representation of contextEntity\n\nOutput:\n- HTTP responses with:\n  - Status 200 on success with modified JSON payload\n  - Status 400 for bad requests (invalid JSON or read errors)\n  - Status 500 for internal server errors (marshaling failures)\n- Response includes:\n  - Custom header \"X-Remote-Name: G.O.O.D\"\n  - Large body (64KB of '-' characters)\n  - Modified contextEntity structure as JSON",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tlargeBodySize := 64 * 1024\n\tlargeBody := bytes.Repeat([]byte(`-`), largeBodySize)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer r.Body.Close()\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity := &contextEntity{}\n\t\terr = json.Unmarshal(body, ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity.Response.StatusCode = 200\n\t\tctxEntity.Response.Header.Add(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tctxEntity.Response.Body = largeBody\n\n\t\tbuff, err := json.Marshal(ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write(buff)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"bytes\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading request body\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdefer r.Body.Close()\n\n\t\tvar entity map[string]interface{}\n\t\tif err := json.Unmarshal(body, &entity); err != nil {\n\t\t\thttp.Error(w, \"Invalid JSON payload\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tentity[\"modified\"] = true\n\n\t\tjsonBody, err := json.Marshal(entity)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"X-Remote-Name\", \"G.O.O.D\")\n\n\t\tlargeBody := bytes.Repeat([]byte(\"-\"), 64*1024)\n\t\tif _, err := w.Write(largeBody); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif _, err := w.Write(jsonBody); err != nil {\n\t\t\treturn\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a POST request and serves an HTML form for file submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it serves an HTML form (rendered from a template). For POST requests, it processes file uploads by saving the uploaded file to the filesystem.\n\nInput:\n- None (The function takes no direct input parameters, but handles HTTP requests with the following characteristics:\n  - GET requests to \"/\" trigger form rendering\n  - POST requests to \"/\" with a \"file\" form field trigger file upload processing)\n\nOutput:\n- None (The function doesn't return any value, but has the following side effects:\n  - Starts an HTTP server on port 9000\n  - Writes responses to http.ResponseWriter\n  - Creates files on the filesystem for successful uploads)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\ttpl, err := template.ParseFiles(\"form.gohtml\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tif req.Method == \"POST\" {\n\t\t\tsrc, _, err := req.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer src.Close()\n\n\t\t\tdst, err := os.Create(filepath.Join(\"./\", \"file.txt\"))\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\terr = tpl.Execute(res, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nvar formTemplate = template.Must(template.New(\"form\").Parse(`\n<html>\n<body>\n<form method=\"POST\" enctype=\"multipart/form-data\">\n<input type=\"file\" name=\"file\">\n<input type=\"submit\" value=\"Upload\">\n</form>\n</body>\n</html>\n`))\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tformTemplate.Execute(w, nil)\n\t\t} else if r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20)\n\t\t\tfile, handler, err := r.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\tdst, err := os.Create(handler.Filename)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Unable to create the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tif _, err := io.Copy(dst, file); err != nil {\n\t\t\t\thttp.Error(w, \"Error uploading the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfmt.Fprintf(w, \"File %s uploaded successfully\", handler.Filename)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a simple HTTP server in Go that sets a cookie when the root path (\"/\") is accessed.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. When a request is made to the root path, it responds by setting a cookie named \"my-cookie\" with the value \"some value\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\thttp.SetCookie(res, &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t})\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        cookie := &http.Cookie{\n            Name:  \"my-cookie\",\n            Value: \"some value\",\n        }\n        http.SetCookie(w, cookie)\n    })\n    http.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a function that serves a genesis file over HTTP on a specified port, setting the appropriate content type and handling the file serving.\n\nFunction Description: The function `ServeGenesisFileAtPort` creates a basic HTTP server that serves a specified genesis file when requested at the `/genesis.car` endpoint. The server sets the content type to `application/octet-stream` and uses the `http.ServeFile` function to handle the file serving. The server runs on the specified port and panics if it fails to start.\n\nInput:  \n- `genesisFilePath` (string): The file path to the genesis file that will be served.  \n- `port` (int): The port number on which the HTTP server will listen.  \n\nOutput:  \n- None (the function does not return; it panics if the server fails to start).",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\tpanic(http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\n\taddr := fmt.Sprintf(\":%d\", port)\n\terr := http.ListenAndServe(addr, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Create a Go HTTP server that acts as a proxy, forwarding requests based on a header value and returning the corresponding stored response.\n\nFunction Description: The main function sets up an HTTP server with a root handler that retrieves and forwards responses based on the \"proxify\" header. It stores responses in a global map and cleans up after forwarding. The server runs concurrently.\n\nInput: \n- options.HTTPListenerAddress (string): The address and port on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (the function runs indefinitely as a server)\n- Errors are logged fatally if the server fails to start\n\nNote: The implementation uses global variables (response and responses) for storing and retrieving HTTP responses. The handler expects requests to contain a \"proxify\" header that serves as a key to look up pre-stored responses in the responses map. After forwarding a response, it removes the corresponding entry from the map.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"io\"\n)\n\nvar (\n\tresponse   *http.Response\n\tresponses  map[string]*http.Response\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tkey := req.Header.Get(\"proxify\")\n\t\tresponse := responses[key]\n\t\tdelete(responses, key)\n\n\t\tfor k, v := range response.Header {\n\t\t\tw.Header().Add(k, strings.Join(v, \"; \"))\n\t\t}\n\t\tw.WriteHeader(response.StatusCode)\n\t\tio.Copy(w, response.Body)\n\t})\n\tgo func() {\n\t\tif err := http.ListenAndServe(options.HTTPListenerAddress, nil); err != nil {\n\t\t\tgologger.Fatal().Msgf(\"Could not listen and serve: %s\\n\", err)\n\t\t}\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tresponsesMu sync.Mutex\n\tresponses   = make(map[string]struct {\n\t\tBody       string\n\t\tStatusCode int\n\t})\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tkey := r.Header.Get(\"proxify\")\n\tif key == \"\" {\n\t\thttp.Error(w, \"missing proxify header\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tresponsesMu.Lock()\n\tresp, ok := responses[key]\n\tif !ok {\n\t\tresponsesMu.Unlock()\n\t\thttp.Error(w, \"response not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\tdelete(responses, key)\n\tresponsesMu.Unlock()\n\n\tw.WriteHeader(resp.StatusCode)\n\tw.Write([]byte(resp.Body))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a Go HTTP server that serves as an interface for running and displaying scorecard results for GitHub repositories. The server should handle requests, process repository information, execute scorecard checks, and return results in either JSON or HTML format based on the request's content type.\n\nFunction Description: The `serveCmd` function creates and configures a Cobra command that starts an HTTP server. The server listens for requests, processes GitHub repository URLs, runs scorecard checks on those repositories, and returns the results. The function handles template parsing, route registration, and server startup.\n\nInput: \n- `o *options.Options`: A pointer to an options struct containing configuration settings like log level and commit depth\n\nOutput: \n- `*cobra.Command`: Returns a configured Cobra command that can be executed to start the HTTP server\n\nThe function does not explicitly return any values from its Run method, but it does:\n1. Write HTTP responses to the client (through http.ResponseWriter)\n2. Output logs through the logger\n3. May panic in case of critical errors during template parsing or server startup",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/ossf/scorecard/v5/clients/githubrepo\"\n\t\"github.com/ossf/scorecard/v5/clients/ossfuzz\"\n\t\"github.com/ossf/scorecard/v5/log\"\n\t\"github.com/ossf/scorecard/v5/options\"\n\t\"github.com/ossf/scorecard/v5/pkg/scorecard\"\n)\nfunc serveCmd(o *options.Options) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve the scorecard program over http\",\n\t\tLong:  ``,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tlogger := log.NewLogger(log.ParseLevel(o.LogLevel))\n\n\t\t\tt, err := template.New(\"webpage\").Parse(tpl)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"parsing webpage template\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\thttp.HandleFunc(\"/\", func(rw http.ResponseWriter, r *http.Request) {\n\t\t\t\trepoParam := r.URL.Query().Get(\"repo\")\n\t\t\t\tconst length = 3\n\t\t\t\ts := strings.SplitN(repoParam, \"/\", length)\n\t\t\t\tif len(s) != length {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\trepo, err := githubrepo.MakeGithubRepo(repoParam)\n\t\t\t\tif err != nil {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\tctx := r.Context()\n\t\t\t\trepoClient := githubrepo.CreateGithubRepoClient(ctx, logger)\n\t\t\t\tossFuzzRepoClient, err := ossfuzz.CreateOSSFuzzClientEager(ossfuzz.StatusURL)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"initializing clients\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t\tdefer ossFuzzRepoClient.Close()\n\t\t\t\trepoResult, err := scorecard.Run(ctx, repo,\n\t\t\t\t\tscorecard.WithCommitDepth(o.CommitDepth),\n\t\t\t\t\tscorecard.WithRepoClient(repoClient),\n\t\t\t\t\tscorecard.WithOSSFuzzClient(ossFuzzRepoClient),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"running enabled scorecard checks on repo\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\n\t\t\t\tif r.Header.Get(\"Content-Type\") == \"application/json\" {\n\t\t\t\t\tif err := repoResult.AsJSON(o.ShowDetails, log.ParseLevel(o.LogLevel), rw); err != nil {\n\t\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := t.Execute(rw, repoResult); err != nil {\n\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t}\n\t\t\t})\n\t\t\tport := os.Getenv(\"PORT\")\n\t\t\tif port == \"\" {\n\t\t\t\tport = \"8080\"\n\t\t\t}\n\t\t\tlogger.Info(\"Listening on localhost:\" + port + \"\\n\")\n\t\t\terr = http.ListenAndServe(fmt.Sprintf(\"0.0.0.0:%s\", port), nil)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"listening and serving\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t},\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/ossf/scorecard/v4/checker\"\n\t\"github.com/ossf/scorecard/v4/clients\"\n\t\"github.com/ossf/scorecard/v4/pkg\"\n)\n\n//go:embed templates/*\nvar templateFS embed.FS\n\ntype serverOptions struct {\n\tlogLevel   string\n\tcommitDept int\n}\n\nfunc serveCmd(o *serverOptions) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Start an HTTP server to run scorecard checks on GitHub repositories\",\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\tlogger := log.New(log.Writer(), \"\", log.LstdFlags)\n\t\t\tif o.logLevel != \"\" {\n\t\t\t\tlevel, err := log.ParseLevel(o.logLevel)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"invalid log level: %v\", err)\n\t\t\t\t}\n\t\t\t\tlog.SetLevel(level)\n\t\t\t}\n\n\t\t\ttmpl, err := template.New(\"\").ParseFS(templateFS, \"templates/*.html\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(fmt.Errorf(\"failed to parse templates: %w\", err))\n\t\t\t}\n\n\t\t\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif r.URL.Path != \"/\" {\n\t\t\t\t\thttp.Error(w, \"404 not found\", http.StatusNotFound)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := tmpl.ExecuteTemplate(w, \"index.html\", nil); err != nil {\n\t\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\thttp.HandleFunc(\"/check\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif r.Method != \"POST\" {\n\t\t\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trepoURL := r.FormValue(\"repo\")\n\t\t\t\tif repoURL == \"\" {\n\t\t\t\t\thttp.Error(w, \"Missing repo parameter\", http.StatusBadRequest)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\trepo, err := clients.ToRepo(repoURL)\n\t\t\t\tif err != nil {\n\t\t\t\t\thttp.Error(w, \"Invalid repository URL\", http.StatusBadRequest)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tlogger.Printf(\"Running scorecard checks on %s\", repo)\n\t\t\t\tresult := pkg.RunScorecard(repo, o.commitDept)\n\n\t\t\t\taccept := r.Header.Get(\"Accept\")\n\t\t\t\tif strings.Contains(accept, \"application/json\") {\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\t\t\tif err := checker.FormatJSON(w, result); err != nil {\n\t\t\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t\t\tif err := tmpl.ExecuteTemplate(w, \"result.html\", result); err != nil {\n\t\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\taddr := \":8080\"\n\t\t\tlogger.Printf(\"Starting server on %s\", addr)\n\t\t\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\t\t\tpanic(fmt.Errorf(\"failed to start server: %w\", err))\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Go HTTP server that handles Stripe webhook events, specifically processing billing meter error reports and other event types.\n\nFunction Description: The main function sets up an HTTP server with a \"/webhook\" endpoint that receives and processes Stripe webhook events. It validates the webhook signature, retrieves full event details from Stripe, and handles specific event types (particularly \"v1.billing.meter.error_report_triggered\").\n\nInput:\n- HTTP POST requests to \"/webhook\" endpoint containing:\n  - Request body with Stripe event payload (JSON format)\n  - \"Stripe-Signature\" header for webhook validation\n- Environment variables:\n  - apiKey: Stripe API key for authentication\n  - webhookSecret: Secret for validating webhook signatures\n\nOutput:\n- HTTP responses:\n  - 200 OK for successful processing\n  - 500 Internal Server Error for any processing failures\n- Console output:\n  - Success messages with meter IDs for handled events\n  - Error messages for any processing failures\n  - Notifications for unhandled event types\n\nThe function does not explicitly return values but writes to the HTTP response and console.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v81\"\n\tbillingMeters \"github.com/stripe/stripe-go/v81/billing/meter\"\n\t\"github.com/stripe/stripe-go/v81/rawrequest\"\n\twebhook \"github.com/stripe/stripe-go/v81/webhook\"\n)\nfunc main() {\n\tb, err := stripe.GetRawRequestBackend(stripe.APIBackend)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tclient := rawrequest.Client{B: b, Key: apiKey}\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, req *http.Request) {\n\t\tconst MaxBodyBytes = int64(65536)\n\t\treq.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)\n\t\tpayload, err := ioutil.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\terr = webhook.ValidatePayload(payload, req.Header.Get(\"Stripe-Signature\"), webhookSecret)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tvar thinEvent map[string]interface{}\n\n\t\tif err := json.Unmarshal(payload, &thinEvent); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse thin event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\teventID := thinEvent[\"id\"].(string)\n\n\t\tvar event map[string]interface{}\n\n\t\tresp, err := client.RawRequest(http.MethodGet, \"/v2/core/events/\"+eventID, \"\", nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get pull event: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tif err := json.Unmarshal(resp.RawJSON, &event); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse pull event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tswitch t := event[\"type\"].(string); t {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\trelatedObject := event[\"related_object\"].(map[string]interface{})\n\t\t\tmeter, err := billingMeters.Get(relatedObject[\"id\"].(string), nil)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get related meter object: %v\\n\", err.Error())\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmeterID := meter.ID\n\t\t\tfmt.Printf(\"Success! %s\\n\", meterID)\n\t\t\tfmt.Println(fmt.Sprint(event[\"data\"]))\n\t\tdefault:\n\t\t\tfmt.Fprintf(os.Stderr, \"Unhandled event type: %s\\n\", t)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\terr = http.ListenAndServe(\":4242\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v72\"\n\t\"github.com/stripe/stripe-go/v72/webhook\"\n)\n\nfunc main() {\n\tapiKey := os.Getenv(\"apiKey\")\n\twebhookSecret := os.Getenv(\"webhookSecret\")\n\n\tstripe.Key = apiKey\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, r *http.Request) {\n\t\tconst MaxBodyBytes = int64(65536)\n\t\tr.Body = http.MaxBytesReader(w, r.Body, MaxBodyBytes)\n\n\t\tpayload, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error reading request body: %v\", err)\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tsigHeader := r.Header.Get(\"Stripe-Signature\")\n\n\t\tvar event stripe.Event\n\t\tevent, err = webhook.ConstructEvent(payload, sigHeader, webhookSecret)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error verifying webhook signature: %v\", err)\n\t\t\thttp.Error(w, \"Invalid signature\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tretrievedEvent, err := stripe.Events.Get(event.ID, nil)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Failed to retrieve event from Stripe API: %v\", err)\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tswitch retrievedEvent.Type {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\tif obj, ok := retrievedEvent.Data.Object.(map[string]interface{}); ok {\n\t\t\t\tmeterID, ok := obj[\"meter_id\"].(string)\n\t\t\t\tif !ok {\n\t\t\t\t\tlog.Printf(\"Missing meter_id in error_report_triggered event\")\n\t\t\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"Handled error_report_triggered for meter ID: %s\", meterID)\n\t\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\t} else {\n\t\t\t\tlog.Printf(\"Unexpected data format in event\")\n\t\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\tdefault:\n\t\t\tlog.Printf(\"Unhandled event type: %s\", retrievedEvent.Type)\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t}\n\t})\n\n\tlog.Println(\"Starting server on :8080\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Server error: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles user authentication through cookies, displaying different HTML content based on login status.\n\nFunction Description: The main function sets up an HTTP server with a single route handler that manages user authentication. It checks for a \"logged-in\" cookie, processes login/logout requests, and serves different HTML content based on the authentication status.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but serves HTTP responses and maintains server state)\n\nNote: The function handles three main scenarios:\n1. Initial visit (no cookie set)\n2. Successful login (POST with correct password)\n3. Logout request (/logout path)\nFor each scenario, it sets appropriate cookies and returns corresponding HTML content.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"logged-in\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"logged-in\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\n\t\tif req.Method == \"POST\" {\n\t\t\tpassword := req.FormValue(\"password\")\n\t\t\tif password == \"secret\" {\n\t\t\t\tcookie = &http.Cookie{\n\t\t\t\t\tName:  \"logged-in\",\n\t\t\t\t\tValue: \"1\",\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif req.URL.Path == \"/logout\" {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:   \"logged-in\",\n\t\t\t\tValue:  \"0\",\n\t\t\t\tMaxAge: -1,\n\t\t\t}\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\t\tvar html string\n\n\t\tif cookie.Value == strconv.Itoa(0) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1>LOG IN</h1>\n\t\t\t<form method=\"post\" action=\"http://localhost:9000/\">\n\t\t\t\t<h3>User name</h3>\n\t\t\t\t<input type=\"text\" name=\"userName\" id=\"userName\">\n\t\t\t\t<h3>Password</h3>\n\t\t\t\t<input type=\"text\" name=\"password\" id=\"password\">\n\t\t\t\t<br>\n\t\t\t\t<input type=\"submit\">\n\t\t\t\t<input type=\"submit\" name=\"logout\" value=\"logout\">\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tif cookie.Value == strconv.Itoa(1) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1><a href=\"http://localhost:9000/logout\">LOG OUT</a></h1>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tio.WriteString(res, html)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path == \"/logout\" {\n\t\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\t\tName:   \"logged-in\",\n\t\t\t\tValue:  \"\",\n\t\t\t\tPath:   \"/\",\n\t\t\t\tMaxAge: -1,\n\t\t\t})\n\t\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n\t\t\treturn\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tpassword := r.FormValue(\"password\")\n\t\t\tif password == \"password123\" {\n\t\t\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\t\t\tName:   \"logged-in\",\n\t\t\t\t\tValue:  \"true\",\n\t\t\t\t\tPath:   \"/\",\n\t\t\t\t\tMaxAge: 3600,\n\t\t\t\t})\n\t\t\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n\t\t\t\treturn\n\t\t\t}\n\t\t\thttp.Error(w, \"Invalid password\", http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tcookie, err := r.Cookie(\"logged-in\")\n\t\tif err != nil || cookie.Value != \"true\" {\n\t\t\tfmt.Fprint(w, `<!DOCTYPE html><html><body><form method=\"post\">Password: <input type=\"password\" name=\"password\"><input type=\"submit\" value=\"Login\"></form></body></html>`)\n\t\t\treturn\n\t\t}\n\t\tfmt.Fprint(w, `<!DOCTYPE html><html><body>Welcome! <a href=\"/logout\">Logout</a></body></html>`)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a simple HTTP server in Go that tracks and displays the number of visits by maintaining a cookie-based counter.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles incoming requests. For each request, it checks for a cookie named \"my-cookie\". If the cookie doesn't exist, it creates one with an initial value of \"0\". The function increments the cookie value on each visit and sends it back in the response, effectively maintaining a visit counter.\n\nInput: None (The function takes no direct input parameters. It responds to HTTP requests received on port 9000.)\n\nOutput: None (The function doesn't return any value. It writes the current visit count to the HTTP response and sets/updates the cookie in the response header.)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"my-cookie\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"my-cookie\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\tcount++\n\t\tcookie.Value = strconv.Itoa(count)\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, cookie.Value)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"my-cookie\")\n\t\tcount := 0\n\t\tif err == nil {\n\t\t\tif v, e := strconv.Atoi(cookie.Value); e == nil {\n\t\t\t\tcount = v\n\t\t\t}\n\t\t}\n\t\tcount++\n\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: strconv.Itoa(count),\n\t\t\tPath:  \"/\",\n\t\t})\n\t\tw.Write([]byte(strconv.Itoa(count)))\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server with health check and metrics endpoints using Go's net/http package.\n\nFunction Description: The function `serveMetrics` initializes an HTTP server with two endpoints: `/healthz` for health checks (returns \"OK\" with 200 status) and `/metrics` for Prometheus metrics (handled by promhttp). The server listens on the specified address and runs until terminated.\n\nInput: \n- `address` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (function runs indefinitely until server termination)\n- Logs fatal errors if server fails to start",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tlog.Fatal(http.ListenAndServe(address, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Fatal(http.ListenAndServe(address, nil))\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebSocket connections at the root path (\"/\"). The server should load configuration from a JSON file and start listening on a specified port.\n\nFunction Description: The main function initializes the server by loading configuration, setting up a WebSocket handler at the root path, and starting the HTTP server on the configured port.\n\nInput: None (configuration is loaded from \"config.json\" file)\n\nOutput: None (the function runs indefinitely serving HTTP requests or panics if server fails to start)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"golang.org/x/net/websocket\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\tConfig = load(\"config.json\")\n\t\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\ts := websocket.Server{Handler: websocket.Handler(wsHandler)}\n\t\ts.ServeHTTP(w, req)\n\t})\n\n\terr := http.ListenAndServe(\":\"+strconv.Itoa(Config.Port), nil)\n\tif err != nil {\n\t\tpanic(\"Error: \" + err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Config struct {\n\tPort string `json:\"port\"`\n}\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc main() {\n\tdata, err := ioutil.ReadFile(\"config.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar config Config\n\tif err := json.Unmarshal(data, &config); err != nil {\n\t\tpanic(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"WebSocket upgrade failed\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\t// Connection handling would be implemented here\n\t})\n\n\taddr := \":\" + config.Port\n\tlog.Printf(\"Server starting on port %s\", config.Port)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles form submissions and displays a simple HTML form.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form. For POST requests, it reads the form value and prints it to the console while still displaying the form. The server listens on port 9000.\n\nInput: None (The function takes no direct input parameters, but receives HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but writes to the HTTP response and prints to console)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t <input type=\"text\" name=\"q\">\n\t\t <input type=\"submit\">\n\n\t\t</form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tinput := r.FormValue(\"inputField\")\n\t\t\tfmt.Println(input)\n\t\t}\n\t\tfmt.Fprintf(w, `<html><body>\n<form method=\"post\">\n<input type=\"text\" name=\"inputField\">\n<input type=\"submit\" value=\"Submit\">\n</form>\n</body></html>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and starts an HTTP server listening on port 8080.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response.\n- `r *http.Request` - Represents the HTTP request received from the client.\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Hello World, I'm Golang!\"))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles form submissions and displays the submitted value. The server should respond to both GET and POST requests on the root path (\"/\") and render an HTML form with a checkbox input.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path (\"/\"). The handler processes form submissions, extracts the form value, and returns an HTML response containing the form and the submitted value.\n\nInput: None (The function takes no direct input parameters. Input is received through HTTP requests.)\n\nOutput: None (The function doesn't return any value. Output is sent through the HTTP response writer.)\n\nNote: The function internally uses http.ResponseWriter to send responses and *http.Request to receive requests. The handler checks for a form value with key \"q\" and includes it in the response. The server listens on port 9000.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t<input type=\"checkbox\" name=\"q\">\n\t\t<input type=\"submit\">\n\n\t\t</form>`+val)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tq := \"\"\n\t\tif r.Method == \"POST\" {\n\t\t\tq = r.FormValue(\"q\")\n\t\t}\n\t\tfmt.Fprintf(w, `<!DOCTYPE html>\n<html>\n<head><title>Form</title></head>\n<body>\n<form method=\"POST\">\n<input type=\"checkbox\" name=\"q\">\n<input type=\"submit\" value=\"Submit\">\n</form>\n<p>Submitted value: %s</p>\n</body>\n</html>`, q)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with \"hello world\".\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. The handler writes \"hello world\" as the response. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters; requests are handled via HTTP)\n\nOutput: None (The function doesn't return anything; responses are written to the http.ResponseWriter)\n\nNote: The reference code shows a complete implementation where:\n1. A handler function is defined to write \"hello world\" response\n2. The handler is registered for the root path \"/\"\n3. The server starts listening on port 8080",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nvar myHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\"hello world\")) })\n\nfunc main() {\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"hello world\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", helloHandler)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a function that checks the health status of a Kubernetes cluster by making an HTTP GET request to the cluster's livez endpoint using a custom HTTP client with TLS configuration.\n\nFunction Description: The function `GetClusterStatusByAPI` verifies the health of a Kubernetes cluster by sending an HTTPS request to the cluster's `/livez` endpoint. It uses a custom `http.Client` with TLS configuration loaded from the cluster's connection settings. The function returns a boolean indicating the cluster's health status and a string containing any error messages or the response body if the check fails.\n\nInput: \n- `addr` [string]: The address of the Kubernetes cluster API server.\n- `cluster` [*model.Cluster]: A pointer to a cluster object containing connection configuration details.\n\nOutput: \n- [bool]: `true` if the cluster is healthy (HTTP status code 200), `false` otherwise.\n- [string]: An empty string if the cluster is healthy, otherwise an error message or the response body.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"k8s.io/client-go/rest\"\n)\n\nfunc GetClusterStatusByAPI(addr string, cluster *model.Cluster) (bool, string) {\n\treqURL := fmt.Sprintf(\"https://%s/livez\", addr)\n\tconf, err := clusterUtil.LoadConnConf(cluster, addr)\n\tif err != nil {\n\t\t_, _ = false, fmt.Sprintf(\"load cluster config error %s\", err.Error())\n\t}\n\ttls2, err := rest.TransportFor(conf)\n\tif err != nil {\n\t\t_, _ = false, fmt.Sprintf(\"config transport error %s\", err.Error())\n\t}\n\tclient := &http.Client{Timeout: 1 * time.Second, Transport: tls2}\n\trequest, _ := http.NewRequest(\"GET\", reqURL, nil)\n\tresponse, err := client.Do(request)\n\tif err != nil {\n\t\treturn false, fmt.Sprintf(\"Https get error %s\", err.Error())\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode == 200 {\n\t\treturn true, \"\"\n\t}\n\ts, _ := ioutil.ReadAll(response.Body)\n\treturn false, fmt.Sprintf(\"Api check error %s\", string(s))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"x509\"\n)\n\nfunc GetClusterStatusByAPI(addr string, cluster *model.Cluster) (bool, string) {\n\tif cluster == nil {\n\t\treturn false, \"cluster configuration is nil\"\n\t}\n\tif addr == \"\" {\n\t\treturn false, \"empty address provided\"\n\t}\n\n\turl := addr + \"/livez\"\n\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: cluster.InsecureSkipVerify,\n\t}\n\n\tif cluster.CAFile != \"\" {\n\t\tcaCert, err := ioutil.ReadFile(cluster.CAFile)\n\t\tif err != nil {\n\t\t\treturn false, \"error reading CA file: \" + err.Error()\n\t\t}\n\t\tcaCertPool := x509.NewCertPool()\n\t\tif ok := caCertPool.AppendCertsFromPEM(caCert); !ok {\n\t\t\treturn false, \"failed to parse CA certificate\"\n\t\t}\n\t\ttlsConfig.RootCAs = caCertPool\n\t}\n\n\tif cluster.CertFile != \"\" && cluster.KeyFile != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(cluster.CertFile, cluster.KeyFile)\n\t\tif err != nil {\n\t\t\treturn false, \"error loading client certificate: \" + err.Error()\n\t\t}\n\t\ttlsConfig.Certificates = []tls.Certificate{cert}\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: tlsConfig,\n\t\t},\n\t\tTimeout: 10 * time.Second,\n\t}\n\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn false, \"failed to create request: \" + err.Error()\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn false, \"HTTP request error: \" + err.Error()\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, err := ioutil.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn false, \"Failed to read response body: \" + err.Error()\n\t\t}\n\t\treturn false, string(body)\n\t}\n\n\treturn true, \"\"\n}"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a function that serves Prometheus metrics via an HTTP server, updating custom metrics (uptime and packet count) on each request.\n\nFunction Description: The ServeMetricsAt function starts an HTTP server to expose Prometheus metrics. It registers custom metrics (uptime and packet count), updates them on each request to the metrics endpoint, and serves the metrics using the Prometheus HTTP handler. The function runs the server in a goroutine to avoid blocking the main program.\n\nInput:\n- addr (string): The network address (including port) where the metrics server should listen (e.g., \":8080\")\n- c (*collector.Collector): A pointer to a collector instance used to get the current packet count (can be nil)\n\nOutput: None (the function runs indefinitely in a background goroutine)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\n\t\"github.com/dreadl0ck/netcap/collector\"\n)\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tprometheus.MustRegister(upTime)\n\tprometheus.MustRegister(numPackets)\n\n\tfmt.Println(\"starting to serve metrics at:\", addr+metricsRoute)\n\n\tgo func() {\n\t\tmetricsHandler := promhttp.Handler()\n\n\t\thttp.HandleFunc(metricsRoute, func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupTime.WithLabelValues().Set(math.RoundToEven(time.Since(startTime).Seconds())\n\n\t\t\tif c != nil {\n\t\t\t\tnumPackets.WithLabelValues().Set(float64(c.GetNumPackets()))\n\t\t\t}\n\n\t\t\tmetricsHandler.ServeHTTP(w, r)\n\t\t})\n\t\tlog.Fatal(\"failed to serve metrics: \", http.ListenAndServe(addr, nil))\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"collector\"\n)\n\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tstartTime := time.Now()\n\n\tuptimeGauge := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"uptime_seconds\",\n\t\tHelp: \"Current uptime of the server in seconds.\",\n\t})\n\tprometheus.MustRegister(uptimeGauge)\n\n\tvar packetCountGauge prometheus.Gauge\n\tif c != nil {\n\t\tpacketCountGauge = prometheus.NewGauge(prometheus.GaugeOpts{\n\t\t\tName: \"packet_count\",\n\t\t\tHelp: \"Total number of packets processed.\",\n\t\t})\n\t\tprometheus.MustRegister(packetCountGauge)\n\t}\n\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuptimeGauge.Set(time.Since(startTime).Seconds())\n\t\tif c != nil {\n\t\t\tpacketCountGauge.Set(float64(c.GetPacketCount()))\n\t\t}\n\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t})\n\n\tgo func() {\n\t\thttp.ListenAndServe(addr, nil)\n\t}()\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a Go HTTP server that implements WebDAV functionality with custom logging and special handling for specific HTTP headers.\n\nStruct Description: The webdav.Handler struct provides WebDAV server functionality with in-memory storage for files and locks. We'll wrap this with custom request handling.\n\nFields:\n- FileSystem: webdav.FileSystem - In-memory filesystem implementation\n- LockSystem: webdav.LockSystem - In-memory lock system implementation\n- Logger: func(*http.Request, error) - Custom logging function for request tracking\n\nMethods:\n- ServeHTTP: (http.ResponseWriter, *http.Request) -> () - Main handler method that processes HTTP requests\n- NewMemFS: () -> webdav.FileSystem - Creates new in-memory filesystem\n- NewMemLS: () -> webdav.LockSystem - Creates new in-memory lock system\n\nAdditional Functions:\n- main: () -> () - Entry point that sets up the server and routes\n- requestHandler: (http.ResponseWriter, *http.Request) -> () - Custom middleware for special header handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "right_result": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"golang.org/x/net/webdav\"\n)\n\nfunc NewMemFS() webdav.FileSystem {\n\treturn webdav.NewMemFS()\n}\n\nfunc NewMemLS() webdav.LockSystem {\n\treturn webdav.NewMemLS()\n}\n\ntype WebDAVServer struct {\n\tFileSystem webdav.FileSystem\n\tLockSystem webdav.LockSystem\n\tLogger     func(*http.Request, error)\n}\n\nfunc (s *WebDAVServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\thandler := &webdav.Handler{\n\t\tFileSystem: s.FileSystem,\n\t\tLockSystem: s.LockSystem,\n\t}\n\tmiddleware := requestHandler(handler, s.Logger)\n\tmiddleware.ServeHTTP(w, r)\n}\n\nfunc requestHandler(next http.Handler, logger func(*http.Request, error)) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Custom-Header\") == \"Special\" {\n\t\t\tw.Header().Set(\"X-Processed\", \"true\")\n\t\t}\n\t\trw := &responseWriter{ResponseWriter: w}\n\t\tlogger(r, nil)\n\t\tnext.ServeHTTP(rw, r)\n\t\tvar err error\n\t\tif rw.statusCode >= 400 {\n\t\t\terr = fmt.Errorf(\"HTTP error: %d\", rw.statusCode)\n\t\t}\n\t\tlogger(r, err)\n\t})\n}\n\ntype responseWriter struct {\n\thttp.ResponseWriter\n\tstatusCode int\n}\n\nfunc (rw *responseWriter) WriteHeader(code int) {\n\trw.statusCode = code\n\trw.ResponseWriter.WriteHeader(code)\n}\n\nfunc main() {\n\tserver := &WebDAVServer{\n\t\tFileSystem: NewMemFS(),\n\t\tLockSystem: NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlog.Printf(\"[%s] %s %v\", r.Method, r.URL.Path, err)\n\t\t},\n\t}\n\thttp.Handle(\"/\", server)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a Go HTTP server that handles user sessions through cookies, specifically managing a session ID cookie that can be updated with a user's email address via form submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both displaying a form and processing form submissions. It manages a session cookie named \"session-id\" which initially has no value but can be updated with the user's email when submitted through the form. The function writes an HTML response containing the current cookie value and a form for submitting an email address.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests which may contain form data in the \"email\" field)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 9000 and responds to requests with HTML content and cookie operations)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"session-id\")\n\t\tif err != nil {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName: \"session-id\",\n\t\t\t}\n\t\t}\n\n\t\tif req.FormValue(\"email\") != \"\" {\n\t\t\tcookie.Value = req.FormValue(\"email\")\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, `<!DOCTYPE html>\n<html>\n  <body>\n    <form>\n    `+cookie.Value+`\n      <input type=\"email\" name=\"email\">\n      <input type=\"submit\">\n    </form>\n  </body>\n</html>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tsessionID := \"\"\n\t\tif c, err := r.Cookie(\"session-id\"); err == nil {\n\t\t\tsessionID = c.Value\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\temail := r.FormValue(\"email\")\n\t\t\tif email != \"\" {\n\t\t\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\t\t\tName:  \"session-id\",\n\t\t\t\t\tValue: email,\n\t\t\t\t\tPath:  \"/\",\n\t\t\t\t})\n\t\t\t\tsessionID = email\n\t\t\t}\n\t\t}\n\n\t\thtml := fmt.Sprintf(`\n<html>\n<body>\nCurrent session ID: %s<br>\n<form method=\"POST\">\n<input type=\"email\" name=\"email\" required>\n<input type=\"submit\" value=\"Update\">\n</form>\n</body>\n</html>\n`, sessionID)\n\n\t\tfmt.Fprint(w, html)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with plain text.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes a plain text response (\"Dog\") to the client. The handler also sets the Content-Type header to \"text/plain\".\n\nInput: None (The function takes no direct input parameters; it handles HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return anything; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tres.Header()[\"Content-Type\"] = []string{\"text/plain\"}\n\t\tfmt.Fprint(res, \"Dog\")\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprintf(w, \"Dog\")\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server to serve web content, including handling specific routes for examples and serving static files.\n\nFunction Description: The `serve` function initializes an HTTP server that handles multiple routes. It serves a home page, handles requests for WASM execution files, and processes example-related routes with dynamic content generation. The function uses Go's `net/http` package to create routes and serve content, including HTML templates and static files.\n\nInput: \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput:\n- `error`: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nThe function performs these key operations:\n1. Loads example data using `getExamples()`\n2. Sets up template handling for the home page and example pages\n3. Configures route handlers for:\n   - Root path (\"/\") serving the home page\n   - WASM execution file (\"/wasm_exec.js\")\n   - Example paths (\"/example/[type]/[link]/...\")\n4. Starts the HTTP server on the specified address",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\thomeTemplate := template.Must(template.ParseFiles(\"index.html\"))\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\turl := r.URL.Path\n\t\tif url == \"/wasm_exec.js\" {\n\t\t\thttp.FileServer(http.Dir(filepath.Join(build.Default.GOROOT, \"misc/wasm/\"))).ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(url, \"/\")\n\t\tif len(parts) > 4 &&\n\t\t\tparts[1] == \"example\" {\n\t\t\texampleType := parts[2]\n\t\t\texampleLink := parts[3]\n\t\t\tfor _, example := range *examples {\n\t\t\t\tif example.Link != exampleLink {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfiddle := filepath.Join(exampleLink, \"jsfiddle\")\n\t\t\t\tif len(parts[4]) != 0 {\n\t\t\t\t\thttp.StripPrefix(\"/example/\"+exampleType+\"/\"+exampleLink+\"/\", http.FileServer(http.Dir(fiddle))).ServeHTTP(w, r)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\ttemp := template.Must(template.ParseFiles(\"example.html\"))\n\t\t\t\t_, err := temp.ParseFiles(filepath.Join(fiddle, \"demo.html\"))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tdata := struct {\n\t\t\t\t\t*Example\n\t\t\t\t\tJS bool\n\t\t\t\t}{\n\t\t\t\t\texample,\n\t\t\t\t\texampleType == \"js\",\n\t\t\t\t}\n\n\t\t\t\terr = temp.Execute(w, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\terr := homeTemplate.Execute(w, examples)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"strings\"\n\t\"text/template\"\n)\n\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\tindexTmpl := template.Must(template.ParseFiles(\"templates/index.html\"))\n\texampleTmpl := template.Must(template.ParseFiles(\"templates/example.html\"))\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tindexTmpl.Execute(w, examples)\n\t})\n\n\thttp.HandleFunc(\"/wasm_exec.js\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.ServeFile(w, r, \"wasm_exec.js\")\n\t})\n\n\thttp.HandleFunc(\"/example/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tpath := r.URL.Path[len(\"/example/\"):]\n\n\t\tparts := strings.Split(path, \"/\")\n\t\tif len(parts) < 2 {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\texampleType := parts[0]\n\t\tlink := parts[1]\n\n\t\tvar selectedExample Example\n\t\tfound := false\n\t\tfor _, ex := range examples {\n\t\t\tif ex.Type == exampleType && ex.Link == link {\n\t\t\t\tselectedExample = ex\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\texampleTmpl.Execute(w, selectedExample)\n\t})\n\n\tfs := http.FileServer(http.Dir(\"static\"))\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", fs))\n\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes with different authentication methods (Basic Auth and Bearer Token) and serves Prometheus metrics on authenticated endpoints.\n\nFunction Description: The main function sets up an HTTP server with three routes:\n1. Root (\"/\") route with a basic handler\n2. \"/metrics\" route protected by Basic Authentication\n3. \"/bearer-metrics\" route protected by Bearer Token authentication\nThe server listens on port 8080 and uses the net/http package for HTTP operations.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The implementation assumes the existence of two helper functions:\n1. checkBasicAuth(w http.ResponseWriter, r *http.Request) bool\n2. checkBearerAuth(w http.ResponseWriter, r *http.Request) bool\nwhich handle the respective authentication methods.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBasicAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Basic realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBearerAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Bearer realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\taddress := \":8080\"\n\n\t_ = http.ListenAndServe(address, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\n// Dummy implementations of helper functions for authentication\nfunc checkBasicAuth(w http.ResponseWriter, r *http.Request) bool {\n\tusername, password, ok := r.BasicAuth()\n\tif !ok {\n\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n\t\treturn false\n\t}\n\tif username != \"admin\" || password != \"secret\" {\n\t\thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc checkBearerAuth(w http.ResponseWriter, r *http.Request) bool {\n\ttoken := r.Header.Get(\"Authorization\")\n\tif token == \"\" {\n\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n\t\treturn false\n\t}\n\tif len(token) < 8 || token[:7] != \"Bearer \" {\n\t\thttp.Error(w, \"Invalid Authorization header\", http.StatusUnauthorized)\n\t\treturn false\n\t}\n\tif token[7:] != \"valid_token\" {\n\t\thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc main() {\n\t// Root route handler\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to the root endpoint\")\n\t})\n\n\t// Metrics route with Basic Authentication\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif !checkBasicAuth(w, r) {\n\t\t\treturn\n\t\t}\n\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t})\n\n\t// Bearer Token metrics route\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif !checkBearerAuth(w, r) {\n\t\t\treturn\n\t\t}\n\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t})\n\n\t// Start the HTTP server\n\tlog.Println(\"Starting server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles multiple routes with different functionalities, including a root route, a route to display request headers, and a route to show build information.\n\nFunction Description: The HTTP server will respond to different endpoints with specific behaviors:\n1. Root endpoint (\"/\") returns a greeting message\n2. \"/headers\" endpoint returns all request headers\n3. \"/api/buildstamp\" endpoint returns build information\n\nInput: \n- HTTP requests to specified endpoints (/, /headers, /api/buildstamp)\n- BuildStamp string variable containing build information\n\nOutput: \n- For \"/\": Plain text response \"hello, my name is Go~~\"\n- For \"/headers\": List of all request headers in \"name: value\" format\n- For \"/api/buildstamp\": Current value of BuildStamp variable\n- HTTP responses through the http.ResponseWriter interface",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar BuildStamp = \"No Build Stamp Provided\"\n\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello, my name is Go~~\\n\")\n}\n\nfunc headers(w http.ResponseWriter, req *http.Request) {\n\tfor name, headers := range req.Header {\n\t\tfor _, h := range headers {\n\t\t\tfmt.Fprintf(w, \"%v: %v\\n\", name, h)\n\t\t}\n\t}\n}\n\nfunc buildStamp(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"%s\", BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.HandleFunc(\"/api/buildstamp\", buildStamp)\n\thttp.HandleFunc(\"/headers\", headers)\n\n\thttp.ListenAndServe(\":20219\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar BuildStamp string = \"development\"\n\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"hello, my name is Go~~\")\n}\n\nfunc showHeaders(w http.ResponseWriter, r *http.Request) {\n\tfor name, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\tfmt.Fprintf(w, \"%s: %s\\n\", name, value)\n\t\t}\n\t}\n}\n\nfunc showBuildstamp(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"%s\", BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", sayHello)\n\thttp.HandleFunc(\"/headers\", showHeaders)\n\thttp.HandleFunc(\"/api/buildstamp\", showBuildstamp)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- port [int] - The port number on which the HTTP server should listen\n\nOutput:\n- [chan string] - A channel that will receive the SDP data from incoming HTTP requests",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tch := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"POST\" {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tdefer r.Body.Close()\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tch <- string(body)\n\t\tfmt.Fprintf(w, \"done\")\n\t})\n\tgo http.ListenAndServe(\":\"+strconv.Itoa(port), nil)\n\treturn ch\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles requests to the root path (\"/\") and returns a welcome message combined with a predefined string variable and a version string.\n\nFunction Description: The main function sets up a basic HTTP server that listens on port 8080. It registers a handler function for the root path (\"/\") which writes a welcome message concatenated with a local string variable and a package-level version string to the response.\n\nInput: None (The HTTP server listens for incoming requests on the specified port)\n\nOutput: None (The function runs indefinitely, serving HTTP responses. The handler writes output to the http.ResponseWriter)\n\nNote: The reference code is at the package level (main package) rather than being encapsulated in a struct or class. The instruction follows the function-level format as requested.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\ta := \"hello \"\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"Welcome to my website! \", a, v)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nconst version = \"1.0.0\"\n\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        predefined := \"User\"\n        fmt.Fprintf(w, \"Welcome %s! Version: %s\", predefined, version)\n    })\n    http.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with \"Hello World!\" to all requests on the root path.\n\nFunction Description: The main function sets up an HTTP server that handles requests to the root path (\"/\") by responding with a \"Hello World!\" message. It uses the net/http package to register a handler function and start the server.\n\nInput: None (The function takes no direct input parameters, but the HTTP server will process incoming HTTP requests)\n\nOutput: None (The function doesn't return anything directly, but it will output \"Hello World!\" as an HTTP response to requests, and may output error messages to the log if the server fails to start)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path == \"/\" {\n\t\t\tfmt.Fprintf(w, \"Hello World!\")\n\t\t} else {\n\t\t\thttp.NotFound(w, r)\n\t\t}\n\t})\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with a simple greeting message to all incoming requests.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles all incoming requests. When a request is received, it writes a \"Hello!\" response. The server listens on port 80 and logs any errors that occur during startup.\n\nInput: None (The function takes no direct input parameters; configuration is hardcoded)\n\nOutput: None (The function doesn't return anything directly but starts a long-running HTTP server process that handles incoming requests and writes responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log/slog\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\tlog.Info(\"Starting server at port 80\")\n\tif err := http.ListenAndServe(\":80\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"Hello!\")\n\t})\n\n\tif err := http.ListenAndServe(\":80\", nil); err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t}\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when a request is received. The server listens on port 8080.\n\nInput:  \n- `w http.ResponseWriter`: Used to construct the HTTP response.  \n- `r *http.Request`: Contains information about the incoming HTTP request.  \n\nOutput:  \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response body. No explicit return value.  \n\nExample usage:  \n```go\nhttp.HandleFunc(\"/\", handler)  \nhttp.ListenAndServe(\":8080\", nil)  \n```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a multipart form and displays an upload form to the client.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form for file uploads. For POST requests, it processes the uploaded file. The server listens on port 9000.\n\nInput: \n- None (The function takes no direct input parameters, but handles HTTP requests with:\n  - GET requests to \"/\" path\n  - POST requests with multipart/form-data containing a file under the \"q\" field)\n\nOutput:\n- For GET requests: Returns HTML form for file upload (content-type: text/html)\n- For POST requests: Processes the uploaded file (prints file info to console)\n- Server runs continuously on port 9000 until terminated",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tfile, hdr, err := req.FormFile(key)\n\t\tfmt.Println(file, hdr, err)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"q\">\n      <input type=\"submit\">\n    </form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t\tfmt.Fprintf(w, `<!DOCTYPE html>\n<html>\n<body>\n<form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"file\" name=\"q\">\n<input type=\"submit\" value=\"Upload\">\n</form>\n</body>\n</html>`)\n\t\t} else if r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20)\n\t\t\tfile, handler, err := r.FormFile(\"q\")\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\t\t\tfmt.Printf(\"Filename: %s\\n\", handler.Filename)\n\t\t\tfmt.Printf(\"Size: %d\\n\", handler.Size)\n\t\t\tfmt.Printf(\"MIME Headers: %v\\n\", handler.Header)\n\t\t\tfmt.Fprintf(w, \"File %s uploaded successfully\", handler.Filename)\n\t\t}\n\t})\n\tfmt.Println(\"Server running on port 9000\")\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server with instrumented handlers for metrics collection using Prometheus. The function should register routes for metrics and a custom endpoint, apply middleware for context handling, and instrument handlers with counters and histograms.\n\nFunction Description: The function ExampleInstrumentHandlerWithLabelResolver demonstrates how to create an HTTP server with Prometheus instrumentation. It sets up counter and histogram metrics, creates handlers for specific routes, applies middleware to extract headers into context, and starts the server on port 3000. The function doesn't take any explicit parameters but relies on package-level configurations.\n\nInput: None (uses package-level constants and variables)\n\nOutput: None (starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\nfunc ExampleInstrumentHandlerWithLabelResolver() {\n\tcounter := prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"api_requests_total\",\n\t\t\tHelp: \"A counter for requests to the wrapped handler.\",\n\t\t},\n\t\t[]string{\"code\", \"method\", \"myheader\"},\n\t)\n\n\tduration := prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:    \"request_duration_seconds\",\n\t\t\tHelp:    \"A histogram of latencies for requests.\",\n\t\t\tBuckets: []float64{.25, .5, 1, 2.5, 5, 10},\n\t\t},\n\t\t[]string{\"handler\", \"method\", \"myheader\"},\n\t)\n\n\tpullHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Pull\"))\n\t})\n\n\topts := WithLabelFromCtx(\"myheader\",\n\t\tfunc(ctx context.Context) string {\n\t\t\treturn ctx.Value(CtxResolverKey).(string)\n\t\t},\n\t)\n\n\tpullChain := InstrumentHandlerDuration(duration.MustCurryWith(prometheus.Labels{\"handler\": \"pull\"}),\n\t\tInstrumentHandlerCounter(counter, pullHandler, opts),\n\t\topts,\n\t)\n\n\tmiddleware := func(next http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tctx := context.WithValue(r.Context(), CtxResolverKey, r.Header.Get(\"x-my-header\"))\n\n\t\t\tnext(w, r.WithContext(ctx))\n\t\t}\n\t}\n\n\thttp.Handle(\"/metrics\", Handler())\n\thttp.Handle(\"/pull\", middleware(pullChain))\n\n\tif err := http.ListenAndServe(\":3000\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nvar (\n\trequestCounter = prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"http_requests_total\",\n\t\t\tHelp: \"Total number of HTTP requests.\",\n\t\t},\n\t\t[]string{\"method\", \"route\", \"user_id\"},\n\t)\n\trequestLatency = prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName: \"http_request_latency_seconds\",\n\t\t\tHelp: \"Latency of HTTP requests.\",\n\t\t},\n\t\t[]string{\"method\", \"route\", \"user_id\"},\n\t)\n)\n\nfunc init() {\n\tprometheus.MustRegister(requestCounter, requestLatency)\n}\n\nfunc ExampleInstrumentHandlerWithLabelResolver() {\n\tuserIDMiddleware := func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tuserID := r.Header.Get(\"X-User-ID\")\n\t\t\tctx := context.WithValue(r.Context(), \"userID\", userID)\n\t\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t\t})\n\t}\n\n\tinstrumentMiddleware := func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tuserID := r.Context().Value(\"userID\").(string)\n\t\t\tmethod := r.Method\n\t\t\troute := r.URL.Path\n\n\t\t\trequestCounter.WithLabelValues(method, route, userID).Inc()\n\n\t\t\tstart := time.Now()\n\t\t\tdefer func() {\n\t\t\t\trequestLatency.WithLabelValues(method, route, userID).Observe(time.Since(start).Seconds())\n\t\t\t}()\n\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t}\n\n\tdataHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tuserID := r.Context().Value(\"userID\")\n\t\tw.Write([]byte(\"User ID: \" + userID.(string)))\n\t})\n\n\tfinalDataHandler := instrumentMiddleware(userIDMiddleware(dataHandler))\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\thttp.Handle(\"/data\", finalDataHandler)\n\n\thttp.ListenAndServe(\":3000\", nil)\n}"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when the server receives a request to that path.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response back to the client.\n- `r *http.Request` - Contains information about the incoming HTTP request (not used in this simple example).\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the response writer (`w`), which is sent back to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- `port` [int] - The port number on which the HTTP server should listen.\n\nOutput:\n- `chan string` - A channel that will receive the SDP data from incoming HTTP requests.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tch := make(chan string)\n\thandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodPost {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tch <- string(body)\n\t\tw.Write([]byte(\"done\"))\n\t}\n\thttp.HandleFunc(\"/\", handler)\n\tgo func() {\n\t\terr := http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\treturn ch\n}"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and responds with the requested URL path.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes the requested URL path as plain text in the response.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return any value; it continuously serves HTTP requests until terminated)\n\nNote: The handler function takes two parameters:\n1. res http.ResponseWriter - used to write the HTTP response\n2. req *http.Request - contains information about the incoming request",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprint(res, req.URL.Path)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprintf(res, req.URL.Path)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a basic HTTP server in Go that echoes back the request headers to the client. The server should handle requests on the root path (\"/\") and respond by writing the request headers to the response.\n\nFunction Description: The `ServeHTTP` function is an HTTP handler that writes the request headers to the response writer. It is registered to handle requests on the root path (\"/\") and starts an HTTP server listening on `127.0.0.1:8080`.\n\nInput: \n- `w http.ResponseWriter`: Used to construct the HTTP response.\n- `r *http.Request`: Contains the incoming HTTP request details, including headers.\n\nOutput: None (writes directly to the `http.ResponseWriter`).",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tr.Header.Write(w)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    for key, values := range r.Header {\n        for _, value := range values {\n            fmt.Fprintf(w, \"%s: %s\\n\", key, value)\n        }\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", ServeHTTP)\n    http.ListenAndServe(\"127.0.0.1:8080\", nil)\n}"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a basic HTTP server in Go that serves a template-based web page and handles requests on a configurable port.\n\nFunction Description: The main function sets up an HTTP server with a root route handler that renders a template. It configures the server port from environment variables with a default fallback, then starts the server.\n\nInput: \n- Environment variable \"PORT\" (optional): Specifies the port number to listen on\n- Template file \"todos/index.jet\": The template to be rendered and served\n\nOutput:\n- HTTP server running on the specified port, serving the rendered template at the root path (\"/\")\n- Log output indicating the server's running status and any template errors\n\nNote: The reference code shows the implementation but doesn't explicitly define separate functions for each operation. The main function combines:\n1. Route handling (with template rendering)\n2. Port configuration\n3. Server startup",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tview, err := views.GetTemplate(\"todos/index.jet\")\n\t\tif err != nil {\n\t\t\tlog.Println(\"Unexpected template err:\", err.Error())\n\t\t}\n\t\tview.Execute(w, nil, todos)\n\t})\n\n\tport := os.Getenv(\"PORT\")\n\tif len(port) == 0 {\n\t\tport = \":8080\"\n\t} else if !strings.HasPrefix(\":\", port) {\n\t\tport = \":\" + port\n\t}\n\n\tlog.Println(\"Serving on \" + port)\n\thttp.ListenAndServe(port, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/CloudyKit/jet/v6\"\n)\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\tviews := jet.NewSet(jet.NewOSFileSystemLoader(\"todos\"), jet.InDevelopmentMode())\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\ttmpl, err := views.GetTemplate(\"index.jet\")\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Template error: %v\", err)\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tif err := tmpl.Execute(w, nil, nil); err != nil {\n\t\t\tlog.Printf(\"Template execution error: %v\", err)\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t}\n\t})\n\n\tlog.Printf(\"Server started on port %s\", port)\n\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\tlog.Fatalf(\"Server failed: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles multiple routes with different response messages.\n\nFunction Description: The code demonstrates how to set up a simple HTTP server with two route handlers. The first handler responds to the root path (\"/\") with a \"doggy\" message, while the second handler responds to the \"/cat/\" path with a \"catty\" message. The server listens on port 9000.\n\nInput: \n- None (HTTP requests are automatically handled by the server)\n\nOutput: \n- None (The server writes responses directly to the http.ResponseWriter)\n\nMethods:\n- upTown: Handles requests to the root path (\"/\") and writes \"doggy doggy doggy\" to the response\n- youUp: Handles requests to the \"/cat/\" path and writes \"catty catty catty\" to the response\n- main: Registers the route handlers and starts the HTTP server on port 9000",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc upTown(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"doggy doggy doggy\")\n}\n\nfunc youUp(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc upTown(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprint(w, \"doggy doggy doggy\")\n}\n\nfunc youUp(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprint(w, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a Go HTTP server that serves PNG images generated by a package function.\n\nFunction Description: The main function sets up a basic HTTP server that responds to requests at the root path (\"/\") by generating a PNG image using an external package function and serving it with the correct content type.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the http.ResponseWriter and *http.Request parameters in the handler function)\n\nOutput: None (The function doesn't return any value but serves HTTP responses with PNG image data)",
    "Canonical_solution": "import (\n    \"fmt\"\n    \"net/http\"\n    \"io\"\n    \"bytes\"\n    \"davidhampgonsalves/lifedashboard/pkg\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        png := pkg.Generate();\n        w.Header().Set(\"Content-Type\", \"image/png\")\n        io.Copy(w, bytes.NewBuffer(png))\n    })\n\n    fmt.Println(\"Server listening on http://localhost:8080\")\n    http.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\timg := image.NewRGBA(image.Rect(0, 0, 200, 200))\n\t\tfor y := 0; y < 200; y++ {\n\t\t\tfor x := 0; x < 200; x++ {\n\t\t\t\timg.Set(x, y, color.RGBA{0, 255, 0, 255})\n\t\t\t}\n\t\t}\n\t\tw.Header().Set(\"Content-Type\", \"image/png\")\n\t\tpng.Encode(w, img)\n\t})\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebDAV requests with custom logging and special handling for certain Litmus test cases.\n\nFunction Description: The main function sets up a WebDAV server with in-memory storage (MemFS) and in-memory locking (MemLS). It includes custom logging for WebDAV operations and special handling for a specific Litmus test case (\"props: 3 (propfind_invalid2)\"). The server listens on a specified port and handles all incoming HTTP requests.\n\nInput: None (though the code uses a command-line flag for port configuration which would be handled by the flag package)\n\nOutput: None (the function runs indefinitely as a server, but may log errors or fatal conditions)\n\nNote: The actual implementation shows the server uses a port flag (not shown in parameters) and produces log output, but these are side effects rather than formal outputs.\n\n---\n\nFor completeness, if we were to describe the webdav.Handler struct being used (though not explicitly defined in this code):\n\nStruct Description: webdav.Handler is a struct from golang.org/x/net/webdav that implements http.Handler for WebDAV protocol operations.\n\nFields:\nFileSystem: webdav.FileSystem - The underlying file system implementation\nLockSystem: webdav.LockSystem - The locking system implementation\nLogger: func(*http.Request, error) - Optional function for logging requests and errors\n\nMethods:\nServeHTTP: ServeHTTP(http.ResponseWriter, *http.Request) -> None - Main handler method that processes HTTP requests according to WebDAV protocol",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"golang.org/x/net/webdav\"\n)\n\nfunc main() {\n\tport := flag.Int(\"port\", 8080, \"Port to listen on\")\n\tflag.Parse()\n\n\tfs := webdav.NewMemFS()\n\tls := webdav.NewMemLS()\n\n\tdavHandler := &webdav.Handler{\n\t\tFileSystem: fs,\n\t\tLockSystem: ls,\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlog.Printf(\"WebDAV [%s] %s: %v\", r.Method, r.URL.Path, err)\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"PROPFIND\" && r.URL.Path == \"/propfind_invalid2\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdavHandler.ServeHTTP(w, r)\n\t}))\n\n\tlog.Printf(\"Starting server on port %d\", *port)\n\tif err := http.ListenAndServe(\":\"+strconv.Itoa(*port), nil); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Implement a Certificate Authority (CA) service in Go using the Chi router for HTTP routing, supporting both secure and insecure servers, with background jobs and proper shutdown handling.\n\nStruct Description: The CA struct represents a Certificate Authority service that manages HTTP servers (secure and insecure), configuration, authentication, and background tasks.\n\nFields:\n\nauth: [*authority.Authority] - The authority component handling certificate operations  \nconfig: [*config.Config] - Configuration settings for the CA service  \nsrv: [*server.Server] - The main secure HTTP server  \ninsecureSrv: [*server.Server] - Optional insecure HTTP server for certain endpoints  \nmetricsSrv: [*server.Server] - Optional metrics server  \nopts: [*options] - Additional service options  \nrenewer: [*TLSRenewer] - Component handling TLS certificate renewal  \ncompactStop: [chan struct{}] - Channel for stopping the background compaction job  \n\nMethods:\n\nInit: [func(cfg *config.Config) (*CA, error)] - Initializes the CA service with configuration, sets up routers, and prepares servers  \nRun: [func() error] - Starts all servers and background jobs, handles graceful shutdown on errors  \nshouldServeInsecureServer: [func() bool] - (implied private method) Determines if insecure server should be started  \nrunCompactJob: [func()] - (implied private method) Runs background compaction task  \nStop: [func() error] - (implied method) Handles service shutdown and cleanup",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n)\n\ntype CA struct {\n\tauth        *authority.Authority\n\tconfig      *config.Config\n\tsrv         *server.Server\n\tinsecureSrv *server.Server\n\tmetricsSrv  *server.Server\n\topts        *options\n\trenewer     *TLSRenewer\n\tcompactStop chan struct{}\n}\n\nfunc (ca *CA) Init(cfg *config.Config) (*CA, error) {\n\tmux := chi.NewRouter()\n\thandler := http.Handler(mux)\n\n\tinsecureMux := chi.NewRouter()\n\tinsecureHandler := http.Handler(insecureMux)\n\n\tmux.Use(middleware.GetHead)\n\tinsecureMux.Use(middleware.GetHead)\n\n\tapi.Route(mux)\n\tmux.Route(\"/1.0\", func(r chi.Router) {\n\t\tapi.Route(r)\n\t})\n\n\tinsecureMux.Get(\"/crl\", api.CRL)\n\tinsecureMux.Get(\"/1.0/crl\", api.CRL)\n\n\tbaseContext := buildContext(auth, scepAuthority, acmeDB, acmeLinker)\n\n\tca.srv = server.New(cfg.Address, handler, tlsConfig)\n\tca.srv.BaseContext = func(net.Listener) context.Context {\n\t\treturn baseContext\n\t}\n\n\tif ca.shouldServeInsecureServer() {\n\t\tca.insecureSrv = server.New(cfg.InsecureAddress, insecureHandler, nil)\n\t\tca.insecureSrv.BaseContext = func(net.Listener) context.Context {\n\t\t\treturn baseContext\n\t\t}\n\t}\n\n\treturn ca, nil\n}\n\nfunc (ca *CA) Run() error {\n\tvar wg sync.WaitGroup\n\terrs := make(chan error, 1)\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tca.runCompactJob()\n\t}()\n\n\tif ca.insecureSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.insecureSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\tif ca.metricsSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.metricsSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terrs <- ca.srv.ListenAndServe()\n\t}()\n\n\terr := <-errs\n\n\tif !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Println(\"shutting down due to startup error ...\")\n\t\tif stopErr := ca.Stop(); stopErr != nil {\n\t\t\terr = fmt.Errorf(\"failed stopping CA after error occurred: %w: %w\", err, stopErr)\n\t\t} else {\n\t\t\terr = fmt.Errorf(\"stopped CA after error occurred: %w\", err)\n\t\t}\n\t}\n\n\twg.Wait()\n\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 108,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n)\n\ntype CA struct {\n\tauth           *authority.Authority\n\tconfig         *config.Config\n\tsrv            *server.Server\n\tinsecureSrv    *server.Server\n\tmetricsSrv     *server.Server\n\topts           *options\n\trenewer        *TLSRenewer\n\tcompactStop    chan struct{}\n}\n\nfunc Init(cfg *config.Config) (*CA, error) {\n\tca := &CA{\n\t\tconfig:      cfg,\n\t\tcompactStop: make(chan struct{}),\n\t}\n\n\t// Setup secure server\n\tca.srv = server.New()\n\tsecureRouter := chi.NewRouter()\n\tsecureRouter.Use(middleware.Logger, middleware.Recoverer)\n\t// Register secure routes (example)\n\tsecureRouter.Post(\"/issue\", ca.issueCertHandler)\n\tsecureRouter.Get(\"/health\", ca.healthHandler)\n\tca.srv.Handler = secureRouter\n\n\t// Setup insecure server if needed\n\tif ca.shouldServeInsecureServer() {\n\t\tca.insecureSrv = server.New()\n\t\tinsecureRouter := chi.NewRouter()\n\t\t// Register insecure routes (example)\n\t\tinsecureRouter.Get(\"/acme\", ca.acmeChallengeHandler)\n\t\tca.insecureSrv.Handler = insecureRouter\n\t}\n\n\t// Setup metrics server if needed\n\tif cfg.MetricsEnabled {\n\t\tca.metricsSrv = server.New()\n\t\tmetricsRouter := chi.NewRouter()\n\t\t// Register metrics routes (example)\n\t\tmetricsRouter.Get(\"/metrics\", ca.metricsHandler)\n\t\tca.metricsSrv.Handler = metricsRouter\n\t}\n\n\t// Initialize TLS renewer\n\tvar err error\n\tca.renewer, err = NewTLSRenewer(ca.auth, cfg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := ca.renewer.Start(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn ca, nil\n}\n\nfunc (ca *CA) Run() error {\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)\n\n\tvar wg sync.WaitGroup\n\terrChan := make(chan error, 3)\n\n\tstartServer := func(srv *server.Server, name string) {\n\t\tif srv == nil {\n\t\t\treturn\n\t\t}\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tlog.Printf(\"Starting %s server\", name)\n\t\t\tif err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\terrChan <- fmt.Errorf(\"%s server error: %w\", name, err)\n\t\t\t}\n\t\t}()\n\t}\n\n\tstartServer(ca.srv, \"secure\")\n\tstartServer(ca.insecureSrv, \"insecure\")\n\tstartServer(ca.metricsSrv, \"metrics\")\n\n\t// Start background compaction job\n\tgo ca.runCompactJob()\n\n\tvar err error\n\tselect {\n\tcase err = <-errChan:\n\t\tlog.Printf(\"Received error: %v\", err)\n\tcase <-sigChan:\n\t\tlog.Println(\"Received shutdown signal\")\n\t}\n\n\tca.Stop()\n\n\twg.Wait()\n\treturn err\n}\n\nfunc (ca *CA) Stop() error {\n\tvar errs []error\n\n\tshutdown := func(srv *server.Server) {\n\t\tif srv != nil {\n\t\t\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t\t\tdefer cancel()\n\t\t\tif err := srv.Shutdown(ctx); err != nil {\n\t\t\t\terrs = append(errs, err)\n\t\t\t}\n\t\t}\n\t}\n\n\tshutdown(ca.srv)\n\tshutdown(ca.insecureSrv)\n\tshutdown(ca.metricsSrv)\n\n\tclose(ca.compactStop)\n\n\tif ca.renewer != nil {\n\t\tca.renewer.Stop()\n\t}\n\n\tif len(errs) > 0 {\n\t\treturn fmt.Errorf(\"errors during shutdown: %v\", errs)\n\t}\n\treturn nil\n}\n\nfunc (ca *CA) shouldServeInsecureServer() bool {\n\treturn ca.config.InsecureServerEnabled\n}\n\nfunc (ca *CA) runCompactJob() {\n\tticker := time.NewTicker(24 * time.Hour)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tlog.Println(\"Running compaction job\")\n\t\t\tca.auth.Compact()\n\t\tcase <-ca.compactStop:\n\t\t\tlog.Println(\"Stopping compaction job\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (ca *CA) issueCertHandler(w http.ResponseWriter, r *http.Request) {\n\t// Implementation\n}\n\nfunc (ca *CA) healthHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"OK\"))\n}\n\nfunc (ca *CA) acmeChallengeHandler(w http.ResponseWriter, r *http.Request) {\n\t// Implementation\n}\n\nfunc (ca *CA) metricsHandler(w http.ResponseWriter, r *http.Request) {\n\t// Implementation\n}"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes middleware for request logging and rate limiting using Sentinel. The server should handle a GET request at the \"/test\" endpoint.\n\nFunction Description: The function sets up an Echo HTTP server with middleware for logging and rate limiting. The rate limiting is implemented using Sentinel middleware, which extracts the client's real IP from the request headers and applies a block fallback response when the rate limit is exceeded. The server listens on port 1323.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 1323.)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\nfunc Example() {\n\tr := echo.New()\n\tr.Use(middleware.Logger())\n\tr.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx echo.Context) string {\n\t\t\t\tif res, ok := ctx.Get(\"X-Real-IP\").(string); ok {\n\t\t\t\t\treturn res\n\t\t\t\t}\n\t\t\t\treturn \"\"\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx echo.Context) error {\n\t\t\t\treturn ctx.JSON(400, map[string]interface{}{\n\t\t\t\t\t\"err\":  \"too many requests; the quota used up\",\n\t\t\t\t\t\"code\": 10222,\n\t\t\t\t})\n\t\t\t}),\n\t\t),\n\t)\n\n\tr.GET(\"/test\", func(c echo.Context) error {\n\t\treturn nil\n\t})\n\tr.Logger.Fatal(r.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/core/base\"\n\t\"github.com/alibaba/sentinel-golang/core/config\"\n\t\"github.com/alibaba/sentinel-golang/ext/hotspot\"\n\t\"github.com/labstack/echo/v4\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tconf := config.NewDefaultConfig()\n\tconf.App.Name = \"echo-server\"\n\tif err := api.InitWithConfig(conf); err != nil {\n\t\tlog.Fatalf(\"Sentinel init failed: %v\", err)\n\t}\n\n\t_, err := hotspot.LoadRules([]*hotspot.Rule{\n\t\t{\n\t\t\tResource:        \"test-endpoint\",\n\t\t\tMetricType:      hotspot.QPS,\n\t\t\tControlBehavior: hotspot.Reject,\n\t\t\tParamIndex:      0,\n\t\t\tThreshold:       5,\n\t\t\tDurationInSec:   1,\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load hotspot rules: %v\", err)\n\t}\n\n\te := echo.New()\n\n\te.Use(echo.Logger())\n\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tip := c.RealIP()\n\t\t\tentry, err := api.Entry(\"test-endpoint\", base.WithArgs(ip))\n\t\t\tif err != nil {\n\t\t\t\treturn c.String(http.StatusTooManyRequests, \"Too many requests\")\n\t\t\t}\n\t\t\tdefer entry.Exit()\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\te.GET(\"/test\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Test endpoint\")\n\t})\n\n\tif err := e.Start(\":1323\"); err != nil {\n\t\tlog.Fatalf(\"Server start failed: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes route handling, middleware integration, and JWT-based authentication for restricted routes.\n\nFunction Description: The main function initializes an Echo server, configures middleware (logger and recovery), sets up routes for login and accessible content, and creates a restricted route group with JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger route handlers)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately as they're referenced but not shown in the provided code.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tr.Use(middleware.JWT([]byte(\"secret\")))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", loginHandler)\n\te.GET(\"/accessible\", accessibleHandler)\n\n\trestricted := e.Group(\"/restricted\")\n\trestricted.Use(middleware.JWT([]byte(\"secret-key\")))\n\trestricted.GET(\"/profile\", restrictedHandler)\n\n\te.Start(\":1323\")\n}\n\nfunc loginHandler(c echo.Context) error {\n\treturn nil\n}\n\nfunc accessibleHandler(c echo.Context) error {\n\treturn nil\n}\n\nfunc restrictedHandler(c echo.Context) error {\n\treturn nil\n}"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server using the Echo framework in Go, with basic middleware and a simple route handler.\n\nFunction Description: The function `StartHTTPServer` initializes a new Echo instance, adds logger and recovery middleware, registers a GET route handler for the root path (\"/\"), and starts the HTTP server on the specified address.\n\nInput:  \n- `address` (string): The network address (e.g., \":8080\") on which the HTTP server should listen.\n\nOutput:  \n- `error`: Returns an error if the server fails to start; otherwise, it blocks until the server is stopped.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\treturn e.Start(address)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\treturn e.Start(address)\n}"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that streams JSON-encoded location data with a delay between each transmission.\n\nFunction Description: The main function initializes an Echo server, sets up a GET route handler at the root path (\"/\") that streams location data as JSON with a 1-second delay between each location. The response uses proper HTTP headers for JSON content type and flushes after each location is sent.\n\nInput: None (The function takes no direct input parameters, but relies on a predefined 'locations' collection that should be available in scope)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"encoding/json\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\t\tfor _, l := range locations {\n\t\t\tif err := json.NewEncoder(c.Response()).Encode(l); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nvar locations = []map[string]interface{}{\n\t{\"id\": 1, \"name\": \"New York\", \"latitude\": 40.7128, \"longitude\": -74.0060},\n\t{\"id\": 2, \"name\": \"Los Angeles\", \"latitude\": 34.0522, \"longitude\": -118.2437},\n\t{\"id\": 3, \"name\": \"Chicago\", \"latitude\": 41.8781, \"longitude\": -87.6298},\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(\"Content-Type\", \"application/json\")\n\t\tfor _, loc := range locations {\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tdata, _ := json.Marshal(loc)\n\t\t\tc.Response().Write(data)\n\t\t\tc.Response().Write([]byte(\"\\n\"))\n\t\t\tc.Response().Flush()\n\t\t}\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various routes with authentication middleware and serves different endpoints for application management.\n\nFunction Description: The `serve` function initializes and starts an HTTP server using the Echo framework. It sets up route handlers for various endpoints related to application management, including upload, installation, renaming, and deletion of apps. The function also implements authentication middleware (BasicAuth and KeyAuth) to secure certain endpoints. The server runs on the specified host and port.\n\nInput: \n- `host` (string): The host address where the server will run (e.g., \"localhost\" or \"0.0.0.0\")\n- `port` (uint64): The port number on which the server will listen (e.g., 8080)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error, at which point it logs the error and exits)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\n\tforcedBasicAuth := middleware.BasicAuth(func(username string, password string, c echo.Context) (bool, error) {\n\t\treturn username == config.Current.BasicAuth.Username && password == config.Current.BasicAuth.Password, nil\n\t})\n\tbasicAuth := func(f echo.HandlerFunc) echo.HandlerFunc {\n\t\tif config.Current.BasicAuth.Enable {\n\t\t\treturn forcedBasicAuth(f)\n\t\t} else {\n\t\t\treturn f\n\t\t}\n\t}\n\tworkflowKeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == config.Current.BuilderKey, nil\n\t})\n\n\te.GET(\"/\", renderIndex, basicAuth)\n\te.GET(\"/favicon.png\", getFavIcon, basicAuth)\n\te.POST(\"/apps\", uploadUnsignedApp, basicAuth)\n\te.GET(\"/apps/:id/install\", appResolver(renderInstall))\n\te.GET(\"/apps/:id/manifest\", appResolver(getManifest))\n\te.GET(\"/apps/:id/resign\", appResolver(resignApp), basicAuth)\n\te.GET(\"/apps/:id/delete\", appResolver(deleteApp), basicAuth)\n\te.GET(\"/apps/:id/rename\", appResolver(renderRenameApp), basicAuth)\n\te.POST(\"/apps/:id/rename\", appResolver(renameApp), basicAuth)\n\te.GET(\"/apps/:id/2fa\", appResolver(render2FAPage), basicAuth)\n\te.POST(\"/apps/:id/2fa\", appResolver(set2FA), basicAuth)\n\te.GET(\"/jobs\", getLastJob, workflowKeyAuth)\n\te.GET(\"/jobs/:id/2fa\", jobResolver(get2FA), workflowKeyAuth)\n\te.POST(\"/jobs/:id/signed\", jobResolver(uploadSignedApp), workflowKeyAuth)\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\n\tbasicAuth := middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\t\tif username == \"admin\" && password == \"password\" {\n\t\t\treturn true, nil\n\t\t}\n\t\treturn false, echo.ErrUnauthorized\n\t})\n\n\tkeyAuth := middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\tif key == \"secret123\" {\n\t\t\treturn true, nil\n\t\t}\n\t\treturn false, echo.ErrUnauthorized\n\t})\n\n\te.POST(\"/upload\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Uploading app...\")\n\t}, basicAuth, keyAuth)\n\n\te.POST(\"/install\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Installing app...\")\n\t}, basicAuth, keyAuth)\n\n\te.POST(\"/rename\", func(c echo.Context) error {\n\t\tnewName := c.FormValue(\"name\")\n\t\treturn c.String(http.StatusOK, \"Renamed app to \"+newName)\n\t}, basicAuth, keyAuth)\n\n\te.POST(\"/delete\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Deleted app\")\n\t}, basicAuth, keyAuth)\n\n\taddr := host + \":\" + strconv.FormatUint(port, 10)\n\tif err := e.Start(addr); err != nil {\n\t\tlog.Fatalf(\"Server failed: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves basic server information and runs on a configurable address.\n\nFunction Description: The main function initializes an Echo HTTP server, configures middleware for logging and compression, sets up a route handler for server information, and starts the server on the specified address.\n\nInput: \n- Command-line argument (optional): \"--addr\" to specify the server address (default: \"127.0.0.1:9090\")\n\nOutput: \n- Running HTTP server that responds to GET requests at \"/serverinfo\" with server hostname and address\n- No explicit return value (runs indefinitely until interrupted)\n\nNote: The reference code shows a complete implementation at the package level (main function) rather than a standalone function or struct level. The instruction follows the function-level format as the code primarily demonstrates functional behavior through the main function.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo\"\n\tmd \"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:9090\", \"addr for backend\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\tserver := echo.New()\n\tserver.Use(md.Logger())\n\tserver.Use(md.Gzip())\n\n\tserver.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thostname, _ := os.Hostname()\n\t\treturn c.String(http.StatusOK, hostname+\"\\n\"+*addr)\n\t})\n\n\tserver.Start(*addr)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\taddr := flag.String(\"addr\", \"127.0.0.1:9090\", \"server address\")\n\tflag.Parse()\n\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thostname, err := os.Hostname()\n\t\tif err != nil {\n\t\t\treturn c.String(http.StatusInternalServerError, \"Error getting hostname\")\n\t\t}\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"hostname\": hostname,\n\t\t\t\"address\":  *addr,\n\t\t})\n\t})\n\n\tgo func() {\n\t\tif err := e.Start(*addr); err != nil && err != http.ErrServerClosed {\n\t\t\te.Logger.Fatal(\"server start error:\", err)\n\t\t}\n\t}()\n\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\t<-quit\n\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tif err := e.Shutdown(ctx); err != nil {\n\t\te.Logger.Fatal(\"server shutdown error:\", err)\n\t}\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests on two different endpoints (\"/request\" and \"/stream\") and serves over HTTPS.\n\nFunction Description: The main function initializes an Echo server instance, registers route handlers for two GET endpoints, and starts an HTTPS server using provided TLS certificate files.\n\nInput: None (The function takes no direct input parameters, but relies on external TLS certificate files \"cert.pem\" and \"key.pem\")\n\nOutput: None (The function doesn't return anything but starts a persistent HTTP server process)\n\nNote: The actual route handler functions (request and stream) would need to be implemented separately to handle the respective endpoints. The server will run indefinitely until interrupted, listening on port 1323 with TLS encryption.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/request\", request)\n\te.GET(\"/stream\", stream)\n\te.Logger.Fatal(e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/gommon/log\"\n)\n\nfunc requestHandler(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Request endpoint\")\n}\n\nfunc streamHandler(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Stream endpoint\")\n}\n\nfunc main() {\n\te := echo.New()\n\te.Logger.SetLevel(log.ERROR)\n\te.GET(\"/request\", requestHandler)\n\te.GET(\"/stream\", streamHandler)\n\te.Logger.Fatal(e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"))\n}"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server using the Echo framework, supporting both HTTP/2 and HTTPS configurations, with customizable timeouts and root path handling.\n\nStruct Description: The Api struct represents an HTTP server configuration with support for TLS, HTTP/2, and customizable timeouts. It provides methods to start and stop the server gracefully.\n\nFields:\nport: int - The port number on which the server will listen\nbindIp: string - The IP address to bind the server to\ntlsCertFile: string - Path to TLS certificate file (empty for non-HTTPS)\ntlsKeyFile: string - Path to TLS private key file (empty for non-HTTPS)\ntimeout: time.Duration - Server timeout duration for read/write operations\nrootPath: string - The root path for the server's default route\nsrv: *echo.Echo - The Echo server instance\n\nMethods:\nStart: () -> error - Initializes and starts the HTTP server in a goroutine, supporting both TLS and HTTP/2 configurations. Returns nil on successful startup.\nStop: (ctx context.Context) -> error - Gracefully shuts down the server using the provided context. Returns any error that occurs during shutdown.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"golang.org/x/net/http2\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.HideBanner = true\n\ta.srv.HidePort = true\n\ta.srv.Server.ReadTimeout = a.timeout\n\ta.srv.Server.IdleTimeout = a.timeout\n\ta.srv.Server.WriteTimeout = a.timeout + a.timeout\n\n\ta.srv.GET(\n\t\ta.rootPath,\n\t\tfunc(c echo.Context) error {\n\t\t\treturn c.HTML(http.StatusOK, `Hey, Gotenberg has no UI, it's an API. Head to the <a href=\"https://gotenberg.dev\">documentation</a> to learn how to interact with it \ud83d\ude80`)\n\t\t},\n\t)\n\n\tgo func() {\n\t\tvar err error\n\t\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\t\terr = a.srv.StartTLS(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), a.tlsCertFile, a.tlsKeyFile)\n\t\t} else {\n\t\t\tserver := &http2.Server{}\n\t\t\terr = a.srv.StartH2CServer(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), server)\n\t\t}\n\t\tif !errors.Is(err, http.ErrServerClosed) {\n\t\t\ta.logger.Fatal(err.Error())\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Shutdown(ctx)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\tif (a.tlsCertFile != \"\" || a.tlsKeyFile != \"\") && (a.tlsCertFile == \"\" || a.tlsKeyFile == \"\") {\n\t\treturn fmt.Errorf(\"both TLS certificate and key files must be provided\")\n\t}\n\n\te := echo.New()\n\ta.srv = e\n\n\tsrv := e.Server\n\tsrv.ReadTimeout = a.timeout\n\tsrv.WriteTimeout = a.timeout\n\n\te.GET(a.rootPath, func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"OK\")\n\t})\n\n\taddr := fmt.Sprintf(\"%s:%d\", a.bindIp, a.port)\n\n\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\tgo func() {\n\t\t\te.StartTLS(addr, a.tlsCertFile, a.tlsKeyFile)\n\t\t}()\n\t} else {\n\t\tgo func() {\n\t\t\te.Start(addr)\n\t\t}()\n\t}\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\tif a.srv == nil {\n\t\treturn nil\n\t}\n\treturn a.srv.Shutdown(ctx)\n}"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic requests and includes middleware for processing statistics.\n\nStruct Description: The Stats struct is used to track and handle statistics for HTTP requests processed by the server.\n\nFields:\n- Count: [int] - Tracks the number of requests processed\n- StartTime: [time.Time] - Records the time when the server started processing requests\n\nMethods:\n- Process: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that increments the request count for each processed request\n- Handle: [func(c echo.Context) error] -> [error] - Handler function that returns the current statistics (request count and uptime) in JSON format\n- NewStats: [func() *Stats] -> [*Stats] - Constructor function that initializes a new Stats instance with default values\n\nAdditional Functions:\n- ServerHeader: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that adds a Server header to responses\n- main: [func()] -> [None] - Entry point that creates the Echo server, registers routes and middleware, and starts the server on port 1323",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Debug = true\n\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle)\n\n\te.Use(ServerHeader)\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype Stats struct {\n\tCount     int\n\tStartTime time.Time\n}\n\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ts.Count++\n\t\treturn next(c)\n\t}\n}\n\nfunc (s *Stats) Handle(c echo.Context) error {\n\tuptime := time.Since(s.StartTime).Seconds()\n\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\"count\":   s.Count,\n\t\t\"uptime\":  uptime,\n\t})\n}\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tCount:     0,\n\t\tStartTime: time.Now(),\n\t}\n}\n\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(\"Server\", \"Echo-Server\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\tstats := NewStats()\n\n\te.Use(stats.Process)\n\te.Use(ServerHeader)\n\n\te.GET(\"/stats\", stats.Handle)\n\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests and serves HTML content with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The main function initializes an Echo server, configures middleware for recovery and logging, sets up a route handler for the root path (\"/\") that returns HTML content, and starts the server with automatic TLS on port 443.\n\nInput: None (The function takes no explicit input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(200, \"<html><body><h1>Welcome</h1><p>Secure server powered by Echo</p></body></html>\")\n\t})\n\te.AutoTLSManager = &echo.AutoTLSManager{\n\t\tHostPolicy: func(ctx echo.Context) bool {\n\t\t\treturn ctx.Request().Host == \"example.com\"\n\t\t},\n\t\tCache: autocert.DirCache(\"/var/www/.cache\"),\n\t}\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}"
  }
]