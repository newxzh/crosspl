[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Implement a Go struct that represents a Docker registry repository client, capable of interacting with Docker registry API v2 to manage blobs, manifests, and tags.\n\nStruct Description: The `repository` struct serves as a client for interacting with a Docker registry's repository, providing methods to access blob storage, manifests, and tag services. It maintains HTTP client configuration and URL building capabilities.\n\nFields:\n- client: *http.Client - Custom HTTP client configured with transport and redirect handling\n- ub: *v2.URLBuilder - URL builder for constructing registry API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Named() -> reference.Named - Returns the named reference of the repository\n- Blobs(context.Context) -> distribution.BlobStore - Returns a BlobStore for managing repository blobs\n- Manifests(context.Context, ...distribution.ManifestServiceOption) -> (distribution.ManifestService, error) - Returns a ManifestService for managing repository manifests\n- Tags(context.Context) -> distribution.TagService - Returns a TagService for managing repository tags\n\nTask Description: Implement a Go struct that represents a tag service for a Docker registry repository, capable of retrieving tag information from a Docker registry API v2.\n\nStruct Description: The `tags` struct provides tag-related operations for a Docker repository, implementing the distribution.TagService interface. It uses HTTP requests to interact with the registry's tag API endpoints.\n\nFields:\n- client: *http.Client - HTTP client for making requests to the registry\n- ub: *v2.URLBuilder - URL builder for constructing tag-related API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Get(context.Context, string) -> (distribution.Descriptor, error) - Retrieves the descriptor for a specific tag, making HEAD and GET requests as needed to the registry API",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/distribution/reference\"\n\t\"github.com/docker/distribution\"\n\tv2 \"github.com/docker/distribution/registry/api/v2\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc NewRepository(name reference.Named, baseURL string, transport http.RoundTripper) (distribution.Repository, error) {\n\tub, err := v2.NewURLBuilderFromString(baseURL, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:     transport,\n\t\tCheckRedirect: checkHTTPRedirect,\n\t}\n\n\treturn &repository{\n\t\tclient: client,\n\t\tub:     ub,\n\t\tname:   name,\n\t}, nil\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\tstatter := &blobStatter{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t}\n\treturn &blobs{\n\t\tname:    r.name,\n\t\tub:      r.ub,\n\t\tclient:  r.client,\n\t\tstatter: statter,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t\tetags:  make(map[string]string),\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.Named(),\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\tref, err := reference.WithTag(t.name, tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tu, err := t.ub.BuildManifestURL(ref)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tnewRequest := func(method string) (*http.Response, error) {\n\t\treq, err := http.NewRequest(method, u, nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tfor _, t := range distribution.ManifestMediaTypes() {\n\t\t\treq.Header.Add(\"Accept\", t)\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\treturn resp, err\n\t}\n\n\tresp, err := newRequest(\"HEAD\")\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tswitch {\n\tcase resp.StatusCode >= 200 && resp.StatusCode < 400 && len(resp.Header.Get(\"Docker-Content-Digest\")) > 0:\n\t\treturn descriptorFromResponse(resp)\n\tdefault:\n\t\tresp, err = newRequest(\"GET\")\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\treturn descriptorFromResponse(resp)\n\t\t}\n\t\treturn distribution.Descriptor{}, HandleErrorResponse(resp)\n\t}\n}\n\nfunc descriptorFromResponse(response *http.Response) (distribution.Descriptor, error) {\n\tdesc := distribution.Descriptor{}\n\theaders := response.Header\n\n\tctHeader := headers.Get(\"Content-Type\")\n\tif ctHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Type header\")\n\t}\n\tdesc.MediaType = ctHeader\n\n\tdigestHeader := headers.Get(\"Docker-Content-Digest\")\n\tif digestHeader == \"\" {\n\t\tbytes, err := ioutil.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\t_, desc, err := distribution.UnmarshalManifest(ctHeader, bytes)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn desc, nil\n\t}\n\n\tdgst, err := digest.Parse(digestHeader)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Digest = dgst\n\n\tlengthHeader := headers.Get(\"Content-Length\")\n\tif lengthHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Length header\")\n\t}\n\tlength, err := strconv.ParseInt(lengthHeader, 10, 64)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Size = length\n\n\treturn desc, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\treturn &blobs.BlobStore{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, opts ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests.ManifestService{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags.Tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\ntype Tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *Tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\turl := t.ub.TagURL(t.name, tag)\n\treq, err := http.NewRequest(\"HEAD\", url, nil)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tresp, err := t.client.Do(req)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == http.StatusNotFound {\n\t\treq, err := http.NewRequest(\"GET\", url, nil)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\t// Parse manifest and extract digest\n\t\t// This is a simplified example; actual parsing would be required\n\t}\n\tdigest := resp.Header.Get(\"Docker-Content-Digest\")\n\tif digest == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"no digest in response\")\n\t}\n\treturn distribution.Descriptor{Digest: digest}, nil\n}\n```"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a Go HTTP client struct that can make authenticated API requests with custom headers and handle responses, including error status codes.\n\nStruct Description: The Client struct represents an HTTP client with authentication credentials and endpoint configuration, capable of making various HTTP requests and processing responses.\n\nFields:\nUser: string - The username for basic authentication\nApiKey: string - The API key or password for basic authentication\nEndpoint: string - The base URL for API endpoints\n\nMethods:\nisOkStatus: [Name](code int) -> bool - Checks if the HTTP status code indicates a successful response (200, 201, 204 return true; 400, 404, 500, 409, 406 return false)\nnewRequest: [Name](method string, uri string, body interface{}) -> ([]byte, error) - Creates and executes an HTTP request with the given method, URI, and optional body. Returns the response body or an error if the request fails or returns a non-success status code. Automatically adds basic authentication headers.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tUser     string\n\tApiKey   string\n\tEndpoint string\n}\n\nfunc (c *Client) isOkStatus(code int) bool {\n\tcodes := map[int]bool{\n\t\t200: true,\n\t\t201: true,\n\t\t204: true,\n\t\t400: false,\n\t\t404: false,\n\t\t500: false,\n\t\t409: false,\n\t\t406: false,\n\t}\n\n\treturn codes[code]\n}\n\nfunc (c *Client) newRequest(method, uri string, body interface{}) ([]byte, error) {\n\tvar (\n\t\tclient = &http.Client{}\n\t\turl    = fmt.Sprintf(\"%s/%s\", c.Endpoint, uri)\n\t\terr    error\n\t\treq    *http.Request\n\t)\n\n\tif body != nil {\n\t\tbodyJSON, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq, err = http.NewRequest(method, url, bytes.NewBuffer(bodyJSON))\n\t} else {\n\t\treq, err = http.NewRequest(method, url, nil)\n\t}\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Error with request: %v - %q\", url, err)\n\t}\n\n\treq.SetBasicAuth(c.User, c.ApiKey)\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif !c.isOkStatus(resp.StatusCode) {\n\t\ttype apiErr struct {\n\t\t\tErr string `json:\"error\"`\n\t\t}\n\t\tvar outErr apiErr\n\t\tjson.Unmarshal(data, &outErr)\n\t\treturn nil, fmt.Errorf(\"Error in response: %s\", outErr.Err)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn data, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tUser   string\n\tApiKey string\n\tEndpoint string\n}\n\nfunc (c *Client) isOkStatus(code int) bool {\n\tswitch code {\n\tcase 200, 201, 204:\n\t\treturn true\n\tcase 400, 404, 500, 409, 406:\n\t\treturn false\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc (c *Client) newRequest(method, uri string, body interface{}) ([]byte, error) {\n\tfullURL := c.Endpoint + uri\n\treq, err := http.NewRequest(method, fullURL, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tauth := base64.StdEncoding.EncodeToString([]byte(c.User + \":\" + c.ApiKey))\n\treq.Header.Set(\"Authorization\", \"Basic \"+auth)\n\n\tif body != nil {\n\t\tjsonBody, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq.Body = io.NopCloser(bytes.NewBuffer(jsonBody))\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif !c.isOkStatus(resp.StatusCode) {\n\t\treturn nil, fmt.Errorf(\"non-success status code: %d\", resp.StatusCode)\n\t}\n\n\tbodyBytes, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bodyBytes, nil\n}\n```"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Implement an auto-managed HTTP provider in Go using the Echo framework that can dynamically start/stop an HTTP server with health check capabilities.\n\nStruct Description: AutoManagedProvider is a struct that manages an Echo-based HTTP server with automatic startup/shutdown capabilities and provides health check endpoints.\n\nFields:\n- activeProvider: *echo.Echo - The Echo HTTP server instance\n- activeProviderRunning: bool - Flag indicating if the server is currently running\n- activeProviderTesting: bool - Flag indicating if the server is in testing mode\n- httpClient: *http.Client - HTTP client used for internal communications\n- autoManagePort: int - Port number for the managed HTTP server\n\nMethods:\n- NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider - Constructor that creates a new AutoManagedProvider with configuration\n- UpdateTTL() - Manages the server lifecycle (starts if not running, stops if shutdown)\n- isShutdown() bool - Checks if the server should be shutdown (returns bool)\n- getCurrentNode() interface{} - Returns current node information for health checks (returns interface{})",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyFromEnvironment,\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   5 * time.Second,\n\t\t\tKeepAlive: 5 * time.Second,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          10,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t\tExpectContinueTimeout: 1 * time.Second,\n\t\tMaxConnsPerHost:       10,\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   2 * time.Second,\n\t}\n\n\tp := &AutoManagedProvider{\n\t\thttpClient:            httpClient,\n\t\tautoManagePort:        autoManPort,\n\t\tactiveProviderRunning: false,\n\t}\n\n\treturn p\n}\n\nfunc (p *AutoManagedProvider) UpdateTTL() {\n\tif p.isShutdown() && p.activeProviderRunning {\n\t\tp.activeProvider.Close()\n\t\treturn\n\t}\n\n\tif p.activeProviderRunning {\n\t\treturn\n\t}\n\n\tif !p.activeProviderTesting {\n\t\tp.activeProvider = echo.New()\n\t\tp.activeProvider.HideBanner = true\n\t\tp.activeProvider.GET(\"/_health\", func(context echo.Context) error {\n\t\t\treturn context.JSON(http.StatusOK, p.getCurrentNode())\n\t\t})\n\t}\n\tgo func() {\n\t\tp.activeProviderRunning = true\n\t\tappURI := fmt.Sprintf(\"0.0.0.0:%d\", p.autoManagePort)\n\t\tp.activeProvider.Start(appURI)\n\t\tp.activeProviderRunning = false\n\t}()\n}\n\nfunc (p *AutoManagedProvider) isShutdown() bool {\n\treturn false\n}\n\nfunc (p *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "wrong_result": "```go\ntype AutoManagedProvider struct {\n\tactiveProvider       *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient           *http.Client\n\tautoManagePort       int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\te := echo.New()\n\thttpClient := &http.Client{\n\t\tTimeout: refreshTTL,\n\t}\n\tprovider := &AutoManagedProvider{\n\t\tactiveProvider:       e,\n\t\tactiveProviderRunning: false,\n\t\tactiveProviderTesting: false,\n\t\thttpClient:           httpClient,\n\t\tautoManagePort:       autoManPort,\n\t}\n\tprovider.activeProvider.GET(\"/health\", func(c echo.Context) error {\n\t\tnodeInfo := provider.getCurrentNode()\n\t\treturn c.JSON(http.StatusOK, nodeInfo)\n\t})\n\treturn provider\n}\n\nfunc (p *AutoManagedProvider) UpdateTTL() {\n\tif p.isShutdown() {\n\t\tif p.activeProviderRunning {\n\t\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\t\t\tdefer cancel()\n\t\t\tif err := p.activeProvider.Shutdown(ctx); err != nil {\n\t\t\t\tlog.Println(\"Error shutting down server:\", err)\n\t\t\t}\n\t\t\tp.activeProviderRunning = false\n\t\t}\n\t} else {\n\t\tif !p.activeProviderRunning {\n\t\t\tgo func() {\n\t\t\t\tif err := p.activeProvider.Start(fmt.Sprintf(\":%d\", p.autoManagePort)); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}()\n\t\t\tp.activeProviderRunning = true\n\t\t}\n\t}\n}\n\nfunc (p *AutoManagedProvider) isShutdown() bool {\n\treturn false\n}\n\nfunc (p *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn map[string]interface{}{\n\t\t\"status\":      \"healthy\",\n\t\t\"port\":        p.autoManagePort,\n\t\t\"testing\":     p.activeProviderTesting,\n\t\t\"running\":     p.activeProviderRunning,\n\t}\n}\n```"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server using the Echo framework, which acts as a reverse proxy to route requests to different host servers based on the request's host header.\n\nFunction Description: The function initializes an Echo instance, configures middleware, sets up route handlers, and starts an HTTP server that proxies requests to different Echo instances based on the host header. It maintains a map of hostnames to their corresponding Echo instances for routing purposes.\n\nInput: None (The function takes no parameters but internally uses a map of hostnames to Echo instances)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)\n\n---\n\nTask Description: Create a Go struct that represents a virtual host configuration for an Echo-based HTTP server.\n\nStruct Description: The Host struct represents a virtual host configuration that holds an Echo instance for handling requests to a specific hostname.\n\nFields:\nEcho: *echo.Echo - Pointer to an Echo instance that handles requests for this host\n\nMethods:\nNone (The struct is simple and only holds a reference to an Echo instance)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\thosts := make(map[string]*Host)\n\n\tapi := echo.New()\n\tapi.Use(middleware.Logger())\n\tapi.Use(middleware.Recover())\n\n\thosts[\"api.localhost:1323\"] = &Host{api}\n\n\tapi.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"API\")\n\t})\n\n\te := echo.New()\n\te.Any(\"/*\", func(c echo.Context) (err error) {\n\t\treq := c.Request()\n\t\tres := c.Response()\n\t\thost := hosts[req.Host]\n\n\t\tif host == nil {\n\t\t\terr = echo.ErrNotFound\n\t\t} else {\n\t\t\thost.Echo.ServeHTTP(res, req)\n\t\t}\n\n\t\treturn\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "```go\ntype Host struct {\n\tEcho *echo.Echo\n}\n```"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a function to retrieve metadata and ETag from Google Compute Engine (GCE) metadata server using a custom HTTP client with specific timeout configurations.\n\nFunction Description: The function `getETag` makes an HTTP GET request to the GCE metadata server to fetch metadata value and its associated ETag. It uses a pre-configured HTTP client with custom timeout settings and adds required headers to the request. The function handles various response scenarios including not found errors and non-200 status codes.\n\nInput:\n- suffix [string]: The metadata path suffix to append to the base metadata URL\n\nOutput:\n- value [string]: The retrieved metadata value\n- etag [string]: The ETag header value from the response\n- err [error]: Error object if any error occurs during the request or processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"google.golang.org/cloud/internal\"\n)\n\nvar metaClient = &http.Client{\n\tTransport: &internal.Transport{\n\t\tBase: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   750 * time.Millisecond,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 750 * time.Millisecond,\n\t\t},\n\t},\n}\n\nfunc getETag(suffix string) (value, etag string, err error) {\n\thost := os.Getenv(\"GCE_METADATA_HOST\")\n\tif host == \"\" {\n\t\thost = \"169.254.169.254\"\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\tres, err := metaClient.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc getETag(suffix string) (string, string, error) {\n\turl := \"http://metadata.google.internal/\" + suffix\n\tclient := &http.Client{\n\t\tTimeout: 5 * time.Second,\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treq.Header.Add(\"Metadata-Flavor\", \"Google\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tetag := resp.Header.Get(\"ETag\")\n\treturn string(body), etag, nil\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that initializes and runs a Fiber-based HTTP server with specific routes for job management, while also starting a background engine process.\n\nFunction Description: The function `Run` initializes a Fiber web server with disabled startup messages, sets up three routes for job management (creating new jobs, checking job status, and retrieving jobs), starts a background engine process in a goroutine, and finally starts listening on a specified host and port.\n\nInput: None (uses package-level constants Host and Port for server configuration)\n\nOutput: None (runs indefinitely as a web server, but technically returns an error if the server fails to start)\n\nNote: The function uses package-level constants Host and Port for server configuration and assumes the existence of handler functions NewJob, GetStatus, and GetJob, as well as an Engine function for background processing.",
    "Canonical_solution": "import (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs/\", NewJob)\n\tapp.Get(\"/jobs/status/:id\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\tapp.Listen(Host + \":\" + Port)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "wrong_result": "```go\nfunc Run() error {\n\tapp := fiber.New(fiber.Config{Logger: nil})\n\tapp.Post(\"/jobs\", NewJob)\n\tapp.Get(\"/jobs/:id/status\", GetStatus)\n\tapp.Get(\"/jobs\", GetJob)\n\tgo Engine()\n\treturn app.Listen(fmt.Sprintf(\"%s:%d\", Host, Port))\n}\n```"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Implement a Fiber-based HTTP server in Go that handles Amazon SQS (Simple Queue Service) API requests, including authentication, routing, and various SQS operations.\n\nStruct Description: The SQS struct represents an HTTP server that processes Amazon SQS API requests. It uses Fiber framework for HTTP handling and includes queue management functionality with tenant isolation.\n\nFields:\n\nApp: *fiber.App - Fiber application instance for HTTP server\nqueue: models.Queue - Queue management interface\ntenantManager: models.TenantManager - Tenant management interface\ncfg: config.SQSConfig - Configuration for the SQS server\n\nMethods:\n\nNewSQS: (queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) -> *SQS - Constructor that initializes the SQS server with dependencies and configuration\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nAction: (c *fiber.Ctx) -> error - Main request handler that routes SQS API requests based on X-Amz-Target header\nSendMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessage SQS operation\nSendMessageBatch: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessageBatch SQS operation\nReceiveMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles ReceiveMessage SQS operation\nDeleteMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles DeleteMessage SQS operation\nListQueues: (c *fiber.Ctx, tenantId int64) -> error - Handles ListQueues SQS operation\nGetQueueURL: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueUrl SQS operation\nCreateQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles CreateQueue SQS operation\nGetQueueAttributes: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueAttributes SQS operation\nPurgeQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles PurgeQueue SQS operation\nChangeMessageVisibility: (c *fiber.Ctx, tenantId int64) -> error - Handles ChangeMessageVisibility SQS operation\nerrorHandler: (ctx *fiber.Ctx, err error) -> error - Custom error handler for the Fiber app\nauthMiddleware: (c *fiber.Ctx) -> error - Authentication middleware for tenant validation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/valyala/fasthttp/fasthttpadaptor\"\n)\n\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\ts := &SQS{\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t\tErrorHandler:          s.errorHandler,\n\t\tBodyLimit:             cfg.MaxRequestSize,\n\t})\n\n\tapp.Use(s.authMiddleware)\n\tapp.Post(\"/*\", s.Action)\n\n\ts.App = app\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"SQS Endpoint: http://localhost:%d\\n\", s.cfg.Port)\n\treturn s.App.Listen(fmt.Sprintf(\":%d\", s.cfg.Port))\n}\n\nfunc (s *SQS) Stop() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\tawsMethodHeader, ok := c.GetReqHeaders()[\"X-Amz-Target\"]\n\tif !ok {\n\t\treturn errors.New(\"X-Amz-Target header not found\")\n\t}\n\tawsMethod := awsMethodHeader[0]\n\n\tvar r *http.Request = &http.Request{}\n\tfasthttpadaptor.ConvertRequest(c.Context(), r, false)\n\n\ttenantId := c.Locals(\"tenantId\").(int64)\n\n\tvar rc error\n\tswitch awsMethod {\n\tcase \"AmazonSQS.SendMessage\":\n\t\trc = s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\trc = s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\trc = s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\trc = s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\trc = s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\trc = s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\trc = s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\trc = s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\trc = s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\trc = s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\trc = NewSQSError(400, \"UnsupportedOperation\", fmt.Sprintf(\"SQS method %s not implemented\", awsMethod))\n\t}\n\n\treturn rc\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "wrong_result": "```go\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\tcfg           config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\tapp := fiber.New()\n\ts := &SQS{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\tapp.Use(s.authMiddleware)\n\tapp.Use(s.errorHandler)\n\tapp.All(\"/\", s.Action)\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Listen(s.cfg.Address)\n}\n\nfunc (s *SQS) Stop() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Shutdown()\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\ttenantId := c.Locals(\"tenantId\").(int64)\n\ttarget := c.Get(\"X-Amz-Target\")\n\tswitch target {\n\tcase \"AmazonSQS.SendMessage\":\n\t\treturn s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\treturn s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\treturn s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\treturn s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\treturn s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\treturn s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\treturn s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\treturn s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\treturn s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\treturn s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\treturn c.Status(fiber.StatusNotImplemented).SendString(\"Not Implemented\")\n\t}\n}\n\nfunc (s *SQS) SendMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for SendMessage\n\treturn nil\n}\n\nfunc (s *SQS) SendMessageBatch(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for SendMessageBatch\n\treturn nil\n}\n\nfunc (s *SQS) ReceiveMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for ReceiveMessage\n\treturn nil\n}\n\nfunc (s *SQS) DeleteMessage(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for DeleteMessage\n\treturn nil\n}\n\nfunc (s *SQS) ListQueues(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for ListQueues\n\treturn nil\n}\n\nfunc (s *SQS) GetQueueURL(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for GetQueueUrl\n\treturn nil\n}\n\nfunc (s *SQS) CreateQueue(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for CreateQueue\n\treturn nil\n}\n\nfunc (s *SQS) GetQueueAttributes(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for GetQueueAttributes\n\treturn nil\n}\n\nfunc (s *SQS) PurgeQueue(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for PurgeQueue\n\treturn nil\n}\n\nfunc (s *SQS) ChangeMessageVisibility(c *fiber.Ctx, tenantId int64) error {\n\t// Implementation for ChangeMessageVisibility\n\treturn nil\n}\n\nfunc (s *SQS) errorHandler(c *fiber.Ctx, err error) error {\n\tif e, ok := err.(*fiber.Error); ok {\n\t\treturn c.Status(e.Code).SendString(e.Message)\n\t}\n\treturn c.Status(fiber.StatusInternalServerError).SendString(\"Internal Server Error\")\n}\n\nfunc (s *SQS) authMiddleware(c *fiber.Ctx) error {\n\ttenantIDStr := c.Get(\"X-Tenant-ID\")\n\tif tenantIDStr == \"\" {\n\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Missing tenant ID\")\n\t}\n\ttenantID, err := strconv.ParseInt(tenantIDStr, 10, 64)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).SendString(\"Invalid tenant ID\")\n\t}\n\tvalid, err := s.tenantManager.ValidateTenant(tenantID)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"Tenant validation failed\")\n\t}\n\tif !valid {\n\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Invalid tenant\")\n\t}\n\tc.Locals(\"tenantId\", tenantID)\n\treturn c.Next()\n}\n```"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with configurable settings including middleware, routes, and TLS support.\n\nFunction Description: The function serves as the entry point for starting a Gin-based HTTP server. It initializes the Gin engine with default middleware (Logger and Recovery) and additional custom middleware (CORS, Correlation, Auth, etc.). It registers various route handlers for different endpoints including health checks, metrics, and a home route. The server can be started with or without TLS based on configuration.\n\nInput: \n- None (configuration is read from viper and cobra command context)\n\nOutput: \n- None (runs HTTP server as a blocking operation, panics on error)\n\nMethods:\n- The function itself serves as the main execution method for the cobra.Command's Run field\n\nNote: The function uses global configuration via viper and is designed to work as part of a cobra CLI command structure. It handles server startup errors by panicking, which is appropriate for a main application entry point.\n\n(Strictly following the format with no extra characters)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n)\n\nvar towerCmd = &cobra.Command{\n\tUse:   \"api\",\n\tShort: \"Start beaver api server\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tr := gin.Default()\n\n\t\tr.Use(middleware.Cors())\n\t\tr.Use(middleware.Correlation())\n\t\tr.Use(middleware.Logger())\n\t\tr.Use(middleware.Metric())\n\t\tr.Use(middleware.Auth())\n\n\t\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\t\tc.String(http.StatusNoContent, \"\")\n\t\t})\n\n\t\tr.GET(\"/\", controller.Home)\n\n\t\tr.GET(\"/_health\", controller.Health)\n\n\t\tr.GET(\n\t\t\tviper.GetString(\"app.metrics.prometheus.endpoint\"),\n\t\t\tgin.WrapH(controller.Metrics()),\n\t\t)\n\n\t\tvar runerr error\n\n\t\tif viper.GetBool(\"app.tls.status\") {\n\t\t\trunerr = r.RunTLS(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t\tviper.GetString(\"app.tls.pemPath\"),\n\t\t\t\tviper.GetString(\"app.tls.keyPath\"),\n\t\t\t)\n\t\t} else {\n\t\t\trunerr = r.Run(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t)\n\t\t}\n\n\t\tif runerr != nil {\n\t\t\tpanic(runerr.Error())\n\t\t}\n\t},\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\nfunc(cmd *cobra.Command, args []string) {\n\tengine := gin.Default()\n\tengine.Use(corsMiddleware(), correlationMiddleware(), authMiddleware())\n\tengine.GET(\"/health\", healthCheckHandler)\n\tengine.GET(\"/metrics\", metricsHandler)\n\tengine.GET(\"/\", homeHandler)\n\taddr := viper.GetString(\"server.address\")\n\tif viper.GetBool(\"tls.enabled\") {\n\t\tcert := viper.GetString(\"tls.cert\")\n\t\tkey := viper.GetString(\"tls.key\")\n\t\tif err := engine.RunTLS(addr, cert, key); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t} else {\n\t\tif err := engine.Run(addr); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using Gin framework with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a simple GET route handler, configures automatic TLS certificate management using autocert, and starts the HTTPS server. The server will automatically obtain and renew TLS certificates from Let's Encrypt for specified domains.\n\nInput: None (The function takes no parameters as all configurations are internally defined)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely. It will log.Fatal if there's an error starting the server.)\n\nNote: The function demonstrates a complete setup for a production-ready HTTPS server with automatic certificate management. The domains and cache directory are hardcoded in this example but could be parameterized in a real implementation.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tm := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"example1.com\", \"example2.com\"),\n\t\tCache:      autocert.DirCache(\"/var/www/.cache\"),\n\t}\n\n\tlog.Fatal(autotls.RunWithManager(r, m))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc RunServer() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello, World!\")\n\t})\n\n\tmgr := autocert.Manager{\n\t\tPrompt: autocert.AcceptTOS,\n\t\tCache:  autocert.DirCache(\"certs\"),\n\t\tHostPolicy: func(r *http.Request) (string, error) {\n\t\t\treturn \"example.com\", nil\n\t\t},\n\t}\n\n\tlistener, err := mgr.Listener(\"tcp\", \":443\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tserver := &http.Server{\n\t\tHandler: r,\n\t}\n\n\tif err := server.Serve(listener); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a Go struct representing a Docker registry repository client that can interact with a Docker registry API to manage blobs, manifests, and tags.\n\nStruct Description: The `repository` struct represents a client for interacting with a Docker registry repository. It provides methods to access blob storage, manifests, and tags through the Docker Registry HTTP API V2.\n\nFields:\n- client: *http.Client - Custom HTTP client for making requests to the registry\n- ub: *v2.URLBuilder - URL builder for constructing registry API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Named() -> reference.Named - Returns the named reference of the repository\n- Blobs(context.Context) -> distribution.BlobStore - Returns a BlobStore for managing repository blobs\n- Manifests(context.Context, ...distribution.ManifestServiceOption) -> (distribution.ManifestService, error) - Returns a ManifestService for managing repository manifests\n- Tags(context.Context) -> distribution.TagService - Returns a TagService for managing repository tags\n\nAdditional Struct: `tags` - Handles tag operations for a Docker repository\n\nFields:\n- client: *http.Client - HTTP client for making requests\n- ub: *v2.URLBuilder - URL builder for API endpoints\n- name: reference.Named - Named reference to the repository\n\nMethods:\n- Get(context.Context, string) -> (distribution.Descriptor, error) - Retrieves descriptor information for a specific tag, first trying HEAD request and falling back to GET if needed",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/distribution/reference\"\n\t\"github.com/docker/distribution\"\n\tv2 \"github.com/docker/distribution/registry/api/v2\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n\t\"github.com/opencontainers/go-digest\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc NewRepository(name reference.Named, baseURL string, transport http.RoundTripper) (distribution.Repository, error) {\n\tub, err := v2.NewURLBuilderFromString(baseURL, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:     transport,\n\t\tCheckRedirect: checkHTTPRedirect,\n\t}\n\n\treturn &repository{\n\t\tclient: client,\n\t\tub:     ub,\n\t\tname:   name,\n\t}, nil\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\tstatter := &blobStatter{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t}\n\treturn &blobs{\n\t\tname:    r.name,\n\t\tub:      r.ub,\n\t\tclient:  r.client,\n\t\tstatter: statter,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t\tetags:  make(map[string]string),\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.Named(),\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\tref, err := reference.WithTag(t.name, tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tu, err := t.ub.BuildManifestURL(ref)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tnewRequest := func(method string) (*http.Response, error) {\n\t\treq, err := http.NewRequest(method, u, nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tfor _, t := range distribution.ManifestMediaTypes() {\n\t\t\treq.Header.Add(\"Accept\", t)\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\treturn resp, err\n\t}\n\n\tresp, err := newRequest(\"HEAD\")\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tswitch {\n\tcase resp.StatusCode >= 200 && resp.StatusCode < 400 && len(resp.Header.Get(\"Docker-Content-Digest\")) > 0:\n\t\treturn descriptorFromResponse(resp)\n\tdefault:\n\t\tresp, err = newRequest(\"GET\")\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\treturn descriptorFromResponse(resp)\n\t\t}\n\t\treturn distribution.Descriptor{}, HandleErrorResponse(resp)\n\t}\n}\n\nfunc descriptorFromResponse(response *http.Response) (distribution.Descriptor, error) {\n\tdesc := distribution.Descriptor{}\n\theaders := response.Header\n\n\tctHeader := headers.Get(\"Content-Type\")\n\tif ctHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Type header\")\n\t}\n\tdesc.MediaType = ctHeader\n\n\tdigestHeader := headers.Get(\"Docker-Content-Digest\")\n\tif digestHeader == \"\" {\n\t\tbytes, err := ioutil.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\t_, desc, err := distribution.UnmarshalManifest(ctHeader, bytes)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn desc, nil\n\t}\n\n\tdgst, err := digest.Parse(digestHeader)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Digest = dgst\n\n\tlengthHeader := headers.Get(\"Content-Length\")\n\tif lengthHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Length header\")\n\t}\n\tlength, err := strconv.ParseInt(lengthHeader, 10, 64)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Size = length\n\n\treturn desc, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\treturn &blobStore{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, opts ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifestService{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t\topts:   opts,\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, name string) (distribution.Descriptor, error) {\n\turl := t.ub.RepositoryTagURL(t.name, name)\n\treq, err := http.NewRequestWithContext(ctx, \"HEAD\", url, nil)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tresp, err := t.client.Do(req)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tif resp.StatusCode == http.StatusOK {\n\t\treturn parseDescriptor(resp.Header)\n\t}\n\tif resp.StatusCode == http.StatusNotFound {\n\t\treq, _ = http.NewRequestWithContext(ctx, \"GET\", url, nil)\n\t\tresp, err := t.client.Do(req)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn parseDescriptor(resp.Header)\n\t}\n\treturn distribution.Descriptor{}, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n}\n```"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin-based HTTP server with TLS support, serving HTML content and static assets, while also implementing HTTP/2 server push for static resources.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up static file serving, configures HTML templates, implements HTTP/2 server push for static assets, and starts the server with TLS encryption. It handles requests to the root path (\"/\") by returning HTML content and pushing a JavaScript file to the client.\n\nInput:\n- port (string): The port number to listen on (e.g., \":8080\")\n- certFile (string): Path to the TLS certificate file (e.g., \"./testdata/server.pem\")\n- keyFile (string): Path to the TLS private key file (e.g., \"./testdata/server.key\")\n- htmlTemplates (template.Template): HTML templates to be used for rendering\n- staticDir (string): Directory path for static assets (e.g., \"./assets\")\n\nOutput: None (the function runs indefinitely as a web server)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/assets\", \"./assets\")\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher := c.Writer.Pusher(); pusher != nil {\n\t\t\tif err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n\t\t\t\tlog.Printf(\"Failed to push: %v\", err)\n\t\t\t}\n\t\t}\n\t\tc.HTML(200, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\nfunc RunGinServer(port, certFile, keyFile string, htmlTemplates *template.Template, staticDir string) {\n    r := gin.Default()\n    r.Static(\"/static\", staticDir)\n    r.SetHTMLTemplate(htmlTemplates)\n    r.GET(\"/\", func(c *gin.Context) {\n        c.Push(\"/static/script.js\", nil)\n        c.HTML(200, \"index.html\", nil)\n    })\n    r.RunTLS(port, certFile, keyFile)\n}\n```"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that retrieves metadata from a metadata server using a custom HTTP client, with support for ETag headers and error handling.\n\nFunction Description: The function `getETag` makes an HTTP GET request to a metadata server endpoint, using a custom HTTP client with specific timeout configurations. It handles the response by checking status codes, reading the response body, and extracting both the content and ETag header. The function includes error handling for various scenarios including connection errors, missing resources, and non-200 status codes.\n\nInput:\n- client *http.Client: A custom HTTP client with configured timeouts for the request\n- suffix string: The path suffix to append to the base metadata URL\n\nOutput:\n- value string: The content of the response body as a string\n- etag string: The ETag header value from the response\n- err error: An error object if any step fails, nil on success",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar (\n\tmetaClient = &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   2 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 2 * time.Second,\n\t\t},\n\t}\n)\n\nfunc getETag(client *http.Client, suffix string) (value, etag string, err error) {\n\thost := os.Getenv(metadataHostEnv)\n\tif host == \"\" {\n\t\thost = metadataIP\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", userAgent)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getETag(client *http.Client, suffix string) (string, string, error) {\n\turl := \"http://169.254.169.254/latest/\" + suffix\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tetag := resp.Header.Get(\"ETag\")\n\treturn string(body), etag, nil\n}"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles multiple API routes with different authentication requirements and groups related endpoints together.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), organizes routes into logical groups with different authentication requirements, and starts the server. It demonstrates route grouping, middleware chaining, and modular route registration.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for incoming requests)\n\nNote: The actual route handlers are expected to be implemented in separate packages (users, articles) and registered through their respective Register functions. The server runs indefinitely until interrupted.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tv1 := r.Group(\"/api\")\n\tusers.UsersRegister(v1.Group(\"/users\"))\n\tv1.Use(users.AuthMiddleware(false))\n\tarticles.ArticlesAnonymousRegister(v1.Group(\"/articles\"))\n\tarticles.TagsAnonymousRegister(v1.Group(\"/tags\"))\n\n\tv1.Use(users.AuthMiddleware(true))\n\tusers.UserRegister(v1.Group(\"/user\"))\n\tusers.ProfileRegister(v1.Group(\"/profiles\"))\n\n\tarticles.ArticlesRegister(v1.Group(\"/articles\"))\n\n\ttestAuth := r.Group(\"/api/ping\")\n\n\ttestAuth.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"yourproject/users\"\n\t\"yourproject/articles\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\t// User routes with authentication\n\tuserRoutes := r.Group(\"/api/v1/users\")\n\tuserRoutes.Use(AuthMiddleware())\n\tusers.Register(userRoutes)\n\n\t// Article routes without authentication\n\tarticleRoutes := r.Group(\"/api/v1/articles\")\n\tarticles.Register(articleRoutes)\n\n\tr.Run(\":8080\")\n}\n```"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a Go struct that provides HTTP client functionality for making GET and POST requests with custom headers and query parameters.\n\nStruct Description: The `request` struct encapsulates HTTP client operations, providing methods to perform GET and POST requests with support for custom headers and query parameters. It handles URL construction, request execution, and response processing.\n\nFields:\n[Note: The reference implementation doesn't show any struct fields, as it's a stateless utility struct]\n\nMethods:\n\nMethod1: HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP GET request to the specified URL with the given query parameters and headers. Returns the response body as bytes, status code, and any error.\n\nMethod2: HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP POST request to the specified URL with the given form data (as query parameters) and headers. Returns the response body as bytes, status code, and any error.\n\nMethod3: QueryBuilder(queryUrl string, queryValues map[string]string) -> string - Helper method that constructs a URL with query parameters from the given base URL and parameter map. Handles URL encoding of parameters.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar Request = NewRequest()\n\ntype request struct {\n}\n\nfunc NewRequest() *request {\n\treturn &request{}\n}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\treq, err := http.NewRequest(\"GET\", r.QueryBuilder(queryUrl, queryValues), nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\n\treq, err := http.NewRequest(\"POST\", queryUrl, strings.NewReader(queryString))\n\tif err != nil {\n\t\treturn\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\tqueryUrl += queryString\n\n\treturn queryUrl\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\ntype request struct{}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\turl := r.QueryBuilder(queryUrl, queryValues)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tfor k, v := range headerValues {\n\t\treq.Header.Set(k, v)\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\treturn body, resp.StatusCode, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\turl := r.QueryBuilder(queryUrl, queryValues)\n\treq, err := http.NewRequest(\"POST\", url, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tfor k, v := range headerValues {\n\t\treq.Header.Set(k, v)\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\treturn body, resp.StatusCode, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tu, _ := url.Parse(queryUrl)\n\tq := u.Query()\n\tfor k, v := range queryValues {\n\t\tq.Set(k, v)\n\t}\n\tu.RawQuery = q.Encode()\n\treturn u.String()\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Implement a streaming HTTP server endpoint using Gin in Go that sends chunked data responses to clients.\n\nFunction Description: The function sets up a Gin HTTP server with a single endpoint (\"/stream\") that streams data to the client in real-time using chunked transfer encoding. It demonstrates how to implement server-sent events or real-time data streaming in Go.\n\nInput: None (The function takes no direct input parameters as it's the main server setup function)\n\nOutput: None (The function doesn't return anything but sets up a running HTTP server that outputs streaming data to connected clients)\n\n---\n\nFor completeness, here's the alternative struct-level format (though the reference code is function-level):\n\nTask Description: Create a struct that encapsulates a streaming HTTP server using Gin framework in Go.\n\nStruct Description: The StreamServer struct represents a configurable HTTP server capable of streaming data to clients.\n\nFields:\n- router: *gin.Engine - The Gin router instance\n- port: string - The port number to listen on\n- streamData: chan string - Channel for streaming data to clients\n\nMethods:\n- NewStreamServer(port string) *StreamServer - Constructor that initializes a new StreamServer instance\n- SetupRoutes() - Configures all HTTP routes and handlers\n- GenerateStreamData() - Generates sample data for streaming\n- Start() error - Starts the HTTP server\n- Stop() - Gracefully shuts down the server",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Header(\"Content-Type\", \"text/plain\")\n\t\tc.Header(\"Transfer-Encoding\", \"chunked\")\n\n\t\tdataStream := make(chan string)\n\n\t\tgo func() {\n\t\t\tdefer close(dataStream)\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tdataStream <- fmt.Sprintf(\"Data %d\\n\", i)\n\t\t\t}\n\t\t}()\n\n\t\tfor data := range dataStream {\n\t\t\t_, _ = io.WriteString(c.Writer, data)\n\t\t\tc.Writer.Flush()\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tc.Stream(func(w io.Writer) bool {\n\t\t\tfor i := 0; i < 5; i++ {\n\t\t\t\tw.Write([]byte(\"Chunk \" + strconv.Itoa(i) + \"\\n\"))\n\t\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t\t}\n\t\t\treturn false\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t}\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\nfunc RunServer() {\n\tr := gin.Default()\n\tr.Static(\"/static\", \"./static\")\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}\n```"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with a single route handler that responds to GET requests.\n\nFunction Description: The function initializes a default Gin engine with built-in middleware (Logger and Recovery), registers a GET route handler at the path \"/hello\" that responds with a plain text message, and starts the server on port 80. The function is designed to be the main entry point of a Go application using the Gin web framework.\n\nInput: \n- ctx *app.Context: A context object from the eggos framework (used for logging in this example)\n\nOutput: \n- error: Returns any error that occurs during server execution, otherwise nil when the server is properly shut down",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/icexin/eggos/app\"\n)\nfunc main(ctx *app.Context) error {\n\tr := gin.Default()\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"hello from eggos\")\n\t})\n\tctx.Printf(\"run gin server on :80\")\n\treturn r.Run(\":80\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\nfunc RunServer(ctx *app.Context) error {\n    r := gin.Default()\n    r.GET(\"/hello\", func(c *gin.Context) {\n        c.String(200, \"Hello, World!\")\n    })\n    return r.Run(\":80\")\n}\n```"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a function to retrieve user information from Facebook's Graph API using an access token, with proper error handling and response validation.\n\nFunction Description: The function GetUserInfo makes an authenticated GET request to Facebook's Graph API to fetch user information (name, email, ID, and picture) using the provided access token. It handles the HTTP request/response cycle, validates the response, and parses the JSON data into a structured format.\n\nInput:\n- token: TokenInfo - A struct containing the Facebook access token (token.AccessToken is used)\n\nOutput:\n- model.UserInfo - A struct containing the user's information (ID, picture URL, name, email, and origin)\n- string - The raw JSON response body from the API\n- error - Any error that occurred during the API request or response processing",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/tarent/loginsrv/model\"\n)\n\nvar facebookAPI = \"https://graph.facebook.com/v2.12\"\n\nfunc (p Provider) GetUserInfo(token TokenInfo) (model.UserInfo, string, error) {\n\tfu := facebookUser{}\n\n\turl := fmt.Sprintf(\"%v/me?access_token=%v&fields=name,email,id,picture\", facebookAPI, token.AccessToken)\n\n\tclient := &http.Client{}\n\tcontentType := \"application/json\"\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Accept\", contentType)\n\tresp, err := client.Do(req)\n\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif !strings.Contains(resp.Header.Get(\"Content-Type\"), contentType) {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"wrong content-type on facebook get user info: %v\", resp.Header.Get(\"Content-Type\"))\n\t}\n\n\tif resp.StatusCode != 200 {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"got http status %v on facebook get user info\", resp.StatusCode)\n\t}\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"error reading facebook get user info: %v\", err)\n\t}\n\n\terr = json.Unmarshal(b, &fu)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"error parsing facebook get user info: %v\", err)\n\t}\n\n\treturn model.UserInfo{\n\t\tSub:     fu.UserID,\n\t\tPicture: fu.Picture.Data.URL,\n\t\tName:    fu.Name,\n\t\tEmail:   fu.Email,\n\t\tOrigin:  \"facebook\",\n\t}, string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc GetUserInfo(token TokenInfo) (*model.UserInfo, string, error) {\n\tu, err := url.Parse(\"https://graph.facebook.com/me\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tq := u.Query()\n\tq.Add(\"access_token\", token.AccessToken)\n\tu.RawQuery = q.Encode()\n\n\treq, err := http.NewRequest(\"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, string(body), fmt.Errorf(\"Facebook API returned non-200 status: %d\", resp.StatusCode)\n\t}\n\n\tvar fbUser struct {\n\t\tID    string `json:\"id\"`\n\t\tName  string `json:\"name\"`\n\t\tEmail string `json:\"email,omitempty\"`\n\t\tPicture struct {\n\t\t\tData struct {\n\t\t\t\tURL string `json:\"url\"`\n\t\t\t} `json:\"data\"`\n\t\t} `json:\"picture\"`\n\t}\n\n\tif err := json.Unmarshal(body, &fbUser); err != nil {\n\t\treturn nil, string(body), err\n\t}\n\n\tif fbUser.ID == \"\" || fbUser.Name == \"\" || fbUser.Email == \"\" || fbUser.Picture.Data.URL == \"\" {\n\t\treturn nil, string(body), fmt.Errorf(\"missing required fields in Facebook response\")\n\t}\n\n\treturn &model.UserInfo{\n\t\tID:       fbUser.ID,\n\t\tPicture:  fbUser.Picture.Data.URL,\n\t\tName:     fbUser.Name,\n\t\tEmail:    fbUser.Email,\n\t\tOrigin:   \"facebook\",\n\t}, string(body), nil\n}\n```"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS web server using the Gin framework, serving a welcome page at the \"/welcome\" endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up HTML templates, registers a GET handler for the \"/welcome\" endpoint that returns an HTML response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput:\n- port (string): The port number to listen on, e.g., \":8080\"\n- certFile (string): Path to the TLS certificate file, e.g., \"./testdata/server.pem\"\n- keyFile (string): Path to the TLS private key file, e.g., \"./testdata/server.key\"\n- html (template.Template): HTML template to be used for responses\n\nOutput: None (the function runs indefinitely as a web server)\n\nNote: The function includes a warning about not using embedded certificates in production environments.",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tlogger := log.New(os.Stderr, \"\", 0)\n\tlogger.Println(\"[WARNING] DON'T USE THE EMBED CERTS FROM THIS EXAMPLE IN PRODUCTION ENVIRONMENT, GENERATE YOUR OWN!\")\n\n\tr := gin.Default()\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"text/template\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RunSecureServer(port, certFile, keyFile string, html *template.Template) {\n\tfmt.Println(\"Warning: Do not use embedded certificates in production!\")\n\n\trouter := gin.Default()\n\n\trouter.GET(\"/welcome\", func(c *gin.Context) {\n\t\tif err := html.Execute(c.Writer, nil); err != nil {\n\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t}\n\t})\n\n\terr := router.RunTLS(port, certFile, keyFile)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a default Gin engine with logger and recovery middleware, registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- domains: []string - A slice of domain names for which TLS certificates should be obtained (e.g., [\"example1.com\", \"example2.com\"])\n\nOutput: \n- error - Returns an error if the server fails to start, otherwise runs indefinitely (the function will log.Fatal on error)\n\nNote: The function does not explicitly return but will log.Fatal if the server fails to start. The server runs indefinitely when successful.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"crypto/tls\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc RunServer(domains []string) error {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tsrv := &http.Server{\n\t\tAddr:    \":443\",\n\t\tHandler: r,\n\t}\n\n\tmgr := autocert.Manager{\n\t\tHostPolicy: autocert.HostWhitelist(domains...),\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tCache:      autocert.DirCache(\"/var/www/.cache\"),\n\t}\n\n\tsrv.TLSConfig = &tls.Config{GetCertificate: mgr.GetCertificate}\n\n\tif err := srv.ListenAndServe(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a Go struct that handles HTTP requests to a metadata service with configurable endpoints, versioning, and resource paths. The struct should support request building, execution, and response handling with retry logic and mock capabilities for testing.\n\nStruct Description: The MetaData struct provides a client for interacting with a metadata service API. It supports building requests with versioning, resource types, and sub-resources, executing requests with retry logic, and decoding responses. It includes mock functionality for testing.\n\nFields:\n- mock: requestMock - A function type for mocking requests during testing\n- client: *http.Client - The HTTP client used to execute requests\n\nMethods:\n- NewMetaData(*http.Client) *MetaData - Constructor that initializes a new MetaData instance with an optional custom HTTP client\n- New() *MetaDataRequest - Creates a new request builder instance\n\nThe MetaDataRequest nested struct handles individual request configuration and execution:\n\nFields:\n- version: string - API version to use (defaults to \"latest\")\n- resourceType: string - Type of resource being accessed (defaults to \"meta-data\")\n- resource: string - Main resource path (required)\n- subResource: string - Optional sub-resource path\n- client: *http.Client - HTTP client for request execution\n- sendRequest: requestMock - Optional mock function for testing\n\nMethods:\n- Version(string) IMetaDataRequest - Sets the API version for the request\n- ResourceType(string) IMetaDataRequest - Sets the resource type for the request\n- Resource(string) IMetaDataRequest - Sets the main resource path\n- SubResource(string) IMetaDataRequest - Sets an optional sub-resource path\n- Url() (string, error) - Constructs the full request URL from components\n- Do(interface{}) error - Executes the request and decodes the response into the provided interface\n- send() (string, error) - Internal method that performs the actual HTTP request\n- Decode(string, interface{}) error - Handles response decoding (implementation not shown in reference)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\t\"encoding/json\"\n\t\"reflect\"\n\t\"os\"\n)\n\ntype MetaData struct {\n\tmock requestMock\n\tclient *http.Client\n}\n\nfunc NewMetaData(client *http.Client) *MetaData {\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\treturn &MetaData{\n\t\tclient: client,\n\t}\n}\n\nfunc (m *MetaData) New() *MetaDataRequest {\n\treturn &MetaDataRequest{\n\t\tclient:      m.client,\n\t\tsendRequest: m.mock,\n\t}\n}\n\ntype requestMock func(resource string) (string, error)\n\ntype MetaDataRequest struct {\n\tversion      string\n\tresourceType string\n\tresource     string\n\tsubResource  string\n\tclient       *http.Client\n\tsendRequest requestMock\n}\n\nfunc (vpc *MetaDataRequest) Version(version string) IMetaDataRequest {\n\tvpc.version = version\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) ResourceType(rtype string) IMetaDataRequest {\n\tvpc.resourceType = rtype\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) Resource(resource string) IMetaDataRequest {\n\tvpc.resource = resource\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) SubResource(sub string) IMetaDataRequest {\n\tvpc.subResource = sub\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) Url() (string, error) {\n\tif vpc.version == \"\" {\n\t\tvpc.version = \"latest\"\n\t}\n\tif vpc.resourceType == \"\" {\n\t\tvpc.resourceType = \"meta-data\"\n\t}\n\tif vpc.resource == \"\" {\n\t\treturn \"\", errors.New(\"the resource you want to visit must not be nil!\")\n\t}\n\tendpoint := os.Getenv(\"METADATA_ENDPOINT\")\n\tif endpoint == \"\" {\n\t\tendpoint = \"http://100.100.100.200\"\n\t}\n\tr := fmt.Sprintf(\"%s/%s/%s/%s\", endpoint, vpc.version, vpc.resourceType, vpc.resource)\n\tif vpc.subResource == \"\" {\n\t\treturn r, nil\n\t}\n\treturn fmt.Sprintf(\"%s/%s\", r, vpc.subResource), nil\n}\n\nfunc (vpc *MetaDataRequest) Do(api interface{}) (err error) {\n\tvar res = \"\"\n\tfor r := retry.Start(); r.Next(); {\n\t\tif vpc.sendRequest != nil {\n\t\t\tres, err = vpc.sendRequest(vpc.resource)\n\t\t} else {\n\t\t\tres, err = vpc.send()\n\t\t}\n\t\tif !shouldRetry(err) {\n\t\t\tbreak\n\t\t}\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn vpc.Decode(res, api)\n}\n\nfunc (vpc *MetaDataRequest) send() (string, error) {\n\turl, err := vpc.Url()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\trequ, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tresp, err := vpc.client.Do(requ)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", fmt.Errorf(\"Aliyun Metadata API Error: Status Code: %d\", resp.StatusCode)\n\t}\n\tdefer resp.Body.Close()\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype requestMock func(*http.Request) (*http.Response, error)\n\ntype MetaData struct {\n\tmock   requestMock\n\tclient *http.Client\n}\n\nfunc NewMetaData(client *http.Client) *MetaData {\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\treturn &MetaData{\n\t\tclient: client,\n\t}\n}\n\nfunc (m *MetaData) New() *MetaDataRequest {\n\treturn &MetaDataRequest{\n\t\tversion:      \"latest\",\n\t\tresourceType: \"meta-data\",\n\t\tclient:       m.client,\n\t\tsendRequest:  m.mock,\n\t}\n}\n\ntype MetaDataRequest struct {\n\tversion      string\n\tresourceType string\n\tresource     string\n\tsubResource  string\n\tclient       *http.Client\n\tsendRequest  requestMock\n}\n\ntype IMetaDataRequest interface {\n\tVersion(string) IMetaDataRequest\n\tResourceType(string) IMetaDataRequest\n\tResource(string) IMetaDataRequest\n\tSubResource(string) IMetaDataRequest\n\tUrl() (string, error)\n\tDo(interface{}) error\n\tsend() (string, error)\n\tDecode(string, interface{}) error\n}\n\nfunc (r *MetaDataRequest) Version(v string) IMetaDataRequest {\n\tr.version = v\n\treturn r\n}\n\nfunc (r *MetaDataRequest) ResourceType(rt string) IMetaDataRequest {\n\tr.resourceType = rt\n\treturn r\n}\n\nfunc (r *MetaDataRequest) Resource(res string) IMetaDataRequest {\n\tr.resource = res\n\treturn r\n}\n\nfunc (r *MetaDataRequest) SubResource(sr string) IMetaDataRequest {\n\tr.subResource = sr\n\treturn r\n}\n\nfunc (r *MetaDataRequest) Url() (string, error) {\n\tpath := []string{r.version, r.resourceType, r.resource}\n\tif r.subResource != \"\" {\n\t\tpath = append(path, r.subResource)\n\t}\n\treturn \"/\" + strings.Join(path, \"/\"), nil\n}\n\nfunc (r *MetaDataRequest) Do(result interface{}) error {\n\turl, err := r.Url()\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor i := 0; i < 3; i++ {\n\t\tvar resp *http.Response\n\t\tvar err error\n\t\tif r.sendRequest != nil {\n\t\t\tresp, err = r.sendRequest(req)\n\t\t} else {\n\t\t\tresp, err = r.client.Do(req)\n\t\t}\n\t\tif err == nil {\n\t\t\tdefer resp.Body.Close()\n\t\t\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\t\t\treturn r.Decode(\"\", result)\n\t\t\t}\n\t\t}\n\t\ttime.Sleep(time.Second * time.Duration(i))\n\t}\n\treturn errors.New(\"request failed after retries\")\n}\n\nfunc (r *MetaDataRequest) send() (string, error) {\n\turl, err := r.Url()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tvar resp *http.Response\n\tvar errResp error\n\tif r.sendRequest != nil {\n\t\tresp, errResp = r.sendRequest(req)\n\t} else {\n\t\tresp, errResp = r.client.Do(req)\n\t}\n\tif errResp != nil {\n\t\treturn \"\", errResp\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}\n\nfunc (r *MetaDataRequest) Decode(body string, result interface{}) error {\n\treturn json.Unmarshal([]byte(body), result)\n}\n```"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Go function that handles file uploads along with form data using the Gin web framework. The function should process multipart form data, save uploaded files, and return a response indicating success or failure.\n\nFunction Description: The function is a Gin route handler that processes POST requests to the \"/upload\" endpoint. It handles multipart/form-data submissions containing both form fields (name and email) and file uploads. The function saves all uploaded files to the server and returns a success message with the count of uploaded files and the form field values, or an error message if the operation fails.\n\nInput: \n- Gin context object (c *gin.Context) containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - File uploads: \"files\" (multipart.FileHeader array)\n\nOutput:\n- On success: HTTP 200 status with success message (string)\n- On failure: HTTP 400 status with error message (string)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc Upload(c *gin.Context) {\n\tif err := c.Request.ParseMultipartForm(10 << 20); err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Error parsing form\"})\n\t\treturn\n\t}\n\n\tname := c.PostForm(\"name\")\n\temail := c.PostForm(\"email\")\n\tif name == \"\" || email == \"\" {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Missing name or email\"})\n\t\treturn\n\t}\n\n\tif err := os.MkdirAll(\"uploads\", os.ModePerm); err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Error creating upload directory\"})\n\t\treturn\n\t}\n\n\tfiles := c.Request.MultipartForm.File[\"files\"]\n\tvar fileCount int\n\tfor _, file := range files {\n\t\tuploadedFile, err := file.Open()\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Error opening file\"})\n\t\t\treturn\n\t\t}\n\t\tdefer uploadedFile.Close()\n\n\t\tdestFile, err := os.Create(\"uploads/\" + file.Filename)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Error creating file\"})\n\t\t\treturn\n\t\t}\n\t\tdefer destFile.Close()\n\n\t\tif _, err := io.Copy(destFile, uploadedFile); err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Error saving file\"})\n\t\t\treturn\n\t\t}\n\n\t\tfileCount++\n\t}\n\n\tc.JSON(200, gin.H{\n\t\t\"message\":    \"Upload successful\",\n\t\t\"file_count\": fileCount,\n\t\t\"name\":       name,\n\t\t\"email\":      email,\n\t})\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Go HTTP client struct that can handle both HTTP and HTTPS requests with custom configurations, including authentication and request headers.\n\nStruct Description: The Client struct represents an HTTP client with configurable protocol, address, authentication, and transport settings. It provides methods to execute HTTP requests and handle responses.\n\nFields:\nProtocol: string - The protocol to use (http or https)\nAddr: string - The server address to connect to\nUser: string - The username for basic authentication\nPassword: string - The password for basic authentication\nc: *http.Client - The underlying HTTP client instance\n\nMethods:\nNewClient: (conf *ClientConfig) -> *Client - Creates a new Client instance with the given configuration, setting up either HTTP or HTTPS transport\nDoRequest: (method string, url string, body *bytes.Buffer) -> (*http.Response, error) - Executes an HTTP request with the given method, URL and body, adding basic auth if configured\nDo: (method string, url string, body map[string]interface{}) -> (*Response, error) - Executes a request with JSON body, parses the response and returns a structured Response object",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/juju/errors\"\n)\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\n\tc *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tc := new(Client)\n\n\tc.Addr = conf.Addr\n\tc.User = conf.User\n\tc.Password = conf.Password\n\n\tif conf.HTTPS {\n\t\tc.Protocol = \"https\"\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t\tc.c = &http.Client{Transport: tr}\n\t} else {\n\t\tc.Protocol = \"http\"\n\t\tc.c = &http.Client{}\n\t}\n\n\treturn c\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\tif len(c.User) > 0 && len(c.Password) > 0 {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tresp, err := c.c.Do(req)\n\n\treturn resp, err\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tbodyData, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tbuf := bytes.NewBuffer(bodyData)\n\tif body == nil {\n\t\tbuf = bytes.NewBuffer(nil)\n\t}\n\n\tresp, err := c.DoRequest(method, url, buf)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tdefer resp.Body.Close()\n\n\tret := new(Response)\n\tret.Code = resp.StatusCode\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tif len(data) > 0 {\n\t\terr = json.Unmarshal(data, &ret.ResponseItem)\n\t}\n\n\treturn ret, errors.Trace(err)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"crypto/tls\"\n)\n\ntype ClientConfig struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n}\n\ntype Response struct {\n\tStatusCode int\n\tHeaders    http.Header\n\tBody       []byte\n}\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\tc        *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tvar transport http.RoundTripper\n\tif conf.Protocol == \"https\" {\n\t\ttransport = &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t} else {\n\t\ttransport = &http.Transport{}\n\t}\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t}\n\treturn &Client{\n\t\tProtocol: conf.Protocol,\n\t\tAddr:     conf.Addr,\n\t\tUser:     conf.User,\n\t\tPassword: conf.Password,\n\t\tc:        client,\n\t}\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\tfullURL := fmt.Sprintf(\"%s://%s%s\", c.Protocol, c.Addr, url)\n\treq, err := http.NewRequest(method, fullURL, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif c.User != \"\" && c.Password != \"\" {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tresp, err := c.c.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tjsonBody, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbodyBuf := bytes.NewBuffer(jsonBody)\n\tresp, err := c.DoRequest(method, url, bodyBuf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trespBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp.Body.Close()\n\treturn &Response{\n\t\tStatusCode: resp.StatusCode,\n\t\tHeaders:    resp.Header,\n\t\tBody:       respBody,\n\t}, nil\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a Go function that implements a distributed transaction coordinator using HTTP communication between microservices. The function should handle transaction initiation, propagate transaction context, and coordinate between multiple services.\n\nFunction Description: The function serves as an HTTP handler for initiating a distributed transaction. It receives a transaction ID in the header, prepares transaction data for two different services (Account and Inventory), makes HTTP calls to these services, and handles their responses. The function ensures transaction context (xid) is propagated to all participating services.\n\nInput: \n- Gin context object (gin.Context) containing:\n  - HTTP request headers (including \"x_seata_xid\" for transaction ID)\n  - Request body (not used in this example, but could contain transaction details)\n\nOutput:\n- HTTP responses:\n  - 400 Bad Request with error details if any step fails\n  - Original service response if any service fails (non-200 status)\n  - Success response from the last service if all succeed (200 status)\n- Side effects: Makes HTTP calls to two different services with transaction data",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-a/begin\", func(context *gin.Context) {\n\t\txid := context.Request.Header.Get(\"x_seata_xid\")\n\t\taccount := &Account{\n\t\t\tID:     1000024549,\n\t\t\tAmount: 200,\n\t\t}\n\t\tinv := &Inventory{\n\t\t\tID:  1000000005,\n\t\t\tQty: 2,\n\t\t}\n\n\t\taccountReq, err := json.Marshal(account)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tinvReq, err := json.Marshal(inv)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq1, err := http.NewRequest(\"POST\", \"http://localhost:2047/service-b/try\", bytes.NewBuffer(accountReq))\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq1.Header.Set(\"x_seata_xid\", xid)\n\n\t\treq2, err := http.NewRequest(\"POST\", \"http://localhost:2048/service-c/try\", bytes.NewBuffer(invReq))\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq2.Header.Set(\"x_seata_xid\", xid)\n\n\t\tclient := &http.Client{}\n\t\tresult1, err := client.Do(req1)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif result1.StatusCode != http.StatusOK {\n\t\t\tresult1.Write(context.Writer)\n\t\t\treturn\n\t\t}\n\n\t\tresult2, err := client.Do(req2)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif result2.StatusCode == http.StatusOK {\n\t\t\tresult2.Write(context.Writer)\n\t\t\treturn\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc InitiateTransaction(c *gin.Context) {\n\txid := c.GetHeader(\"x_seata_xid\")\n\tif xid == \"\" {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"missing transaction ID\"})\n\t\treturn\n\t}\n\n\taccountData := gin.H{\"action\": \"prepare\", \"data\": \"account_transaction\"}\n\tinventoryData := gin.H{\"action\": \"prepare\", \"data\": \"inventory_transaction\"}\n\n\taccountResp, err := makeRequest(\"http://account-service/transaction\", xid, accountData)\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"account service error\"})\n\t\treturn\n\t}\n\tif accountResp.StatusCode != 200 {\n\t\tbody, _ := io.ReadAll(accountResp.Body)\n\t\tc.AbortWithStatusJSON(accountResp.StatusCode, gin.H{\"error\": string(body)})\n\t\treturn\n\t}\n\n\tinventoryResp, err := makeRequest(\"http://inventory-service/transaction\", xid, inventoryData)\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"inventory service error\"})\n\t\treturn\n\t}\n\tif inventoryResp.StatusCode != 200 {\n\t\tbody, _ := io.ReadAll(inventoryResp.Body)\n\t\tc.AbortWithStatusJSON(inventoryResp.StatusCode, gin.H{\"error\": string(body)})\n\t\treturn\n\t}\n\n\tc.JSON(200, gin.H{\"status\": \"transaction committed\"})\n}\n\nfunc makeRequest(url, xid string, data interface{}) (*http.Response, error) {\n\tbody, _ := json.Marshal(data)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(body))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"x_seata_xid\", xid)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n```"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Implement a function that demonstrates asynchronous message production to a Kafka topic using the Sarama library in Go. The function should continuously generate and send messages at regular intervals while handling both successful deliveries and errors.\n\nFunction Description: The SaramaProducer function initializes and manages an asynchronous Kafka producer. It configures the producer with specific settings, handles message delivery success/failure notifications in a separate goroutine, and continuously generates and sends messages to a specified Kafka topic. The function runs indefinitely until terminated.\n\nInput: None (The function takes no input parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function doesn't return any value but prints success/error messages to stdout)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc SaramaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tconfig.Producer.Retry.Max = 1000\n\tconfig.Version = sarama.V2_2_0_0\n\n\tproducer, e := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif e != nil {\n\t\tfmt.Println(e)\n\t\treturn\n\t}\n\tdefer producer.AsyncClose()\n\n\tgo func(p sarama.AsyncProducer) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase suc := <-p.Successes():\n\t\t\t\tfmt.Println(\"offset: \", suc.Offset, \"timestamp: \", suc.Timestamp.String(), \"partitions: \", suc.Partition)\n\t\t\tcase fail := <-p.Errors():\n\t\t\t\tfmt.Println(\"err: \", fail.Err)\n\t\t\t}\n\t\t}\n\t}(producer)\n\n\tvar value string\n\tfor i := 0; ; i++ {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\ttime11 := time.Now()\n\t\tvalue = \"this is a message 0606 \" + time11.Format(\"15:04:05\")\n\t\tmsg := &sarama.ProducerMessage{\n\t\t\tTopic: \"0606_test\",\n\t\t}\n\t\tmsg.Value = sarama.ByteEncoder(value)\n\t\tfmt.Println(value)\n\t\tproducer.Input() <- msg\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/Shopify/sarama\"\n)\n\nfunc SaramaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Retry.Max = 5\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\n\tproducer, err := sarama.NewAsyncProducer([]string{\"localhost:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg := <-producer.Successes():\n\t\t\t\tfmt.Printf(\"Message sent: %v\\n\", msg)\n\t\t\tcase err := <-producer.Errors():\n\t\t\t\tfmt.Printf(\"Error sending message: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tmsg := &sarama.ProducerMessage{\n\t\t\tTopic: \"test-topic\",\n\t\t\tValue: sarama.StringEncoder(time.Now().Format(time.RFC3339)),\n\t\t}\n\t\tproducer.Input() <- msg\n\t\ttime.Sleep(2 * time.Second)\n\t}\n}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a function that implements an asynchronous Kafka producer in Go, which continuously sends messages to a specified Kafka topic at regular intervals. The function should handle both success and error cases from the producer and properly clean up resources when done.\n\nFunction Description: The function `runAsyncKafkaProducer` initializes and manages an asynchronous Kafka producer that sends alternating message types (\"login\" and \"msg\" events) to a Kafka topic every 10 seconds. It configures the producer with appropriate settings, handles success/error notifications in a separate goroutine, and ensures proper resource cleanup.\n\nInput: None (The function takes no parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function runs indefinitely until terminated, printing success/error messages to stdout)\n\nReference Code Structure:\n\n```go\nfunc runAsyncKafkaProducer() {\n    // 1. Configure Kafka producer\n    config := sarama.NewConfig()\n    config.Producer.RequiredAcks = sarama.WaitForAll\n    config.Producer.Partitioner = sarama.NewRandomPartitioner\n    config.Producer.Return.Successes = true\n    config.Producer.Return.Errors = true\n    \n    // 2. Initialize async producer\n    producer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n    if err != nil {\n        panic(err)\n    }\n    defer producer.AsyncClose()\n    \n    // 3. Start goroutine to handle producer events\n    go func() {\n        for {\n            select {\n            case success := <-producer.Successes():\n                fmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n                    success.Topic, success.Partition, success.Offset)\n            case err := <-producer.Errors():\n                fmt.Printf(\"Failed to send message: %v\\n\", err)\n            }\n        }\n    }()\n    \n    // 4. Main message sending loop\n    var messageType int = 1\n    for {\n        msg := createMessage(messageType)\n        producer.Input() <- msg\n        \n        messageType = toggleMessageType(messageType)\n        time.Sleep(10 * time.Second)\n    }\n}\n\n// Helper functions would be defined here...\n```",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tAsyncProducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer AsyncProducer.AsyncClose()\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase succ := <-AsyncProducer.Successes():\n\t\t\t\tfmt.Println(\"AsyncProducer.Successes()\", succ.Topic, succ.Offset, succ.Timestamp, succ.Partition)\n\t\t\tcase err := <-AsyncProducer.Errors():\n\t\t\t\tfmt.Println(\"AsyncProducer.Errors()\", err.Error())\n\t\t\t}\n\t\t}\n\t}()\n\tvar i = 1\n\tfor {\n\t\tMessage := &sarama.ProducerMessage{\n\t\t\tTopic:     \"msg_event\",\n\t\t\tTimestamp: time.Now(),\n\t\t}\n\t\tvar data []byte\n\t\tdate := time.Now().UnixNano() / 1e6\n\t\tif i == 1 {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"11\",\n\t\t\t\t\"uid\":         1,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"login\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 2\n\t\t} else {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"22\",\n\t\t\t\t\"uid\":         222222,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"msg\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 1\n\t\t}\n\n\t\tMessage.Value = sarama.ByteEncoder(data)\n\t\tAsyncProducer.Input() <- Message\n\t\ttime.Sleep(time.Second * 10)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/Shopify/sarama\"\n)\n\nfunc runAsyncKafkaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\n\tproducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer producer.AsyncClose()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase success := <-producer.Successes():\n\t\t\t\tfmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n\t\t\t\t\tsuccess.Topic, success.Partition, success.Offset)\n\t\t\tcase err := <-producer.Errors():\n\t\t\t\tfmt.Printf(\"Failed to send message: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tvar messageType int = 1\n\tfor {\n\t\tmsg := createMessage(messageType)\n\t\tproducer.Input() <- msg\n\n\t\tmessageType = toggleMessageType(messageType)\n\t\ttime.Sleep(10 * time.Second)\n\t}\n}\n\nfunc createMessage(messageType int) *sarama.Message {\n\tvar text string\n\tif messageType == 1 {\n\t\ttext = \"login event\"\n\t} else {\n\t\ttext = \"message event\"\n\t}\n\treturn &sarama.Message{\n\t\tTopic: \"events\",\n\t\tValue: sarama.StringEncoder(text),\n\t}\n}\n\nfunc toggleMessageType(current int) int {\n\tif current == 1 {\n\t\treturn 2\n\t}\n\treturn 1\n}"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a function that demonstrates how to use the Kafka synchronous producer in Go to send a message to a Kafka topic.\n\nFunction Description: The function initializes and configures a synchronous Kafka producer, sends a single message to a specified Kafka topic, and handles any errors that may occur during the process. The producer is properly closed after use.\n\nInput: None (The function is self-contained with hardcoded values for demonstration purposes)\n\nOutput: The function returns the result of the message send operation (partition and offset if successful, or error if failed) and prints it to the console. The function itself doesn't return any value but may terminate early if producer initialization fails.\n\nTask Description: Create a function that demonstrates how to use the Kafka synchronous producer in Go to send a message to a Kafka topic.\n\nFunction Description: The function initializes and configures a synchronous Kafka producer, sends a single message to a specified Kafka topic, and handles any errors that may occur during the process. The producer is properly closed after use.\n\nInput: None (The function is self-contained with hardcoded values for demonstration purposes)\n\nOutput: The function returns the result of the message send operation (partition and offset if successful, or error if failed) and prints it to the console. The function itself doesn't return any value but may terminate early if producer initialization fails.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"testing\"\n)\n\nfunc TestKafkaSyncProducer(t *testing.T) {\n\tconf := sarama.NewConfig()\n\tconf.Producer.RequiredAcks = sarama.WaitForAll\n\tconf.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconf.Producer.Return.Successes = true\n\tconf.Producer.Return.Errors = true\n\tconf.Producer.Retry.Max = 1000\n\tconf.Version = sarama.V2_8_0_0\n\tproducer, err := sarama.NewSyncProducer([]string{\"172.12.12.165:9092\"}, conf)\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tdefer producer.Close()\n\tfmt.Println(producer.SendMessage(&sarama.ProducerMessage{\n\t\tTopic: \"gs_pay_transaction_topic\",\n\t\tValue: sarama.ByteEncoder(\"123123\"),\n\t}))\n\tselect {}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 123,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/segmentio/kafka-go\"\n)\n\nfunc sendKafkaMessage() {\n\tconfig := kafka.WriterConfig{\n\t\tBrokers:  []string{\"localhost:9092\"},\n\t\tTopic:    \"test-topic\",\n\t\tRequiredAcks: kafka.RequireOne,\n\t}\n\tproducer := kafka.NewWriter(config)\n\tdefer producer.Close()\n\n\terr := producer.WriteMessages(context.Background(), kafka.Message{\n\t\tValue: []byte(\"Hello, Kafka!\"),\n\t})\n\tif err != nil {\n\t\tfmt.Println(\"Error sending message:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"Message sent successfully\")\n}"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Implement a TCP/UDP port scanner with proxy support and configurable source IP addresses.\n\nStruct Description: The Scanner struct provides functionality to check if a specific port is open on a given host, supporting both TCP and UDP protocols. It includes timeout configuration, proxy support, and the ability to specify source IP addresses for the connection.\n\nFields:\n- timeout: time.Duration - Maximum duration to wait for a connection attempt\n- proxyDialer: proxy.Dialer - Optional proxy dialer for making connections through a proxy\n- ListenHandler: *ListenHandler - Configuration for source IP addresses (both IPv4 and IPv6)\n\nMethods:\n- ConnectPort: (host string, p *port.Port, timeout time.Duration) -> (bool, error) - Attempts to connect to the specified port on the given host. Returns true if the port is open/reachable, along with any error that occurred during the connection attempt. The port parameter includes the protocol (TCP/UDP) and port number. The timeout parameter specifies the maximum duration for the connection attempt.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\t\"golang.org/x/net/proxy\"\n)\n\ntype Scanner struct {\n\ttimeout     time.Duration\n\tproxyDialer proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *port.Port, timeout time.Duration) (bool, error) {\n\thostport := net.JoinHostPort(host, fmt.Sprint(p.Port))\n\tvar (\n\t\terr  error\n\t\tconn net.Conn\n\t)\n\tif s.proxyDialer != nil {\n\t\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tproxyDialer, ok := s.proxyDialer.(proxy.ContextDialer)\n\t\tif !ok {\n\t\t\treturn false, errors.New(\"invalid proxy dialer\")\n\t\t}\n\t\tconn, err = proxyDialer.DialContext(ctx, p.Protocol.String(), hostport)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t} else {\n\t\tnetDialer := net.Dialer{\n\t\t\tTimeout: timeout,\n\t\t}\n\t\tif s.ListenHandler.SourceIp4 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIp4}\n\t\t} else if s.ListenHandler.SourceIP6 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIP6}\n\t\t}\n\t\tconn, err = netDialer.Dial(p.Protocol.String(), hostport)\n\t}\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer conn.Close()\n\n\tswitch p.Protocol {\n\tcase protocol.UDP:\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif _, err := conn.Write(nil); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif err := conn.SetReadDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tn, err := io.Copy(io.Discard, conn)\n\t\tif err != nil && !os.IsTimeout(err) {\n\t\t\treturn false, err\n\t\t}\n\t\treturn n > 0, nil\n\t}\n\n\treturn true, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"net\"\n\t\"time\"\n)\n\ntype Scanner struct {\n\ttimeout     time.Duration\n\tproxyDialer proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *port.Port, timeout time.Duration) (bool, error) {\n\tnetwork := \"tcp\"\n\tif p.Protocol == \"udp\" {\n\t\tnetwork = \"udp\"\n\t}\n\n\tdialer := &net.Dialer{\n\t\tTimeout: timeout,\n\t}\n\n\tif s.ListenHandler != nil && s.ListenHandler.LocalAddr != nil {\n\t\tdialer.LocalAddr = s.ListenHandler.LocalAddr\n\t}\n\n\tvar conn net.Conn\n\tvar err error\n\n\tif s.proxyDialer != nil {\n\t\tconn, err = s.proxyDialer.Dial(network, net.JoinHostPort(host, p.String()))\n\t} else {\n\t\tconn, err = dialer.Dial(network, net.JoinHostPort(host, p.String()))\n\t}\n\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tconn.Close()\n\treturn true, nil\n}\n```"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a function that uploads a video file to a specified URL using a multipart/form-data POST request with custom headers.\n\nFunction Description: The function uploads a video file to a given URL with specified form fields and authentication headers. It handles file operations, creates a multipart form payload, sets appropriate headers (including content type and access token), executes the HTTP request, and returns the response body.\n\nInput:\n- url (string): The target URL for the video upload\n- method (string): HTTP method (typically \"POST\")\n- advertiserID (string): The advertiser ID for the form field\n- uploadType (string): The upload type for the form field\n- videoSignature (string): The video signature for the form field\n- filePath (string): Path to the video file to upload\n- accessToken (string): Access token for authentication header\n\nOutput:\n- ([]byte, error): Returns the response body as bytes and any error that occurred during execution\n\nNote: The function should follow the same steps as the reference code, including creating a custom http.Client, setting headers, handling multipart form data, and properly managing resources (file handles, response bodies).",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/video/ad/\"\n\tmethod := \"POST\"\n\n\tpayload := &bytes.Buffer{}\n\twriter := multipart.NewWriter(payload)\n\t_ = writer.WriteField(\"advertiser_id\", \"1760312309087432\")\n\t_ = writer.WriteField(\"upload_type\", \"UPLOAD_BY_FILE\")\n\t_ = writer.WriteField(\"video_signature\", \"6b12a8bbbe8e69a2ef5929028b0b50c3\")\n\n\tfile, errFile4 := os.Open(\"/Users/betta/Desktop/\u5e38\u7528/6b12a8bbbe8e69a2ef5929028b0b50c3.mp4\")\n\tdefer file.Close()\n\n\tpart4, errFile4 := writer.CreateFormFile(\"video_file\", filepath.Base(\"/Users/betta/Desktop/\u5e38\u7528/6b12a8bbbe8e69a2ef5929028b0b50c3.mp4\"))\n\t_, errFile4 = io.Copy(part4, file)\n\tif errFile4 != nil {\n\t\tfmt.Println(errFile4)\n\t\treturn\n\t}\n\terr := writer.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treq.Header.Add(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Add(\"Access-Token\", \"e88f206ab28a97ef494b853982d81739b81a1e37\")\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc uploadVideo(url, method, advertiserID, uploadType, videoSignature, filePath, accessToken string) ([]byte, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\n\tif err := writer.WriteField(\"advertiserID\", advertiserID); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := writer.WriteField(\"uploadType\", uploadType); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := writer.WriteField(\"videoSignature\", videoSignature); err != nil {\n\t\treturn nil, err\n\t}\n\n\tpart, err := writer.CreateFormFile(\"video\", filepath.Base(filePath))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif _, err := io.Copy(part, file); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := writer.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Set(\"Authorization\", \"Bearer \"+accessToken)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn respBody, nil\n}"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It holds configuration information and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Pointer to configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC server for the specified realm using TCP. Returns the response or error.\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful. Returns the response or accumulated errors.\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a KDC server, including sending data and reading response. Ensures connection is closed when done.",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n)\n\ntype Config struct {\n\tKDCs map[string]map[int]string\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCs[realm]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no KDCs configured for realm %s\", realm)\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar allErrs []error\n\tfor _, addr := range kdcs {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tallErrs = append(allErrs, err)\n\t\t\tcontinue\n\t\t}\n\t\tconn, err := net.DialTCP(\"tcp\", nil, tcpAddr)\n\t\tif err != nil {\n\t\t\tallErrs = append(allErrs, err)\n\t\t\tcontinue\n\t\t}\n\t\tresp, err := c.sendTCP(conn, b)\n\t\tif err != nil {\n\t\t\tallErrs = append(allErrs, err)\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\t\treturn resp, nil\n\t}\n\treturn nil, errors.Join(allErrs...)\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\tconn.Close()\n\treturn buf[:n], nil\n}\n```"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It maintains configuration and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC for the specified realm, handling multiple KDC addresses and error cases\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a single KDC connection",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"net\"\n)\n\ntype Config struct {\n\tKDCAddresses map[string][]string\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCAddresses[realm]\n\tif !ok {\n\t\treturn nil, errors.New(\"no KDC addresses configured for realm\")\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs []string, b []byte) ([]byte, error) {\n\tfor _, addrStr := range kdcs {\n\t\taddr, err := net.ResolveTCPAddr(\"tcp\", addrStr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tconn, err := net.DialTCP(\"tcp\", nil, addr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tresp, err := c.sendTCP(conn, b)\n\t\tif err == nil {\n\t\t\treturn resp, nil\n\t\t}\n\t\tconn.Close()\n\t}\n\treturn nil, errors.New(\"all KDCs failed\")\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tif _, err := conn.Write(b); err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf[:n], nil\n}\n```"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a Git daemon in Go that handles TCP connections for Git operations, including upload-pack and upload-archive services, with connection management, timeout handling, and access control.\n\nStruct Description: The GitDaemon struct represents a TCP server that handles Git protocol connections. It manages client connections, enforces limits, and processes Git service requests.\n\nFields:\n\nctx: [context.Context] - Context for cancellation and timeout propagation  \naddr: [string] - TCP address to listen on  \nfinished: [chan struct{}] - Channel to signal server shutdown  \nconns: [connections] - Track active connections (wrapper around map[net.Conn]struct{})  \ncfg: [*config.Config] - Server configuration  \nbe: [*backend.Backend] - Backend for repository access and authentication  \nwg: [sync.WaitGroup] - Wait group for graceful shutdown  \nonce: [sync.Once] - Ensure cleanup happens once  \nlogger: [*log.Logger] - Structured logger  \ndone: [atomic.Bool] - Atomic flag indicating server shutdown status  \n\nMethods:\n\nNewGitDaemon: [func(context.Context) (*GitDaemon, error)] -> Creates a new GitDaemon instance with context-derived configuration  \nListenAndServe: [func() error] -> Starts listening on configured address and serves connections  \nServe: [func(net.Listener) error] -> Handles incoming connections on provided listener (main server loop)  \nhandleClient: [func(net.Conn)] -> Processes individual client connections (private method)  \n\nHelper Types:\n\nserverConn: [struct] - Wraps net.Conn with timeout handling  \nconnections: [struct] - Thread-safe connection tracking with sync.Map  \n\nKey Behaviors:\n1. Implements exponential backoff for temporary connection errors\n2. Enforces maximum connection limits\n3. Handles Git protocol packets (pktline format)\n4. Validates repository paths and access permissions\n5. Processes both git-upload-pack and git-upload-archive services\n6. Implements idle and maximum timeout handling\n7. Provides clean shutdown via context cancellation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/charmbracelet/log\"\n\t\"github.com/charmbracelet/soft-serve/pkg/access\"\n\t\"github.com/charmbracelet/soft-serve/pkg/backend\"\n\t\"github.com/charmbracelet/soft-serve/pkg/config\"\n\t\"github.com/charmbracelet/soft-serve/pkg/git\"\n\t\"github.com/charmbracelet/soft-serve/pkg/utils\"\n\t\"github.com/go-git/go-git/v5/plumbing/format/pktline\"\n)\n\ntype GitDaemon struct {\n\tctx      context.Context\n\taddr     string\n\tfinished chan struct{}\n\tconns    connections\n\tcfg      *config.Config\n\tbe       *backend.Backend\n\twg       sync.WaitGroup\n\tonce     sync.Once\n\tlogger   *log.Logger\n\tdone     atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := config.FromContext(ctx)\n\taddr := cfg.Git.ListenAddr\n\td := &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     addr,\n\t\tfinished: make(chan struct{}, 1),\n\t\tcfg:      cfg,\n\t\tbe:       backend.FromContext(ctx),\n\t\tconns:    connections{m: make(map[net.Conn]struct{})},\n\t\tlogger:   log.FromContext(ctx).WithPrefix(\"gitdaemon\"),\n\t}\n\treturn d, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\tlistener, err := net.Listen(\"tcp\", d.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn d.Serve(listener)\n}\n\nfunc (d *GitDaemon) Serve(listener net.Listener) error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\n\td.wg.Add(1)\n\tdefer d.wg.Done()\n\tdefer listener.Close()\n\n\tvar tempDelay time.Duration\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.finished:\n\t\t\t\treturn ErrServerClosed\n\t\t\tdefault:\n\t\t\t\td.logger.Debugf(\"git: error accepting connection: %v\", err)\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay > max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif d.conns.Size()+1 >= d.cfg.Git.MaxConnections {\n\t\t\td.logger.Debugf(\"git: max connections reached, closing %s\", conn.RemoteAddr())\n\t\t\td.fatal(conn, git.ErrMaxConnections)\n\t\t\tcontinue\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\td.handleClient(conn)\n\t\t\td.wg.Done()\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tidleTimeout := time.Duration(d.cfg.Git.IdleTimeout) * time.Second\n\tc := &serverConn{\n\t\tConn:          conn,\n\t\tidleTimeout:   idleTimeout,\n\t\tcloseCanceler: cancel,\n\t}\n\tif d.cfg.Git.MaxTimeout > 0 {\n\t\tdur := time.Duration(d.cfg.Git.MaxTimeout) * time.Second\n\t\tc.maxDeadline = time.Now().Add(dur)\n\t}\n\td.conns.Add(c)\n\tdefer func() {\n\t\td.conns.Close(c)\n\t}()\n\n\terrc := make(chan error, 1)\n\n\ts := pktline.NewScanner(c)\n\tgo func() {\n\t\tif !s.Scan() {\n\t\t\tif err := s.Err(); err != nil {\n\t\t\t\terrc <- err\n\t\t\t}\n\t\t}\n\t\terrc <- nil\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tif err := ctx.Err(); err != nil {\n\t\t\td.logger.Debugf(\"git: connection context error: %v\", err)\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t}\n\t\treturn\n\tcase err := <-errc:\n\t\tif nerr, ok := err.(net.Error); ok && nerr.Timeout() {\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t\treturn\n\t\t} else if err != nil {\n\t\t\td.logger.Debugf(\"git: error scanning pktline: %v\", err)\n\t\t\td.fatal(c, git.ErrSystemMalfunction)\n\t\t\treturn\n\t\t}\n\n\t\tline := s.Bytes()\n\t\tsplit := bytes.SplitN(line, []byte{' '}, 2)\n\t\tif len(split) != 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\tservice := git.Service(split[0])\n\t\tswitch service {\n\t\tcase git.UploadPackService:\n\t\tcase git.UploadArchiveService:\n\t\tdefault:\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\topts := bytes.SplitN(split[1], []byte{0}, 3)\n\t\tif len(opts) < 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\thost := strings.TrimPrefix(string(opts[1]), \"host=\")\n\t\textraParams := map[string]string{}\n\n\t\tif len(opts) > 2 {\n\t\t\tbuf := bytes.TrimPrefix(opts[2], []byte{0})\n\t\t\tfor _, o := range bytes.Split(buf, []byte{0}) {\n\t\t\t\topt := string(o)\n\t\t\t\tif opt == \"\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tkv := strings.SplitN(opt, \"=\", 2)\n\t\t\t\tif len(kv) != 2 {\n\t\t\t\t\td.logger.Errorf(\"git: invalid option %q\", opt)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\textraParams[kv[0]] = kv[1]\n\t\t\t}\n\t\t}\n\n\t\tbe := d.be\n\t\tif !be.AllowKeyless(ctx) {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tname := utils.SanitizeRepo(string(opts[0]))\n\t\td.logger.Debugf(\"git: connect %s %s %s\", c.RemoteAddr(), service, name)\n\t\tdefer d.logger.Debugf(\"git: disconnect %s %s %s\", c.RemoteAddr(), service, name)\n\n\t\trepo := name + \".git\"\n\t\treposDir := filepath.Join(d.cfg.DataPath, \"repos\")\n\t\tif err := git.EnsureWithin(reposDir, repo); err != nil {\n\t\t\td.logger.Debugf(\"git: error ensuring repo path: %v\", err)\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tif _, err := d.be.Repository(ctx, repo); err != nil {\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tauth := be.AccessLevel(ctx, name, \"\")\n\t\tif auth < access.ReadOnlyAccess {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tenvs := []string{\n\t\t\t\"SOFT_SERVE_REPO_NAME=\" + name,\n\t\t\t\"SOFT_SERVE_REPO_PATH=\" + filepath.Join(reposDir, repo),\n\t\t\t\"SOFT_SERVE_HOST=\" + host,\n\t\t\t\"SOFT_SERVE_LOG_PATH=\" + filepath.Join(d.cfg.DataPath, \"log\", \"hooks.log\"),\n\t\t}\n\n\t\tif len(extraParams) > 0 {\n\t\t\tvar gitProto string\n\t\t\tfor k, v := range extraParams {\n\t\t\t\tif len(gitProto) > 0 {\n\t\t\t\t\tgitProto += \":\"\n\t\t\t\t}\n\t\t\t\tgitProto += k + \"=\" + v\n\t\t\t}\n\t\t\tenvs = append(envs, \"GIT_PROTOCOL=\"+gitProto)\n\t\t}\n\n\t\tenvs = append(envs, d.cfg.Environ()...)\n\n\t\tcmd := git.ServiceCommand{\n\t\t\tStdin:  c,\n\t\t\tStdout: c,\n\t\t\tStderr: c,\n\t\t\tEnv:    envs,\n\t\t\tDir:    filepath.Join(reposDir, repo),\n\t\t}\n\n\t\tif err := service.Handler(ctx, cmd); err != nil {\n\t\t\td.logger.Debugf(\"git: error handling request: %v\", err)\n\t\t\td.fatal(c, err)\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\ntype GitDaemon struct {\n\tctx        context.Context\n\taddr       string\n\tfinished   chan struct{}\n\tconns      connections\n\tcfg        *config.Config\n\tbe         *backend.Backend\n\twg         sync.WaitGroup\n\tonce       sync.Once\n\tlogger     *log.Logger\n\tdone       atomic.Bool\n}\n\ntype connections struct {\n\tm sync.Map\n}\n\nfunc (c *connections) Add(conn net.Conn) {\n\tc.m.Store(conn, struct{}{})\n}\n\nfunc (c *connections) Remove(conn net.Conn) {\n\tc.m.Delete(conn)\n}\n\nfunc (c *connections) Count() int {\n\tcount := 0\n\tc.m.Range(func(key, value interface{}) bool {\n\t\tcount++\n\t\treturn true\n\t})\n\treturn count\n}\n\ntype serverConn struct {\n\tnet.Conn\n\tctx context.Context\n}\n\nfunc (sc *serverConn) Read(b []byte) (n int, err error) {\n\tfor {\n\t\tselect {\n\t\tcase <-sc.ctx.Done():\n\t\t\treturn 0, sc.ctx.Err()\n\t\tdefault:\n\t\t\tn, err = sc.Conn.Read(b)\n\t\t\tif err != nil {\n\t\t\t\treturn n, err\n\t\t\t}\n\t\t\treturn n, nil\n\t\t}\n\t}\n}\n\nfunc (sc *serverConn) Write(b []byte) (n int, err error) {\n\tfor {\n\t\tselect {\n\t\tcase <-sc.ctx.Done():\n\t\t\treturn 0, sc.ctx.Err()\n\t\tdefault:\n\t\t\tn, err = sc.Conn.Write(b)\n\t\t\tif err != nil {\n\t\t\t\treturn n, err\n\t\t\t}\n\t\t\treturn n, nil\n\t\t}\n\t}\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := config.NewConfig()\n\tbe := backend.NewBackend(cfg)\n\tlogger := log.New(os.Stderr, \"git-daemon: \", log.LstdFlags)\n\treturn &GitDaemon{\n\t\tctx:    ctx,\n\t\tcfg:    cfg,\n\t\tbe:     be,\n\t\tlogger: logger,\n\t\tconns:  connections{},\n\t}, nil\n}\n\nfunc (gd *GitDaemon) ListenAndServe() error {\n\tlistener, err := net.Listen(\"tcp\", gd.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn gd.Serve(listener)\n}\n\nfunc (gd *GitDaemon) Serve(lis net.Listener) error {\n\tfor {\n\t\tselect {\n\t\tcase <-gd.ctx.Done():\n\t\t\treturn gd.ctx.Err()\n\t\tdefault:\n\t\t\tconn, err := lis.Accept()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif gd.conns.Count() >= gd.cfg.MaxConnections {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tgd.conns.Add(conn)\n\t\t\tgd.wg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer gd.wg.Done()\n\t\t\t\tdefer gd.conns.Remove(conn)\n\t\t\t\tgd.handleClient(conn)\n\t\t\t}()\n\t\t}\n\t}\n}\n\nfunc (gd *GitDaemon) handleClient(conn net.Conn) {\n\tsc := &serverConn{Conn: conn, ctx: gd.ctx}\n\tdefer sc.Close()\n\n\tservice, path, err := gd.readServiceRequest(sc)\n\tif err != nil {\n\t\tgd.logger.Printf(\"error reading service request: %v\", err)\n\t\treturn\n\t}\n\n\tif !gd.be.Authenticate(path, sc) {\n\t\tsc.Write([]byte(\"access denied\\n\"))\n\t\treturn\n\t}\n\n\tswitch service {\n\tcase \"upload-pack\":\n\t\tgd.handleUploadPack(sc, path)\n\tcase \"upload-archive\":\n\t\tgd.handleUploadArchive(sc, path)\n\tdefault:\n\t\tsc.Write([]byte(\"unsupported service\\n\"))\n\t}\n}\n\nfunc (gd *GitDaemon) readServiceRequest(conn net.Conn) (string, string, error) {\n\tlenBuf := [4]byte{}\n\tif _, err := io.ReadFull(conn, lenBuf[:]); err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tlength := binary.BigEndian.Uint32(lenBuf[:])\n\tif length == 0 {\n\t\treturn \"\", \"\", io.EOF\n\t}\n\tdata := make([]byte, length-4)\n\tif _, err := io.ReadFull(conn, data); err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tparts := strings.SplitN(string(data), \" \", 2)\n\tif len(parts) < 2 {\n\t\treturn \"\", \"\", fmt.Errorf(\"invalid service request\")\n\t}\n\treturn parts[0], parts[1], nil\n}\n\nfunc (gd *GitDaemon) handleUploadPack(conn net.Conn, path string) {\n\tpackData, err := gd.be.GetPack(path)\n\tif err != nil {\n\t\tconn.Write([]byte(\"error fetching pack\\n\"))\n\t\treturn\n\t}\n\tlength := uint32(len(packData) + 4)\n\tbinary.BigEndian.PutUint32([]byte{0, 0, 0, 0}, length)\n\tconn.Write([]byte{0, 0, 0, 0})\n\tconn.Write(packData)\n}\n\nfunc (gd *GitDaemon) handleUploadArchive(conn net.Conn, path string) {\n\tarchiveData, err := gd.be.GetArchive(path)\n\tif err != nil {\n\t\tconn.Write([]byte(\"error fetching archive\\n\"))\n\t\treturn\n\t}\n\tlength := uint32(len(archiveData) + 4)\n\tbinary.BigEndian.PutUint32([]byte{0, 0, 0, 0}, length)\n\tconn.Write([]byte{0, 0, 0, 0})\n\tconn.Write(archiveData)\n}\n```"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management. The server should be able to start, accept connections, read data from clients, and properly shut down while cleaning up resources.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management capabilities. It maintains state about active connections and provides methods to start, serve, and manage the server lifecycle.\n\nFields:\n\nAddr: [string] - The network address to listen on (e.g., \":8080\")\nNet: [string] - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: [Handler] - The handler for processing incoming requests\nReadTimeout: [time.Duration] - Maximum duration for reading a request\nWriteTimeout: [time.Duration] - Maximum duration for writing a response\nIdleTimeout: [func() time.Duration] - Function returning idle connection timeout\nlock: [sync.RWMutex] - Protects concurrent access to server state\nstarted: [bool] - Indicates if server is running\nshutdown: [chan struct{}] - Channel for shutdown signaling\nconns: [map[net.Conn]struct{}] - Map of active connections\n\nMethods:\n\nListenAndServe: [Name]() -> [error] - Starts the server and begins accepting connections\nserveTCP: [Name](net.Listener) -> [error] - Main TCP serving loop that accepts connections\nserveTCPConn: [Name](*sync.WaitGroup, net.Conn) -> [] - Handles an individual TCP connection\nreadTCP: [Name](net.Conn, time.Duration) -> ([]byte, error) - Reads data from a TCP connection\ninit: [Name]() -> [] - Initializes server resources\nisStarted: [Name]() -> [bool] - Checks if server is running\ngetIdleTimeout: [Name]() -> [time.Duration] - Returns idle timeout duration\ngetReadTimeout: [Name]() -> [time.Duration] - Returns read timeout duration",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := net.Listen(srv.Net, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer wg.Done()\n\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := srv.getIdleTimeout()\n\n\tfor srv.isStarted() {\n\t\tm, err := srv.readTCP(rw, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n}\n\nfunc (srv *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\tvar length uint16\n\tif err := binary.Read(conn, binary.BigEndian, &length); err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := make([]byte, length)\n\tif _, err := io.ReadFull(conn, m); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn m, nil\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getIdleTimeout() time.Duration {\n\tif srv.IdleTimeout != nil {\n\t\treturn srv.IdleTimeout()\n\t}\n\treturn tcpIdleTimeout\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"reflect\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler func(net.Conn) error\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tHandler     Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown    chan struct{}\n\tconns       map[net.Conn]struct{}\n}\n\nfunc (s *Server) init() {\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getIdleTimeout() time.Duration {\n\treturn s.IdleTimeout()\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\treturn s.ReadTimeout\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.isStarted() {\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgo func() {\n\t\t<-s.shutdown\n\t\tlistener.Close()\n\t}()\n\n\treturn s.serveTCP(listener)\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif !strings.Contains(err.Error(), \"use of closed network connection\") {\n\t\t\t\t\tlog.Printf(\"Accept error: %v\", err)\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ts.lock.Lock()\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\n\t\t\tgo s.serveTCPConn(conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\treadTimeout := s.getReadTimeout()\n\twriteTimeout := s.WriteTimeout\n\tconn.SetReadDeadline(time.Now().Add(readTimeout))\n\tconn.SetWriteDeadline(time.Now().Add(writeTimeout))\n\n\tidleTimeout := s.getIdleTimeout()\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn\n\t\t\tcase <-time.After(idleTimeout):\n\t\t\t\tconn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tdata, err := s.readTCP(conn, readTimeout)\n\tif err != nil {\n\t\tlog.Printf(\"Read error: %v\", err)\n\t\treturn\n\t}\n\n\tif err := s.Handler(conn); err != nil {\n\t\tlog.Printf(\"Handler error: %v\", err)\n\t}\n}\n\nfunc (s *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tdeadline := time.Now().Add(timeout)\n\tconn.SetReadDeadline(deadline)\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tconn.SetReadDeadline(time.Time{})\n\t\treturn nil, err\n\t}\n\tconn.SetReadDeadline(time.Time{})\n\treturn buf[:n], nil\n}\n```"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Go struct that manages multiple TCP and UDP listeners for a proxy server, with methods to register and handle incoming connections.\n\nStruct Description: The Proxy struct manages network listeners for UDP, TCP, and local DNS-over-HTTPS (DoH) connections. It provides methods to create listeners from addresses and handle incoming connections through separate goroutines.\n\nFields:\nudpListeners: []*net.UDPConn - Slice of active UDP listeners\ntcpListeners: []*net.TCPListener - Slice of active TCP listeners\nlocalDoHListeners: []*net.TCPListener - Slice of active local DoH TCP listeners\n\nMethods:\nregisterUDPListener(*net.UDPConn) -> void - Adds a UDP listener to the udpListeners slice\nregisterTCPListener(*net.TCPListener) -> void - Adds a TCP listener to the tcpListeners slice\nregisterLocalDoHListener(*net.TCPListener) -> void - Adds a local DoH listener to the localDoHListeners slice\nudpListenerFromAddr(*net.UDPAddr) -> error - Creates and registers a UDP listener from address\ntcpListenerFromAddr(*net.TCPAddr) -> error - Creates and registers a TCP listener from address\nlocalDoHListenerFromAddr(*net.TCPAddr) -> error - Creates and registers a local DoH listener from address\nudpListener(*net.UDPConn) -> void - Handles incoming UDP connections (runs in goroutine)\ntcpListener(*net.TCPListener) -> void - Handles incoming TCP connections (runs in goroutine)\nstartAcceptingClients() -> void - Starts all registered listeners in separate goroutines",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n)\n\ntype Proxy struct {\n\tudpListeners    []*net.UDPConn\n\ttcpListeners    []*net.TCPListener\n\tlocalDoHListeners []*net.TCPListener\n}\n\nfunc (proxy *Proxy) registerUDPListener(conn *net.UDPConn) {\n\tproxy.udpListeners = append(proxy.udpListeners, conn)\n}\n\nfunc (proxy *Proxy) registerTCPListener(listener *net.TCPListener) {\n\tproxy.tcpListeners = append(proxy.tcpListeners, listener)\n}\n\nfunc (proxy *Proxy) registerLocalDoHListener(listener *net.TCPListener) {\n\tproxy.localDoHListeners = append(proxy.localDoHListeners, listener)\n}\n\nfunc (proxy *Proxy) udpListenerFromAddr(listenAddr *net.UDPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"udp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"udp4\"\n\t}\n\tclientPc, err := net.ListenUDP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerUDPListener(clientPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) tcpListenerFromAddr(listenAddr *net.TCPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"tcp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"tcp4\"\n\t}\n\tacceptPc, err := net.ListenTCP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerTCPListener(acceptPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) localDoHListenerFromAddr(listenAddr *net.TCPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"tcp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"tcp4\"\n\t}\n\tacceptPc, err := net.ListenTCP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerLocalDoHListener(acceptPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) udpListener(clientPc *net.UDPConn) {\n\tdefer clientPc.Close()\n\tfor {\n\t\tbuffer := make([]byte, MaxDNSPacketSize-1)\n\t\tlength, clientAddr, err := clientPc.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tpacket := buffer[:length]\n\t\tgo proxy.processIncomingQuery(\"udp\", \"udp\", packet, &clientAddr, clientPc, time.Now(), false)\n\t}\n}\n\nfunc (proxy *Proxy) tcpListener(acceptPc *net.TCPListener) {\n\tdefer acceptPc.Close()\n\tfor {\n\t\tclientPc, err := acceptPc.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo func() {\n\t\t\tdefer clientPc.Close()\n\t\t\tif err := clientPc.SetDeadline(time.Now().Add(proxy.timeout)); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tstart := time.Now()\n\t\t\tpacket, err := ReadPrefixed(&clientPc)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tclientAddr := clientPc.RemoteAddr()\n\t\t\tproxy.processIncomingQuery(\"tcp\", \"tcp\", packet, &clientAddr, clientPc, start, false)\n\t\t}()\n\t}\n}\n\nfunc (proxy *Proxy) startAcceptingClients() {\n\tfor _, clientPc := range proxy.udpListeners {\n\t\tgo proxy.udpListener(clientPc)\n\t}\n\tproxy.udpListeners = nil\n\tfor _, acceptPc := range proxy.tcpListeners {\n\t\tgo proxy.tcpListener(acceptPc)\n\t}\n\tproxy.tcpListeners = nil\n\tfor _, acceptPc := range proxy.localDoHListeners {\n\t\tgo proxy.localDoHListener(acceptPc)\n\t}\n\tproxy.localDoHListeners = nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "type Proxy struct {\n\tudpListeners      []*net.UDPConn\n\ttcpListeners      []*net.TCPListener\n\tlocalDoHListeners []*net.TCPListener\n}\n\nfunc (p *Proxy) registerUDPListener(conn *net.UDPConn) {\n\tp.udpListeners = append(p.udpListeners, conn)\n}\n\nfunc (p *Proxy) registerTCPListener(listener *net.TCPListener) {\n\tp.tcpListeners = append(p.tcpListeners, listener)\n}\n\nfunc (p *Proxy) registerLocalDoHListener(listener *net.TCPListener) {\n\tp.localDoHListeners = append(p.localDoHListeners, listener)\n}\n\nfunc (p *Proxy) udpListenerFromAddr(addr *net.UDPAddr) error {\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerUDPListener(conn)\n\treturn nil\n}\n\nfunc (p *Proxy) tcpListenerFromAddr(addr *net.TCPAddr) error {\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerTCPListener(listener)\n\treturn nil\n}\n\nfunc (p *Proxy) localDoHListenerFromAddr(addr *net.TCPAddr) error {\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerLocalDoHListener(listener)\n\treturn nil\n}\n\nfunc (p *Proxy) udpListener(conn *net.UDPConn) {\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tgo func(b []byte, a *net.UDPAddr) {\n\t\t\t// Handle UDP packet\n\t\t}(buffer[:n], addr)\n\t}\n}\n\nfunc (p *Proxy) tcpListener(listener *net.TCPListener) {\n\tfor {\n\t\tconn, err := listener.AcceptTCP()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tgo func(c *net.TCPConn) {\n\t\t\t// Handle TCP connection\n\t\t}(conn)\n\t}\n}\n\nfunc (p *Proxy) startAcceptingClients() {\n\tfor _, l := range p.udpListeners {\n\t\tgo p.udpListener(l)\n\t}\n\tfor _, l := range p.tcpListeners {\n\t\tgo p.tcpListener(l)\n\t}\n\tfor _, l := range p.localDoHListeners {\n\t\tgo p.tcpListener(l)\n\t}\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a Go struct that manages HTTP requests to interact with a community persistence service, including authentication and community creation functionality.\n\nStruct Description: The Manager struct provides methods to interact with a community persistence API, handling authentication and request/response processing. It maintains connection details and context for request cancellation.\n\nFields:\nurl: string - Base URL of the community persistence service\nusername: string - Username for basic authentication\npassword: string - Password for basic authentication\nctx: context.Context - Context for request cancellation and timeouts\n\nMethods:\nNewManager: (url string, username string, password string, ctx context.Context) -> *Manager - Constructor that initializes a new Manager instance with connection details and context\nCreatePersistentCommunity: (community string, password string) -> (*persisters.Community, error) - Creates a new persistent community by making an authenticated POST request to the service, returning the created community or an error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tjsoniter \"github.com/json-iterator/go\"\n\t\"github.com/pojntfx/weron/internal/persisters\"\n)\n\nvar (\n\tjson = jsoniter.ConfigCompatibleWithStandardLibrary\n)\n\ntype Manager struct {\n\turl      string\n\tusername string\n\tpassword string\n\tctx      context.Context\n}\n\nfunc NewManager(\n\turl string,\n\tusername string,\n\tpassword string,\n\tctx context.Context,\n) *Manager {\n\treturn &Manager{\n\t\turl:      url,\n\t\tusername: username,\n\t\tpassword: password,\n\t\tctx:      ctx,\n\t}\n}\n\nfunc (m *Manager) CreatePersistentCommunity(community string, password string) (*persisters.Community, error) {\n\thc := &http.Client{}\n\n\tu, err := url.Parse(m.url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tq := u.Query()\n\tq.Set(\"community\", community)\n\tq.Set(\"password\", password)\n\tu.RawQuery = q.Encode()\n\n\treq, err := http.NewRequest(http.MethodPost, u.String(), http.NoBody)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(m.username, m.password)\n\n\tres, err := hc.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif res.Body != nil {\n\t\tdefer res.Body.Close()\n\t}\n\tif res.StatusCode != http.StatusOK {\n\t\treturn nil, errors.New(res.Status)\n\t}\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc := persisters.Community{}\n\tif err := json.Unmarshal(body, &c); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &c, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"bytes\"\n\t\"persisters\"\n)\n\ntype Manager struct {\n\turl      string\n\tusername string\n\tpassword string\n\tctx      context.Context\n}\n\nfunc NewManager(url string, username string, password string, ctx context.Context) *Manager {\n\treturn &Manager{\n\t\turl:      url,\n\t\tusername: username,\n\t\tpassword: password,\n\t\tctx:      ctx,\n\t}\n}\n\nfunc (m *Manager) CreatePersistentCommunity(community string, password string) (*persisters.Community, error) {\n\tendpoint := fmt.Sprintf(\"%s/communities\", m.url)\n\treq, err := http.NewRequest(\"POST\", endpoint, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(m.username, m.password)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq = req.WithContext(m.ctx)\n\n\tbody := &struct {\n\t\tCommunity string `json:\"community\"`\n\t\tPassword  string `json:\"password\"`\n\t}{\n\t\tCommunity: community,\n\t\tPassword:  password,\n\t}\n\tjsonBody, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Body = io.NopCloser(bytes.NewBuffer(jsonBody))\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tvar errorResp struct {\n\t\t\tError string `json:\"error\"`\n\t\t}\n\t\tif err := json.NewDecoder(resp.Body).Decode(&errorResp); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn nil, fmt.Errorf(\"error creating community: %s\", errorResp.Error)\n\t}\n\n\tvar result persisters.Community\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &result, nil\n}"
  },
  {
    "Task_id": 190,
    "Instruction": "Task Description: Implement a high-performance TCP server in Go using kqueue for event notification, capable of handling multiple client connections efficiently with non-blocking I/O operations.\n\nStruct Description: The `poller` struct manages a single kqueue instance and handles all I/O operations for its assigned connections. It works as part of an engine (`g *Engine`) to process network events either as a listener (accepting new connections) or as a worker (handling read/write operations).\n\nFields:\n\ng: *Engine - Reference to the parent engine managing all pollers\nmux: sync.Mutex - Mutex for thread-safe access to eventList\nkfd: int - Kqueue file descriptor\nevtfd: int - Event file descriptor (unused in current implementation)\nindex: int - Poller's index in the engine's poller array\nshutdown: bool - Flag to control poller shutdown\nlistener: net.Listener - TCP listener (only for listener pollers)\nisListener: bool - Flag indicating if this is a listener poller\nunixSockAddr: string - Unix socket address (if using UNIX domain sockets)\nReadBuffer: []byte - Buffer for read operations\npollType: string - Type identifier (\"LISTENER\" or \"POLLER\")\neventList: []syscall.Kevent_t - Pending kqueue events to be processed\n\nMethods:\n\naddConn(c *Conn) -> error - Adds a new connection to the poller and registers it for read events\naddDialer(c *Conn) -> error - Adds a dialer connection and registers it for read/write events\ngetConn(fd int) -> *Conn - Retrieves a connection by file descriptor\ndeleteConn(c *Conn) -> - Removes a connection from tracking\ntrigger() -> - Wakes up the kqueue loop\naddRead(fd int) -> - Registers a file descriptor for read events\nresetRead(fd int) -> - Unregisters write events for a file descriptor\nmodWrite(fd int) -> - Registers a file descriptor for write events\naddReadWrite(fd int) -> - Registers a file descriptor for both read and write events\nreadWrite(ev *syscall.Kevent_t) -> - Processes read/write events from kqueue\nstart() -> - Starts the poller's main loop (either acceptorLoop or readWriteLoop)\nacceptorLoop() -> - Listener's main loop that accepts new connections\nreadWriteLoop() -> - Worker's main loop that processes I/O events\nstop() -> - Stops the poller and cleans up resources\nnewPoller(g *Engine, isListener bool, index int) -> (*poller, error) - Constructor that creates either a listener or worker poller",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"runtime\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/lesismal/nbio/logging\"\n)\n\ntype poller struct {\n\tmux sync.Mutex\n\n\tg *Engine\n\n\tkfd   int\n\tevtfd int\n\n\tindex int\n\n\tshutdown bool\n\n\tlistener     net.Listener\n\tisListener   bool\n\tunixSockAddr string\n\n\tReadBuffer []byte\n\n\tpollType string\n\n\teventList []syscall.Kevent_t\n}\n\nfunc (p *poller) addConn(c *Conn) error {\n\tfd := c.fd\n\tif fd >= len(p.g.connsUnix) {\n\t\terr := fmt.Errorf(\"too many open files, fd[%d] >= MaxOpenFiles[%d]\",\n\t\t\tfd,\n\t\t\tlen(p.g.connsUnix))\n\t\tc.closeWithError(err)\n\t\treturn err\n\t}\n\tc.p = p\n\tif c.typ != ConnTypeUDPServer {\n\t\tp.g.onOpen(c)\n\t} else {\n\t\tp.g.onUDPListen(c)\n\t}\n\tp.g.connsUnix[fd] = c\n\tp.addRead(fd)\n\treturn nil\n}\n\nfunc (p *poller) addDialer(c *Conn) error {\n\tfd := c.fd\n\tif fd >= len(p.g.connsUnix) {\n\t\terr := fmt.Errorf(\"too many open files, fd[%d] >= MaxOpenFiles[%d]\",\n\t\t\tfd,\n\t\t\tlen(p.g.connsUnix),\n\t\t)\n\t\tc.closeWithError(err)\n\t\treturn err\n\t}\n\tc.p = p\n\tp.g.connsUnix[fd] = c\n\tc.isWAdded = true\n\tp.addReadWrite(fd)\n\treturn nil\n}\n\nfunc (p *poller) getConn(fd int) *Conn {\n\treturn p.g.connsUnix[fd]\n}\n\nfunc (p *poller) deleteConn(c *Conn) {\n\tif c == nil {\n\t\treturn\n\t}\n\tfd := c.fd\n\n\tif c.typ != ConnTypeUDPClientFromRead {\n\t\tif c == p.g.connsUnix[fd] {\n\t\t\tp.g.connsUnix[fd] = nil\n\t\t}\n\t}\n\n\tif c.typ != ConnTypeUDPServer {\n\t\tp.g.onClose(c, c.closeErr)\n\t}\n}\n\nfunc (p *poller) trigger() {\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{{Ident: 0, Filter: syscall.EVFILT_USER, Fflags: syscall.NOTE_TRIGGER}}, nil, nil)\n}\n\nfunc (p *poller) addRead(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_READ})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) resetRead(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_DELETE, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) modWrite(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) addReadWrite(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_READ})\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) readWrite(ev *syscall.Kevent_t) {\n\tif ev.Flags&syscall.EV_DELETE > 0 {\n\t\treturn\n\t}\n\tfd := int(ev.Ident)\n\tc := p.getConn(fd)\n\tif c != nil {\n\t\tif ev.Filter == syscall.EVFILT_READ {\n\t\t\tif p.g.onRead == nil {\n\t\t\t\tfor {\n\t\t\t\t\tbuffer := p.g.borrow(c)\n\t\t\t\t\trc, n, err := c.ReadAndGetConn(buffer)\n\t\t\t\t\tif n > 0 {\n\t\t\t\t\t\tp.g.onData(rc, buffer[:n])\n\t\t\t\t\t}\n\t\t\t\t\tp.g.payback(c, buffer)\n\t\t\t\t\tif errors.Is(err, syscall.EINTR) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif errors.Is(err, syscall.EAGAIN) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (err != nil || n == 0) && ev.Flags&syscall.EV_DELETE == 0 {\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\terr = io.EOF\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc.closeWithError(err)\n\t\t\t\t\t}\n\t\t\t\t\tif n < len(buffer) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tp.g.onRead(c)\n\t\t\t}\n\n\t\t\tif ev.Flags&syscall.EV_EOF != 0 {\n\t\t\t\tif c.onConnected == nil {\n\t\t\t\t\tc.flush()\n\t\t\t\t} else {\n\t\t\t\t\tc.onConnected(c, nil)\n\t\t\t\t\tc.onConnected = nil\n\t\t\t\t\tc.resetRead()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ev.Filter == syscall.EVFILT_WRITE {\n\t\t\tif c.onConnected == nil {\n\t\t\t\tc.flush()\n\t\t\t} else {\n\t\t\t\tc.resetRead()\n\t\t\t\tc.onConnected(c, nil)\n\t\t\t\tc.onConnected = nil\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) start() {\n\tif p.g.LockPoller {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\tdefer p.g.Done()\n\n\tif p.isListener {\n\t\tp.acceptorLoop()\n\t} else {\n\t\tdefer syscall.Close(p.kfd)\n\t\tp.readWriteLoop()\n\t}\n}\n\nfunc (p *poller) acceptorLoop() {\n\tif p.g.LockListener {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\n\tp.shutdown = false\n\tfor !p.shutdown {\n\t\tconn, err := p.listener.Accept()\n\t\tif err == nil {\n\t\t\tvar c *Conn\n\t\t\tc, err = NBConn(conn)\n\t\t\tif err != nil {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tp.g.pollers[c.Hash()%len(p.g.pollers)].addConn(c)\n\t\t} else {\n\t\t\tvar ne net.Error\n\t\t\tif ok := errors.As(err, &ne); ok && ne.Timeout() {\n\t\t\t\ttime.Sleep(time.Second / 20)\n\t\t\t} else {\n\t\t\t\tif !p.shutdown {\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) readWriteLoop() {\n\tif p.g.LockPoller {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\n\tevents := make([]syscall.Kevent_t, 1024)\n\tvar changes []syscall.Kevent_t\n\n\tp.shutdown = false\n\tfor !p.shutdown {\n\t\tp.mux.Lock()\n\t\tchanges = p.eventList\n\t\tp.eventList = nil\n\t\tp.mux.Unlock()\n\t\tn, err := syscall.Kevent(p.kfd, changes, events, nil)\n\t\tif err != nil && !errors.Is(err, syscall.EINTR) && !errors.Is(err, syscall.EBADF) && !errors.Is(err, syscall.ENOENT) && !errors.Is(err, syscall.EINVAL) {\n\t\t\treturn\n\t\t}\n\n\t\tfor i := 0; i < n; i++ {\n\t\t\tswitch int(events[i].Ident) {\n\t\t\tcase p.evtfd:\n\t\t\tdefault:\n\t\t\t\tp.readWrite(&events[i])\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) stop() {\n\tp.shutdown = true\n\tif p.listener != nil {\n\t\tp.listener.Close()\n\t\tif p.unixSockAddr != \"\" {\n\t\t\tos.Remove(p.unixSockAddr)\n\t\t}\n\t}\n\tp.trigger()\n}\n\nfunc newPoller(g *Engine, isListener bool, index int) (*poller, error) {\n\tif isListener {\n\t\tif len(g.Addrs) == 0 {\n\t\t\tpanic(\"invalid listener num\")\n\t\t}\n\n\t\taddr := g.Addrs[index%len(g.Addrs)]\n\t\tln, err := g.Listen(g.Network, addr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tp := &poller{\n\t\t\tg:          g,\n\t\t\tindex:      index,\n\t\t\tlistener:   ln,\n\t\t\tisListener: isListener,\n\t\t\tpollType:   \"LISTENER\",\n\t\t}\n\t\tif g.Network == \"unix\" {\n\t\t\tp.unixSockAddr = addr\n\t\t}\n\n\t\treturn p, nil\n\t}\n\n\tfd, err := syscall.Kqueue()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, err = syscall.Kevent(fd, []syscall.Kevent_t{{\n\t\tIdent:  0,\n\t\tFilter: syscall.EVFILT_USER,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_CLEAR,\n\t}}, nil, nil)\n\n\tif err != nil {\n\t\tsyscall.Close(fd)\n\t\treturn nil, err\n\t}\n\n\tp := &poller{\n\t\tg:          g,\n\t\tkfd:        fd,\n\t\tindex:      index,\n\t\tisListener: isListener,\n\t\tpollType:   \"POLLER\",\n\t}\n\n\treturn p, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"syscall\"\n\t\"sync\"\n)\n\ntype poller struct {\n\tg         *Engine\n\tmux       sync.Mutex\n\tkfd       int\n\tevtfd     int\n\tindex     int\n\tshutdown  bool\n\tlistener  net.Listener\n\tisListener bool\n\tunixSockAddr string\n\tReadBuffer []byte\n\tpollType  string\n\teventList []syscall.Kevent_t\n}\n\nfunc (p *poller) addConn(c *Conn) error {\n\tp.mux.Lock()\n\tdefer p.mux.Unlock()\n\tkev := syscall.Kevent_t{\n\t\tIdent:  uint64(c.fd),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\t_, err := syscall.Kevent(p.kfd, []syscall.Kevent_t{kev}, nil, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.g.connections[c.fd] = c\n\treturn nil\n}\n\nfunc (p *poller) addDialer(c *Conn) error {\n\tp.mux.Lock()\n\tdefer p.mux.Unlock()\n\tkev := syscall.Kevent_t{\n\t\tIdent:  uint64(c.fd),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\t_, err := syscall.Kevent(p.kfd, []syscall.Kevent_t{kev}, nil, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tkev2 := syscall.Kevent_t{\n\t\tIdent:  uint64(c.fd),\n\t\tFilter: syscall.EVFILT_WRITE,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\t_, err = syscall.Kevent(p.kfd, []syscall.Kevent_t{kev2}, nil, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.g.connections[c.fd] = c\n\treturn nil\n}\n\nfunc (p *poller) getConn(fd int) *Conn {\n\tp.mux.Lock()\n\tdefer p.mux.Unlock()\n\treturn p.g.connections[fd]\n}\n\nfunc (p *poller) deleteConn(c *Conn) {\n\tp.mux.Lock()\n\tdefer p.mux.Unlock()\n\tdelete(p.g.connections, c.fd)\n}\n\nfunc (p *poller) trigger() {\n\tsyscall.Write(p.evtfd, []byte{1})\n}\n\nfunc (p *poller) addRead(fd int) {\n\tkev := syscall.Kevent_t{\n\t\tIdent:  uint64(fd),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{kev}, nil, nil)\n}\n\nfunc (p *poller) resetRead(fd int) {\n\tkev := syscall.Kevent_t{\n\t\tIdent:  uint64(fd),\n\t\tFilter: syscall.EVFILT_WRITE,\n\t\tFlags:  syscall.EV_DELETE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{kev}, nil, nil)\n}\n\nfunc (p *poller) modWrite(fd int) {\n\tkev := syscall.Kevent_t{\n\t\tIdent:  uint64(fd),\n\t\tFilter: syscall.EVFILT_WRITE,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{kev}, nil, nil)\n}\n\nfunc (p *poller) addReadWrite(fd int) {\n\tkev := syscall.Kevent_t{\n\t\tIdent:  uint64(fd),\n\t\tFilter: syscall.EVFILT_READ,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{kev}, nil, nil)\n\tkev2 := syscall.Kevent_t{\n\t\tIdent:  uint64(fd),\n\t\tFilter: syscall.EVFILT_WRITE,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_ENABLE,\n\t}\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{kev2}, nil, nil)\n}\n\nfunc (p *poller) readWrite(ev *syscall.Kevent_t, c *Conn) {\n\tif ev.Filter == syscall.EVFILT_READ {\n\t\tn, err := syscall.Read(c.fd, p.ReadBuffer)\n\t\tif n > 0 {\n\t\t\t// Process read data\n\t\t\tc.buf.Write(p.ReadBuffer[:n])\n\t\t\tp.modWrite(c.fd)\n\t\t}\n\t\tif err != nil {\n\t\t\tp.deleteConn(c)\n\t\t}\n\t} else if ev.Filter == syscall.EVFILT_WRITE {\n\t\t// Process write data\n\t\tn, err := syscall.Write(c.fd, c.buf.Bytes())\n\t\tif n > 0 {\n\t\t\tc.buf.Next(n)\n\t\t}\n\t\tif err != nil {\n\t\t\tp.deleteConn(c)\n\t\t}\n\t}\n}\n\nfunc (p *poller) start() {\n\tif p.isListener {\n\t\tp.acceptorLoop()\n\t} else {\n\t\tp.readWriteLoop()\n\t}\n}\n\nfunc (p *poller) acceptorLoop() {\n\tfor !p.shutdown {\n\t\tconn, err := p.listener.Accept()\n\t\tif err != nil {\n\t\t\tif p.shutdown {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tc := &Conn{fd: conn.Fd()}\n\t\tif err := p.addConn(c); err != nil {\n\t\t\tconn.Close()\n\t\t}\n\t}\n}\n\nfunc (p *poller) readWriteLoop() {\n\tvar events [128]syscall.Kevent_t\n\tfor !p.shutdown {\n\t\tn, err := syscall.Kevent(p.kfd, nil, events[:], nil)\n\t\tif err != nil {\n\t\t\tif err == syscall.EINTR {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tfor i := 0; i < n; i++ {\n\t\t\tev := &events[i]\n\t\t\tfd := int(ev.Ident)\n\t\t\tc := p.getConn(fd)\n\t\t\tif c != nil {\n\t\t\t\tp.readWrite(ev, c)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) stop() {\n\tp.shutdown = true\n\tsyscall.Close(p.kfd)\n\tif p.listener != nil {\n\t\tp.listener.Close()\n\t}\n}\n\nfunc newPoller(g *Engine, isListener bool, index int) (*poller, error) {\n\tkfd, err := syscall.Kqueue()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tevtfd, err := syscall.Open(\"/dev/null\", syscall.O_WRONLY, 0)\n\tif err != nil {\n\t\tsyscall.Close(kfd)\n\t\treturn nil, err\n\t}\n\treturn &poller{\n\t\tg:         g,\n\t\tkfd:       kfd,\n\t\tevtfd:     evtfd,\n\t\tindex:     index,\n\t\tisListener: isListener,\n\t\tpollType:  \"POLLER\",\n\t\tReadBuffer: make([]byte, 4096),\n\t}, nil\n}\n```"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Implement a TCP listener in Go that supports different listening methods (normal, iptables, and socket reuse) for handling incoming client connections, performing protocol negotiation, and managing client tasks.\n\nStruct Description: The Listen struct represents a TCP listener with configurable listening methods and address. It provides methods to start listening using different techniques and handle client connections.\n\nFields:\nmethod: [int] - Specifies the listening method (NORMAL, IPTABLES, or SOREUSE)\naddr: [string] - The address and port to listen on\n\nMethods:\nnewListen: [Name](method int, addr string) -> *Listen - Creates and returns a new Listen instance with the specified method and address\nstart: [Name](mgr *manager.Manager, options *initial.Options) -> void - Starts the listener in a goroutine using the configured method\nnormalListen: [Name](mgr *manager.Manager, options *initial.Options) -> void - Implements standard TCP listening and client handling\nsoReuseListen: [Name](mgr *manager.Manager, options *initial.Options) -> void - Implements socket reuse listening with additional authentication and proxy capabilities",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/libp2p/go-reuseport\"\n)\n\ntype Listen struct {\n\tmethod int\n\taddr   string\n}\n\nfunc newListen(method int, addr string) *Listen {\n\tlisten := new(Listen)\n\tlisten.method = method\n\tlisten.addr = addr\n\treturn listen\n}\n\nfunc (listen *Listen) start(mgr *manager.Manager, options *initial.Options) {\n\tswitch listen.method {\n\tcase NORMAL:\n\t\tgo listen.normalListen(mgr, options)\n\tcase IPTABLES:\n\t\tgo listen.iptablesListen(mgr, options)\n\tcase SOREUSE:\n\t\tgo listen.soReuseListen(mgr, options)\n\t}\n}\n\nfunc (listen *Listen) normalListen(mgr *manager.Manager, options *initial.Options) {\n\tlistener, err := net.Listen(\"tcp\", listen.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[*] Error occurred: %s\\n\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tparam := new(protocol.NegParam)\n\t\tparam.Conn = conn\n\t\tproto := protocol.NewDownProto(param)\n\t\tproto.SNegotiate()\n\n\t\trMessage := protocol.NewDownMsg(conn, global.G_Component.Secret, protocol.ADMIN_UUID)\n\t\tfHeader, fMessage, err := protocol.DestructMessage(rMessage)\n\t\tif err != nil {\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\tif fHeader.MessageType == protocol.HI {\n\t\t\tmmess := fMessage.(*protocol.HIMess)\n\t\t\tif mmess.Greeting == \"Shhh...\" && mmess.IsAdmin == 0 {\n\t\t\t\tchildrenTask := &manager.ChildrenTask{\n\t\t\t\t\tMode: manager.C_NEWCHILD,\n\t\t\t\t\tUUID: mmess.UUID,\n\t\t\t\t\tConn: conn,\n\t\t\t\t}\n\t\t\t\tmgr.ChildrenManager.TaskChan <- childrenTask\n\t\t\t\t<-mgr.ChildrenManager.ResultChan\n\t\t\t\tmgr.ChildrenManager.ChildComeChan <- &manager.ChildInfo{UUID: mmess.UUID, Conn: conn}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t}\n}\n\nfunc (listen *Listen) soReuseListen(mgr *manager.Manager, options *initial.Options) {\n\tlistenAddr := fmt.Sprintf(\"%s:%s\", options.ReuseHost, options.ReusePort)\n\tlistener, err := reuseport.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[*] Error occurred: %s\\n\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tparam := new(protocol.NegParam)\n\t\tparam.Conn = conn\n\t\tproto := protocol.NewDownProto(param)\n\t\tproto.SNegotiate()\n\n\t\tdefer conn.SetReadDeadline(time.Time{})\n\t\tconn.SetReadDeadline(time.Now().Add(2 * time.Second))\n\n\t\tbuffer := make([]byte, 16)\n\t\tcount, err := io.ReadFull(conn, buffer)\n\n\t\tif err != nil {\n\t\t\tif timeoutErr, ok := err.(net.Error); ok && timeoutErr.Timeout() {\n\t\t\t\tgo initial.ProxyStream(conn, buffer[:count], options.ReusePort)\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif string(buffer[:count]) == share.AuthToken {\n\t\t\tconn.Write([]byte(share.AuthToken))\n\t\t} else {\n\t\t\tgo initial.ProxyStream(conn, buffer[:count], options.ReusePort)\n\t\t\tcontinue\n\t\t}\n\n\t\trMessage := protocol.NewDownMsg(conn, global.G_Component.Secret, protocol.ADMIN_UUID)\n\t\tfHeader, fMessage, err := protocol.DestructMessage(rMessage)\n\n\t\tif err != nil {\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\tif fHeader.MessageType == protocol.HI {\n\t\t\tmmess := fMessage.(*protocol.HIMess)\n\t\t\tif mmess.Greeting == \"Shhh...\" && mmess.IsAdmin == 0 {\n\t\t\t\tchildrenTask := &manager.ChildrenTask{\n\t\t\t\t\tMode: manager.C_NEWCHILD,\n\t\t\t\t\tUUID: mmess.UUID,\n\t\t\t\t\tConn: conn,\n\t\t\t\t}\n\t\t\t\tmgr.ChildrenManager.TaskChan <- childrenTask\n\t\t\t\t<-mgr.ChildrenManager.ResultChan\n\t\t\t\tmgr.ChildrenManager.ChildComeChan <- &manager.ChildInfo{UUID: mmess.UUID, Conn: conn}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"syscall\"\n)\n\ntype Listen struct {\n\tmethod int\n\taddr   string\n}\n\nfunc newListen(method int, addr string) *Listen {\n\treturn &Listen{\n\t\tmethod: method,\n\t\taddr:   addr,\n\t}\n}\n\nfunc (l *Listen) start(mgr *manager.Manager, options *initial.Options) {\n\tgo func() {\n\t\tswitch l.method {\n\t\tcase NORMAL:\n\t\t\tl.normalListen(mgr, options)\n\t\tcase SOREUSE:\n\t\t\tl.soReuseListen(mgr, options)\n\t\t}\n\t}()\n}\n\nfunc (l *Listen) normalListen(mgr *manager.Manager, options *initial.Options) {\n\tln, err := net.Listen(\"tcp\", l.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo l.handleClient(conn, mgr, options)\n\t}\n}\n\nfunc (l *Listen) soReuseListen(mgr *manager.Manager, options *initial.Options) {\n\taddr, _ := net.ResolveTCPAddr(\"tcp\", l.addr)\n\tln, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn\n\t}\n\tln.SetsockoptInt(syscall.SOL_SOCKET, syscall.SO_REUSEADDR, 1)\n\tdefer ln.Close()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\t// Additional authentication and proxy setup\n\t\tgo l.handleClient(conn, mgr, options)\n\t}\n}\n\nfunc (l *Listen) handleClient(conn net.Conn, mgr *manager.Manager, options *initial.Options) {\n\t// Protocol negotiation and client task management\n\tdefer conn.Close()\n\t// Placeholder for actual implementation\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection lifecycles, timeouts, and provide hooks for customizing reader/writer behavior.\n\nStruct Description: The Server struct represents a configurable TCP server that can handle DNS queries (though this could be adapted for other protocols). It manages listener lifecycle, connection pooling, and provides various timeout and security configurations.\n\nFields:\n\nAddr: string - The address to listen on (e.g., \":domain\")\nNet: string - Network type (\"tcp\", \"tcp4\", \"tcp6\", or their TLS variants)\nListener: net.Listener - The active TCP listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection (not used in TCP mode)\nHandler: Handler - Handler for incoming requests\nUDPSize: int - UDP buffer size\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nIdleTimeout: func() time.Duration - Function returning idle timeout duration\nTsigProvider: TsigProvider - TSIG provider for DNS\nTsigSecret: map[string]string - TSIG secrets\nNotifyStartedFunc: func() - Callback when server starts\nDecorateReader: DecorateReader - Function to decorate the reader\nDecorateWriter: DecorateWriter - Function to decorate the writer\nMaxTCPQueries: int - Maximum queries per connection\nReusePort: bool - Enable SO_REUSEPORT\nReuseAddr: bool - Enable SO_REUSEADDR\nMsgAcceptFunc: MsgAcceptFunc - Function to filter incoming messages\nlock: sync.RWMutex - Mutex for concurrent access protection\nstarted: bool - Server running state\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\nudpPool: sync.Pool - Pool for UDP buffers\n\nMethods:\n\nListenAndServe: () -> error - Starts the server and begins accepting connections\nserveTCP: (net.Listener) -> error - Internal method to serve TCP connections\nserveTCPConn: (*sync.WaitGroup, net.Conn) -> () - Handles an individual TCP connection\nisStarted: () -> bool - Checks if server is running (internal)\ninit: () -> () - Initializes server state (internal)\ngetReadTimeout: () -> time.Duration - Gets current read timeout (internal)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tListener net.Listener\n\tTLSConfig *tls.Config\n\tPacketConn net.PacketConn\n\tHandler   Handler\n\tUDPSize int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tTsigProvider TsigProvider\n\tTsigSecret map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries int\n\tReusePort bool\n\tReuseAddr bool\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigProvider: srv.tsigProvider(), tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr            string\n\tNet             string\n\tListener        net.Listener\n\tTLSConfig       *tls.Config\n\tPacketConn      net.PacketConn\n\tHandler         Handler\n\tUDPSize         int\n\tReadTimeout     time.Duration\n\tWriteTimeout    time.Duration\n\tIdleTimeout     func() time.Duration\n\tTsigProvider    TsigProvider\n\tTsigSecret      map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader  DecorateReader\n\tDecorateWriter  DecorateWriter\n\tMaxTCPQueries   int\n\tReusePort       bool\n\tReuseAddr       bool\n\tMsgAcceptFunc   MsgAcceptFunc\n\tlock            sync.RWMutex\n\tstarted         bool\n\tshutdown        chan struct{}\n\tconns           map[net.Conn]struct{}\n\tudpPool         sync.Pool\n}\n\ntype Handler interface {\n\tServeTCP(io.Reader, io.Writer)\n}\n\ntype TsigProvider interface{}\n\ntype DecorateReader func(net.Conn) io.Reader\n\ntype DecorateWriter func(net.Conn) io.Writer\n\ntype MsgAcceptFunc func([]byte) bool\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tif s.started {\n\t\ts.lock.Unlock()\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.started = true\n\ts.lock.Unlock()\n\n\tvar err error\n\ts.Listener, err = net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif tcpListener, ok := s.Listener.(*net.TCPListener); ok {\n\t\tif s.ReusePort {\n\t\t\ttcpListener.SetReusePort(true)\n\t\t}\n\t\tif s.ReuseAddr {\n\t\t\ttcpListener.SetReuseAddr(true)\n\t\t}\n\t}\n\n\tif s.TLSConfig != nil {\n\t\ts.Listener = tls.NewListener(s.Listener, s.TLSConfig)\n\t}\n\n\tif s.NotifyStartedFunc != nil {\n\t\ts.NotifyStartedFunc()\n\t}\n\n\tgo s.serveTCP(s.Listener)\n\n\t<-s.shutdown\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) {\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ts.lock.Lock()\n\t\t\tif !s.started {\n\t\t\t\ts.lock.Unlock()\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\n\t\t\tgo s.serveTCPConn(conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tif s.ReadTimeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t}\n\tif s.WriteTimeout > 0 {\n\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t}\n\n\tif s.IdleTimeout != nil {\n\t\tidleTimeout := s.IdleTimeout()\n\t\tif idleTimeout > 0 {\n\t\t\tconn.SetDeadline(time.Now().Add(idleTimeout))\n\t\t}\n\t}\n\n\treader := conn\n\tif s.DecorateReader != nil {\n\t\treader = s.DecorateReader(conn)\n\t}\n\n\twriter := conn\n\tif s.DecorateWriter != nil {\n\t\twriter = s.DecorateWriter(conn)\n\t}\n\n\tif s.Handler != nil {\n\t\ts.Handler.ServeTCP(reader, writer)\n\t}\n}\n```"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle incoming client connections, optionally with TLS encryption, and relay traffic between clients and target servers through a proxy.\n\nStruct Description: The Trojan struct represents a TCP server that listens for incoming connections, handles TLS encryption if configured, and relays traffic between clients and target servers via a proxy.\n\nFields:\n- addr: string - The address on which the server listens for incoming connections\n- withTLS: bool - Flag indicating whether TLS encryption should be used\n- tlsConfig: *tls.Config - TLS configuration for secure connections\n- certFile: string - Path to TLS certificate file\n- keyFile: string - Path to TLS private key file\n- pass: [56]byte - Password for authentication\n- fallback: string - Fallback address if connection fails\n- proxy: proxy.Proxy - Proxy implementation for relaying traffic\n\nMethods:\n- ListenAndServe() - Starts the TCP server, listens for incoming connections, and handles them in separate goroutines\n  Input: None\n  Output: None\n- Serve(c net.Conn) - Handles an individual client connection, performs TLS handshake if needed, and relays traffic\n  Input: c net.Conn - The client connection to handle\n  Output: None\n- readHeader(r io.Reader) - Reads and parses the header from the client connection\n  Input: r io.Reader - Reader to get header data from\n  Output: cmd socks.Cmd, target socks.Addr, err error - Returns command, target address, and any error\n- serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) - Handles fallback connection when main connection fails\n  Input: \n    c net.Conn - The client connection\n    fallback string - Fallback address\n    buf *bytes.Buffer - Buffer containing initial data\n  Output: None\n- ServeUoT(c net.Conn, target socks.Addr) - Handles UDP-over-TCP connections\n  Input:\n    c net.Conn - The client connection\n    target socks.Addr - Target address\n  Output: None",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/pkg/socks\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype Trojan struct {\n\taddr      string\n\twithTLS   bool\n\ttlsConfig *tls.Config\n\tcertFile  string\n\tkeyFile   string\n\tpass      [56]byte\n\tfallback  string\n\tproxy     proxy.Proxy\n}\n\nfunc (s *Trojan) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[trojan] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[trojan] listening TCP on %s, with TLS: %v\", s.addr, s.withTLS)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[trojan] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *Trojan) Serve(c net.Conn) {\n\tif c, ok := c.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tif s.withTLS {\n\t\ttlsConn := tls.Server(c, s.tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\ttlsConn.Close()\n\t\t\tlog.F(\"[trojan] error in tls handshake: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tc = tlsConn\n\t}\n\tdefer c.Close()\n\n\theadBuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(headBuf)\n\n\tcmd, target, err := s.readHeader(io.TeeReader(c, headBuf))\n\tif err != nil {\n\t\tif s.fallback != \"\" {\n\t\t\ts.serveFallback(c, s.fallback, headBuf)\n\t\t}\n\t\treturn\n\t}\n\n\tnetwork := \"tcp\"\n\tdialer := s.proxy.NextDialer(target.String())\n\n\tif cmd == socks.CmdUDPAssociate {\n\t\tif dialer.Addr() == \"DIRECT\" {\n\t\t\ts.ServeUoT(c, target)\n\t\t\treturn\n\t\t}\n\t\tnetwork = \"udp\"\n\t}\n\n\trc, err := dialer.Dial(network, target.String())\n\tif err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tlog.F(\"[trojan] %s <-> %s via %s\", c.RemoteAddr(), target, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"golang.org/x/net/socks\"\n)\n\ntype Trojan struct {\n\taddr       string\n\twithTLS    bool\n\ttlsConfig  *tls.Config\n\tcertFile   string\n\tkeyFile    string\n\tpass       [56]byte\n\tfallback   string\n\tproxy      Proxy\n}\n\ntype Proxy interface {\n\tDial(addr string) (net.Conn, error)\n\tDialUDP(addr string) (net.PacketConn, error)\n}\n\nfunc (t *Trojan) ListenAndServe() {\n\tvar listener net.Listener\n\tvar err error\n\tif t.withTLS {\n\t\tcert, err := tls.LoadX509KeyPair(t.certFile, t.keyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tt.tlsConfig = &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t}\n\t\tlistener, err = tls.Listen(\"tcp\", t.addr, t.tlsConfig)\n\t} else {\n\t\tlistener, err = net.Listen(\"tcp\", t.addr)\n\t}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\tcontinue\n\t\t}\n\t\tgo t.Serve(conn)\n\t}\n}\n\nfunc (t *Trojan) Serve(c net.Conn) {\n\tvar conn net.Conn\n\tif t.withTLS {\n\t\tconn = tls.Server(c, t.tlsConfig)\n\t} else {\n\t\tconn = c\n\t}\n\tdefer conn.Close()\n\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tt.serveFallback(c, t.fallback, nil)\n\t\treturn\n\t}\n\n\tcmd, target, err := t.readHeader(buf[:n])\n\tif err != nil {\n\t\tt.serveFallback(c, t.fallback, bytes.NewBuffer(buf[:n]))\n\t\treturn\n\t}\n\n\ttargetConn, err := t.proxy.Dial(target.String())\n\tif err != nil {\n\t\tt.serveFallback(c, t.fallback, bytes.NewBuffer(buf[:n]))\n\t\treturn\n\t}\n\tdefer targetConn.Close()\n\n\tgo relay(conn, targetConn)\n\tgo relay(targetConn, conn)\n}\n\nfunc (t *Trojan) readHeader(buf []byte) (socks.Cmd, socks.Addr, error) {\n\tif len(buf) < 2 {\n\t\treturn 0, nil, io.ErrUnexpectedEOF\n\t}\n\tversion := buf[0]\n\tcmd := socks.Cmd(buf[1])\n\taddr, err := socks.ParseAddr(buf[2:])\n\tif err != nil {\n\t\treturn 0, nil, err\n\t}\n\treturn cmd, addr, nil\n}\n\nfunc (t *Trojan) serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) {\n\tfallbackConn, err := net.Dial(\"tcp\", fallback)\n\tif err != nil {\n\t\tc.Close()\n\t\treturn\n\t}\n\tdefer fallbackConn.Close()\n\n\tif buf != nil {\n\t\tfallbackConn.Write(buf.Bytes())\n\t}\n\n\tgo relay(c, fallbackConn)\n\tgo relay(fallbackConn, c)\n}\n\nfunc (t *Trojan) ServeUoT(c net.Conn, target socks.Addr) {\n\ttargetConn, err := t.proxy.DialUDP(target.String())\n\tif err != nil {\n\t\tc.Close()\n\t\treturn\n\t}\n\tdefer targetConn.Close()\n\n\tgo relayUoT(c, targetConn)\n\tgo relayUoT(targetConn, c)\n}\n\nfunc relay(src, dst net.Conn) {\n\tdefer src.Close()\n\tdefer dst.Close()\n\tio.Copy(dst, src)\n}\n\nfunc relayUoT(src, dst net.PacketConn) {\n\tdefer src.Close()\n\tdefer dst.Close()\n\tbuf := make([]byte, 65535)\n\tfor {\n\t\tn, addr, err := src.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tdst.WriteTo(buf[:n], addr)\n\t}\n}\n```"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a TCP server in Go that can handle multiple client connections concurrently, manage server lifecycle, and track active connections.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, handles client communication, and provides server management capabilities.\n\nFields:\n- Addr: string - The network address to listen on (e.g., \":8080\")\n- Net: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\n- Handler: Handler - Interface for custom request handling (implementation not shown)\n- Listener: net.Listener - The underlying network listener\n- conns: map[net.Conn]struct{} - Track active connections\n- lock: sync.RWMutex - Protects concurrent access to server state\n- started: bool - Indicates if server is running\n- shutdown: chan struct{} - Channel for shutdown signaling\n\nMethods:\n- ListenAndServe() error - Starts the server and begins accepting connections\n- init() - Initializes server resources (internal use)\n- serveTCP(net.Listener) error - Main server loop that accepts connections (internal use)\n- serveTCPConn(*sync.WaitGroup, net.Conn) - Handles individual client connections (internal use)\n- isStarted() bool - Thread-safe check of server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tListener net.Listener\n\tconns    map[net.Conn]struct{}\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tl, err := net.Listen(srv.Net, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tsrv.Listener = l\n\tsrv.started = true\n\tunlock()\n\treturn srv.serveTCP(l)\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer func() {\n\t\tsrv.lock.Lock()\n\t\tdelete(srv.conns, rw)\n\t\tsrv.lock.Unlock()\n\t\trw.Close()\n\t\twg.Done()\n\t}()\n\n\tbuf := make([]byte, 4096)\n\tfor {\n\t\tn, err := rw.Read(buf)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\t_, err = rw.Write(buf[:n])\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc unlockOnce(l sync.Locker) func() {\n\tvar once sync.Once\n\treturn func() { once.Do(l.Unlock) }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n)\n\ntype Handler interface {\n\tServeConn(net.Conn)\n}\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tHandler  Handler\n\tListener net.Listener\n\tconns    map[net.Conn]struct{}\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.isStarted() {\n\t\treturn errors.New(\"server already started\")\n\t}\n\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\ts.init()\n\n\tgo func() {\n\t\terr := s.serveTCP(s.Listener)\n\t\tif err != nil {\n\t\t\t// Handle error, maybe log it\n\t\t}\n\t}()\n\n\t<-s.shutdown\n\n\ts.Listener.Close()\n\n\treturn nil\n}\n\nfunc (s *Server) init() {\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n\tvar err error\n\ts.Listener, err = net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\t// Handle error, maybe panic or return\n\t}\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\tgo s.serveTCPConn(conn)\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\ts.Handler.ServeConn(conn)\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n```"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a TLS server in Go that handles incoming TCP connections, performs TLS handshakes, manages connection timeouts, and processes domain-specific data through channels.\n\nStruct Description: The TLSServer struct represents a TLS-enabled TCP server that handles secure connections, manages connection state, and processes domain-specific data through channels. It includes functionality for accepting connections, handling TLS handshakes, managing timeouts, and shutting down gracefully.\n\nFields:\n- HTTPSServer: *HTTPSServer - Reference to the parent HTTPSServer containing configuration\n- Cache: *cache.Cache - Cache for storing active connections\n- TCPListen: *net.TCPListener - TCP listener for incoming connections\n- Done: chan byte - Channel for signaling server shutdown\n- DomainData: chan DomainData - Channel for sending domain-specific data\n- Error: chan error - Channel for reporting errors\n\nMethods:\n- NewTLSServer(*HTTPSServer) (*TLSServer, error) - Constructor that initializes a new TLSServer instance\n- ListenAndServe() error - Main server loop that handles domain data and errors\n- Shutdown() - Gracefully shuts down the server\n- Accept() - Accepts incoming connections and handles TLS handshakes (spawned as a goroutine)",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/txthinking/zoro\"\n)\n\ntype DomainData struct {\n\tDomain string\n\tData   []byte\n}\n\ntype TLSServer struct {\n\tHTTPSServer *HTTPSServer\n\tCache       *cache.Cache\n\tTCPListen   *net.TCPListener\n\tDone        chan byte\n\tDomainData  chan DomainData\n\tError       chan error\n}\n\nfunc NewTLSServer(s *HTTPSServer) (*TLSServer, error) {\n\tl, err := net.ListenTCP(\"tcp\", s.TLSAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &TLSServer{\n\t\tHTTPSServer: s,\n\t\tCache:       cache.New(cache.NoExpiration, cache.NoExpiration),\n\t\tTCPListen:   l,\n\t\tDone:        make(chan byte),\n\t\tDomainData:  make(chan DomainData),\n\t\tError:       make(chan error),\n\t}, nil\n}\n\nfunc (s *TLSServer) ListenAndServe() error {\n\tdefer close(s.Done)\n\tdefer s.TCPListen.Close()\n\tgo s.Accept()\n\tfor {\n\t\tselect {\n\t\tcase d := <-s.DomainData:\n\t\t\ti, ok := s.Cache.Get(\"domain:\" + d.Domain)\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tc := i.(*net.TCPConn)\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif _, err := c.Write(d.Data); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase err := <-s.Error:\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *TLSServer) Shutdown() {\n\tselect {\n\tcase <-s.Done:\n\t\treturn\n\tcase s.Error <- nil:\n\t}\n}\n\nfunc (s *TLSServer) Accept() {\n\tfor {\n\t\tc1, err := s.TCPListen.AcceptTCP()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.Done:\n\t\t\t\treturn\n\t\t\tcase s.Error <- err:\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif s.HTTPSServer.TLSTimeout != 0 {\n\t\t\tif err := c1.SetKeepAlivePeriod(time.Duration(s.HTTPSServer.TLSTimeout) * time.Second); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif s.HTTPSServer.TLSDeadline != 0 {\n\t\t\tif err := c1.SetDeadline(time.Now().Add(time.Duration(s.HTTPSServer.TLSDeadline) * time.Second)); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\ttc := tls.Server(c1, s.HTTPSServer.TLSConfig)\n\t\tif err := tc.Handshake(); err != nil {\n\t\t\tc1.Close()\n\t\t\tcontinue\n\t\t}\n\t\tcs := tc.ConnectionState()\n\t\tif cs.ServerName == \"\" {\n\t\t\tlog.Println(tc.RemoteAddr().String() + \" no SNI\")\n\t\t\ttc.Close()\n\t\t\tcontinue\n\t\t}\n\t\ts.Cache.Set(tc.RemoteAddr().String(), tc, cache.DefaultExpiration)\n\t\tgo func(tc *tls.Conn) {\n\t\t\tdefer func() {\n\t\t\t\tp := &zoro.TCPPacket{\n\t\t\t\t\tAddress: tc.RemoteAddr().String(),\n\t\t\t\t}\n\t\t\t\tb, err := proto.Marshal(p)\n\t\t\t\tif err != nil {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-s.Done:\n\t\t\t\t\t\treturn\n\t\t\t\t\tcase s.Error <- err:\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbb := make([]byte, 2)\n\t\t\t\tbinary.BigEndian.PutUint16(bb, uint16(len(b)))\n\t\t\t\td := DomainData{\n\t\t\t\t\tDomain: strings.TrimSuffix(cs.ServerName, \".\"+s.HTTPSServer.Domain),\n\t\t\t\t\tData:   append(append([]byte{0x02}, bb...), b...),\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\tcase s.DomainData <- d:\n\t\t\t\t}\n\t\t\t\ts.Cache.Delete(tc.RemoteAddr().String())\n\t\t\t\ttc.Close()\n\t\t\t}()\n\t\t\tvar bf [1024 * 2]byte\n\t\t\tfor {\n\t\t\t\tif s.HTTPSServer.TLSDeadline != 0 {\n\t\t\t\t\tif err := tc.SetDeadline(time.Now().Add(time.Duration(s.HTTPSServer.TLSDeadline) * time.Second)); err != nil {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti, err := tc.Read(bf[:])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tp := &zoro.TCPPacket{\n\t\t\t\t\tAddress: tc.RemoteAddr().String(),\n\t\t\t\t\tData:    bf[0:i],\n\t\t\t\t}\n\t\t\t\tb, err := proto.Marshal(p)\n\t\t\t\tif err != nil {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-s.Done:\n\t\t\t\t\t\treturn\n\t\t\t\t\tcase s.Error <- err:\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbb := make([]byte, 2)\n\t\t\t\tbinary.BigEndian.PutUint16(bb, uint16(len(b)))\n\t\t\t\td := DomainData{\n\t\t\t\t\tDomain: strings.TrimSuffix(cs.ServerName, \".\"+s.HTTPSServer.Domain),\n\t\t\t\t\tData:   append(append([]byte{0x01}, bb...), b...),\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\tcase s.DomainData <- d:\n\t\t\t\t}\n\t\t\t}\n\t\t}(tc)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"time\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"crypto/tls\"\n)\n\ntype DomainData struct {\n\tData []byte\n}\n\ntype HTTPSServer struct {\n\tAddr      string\n\tTLSConfig *tls.Config\n}\n\ntype TLSServer struct {\n\tHTTPSServer *HTTPSServer\n\tCache       *cache.Cache\n\tTCPListen   *net.TCPListener\n\tDone        chan byte\n\tDomainData  chan DomainData\n\tError       chan error\n}\n\nfunc NewTLSServer(httpsserver *HTTPSServer) (*TLSServer, error) {\n\taddr, err := net.ResolveTCPAddr(\"tcp\", httpsserver.Addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttcpListener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcache := cache.New(cache.DefaultExpiration, cache.CleanupInterval)\n\n\treturn &TLSServer{\n\t\tHTTPSServer: httpsserver,\n\t\tCache:       cache,\n\t\tTCPListen:   tcpListener,\n\t\tDone:        make(chan byte),\n\t\tDomainData:  make(chan DomainData),\n\t\tError:       make(chan error),\n\t}, nil\n}\n\nfunc (s *TLSServer) ListenAndServe() error {\n\tgo s.Accept()\n\n\tfor {\n\t\tselect {\n\t\tcase data := <-s.DomainData:\n\t\tcase err := <-s.Error:\n\t\tcase <-s.Done:\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\nfunc (s *TLSServer) Shutdown() {\n\ts.TCPListen.Close()\n\tclose(s.Done)\n}\n\nfunc (s *TLSServer) Accept() {\n\tfor {\n\t\tselect {\n\t\tcase <-s.Done:\n\t\t\treturn\n\t\tdefault:\n\t\t\tconn, err := s.TCPListen.Accept()\n\t\t\tif err != nil {\n\t\t\t\tselect {\n\t\t\t\tcase s.Error <- err:\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttlsConn := tls.Server(conn, s.HTTPSServer.TLSConfig)\n\t\t\tif err := tlsConn.SetDeadline(time.Now().Add(10 * time.Second)); err != nil {\n\t\t\t\tselect {\n\t\t\t\tcase s.Error <- err:\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\t\tselect {\n\t\t\t\tcase s.Error <- err:\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tkey := conn.RemoteAddr().String()\n\t\t\ts.Cache.Set(key, tlsConn, cache.DefaultExpiration)\n\n\t\t\tgo s.handleConnection(tlsConn)\n\t\t}\n\t}\n}\n\nfunc (s *TLSServer) handleConnection(conn *tls.Conn) {\n\tif err := conn.SetReadDeadline(time.Now().Add(30 * time.Second)); err != nil {\n\t\tselect {\n\t\tcase s.Error <- err:\n\t\tcase <-s.Done:\n\t\t\treturn\n\t\t}\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tselect {\n\t\tcase s.Error <- err:\n\t\tcase <-s.Done:\n\t\t\treturn\n\t\t}\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tdata := DomainData{Data: buf[:n]}\n\tselect {\n\tcase s.DomainData <- data:\n\tcase <-s.Done:\n\t\treturn\n\t}\n\n\tconn.Close()\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Implement a TCP-based HTTP proxy server in Go that handles both HTTP and HTTPS requests, supports basic authentication, and can optionally pretend to be a web server.\n\nStruct Description: The HTTP struct represents an HTTP proxy server with configurable authentication and behavior settings.\n\nFields:\naddr: string - The address and port on which the server listens\nuser: string - Username for basic authentication (empty if no auth required)\npassword: string - Password for basic authentication (empty if no auth required)\npretend: bool - Whether to pretend to be a web server (return 404 responses)\nproxy: proxy.Proxy - The underlying proxy implementation for forwarding requests\n\nMethods:\nListenAndServe: () -> () - Starts the TCP listener on the configured address and begins accepting connections\nServe: (net.Conn) -> () - Handles an individual client connection (sets keepalive, parses requests)\nservRequest: (*request, *proxy.Conn) -> () - Processes authenticated requests and routes to HTTP/HTTPS handlers\nservHTTPS: (*request, net.Conn) -> () - Handles HTTPS CONNECT requests by establishing tunnel\nservHTTP: (*request, *proxy.Conn) -> () - Handles regular HTTP requests by forwarding and modifying headers",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/textproto\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype HTTP struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n\tproxy    proxy.Proxy\n}\n\nfunc (s *HTTP) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[http] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[http] listening TCP on %s\", s.addr)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[http] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *HTTP) Serve(cc net.Conn) {\n\tif c, ok := cc.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tc := proxy.NewConn(cc)\n\tdefer c.Close()\n\n\treq, err := parseRequest(c.Reader())\n\tif err != nil {\n\t\tlog.F(\"[http] can not parse request from %s, error: %v\", c.RemoteAddr(), err)\n\t\treturn\n\t}\n\n\tif s.pretend {\n\t\tfmt.Fprintf(c, \"%s 404 Not Found\\r\\nServer: nginx\\r\\n\\r\\n404 Not Found\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s, pretend as web server\", c.RemoteAddr().String(), s.Addr())\n\t\treturn\n\t}\n\n\ts.servRequest(req, c)\n}\n\nfunc (s *HTTP) servRequest(req *request, c *proxy.Conn) {\n\tif s.user != \"\" && s.password != \"\" {\n\t\tif user, pass, ok := extractUserPass(req.auth); !ok || user != s.user || pass != s.password {\n\t\t\tio.WriteString(c, \"HTTP/1.1 407 Proxy Authentication Required\\r\\nProxy-Authenticate: Basic\\r\\n\\r\\n\")\n\t\t\tlog.F(\"[http] auth failed from %s, auth info: %s:%s\", c.RemoteAddr(), user, pass)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif req.method == \"CONNECT\" {\n\t\ts.servHTTPS(req, c)\n\t\treturn\n\t}\n\n\ts.servHTTP(req, c)\n}\n\nfunc (s *HTTP) servHTTPS(r *request, c net.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", r.uri)\n\tif err != nil {\n\t\tio.WriteString(c, r.proto+\" 502 ERROR\\r\\n\\r\\n\")\n\t\tlog.F(\"[http] %s <-> %s [c] via %s, error in dial: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tio.WriteString(c, \"HTTP/1.1 200 Connection established\\r\\n\\r\\n\")\n\n\tlog.F(\"[http] %s <-> %s [c] via %s\", c.RemoteAddr(), r.uri, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[http] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}\n\nfunc (s *HTTP) servHTTP(req *request, c *proxy.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", req.target)\n\tif err != nil {\n\t\tfmt.Fprintf(c, \"%s 502 ERROR\\r\\n\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), req.target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tbuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(buf)\n\n\treq.WriteBuf(buf)\n\t_, err = rc.Write(buf.Bytes())\n\tif err != nil {\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tif _, err := c.Reader().Peek(1); err == nil {\n\t\t\tproxy.Copy(rc, c)\n\t\t\trc.SetDeadline(time.Now())\n\t\t\tc.SetDeadline(time.Now())\n\t\t}\n\t}()\n\n\tr := pool.GetBufReader(rc)\n\tdefer pool.PutBufReader(r)\n\n\ttpr := textproto.NewReader(r)\n\tline, err := tpr.ReadLine()\n\tif err != nil {\n\t\treturn\n\t}\n\n\tproto, code, status, ok := parseStartLine(line)\n\tif !ok {\n\t\treturn\n\t}\n\n\theader, err := tpr.ReadMIMEHeader()\n\tif err != nil {\n\t\tlog.F(\"[http] read header error:%s\", err)\n\t\treturn\n\t}\n\n\theader.Set(\"Proxy-Connection\", \"close\")\n\theader.Set(\"Connection\", \"close\")\n\n\tbuf.Reset()\n\twriteStartLine(buf, proto, code, status)\n\twriteHeaders(buf, header)\n\n\tlog.F(\"[http] %s <-> %s via %s\", c.RemoteAddr(), req.target, dialer.Addr())\n\tc.Write(buf.Bytes())\n\n\tproxy.Copy(c, r)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"compress/gzip\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Proxy struct{}\n\nfunc (p *Proxy) Dial(host string) (*net.TCPConn, error) {\n\treturn net.DialTCP(\"tcp\", nil, &net.TCPAddr{IP: net.ParseIP(\"127.0.0.1\"), Port: 80})\n}\n\nfunc (p *Proxy) Connect(req *http.Request, clientConn net.Conn) error {\n\treturn nil\n}\n\nfunc (p *Proxy) Forward(req *http.Request, clientConn net.Conn, targetConn *net.TCPConn) error {\n\treturn nil\n}\n\ntype HTTP struct {\n\taddr    string\n\tuser    string\n\tpassword string\n\tpretend bool\n\tproxy   *Proxy\n}\n\nfunc (h *HTTP) ListenAndServe() {\n\tln, err := net.Listen(\"tcp\", h.addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\tcontinue\n\t\t}\n\t\tgo h.Serve(conn)\n\t}\n}\n\nfunc (h *HTTP) Serve(conn net.Conn) {\n\tif tcpConn, ok := conn.(*net.TCPConn); ok {\n\t\ttcpConn.SetKeepAlive(true)\n\t\ttcpConn.SetKeepAlivePeriod(30 * time.Second)\n\t}\n\n\treader := bufio.NewReader(conn)\n\treq, err := http.ReadRequest(reader)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif req.Method == \"CONNECT\" {\n\t\th.servHTTPS(req, conn)\n\t} else {\n\t\th.servRequest(req, conn)\n\t}\n}\n\nfunc (h *HTTP) servRequest(req *http.Request, clientConn net.Conn) {\n\tif h.user != \"\" || h.password != \"\" {\n\t\tauthHeader := req.Header.Get(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\th.sendUnauthorized(clientConn)\n\t\t\treturn\n\t\t}\n\t\tparts := strings.SplitN(authHeader, \" \", 2)\n\t\tif len(parts) != 2 || parts[0] != \"Basic\" {\n\t\t\th.sendUnauthorized(clientConn)\n\t\t\treturn\n\t\t}\n\t\tpayload, _ := base64.StdEncoding.DecodeString(parts[1])\n\t\tuserPass := strings.SplitN(string(payload), \":\", 2)\n\t\tif len(userPass) != 2 || userPass[0] != h.user || userPass[1] != h.password {\n\t\t\th.sendUnauthorized(clientConn)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif h.pretend {\n\t\th.send404(clientConn)\n\t} else {\n\t\ttarget := req.Host\n\t\ttargetConn, err := net.Dial(\"tcp\", target)\n\t\tif err != nil {\n\t\t\th.sendError(clientConn, \"500 Internal Server Error\")\n\t\t\treturn\n\t\t}\n\t\tdefer targetConn.Close()\n\n\t\terr = req.Write(targetConn)\n\t\tif err != nil {\n\t\t\th.sendError(clientConn, \"500 Internal Server Error\")\n\t\t\treturn\n\t\t}\n\n\t\tresp, err := http.ReadResponse(bufio.NewReader(targetConn), req)\n\t\tif err != nil {\n\t\t\th.sendError(clientConn, \"500 Internal Server Error\")\n\t\t\treturn\n\t\t}\n\n\t\terr = resp.Write(clientConn)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error writing response:\", err)\n\t\t}\n\t}\n}\n\nfunc (h *HTTP) servHTTPS(req *http.Request, clientConn net.Conn) {\n\ttarget := req.Host\n\ttargetConn, err := net.Dial(\"tcp\", target)\n\tif err != nil {\n\t\tclientConn.Write([]byte(\"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\n\"))\n\t\treturn\n\t}\n\tdefer targetConn.Close()\n\n\tclientConn.Write([]byte(\"HTTP/1.1 200 Connection established\\r\\n\\r\\n\"))\n\n\tgo func() {\n\t\tio.Copy(targetConn, clientConn)\n\t}()\n\tio.Copy(clientConn, targetConn)\n}\n\nfunc (h *HTTP) sendUnauthorized(conn net.Conn) {\n\tresp := &http.Response{\n\t\tStatus:     \"401 Unauthorized\",\n\t\tStatusCode: 401,\n\t\tHeader:     make(http.Header),\n\t}\n\tresp.Header.Set(\"WWW-Authenticate\", `Basic realm=\"Restricted\"`)\n\terr := resp.Write(conn)\n\tif err != nil {\n\t\tlog.Println(\"Error sending 401:\", err)\n\t}\n}\n\nfunc (h *HTTP) send404(conn net.Conn) {\n\tresp := &http.Response{\n\t\tStatus:     \"404 Not Found\",\n\t\tStatusCode: 404,\n\t\tHeader:     make(http.Header),\n\t}\n\terr := resp.Write(conn)\n\tif err != nil {\n\t\tlog.Println(\"Error sending 404:\", err)\n\t}\n}\n\nfunc (h *HTTP) sendError(conn net.Conn, message string) {\n\tresp := &http.Response{\n\t\tStatus:     message,\n\t\tStatusCode: 500,\n\t\tHeader:     make(http.Header),\n\t}\n\terr := resp.Write(conn)\n\tif err != nil {\n\t\tlog.Println(\"Error sending error:\", err)\n\t}\n}\n\nfunc main() {\n\tproxy := &Proxy{}\n\thttpServer := &HTTP{\n\t\taddr:     \":8080\",\n\t\tuser:     \"user\",\n\t\tpassword: \"pass\",\n\t\tpretend:  false,\n\t\tproxy:    proxy,\n\t}\n\thttpServer.ListenAndServe()\n}\n```"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Implement an HTTP transport struct for sending tracing spans to a collector using Thrift serialization and HTTP protocol.\n\nStruct Description: HTTPTransport is a struct that handles batching and sending tracing spans to a remote collector via HTTP. It supports basic authentication and custom HTTP client configuration.\n\nFields:\n- logger: jaeger.Logger - Logger for reporting errors and debug information\n- url: string - The collector endpoint URL\n- client: *http.Client - Custom HTTP client for making requests\n- batchSize: int - Maximum number of spans to batch before flushing\n- batch: []*zipkincore.Span - Current batch of spans waiting to be sent\n- httpCredentials: *HTTPBasicAuthCredentials - Optional basic auth credentials\n\nMethods:\n- NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) - Constructor that creates a new HTTPTransport with default values and applies options\n- Append(span *jaeger.Span) (int, error) - Adds a span to the current batch, flushes if batch size is reached\n- Flush() (int, error) - Sends all batched spans to the collector and resets the batch\n- Close() error - Cleanup method (currently no-op)\n- send(spans []*zipkincore.Span) error - Internal method that serializes and sends spans via HTTP POST\n- httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) - Helper method that serializes spans using Thrift protocol\n\nAdditional Struct:\n- HTTPBasicAuthCredentials: struct - Holds basic authentication credentials\n  Fields:\n  - username: string - Basic auth username\n  - password: string - Basic auth password",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/uber/jaeger-client-go\"\n\t\"github.com/uber/jaeger-client-go/log\"\n\t\"github.com/uber/jaeger-client-go/thrift\"\n\t\"github.com/uber/jaeger-client-go/thrift-gen/zipkincore\"\n)\n\ntype HTTPTransport struct {\n\tlogger          jaeger.Logger\n\turl             string\n\tclient          *http.Client\n\tbatchSize       int\n\tbatch           []*zipkincore.Span\n\thttpCredentials *HTTPBasicAuthCredentials\n}\n\ntype HTTPBasicAuthCredentials struct {\n\tusername string\n\tpassword string\n}\n\nfunc NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) {\n\tc := &HTTPTransport{\n\t\tlogger:    log.NullLogger,\n\t\turl:       url,\n\t\tclient:    &http.Client{Timeout: defaultHTTPTimeout},\n\t\tbatchSize: 100,\n\t\tbatch:     []*zipkincore.Span{},\n\t}\n\n\tfor _, option := range options {\n\t\toption(c)\n\t}\n\treturn c, nil\n}\n\nfunc (c *HTTPTransport) Append(span *jaeger.Span) (int, error) {\n\tzSpan := jaeger.BuildZipkinThrift(span)\n\tc.batch = append(c.batch, zSpan)\n\tif len(c.batch) >= c.batchSize {\n\t\treturn c.Flush()\n\t}\n\treturn 0, nil\n}\n\nfunc (c *HTTPTransport) Flush() (int, error) {\n\tcount := len(c.batch)\n\tif count == 0 {\n\t\treturn 0, nil\n\t}\n\terr := c.send(c.batch)\n\tc.batch = c.batch[:0]\n\treturn count, err\n}\n\nfunc (c *HTTPTransport) Close() error {\n\treturn nil\n}\n\nfunc (c *HTTPTransport) send(spans []*zipkincore.Span) error {\n\tbody, err := httpSerialize(spans)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"POST\", c.url, body)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-thrift\")\n\n\tif c.httpCredentials != nil {\n\t\treq.SetBasicAuth(c.httpCredentials.username, c.httpCredentials.password)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBytes, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"could not read response from collector: %s\", err)\n\t}\n\n\tif resp.StatusCode >= http.StatusBadRequest {\n\t\treturn fmt.Errorf(\"error from collector: code=%d body=%q\", resp.StatusCode, string(respBytes))\n\t}\n\n\treturn nil\n}\n\nfunc httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) {\n\tt := thrift.NewTMemoryBuffer()\n\tp := thrift.NewTBinaryProtocolTransport(t)\n\tctx := context.Background()\n\tif err := p.WriteListBegin(ctx, thrift.STRUCT, len(spans)); err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, s := range spans {\n\t\tif err := s.Write(ctx, p); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif err := p.WriteListEnd(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\treturn t.Buffer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype HTTPBasicAuthCredentials struct {\n\tusername string\n\tpassword string\n}\n\ntype HTTPTransport struct {\n\tlogger         jaeger.Logger\n\turl            string\n\tclient         *http.Client\n\tbatchSize      int\n\tbatch          []*zipkincore.Span\n\thttpCredentials *HTTPBasicAuthCredentials\n}\n\ntype HTTPOption func(*HTTPTransport) error\n\nfunc NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) {\n\tt := &HTTPTransport{\n\t\turl:       url,\n\t\tclient:    &http.Client{},\n\t\tbatchSize: 100,\n\t\tbatch:     make([]*zipkincore.Span, 0),\n\t\tlogger:    log.New(os.Stderr, \"http-transport: \", log.LstdFlags),\n\t}\n\tfor _, opt := range options {\n\t\tif err := opt(t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn t, nil\n}\n\nfunc (t *HTTPTransport) Append(span *jaeger.Span) (int, error) {\n\tt.batch = append(t.batch, span)\n\tif len(t.batch) >= t.batchSize {\n\t\t_, err := t.Flush()\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\treturn len(t.batch), nil\n}\n\nfunc (t *HTTPTransport) Flush() (int, error) {\n\tif len(t.batch) == 0 {\n\t\treturn 0, nil\n\t}\n\terr := t.send(t.batch)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tt.batch = make([]*zipkincore.Span, 0)\n\treturn len(t.batch), nil\n}\n\nfunc (t *HTTPTransport) Close() error {\n\treturn nil\n}\n\nfunc (t *HTTPTransport) send(spans []*zipkincore.Span) error {\n\tbuf, err := t.httpSerialize(spans)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"POST\", t.url, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif t.httpCredentials != nil {\n\t\treq.SetBasicAuth(t.httpCredentials.username, t.httpCredentials.password)\n\t}\n\tresp, err := t.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tresp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\treturn nil\n}\n\nfunc (t *HTTPTransport) httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) {\n\tbuf := &bytes.Buffer{}\n\tprot := thrift.NewTBinaryProtocolFactoryDefault().GetProtocol(buf)\n\tfor _, span := range spans {\n\t\tif err := span.Write(prot); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn buf, nil\n}\n```"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both query and write operations with configurable connection settings, authentication, and request parameters.\n\nStruct Description: The Client struct represents an InfluxDB client with configurable connection settings and methods for executing queries and writing data points.\n\nFields:\n\nurl: url.URL - Base URL of the InfluxDB server\nunixSocket: string - Path to Unix domain socket for connection (alternative to TCP)\nusername: string - Username for basic authentication\npassword: string - Password for basic authentication\nhttpClient: *http.Client - Custom HTTP client with configured transport and timeout\nuserAgent: string - User agent string for HTTP requests\nprecision: string - Default precision for timestamps in queries/writes\n\nMethods:\n\nNewClient: [Name](Config) -> (*Client, error) - Creates a new Client instance with the provided configuration, setting up TLS, proxy, and Unix socket options as needed.\n\nQueryContext: [Name](context.Context, Query) -> (*Response, error) - Executes a query against the InfluxDB server with context support, handling both regular and chunked responses.\n\nWrite: [Name](BatchPoints) -> (*Response, error) - Writes a batch of points to the InfluxDB server, handling serialization and request configuration.\n\nThe Client provides methods for both querying and writing data to InfluxDB with support for:\n- Custom HTTP client configuration (timeouts, TLS, proxies)\n- Unix socket connections\n- Basic authentication\n- Chunked query responses\n- Custom precision for timestamps\n- Context-aware operations\n- Error handling for HTTP and InfluxDB-specific errors",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"path\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tunixSocket string\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := new(tls.Config)\n\tif c.TLS != nil {\n\t\ttlsConfig = c.TLS.Clone()\n\t}\n\ttlsConfig.InsecureSkipVerify = c.UnsafeSsl\n\n\ttr := &http.Transport{\n\t\tProxy:           c.Proxy,\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tif c.UnixSocket != \"\" {\n\t\ttr.DisableCompression = true\n\t\ttr.DialContext = func(_ context.Context, _, _ string) (net.Conn, error) {\n\t\t\treturn net.Dial(\"unix\", c.UnixSocket)\n\t\t}\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tunixSocket: c.UnixSocket,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) QueryContext(ctx context.Context, q Query) (*Response, error) {\n\tu := c.url\n\tu.Path = path.Join(u.Path, \"query\")\n\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.RetentionPolicy != \"\" {\n\t\tvalues.Set(\"rp\", q.RetentionPolicy)\n\t}\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif q.NodeID > 0 {\n\t\tvalues.Set(\"node_id\", strconv.Itoa(q.NodeID))\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"POST\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\treq = req.WithContext(ctx)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = path.Join(u.Path, \"write\")\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage influxdb\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tURL          string\n\tUnixSocket   string\n\tUsername     string\n\tPassword     string\n\tHTTPClient   *http.Client\n\tUserAgent    string\n\tPrecision    string\n}\n\ntype Client struct {\n\turl         *url.URL\n\tunixSocket  string\n\tusername    string\n\tpassword    string\n\thttpClient  *http.Client\n\tuserAgent   string\n\tprecision   string\n}\n\ntype basicAuthTransport struct {\n\tusername, password string\n\ttransport          http.RoundTripper\n}\n\nfunc (t *basicAuthTransport) RoundTrip(req *http.Request) (*http.Response, error) {\n\treq.SetBasicAuth(t.username, t.password)\n\treturn t.transport.RoundTrip(req)\n}\n\nfunc NewClient(cfg Config) (*Client, error) {\n\tu, err := url.Parse(cfg.URL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar client *http.Client\n\tif cfg.HTTPClient != nil {\n\t\tclient = cfg.HTTPClient\n\t} else {\n\t\tclient = &http.Client{\n\t\t\tTimeout: 30 * time.Second,\n\t\t}\n\t}\n\n\tif cfg.UnixSocket != \"\" {\n\t\ttransport := &http.Transport{\n\t\t\tDialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\t\treturn net.Dial(\"unix\", cfg.UnixSocket)\n\t\t\t},\n\t\t}\n\t\tclient.Transport = transport\n\t}\n\n\tif cfg.Username != \"\" || cfg.Password != \"\" {\n\t\tbaseTransport := client.Transport\n\t\tif baseTransport == nil {\n\t\t\tbaseTransport = &http.Transport{}\n\t\t}\n\t\tclient.Transport = &basicAuthTransport{\n\t\t\tusername:  cfg.Username,\n\t\t\tpassword:  cfg.Password,\n\t\t\ttransport: baseTransport,\n\t\t}\n\t}\n\n\treturn &Client{\n\t\turl:         u,\n\t\tunixSocket:  cfg.UnixSocket,\n\t\tusername:    cfg.Username,\n\t\tpassword:    cfg.Password,\n\t\thttpClient:  client,\n\t\tuserAgent:   cfg.UserAgent,\n\t\tprecision:   cfg.Precision,\n\t}, nil\n}\n\ntype Query struct {\n\tText             string\n\tDatabase         string\n\tRetentionPolicy  string\n\tPrecision        string\n}\n\ntype BatchPoints struct {\n\tPoints           []Point\n\tDatabase         string\n\tRetentionPolicy  string\n\tPrecision        string\n}\n\ntype Point struct {\n\tMeasurement string\n\tTags        []Tag\n\tFields      []Field\n\tTimestamp   int64\n}\n\ntype Tag struct {\n\tKey   string\n\tValue string\n}\n\ntype Field struct {\n\tKey       string\n\tValue     string\n\tDataType  string\n}\n\ntype Response struct {\n\tResults []Result\n}\n\ntype Result struct {\n\tSeries []Series\n\tError  string\n}\n\ntype Series struct {\n\tName    string\n\tTags    map[string]string\n\tColumns []string\n\tValues  [][]interface{}\n}\n\nfunc (c *Client) QueryContext(ctx context.Context, q Query) (*Response, error) {\n\tu := *c.url\n\tu.Path = \"/query\"\n\tparams := url.Values{}\n\tparams.Set(\"q\", q.Text)\n\tif q.Database != \"\" {\n\t\tparams.Set(\"db\", q.Database)\n\t}\n\tif q.RetentionPolicy != \"\" {\n\t\tparams.Set(\"rp\", q.RetentionPolicy)\n\t}\n\tif q.Precision != \"\" {\n\t\tparams.Set(\"precision\", q.Precision)\n\t} else {\n\t\tparams.Set(\"precision\", c.precision)\n\t}\n\tu.RawQuery = params.Encode()\n\n\treq, err := http.NewRequestWithContext(ctx, \"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Accept\", \"application/json\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn nil, fmt.Errorf(\"influxdb query error: %s\", body)\n\t}\n\n\tvar response Response\n\tif err := json.NewDecoder(resp.Body).Decode(&response); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(ctx context.Context, bp BatchPoints) (*Response, error) {\n\tvar b strings.Builder\n\tfor _, p := range bp.Points {\n\t\tb.WriteString(p.Measurement)\n\t\tif len(p.Tags) > 0 {\n\t\t\tb.WriteString(\",\")\n\t\t\tfor i, tag := range p.Tags {\n\t\t\t\tif i > 0 {\n\t\t\t\t\tb.WriteString(\",\")\n\t\t\t\t}\n\t\t\t\tb.WriteString(tag.Key)\n\t\t\t\tb.WriteString(\"=\")\n\t\t\t\tb.WriteString(tag.Value)\n\t\t\t}\n\t\t}\n\t\tif len(p.Fields) > 0 {\n\t\t\tb.WriteString(\" \")\n\t\t\tfor i, field := range p.Fields {\n\t\t\t\tif i > 0 {\n\t\t\t\t\tb.WriteString(\",\")\n\t\t\t\t}\n\t\t\t\tb.WriteString(field.Key)\n\t\t\t\tb.WriteString(\"=\")\n\t\t\t\tb.WriteString(field.Value)\n\t\t\t\tif field.DataType == \"integer\" {\n\t\t\t\t\tb.WriteString(\"i\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif p.Timestamp != 0 {\n\t\t\tb.WriteString(\" \")\n\t\t\tb.WriteString(strconv.FormatInt(p.Timestamp, 10))\n\t\t}\n\t\tb.WriteString(\"\\n\")\n\t}\n\n\tu := *c.url\n\tu.Path = \"/write\"\n\tparams := url.Values{}\n\tif bp.Database != \"\" {\n\t\tparams.Set(\"db\", bp.Database)\n\t}\n\tif bp.RetentionPolicy != \"\" {\n\t\tparams.Set(\"rp\", bp.RetentionPolicy)\n\t}\n\tif bp.Precision != \"\" {\n\t\tparams.Set(\"precision\", bp.Precision)\n\t} else {\n\t\tparams.Set(\"precision\", c.precision)\n\t}\n\tu.RawQuery = params.Encode()\n\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn nil, fmt.Errorf(\"influxdb write error: %s\", body)\n\t}\n\n\tvar response Response\n\tif err := json.NewDecoder(resp.Body).Decode(&response); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &response, nil\n}\n```"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and graceful shutdown capabilities.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - Interface for handling incoming requests\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nShutdownContext(context.Context) error - Gracefully shuts down the server with context support\nisStarted() bool - Helper method to check server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw, writer: w}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) ShutdownContext(ctx context.Context) error {\n\tsrv.lock.Lock()\n\tif !srv.started {\n\t\tsrv.lock.Unlock()\n\t\treturn &Error{err: \"server not started\"}\n\t}\n\n\tsrv.started = false\n\n\tif srv.Listener != nil {\n\t\tsrv.Listener.Close()\n\t}\n\n\tfor rw := range srv.conns {\n\t\trw.SetReadDeadline(aLongTimeAgo)\n\t}\n\n\tsrv.lock.Unlock()\n\n\tvar ctxErr error\n\tselect {\n\tcase <-srv.shutdown:\n\tcase <-ctx.Done():\n\t\tctxErr = ctx.Err()\n\t}\n\n\treturn ctxErr\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tHandle(net.Conn) error\n}\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tHandler     Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown    chan struct{}\n\tconns       map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tif s.started {\n\t\ts.lock.Unlock()\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.started = true\n\ts.lock.Unlock()\n\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif s.ReadTimeout > 0 {\n\t\tlistener.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t}\n\tif s.WriteTimeout > 0 {\n\t\tlistener.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t}\n\n\tgo s.serveTCP(listener)\n\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) {\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\tgo s.serveTCPConn(conn)\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tif s.IdleTimeout != nil {\n\t\tidleTimeout := s.IdleTimeout()\n\t\tif idleTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t\t}\n\t}\n\n\tif err := s.Handler.Handle(conn); err != nil {\n\t}\n}\n\nfunc (s *Server) ShutdownContext(ctx context.Context) error {\n\ts.lock.Lock()\n\tif !s.started {\n\t\ts.lock.Unlock()\n\t\treturn errors.New(\"server not started\")\n\t}\n\tselect {\n\tcase <-s.shutdown:\n\t\ts.lock.Unlock()\n\t\treturn nil\n\tdefault:\n\t}\n\tclose(s.shutdown)\n\ts.lock.Unlock()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tcase <-time.After(5 * time.Second):\n\t\treturn errors.New(\"shutdown timeout\")\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tstarted := s.started\n\ts.lock.RUnlock()\n\treturn started\n}\n```"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection timeouts, track active connections, and provide hooks for custom message handling.\n\nStruct Description: The Server struct represents a TCP server that can listen for incoming connections, handle them concurrently, and manage server lifecycle operations. It supports both plain TCP and TLS configurations.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (tcp, tcp4, tcp6, or their TLS variants)\nListener: net.Listener - The active network listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection handler (unused in TCP implementation)\nHandler: Handler - Interface for handling incoming messages\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nMsgAcceptFunc: MsgAcceptFunc - Function to filter acceptable messages\nlock: sync.RWMutex - Mutex for protecting concurrent access to server state\nstarted: bool - Flag indicating if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Map of active connections\nudpPool: sync.Pool - Pool for UDP resources (unused in TCP implementation)\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nisStarted() bool - Helper method to check server running state\ninit() - Initializes server internal structures\ngetReadTimeout() time.Duration - Gets the current read timeout value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool  sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigSecret: srv.TsigSecret, tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\t\"crypto/tls\"\n)\n\ntype Handler interface {\n\tHandleMessage(conn net.Conn, msg []byte) error\n}\n\ntype MsgAcceptFunc func(msg []byte) bool\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAcceptFunc MsgAcceptFunc\n\tlock         sync.RWMutex\n\tstarted      bool\n\tshutdown     chan struct{}\n\tconns        map[net.Conn]struct{}\n\tudpPool      sync.Pool\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.started {\n\t\treturn errors.New(\"server already started\")\n\t}\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.Listener = listener\n\n\tif s.TLSConfig != nil {\n\t\ts.Listener = tls.NewListener(s.Listener, s.TLSConfig)\n\t}\n\n\tgo s.serveTCP(s.Listener)\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) {\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error accepting connection: %v\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.lock.Lock()\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\t\t\tgo s.serveTCPConn(conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\treadTimeout := s.getReadTimeout()\n\twriteTimeout := s.WriteTimeout\n\tidleTimeout := s.IdleTimeout()\n\n\tconn.SetReadDeadline(time.Now().Add(readTimeout))\n\tconn.SetWriteDeadline(time.Now().Add(writeTimeout))\n\n\tfor {\n\t\tbuf := make([]byte, 1024)\n\t\tn, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tmsg := buf[:n]\n\t\tif s.MsgAcceptFunc != nil && !s.MsgAcceptFunc(msg) {\n\t\t\treturn\n\t\t}\n\t\tif err := s.Handler.HandleMessage(conn, msg); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif idleTimeout > 0 {\n\t\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t\t}\n\t}\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.ReadTimeout == 0 {\n\t\treturn 30 * time.Second\n\t}\n\treturn s.ReadTimeout\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) init() {\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n\ts.started = false\n}\n```"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Implement a gRPC client function in Go that establishes a bidirectional streaming connection with a gRPC server, sends a chat message, and continuously receives responses from the server until the connection is closed.\n\nFunction Description: The function `Test` is a test function that demonstrates bidirectional streaming gRPC communication. It connects to a gRPC server, sends a chat message, and asynchronously receives responses from the server. The function handles connection errors, stream creation errors, and different types of response errors (including EOF when the server closes the connection).\n\nInput: None (The function is a test function with no explicit input parameters, but it connects to a predefined server address \"127.0.0.1:8089\")\n\nOutput: None (The function doesn't return any value but prints received messages and errors to stdout)\n\nNote: The function uses a deferred connection closure and runs the send operation in a separate goroutine to allow simultaneous sending and receiving. The main loop continues receiving until an EOF error or other fatal error occurs.",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"io\"\n\t\"log\"\n\t\"testing\"\n\n\t\"learning_tools/grpc/bidirectional_streaming_rpc/proto\"\n)\nfunc Test(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tdefer conn.Close()\n\tclient := proto.NewChatServiceClient(conn)\n\tctx := context.Background()\n\tstream, err := client.Chat(ctx)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tgo func() {\n\t\tif err := stream.Send(&proto.Request{Input: \"\u804a\u5929\"}); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"\u670d\u52a1\u7aef\u7ed3\u675f\u901a\u77e5:\", err.Error())\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(\"\u63a5\u53d7\u6570\u636e\u9519\u8bef:\", err.Error())\n\t\t}\n\t\tfmt.Println(\"\u670d\u52a1\u7aef\u8fd4\u56de:\", response.Output)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc Test() {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure())\n\tif err != nil {\n\t\tfmt.Println(\"Failed to connect:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := NewChatServiceClient(conn)\n\tstream, err := client.ChatStream(context.Background())\n\tif err != nil {\n\t\tfmt.Println(\"Failed to create stream:\", err)\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tmsg := &Message{Content: \"Hello from client\"}\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\tfmt.Println(\"Send error:\", err)\n\t\t}\n\t}()\n\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tfmt.Println(\"Server closed the connection\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Receive error:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(\"Received:\", resp.Content)\n\t}\n}\n```"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a Go client for interacting with Rancher metadata service, capable of making HTTP requests with custom headers and handling connection testing with exponential backoff.\n\nStruct Description: The Client struct represents a Rancher metadata client that manages HTTP connections to Rancher metadata service endpoints.\n\nFields:\nurl: string - The base URL for Rancher metadata service (default: \"http://rancher-metadata\")\nhttpClient: *http.Client - The HTTP client used for making requests\n\nMethods:\nNewRancherClient: (backendNodes []string) -> (*Client, error) - Creates a new Rancher client instance, optionally using the first backend node if provided, and tests the connection\nmakeMetaDataRequest: (path string) -> ([]byte, error) - Makes a GET request to the specified path with JSON accept header, returns response body\ntestConnection: () -> error - Tests the connection to the metadata service with exponential backoff retry logic (up to 20 seconds)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\turl := \"http://rancher-metadata\"\n\n\tif len(backendNodes) > 0 {\n\t\turl = \"http://\" + backendNodes[0]\n\t}\n\n\tclient := &Client{\n\t\turl:        url,\n\t\thttpClient: &http.Client{},\n\t}\n\n\terr := client.testConnection()\n\treturn client, err\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\treq, _ := http.NewRequest(\"GET\", strings.Join([]string{c.url, path}, \"\"), nil)\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\treturn ioutil.ReadAll(resp.Body)\n}\n\nfunc (c *Client) testConnection() error {\n\tvar err error\n\tmaxTime := 20 * time.Second\n\n\tfor i := 1 * time.Second; i < maxTime; i *= time.Duration(2) {\n\t\tif _, err = c.makeMetaDataRequest(\"/\"); err != nil {\n\t\t\ttime.Sleep(i)\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\turl := \"http://rancher-metadata\"\n\tif len(backendNodes) > 0 {\n\t\turl = backendNodes[0]\n\t}\n\tclient := &Client{\n\t\turl:        url,\n\t\thttpClient: &http.Client{},\n\t}\n\tif err := client.testConnection(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn client, nil\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\turl := c.url + path\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Accept\", \"application/json\")\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n\nfunc (c *Client) testConnection() error {\n\tconst maxTotalTime = 20 * time.Second\n\tstart := time.Now()\n\tdelay := 100 * time.Millisecond\n\tfor {\n\t\treq, err := http.NewRequest(\"GET\", c.url, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treq.Header.Set(\"Accept\", \"application/json\")\n\t\tresp, err := c.httpClient.Do(req)\n\t\tif err == nil {\n\t\t\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\t\t\tresp.Body.Close()\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tresp.Body.Close()\n\t\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t\t}\n\t\tif time.Since(start) > maxTotalTime {\n\t\t\treturn fmt.Errorf(\"connection test failed after %v\", maxTotalTime)\n\t\t}\n\t\ttime.Sleep(delay)\n\t\tdelay *= 2\n\t\tif delay > 10*time.Second {\n\t\t\tdelay = 10 * time.Second\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a Go function that makes a gRPC call to a test service's EmptyCall method, handling connection establishment and cleanup.\n\nFunction Description: The function invokes the EmptyCall RPC method on a gRPC test service. It establishes a connection to the server with timeout and blocking options, makes the RPC call, and properly closes the connection. The function handles both connection errors and RPC call errors.\n\nInput:\n- address: string - The server address to connect to\n- dialOptions: []grpc.DialOption - List of gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tdialOptions = append(dialOptions, grpc.WithBlock())\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewTestServiceClient(clientConn)\n\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc CallEmpty(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tconn, err := grpc.Dial(address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := testpb.NewTestServiceClient(conn)\n\tctx := context.Background()\n\tresp, err := client.EmptyCall(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n```"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Implement a function to register a mapper with a gRPC server using the Device Management Interface (DMI) API. The function should establish a connection to the server, send a registration request, and return the list of devices and device models provided by the server.\n\nFunction Description: The `RegisterMapper` function connects to a gRPC server using Unix domain socket, sends a mapper registration request with the provided configuration, and returns the device and device model lists from the server response. It handles connection establishment, timeout context, and proper cleanup of resources.\n\nInput: \n- `withData` [bool]: A flag indicating whether to include data in the registration request.\n\nOutput:\n- `[]*dmiapi.Device`: A slice of pointers to Device objects returned by the server.\n- `[]*dmiapi.DeviceModel`: A slice of pointers to DeviceModel objects returned by the server.\n- `error`: An error object if any step fails, nil otherwise.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/common\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tresp, err := c.MapperRegister(ctx, &dmiapi.MapperRegisterRequest{\n\t\tWithData: withData,\n\t\tMapper: &dmiapi.MapperInfo{\n\t\t\tName:       cfg.Common.Name,\n\t\t\tVersion:    cfg.Common.Version,\n\t\t\tApiVersion: cfg.Common.APIVersion,\n\t\t\tProtocol:   cfg.Common.Protocol,\n\t\t\tAddress:    []byte(cfg.GrpcServer.SocketPath),\n\t\t\tState:      common.DeviceStatusOK,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.DeviceList, resp.ModelList, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.Dial(\"unix:///var/run/dmi.sock\", grpc.WithInsecure(), grpc.WithDialer(func(target string, timeout time.Duration) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", target[7:])\n\t}))\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewDeviceManagementClient(conn)\n\treq := &dmiapi.RegisterMapperRequest{\n\t\tWithData: withData,\n\t}\n\tresp, err := client.RegisterMapper(ctx, req)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.Devices, resp.DeviceModels, nil\n}\n```"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a function that establishes a secure or insecure gRPC client connection to a server and returns a client instance for making RPC calls.\n\nFunction Description: The function `createGRPCClient` establishes a connection to a gRPC server using the provided server address and security options. It supports both TLS-secured connections (with optional certificate verification) and insecure connections. The function returns a client instance that can be used to make RPC calls to the server.\n\nInput:\n- `serverAddr` (string): The address of the gRPC server in \"host:port\" format\n- `useTLS` (bool): Flag indicating whether to use TLS for the connection\n- `caFile` (string, optional): Path to the CA certificate file for TLS verification (required if useTLS is true)\n- `serverHostOverride` (string, optional): Server name used for TLS hostname verification\n\nOutput:\n- `pb.RouteGuideClient`: A gRPC client instance for making RPC calls\n- `*grpc.ClientConn`: The established gRPC connection (should be closed by the caller when done)\n- `error`: Any error that occurred during connection establishment",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func createGRPCClient(serverAddr string, useTLS bool, caFile string, serverHostOverride string) (pb.RouteGuideClient, *grpc.ClientConn, error) {\n    var opts []grpc.DialOption\n    var creds credentials.TransportCredentials\n\n    if useTLS {\n        if caFile == \"\" {\n            return nil, nil, errors.New(\"caFile is required when useTLS is true\")\n        }\n        caCert, err := os.ReadFile(caFile)\n        if err != nil {\n            return nil, nil, err\n        }\n        certPool := x509.NewCertPool()\n        if !certPool.AppendCertsFromPEM(caCert) {\n            return nil, nil, errors.New(\"failed to append CA cert\")\n        }\n        tlsConfig := &tls.Config{\n            RootCAs: certPool,\n        }\n        if serverHostOverride != \"\" {\n            tlsConfig.ServerName = serverHostOverride\n        }\n        creds = credentials.NewTLS(tlsConfig)\n    } else {\n        creds = credentials.NewInsecure()\n    }\n\n    opts = append(opts, grpc.WithTransportCredentials(creds))\n    conn, err := grpc.Dial(serverAddr, opts...)\n    if err != nil {\n        return nil, nil, err\n    }\n    client := pb.NewRouteGuideClient(conn)\n    return client, conn, nil\n}"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Implement a gRPC client in Go that connects to a gRPC server over a Unix domain socket, retrieves configuration information, and manages base virtual machine instances.\n\nStruct Description: The grpccache struct represents a gRPC client cache that maintains a connection to a gRPC server and stores VM configuration information.\n\nFields:\nconn: *grpc.ClientConn - Maintains the active connection to the gRPC server\nconfig: *vc.VMConfig - Stores the virtual machine configuration obtained from the server\n\nMethods:\nNew: [Name](ctx context.Context, endpoint string) -> (base.FactoryBase, error) - Creates a new grpccache instance by establishing a connection to the gRPC server at the specified endpoint and retrieving the VM configuration.\nGetBaseVM: [Name](ctx context.Context, config vc.VMConfig) -> (*vc.VM, error) - Retrieves a base VM instance from the cache server and closes the connection when done. The method converts the gRPC response to a local VM object.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\n\ttypes \"github.com/gogo/protobuf/types\"\n\tpb \"github.com/kata-containers/runtime/protocols/cache\"\n\tvc \"github.com/kata-containers/runtime/virtcontainers\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\tconn, err := grpc.Dial(fmt.Sprintf(\"unix://%s\", endpoint), grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to connect %q\", endpoint)\n\t}\n\n\tjConfig, err := pb.NewCacheServiceClient(conn).Config(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to Config\")\n\t}\n\n\tconfig, err := vc.GrpcToVMConfig(jConfig)\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to convert JSON to VMConfig\")\n\t}\n\n\treturn &grpccache{conn: conn, config: config}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tdefer g.conn.Close()\n\tgVM, err := pb.NewCacheServiceClient(g.conn).GetBaseVM(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to GetBaseVM\")\n\t}\n\treturn vc.NewVMFromGrpc(ctx, gVM, *g.config)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"yourpackage/vc\"\n\t\"yourpackage/base\"\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\topts := []grpc.DialOption{\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithDialer(func(addr string, timeout time.Duration) (net.Conn, error) {\n\t\t\treturn net.Dial(\"unix\", addr)\n\t\t}),\n\t}\n\tconn, err := grpc.Dial(endpoint, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := vc.NewConfigServiceClient(conn)\n\tconfigResp, err := client.GetConfig(ctx)\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\n\treturn &grpccache{\n\t\tconn:   conn,\n\t\tconfig: configResp.Config,\n\t}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tclient := vc.NewBaseVMServiceClient(g.conn)\n\tresp, err := client.GetBaseVM(ctx, &config)\n\tif err != nil {\n\t\tg.conn.Close()\n\t\treturn nil, err\n\t}\n\tg.conn.Close()\n\treturn resp.VM, nil\n}\n```"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a Dragonfly daemon server over a Unix domain socket to download files from a specified URL to a local output path, with various download configuration options.\n\nFunction Description: The function establishes a gRPC connection to a Dragonfly daemon server running on a Unix domain socket, initiates a file download operation with specified parameters including authentication headers for S3 storage, and streams the download results until completion.\n\nInput:\n- ctx context.Context - Context for controlling the gRPC call lifecycle\n- unixSocketPath string - Path to the Unix domain socket (e.g., \"/run/dfdaemon.sock\")\n- downloadRequest *dfdaemonv1.DownRequest - Download request containing:\n  * Uuid: string - Unique identifier for the download\n  * Url: string - Source URL to download from\n  * Output: string - Local output path\n  * Recursive: bool - Whether to download recursively\n  * UrlMeta: *commonv1.UrlMeta - Metadata including S3 authentication headers\n  * Other download configuration parameters\n\nOutput:\n- map[string]*dfdaemonv1.DownResult - Map of download results keyed by output path\n- error - Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tdfdaemonv1 \"d7y.io/api/v2/pkg/apis/dfdaemon/v1\"\n)\nfunc main() {\n\tdialer := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", addr)\n\t}\n\n\tunixAddr := \"/run/dfdaemon.sock\"\n\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tunixAddr,\n\t\tgrpc.WithContextDialer(dialer),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tvar (\n\t\tclient = dfdaemonv1.NewDaemonClient(conn)\n\t\tctx    = context.Background()\n\t)\n\n\tdownloadClient, err := client.Download(ctx, &dfdaemonv1.DownRequest{\n\t\tUuid:              \"95305fa2-138b-4466-acec-62865ab6403c\",\n\t\tUrl:               \"s3://minio-test-bucket/dragonfly-test/usr/\" + *subDir,\n\t\tOutput:            \"/var/lib/dragonfly-grpc-test/usr/\" + *subDir,\n\t\tRecursive:         true,\n\t\tTimeout:           0,\n\t\tLimit:             0,\n\t\tDisableBackSource: false,\n\t\tUrlMeta: &commonv1.UrlMeta{\n\t\t\tDigest: \"\",\n\t\t\tTag:    \"\",\n\t\t\tRange:  \"\",\n\t\t\tFilter: \"Expires&Signature\",\n\t\t\tHeader: map[string]string{\n\t\t\t\t\"awsEndpoint\":         \"http://minio.dragonfly-e2e.svc:9000\",\n\t\t\t\t\"awsRegion\":           \"us-west-1\",\n\t\t\t\t\"awsAccessKeyID\":      \"root\",\n\t\t\t\t\"awsSecretAccessKey\":  \"password\",\n\t\t\t\t\"awsS3ForcePathStyle\": \"true\",\n\t\t\t},\n\t\t},\n\t\tUid:                1000,\n\t\tGid:                1000,\n\t\tKeepOriginalOffset: false,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tresults := map[string]*dfdaemonv1.DownResult{}\n\tfor {\n\t\tresp, err := downloadClient.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc DownloadFile(ctx context.Context, unixSocketPath string, downloadRequest *dfdaemonv1.DownRequest) (map[string]*dfdaemonv1.DownResult, error) {\n\tconn, err := grpc.DialContext(ctx, \"unix:\"+unixSocketPath, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := dfdaemonv1.NewDownloaderClient(conn)\n\n\tstream, err := client.Download(ctx, downloadRequest)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresults := make(map[string]*dfdaemonv1.DownResult)\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n\n\treturn results, nil\n}\n```"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a function that connects to a gRPC server, retrieves pod information using the HyperD Public API, and returns the response.\n\nFunction Description: The function establishes an insecure connection to a gRPC server at the specified address, creates a Public API client, sends a PodInfoRequest for a specific pod ID, and returns the pod information response. The connection is automatically closed when the function completes.\n\nInput: \n- server string: The address of the gRPC server (e.g., \"localhost:50051\")\n- podID string: The ID of the pod to query (e.g., \"pod-zpIOTSAjmM\")\n\nOutput:\n- *types.PodInfoResponse: The response containing pod information\n- error: Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/hyperhq/hyperd/types\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure())\n\tif err != nil {\n\t\tfmt.Printf(\"Connect server error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\n\tclient := types.NewPublicAPIClient(conn)\n\trequest := types.PodInfoRequest{\n\t\tPodID: \"pod-zpIOTSAjmM\",\n\t}\n\tresponse, err := client.PodInfo(context.Background(), &request)\n\tif err != nil {\n\t\tfmt.Printf(\"Get PodInfo error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Got response: %v\", response)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc GetPodInfo(server, podID string) (*types.PodInfoResponse, error) {\n    conn, err := grpc.Dial(server, grpc.WithInsecure())\n    if err != nil {\n        return nil, err\n    }\n    defer conn.Close()\n\n    client := publicapi.NewPublicAPIClient(conn)\n    req := &publicapi.PodInfoRequest{\n        PodId: podID,\n    }\n    resp, err := client.PodInfo(context.Background(), req)\n    if err != nil {\n        return nil, err\n    }\n    return resp, nil\n}\n```"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a function to send synchronous HTTP requests with custom configurations including headers, authentication, and transport settings.\n\nFunction Description: The function SendWebRequestSync sends an HTTP request with customizable method, headers, body, and authentication. It handles the response, checks for success status codes, and properly manages resources. The function uses a pre-configured HTTP client with custom transport settings for timeout and TLS configuration.\n\nInput:\n- ctx (context.Context): Context for request cancellation and timeouts\n- webhook (*monitor.SendWebhookSync): Pointer to a struct containing request parameters including:\n  - HttpMethod (string): HTTP method (GET, POST, etc.)\n  - Url (string): Target URL\n  - Body (string): Request body content\n  - ContentType (string): Content-Type header value\n  - User (string): Username for basic auth\n  - Password (string): Password for basic auth\n  - HttpHeader (map[string]string): Additional HTTP headers\n\nOutput:\n- error: Returns nil on success (2xx status code), or an error describing the failure (non-2xx status code or transport error)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"golang.org/x/net/context/ctxhttp\"\n\t\"moul.io/http2curl/v2\"\n\n\t\"yunion.io/x/log\"\n\n\t\"yunion.io/x/onecloud/pkg/apis/monitor\"\n)\nvar netTransport = &http.Transport{\n\tTLSClientConfig: &tls.Config{\n\t\tRenegotiation: tls.RenegotiateFreelyAsClient,\n\t},\n\tProxy: http.ProxyFromEnvironment,\n\tDialContext: (&net.Dialer{\n\t\tTimeout: 30 * time.Second,\n\t}).DialContext,\n\tTLSHandshakeTimeout: 5 * time.Second,\n}\nvar netClient = &http.Client{\n\tTimeout:   time.Second * 30,\n\tTransport: netTransport,\n}\nfunc SendWebRequestSync(ctx context.Context, webhook *monitor.SendWebhookSync) error {\n\tif webhook.HttpMethod == \"\" {\n\t\twebhook.HttpMethod = http.MethodPost\n\t}\n\n\trequest, err := http.NewRequest(webhook.HttpMethod, webhook.Url, bytes.NewReader([]byte(webhook.Body)))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif webhook.ContentType == \"\" {\n\t\twebhook.ContentType = \"application/json\"\n\t}\n\n\trequest.Header.Add(\"Content-Type\", webhook.ContentType)\n\trequest.Header.Add(\"User-Agent\", \"OneCloud Monitor\")\n\n\tif webhook.User != \"\" && webhook.Password != \"\" {\n\t\trequest.Header.Add(\"Authorization\", GetBasicAuthHeader(webhook.User, webhook.Password))\n\t}\n\n\tfor k, v := range webhook.HttpHeader {\n\t\trequest.Header.Set(k, v)\n\t}\n\n\tcurlCmd, _ := http2curl.GetCurlCommand(request)\n\tlog.Debugf(\"webhook curl: %s\", curlCmd)\n\n\tresp, err := ctxhttp.Do(ctx, netClient, request)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode/100 == 2 {\n\t\tif _, err := io.Copy(ioutil.Discard, resp.Body); err != nil {\n\t\t\tlog.Errorf(\"Failed to copy resp.Body to ioutil.Discard: %v\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlog.Errorf(\"Webhook failed statuscode: %s, body: %s\", resp.Status, string(body))\n\treturn fmt.Errorf(\"Webhook response status %v\", resp.Status)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\t\"crypto/tls\"\n)\n\nfunc SendWebRequestSync(ctx context.Context, webhook *monitor.SendWebhookSync) error {\n\treq, err := http.NewRequest(webhook.HttpMethod, webhook.Url, strings.NewReader(webhook.Body))\n\tif err != nil {\n\t\treturn err\n\t}\n\treq = req.WithContext(ctx)\n\n\treq.Header.Set(\"Content-Type\", webhook.ContentType)\n\tfor k, v := range webhook.HttpHeader {\n\t\treq.Header.Set(k, v)\n\t}\n\n\tif webhook.User != \"\" && webhook.Password != \"\" {\n\t\treq.SetBasicAuth(webhook.User, webhook.Password)\n\t}\n\n\ttransport := &http.Transport{\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   30 * time.Second,\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}).DialContext,\n\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\tMaxIdleConns:          100,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t}\n\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tclient.Timeout = time.Until(deadline)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\treturn nil\n\t}\n\n\tbody, _ := io.ReadAll(resp.Body)\n\treturn fmt.Errorf(\"unexpected status code %d: %s\", resp.StatusCode, string(body))\n}"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a server, with optional TLS security, and returns a client instance for a specified service.\n\nFunction Description: The function `createGRPCClient` initializes a gRPC client connection to a specified server address. It supports both secure (TLS) and insecure connections based on input parameters. After establishing the connection, it creates and returns a client instance for the RouteGuide service.\n\nInput: \n- `serverAddr` (string): The address of the gRPC server to connect to\n- `useTLS` (bool): Flag indicating whether to use TLS for the connection\n- `caFile` (string): Path to the CA certificate file (required if useTLS is true)\n- `serverHostOverride` (string): Server name used for TLS host verification\n\nOutput:\n- `pb.RouteGuideClient`: The generated gRPC client instance for the RouteGuide service\n- `error`: Any error that occurred during connection establishment",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/examples/data\"\n\tpb \"google.golang.org/grpc/examples/route_guide/routeguide\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tif *caFile == \"\" {\n\t\t\t*caFile = data.Path(\"x509/ca_cert.pem\")\n\t\t}\n\t\tcreds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\tconn, err := grpc.NewClient(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"os\"\n\t\"io/ioutil\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"path/to/your/proto\"\n)\n\nfunc createGRPCClient(serverAddr string, useTLS bool, caFile string, serverHostOverride string) (pb.RouteGuideClient, error) {\n\tvar opts []grpc.DialOption\n\tif useTLS {\n\t\tcaCert, err := ioutil.ReadFile(caFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcaCertPool := x509.NewCertPool()\n\t\tcaCertPool.AppendCertsFromPEM(caCert)\n\t\ttlsConfig := &tls.Config{\n\t\t\tRootCAs:    caCertPool,\n\t\t\tServerName: serverHostOverride,\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(credentials.NewTLS(tlsConfig)))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(serverAddr, opts...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn pb.NewRouteGuideClient(conn), nil\n}"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and receives a response.\n\nFunction Description: The function establishes a connection to a gRPC server using the provided address, creates a client for the HelloService, sends a HelloRequest with the specified name, and returns the server's response. It handles connection errors and timeout contexts.\n\nInput:\n- addr: string - The address of the gRPC server to connect to (e.g., \"127.0.0.1:8972\")\n- name: string - The name to include in the greeting request\n\nOutput:\n- string - The greeting response from the server\n- error - Any error that occurred during the process\n\nNote: The function should properly close the connection when done and handle context timeouts.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"hello_grpc_client/proto\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &proto.HelloRequest{\n\t\tName: *name,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc Greet(addr, name string) (string, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, addr, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewHelloServiceClient(conn)\n\tresp, err := client.SayHello(ctx, &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn resp.Message, nil\n}\n```"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and properly handle the connection lifecycle.\n\nFunction Description: The function tests gRPC client functionality by connecting to a user authentication service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper gRPC connection management and metadata handling.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None directly returned, but prints authentication tokens to stdout\n- Returns error if connection or RPC calls fail\n\nNote: The function includes error handling and connection cleanup via defer. It uses metadata to pass a UUID for request tracking and demonstrates multiple RPC calls in a loop.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/src\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc TestGRPCClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserServiceClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\tuuid := uuid.New().String()\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\"request-id\", uuid))\n\t\treq := &LoginRequest{Account: account, Password: password}\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(resp.Token)\n\t}\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Implement a Go struct that interacts with the Pinecone vector database to upsert embeddings and retrieve similar vectors using HTTP requests with custom headers.\n\nStruct Description: The Pinecone struct represents a client for interacting with the Pinecone vector database API. It handles authentication, request construction, and response processing for vector operations.\n\nFields:\nEndpoint: string - The base URL of the Pinecone API endpoint\nApiKey: string - The API key used for authentication with Pinecone\n\nMethods:\nNew: [endpoint string, apiKey string] -> [*Pinecone, error] - Creates a new Pinecone client instance with the given endpoint and API key\n\nUpsertEmbeddings: [embeddings [][]float32, chunks []chunk.Chunk, uuid string] -> [error] - Upserts multiple embeddings into Pinecone in batches, with associated metadata from chunks, under the specified namespace UUID\n\nRetrieve: [questionEmbedding []float32, topK int, uuid string] -> [[]vectordb.QueryMatch, error] - Retrieves the topK most similar vectors to the questionEmbedding from the specified namespace UUID",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/pashpashpash/vault/chunk\"\n\t\"github.com/pashpashpash/vault/vectordb\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint string, apiKey string) (*Pinecone, error) {\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []chunk.Chunk, uuid string) error {\n\turl := p.Endpoint + \"/vectors/upsert\"\n\n\tvectors := make([]PineconeVector, len(embeddings))\n\tfor i, embedding := range embeddings {\n\t\tchunk := chunks[i]\n\t\tvectors[i] = PineconeVector{\n\t\t\tID:     fmt.Sprintf(\"id-%d\", i),\n\t\t\tValues: embedding,\n\t\t\tMetadata: map[string]string{\n\t\t\t\t\"file_name\": chunk.Title,\n\t\t\t\t\"start\":     strconv.Itoa(chunk.Start),\n\t\t\t\t\"end\":       strconv.Itoa(chunk.End),\n\t\t\t\t\"title\":     chunk.Title,\n\t\t\t\t\"text\":      chunk.Text,\n\t\t\t},\n\t\t}\n\t}\n\n\tmaxVectorsPerRequest := 100\n\n\tfor i := 0; i < len(vectors); i += maxVectorsPerRequest {\n\t\tend := i + maxVectorsPerRequest\n\t\tif end > len(vectors) {\n\t\t\tend = len(vectors)\n\t\t}\n\n\t\trequestBody, err := json.Marshal(struct {\n\t\t\tVectors   []PineconeVector `json:\"vectors\"`\n\t\t\tNamespace string           `json:\"namespace\"`\n\t\t}{\n\t\t\tVectors:   vectors[i:end],\n\t\t\tNamespace: uuid,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(requestBody))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\t\treturn errors.New(string(body))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]vectordb.QueryMatch, error) {\n\trequestBody, _ := json.Marshal(PineconeQueryRequest{\n\t\tTopK:            topK,\n\t\tIncludeMetadata: true,\n\t\tNamespace:       uuid,\n\t\tQueries: []PineconeQueryItem{\n\t\t\t{\n\t\t\t\tValues: questionEmbedding,\n\t\t\t},\n\t\t},\n\t})\n\n\tpineconeIndexURL := p.Endpoint + \"/query\"\n\treq, _ := http.NewRequest(\"POST\", pineconeIndexURL, bytes.NewBuffer(requestBody))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tvar pineconeQueryResponse PineconeQueryResponse\n\tjson.Unmarshal(body, &pineconeQueryResponse)\n\n\tif len(pineconeQueryResponse.Results) > 0 {\n\t\treturn pineconeQueryResponse.Results[0].Matches, nil\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint, apiKey string) (*Pinecone, error) {\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []Chunk, uuid string) error {\n\tif len(embeddings) != len(chunks) {\n\t\treturn errors.New(\"embeddings and chunks must have the same length\")\n\t}\n\n\tvectors := make([]map[string]interface{}, len(embeddings))\n\tfor i, emb := range embeddings {\n\t\tchunk := chunks[i]\n\t\tvectors[i] = map[string]interface{}{\n\t\t\t\"id\":       chunk.ID,\n\t\t\t\"values\":   emb,\n\t\t\t\"metadata\": chunk.Metadata,\n\t\t}\n\t}\n\n\tbody, _ := json.Marshal(map[string][]map[string]interface{}{\n\t\t\"vectors\": vectors,\n\t})\n\n\turl := fmt.Sprintf(\"%s/v1beta/namespace/%s/vectors/upsert\", p.Endpoint, uuid)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(body))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer \"+p.ApiKey)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"upsert failed with status: %s\", resp.Status)\n\t}\n\n\treturn nil\n}\n\ntype Chunk struct {\n\tID       string\n\tMetadata map[string]interface{}\n}\n\ntype QueryMatch struct {\n\tID       string\n\tScore    float32\n\tValues   []float32\n\tMetadata map[string]interface{}\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]QueryMatch, error) {\n\tbody, _ := json.Marshal(map[string]interface{}{\n\t\t\"topK\":     topK,\n\t\t\"vector\":   questionEmbedding,\n\t\t\"includeValues\": true,\n\t\t\"includeMetadata\": true,\n\t})\n\n\turl := fmt.Sprintf(\"%s/v1beta/namespace/%s/query\", p.Endpoint, uuid)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(body))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer \"+p.ApiKey)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"retrieve failed with status: %s\", resp.Status)\n\t}\n\n\tvar result struct {\n\t\tMatches []struct {\n\t\t\tID       string                 `json:\"id\"`\n\t\t\tScore    float32                `json:\"score\"`\n\t\t\tValues   []float32              `json:\"values\"`\n\t\t\tMetadata map[string]interface{} `json:\"metadata\"`\n\t\t} `json:\"matches\"`\n\t}\n\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tmatches := make([]QueryMatch, len(result.Matches))\n\tfor i, match := range result.Matches {\n\t\tmatches[i] = QueryMatch{\n\t\t\tID:       match.ID,\n\t\t\tScore:    match.Score,\n\t\t\tValues:   match.Values,\n\t\t\tMetadata: match.Metadata,\n\t\t}\n\t}\n\n\treturn matches, nil\n}"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: The task involves creating a gRPC probe client in Go that can establish connections to gRPC servers, perform various probe operations (echo, read, write), and collect metrics about the probe results.\n\nStruct Description: The Probe struct represents a gRPC probe client that manages connections to multiple targets, performs probe operations, and tracks results.\n\nFields:\n\nname: [string] - The name of the probe instance\nsrc: [string] - The source identifier for the probe\nopts: [*options.Options] - Configuration options for the probe\nc: [*configpb.ProbeConf] - gRPC probe-specific configuration\nl: [*logger.Logger] - Logger for recording probe events\ndialOpts: [[]grpc.DialOption] - Options for gRPC dialing\ntargets: [[]endpoint.Endpoint] - List of target endpoints to probe\ncancelFuncs: [map[string]context.CancelFunc] - Map of cancel functions for target operations\ntargetsMu: [sync.Mutex] - Mutex for synchronizing access to targets\nresults: [map[string]*probeRunResult] - Map of probe results by target\n\nMethods:\n\nconnectWithRetry: [func(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn] -> [*grpc.ClientConn] - Establishes a gRPC connection to the target with retry logic, using the specified context, target address, message pattern, and result tracker. Returns the established connection or nil if failed.\n\noneTargetLoop: [func(ctx context.Context, tgt string, index int, result *probeRunResult)] -> [None] - Main probe loop for a single target that continuously performs probe operations (echo/read/write) at regular intervals, using the specified context, target address, target index, and result tracker. Manages connection lifecycle and records metrics.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/google/cloudprober/logger\"\n\t\"github.com/google/cloudprober/metrics\"\n\tconfigpb \"github.com/google/cloudprober/probes/grpc/proto\"\n\t\"github.com/google/cloudprober/probes/options\"\n\t\"github.com/google/cloudprober/probes/probeutils\"\n\t\"github.com/google/cloudprober/targets/endpoint\"\n\n\tgrpcprobepb \"github.com/google/cloudprober/servers/grpc/proto\"\n\tservicepb \"github.com/google/cloudprober/servers/grpc/proto\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\t\"google.golang.org/grpc/credentials/local\"\n\t\"google.golang.org/grpc/peer\"\n)\n\ntype Probe struct {\n\tname     string\n\tsrc      string\n\topts     *options.Options\n\tc        *configpb.ProbeConf\n\tl        *logger.Logger\n\tdialOpts []grpc.DialOption\n\n\ttargets     []endpoint.Endpoint\n\tcancelFuncs map[string]context.CancelFunc\n\ttargetsMu   sync.Mutex\n\n\tresults map[string]*probeRunResult\n}\n\ntype probeRunResult struct {\n\tsync.Mutex\n\ttarget        string\n\ttotal         metrics.Int\n\tsuccess       metrics.Int\n\tlatency       metrics.Value\n\tconnectErrors metrics.Int\n}\n\nfunc (p *Probe) connectWithRetry(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn {\n\tconnectTimeout := p.opts.Timeout\n\tif p.c.GetConnectTimeoutMsec() > 0 {\n\t\tconnectTimeout = time.Duration(p.c.GetConnectTimeoutMsec()) * time.Millisecond\n\t}\n\tvar conn *grpc.ClientConn\n\tvar err error\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Warningf(\"ProbeId(%s): context cancelled in connect loop.\", msgPattern)\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\t\tconnCtx, cancelFunc := context.WithTimeout(ctx, connectTimeout)\n\n\t\tif uriScheme := p.c.GetUriScheme(); uriScheme != \"\" {\n\t\t\ttgt = uriScheme + tgt\n\t\t}\n\t\tconn, err = grpc.DialContext(connCtx, tgt, p.dialOpts...)\n\n\t\tcancelFunc()\n\t\tif err != nil {\n\t\t\tp.l.Warningf(\"ProbeId(%v) connect error: %v\", msgPattern, err)\n\t\t} else {\n\t\t\tp.l.Infof(\"ProbeId(%v) connection established.\", msgPattern)\n\t\t\tbreak\n\t\t}\n\t\tresult.Lock()\n\t\tresult.total.Inc()\n\t\tresult.connectErrors.Inc()\n\t\tresult.Unlock()\n\t}\n\treturn conn\n}\n\nfunc (p *Probe) oneTargetLoop(ctx context.Context, tgt string, index int, result *probeRunResult) {\n\tmsgPattern := fmt.Sprintf(\"%s,%s%s,%03d\", p.src, p.c.GetUriScheme(), tgt, index)\n\n\tconn := p.connectWithRetry(ctx, tgt, msgPattern, result)\n\tif conn == nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := servicepb.NewProberClient(conn)\n\ttimeout := p.opts.Timeout\n\tmethod := p.c.GetMethod()\n\n\tmsgSize := p.c.GetBlobSize()\n\tmsg := make([]byte, msgSize)\n\tprobeutils.PatternPayload(msg, []byte(msgPattern))\n\tticker := time.NewTicker(p.opts.Interval)\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Warningf(\"ProbeId(%s): context cancelled in request loop.\", msgPattern)\n\t\t\tticker.Stop()\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t}\n\n\t\treqCtx, cancelFunc := context.WithTimeout(ctx, timeout)\n\t\tvar success int64\n\t\tvar delta time.Duration\n\t\tstart := time.Now()\n\t\tvar err error\n\t\tvar peer peer.Peer\n\t\topts := []grpc.CallOption{\n\t\t\tgrpc.WaitForReady(true),\n\t\t\tgrpc.Peer(&peer),\n\t\t}\n\t\tswitch method {\n\t\tcase configpb.ProbeConf_ECHO:\n\t\t\treq := &grpcprobepb.EchoMessage{\n\t\t\t\tBlob: []byte(msg),\n\t\t\t}\n\t\t\t_, err = client.Echo(reqCtx, req, opts...)\n\t\tcase configpb.ProbeConf_READ:\n\t\t\treq := &grpcprobepb.BlobReadRequest{\n\t\t\t\tSize: proto.Int32(msgSize),\n\t\t\t}\n\t\t\t_, err = client.BlobRead(reqCtx, req, opts...)\n\t\tcase configpb.ProbeConf_WRITE:\n\t\t\treq := &grpcprobepb.BlobWriteRequest{\n\t\t\t\tBlob: []byte(msg),\n\t\t\t}\n\t\t\t_, err = client.BlobWrite(reqCtx, req, opts...)\n\t\tdefault:\n\t\t\tp.l.Criticalf(\"Method %v not implemented\", method)\n\t\t}\n\t\tcancelFunc()\n\t\tif err != nil {\n\t\t\tpeerAddr := \"unknown\"\n\t\t\tif peer.Addr != nil {\n\t\t\t\tpeerAddr = peer.Addr.String()\n\t\t\t}\n\t\t\tp.l.Warningf(\"ProbeId(%s) request failed: %v. ConnState: %v. Peer: %v\", msgPattern, err, conn.GetState(), peerAddr)\n\t\t} else {\n\t\t\tsuccess = 1\n\t\t\tdelta = time.Since(start)\n\t\t}\n\t\tresult.Lock()\n\t\tresult.total.Inc()\n\t\tresult.success.AddInt64(success)\n\t\tresult.latency.AddFloat64(delta.Seconds() / p.opts.LatencyUnit.Seconds())\n\t\tresult.Unlock()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\ntype Probe struct {\n\tname        string\n\tsrc         string\n\topts        *options.Options\n\tc           *configpb.ProbeConf\n\tl           *logger.Logger\n\tdialOpts    []grpc.DialOption\n\ttargets     []endpoint.Endpoint\n\tcancelFuncs map[string]context.CancelFunc\n\ttargetsMu   sync.Mutex\n\tresults     map[string]*probeRunResult\n}\n\nfunc (p *Probe) connectWithRetry(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn {\n\tvar conn *grpc.ClientConn\n\tvar err error\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err = grpc.Dial(tgt, p.dialOpts...)\n\t\t\tif err == nil {\n\t\t\t\treturn conn\n\t\t\t}\n\t\t\tp.l.Warn(\"Failed to connect to target\", \"target\", tgt, \"error\", err)\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t}\n}\n\nfunc (p *Probe) oneTargetLoop(ctx context.Context, tgt string, index int, result *probeRunResult) {\n\tticker := time.NewTicker(p.c.Interval)\n\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t\tconn := p.connectWithRetry(ctx, tgt, \"\", result)\n\t\t\tif conn == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdefer conn.Close()\n\t\t\t// Perform probe operations (echo, read, write)\n\t\t\t// Example: echo\n\t\t\t// client := NewSomeServiceClient(conn)\n\t\t\t// resp, err := client.Echo(ctx, &SomeRequest{Msg: \"test\"})\n\t\t\t// if err != nil {\n\t\t\t//     result.Fail(err)\n\t\t\t// } else {\n\t\t\t//     result.Success(resp)\n\t\t\t// }\n\t\t\t// Similar logic for read/write\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Write a Go function that tests the version retrieval functionality of a gRPC service using the Stripe CLI client. The function should establish a connection to the gRPC server, call the Version method, and verify the response matches the expected version.\n\nFunction Description: The function `TestVersionReturnsCLIVersion` is a test function that verifies the version information returned by a gRPC service. It establishes an authenticated connection to a gRPC server, calls the Version RPC method, and checks that the returned version matches the expected value (\"master\"). The connection is properly closed after the test completes.\n\nInput: \n- `t *testing.T`: The testing context provided by Go's testing framework for reporting test failures and logging.\n- Implicit context from `withAuth(context.Background())`: An authenticated context for the gRPC call.\n\nOutput: \n- The function does not return any value but will fail the test if any of the following occur:\n  - The gRPC connection cannot be established\n  - The Version RPC call fails\n  - The returned version does not match the expected value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Version(ctx, &rpc.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version failed: %v\", err)\n\t}\n\n\texpected := rpc.VersionResponse{\n\t\tVersion: \"master\",\n\t}\n\n\tassert.Equal(t, expected.Version, resp.Version)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewStripeCLIClient(conn)\n\tresp, err := client.Version(ctx, &Empty{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version call failed: %v\", err)\n\t}\n\n\tif resp.Version != \"master\" {\n\t\tt.Errorf(\"Expected version 'master', got %s\", resp.Version)\n\t}\n}\n```"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: The task involves creating a gRPC client in Go that connects to a CloudSlack service, establishes a bidirectional stream, and handles incoming events while managing connection lifecycle and errors.\n\nFunction Description: The `start` function initializes a gRPC connection to a CloudSlack server, establishes a bidirectional stream for communication, sends a connection request, and continuously listens for incoming events. It handles connection errors, server closures, and context cancellations appropriately.\n\nInput: \n- `ctx context.Context`: The context for managing the lifecycle of the gRPC connection and handling cancellations.\n- The function also relies on the struct's fields (`log`, `cfg`, `client`, `commGroupMetadata`, `clusterName`, and `botID`) for configuration and logging.\n\nOutput: \n- `error`: Returns an error if any step in the connection or communication process fails, including gRPC connection errors, credential errors, or stream errors. Returns nil if the context is canceled gracefully.\n\nNote: The function uses deferred calls to ensure proper cleanup of resources (closing the gRPC connection and stream) and includes detailed error handling for various gRPC-specific scenarios.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"github.com/kubeshop/botkube/pkg/api/cloudslack\"\n\t\"github.com/kubeshop/botkube/pkg/grpcx\"\n\t\"github.com/kubeshop/botkube/pkg/config\"\n\t\"github.com/kubeshop/botkube/pkg/api/cloudplatform\"\n\t\"github.com/kubeshop/botkube/internal/config/remote\"\n)\n\ntype CloudSlack struct {\n\tlog               logrus.FieldLogger\n\tcfg               config.CloudSlack\n\tclient            *slack.Client\n\tcommGroupMetadata CommGroupMetadata\n\tclusterName       string\n}\n\nfunc (b *CloudSlack) start(ctx context.Context) error {\n\tremoteConfig, ok := remote.GetConfig()\n\tif !ok {\n\t\treturn fmt.Errorf(\"while getting remote config for %s\", config.CloudSlackCommPlatformIntegration)\n\t}\n\n\tcreds, err := grpcx.ClientTransportCredentials(b.log, b.cfg.Server)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC credentials: %w\", err)\n\t}\n\n\topts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(creds),\n\t\tgrpc.WithStreamInterceptor(cloudplatform.AddStreamingClientCredentials(remoteConfig)),\n\t\tgrpc.WithUnaryInterceptor(cloudplatform.AddUnaryClientCredentials(remoteConfig)),\n\t}\n\n\tconn, err := grpc.Dial(b.cfg.Server.URL, opts...)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC connection: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\treq := &pb.ConnectRequest{\n\t\tInstanceId: remoteConfig.Identifier,\n\t\tBotId:      b.botID,\n\t}\n\tc, err := pb.NewCloudSlackClient(conn).Connect(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while initializing gRPC cloud client: %w\", err)\n\t}\n\tdefer func(c pb.CloudSlack_ConnectClient) {\n\t\terr := c.CloseSend()\n\t\tif err != nil {\n\t\t\tb.log.Errorf(\"while closing connection: %s\", err.Error())\n\t\t}\n\t}(c)\n\n\terr = c.Send(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while sending gRPC connection request. %w\", err)\n\t}\n\n\tfor {\n\t\tdata, err := c.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tb.log.Warn(\"gRPC connection was closed by server\")\n\t\t\t\treturn errors.New(\"gRPC connection closed\")\n\t\t\t}\n\t\t\terrStatus, ok := status.FromError(err)\n\t\t\tif ok && errStatus.Code() == codes.Canceled && errStatus.Message() == context.Canceled.Error() {\n\t\t\t\tb.log.Debugf(\"Context was cancelled. Skipping returning error...\")\n\t\t\t\treturn fmt.Errorf(\"while resolving error from gRPC response %s\", errStatus.Err())\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"while receiving cloud slack events: %w\", err)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func (s *MyStruct) start(ctx context.Context) error {\n\tconn, err := grpc.Dial(s.cfg.Addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\ts.log.Error(\"Failed to dial gRPC server\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tstream, err := s.client.StreamEvents(ctx)\n\tif err != nil {\n\t\ts.log.Error(\"Failed to create stream\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer stream.CloseSend()\n\n\tif err := stream.Send(&ConnectRequest{\n\t\tClusterName: s.clusterName,\n\t\tBotID:       s.botID,\n\t}); err != nil {\n\t\ts.log.Error(\"Failed to send connect request\", \"error\", err)\n\t\treturn err\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\ts.log.Info(\"Context canceled, closing stream\")\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tmsg, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\ts.log.Error(\"Failed to receive message\", \"error\", err)\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ts.handleEvent(msg)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a function to test gRPC client functionality for user login using Go's gRPC package. The function should establish a connection to a gRPC server, send multiple login requests with metadata, and handle responses.\n\nFunction Description: The function tests the gRPC client's ability to communicate with a user service. It establishes an insecure connection to the specified server address, creates a client instance, and sends 20 consecutive login requests with generated UUID metadata. Each request uses the same account credentials and prints the received authentication token.\n\nInput: None (The function is a test function with hardcoded values)\n\nOutput: None (The function prints tokens to stdout and may return errors through the testing framework)\n\nNote: The function uses package-level variables and imports from external packages as shown in the reference code. The connection is automatically closed when the function completes.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/utils\"\n\tuuid \"github.com/satori/go.uuid\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "```go\nfunc TestLogin() {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\tclient := NewUserServiceClient(conn)\n\tfor i := 0; i < 20; i++ {\n\t\tid := uuid.New().String()\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\"request-id\", id))\n\t\tresp, err := client.Login(ctx, &LoginRequest{Username: \"testuser\", Password: \"testpass\"})\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(resp.Token)\n\t}\n}\n```"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Implement an HTTP probe function that checks the availability and correctness of a remote HTTP service by making a GET request with custom headers and verifying the response.\n\nFunction Description: The function performs an HTTP probe to a specified URL with custom configuration including timeout, headers, and TLS settings. It verifies the response status code and optionally checks for a success flag in the response body. The function logs the probe results and returns a success/failure status.\n\nInput:\n- protocol: string - The protocol to use (http/https)\n- address: string - The target server address\n- path: string - The request path\n- port: int - The target port number\n- headerList: []*types.HTTPHeader - List of custom HTTP headers to include\n- timeout: time.Duration - Request timeout duration\n- responseSuccessFlag: string - Optional string to check in response body for success\n- log: *zap.SugaredLogger - Logger for recording probe results\n\nOutput:\n- string - Probe result status (Success/Failure)\n- error - Error details if probe fails",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/koderover/zadig/v2/pkg/types\"\n\t\"go.uber.org/zap\"\n)\nfunc doHTTPProbe(protocol, address, path string, port int, headerList []*types.HTTPHeader, timeout time.Duration, responseSuccessFlag string, log *zap.SugaredLogger) (string, error) {\n\ttlsConfig := &tls.Config{InsecureSkipVerify: true}\n\ttransport := &http.Transport{\n\t\tTLSClientConfig:   tlsConfig,\n\t\tDisableKeepAlives: true,\n\t\tProxy:             http.ProxyURL(nil),\n\t}\n\tclient := &http.Client{\n\t\tTimeout:       timeout,\n\t\tTransport:     transport,\n\t\tCheckRedirect: redirectChecker(false),\n\t}\n\turl, err := formatURL(protocol, address, path, port)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\theaders := buildHeader(headerList)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\treq.Header = headers\n\treq.Host = headers.Get(\"Host\")\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\n\tif res.StatusCode >= http.StatusOK && res.StatusCode < http.StatusBadRequest {\n\t\tif responseSuccessFlag != \"\" && !strings.Contains(string(body), responseSuccessFlag) {\n\t\t\treturn Failure, fmt.Errorf(\"HTTP probe failed with response success flag: %s\", responseSuccessFlag)\n\t\t}\n\t\tlog.Infof(\"Probe succeeded for %s, Response: %v\", url, *res)\n\t\treturn Success, nil\n\t}\n\tlog.Warnf(\"Probe failed for %s, response body: %v\", url, string(body))\n\treturn Failure, fmt.Errorf(\"HTTP probe failed with statuscode: %d\", res.StatusCode)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/your/package/types\"\n\t\"go.uber.org/zap/sugaredlogger\"\n)\n\nfunc ProbeHTTP(protocol, address, path string, port int, headerList []*types.HTTPHeader, timeout time.Duration, responseSuccessFlag string, log *sugaredlogger.SugaredLogger) (string, error) {\n\turl := fmt.Sprintf(\"%s://%s:%d%s\", protocol, address, port, path)\n\tclient := &http.Client{\n\t\tTimeout: timeout,\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\tlog.Errorw(\"Failed to create request\", \"error\", err)\n\t\treturn \"Failure\", err\n\t}\n\tfor _, h := range headerList {\n\t\treq.Header.Set(h.Name, h.Value)\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Errorw(\"Request failed\", \"error\", err)\n\t\treturn \"Failure\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tlog.Warnw(\"Non-2xx status code\", \"status\", resp.StatusCode)\n\t\treturn \"Failure\", fmt.Errorf(\"non-2xx status: %d\", resp.StatusCode)\n\t}\n\tif responseSuccessFlag != \"\" {\n\t\tbody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tlog.Errorw(\"Failed to read response body\", \"error\", err)\n\t\t\treturn \"Failure\", err\n\t\t}\n\t\tif !strings.Contains(string(body), responseSuccessFlag) {\n\t\t\tlog.Warnw(\"Response body does not contain success flag\", \"flag\", responseSuccessFlag)\n\t\t\treturn \"Failure\", fmt.Errorf(\"response body does not contain flag: %s\", responseSuccessFlag)\n\t\t}\n\t}\n\tlog.Infow(\"Probe successful\", \"url\", url, \"status\", resp.StatusCode)\n\treturn \"Success\", nil\n}\n```"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends multiple requests, and processes the responses using the GoFrame framework.\n\nFunction Description: The function connects to a gRPC server using service discovery, creates a client stub, and makes repeated calls to a SayHello RPC method. It handles connection errors and response processing, with built-in logging and graceful connection closure.\n\nInput: None (uses package-level constants and context)\n\nOutput: None (logs results to console via GoFrame's logging system)\n\nNote: The function includes an internal loop that makes 10 RPC calls with a 1-second delay between calls. Connection is automatically closed when function completes.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/gsvc\"\n\t\"github.com/gogf/gf/v2/os/gctx\"\n\n\t\"github.com/gogf/gf/contrib/rpc/grpcx/v2\"\n\n\tpb \"github.com/gogf/gf/example/rpc/grpcx/rawgrpc/helloworld\"\n)\nfunc main() {\n\tvar (\n\t\tctx     = gctx.GetInitCtx()\n\t\tservice = gsvc.NewServiceWithName(`hello`)\n\t)\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(`%s://%s`, gsvc.Schema, service.GetKey()),\n\t\tgrpcx.Balancer.WithRandom(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tg.Log().Fatalf(ctx, \"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tfor i := 0; i < 10; i++ {\n\t\tres, err := client.SayHello(ctx, &pb.HelloRequest{Name: `GoFrame`})\n\t\tif err != nil {\n\t\t\tg.Log().Fatalf(ctx, \"could not greet: %+v\", err)\n\t\t}\n\t\tg.Log().Printf(ctx, \"Greeting: %s\", res.Message)\n\t\ttime.Sleep(time.Second)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\t\"github.com/gogf/gf/v2/net/ggrpc\"\n\t\"github.com/gogf/gf/v2/os/glog\"\n)\n\nconst (\n\tServiceAddress = \"etcd://127.0.0.1:2379\"\n)\n\nfunc RunGRPCClient() {\n\tclient, err := ggrpc.NewClient(ServiceAddress, nil)\n\tif err != nil {\n\t\tglog.Fatal(\"Failed to create gRPC client:\", err)\n\t}\n\tdefer client.Close()\n\n\t// Assuming the client stub is created here with generated code\n\t// Example: stub := pb.NewYourServiceClient(client)\n\n\tfor i := 0; i < 10; i++ {\n\t\t// Example request and response handling\n\t\t// req := &pb.HelloRequest{Name: \"World\"}\n\t\t// resp, err := stub.SayHello(context.Background(), req)\n\t\t// if err != nil {\n\t\t//     glog.Error(err)\n\t\t// } else {\n\t\t//     glog.Info(resp.Message)\n\t\t// }\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC management server for Envoy's xDS (Discovery Service) protocol, supporting dynamic configuration updates and load reporting.\n\nStruct Description: The ManagementServer struct represents a gRPC server that implements Envoy's xDS protocol, including Aggregated Discovery Service (ADS) and optionally Load Reporting Service (LRS). It maintains a snapshot cache of resources and handles gRPC connections.\n\nFields:\n- Address: string - The network address the server is listening on\n- LRSServer: *fakeserver.Server - Optional fake LRS server instance\n- cancel: context.CancelFunc - Function to cancel the server's context\n- xs: v3server.Server - xDS server implementation\n- gs: *grpc.Server - gRPC server instance\n- cache: v3cache.SnapshotCache - Cache for storing configuration snapshots\n- version: int - Current version of the configuration\n- logger: interface{ Logf(format string, args ...any) } - Logger interface for output\n\nMethods:\n- StartManagementServer(*testing.T, ManagementServerOptions) *ManagementServer - Creates and starts a new management server instance. Takes testing context and options, returns initialized server.\n- Update(context.Context, UpdateOptions) error - Updates the server's configuration snapshot with new resources. Takes context and update options, returns error if update fails.\n- Stop() - Stops the server and cleans up resources. No parameters or return values.\n\nThe struct provides dynamic configuration management for Envoy proxies through the xDS protocol, with support for listeners, routes, clusters, and endpoints configuration.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/envoyproxy/go-control-plane/pkg/cache/types\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils/xds/fakeserver\"\n\n\tv3clusterpb \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"\n\tv3endpointpb \"github.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3\"\n\tv3listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"\n\tv3routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3cache \"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"\n\tv3resource \"github.com/envoyproxy/go-control-plane/pkg/resource/v3\"\n\tv3server \"github.com/envoyproxy/go-control-plane/pkg/server/v3\"\n)\n\ntype ManagementServer struct {\n\tAddress   string\n\tLRSServer *fakeserver.Server\n\n\tcancel  context.CancelFunc\n\txs      v3server.Server\n\tgs      *grpc.Server\n\tcache   v3cache.SnapshotCache\n\tversion int\n\n\tlogger interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\twait := !opts.AllowResourceSubset\n\tcache := v3cache.NewSnapshotCache(wait, v3cache.IDHash{}, serverLogger{t})\n\n\tlis := opts.Listener\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to listen on localhost:0: %v\", err)\n\t\t}\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tcallbacks := v3server.CallbackFuncs{\n\t\tStreamOpenFunc:     opts.OnStreamOpen,\n\t\tStreamClosedFunc:   opts.OnStreamClosed,\n\t\tStreamRequestFunc:  opts.OnStreamRequest,\n\t\tStreamResponseFunc: opts.OnStreamResponse,\n\t}\n\n\txs := v3server.NewServer(ctx, cache, callbacks)\n\tgs := grpc.NewServer()\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(gs, xs)\n\n\tmgmtServer := &ManagementServer{\n\t\tAddress: lis.Addr().String(),\n\t\tcancel:  cancel,\n\t\tversion: 0,\n\t\tgs:      gs,\n\t\txs:      xs,\n\t\tcache:   cache,\n\t\tlogger:  t,\n\t}\n\tif opts.SupportLoadReportingService {\n\t\tlrs := fakeserver.NewServer(lis.Addr().String())\n\t\tv3lrsgrpc.RegisterLoadReportingServiceServer(gs, lrs)\n\t\tmgmtServer.LRSServer = lrs\n\t}\n\n\tgo gs.Serve(lis)\n\tt.Cleanup(mgmtServer.Stop)\n\treturn mgmtServer\n}\n\nfunc (s *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\ts.version++\n\n\tresources := map[v3resource.Type][]types.Resource{\n\t\tv3resource.ListenerType: resourceSlice(opts.Listeners),\n\t\tv3resource.RouteType:    resourceSlice(opts.Routes),\n\t\tv3resource.ClusterType:  resourceSlice(opts.Clusters),\n\t\tv3resource.EndpointType: resourceSlice(opts.Endpoints),\n\t}\n\tsnapshot, err := v3cache.NewSnapshot(strconv.Itoa(s.version), resources)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create new snapshot cache: %v\", err)\n\t}\n\tif !opts.SkipValidation {\n\t\tif err := snapshot.Consistent(); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to create new resource snapshot: %v\", err)\n\t\t}\n\t}\n\n\tif err := s.cache.SetSnapshot(ctx, opts.NodeID, snapshot); err != nil {\n\t\treturn fmt.Errorf(\"failed to update resource snapshot in management server: %v\", err)\n\t}\n\treturn nil\n}\n\nfunc (s *ManagementServer) Stop() {\n\tif s.cancel != nil {\n\t\ts.cancel()\n\t}\n\ts.gs.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\ntype ManagementServer struct {\n\tAddress    string\n\tLRSServer  *fakeserver.Server\n\tcancel     context.CancelFunc\n\txs         v3server.Server\n\tgs         *grpc.Server\n\tcache      v3cache.SnapshotCache\n\tversion    int\n\tlogger     interface{ Logf(format string, args ...any) }\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\t// Implementation to create and start the server\n\treturn &ManagementServer{}\n}\n\nfunc (s *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\t// Implementation to update configuration snapshot\n\treturn nil\n}\n\nfunc (s *ManagementServer) Stop() {\n\t// Implementation to stop server and clean up resources\n}\n```"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework. The server should be able to gracefully shut down when the context is canceled.\n\nFunction Description: The MainExt function initializes and starts a gRPC server. It sets up a network listener, creates a gRPC server instance, registers the service implementation, and starts the server in a goroutine. The function waits for the context to be canceled before gracefully shutting down the server.\n\nInput:\n- ctx [context.Context]: The context used to control the lifecycle of the gRPC server. Canceling this context will trigger a graceful shutdown.\n- cfg [Config]: A configuration object containing the port number on which the server should listen.\n\nOutput: None (The function runs indefinitely until the context is canceled or an error occurs.)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\ttriggerpb \"github.com/vanus-labs/vanus/api/trigger\"\n)\n\ntype TriggerServer struct {\n\tcfg Config\n}\n\nfunc NewTriggerServer(cfg Config) *TriggerServer {\n\treturn &TriggerServer{\n\t\tcfg: cfg,\n\t}\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlisten, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\tlog.Error().Msg(\"failed to listen\")\n\t\tos.Exit(-1)\n\t}\n\n\tsrv := NewTriggerServer(cfg)\n\n\tvar opts []grpc.ServerOption\n\tgrpcServer := grpc.NewServer(opts...)\n\ttriggerpb.RegisterTriggerWorkerServer(grpcServer, srv)\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tlog.Info(ctx).Msg(\"the grpc server ready to work\")\n\t\terr = grpcServer.Serve(listen)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx).Err(err).Msg(\"grpc server occurred an error\")\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\tgrpcServer.GracefulStop()\n\twg.Wait()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func MainExt(ctx context.Context, cfg Config) {\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\treturn\n\t}\n\ts := grpc.NewServer()\n\t// Register your service here\n\t// Example: pb.RegisterYourServiceServer(s, &yourServiceImpl{})\n\tgo func() {\n\t\tif err := s.Serve(listener); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\t<-ctx.Done()\n\ts.GracefulStop()\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a function that retrieves metadata from a Google Cloud instance using a custom HTTP client with specific headers and returns both the metadata value and its ETag.\n\nFunction Description: The function `getETag` makes an HTTP GET request to the Google Cloud metadata server to fetch instance metadata. It uses a custom HTTP client with timeout configurations and sets required headers (\"Metadata-Flavor\" and \"User-Agent\"). The function handles various response scenarios including errors and not-found statuses, and returns the metadata value along with its ETag if successful.\n\nInput:\n- `client` (*http.Client): A custom HTTP client configured with specific timeout settings\n- `suffix` (string): The metadata path suffix to append to the base metadata URL\n\nOutput:\n- `value` (string): The retrieved metadata value\n- `etag` (string): The ETag header value from the response\n- `err` (error): Any error encountered during the request or processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar (\n\tmetaClient = &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   2 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 2 * time.Second,\n\t\t},\n\t}\n)\n\nfunc getETag(client *http.Client, suffix string) (value, etag string, err error) {\n\thost := os.Getenv(metadataHostEnv)\n\tif host == \"\" {\n\t\thost = metadataIP\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", userAgent)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getETag(client *http.Client, suffix string) (string, string, error) {\n\turl := \"http://metadata.google.internal/computeMetadata/v1/\" + suffix\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", \"Go-http-client\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode == 200 {\n\t\tbody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn \"\", \"\", err\n\t\t}\n\t\treturn string(body), resp.Header.Get(\"ETag\"), nil\n\t}\n\tif resp.StatusCode == 404 {\n\t\treturn \"\", \"\", fmt.Errorf(\"metadata not found\")\n\t}\n\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n}\n```"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a gRPC server for remote actor communication in a distributed actor system using Proto.Actor and Go's gRPC framework.\n\nStruct Description: The Remote struct manages the gRPC server and associated components for remote actor communication in a Proto.Actor system.\n\nFields:\n\nactorSystem: *actor.ActorSystem - Reference to the actor system this remote belongs to\ns: *grpc.Server - The gRPC server instance\nedpReader: *endpointReader - Handles incoming gRPC connections\nedpManager: *endpointManager - Manages active endpoints\nconfig: *Config - Configuration for the remote server\nkinds: map[string]*actor.Props - Map of actor kinds to their properties\nactivatorPid: *actor.PID - Process ID for the activator actor\nblocklist: *BlockList - List of blocked endpoints\n\nMethods:\n\nNewRemote: (actorSystem *actor.ActorSystem, config *Config) -> *Remote - Constructor that initializes a new Remote instance with given actor system and configuration\nStart: () -> () - Starts the gRPC server and initializes all remote communication components\nShutdown: (graceful bool) -> () - Stops the gRPC server, either gracefully or forcefully",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log/slog\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/asynkron/protoactor-go/extensions\"\n\t\"github.com/asynkron/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n)\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\tr := &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n\tfor k, v := range config.Kinds {\n\t\tr.kinds[k] = v\n\t}\n\n\tactorSystem.Extensions.Register(r)\n\n\treturn r\n}\n\nfunc (r *Remote) Start() {\n\tgrpclog.SetLoggerV2(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))\n\tlis, err := net.Listen(\"tcp\", r.config.Address())\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to listen: %v\", err))\n\t}\n\n\tvar address string\n\tif r.config.AdvertisedHost != \"\" {\n\t\taddress = r.config.AdvertisedHost\n\t} else {\n\t\taddress = lis.Addr().String()\n\t}\n\n\tr.actorSystem.ProcessRegistry.RegisterAddressResolver(r.remoteHandler)\n\tr.actorSystem.ProcessRegistry.Address = address\n\tr.Logger().Info(\"Starting remote with address\", slog.String(\"address\", address))\n\n\tr.edpManager = newEndpointManager(r)\n\tr.edpManager.start()\n\n\tr.s = grpc.NewServer(r.config.ServerOptions...)\n\tr.edpReader = newEndpointReader(r)\n\tRegisterRemotingServer(r.s, r.edpReader)\n\tr.Logger().Info(\"Starting Proto.Actor server\", slog.String(\"address\", address))\n\tgo r.s.Serve(lis)\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.edpReader.suspend(true)\n\t\tr.edpManager.stop()\n\n\t\tc := make(chan bool, 1)\n\t\tgo func() {\n\t\t\tr.s.GracefulStop()\n\t\t\tc <- true\n\t\t}()\n\n\t\tselect {\n\t\tcase <-c:\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\")\n\t\tcase <-time.After(time.Second * 10):\n\t\t\tr.s.Stop()\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\", slog.String(\"err\", \"timeout\"))\n\t\t}\n\t} else {\n\t\tr.s.Stop()\n\t\tr.Logger().Info(\"Killed Proto.Actor server\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\ntype Remote struct {\n\tactorSystem *actor.ActorSystem\n\ts           *grpc.Server\n\tedpReader   *endpointReader\n\tedpManager  *endpointManager\n\tconfig      *Config\n\tkinds       map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist   *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\treturn &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n}\n\nfunc (r *Remote) Start() {\n\tlistener, err := net.Listen(\"tcp\", r.config.ListenAddress)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tr.s = grpc.NewServer()\n\tr.edpReader = newEndpointReader(r.actorSystem, r.edpManager, r.blocklist)\n\tr.edpManager = newEndpointManager(r.actorSystem, r.edpReader, r.blocklist)\n\n\t// Register gRPC services here (assuming service is defined)\n\t// proto.RegisterSomeServiceServer(r.s, &someService{remote: r})\n\n\tgo func() {\n\t\tif err := r.s.Serve(listener); err != nil {\n\t\t\tlog.Fatalf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n\n\t// Start activator actor\n\tr.activatorPid = r.actorSystem.ActorOf(actor.PropsFromProducer(func() actor.Actor {\n\t\treturn &activatorActor{remote: r}\n\t}))\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.s.GracefulStop()\n\t} else {\n\t\tr.s.Stop()\n\t}\n\n\tr.edpManager.Shutdown()\n\tr.edpReader.Shutdown()\n}\n```"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Create a gRPC server in Go that collects and processes metrics data using OpenTelemetry protocol, with capabilities for handling incoming requests, storing metrics, and managing server lifecycle.\n\nStruct Description: GRPCCollector is a gRPC server implementation that handles metrics collection following the OpenTelemetry protocol. It manages incoming requests, stores metrics data, tracks headers, and provides server control functionality.\n\nFields:\n\nField1: collpb.UnimplementedMetricsServiceServer - Embedded type to satisfy gRPC interface requirements\nField2: headersMu sync.Mutex - Mutex for thread-safe access to headers\nField3: headers metadata.MD - Stores incoming request headers\nField4: storage *Storage - Stores collected metrics data\nField5: resultCh <-chan ExportResult - Channel for receiving export results\nField6: listener net.Listener - Network listener for the server\nField7: srv *grpc.Server - gRPC server instance\n\nMethods:\n\nMethod1: NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) - Creates and starts a new gRPC collector instance\nMethod2: Shutdown() - Stops the gRPC server gracefully\nMethod3: Addr() net.Addr - Returns the network address the server is listening on\nMethod4: Collect() *Storage - Returns the storage containing collected metrics\nMethod5: Headers() map[string][]string - Returns collected headers in a thread-safe manner\nMethod6: Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) - Handles incoming metrics export requests and processes them",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/proto/otlp/collector/metrics/v1\"\n)\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\n\tresultCh <-chan ExportResult\n\tlistener net.Listener\n\tsrv      *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tif endpoint == \"\" {\n\t\tendpoint = \"localhost:0\"\n\t}\n\n\tc := &GRPCCollector{\n\t\tstorage:  NewStorage(),\n\t\tresultCh: resultCh,\n\t}\n\n\tvar err error\n\tc.listener, err = net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.srv = grpc.NewServer()\n\tcollpb.RegisterMetricsServiceServer(c.srv, c)\n\tgo func() { _ = c.srv.Serve(c.listener) }()\n\n\treturn c, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() { c.srv.Stop() }\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\treturn metadata.Join(c.headers)\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tc.storage.Add(req)\n\n\tif h, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tc.headersMu.Lock()\n\t\tc.headers = metadata.Join(c.headers, h)\n\t\tc.headersMu.Unlock()\n\t}\n\n\tif c.resultCh != nil {\n\t\tr := <-c.resultCh\n\t\tif r.Response == nil {\n\t\t\treturn &collpb.ExportMetricsServiceResponse{}, r.Err\n\t\t}\n\t\treturn r.Response, r.Err\n\t}\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"net\"\n\t\"sync\"\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/golang/protobuf/ptypes/wrappers\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/golang/protobuf/ptypes/field_mask\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/golang/protobuf/ptypes/timestamp\"\n\t\"github.com/golang/protobuf/ptypes/duration\"\n\t\"github.com/g"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and registers a service to handle those requests.\n\nFunction Description: The function sets up a gRPC server that listens on a given TCP port, creates a new gRPC server instance, registers a service to handle incoming requests, and starts the server in a goroutine. The server runs until it is stopped or encounters an error.\n\nInput: None (The port is hardcoded as \":50052\" in the example, but could be parameterized)\n\nOutput: None (The function runs indefinitely until stopped or an error occurs, with side effects of starting the gRPC server)\n\nNote: The actual service implementation (ChannelzService) would need to be defined elsewhere and imported. The example shows the server setup pattern but assumes the service is already implemented.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tdefer lis.Close()\n\ts := grpc.NewServer()\n\tservice.RegisterChannelzServiceToServer(s)\n\tgo s.Serve(lis)\n\tdefer s.Stop()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t// Assuming the service is defined in a separate file\n\t// \"path/to/your/service\"\n)\n\nfunc startGRPCServer() {\n\tgrpcServer := grpc.NewServer()\n\t// Register the service implementation\n\t// pb.RegisterChannelzServiceServer(grpcServer, &YourServiceImplementation{})\n\t\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\treturn\n\t}\n\t\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles greeting requests and responses.\n\nStruct Description: The server struct implements the GreeterServer interface generated from the protobuf definition, providing the SayHello method to handle incoming gRPC requests.\n\nFields:\nUnimplementedGreeterServer: pb.UnimplementedGreeterServer - Embedded type to ensure forward compatibility with future gRPC updates\n\nMethods:\nSayHello: [Name](ctx context.Context, in *pb.HelloRequest) -> (*pb.HelloReply, error) - Processes incoming HelloRequest, logs the received name, and returns a HelloReply with a greeting message",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(_ context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\tlog.Printf(\"server listening at %v\", lis.Addr())\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"your_project/proto/pb\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Println(\"Received name:\", in.Name)\n\treturn &pb.HelloReply{Message: \"Hello \" + in.Name}, nil\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a function that sends a multipart/form-data POST request to a specified URL with file upload capabilities and custom headers.\n\nFunction Description: The function performs an HTTP POST request with multipart form data, including file upload functionality. It constructs the request with custom headers, sends it using a custom HTTP client, and returns the response body as a string. The function handles file operations and request/response lifecycle properly with appropriate error handling.\n\nInput:\n- url (string): The target URL for the POST request\n- method (string): HTTP method (typically \"POST\")\n- filePath (string): Path to the file to be uploaded\n- formFields (map[string]string): Key-value pairs for form fields\n- headers (map[string]string): Custom headers to include in the request\n\nOutput:\n- (string): The response body from the server\n- (error): Any error that occurred during the process (nil if successful)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/image/ad/\"\n\tmethod := \"POST\"\n\n\tpayload := &bytes.Buffer{}\n\twriter := multipart.NewWriter(payload)\n\t_ = writer.WriteField(\"advertiser_id\", \"1760312309087432\")\n\t_ = writer.WriteField(\"upload_type\", \"UPLOAD_BY_FILE\")\n\t_ = writer.WriteField(\"image_signature\", \"1faaf9020e0df18fdf0429e0db211f37\")\n\tfile, errFile4 := os.Open(\"/Users/betta/Desktop/\u5e38\u7528/1faaf9020e0df18fdf0429e0db211f37.png\")\n\tdefer file.Close()\n\tpart4,\n\t\terrFile4 := writer.CreateFormFile(\"image_file\", filepath.Base(\"/Users/betta/Desktop/\u5e38\u7528/1faaf9020e0df18fdf0429e0db211f37.png\"))\n\t_, errFile4 = io.Copy(part4, file)\n\tif errFile4 != nil {\n\t\tfmt.Println(errFile4)\n\t\treturn\n\t}\n\t_ = writer.WriteField(\"filename\", \"auto4_huchao.1faaf9020e0df18fdf0429e0db211f37_test\u73af\u5883slicess_\u5361\u901a_P_HC_HC_en_1X1_0s\")\n\terr := writer.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treq.Header.Add(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Add(\"Access-Token\", \"e88f206ab28a97ef494b853982d81739b81a1e37\")\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc uploadFile(url, method, filePath string, formFields map[string]string, headers map[string]string) (string, error) {\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\n\tfor key, value := range formFields {\n\t\tif err := writer.WriteField(key, value); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t}\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\tpart, err := writer.CreateFormFile(\"file\", filepath.Base(filePath))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif _, err := io.Copy(part, file); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif err := writer.Close(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"multipart/form-data; boundary=\"+writer.Boundary())\n\n\tfor k, v := range headers {\n\t\treq.Header.Set(k, v)\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(respBody), nil\n}"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles DNS queries and watch functionality, supporting TLS encryption and OpenTracing for distributed tracing.\n\nStruct Description: ServergRPC is a gRPC server implementation that processes DNS queries and provides watch capabilities. It manages server lifecycle, handles TLS configuration, and integrates with tracing systems.\n\nFields:\n\nServer: [*Server] - Embedded DNS server instance that handles core DNS functionality\ngrpcServer: [*grpc.Server] - The gRPC server instance\nlistenAddr: [net.Addr] - Network address the server is listening on\ntlsConfig: [*tls.Config] - TLS configuration for secure connections\nwatch: [watch.Watcher] - Watcher instance for handling watch requests\n\nMethods:\n\nNewServergRPC: [func(addr string, group []*Config) (*ServergRPC, error)] -> Creates a new ServergRPC instance with the given address and configuration group\nServe: [func(l net.Listener) error] -> Starts the gRPC server on the provided listener\nQuery: [func(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error)] -> Handles incoming DNS query requests\nWatch: [func(stream pb.DnsService_WatchServer) error] -> Handles watch stream requests\nStop: [func() error] -> Gracefully stops the server and watcher\nShutdown: [func() error] -> Immediately stops the server without waiting for connections to close",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/coredns/coredns/pb\"\n\t\"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\"\n\t\"github.com/miekg/dns\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/peer\"\n)\n\ntype ServergRPC struct {\n\t*Server\n\tgrpcServer *grpc.Server\n\tlistenAddr net.Addr\n\ttlsConfig  *tls.Config\n\twatch      watch.Watcher\n}\n\nfunc NewServergRPC(addr string, group []*Config) (*ServergRPC, error) {\n\ts, err := NewServer(addr, group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar tlsConfig *tls.Config\n\tfor _, conf := range s.zones {\n\t\ttlsConfig = conf.TLSConfig\n\t}\n\treturn &ServergRPC{Server: s, tlsConfig: tlsConfig, watch: watch.NewWatcher(watchables(s.zones))}, nil\n}\n\nfunc (s *ServergRPC) Serve(l net.Listener) error {\n\ts.m.Lock()\n\ts.listenAddr = l.Addr()\n\ts.m.Unlock()\n\n\tif s.Tracer() != nil {\n\t\tonlyIfParent := func(parentSpanCtx opentracing.SpanContext, method string, req, resp interface{}) bool {\n\t\t\treturn parentSpanCtx != nil\n\t\t}\n\t\tintercept := otgrpc.OpenTracingServerInterceptor(s.Tracer(), otgrpc.IncludingSpans(onlyIfParent))\n\t\ts.grpcServer = grpc.NewServer(grpc.UnaryInterceptor(intercept))\n\t} else {\n\t\ts.grpcServer = grpc.NewServer()\n\t}\n\n\tpb.RegisterDnsServiceServer(s.grpcServer, s)\n\n\tif s.tlsConfig != nil {\n\t\tl = tls.NewListener(l, s.tlsConfig)\n\t}\n\treturn s.grpcServer.Serve(l)\n}\n\nfunc (s *ServergRPC) Query(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error) {\n\tmsg := new(dns.Msg)\n\terr := msg.Unpack(in.Msg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tp, ok := peer.FromContext(ctx)\n\tif !ok {\n\t\treturn nil, errors.New(\"no peer in gRPC context\")\n\t}\n\n\ta, ok := p.Addr.(*net.TCPAddr)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no TCP peer in gRPC context: %v\", p.Addr)\n\t}\n\n\tw := &gRPCresponse{localAddr: s.listenAddr, remoteAddr: a, Msg: msg}\n\n\ts.ServeDNS(ctx, w, msg)\n\n\tpacked, err := w.Msg.Pack()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &pb.DnsPacket{Msg: packed}, nil\n}\n\nfunc (s *ServergRPC) Watch(stream pb.DnsService_WatchServer) error {\n\treturn s.watch.Watch(stream)\n}\n\nfunc (s *ServergRPC) Stop() (err error) {\n\ts.m.Lock()\n\tdefer s.m.Unlock()\n\tif s.watch != nil {\n\t\ts.watch.Stop()\n\t}\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.GracefulStop()\n\t}\n\treturn\n}\n\nfunc (s *ServergRPC) Shutdown() error {\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.Stop()\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/tls/cert\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"github.com/opentracing/opentracing-go/ext\"\n\t\"github.com/opentracing/opentracing-go/log\"\n\t\"yourproject/pb\"\n\t\"yourproject/watch\"\n)\n\ntype ServergRPC struct {\n\t*Server\n\tgrpcServer *grpc.Server\n\tlistenAddr net.Addr\n\ttlsConfig  *tls.Config\n\twatch      *watch.Watcher\n}\n\nfunc NewServergRPC(addr string, group []*Config) (*ServergRPC, error) {\n\t// Initialize DNS server\n\tserver, err := NewServer(group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Initialize TLS config\n\ttlsConfig, err := getTLSConfig(group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Initialize watcher\n\twatcher := watch.NewWatcher()\n\n\t// Create gRPC server with tracing interceptors\n\tgrpcServer := grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(tracing.UnaryServerInterceptor()),\n\t\tgrpc.StreamInterceptor(tracing.StreamServerInterceptor()),\n\t)\n\n\treturn &ServergRPC{\n\t\tServer:     server,\n\t\tgrpcServer: grpcServer,\n\t\tlistenAddr: &net.TCPAddr{IP: net.ParseIP(addr), Port: 50051},\n\t\ttlsConfig:  tlsConfig,\n\t\twatch:      watcher,\n\t}, nil\n}\n\nfunc (s *ServergRPC) Serve(l net.Listener) error {\n\treturn s.grpcServer.Serve(l)\n}\n\nfunc (s *ServergRPC) Query(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error) {\n\tspan := opentracing.StartSpan(\"Query\")\n\tdefer span.Finish()\n\text.SpanKindRPCServer.Set(span)\n\tspan.LogFields(log.String(\"request\", in.String()))\n\n\tresponse, err := s.Server.HandleQuery(in)\n\tif err != nil {\n\t\tspan.LogFields(log.Error(err))\n\t\treturn nil, err\n\t}\n\treturn response, nil\n}\n\nfunc (s *ServergRPC) Watch(stream pb.DnsService_WatchServer) error {\n\tspan := opentracing.StartSpan(\"Watch\")\n\tdefer span.Finish()\n\text.SpanKindRPCServer.Set(span)\n\n\tfor {\n\t\tselect {\n\t\tcase update := <-s.watch.Chan():\n\t\t\tif err := stream.Send(update); err != nil {\n\t\t\t\tspan.LogFields(log.Error(err))\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase <-stream.Context().Done():\n\t\t\treturn nil\n\t\t}\n\t}\n}\n\nfunc (s *ServergRPC) Stop() error {\n\ts.grpcServer.GracefulStop()\n\treturn s.watch.Stop()\n}\n\nfunc (s *ServergRPC) Shutdown() error {\n\ts.grpcServer.Stop()\n\treturn s.watch.Stop()\n}\n\nfunc getTLSConfig(group []*Config) (*tls.Config, error) {\n\t// Implement TLS config creation from group\n\treturn &tls.Config{}, nil\n}\n```"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a function that sets up and starts a gRPC server with reflection capabilities, registering multiple services and handling incoming requests.\n\nFunction Description: The Serve function initializes a gRPC server on a specified TCP port, registers multiple service implementations (RouteGuide and Foobar), enables server reflection for debugging, and starts listening for incoming RPC requests. It also demonstrates protobuf JSON marshaling of a well-known type.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but runs indefinitely to serve requests)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":5001\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"server: failed to create listener: %v\", err)\n\t}\n\n\te, _ := protojson.Marshal(&WellKnownRequest{Timestamp: timestamppb.Now()})\n\tfmt.Printf(\"string(e) = %+v\\n\", string(e))\n\n\ts := newServer()\n\tgs := grpc.NewServer()\n\tRegisterRouteGuideServer(gs, s)\n\tRegisterFoobarServer(gs, s)\n\treflection.Register(gs)\n\tgs.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\nfunc Serve() {\n    lis, err := net.Listen(\"tcp\", \":50051\")\n    if err != nil {\n        log.Fatalf(\"failed to listen: %v\", err)\n    }\n    s := grpc.NewServer()\n    reflection.Register(s)\n    pb.RegisterRouteGuideServer(s, &routeGuideImpl{})\n    pb.RegisterFoobarServer(s, &foobarImpl{})\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}\n```"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a function to push metrics to a Prometheus push gateway using HTTP requests with custom headers and client configuration.\n\nFunction Description: The function `doPush` sends collected metrics to a Prometheus push gateway. It validates the job name and grouping labels, constructs the appropriate URL, encodes the metrics in Protocol Buffer format, and makes an HTTP request with custom headers. It handles errors during the process and checks the response status.\n\nInput:\n- `job` (string): The job name to associate with the pushed metrics\n- `grouping` (map[string]string): Key-value pairs for metric grouping\n- `pushURL` (string): The base URL of the Prometheus push gateway\n- `g` (prometheus.Gatherer): Interface to gather metrics\n- `method` (string): HTTP method to use for the request (e.g., \"POST\")\n\nOutput:\n- `error`: Returns nil on success, or an error describing any failure during the push operation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/common/expfmt\"\n\t\"github.com/prometheus/common/model\"\n)\n\nconst contentTypeHeader = \"Content-Type\"\n\nvar (\n\tclient         = &http.Client{}\n\tdefaultTimeout = time.Second * 15\n)\n\nfunc doPush(job string, grouping map[string]string, pushURL string, g prometheus.Gatherer, method string) error {\n\tif !strings.Contains(pushURL, \"://\") {\n\t\tpushURL = \"http://\" + pushURL\n\t}\n\tif strings.HasSuffix(pushURL, \"/\") {\n\t\tpushURL = pushURL[:len(pushURL)-1]\n\t}\n\n\tif strings.Contains(job, \"/\") {\n\t\treturn fmt.Errorf(\"job contains '/': %s\", job)\n\t}\n\turlComponents := []string{url.QueryEscape(job)}\n\tfor ln, lv := range grouping {\n\t\tif !model.LabelName(ln).IsValid() {\n\t\t\treturn fmt.Errorf(\"grouping label has invalid name: %s\", ln)\n\t\t}\n\t\tif strings.Contains(lv, \"/\") {\n\t\t\treturn fmt.Errorf(\"value of grouping label %s contains '/': %s\", ln, lv)\n\t\t}\n\t\turlComponents = append(urlComponents, ln, lv)\n\t}\n\tpushURL = fmt.Sprintf(\"%s/metrics/job/%s\", pushURL, strings.Join(urlComponents, \"/\"))\n\n\tmfs, err := g.Gather()\n\tif err != nil {\n\t\treturn err\n\t}\n\tbuf := &bytes.Buffer{}\n\tenc := expfmt.NewEncoder(buf, expfmt.FmtProtoDelim)\n\tfor _, mf := range mfs {\n\t\tfor _, m := range mf.GetMetric() {\n\t\t\tfor _, l := range m.GetLabel() {\n\t\t\t\tif l.GetName() == \"job\" {\n\t\t\t\t\treturn fmt.Errorf(\"pushed metric %s (%s) already contains a job label\", mf.GetName(), m)\n\t\t\t\t}\n\t\t\t\tif _, ok := grouping[l.GetName()]; ok {\n\t\t\t\t\treturn fmt.Errorf(\n\t\t\t\t\t\t\"pushed metric %s (%s) already contains grouping label %s\",\n\t\t\t\t\t\tmf.GetName(), m, l.GetName(),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tenc.Encode(mf)\n\t}\n\treq, err := http.NewRequest(method, pushURL, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(contentTypeHeader, string(expfmt.FmtProtoDelim))\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 202 {\n\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\"unexpected status code %d while pushing to %s: %s\", resp.StatusCode, pushURL, body)\n\t}\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\nfunc doPush(job string, grouping map[string]string, pushURL string, g prometheus.Gatherer, method string) error {\n\tif job == \"\" {\n\t\treturn errors.New(\"job name is required\")\n\t}\n\tif grouping == nil {\n\t\treturn errors.New(\"grouping labels are required\")\n\t}\n\n\turl := pushURL + \"/metrics/job/\" + job\n\tfor k, v := range grouping {\n\t\turl += \"/label/\" + url.PathEscape(k) + \"/\" + url.PathEscape(v)\n\t}\n\n\tmetrics, err := g.Gather()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar buf bytes.Buffer\n\tif err := prometheus.WriteTo(&buf, metrics); err != nil {\n\t\treturn err\n\t}\n\n\treq, err := http.NewRequest(method, url, &buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/vnd.google.protobuf; version=0.0.4; charset=utf-8\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"push failed with status: %s\", resp.Status)\n\t}\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown.\n\nStruct Description: The Plumber struct represents a gRPC server instance with configuration options, logging, and shutdown capabilities.\n\nFields:\n- Config: *options.Config - Configuration settings for the server\n- CLIOptions: *options.CLIOptions - Command line interface options\n- PersistentConfig: *options.PersistentConfig - Persistent configuration settings\n- Actions: *actions.Actions - Server actions and operations\n- Bus: bus.IBus - Message bus interface\n- ServiceShutdownCtx: context.Context - Context for shutdown signaling\n- log: *logrus.Entry - Logger instance\n\nMethods:\n- startGRPCServer: () -> error - Starts the gRPC server and listens for incoming requests\n- watchServiceShutdown: (*grpc.Server) -> () - Monitors for shutdown signals and stops the gRPC server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/batchcorp/plumber-schemas/build/go/protos\"\n\t\"github.com/streamdal/plumber/server\"\n)\n\ntype Plumber struct {\n\tConfig               *options.Config\n\tCLIOptions           *options.CLIOptions\n\tPersistentConfig     *options.PersistentConfig\n\tActions              *actions.Actions\n\tBus                  bus.IBus\n\tServiceShutdownCtx   context.Context\n\tlog                  *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlis, err := net.Listen(\"tcp\", p.CLIOptions.Server.GrpcListenAddress)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to listen on '%s': %s\", p.CLIOptions.Server.GrpcListenAddress, err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tgrpcServer := grpc.NewServer(opts...)\n\n\tp.PersistentConfig.ClusterID = p.CLIOptions.Server.ClusterId\n\n\tplumberServer := &server.Server{\n\t\tActions:          p.Actions,\n\t\tPersistentConfig: p.PersistentConfig,\n\t\tAuthToken:        p.CLIOptions.Server.AuthToken,\n\t\tBus:              p.Bus,\n\t\tLog:              logrus.WithField(\"pkg\", \"plumber/cli_server.go\"),\n\t\tCLIOptions:       p.CLIOptions,\n\t}\n\n\tprotos.RegisterPlumberServerServer(grpcServer, plumberServer)\n\n\tgo p.watchServiceShutdown(grpcServer)\n\n\tp.log.Debugf(\"starting gRPC server on %s\", p.CLIOptions.Server.GrpcListenAddress)\n\n\terrCh := make(chan error, 1)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\terrCh <- errors.Wrap(err, \"unable to start gRPC server\")\n\t\t}\n\t}()\n\n\tafterCh := time.After(5 * time.Second)\n\n\tselect {\n\tcase <-afterCh:\n\t\treturn nil\n\tcase err := <-errCh:\n\t\treturn err\n\t}\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\n\tp.log.Debug(\"received shutdown request in gRPC server via ServiceShutdownCtx\")\n\n\ttime.Sleep(5 * time.Second)\n\n\tgrpcServer.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/sirupsen/logrus\"\n)\n\ntype Plumber struct {\n\tConfig            *options.Config\n\tCLIOptions        *options.CLIOptions\n\tPersistentConfig  *options.PersistentConfig\n\tActions           *actions.Actions\n\tBus               bus.IBus\n\tServiceShutdownCtx context.Context\n\tlog               *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\ts := grpc.NewServer()\n\n\t// Register services\n\tp.Actions.Register(s)\n\n\tlis, err := net.Listen(\"tcp\", p.Config.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tp.log.Errorf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n\n\tgo p.watchServiceShutdown(s)\n\n\treturn nil\n}\n\nfunc (p *Plumber) watchServiceShutdown(s *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\ts.GracefulStop()\n}"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, supports optional transport security, and can register services with reflection capabilities.\n\nFunction Description: The main function sets up and starts a gRPC server with configurable options including transport security (TLS) and logging interceptors. It registers a test service and optionally enables server reflection. The server listens on either a Unix socket or TCP port based on configuration.\n\nInput:\n- *cert (string pointer): Path to certificate file for TLS (optional)\n- *cacert (string pointer): Path to CA certificate file (optional)\n- *key (string pointer): Path to private key file (optional)\n- *requirecert (bool pointer): Whether client certificates are required (optional)\n- *quiet (bool pointer): Whether to disable logging interceptors (optional)\n- *port (int pointer): TCP port to listen on (default used if not provided)\n- getUnixSocket (func() string): Function that returns Unix socket path if available (optional)\n\nOutput:\n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are printed to stderr and the program exits with code 1 on failure\n- Success message with listening address is printed to stdout",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\n\t\"github.com/fullstorydev/grpcurl\"\n\tgrpcurl_testing \"github.com/fullstorydev/grpcurl/internal/testing\"\n)\nfunc main() {\n\tvar opts []grpc.ServerOption\n\tif *cert != \"\" {\n\t\tcreds, err := grpcurl.ServerTransportCredentials(*cacert, *cert, *key, *requirecert)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to configure transport credentials: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tif !*quiet {\n\t\topts = append(opts, grpc.UnaryInterceptor(unaryLogger), grpc.StreamInterceptor(streamLogger))\n\t}\n\n\tvar network, addr string\n\tif getUnixSocket != nil && getUnixSocket() != \"\" {\n\t\tnetwork = \"unix\"\n\t\taddr = getUnixSocket()\n\t} else {\n\t\tnetwork = \"tcp\"\n\t\taddr = fmt.Sprintf(\"127.0.0.1:%d\", *port)\n\t}\n\tl, err := net.Listen(network, addr)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to listen on socket: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"Listening on %v\\n\", l.Addr())\n\n\tsvr := grpc.NewServer(opts...)\n\n\tgrpcurl_testing.RegisterTestServiceServer(svr, grpcurl_testing.TestServer{})\n\tif !*noreflect {\n\t\treflection.Register(svr)\n\t}\n\n\tif err := svr.Serve(l); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GRPC server returned error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/grpc/interceptors\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"io/ioutil\"\n)\n\nvar (\n\tcert       = flag.String(\"cert\", \"\", \"Path to certificate file\")\n\tcacert     = flag.String(\"cacert\", \"\", \"Path to CA certificate file\")\n\tkey        = flag.String(\"key\", \"\", \"Path to private key file\")\n\trequireCert = flag.Bool(\"requirecert\", false, \"Require client certificates\")\n\tquiet      = flag.Bool(\"quiet\", false, \"Disable logging\")\n\tport       = flag.Int(\"port\", 0, \"TCP port to listen on\")\n)\n\nfunc getUnixSocket() string {\n\treturn \"/tmp/grpc.sock\"\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tvar opts []grpc.ServerOption\n\n\tif *cert != \"\" && *key != \"\" && *cacert != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(*cert, *key)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to load certificate: %v\", err)\n\t\t}\n\n\t\tcaCert, err := ioutil.ReadFile(*cacert)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to read CA certificate: %v\", err)\n\t\t}\n\n\t\tcaCertPool := x509.NewCertPool()\n\t\tcaCertPool.AppendCertsFromPEM(caCert)\n\n\t\ttlsConfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\tClientCAs:    caCertPool,\n\t\t\tClientAuth:   tls.NoClientCert,\n\t\t}\n\n\t\tif *requireCert {\n\t\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t\t}\n\n\t\tcreds := credentials.NewTLS(tlsConfig)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tif !*quiet {\n\t\topts = append(opts, grpc.UnaryInterceptor(loggingInterceptor))\n\t}\n\n\ts := grpc.NewServer(opts...)\n\n\treflection.Register(s)\n\n\tunixSocket := getUnixSocket()\n\tif unixSocket != \"\" {\n\t\tlistener, err := net.Listen(\"unix\", unixSocket)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to listen on Unix socket: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"Server listening on Unix socket: %s\\n\", unixSocket)\n\t\tif err := s.Serve(listener); err != nil {\n\t\t\tlog.Fatalf(\"Server failed: %v\", err)\n\t\t}\n\t} else {\n\t\tlistenAddr := fmt.Sprintf(\":%d\", *port)\n\t\tif *port == 0 {\n\t\t\tlistenAddr = \":50051\"\n\t\t}\n\t\tlistener, err := net.Listen(\"tcp\", listenAddr)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to listen on TCP: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"Server listening on TCP: %s\\n\", listenAddr)\n\t\tif err := s.Serve(listener); err != nil {\n\t\t\tlog.Fatalf(\"Server failed: %v\", err)\n\t\t}\n\t}\n}\n\nfunc loggingInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tstart := time.Now()\n\tlog.Printf(\"Received request: %s\", info.FullMethod)\n\tresp, err := handler(ctx, req)\n\tlog.Printf(\"Processed request: %s in %v\", info.FullMethod, time.Since(start))\n\treturn resp, err\n}\n```"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles incoming requests with custom stream preprocessing and graceful shutdown capabilities.\n\nStruct Description: The `server` struct represents a gRPC server instance with additional control for graceful shutdown and stream preprocessing.\n\nFields:\n- grpcSrv: *grpc.Server - The underlying gRPC server instance\n- closeC: chan struct{} - Channel used to signal server shutdown\n\nMethods:\n- Serve: (lis net.Listener) -> error - Starts the gRPC server on the provided listener, initializing it with custom stream preprocessing\n- preGrpcStream: (ctx context.Context, info *tap.Info) -> (context.Context, error) - Intercepts incoming gRPC streams before processing, with special handling for the \"/vanus.core.raft.RaftServer/SendMessage\" method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\tsrv := grpc.NewServer(\n\t\tgrpc.InTapHandle(s.preGrpcStream),\n\t)\n\ts.grpcSrv = srv\n\n\treturn srv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tcCtx, cancel := context.WithCancel(ctx)\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-cCtx.Done():\n\t\t\tcase <-s.closeC:\n\t\t\t\tcancel()\n\t\t\t}\n\t\t}()\n\t\treturn cCtx, nil\n\t}\n\treturn ctx, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\ts.grpcSrv = grpc.NewServer(\n\t\tgrpc.StreamInterceptor(func(ctx context.Context, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\tnewCtx, err := s.preGrpcStream(ctx, &tap.Info{FullMethod: info.FullMethod})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn handler(newCtx, &mockStream{})\n\t\t}),\n\t)\n\tgo func() {\n\t\t<-s.closeC\n\t\ts.grpcSrv.GracefulStop()\n\t}()\n\treturn s.grpcSrv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethod == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\t// Custom preprocessing logic here\n\t}\n\treturn ctx, nil\n}\n\ntype mockStream struct{}\n\nfunc (m *mockStream) Context() context.Context {\n\treturn context.Background()\n}\n\nfunc (m *mockStream) SendMsg(m1 interface{}) error {\n\treturn nil\n}\n\nfunc (m *mockStream) RecvMsg(m1 interface{}) error {\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, optionally with TLS security, and registers a test service for handling RPC calls.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, configures TLS if enabled, creates a new gRPC server instance, registers a test service, and starts serving incoming requests.\n\nInput:\n- port (int): The port number on which the server should listen\n- useTLS (bool): Flag indicating whether to use TLS security\n- certFile (string): Path to the TLS certificate file (required if useTLS is true)\n- keyFile (string): Path to the TLS private key file (required if useTLS is true)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"google.golang.org/grpc/interop\"\n\ttestpb \"google.golang.org/grpc/interop/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tp := strconv.Itoa(*port)\n\tlis, err := net.Listen(\"tcp\", \":\"+p)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tgrpclog.Fatalf(\"Failed to generate credentials %v\", err)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tserver := grpc.NewServer(opts...)\n\ttestpb.RegisterTestServiceServer(server, interop.NewTestServer())\n\tserver.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\t\"fmt\"\n\t\"crypto/tls\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype TestService struct{}\n\nfunc (s *TestService) SomeMethod(ctx context.Context, req *Request) (*Response, error) {\n\treturn &Response{}, nil\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"Port to listen on\")\n\tuseTLS := flag.Bool(\"useTLS\", false, \"Enable TLS\")\n\tcertFile := flag.String(\"certFile\", \"\", \"Path to TLS certificate file\")\n\tkeyFile := flag.String(\"keyFile\", \"\", \"Path to TLS private key file\")\n\tflag.Parse()\n\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tif *certFile == \"\" || *keyFile == \"\" {\n\t\t\tlog.Fatal(\"certFile and keyFile must be provided when useTLS is true\")\n\t\t}\n\t\tcert, err := tls.LoadX509KeyPair(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to load certificate: %v\", err)\n\t\t}\n\t\tconfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t}\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(config)))\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\t// Register your service here\n\t// pb.RegisterYourServiceServer(server, &YourService{})\n\t\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}\n```"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a gRPC server in Go that handles Bigtable administration and operations, with proper initialization and cleanup capabilities.\n\nStruct Description: The Server struct represents a gRPC server instance that manages Bigtable table administration and operations. It handles network connections, server lifecycle, and maintains internal state.\n\nFields:\nAddr: [string] - The network address the server is listening on\nl: [net.Listener] - The network listener for incoming connections\nsrv: [*grpc.Server] - The gRPC server instance\ns: [*server] - The internal server implementation handling business logic\n\nMethods:\nNewServer: [func(laddr string, opt ...grpc.ServerOption) (*Server, error)] -> Creates and starts a new Server instance\n- Input: laddr (string) - The address to listen on, opt (...grpc.ServerOption) - Optional gRPC server configurations\n- Output: (*Server, error) - Returns the server instance or an error if initialization fails\n- Description: Initializes the server, sets up the listener, registers gRPC services, and starts serving requests in a goroutine\n\nClose: [func(s *Server)] -> Properly shuts down the Server instance\n- Input: None (method receiver)\n- Output: None\n- Description: Stops the gRPC server, closes the listener, and cleans up internal resources",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl   net.Listener\n\tsrv *grpc.Server\n\ts   *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tsrv:  grpc.NewServer(opt...),\n\t\ts: &server{\n\t\t\ttables: make(map[string]*table),\n\t\t},\n\t}\n\tbtapb.RegisterBigtableTableAdminServer(s.srv, s.s)\n\tbtpb.RegisterBigtableServer(s.srv, s.s)\n\n\tgo s.srv.Serve(s.l)\n\n\treturn s, nil\n}\n\nfunc (s *Server) Close() {\n\ts.s.mu.Lock()\n\tif s.s.gcc != nil {\n\t\tclose(s.s.gcc)\n\t}\n\ts.s.mu.Unlock()\n\n\ts.srv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\ntype Server struct {\n\tAddr string\n\tl    net.Listener\n\tsrv  *grpc.Server\n\ts    *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tsrv := grpc.NewServer(opt...)\n\ts := &server{}\n\tgo func() {\n\t\tif err := srv.Serve(l); err != nil {\n\t\t\tlog.Printf(\"Server error: %v\", err)\n\t\t}\n\t}()\n\treturn &Server{\n\t\tAddr: laddr,\n\t\tl:    l,\n\t\tsrv:  srv,\n\t\ts:    s,\n\t}, nil\n}\n\nfunc (s *Server) Close() {\n\ts.srv.GracefulStop()\n\ts.l.Close()\n}\n```"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a comprehensive HTTP client in Go that can handle various API requests with custom configurations, including base URLs, request headers, and rate limiting. The client should support multiple API services and provide methods for creating and executing HTTP requests.\n\nStruct Description: The Client struct represents an HTTP client with configuration for making API requests. It includes base URLs, user agent, rate limiting capabilities, and various service clients for different API endpoints.\n\nFields:\n\nclientMu: sync.Mutex - Mutex for thread-safe access to the HTTP client\nclient: *http.Client - The underlying HTTP client used for requests\nBaseURL: *url.URL - Base URL for API requests\nUploadURL: *url.URL - Base URL for upload requests\nUserAgent: string - User agent string for requests\nrateMu: sync.Mutex - Mutex for thread-safe rate limiting\nrateLimits: [categories]Rate - Rate limit tracking for different categories\ncommon: service - Shared service implementation\n\nMethods:\n\nNewClient: (*http.Client) -> *Client - Creates a new Client instance with optional custom HTTP client\nNewRequest: (method string, urlStr string, body interface{}) -> (*http.Request, error) - Creates a new HTTP request with proper headers and body encoding\nDo: (ctx context.Context, req *http.Request, v interface{}) -> (*Response, error) - Executes an HTTP request with context support and handles response decoding",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tclientMu sync.Mutex\n\tclient   *http.Client\n\n\tBaseURL   *url.URL\n\tUploadURL *url.URL\n\tUserAgent string\n\n\trateMu     sync.Mutex\n\trateLimits [categories]Rate\n\n\tcommon service\n\n\tActions        *ActionsService\n\tActivity       *ActivityService\n\tAdmin          *AdminService\n\tApps           *AppsService\n\tAuthorizations *AuthorizationsService\n\tChecks         *ChecksService\n\tGists          *GistsService\n\tGit            *GitService\n\tGitignores     *GitignoresService\n\tInteractions   *InteractionsService\n\tIssues         *IssuesService\n\tLicenses       *LicensesService\n\tMarketplace    *MarketplaceService\n\tMigrations     *MigrationService\n\tOrganizations  *OrganizationsService\n\tProjects       *ProjectsService\n\tPullRequests   *PullRequestsService\n\tReactions      *ReactionsService\n\tRepositories   *RepositoriesService\n\tSearch         *SearchService\n\tTeams          *TeamsService\n\tUsers          *UsersService\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{}\n\t}\n\tbaseURL, _ := url.Parse(defaultBaseURL)\n\tuploadURL, _ := url.Parse(uploadBaseURL)\n\n\tc := &Client{client: httpClient, BaseURL: baseURL, UserAgent: userAgent, UploadURL: uploadURL}\n\tc.common.client = c\n\tc.Actions = (*ActionsService)(&c.common)\n\tc.Activity = (*ActivityService)(&c.common)\n\tc.Admin = (*AdminService)(&c.common)\n\tc.Apps = (*AppsService)(&c.common)\n\tc.Authorizations = (*AuthorizationsService)(&c.common)\n\tc.Checks = (*ChecksService)(&c.common)\n\tc.Gists = (*GistsService)(&c.common)\n\tc.Git = (*GitService)(&c.common)\n\tc.Gitignores = (*GitignoresService)(&c.common)\n\tc.Interactions = (*InteractionsService)(&c.common)\n\tc.Issues = (*IssuesService)(&c.common)\n\tc.Licenses = (*LicensesService)(&c.common)\n\tc.Marketplace = &MarketplaceService{client: c}\n\tc.Migrations = (*MigrationService)(&c.common)\n\tc.Organizations = (*OrganizationsService)(&c.common)\n\tc.Projects = (*ProjectsService)(&c.common)\n\tc.PullRequests = (*PullRequestsService)(&c.common)\n\tc.Reactions = (*ReactionsService)(&c.common)\n\tc.Repositories = (*RepositoriesService)(&c.common)\n\tc.Search = (*SearchService)(&c.common)\n\tc.Teams = (*TeamsService)(&c.common)\n\tc.Users = (*UsersService)(&c.common)\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tif !strings.HasSuffix(c.BaseURL.Path, \"/\") {\n\t\treturn nil, fmt.Errorf(\"BaseURL must have a trailing slash, but %q does not\", c.BaseURL)\n\t}\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf io.ReadWriter\n\tif body != nil {\n\t\tbuf = &bytes.Buffer{}\n\t\tenc := json.NewEncoder(buf)\n\t\tenc.SetEscapeHTML(false)\n\t\terr := enc.Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treq.Header.Set(\"Accept\", mediaTypeV3)\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx == nil {\n\t\treturn nil, errors.New(\"context must be non-nil\")\n\t}\n\treq = withContext(ctx, req)\n\n\trateLimitCategory := category(req.URL.Path)\n\n\tif err := c.checkRateLimitBeforeDo(req, rateLimitCategory); err != nil {\n\t\treturn &Response{\n\t\t\tResponse: err.Response,\n\t\t\tRate:     err.Rate,\n\t\t}, err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif e, ok := err.(*url.Error); ok {\n\t\t\tif url, err := url.Parse(e.URL); err == nil {\n\t\t\t\te.URL = sanitizeURL(url).String()\n\t\t\t\treturn nil, e\n\t\t\t}\n\t\t}\n\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponse := newResponse(resp)\n\n\tc.rateMu.Lock()\n\tc.rateLimits[rateLimitCategory] = response.Rate\n\tc.rateMu.Unlock()\n\n\terr = CheckResponse(resp)\n\tif err != nil {\n\t\taerr, ok := err.(*AcceptedError)\n\t\tif ok {\n\t\t\tb, readErr := ioutil.ReadAll(resp.Body)\n\t\t\tif readErr != nil {\n\t\t\t\treturn response, readErr\n\t\t\t}\n\n\t\t\taerr.Raw = b\n\t\t\treturn response, aerr\n\t\t}\n\n\t\treturn response, err\n\t}\n\n\tif v != nil {\n\t\tif w, ok := v.(io.Writer); ok {\n\t\t\tio.Copy(w, resp.Body)\n\t\t} else {\n\t\t\tdecErr := json.NewDecoder(resp.Body).Decode(v)\n\t\t\tif decErr == io.EOF {\n\t\t\t\tdecErr = nil\n\t\t\t}\n\t\t\tif decErr != nil {\n\t\t\t\terr = decErr\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage httpclient\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n)\n\ntype Rate struct {\n\tLimit     int\n\tRemaining int\n\tReset     int64\n}\n\ntype Response struct {\n\t*http.Response\n\tErr error\n}\n\ntype service struct{}\n\ntype Client struct {\n\tclientMu    sync.Mutex\n\tclient      *http.Client\n\tBaseURL     *url.URL\n\tUploadURL   *url.URL\n\tUserAgent   string\n\trateMu      sync.Mutex\n\trateLimits  [1]Rate\n\tcommon      service\n}\n\nfunc NewClient(client *http.Client) *Client {\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\treturn &Client{\n\t\tclient:    client,\n\t\tUserAgent: \"Go-http-client/1.0\",\n\t}\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif !u.IsAbs() {\n\t\tu = c.BaseURL.ResolveReference(u)\n\t}\n\treq, err := http.NewRequest(method, u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\tif body != nil {\n\t\tb, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq.Body = io.NopCloser(bytes.NewBuffer(b))\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tc.rateMu.Lock()\n\t// Placeholder for rate limiting logic\n\tc.rateMu.Unlock()\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn &Response{Response: resp, Err: fmt.Errorf(\"HTTP error %d\", resp.StatusCode)}, nil\n\t}\n\n\tif v != nil {\n\t\tif err := json.NewDecoder(resp.Body).Decode(v); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn &Response{Response: resp}, nil\n}\n```"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles log streaming and processing, including batch processing of log events.\n\nStruct Description: The Source struct represents a gRPC server that receives log streams, processes them in batches, and manages the server lifecycle.\n\nFields:\n- name: string - The name identifier for the source\n- eventPool: *event.Pool - Pool for managing event objects\n- config: *Config - Configuration for the source (bind address, port, etc.)\n- grpcServer: *grpc.Server - The gRPC server instance\n- bc: *batchChain - Batch processing chain for handling log events\n\nMethods:\n- ProductLoop: (productFunc api.ProductFunc) -> None - Starts the main processing loop and gRPC server\n  Input: productFunc - Function for processing produced events\n  Output: None (runs indefinitely as goroutine)\n\n- LogStream: (ls pb.LogService_LogStreamServer) -> error - Handles incoming log streams\n  Input: ls - gRPC stream server interface for log messages\n  Output: error - Any error that occurs during stream processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/loggie-io/loggie/pkg/core/api\"\n\t\"github.com/loggie-io/loggie/pkg/core/event\"\n\t\"github.com/loggie-io/loggie/pkg/core/log\"\n\t\"github.com/loggie-io/loggie/pkg/pipeline\"\n\tpb \"github.com/loggie-io/loggie/pkg/sink/grpc/pb\"\n\t\"github.com/loggie-io/loggie/pkg/util/json\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Source struct {\n\tpb.UnimplementedLogServiceServer\n\tname       string\n\teventPool  *event.Pool\n\tconfig     *Config\n\tgrpcServer *grpc.Server\n\tbc         *batchChain\n}\n\nfunc (s *Source) ProductLoop(productFunc api.ProductFunc) {\n\tlog.Info(\"%s start product loop\", s.String())\n\ts.bc = newBatchChain(productFunc, s.config.MaintenanceInterval)\n\tgo s.bc.run()\n\tip := fmt.Sprintf(\"%s:%s\", s.config.Bind, s.config.Port)\n\tlistener, err := net.Listen(s.config.Network, ip)\n\tif err != nil {\n\t\tlog.Panic(\"grpc server listen ip(%s) err: %v\", ip, err)\n\t}\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterLogServiceServer(grpcServer, s)\n\tgo grpcServer.Serve(listener)\n\ts.grpcServer = grpcServer\n\tlog.Info(\"grpc server start listing: %s\", ip)\n}\n\nfunc (s *Source) LogStream(ls pb.LogService_LogStreamServer) error {\n\tb := newBatch(s.config.Timeout)\n\tfor {\n\t\tlogMsg, err := ls.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tsendErr := ls.SendAndClose(&pb.LogResp{\n\t\t\t\tSuccess:  false,\n\t\t\t\tCount:    0,\n\t\t\t\tErrorMsg: err.Error(),\n\t\t\t})\n\t\t\tif sendErr != nil {\n\t\t\t\tlog.Warn(\"send response fail: %s\", sendErr)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\theader := make(map[string]interface{})\n\t\trawHeader := logMsg.GetHeader()\n\t\tif len(rawHeader) > 0 {\n\t\t\tfor k, v := range rawHeader {\n\t\t\t\theader[k] = string(v)\n\t\t\t}\n\t\t}\n\t\tpackedHeader := logMsg.PackedHeader\n\t\tif len(packedHeader) > 0 {\n\t\t\terr = json.Unmarshal(packedHeader, &header)\n\t\t\tif err != nil {\n\t\t\t\tlog.Warn(\"Unmarshal packedHeader error: %s\", err)\n\t\t\t}\n\t\t}\n\t\te := s.eventPool.Get()\n\t\te.Fill(e.Meta(), header, logMsg.GetRawLog())\n\t\tb.append(e)\n\t}\n\tif b.size() > 0 {\n\t\ts.bc.append(b)\n\t\tlogResp := b.wait()\n\t\terr := ls.SendAndClose(logResp)\n\t\tif err != nil {\n\t\t\tlog.Error(\"send response fail: %s\", err)\n\t\t}\n\t\treturn err\n\t}\n\treturn ls.SendAndClose(&pb.LogResp{\n\t\tSuccess: true,\n\t\tCount:   0,\n\t})\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"yourproject/pb\"\n\t\"yourproject/event\"\n\t\"yourproject/api\"\n\t\"yourproject/batch\"\n)\n\ntype Source struct {\n\tname      string\n\teventPool *event.Pool\n\tconfig    *Config\n\tgrpcServer *grpc.Server\n\tbc        *batch.Chain\n}\n\nfunc (s *Source) ProductLoop(productFunc api.ProductFunc) {\n\ts.grpcServer = grpc.NewServer()\n\tpb.RegisterLogServiceServer(s.grpcServer, s)\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", s.config.BindAddress, s.config.Port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := s.grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Source) LogStream(stream pb.LogService_LogStreamServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tevent := s.eventPool.Get()\n\t\tevent.Data = req.Data\n\t\ts.bc.AddEvent(event)\n\n\t\tif s.bc.IsBatchReady() {\n\t\t\tbatch := s.bc.GetBatch()\n\t\t\tprocessed := s.bc.ProcessBatch(batch)\n\t\t\tproductFunc(processed)\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a mock gRPC server for OpenTelemetry traces receiver that can handle incoming trace data requests, track request metrics, and optionally use TLS for secure communication.\n\nStruct Description: The mockTracesReceiver struct implements a gRPC server for receiving OpenTelemetry trace data, tracking request counts and spans, and handling metadata. It embeds a base mockReceiver struct and implements the ptraceotlp.GRPCServer interface.\n\nFields:\n\nsrv: [*grpc.Server] - The gRPC server instance\nln: [net.Listener] - Network listener for the server\nrequestCount: [*atomic.Int32] - Counter for received requests\ntotalItems: [*atomic.Int32] - Counter for total spans received\nmux: [sync.Mutex] - Mutex for thread-safe operations\nmetadata: [metadata.MD] - Stores metadata from incoming requests\nexportError: [error] - Error to return from export operations\nexportResponse: [func() ptraceotlp.ExportResponse] - Function to generate export responses\nlastRequest: [ptrace.Traces] - Stores the last received trace data\nhasMetadata: [bool] - Flag indicating whether to process metadata\nspanCountByMetadata: [map[string]int] - Tracks span counts by metadata keys\n\nMethods:\n\nExport: [Name](ctx context.Context, req ptraceotlp.ExportRequest) -> (ptraceotlp.ExportResponse, error) - Handles incoming trace export requests, updates counters, and processes metadata\nstart: [Name]() -> () - Starts the gRPC server in a goroutine\n\nAssociated Functions:\n\notelArrowTracesReceiverOnGRPCServer: [Name](ln net.Listener, useTLS bool) -> (*mockTracesReceiver, error) - Creates and configures a new mock traces receiver with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype mockReceiver struct {\n\tsrv          *grpc.Server\n\tln           net.Listener\n\trequestCount *atomic.Int32\n\ttotalItems   *atomic.Int32\n\tmux          sync.Mutex\n\tmetadata     metadata.MD\n\texportError  error\n}\n\ntype mockTracesReceiver struct {\n\tptraceotlp.UnimplementedGRPCServer\n\tmockReceiver\n\texportResponse      func() ptraceotlp.ExportResponse\n\tlastRequest         ptrace.Traces\n\thasMetadata         bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (r *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tr.requestCount.Add(int32(1))\n\ttd := req.Traces()\n\tr.totalItems.Add(int32(td.SpanCount()))\n\tr.mux.Lock()\n\tdefer r.mux.Unlock()\n\tr.metadata, _ = metadata.FromIncomingContext(ctx)\n\tif r.hasMetadata {\n\t\tv1 := r.metadata.Get(\"key1\")\n\t\tv2 := r.metadata.Get(\"key2\")\n\t\thashKey := fmt.Sprintf(\"%s|%s\", v1, v2)\n\t\tr.spanCountByMetadata[hashKey] += (td.SpanCount())\n\t}\n\tr.lastRequest = td\n\treturn r.exportResponse(), r.exportError\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tsopts := []grpc.ServerOption{}\n\n\tif useTLS {\n\t\t_, currentFile, _, _ := runtime.Caller(0)\n\t\tbasepath := filepath.Dir(currentFile)\n\t\tcertpath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_cert.pem\"))\n\t\tkeypath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_key.pem\"))\n\n\t\tcreds, err := credentials.NewServerTLSFromFile(certpath, keypath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsopts = append(sopts, grpc.Creds(creds))\n\t}\n\n\trcv := &mockTracesReceiver{\n\t\tmockReceiver: mockReceiver{\n\t\t\tsrv:          grpc.NewServer(sopts...),\n\t\t\tln:           ln,\n\t\t\trequestCount: &atomic.Int32{},\n\t\t\ttotalItems:   &atomic.Int32{},\n\t\t},\n\t\texportResponse: ptraceotlp.NewExportResponse,\n\t}\n\n\tptraceotlp.RegisterGRPCServer(rcv.srv, rcv)\n\n\treturn rcv, nil\n}\n\nfunc (r *mockTracesReceiver) start() {\n\tgo func() {\n\t\t_ = r.srv.Serve(r.ln)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.opentelemetry.io/otel/trace/noop\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracesdk\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracesdk\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\"\n\t\"go"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a gRPC server for handling OpenTelemetry Protocol (OTLP) trace data, including setup of tracing components and a bounded queue for admission control.\n\nStruct Description: The otlpReceiver struct represents a receiver for OTLP trace data over gRPC, which processes incoming traces and forwards them to the next consumer in the pipeline.\n\nFields:\n- nextConsumer: consumer.Traces - The next trace consumer in the processing pipeline\n- obsrecv: *receiverhelper.ObsReport - Observability reporter for receiver metrics\n- bq: *admission2.BoundedQueue - Bounded queue for admission control of incoming requests\n\nMethods:\n- New: (logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) -> *otlpReceiver - Constructor function that creates a new otlpReceiver instance\n- otlpReceiverOnGRPCServer: (t *testing.T, tc consumer.Traces) -> (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) - Sets up and starts a gRPC server with OTLP trace receiver capabilities, returning the server address, in-memory exporter, and tracer provider for testing purposes",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"go.opentelemetry.io/collector/receiver/receivertest\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\tln, err := net.Listen(\"tcp\", \"localhost:\")\n\trequire.NoError(t, err, \"Failed to find an available address to run the gRPC server: %v\", err)\n\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, ln.Close())\n\t})\n\n\texp := tracetest.NewInMemoryExporter()\n\n\ttp := trace.NewTracerProvider(trace.WithSyncer(exp))\n\ttelset := componenttest.NewNopTelemetrySettings()\n\ttelset.TracerProvider = tp\n\n\tset := receivertest.NewNopSettings()\n\tset.TelemetrySettings = telset\n\n\tset.ID = component.NewIDWithName(component.MustNewType(\"otlp\"), \"trace\")\n\tobsrecv, err := receiverhelper.NewObsReport(receiverhelper.ObsReportSettings{\n\t\tReceiverID:             set.ID,\n\t\tTransport:              \"grpc\",\n\t\tReceiverCreateSettings: set,\n\t})\n\trequire.NoError(t, err)\n\tbq, err := admission2.NewBoundedQueue(set.ID, telset, maxBytes, 0)\n\trequire.NoError(t, err)\n\tr := New(zap.NewNop(), tc, obsrecv, bq)\n\tsrv := grpc.NewServer()\n\tptraceotlp.RegisterGRPCServer(srv, r)\n\tgo func() {\n\t\t_ = srv.Serve(ln)\n\t}()\n\n\treturn ln.Addr(), exp, tp\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\texporter := tracetest.NewInMemoryExporter()\n\ttp := trace.NewTracerProvider(\n\t\ttrace.WithBatcher(exporter),\n\t)\n\n\tlogger, _ := zap.NewDevelopment()\n\tobsrecv := receiverhelper.NewObsReport(receiverhelper.ObsReportParams{Logger: logger})\n\tbq := admission2.NewBoundedQueue(admission2.BoundedQueueParams{MaxCapacity: 100})\n\n\treceiver := New(logger, tc, obsrecv, bq)\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\totlp.RegisterTraceServiceServer(grpcServer, receiver)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tt.Errorf(\"server failed: %v\", err)\n\t\t}\n\t}()\n\n\treturn lis.Addr(), exporter, tp\n}\n```"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Implement a gRPC server in Go for a log service that supports append, read, discard, and info operations with concurrent access control and log entry management.\n\nStruct Description: The Server struct represents a gRPC server implementation for a log service that maintains an ordered sequence of log entries with configurable size limits and provides thread-safe operations.\n\nFields:\n- ctx: context.Context - Context for managing server lifecycle\n- options: *Options - Configuration options for the server\n- hardLimit: int - Maximum number of entries before truncation\n- lock: sync.Mutex - Mutex for thread-safe operations\n- locked: struct - Protected data structure containing:\n  - startIndex: Index - First available index in the log\n  - entries: []*logspec.Entry - Slice of log entries\n  - changed: chan struct{} - Channel to notify about log changes\n\nMethods:\n- NewServer: [Name](ctx context.Context, options *Options) -> (*Server, error) - Creates and starts a new Server instance\n- Append: [Name](stream logspec.Log_AppendServer) -> error - Handles append requests via gRPC stream\n- append: [Name](proposals [][]byte) -> []Index - Internal method to append entries to the log\n- lastIndexLocked: [Name]() -> Index - Helper method to get last index (requires lock)\n- Discard: [Name](ctx context.Context, req *logspec.DiscardRequest) -> (*logspec.DiscardReply, error) - Handles discard requests\n- discard: [Name](firstIndex Index) -> - Internal method to discard entries\n- Read: [Name](req *logspec.ReadRequest, stream logspec.Log_ReadServer) -> error - Handles read requests via gRPC stream\n- Info: [Name](ctx context.Context, req *logspec.InfoRequest) -> (*logspec.InfoReply, error) - Returns current log info\n- info: [Name]() -> (*logspec.InfoReply, chan struct{}) - Internal method to get log info\n- InfoStream: [Name](req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) -> error - Streams log info updates",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"github.com/ebay/akutan/logspec\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tctx       context.Context\n\toptions   *Options\n\thardLimit int\n\tlock      sync.Mutex\n\tlocked    struct {\n\t\tstartIndex Index\n\t\tentries    []*logspec.Entry\n\t\tchanged    chan struct{}\n\t}\n}\n\ntype Options struct {\n\tAddress string\n\tLimit   int\n}\n\ntype Index = uint64\n\nfunc NewServer(ctx context.Context, options *Options) (*Server, error) {\n\tserver := &Server{\n\t\tctx:       ctx,\n\t\toptions:   options,\n\t\thardLimit: options.Limit * 3 / 2,\n\t}\n\tserver.locked.startIndex = 1\n\tserver.locked.changed = make(chan struct{})\n\tlistener, err := net.Listen(\"tcp\", options.Address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconst maxMsgSize = 1024 * 1024 * 1024\n\tservice := grpc.NewServer(\n\t\tgrpc.MaxRecvMsgSize(maxMsgSize),\n\t\tgrpc.MaxSendMsgSize(maxMsgSize))\n\tlogspec.RegisterLogServer(service, server)\n\tgo service.Serve(listener)\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tlistener.Close()\n\t\tservice.Stop()\n\t}()\n\treturn server, nil\n}\n\nfunc (server *Server) Append(streams logspec.Log_AppendServer) error {\n\tseq := uint64(0)\n\tfor {\n\t\tseq++\n\t\treq, err := streams.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif req.Sequence != seq {\n\t\t\treturn errors.New(\"out of sequence\")\n\t\t}\n\t\tindexes := server.append(req.Proposals)\n\t\tres := logspec.AppendReply{\n\t\t\tReply: &logspec.AppendReply_Ok{\n\t\t\t\tOk: &logspec.AppendReply_OK{\n\t\t\t\t\tSequence: seq,\n\t\t\t\t\tIndexes:  indexes,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\terr = streams.Send(&res)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (server *Server) append(proposals [][]byte) []Index {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\tprevLastIndex := server.lastIndexLocked()\n\tnextIndex := prevLastIndex + 1\n\tindexes := make([]Index, len(proposals))\n\tfor i := range proposals {\n\t\tindexes[i] = nextIndex\n\t\tnextIndex++\n\t\tserver.locked.entries = append(server.locked.entries, &logspec.Entry{\n\t\t\tIndex: indexes[i],\n\t\t\tData:  proposals[i],\n\t\t\tSkip:  false,\n\t\t})\n\t}\n\n\tif server.hardLimit > 0 && len(server.locked.entries) >= server.hardLimit {\n\t\tfirstIndex := nextIndex - uint64(server.options.Limit)\n\t\tdiff := firstIndex - server.locked.startIndex\n\t\tserver.locked.entries = append([]*logspec.Entry(nil),\n\t\t\tserver.locked.entries[diff:]...)\n\t\tserver.locked.startIndex = firstIndex\n\t}\n\n\tclose(server.locked.changed)\n\tserver.locked.changed = make(chan struct{})\n\treturn indexes\n}\n\nfunc (server *Server) lastIndexLocked() Index {\n\treturn server.locked.startIndex + uint64(len(server.locked.entries)) - 1\n}\n\nfunc (server *Server) Discard(ctx context.Context, req *logspec.DiscardRequest) (*logspec.DiscardReply, error) {\n\tserver.discard(req.FirstIndex)\n\treturn &logspec.DiscardReply{\n\t\tReply: &logspec.DiscardReply_Ok{\n\t\t\tOk: &logspec.DiscardReply_OK{},\n\t\t},\n\t}, nil\n}\n\nfunc (server *Server) discard(firstIndex Index) {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\tif firstIndex <= server.locked.startIndex {\n\t\treturn\n\t}\n\tdiff := firstIndex - server.locked.startIndex\n\tif uint64(len(server.locked.entries)) < diff {\n\t\tserver.locked.entries = nil\n\t} else {\n\t\tserver.locked.entries = append([]*logspec.Entry(nil),\n\t\t\tserver.locked.entries[diff:]...)\n\t}\n\tserver.locked.startIndex = firstIndex\n\tclose(server.locked.changed)\n\tserver.locked.changed = make(chan struct{})\n}\n\nfunc (server *Server) Read(req *logspec.ReadRequest, stream logspec.Log_ReadServer) error {\n\tctx := stream.Context()\n\tnextIndex := req.NextIndex\n\tfor {\n\t\tserver.lock.Lock()\n\t\tstartIndex := server.locked.startIndex\n\t\tlastIndex := server.lastIndexLocked()\n\t\tentries := server.locked.entries\n\t\tchangedCh := server.locked.changed\n\t\tserver.lock.Unlock()\n\n\t\tif nextIndex < startIndex {\n\t\t\treturn stream.Send(&logspec.ReadReply{\n\t\t\t\tReply: &logspec.ReadReply_Truncated{\n\t\t\t\t\tTruncated: true,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif nextIndex > lastIndex {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn ctx.Err()\n\t\t\tcase <-server.ctx.Done():\n\t\t\t\treturn server.ctx.Err()\n\t\t\tcase <-changedCh:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tentries = entries[nextIndex-startIndex:]\n\t\tif len(entries) > 10 {\n\t\t\tentries = entries[:10]\n\t\t}\n\t\terr := stream.Send(&logspec.ReadReply{\n\t\t\tReply: &logspec.ReadReply_Ok{\n\t\t\t\tOk: &logspec.ReadReply_OK{\n\t\t\t\t\tEntries: entries,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnextIndex += uint64(len(entries))\n\t}\n}\n\nfunc (server *Server) Info(context.Context, *logspec.InfoRequest) (*logspec.InfoReply, error) {\n\tres, _ := server.info()\n\treturn res, nil\n}\n\nfunc (server *Server) info() (*logspec.InfoReply, chan struct{}) {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\treturn &logspec.InfoReply{\n\t\tReply: &logspec.InfoReply_Ok{\n\t\t\tOk: &logspec.InfoReply_OK{\n\t\t\t\tFirstIndex: server.locked.startIndex,\n\t\t\t\tLastIndex:  server.lastIndexLocked(),\n\t\t\t},\n\t\t},\n\t}, server.locked.changed\n}\n\nfunc (server *Server) InfoStream(req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) error {\n\tfor {\n\t\tres, changedCh := server.info()\n\t\terr := stream.Send(res)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tselect {\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\tcase <-server.ctx.Done():\n\t\t\treturn server.ctx.Err()\n\t\tcase <-changedCh:\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"sync\"\n)\n\ntype Index int\n\ntype Options struct {\n\tHardLimit int\n}\n\ntype Server struct {\n\tctx       context.Context\n\toptions   *Options\n\thardLimit int\n\tlock      sync.Mutex\n\tlocked    struct {\n\t\tstartIndex Index\n\t\tentries    []*logspec.Entry\n\t\tchanged    chan struct{}\n\t}\n}\n\nfunc NewServer(ctx context.Context, options *Options) (*Server, error) {\n\ts := &Server{\n\t\tctx:       ctx,\n\t\toptions:   options,\n\t\thardLimit: options.HardLimit,\n\t\tlocked: struct {\n\t\t\tstartIndex Index\n\t\t\tentries    []*logspec.Entry\n\t\t\tchanged    chan struct{}\n\t\t}{\n\t\t\tstartIndex: 0,\n\t\t\tentries:    []*logspec.Entry{},\n\t\t\tchanged:    make(chan struct{}, 1),\n\t\t},\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) Append(stream logspec.Log_AppendServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproposals := req.Proposals\n\t\tindexes := s.append(proposals)\n\t\tif err := stream.Send(&logspec.AppendReply{Indexes: indexes}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *Server) append(proposals [][]byte) []Index {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tindexes := make([]Index, len(proposals))\n\tfor i, p := range proposals {\n\t\tentry := &logspec.Entry{\n\t\t\tData: p,\n\t\t}\n\t\ts.locked.entries = append(s.locked.entries, entry)\n\t\tindexes[i] = Index(len(s.locked.entries) - 1)\n\t}\n\n\tif len(s.locked.entries) > s.hardLimit {\n\t\ts.locked.entries = s.locked.entries[len(s.locked.entries)-s.hardLimit:]\n\t\ts.locked.startIndex = Index(len(s.locked.entries) - s.hardLimit)\n\t}\n\n\tselect {\n\tcase s.locked.changed <- struct{}{}:\n\tdefault:\n\t}\n\n\treturn indexes\n}\n\nfunc (s *Server) lastIndexLocked() Index {\n\treturn Index(len(s.locked.entries) - 1)\n}\n\nfunc (s *Server) Discard(ctx context.Context, req *logspec.DiscardRequest) (*logspec.DiscardReply, error) {\n\ts.discard(req.FirstIndex)\n\treturn &logspec.DiscardReply{}, nil\n}\n\nfunc (s *Server) discard(firstIndex Index) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tif firstIndex < s.locked.startIndex {\n\t\treturn\n\t}\n\n\ts.locked.startIndex = firstIndex + 1\n\ts.locked.entries = s.locked.entries[s.locked.startIndex:]\n\tselect {\n\tcase s.locked.changed <- struct{}{}:\n\tdefault:\n\t}\n}\n\nfunc (s *Server) Read(req *logspec.ReadRequest, stream logspec.Log_ReadServer) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tstart := req.Start\n\tend := req.End\n\n\tif start < s.locked.startIndex {\n\t\tstart = s.locked.startIndex\n\t}\n\tif end > s.lastIndexLocked() {\n\t\tend = s.lastIndexLocked()\n\t}\n\n\tfor i := start; i <= end; i++ {\n\t\tif err := stream.Send(&logspec.ReadResponse{Entry: s.locked.entries[i]}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (s *Server) Info(ctx context.Context, req *logspec.InfoRequest) (*logspec.InfoReply, error) {\n\treply, _ := s.info()\n\treturn reply, nil\n}\n\nfunc (s *Server) info() (*logspec.InfoReply, chan struct{}) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\treturn &logspec.InfoReply{\n\t\tCount:     uint64(len(s.locked.entries)),\n\t\tLastIndex: s.lastIndexLocked(),\n\t}, s.locked.changed\n}\n\nfunc (s *Server) InfoStream(req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) error {\n\treply, ch := s.info()\n\tif err := stream.Send(reply); err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase <-ch:\n\t\t\treply, _ := s.info()\n\t\t\tif err := stream.Send(reply); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase <-s.ctx.Done():\n\t\t\treturn nil\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Create a function to start a gRPC server for signal exchange, including setting up a network listener and registering the server with gRPC.\n\nFunction Description: The function `startSignal` initializes and starts a gRPC server for signal exchange. It creates a TCP listener on an available port, initializes a new gRPC server instance, registers the signal exchange service, and starts the server in a goroutine. The function is designed for testing purposes and includes error handling.\n\nInput: \n- `t *testing.T`: A testing context for error reporting and test helpers.\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance.\n- `net.Listener`: The network listener used by the gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tsigProto \"github.com/netbirdio/netbird/signal/proto\"\n\tsig \"github.com/netbirdio/netbird/signal/server\"\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts := grpc.NewServer()\n\tsrv, err := sig.NewServer(context.Background(), otel.Meter(\"\"))\n\trequire.NoError(t, err)\n\n\tsigProto.RegisterSignalExchangeServer(s, srv)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn s, lis\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n    listener, err := net.Listen(\"tcp\", \":0\")\n    if err != nil {\n        t.Fatal(\"Failed to create listener:\", err)\n    }\n    server := grpc.NewServer()\n    // Register the signal exchange service\n    // Example: RegisterSignalExchangeServiceServer(server, &signalExchangeService{})\n    go func() {\n        if err := server.Serve(listener); err != nil {\n            t.Errorf(\"Server failed: %v\", err)\n        }\n    }()\n    return server, listener\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Create a Go HTTP client struct for interacting with an Okta API, handling authentication, session management, and user data retrieval.\n\nStruct Description: The Client struct represents an HTTP client configured to communicate with Okta's API. It maintains client configuration, organization details, and authentication state, providing methods for various API operations.\n\nFields:\n- client: *http.Client - The underlying HTTP client used for requests\n- org: string - The Okta organization domain\n- Url: string - The base Okta URL (defaults to \"okta.com\")\n- ApiToken: string - The API token for authenticated requests\n\nMethods:\n- NewClient(org string) -> *Client - Constructor that initializes a new Client with the specified organization\n- Authenticate(username string, password string) -> (*AuthnResponse, error) - Performs user authentication with username/password\n- Session(sessionToken string) -> (*SessionResponse, error) - Creates a session using a session token\n- User(userID string) -> (*User, error) - Retrieves user details by ID\n- Groups(userID string) -> (*Groups, error) - Gets groups associated with a user\n- call(endpoint string, method string, request interface{}, response interface{}) -> error - Internal method handling the HTTP request/response cycle",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tclient   *http.Client\n\torg      string\n\tUrl      string\n\tApiToken string\n}\n\nfunc NewClient(org string) *Client {\n\tclient := Client{\n\t\tclient: &http.Client{},\n\t\torg:    org,\n\t\tUrl:    \"okta.com\",\n\t}\n\n\treturn &client\n}\n\nfunc (c *Client) Authenticate(username, password string) (*AuthnResponse, error) {\n\tvar request = &AuthnRequest{\n\t\tUsername: username,\n\t\tPassword: password,\n\t}\n\n\tvar response = &AuthnResponse{}\n\terr := c.call(\"authn\", \"POST\", request, response)\n\treturn response, err\n}\n\nfunc (c *Client) Session(sessionToken string) (*SessionResponse, error) {\n\tvar request = &SessionRequest{\n\t\tSessionToken: sessionToken,\n\t}\n\n\tvar response = &SessionResponse{}\n\terr := c.call(\"sessions\", \"POST\", request, response)\n\treturn response, err\n}\n\nfunc (c *Client) User(userID string) (*User, error) {\n\tvar response = &User{}\n\terr := c.call(\"users/\"+userID, \"GET\", nil, response)\n\treturn response, err\n}\n\nfunc (c *Client) Groups(userID string) (*Groups, error) {\n\tvar response = &Groups{}\n\terr := c.call(\"users/\"+userID+\"/groups\", \"GET\", nil, response)\n\treturn response, err\n}\n\nfunc (c *Client) call(endpoint, method string, request, response interface{}) error {\n\tdata, _ := json.Marshal(request)\n\n\tvar url = \"https://\" + c.org + \".\" + c.Url + \"/api/v1/\" + endpoint\n\treq, err := http.NewRequest(method, url, bytes.NewBuffer(data))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treq.Header.Add(\"Accept\", `application/json`)\n\treq.Header.Add(\"Content-Type\", `application/json`)\n\tif c.ApiToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"SSWS \"+c.ApiToken)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif resp.StatusCode == http.StatusOK {\n\t\terr := json.Unmarshal(body, &response)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tvar errors ErrorResponse\n\t\terr = json.Unmarshal(body, &errors)\n\n\t\treturn &errorResponse{\n\t\t\tHTTPCode: resp.StatusCode,\n\t\t\tResponse: errors,\n\t\t\tEndpoint: url,\n\t\t}\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tclient   *http.Client\n\torg      string\n\tUrl      string\n\tApiToken string\n}\n\ntype AuthnRequest struct {\n\tUsername string `json:\"username\"`\n\tPassword string `json:\"password\"`\n}\n\ntype AuthnResponse struct {\n\tSessionToken string `json:\"sessionToken\"`\n}\n\ntype SessionRequest struct {\n\tSessionToken string `json:\"sessionToken\"`\n}\n\ntype SessionResponse struct {\n\tSessionId string `json:\"id\"`\n}\n\ntype User struct {\n\tId string `json:\"id\"`\n}\n\ntype Groups struct {\n\tItems []struct {\n\t\tId   string `json:\"id\"`\n\t\tName string `json:\"name\"`\n\t} `json:\"items\"`\n}\n\nfunc NewClient(org string) *Client {\n\treturn &Client{\n\t\tclient: &http.Client{},\n\t\torg:    org,\n\t\tUrl:    \"https://\" + org + \".okta.com\",\n\t}\n}\n\nfunc (c *Client) call(endpoint, method string, request, response interface{}) error {\n\turl := c.Url + endpoint\n\tvar req *http.Request\n\tvar err error\n\tif request != nil {\n\t\tbody, err := json.Marshal(request)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treq, err = http.NewRequest(method, url, bytes.NewBuffer(body))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\treq, err = http.NewRequest(method, url, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\tif c.ApiToken != \"\" {\n\t\treq.Header.Set(\"Authorization\", \"SSWS \"+c.ApiToken)\n\t}\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"HTTP error %d: %s\", resp.StatusCode, resp.Status)\n\t}\n\treturn json.NewDecoder(resp.Body).Decode(response)\n}\n\nfunc (c *Client) Authenticate(username, password string) (*AuthnResponse, error) {\n\treq := &AuthnRequest{Username: username, Password: password}\n\tvar resp AuthnResponse\n\terr := c.call(\"/api/v1/authn\", \"POST\", req, &resp)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &resp, nil\n}\n\nfunc (c *Client) Session(sessionToken string) (*SessionResponse, error) {\n\treq := &SessionRequest{SessionToken: sessionToken}\n\tvar resp SessionResponse\n\terr := c.call(\"/api/v1/sessions\", \"POST\", req, &resp)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &resp, nil\n}\n\nfunc (c *Client) User(userID string) (*User, error) {\n\tvar user User\n\terr := c.call(\"/api/v1/users/\"+userID, \"GET\", nil, &user)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &user, nil\n}\n\nfunc (c *Client) Groups(userID string) (*Groups, error) {\n\tvar groups Groups\n\terr := c.call(\"/api/v1/users/\"+userID+\"/groups\", \"GET\", nil, &groups)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &groups, nil\n}\n```"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Create a gRPC server for a translation service that can handle text translation requests and return mock translations for testing purposes.\n\nStruct Description: The fakeTranslationServer struct implements a mock gRPC server for the TranslationService, providing a simple translation response without requiring an actual translation service.\n\nFields:\n- UnimplementedTranslationServiceServer: embed - Base type from translatepb package that provides default implementations for all service methods\n\nMethods:\n- TranslateText: [Name](ctx context.Context, req *translatepb.TranslateTextRequest) -> (*translatepb.TranslateTextResponse, error) - Handles translation requests by returning a mock response containing \"Hello World\" as the translated text",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\ttranslate \"cloud.google.com/go/translate/apiv3\"\n\t\"cloud.google.com/go/translate/apiv3/translatepb\"\n\t\"google.golang.org/api/option\"\n)\n\ntype fakeTranslationServer struct {\n\ttranslatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n\tresp := &translatepb.TranslateTextResponse{\n\t\tTranslations: []*translatepb.Translation{\n\t\t\t{TranslatedText: \"Hello World\"},\n\t\t},\n\t}\n\treturn resp, nil\n}\n\nfunc TestTranslateTextWithConcreteClient(t *testing.T) {\n\tctx := context.Background()\n\n\tfakeTranslationServer := &fakeTranslationServer{}\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgsrv := grpc.NewServer()\n\ttranslatepb.RegisterTranslationServiceServer(gsrv, fakeTranslationServer)\n\tfakeServerAddr := l.Addr().String()\n\tgo func() {\n\t\tif err := gsrv.Serve(l); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tclient, err := translate.NewTranslationClient(ctx,\n\t\toption.WithEndpoint(fakeServerAddr),\n\t\toption.WithoutAuthentication(),\n\t\toption.WithGRPCDialOption(grpc.WithInsecure()),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"translatepb\"\n)\n\ntype fakeTranslationServer struct {\n\ttranslatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (s *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n\treturn &translatepb.TranslateTextResponse{\n\t\tTranslatedText: \"Hello World\",\n\t}, nil\n}"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server for management services, including setting up necessary dependencies and configurations.\n\nFunction Description: The function `startManagement` initializes and starts a gRPC server with management services. It sets up a temporary directory for data storage, configures the server with keepalive policies, initializes various managers and stores, and registers the management service. The server listens on a dynamically assigned port and runs in a goroutine.\n\nInput:\n- `t *testing.T`: Testing context for temporary directory creation and cleanup\n- `signalAddr string`: Address of the signal service\n- `counter *int`: Pointer to a counter for tracking server operations (used in mock implementation)\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance\n- `string`: The address the server is listening on\n- `error`: Any error that occurred during initialization",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server\"\n\t\"github.com/netbirdio/netbird/management/server/activity\"\n\t\"github.com/netbirdio/netbird/management/server/settings\"\n\t\"github.com/netbirdio/netbird/management/server/store\"\n\t\"github.com/netbirdio/netbird/management/server/telemetry\"\n)\n\nvar (\n\tkaep = keepalive.EnforcementPolicy{\n\t\tMinTime:             15 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\n\tkasp = keepalive.ServerParameters{\n\t\tMaxConnectionIdle:     15 * time.Second,\n\t\tMaxConnectionAgeGrace: 5 * time.Second,\n\t\tTime:                  5 * time.Second,\n\t\tTimeout:               2 * time.Second,\n\t}\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tt.Helper()\n\tdataDir := t.TempDir()\n\n\tconfig := &server.Config{\n\t\tStuns:      []*server.Host{},\n\t\tTURNConfig: &server.TURNConfig{},\n\t\tSignal: &server.Host{\n\t\t\tProto: \"http\",\n\t\t\tURI:   signalAddr,\n\t\t},\n\t\tDatadir:    dataDir,\n\t\tHttpConfig: nil,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tstore, cleanUp, err := store.NewTestStoreFromSQL(context.Background(), \"\", config.Datadir)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tt.Cleanup(cleanUp)\n\n\tpeersUpdateManager := server.NewPeersUpdateManager(nil)\n\teventStore := &activity.InMemoryEventStore{}\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tia, _ := integrations.NewIntegratedValidator(context.Background(), eventStore)\n\n\tmetrics, err := telemetry.NewDefaultAppMetrics(context.Background())\n\trequire.NoError(t, err)\n\n\taccountManager, err := server.BuildManager(context.Background(), store, peersUpdateManager, nil, \"\", \"netbird.selfhosted\", eventStore, nil, false, ia, metrics)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tsecretsManager := server.NewTimeBasedAuthSecretsManager(peersUpdateManager, config.TURNConfig, config.Relay)\n\tmgmtServer, err := server.NewServer(context.Background(), config, accountManager, settings.NewManager(store), peersUpdateManager, secretsManager, nil, nil)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tmock := &mockServer{\n\t\tManagementServiceServer: mgmtServer,\n\t\tcounter:                 counter,\n\t}\n\tmgmtProto.RegisterManagementServiceServer(s, mock)\n\tgo func() {\n\t\tif err = s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn s, lis.Addr().String(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tdataDir := t.TempDir()\n\tkeepaliveOpts := grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionIdle: 10 * time.Minute,\n\t})\n\tserver := grpc.NewServer(keepaliveOpts)\n\tlistener, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tmanager := &Manager{dataDir: dataDir, counter: counter}\n\tstore := &Store{dataDir: dataDir}\n\tmanagement.RegisterManagementServiceServer(server, &ManagementService{manager: manager, store: store})\n\tgo func() {\n\t\t_ = server.Serve(listener)\n\t}()\n\treturn server, listener.Addr().String(), nil\n}\n\ntype Manager struct {\n\tdataDir string\n\tcounter *int\n}\n\ntype Store struct {\n\tdataDir string\n}\n\ntype ManagementService struct {\n\tmanager *Manager\n\tstore   *Store\n}\n```"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that sets up and starts a mock gRPC server for management service testing, including generating a WireGuard key for authentication purposes.\n\nFunction Description: The function `startMockManagement` initializes and starts a mock gRPC server that implements a management service interface. It creates a TCP listener on an available port, generates a WireGuard key pair for server authentication, and registers mock implementations of the management service methods. The server runs in a goroutine to handle incoming requests asynchronously.\n\nInput: \n- t *testing.T: Testing context for error reporting and test helpers\n\nOutput:\n- *grpc.Server: The created gRPC server instance\n- net.Listener: The network listener for the server\n- *mock_server.ManagementServiceServerMock: The mock implementation of the management service\n- wgtypes.Key: The generated WireGuard private key for the server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server/mock_server\"\n\t\"golang.zx2c4.com/wireguard/wgctrl/wgtypes\"\n)\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\ts := grpc.NewServer()\n\n\tserverKey, err := wgtypes.GenerateKey()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmgmtMockServer := &mock_server.ManagementServiceServerMock{\n\t\tGetServerKeyFunc: func(context.Context, *mgmtProto.Empty) (*mgmtProto.ServerKeyResponse, error) {\n\t\t\tresponse := &mgmtProto.ServerKeyResponse{\n\t\t\t\tKey: serverKey.PublicKey().String(),\n\t\t\t}\n\t\t\treturn response, nil\n\t\t},\n\t}\n\n\tmgmtProto.RegisterManagementServiceServer(s, mgmtMockServer)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\treturn s, lis, mgmtMockServer, serverKey\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "```go\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tserver := grpc.NewServer()\n\tlistener, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tprivateKey := wgtypes.GenerateKey()\n\tmockService := &mock_server.ManagementServiceServerMock{}\n\tmock_server.RegisterManagementServiceServer(server, mockService)\n\tgo func() {\n\t\tif err := server.Serve(listener); err != nil {\n\t\t\tt.Errorf(\"Server failed: %v\", err)\n\t\t}\n\t}()\n\treturn server, listener, mockService, privateKey\n}\n```"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Implement a Redis-based session management system in Go that allows storing, retrieving, and managing HTTP session data using Redis as the backend storage.\n\nStruct Description: The implementation consists of two main structs - `SessionStore` for handling individual session operations and `Provider` for managing the Redis connection pool and session lifecycle.\n\nFields:\n\nSessionStore:\n- p: *redis.Pool - Redis connection pool\n- sid: string - Session ID\n- lock: sync.RWMutex - Read-write lock for thread safety\n- values: map[interface{}]interface{} - Key-value pairs storing session data\n- maxlifetime: int64 - Session expiration time in seconds\n\nProvider:\n- maxlifetime: int64 - Default session expiration time\n- savePath: string - Redis server address\n- poolsize: int - Connection pool size\n- password: string - Redis authentication password\n- dbNum: int - Redis database number\n- poollist: *redis.Pool - Redis connection pool instance\n\nMethods:\n\nSessionStore:\n- Set(key, value interface{}) error - Stores a key-value pair in the session\n- Get(key interface{}) interface{} - Retrieves a value by key from the session\n- Delete(key interface{}) error - Removes a key-value pair from the session\n- Flush() error - Clears all session data\n- SessionID() string - Returns the session ID\n- SessionRelease(w http.ResponseWriter) - Persists session data to Redis before closing\n\nProvider:\n- SessionInit(maxlifetime int64, savePath string) error - Initializes the Redis connection pool with configuration\n- SessionRead(sid string) (session.Store, error) - Retrieves session data from Redis\n- SessionExist(sid string) bool - Checks if a session exists in Redis\n- SessionRegenerate(oldsid, sid string) (session.Store, error) - Creates a new session ID while preserving data\n- SessionDestroy(sid string) error - Removes session data from Redis",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/astaxie/beego/session\"\n\t\"github.com/garyburd/redigo/redis\"\n)\n\nvar redispder = &Provider{}\nvar MaxPoolSize = 100\n\ntype SessionStore struct {\n\tp           *redis.Pool\n\tsid         string\n\tlock        sync.RWMutex\n\tvalues      map[interface{}]interface{}\n\tmaxlifetime int64\n}\n\nfunc (rs *SessionStore) Set(key, value interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values[key] = value\n\treturn nil\n}\n\nfunc (rs *SessionStore) Get(key interface{}) interface{} {\n\trs.lock.RLock()\n\tdefer rs.lock.RUnlock()\n\tif v, ok := rs.values[key]; ok {\n\t\treturn v\n\t}\n\treturn nil\n}\n\nfunc (rs *SessionStore) Delete(key interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\tdelete(rs.values, key)\n\treturn nil\n}\n\nfunc (rs *SessionStore) Flush() error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (rs *SessionStore) SessionID() string {\n\treturn rs.sid\n}\n\nfunc (rs *SessionStore) SessionRelease(w http.ResponseWriter) {\n\tb, err := session.EncodeGob(rs.values)\n\tif err != nil {\n\t\treturn\n\t}\n\tc := rs.p.Get()\n\tdefer c.Close()\n\tc.Do(\"SETEX\", rs.sid, rs.maxlifetime, string(b))\n}\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\nfunc (rp *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\trp.maxlifetime = maxlifetime\n\tconfigs := strings.Split(savePath, \",\")\n\tif len(configs) > 0 {\n\t\trp.savePath = configs[0]\n\t}\n\tif len(configs) > 1 {\n\t\tpoolsize, err := strconv.Atoi(configs[1])\n\t\tif err != nil || poolsize <= 0 {\n\t\t\trp.poolsize = MaxPoolSize\n\t\t} else {\n\t\t\trp.poolsize = poolsize\n\t\t}\n\t} else {\n\t\trp.poolsize = MaxPoolSize\n\t}\n\tif len(configs) > 2 {\n\t\trp.password = configs[2]\n\t}\n\tif len(configs) > 3 {\n\t\tdbnum, err := strconv.Atoi(configs[3])\n\t\tif err != nil || dbnum < 0 {\n\t\t\trp.dbNum = 0\n\t\t} else {\n\t\t\trp.dbNum = dbnum\n\t\t}\n\t} else {\n\t\trp.dbNum = 0\n\t}\n\trp.poollist = redis.NewPool(func() (redis.Conn, error) {\n\t\tc, err := redis.Dial(\"tcp\", rp.savePath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif rp.password != \"\" {\n\t\t\tif _, err := c.Do(\"AUTH\", rp.password); err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\t_, err = c.Do(\"SELECT\", rp.dbNum)\n\t\tif err != nil {\n\t\t\tc.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\treturn c, err\n\t}, rp.poolsize)\n\n\treturn rp.poollist.Get().Err()\n}\n\nfunc (rp *Provider) SessionRead(sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionExist(sid string) bool {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, err := redis.Int(c.Do(\"EXISTS\", sid)); err != nil || existed == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (rp *Provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, _ := redis.Int(c.Do(\"EXISTS\", oldsid)); existed == 0 {\n\t\tc.Do(\"SET\", sid, \"\", \"EX\", rp.maxlifetime)\n\t} else {\n\t\tc.Do(\"RENAME\", oldsid, sid)\n\t\tc.Do(\"EXPIRE\", sid, rp.maxlifetime)\n\t}\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionDestroy(sid string) error {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tc.Do(\"DEL\", sid)\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gomodule/redigo/redis\"\n)\n\ntype SessionStore struct {\n\tp       *redis.Pool\n\tsid     string\n\tlock    sync.RWMutex\n\tvalues  map[string]interface{}\n\tmaxlife int64\n}\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\nfunc (s *SessionStore) Set(key, value interface{}) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\ts.values[fmt.Sprintf(\"%v\", key)] = value\n\treturn nil\n}\n\nfunc (s *SessionStore) Get(key interface{}) interface{} {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.values[fmt.Sprintf(\"%v\", key)]\n}\n\nfunc (s *SessionStore) Delete(key interface{}) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tdelete(s.values, fmt.Sprintf(\"%v\", key))\n\treturn nil\n}\n\nfunc (s *SessionStore) Flush() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\ts.values = make(map[string]interface{})\n\treturn nil\n}\n\nfunc (s *SessionStore) SessionID() string {\n\treturn s.sid\n}\n\nfunc (s *SessionStore) SessionRelease(w http.ResponseWriter) {\n\tconn := s.p.Get()\n\tdefer conn.Close()\n\n\tfor k, v := range s.values {\n\t\t_, err := conn.Do(\"HSET\", s.sid, k, v)\n\t\tif err != nil {\n\t\t\t// Handle error\n\t\t}\n\t}\n\n\t_, err := conn.Do(\"EXPIRE\", s.sid, s.maxlife)\n\tif err != nil {\n\t\t// Handle error\n\t}\n}\n\nfunc (p *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\tp.maxlifetime = maxlifetime\n\tp.savePath = savePath\n\tp.poollist = &redis.Pool{\n\t\tMaxIdle:     p.poolsize,\n\t\tMaxActive:   p.poolsize,\n\t\tIdleTimeout: 180 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", p.savePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif p.password != \"\" {\n\t\t\t\tif _, err := c.Do(\"AUTH\", p.password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\tif p.dbNum > 0 {\n\t\t\t\tif _, err := c.Do(\"SELECT\", p.dbNum); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, nil\n\t\t},\n\t}\n\treturn nil\n}\n\nfunc (p *Provider) SessionRead(sid string) (interface{}, error) {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\tvals, err := redis.StringMap(conn.Do(\"HGETALL\", sid))\n\tif err != nil {\n\t\tif err == redis.ErrNil {\n\t\t\treturn nil, nil\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tstore := &SessionStore{\n\t\tp:       p.poollist,\n\t\tsid:     sid,\n\t\tvalues:  vals,\n\t\tmaxlife: p.maxlifetime,\n\t}\n\n\treturn store, nil\n}\n\nfunc (p *Provider) SessionExist(sid string) bool {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\texists, err := redis.Bool(conn.Do(\"EXISTS\", sid))\n\tif err != nil {\n\t\treturn false\n\t}\n\treturn exists\n}\n\nfunc (p *Provider) SessionRegenerate(oldsid, sid string) (interface{}, error) {\n\toldStore, err := p.SessionRead(oldsid)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif oldStore == nil {\n\t\treturn nil, nil\n\t}\n\n\tnewStore := &SessionStore{\n\t\tp:       p.poollist,\n\t\tsid:     sid,\n\t\tvalues:  make(map[string]interface{}),\n\t\tmaxlife: p.maxlifetime,\n\t}\n\n\toldStore.(*SessionStore).lock.RLock()\n\tfor k, v := range oldStore.(*SessionStore).values {\n\t\tnewStore.values[k] = v\n\t}\n\toldStore.(*SessionStore).lock.RUnlock()\n\n\terr = newStore.SessionRelease(nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, err = p.SessionDestroy(oldsid)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn newStore, nil\n}\n\nfunc (p *Provider) SessionDestroy(sid string) error {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", sid)\n\treturn err\n}\n```"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool and methods for interacting with Redis, including setting, getting, deleting keys, and flushing the database.\n\nStruct Description: RedisStore is a struct that manages a connection pool to Redis and provides methods for common Redis operations with support for expiration times.\n\nFields:\n- pool: *redis.Pool - A connection pool to Redis for efficient connection reuse\n- defaultExpiration: time.Duration - The default expiration time for keys when not explicitly specified\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method for executing Redis commands with serialization and expiration handling",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"time\"\n\n\t\"github.com/gomodule/redigo/redis\"\n)\n\ntype RedisStore struct {\n\tpool            *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\treturn &RedisStore{\n\t\tpool: &redis.Pool{\n\t\t\tDial: func() (redis.Conn, error) {\n\t\t\t\treturn redis.Dial(\"tcp\", host, redis.DialPassword(password))\n\t\t\t},\n\t\t},\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (s *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn s.invoke(func(key string, args ...interface{}) (interface{}, error) {\n\t\tconn := s.pool.Get()\n\t\tdefer conn.Close()\n\t\tserialized, err := json.Marshal(value)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tvar exp time.Duration\n\t\tif expires == 0 {\n\t\t\texp = s.defaultExpiration\n\t\t} else {\n\t\t\texp = expires\n\t\t}\n\t\targs = append(args, key, serialized)\n\t\tif exp > 0 {\n\t\t\targs = append(args, \"EX\", exp.Seconds())\n\t\t}\n\t\t_, err = conn.Do(args[0].(string), args[1:]...)\n\t\treturn nil, err\n\t}, key, value, expires)\n}\n\nfunc (s *RedisStore) Get(key string, ptrValue interface{}) error {\n\treturn s.invoke(func(key string, args ...interface{}) (interface{}, error) {\n\t\tconn := s.pool.Get()\n\t\tdefer conn.Close()\n\t\treply, err := conn.Do(\"GET\", key)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif reply == nil {\n\t\t\treturn nil, redis.Nil\n\t\t}\n\t\tdata, ok := reply.([]byte)\n\t\tif !ok {\n\t\t\treturn nil, errors.New(\"invalid type\")\n\t\t}\n\t\treturn data, nil\n\t}, key, nil, 0)\n}\n\nfunc (s *RedisStore) Delete(key string) error {\n\treturn s.invoke(func(key string, args ...interface{}) (interface{}, error) {\n\t\tconn := s.pool.Get()\n\t\tdefer conn.Close()\n\t\t_, err := conn.Do(\"DEL\", key)\n\t\treturn nil, err\n\t}, key, nil, 0)\n}\n\nfunc (s *RedisStore) Flush() error {\n\treturn s.invoke(func(key string, args ...interface{}) (interface{}, error) {\n\t\tconn := s.pool.Get()\n\t\tdefer conn.Close()\n\t\t_, err := conn.Do(\"FLUSHALL\")\n\t\treturn nil, err\n\t}, \"\", nil, 0)\n}\n\nfunc (s *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\t_, err := f(key, value, expires)\n\treturn err\n}\n```"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Redis client struct in Go that manages connections to Redis servers and provides common Redis operations. The implementation should use connection pooling and support thread-safe access to multiple Redis instances.\n\nStruct Description: RedisClient is a struct that encapsulates Redis connection pooling and provides methods for common Redis operations. It maintains a thread-safe map of Redis clients for different server addresses.\n\nFields:\n\npool: *redis.Pool - The connection pool for Redis operations\nAddress: string - The Redis server address (URL)\n\nMethods:\n\nGetRedisClient: (address string, maxIdle int, maxActive int) -> *RedisClient - Retrieves or creates a Redis client for the given address with specified pool settings\nGet: (key string) -> (string, error) - Retrieves the value for a given key from Redis\nSet: (key string, val interface{}) -> (interface{}, error) - Sets the value for a given key in Redis\nLPush: (key string, value ...interface{}) -> (int, error) - Pushes values to the left of a Redis list\nLPop: (key string) -> (string, error) - Pops a value from the left of a Redis list\nHSet: (hashID string, field string, val string) -> error - Sets a field in a Redis hash\nHGet: (hashID string, field string) -> (string, error) - Gets a field from a Redis hash",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\tAddress string\n}\n\nvar (\n\tredisMap map[string]*RedisClient\n\tmapMutex *sync.RWMutex\n)\n\nconst (\n\tdefaultMaxIdle   = 10\n\tdefaultMaxActive = 50\n)\n\nfunc init() {\n\tredisMap = make(map[string]*RedisClient)\n\tmapMutex = new(sync.RWMutex)\n}\n\nfunc newPool(redisURL string, maxIdle, maxActive int) *redis.Pool {\n\treturn &redis.Pool{\n\t\tMaxIdle:   maxIdle,\n\t\tMaxActive: maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.DialURL(redisURL)\n\t\t\treturn c, err\n\t\t},\n\t}\n}\n\nfunc GetRedisClient(address string, maxIdle, maxActive int) *RedisClient {\n\tif maxIdle <= 0 {\n\t\tmaxIdle = defaultMaxIdle\n\t}\n\tif maxActive <= 0 {\n\t\tmaxActive = defaultMaxActive\n\t}\n\tvar redis *RedisClient\n\tvar mok bool\n\tmapMutex.RLock()\n\tredis, mok = redisMap[address]\n\tmapMutex.RUnlock()\n\tif !mok {\n\t\tredis = &RedisClient{Address: address, pool: newPool(address, maxIdle, maxActive)}\n\t\tmapMutex.Lock()\n\t\tredisMap[address] = redis\n\t\tmapMutex.Unlock()\n\t}\n\treturn redis\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"GET\", key)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"SET\", key, val))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tret, err := redis.Int(conn.Do(\"LPUSH\", key, value))\n\treturn ret, err\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"LPOP\", key))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"HGET\", hashID, field)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"github.com/gomodule/redigo/redis\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\taddress string\n}\n\nfunc GetRedisClient(address string, maxIdle, maxActive int) *RedisClient {\n\tpool := &redis.Pool{\n\t\tMaxIdle:     maxIdle,\n\t\tMaxActive:   maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\treturn redis.Dial(\"tcp\", address)\n\t\t},\n\t}\n\treturn &RedisClient{\n\t\tpool:    pool,\n\t\taddress: address,\n\t}\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"GET\", key))\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn conn.Do(\"SET\", key, val)\n}\n\nfunc (rc *RedisClient) LPush(key string, values ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.Int(conn.Do(\"LPUSH\", key, values...))\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"LPOP\", key))\n}\n\nfunc (rc *RedisClient) HSet(hashID, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"HGET\", hashID, field))\n}\n```"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both querying and writing data with configurable settings like authentication, timeout, and TLS.\n\nStruct Description: The Client struct represents an InfluxDB client with configuration for server connection, authentication, and HTTP transport settings.\n\nFields:\n- url: url.URL - The base URL of the InfluxDB server\n- username: string - Username for basic authentication\n- password: string - Password for basic authentication\n- httpClient: *http.Client - Custom HTTP client with timeout and transport settings\n- userAgent: string - User agent string for HTTP requests\n- precision: string - Precision for timestamps in queries and writes\n\nMethods:\n- NewClient: [Name](Config) -> (*Client, error) - Creates a new InfluxDB client with the given configuration\n- Query: [Name](Query) -> (*Response, error) - Executes a query against the InfluxDB server and returns the response\n- Write: [Name](BatchPoints) -> (*Response, error) - Writes batch points to the InfluxDB server and returns the response",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: c.UnsafeSsl,\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) Query(q Query) (*Response, error) {\n\tu := c.url\n\n\tu.Path = \"query\"\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = \"write\"\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype Client struct {\n\turl         *url.URL\n\tusername    string\n\tpassword    string\n\thttpClient  *http.Client\n\tuserAgent   string\n\tprecision   string\n}\n\ntype Config struct {\n\tURL       string\n\tUsername  string\n\tPassword  string\n\tTimeout   time.Duration\n\tTLSConfig *tls.Config\n\tUserAgent string\n\tPrecision string\n}\n\ntype Response struct {\n\tBody       []byte\n\tStatusCode int\n}\n\nfunc NewClient(cfg Config) (*Client, error) {\n\turl, err := url.Parse(cfg.URL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: cfg.TLSConfig,\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   cfg.Timeout,\n\t}\n\n\treturn &Client{\n\t\turl:         url,\n\t\tusername:    cfg.Username,\n\t\tpassword:    cfg.Password,\n\t\thttpClient:  httpClient,\n\t\tuserAgent:   cfg.UserAgent,\n\t\tprecision:   cfg.Precision,\n\t}, nil\n}\n\nfunc (c *Client) Query(query string) (*Response, error) {\n\treq, err := http.NewRequest(\"GET\", c.url.String()+\"/query\", nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tq := req.URL.Query()\n\tq.Add(\"q\", query)\n\tq.Add(\"precision\", c.precision)\n\treq.URL.RawQuery = q.Encode()\n\n\treq.SetBasicAuth(c.username, c.password)\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Response{\n\t\tBody:       body,\n\t\tStatusCode: resp.StatusCode,\n\t}, nil\n}\n\nfunc (c *Client) Write(batchPoints []string) (*Response, error) {\n\tvar b strings.Builder\n\tfor _, p := range batchPoints {\n\t\tb.WriteString(p)\n\t\tb.WriteString(\"\\n\")\n\t}\n\n\treq, err := http.NewRequest(\"POST\", c.url.String()+\"/write\", &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/octet-stream\")\n\treq.SetBasicAuth(c.username, c.password)\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tq := req.URL.Query()\n\tq.Add(\"precision\", c.precision)\n\treq.URL.RawQuery = q.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Response{\n\t\tBody:       body,\n\t\tStatusCode: resp.StatusCode,\n\t}, nil\n}\n```"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function to fetch video materials from an advertising API using HTTP requests with custom headers and process the response.\n\nFunction Description: The function `getVideo` makes a GET request to a specified API endpoint to retrieve video materials for a given advertiser. It handles request creation, header addition, response processing, and error handling. The response is parsed to extract video information and store it in a global map while returning pagination information.\n\nInput:\n- advertiserId: string - The ID of the advertiser whose videos are being requested\n- page: int - The page number for paginated results\n\nOutput:\n- int - Total number of pages available (for pagination)\n- error - Any error encountered during the HTTP request or response processing",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar videoImageIdMaterialIdMap = map[string]int64{}\n\nfunc getVideo(advertiserId string, page int) (int, error) {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/video/get/\"\n\tmethod := \"GET\"\n\tpayload := strings.NewReader(fmt.Sprintf(`{\n    \t\t\t\"advertiser_id\": %s,\n   \t\t\t\t \"page\":%d,\n   \t\t\t\t \"page_size\":100}`, advertiserId, page))\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq.Header.Add(\"Access-Token\", \"c0bfed085c0dbc19bb2e41920ecd6d2a6d398b32\")\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tvar getVideoMaterialResp GetVideoMaterialResp\n\terr = json.Unmarshal(body, &getVideoMaterialResp)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tif getVideoMaterialResp.Code != 0 {\n\t\treturn 0, err\n\t}\n\tfor _, s := range getVideoMaterialResp.Data.List {\n\t\tvideoImageIdMaterialIdMap[s.Id] = s.MaterialId\n\t}\n\treturn getVideoMaterialResp.Data.PageInfo.TotalPage, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar videoMap = make(map[string][]Video)\n\ntype Video struct {\n\tID   string `json:\"id\"`\n\tURL  string `json:\"url\"`\n}\n\ntype ApiResponse struct {\n\tVideos     []Video `json:\"videos\"`\n\tTotalPages int     `json:\"total_pages\"`\n}\n\nfunc getVideo(advertiserId string, page int) (int, error) {\n\tparams := url.Values{}\n\tparams.Add(\"advertiser_id\", advertiserId)\n\tparams.Add(\"page\", fmt.Sprintf(\"%d\", page))\n\turl := \"https://api.advertising.com/videos?\" + params.Encode()\n\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq.Header.Add(\"User-Agent\", \"MyApp/1.0\")\n\treq.Header.Add(\"Authorization\", \"Bearer token123\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn 0, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tvar apiResp ApiResponse\n\terr = json.NewDecoder(resp.Body).Decode(&apiResp)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tvideoMap[advertiserId] = append(videoMap[advertiserId], apiResp.Videos...)\n\n\treturn apiResp.TotalPages, nil\n}\n```"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool to interact with a Redis server, supporting common operations like Set, Get, Delete, and Flush with configurable expiration times.\n\nStruct Description: RedisStore is a struct that manages a pool of Redis connections and provides methods to interact with Redis, including setting, getting, deleting keys, and flushing the database. It supports configurable expiration times for cached items.\n\nFields:\n- pool: *redis.Pool - A connection pool to manage Redis connections efficiently\n- defaultExpiration: time.Duration - The default expiration time for cached items\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method to handle Redis operations with expiration logic",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/gomodule/redigo/redis\"\n\t\"encoding/json\"\n)\n\ntype RedisStore struct {\n\tpool           *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tpool := &redis.Pool{\n\t\tDial: func() (redis.Conn, error) {\n\t\t\treturn redis.Dial(\"tcp\", host, redis.DialPassword(password))\n\t\t},\n\t}\n\treturn &RedisStore{\n\t\tpool:           pool,\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (s *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\tif expires == 0 {\n\t\texpires = s.defaultExpiration\n\t}\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\tstrValue := fmt.Sprintf(\"%v\", value)\n\t_, err := conn.Do(\"SET\", key, strValue, \"EX\", expires.Seconds())\n\treturn err\n}\n\nfunc (s *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\tvalue, err := conn.Do(\"GET\", key)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif value == nil {\n\t\treturn errors.New(\"key not found\")\n\t}\n\tstrValue, ok := value.([]byte)\n\tif !ok {\n\t\treturn errors.New(\"invalid type\")\n\t}\n\treturn json.Unmarshal(strValue, ptrValue)\n}\n\nfunc (s *RedisStore) Delete(key string) error {\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (s *RedisStore) Flush() error {\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (s *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\tif expires == 0 {\n\t\texpires = s.defaultExpiration\n\t}\n\tconn := s.pool.Get()\n\tdefer conn.Close()\n\targs := []interface{}{key, value}\n\tif expires > 0 {\n\t\targs = append(args, \"EX\", expires.Seconds())\n\t}\n\t_, err := f(key, args...)\n\treturn err\n}\n```"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Create a Go struct that implements a RocketMQ push consumer with configurable options, message handling, and tracing capabilities.\n\nStruct Description: The PushConsumer struct encapsulates a RocketMQ push consumer with additional features like rate limiting, tracing, and message processing. It manages consumer lifecycle and message subscription.\n\nFields:\n\nname: string - Name identifier for the consumer  \nPushConsumer: rocketmq.PushConsumer - Embedded RocketMQ push consumer instance  \nPushConsumerConfig: PushConsumerConfig - Configuration for the consumer  \nsubscribers: map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error) - Map of topic to message handler functions  \ninterceptors: []primitive.Interceptor - List of interceptors for message processing  \nbucket: *ratelimit.Bucket - Rate limiter bucket for controlling consumption rate  \nstarted: bool - Flag indicating if consumer is running  \n\nMethods:\n\nRegisterSingleMessage: (f func(context.Context, *primitive.MessageExt) error) -> *PushConsumer - Registers a single message handler function with tracing and panic recovery  \nStart: () -> error - Initializes and starts the RocketMQ consumer with configured options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"runtime/debug\"\n\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/juju/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.12.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype PushConsumer struct {\n\trocketmq.PushConsumer\n\tname string\n\tPushConsumerConfig\n\n\tsubscribers  map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors []primitive.Interceptor\n\tbucket       *ratelimit.Bucket\n\tstarted      bool\n}\n\nfunc (cc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\ttracer := xtrace.NewTracer(trace.SpanKindConsumer)\n\tattrs := []attribute.KeyValue{\n\t\tsemconv.MessagingSystemKey.String(\"rocketmq\"),\n\t\tsemconv.MessagingRocketmqClientGroupKey.String(cc.Group),\n\t\tsemconv.MessagingRocketmqClientIDKey.String(cc.InstanceName),\n\t\tsemconv.MessagingRocketmqConsumptionModelKey.String(cc.MessageModel),\n\t}\n\n\tfn := func(ctx context.Context, msgs ...*primitive.MessageExt) (result consumer.ConsumeResult, err error) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tresult, err = consumer.ConsumeRetryLater, errors.New(\"consumer message panic\")\n\t\t\t}\n\t\t}()\n\t\tfor _, msg := range msgs {\n\t\t\tvar (\n\t\t\t\tspan trace.Span\n\t\t\t)\n\n\t\t\tif cc.EnableTrace {\n\t\t\t\tcarrier := propagation.MapCarrier{}\n\t\t\t\tfor key, value := range msg.GetProperties() {\n\t\t\t\t\tcarrier[key] = value\n\t\t\t\t}\n\t\t\t\tctx, span = tracer.Start(ctx, msg.Topic, carrier, trace.WithAttributes(attrs...))\n\t\t\t\tspan.SetAttributes(\n\t\t\t\t\tsemconv.MessagingRocketmqNamespaceKey.String(msg.Topic),\n\t\t\t\t\tsemconv.MessagingRocketmqMessageTagKey.String(msg.GetTags()),\n\t\t\t\t)\n\t\t\t\tdefer span.End()\n\t\t\t}\n\n\t\t\tif cc.bucket != nil {\n\t\t\t\tif ok := cc.bucket.WaitMaxDuration(1, cc.WaitMaxDuration); !ok {\n\t\t\t\t\treturn consumer.ConsumeRetryLater, nil\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\tif cc.EnableTrace && span != nil {\n\t\t\t\t\tspan.RecordError(err)\n\t\t\t\t}\n\t\t\t\treturn consumer.ConsumeRetryLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\tcc.subscribers[cc.Topic] = fn\n\treturn cc\n}\n\nfunc (cc *PushConsumer) Start() error {\n\tif cc.started {\n\t\treturn nil\n\t}\n\n\tvar opts = []consumer.Option{\n\t\tconsumer.WithGroupName(cc.Group),\n\t\tconsumer.WithInstance(cc.InstanceName),\n\t\tconsumer.WithNameServer(cc.Addr),\n\t\tconsumer.WithMaxReconsumeTimes(cc.Reconsume),\n\t\tconsumer.WithInterceptor(cc.interceptors...),\n\t\tconsumer.WithConsumeMessageBatchMaxSize(cc.ConsumeMessageBatchMaxSize),\n\t\tconsumer.WithPullBatchSize(cc.PullBatchSize),\n\t\tconsumer.WithConsumeGoroutineNums(cc.ConsumeGoroutineNums),\n\t\tconsumer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: cc.AccessKey,\n\t\t\tSecretKey: cc.SecretKey,\n\t\t}),\n\t}\n\tif cc.PushConsumerConfig.MessageModel == \"BroadCasting\" {\n\t\topts = append(opts, consumer.WithConsumerModel(consumer.BroadCasting))\n\t}\n\n\tclient, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcc.PushConsumer = client\n\n\tselector := consumer.MessageSelector{\n\t\tType:       consumer.TAG,\n\t\tExpression: \"\",\n\t}\n\tif cc.PushConsumerConfig.SubExpression != \"*\" {\n\t\tselector.Expression = cc.PushConsumerConfig.SubExpression\n\t}\n\n\tfor topic, fn := range cc.subscribers {\n\t\tif err := cc.PushConsumer.Subscribe(topic, selector, fn); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cc.Enable {\n\t\tif err := client.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tcc.started = true\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 128,
    "wrong_result": "type PushConsumer struct {\n\tname             string\n\trocketmq.PushConsumer\n\tPushConsumerConfig PushConsumerConfig\n\tsubscribers      map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors     []primitive.Interceptor\n\tbucket           *rate.Bucket\n\tstarted          bool\n}\n\nfunc (pc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\thandler := func(ctx context.Context, msgs ...*primitive.MessageExt) (consumer.ConsumeResult, error) {\n\t\tfor _, msg := range msgs {\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\treturn consumer.ConsumeError, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\tpc.subscribers[\"default\"] = handler\n\treturn pc\n}\n\nfunc (pc *PushConsumer) Start() error {\n\tif pc.started {\n\t\treturn nil\n\t}\n\tpc.PushConsumer = rocketmq.NewPushConsumer(\n\t\trocketmq.WithGroupName(pc.PushConsumerConfig.Group),\n\t\trocketmq.WithNameServer(pc.PushConsumerConfig.NameServer),\n\t\trocketmq.WithConsumerModel(pc.PushConsumerConfig.Model),\n\t)\n\tfor _, interceptor := range pc.interceptors {\n\t\tpc.PushConsumer.RegisterInterceptor(interceptor)\n\t}\n\tfor topic, handler := range pc.subscribers {\n\t\tpc.PushConsumer.Subscribe(topic, handler)\n\t}\n\terr := pc.PushConsumer.Start()\n\tif err != nil {\n\t\treturn err\n\t}\n\tpc.started = true\n\treturn nil\n}"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages to brokers using different modes (Sync, Async, or OneWay) with configurable options.\n\nStruct Description: The Producer struct encapsulates a RocketMQ producer client with methods for starting, closing, and sending messages. It supports configuration options and interceptors.\n\nFields:\n\n- started: bool - Indicates whether the producer has been started\n- Producer: rocketmq.Producer - The underlying RocketMQ producer instance\n- name: string - Name identifier for the producer\n- ProducerConfig: ProducerConfig - Configuration settings for the producer\n- interceptors: []primitive.Interceptor - List of interceptors for message processing\n\nMethods:\n\n- Start() -> error - Initializes and starts the RocketMQ producer with configured options\n- Close() -> error - Shuts down the producer gracefully\n- SendWithContext(ctx context.Context, msg []byte) -> error - Sends a byte array message with context\n- SendWithMsg(ctx context.Context, msg *primitive.Message) -> error - Sends a primitive.Message with context\n- SendWithResult(ctx context.Context, msg []byte, tag string) -> (*primitive.SendResult, error) - Sends a message with tag and returns send result\n- SendMsg(ctx context.Context, msg *primitive.Message) -> (*primitive.SendResult, error) - Sends a message and returns send result",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/douyu/jupiter/pkg/xlog\"\n)\n\ntype Producer struct {\n\tstarted bool\n\n\trocketmq.Producer\n\tname string\n\tProducerConfig\n\tinterceptors []primitive.Interceptor\n}\n\nfunc (pc *Producer) Start() error {\n\tif pc.started {\n\t\treturn nil\n\t}\n\n\tclient, err := rocketmq.NewProducer(\n\t\tproducer.WithGroupName(pc.Group),\n\t\tproducer.WithNameServer(pc.Addr),\n\t\tproducer.WithRetry(pc.Retry),\n\t\tproducer.WithInterceptor(pc.interceptors...),\n\t\tproducer.WithInstanceName(pc.InstanceName),\n\t\tproducer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: pc.AccessKey,\n\t\t\tSecretKey: pc.SecretKey,\n\t\t}),\n\t)\n\tif err != nil {\n\t\txlog.Jupiter().Panic(\"create producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tif err := client.Start(); err != nil {\n\t\txlog.Jupiter().Panic(\"start producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tpc.started = true\n\tpc.Producer = client\n\treturn nil\n}\n\nfunc (pc *Producer) Close() error {\n\terr := pc.Shutdown()\n\tif err != nil {\n\t\txlog.Jupiter().Warn(\"consumer close fail\", xlog.Any(\"error\", err.Error()))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\t_, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tmsg.Topic = pc.Topic\n\t_, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\tif tag != \"\" {\n\t\tm.WithTag(tag)\n\t}\n\n\tres, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", string(msg)))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}\n\nfunc (pc *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tres, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 127,
    "wrong_result": "```go\ntype Producer struct {\n\tstarted        bool\n\tProducer       *rocketmq.Producer\n\tname           string\n\tProducerConfig ProducerConfig\n\tinterceptors   []primitive.Interceptor\n}\n\nfunc (p *Producer) Start() error {\n\tif p.started {\n\t\treturn nil\n\t}\n\tproducer, err := rocketmq.NewProducer(p.ProducerConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproducer.SetName(p.name)\n\tfor _, interceptor := range p.interceptors {\n\t\tproducer.AddInterceptor(interceptor)\n\t}\n\tif err := producer.Start(); err != nil {\n\t\treturn err\n\t}\n\tp.Producer = producer\n\tp.started = true\n\treturn nil\n}\n\nfunc (p *Producer) Close() error {\n\tif !p.started {\n\t\treturn nil\n\t}\n\tif err := p.Producer.Shutdown(); err != nil {\n\t\treturn err\n\t}\n\tp.started = false\n\treturn nil\n}\n\nfunc (p *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tif !p.started {\n\t\treturn errors.New(\"producer not started\")\n\t}\n\tmessage := primitive.NewMessage(\"your-topic\", msg)\n\tfor _, interceptor := range p.interceptors {\n\t\tmessage = interceptor.Intercept(message)\n\t}\n\t_, err := p.Producer.Send(ctx, message)\n\treturn err\n}\n\nfunc (p *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tif !p.started {\n\t\treturn errors.New(\"producer not started\")\n\t}\n\tfor _, interceptor := range p.interceptors {\n\t\tmsg = interceptor.Intercept(msg)\n\t}\n\t_, err := p.Producer.Send(ctx, msg)\n\treturn err\n}\n\nfunc (p *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tif !p.started {\n\t\treturn nil, errors.New(\"producer not started\")\n\t}\n\tmessage := primitive.NewMessage(\"your-topic\", msg)\n\tmessage.SetTag(tag)\n\tfor _, interceptor := range p.interceptors {\n\t\tmessage = interceptor.Intercept(message)\n\t}\n\tresult, err := p.Producer.Send(ctx, message)\n\treturn result, err\n}\n\nfunc (p *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tif !p.started {\n\t\treturn nil, errors.New(\"producer not started\")\n\t}\n\tfor _, interceptor := range p.interceptors {\n\t\tmsg = interceptor.Intercept(msg)\n\t}\n\tresult, err := p.Producer.Send(ctx, msg)\n\treturn result, err\n}\n```"
  },
  {
    "Task_id": 304,
    "Instruction": "Task Description: Implement a stock quote service that retrieves stock information from an external API and processes the response.\n\nStruct Description: The Stock struct represents a service for fetching stock quotes. It contains configuration fields for API access and implements methods to retrieve quote information.\n\nFields:\nApi: [string] - The base URL of the stock API service\nKey: [string] - The API key used for authentication with the stock service\n\nMethods:\nQuote: [Name](ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) -> [error] - Retrieves stock quote information for a given symbol. Validates the input symbol, makes an HTTP GET request to the stock API, processes the response, and populates the response object with the quote data. Returns error if any step fails.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"github.com/micro/micro/v5/service/errors\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/stock/proto\"\n)\n\ntype Stock struct {\n\tApi   string\n\tKey   string\n}\n\nfunc (s *Stock) Quote(ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) error {\n\tif len(req.Symbol) <= 0 || len(req.Symbol) > 5 {\n\t\treturn errors.BadRequest(\"stock.quote\", \"invalid symbol\")\n\t}\n\n\turi := fmt.Sprintf(\"%slast/stock/%s?apikey=%s\", s.Api, req.Symbol, s.Key)\n\n\tresp, err := http.Get(uri)\n\tif err != nil {\n\t\tlogger.Errorf(\"Failed to get quote: %v\\n\", err)\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\tdefer resp.Body.Close()\n\n\tb, _ := ioutil.ReadAll(resp.Body)\n\n\tif resp.StatusCode != 200 {\n\t\tlogger.Errorf(\"Failed to get quote (non 200): %d %v\\n\", resp.StatusCode, string(b))\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\n\tvar respBody struct {\n\t\tSymbol    string\n\t\tAsk       float64\n\t\tBid       float64\n\t\tAsize     int32\n\t\tBsize     int32\n\t\tTimestamp int64\n\t}\n\n\tif err := json.Unmarshal(b, &respBody); err != nil {\n\t\tlogger.Errorf(\"Failed to unmarshal quote: %v\\n\", err)\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\n\trsp.Symbol = respBody.Symbol\n\trsp.AskPrice = respBody.Ask\n\trsp.BidPrice = respBody.Bid\n\trsp.AskSize = respBody.Asize\n\trsp.BidSize = respBody.Bsize\n\trsp.Timestamp = respBody.Timestamp\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"errors\"\n\t\"yourproject/pb\"\n)\n\ntype Stock struct {\n\tApi string\n\tKey string\n}\n\nfunc (s *Stock) Quote(ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) error {\n\tif req.Symbol == \"\" {\n\t\treturn errors.New(\"symbol is required\")\n\t}\n\n\turlStr := fmt.Sprintf(\"%s/%s?key=%s\", s.Api, url.PathEscape(req.Symbol), s.Key)\n\treqHTTP, err := http.NewRequestWithContext(ctx, \"GET\", urlStr, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(reqHTTP)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar data struct {\n\t\tPrice float64 `json:\"price\"`\n\t}\n\tif err := json.Unmarshal(body, &data); err != nil {\n\t\treturn err\n\t}\n\n\trsp.Price = data.Price\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The function handles error cases including failed requests and non-200 status codes. When caching is enabled, subsequent requests for the same URL will return the cached content.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput:\n- `[]byte` - The content of the fetched file as a byte slice\n- `error` - An error object if any step fails (network error, non-200 status, etc.)\n\nNote: The function relies on package-level variables `fileCache` (a map for caching), `fileCacheMutex` (for thread safety), `fileCacheEnable` (boolean to toggle caching), and `verboseReader` (boolean for logging). These should be properly initialized before use.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func fetchFile(fileurl string) ([]byte, error) {\n\tif fileCacheEnable {\n\t\tfileCacheMutex.Lock()\n\t\tif content, found := fileCache[fileurl]; found {\n\t\t\tfileCacheMutex.Unlock()\n\t\t\treturn content, nil\n\t\t}\n\t\tfileCacheMutex.Unlock()\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"request failed with status: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif fileCacheEnable {\n\t\tfileCacheMutex.Lock()\n\t\tfileCache[fileurl] = body\n\t\tfileCacheMutex.Unlock()\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a function to download a file from a given URL, apply an optional filter to the content, and save it to specified directories.\n\nFunction Description: The function `dl` downloads a file from a provided URL, reads its content, applies an optional filter (if provided), and writes the content to one or more specified directories. It handles errors during the HTTP request, reading the response, and file writing, and provides status feedback via console output.\n\nInput:  \n- `f` (type `dlFile`): A struct containing the following fields:  \n  - `name` (string): The name of the file to be saved.  \n  - `url` (string): The URL from which the file will be downloaded.  \n  - `filt` (func([]byte) []byte): An optional function to filter/modify the downloaded content. Can be `nil` if no filtering is needed.  \n  - `dirs` ([]string): A slice of directory paths where the file will be saved.  \n\nOutput:  \n- None (void): The function does not return any value but prints status messages to the console (e.g., \"Sync [filename]: ok\" on success or error messages on failure).  \n\nNote: The function handles errors for HTTP requests, reading response bodies, and file writing, and ensures the response body is closed properly to prevent resource leaks.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"path/filepath\"\n)\n\nfunc dl(f dlFile) {\n\tfmt.Printf(\"Sync %s: \", f.name)\n\n\tresp, err := http.Get(f.url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tif f.filt != nil {\n\t\tcontent = f.filt(content)\n\t}\n\n\tfor _, dir := range f.dirs {\n\t\tioutil.WriteFile(filepath.Join(dir, f.name), content, 0644)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tfmt.Println(\"ok\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\ntype dlFile struct {\n\tname string\n\turl  string\n\tfilt func([]byte) []byte\n\tdirs []string\n}\n\nfunc dl(f dlFile) {\n\tresp, err := http.Get(f.url)\n\tif err != nil {\n\t\tfmt.Printf(\"Sync %s: error: %v\\n\", f.name, err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tfmt.Printf(\"Sync %s: error: HTTP status %d\\n\", f.name, resp.StatusCode)\n\t\treturn\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Sync %s: error reading body: %v\\n\", f.name, err)\n\t\treturn\n\t}\n\n\tvar content []byte\n\tif f.filt != nil {\n\t\tcontent = f.filt(body)\n\t} else {\n\t\tcontent = body\n\t}\n\n\tsuccess := true\n\tfor _, dir := range f.dirs {\n\t\tpath := filepath.Join(dir, f.name)\n\t\terr := os.WriteFile(path, content, 0644)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Sync %s: error writing to %s: %v\\n\", f.name, dir, err)\n\t\t\tsuccess = false\n\t\t}\n\t}\n\n\tif success {\n\t\tfmt.Printf(\"Sync %s: ok\\n\", f.name)\n\t}\n}"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: Implement a function to fetch and process Google Font CSS data for embedding in SVG documents.\n\nFunction Description: The function `googlefont` retrieves CSS data from Google Fonts API for a specified font family, embeds it in SVG-compatible format, and returns available font variants. It handles HTTP requests, response processing, and error cases gracefully.\n\nInput: \n- `f` [string] - The font family name to query (e.g., \"Roboto\" or \"Open Sans\")\n\nOutput:\n- `[]string` - A slice of strings representing available font variants (split by \"|\"), or an empty slice if the request fails or returns non-200 status",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar (\n\tcanvas = svg.New(os.Stdout)\n)\n\nconst (\n\tgwfURI  = \"http://fonts.googleapis.com/css?family=\"\n\tfontfmt = \"<style type=\\\"text/css\\\">\\n<![CDATA[\\n%s]]>\\n</style>\\n\"\n)\n\nfunc googlefont(f string) []string {\n\tempty := []string{}\n\tr, err := http.Get(gwfURI + url.QueryEscape(f))\n\tif err != nil {\n\t\treturn empty\n\t}\n\tdefer r.Body.Close()\n\tb, rerr := ioutil.ReadAll(r.Body)\n\tif rerr != nil || r.StatusCode != http.StatusOK {\n\t\treturn empty\n\t}\n\tcanvas.Def()\n\tfmt.Fprintf(canvas.Writer, fontfmt, b)\n\tcanvas.DefEnd()\n\treturn strings.Split(fontlist, \"|\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"regexp\"\n\t\"strings\"\n)\n\nfunc googlefont(f string) []string {\n\turl := \"https://fonts.googleapis.com/css?family=\" + strings.ReplaceAll(f, \" \", \"+\")\n\tresp, err := http.Get(url)\n\tif err != nil || resp.StatusCode != 200 {\n\t\treturn []string{}\n\t}\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\tcss := string(body)\n\n\tre := regexp.MustCompile(`@font-face\\s*{([^}]*)}`)\n\tmatches := re.FindAllStringSubmatch(css, -1)\n\n\tvariants := make(map[string]bool)\n\n\tfor _, match := range matches {\n\t\tprops := match[1]\n\t\tweightRe := regexp.MustCompile(`font-weight:\\s*([^;]+)`)\n\t\tweight := weightRe.FindStringSubmatch(props)\n\t\tstyleRe := regexp.MustCompile(`font-style:\\s*([^;]+)`)\n\t\tstyle := styleRe.FindStringSubmatch(props)\n\n\t\tvar w, s string\n\t\tif len(weight) > 1 {\n\t\t\tw = strings.TrimSpace(weight[1])\n\t\t} else {\n\t\t\tw = \"normal\"\n\t\t}\n\t\tif len(style) > 1 {\n\t\t\ts = strings.TrimSpace(style[1])\n\t\t} else {\n\t\t\ts = \"normal\"\n\t\t}\n\n\t\tvariant := w + \"|\" + s\n\t\tvariants[variant] = true\n\t}\n\n\tresult := make([]string, 0, len(variants))\n\tfor v := range variants {\n\t\tresult = append(result, v)\n\t}\n\treturn result\n}\n```"
  },
  {
    "Task_id": 308,
    "Instruction": "Task Description: Create a function that fetches memory statistics from a specified URL using HTTP GET request and returns the response body.\n\nFunction Description: The function `defaultMemstatsClient` makes an HTTP GET request to the provided URL to fetch memory statistics. It handles the response by reading the body and ensures proper resource cleanup by deferring the closure of the response body. Errors during the request or response handling are returned to the caller.\n\nInput: \n- `url` (string): The URL from which to fetch the memory statistics.\n\nOutput: \n- `[]byte`: The response body containing the memory statistics.\n- `error`: An error object if the HTTP request or response reading fails; otherwise, `nil`.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tutil.Debug(\"Fetching memstats from %s\", url)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 309,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL with optional custom headers and client configuration, while implementing safety measures like response size limiting and proper resource cleanup.\n\nFunction Description: The function `ReadURL` makes an HTTP GET request to the specified URL using a provided HTTP client and optional headers. It ensures proper resource cleanup, checks for successful response status, limits the maximum readable response size, and returns the response body or an error if any step fails.\n\nInput:\n- `url` [string] - The URL to send the GET request to\n- `client` [*http.Client] - The HTTP client to use for the request (can be nil to use http.DefaultClient)\n- `header` [*http.Header] - Optional headers to include in the request (can be nil)\n\nOutput:\n- `body` [[]byte] - The response body if the request is successful\n- `err` [error] - An error object if any step fails, including:\n  - Request creation failure\n  - Network errors\n  - Non-200 status codes (wrapped in HTTPError)\n  - Read errors\n  - Response size exceeding limit",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nconst (\n\tmaxReadLength = 10 * 1 << 20\n)\n\nfunc ReadURL(url string, client *http.Client, header *http.Header) (body []byte, err error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif header != nil {\n\t\treq.Header = *header\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, &HTTPError{\n\t\t\tStatusCode: resp.StatusCode,\n\t\t\tURL:        url,\n\t\t}\n\t}\n\n\tlimitedReader := &io.LimitedReader{R: resp.Body, N: maxReadLength}\n\tcontents, err := ioutil.ReadAll(limitedReader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif limitedReader.N <= 0 {\n\t\treturn nil, errors.New(\"the read limit is reached\")\n\t}\n\n\treturn contents, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\ntype HTTPError struct {\n\tStatus string\n\tCode   int\n}\n\nfunc (e *HTTPError) Error() string {\n\treturn fmt.Sprintf(\"HTTP error: %d %s\", e.Code, e.Status)\n}\n\nfunc ReadURL(url string, client *http.Client, header *http.Header) ([]byte, error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif header != nil {\n\t\tfor k, v := range *header {\n\t\t\treq.Header[k] = v\n\t\t}\n\t}\n\n\tc := client\n\tif c == nil {\n\t\tc = http.DefaultClient\n\t}\n\n\tresp, err := c.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, &HTTPError{Status: resp.Status, Code: resp.StatusCode}\n\t}\n\n\tconst maxBodySize = 10 << 20 // 10MB\n\treader := io.LimitReader(resp.Body, maxBodySize)\n\tbody, err := io.ReadAll(reader)\n\tif err != nil {\n\t\tif errors.Is(err, io.ErrUnexpectedEOF) {\n\t\t\treturn nil, fmt.Errorf(\"response body exceeds size limit\")\n\t\t}\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: The task involves creating a struct and associated method to handle chunked file uploads to a remote server using HTTP PUT requests with proper content range headers.\n\nStruct Description: The UploadSession struct represents an ongoing file upload session, tracking upload state, metadata, and providing methods for chunked upload operations.\n\nFields:\n\nID: string - Unique identifier for the upload session\nOldID: string - Previous session ID (if applicable)\nParentID: string - ID of parent directory\nNodeID: uint64 - Filesystem node identifier\nName: string - Name of the file being uploaded\nExpirationDateTime: time.Time - When the upload session expires\nSize: uint64 - Total size of the file in bytes\nData: []byte - File content data being uploaded\nQuickXORHash: string - File content hash\nModTime: time.Time - File modification time\nretries: int - Number of upload retry attempts\nUploadURL: string - Server endpoint for chunk uploads\nETag: string - Entity tag from server response\nstate: int - Current upload state\nerror: error - Last encountered error\nsync.Mutex: - Mutex for thread-safe operations\n\nMethods:\n\nuploadChunk: (auth *graph.Auth, offset uint64) -> ([]byte, int, error) - Uploads a file chunk starting at specified offset. Returns response body, HTTP status code, and error if any. Handles authentication refresh and proper Content-Range headers.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/jstaf/onedriver/fs/graph\"\n\t\"github.com/rs/zerolog/log\"\n)\n\ntype UploadSession struct {\n\tID                 string    `json:\"id\"`\n\tOldID              string    `json:\"oldID\"`\n\tParentID           string    `json:\"parentID\"`\n\tNodeID             uint64    `json:\"nodeID\"`\n\tName               string    `json:\"name\"`\n\tExpirationDateTime time.Time `json:\"expirationDateTime\"`\n\tSize               uint64    `json:\"size,omitempty\"`\n\tData               []byte    `json:\"data,omitempty\"`\n\tQuickXORHash       string    `json:\"quickxorhash,omitempty\"`\n\tModTime            time.Time `json:\"modTime,omitempty\"`\n\tretries            int\n\n\tsync.Mutex\n\tUploadURL string `json:\"uploadUrl\"`\n\tETag      string `json:\"eTag,omitempty\"`\n\tstate     int\n\terror\n}\n\nfunc (u *UploadSession) uploadChunk(auth *graph.Auth, offset uint64) ([]byte, int, error) {\n\tu.Lock()\n\turl := u.UploadURL\n\tif url == \"\" {\n\t\tu.Unlock()\n\t\treturn nil, -1, errors.New(\"UploadSession UploadURL cannot be empty\")\n\t}\n\tu.Unlock()\n\n\tend := offset + uploadChunkSize\n\tvar reqChunkSize uint64\n\tif end > u.Size {\n\t\tend = u.Size\n\t\treqChunkSize = end - offset + 1\n\t}\n\tif offset > u.Size {\n\t\treturn nil, -1, errors.New(\"offset cannot be larger than DriveItem size\")\n\t}\n\n\tauth.Refresh()\n\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\n\t\t\"PUT\",\n\t\turl,\n\t\tbytes.NewReader((u.Data)[offset:end]),\n\t)\n\trequest.Header.Add(\"Content-Length\", strconv.Itoa(int(reqChunkSize)))\n\tfrags := fmt.Sprintf(\"bytes %d-%d/%d\", offset, end-1, u.Size)\n\tlog.Info().Str(\"id\", u.ID).Msg(\"Uploading \" + frags)\n\trequest.Header.Add(\"Content-Range\", frags)\n\n\tresp, err := client.Do(request)\n\tif err != nil {\n\t\treturn nil, -1, err\n\t}\n\tdefer resp.Body.Close()\n\tresponse, _ := ioutil.ReadAll(resp.Body)\n\treturn response, resp.StatusCode, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype UploadSession struct {\n\tID                    string\n\tOldID                 string\n\tParentID              string\n\tNodeID                uint64\n\tName                  string\n\tExpirationDateTime    time.Time\n\tSize                  uint64\n\tData                  []byte\n\tQuickXORHash          string\n\tModTime               time.Time\n\tretries               int\n\tUploadURL             string\n\tETag                  string\n\tstate                 int\n\terror                 error\n\tsync.Mutex\n}\n\nfunc (u *UploadSession) uploadChunk(auth *graph.Auth, offset uint64) ([]byte, int, error) {\n\tu.Lock()\n\tdefer u.Unlock()\n\n\tif err := auth.Refresh(); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\treq, err := http.NewRequest(\"PUT\", u.UploadURL, bytes.NewBuffer(u.Data))\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tend := offset + uint64(len(u.Data)) - 1\n\treq.Header.Set(\"Content-Range\", fmt.Sprintf(\"bytes %d-%d/%d\", offset, end, u.Size))\n\treq.Header.Set(\"Authorization\", auth.Token)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tu.ETag = resp.Header.Get(\"ETag\")\n\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\tu.state = 1\n\t} else {\n\t\tu.state = 2\n\t\tu.error = fmt.Errorf(\"upload failed with status %d\", resp.StatusCode)\n\t}\n\n\treturn body, resp.StatusCode, nil\n}\n```"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET. It supports caching of downloaded files to avoid redundant network requests. The function handles HTTP errors, manages resource cleanup, and provides verbose logging options.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput:\n- `[]byte` - The contents of the file as a byte slice\n- `error` - Any error encountered during the fetch operation (nil if successful)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache = make(map[string][]byte)\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tif data, ok := fileCache[fileurl]; ok {\n\t\tlog.Println(\"Cache hit for\", fileurl)\n\t\treturn data, nil\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %d %s\", resp.StatusCode, resp.Status)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfileCache[fileurl] = body\n\tlog.Println(\"Cached\", fileurl)\n\treturn body, nil\n}\n```"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a file fetcher with caching capability that retrieves files from a given URL using HTTP GET requests and caches the results to avoid redundant network calls.\n\nFunction Description: The FetchFile function checks a cache for the requested file URL. If not found in cache, it makes an HTTP GET request to fetch the file, stores the result in cache, and returns the file content. It handles errors during the fetch operation and returns appropriate status codes.\n\nInput: \n- fileurl [string]: The URL of the file to fetch\n\nOutput:\n- []byte: The content of the fetched file\n- error: Any error encountered during the fetch operation (network error, non-200 status code, or read error)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tinitializeFileCache()\n\tbytes, ok := fileCache[fileurl]\n\tif ok {\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t}\n\t\treturn bytes, nil\n\t}\n\tif verboseReader {\n\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tdefer response.Body.Close()\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nvar cache = make(map[string][]byte)\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tif content, found := cache[fileurl]; found {\n\t\treturn content, nil\n\t}\n\n\treq, err := http.NewRequest(\"GET\", fileurl, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcache[fileurl] = body\n\treturn body, nil\n}"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response body as a byte slice or an error if the request fails.\n\nFunction Description: The function makes an HTTP GET request to the provided URL, reads the response body, and returns it as a byte slice. It handles errors during the request or reading process and ensures the response body is properly closed to prevent resource leaks.\n\nInput: \n- url (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- ([]byte, error): A byte slice containing the response body if the request is successful, or an error if the request fails or the response body cannot be read.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://api.github.com/repos/zyedidia/micro/releases\")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getURLBody(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Write a Go function that retrieves the private IPv4 address of an Amazon EC2 instance by querying the instance metadata service.\n\nFunction Description: The function should make an HTTP GET request to the EC2 instance metadata service at the well-known endpoint (169.254.169.254) to fetch the local IPv4 address. It should handle potential errors during the request, response reading, and IP parsing, and return the IPv4 address in net.IP format.\n\nInput: None (the function takes no parameters)\n\nOutput: \n- On success: Returns the private IPv4 address as a net.IP object (IPv4 format)\n- On failure: Returns nil and an error describing what went wrong (failed request, invalid response, or invalid IP address)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc amazonEC2PrivateIPv4() (net.IP, error) {\n\tres, err := http.Get(\"http://169.254.169.254/latest/meta-data/local-ipv4\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tip := net.ParseIP(string(body))\n\tif ip == nil {\n\t\treturn nil, errors.New(\"invalid ip address\")\n\t}\n\treturn ip.To4(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc GetPrivateIPv4() (net.IP, error) {\n\treq, err := http.NewRequest(\"GET\", \"http://169.254.169.254/latest/meta-data/local-ipv4\", nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tip := net.ParseIP(string(body))\n\tif ip == nil {\n\t\treturn nil, errors.New(\"invalid IP address in response\")\n\t}\n\tif ip.To4() == nil {\n\t\treturn nil, errors.New(\"IP is not IPv4\")\n\t}\n\treturn ip, nil\n}"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET. It supports caching of downloaded files to avoid redundant network requests. The function handles HTTP errors, manages resource cleanup, and provides verbose logging options.\n\nInput: \n- `fileurl` [string]: The URL of the file to be fetched\n\nOutput: \n- `[]byte`: The contents of the file as a byte slice if successful\n- `error`: An error object if any step fails (network error, HTTP error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar cache sync.Map\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tif cached, ok := cache.Load(fileurl); ok {\n\t\tlog.Println(\"Cache hit:\", fileurl)\n\t\treturn cached.([]byte), nil\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %d %s\", resp.StatusCode, resp.Status)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcache.Store(fileurl, body)\n\tlog.Println(\"Cached:\", fileurl)\n\treturn body, nil\n}"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Create a function that retrieves the version information from an etcd server using a simple HTTP GET request.\n\nFunction Description: The function `GetEtcdVersion` makes an HTTP GET request to the specified etcd server's `/version` endpoint, reads the response, and returns the version information as a string. It handles errors for connection issues, unsuccessful HTTP responses, and response body reading failures.\n\nInput: \n- `host` (string): The base URL of the etcd server (e.g., \"http://localhost:2379\")\n\nOutput: \n- (string): The version information returned by the etcd server\n- (error): An error object if any step fails (connection, non-200 response, or body reading error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\nfunc GetEtcdVersion(host string) (string, error) {\n\tresponse, err := http.Get(host + \"/version\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unsuccessful response from etcd server %q: %v\", host, err)\n\t}\n\tversionBytes, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(versionBytes), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc GetEtcdVersion(host string) (string, error) {\n\tresp, err := http.Get(host + \"/version\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Create a function that performs a simple HTTP GET request to a remote URL and returns the response body as a string.\n\nFunction Description: The function `remote_get` makes an HTTP GET request to the specified remote URL. It handles the response by checking the status code, reading the response body, and returning it as a string. If any errors occur during the request or response processing, they are returned as part of the error output.\n\nInput: \n- `remote` (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- (string, error): A tuple containing the response body as a string and an error. If the request is successful, the error will be nil. If an error occurs, the string will be empty, and the error will contain the relevant error message.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"remote_get: wrong status code %d\", resp.StatusCode))\n\t}\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a function to retrieve node information by making an HTTP GET request to a local server. The function should handle server setup, request execution, and response processing.\n\nFunction Description: The function `getNode` initiates an HTTP server locally, sends a GET request to retrieve node information based on the provided ID, and returns the response body as a string. It handles server lifecycle management and ensures proper resource cleanup.\n\nInput: \n- `id` [string] - The identifier of the node to retrieve\n\nOutput: \n- [string] - The response body containing the node information",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc getNode(id string) string {\n\tlchan := make(chan net.Listener)\n\thttpServe = func(l net.Listener, h http.Handler) error {\n\t\tlchan <- l\n\t\thttp.Serve(l, h)\n\t\treturn nil\n\t}\n\n\tgo func() { run(&http.ServeMux{}, 0, false, \"nbs:\"+dir) }()\n\tl := <-lchan\n\tdefer l.Close()\n\n\tr, err := http.Get(fmt.Sprintf(\"http://%s/getNode?id=%s\", l.Addr().String(), id))\n\tassert.NoError(err)\n\tdefer r.Body.Close()\n\tbody, err := ioutil.ReadAll(r.Body)\n\treturn string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc getNode(id string) (string, error) {\n\tserver := &http.Server{\n\t\tAddr: \":8080\",\n\t}\n\n\thttp.HandleFunc(\"/nodes/\"+id, func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\tio.WriteString(w, \"Node ID: \"+id)\n\t\t} else {\n\t\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t\t}\n\t})\n\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(\"Server failed: %v\", err)\n\t\t}\n\t}()\n\n\ttime.Sleep(100 * time.Millisecond)\n\n\tresp, err := http.Get(\"http://localhost:8080/nodes/\" + id)\n\tif err != nil {\n\t\tserver.Shutdown(context.Background())\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tserver.Shutdown(context.Background())\n\t\treturn \"\", err\n\t}\n\n\tserver.Shutdown(context.Background())\n\treturn string(body), nil\n}\n```"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to retrieve configuration data from a local admin API endpoint and returns the response body as a string.\n\nFunction Description: The function `getEffectiveConfig` makes an HTTP GET request to a specified local port's admin API endpoint (/api/v1/config_dump). It handles the response by checking the status code, reading the response body, and returning it as a string. It includes proper error handling for failed requests or non-200 status codes.\n\nInput: \n- port [uint32] - The local port number where the admin API is running\n\nOutput:\n- [string] - The response body as a string if the request is successful\n- [error] - An error object describing any issues that occurred during the request (connection error, non-200 status code, or body read error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\nfunc getEffectiveConfig(port uint32) (string, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"call admin api failed response status: %d, %s\", resp.StatusCode, string(b)))\n\t}\n\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc getEffectiveConfig(port uint32) (string, error) {\n\turl := \"http://localhost:\" + strconv.Itoa(int(port)) + \"/api/v1/config_dump\"\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"non-200 status code: %d, response body: %s\", resp.StatusCode, body)\n\t}\n\treturn string(body), nil\n}\n```"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a function to retrieve a proxy address from a specified HTTP endpoint and return it in a formatted string.\n\nFunction Description: The function `getOneProxy` makes an HTTP GET request to a predefined proxy server endpoint, reads the response body to obtain the proxy address, formats it with an \"http://\" prefix, and returns both the formatted and raw proxy strings. It includes basic error handling for the response reading process.\n\nInput: None (The function takes no input parameters)\n\nOutput: \n1. A string representing the formatted proxy address with \"http://\" prefix\n2. A string representing the raw proxy address from the response body",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, _ := http.Get(\"http://45.78.45.70:5015/get/\")\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t}\n\tproxy := \"http://\" + string(body)\n\tfmt.Println(\"\u4f7f\u7528\u9ed8\u8ba4\u4ee3\u7406\uff1a\" + proxy)\n\treturn proxy, string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, err := http.Get(\"http://api.proxyserver.com/endpoint\")\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\"\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\n\traw := string(body)\n\tformatted := \"http://\" + raw\n\treturn formatted, raw\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: The task involves creating a Go struct that encapsulates functionality for sending push notifications through a push service, handling HTTP communication, and processing responses. The struct should manage HTTP client configuration, request construction, and response handling for push notification delivery.\n\nStruct Description: PushServiceBase is a struct that provides base functionality for push notification services. It manages HTTP client configuration, constructs requests to a push service endpoint, handles authentication, processes responses, and manages delivery results. The struct is designed to be extended by specific push service implementations.\n\nFields:\n\nclient: [*http.Client] - Custom HTTP client configured with TLS settings and timeouts\ninitialism: [string] - Short identifier for the push service\nrawPayloadKey: [string] - Key for raw payload in notification data\nrawNotificationKey: [string] - Key for raw notification in notification data\nserviceURL: [string] - Base URL for the push service endpoint\npushServiceName: [string] - Name of the push service\n\nMethods:\n\nMakePushServiceBase: [func(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase] - Constructor that initializes the PushServiceBase with configuration and creates a custom HTTP client\n\nmulticast: [func(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification)] - Sends push notifications to multiple devices, handles HTTP communication, and processes responses. Takes push service provider, delivery points, result channel, and notification as input, and writes results to the channel\n\nToCMPayload: [func(notif *push.Notification, regIds []string) ([]byte, error)] - Converts notification to payload format (implementation not shown in reference code)\n\nhandleCMMulticastResults: [func(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification, results []CMResult)] - Processes multicast results from push service (implementation not shown in reference code)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/uniqush/uniqush-push/push\"\n\t\"github.com/uniqush/uniqush-push/util\"\n)\n\ntype PushServiceBase struct {\n\tclient             HTTPClient\n\tinitialism         string\n\trawPayloadKey      string\n\trawNotificationKey string\n\tserviceURL         string\n\tpushServiceName    string\n}\n\nfunc MakePushServiceBase(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase {\n\tconf := &tls.Config{InsecureSkipVerify: false}\n\ttr := &http.Transport{\n\t\tTLSClientConfig:     conf,\n\t\tTLSHandshakeTimeout: time.Second * 5,\n\t\tMaxIdleConnsPerHost: 500,\n\t}\n\tclient := &http.Client{\n\t\tTransport: tr,\n\t\tTimeout:   time.Second * 10,\n\t}\n\treturn PushServiceBase{\n\t\tclient:             client,\n\t\tinitialism:         initialism,\n\t\trawPayloadKey:      rawPayloadKey,\n\t\trawNotificationKey: rawNotificationKey,\n\t\tserviceURL:         serviceURL,\n\t\tpushServiceName:    pushServiceName,\n\t}\n}\n\nfunc (psb *PushServiceBase) multicast(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification) {\n\tif len(dpList) == 0 {\n\t\treturn\n\t}\n\tregIds := extractRegIds(dpList)\n\n\tjpayload, e0 := psb.ToCMPayload(notif, regIds)\n\n\tif e0 != nil {\n\t\tsendErrToEachDP(psp, dpList, resQueue, notif, e0)\n\t\treturn\n\t}\n\n\treq, e1 := http.NewRequest(\"POST\", psb.serviceURL, bytes.NewReader(jpayload))\n\tif req != nil {\n\t\tdefer req.Body.Close()\n\t}\n\tif e1 != nil {\n\t\thttpErr := push.NewErrorf(\"Error constructing HTTP request: %v\", e1)\n\t\tsendErrToEachDP(psp, dpList, resQueue, notif, httpErr)\n\t\treturn\n\t}\n\n\tapikey := psp.VolatileData[\"apikey\"]\n\n\treq.Header.Set(\"Authorization\", \"key=\"+apikey)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tr, e2 := psb.client.Do(req)\n\tif r != nil {\n\t\tdefer r.Body.Close()\n\t}\n\tif e2 != nil {\n\t\tfor _, dp := range dpList {\n\t\t\tres := new(push.Result)\n\t\t\tres.Provider = psp\n\t\t\tres.Content = notif\n\n\t\t\tres.Destination = dp\n\t\t\tif err, ok := e2.(net.Error); ok {\n\t\t\t\tif err.Temporary() {\n\t\t\t\t\tafter := 3 * time.Second\n\t\t\t\t\tres.Err = push.NewRetryErrorWithReason(psp, dp, notif, after, err)\n\t\t\t\t}\n\t\t\t} else if err, ok := e2.(*net.DNSError); ok {\n\t\t\t\tafter := 3 * time.Second\n\t\t\t\tres.Err = push.NewRetryErrorWithReason(psp, dp, notif, after, err)\n\t\t\t} else {\n\t\t\t\tres.Err = push.NewErrorf(\"Unrecoverable HTTP error sending to %s: %v\", psb.pushServiceName, e2)\n\t\t\t}\n\t\t\tresQueue <- res\n\t\t}\n\t\treturn\n\t}\n\n\tnewAuthToken := r.Header.Get(\"Update-Client-Auth\")\n\tif newAuthToken != \"\" && apikey != newAuthToken {\n\t\tpsp.VolatileData[\"apikey\"] = newAuthToken\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewPushServiceProviderUpdate(psp)\n\t\tresQueue <- res\n\t}\n\n\tswitch r.StatusCode {\n\tcase 500, 503:\n\t\tafter := 0 * time.Second\n\t\tfor _, dp := range dpList {\n\t\t\tres := new(push.Result)\n\t\t\tres.Provider = psp\n\t\t\tres.Content = notif\n\t\t\tres.Destination = dp\n\t\t\terr := push.NewRetryError(psp, dp, notif, after)\n\t\t\tres.Err = err\n\t\t\tresQueue <- res\n\t\t}\n\t\treturn\n\tcase 401:\n\t\terr := push.NewBadPushServiceProviderWithDetails(psp, fmt.Sprintf(\"push service credentials rejected by %s\", psb.initialism))\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = err\n\t\tresQueue <- res\n\t\treturn\n\tcase 400:\n\t\terr := push.NewBadNotificationWithDetails(fmt.Sprintf(\"push notification payload rejected by %s\", psb.initialism))\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = err\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tcontents, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewErrorf(\"Failed to read %s response: %v\", psb.initialism, err)\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tvar result CMResult\n\terr = json.Unmarshal(contents, &result)\n\n\tif err != nil {\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewErrorf(\"Failed to decode %s response: %v\", psb.initialism, err)\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tpsb.handleCMMulticastResults(psp, dpList, resQueue, notif, result.Results)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\ntype PushServiceBase struct {\n\tclient             *http.Client\n\tinitialism         string\n\trawPayloadKey      string\n\trawNotificationKey string\n\tserviceURL         string\n\tpushServiceName    string\n}\n\nfunc MakePushServiceBase(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase {\n\treturn PushServiceBase{\n\t\tclient:             &http.Client{Transport: &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}, MaxIdleConnsPerHost: 10}, Timeout: 10 * time.Second},\n\t\tinitialism:         initialism,\n\t\trawPayloadKey:      rawPayloadKey,\n\t\trawNotificationKey: rawNotificationKey,\n\t\tserviceURL:         serviceURL,\n\t\tpushServiceName:    pushServiceName,\n\t}\n}\n\nfunc (psb *PushServiceBase) multicast(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification) {\n\t// Implementation for sending notifications to multiple devices\n}\n\nfunc (psb *PushServiceBase) ToCMPayload(notif *push.Notification, regIds []string) ([]byte, error) {\n\t// Implementation for converting notification to payload format\n\treturn nil, nil\n}\n\nfunc (psb *PushServiceBase) handleCMMulticastResults(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification, results []CMResult) {\n\t// Implementation for processing multicast results\n}\n```"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of fetched files to avoid redundant network requests when the same URL is requested multiple times. The function includes error handling for network issues and invalid HTTP responses.\n\nInput: \n- `fileurl` (string): The URL of the file to be fetched.\n\nOutput: \n- `[]byte`: The content of the file as a byte slice if successful.\n- `error`: An error object describing any issues encountered during the fetch operation (network errors, non-200 status codes, etc.). Returns nil if no error occurs.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar verboseReader = false\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar cache = sync.Map{}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tif cached, ok := cache.Load(fileurl); ok {\n\t\treturn cached.([]byte), nil\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcache.Store(fileurl, body)\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Implement a function to fetch a long-lived user access token from Facebook's Graph API using HTTP GET request.\n\nFunction Description: The function makes an HTTP GET request to Facebook's OAuth endpoint to exchange a short-lived access token for a long-lived one. It handles the request, response reading, and JSON parsing, returning the long-lived token or an error if any step fails.\n\nInput: \n- The function is a method on a struct (FacebookBee) that contains the following fields:\n  - clientID (string): Facebook app client ID\n  - clientSecret (string): Facebook app client secret\n  - accessToken (string): Short-lived user access token to exchange\n\nOutput:\n- string: The long-lived access token if successful\n- error: Descriptive error if any step fails (request, reading response, or parsing JSON)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc (mod *FacebookBee) fetchLongLivedUserAccessToken() (string, error) {\n\tbaseURL := \"https://graph.facebook.com/oauth/access_token\"\n\tv := url.Values{}\n\tv.Set(\"grant_type\", \"fb_exchange_token\")\n\tv.Set(\"client_id\", mod.clientID)\n\tv.Set(\"client_secret\", mod.clientSecret)\n\tv.Set(\"fb_exchange_token\", mod.accessToken)\n\tgraphUrl := baseURL + \"?\" + v.Encode()\n\n\tres, err := http.Get(graphUrl)\n\n\tif err != nil || res == nil {\n\t\treturn \"\", fmt.Errorf(\"fetching long lived user access token failed: %w\", err)\n\t}\n\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"reading content while fetching long lived user access token failed: %w\", err)\n\t}\n\n\ttype RequestResult struct {\n\t\tAccessToken string `json:\"access_token\"`\n\t}\n\n\tvar tokenRes RequestResult\n\terr = json.Unmarshal(body, &tokenRes)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"parsing result while fetching long lived user access token failed: %w\", err)\n\t}\n\n\treturn tokenRes.AccessToken, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"encoding/json\"\n)\n\ntype FacebookBee struct {\n\tclientID     string\n\tclientSecret string\n\taccessToken  string\n}\n\nfunc (fb *FacebookBee) GetLongLivedToken() (string, error) {\n\tparams := url.Values{}\n\tparams.Add(\"client_id\", fb.clientID)\n\tparams.Add(\"client_secret\", fb.clientSecret)\n\tparams.Add(\"grant_type\", \"fb_exchange_token\")\n\tparams.Add(\"access_token\", fb.accessToken)\n\turlStr := \"https://graph.facebook.com/v12.0/oauth/access_token?\" + params.Encode()\n\n\treq, err := http.NewRequest(\"GET\", urlStr, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d, body: %s\", resp.StatusCode, body)\n\t}\n\n\tvar result map[string]interface{}\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif err, ok := result[\"error\"].(string); ok {\n\t\treturn \"\", fmt.Errorf(\"facebook error: %s\", err)\n\t}\n\n\taccessToken, ok := result[\"access_token\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"missing access_token in response\")\n\t}\n\n\treturn accessToken, nil\n}"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Implement a function to retrieve metadata from a metadata server using HTTP GET requests with custom headers.\n\nFunction Description: The function `getMetadata` sends an HTTP GET request to a metadata server with specific headers and retrieves the response. It handles the request creation, response validation, and resource cleanup. The function is designed to work with metadata services like Google Cloud's metadata server.\n\nInput:  \n- `key` (string): The metadata key to retrieve from the metadata server. This is appended to the base metadata path.\n\nOutput:  \n- `[]byte`: The raw response body from the metadata server if the request is successful.  \n- `error`: An error object if the request fails or if the server returns a non-200 status code.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar (\n\tmetadataRequestHeaders = http.Header{\n\t\t\"Metadata-Flavor\": []string{\"Google\"},\n\t}\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\treq := &http.Request{\n\t\tMethod: \"GET\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   metadataHost,\n\t\t\tPath:   metadataPath + key,\n\t\t},\n\t\tHeader: metadataRequestHeaders,\n\t\tHost:   metadataHost,\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"metadata server returned HTTP %d\", resp.StatusCode)\n\t}\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\tbase := \"http://169.254.169.254/computeMetadata/v1/\"\n\turl := base + key\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n```"
  },
  {
    "Task_id": 323,
    "Instruction": "Task Description: Implement a function to fetch the contents of a file from a given URL and return it as an io.Reader for further processing.  \n\nFunction Description: The function `fetchFile` takes a URL as input, sends an HTTP GET request to fetch the file, reads the response body, and returns it as an `io.Reader`. It handles errors during the HTTP request and response reading.  \n\nInput:  \n- `URL` (string) - The URL of the file to be fetched.  \n\nOutput:  \n- `io.Reader` - A reader containing the contents of the fetched file.  \n\n(Note: The `checkErr` function is assumed to handle errors by panicking or logging.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc fetchFile(URL string) io.Reader {\n\tresp, err := http.Get(URL)\n\tcheckErr(err)\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tcheckErr(err)\n\treturn strings.NewReader(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc fetchFile(url string) io.Reader {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\tcheckErr(err)\n\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\tcheckErr(fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode))\n\t}\n\treturn resp.Body\n}\n```"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a function that fetches properties from a given URL, handles HTTP responses appropriately, and processes the content based on its encoding type.\n\nFunction Description: The function LoadURL makes an HTTP GET request to the specified URL, checks the response status code, reads the response body, and determines the content encoding based on the Content-Type header. It then processes the content and returns the parsed properties or an error if any step fails.\n\nInput: \n- url (string): The URL from which to fetch the properties.\n\nOutput: \n- (*Properties, error): A pointer to a Properties struct containing the parsed data and nil error on success, or nil and an error describing the failure.\n\nNote: The function handles special cases like 404 errors (when IgnoreMissing is true) and validates the Content-Type header before processing. It also ensures proper resource cleanup by deferring the closing of the response body.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc (l *Loader) LoadURL(url string) (*Properties, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"properties: error fetching %q. %s\", url, err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == 404 && l.IgnoreMissing {\n\t\tLogPrintf(\"properties: %s returned %d. skipping\", url, resp.StatusCode)\n\t\treturn NewProperties(), nil\n\t}\n\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"properties: %s returned %d\", url, resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"properties: %s error reading response. %s\", url, err)\n\t}\n\n\tct := resp.Header.Get(\"Content-Type\")\n\tct = strings.Join(strings.Fields(ct), \"\")\n\tvar enc Encoding\n\tswitch strings.ToLower(ct) {\n\tcase \"text/plain\", \"text/plain;charset=iso-8859-1\", \"text/plain;charset=latin1\":\n\t\tenc = ISO_8859_1\n\tcase \"\", \"text/plain;charset=utf-8\":\n\t\tenc = UTF8\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"properties: invalid content type %s\", ct)\n\t}\n\n\treturn l.loadBytes(body, enc)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"mime\"\n\t\"strings\"\n)\n\ntype Properties struct {\n\tData map[string]string\n}\n\nfunc LoadURL(url string) (*Properties, error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcontentType := resp.Header.Get(\"Content-Type\")\n\tmediaType, params, err := mime.ParseMediaType(contentType)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcharset := params[\"charset\"]\n\tif charset == \"\" {\n\t\tcharset = \"utf-8\"\n\t}\n\n\t// Process content based on media type and charset\n\tvar data map[string]string\n\tswitch {\n\tcase strings.HasPrefix(mediaType, \"application/json\"):\n\t\t// JSON parsing logic\n\t\tdata = make(map[string]string)\n\t\t// Placeholder for actual JSON parsing\n\tcase strings.HasPrefix(mediaType, \"text/plain\"):\n\t\t// Plain text processing\n\t\tscanner := bufio.NewScanner(bytes.NewBuffer(body))\n\t\tdata = make(map[string]string)\n\t\tfor scanner.Scan() {\n\t\t\tline := scanner.Text()\n\t\t\tif strings.Contains(line, \":\") {\n\t\t\t\tparts := strings.SplitN(line, \":\", 2)\n\t\t\t\tdata[parts[0]] = parts[1]\n\t\t\t}\n\t\t}\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unsupported content type: %s\", mediaType)\n\t}\n\n\treturn &Properties{Data: data}, nil\n}\n```"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a function that reads data from a given location, supporting HTTP/HTTPS protocols. The function should handle URL parsing, make HTTP requests, and return the response body or appropriate errors.\n\nFunction Description: The function `ReadLocation` takes a location string (URL) as input, parses it to determine the protocol, and if it's HTTP/HTTPS, makes a GET request to fetch the data. It handles response status checks, reads the response body, and ensures proper resource cleanup.\n\nInput: \n- `loc` (string): A URL string specifying the location to read from (e.g., \"http://example.com/data\")\n\nOutput: \n- `[]byte`: The response body as a byte slice if successful\n- `error`: An error object describing any issues encountered during URL parsing, HTTP request, or response handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc ReadLocation(loc string) ([]byte, error) {\n\tu, err := url.Parse(loc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch u.Scheme {\n\tcase \"http\", \"https\":\n\t\tres, err := http.Get(loc)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer res.Body.Close()\n\t\tif res.StatusCode != http.StatusOK {\n\t\t\treturn nil, fmt.Errorf(\"%s\", res.Status)\n\t\t}\n\t\tb, err := ioutil.ReadAll(res.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn b, nil\n\t}\n\treturn nil, fmt.Errorf(\"Unsupported location to load: %s\", loc)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc ReadLocation(loc string) ([]byte, error) {\n\tu, err := url.Parse(loc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif u.Scheme != \"http\" && u.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"unsupported protocol: %s\", u.Scheme)\n\t}\n\tresp, err := http.Get(u.String())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"request failed with status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n```"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Implement a GIF search functionality using the Giphy API in Go, handling HTTP requests, response parsing, and error management.\n\nStruct Description: The Gifs struct represents a service for searching GIFs using the Giphy API. It maintains configuration and provides methods to interact with the API.\n\nFields:\n- conf: [conf] - Configuration containing the Giphy API key\n\nMethods:\n- New: [func() *Gifs] - Initializes a new Gifs instance by loading configuration\n- Search: [func(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error] - Searches for GIFs using the Giphy API with the provided query and parameters\n\nInput:\n- ctx: [context.Context] - Context for request cancellation and timeouts\n- request: [*gifs.SearchRequest] - Contains search parameters (query, limit, offset, rating, language)\n- response: [*gifs.SearchResponse] - Will be populated with search results\n\nOutput:\n- error: Returns nil on success or an appropriate error on failure",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"github.com/micro/micro/v5/service/config\"\n\t\"github.com/micro/micro/v5/service/errors\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tgifs \"github.com/micro/services/gifs/proto\"\n)\n\ntype conf struct {\n\tAPIKey string `json:\"api_key\"`\n}\n\ntype Gifs struct {\n\tconf conf\n}\n\nfunc New() *Gifs {\n\tv, err := config.Get(\"micro.gifs\")\n\tif err != nil {\n\t\tlogger.Fatalf(\"Failed to load config %s\", err)\n\t}\n\tvar c conf\n\tif err := v.Scan(&c); err != nil {\n\t\tlogger.Fatalf(\"Failed to load config %s\", err)\n\t}\n\n\treturn &Gifs{conf: c}\n}\n\nfunc (g *Gifs) Search(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error {\n\tif len(request.Query) == 0 {\n\t\treturn errors.BadRequest(\"gifs.Search\", \"Missing query field\")\n\t}\n\tlimit := defaultLimit\n\tif request.Limit > 0 {\n\t\tlimit = request.Limit\n\t}\n\toffset := defaultOffset\n\tif request.Offset > 0 {\n\t\toffset = request.Offset\n\t}\n\n\trating := defaultRating\n\tif len(request.Rating) > 0 {\n\t\trating = request.Rating\n\t}\n\tlan := defaultLang\n\tif len(request.Lang) > 0 {\n\t\tlan = request.Lang\n\t}\n\trsp, err := http.Get(fmt.Sprintf(giphySearch, g.conf.APIKey, request.Query, limit, offset, rating, lan))\n\tif err != nil {\n\t\tlogger.Errorf(\"Error querying giphy %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tdefer rsp.Body.Close()\n\tb, err := ioutil.ReadAll(rsp.Body)\n\tif err != nil {\n\t\tlogger.Errorf(\"Error marshalling giphy response %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tvar gRsp searchResponse\n\tif err := json.Unmarshal(b, &gRsp); err != nil {\n\t\tlogger.Errorf(\"Error marshalling giphy response %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tresponse.Data = marshalGifs(gRsp.Data)\n\tresponse.Pagination = &gifs.Pagination{\n\t\tOffset:     gRsp.Pagination.Offset,\n\t\tTotalCount: gRsp.Pagination.TotalCount,\n\t\tCount:      gRsp.Pagination.Count,\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n)\n\ntype Conf struct {\n\tAPIKey string\n}\n\ntype Gifs struct {\n\tconf *Conf\n}\n\nfunc New() *Gifs {\n\tapiKey := \"your-api-key-here\"\n\treturn &Gifs{\n\t\tconf: &Conf{APIKey: apiKey},\n\t}\n}\n\nfunc (g *Gifs) Search(ctx context.Context, request *SearchRequest, response *SearchResponse) error {\n\tbaseURL := \"https://api.giphy.com/v1/gifs/search\"\n\tparams := url.Values{}\n\tparams.Add(\"q\", request.Query)\n\tparams.Add(\"limit\", strconv.Itoa(request.Limit))\n\tparams.Add(\"offset\", strconv.Itoa(request.Offset))\n\tparams.Add(\"rating\", request.Rating)\n\tparams.Add(\"lang\", request.Language)\n\tparams.Add(\"api_key\", g.conf.APIKey)\n\n\turl := baseURL + \"?\" + params.Encode()\n\n\treq, err := http.NewRequestWithContext(ctx, \"GET\", url, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := json.Unmarshal(body, response); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\ntype SearchRequest struct {\n\tQuery    string\n\tLimit    int\n\tOffset   int\n\tRating   string\n\tLanguage string\n}\n\ntype SearchResponse struct {\n\tData []GIF `json:\"data\"`\n}\n\ntype GIF struct {\n\tURL string `json:\"url\"`\n}"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Implement a function that sets up a cron job to make periodic HTTP GET requests to a specified callback URL and logs the results.\n\nFunction Description: The function `Setup` initializes a new cron scheduler, adds a job that makes HTTP GET requests to a specified callback URL at a given interval, and logs the success or failure of each request. The function starts the cron scheduler and returns it for further management.\n\nInput: \n- `job` [*pb.Job] - A protobuf message containing the job details, including:\n  - `Id` [string] - Unique identifier for the job\n  - `Interval` [string] - Cron-formatted interval at which the job should run\n  - `Callback` [string] - URL to which the HTTP GET request will be made\n\nOutput: \n- [*cron.Cron] - A pointer to the started cron scheduler instance, which can be used to stop or manage the scheduled job.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/cron/proto\"\n\t\"github.com/robfig/cron/v3\"\n)\nfunc (c *Cron) Setup(job *pb.Job) *cron.Cron {\n\tlogger.Infof(\"Setting up job id: %s\", job.Id)\n\tcr := cron.New()\n\tcr.AddFunc(job.Interval, func() {\n\t\tlogger.Infof(\"Running job id: %s\", job.Id)\n\t\trsp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlogger.Errorf(\"Failed job id: %s error: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer rsp.Body.Close()\n\t\tb, _ := ioutil.ReadAll(rsp.Body)\n\t\tif rsp.StatusCode != 200 {\n\t\t\tlogger.Errorf(\"Non 200 job id: %s error: %s\", job.Id, string(b))\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Successful job id: %s\", job.Id)\n\t})\n\tcr.Start()\n\treturn cr\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/robfig/cron/v3\"\n\t\"path/to/your/pb\"\n)\n\nfunc Setup(job *pb.Job) *cron.Cron {\n\tc := cron.New()\n\t_ = c.AddFunc(job.Interval, func() {\n\t\tresp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Job %s failed: %v\", job.Id, err)\n\t\t} else {\n\t\t\tlog.Printf(\"Job %s succeeded with status %d\", job.Id, resp.StatusCode)\n\t\t\tresp.Body.Close()\n\t\t}\n\t})\n\tc.Start()\n\treturn c\n}"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified address with JSON payload and room parameters, then processes the response.\n\nFunction Description: The function sends a POST request to a server endpoint with room information and a JSON payload containing a test value. It handles the response by reading the body and printing the result along with a timestamp.\n\nInput:\n- addr (string): The server address to which the POST request will be sent.\n- i (int64): A numeric value that will be included in the JSON payload.\n\nOutput: None (prints response details to stdout, returns nothing)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc post(addr string, i int64) {\n\tresp, err := http.Post(\"http://\"+addr+\"/goim/push/room?operation=1000&type=test&room=\"+os.Args[1], \"application/json\", bytes.NewBufferString(fmt.Sprintf(\"{\\\"test\\\":%d}\", i)))\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"%s postId:%d, response:%s\\n\", time.Now().Format(\"2006-01-02 15:04:05\"), i, string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc sendRequest(addr string, i int64) {\n\tdata := map[string]int64{\"test\": i}\n\tjsonData, _ := json.Marshal(data)\n\treq, _ := http.NewRequest(\"POST\", addr, bytes.NewBuffer(jsonData))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\tclient := &http.Client{}\n\tresp, _ := client.Do(req)\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\tfmt.Printf(\"[%v] Response: %s\\n\", time.Now(), string(body))\n}\n```"
  },
  {
    "Task_id": 329,
    "Instruction": "Task Description: Implement a function to retrieve metadata from a metadata server using HTTP GET requests with custom headers.\n\nFunction Description: The function `getMetadata` sends an HTTP GET request to a metadata server with specific headers and retrieves the response. It handles the request creation, response processing, and error checking. The function ensures proper resource cleanup by deferring the closing of the response body.\n\nInput:  \n- `key` (string): The metadata key to be appended to the metadata server's base path.  \n\nOutput:  \n- `[]byte`: The raw response body from the metadata server if the request is successful.  \n- `error`: An error object if the request fails or if the server returns a non-200 status code.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar (\n\tmetadataRequestHeaders = http.Header{\n\t\t\"Metadata-Flavor\": []string{\"Google\"},\n\t}\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\treq := &http.Request{\n\t\tMethod: \"GET\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   metadataHost,\n\t\t\tPath:   metadataPath + key,\n\t\t},\n\t\tHeader: metadataRequestHeaders,\n\t\tHost:   metadataHost,\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"metadata server returned HTTP %d\", resp.StatusCode)\n\t}\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\tbase := \"http://169.254.169.254/latest/meta-data/\"\n\turl := base + key\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", \"MyMetadataClient/1.0\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a Proxy struct that manages different types of servers (UDS, mTLS, admin, and health) for handling proxy connections with various protocols (HTTP and gRPC).\n\nStruct Description: The Proxy struct provides methods to run different server types with configurable options, including Unix Domain Socket (UDS) servers, mTLS-secured servers, admin servers for metrics and profiling, and health servers for liveness/readiness checks.\n\nMethods:\n\nMethod1: runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a master server using Unix Domain Socket (UDS) for communication. Supports both gRPC and HTTP modes based on configuration. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod2: runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a mTLS-secured master server listening on a TCP port. Supports both gRPC and HTTP modes. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod3: runAdminServer(o *options.ProxyRunOptions) -> void - Starts an admin server for metrics and optional profiling endpoints. Runs on a localhost port specified in options.\n\nMethod4: runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) -> void - Starts a health server providing liveness (/healthz) and readiness (/ready) endpoints. Runs on a port specified in options.\n\nNote: StopFunc is a function type defined as: type StopFunc func()",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\t\"syscall\"\n)\n\ntype Proxy struct {\n}\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tif o.DeleteUDSFile {\n\t\tif err := os.Remove(o.UdsName); err != nil && !os.IsNotExist(err) {\n\t\t\tklog.ErrorS(err, \"failed to delete file\", \"file\", o.UdsName)\n\t\t}\n\t}\n\tvar stop StopFunc\n\tif o.Mode == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := getUDSListener(ctx, o.UdsName)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to get uds listener: %v\", err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\tserver := &http.Server{\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tklog.ErrorS(err, \"error shutting down server\")\n\t\t}\n\t\tgo func() {\n\t\t\tudsListener, err := getUDSListener(ctx, o.UdsName)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to get uds listener\")\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\terr := udsListener.Close()\n\t\t\t\tklog.ErrorS(err, \"failed to close uds listener\")\n\t\t\t}()\n\t\t\terr = server.Serve(udsListener)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to serve uds requests\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tvar stop StopFunc\n\n\tvar tlsConfig *tls.Config\n\tvar err error\n\tif tlsConfig, err = p.getTLSConfig(o.ServerCaCert, o.ServerCert, o.ServerKey); err != nil {\n\t\treturn nil, err\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", o.ServerPort)\n\n\tif o.Mode == grpcMode {\n\t\tserverOption := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\tgrpcServer := grpc.NewServer(serverOption)\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to listen on %s: %v\", addr, err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\thttpServer := &http.Server{\n\t\t\tAddr: \":8088\",\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tserver := &http.Server{\n\t\t\tAddr:      addr,\n\t\t\tTLSConfig: tlsConfig,\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t\tTLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler)),\n\t\t}\n\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown server\")\n\t\t\t}\n\t\t\terr = httpServer.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown httpServer\")\n\t\t\t}\n\t\t}\n\t\tgo func() {\n\t\t\terr := server.ListenAndServeTLS(\"\", \"\")\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on master port\")\n\t\t\t}\n\t\t}()\n\t\tgo func() {\n\t\t\terr := httpServer.ListenAndServe()\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on http master port\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.Handle(\"/metrics\", promhttp.Handler())\n\tif o.EnableProfiling {\n\t\tmuxHandler.HandleFunc(\"/debug/pprof\", util.RedirectTo(\"/debug/pprof/\"))\n\t\tmuxHandler.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tif o.EnableContentionProfiling {\n\t\t\truntime.SetBlockProfileRate(1)\n\t\t}\n\t}\n\tadminServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\"127.0.0.1:%d\", o.AdminPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := adminServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"admin server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Admin server stopped listening\")\n\t}()\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\tlivenessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"ok\")\n\t})\n\treadinessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tready, msg := server.Readiness.Ready()\n\t\tif ready {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\tfmt.Fprintf(w, \"ok\")\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, msg)\n\t})\n\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.HandleFunc(\"/healthz\", livenessHandler)\n\tmuxHandler.HandleFunc(\"/ready\", readinessHandler)\n\thealthServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\":%d\", o.HealthPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := healthServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"health server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Health server stopped listening\")\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "wrong_result": "type StopFunc func()\n\ntype Proxy struct{}\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\treturn nil, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\treturn nil, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n}"
  },
  {
    "Task_id": 330,
    "Instruction": "Task Description: Implement a function to fetch and update search configuration from a remote URL, comparing it with the current configuration and updating if different.\n\nFunction Description: The function fetchSearchConfig retrieves search configuration from a predefined URL, normalizes it, compares it with the current configuration, and updates the system state if the new configuration is different. It handles HTTP requests, response reading, and configuration normalization.\n\nInput: None (uses predefined searchConfigURL and relies on the Server's state)\n\nOutput: error - Returns an error if any step fails (HTTP request, reading response, normalization, or configuration loading), or nil if successful (whether updated or no change needed)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nvar currentConfig, _ = normalize(defaultSearchConfig)\n\nfunc (s *Server) fetchSearchConfig() error {\n\tresp, err := http.Get(searchConfigURL)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tnewConfig, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tnewConfig, err = normalize(newConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif bytes.Equal(currentConfig, newConfig) {\n\t\treturn nil\n\t}\n\tif err := s.scraper.LoadConfig(newConfig); err != nil {\n\t\treturn err\n\t}\n\ts.state.SearchProviders = s.scraper.Config\n\ts.state.Push()\n\tcurrentConfig = newConfig\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"reflect\"\n)\n\ntype Server struct {\n\tconfig map[string]interface{}\n}\n\nvar searchConfigURL = \"https://example.com/config\"\n\nfunc (s *Server) fetchSearchConfig() error {\n\tresp, err := http.Get(searchConfigURL)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar newConfig map[string]interface{}\n\tif err := json.Unmarshal(body, &newConfig); err != nil {\n\t\treturn err\n\t}\n\n\tif !reflect.DeepEqual(s.config, newConfig) {\n\t\ts.config = newConfig\n\t}\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The cache can be enabled/disabled globally, and cache hits/misses are logged when verbose mode is active. The function handles HTTP errors and returns the file content as a byte array.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput: \n- `[]byte` - The content of the file as a byte array\n- `error` - Any error encountered during the fetch operation (network error, HTTP status error, etc.)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nvar (\n\tcache    = make(map[string][]byte)\n\tuseCache bool\n\tverbose  bool\n)\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tif useCache {\n\t\tif content, found := cache[fileurl]; found {\n\t\t\tif verbose {\n\t\t\t\tfmt.Printf(\"Cache hit: %s\\n\", fileurl)\n\t\t\t}\n\t\t\treturn content, nil\n\t\t}\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif useCache {\n\t\tcache[fileurl] = body\n\t\tif verbose {\n\t\t\tfmt.Printf(\"Cache miss, cached: %s\\n\", fileurl)\n\t\t}\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The `fetchFile` function retrieves the contents of a file from a specified URL using HTTP GET. It supports optional caching of file contents to avoid redundant network requests for the same URL. The function handles HTTP errors and returns the file contents as a byte array if successful.\n\nInput: \n- `fileurl` [string] - The URL of the file to fetch\n\nOutput: \n- `[]byte` - The contents of the file as a byte array\n- `error` - An error object if the fetch operation fails (either network error or non-200 HTTP status)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar (\n\tfileCache = make(map[string][]byte)\n\tcacheMu   = sync.Mutex{}\n)\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tcacheMu.Lock()\n\tif content, found := fileCache[fileurl]; found {\n\t\tcacheMu.Unlock()\n\t\treturn content, nil\n\t}\n\tcacheMu.Unlock()\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"HTTP status %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcacheMu.Lock()\n\tfileCache[fileurl] = body\n\tcacheMu.Unlock()\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Implement a WorkWeiXin struct in Go that interacts with the WeChat Work API to send messages and manage authentication tokens.\n\nStruct Description: The WorkWeiXin struct represents a client for interacting with WeChat Work's API, handling authentication and message sending functionality.\n\nFields:\nCorpID: string - The corporation ID for WeChat Work authentication\nAgentID: string - The application agent ID for message sending\nCorpSecret: string - The corporation secret for authentication\nToken: string - The access token for API requests (may be empty initially)\n\nMethods:\ngetToken: () -> (string, error) - Retrieves an access token from WeChat Work API using CorpID and CorpSecret. Returns the token or an error.\nSend: (receivers []string, title string, content []byte, others ...string) -> error - Sends a markdown message to specified receivers via WeChat Work API. Handles token retrieval if needed. Returns nil on success or an error.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string `json:\"corpId\"`\n\tAgentID    string `json:\"agentId\"`\n\tCorpSecret string `json:\"corpSecret\"`\n\tToken      string `json:\"token\"`\n}\n\nfunc (w WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\n\treqBody := make(map[string]interface{})\n\treqBody[\"msgtype\"] = \"markdown\"\n\n\ttoUser := \"\"\n\tfor _, v := range receivers {\n\t\ttoUser = v + \"|\"\n\t}\n\treqBody[\"touser\"] = toUser\n\treqBody[\"agentid\"] = w.AgentID\n\tmarkdown := make(map[string]string)\n\tmarkdown[\"content\"] = string(content)\n\treqBody[\"markdown\"] = markdown\n\tdata, _ := json.Marshal(reqBody)\n\tbody := strings.NewReader(string(data))\n\treq, err := http.NewRequest(\n\t\thttp.MethodPost,\n\t\tfmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s\", w.Token),\n\t\tbody,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json;charset=utf-8\")\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn nil\n\t\t} else {\n\t\t\treturn errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}\n\nfunc (w WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn result[\"access_token\"].(string), nil\n\t\t} else {\n\t\t\treturn \"\", errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string\n\tAgentID    string\n\tCorpSecret string\n\tToken      string\n}\n\nfunc (w *WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar result struct {\n\t\tErrcode     int    `json:\"errcode\"`\n\t\tErrmsg      string `json:\"errmsg\"`\n\t\tAccessToken string `json:\"access_token\"`\n\t}\n\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif result.Errcode != 0 {\n\t\treturn \"\", fmt.Errorf(\"get token error: %s\", result.Errmsg)\n\t}\n\n\tw.Token = result.AccessToken\n\treturn w.Token, nil\n}\n\nfunc (w *WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\t_, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s\", w.Token)\n\tmessage := map[string]interface{}{\n\t\t\"touser\":  strings.Join(receivers, \"|\"),\n\t\t\"msgtype\": \"markdown\",\n\t\t\"agentid\": w.AgentID,\n\t\t\"markdown\": map[string]string{\n\t\t\t\"content\": title + \"\\n\" + string(content),\n\t\t},\n\t}\n\n\tjsonData, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresp, err := http.Post(url, \"application/json\", bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar result struct {\n\t\tErrcode int    `json:\"errcode\"`\n\t\tErrmsg  string `json:\"errmsg\"`\n\t}\n\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn err\n\t}\n\n\tif result.Errcode != 0 {\n\t\treturn fmt.Errorf(\"send message error: %s\", result.Errmsg)\n\t}\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Create a robust RabbitMQ producer in Go that handles connection management, channel initialization, and message publishing with automatic reconnection capabilities.\n\nStruct Description: The Session struct represents a RabbitMQ producer session that maintains connection state and provides message publishing functionality with automatic reconnection.\n\nFields:\n- name: string - The name of the queue to publish to\n- logger: *log.Logger - Logger for session events\n- connection: *amqp.Connection - RabbitMQ connection object\n- channel: *amqp.Channel - RabbitMQ channel object\n- done: chan bool - Channel to signal shutdown\n- notifyConnClose: chan *amqp.Error - Channel for connection close notifications\n- notifyChanClose: chan *amqp.Error - Channel for channel close notifications\n- notifyConfirm: chan amqp.Confirmation - Channel for publish confirmations\n- isReady: bool - Flag indicating if session is ready to publish\n\nMethods:\n- New(name string, addr string) -> *Session - Creates a new Session instance and starts connection management\n- handleReconnect(addr string) - Manages reconnection logic in a goroutine\n- connect(addr string) -> (*amqp.Connection, error) - Establishes connection to RabbitMQ server\n- handleReInit(conn *amqp.Connection) -> bool - Handles channel reinitialization after connection\n- init(conn *amqp.Connection) -> error - Initializes channel and declares queue\n- changeConnection(connection *amqp.Connection) - Updates connection and sets up close notifications\n- changeChannel(channel *amqp.Channel) - Updates channel and sets up close/confirm notifications\n- Push(data []byte) -> error - Safely publishes message with retry logic\n- UnsafePush(data []byte) -> error - Publishes message without safety checks (used internally)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n)\n\ntype Session struct {\n\tname            string\n\tlogger          *log.Logger\n\tconnection      *amqp.Connection\n\tchannel         *amqp.Channel\n\tdone            chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n}\n\nfunc New(name string, addr string) *Session {\n\tsession := Session{\n\t\tlogger: log.New(os.Stdout, \"\", log.LstdFlags),\n\t\tname:   name,\n\t\tdone:   make(chan bool),\n\t}\n\tgo session.handleReconnect(addr)\n\treturn &session\n}\n\nfunc (session *Session) handleReconnect(addr string) {\n\tfor {\n\t\tsession.isReady = false\n\t\tlog.Println(\"Attempting to connect\")\n\n\t\tconn, err := session.connect(addr)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to connect. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif done := session.handleReInit(conn); done {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (session *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsession.changeConnection(conn)\n\tlog.Println(\"Connected!\")\n\treturn conn, nil\n}\n\nfunc (session *Session) handleReInit(conn *amqp.Connection) bool {\n\tfor {\n\t\tsession.isReady = false\n\n\t\terr := session.init(conn)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to initialize channel. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn true\n\t\t\tcase <-time.After(2 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tselect {\n\t\tcase <-session.done:\n\t\t\treturn true\n\t\tcase <-session.notifyConnClose:\n\t\t\tlog.Println(\"Connection closed. Reconnecting...\")\n\t\t\treturn false\n\t\tcase <-session.notifyChanClose:\n\t\t\tlog.Println(\"Channel closed. Re-running init...\")\n\t\t}\n\t}\n}\n\nfunc (session *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ch.Confirm(false)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = ch.QueueDeclare(\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsession.changeChannel(ch)\n\tsession.isReady = true\n\tlog.Println(\"Setup!\")\n\n\treturn nil\n}\n\nfunc (session *Session) changeConnection(connection *amqp.Connection) {\n\tsession.connection = connection\n\tsession.notifyConnClose = make(chan *amqp.Error)\n\tsession.connection.NotifyClose(session.notifyConnClose)\n}\n\nfunc (session *Session) changeChannel(channel *amqp.Channel) {\n\tsession.channel = channel\n\tsession.notifyChanClose = make(chan *amqp.Error)\n\tsession.notifyConfirm = make(chan amqp.Confirmation, 1)\n\tsession.channel.NotifyClose(session.notifyChanClose)\n\tsession.channel.NotifyPublish(session.notifyConfirm)\n}\n\nfunc (session *Session) Push(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"failed to push: not connected\")\n\t}\n\tfor {\n\t\terr := session.UnsafePush(data)\n\t\tif err != nil {\n\t\t\tsession.logger.Println(\"Push failed. Retrying...\")\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn errors.New(\"session is shutting down\")\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tselect {\n\t\tcase confirm := <-session.notifyConfirm:\n\t\t\tif confirm.Ack {\n\t\t\t\tsession.logger.Println(\"Push confirmed!\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\tcase <-time.After(5 * time.Second):\n\t\t}\n\t\tsession.logger.Println(\"Push didn't confirm. Retrying...\")\n\t}\n}\n\nfunc (session *Session) UnsafePush(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"not connected to a server\")\n\t}\n\treturn session.channel.Publish(\n\t\t\"\",\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        data,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\tamqp \"github.com/rabbitmq/amqp091-go\"\n)\n\ntype Session struct {\n\tname           string\n\tlogger         *log.Logger\n\tconnection     *amqp.Connection\n\tchannel        *amqp.Channel\n\tdone           chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady        bool\n}\n\nfunc New(name string, addr string) *Session {\n\ts := &Session{\n\t\tname:           name,\n\t\tlogger:         log.New(log.Writer(), \"session: \", log.LstdFlags),\n\t\tdone:           make(chan bool),\n\t\tnotifyConnClose: make(chan *amqp.Error),\n\t\tnotifyChanClose: make(chan *amqp.Error),\n\t\tnotifyConfirm:   make(chan amqp.Confirmation, 1),\n\t}\n\tgo s.handleReconnect(addr)\n\treturn s\n}\n\nfunc (s *Session) handleReconnect(addr string) {\n\tfor {\n\t\tconn, err := s.connect(addr)\n\t\tif err != nil {\n\t\t\ts.logger.Printf(\"Failed to connect: %v, retrying in 5s\", err)\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\ts.changeConnection(conn)\n\t\tif s.handleReInit(conn) {\n\t\t\ts.isReady = true\n\t\t\ts.logger.Println(\"Connection established\")\n\t\t}\n\t\t<-s.done\n\t}\n}\n\nfunc (s *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn conn, nil\n}\n\nfunc (s *Session) handleReInit(conn *amqp.Connection) bool {\n\tch, err := conn.Channel()\n\tif err != nil {\n\t\treturn false\n\t}\n\ts.changeChannel(ch)\n\tif err := s.init(conn); err != nil {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (s *Session) init(conn *amqp.Connection) error {\n\tif err := s.channel.Qos(1, 1, false); err != nil {\n\t\treturn err\n\t}\n\tif _, err := s.channel.QueueDeclarePassive(s.name, false, false, false, false, nil); err != nil {\n\t\treturn err\n\t}\n\ts.channel.Confirm(false)\n\ts.channel.NotifyClose(s.notifyChanClose)\n\ts.channel.NotifyPublish(s.notifyConfirm)\n\treturn nil\n}\n\nfunc (s *Session) changeConnection(connection *amqp.Connection) {\n\ts.connection = connection\n\ts.connection.NotifyClose(s.notifyConnClose)\n}\n\nfunc (s *Session) changeChannel(channel *amqp.Channel) {\n\ts.channel = channel\n\ts.channel.NotifyClose(s.notifyChanClose)\n\ts.channel.NotifyPublish(s.notifyConfirm)\n}\n\nfunc (s *Session) Push(data []byte) error {\n\tif !s.isReady {\n\t\treturn s.reconnect()\n\t}\n\treturn s.UnsafePush(data)\n}\n\nfunc (s *Session) UnsafePush(data []byte) error {\n\terr := s.channel.Publish(\"\", s.name, false, false, amqp.Publishing{\n\t\tContentType: \"text/plain\",\n\t\tBody:        data,\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (s *Session) reconnect() error {\n\ts.isReady = false\n\ts.done <- true\n\t<-s.notifyConnClose\n\ts.isReady = false\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Implement a thread-safe RabbitMQ producer in Go that handles connection management, queue/exchange declaration, and message publishing.\n\nStruct Description: AMQPConn represents a RabbitMQ connection with built-in connection pooling and thread safety. It manages the AMQP connection, channel, and provides message sending capability.\n\nFields:\n\nmu: [sync.Mutex] - Mutex for thread-safe operations\nep: [Endpoint] - Configuration endpoint containing AMQP settings\nconn: [*amqp.Connection] - Underlying AMQP connection\nchannel: [*amqp.Channel] - AMQP channel for message operations\nex: [bool] - Flag indicating if connection is expired\nt: [time.Time] - Timestamp of last operation\n\nMethods:\n\nSend: [Name](msg string) -> [error] - Publishes a message to RabbitMQ. Handles connection establishment, channel creation, and queue/exchange declaration if not already done. Returns error if operation fails.\n[Input Parameters]:\n- msg: string - The message to be published\n[Return Type]:\n- error - Returns nil on success, error on failure",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc (conn *AMQPConn) Send(msg string) error {\n\tconn.mu.Lock()\n\tdefer conn.mu.Unlock()\n\n\tif conn.ex {\n\t\treturn errExpired\n\t}\n\tconn.t = time.Now()\n\n\tif conn.conn == nil {\n\t\tprefix := \"amqp://\"\n\t\tif conn.ep.AMQP.SSL {\n\t\t\tprefix = \"amqps://\"\n\t\t}\n\n\t\tvar cfg amqp.Config\n\t\tcfg.Dial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(network, addr, time.Second)\n\t\t}\n\t\tc, err := amqp.DialConfig(fmt.Sprintf(\"%s%s\", prefix, conn.ep.AMQP.URI), cfg)\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tchannel, err := c.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := channel.ExchangeDeclare(\n\t\t\tconn.ep.AMQP.QueueName,\n\t\t\tconn.ep.AMQP.Type,\n\t\t\tconn.ep.AMQP.Durable,\n\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\tconn.ep.AMQP.Internal,\n\t\t\tconn.ep.AMQP.NoWait,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif conn.ep.AMQP.Type != \"topic\" {\n\t\t\tif _, err := channel.QueueDeclare(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.Durable,\n\t\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\t\tfalse,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err := channel.QueueBind(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.RouteKey,\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tconn.conn = c\n\t\tconn.channel = channel\n\t}\n\n\treturn conn.channel.Publish(\n\t\tconn.ep.AMQP.QueueName,\n\t\tconn.ep.AMQP.RouteKey,\n\t\tconn.ep.AMQP.Mandatory,\n\t\tconn.ep.AMQP.Immediate,\n\t\tamqp.Publishing{\n\t\t\tHeaders:         amqp.Table{},\n\t\t\tContentType:     \"application/json\",\n\t\t\tContentEncoding: \"\",\n\t\t\tBody:            []byte(msg),\n\t\t\tDeliveryMode:    conn.ep.AMQP.DeliveryMode,\n\t\t\tPriority:        conn.ep.AMQP.Priority,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Endpoint struct {\n\tDSN         string\n\tExchange    string\n\tQueue       string\n\tRoutingKey  string\n}\n\ntype AMQPConn struct {\n\tmu     sync.Mutex\n\tep     Endpoint\n\tconn   *amqp.Connection\n\tchannel *amqp.Channel\n\tex     bool\n\tt      time.Time\n}\n\nfunc (a *AMQPConn) Send(msg string) error {\n\ta.mu.Lock()\n\tdefer a.mu.Unlock()\n\n\tif a.ex || a.conn == nil {\n\t\tif a.conn != nil {\n\t\t\ta.conn.Close()\n\t\t}\n\t\tif a.channel != nil {\n\t\t\ta.channel.Close()\n\t\t}\n\n\t\tconn, err := amqp.Dial(a.ep.DSN)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.conn = conn\n\n\t\tchannel, err := conn.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.channel = channel\n\n\t\tif err := a.declareExchangeAndQueue(); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\ta.ex = false\n\t\ta.t = time.Now()\n\t}\n\n\terr := a.channel.Publish(\n\t\ta.ep.Exchange,\n\t\ta.ep.RoutingKey,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(msg),\n\t\t},\n\t)\n\treturn err\n}\n\nfunc (a *AMQPConn) declareExchangeAndQueue() error {\n\tif err := a.channel.ExchangeDeclare(\n\t\ta.ep.Exchange,\n\t\t\"direct\",\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t); err != nil {\n\t\treturn err\n\t}\n\n\t_, err := a.channel.QueueDeclare(\n\t\ta.ep.Queue,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn a.channel.QueueBind(\n\t\ta.ep.Queue,\n\t\ta.ep.RoutingKey,\n\t\ta.ep.Exchange,\n\t\tfalse,\n\t\tnil,\n\t)\n}\n```"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that handles OAuth-based headless authentication by establishing a connection to a server, receiving authentication instructions, and returning a JWT token upon successful authentication.\n\nFunction Description: The `ssoLogin` function establishes a WebSocket connection to a specified endpoint for headless OAuth authentication. It listens for server messages, displays authentication instructions to the user, and waits for the JWT token to be returned. The function handles connection closure and interrupts gracefully.\n\nInput: \n- `endpoint` (string): The URL endpoint of the authentication server (e.g., \"https://example.com\")\n\nOutput: \n- `string`: The JWT authentication token received from the server after successful authentication. Returns an empty string if authentication fails or is interrupted.\n\nNote: The function includes proper error handling and connection cleanup, and it displays the authentication URL to the user when received from the server.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/gravitl/netmaker/logger\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tvar (\n\t\tauthToken string\n\t\tinterrupt = make(chan os.Signal, 1)\n\t\turl, _    = url.Parse(endpoint)\n\t\tsocketURL = fmt.Sprintf(\"wss://%s/api/oauth/headless\", url.Host)\n\t)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tconn, _, err := websocket.DefaultDialer.Dial(socketURL, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"error connecting to endpoint \", socketURL, err.Error())\n\t}\n\tdefer conn.Close()\n\t_, msg, err := conn.ReadMessage()\n\tif err != nil {\n\t\tlog.Fatal(\"error reading from server: \", err.Error())\n\t}\n\tfmt.Printf(\"Please visit:\\n %s \\n to authenticate\\n\", string(msg))\n\tdone := make(chan struct{})\n\tdefer close(done)\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif msgType < 0 {\n\t\t\t\t\tdone <- struct{}{}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(err.Error(), \"normal\") {\n\t\t\t\t\tlog.Fatal(\"read error: \", err.Error())\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif msgType == websocket.CloseMessage {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif strings.Contains(string(msg), \"JWT: \") {\n\t\t\t\tauthToken = strings.TrimPrefix(string(msg), \"JWT: \")\n\t\t\t} else {\n\t\t\t\tlogger.Log(0, \"Message from server:\", string(msg))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn authToken\n\t\tcase <-interrupt:\n\t\t\terr := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlogger.Log(0, \"write close:\", err.Error())\n\t\t\t}\n\t\t\treturn authToken\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/websocket\"\n\t\"os\"\n\t\"os/signal\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\t// Convert HTTP to WebSocket URL\n\tif len(endpoint) > 7 && endpoint[:7] == \"http://\" {\n\t\tendpoint = \"ws\" + endpoint[4:]\n\t} else if len(endpoint) > 8 && endpoint[:8] == \"https://\" {\n\t\tendpoint = \"wss\" + endpoint[5:]\n\t}\n\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt)\n\n\tconn, err := websocket.Dial(endpoint, \"\", \"http://localhost/\")\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tdefer conn.Close()\n\n\tgo func() {\n\t\t<-sigChan\n\t\tconn.Close()\n\t}()\n\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn \"\"\n\t\t}\n\t\tif string(msg) != \"\" && (string(msg)[:7] == \"http://\" || string(msg)[:8] == \"https://\") {\n\t\t\tfmt.Println(\"Please visit:\", string(msg))\n\t\t} else {\n\t\t\treturn string(msg)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)\n\n---\n\nTask Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/ghttp\"\n\t\"github.com/gogf/gf/v2/test/gtest\"\n\t\"github.com/gogf/gf/v2/util/guid\"\n)\nfunc Test_WebSocket(t *testing.T) {\n\ts := g.Server(guid.S())\n\ts.BindHandler(\"/ws\", func(r *ghttp.Request) {\n\t\tws, err := r.WebSocket()\n\t\tif err != nil {\n\t\t\tr.Exit()\n\t\t}\n\t\tfor {\n\t\t\tmsgType, msg, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = ws.WriteMessage(msgType, msg); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\ts.SetDumpRouterMap(false)\n\ts.Start()\n\tdefer s.Shutdown()\n\n\ttime.Sleep(100 * time.Millisecond)\n\tgtest.C(t, func(t *gtest.T) {\n\t\tconn, _, err := websocket.DefaultDialer.Dial(fmt.Sprintf(\n\t\t\t\"ws://127.0.0.1:%d/ws\", s.GetListenedPort(),\n\t\t), nil)\n\t\tt.AssertNil(err)\n\t\tdefer conn.Close()\n\n\t\tmsg := []byte(\"hello\")\n\t\terr = conn.WriteMessage(websocket.TextMessage, msg)\n\t\tt.AssertNil(err)\n\n\t\tmt, data, err := conn.ReadMessage()\n\t\tt.AssertNil(err)\n\t\tt.Assert(mt, websocket.TextMessage)\n\t\tt.Assert(data, msg)\n\t})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"testing\"\n\t\"strconv\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc TestWebSocketClient(t *testing.T, serverPort int) {\n\turl := \"ws://localhost:\" + strconv.Itoa(serverPort)\n\tconn, _, err := websocket.Dial(url, \"\", nil)\n\tif err != nil {\n\t\tt.Fatal(\"Dial error:\", err)\n\t}\n\tdefer conn.Close()\n\n\tmessage := \"test message\"\n\tif err := conn.WriteMessage(websocket.TextMessage, []byte(message)); err != nil {\n\t\tt.Fatal(\"Write error:\", err)\n\t}\n\n\t_, received, err := conn.ReadMessage()\n\tif err != nil {\n\t\tt.Fatal(\"Read error:\", err)\n\t}\n\n\tif string(received) != message {\n\t\tt.Errorf(\"Expected %q, got %q\", message, string(received))\n\t}\n}\n```"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a PKCE (Proof Key for Code Exchange) authorization flow in Go that handles OAuth2 token retrieval through a temporary HTTP server.\n\nStruct Description: PKCEAuthorizationFlow represents an OAuth2 authorization flow using PKCE (Proof Key for Code Exchange) mechanism. It manages the state, code verifier, and OAuth configuration needed for the flow, and provides methods to wait for and handle tokens.\n\nFields:\nproviderConfig: [internal.PKCEAuthProviderConfig] - Configuration for the PKCE auth provider\nstate: [string] - CSRF protection state value\ncodeVerifier: [string] - PKCE code verifier string\noAuthConfig: [*oauth2.Config] - OAuth2 configuration including client ID, secret, and endpoints\n\nMethods:\nWaitToken: [Name](ctx context.Context, _ AuthFlowInfo) -> (TokenInfo, error) - Main method that waits for token retrieval by starting a temporary HTTP server and handling the OAuth callback\nstartServer: [Name](server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) - Starts an HTTP server to handle OAuth callback and sends results through channels\nhandleRequest: [Name](req *http.Request) -> (*oauth2.Token, error) - Handles incoming OAuth callback request, validates state, and exchanges code for token",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/subtle\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"golang.org/x/oauth2\"\n)\n\ntype PKCEAuthorizationFlow struct {\n\tproviderConfig internal.PKCEAuthProviderConfig\n\tstate          string\n\tcodeVerifier   string\n\toAuthConfig    *oauth2.Config\n}\n\nfunc (p *PKCEAuthorizationFlow) WaitToken(ctx context.Context, _ AuthFlowInfo) (TokenInfo, error) {\n\ttokenChan := make(chan *oauth2.Token, 1)\n\terrChan := make(chan error, 1)\n\n\tparsedURL, err := url.Parse(p.oAuthConfig.RedirectURL)\n\tif err != nil {\n\t\treturn TokenInfo{}, fmt.Errorf(\"failed to parse redirect URL: %v\", err)\n\t}\n\n\tserver := &http.Server{Addr: fmt.Sprintf(\":%s\", parsedURL.Port())}\n\tdefer func() {\n\t\tshutdownCtx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\t\tdefer cancel()\n\n\t\tif err := server.Shutdown(shutdownCtx); err != nil {\n\t\t\tlog.Errorf(\"failed to close the server: %v\", err)\n\t\t}\n\t}()\n\n\tgo p.startServer(server, tokenChan, errChan)\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn TokenInfo{}, ctx.Err()\n\tcase token := <-tokenChan:\n\t\treturn p.parseOAuthToken(token)\n\tcase err := <-errChan:\n\t\treturn TokenInfo{}, err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) startServer(server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tcert := p.providerConfig.ClientCertPair\n\t\tif cert != nil {\n\t\t\ttr := &http.Transport{\n\t\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\t\tCertificates: []tls.Certificate{*cert},\n\t\t\t\t},\n\t\t\t}\n\t\t\tsslClient := &http.Client{Transport: tr}\n\t\t\tctx := context.WithValue(req.Context(), oauth2.HTTPClient, sslClient)\n\t\t\treq = req.WithContext(ctx)\n\t\t}\n\n\t\ttoken, err := p.handleRequest(req)\n\t\tif err != nil {\n\t\t\trenderPKCEFlowTmpl(w, err)\n\t\t\terrChan <- fmt.Errorf(\"PKCE authorization flow failed: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\trenderPKCEFlowTmpl(w, nil)\n\t\ttokenChan <- token\n\t})\n\n\tserver.Handler = mux\n\tif err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\terrChan <- err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) handleRequest(req *http.Request) (*oauth2.Token, error) {\n\tquery := req.URL.Query()\n\n\tif authError := query.Get(queryError); authError != \"\" {\n\t\tauthErrorDesc := query.Get(queryErrorDesc)\n\t\treturn nil, fmt.Errorf(\"%s.%s\", authError, authErrorDesc)\n\t}\n\n\tif state := query.Get(queryState); subtle.ConstantTimeCompare([]byte(p.state), []byte(state)) == 0 {\n\t\treturn nil, fmt.Errorf(\"invalid state\")\n\t}\n\n\tcode := query.Get(queryCode)\n\tif code == \"\" {\n\t\treturn nil, fmt.Errorf(\"missing code\")\n\t}\n\n\treturn p.oAuthConfig.Exchange(\n\t\treq.Context(),\n\t\tcode,\n\t\toauth2.SetAuthURLParam(\"code_verifier\", p.codeVerifier),\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"golang.org/x/oauth2\"\n)\n\ntype PKCEAuthorizationFlow struct {\n\tproviderConfig [internal.PKCEAuthProviderConfig]\n\tstate          string\n\tcodeVerifier   string\n\toAuthConfig    *oauth2.Config\n}\n\nfunc (f *PKCEAuthorizationFlow) WaitToken(ctx context.Context, _ AuthFlowInfo) (TokenInfo, error) {\n\tserver := &http.Server{\n\t\tAddr: \":8080\",\n\t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\ttoken, err := f.handleRequest(r)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Fprintf(w, \"Token received: %s\", token.AccessToken)\n\t\t}),\n\t}\n\ttokenChan := make(chan *oauth2.Token)\n\terrChan := make(chan error)\n\tgo f.startServer(server, tokenChan, errChan)\n\tselect {\n\tcase token := <-tokenChan:\n\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\t\tdefer cancel()\n\t\tif err := server.Shutdown(ctx); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn TokenInfo{AccessToken: token.AccessToken}, nil\n\tcase err := <-errChan:\n\t\treturn nil, err\n\tcase <-ctx.Done():\n\t\treturn nil, ctx.Err()\n\t}\n}\n\nfunc (f *PKCEAuthorizationFlow) startServer(server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) {\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\terrChan <- err\n\t\t}\n\t}()\n}\n\nfunc (f *PKCEAuthorizationFlow) handleRequest(r *http.Request) (*oauth2.Token, error) {\n\tif r.URL.Query().Get(\"state\") != f.state {\n\t\treturn nil, fmt.Errorf(\"invalid state\")\n\t}\n\tcode := r.URL.Query().Get(\"code\")\n\tif code == \"\" {\n\t\treturn nil, fmt.Errorf(\"missing code\")\n\t}\n\ttoken, err := f.oAuthConfig.Exchange(r.Context(), code, oauth2.SetAuthURLParam(\"code_verifier\", f.codeVerifier))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn token, nil\n}\n\ntype AuthFlowInfo struct{}\ntype TokenInfo struct {\n\tAccessToken string\n}\n```"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that establishes multiple concurrent connections to a WebSocket server, maintains these connections, and handles incoming messages. The client should be able to gracefully handle connection errors and properly close connections when done.\n\nFunction Description: The function establishes WebSocket connections to a specified server endpoint with unique identifiers, maintains these connections in separate goroutines, and continuously reads incoming messages. Each connection includes user identification and authentication parameters in the URL query string.\n\nInput: \n- None (The function uses hardcoded values for demonstration, but could be modified to accept parameters like host, port, path, and connection count)\n\nOutput: \n- None (The function primarily logs its activities and errors to stdout)\n\nNote: The function runs indefinitely until 100,000 connections are established (for testing purposes), with each connection attempt spaced by 1 second. Each connection runs in its own goroutine and includes error handling for both connection establishment and message reading.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\ti := 0\n\tfor {\n\t\ti++\n\t\tif i == 100000 {\n\t\t\tfmt.Println(\"\u5df2\u7ecf\u4e86\u89e310000\u4e2a\u94fe\u63a5\")\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t\tgo func(id int) {\n\t\t\tu := url.URL{Scheme: \"ws\", Host: \"127.0.0.1:8182\", Path: \"/v1/push\", RawQuery: fmt.Sprintf(\"uid=%d&sign=2&time=%d\", id, time.Now().Unix())}\n\t\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"\u94fe\u63a5\u5730\u5740%s,\u5931\u8d25\u539f\u56e0%s\", u.String(), err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer c.Close()\n\t\t\tfor {\n\t\t\t\t_, _, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"ERR_ERR_ERR_ERR_ERR_ERR_read:\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/gorilla/websocket\"\n)\n\nconst (\n\thost           = \"example.com\"\n\tport           = \"8080\"\n\tpath           = \"/ws\"\n\tmaxConnections = 100000\n)\n\nfunc main() {\n\tfor i := 0; i < maxConnections; i++ {\n\t\tgo func(id int) {\n\t\t\tu := url.URL{\n\t\t\t\tScheme:   \"ws\",\n\t\t\t\tHost:     host + \":\" + port,\n\t\t\t\tPath:     path,\n\t\t\t\tRawQuery: fmt.Sprintf(\"user=%d&auth=secret\", id),\n\t\t\t}\n\t\t\turlStr := u.String()\n\t\t\tdialer := &websocket.Dialer{}\n\t\t\tconn, _, err := dialer.Dial(urlStr, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Connection failed for user %d: %v\\n\", id, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer conn.Close()\n\t\t\tlog.Printf(\"Connected as user %d\\n\", id)\n\t\t\tfor {\n\t\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Read error for user %d: %v\\n\", id, err)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"User %d received: %s\\n\", id, msg)\n\t\t\t}\n\t\t}(i)\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}"
  },
  {
    "Task_id": 342,
    "Instruction": "Task Description: Create a WebSocket client in Go that connects to a server, sends periodic messages, receives messages from the server, and handles graceful shutdown upon interruption.\n\nFunction Description: The main function establishes a WebSocket connection to a specified server, sets up message reading and writing routines, and handles interrupt signals for graceful termination. It continuously sends timestamp messages at regular intervals while concurrently listening for incoming messages from the server.\n\nInput:\n- Command line argument (flag): addr - string - WebSocket server address (e.g., \"localhost:8080\")\n- Implicit input: System interrupt signal (SIGINT)\n\nOutput:\n- Console logs: Connection status, received messages, and error messages\n- WebSocket messages: Sends timestamp messages to server and receives messages from server\n- Return value: None (program runs until interrupted)\n\nNote: The function uses goroutines for concurrent operations and channels for synchronization and interrupt handling.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tu := url.URL{Scheme: \"ws\", Host: *addr, Path: \"/echo\"}\n\tlog.Printf(\"connecting to %s\", u.String())\n\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar addr = flag.String(\"addr\", \"localhost:8080\", \"WebSocket server address\")\n\nfunc main() {\n\tflag.Parse()\n\n\tsignalChan := make(chan os.Signal, 1)\n\tsignal.Notify(signalChan, os.Interrupt)\n\n\tdialer := &websocket.Dialer{}\n\tconn, _, err := dialer.Dial(\"ws://\"+*addr, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"Dial error:\", err)\n\t}\n\tdefer conn.Close()\n\n\tfmt.Println(\"Connected to WebSocket server\")\n\n\tgo func() {\n\t\t<-signalChan\n\t\tfmt.Println(\"\\nInterrupt received, closing connection...\")\n\t\tconn.Close()\n\t}()\n\n\tgo func() {\n\t\tticker := time.NewTicker(1 * time.Second)\n\t\tdefer ticker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tmsg := fmt.Sprintf(\"Timestamp: %v\", time.Now().UnixNano())\n\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, []byte(msg)); err != nil {\n\t\t\t\t\tlog.Println(\"Write error:\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Sent: %s\\n\", msg)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Read error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\"Received: %s\\n\", msg)\n\t}\n\n\tfmt.Println(\"Connection closed\")\n}\n```"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: The task involves testing a WebSocket connection to a runtime service, verifying the connection establishment, message exchange, and validating the received runtime information against expected values.\n\nFunction Description: The function `TestRuntimeGetRuntime` tests the WebSocket-based communication with a runtime service. It establishes a connection, sends a request message, receives and parses the response, then validates the response contents including protocol, version, capabilities, and runtime ID.\n\nInput: \n- None (This is a test function that takes a testing.T pointer as per Go testing conventions)\n\nOutput: \n- None (The function reports errors through the testing.T parameter if any assertions fail)\n- Side effect: The test will pass if all validations succeed or fail with appropriate error messages if any checks don't match expected values",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tensureRuntimeStarted()\n\tws, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:13014/\", nil)\n\tdefer ws.Close()\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif err = sendJSONE(ws, &Message{\"runtime\", \"getruntime\", nil}); err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tvar msg runtimeMessage\n\tvar bytes []byte\n\tif _, bytes, err = ws.ReadMessage(); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif err = json.Unmarshal(bytes, &msg); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif msg.Protocol != \"runtime\" || msg.Command != \"runtime\" {\n\t\tt.Errorf(\"Invalid protocol (%s) or command (%s)\", msg.Protocol, msg.Command)\n\t\treturn\n\t}\n\tres := msg.Payload\n\tif res.Type != \"goflow\" {\n\t\tt.Errorf(\"Invalid protocol type: %s\\n\", res.Type)\n\t}\n\tif res.Version != \"0.4\" {\n\t\tt.Errorf(\"Invalid protocol version: %s\\n\", res.Version)\n\t}\n\tif len(res.Capabilities) != 5 {\n\t\tt.Errorf(\"Invalid number of supported capabilities: %v\\n\", res.Capabilities)\n\t}\n\tif res.Id == \"\" {\n\t\tt.Error(\"Runtime Id is empty\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"testing\"\n\t\"github.com/gorilla/websocket\"\n\t\"encoding/json\"\n\t\"reflect\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tconn, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:8080/runtime\", nil)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\trequest := map[string]string{\"type\": \"get_runtime\"}\n\tif err := conn.WriteJSON(request); err != nil {\n\t\tt.Fatalf(\"Failed to send message: %v\", err)\n\t}\n\n\tvar response map[string]interface{}\n\tif err := conn.ReadJSON(&response); err != nil {\n\t\tt.Fatalf(\"Failed to read response: %v\", err)\n\t}\n\n\texpectedProtocol := \"websocket\"\n\tif protocol, ok := response[\"protocol\"].(string); !ok || protocol != expectedProtocol {\n\t\tt.Errorf(\"Expected protocol %q, got %v\", expectedProtocol, protocol)\n\t}\n\n\texpectedVersion := \"1.0\"\n\tif version, ok := response[\"version\"].(string); !ok || version != expectedVersion {\n\t\tt.Errorf(\"Expected version %q, got %v\", expectedVersion, version)\n\t}\n\n\texpectedCapabilities := []string{\"read\", \"write\"}\n\tif capabilities, ok := response[\"capabilities\"].([]interface{}); !ok {\n\t\tt.Errorf(\"Capabilities field is not a slice\")\n\t} else {\n\t\tcapStrs := make([]string, len(capabilities))\n\t\tfor i, v := range capabilities {\n\t\t\tcapStrs[i] = v.(string)\n\t\t}\n\t\tif !reflect.DeepEqual(capStrs, expectedCapabilities) {\n\t\t\tt.Errorf(\"Expected capabilities %v, got %v\", expectedCapabilities, capStrs)\n\t\t}\n\t}\n\n\texpectedRuntimeID := \"runtime-12345\"\n\tif runtimeID, ok := response[\"runtime_id\"].(string); !ok || runtimeID != expectedRuntimeID {\n\t\tt.Errorf(\"Expected runtime ID %q, got %v\", expectedRuntimeID, runtimeID)\n\t}\n}\n```"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Implement a WebSocket client in Go that connects to a server, handles incoming messages, and manages connection lifecycle including reconnection logic and graceful shutdown.\n\nFunction Description: The function establishes a WebSocket connection to a specified server endpoint, listens for incoming messages, and prints them to stdout/stderr based on message content. It handles connection errors by implementing automatic reconnection logic and supports graceful shutdown upon receiving an interrupt signal.\n\nInput: None (uses package-level configuration variables for connection details)\n\nOutput: None (writes directly to stdout/stderr, logs to console)\n\nNote: The function relies on several external configuration variables:\n- config.Config.Tap.Proxy.Host (string) - Server hostname\n- config.Config.Tap.Proxy.Front.Port (int) - Server port\n- config.Config.License (string) - License key for authentication\n- kubernetes.GetHubUrl() (string) - Function to get hub URL for health checks",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/kubeshark/kubeshark/config\"\n\t\"github.com/kubeshark/kubeshark/utils\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc runConsoleWithoutProxy() {\n\tlog.Info().Msg(\"Starting scripting console ...\")\n\ttime.Sleep(5 * time.Second)\n\thubUrl := kubernetes.GetHubUrl()\n\tfor {\n\t\tresponse, err := http.Get(fmt.Sprintf(\"%s/echo\", hubUrl))\n\t\tif err != nil || response.StatusCode != 200 {\n\t\t\tlog.Info().Msg(fmt.Sprintf(utils.Yellow, \"Couldn't connect to Hub.\"))\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tinterrupt := make(chan os.Signal, 1)\n\t\tsignal.Notify(interrupt, os.Interrupt)\n\n\t\tlog.Info().Str(\"host\", config.Config.Tap.Proxy.Host).Str(\"url\", hubUrl).Msg(\"Connecting to:\")\n\t\tu := url.URL{\n\t\t\tScheme: \"ws\",\n\t\t\tHost:   fmt.Sprintf(\"%s:%d\", config.Config.Tap.Proxy.Host, config.Config.Tap.Proxy.Front.Port),\n\t\t\tPath:   \"/api/scripts/logs\",\n\t\t}\n\t\theaders := http.Header{}\n\t\theaders.Set(utils.X_KUBESHARK_CAPTURE_HEADER_KEY, utils.X_KUBESHARK_CAPTURE_HEADER_IGNORE_VALUE)\n\t\theaders.Set(\"License-Key\", config.Config.License)\n\n\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), headers)\n\t\tif err != nil {\n\t\t\tlog.Error().Err(err).Msg(\"Websocket dial error, retrying in 5 seconds...\")\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tdefer c.Close()\n\n\t\tdone := make(chan struct{})\n\n\t\tgo func() {\n\t\t\tdefer close(done)\n\t\t\tfor {\n\t\t\t\t_, message, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Error().Err(err).Msg(\"Error reading websocket message, reconnecting...\")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tmsg := string(message)\n\t\t\t\tif strings.Contains(msg, \":ERROR]\") {\n\t\t\t\t\tmsg = fmt.Sprintf(utils.Red, msg)\n\t\t\t\t\tfmt.Fprintln(os.Stderr, msg)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Fprintln(os.Stdout, msg)\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\n\t\tticker := time.NewTicker(time.Second)\n\t\tdefer ticker.Stop()\n\n\t\tselect {\n\t\tcase <-done:\n\t\t\tlog.Warn().Msg(fmt.Sprintf(utils.Yellow, \"Connection closed, reconnecting...\"))\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\tcase <-interrupt:\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Error().Err(err).Send()\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\thost := config.Config.Tap.Proxy.Host\n\tport := config.Config.Tap.Proxy.Front.Port\n\tlicense := config.Config.License\n\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt)\n\n\tfor {\n\t\turl := fmt.Sprintf(\"ws://%s:%d?license=%s\", host, port, license)\n\t\tconn, _, err := websocket.DefaultDialer.Dial(url, nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to connect: %v\\n\", err)\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-sigChan:\n\t\t\t\tfmt.Println(\"Received interrupt, closing connection...\")\n\t\t\t\tconn.Close()\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Fprintf(os.Stderr, \"Connection closed: %v\\n\", err)\n\t\t\t\t\tconn.Close()\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tfmt.Println(string(msg))\n\t\t\t}\n\t\t}\n\n\t\ttime.Sleep(5 * time.Second)\n\t}\n}\n```"
  },
  {
    "Task_id": 347,
    "Instruction": "Task Description: Implement a WebSocket handler for shell communication that manages bidirectional data transfer between local and remote connections, including connection upgrading, message forwarding, and proper connection cleanup.\n\nStruct Description: The Shell struct represents a shell session manager that maintains active connections and handles WebSocket communication for shell data transfer.\n\nFields:\n- Name: string - Identifier for the shell session\n- links: map[string]*Link - Map of active connections indexed by connection ID\n- RWMutex: sync.RWMutex - Synchronization primitive for thread-safe access to the links map\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages bidirectional data forwarding between local and remote connections\n- localForward: (id string, local *websocket.Conn) -> None - Reads data from local WebSocket connection and forwards to remote\n- remoteForward: (id string, local *websocket.Conn) -> None - Reads data from remote connection and forwards to local WebSocket",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/natpass/code/utils\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype Shell struct {\n\tName string\n\tlinks map[string]*Link\n\tsync.RWMutex\n}\n\nfunc (shell *Shell) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlogging.Error(\"upgrade websocket failed: %s, err=%v\", shell.Name, err)\n\t\thttp.Error(w, err.Error(), http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tdefer local.Close()\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tshell.localForward(id, local)\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tshell.remoteForward(id, local)\n\t}()\n\twg.Wait()\n}\n\nfunc (shell *Shell) localForward(id string, local *websocket.Conn) {\n\tdefer utils.Recover(\"localForward\")\n\tdefer local.Close()\n\tshell.RLock()\n\tlink := shell.links[id]\n\tshell.RUnlock()\n\tdefer link.Close(true)\n\tfor {\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"read local data for %s failed: %v\", shell.Name, err)\n\t\t\treturn\n\t\t}\n\t\tlink.SendData(data)\n\t\tlogging.Debug(\"local read %d bytes: name=%s, id=%s\", len(data), shell.Name, id)\n\t}\n}\n\nfunc (shell *Shell) remoteForward(id string, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteForward\")\n\tdefer local.Close()\n\tshell.RLock()\n\tlink := shell.links[id]\n\tshell.RUnlock()\n\tch := link.remote.ChanRead(id)\n\tdefer link.Close(true)\n\tfor {\n\t\tmsg := <-ch\n\t\tif msg == nil {\n\t\t\treturn\n\t\t}\n\t\tdata, _ := proto.Marshal(msg)\n\t\tlink.recvBytes += uint64(len(data))\n\t\tlink.recvPacket++\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_shell_data:\n\t\t\terr := local.WriteMessage(websocket.TextMessage, msg.GetSdata().GetData())\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"write data for %s failed: %v\", shell.Name, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlogging.Debug(\"remote read %d bytes: name=%s, id=%s\",\n\t\t\t\tlen(msg.GetSdata().GetData()), shell.Name, id)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"sync\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Link struct {\n\tRemote *websocket.Conn\n}\n\ntype Shell struct {\n\tName   string\n\tlinks  map[string]*Link\n\tsync.RWMutex\n}\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc (s *Shell) WS(conn *http.Conn, w http.ResponseWriter, r *http.Request) {\n\twsConn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tid := generateID()\n\n\tlink := &Link{\n\t\tRemote: nil,\n\t}\n\n\ts.Lock()\n\ts.links[id] = link\n\ts.Unlock()\n\n\tgo s.localForward(id, wsConn)\n\tgo s.remoteForward(id, wsConn)\n}\n\nfunc (s *Shell) localForward(id string, local *websocket.Conn) {\n\tfor {\n\t\t_, msg, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\ts.Lock()\n\t\t\tdelete(s.links, id)\n\t\t\ts.Unlock()\n\t\t\treturn\n\t\t}\n\n\t\ts.RLock()\n\t\tlink, ok := s.links[id]\n\t\ts.RUnlock()\n\t\tif !ok {\n\t\t\treturn\n\t\t}\n\n\t\tif err := link.Remote.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\t\ts.Lock()\n\t\t\tdelete(s.links, id)\n\t\t\ts.Unlock()\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (s *Shell) remoteForward(id string, local *websocket.Conn) {\n\ts.RLock()\n\tlink, ok := s.links[id]\n\ts.RUnlock()\n\tif !ok {\n\t\treturn\n\t}\n\n\tfor {\n\t\t_, msg, err := link.Remote.ReadMessage()\n\t\tif err != nil {\n\t\t\ts.Lock()\n\t\t\tdelete(s.links, id)\n\t\t\ts.Unlock()\n\t\t\treturn\n\t\t}\n\n\t\tif err := local.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\t\ts.Lock()\n\t\t\tdelete(s.links, id)\n\t\t\ts.Unlock()\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc generateID() string {\n\treturn \"id-12345\"\n}\n```"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a WebSocket proxy struct in Go that can handle WebSocket connections by forwarding messages between a client and a backend server.\n\nStruct Description: The `WebsocketProxy` struct is a reverse proxy for WebSocket connections. It upgrades incoming HTTP connections to WebSocket, connects to a backend WebSocket server, and forwards messages bidirectionally between the client and backend.\n\nFields:\n- Director: `func(incoming *http.Request, out http.Header)` - Optional function to modify the request headers before connecting to the backend.\n- Backend: `func(*http.Request) *url.URL` - Required function that returns the backend URL to connect to.\n- Upgrader: `*websocket.Upgrader` - Optional WebSocket upgrader configuration for client connections.\n- Dialer: `*websocket.Dialer` - Optional WebSocket dialer configuration for backend connections.\n\nMethods:\n- ServeHTTP: `(rw http.ResponseWriter, req *http.Request)` -> `None` - Main handler method that implements the http.Handler interface. It upgrades the client connection, connects to the backend, and sets up bidirectional message forwarding.\n  - Input Parameters:\n    - rw: `http.ResponseWriter` - The HTTP response writer\n    - req: `*http.Request` - The HTTP request\n  - Description: Handles the WebSocket proxy logic including connection upgrading, backend dialing, and message replication between client and backend.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == nil {\n\t\tif prior, ok := req.Header[\"X-Forwarded-For\"]; ok {\n\t\t\tclientIP = strings.Join(prior, \", \") + \", \" + clientIP\n\t\t}\n\t\trequestHeader.Set(\"X-Forwarded-For\", clientIP)\n\t}\n\n\trequestHeader.Set(\"X-Forwarded-Proto\", \"http\")\n\tif req.TLS != nil {\n\t\trequestHeader.Set(\"X-Forwarded-Proto\", \"https\")\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\treplicateWebsocketConn := func(dst, src *websocket.Conn, errc chan error) {\n\t\tfor {\n\t\t\tmsgType, msg, err := src.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\t\tif e, ok := err.(*websocket.CloseError); ok {\n\t\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\terrc <- err\n\t\t\t\tdst.WriteMessage(websocket.CloseMessage, m)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = dst.WriteMessage(msgType, msg)\n\t\t\tif err != nil {\n\t\t\t\terrc <- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\tif e, ok := err.(*websocket.CloseError); !ok || e.Code == websocket.CloseAbnormalClosure {\n\t\tlog.Printf(message, err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/url\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(*http.Request, http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tvar upgrader *websocket.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{}\n\t} else {\n\t\tupgrader = w.Upgrader\n\t}\n\n\tclientConn, err := upgrader.Upgrade(rw, req, nil)\n\tif err != nil {\n\t\thttp.Error(rw, \"Upgrade error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\thttp.Error(rw, \"Backend URL not provided\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\theaders := make(http.Header)\n\tif w.Director != nil {\n\t\tw.Director(req, headers)\n\t}\n\n\tvar dialer *websocket.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = &websocket.Dialer{}\n\t} else {\n\t\tdialer = w.Dialer\n\t}\n\n\tbackendConn, _, err := dialer.Dial(backendURL.String(), headers)\n\tif err != nil {\n\t\thttp.Error(rw, \"Dial error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tmessageType, msg, err := clientConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t\terr = backendConn.WriteMessage(messageType, msg)\n\t\t\tif err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor {\n\t\t\tmessageType, msg, err := backendConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t\terr = clientConn.WriteMessage(messageType, msg)\n\t\t\tif err != nil {\n\t\t\t\tclientConn.Close()\n\t\t\t\tbackendConn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, manages WebSocket connections, and handles message reading.\n\nFunction Description: The function `NotifyWS` handles WebSocket connections by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It adds the new WebSocket connection to a global list of connections and ensures a message-sending service is running. The function then continuously reads messages from the WebSocket connection until it is closed.\n\nInput: \n- `ctx echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails, otherwise returns `nil` after the WebSocket connection is closed.\n\nNote: The function does not explicitly return any output other than potential errors, but it interacts with global state (`service.WebSocketConns` and `service.SocketRun`) and performs I/O operations on the WebSocket connection.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/IceWhaleTech/CasaOS/service\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nvar upGrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc NotifyWS(ctx echo.Context) error {\n\tws, err := upGrader.Upgrade(ctx.Response().Writer, ctx.Request(), nil)\n\tif err != nil {\n\t\treturn nil\n\t}\n\tdefer ws.Close()\n\tservice.WebSocketConns = append(service.WebSocketConns, ws)\n\n\tif !service.SocketRun {\n\t\tservice.SocketRun = true\n\t\tservice.SendMeg()\n\t}\n\tfor {\n\t\tmt, message, err := ws.ReadMessage()\n\t\tfmt.Println(mt, message, err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "```go\nfunc NotifyWS(ctx echo.Context) error {\n\tconn, err := upgrader.Upgrade(ctx.Request(), ctx.Response(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tservice.WebSocketConns = append(service.WebSocketConns, conn)\n\tif !service.SocketRun {\n\t\tgo service.Run()\n\t}\n\tfor {\n\t\t_, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Create a WebSocket handler function that establishes an SSH connection through a WebSocket interface, allowing for terminal-like interaction with a remote host.\n\nFunction Description: The function `ConnectSshPmExec` handles WebSocket connections to facilitate SSH terminal sessions. It upgrades an HTTP connection to WebSocket, validates host credentials, establishes an SSH connection, and manages bidirectional communication between the WebSocket client and SSH server. The function includes error handling and resource cleanup.\n\nInput:\n- `c` (gin.Context) - Gin framework context for HTTP request handling\n- `username` (string) - Username for authentication (unused in current implementation)\n- `envName` (string) - Environment name (unused in current implementation)\n- `productName` (string) - Product name (unused in current implementation)\n- `ip` (string) - IP address of the target host\n- `hostId` (string) - Identifier for the host's private key\n- `cols` (int) - Terminal column size\n- `rows` (int) - Terminal row size\n- `log` (*zap.SugaredLogger) - Logger for error reporting\n\nOutput:\n- `error` - Returns nil on success, or an error object if any step fails",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/ssh\"\n\n\tcommonrepo \"github.com/koderover/zadig/v2/pkg/microservice/aslan/core/common/repository/mongodb\"\n\t\"github.com/koderover/zadig/v2/pkg/setting\"\n\te \"github.com/koderover/zadig/v2/pkg/tool/errors\"\n\ttoolssh \"github.com/koderover/zadig/v2/pkg/tool/ssh\"\n\t\"github.com/koderover/zadig/v2/pkg/tool/wsconn\"\n\t\"github.com/koderover/zadig/v2/pkg/util\"\n)\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\nfunc ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tws, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"ws upgrade err:%s\", err)\n\t\treturn e.ErrLoginPm.AddErr(err)\n\t}\n\n\tdefer ws.Close()\n\tresp, err := commonrepo.NewPrivateKeyColl().Find(commonrepo.FindPrivateKeyOption{\n\t\tID: hostId,\n\t})\n\tif err != nil {\n\t\tlog.Errorf(\"PrivateKey.Find ip %s id %s error: %s\", ip, hostId, err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrGetPrivateKey.Error()))\n\t\treturn e.ErrGetPrivateKey\n\n\t}\n\tif resp.Status != setting.PMHostStatusNormal {\n\t\tlog.Errorf(\"host %s status %s, is not normal\", ip, resp.Status)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s status %s,is not normal\", ip, resp.Status))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.ScheduleWorkflow {\n\t\tlog.Errorf(\"host %s is not enable login\", ip)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s is not enable ssh\", ip))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.Port == 0 {\n\t\tresp.Port = setting.PMHostDefaultPort\n\t}\n\n\tsDec, err := base64.StdEncoding.DecodeString(resp.PrivateKey)\n\tif err != nil {\n\t\tlog.Errorf(\"base64 decode failed ip:%s, error:%s\", ip, err)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"base64 decode failed ip:%s, error:%s\", ip, err))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\n\tsshCli, err := toolssh.NewSshCli(sDec, resp.UserName, resp.IP, resp.Port)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshCli err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshCli.Close()\n\n\tsshConn, err := wsconn.NewSshConn(cols, rows, sshCli)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshConn err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshConn.Close()\n\n\tstopChan := make(chan bool, 3)\n\tgo sshConn.ReadWsMessage(ws, stopChan)\n\tgo sshConn.SendWsWriteMessage(ws, stopChan)\n\tgo sshConn.SessionWait(stopChan)\n\n\t<-stopChan\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "```go\nfunc ConnectSshPmExec(c *gin.Context, username string, envName string, productName string, ip string, hostId string, cols int, rows int, log *zap.SugaredLogger) error {\n    upgrader := websocket.Upgrader{\n        CheckOrigin: func(r *http.Request) bool {\n            return true\n        },\n    }\n    conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n    if err != nil {\n        log.Errorf(\"Failed to upgrade to WebSocket: %v\", err)\n        return err\n    }\n    defer conn.Close()\n\n    privateKey, err := loadPrivateKey(hostId)\n    if err != nil {\n        log.Errorf(\"Failed to load private key: %v\", err)\n        return err\n    }\n\n    sshConfig := &ssh.ClientConfig{\n        User: username,\n        Auth: []ssh.AuthMethod{\n            ssh.PublicKeys(privateKey),\n        },\n        HostKeyCallback: ssh.InsecureIgnoreHostKey(),\n    }\n\n    sshConn, err := ssh.Dial(\"tcp\", ip+\":22\", sshConfig)\n    if err != nil {\n        log.Errorf(\"Failed to dial SSH: %v\", err)\n        return err\n    }\n    defer sshConn.Close()\n\n    session, err := sshConn.NewSession()\n    if err != nil {\n        log.Errorf(\"Failed to create SSH session: %v\", err)\n        return err\n    }\n    defer session.Close()\n\n    if err := session.RequestPty(\"xterm\", rows, cols, ssh.TerminalModes{}); err != nil {\n        log.Errorf(\"Failed to request PTY: %v\", err)\n        return err\n    }\n\n    if err := session.Shell(); err != nil {\n        log.Errorf(\"Failed to start shell: %v\", err)\n        return err\n    }\n\n    go func() {\n        for {\n            _, msg, err := conn.ReadMessage()\n            if err != nil {\n                log.Errorf(\"WebSocket read error: %v\", err)\n                return\n            }\n            if _, err := session.Stdin.Write(msg); err != nil {\n                log.Errorf(\"SSH stdin write error: %v\", err)\n                return\n            }\n        }\n    }()\n\n    go func() {\n        buf := make([]byte, 1024)\n        for {\n            n, err := session.Stdout.Read(buf)\n            if err != nil {\n                if err == io.EOF {\n                    log.Info(\"SSH stdout closed\")\n                    return\n                }\n                log.Errorf(\"SSH stdout read error: %v\", err)\n                return\n            }\n            if err := conn.WriteMessage(websocket.TextMessage, buf[:n]); err != nil {\n                log.Errorf(\"WebSocket write error: %v\", err)\n                return\n            }\n        }\n    }()\n\n    return nil\n}\n\nfunc loadPrivateKey(hostId string) (ssh.Signer, error) {\n    // Placeholder implementation; replace with actual key loading logic\n    return nil, fmt.Errorf(\"private key loading not implemented\")\n}\n```"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Implement a WebSocket handler for VNC (Virtual Network Computing) functionality that enables remote desktop interaction through a WebSocket connection, including image transmission, clipboard sharing, and input event handling.\n\nStruct Description: The VNC struct represents a VNC over WebSocket handler that manages the connection between a client and a remote VNC server, facilitating bidirectional communication for remote desktop operations.\n\nFields:\n- link: *network.Link - Represents the network link to the remote VNC server\n- chClipboard: chan string - Channel for transmitting clipboard content between client and server\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages the VNC session lifecycle\n- remoteRead: (ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) -> None - Processes incoming messages from the remote VNC server\n- localRead: (ctx context.Context, local *websocket.Conn, remote *conn.Conn) -> None - Handles messages received from the WebSocket client\n- mouseEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse movement and click events\n- keyboardEvent: (remote *conn.Conn, data []byte) -> None - Handles keyboard input events\n- cadEvent: (remote *conn.Conn) -> None - Manages Ctrl+Alt+Del special key combination\n- scrollEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse scroll wheel events",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/binary\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"image\"\n\t\"image/draw\"\n\t\"image/jpeg\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/runtime\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype VNC struct {\n\tlink         *network.Link\n\tchClipboard  chan string\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer local.Close()\n\tch := conn.ChanRead(id)\n\tdefer conn.SendDisconnect(v.link.target, v.link.id)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.remoteRead(ctx, ch, local)\n\t}()\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.localRead(ctx, local, conn)\n\t}()\n\twg.Wait()\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteRead\")\n\tfor {\n\t\tvar msg *network.Msg\n\t\tselect {\n\t\tcase msg = <-ch:\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_vnc_image:\n\t\t\tdata, err := decodeImage(msg.GetVimg())\n\t\t\truntime.Assert(err)\n\t\t\treplyImage(local, msg.GetVimg(), data, len(msg.GetVimg().GetData()))\n\t\tcase network.Msg_vnc_clipboard:\n\t\t\tv.chClipboard <- msg.GetVclipboard()\n\t\tdefault:\n\t\t\tlogging.Error(\"on message: %s\", msg.GetXType().String())\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tdefer utils.Recover(\"localRead\")\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"local read: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tvar msg struct {\n\t\t\tAction string `json:\"action\"`\n\t\t}\n\t\terr = json.Unmarshal(data, &msg)\n\t\tif err != nil {\n\t\t\tlogging.Error(\"unmarshal: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tswitch msg.Action {\n\t\tcase \"mouse\":\n\t\t\tv.mouseEvent(remote, data)\n\t\tcase \"keyboard\":\n\t\t\tv.keyboardEvent(remote, data)\n\t\tcase \"cad\":\n\t\t\tv.cadEvent(remote)\n\t\tcase \"scroll\":\n\t\t\tv.scrollEvent(remote, data)\n\t\t}\n\t}\n}\n\nfunc decodeImage(data *network.VncImage) ([]byte, error) {\n\tswitch data.GetEncode() {\n\tcase network.VncImage_raw:\n\t\treturn data.GetData(), nil\n\tcase network.VncImage_jpeg:\n\t\timg, err := jpeg.Decode(bytes.NewReader(data.GetData()))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\trect := img.Bounds()\n\t\traw := image.NewRGBA(rect)\n\t\tdraw.Draw(raw, rect, img, rect.Min, draw.Src)\n\t\treturn raw.Pix, nil\n\tcase network.VncImage_png:\n\t}\n\treturn nil, errors.New(\"unsupported\")\n}\n\nfunc replyImage(conn *websocket.Conn, msg *network.VncImage, data []byte, srcSize int) {\n\tinfo := msg.GetXInfo()\n\tbuf := make([]byte, len(data)+28)\n\tbinary.BigEndian.PutUint32(buf, info.GetScreenWidth())\n\tbinary.BigEndian.PutUint32(buf[4:], info.GetScreenHeight())\n\tbinary.BigEndian.PutUint32(buf[8:], info.GetRectX())\n\tbinary.BigEndian.PutUint32(buf[12:], info.GetRectY())\n\tbinary.BigEndian.PutUint32(buf[16:], info.GetRectWidth())\n\tbinary.BigEndian.PutUint32(buf[20:], info.GetRectHeight())\n\tbinary.BigEndian.PutUint32(buf[24:], uint32(srcSize))\n\tcopy(buf[28:], data)\n\tconn.WriteMessage(websocket.BinaryMessage, buf)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "```go\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tupgrade := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool { return true },\n\t}\n\tsocket, err := upgrade.Upgrade(w, r, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer socket.Close()\n\n\tgo v.remoteRead(context.Background(), v.link.MsgChan(), socket)\n\tgo v.localRead(context.Background(), socket, conn)\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tfor {\n\t\tselect {\n\t\tcase msg := <-ch:\n\t\t\tif err := local.WriteMessage(websocket.BinaryMessage, msg.Data); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tfor {\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tswitch data[0] {\n\t\tcase 'm':\n\t\t\tv.mouseEvent(remote, data[1:])\n\t\tcase 'k':\n\t\t\tv.keyboardEvent(remote, data[1:])\n\t\tcase 'c':\n\t\t\tv.chClipboard <- string(data[1:])\n\t\tcase 'd':\n\t\t\tv.cadEvent(remote)\n\t\tcase 's':\n\t\t\tv.scrollEvent(remote, data[1:])\n\t\t}\n\t}\n}\n\nfunc (v *VNC) mouseEvent(remote *conn.Conn, data []byte) {\n\tremote.Send(&network.Msg{Type: \"mouse\", Data: data})\n}\n\nfunc (v *VNC) keyboardEvent(remote *conn.Conn, data []byte) {\n\tremote.Send(&network.Msg{Type: \"keyboard\", Data: data})\n}\n\nfunc (v *VNC) cadEvent(remote *conn.Conn) {\n\tremote.Send(&network.Msg{Type: \"cad\", Data: nil})\n}\n\nfunc (v *VNC) scrollEvent(remote *conn.Conn, data []byte) {\n\tremote.Send(&network.Msg{Type: \"scroll\", Data: data})\n}\n```"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Implement a Go struct that tests the health of an NTP (Network Time Protocol) server by checking its stratum level through UDP communication.\n\nStruct Description: The NtpHealthTester struct is responsible for verifying the health of an NTP server by establishing a UDP connection, sending a query, and validating the server's response based on its stratum level. The struct includes methods for testing the server and providing a string representation of the maximum allowed stratum.\n\nFields:\nmaxStratum: int - The maximum acceptable stratum level for the NTP server to be considered healthy.\n\nMethods:\nTest: (ht *HealthTest) -> bool - Tests the health of an NTP server by sending a UDP packet and validating the response. Returns true if the server's stratum is within the acceptable range, false otherwise.\nString: () -> string - Returns a string representation of the maximum allowed stratum level.\nnewNtpHealthTester: (params map[string]interface{}, htp *HealthTestParameters) -> HealthTester - A constructor function that creates a new NtpHealthTester instance with the specified maximum stratum level.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n)\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc (t *NtpHealthTester) Test(ht *HealthTest) bool {\n\tudpAddress, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(ht.ipAddress.String(), \"123\"))\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdata := make([]byte, 48)\n\tdata[0] = 4<<3 | 3\n\n\tconn, err := net.DialUDP(\"udp\", nil, udpAddress)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdefer conn.Close()\n\n\t_, err = conn.Write(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tconn.SetDeadline(time.Now().Add(ht.timeout))\n\n\t_, err = conn.Read(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tstratum := data[1]\n\n\tif stratum == 0 || stratum > byte(t.maxStratum) {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (t *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"%d\", t.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\tmaxStratum := 3\n\tif v, ok := params[\"max_stratum\"]; ok {\n\t\tmaxStratum = typeutil.ToInt(v)\n\t}\n\treturn &NtpHealthTester{maxStratum: maxStratum}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc (ht *NtpHealthTester) Test() bool {\n\tconn, err := net.Dial(\"udp\", \"127.0.0.1:123\")\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer conn.Close()\n\n\tpacket := make([]byte, 48)\n\tpacket[0] = 0x1b\n\n\t_, err = conn.Write(packet)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tresp := make([]byte, 48)\n\t_, err = conn.Read(resp)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tstratum := uint8(resp[1])\n\treturn int(stratum) <= ht.maxStratum\n}\n\nfunc (ht *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"%d\", ht.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\tmaxStratum := params[\"maxStratum\"].(int)\n\treturn &NtpHealthTester{maxStratum: maxStratum}\n}\n\ntype HealthTestParameters struct {\n\tServerAddress string\n}\n\ntype HealthTester interface {\n\tTest() bool\n\tString() string\n}\n```"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Implement a UDP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and connection management.\n\nStruct Description: The Client struct represents a UDP client for communicating with KDC servers. It maintains configuration and provides methods for sending data over UDP.\n\nFields:\n\nConfig: [*Config] - Configuration object containing KDC server information and settings\n\nMethods:\n\nsendKDCUDP: [func(realm string, b []byte) -> ([]byte, error)] - Sends data to a KDC server over UDP for a specific realm. Returns the response or error.\ndialKDCUDP: [func(count int, kdcs map[int]string) -> (*net.UDPConn, error)] - Internal method to establish UDP connection to a KDC server from a list of addresses. Returns the connection or error.\nsendUDP: [func(conn *net.UDPConn, b []byte) -> ([]byte, error)] - Internal method to send data over an established UDP connection and read the response. Returns the response data or error.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCUDP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\tcount, kdcs, err := cl.Config.GetKDCs(realm, false)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tconn, err := dialKDCUDP(count, kdcs)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = cl.sendUDP(conn, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialKDCUDP(count int, kdcs map[int]string) (conn *net.UDPConn, err error) {\n\ti := 1\n\tfor i <= count {\n\t\tudpAddr, e := net.ResolveUDPAddr(\"udp\", kdcs[i])\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"error resolving KDC address: %v\", e)\n\t\t\treturn\n\t\t}\n\t\tconn, err = net.DialUDP(\"udp\", nil, udpAddr)\n\t\tif err == nil {\n\t\t\terr = conn.SetDeadline(time.Now().Add(5 * time.Second))\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\ti++\n\t}\n\terr = errors.New(\"error in getting a UDP connection to any of the KDCs\")\n\treturn\n}\n\nfunc (cl *Client) sendUDP(conn *net.UDPConn, b []byte) ([]byte, error) {\n\tvar r []byte\n\tdefer conn.Close()\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\tudpbuf := make([]byte, 4096)\n\tn, _, err := conn.ReadFrom(udpbuf)\n\tr = udpbuf[:n]\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"sending over UDP failed to %s: %v\", conn.RemoteAddr().String(), err)\n\t}\n\tif len(r) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from %s\", conn.RemoteAddr().String())\n\t}\n\treturn r, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCUDP(realm string, b []byte) ([]byte, error) {\n\tkdcAddrs := c.Config.KDCAddresses[realm]\n\tkdcs := make(map[int]string)\n\tfor i, addr := range kdcAddrs {\n\t\tkdcs[i] = addr\n\t}\n\tcount := len(kdcAddrs)\n\tconn, err := c.dialKDCUDP(count, kdcs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn c.sendUDP(conn, b)\n}\n\nfunc (c *Client) dialKDCUDP(count int, kdcs map[int]string) (*net.UDPConn, error) {\n\tfor i := 0; i < count; i++ {\n\t\taddr, ok := kdcs[i]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tparts := strings.Split(addr, \":\")\n\t\tip := net.ParseIP(parts[0])\n\t\tport, _ := strconv.Atoi(parts[1])\n\t\tudpAddr := &net.UDPAddr{\n\t\t\tIP:   ip,\n\t\t\tPort: port,\n\t\t}\n\t\tconn, err := net.DialUDP(\"udp\", nil, udpAddr)\n\t\tif err == nil {\n\t\t\treturn conn, nil\n\t\t}\n\t}\n\treturn nil, errors.New(\"failed to dial KDC\")\n}\n\nfunc (c *Client) sendUDP(conn *net.UDPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf[:n], nil\n}\n\ntype Config struct {\n\tKDCAddresses map[string][]string\n}\n```"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Write a Go function that tests UDP communication between a client and server. The function should create a UDP server, establish a client connection, send a test message, and verify the server's response.\n\nFunction Description: The function `TestUDPTransport` tests UDP transport functionality by creating a UDP server, sending a message from a client to the server, and verifying that the server receives the correct message. It uses goroutines for asynchronous server handling and channels for communication between the server and test function.\n\nInput: \n- `t *testing.T`: A testing context provided by the Go testing framework for assertions and logging.\n\nOutput: \n- None (This is a test function, so it reports failures via the testing framework rather than returning values). \n\nNote: The function relies on an external `NewTUDPServerTransport` function (not shown in the reference) to create the server transport and a `serveOnce` helper function (also not shown) to handle the server-side receive operation.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\nfunc TestUDPTransport(t *testing.T) {\n\tserver, err := NewTUDPServerTransport(\"127.0.0.1:0\")\n\trequire.NoError(t, err)\n\tdefer server.Close()\n\n\tassert.NoError(t, server.Open())\n\tassert.True(t, server.IsOpen())\n\tassert.NotNil(t, server.Conn())\n\n\tc := make(chan []byte)\n\tdefer close(c)\n\n\tgo serveOnce(t, server, c)\n\n\tdestAddr, err := net.ResolveUDPAddr(\"udp\", server.Addr().String())\n\trequire.NoError(t, err)\n\n\tconnUDP, err := net.DialUDP(destAddr.Network(), nil, destAddr)\n\trequire.NoError(t, err)\n\tdefer connUDP.Close()\n\n\tn, err := connUDP.Write([]byte(\"test\"))\n\tassert.NoError(t, err)\n\tassert.Equal(t, 4, n)\n\n\tselect {\n\tcase data := <-c:\n\t\tassert.Equal(t, \"test\", string(data))\n\tcase <-time.After(time.Second * 1):\n\t\tt.Error(\"Server did not respond in time\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "```go\nfunc TestUDPTransport(t *testing.T) {\n    server := NewTUDPServerTransport()\n    received := make(chan string)\n    go func() {\n        msg := serveOnce(server)\n        received <- msg\n    }()\n    time.Sleep(100 * time.Millisecond)\n    addr := server.Addr()\n    conn, err := net.Dial(\"udp\", addr.String())\n    if err != nil {\n        t.Fatal(err)\n    }\n    testMsg := \"test message\"\n    _, err = conn.Write([]byte(testMsg))\n    if err != nil {\n        t.Fatal(err)\n    }\n    if got := <-received; got != testMsg {\n        t.Errorf(\"Expected %q, got %q\", testMsg, got)\n    }\n}\n```"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Implement a function that establishes UDP connections between two remote endpoints, optionally encrypts the initial handshake packets, and forwards traffic between them.\n\nFunction Description: The function `remote2remoteUDP` creates two UDP connections to specified remote endpoints, handles optional encryption of initialization packets, and sets up bidirectional forwarding between the connections. It uses custom networking and crypto utilities for connection management and encryption.\n\nInput:\n- remoteA: string - First remote endpoint address in \"host:port\" format\n- remoteB: string - Second remote endpoint address in \"host:port\" format\n- raenc: bool - Flag to enable encryption for first remote endpoint\n- rbenc: bool - Flag to enable encryption for second remote endpoint\n\nOutput: None (The function runs indefinitely forwarding traffic or returns on error)",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"iox/netio\"\n\t\"iox/crypto\"\n)\n\nfunc remote2remoteUDP(remoteA string, remoteB string, raenc bool, rbenc bool) {\n\tremoteAddrA, err := net.ResolveUDPAddr(\"udp\", remoteA)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteConnA, err := net.DialUDP(\"udp\", nil, remoteAddrA)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer remoteConnA.Close()\n\n\tremoteAddrB, err := net.ResolveUDPAddr(\"udp\", remoteB)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteConnB, err := net.DialUDP(\"udp\", nil, remoteAddrB)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer remoteConnB.Close()\n\n\tremoteCtxA, err := netio.NewUDPCtx(remoteConnA, raenc, true)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteCtxB, err := netio.NewUDPCtx(remoteConnB, rbenc, true)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif raenc {\n\t\tiv, err := crypto.RandomNonce()\n\t\tcipher, err := crypto.NewCipher(iv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tb := make([]byte, 4, 20)\n\t\tcopy(b, netio.UDP_INIT_PACKET)\n\n\t\tcipher.StreamXOR(b, b)\n\t\tb = append(b, iv...)\n\t\tremoteCtxA.Write(b)\n\t} else {\n\t\tremoteCtxA.Write(netio.UDP_INIT_PACKET)\n\t}\n\tif rbenc {\n\t\tiv, err := crypto.RandomNonce()\n\t\tcipher, err := crypto.NewCipher(iv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tb := make([]byte, 4, 20)\n\t\tcopy(b, netio.UDP_INIT_PACKET)\n\n\t\tcipher.StreamXOR(b, b)\n\t\tb = append(b, iv...)\n\t\tremoteCtxB.Write(b)\n\t} else {\n\t\tremoteCtxB.Write(netio.UDP_INIT_PACKET)\n\t}\n\n\tnetio.ForwardUDP(remoteCtxA, remoteCtxB)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"net\"\n)\n\nfunc remote2remoteUDP(remoteA, remoteB string, raenc, rbenc bool) {\n\taddrA, _ := net.ResolveUDPAddr(\"udp\", remoteA)\n\taddrB, _ := net.ResolveUDPAddr(\"udp\", remoteB)\n\n\tconnA, _ := net.DialUDP(\"udp\", nil, addrA)\n\tconnB, _ := net.DialUDP(\"udp\", nil, addrB)\n\n\tfirstA := true\n\tfirstB := true\n\n\tgo func() {\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\tn, _, err := connA.ReadFromUDP(buf)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif firstB {\n\t\t\t\tencrypted := encryptPacket(buf[:n])\n\t\t\t\tconnB.Write(encrypted)\n\t\t\t\tfirstB = false\n\t\t\t} else {\n\t\t\t\tconnB.Write(buf[:n])\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\tn, _, err := connB.ReadFromUDP(buf)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif firstA {\n\t\t\t\tencrypted := encryptPacket(buf[:n])\n\t\t\t\tconnA.Write(encrypted)\n\t\t\t\tfirstA = false\n\t\t\t} else {\n\t\t\t\tconnA.Write(buf[:n])\n\t\t\t}\n\t\t}\n\t}()\n\n\tselect {}\n}\n\nfunc encryptPacket(data []byte) []byte {\n\t// Placeholder for actual encryption logic\n\treturn data\n}\n```"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Implement a UDP server in Go that listens for incoming packets, manages client sessions, and proxies the traffic to a remote destination using a provided proxy dialer.\n\nStruct Description: The UDP struct represents a UDP server that handles incoming connections, manages sessions, and proxies traffic. It maintains session state and coordinates communication between clients and the proxy server.\n\nFields:\n- addr: string - The local address to listen on\n- uaddr: *net.UDPAddr - The resolved UDP address\n- dialer: proxy.Dialer - The dialer used to establish connections\n- proxy: proxy.Proxy - The proxy implementation for forwarding traffic\n\nMethods:\n- NewUDP: (s string, d proxy.Dialer, p proxy.Proxy) -> (*UDP, error) - Creates a new UDP instance by parsing the URL and resolving the address\n- ListenAndServe: () -> () - Starts listening on the UDP port and handles incoming packets\n- serveSession: (session *session) -> () - Handles an individual client session and proxies its traffic\n- DialUDP: (network string, addr string) -> (net.PacketConn, error) - Creates a new packet connection for outbound traffic\n\nAdditional Structs:\n- session: Represents a client session with its communication channels\n  Fields:\n    - key: string - Session identifier\n    - src: *net.UDPAddr - Client address\n    - PacketConn: net.PacketConn - Underlying connection\n    - msgCh: chan []byte - Channel for incoming messages\n    - finCh: chan struct{} - Channel for session termination\n\n- PktConn: Wraps a net.PacketConn with a predefined destination address\n  Fields:\n    - PacketConn: net.PacketConn - Underlying connection\n    - uaddr: *net.UDPAddr - Destination address\n  Methods:\n    - WriteTo: (b []byte, addr net.Addr) -> (int, error) - Writes data to the predefined address",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\nvar nm sync.Map\n\ntype UDP struct {\n\taddr   string\n\tuaddr  *net.UDPAddr\n\tdialer proxy.Dialer\n\tproxy  proxy.Proxy\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\tlog.F(\"[udp] parse url err: %s\", err)\n\t\treturn nil, err\n\t}\n\n\tt := &UDP{\n\t\tdialer: d,\n\t\tproxy:  p,\n\t\taddr:   u.Host,\n\t}\n\n\tt.uaddr, err = net.ResolveUDPAddr(\"udp\", t.addr)\n\treturn t, err\n}\n\nfunc (s *UDP) ListenAndServe() {\n\tc, err := net.ListenPacket(\"udp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[udp] failed to listen on UDP %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\n\tlog.F(\"[udp] listening UDP on %s\", s.addr)\n\n\tfor {\n\t\tbuf := pool.GetBuffer(proxy.UDPBufSize)\n\t\tn, srcAddr, err := c.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\tlog.F(\"[udp] read error: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tvar sess *session\n\t\tsessKey := srcAddr.String()\n\n\t\tv, ok := nm.Load(sessKey)\n\t\tif !ok || v == nil {\n\t\t\tsess = newSession(sessKey, srcAddr, c)\n\t\t\tnm.Store(sessKey, sess)\n\t\t\tgo s.serveSession(sess)\n\t\t} else {\n\t\t\tsess = v.(*session)\n\t\t}\n\n\t\tsess.msgCh <- buf[:n]\n\t}\n}\n\nfunc (s *UDP) serveSession(session *session) {\n\tdstPC, dialer, err := s.proxy.DialUDP(\"udp\", session.src.String())\n\tif err != nil {\n\t\tlog.F(\"[udp] remote dial error: %v\", err)\n\t\tnm.Delete(session.key)\n\t\treturn\n\t}\n\tdefer dstPC.Close()\n\n\tgo func() {\n\t\tproxy.CopyUDP(session, session.src, dstPC, 2*time.Minute, 5*time.Second)\n\t\tnm.Delete(session.key)\n\t\tclose(session.finCh)\n\t}()\n\n\tlog.F(\"[udp] %s <-> %s\", session.src, dialer.Addr())\n\n\tfor {\n\t\tselect {\n\t\tcase p := <-session.msgCh:\n\t\t\t_, err = dstPC.WriteTo(p, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.F(\"[udp] writeTo error: %v\", err)\n\t\t\t}\n\t\t\tpool.PutBuffer(p)\n\t\tcase <-session.finCh:\n\t\t\treturn\n\t\t}\n\t}\n}\n\ntype session struct {\n\tkey string\n\tsrc *net.UDPAddr\n\tnet.PacketConn\n\tmsgCh chan []byte\n\tfinCh chan struct{}\n}\n\nfunc newSession(key string, src net.Addr, srcPC net.PacketConn) *session {\n\tsrcAddr, _ := net.ResolveUDPAddr(\"udp\", src.String())\n\treturn &session{key, srcAddr, srcPC, make(chan []byte, 32), make(chan struct{})}\n}\n\nfunc (s *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tpc, err := s.dialer.DialUDP(network, s.addr)\n\treturn &PktConn{pc, s.uaddr}, err\n}\n\ntype PktConn struct {\n\tnet.PacketConn\n\tuaddr *net.UDPAddr\n}\n\nfunc (pc *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn pc.PacketConn.WriteTo(b, pc.uaddr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 111,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"proxy\"\n)\n\ntype UDP struct {\n\taddr   string\n\tuaddr  *net.UDPAddr\n\tdialer proxy.Dialer\n\tproxy  proxy.Proxy\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", s)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &UDP{\n\t\taddr:   s,\n\t\tuaddr:  uaddr,\n\t\tdialer: d,\n\t\tproxy:  p,\n\t}, nil\n}\n\nfunc (u *UDP) ListenAndServe() {\n\tconn, err := u.DialUDP(\"udp\", u.addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, src, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Read error:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tsession := &session{\n\t\t\tkey:     fmt.Sprintf(\"%v\", src),\n\t\t\tsrc:     src,\n\t\t\tPacketConn: conn,\n\t\t\tmsgCh:   make(chan []byte),\n\t\t\tfinCh:   make(chan struct{}),\n\t\t}\n\t\tgo u.serveSession(session)\n\t}\n}\n\nfunc (u *UDP) serveSession(session *session) {\n\tfor {\n\t\tselect {\n\t\tcase <-session.finCh:\n\t\t\treturn\n\t\tdefault:\n\t\t\tbuf := make([]byte, 1024)\n\t\t\tn, err := session.PacketConn.Read(buf)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Read error:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tremoteConn, err := u.dialer.Dial(\"udp\", \"remote-addr\")\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Dial error:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t_, err = remoteConn.Write(buf[:n])\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Write error:\", err)\n\t\t\t}\n\t\t\t// Handle response from remote\n\t\t\trespBuf := make([]byte, 1024)\n\t\t\trespN, err := remoteConn.Read(respBuf)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Read response error:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tsession.PacketConn.WriteTo(respBuf[:respN], session.src)\n\t\t}\n\t}\n}\n\nfunc (u *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tremoteAddr, err := net.ResolveUDPAddr(network, addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn net.DialUDP(network, nil, remoteAddr)\n}\n\ntype session struct {\n\tkey       string\n\tsrc       *net.UDPAddr\n\tPacketConn net.PacketConn\n\tmsgCh      chan []byte\n\tfinCh      chan struct{}\n}\n\ntype PktConn struct {\n\tnet.PacketConn\n\tuaddr *net.UDPAddr\n}\n\nfunc (p *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn p.PacketConn.WriteTo(b, p.uaddr)\n}\n```"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Create a UDP server in Go that handles incoming UDP packets, processes them, and manages connections using a cache system for tracking active connections. The server should support multiple ports with different encryption keys and handle both connection establishment and data packet processing.\n\nStruct Description: The Server struct represents a UDP server instance with TCP and UDP capabilities, including connection caching and encryption support for multiple ports.\n\nFields:\n\nTCPAddr: *net.TCPAddr - TCP address information for the server\nUDPAddr: *net.UDPAddr - UDP address information for the server\nTCPListen: *net.TCPListener - TCP listener instance\nUDPConn: *net.UDPConn - UDP connection instance\nCache: *cache.Cache - Cache for storing active connections\nCkv: *crypto.KV - Default encryption key-value pair\nPortCkv: map[int64]*crypto.KV - Map of port numbers to their respective encryption key-value pairs\n\nMethods:\n\nNewServer: (addr string, password string, portPassword []string) -> (*Server, error) - Creates a new Server instance with the given address, default password, and port-specific passwords\nRunUDPServer: () -> error - Starts the UDP server and begins listening for incoming packets\nUDPHandle: (addr *net.UDPAddr, b []byte) -> error - Handles incoming UDP packets, either establishing new connections or forwarding data to existing connections",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/txthinking/crypto\"\n)\n\ntype Server struct {\n\tTCPAddr   *net.TCPAddr\n\tUDPAddr   *net.UDPAddr\n\tTCPListen *net.TCPListener\n\tUDPConn   *net.UDPConn\n\tCache     *cache.Cache\n\tCkv       *crypto.KV\n\tPortCkv   map[int64]*crypto.KV\n}\n\nfunc NewServer(addr, password string, portPassword []string) (*Server, error) {\n\tpc := make(map[int64]*crypto.KV)\n\tfor _, v := range portPassword {\n\t\tl := strings.Split(v, \" \")\n\t\tif len(l) != 2 {\n\t\t\treturn nil, errors.New(\"Wrong format: \" + v)\n\t\t}\n\t\tport, err := strconv.ParseInt(l[0], 10, 64)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tckv := &crypto.KV{\n\t\t\tAESKey: []byte(l[1]),\n\t\t}\n\t\tpc[port] = ckv\n\t}\n\ttaddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tTCPAddr: taddr,\n\t\tUDPAddr: uaddr,\n\t\tCache:   cache.New(cache.NoExpiration, cache.NoExpiration),\n\t\tCkv: &crypto.KV{\n\t\t\tAESKey: []byte(password),\n\t\t},\n\t\tPortCkv: pc,\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) RunUDPServer() error {\n\tvar err error\n\ts.UDPConn, err = net.ListenUDP(\"udp\", s.UDPAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\tn, addr, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func(addr *net.UDPAddr, b []byte) {\n\t\t\tif err := s.UDPHandle(addr, b); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t}\n\t\t}(addr, b[0:n])\n\t}\n\treturn nil\n}\n\nfunc (s *Server) UDPHandle(addr *net.UDPAddr, b []byte) error {\n\tp := &UDPPacket{}\n\tif err := proto.Unmarshal(b, p); err != nil {\n\t\treturn nil\n\t}\n\tif p.Address == \"\" {\n\t\tu, err := NewUDPServer(s, p, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.Cache.Set(\"u:\"+strconv.FormatInt(p.Port, 10), u, cache.DefaultExpiration)\n\t\tdefer s.Cache.Delete(\"u:\" + strconv.FormatInt(p.Port, 10))\n\t\tif err := u.ListenAndServe(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\ti, ok := s.Cache.Get(\"u:\" + strconv.FormatInt(p.Port, 10))\n\tif !ok {\n\t\treturn nil\n\t}\n\tc := i.(*UDPServer)\n\tif err := c.HandlePacket(p); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"crypto/kv\"\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/patrickmn/go-cache\"\n)\n\ntype Server struct {\n\tTCPAddr   *net.TCPAddr\n\tUDPAddr   *net.UDPAddr\n\tTCPListen *net.TCPListener\n\tUDPConn   *net.UDPConn\n\tCache     *cache.Cache\n\tCkv       *kv.KV\n\tPortCkv   map[int64]*kv.KV\n}\n\nfunc NewServer(addr string, password string, portPassword []string) (*Server, error) {\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcache := cache.New(5*time.Minute, 10*time.Minute)\n\tcvk, err := kv.NewKV(password)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tportCkv := make(map[int64]*kv.KV)\n\tfor _, p := range portPassword {\n\t\tparts := strings.Split(p, \":\")\n\t\tif len(parts) != 2 {\n\t\t\tcontinue\n\t\t}\n\t\tportStr, pass := parts[0], parts[1]\n\t\tport, err := strconv.ParseInt(portStr, 10, 64)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tkv, err := kv.NewKV(pass)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tportCkv[port] = kv\n\t}\n\treturn &Server{\n\t\tTCPAddr:   tcpAddr,\n\t\tUDPAddr:   udpAddr,\n\t\tCache:     cache,\n\t\tCkv:       cvk,\n\t\tPortCkv:   portCkv,\n\t}, nil\n}\n\nfunc (s *Server) RunUDPServer() error {\n\tconn, err := net.ListenUDP(\"udp\", s.UDPAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.UDPConn = conn\n\tbuffer := make([]byte, 1024)\n\tgo func() {\n\t\tfor {\n\t\t\tn, addr, err := s.UDPConn.ReadFromUDP(buffer)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tgo s.UDPHandle(addr, buffer[:n])\n\t\t}\n\t}()\n\t<-make(chan bool)\n\treturn nil\n}\n\nfunc (s *Server) UDPHandle(addr *net.UDPAddr, b []byte) error {\n\tport := int64(s.UDPAddr.Port)\n\tvar kv *kv.KV\n\tif key, ok := s.PortCkv[port]; ok {\n\t\tkv = key\n\t} else {\n\t\tkv = s.Ckv\n\t}\n\tdecrypted, err := kv.Decrypt(b)\n\tif err != nil {\n\t\treturn err\n\t}\n\tkey := addr.String()\n\tif existing, found := s.Cache.Get(key); found {\n\t\ts.Cache.Set(key, existing, cache.DefaultExpiration)\n\t\tfmt.Printf(\"Received data from existing connection: %s\\n\", string(decrypted))\n\t} else {\n\t\ts.Cache.Set(key, kv, 5*time.Minute)\n\t\tfmt.Printf(\"New connection established from %s\\n\", addr.String())\n\t}\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: Implement a UDP server for handling SOCKS5 proxy requests, including UDP association and data relay between clients and a Hysteria proxy client.\n\nStruct Description: The Server struct represents a SOCKS5 proxy server with UDP support, handling client connections and relaying UDP traffic through a Hysteria proxy.\n\nFields:\n\nHyClient: [client.Client] - The Hysteria client used for establishing proxy connections\nAuthFunc: [func(username, password string) bool] - Authentication function for SOCKS5 clients\nDisableUDP: [bool] - Flag to disable UDP functionality\nEventLogger: [EventLogger] - Interface for logging server events\n\nMethods:\n\nhandleUDP: [func(conn net.Conn, req *socks5.Request)] - none - Handles a new UDP association request from a SOCKS5 client\nudpServer: [func(udpConn *net.UDPConn, hyUDP client.HyUDPConn)] -> [error] - Manages the UDP relay between client and Hysteria proxy\nsendUDPReply: [func(conn net.Conn, addr *net.UDPAddr)] -> [error] - Sends a UDP association reply to the SOCKS5 client\n\nInterface Description:\n\nEventLogger: Interface for logging UDP-related events\nMethods:\nUDPRequest: [func(addr net.Addr)] - Logs incoming UDP requests\nUDPError: [func(addr net.Addr, err error)] - Logs UDP-related errors",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/txthinking/socks5\"\n\n\t\"github.com/apernet/hysteria/core/v2/client\"\n)\n\ntype Server struct {\n\tHyClient    client.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tdefer conn.Close()\n\n\tif s.EventLogger != nil {\n\t\ts.EventLogger.UDPRequest(conn.RemoteAddr())\n\t}\n\tvar closeErr error\n\tdefer func() {\n\t\tif s.EventLogger != nil {\n\t\t\ts.EventLogger.UDPError(conn.RemoteAddr(), closeErr)\n\t\t}\n\t}()\n\n\thost, _, err := net.SplitHostPort(conn.LocalAddr().String())\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(host, \"0\"))\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpConn, err := net.ListenUDP(\"udp\", udpAddr)\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer udpConn.Close()\n\n\thyUDP, err := s.HyClient.UDP()\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer hyUDP.Close()\n\n\t_ = sendUDPReply(conn, udpConn.LocalAddr().(*net.UDPAddr))\n\n\terrChan := make(chan error, 2)\n\tgo func() {\n\t\terr := s.udpServer(udpConn, hyUDP)\n\t\terrChan <- err\n\t}()\n\tgo func() {\n\t\t_, err := io.Copy(io.Discard, conn)\n\t\terrChan <- err\n\t}()\n\tcloseErr = <-errChan\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tvar clientAddr *net.UDPAddr\n\tbuf := make([]byte, udpBufferSize)\n\tfor {\n\t\tn, cAddr, err := udpConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\td, err := socks5.NewDatagramFromBytes(buf[:n])\n\t\tif err != nil || d.Frag != 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif clientAddr == nil {\n\t\t\tclientAddr = cAddr\n\t\t\tgo func() {\n\t\t\t\tfor {\n\t\t\t\t\tbs, from, err := hyUDP.Receive()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t_ = udpConn.Close()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tatyp, addr, port, err := socks5.ParseAddress(from)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif atyp == socks5.ATYPDomain {\n\t\t\t\t\t\taddr = addr[1:]\n\t\t\t\t\t}\n\t\t\t\t\td := socks5.NewDatagram(atyp, addr, port, bs)\n\t\t\t\t\t_, _ = udpConn.WriteToUDP(d.Bytes(), clientAddr)\n\t\t\t\t}\n\t\t\t}()\n\t\t} else if !clientAddr.IP.Equal(cAddr.IP) || clientAddr.Port != cAddr.Port {\n\t\t\tcontinue\n\t\t}\n\t\t_ = hyUDP.Send(d.Data, d.Address())\n\t}\n}\n\nfunc sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\tvar atyp byte\n\tvar bndAddr, bndPort []byte\n\tif ip4 := addr.IP.To4(); ip4 != nil {\n\t\tatyp = socks5.ATYPIPv4\n\t\tbndAddr = ip4\n\t} else {\n\t\tatyp = socks5.ATYPIPv6\n\t\tbndAddr = addr.IP\n\t}\n\tbndPort = make([]byte, 2)\n\tbinary.BigEndian.PutUint16(bndPort, uint16(addr.Port))\n\tp := socks5.NewReply(socks5.RepSuccess, atyp, bndAddr, bndPort)\n\t_, err := p.WriteTo(conn)\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"net\"\n\t\"github.com/yourproject/socks5\"\n\t\"github.com/yourproject/client\"\n)\n\ntype Server struct {\n\tHyClient     client.Client\n\tAuthFunc     func(username, password string) bool\n\tDisableUDP   bool\n\tEventLogger  EventLogger\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tif s.DisableUDP {\n\t\treturn\n\t}\n\tif !s.AuthFunc(req.Username, req.Password) {\n\t\treturn\n\t}\n\tudpConn, err := net.ListenUDP(\"udp\", nil)\n\tif err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t\treturn\n\t}\n\taddr := udpConn.LocalAddr().(*net.UDPAddr)\n\tif err := s.sendUDPReply(conn, addr); err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t\treturn\n\t}\n\thyUDP, err := s.HyClient.DialUDP(\"udp\", nil)\n\tif err != nil {\n\t\ts.EventLogger.UDPError(addr, err)\n\t\treturn\n\t}\n\tgo s.udpServer(udpConn, hyUDP)\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tbuf := make([]byte, 65535)\n\tfor {\n\t\tn, clientAddr, err := udpConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\ts.EventLogger.UDPError(clientAddr, err)\n\t\t\tcontinue\n\t\t}\n\t\ts.EventLogger.UDPRequest(clientAddr)\n\t\tif _, err := hyUDP.WriteTo(buf[:n], clientAddr); err != nil {\n\t\t\ts.EventLogger.UDPError(clientAddr, err)\n\t\t\tcontinue\n\t\t}\n\t\tn, serverAddr, err := hyUDP.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\ts.EventLogger.UDPError(serverAddr, err)\n\t\t\tcontinue\n\t\t}\n\t\ts.EventLogger.UDPRequest(serverAddr)\n\t\tif _, err := udpConn.WriteToUDP(buf[:n], serverAddr); err != nil {\n\t\t\ts.EventLogger.UDPError(serverAddr, err)\n\t\t\tcontinue\n\t\t}\n\t}\n}\n\nfunc (s *Server) sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\treply := &socks5.Reply{\n\t\tVersion: 5,\n\t\tReply:   socks5.Succeeded,\n\t\tAddr:    addr,\n\t\tPort:    addr.Port,\n\t}\n\treturn reply.Write(conn)\n}\n```"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Implement a UDP server in Go that handles incoming UDP packets, performs authentication checks, and manages communication with clients through specified ports. The server should include functionality for initialization, packet handling, listening for incoming data, and graceful shutdown.\n\nStruct Description: The UDPServer struct represents a UDP server instance that manages UDP connections, handles authentication, and processes incoming/outgoing packets. It maintains connection state and integrates with a parent Server instance.\n\nFields:\n\nServer: [*Server] - Reference to the parent Server instance containing shared resources\nUDPConn: [*net.UDPConn] - Active UDP connection for the server\nAddr: [*net.UDPAddr] - Address information for the server's UDP endpoint\n\nMethods:\n\nNewUDPServer: [func(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error)] -> [*UDPServer, error] - Initializes a new UDP server instance with authentication checks and port validation. Returns the server instance or error if initialization fails.\n\nListenAndServe: [func(s *UDPServer) error] -> [error] - Starts listening for incoming UDP packets and handles them in a loop until an error occurs or the server is shut down. Automatically closes the connection when finished.\n\nShutdown: [func(s *UDPServer)] -> [void] - Gracefully shuts down the UDP server by closing the active connection.\n\nHandlePacket: [func(s *UDPServer, p *UDPPacket) error] -> [error] - Processes an incoming UDP packet, either forwarding data to the specified address or updating the connection deadline. Returns error if processing fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n)\n\ntype UDPServer struct {\n\tServer  *Server\n\tUDPConn *net.UDPConn\n\tAddr    *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tbye := func(err error) {\n\t\tp := &UDPPacket{\n\t\t\tAddress: err.Error(),\n\t\t}\n\t\tb, err1 := proto.Marshal(p)\n\t\tif err1 != nil {\n\t\t\tlog.Println(err1)\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tif p.Port == 0 {\n\t\tbye(errors.New(\"Missed port\"))\n\t\treturn nil, errors.New(addr.String() + \" missed port\")\n\t}\n\tif len(s.PortCkv) == 0 {\n\t\ttmp, err := s.Ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tif len(s.PortCkv) != 0 {\n\t\tckv, ok := s.PortCkv[p.Port]\n\t\tif !ok {\n\t\t\tbye(errors.New(\"Not allowed port\"))\n\t\t\treturn nil, errors.New(addr.String() + \" try to open not allowed UDP port: \" + strconv.FormatInt(p.Port, 10))\n\t\t}\n\t\ttmp, err := ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.FormatInt(p.Port, 10))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc1, err := net.ListenUDP(\"udp\", uaddr)\n\tif err != nil {\n\t\tbye(err)\n\t\treturn nil, err\n\t}\n\tif err := c1.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tp = &UDPPacket{\n\t\tAddress: \"0\",\n\t}\n\tb, err := proto.Marshal(p)\n\tif err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: c1,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\ti, a, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tp := &UDPPacket{\n\t\t\tAddress: a.String(),\n\t\t\tData:    b[0:i],\n\t\t}\n\t\tb, err = proto.Marshal(p)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.Server.UDPConn.WriteToUDP(b, s.Addr); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *UDPServer) Shutdown() {\n\ts.UDPConn.Close()\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif p.Address != \"0\" {\n\t\tuaddr, err := net.ResolveUDPAddr(\"udp\", p.Address)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(p.Data, uaddr); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\tif err := s.UDPConn.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"time\"\n)\n\ntype Server struct{}\n\ntype UDPPacket struct {\n\tData       []byte\n\tRemoteAddr *net.UDPAddr\n\tDestination *net.UDPAddr\n}\n\ntype UDPServer struct {\n\tServer  *Server\n\tUDPConn *net.UDPConn\n\tAddr    *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: conn,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, remoteAddr, err := s.UDPConn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpacket := &UDPPacket{\n\t\t\tData:       buffer[:n],\n\t\t\tRemoteAddr: remoteAddr,\n\t\t}\n\t\tif err := s.HandlePacket(packet); err != nil {\n\t\t\t// Handle error\n\t\t}\n\t}\n}\n\nfunc (s *UDPServer) Shutdown() {\n\ts.UDPConn.Close()\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif p.Destination != nil {\n\t\t_, err := s.UDPConn.WriteToUDP(p.Data, p.Destination)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\ts.UDPConn.SetReadDeadline(time.Now().Add(5 * time.Second))\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: The provided code demonstrates a WebSocket client implementation in Go for tracker communication in a peer-to-peer network, handling WebSocket connections, message exchange, and WebRTC offer/answer negotiation.\n\nStruct Description: TrackerClient represents a client for interacting with a WebSocket tracker server, managing WebSocket connections, peer connections, and message handling.\n\nFields:\n\nUrl: string - The WebSocket tracker server URL to connect to\nGetAnnounceRequest: func(_ tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error) - Function to generate announce requests\nPeerId: [20]byte - The client's peer identifier\nOnConn: onDataChannelOpen - Callback for when data channels open\nLogger: log.Logger - Logger for client operations\nDialer: *websocket.Dialer - WebSocket dialer configuration\nmu: sync.Mutex - Mutex for thread-safe operations\ncond: sync.Cond - Condition variable for connection state changes\noutboundOffers: map[string]outboundOfferValue - Track outbound WebRTC offers\nwsConn: *websocket.Conn - Active WebSocket connection\nclosed: bool - Connection closed flag\npingTicker: *time.Ticker - Timer for sending ping messages\nWebsocketTrackerHttpHeader: func() http.Header - Function to generate WebSocket headers\nICEServers: []webrtc.ICEServer - List of ICE servers for WebRTC\nrtcPeerConns: map[string]*wrappedPeerConnection - Active WebRTC peer connections\n\nMethods:\n\ndoWebsocket: () -> error - Establishes and maintains WebSocket connection to tracker\ntrackerReadLoop: (*websocket.Conn) -> error - Handles incoming WebSocket messages\nwriteMessage: ([]byte) -> error - Writes message to WebSocket connection\nhandleOffer: (offerContext, string) -> error - Processes incoming WebRTC offers\nhandleAnswer: (string, webrtc.SessionDescription) -> void - Processes incoming WebRTC answers",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/anacrolix/log\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/pion/webrtc/v4\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype TrackerClient struct {\n\tUrl                string\n\tGetAnnounceRequest func(_ tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error)\n\tPeerId             [20]byte\n\tOnConn             onDataChannelOpen\n\tLogger             log.Logger\n\tDialer             *websocket.Dialer\n\n\tmu             sync.Mutex\n\tcond           sync.Cond\n\toutboundOffers map[string]outboundOfferValue\n\twsConn         *websocket.Conn\n\tclosed         bool\n\tpingTicker     *time.Ticker\n\n\tWebsocketTrackerHttpHeader func() http.Header\n\tICEServers                 []webrtc.ICEServer\n\n\trtcPeerConns map[string]*wrappedPeerConnection\n}\n\nfunc (tc *TrackerClient) doWebsocket() error {\n\ttc.mu.Lock()\n\ttc.mu.Unlock()\n\n\tvar header http.Header\n\tif tc.WebsocketTrackerHttpHeader != nil {\n\t\theader = tc.WebsocketTrackerHttpHeader()\n\t}\n\n\tc, _, err := tc.Dialer.Dial(tc.Url, header)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"dialing tracker: %w\", err)\n\t}\n\tdefer c.Close()\n\ttc.Logger.WithDefaultLevel(log.Info).Printf(\"connected\")\n\ttc.mu.Lock()\n\ttc.wsConn = c\n\ttc.cond.Broadcast()\n\ttc.mu.Unlock()\n\tcloseChan := make(chan struct{})\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-tc.pingTicker.C:\n\t\t\t\ttc.mu.Lock()\n\t\t\t\terr := c.WriteMessage(websocket.PingMessage, []byte{})\n\t\t\t\ttc.mu.Unlock()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-closeChan:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\terr = tc.trackerReadLoop(tc.wsConn)\n\tclose(closeChan)\n\ttc.mu.Lock()\n\tc.Close()\n\ttc.mu.Unlock()\n\treturn err\n}\n\nfunc (tc *TrackerClient) trackerReadLoop(tracker *websocket.Conn) error {\n\tfor {\n\t\t_, message, err := tracker.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"read message error: %w\", err)\n\t\t}\n\t\ttc.Logger.Levelf(log.Debug, \"received message: %q\", message)\n\n\t\tvar ar AnnounceResponse\n\t\tif err := json.Unmarshal(message, &ar); err != nil {\n\t\t\ttc.Logger.WithDefaultLevel(log.Warning).Printf(\"error unmarshalling announce response: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tswitch {\n\t\tcase ar.Offer != nil:\n\t\t\tih, err := jsonStringToInfoHash(ar.InfoHash)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.WithDefaultLevel(log.Warning).Printf(\"error decoding info_hash in offer: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = tc.handleOffer(offerContext{\n\t\t\t\tSessDesc: *ar.Offer,\n\t\t\t\tId:       ar.OfferID,\n\t\t\t\tInfoHash: ih,\n\t\t\t}, ar.PeerID)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.Levelf(log.Error, \"handling offer for infohash %x: %v\", ih, err)\n\t\t\t}\n\t\tcase ar.Answer != nil:\n\t\t\ttc.handleAnswer(ar.OfferID, *ar.Answer)\n\t\tdefault:\n\t\t\t_, err := jsonStringToInfoHash(ar.InfoHash)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.Levelf(log.Warning, \"unexpected announce response %q\", message)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (tc *TrackerClient) writeMessage(data []byte) error {\n\tfor tc.wsConn == nil {\n\t\tif tc.closed {\n\t\t\treturn fmt.Errorf(\"%T closed\", tc)\n\t\t}\n\t\ttc.cond.Wait()\n\t}\n\treturn tc.wsConn.WriteMessage(websocket.TextMessage, data)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/pion/webrtc/v3\"\n)\n\ntype TrackerClient struct {\n\tUrl                        string\n\tGetAnnounceRequest         func(event tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error)\n\tPeerId                     [20]byte\n\tOnConn                     func(*webrtc.DataChannel)\n\tLogger                     *log.Logger\n\tDialer                     *websocket.Dialer\n\tmu                         sync.Mutex\n\tcond                       *sync.Cond\n\toutboundOffers             map[string]outboundOfferValue\n\twsConn                     *websocket.Conn\n\tclosed                     bool\n\tpingTicker                 *time.Ticker\n\tWebsocketTrackerHttpHeader func() http.Header\n\tICEServers                 []webrtc.ICEServer\n\trtcPeerConns               map[string]*wrappedPeerConnection\n}\n\ntype outboundOfferValue struct {\n\toffer      webrtc.SessionDescription\n\ttimestamp  time.Time\n\tpeerID     [20]byte\n\tremoteAddr string\n}\n\ntype wrappedPeerConnection struct {\n\t*webrtc.PeerConnection\n\tremoteAddr string\n}\n\nfunc (c *TrackerClient) doWebsocket() error {\n\tc.mu.Lock()\n\tif c.closed {\n\t\tc.mu.Unlock()\n\t\treturn errors.New(\"client is closed\")\n\t}\n\tc.mu.Unlock()\n\n\theaders := c.WebsocketTrackerHttpHeader()\n\tconn, _, err := c.Dialer.Dial(c.Url, headers)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"dial error: %w\", err)\n\t}\n\tc.wsConn = conn\n\n\tc.cond = sync.NewCond(&c.mu)\n\tc.closed = false\n\tc.outboundOffers = make(map[string]outboundOfferValue)\n\tc.rtcPeerConns = make(map[string]*wrappedPeerConnection)\n\n\tc.pingTicker = time.NewTicker(30 * time.Second)\n\tgo c.sendPings()\n\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tc.Logger.Printf(\"Read error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tif err := c.trackerReadLoop(msg); err != nil {\n\t\t\tc.Logger.Printf(\"Message handling error: %v\", err)\n\t\t}\n\t}\n\n\tc.closeResources()\n\treturn nil\n}\n\nfunc (c *TrackerClient) trackerReadLoop(msg []byte) error {\n\t// Message parsing logic\n\t// This is a simplified example; actual implementation would parse the message format\n\tif len(msg) < 20 {\n\t\treturn errors.New(\"invalid message length\")\n\t}\n\n\tinfoHash := [20]byte{}\n\tcopy(infoHash[:], msg[:20])\n\tpeerID := [20]byte{}\n\tcopy(peerID[:], msg[20:40])\n\tremoteAddr := string(msg[40:])\n\n\tswitch msg[40] {\n\tcase 'O': // Offer\n\t\toffer := webrtc.SessionDescription{}\n\t\tif err := offer.Unmarshal(msg[41:]); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to parse offer: %w\", err)\n\t\t}\n\t\tif err := c.handleOffer(offer, remoteAddr, peerID); err != nil {\n\t\t\treturn fmt.Errorf(\"offer handling error: %w\", err)\n\t\t}\n\tcase 'A': // Answer\n\t\tanswer := webrtc.SessionDescription{}\n\t\tif err := answer.Unmarshal(msg[41:]); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to parse answer: %w\", err)\n\t\t}\n\t\tc.handleAnswer(remoteAddr, answer)\n\t}\n\n\treturn nil\n}\n\nfunc (c *TrackerClient) writeMessage(data []byte) error {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif c.closed {\n\t\treturn errors.New(\"client is closed\")\n\t}\n\n\treturn c.wsConn.WriteMessage(websocket.TextMessage, data)\n}\n\nfunc (c *TrackerClient) handleOffer(offer webrtc.SessionDescription, remoteAddr string, peerID [20]byte) error {\n\t// Create peer connection\n\tconfig := webrtc.Configuration{\n\t\tICEServers: c.ICEServers,\n\t}\n\tpc, err := webrtc.NewPeerConnection(config)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create peer connection: %w\", err)\n\t}\n\n\t// Set remote description\n\tif err := pc.SetRemoteDescription(offer); err != nil {\n\t\treturn fmt.Errorf(\"failed to set remote description: %w\", err)\n\t}\n\n\t// Create answer\n\tanswer, err := pc.CreateAnswer(nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create answer: %w\", err)\n\t}\n\n\t// Set local description\n\tif err := pc.SetLocalDescription(answer); err != nil {\n\t\treturn fmt.Errorf(\"failed to set local description: %w\", err)\n\t}\n\n\t// Store offer and answer\n\tc.mu.Lock()\n\tc.outboundOffers[remoteAddr] = outboundOfferValue{\n\t\toffer:      offer,\n\t\ttimestamp:  time.Now(),\n\t\tpeerID:     peerID,\n\t\tremoteAddr: remoteAddr,\n\t}\n\tc.mu.Unlock()\n\n\t// Send answer via WebSocket\n\tanswerBytes, _ := answer.Marshal()\n\tmessage := append([]byte{0x41}, answerBytes...)\n\tif err := c.writeMessage(message); err != nil {\n\t\treturn fmt.Errorf(\"failed to send answer: %w\", err)\n\t}\n\n\t// Handle data channel\n\tpc.OnDataChannel(func(dc *webrtc.DataChannel) {\n\t\tc.Logger.Printf(\"Data channel opened with %s\", remoteAddr)\n\t\tc.OnConn(dc)\n\t})\n\n\treturn nil\n}\n\nfunc (c *TrackerClient) handleAnswer(remoteAddr string, answer webrtc.SessionDescription) {\n\tc.mu.Lock()\n\tofferVal, ok := c.outboundOffers[remoteAddr]\n\tif !ok {\n\t\tc.mu.Unlock()\n\t\treturn\n\t}\n\tc.mu.Unlock()\n\n\t// Retrieve peer connection\n\tpc, ok := c.rtcPeerConns[remoteAddr]\n\tif !ok {\n\t\treturn\n\t}\n\n\t// Set remote answer\n\tif err := pc.SetRemoteDescription(answer); err != nil {\n\t\tc.Logger.Printf(\"Failed to set remote answer: %v\", err)\n\t\treturn\n\t}\n\n\t// Create data channel if not exists\n\tif pc.DataChannels() == nil {\n\t\t_, err := pc.NewDataChannel(\"default\", nil)\n\t\tif err != nil {\n\t\t\tc.Logger.Printf(\"Failed to create data channel: %v\", err)\n\t\t}\n\t}\n}\n\nfunc (c *TrackerClient) sendPings() {\n\tfor {\n\t\tselect {\n\t\tcase <-c.pingTicker.C:\n\t\t\tif err := c.writeMessage([]byte(\"PING\")); err != nil {\n\t\t\t\tc.Logger.Printf(\"Ping failed: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (c *TrackerClient) closeResources() {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tc.closed = true\n\tif c.pingTicker != nil {\n\t\tc.pingTicker.Stop()\n\t}\n\tif c.wsConn != nil {\n\t\tc.wsConn.Close()\n\t}\n\tfor _, pc := range c.rtcPeerConns {\n\t\tpc.Close()\n\t}\n}"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a WebSocket proxy struct in Go that can handle bidirectional communication between a client and a backend server, including connection upgrading, message replication, and error handling.\n\nStruct Description: The WebsocketProxy struct acts as a reverse proxy for WebSocket connections, forwarding messages between clients and backend servers while handling connection upgrades and error scenarios.\n\nFields:\n\nDirector: func(*http.Request, http.Header) - A function that can modify the outgoing request headers before connecting to the backend.\nBackend: func(*http.Request) *url.URL - A function that returns the backend URL to connect to.\nUpgrader: *websocket.Upgrader - Configures the WebSocket connection upgrade from HTTP.\nDialer: *websocket.Dialer - Configures how to dial the backend WebSocket connection.\n\nMethods:\n\nServeHTTP: (http.ResponseWriter, *http.Request) -> None - The main handler method that:\n  1. Determines the backend URL\n  2. Establishes connection to backend\n  3. Upgrades client connection\n  4. Sets up bidirectional message replication\n  5. Handles ping/pong messages\n  6. Manages connection errors and closures\n\nreplicateWebsocketConn: (*websocket.Conn, *websocket.Conn, chan error) -> None - A helper method that:\n  1. Continuously reads messages from source connection\n  2. Forwards them to destination connection\n  3. Handles connection errors and closure messages\n  4. Reports errors through the provided channel",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/samber/lo\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tconnPub.SetPingHandler(func(appData string) error {\n\t\terr := connBackend.WriteControl(websocket.PingMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\terr = connPub.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif errors.Is(err, websocket.ErrCloseSent) {\n\t\t\treturn nil\n\t\t} else if e, ok := lo.ErrorsAs[net.Error](err); ok && e.Timeout() {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t})\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\n\tvar closeError *websocket.CloseError\n\tif ok := errors.As(err, &closeError); !ok || (closeError != nil && closeError.Code == websocket.CloseAbnormalClosure) {\n\t\tlog.Printf(message, err)\n\t}\n}\n\nfunc replicateWebsocketConn(dst, src *websocket.Conn, errc chan error) {\n\tfor {\n\t\tmsgType, msg, err := src.ReadMessage()\n\t\tif err != nil {\n\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\tif e, ok := lo.ErrorsAs[*websocket.CloseError](err); ok && e != nil {\n\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t}\n\t\t\t}\n\t\t\terrc <- err\n\t\t\t_ = dst.WriteMessage(websocket.CloseMessage, m)\n\t\t\tbreak\n\t\t}\n\t\terr = dst.WriteMessage(msgType, msg)\n\t\tif err != nil {\n\t\t\terrc <- err\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "```go\ntype WebsocketProxy struct {\n\tDirector func(*http.Request, http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tbackendURL := p.Backend(r)\n\tif backendURL == nil {\n\t\thttp.Error(w, \"Invalid backend URL\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tmodifiedHeaders := make(http.Header)\n\tp.Director(r, modifiedHeaders)\n\n\tclientConn, err := p.Upgrader.Upgrade(w, r, modifiedHeaders)\n\tif err != nil {\n\t\thttp.Error(w, \"Upgrade failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer clientConn.Close()\n\n\tbackendConn, _, err := p.Dialer.Dial(backendURL.String(), modifiedHeaders)\n\tif err != nil {\n\t\thttp.Error(w, \"Dial failed\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer backendConn.Close()\n\n\terrChan := make(chan error, 2)\n\tgo p.replicateWebsocketConn(clientConn, backendConn, errChan)\n\tgo p.replicateWebsocketConn(backendConn, clientConn, errChan)\n\n\tif err := <-errChan; err != nil {\n\t}\n}\n\nfunc (p *WebsocketProxy) replicateWebsocketConn(source, dest *websocket.Conn, errChan chan error) {\n\tfor {\n\t\tmessageType, message, err := source.ReadMessage()\n\t\tif err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t\terr = dest.WriteMessage(messageType, message)\n\t\tif err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Go function that establishes a WebSocket connection to a specified URL, sends a protobuf message as a JSON payload, and returns the WebSocket connection for further communication.\n\nFunction Description: The function `openWebSocket` establishes a secure WebSocket connection (wss://) to a given URL with optional custom headers. It authenticates using admin macaroon if no custom headers are provided, sends a protobuf message as JSON, and returns the active WebSocket connection. The caller is responsible for closing the connection.\n\nInput:\n- `node` [*node.HarnessNode] - Node configuration containing REST address and authentication details\n- `url` [string] - The endpoint path for the WebSocket connection\n- `method` [string] - The method parameter to include in the query string\n- `req` [proto.Message] - The protobuf message to send as initial payload\n- `customHeader` [http.Header] - Optional custom HTTP headers for the request\n\nOutput:\n- [*websocket.Conn] - Established WebSocket connection for bidirectional communication\n- [error] - Error if any step in the connection process fails",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lightningnetwork/lnd/lnrpc\"\n\t\"github.com/lightningnetwork/lnd/lntest/node\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar (\n\twebSocketDialer = &websocket.Dialer{\n\t\tHandshakeTimeout: time.Second,\n\t\tTLSClientConfig:  insecureTransport.TLSClientConfig,\n\t}\n\tcloseMsg = websocket.FormatCloseMessage(\n\t\twebsocket.CloseNormalClosure, \"done\",\n\t)\n)\n\nfunc openWebSocket(node *node.HarnessNode, url, method string,\n\treq proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\n\theader := customHeader\n\tif header == nil {\n\t\theader = make(http.Header)\n\t\tif err := addAdminMacaroon(node, header); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tfullURL := fmt.Sprintf(\n\t\t\"wss://%s%s?method=%s\", node.Cfg.RESTAddr(), url, method,\n\t)\n\tconn, resp, err := webSocketDialer.Dial(fullURL, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() { _ = resp.Body.Close() }()\n\n\treqMsg, err := lnrpc.RESTJsonMarshalOpts.Marshal(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = conn.WriteMessage(websocket.TextMessage, reqMsg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 117,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/golang/protobuf/proto\"\n)\n\nfunc openWebSocket(node *node.HarnessNode, url string, method string, req proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\tparsed, err := url.Parse(node.RestURL())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tparsed.Scheme = \"wss\"\n\twsURL := parsed.String()\n\tfullURL := wsURL + url\n\n\tparsedURL, err := url.Parse(fullURL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tq := parsedURL.Query()\n\tq.Set(\"method\", method)\n\tparsedURL.RawQuery = q.Encode()\n\tfullURL = parsedURL.String()\n\n\theaders := customHeader\n\tif headers == nil {\n\t\theaders = make(http.Header)\n\t\tmacaroon := node.GetAdminMacaroon()\n\t\theaders.Add(\"Authorization\", \"Bearer \"+macaroon)\n\t}\n\n\tdialer := &websocket.Dialer{}\n\tconn, _, err := dialer.Dial(fullURL, headers)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tjsonBytes, err := proto.MarshalJSON(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := conn.WriteMessage(websocket.TextMessage, jsonBytes); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n```"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that can establish secure connections, handle protocol negotiation, and manage message transmission between client and server. The solution should support TLS configuration, proxy settings, and proper connection cleanup.\n\nStruct Description: The RoundTripper struct implements http.RoundTripper interface to handle WebSocket connections with additional capabilities for Kubernetes API server communication. It manages WebSocket connections with TLS support and proxy configuration.\n\nFields:\n- TLSConfig: *tls.Config - Configuration for TLS/SSL connections\n- Proxier: func(req *http.Request) (*url.URL, error) - Function to determine proxy for requests\n- Conn: *gwebsocket.Conn - Active WebSocket connection\n\nMethods:\n- Connection: () -> *gwebsocket.Conn - Returns the active WebSocket connection\n- DataBufferSize: () -> int - Returns the buffer size for data transmission (32KB by default)\n- TLSClientConfig: () -> *tls.Config - Returns the TLS configuration\n- RoundTrip: (*http.Request) -> (*http.Response, error) - Main method that establishes WebSocket connection, handles protocol negotiation, and returns the HTTP response\n\nAdditional Function:\n- RoundTripperFor: (*restclient.Config) -> (http.RoundTripper, ConnectionHolder, error) - Factory function that creates a configured RoundTripper instance with proper TLS and proxy settings from Kubernetes client configuration",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tgwebsocket \"github.com/gorilla/websocket\"\n\t\"k8s.io/apimachinery/pkg/util/httpstream\"\n\t\"k8s.io/apimachinery/pkg/util/httpstream/wsstream\"\n\tutilnet \"k8s.io/apimachinery/pkg/util/net\"\n\trestclient \"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/transport\"\n)\n\ntype RoundTripper struct {\n\tTLSConfig *tls.Config\n\tProxier   func(req *http.Request) (*url.URL, error)\n\tConn      *gwebsocket.Conn\n}\n\nfunc (rt *RoundTripper) Connection() *gwebsocket.Conn {\n\treturn rt.Conn\n}\n\nfunc (rt *RoundTripper) DataBufferSize() int {\n\treturn 32 * 1024\n}\n\nfunc (rt *RoundTripper) TLSClientConfig() *tls.Config {\n\treturn rt.TLSConfig\n}\n\nfunc (rt *RoundTripper) RoundTrip(request *http.Request) (retResp *http.Response, retErr error) {\n\tdefer func() {\n\t\tif request.Body != nil {\n\t\t\terr := request.Body.Close()\n\t\t\tif retErr == nil {\n\t\t\t\tretErr = err\n\t\t\t}\n\t\t}\n\t}()\n\n\tprotocolVersions := request.Header[wsstream.WebSocketProtocolHeader]\n\tdelete(request.Header, wsstream.WebSocketProtocolHeader)\n\n\tdialer := gwebsocket.Dialer{\n\t\tProxy:           rt.Proxier,\n\t\tTLSClientConfig: rt.TLSConfig,\n\t\tSubprotocols:    protocolVersions,\n\t\tReadBufferSize:  rt.DataBufferSize() + 1024,\n\t\tWriteBufferSize: rt.DataBufferSize() + 1024,\n\t}\n\tswitch request.URL.Scheme {\n\tcase \"https\":\n\t\trequest.URL.Scheme = \"wss\"\n\tcase \"http\":\n\t\trequest.URL.Scheme = \"ws\"\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown url scheme: %s\", request.URL.Scheme)\n\t}\n\twsConn, resp, err := dialer.DialContext(request.Context(), request.URL.String(), request.Header)\n\tif err != nil {\n\t\tif errors.Is(err, gwebsocket.ErrBadHandshake) {\n\t\t\tcause := err\n\t\t\tif resp != nil && len(resp.Status) > 0 {\n\t\t\t\tdefer resp.Body.Close()\n\t\t\t\tcause = fmt.Errorf(\"%w (%s)\", err, resp.Status)\n\t\t\t\tresponseErrorBytes, readErr := io.ReadAll(io.LimitReader(resp.Body, 64*1024))\n\t\t\t\tif readErr != nil {\n\t\t\t\t\tcause = fmt.Errorf(\"%w: unable to read error from server response\", cause)\n\t\t\t\t} else {\n\t\t\t\t\tresponseError := strings.TrimSpace(string(responseErrorBytes))\n\t\t\t\t\tif len(responseError) > 0 {\n\t\t\t\t\t\tif obj, _, decodeErr := statusCodecs.UniversalDecoder().Decode(responseErrorBytes, nil, &metav1.Status{}); decodeErr == nil {\n\t\t\t\t\t\t\tif status, ok := obj.(*metav1.Status); ok {\n\t\t\t\t\t\t\t\tcause = &apierrors.StatusError{ErrStatus: *status}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcause = fmt.Errorf(\"%w: %s\", cause, responseError)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil, &httpstream.UpgradeFailureError{Cause: cause}\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tfoundProtocol := false\n\tfor _, protocolVersion := range protocolVersions {\n\t\tif protocolVersion == wsConn.Subprotocol() {\n\t\t\tfoundProtocol = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !foundProtocol {\n\t\twsConn.Close()\n\t\treturn nil, &httpstream.UpgradeFailureError{Cause: fmt.Errorf(\"invalid protocol, expected one of %q, got %q\", protocolVersions, wsConn.Subprotocol())}\n\t}\n\n\trt.Conn = wsConn\n\n\treturn resp, nil\n}\n\nfunc RoundTripperFor(config *restclient.Config) (http.RoundTripper, ConnectionHolder, error) {\n\ttransportCfg, err := config.TransportConfig()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\ttlsConfig, err := transport.TLSConfigFor(transportCfg)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tproxy := config.Proxy\n\tif proxy == nil {\n\t\tproxy = utilnet.NewProxierWithNoProxyCIDR(http.ProxyFromEnvironment)\n\t}\n\n\tupgradeRoundTripper := &RoundTripper{\n\t\tTLSConfig: tlsConfig,\n\t\tProxier:   proxy,\n\t}\n\twrapper, err := transport.HTTPWrappersForConfig(transportCfg, upgradeRoundTripper)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\treturn wrapper, upgradeRoundTripper, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "```go\ntype RoundTripper struct {\n\tTLSConfig *tls.Config\n\tProxier   func(*http.Request) (*url.URL, error)\n\tConn      *gwebsocket.Conn\n}\n\nfunc (rt *RoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n\treq.Header.Set(\"Upgrade\", \"websocket\")\n\treq.Header.Set(\"Connection\", \"Upgrade\")\n\n\tdialer := &gwebsocket.Dialer{\n\t\tTLSClientConfig: rt.TLSConfig,\n\t\tProxy:           rt.Proxier,\n\t}\n\n\tconn, resp, err := dialer.Dial(req.URL.String(), req.Header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trt.Conn = conn\n\treturn resp, nil\n}\n\nfunc (rt *RoundTripper) Connection() *gwebsocket.Conn {\n\treturn rt.Conn\n}\n\nfunc (rt *RoundTripper) DataBufferSize() int {\n\treturn 32 * 1024\n}\n\nfunc (rt *RoundTripper) TLSClientConfig() *tls.Config {\n\treturn rt.TLSConfig\n}\n\nfunc RoundTripperFor(config *restclient.Config) (http.RoundTripper, ConnectionHolder, error) {\n\ttlsConfig := config.TLSClientConfig\n\tproxier := func(req *http.Request) (*url.URL, error) {\n\t\treturn config.Proxy(req)\n\t}\n\trt := &RoundTripper{\n\t\tTLSConfig: tlsConfig,\n\t\tProxier:   proxier,\n\t}\n\treturn rt, rt, nil\n}\n```"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Create a WebSocket client connection wrapper in Go that provides a simplified interface for reading and writing binary messages over a WebSocket connection, with proper error handling and connection management.\n\nStruct Description: The Conn struct wraps a WebSocket connection and provides io.Reader/io.Writer compatible methods for binary message communication, along with standard net.Conn interface methods.\n\nFields:\nwsConn: *websocket.Conn - The underlying WebSocket connection\nreader: io.Reader - Current message reader for streaming message content\n\nMethods:\nNew: (wsConn *websocket.Conn) -> *Conn - Creates a new Conn wrapper instance\nDial: (ctx context.Context, url string, opts ...DialOption) -> (*Conn, error) - Establishes a new WebSocket connection with optional configuration\nRead: (b []byte) -> (int, error) - Reads binary data from the WebSocket connection (implements io.Reader)\nWrite: (b []byte) -> (int, error) - Writes binary data to the WebSocket connection (implements io.Writer)\nClose: () -> error - Closes the WebSocket connection\nLocalAddr: () -> net.Addr - Returns local network address\nRemoteAddr: () -> net.Addr - Returns remote network address\nSetDeadline: (t time.Time) -> error - Sets both read and write deadlines\nSetReadDeadline: (t time.Time) -> error - Sets read deadline\nSetWriteDeadline: (t time.Time) -> error - Sets write deadline",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Conn struct {\n\twsConn *websocket.Conn\n\treader io.Reader\n}\n\nfunc New(wsConn *websocket.Conn) *Conn {\n\treturn &Conn{\n\t\twsConn: wsConn,\n\t\treader: nil,\n\t}\n}\n\nfunc Dial(ctx context.Context, url string, opts ...DialOption) (*Conn, error) {\n\toptions := dialOptions{}\n\tfor _, o := range opts {\n\t\to.apply(&options)\n\t}\n\n\tdialer := &websocket.Dialer{\n\t\tHandshakeTimeout: 60 * time.Second,\n\t}\n\n\tif options.tlsConfig != nil {\n\t\tdialer.TLSClientConfig = options.tlsConfig\n\t}\n\n\theader := make(http.Header)\n\tif options.token != \"\" {\n\t\theader.Set(\"Authorization\", \"Bearer \"+options.token)\n\t}\n\n\twsConn, resp, err := dialer.DialContext(\n\t\tctx, url, header,\n\t)\n\tif err == nil {\n\t\treturn New(wsConn), nil\n\t}\n\tif resp == nil {\n\t\treturn nil, NewRetryableError(err)\n\t}\n\tdefer resp.Body.Close()\n\n\terr = fmt.Errorf(\"%d: %w\", resp.StatusCode, err)\n\tif _, ok := retryableStatusCodes[resp.StatusCode]; ok {\n\t\treturn nil, NewRetryableError(err)\n\t}\n\treturn nil, err\n}\n\nfunc (c *Conn) Read(b []byte) (int, error) {\n\tfor {\n\t\tif c.reader == nil {\n\t\t\tmt, r, err := c.wsConn.NextReader()\n\t\t\tif err != nil {\n\t\t\t\tvar closeErr *websocket.CloseError\n\t\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\t\treturn 0, net.ErrClosed\n\t\t\t\t}\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tif mt != websocket.BinaryMessage {\n\t\t\t\treturn 0, fmt.Errorf(\"unexpected message type: %d\", mt)\n\t\t\t}\n\t\t\tc.reader = r\n\t\t}\n\n\t\tn, err := c.reader.Read(b)\n\t\tif n > 0 {\n\t\t\tif err != nil {\n\t\t\t\tc.reader = nil\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\terr = nil\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n, err\n\t\t}\n\t\tif err != io.EOF {\n\t\t\tvar closeErr *websocket.CloseError\n\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\treturn 0, net.ErrClosed\n\t\t\t}\n\t\t\treturn 0, err\n\t\t}\n\n\t\tc.reader = nil\n\t}\n}\n\nfunc (c *Conn) Write(b []byte) (int, error) {\n\tif err := c.wsConn.WriteMessage(websocket.BinaryMessage, b); err != nil {\n\t\tvar closeErr *websocket.CloseError\n\t\tif errors.As(err, &closeErr) {\n\t\t\treturn 0, net.ErrClosed\n\t\t}\n\t\treturn 0, err\n\t}\n\treturn len(b), nil\n}\n\nfunc (c *Conn) Close() error {\n\treturn c.wsConn.Close()\n}\n\nfunc (c *Conn) LocalAddr() net.Addr {\n\treturn c.wsConn.LocalAddr()\n}\n\nfunc (c *Conn) RemoteAddr() net.Addr {\n\treturn c.wsConn.RemoteAddr()\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\tif err := c.SetReadDeadline(t); err != nil {\n\t\treturn err\n\t}\n\treturn c.SetWriteDeadline(t)\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\treturn c.wsConn.SetReadDeadline(t)\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\treturn c.wsConn.SetWriteDeadline(t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Conn struct {\n\twsConn *websocket.Conn\n\treader io.Reader\n}\n\ntype DialOption func(*websocket.Dialer)\n\nfunc New(wsConn *websocket.Conn) *Conn {\n\treturn &Conn{wsConn: wsConn}\n}\n\nfunc Dial(ctx context.Context, url string, opts ...DialOption) (*Conn, error) {\n\tdialer := websocket.DefaultDialer\n\tfor _, opt := range opts {\n\t\topt(dialer)\n\t}\n\twsConn, _, err := dialer.DialContext(ctx, url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn New(wsConn), nil\n}\n\nfunc (c *Conn) Read(p []byte) (n int, err error) {\n\tfor {\n\t\tif c.reader == nil {\n\t\t\t_, data, err := c.wsConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tc.reader = bytes.NewReader(data)\n\t\t}\n\t\tn, err = c.reader.Read(p)\n\t\tif err == nil || err == io.EOF {\n\t\t\tc.reader = nil\n\t\t\treturn n, err\n\t\t}\n\t\treturn n, err\n\t}\n}\n\nfunc (c *Conn) Write(p []byte) (n int, err error) {\n\terr = c.wsConn.WriteMessage(websocket.BinaryMessage, p)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn len(p), nil\n}\n\nfunc (c *Conn) Close() error {\n\treturn c.wsConn.Close()\n}\n\nfunc (c *Conn) LocalAddr() net.Addr {\n\treturn c.wsConn.LocalAddr()\n}\n\nfunc (c *Conn) RemoteAddr() net.Addr {\n\treturn c.wsConn.RemoteAddr()\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\treturn c.wsConn.SetDeadline(t)\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\treturn c.wsConn.SetReadDeadline(t)\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\treturn c.wsConn.SetWriteDeadline(t)\n}\n```"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a WebSocket server handler for a DERP (Distributed Encrypted Relay for Packets) server using the nhooyr.io/websocket library in Go. The handler should upgrade HTTP connections to WebSocket, enforce protocol requirements, and establish the connection for DERP communication.\n\nStruct Description: The DERPServer struct represents a DERP server instance that handles WebSocket connections for relaying encrypted packets between Tailscale nodes.\n\nFields:\nkey: [key.NodePrivate] - The private key used for node authentication\ntailscaleDERP: [*derp.Server] - The underlying DERP server instance that manages relay connections\n\nMethods:\nserveWebsocket: [Name](writer http.ResponseWriter, req *http.Request) -> [void] - Handles incoming HTTP requests by upgrading them to WebSocket connections. Validates the subprotocol, creates a network connection wrapper around the WebSocket, and passes it to the DERP server for handling.\n\nInput:\n- writer: [http.ResponseWriter] - The HTTP response writer\n- req: [*http.Request] - The incoming HTTP request\n\nOutput:\n- None (handles connection directly, may write error responses to writer)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/coder/websocket\"\n\t\"tailscale.com/derp\"\n\t\"tailscale.com/net/wsconn\"\n)\n\ntype DERPServer struct {\n\tkey           key.NodePrivate\n\ttailscaleDERP *derp.Server\n}\n\nfunc (d *DERPServer) serveWebsocket(writer http.ResponseWriter, req *http.Request) {\n\twebsocketConn, err := websocket.Accept(writer, req, &websocket.AcceptOptions{\n\t\tSubprotocols:   []string{\"derp\"},\n\t\tOriginPatterns: []string{\"*\"},\n\t\tCompressionMode: websocket.CompressionDisabled,\n\t})\n\tif err != nil {\n\t\twriter.Header().Set(\"Content-Type\", \"text/plain\")\n\t\twriter.WriteHeader(http.StatusInternalServerError)\n\t\t_, err = writer.Write([]byte(\"Failed to upgrade websocket request\"))\n\t\treturn\n\t}\n\tdefer websocketConn.Close(websocket.StatusInternalError, \"closing\")\n\tif websocketConn.Subprotocol() != \"derp\" {\n\t\twebsocketConn.Close(websocket.StatusPolicyViolation, \"client must speak the derp subprotocol\")\n\t\treturn\n\t}\n\n\twc := wsconn.NetConn(req.Context(), websocketConn, websocket.MessageBinary, req.RemoteAddr)\n\tbrw := bufio.NewReadWriter(bufio.NewReader(wc), bufio.NewWriter(wc))\n\td.tailscaleDERP.Accept(req.Context(), wc, brw, req.RemoteAddr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "```go\nfunc (s *DERPServer) serveWebsocket(w http.ResponseWriter, r *http.Request) {\n    opts := websocket.Options{\n        Subprotocols: []string{\"derp\"},\n    }\n    conn, _, err := websocket.Upgrade(w, r, nil, 1024, 1024, opts)\n    if err != nil {\n        http.Error(w, \"upgrade failed\", http.StatusInternalServerError)\n        return\n    }\n    s.tailscaleDERP.HandleConn(conn)\n}\n```"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a WebSocket server in Go that handles WebSocket connections, messages, and events using the nhooyr.io/websocket package. The server should provide event-based handling for connection establishment, message reception, and connection closure.\n\nStruct Description: The `testServer` struct represents a WebSocket server with event handling capabilities. It manages HTTP routes, WebSocket connections, and provides methods to subscribe to WebSocket events.\n\nFields:\n\n- sync.Mutex: sync.Mutex - Provides thread-safe access to the server's resources\n- eventEmitter: playwright.EventEmitter - Handles event subscription and emission for WebSocket events\n- mux: *http.ServeMux - HTTP request multiplexer for routing\n- testServer: *httptest.Server - HTTP test server instance\n- routes: map[string]http.HandlerFunc - Map of URL paths to their handler functions\n- requestSubscriberes: map[string][]chan *http.Request - Channels for request subscribers\n- PREFIX: string - Server URL prefix\n- EMPTY_PAGE: string - Path to empty page\n- CROSS_PROCESS_PREFIX: string - Prefix for cross-process communication\n- WS_PREFIX: string - WebSocket endpoint prefix\n- PORT: string - Server port number\n\nMethods:\n\n- wsHandler: (w http.ResponseWriter, r *http.Request) -> void - Handles WebSocket connection upgrade and message processing\n- OnceWebSocketConnection: (handler func(c *websocket.Conn, r *http.Request)) -> void - Registers a one-time connection handler\n- OnWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a persistent close handler\n- OnceWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a one-time close handler\n- OnWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a persistent message handler\n- OnceWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a one-time message handler\n- SendOnWebSocketConnection: (msgType websocket.MessageType, data []byte) -> void - Sends a message when a connection is established\n- WaitForWebSocketConnection: () -> <-chan *wsConnection - Returns a channel that receives the first WebSocket connection\n\nAdditional Struct:\n\n- wsConnection: struct - Represents an active WebSocket connection\n  Fields:\n    - Conn: *websocket.Conn - The WebSocket connection\n    - Req: *http.Request - The associated HTTP request\n  Methods:\n    - SendMessage: (msgType websocket.MessageType, data []byte) -> void - Sends a message through the connection",
    "Canonical_solution": "import (\n\t\"github.com/coder/websocket\"\n\t\"github.com/playwright-community/playwright-go\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype testServer struct {\n\tsync.Mutex\n\teventEmitter         playwright.EventEmitter\n\tmux                  *http.ServeMux\n\ttestServer           *httptest.Server\n\troutes               map[string]http.HandlerFunc\n\trequestSubscriberes  map[string][]chan *http.Request\n\tPREFIX               string\n\tEMPTY_PAGE           string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX            string\n\tPORT                 string\n}\n\nfunc (t *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tInsecureSkipVerify: true,\n\t})\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not upgrade ws connection:\", err)\n\t\treturn\n\t}\n\tdefer c.Close(websocket.StatusNormalClosure, \"\")\n\n\tt.eventEmitter.Emit(\"connection\", c, r)\n\n\tfor {\n\t\ttyp, message, err := c.Read(r.Context())\n\t\tif err != nil {\n\t\t\tcloseErr := new(websocket.CloseError)\n\t\t\tif errors.As(err, closeErr) {\n\t\t\t\tt.eventEmitter.Emit(\"close\", closeErr)\n\t\t\t}\n\t\t\tswitch websocket.CloseStatus(err) {\n\t\t\tcase websocket.StatusNormalClosure, websocket.StatusGoingAway, websocket.StatusNoStatusRcvd:\n\t\t\tdefault:\n\t\t\t\tlog.Println(\"testServer: could not read ws message:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tt.eventEmitter.Emit(\"message\", c, r, typ, message)\n\t}\n}\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (c *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\terr := c.Conn.Write(c.Req.Context(), msgType, data)\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\treturn\n\t}\n}\n\nfunc (t *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\tt.eventEmitter.Once(\"connection\", handler)\n}\n\nfunc (t *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.On(\"close\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.Once(\"close\", handler)\n}\n\nfunc (t *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.On(\"message\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.Once(\"message\", handler)\n}\n\nfunc (t *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\terr := c.Write(r.Context(), msgType, data)\n\t\tif err != nil {\n\t\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\t\treturn\n\t\t}\n\t})\n}\n\nfunc (t *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tchannel := make(chan *wsConnection)\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\tchannel <- &wsConnection{Conn: c, Req: r}\n\t\tclose(channel)\n\t})\n\treturn channel\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "type testServer struct {\n\tsync.Mutex\n\teventEmitter      playwright.EventEmitter\n\tmux               *http.ServeMux\n\ttestServer        *httptest.Server\n\troutes            map[string]http.HandlerFunc\n\trequestSubscribers map[string][]chan *http.Request\n\tPREFIX            string\n\tEMPTY_PAGE        string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX         string\n\tPORT              string\n}\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (c *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\tc.Conn.Write(c.Req.Context(), msgType, data)\n}\n\nfunc (s *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := websocket.Accept(w, r, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\ts.eventEmitter.Emit(\"connection\", &wsConnection{Conn: conn, Req: r})\n\tfor {\n\t\tmsgType, msg, err := conn.Read(r.Context())\n\t\tif err != nil {\n\t\t\ts.eventEmitter.Emit(\"close\", &websocket.CloseError{})\n\t\t\tbreak\n\t\t}\n\t\ts.eventEmitter.Emit(\"message\", conn, r, msgType, msg)\n\t}\n}\n\nfunc (s *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\ts.eventEmitter.Once(\"connection\", func(args ...interface{}) {\n\t\tif len(args) < 2 {\n\t\t\treturn\n\t\t}\n\t\tconn := args[0].(*websocket.Conn)\n\t\treq := args[1].(*http.Request)\n\t\thandler(conn, req)\n\t})\n}\n\nfunc (s *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\ts.eventEmitter.On(\"close\", func(args ...interface{}) {\n\t\tif len(args) < 1 {\n\t\t\treturn\n\t\t}\n\t\terr := args[0].(*websocket.CloseError)\n\t\thandler(err)\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\ts.eventEmitter.Once(\"close\", func(args ...interface{}) {\n\t\tif len(args) < 1 {\n\t\t\treturn\n\t\t}\n\t\terr := args[0].(*websocket.CloseError)\n\t\thandler(err)\n\t})\n}\n\nfunc (s *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\ts.eventEmitter.On(\"message\", func(args ...interface{}) {\n\t\tif len(args) < 4 {\n\t\t\treturn\n\t\t}\n\t\tconn := args[0].(*websocket.Conn)\n\t\treq := args[1].(*http.Request)\n\t\tmsgType := args[2].(websocket.MessageType)\n\t\tmsg := args[3].([]byte)\n\t\thandler(conn, req, msgType, msg)\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\ts.eventEmitter.Once(\"message\", func(args ...interface{}) {\n\t\tif len(args) < 4 {\n\t\t\treturn\n\t\t}\n\t\tconn := args[0].(*websocket.Conn)\n\t\treq := args[1].(*http.Request)\n\t\tmsgType := args[2].(websocket.MessageType)\n\t\tmsg := args[3].([]byte)\n\t\thandler(conn, req, msgType, msg)\n\t})\n}\n\nfunc (s *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\ts.eventEmitter.Emit(\"send\", msgType, data)\n}\n\nfunc (s *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tch := make(chan *wsConnection)\n\ts.eventEmitter.On(\"connection\", func(args ...interface{}) {\n\t\tif len(args) < 1 {\n\t\t\treturn\n\t\t}\n\t\tconn := args[0].(*wsConnection)\n\t\tch <- conn\n\t})\n\treturn ch\n}"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: The task involves creating a WebSocket handler in Go that upgrades HTTP connections to WebSocket connections, manages the connection lifecycle, and handles message exchange between client and server.\n\nStruct Description: The WsHandler struct is responsible for managing WebSocket connections, including upgrading HTTP connections, handling incoming messages, and managing connection state.\n\nFields:\n- svcCtx: *svc.ServiceContext - A reference to the service context containing dependencies and configuration\n\nMethods:\n- Upgrade: (ginCtx *gin.Context) -> void - Upgrades an HTTP connection to a WebSocket connection and manages the connection lifecycle\n  Input: ginCtx *gin.Context - The Gin context containing HTTP request and response objects\n  Output: None (handles connection directly)\n\n- onReceive: (ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) -> (pb.ResponseCode, error) - Handles incoming WebSocket messages\n  Input: \n    - ctx context.Context - Context for the operation\n    - connection *gatewayservicelogic.Connection - The WebSocket connection object\n    - typ websocket.MessageType - Type of the WebSocket message\n    - msg []byte - The message content\n  Output:\n    - pb.ResponseCode - Response code indicating processing result\n    - error - Any error that occurred during processing",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\tgatewayservicelogic \"github.com/cherish-chat/xxim-server/app/gateway/internal/logic/gatewayservice\"\n\t\"github.com/cherish-chat/xxim-server/common/pb\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\toteltrace \"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/protobuf/proto\"\n\t\"io\"\n\t\"math\"\n\t\"nhooyr.io/websocket\"\n\t\"strings\"\n)\n\ntype WsHandler struct {\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc (h *WsHandler) Upgrade(ginCtx *gin.Context) {\n\tr := ginCtx.Request\n\tw := ginCtx.Writer\n\tlogger := logx.WithContext(r.Context())\n\theaders := make(map[string]string)\n\tfor k, v := range r.Header {\n\t\tif len(v) > 0 {\n\t\t\theaders[k] = v[0]\n\t\t}\n\t}\n\theader := &pb.RequestHeader{\n\t\tClientIp: utils.Http.GetClientIP(r),\n\t}\n\tcompressionMode := websocket.CompressionNoContextTakeover\n\tif strings.Contains(r.UserAgent(), \"Safari\") {\n\t\tcompressionMode = websocket.CompressionDisabled\n\t}\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tSubprotocols:         nil,\n\t\tInsecureSkipVerify:   true,\n\t\tOriginPatterns:       nil,\n\t\tCompressionMode:      compressionMode,\n\t\tCompressionThreshold: 0,\n\t})\n\tif err != nil {\n\t\tif r.URL.Path == \"/\" {\n\t\t\treturn\n\t\t}\n\t\tlogger.Errorf(\"failed to accept websocket connection: %v\", err)\n\t\treturn\n\t}\n\tc.SetReadLimit(math.MaxInt32)\n\tbeforeConnectResp, err := h.svcCtx.CallbackService.UserBeforeConnect(r.Context(), &pb.UserBeforeConnectReq{Header: header})\n\tif err != nil {\n\t\tlogger.Errorf(\"beforeConnect error: %v\", err)\n\t\tc.Close(websocket.StatusCode(pb.WebsocketCustomCloseCode_CloseCodeServerInternalError), err.Error())\n\t\treturn\n\t}\n\tif !beforeConnectResp.Success {\n\t\tc.Close(websocket.StatusCode(beforeConnectResp.CloseCode), beforeConnectResp.CloseReason)\n\t\treturn\n\t}\n\n\theader.UserId = beforeConnectResp.UserId\n\n\tdefer c.Close(websocket.StatusInternalError, \"\")\n\n\tctx, cancelFunc := context.WithCancel(r.Context())\n\tconnection := gatewayservicelogic.NewWebsocketConnect(ctx, header, c)\n\tdefer func() {\n\t\tgatewayservicelogic.ConnectionLogic.OnDisconnect(connection)\n\t}()\n\tgo func() {\n\t\tdefer cancelFunc()\n\t\tfor {\n\t\t\tlogger.Debugf(\"start read\")\n\t\t\ttyp, msg, err := c.Read(ctx)\n\t\t\tif err != nil {\n\t\t\t\tif errors.Is(err, io.EOF) {\n\t\t\t\t} else if websocket.CloseStatus(err) == websocket.StatusNormalClosure ||\n\t\t\t\t\twebsocket.CloseStatus(err) == websocket.StatusGoingAway {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else if strings.Contains(err.Error(), \"connection reset by peer\") {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else if strings.Contains(err.Error(), \"corrupt input\") {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else {\n\t\t\t\t\tlogx.Errorf(\"failed to read message: %v\", err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tgo func() {\n\t\t\t\t_, _ = h.onReceive(ctx, connection, typ, msg)\n\t\t\t}()\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (h *WsHandler) onReceive(ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) (pb.ResponseCode, error) {\n\tvar aesKey []byte\n\tvar aesIv []byte\n\tvar isEncrypt bool\n\n\tconnection.PublicKeyLock.RLock()\n\t{\n\t\tif len(connection.SharedSecret) == 0 {\n\t\t\tisEncrypt = false\n\t\t} else {\n\t\t\tisEncrypt = true\n\t\t\taesKey = connection.SharedSecret[:]\n\t\t\taesIv = connection.SharedSecret[8:24]\n\t\t}\n\t}\n\tconnection.PublicKeyLock.RUnlock()\n\n\tif isEncrypt {\n\t\tvar err error\n\t\tmsg, err = utils.Aes.Decrypt(aesKey, aesIv, msg)\n\t\tif err != nil {\n\t\t\tlogx.Errorf(\"decrypt message error: %v\", err)\n\t\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", err)\n\t\t}\n\t}\n\n\tapiRequest := &pb.GatewayApiRequest{}\n\terr := proto.Unmarshal(msg, apiRequest)\n\tif err != nil {\n\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", err)\n\t}\n\tapiRequest.Header = connection.GetHeader()\n\troute, ok := universalRouteMap[apiRequest.Path]\n\ttracer := otel.Tracer(common.TraceName)\n\tpropagator := otel.GetTextMapPropagator()\n\tspanName := apiRequest.Path\n\tcarrier := propagation.MapCarrier{\n\t\t\"appId\":       apiRequest.Header.AppId,\n\t\t\"userId\":      apiRequest.Header.UserId,\n\t\t\"clientIp\":    apiRequest.Header.ClientIp,\n\t\t\"installId\":   apiRequest.Header.InstallId,\n\t\t\"platform\":    apiRequest.Header.Platform.String(),\n\t\t\"deviceModel\": apiRequest.Header.DeviceModel,\n\t\t\"osVersion\":   apiRequest.Header.OsVersion,\n\t\t\"appVersion\":  apiRequest.Header.AppVersion,\n\t\t\"connectTime\": connection.ConnectedTime.Format(\"2006-01-02 15:04:05\"),\n\t\t\"extra\":       apiRequest.Header.Extra,\n\t}\n\tspanCtx := propagator.Extract(ctx, carrier)\n\tspanCtx, span := tracer.Start(spanCtx, spanName,\n\t\toteltrace.WithSpanKind(oteltrace.SpanKindServer),\n\t)\n\tdefer span.End()\n\tpropagator.Inject(spanCtx, carrier)\n\tif !ok {\n\t\tlogx.Errorf(\"path 404 not found: %s\", apiRequest.Path)\n\t\tspan.SetStatus(codes.Error, \"path\"+apiRequest.Path+\"404 not found\")\n\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", \"path 404 not found\")\n\t}\n\tcode, responseBody, err := route(spanCtx, connection, apiRequest)\n\tif len(responseBody) > 0 {\n\t\terr := connection.SendMessage(ctx, responseBody)\n\t\tif err != nil {\n\t\t\tlogx.Infof(\"failed to write message: %v\", err)\n\t\t}\n\t}\n\tspan.SetAttributes(attribute.Int(\"responseBody.length\", len(responseBody)))\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t} else {\n\t\tspan.SetStatus(codes.Ok, \"\")\n\t}\n\treturn code, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"log\"\n\t\"your/service/context\"\n\t\"your/gatewayservicelogic\"\n\t\"your/pb\"\n)\n\ntype WsHandler struct {\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc (h *WsHandler) Upgrade(ginCtx *gin.Context) {\n\tupgrader := h.svcCtx.Upgrader\n\tconn, err := upgrader.Upgrade(ginCtx.Writer, ginCtx.Request, nil)\n\tif err != nil {\n\t\tginCtx.AbortWithStatus(500)\n\t\treturn\n\t}\n\tgatewayConn := h.svcCtx.NewConnection()\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tgatewayConn.Close()\n\t\t\tbreak\n\t\t}\n\t\tcode, err := h.onReceive(ginCtx.Context(), gatewayConn, websocket.TextMessage, msg)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error processing message:\", err)\n\t\t}\n\t}\n}\n\nfunc (h *WsHandler) onReceive(ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) (pb.ResponseCode, error) {\n\t// Implementation here\n\treturn pb.ResponseCode_OK, nil\n}\n```"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a child process using Go's pipe mechanism. The handler should start the child process, monitor its initialization status through the pipe, and handle potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct encapsulates a child process command and provides methods to manage its execution and IPC communication.\n\nFields:\ncmd: *exec.Cmd - The command to be executed as a child process.\n\nMethods:\nStart: Start() -> error - Initializes the child process, establishes a pipe for communication, monitors the child's initialization status, and returns any errors encountered during startup or a timeout if the child process fails to initialize within the specified duration.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\treader, writer, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.cmd.Stdout = writer\n\tp.cmd.Stderr = writer\n\n\tif err := p.cmd.Start(); err != nil {\n\t\twriter.Close()\n\t\treader.Close()\n\t\treturn err\n\t}\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tch := make(chan error)\n\tgo func() {\n\t\tbuffer := make([]byte, 1024)\n\t\tn, err := reader.Read(buffer)\n\t\tif err != nil {\n\t\t\tch <- err\n\t\t\treturn\n\t\t}\n\t\tif string(buffer[:n]) != \"READY\" {\n\t\t\tch <- fmt.Errorf(\"unexpected message: %s\", buffer[:n])\n\t\t\treturn\n\t\t}\n\t\tch <- nil\n\t}()\n\n\tselect {\n\tcase err := <-ch:\n\t\tif err != nil {\n\t\t\tp.cmd.Process.Kill()\n\t\t\treturn err\n\t\t}\n\tcase <-ctx.Done():\n\t\tp.cmd.Process.Kill()\n\t\treturn fmt.Errorf(\"timeout waiting for child initialization: %w\", ctx.Err())\n\t}\n\n\twriter.Close()\n\treader.Close()\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Go struct that represents a basic HTTP server capable of serving static files from a specified directory, with fallback to a default page when files are not found.\n\nStruct Description: The Site struct represents a simple HTTP server that serves static files from a \"./site\" directory. It handles file requests and falls back to serving \"index.html\" when the requested file is not found.\n\nFields: (This struct has no explicit fields as it's used purely for organizing HTTP server functionality)\n\nMethods:\n\nMethod1: New() -> *Site - A constructor function that creates and returns a new instance of the Site struct.\n\nMethod2: Run() - Starts the HTTP server on the port specified in the configuration. It sets up a file server handler with custom 404 behavior and begins listening for requests.\n\nMethod3: notFound(http.ResponseWriter, *http.Request) - A helper function that serves the \"./site/index.html\" file when a requested resource is not found. Takes standard HTTP handler parameters and returns nothing.\n\nMethod4: server(http.FileSystem) -> http.Handler - A helper function that creates a custom file server handler with fallback behavior. Takes a filesystem interface and returns an HTTP handler.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n)\n\ntype Site struct {\n}\n\nfunc New() *Site {\n\treturn &Site{}\n}\n\nfunc notFound(w http.ResponseWriter, r *http.Request) {\n\tdata, _ := ioutil.ReadFile(\"./site/index.html\")\n\t_, _ = fmt.Fprintf(w, string(data))\n\treturn\n}\n\nfunc server(fs http.FileSystem) http.Handler {\n\tfileServer := http.FileServer(fs)\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfilePath := path.Clean(\"./site\" + r.URL.Path)\n\t\t_, err := os.Stat(filePath)\n\t\tif err != nil {\n\t\t\tnotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tfileServer.ServeHTTP(w, r)\n\t})\n}\n\nfunc (s *Site) Run() {\n\tport := config.Conf.Site.SiteBase.ListenPort\n\taddr := fmt.Sprintf(\":%d\", port)\n\thttp.ListenAndServe(addr, server(http.Dir(\"./site\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\ntype Site struct{}\n\nfunc New() *Site {\n\treturn &Site{}\n}\n\nfunc (s *Site) Run() {\n\thttp.Handle(\"/\", s.server(http.Dir(\"./site\")))\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc (s *Site) notFound(w http.ResponseWriter, r *http.Request) {\n\thttp.ServeFile(w, r, \"./site/index.html\")\n}\n\nfunc (s *Site) server(fs http.FileSystem) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfile, err := fs.Open(r.URL.Path)\n\t\tif err == nil {\n\t\t\thttp.ServeContent(w, r, r.URL.Path, time.Now(), file)\n\t\t\treturn\n\t\t}\n\t\ts.notFound(w, r)\n\t})\n}\n```"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Write a Go function that spawns a process in a new user namespace to read a file's contents, using pipes for inter-process communication to capture both standard output and error streams.\n\nFunction Description: The function spawns a child process (via CGO) that runs in a new user namespace, reads the specified file, and returns its contents. It uses two pipes for IPC - one for standard output and another for standard error. The function handles process creation, pipe management, error handling, and cleanup of resources.\n\nInput:\n- nsPath (string): Path to the user namespace configuration\n- path (string): Path to the file to be read\n\nOutput:\n- ([]byte, error): Returns the file contents as bytes if successful, or an error if any step fails (pipe creation, process spawning, reading output, or process execution)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\t\"unsafe\"\n\n\t\"github.com/sirupsen/logrus\"\n)\n\n/*\n#include <stdlib.h>\nextern int spawn_userns_cat(char *userns_path, char *path, int outfd, int errfd);\n*/\nimport \"C\"\n\nfunc spawnUserNamespaceCat(nsPath string, path string) ([]byte, error) {\n\trdr, wtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer rdr.Close()\n\tdefer wtr.Close()\n\n\terrRdr, errWtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create error pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer errRdr.Close()\n\tdefer errWtr.Close()\n\n\tcNsPath := C.CString(nsPath)\n\tdefer C.free(unsafe.Pointer(cNsPath))\n\tcPath := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cPath))\n\n\tchildPid := C.spawn_userns_cat(cNsPath, cPath, C.int(wtr.Fd()), C.int(errWtr.Fd()))\n\n\tif childPid < 0 {\n\t\treturn nil, fmt.Errorf(\"failed to spawn fork for userns\")\n\t} else if childPid == 0 {\n\t\tpanic(\"runc executing inside fork child -- unsafe state!\")\n\t}\n\n\twtr.Close()\n\toutput, err := io.ReadAll(rdr)\n\trdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn failed: %w\", err)\n\t}\n\n\terrWtr.Close()\n\terrOutput, err := io.ReadAll(errRdr)\n\terrRdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn error pipe failed: %w\", err)\n\t}\n\terrOutput = bytes.TrimSpace(errOutput)\n\n\tchild, err := os.FindProcess(int(childPid))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not find userns spawn process: %w\", err)\n\t}\n\tstate, err := child.Wait()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to wait for userns spawn process: %w\", err)\n\t}\n\tif !state.Success() {\n\t\terrStr := string(errOutput)\n\t\tif errStr == \"\" {\n\t\t\terrStr = fmt.Sprintf(\"unknown error (status code %d)\", state.ExitCode())\n\t\t}\n\t\treturn nil, fmt.Errorf(\"userns spawn: %s\", errStr)\n\t} else if len(errOutput) > 0 {\n\t\tlogrus.Debugf(\"userns spawn succeeded but unexpected error message found: %s\", string(errOutput))\n\t}\n\treturn output, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\n// #cgo CFLAGS: -Wall\n// #include <stdio.h>\n// #include <stdlib.h>\n// #include <unistd.h>\n// #include <sys/wait.h>\n// #include <sys/types.h>\n// #include <sys/mount.h>\n// #include <linux/user_namespace.h>\n// #include <fcntl.h>\n// #include <string.h>\n// #include <errno.h>\n//\n// typedef struct {\n//     const char *path;\n//     int stdout_fd;\n//     int stderr_fd;\n// } child_args;\n//\n// void *child_func(void *arg) {\n//     child_args *args = (child_args *)arg;\n//     const char *path = args->path;\n//     int stdout_fd = args->stdout_fd;\n//     int stderr_fd = args->stderr_fd;\n//\n//     // Redirect stdout and stderr\n//     dup2(stdout_fd, STDOUT_FILENO);\n//     dup2(stderr_fd, STDERR_FILENO);\n//     close(stdout_fd);\n//     close(stderr_fd);\n//\n//     // Open the file\n//     int fd = open(path, O_RDONLY);\n//     if (fd < 0) {\n//         fprintf(stderr, \"Failed to open file: %s\\n\", strerror(errno));\n//         exit(1);\n//     }\n//\n//     // Read and write to stdout\n//     char buffer[4096];\n//     ssize_t n;\n//     while ((n = read(fd, buffer, sizeof(buffer))) > 0) {\n//         write(STDOUT_FILENO, buffer, n);\n//     }\n//\n//     close(fd);\n//     exit(0);\n// }\n//\n// int run_in_namespace(const char *path, int stdout_fd, int stderr_fd) {\n//     child_args args = {path, stdout_fd, stderr_fd};\n//     pid_t pid = clone(child_func, NULL, CLONE_NEWUSER | SIGCHLD, &args);\n//     if (pid < 0) {\n//         return -1;\n//     }\n//\n//     int status;\n//     waitpid(pid, &status, 0);\n//\n//     return WIFEXITED(status) ? WEXITSTATUS(status) : -1;\n// }\n//\n// extern int run_in_namespace(const char *path, int stdout_fd, int stderr_fd);\n\n//export ReadFileInNamespace\nfunc ReadFileInNamespace(nsPath, path string) ([]byte, error) {\n\tstdoutR, stdoutW, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tstderrR, stderrW, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tstdoutFd := int(stdoutW.Fd())\n\tstderrFd := int(stderrW.Fd())\n\n\tret := run_in_namespace(C.CString(path), C.int(stdoutFd), C.int(stderrFd))\n\tif ret != 0 {\n\t\treturn nil, fmt.Errorf(\"child process failed\")\n\t}\n\n\tstdoutData, err := io.ReadAll(stdoutR)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tstderrData, err := io.ReadAll(stderrR)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(stderrData) > 0 {\n\t\treturn nil, fmt.Errorf(\"error: %s\", stderrData)\n\t}\n\n\treturn stdoutData, nil\n}\n```"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a userland proxy using Go's pipe mechanism. The handler starts the proxy process, monitors its initialization status, and handles potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct manages the lifecycle of a userland proxy process, including process execution, IPC communication via pipes, and status monitoring.\n\nFields:\n- cmd: *exec.Cmd - The command object representing the proxy process to be executed.\n- ExtraFiles: []*os.File - Additional file descriptors to be passed to the child process (contains the pipe writer).\n\nMethods:\n- Start() -> error - Initializes the proxy process, establishes IPC via pipe, monitors startup status, and returns any errors encountered during execution or timeout. The method creates a pipe, passes the writer to the child process, reads the initialization status from the pipe reader, and handles errors or timeouts.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd        *exec.Cmd\n\tExtraFiles []*os.File\n}\n\nfunc (p *proxyCommand) Start() error {\n\treader, writer, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.cmd.ExtraFiles = []*os.File{writer}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 1)\n\t\tn, err := reader.Read(buf)\n\t\tif err != nil {\n\t\t\tdone <- err\n\t\t} else {\n\t\t\tif n > 0 && buf[0] == '1' {\n\t\t\t\tdone <- nil\n\t\t\t} else {\n\t\t\t\tdone <- errors.New(\"invalid init message\")\n\t\t\t}\n\t\t}\n\t}()\n\tselect {\n\tcase err := <-done:\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tcase <-time.After(5 * time.Second):\n\t\tp.cmd.Process.Kill()\n\t\treturn errors.New(\"proxy start timeout\")\n\t}\n\treader.Close()\n\twriter.Close()\n\treturn nil\n}"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Create a Go struct that implements a log retrieval mechanism using pipes for inter-process communication, allowing for reading logs from a file and writing them to a pipe for consumption by another process.\n\nStruct Description: The `logRetriever` struct provides a way to read logs from a file and write them to a pipe, implementing `io.ReadCloser` for standard read and close operations. It also includes methods to manage the pipe's writer and output.\n\nFields:\n- reader: *os.File - The read end of the pipe used to consume log data.\n- writer: *os.File - The write end of the pipe used to send log data.\n- output: *fileCloner - A helper component that clones the writer's output to a log file.\n\nMethods:\n- newlogRetriever: (logFile string) -> (*logRetriever, error) - Initializes a new logRetriever instance, creates a pipe, and sets up file cloning. If the log file exists, copies its contents to the pipe.\n- Read: (p []byte) -> (int, error) - Implements io.Reader to read data from the pipe's reader.\n- CloseWriter: () -> error - Closes the pipe's writer to signal the end of data transmission.\n- Close: () -> error - Implements io.Closer to close the pipe's reader and release resources.\n- Opt: () -> cio.Opt - Returns an option for configuring IO streams, using a null reader and the output cloner.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"os\"\n)\n\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (l *logRetriever, err error) {\n\tl = &logRetriever{}\n\tif l.reader, l.writer, err = os.Pipe(); err != nil {\n\t\treturn\n\t}\n\n\tif l.output, err = newFileCloner(l.writer, logFile); err != nil {\n\t\treturn\n\t}\n\n\tif util.FileExists(logFile) {\n\t\tvar reader io.ReadCloser\n\t\tif reader, err = os.Open(logFile); err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer util.DeferErr(&err, reader.Close)\n\n\t\tif _, err = io.Copy(l.writer, reader); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}\n\nvar _ io.ReadCloser = &logRetriever{}\n\nfunc (l *logRetriever) Opt() cio.Opt {\n\treturn cio.WithStreams(&nullReader{}, l.output, l.output)\n}\n\nfunc (l *logRetriever) Read(p []byte) (n int, err error) {\n\treturn l.reader.Read(p)\n}\n\nfunc (l *logRetriever) CloseWriter() (err error) {\n\treturn l.writer.Close()\n}\n\nfunc (l *logRetriever) Close() error {\n\treturn l.reader.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "```go\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (*logRetriever, error) {\n\treader, writer, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tf, err := os.Open(logFile)\n\tif err == nil {\n\t\tif _, err := io.Copy(writer, f); err != nil {\n\t\t\tf.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\tf.Close()\n\t}\n\n\toutput, err := newFileCloner(writer, logFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &logRetriever{reader, writer, output}, nil\n}\n\nfunc (lr *logRetriever) Read(p []byte) (int, error) {\n\treturn lr.reader.Read(p)\n}\n\nfunc (lr *logRetriever) CloseWriter() error {\n\treturn lr.writer.Close()\n}\n\nfunc (lr *logRetriever) Close() error {\n\tif err := lr.reader.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn lr.writer.Close()\n}\n\nfunc (lr *logRetriever) Opt() cio.Opt {\n\treturn cio.Opt{\n\t\tReader: io.NopCloser(bytes.NewBuffer(nil)),\n\t\tWriter: lr.output,\n\t}\n}\n```"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a comprehensive HTTP client in Go that can handle various API requests with custom configurations, including base URLs, request headers, and rate limiting. The client should support multiple API services and provide methods for creating and executing HTTP requests.\n\nStruct Description: The Client struct represents an HTTP client with configuration for making API requests. It maintains client state, base URLs, user agent, rate limits, and provides access to various API services. The struct includes methods for creating new requests and executing them.\n\nFields:\n\nclientMu: sync.Mutex - Mutex for thread-safe access to the HTTP client\nclient: *http.Client - The underlying HTTP client used for requests\nBaseURL: *url.URL - Base URL for API requests\nUploadURL: *url.URL - Base URL for upload requests\nUserAgent: string - User agent string for requests\nrateMu: sync.Mutex - Mutex for thread-safe access to rate limits\nrateLimits: [categories]Rate - Rate limit tracking for different API categories\ncommon: service - Shared service instance used by all API services\n\nMethods:\n\nNewClient: (*http.Client) -> *Client - Creates a new Client instance with optional custom HTTP client\nNewRequest: (method string, urlStr string, body interface{}) -> (*http.Request, error) - Creates a new HTTP request with proper headers and body encoding\nDo: (ctx context.Context, req *http.Request, v interface{}) -> (*Response, error) - Executes an HTTP request with context support, rate limiting, and response handling",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tclientMu sync.Mutex\n\tclient   *http.Client\n\n\tBaseURL   *url.URL\n\tUploadURL *url.URL\n\tUserAgent string\n\n\trateMu     sync.Mutex\n\trateLimits [categories]Rate\n\n\tcommon service\n\n\tActions        *ActionsService\n\tActivity       *ActivityService\n\tAdmin          *AdminService\n\tApps           *AppsService\n\tAuthorizations *AuthorizationsService\n\tChecks         *ChecksService\n\tGists          *GistsService\n\tGit            *GitService\n\tGitignores     *GitignoresService\n\tInteractions   *InteractionsService\n\tIssues         *IssuesService\n\tLicenses       *LicensesService\n\tMarketplace    *MarketplaceService\n\tMigrations     *MigrationService\n\tOrganizations  *OrganizationsService\n\tProjects       *ProjectsService\n\tPullRequests   *PullRequestsService\n\tReactions      *ReactionsService\n\tRepositories   *RepositoriesService\n\tSearch         *SearchService\n\tTeams          *TeamsService\n\tUsers          *UsersService\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{}\n\t}\n\tbaseURL, _ := url.Parse(defaultBaseURL)\n\tuploadURL, _ := url.Parse(uploadBaseURL)\n\n\tc := &Client{client: httpClient, BaseURL: baseURL, UserAgent: userAgent, UploadURL: uploadURL}\n\tc.common.client = c\n\tc.Actions = (*ActionsService)(&c.common)\n\tc.Activity = (*ActivityService)(&c.common)\n\tc.Admin = (*AdminService)(&c.common)\n\tc.Apps = (*AppsService)(&c.common)\n\tc.Authorizations = (*AuthorizationsService)(&c.common)\n\tc.Checks = (*ChecksService)(&c.common)\n\tc.Gists = (*GistsService)(&c.common)\n\tc.Git = (*GitService)(&c.common)\n\tc.Gitignores = (*GitignoresService)(&c.common)\n\tc.Interactions = (*InteractionsService)(&c.common)\n\tc.Issues = (*IssuesService)(&c.common)\n\tc.Licenses = (*LicensesService)(&c.common)\n\tc.Marketplace = &MarketplaceService{client: c}\n\tc.Migrations = (*MigrationService)(&c.common)\n\tc.Organizations = (*OrganizationsService)(&c.common)\n\tc.Projects = (*ProjectsService)(&c.common)\n\tc.PullRequests = (*PullRequestsService)(&c.common)\n\tc.Reactions = (*ReactionsService)(&c.common)\n\tc.Repositories = (*RepositoriesService)(&c.common)\n\tc.Search = (*SearchService)(&c.common)\n\tc.Teams = (*TeamsService)(&c.common)\n\tc.Users = (*UsersService)(&c.common)\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tif !strings.HasSuffix(c.BaseURL.Path, \"/\") {\n\t\treturn nil, fmt.Errorf(\"BaseURL must have a trailing slash, but %q does not\", c.BaseURL)\n\t}\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf io.ReadWriter\n\tif body != nil {\n\t\tbuf = &bytes.Buffer{}\n\t\tenc := json.NewEncoder(buf)\n\t\tenc.SetEscapeHTML(false)\n\t\terr := enc.Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treq.Header.Set(\"Accept\", mediaTypeV3)\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx == nil {\n\t\treturn nil, errors.New(\"context must be non-nil\")\n\t}\n\treq = withContext(ctx, req)\n\n\trateLimitCategory := category(req.URL.Path)\n\n\tif err := c.checkRateLimitBeforeDo(req, rateLimitCategory); err != nil {\n\t\treturn &Response{\n\t\t\tResponse: err.Response,\n\t\t\tRate:     err.Rate,\n\t\t}, err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif e, ok := err.(*url.Error); ok {\n\t\t\tif url, err := url.Parse(e.URL); err == nil {\n\t\t\t\te.URL = sanitizeURL(url).String()\n\t\t\t\treturn nil, e\n\t\t\t}\n\t\t}\n\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponse := newResponse(resp)\n\n\tc.rateMu.Lock()\n\tc.rateLimits[rateLimitCategory] = response.Rate\n\tc.rateMu.Unlock()\n\n\terr = CheckResponse(resp)\n\tif err != nil {\n\t\taerr, ok := err.(*AcceptedError)\n\t\tif ok {\n\t\t\tb, readErr := ioutil.ReadAll(resp.Body)\n\t\t\tif readErr != nil {\n\t\t\t\treturn response, readErr\n\t\t\t}\n\n\t\t\taerr.Raw = b\n\t\t\treturn response, aerr\n\t\t}\n\n\t\treturn response, err\n\t}\n\n\tif v != nil {\n\t\tif w, ok := v.(io.Writer); ok {\n\t\t\tio.Copy(w, resp.Body)\n\t\t} else {\n\t\t\tdecErr := json.NewDecoder(resp.Body).Decode(v)\n\t\t\tif decErr == io.EOF {\n\t\t\t\tdecErr = nil\n\t\t\t}\n\t\t\tif decErr != nil {\n\t\t\t\terr = decErr\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Rate struct {\n\tRemaining int\n\tLimit     int\n\tReset     time.Time\n}\n\ntype Response struct {\n\t*http.Response\n}\n\ntype service struct{}\n\ntype Client struct {\n\tclientMu    sync.Mutex\n\tclient      *http.Client\n\tBaseURL     *url.URL\n\tUploadURL   *url.URL\n\tUserAgent   string\n\trateMu      sync.Mutex\n\trateLimits  map[string]Rate\n\tcommon      service\n}\n\nfunc NewClient(c *http.Client) *Client {\n\tif c == nil {\n\t\tc = &http.Client{\n\t\t\tTransport: &http.Transport{\n\t\t\t\tMaxIdleConnsPerHost: 10,\n\t\t\t},\n\t\t}\n\t}\n\treturn &Client{\n\t\tclient:    c,\n\t\tUserAgent: \"Go-Client/1.0\",\n\t\trateLimits: make(map[string]Rate),\n\t}\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif !u.IsAbs() {\n\t\tu = c.BaseURL.ResolveReference(u)\n\t}\n\treq, err := http.NewRequest(method, u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\tif body != nil {\n\t\tb, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq.Body = io.NopCloser(bytes.NewBuffer(b))\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tc.rateMu.Lock()\n\t// Example rate limit check (category-based)\n\tcategory := \"default\"\n\tif lim, ok := c.rateLimits[category]; ok && lim.Remaining <= 0 {\n\t\ttime.Sleep(time.Until(lim.Reset))\n\t}\n\tc.rateLimits[category].Remaining--\n\tc.rateMu.Unlock()\n\n\tresp, err := c.client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"non-2xx response: %d\", resp.StatusCode)\n\t}\n\tif v != nil {\n\t\tif err := json.NewDecoder(resp.Body).Decode(v); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn &Response{Response: resp}, nil\n}\n```"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Go HTTP server that handles incoming requests, processes JSON payloads, and returns a modified response with a large body and custom headers.\n\nFunction Description: The main function sets up an HTTP server that listens on port 10000. It defines a handler for the root path (\"/\") that:\n1. Reads and closes the request body\n2. Unmarshals the JSON body into a contextEntity struct\n3. Modifies the response status, headers, and body\n4. Marshals the modified contextEntity back to JSON and sends it as the response\n5. Handles errors appropriately with status codes\n\nInput: \n- HTTP requests with JSON body containing a contextEntity structure\n- The handler expects the request body to be a valid JSON representation of contextEntity\n\nOutput:\n- HTTP responses with:\n  - Status 200 on success with modified JSON payload\n  - Status 400 for bad requests (invalid JSON or read errors)\n  - Status 500 for internal server errors (marshaling failures)\n- Response includes:\n  - Custom header \"X-Remote-Name: G.O.O.D\"\n  - Large body (64KB of '-' characters)\n  - Modified contextEntity structure as JSON",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tlargeBodySize := 64 * 1024\n\tlargeBody := bytes.Repeat([]byte(`-`), largeBodySize)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer r.Body.Close()\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity := &contextEntity{}\n\t\terr = json.Unmarshal(body, ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity.Response.StatusCode = 200\n\t\tctxEntity.Response.Header.Add(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tctxEntity.Response.Body = largeBody\n\n\t\tbuff, err := json.Marshal(ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write(buff)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype contextEntity struct {\n\tData string `json:\"data\"`\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":10000\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tbody, err := io.ReadAll(r.Body)\n\tif err != nil {\n\t\thttp.Error(w, \"Bad request\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer r.Body.Close()\n\n\tvar ce contextEntity\n\tif err := json.Unmarshal(body, &ce); err != nil {\n\t\thttp.Error(w, \"Bad request\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tce.Data = strings.Repeat(\"-\", 64*1024)\n\n\trespBody, err := json.Marshal(ce)\n\tif err != nil {\n\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"X-Remote-Name\", \"G.O.O.D\")\n\tw.WriteHeader(http.StatusOK)\n\tw.Write(respBody)\n}\n```"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a POST request and serves an HTML form for file submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it serves an HTML form (rendered from a template). For POST requests, it processes file uploads by saving the uploaded file to the filesystem.\n\nInput:\n- None (The function takes no direct input parameters, but handles HTTP requests with the following characteristics:\n  - GET requests to \"/\" trigger form rendering\n  - POST requests to \"/\" with a \"file\" form field trigger file upload processing)\n\nOutput:\n- None (The function doesn't return any value, but has the following side effects:\n  - Starts an HTTP server on port 9000\n  - Writes responses to http.ResponseWriter\n  - Creates files on the filesystem for successful uploads)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\ttpl, err := template.ParseFiles(\"form.gohtml\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tif req.Method == \"POST\" {\n\t\t\tsrc, _, err := req.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer src.Close()\n\n\t\t\tdst, err := os.Create(filepath.Join(\"./\", \"file.txt\"))\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\terr = tpl.Execute(res, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\t\"io\"\n\t\"fmt\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":9000\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tconst formTemplate = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head><title>File Upload</title></head>\n\t\t\t<body>\n\t\t\t<form method=\"POST\" enctype=\"multipart/form-data\">\n\t\t\t\t<input type=\"file\" name=\"file\">\n\t\t\t\t<input type=\"submit\">\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>\n\t\t`\n\t\ttmpl := template.Must(template.New(\"form\").Parse(formTemplate))\n\t\terr := tmpl.Execute(w, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error rendering form\", http.StatusInternalServerError)\n\t\t}\n\t} else if r.Method == \"POST\" {\n\t\terr := r.ParseMultipartForm(10 << 20)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error parsing form\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tfile, handler, err := r.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\tdst, err := os.Create(handler.Filename)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error creating the file\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err := io.Copy(dst, file); err != nil {\n\t\t\thttp.Error(w, \"Error saving the file\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tfmt.Fprintf(w, \"File %s uploaded successfully.\\n\", handler.Filename)\n\t} else {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a Go struct that represents a metric sink for sending metrics to a Cortex metrics server using HTTP with advanced configuration options.\n\nStruct Description: The CortexMetricSink struct is responsible for batching and sending metrics to a Cortex server via HTTP with support for custom headers, basic authentication, proxy configuration, and connection pooling.\n\nFields:\n\nURL: string - The endpoint URL of the Cortex server to send metrics to\nRemoteTimeout: time.Duration - Timeout for HTTP requests to Cortex\nProxyURL: string - URL of the proxy server to use (optional)\nClient: *http.Client - Custom HTTP client for making requests\nlogger: *logrus.Entry - Logger for the sink\nname: string - Name identifier for the sink\ntraceClient: *trace.Client - Tracing client for distributed tracing\naddHeaders: map[string]string - Additional headers to include in requests\nbasicAuth: *BasicAuthType - Basic authentication credentials (optional)\nbatchWriteSize: int - Maximum number of metrics to batch before sending\ncounters: map[counterMapKey]float64 - Internal counter storage\nconvertCountersToMonotonic: bool - Flag to convert counters to monotonic values\nexcludedTags: map[string]struct{} - Tags to exclude from metrics\nhost: string - Host identifier for metrics\n\nMethods:\n\nStart: (tc *trace.Client) -> error - Initializes the sink with tracing and HTTP client configuration\nwriteMetrics: (ctx context.Context, metrics []samplers.InterMetric) -> error - Processes and sends a batch of metrics to Cortex\n\nBasicAuthType Struct Description: Nested struct for storing basic authentication credentials\n\nFields:\n\nUsername: util.StringSecret - Basic auth username (secret type)\nPassword: util.StringSecret - Basic auth password (secret type)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/golang/snappy\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/prometheus/prometheus/prompb\"\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/stripe/veneur/v14/samplers\"\n\t\"github.com/stripe/veneur/v14/sinks\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype CortexMetricSink struct {\n\tURL                        string\n\tRemoteTimeout              time.Duration\n\tProxyURL                   string\n\tClient                     *http.Client\n\tlogger                     *logrus.Entry\n\tname                       string\n\ttraceClient                *trace.Client\n\taddHeaders                 map[string]string\n\tbasicAuth                  *BasicAuthType\n\tbatchWriteSize             int\n\tcounters                   map[counterMapKey]float64\n\tconvertCountersToMonotonic bool\n\texcludedTags               map[string]struct{}\n\thost                       string\n}\n\ntype BasicAuthType struct {\n\tUsername util.StringSecret `yaml:\"username\"`\n\tPassword util.StringSecret `yaml:\"password\"`\n}\n\nfunc (s *CortexMetricSink) Start(tc *trace.Client) error {\n\ts.logger.Infof(\"Starting sink for %s\", s.URL)\n\tt := http.DefaultTransport.(*http.Transport).Clone()\n\tt.MaxIdleConns = MaxConns\n\tt.MaxConnsPerHost = MaxConns\n\tt.MaxIdleConnsPerHost = MaxConns\n\n\tif len(s.ProxyURL) > 0 {\n\t\tp, err := url.Parse(s.ProxyURL)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"malformed cortex_proxy_url\")\n\t\t}\n\t\tt.Proxy = http.ProxyURL(p)\n\t}\n\n\ts.Client = &http.Client{\n\t\tTimeout:   s.RemoteTimeout,\n\t\tTransport: t,\n\t}\n\n\ts.traceClient = tc\n\treturn nil\n}\n\nfunc (s *CortexMetricSink) writeMetrics(ctx context.Context, metrics []samplers.InterMetric) error {\n\tspan, _ := trace.StartSpanFromContext(ctx, \"\")\n\tdefer span.ClientFinish(s.traceClient)\n\n\twr := s.makeWriteRequest(metrics)\n\n\tdata, err := wr.Marshal()\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: failed to marshal proto\\\"\")\n\t}\n\n\tvar buf bytes.Buffer\n\tencoded := snappy.Encode(nil, data)\n\tbuf.Write(encoded)\n\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", s.URL, &buf)\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: failed to create http request\\\"\")\n\t}\n\n\treq.Header.Set(\"Content-Encoding\", \"snappy\")\n\treq.Header.Set(\"Content-Type\", \"application/x-protobuf\")\n\treq.Header.Set(\"User-Agent\", \"veneur/cortex\")\n\treq.Header.Set(\"X-Prometheus-Remote-Write-Version\", \"0.1.0\")\n\tfor key, value := range s.addHeaders {\n\t\treq.Header.Set(key, value)\n\t}\n\tif s.basicAuth != nil {\n\t\treq.SetBasicAuth(s.basicAuth.Username.Value, s.basicAuth.Password.Value)\n\t}\n\n\tts := time.Now()\n\tr, err := s.Client.Do(req)\n\tif err != nil {\n\t\tspan.Error(err)\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: misc http client error\\\" duration_secs=%.2f\", time.Since(ts).Seconds())\n\t}\n\tdefer r.Body.Close()\n\n\tif r.StatusCode >= 300 {\n\t\tb, err := ioutil.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: downstream returned error response with unreadable body\\\" response_code=%d\", r.StatusCode)\n\t\t}\n\t\treturn fmt.Errorf(\"cortex_err=\\\"failed to write batch: error response\\\", response_code=%d response_body=\\\"%s\\\"\", r.StatusCode, b)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "type BasicAuthType struct {\n\tUsername util.StringSecret\n\tPassword util.StringSecret\n}\n\ntype CortexMetricSink struct {\n\tURL                  string\n\tRemoteTimeout        time.Duration\n\tProxyURL             string\n\tClient               *http.Client\n\tlogger               *logrus.Entry\n\tname                 string\n\ttraceClient          *trace.Client\n\taddHeaders           map[string]string\n\tbasicAuth            *BasicAuthType\n\tbatchWriteSize       int\n\tcounters             map[counterMapKey]float64\n\tconvertCountersToMonotonic bool\n\texcludedTags         map[string]struct{}\n\thost                 string\n}\n\nfunc (s *CortexMetricSink) Start(tc *trace.Client) error {\n\t// Implementation details\n}\n\nfunc (s *CortexMetricSink) writeMetrics(ctx context.Context, metrics []samplers.InterMetric) error {\n\t// Implementation details\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Go HTTP server that handles Stripe webhook events, specifically processing billing meter error reports and other event types.\n\nFunction Description: The main function sets up an HTTP server with a \"/webhook\" endpoint that receives and processes Stripe webhook events. It validates the webhook signature, retrieves full event details from Stripe, and handles specific event types (particularly \"v1.billing.meter.error_report_triggered\").\n\nInput:\n- HTTP POST requests to \"/webhook\" endpoint containing:\n  - Request body with Stripe event payload (JSON format)\n  - \"Stripe-Signature\" header for webhook validation\n- Environment variables:\n  - apiKey: Stripe API key for authentication\n  - webhookSecret: Secret for validating webhook signatures\n\nOutput:\n- HTTP responses:\n  - 200 OK for successful processing\n  - 500 Internal Server Error for any processing failures\n- Console output:\n  - Success messages with meter IDs for handled events\n  - Error messages for any processing failures\n  - Notifications for unhandled event types\n\nThe function does not explicitly return values but writes to the HTTP response and console.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v81\"\n\tbillingMeters \"github.com/stripe/stripe-go/v81/billing/meter\"\n\t\"github.com/stripe/stripe-go/v81/rawrequest\"\n\twebhook \"github.com/stripe/stripe-go/v81/webhook\"\n)\nfunc main() {\n\tb, err := stripe.GetRawRequestBackend(stripe.APIBackend)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tclient := rawrequest.Client{B: b, Key: apiKey}\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, req *http.Request) {\n\t\tconst MaxBodyBytes = int64(65536)\n\t\treq.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)\n\t\tpayload, err := ioutil.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\terr = webhook.ValidatePayload(payload, req.Header.Get(\"Stripe-Signature\"), webhookSecret)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tvar thinEvent map[string]interface{}\n\n\t\tif err := json.Unmarshal(payload, &thinEvent); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse thin event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\teventID := thinEvent[\"id\"].(string)\n\n\t\tvar event map[string]interface{}\n\n\t\tresp, err := client.RawRequest(http.MethodGet, \"/v2/core/events/\"+eventID, \"\", nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get pull event: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tif err := json.Unmarshal(resp.RawJSON, &event); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse pull event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tswitch t := event[\"type\"].(string); t {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\trelatedObject := event[\"related_object\"].(map[string]interface{})\n\t\t\tmeter, err := billingMeters.Get(relatedObject[\"id\"].(string), nil)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get related meter object: %v\\n\", err.Error())\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmeterID := meter.ID\n\t\t\tfmt.Printf(\"Success! %s\\n\", meterID)\n\t\t\tfmt.Println(fmt.Sprint(event[\"data\"]))\n\t\tdefault:\n\t\t\tfmt.Fprintf(os.Stderr, \"Unhandled event type: %s\\n\", t)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\terr = http.ListenAndServe(\":4242\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/webhook\", webhookHandler)\n\tlog.Println(\"Starting server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc webhookHandler(w http.ResponseWriter, r *http.Request) {\n\tbody, err := io.ReadAll(r.Body)\n\tif err != nil {\n\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tsigHeader := r.Header.Get(\"Stripe-Signature\")\n\tif sigHeader == \"\" {\n\t\thttp.Error(w, \"Missing Stripe-Signature header\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\twebhookSecret := os.Getenv(\"webhookSecret\")\n\tif webhookSecret == \"\" {\n\t\thttp.Error(w, \"Webhook secret not set\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tapiKey := os.Getenv(\"apiKey\")\n\tif apiKey == \"\" {\n\t\thttp.Error(w, \"API key not set\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\t// Validate signature (simplified; in production, use Stripe's library)\n\t// This is a placeholder for actual signature validation logic\n\t// For demonstration, assume validation passes\n\t// In practice, use stripe.Webhook.Signature.VerifyBody\n\n\tevent := struct {\n\t\tID   string `json:\"id\"`\n\t\tType string `json:\"type\"`\n\t\tData json.RawMessage `json:\"data\"`\n\t}{}\n\n\tif err := json.Unmarshal(body, &event); err != nil {\n\t\thttp.Error(w, \"Invalid event format\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\t// Fetch full event details from Stripe\n\turl := fmt.Sprintf(\"https://api.stripe.com/v1/events/%s\", event.ID)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Error creating request\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\treq.Header.Set(\"Authorization\", \"Bearer \"+apiKey)\n\treq.Header.Set(\"Stripe-Version\", \"2023-10-15\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\thttp.Error(w, \"Error fetching event\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\thttp.Error(w, \"Failed to fetch event\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfullEvent := make(map[string]interface{})\n\tif err := json.NewDecoder(resp.Body).Decode(&fullEvent); err != nil {\n\t\thttp.Error(w, \"Error decoding event\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tswitch event.Type {\n\tcase \"v1.billing.meter.error_report_triggered\":\n\t\tmeterData, ok := fullEvent[\"data\"].(map[string]interface{})\n\t\tif !ok {\n\t\t\thttp.Error(w, \"Invalid meter data format\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tmeterID, ok := meterData[\"meter\"].(string)\n\t\tif !ok {\n\t\t\thttp.Error(w, \"Invalid meter ID\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tfmt.Fprintf(w, \"Processed error report for meter: %s\", meterID)\n\t\tlog.Printf(\"Processed error report for meter: %s\", meterID)\n\tdefault:\n\t\tfmt.Fprintf(w, \"Unhandled event type: %s\", event.Type)\n\t\tlog.Printf(\"Unhandled event type: %s\", event.Type)\n\t}\n}\n```"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles user authentication through cookies, displaying different HTML content based on login status.\n\nFunction Description: The main function sets up an HTTP server with a single route handler that manages user authentication. It checks for a \"logged-in\" cookie, processes login/logout requests, and serves different HTML content based on the authentication status.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but serves HTTP responses and maintains server state)\n\nNote: The function handles three main scenarios:\n1. Initial visit (no cookie set)\n2. Successful login (POST with correct password)\n3. Logout request (/logout path)\nFor each scenario, it sets appropriate cookies and returns corresponding HTML content.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"logged-in\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"logged-in\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\n\t\tif req.Method == \"POST\" {\n\t\t\tpassword := req.FormValue(\"password\")\n\t\t\tif password == \"secret\" {\n\t\t\t\tcookie = &http.Cookie{\n\t\t\t\t\tName:  \"logged-in\",\n\t\t\t\t\tValue: \"1\",\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif req.URL.Path == \"/logout\" {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:   \"logged-in\",\n\t\t\t\tValue:  \"0\",\n\t\t\t\tMaxAge: -1,\n\t\t\t}\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\t\tvar html string\n\n\t\tif cookie.Value == strconv.Itoa(0) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1>LOG IN</h1>\n\t\t\t<form method=\"post\" action=\"http://localhost:9000/\">\n\t\t\t\t<h3>User name</h3>\n\t\t\t\t<input type=\"text\" name=\"userName\" id=\"userName\">\n\t\t\t\t<h3>Password</h3>\n\t\t\t\t<input type=\"text\" name=\"password\" id=\"password\">\n\t\t\t\t<br>\n\t\t\t\t<input type=\"submit\">\n\t\t\t\t<input type=\"submit\" name=\"logout\" value=\"logout\">\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tif cookie.Value == strconv.Itoa(1) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1><a href=\"http://localhost:9000/logout\">LOG OUT</a></h1>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tio.WriteString(res, html)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.HandleFunc(\"/logout\", logoutHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tcookie, err := r.Cookie(\"logged-in\")\n\tisLoggedIn := false\n\tif err == nil {\n\t\tisLoggedIn = true\n\t}\n\n\tif r.Method == \"POST\" {\n\t\tif r.URL.Path == \"/\" {\n\t\t\tr.ParseForm()\n\t\t\tpassword := r.FormValue(\"password\")\n\t\t\tif password == \"secret\" {\n\t\t\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\t\t\tName:  \"logged-in\",\n\t\t\t\t\tValue: \"true\",\n\t\t\t\t\tPath:  \"/\",\n\t\t\t\t})\n\t\t\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\n\tif isLoggedIn {\n\t\tfmt.Fprintf(w, \"<h1>Welcome!</h1><a href='/logout'>Logout</a>\")\n\t} else {\n\t\tfmt.Fprintf(w, `<form method=\"post\">\n\t\t\t<input type=\"password\" name=\"password\" placeholder=\"Password\" required>\n\t\t\t<button type=\"submit\">Login</button>\n\t\t</form>`)\n\t}\n}\n\nfunc logoutHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\tName:   \"logged-in\",\n\t\t\tValue:  \"\",\n\t\t\tPath:   \"/\",\n\t\t\tMaxAge: -1,\n\t\t})\n\t\thttp.Redirect(w, r, \"/\", http.StatusSeeOther)\n\t}\n}"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Implement a function to start an HTTP server with configurable parameters including authentication, TLS, and database integration. The function should handle routing, authentication wrapping, and server startup with both HTTP and HTTPS support.\n\nFunction Description: The `Start` function initializes and starts an HTTP server with various endpoints for database operations. It supports optional authentication via a pre-shared token and can be configured to use TLS for secure connections. The server connects to a tiedot database and provides RESTful endpoints for database operations.\n\nInput:\n- `dir` (string): Directory path for the tiedot database\n- `port` (int): Port number to listen on\n- `tlsCrt` (string): Path to TLS certificate file (empty for HTTP)\n- `tlsKey` (string): Path to TLS private key file (empty for HTTP)\n- `jwtPubKey` (string): JWT public key (unused in reference code)\n- `jwtPrivateKey` (string): JWT private key (unused in reference code)\n- `bind` (string): Network interface to bind to (empty for all interfaces)\n- `authToken` (string): Pre-shared token for authentication (empty to disable)\n\nOutput: None (the function runs indefinitely serving HTTP requests or panics on error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/HouzuoGuo/tiedot/db\"\n\t\"github.com/HouzuoGuo/tiedot/tdlog\"\n)\n\nvar (\n\tHttpDB *db.DB\n)\n\nfunc Start(dir string, port int, tlsCrt, tlsKey, jwtPubKey, jwtPrivateKey, bind, authToken string) {\n\tvar err error\n\tHttpDB, err = db.OpenDB(dir)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\thttp.HandleFunc(\"/\", Welcome)\n\thttp.HandleFunc(\"/version\", Version)\n\thttp.HandleFunc(\"/memstats\", MemStats)\n\n\tvar authWrap func(http.HandlerFunc) http.HandlerFunc\n\tif authToken != \"\" {\n\t\ttdlog.Noticef(\"API endpoints now require the pre-shared token in Authorization header.\")\n\t\tauthWrap = func(originalHandler http.HandlerFunc) http.HandlerFunc {\n\t\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif \"token \"+authToken != r.Header.Get(\"Authorization\") {\n\t\t\t\t\thttp.Error(w, \"\", http.StatusUnauthorized)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\toriginalHandler(w, r)\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttdlog.Noticef(\"API endpoints do not require Authorization header.\")\n\t\tauthWrap = func(originalHandler http.HandlerFunc) http.HandlerFunc {\n\t\t\treturn originalHandler\n\t\t}\n\t}\n\n\thttp.HandleFunc(\"/create\", authWrap(Create))\n\thttp.HandleFunc(\"/rename\", authWrap(Rename))\n\thttp.HandleFunc(\"/drop\", authWrap(Drop))\n\thttp.HandleFunc(\"/all\", authWrap(All))\n\thttp.HandleFunc(\"/scrub\", authWrap(Scrub))\n\thttp.HandleFunc(\"/sync\", authWrap(Sync))\n\thttp.HandleFunc(\"/query\", authWrap(Query))\n\thttp.HandleFunc(\"/count\", authWrap(Count))\n\thttp.HandleFunc(\"/insert\", authWrap(Insert))\n\thttp.HandleFunc(\"/get\", authWrap(Get))\n\thttp.HandleFunc(\"/getpage\", authWrap(GetPage))\n\thttp.HandleFunc(\"/update\", authWrap(Update))\n\thttp.HandleFunc(\"/delete\", authWrap(Delete))\n\thttp.HandleFunc(\"/approxdoccount\", authWrap(ApproxDocCount))\n\thttp.HandleFunc(\"/index\", authWrap(Index))\n\thttp.HandleFunc(\"/indexes\", authWrap(Indexes))\n\thttp.HandleFunc(\"/unindex\", authWrap(Unindex))\n\thttp.HandleFunc(\"/shutdown\", authWrap(Shutdown))\n\thttp.HandleFunc(\"/dump\", authWrap(Dump))\n\n\tiface := \"all interfaces\"\n\tif bind != \"\" {\n\t\tiface = bind\n\t}\n\n\tif tlsCrt != \"\" {\n\t\ttdlog.Noticef(\"Will listen on %s (HTTPS), port %d.\", iface, port)\n\t\tif err := http.ListenAndServeTLS(fmt.Sprintf(\"%s:%d\", bind, port), tlsCrt, tlsKey, nil); err != nil {\n\t\t\ttdlog.Panicf(\"Failed to start HTTPS service - %s\", err)\n\t\t}\n\t} else {\n\t\ttdlog.Noticef(\"Will listen on %s (HTTP), port %d.\", iface, port)\n\t\thttp.ListenAndServe(fmt.Sprintf(\"%s:%d\", bind, port), nil)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc Start(dir string, port int, tlsCrt, tlsKey, jwtPubKey, jwtPrivateKey, bind, authToken string) {\n\trouter := http.NewServeMux()\n\n\trouter.HandleFunc(\"/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Data endpoint\"))\n\t})\n\n\tvar handler http.Handler = router\n\n\tif authToken != \"\" {\n\t\thandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Header.Get(\"Authorization\") != \"Bearer \"+authToken {\n\t\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n\t\t\t\treturn\n\t\t\t}\n\t\t\trouter.ServeHTTP(w, r)\n\t\t})\n\t}\n\n\tserver := &http.Server{\n\t\tAddr:    fmt.Sprintf(\"%s:%d\", bind, port),\n\t\tHandler: handler,\n\t}\n\n\tif tlsCrt != \"\" && tlsKey != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(tlsCrt, tlsKey)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tserver.TLSConfig = &tls.Config{Certificates: []tls.Certificate{cert}}\n\t\tln, err := tls.Listen(\"tcp\", server.Addr, server.TLSConfig)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif err := server.Serve(ln); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t} else {\n\t\tif err := server.ListenAndServe(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a function that checks the health status of a Kubernetes cluster by making an HTTP GET request to the cluster's livez endpoint using a custom HTTP client with TLS configuration.\n\nFunction Description: The function `GetClusterStatusByAPI` verifies the health of a Kubernetes cluster by sending an HTTPS request to the cluster's `/livez` endpoint. It uses a custom `http.Client` with TLS configuration loaded from the cluster's connection settings. The function returns a boolean indicating the cluster's health status and a string containing any error messages or the response body if the check fails.\n\nInput: \n- `addr` [string]: The address of the Kubernetes cluster API server.\n- `cluster` [*model.Cluster]: A pointer to a cluster object containing connection configuration details.\n\nOutput: \n- [bool]: `true` if the cluster is healthy (HTTP status code 200), `false` otherwise.\n- [string]: An empty string if the cluster is healthy, otherwise an error message or the response body.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"k8s.io/client-go/rest\"\n)\n\nfunc GetClusterStatusByAPI(addr string, cluster *model.Cluster) (bool, string) {\n\treqURL := fmt.Sprintf(\"https://%s/livez\", addr)\n\tconf, err := clusterUtil.LoadConnConf(cluster, addr)\n\tif err != nil {\n\t\t_, _ = false, fmt.Sprintf(\"load cluster config error %s\", err.Error())\n\t}\n\ttls2, err := rest.TransportFor(conf)\n\tif err != nil {\n\t\t_, _ = false, fmt.Sprintf(\"config transport error %s\", err.Error())\n\t}\n\tclient := &http.Client{Timeout: 1 * time.Second, Transport: tls2}\n\trequest, _ := http.NewRequest(\"GET\", reqURL, nil)\n\tresponse, err := client.Do(request)\n\tif err != nil {\n\t\treturn false, fmt.Sprintf(\"Https get error %s\", err.Error())\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode == 200 {\n\t\treturn true, \"\"\n\t}\n\ts, _ := ioutil.ReadAll(response.Body)\n\treturn false, fmt.Sprintf(\"Api check error %s\", string(s))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc GetClusterStatusByAPI(addr string, cluster *model.Cluster) (bool, string) {\n\ttlsConfig := cluster.TLSConfig\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t}\n\tresp, err := client.Get(\"https://\" + addr + \"/livez\")\n\tif err != nil {\n\t\treturn false, err.Error()\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == 200 {\n\t\treturn true, \"\"\n\t}\n\n\tbody, _ := io.ReadAll(resp.Body)\n\treturn false, string(body)\n}\n```"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a function that serves Prometheus metrics via an HTTP server, updating custom metrics (uptime and packet count) on each request.\n\nFunction Description: The ServeMetricsAt function starts an HTTP server to expose Prometheus metrics. It registers custom metrics (uptime and packet count), updates them on each request to the metrics endpoint, and serves the metrics using the Prometheus HTTP handler. The function runs the server in a goroutine to avoid blocking the main program.\n\nInput:\n- addr (string): The network address (including port) where the metrics server should listen (e.g., \":8080\")\n- c (*collector.Collector): A pointer to a collector instance used to get the current packet count (can be nil)\n\nOutput: None (the function runs indefinitely in a background goroutine)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\n\t\"github.com/dreadl0ck/netcap/collector\"\n)\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tprometheus.MustRegister(upTime)\n\tprometheus.MustRegister(numPackets)\n\n\tfmt.Println(\"starting to serve metrics at:\", addr+metricsRoute)\n\n\tgo func() {\n\t\tmetricsHandler := promhttp.Handler()\n\n\t\thttp.HandleFunc(metricsRoute, func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupTime.WithLabelValues().Set(math.RoundToEven(time.Since(startTime).Seconds())\n\n\t\t\tif c != nil {\n\t\t\t\tnumPackets.WithLabelValues().Set(float64(c.GetNumPackets()))\n\t\t\t}\n\n\t\t\tmetricsHandler.ServeHTTP(w, r)\n\t\t})\n\t\tlog.Fatal(\"failed to serve metrics: \", http.ListenAndServe(addr, nil))\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"collector\"\n)\n\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tstart := time.Now()\n\n\tuptime := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"uptime_seconds\",\n\t\tHelp: \"Uptime of the service in seconds.\",\n\t})\n\tprometheus.MustRegister(uptime)\n\n\tpacketCount := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"packet_count\",\n\t\tHelp: \"Current packet count.\",\n\t})\n\tprometheus.MustRegister(packetCount)\n\n\tserver := &http.Server{\n\t\tAddr: addr,\n\t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.URL.Path == \"/metrics\" {\n\t\t\t\tuptime.Set(time.Since(start).Seconds())\n\t\t\t\tif c != nil {\n\t\t\t\t\tpacketCount.Set(float64(c.GetPacketCount()))\n\t\t\t\t}\n\t\t\t}\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t}),\n\t}\n\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n}\n```"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server to serve web content, including handling specific routes for examples and serving static files.\n\nFunction Description: The `serve` function initializes an HTTP server that handles multiple routes. It serves a home page, handles requests for WASM execution files, and processes example-related routes with dynamic content generation. The function uses Go's `net/http` package to create routes and serve content, including HTML templates and static files.\n\nInput: \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput:\n- `error`: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nThe function performs these key operations:\n1. Loads example data using `getExamples()`\n2. Sets up template handling for the home page and example pages\n3. Configures route handlers for:\n   - Root path (\"/\") serving the home page\n   - WASM execution file (\"/wasm_exec.js\")\n   - Example paths (\"/example/[type]/[link]/...\")\n4. Starts the HTTP server on the specified address",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\thomeTemplate := template.Must(template.ParseFiles(\"index.html\"))\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\turl := r.URL.Path\n\t\tif url == \"/wasm_exec.js\" {\n\t\t\thttp.FileServer(http.Dir(filepath.Join(build.Default.GOROOT, \"misc/wasm/\"))).ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(url, \"/\")\n\t\tif len(parts) > 4 &&\n\t\t\tparts[1] == \"example\" {\n\t\t\texampleType := parts[2]\n\t\t\texampleLink := parts[3]\n\t\t\tfor _, example := range *examples {\n\t\t\t\tif example.Link != exampleLink {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfiddle := filepath.Join(exampleLink, \"jsfiddle\")\n\t\t\t\tif len(parts[4]) != 0 {\n\t\t\t\t\thttp.StripPrefix(\"/example/\"+exampleType+\"/\"+exampleLink+\"/\", http.FileServer(http.Dir(fiddle))).ServeHTTP(w, r)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\ttemp := template.Must(template.ParseFiles(\"example.html\"))\n\t\t\t\t_, err := temp.ParseFiles(filepath.Join(fiddle, \"demo.html\"))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tdata := struct {\n\t\t\t\t\t*Example\n\t\t\t\t\tJS bool\n\t\t\t\t}{\n\t\t\t\t\texample,\n\t\t\t\t\texampleType == \"js\",\n\t\t\t\t}\n\n\t\t\t\terr = temp.Execute(w, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\terr := homeTemplate.Execute(w, examples)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func serve(addr string) error {\n\texamples := getExamples()\n\ttmpl := template.Must(template.ParseFiles(\"home.html\", \"example.html\"))\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\ttmpl.ExecuteTemplate(w, \"home.html\", examples)\n\t})\n\thttp.Handle(\"/wasm_exec.js\", http.StripPrefix(\"/wasm_exec.js\", http.FileServer(http.Dir(\"static\"))))\n\thttp.HandleFunc(\"/example/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tparts := strings.Split(strings.TrimPrefix(r.URL.Path, \"/example/\"), \"/\")\n\t\tif len(parts) < 2 {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\texampleType, exampleLink := parts[0], parts[1]\n\t\tvar example *Example\n\t\tfor _, e := range examples {\n\t\t\tif e.Type == exampleType && e.Link == exampleLink {\n\t\t\t\texample = e\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif example == nil {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\ttmpl.ExecuteTemplate(w, \"example.html\", example)\n\t})\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles requests to the root path (\"/\") and returns a welcome message combined with a predefined string variable and a version string.\n\nFunction Description: The main function sets up a basic HTTP server that listens on port 8080. It registers a handler function for the root path (\"/\") which writes a welcome message concatenated with a local string variable and a package-level version string to the response.\n\nInput: None (The HTTP server listens for incoming requests on the specified port)\n\nOutput: None (The function runs indefinitely, serving HTTP responses. The handler writes output to the http.ResponseWriter)\n\nNote: The reference code is at the package level (main package) rather than being encapsulated in a struct or class. The instruction follows the function-level format as requested.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\ta := \"hello \"\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"Welcome to my website! \", a, v)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nconst version = \"1.0.0\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tlocalMsg := \"Welcome to the Go HTTP Server\"\n\tresponse := localMsg + \" - Version: \" + version\n\tfmt.Fprintf(w, response)\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a function that performs an HTTP request with custom headers and handles the response, including error handling and logging for debugging purposes.\n\nFunction Description: The function `realRequest` performs an HTTP request with custom headers, handles authentication, and processes the response. It includes validation of required headers, adds security tokens and user agents, computes signatures for authentication, and handles response errors. Debug logging is available for both requests and responses.\n\nInput:\n- `ctx` (context.Context): Context for the request, allowing cancellation and timeouts.\n- `project` (*LogProject): A struct containing project-specific details like base URL, access keys, and user agent.\n- `method` (string): HTTP method (e.g., \"GET\", \"POST\").\n- `uri` (string): The URI path for the request.\n- `headers` (map[string]string): A map of HTTP headers to include in the request.\n- `body` ([]byte): The request body as a byte slice.\n\nOutput:\n- (*http.Response, error): Returns the HTTP response and an error if any occurred during the request or response handling. The error is wrapped in custom error types for better context.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"time\"\n\n\t\"github.com/go-kit/kit/log/level\"\n)\n\nvar (\n\tdefaultRequestTimeout = 60 * time.Second\n\tdefaultRetryTimeout   = 90 * time.Second\n\tdefaultHttpClient     = &http.Client{\n\t\tTimeout: defaultRequestTimeout,\n\t}\n)\n\nfunc realRequest(ctx context.Context, project *LogProject, method, uri string, headers map[string]string, body []byte) (*http.Response, error) {\n\tif _, ok := headers[\"x-log-bodyrawsize\"]; !ok {\n\t\treturn nil, NewClientError(fmt.Errorf(\"Can't find 'x-log-bodyrawsize' header\"))\n\t}\n\n\tbaseURL := project.getBaseURL()\n\theaders[\"Host\"] = baseURL\n\theaders[\"Date\"] = nowRFC1123()\n\theaders[\"x-log-apiversion\"] = version\n\theaders[\"x-log-signaturemethod\"] = signatureMethod\n\tif len(project.UserAgent) > 0 {\n\t\theaders[\"User-Agent\"] = project.UserAgent\n\t} else {\n\t\theaders[\"User-Agent\"] = DefaultLogUserAgent\n\t}\n\n\tif project.SecurityToken != \"\" {\n\t\theaders[\"x-acs-security-token\"] = project.SecurityToken\n\t}\n\n\tif body != nil {\n\t\tbodyMD5 := fmt.Sprintf(\"%X\", md5.Sum(body))\n\t\theaders[\"Content-MD5\"] = bodyMD5\n\t\tif _, ok := headers[\"Content-Type\"]; !ok {\n\t\t\treturn nil, NewClientError(fmt.Errorf(\"Can't find 'Content-Type' header\"))\n\t\t}\n\t}\n\n\tdigest, err := signature(project.AccessKeySecret, method, uri, headers)\n\tif err != nil {\n\t\treturn nil, NewClientError(err)\n\t}\n\tauth := fmt.Sprintf(\"SLS %v:%v\", project.AccessKeyID, digest)\n\theaders[\"Authorization\"] = auth\n\n\treader := bytes.NewReader(body)\n\turlStr := fmt.Sprintf(\"%s%s\", baseURL, uri)\n\treq, err := http.NewRequest(method, urlStr, reader)\n\tif err != nil {\n\t\treturn nil, NewClientError(err)\n\t}\n\tfor k, v := range headers {\n\t\treq.Header.Add(k, v)\n\t}\n\tif IsDebugLevelMatched(5) {\n\t\tdump, e := httputil.DumpRequest(req, true)\n\t\tif e != nil {\n\t\t\tlevel.Info(Logger).Log(\"msg\", e)\n\t\t}\n\t\tlevel.Info(Logger).Log(\"msg\", \"HTTP Request:\\n%v\", string(dump))\n\t}\n\n\tresp, err := project.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\terr := &Error{}\n\t\terr.HTTPCode = (int32)(resp.StatusCode)\n\t\tdefer resp.Body.Close()\n\t\tbuf, ioErr := ioutil.ReadAll(resp.Body)\n\t\tif ioErr != nil {\n\t\t\treturn nil, NewBadResponseError(ioErr.Error(), resp.Header, resp.StatusCode)\n\t\t}\n\t\tif jErr := json.Unmarshal(buf, err); jErr != nil {\n\t\t\treturn nil, NewBadResponseError(string(buf), resp.Header, resp.StatusCode)\n\t\t}\n\t\terr.RequestID = resp.Header.Get(RequestIDHeader)\n\t\treturn nil, err\n\t}\n\tif IsDebugLevelMatched(5) {\n\t\tdump, e := httputil.DumpResponse(resp, true)\n\t\tif e != nil {\n\t\t\tlevel.Info(Logger).Log(\"msg\", e)\n\t\t}\n\t\tlevel.Info(Logger).Log(\"msg\", \"HTTP Response:\\n%v\", string(dump))\n\t}\n\treturn resp, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype LogProject struct {\n\tBaseURL     string\n\tAccessKey   string\n\tUserAgent   string\n\tSecret      string\n\tDebug       bool\n}\n\nvar (\n\tErrInvalidHeaders = errors.New(\"invalid headers\")\n\tErrRequestFailed  = errors.New(\"request failed\")\n)\n\nfunc realRequest(ctx context.Context, project *LogProject, method, uri string, headers map[string]string, body []byte) (*http.Response, error) {\n\tbaseURL, err := http.ParseURL(project.BaseURL)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid base URL: %w\", err)\n\t}\n\tfullURL := baseURL.ResolveReference(&http.URL{Path: uri})\n\n\treq, err := http.NewRequest(method, fullURL.String(), bytes.NewBuffer(body))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create request: %w\", err)\n\t}\n\n\tfor k, v := range headers {\n\t\treq.Header.Set(k, v)\n\t}\n\n\treq.Header.Set(\"User-Agent\", project.UserAgent)\n\treq.Header.Set(\"Authorization\", \"Bearer \"+project.AccessKey)\n\n\t// Example signature computation (replace with actual logic)\n\tsignature := computeSignature(body, project.Secret)\n\treq.Header.Set(\"X-Signature\", signature)\n\n\trequiredHeaders := []string{\"User-Agent\", \"Authorization\"}\n\tfor _, h := range requiredHeaders {\n\t\tif req.Header.Get(h) == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"missing required header: %w\", ErrInvalidHeaders)\n\t\t}\n\t}\n\n\tif project.Debug {\n\t\tlogRequest(req, body)\n\t}\n\n\tclient := &http.Client{\n\t\tTimeout: 30 * time.Second,\n\t}\n\n\tresp, err := client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"request failed: %w\", ErrRequestFailed)\n\t}\n\n\tif project.Debug {\n\t\tlogResponse(resp)\n\t}\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn resp, fmt.Errorf(\"non-2xx response: %d, %w\", resp.StatusCode, ErrRequestFailed)\n\t}\n\n\treturn resp, nil\n}\n\nfunc computeSignature(body []byte, secret string) string {\n\t// Placeholder for actual signature computation\n\treturn \"signature\"\n}\n\nfunc logRequest(req *http.Request, body []byte) {\n\tfmt.Printf(\"Request: %s %s\\n\", req.Method, req.URL)\n\tfmt.Println(\"Headers:\")\n\tfor k, v := range req.Header {\n\t\tfmt.Printf(\"%s: %s\\n\", k, strings.Join(v, \", \"))\n\t}\n\tfmt.Printf(\"Body: %s\\n\", string(body))\n}\n\nfunc logResponse(resp *http.Response) {\n\tfmt.Printf(\"Response Status: %s\\n\", resp.Status)\n\tfmt.Println(\"Headers:\")\n\tfor k, v := range resp.Header {\n\t\tfmt.Printf(\"%s: %s\\n\", k, strings.Join(v, \", \"))\n\t}\n}\n```"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a function that starts a debug HTTP server with various endpoints for monitoring and debugging purposes, including standard debug endpoints (pprof, metrics, trace) and custom endpoints.\n\nFunction Description: The function `Start` initializes and launches an HTTP server with multiple debugging and monitoring endpoints. It sets up handlers for standard endpoints like pprof, expvar, trace, and metrics, along with any additional custom endpoints provided. The server runs on a predefined address and serves an index page with links to all available endpoints.\n\nInput: \n- `extra ...Endpoint`: Variadic parameter accepting zero or more custom endpoint objects. Each Endpoint should have:\n  - `Path`: string - The URL path for the endpoint\n  - `Name`: string - Display name for the endpoint\n  - `Handler`: http.Handler - The handler function for the endpoint\n\nOutput: None (the function runs indefinitely serving HTTP requests, or returns if no address is configured)\n\nNote: The function uses package-level variables (not shown in the reference code) including `addr` for the server address, and assumes the existence of handler functions like `expvarHandler`, `gcHandler`, and `freeOSMemoryHandler`.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n\t\"strings\"\n\n\t\"golang.org/x/net/trace\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\treturn\n\t}\n\n\tpp := http.NewServeMux()\n\tindex := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(`\n\t\t\t\t<a href=\"vars\">Vars</a><br>\n\t\t\t\t<a href=\"debug/pprof/\">PProf</a><br>\n\t\t\t\t<a href=\"metrics\">Metrics</a><br>\n\t\t\t\t<a href=\"debug/requests\">Requests</a><br>\n\t\t\t\t<a href=\"debug/events\">Events</a><br>\n\t\t\t`))\n\t\tfor _, e := range extra {\n\t\t\tfmt.Fprintf(w, `<a href=\"%s\">%s</a><br>`, strings.TrimPrefix(e.Path, \"/\"), e.Name)\n\t\t}\n\t\tw.Write([]byte(`\n\t\t\t\t<br>\n\t\t\t\t<form method=\"post\" action=\"gc\" style=\"display: inline;\"><input type=\"submit\" value=\"GC\"></form>\n\t\t\t\t<form method=\"post\" action=\"freeosmemory\" style=\"display: inline;\"><input type=\"submit\" value=\"Free OS Memory\"></form>\n\t\t\t`))\n\t})\n\tpp.Handle(\"/\", index)\n\tpp.Handle(\"/debug\", index)\n\tpp.Handle(\"/vars\", http.HandlerFunc(expvarHandler))\n\tpp.Handle(\"/gc\", http.HandlerFunc(gcHandler))\n\tpp.Handle(\"/freeosmemory\", http.HandlerFunc(freeOSMemoryHandler))\n\tpp.Handle(\"/debug/pprof/\", http.HandlerFunc(pprof.Index))\n\tpp.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(pprof.Cmdline))\n\tpp.Handle(\"/debug/pprof/profile\", http.HandlerFunc(pprof.Profile))\n\tpp.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(pprof.Symbol))\n\tpp.Handle(\"/debug/pprof/trace\", http.HandlerFunc(pprof.Trace))\n\tpp.Handle(\"/debug/requests\", http.HandlerFunc(trace.Traces))\n\tpp.Handle(\"/debug/events\", http.HandlerFunc(trace.Events))\n\tpp.Handle(\"/metrics\", promhttp.Handler())\n\tfor _, e := range extra {\n\t\tpp.Handle(e.Path, e.Handler)\n\t}\n\tlog.Println(\"warning: could not start debug HTTP server:\", http.ListenAndServe(addr, pp))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\nfunc Start(extra ...Endpoint) {\n\thttp.Handle(\"/debug/pprof/\", pprof.Handler())\n\thttp.Handle(\"/debug/trace\", traceHandler())\n\thttp.Handle(\"/debug/metrics\", metricsHandler())\n\thttp.Handle(\"/debug/expvar\", expvarHandler())\n\n\tfor _, ep := range extra {\n\t\thttp.Handle(ep.Path, ep.Handler)\n\t}\n\n\tvar allEndpoints []struct {\n\t\tPath string\n\t\tName string\n\t}\n\tallEndpoints = append(allEndpoints, struct {\n\t\tPath string\n\t\tName string\n\t}{\n\t\tPath: \"/debug/pprof/\",\n\t\tName: \"pprof\",\n\t}, struct {\n\t\tPath string\n\t\tName string\n\t}{\n\t\tPath: \"/debug/trace\",\n\t\tName: \"trace\",\n\t}, struct {\n\t\tPath string\n\t\tName string\n\t}{\n\t\tPath: \"/debug/metrics\",\n\t\tName: \"metrics\",\n\t}, struct {\n\t\tPath string\n\t\tName string\n\t}{\n\t\tPath: \"/debug/expvar\",\n\t\tName: \"expvar\",\n\t})\n\n\tfor _, ep := range extra {\n\t\tallEndpoints = append(allEndpoints, struct {\n\t\t\tPath string\n\t\t\tName string\n\t\t}{\n\t\t\tPath: ep.Path,\n\t\t\tName: ep.Name,\n\t\t})\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\")\n\t\tfmt.Fprintf(w, \"<h1>Debug Endpoints</h1>\\n<ul>\\n\")\n\t\tfor _, ep := range allEndpoints {\n\t\t\tfmt.Fprintf(w, \"<li><a href=\\\"%s\\\">%s</a></li>\\n\", ep.Path, ep.Name)\n\t\t}\n\t\tfmt.Fprintf(w, \"</ul>\\n\")\n\t})\n\n\tif addr != \"\" {\n\t\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\t\tlog.Fatalf(\"Failed to start debug server: %v\", err)\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a multipart form and displays an upload form to the client.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form for file uploads. For POST requests, it processes the uploaded file. The server listens on port 9000.\n\nInput: \n- None (The function takes no direct input parameters, but handles HTTP requests with:\n  - GET requests to \"/\" path\n  - POST requests with multipart/form-data containing a file under the \"q\" field)\n\nOutput:\n- For GET requests: Returns HTML form for file upload (content-type: text/html)\n- For POST requests: Processes the uploaded file (prints file info to console)\n- Server runs continuously on port 9000 until terminated",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tfile, hdr, err := req.FormFile(key)\n\t\tfmt.Println(file, hdr, err)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"q\">\n      <input type=\"submit\">\n    </form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":9000\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tfmt.Fprintf(w, \"<html><body><form method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"><input type=\\\"file\\\" name=\\\"q\\\"><input type=\\\"submit\\\"></form></body></html>\")\n\t} else if r.Method == \"POST\" {\n\t\tr.ParseMultipartForm(10 << 20)\n\t\tfile, handler, err := r.FormFile(\"q\")\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\t\tfmt.Printf(\"Uploaded File: %v\\n\", handler.Filename)\n\t\tfmt.Printf(\"File Size: %v\\n\", handler.Size)\n\t\tfmt.Printf(\"Content Type: %v\\n\", handler.Header)\n\t\tfmt.Fprintf(w, \"File uploaded successfully.\")\n\t}\n}\n```"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Create a function that implements a basic HTTP server which echoes back the request body to the response.\n\nFunction Description: The function `httpserver` starts an HTTP server on the specified address. It handles all incoming requests to the root path (\"/\") by copying the request body directly to the response writer. This effectively echoes back the received data to the client. The server runs until an error occurs or is manually stopped.\n\nInput:  \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\").\n\nOutput:  \n- `error`: Returns an error if the server fails to start or encounters a fatal error during operation. Returns nil if the server is terminated gracefully.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tio.Copy(w, req.Body)\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tw.Write(body)\n\t})\n\tsrv := &http.Server{\n\t\tAddr: addr,\n\t}\n\treturn srv.ListenAndServe()\n}\n```"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement an HTTP worker struct that can process jobs by making HTTP requests with custom headers and handling the responses appropriately.\n\nStruct Description: HTTPWorker is a struct that handles HTTP job processing with configurable user agent and logging capabilities. It implements job execution by making POST requests to specified URLs with JSON payloads and processing the responses.\n\nFields:\nUserAgent: string - The User-Agent header value to be used in HTTP requests\nLogger: *zerolog.Logger - Logger instance for debug and error logging\n\nMethods:\nWork: (job jobqueue.Job) -> *jobqueue.Result - Processes a job by making an HTTP POST request to the job's URL with the job's payload as JSON. Handles request creation, execution, response reading, and result parsing. Returns a jobqueue.Result indicating the outcome of the job processing.\n\nInput Parameters:\n- job: jobqueue.Job - Contains the job details including URL, payload, and timeout\n\nOutput:\n- *jobqueue.Result - The result of the job processing, including status, code, and message",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/fireworq/fireworq/jobqueue\"\n\t\"github.com/rs/zerolog\"\n)\n\ntype HTTPWorker struct {\n\tUserAgent string\n\tLogger    *zerolog.Logger\n}\n\nfunc (worker *HTTPWorker) Work(job jobqueue.Job) *jobqueue.Result {\n\tclient := &http.Client{\n\t\tTimeout: time.Duration(job.Timeout()) * time.Second,\n\t}\n\treq, err := http.NewRequest(\n\t\t\"POST\",\n\t\tjob.URL(),\n\t\tstrings.NewReader(job.Payload()),\n\t)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusInternalFailure,\n\t\t\tMessage: fmt.Sprintf(\"Cannot create http request: %v\", err),\n\t\t}\n\t}\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\n\tuserAgent := worker.UserAgent\n\tif userAgent == \"\" {\n\t\tuserAgent = defaultUserAgent\n\t}\n\treq.Header.Add(\"User-Agent\", userAgent)\n\n\tresp, err := client.Do(req)\n\n\tworker.Logger.Debug().\n\t\tStr(\"action\", \"dispatch\").\n\t\tStr(\"worker\", \"HTTPWorker\").\n\t\tStr(\"url\", job.URL()).\n\t\tStr(\"payload\", job.Payload()).\n\t\tMsg(\"Dispatched via HTTP\")\n\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusInternalFailure,\n\t\t\tMessage: fmt.Sprintf(\"Request failed: %v\", err),\n\t\t}\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusFailure,\n\t\t\tCode:    resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\"Cannot read body: %v\", err),\n\t\t}\n\t}\n\n\tvar rslt jobqueue.Result\n\terr = json.Unmarshal(body, &rslt)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus: jobqueue.ResultStatusFailure,\n\t\t\tCode:   resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\n\t\t\t\t\"Cannot parse body as JSON: %v\\nOriginal response body:\\n%s\",\n\t\t\t\terr,\n\t\t\t\tstring(body),\n\t\t\t),\n\t\t}\n\t}\n\n\tif !rslt.IsValid() {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusFailure,\n\t\t\tCode:    resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\"Invalid result status: %s\\nOriginal response body:\\n%s\", rslt.Status, string(body)),\n\t\t}\n\t}\n\n\trslt.Code = resp.StatusCode\n\treturn &rslt\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/zerolog/log\"\n)\n\ntype HTTPWorker struct {\n\tUserAgent string\n\tLogger    *log.Logger\n}\n\nfunc (w *HTTPWorker) Work(job jobqueue.Job) *jobqueue.Result {\n\tpayloadBytes, err := json.Marshal(job.Payload)\n\tif err != nil {\n\t\tw.Logger.Err(err).Msg(\"Failed to marshal job payload\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Payload marshaling failed\",\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", job.URL, bytes.NewBuffer(payloadBytes))\n\tif err != nil {\n\t\tw.Logger.Err(err).Msg(\"Failed to create HTTP request\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Request creation failed\",\n\t\t}\n\t}\n\n\treq.Header.Set(\"User-Agent\", w.UserAgent)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{Timeout: job.Timeout}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tw.Logger.Err(err).Msg(\"HTTP request failed\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    0,\n\t\t\tMessage: err.Error(),\n\t\t}\n\t}\n\tdefer resp.Body.Close()\n\n\tbodyBytes, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tw.Logger.Err(err).Msg(\"Failed to read response body\")\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Response body read failed\",\n\t\t}\n\t}\n\n\tvar status string\n\tvar code int\n\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\tstatus = \"success\"\n\t\tcode = resp.StatusCode\n\t} else {\n\t\tstatus = \"failure\"\n\t\tcode = resp.StatusCode\n\t}\n\n\tw.Logger.Debug().Int(\"status_code\", code).Str(\"response\", string(bodyBytes)).Msg(\"HTTP response received\")\n\n\treturn &jobqueue.Result{\n\t\tStatus:  status,\n\t\tCode:    code,\n\t\tMessage: string(bodyBytes),\n\t}\n}\n```"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a Go struct that represents local network services capable of running both a DNS server and an HTTP server concurrently. The DNS server should resolve a specific domain to a local IP address, while the HTTP server should serve predefined webpages.\n\nStruct Description: The `localNetworkServices` struct encapsulates functionality for running concurrent DNS and HTTP servers. The DNS server resolves a configured domain to a local IP address, and the HTTP server serves static web content mapped to specific paths.\n\nFields:\n- domain: string - The domain name that will be resolved by the DNS server\n- webpages: map[string]string - A map of URL paths to their corresponding webpage content\n- ipAddr: string - The local IP address that both servers will bind to\n\nMethods:\n- DNSServerIP() -> string - Returns the IP address of the DNS server\n- URL(subpath string) -> string - Constructs a full URL for a given subpath using the configured domain\n- Serve(ctx context.Context) -> error - Starts both DNS and HTTP servers concurrently using an errgroup, returns any error that occurs during execution\n\nAdditional Helper Struct:\n- dnsHandler: Implements the dns.Handler interface to handle DNS queries\n\nFields:\n- records: map[string]string - A map of domain names to their corresponding IP addresses\n\nMethods:\n- ServeDNS(w dns.ResponseWriter, r *dns.Msg) - Handles incoming DNS queries, responding with A records for configured domains",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"golang.org/x/sync/errgroup\"\n\t\"github.com/miekg/dns\"\n)\n\ntype localNetworkServices struct {\n\tdomain   string\n\twebpages map[string]string\n\tipAddr   string\n}\n\nfunc (l localNetworkServices) DNSServerIP() string {\n\treturn l.ipAddr\n}\n\nfunc (l localNetworkServices) URL(subpath string) string {\n\treturn fmt.Sprintf(\"http://%s/%s\", l.domain, subpath)\n}\n\nfunc (l localNetworkServices) Serve(ctx context.Context) error {\n\terrGroup, _ := errgroup.WithContext(ctx)\n\n\terrGroup.Go(func() error {\n\t\tdnsSrv := &dns.Server{\n\t\t\tAddr: l.ipAddr + \":53\",\n\t\t\tNet:  \"udp\",\n\t\t\tHandler: &dnsHandler{\n\t\t\t\trecords: map[string]string{\n\t\t\t\t\tl.domain + \".\": l.ipAddr,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\treturn dnsSrv.ListenAndServe()\n\t})\n\n\terrGroup.Go(func() error {\n\t\tfor path, contents := range l.webpages {\n\t\t\twebpage := contents\n\t\t\thttp.HandleFunc(\"/\"+path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tio.WriteString(w, webpage)\n\t\t\t})\n\t\t}\n\n\t\treturn http.ListenAndServe(l.ipAddr+\":80\", nil)\n\t})\n\n\treturn errGroup.Wait()\n}\n\ntype dnsHandler struct {\n\trecords map[string]string\n}\n\nfunc (h dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\n\tmsg := dns.Msg{}\n\tmsg.SetReply(r)\n\tif r.Question[0].Qtype == dns.TypeA {\n\t\tmsg.Authoritative = true\n\t\tdomain := msg.Question[0].Name\n\t\taddress, ok := h.records[domain]\n\t\tif ok {\n\t\t\tmsg.Answer = append(msg.Answer, &dns.A{\n\t\t\t\tHdr: dns.RR_Header{Name: domain, Rrtype: dns.TypeA, Class: dns.ClassINET, Ttl: 3600},\n\t\t\t\tA:   net.ParseIP(address),\n\t\t\t})\n\t\t} else {\n\t\t\tmsg.SetRcode(r, dns.RcodeNameError)\n\t\t}\n\t}\n\n\tw.WriteMsg(&msg)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n\t\"golang.org/x/sync/errgroup\"\n\t\"github.com/miekg/dns\"\n\t\"http\"\n)\n\ntype localNetworkServices struct {\n\tdomain   string\n\twebpages map[string]string\n\tipAddr   string\n}\n\ntype dnsHandler struct {\n\trecords map[string]string\n}\n\nfunc (h *dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\n\tm := new(dns.Msg)\n\tm.SetReply(r)\n\tm.Authoritative = true\n\n\tfor _, q := range m.Question {\n\t\tif ip, ok := h.records[q.Name]; ok {\n\t\t\ta := new(dns.A)\n\t\t\ta.Hdr = dns.RR_Header{Name: q.Name, Rrtype: dns.TypeA, Class: dns.ClassINET, Ttl: 60}\n\t\t\ta.A = net.ParseIP(ip)\n\t\t\tm.Answer = append(m.Answer, a)\n\t\t}\n\t}\n\n\tw.WriteMsg(m)\n}\n\nfunc (s *localNetworkServices) DNSServerIP() string {\n\treturn s.ipAddr\n}\n\nfunc (s *localNetworkServices) URL(subpath string) string {\n\treturn \"http://\" + s.domain + \"/\" + subpath\n}\n\nfunc (s *localNetworkServices) Serve(ctx context.Context) error {\n\tg, ctx := errgroup.WithContext(ctx)\n\n\tg.Go(func() error {\n\t\tserver := &dns.Server{\n\t\t\tAddr:    s.ipAddr + \":53\",\n\t\t\tHandler: &dnsHandler{records: map[string]string{s.domain: s.ipAddr}},\n\t\t}\n\t\treturn server.ListenAndServe()\n\t})\n\n\tg.Go(func() error {\n\t\thttpServer := &http.Server{\n\t\t\tAddr: s.ipAddr + \":80\",\n\t\t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tcontent, ok := s.webpages[r.URL.Path]\n\t\t\t\tif ok {\n\t\t\t\t\tfmt.Fprintln(w, content)\n\t\t\t\t} else {\n\t\t\t\t\thttp.NotFound(w, r)\n\t\t\t\t}\n\t\t\t}),\n\t\t}\n\t\treturn httpServer.ListenAndServe()\n\t})\n\n\treturn g.Wait()\n}\n```"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Implement a Certificate Authority (CA) service in Go using the Chi router for HTTP routing, supporting both secure and insecure servers, with background jobs and proper shutdown handling.\n\nStruct Description: The CA struct represents a Certificate Authority service that manages HTTP servers (secure and insecure), configuration, authentication, and background tasks.\n\nFields:\n\nauth: [*authority.Authority] - The authority component handling certificate operations  \nconfig: [*config.Config] - Configuration settings for the CA service  \nsrv: [*server.Server] - The main secure HTTP server  \ninsecureSrv: [*server.Server] - Optional insecure HTTP server for certain endpoints  \nmetricsSrv: [*server.Server] - Optional metrics server  \nopts: [*options] - Additional service options  \nrenewer: [*TLSRenewer] - Component handling TLS certificate renewal  \ncompactStop: [chan struct{}] - Channel for stopping the background compaction job  \n\nMethods:\n\nInit: [func(cfg *config.Config) (*CA, error)] - Initializes the CA service with configuration, sets up routers, and prepares servers  \nRun: [func() error] - Starts all servers and background jobs, handles graceful shutdown on errors  \nshouldServeInsecureServer: [func() bool] - (implied private method) Determines if insecure server should be started  \nrunCompactJob: [func()] - (implied private method) Runs background compaction task  \nStop: [func() error] - (implied method) Handles service shutdown and cleanup",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n)\n\ntype CA struct {\n\tauth        *authority.Authority\n\tconfig      *config.Config\n\tsrv         *server.Server\n\tinsecureSrv *server.Server\n\tmetricsSrv  *server.Server\n\topts        *options\n\trenewer     *TLSRenewer\n\tcompactStop chan struct{}\n}\n\nfunc (ca *CA) Init(cfg *config.Config) (*CA, error) {\n\tmux := chi.NewRouter()\n\thandler := http.Handler(mux)\n\n\tinsecureMux := chi.NewRouter()\n\tinsecureHandler := http.Handler(insecureMux)\n\n\tmux.Use(middleware.GetHead)\n\tinsecureMux.Use(middleware.GetHead)\n\n\tapi.Route(mux)\n\tmux.Route(\"/1.0\", func(r chi.Router) {\n\t\tapi.Route(r)\n\t})\n\n\tinsecureMux.Get(\"/crl\", api.CRL)\n\tinsecureMux.Get(\"/1.0/crl\", api.CRL)\n\n\tbaseContext := buildContext(auth, scepAuthority, acmeDB, acmeLinker)\n\n\tca.srv = server.New(cfg.Address, handler, tlsConfig)\n\tca.srv.BaseContext = func(net.Listener) context.Context {\n\t\treturn baseContext\n\t}\n\n\tif ca.shouldServeInsecureServer() {\n\t\tca.insecureSrv = server.New(cfg.InsecureAddress, insecureHandler, nil)\n\t\tca.insecureSrv.BaseContext = func(net.Listener) context.Context {\n\t\t\treturn baseContext\n\t\t}\n\t}\n\n\treturn ca, nil\n}\n\nfunc (ca *CA) Run() error {\n\tvar wg sync.WaitGroup\n\terrs := make(chan error, 1)\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tca.runCompactJob()\n\t}()\n\n\tif ca.insecureSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.insecureSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\tif ca.metricsSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.metricsSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terrs <- ca.srv.ListenAndServe()\n\t}()\n\n\terr := <-errs\n\n\tif !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Println(\"shutting down due to startup error ...\")\n\t\tif stopErr := ca.Stop(); stopErr != nil {\n\t\t\terr = fmt.Errorf(\"failed stopping CA after error occurred: %w: %w\", err, stopErr)\n\t\t} else {\n\t\t\terr = fmt.Errorf(\"stopped CA after error occurred: %w\", err)\n\t\t}\n\t}\n\n\twg.Wait()\n\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 108,
    "wrong_result": "```go\npackage ca\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/go-chi/chi\"\n\t\"github.com/go-chi/chi/middleware\"\n\t\"github.com/yourproject/authority\"\n\t\"github.com/yourproject/config\"\n\t\"github.com/yourproject/server\"\n\t\"github.com/yourproject/options\"\n\t\"github.com/yourproject/tlsrenewer\"\n)\n\ntype CA struct {\n\tauth         *authority.Authority\n\tconfig       *config.Config\n\tsrv          *server.Server\n\tinsecureSrv  *server.Server\n\tmetricsSrv   *server.Server\n\topts         *options.Options\n\trenewer      *tlsrenewer.TLSRenewer\n\tcompactStop  chan struct{}\n}\n\nfunc (c *CA) Init(cfg *config.Config) (*CA, error) {\n\tc.config = cfg\n\tc.opts = &options.Options{}\n\tc.compactStop = make(chan struct{})\n\n\t// Initialize authority\n\tvar err error\n\tc.auth, err = authority.New(cfg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Setup routers\n\tr := chi.NewRouter()\n\tr.Use(middleware.RequestID)\n\tr.Use(middleware.Logger)\n\tr.Use(middleware.Recoverer)\n\n\t// Secure server setup\n\tc.srv = &server.Server{\n\t\tAddr:    c.config.SecureAddr,\n\t\tHandler: r,\n\t\tTLSConfig: &tls.Config{\n\t\t\tCertificates: []tls.Certificate{c.auth.Cert()},\n\t\t},\n\t}\n\n\t// Insecure server setup if needed\n\tif c.shouldServeInsecureServer() {\n\t\tc.insecureSrv = &server.Server{\n\t\t\tAddr:    c.config.InsecureAddr,\n\t\t\tHandler: r,\n\t\t}\n\t}\n\n\t// Metrics server setup\n\tif c.config.MetricsAddr != \"\" {\n\t\tc.metricsSrv = &server.Server{\n\t\t\tAddr:    c.config.MetricsAddr,\n\t\t\tHandler: promhttp.Handler(),\n\t\t}\n\t}\n\n\t// Initialize TLS renewer\n\tc.renewer = &tlsrenewer.TLSRenewer{\n\t\tAuthority: c.auth,\n\t\tInterval:  c.config.RenewalInterval,\n\t}\n\n\treturn c, nil\n}\n\nfunc (c *CA) Run() error {\n\tvar wg sync.WaitGroup\n\terrChan := make(chan error, 3)\n\n\t// Start secure server\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tif err := c.srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\terrChan <- err\n\t\t}\n\t}()\n\n\t// Start insecure server if needed\n\tif c.insecureSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tif err := c.insecureSrv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\terrChan <- err\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Start metrics server if configured\n\tif c.metricsSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tif err := c.metricsSrv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\terrChan <- err\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Start background compaction job\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tc.runCompactJob()\n\t}()\n\n\t// Start TLS renewal\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tif err := c.renewer.Start(); err != nil {\n\t\t\terrChan <- err\n\t\t}\n\t}()\n\n\t// Handle shutdown\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)\n\n\tselect {\n\tcase err := <-errChan:\n\t\treturn err\n\tcase <-sigChan:\n\t\t// Graceful shutdown\n\t\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t\tdefer cancel()\n\n\t\tif err := c.Stop(); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\twg.Wait()\n\t\treturn nil\n\t}\n}\n\nfunc (c *CA) shouldServeInsecureServer() bool {\n\treturn c.config.InsecureAddr != \"\" && !c.config.DisableInsecure\n}\n\nfunc (c *CA) runCompactJob() {\n\tticker := time.NewTicker(1 * time.Hour)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\t// Perform compaction logic\n\t\t\tc.auth.Compact()\n\t\tcase <-c.compactStop:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (c *CA) Stop() error {\n\tvar errs []error\n\n\t// Stop compaction job\n\tclose(c.compactStop)\n\n\t// Shutdown servers\n\tif c.srv != nil {\n\t\tif err := c.srv.Shutdown(context.Background()); err != nil {\n\t\t\terrs = append(errs, err)\n\t\t}\n\t}\n\n\tif c.insecureSrv != nil {\n\t\tif err := c.insecureSrv.Shutdown(context.Background()); err != nil {\n\t\t\terrs = append(errs, err)\n\t\t}\n\t}\n\n\tif c.metricsSrv != nil {\n\t\tif err := c.metricsSrv.Shutdown(context.Background()); err != nil {\n\t\t\terrs = append(errs, err)\n\t\t}\n\t}\n\n\t// Stop TLS renewer\n\tif c.renewer != nil {\n\t\tif err := c.renewer.Stop(); err != nil {\n\t\t\terrs = append(errs, err)\n\t\t}\n\t}\n\n\tif len(errs) > 0 {\n\t\treturn fmt.Errorf(\"errors stopping CA: %v\", errs)\n\t}\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that performs HTTP requests with customizable options including TLS configuration, request method, headers, and payload.\n\nFunction Description: The function DoRequest executes HTTP requests with various configurable options. It handles TLS configuration (including insecure mode), sets request headers, processes different HTTP methods, and manages response reading. The function is designed to be flexible for different API interaction scenarios while maintaining security and error handling.\n\nInput:\n- opt (EtcdRequestOption struct) - Configuration options for the HTTP request containing:\n  - Endpoint (string): Base URL for the request\n  - Api (string): API endpoint path\n  - PostData (string): Request payload data\n  - TlsConfig (*tls.Config): TLS configuration (nil for insecure)\n  - Method (string): HTTP method (GET, POST, etc.)\n  - Silent (bool): Unused in current implementation\n\nOutput:\n- (string) - Response body content as string\n- (error) - Error object if request fails, nil on success",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cdk-team/CDK/pkg/errors\"\n)\n\ntype EtcdRequestOption struct {\n\tEndpoint  string\n\tApi       string\n\tPostData  string\n\tTlsConfig *tls.Config\n\tMethod    string\n\tSilent    bool\n}\n\nfunc DoRequest(opt EtcdRequestOption) (string, error) {\n\tif opt.TlsConfig == nil || len(opt.TlsConfig.Certificates) == 0 || opt.TlsConfig.RootCAs == nil {\n\t\topt.TlsConfig = &tls.Config{InsecureSkipVerify: true}\n\t}\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: opt.TlsConfig,\n\t\t},\n\t\tTimeout: time.Duration(5) * time.Second,\n\t}\n\n\trequest, err := http.NewRequest(opt.Method, opt.Endpoint+opt.Api, bytes.NewBuffer([]byte(opt.PostData)))\n\tif err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found while generate post request in net.http .\"}\n\t}\n\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(request)\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t} else if err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found in post request.\"}\n\t}\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found in post request.\"}\n\t}\n\n\treturn string(content), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"crypto/tls\"\n)\n\ntype EtcdRequestOption struct {\n\tEndpoint  string\n\tApi       string\n\tPostData  string\n\tTlsConfig *tls.Config\n\tMethod    string\n\tSilent    bool\n}\n\nfunc DoRequest(opt EtcdRequestOption) (string, error) {\n\turl := opt.Endpoint + opt.Api\n\tvar bodyReader io.Reader\n\tif opt.Method == \"POST\" || opt.Method == \"PUT\" || opt.Method == \"PATCH\" {\n\t\tbodyReader = strings.NewReader(opt.PostData)\n\t} else {\n\t\tbodyReader = nil\n\t}\n\treq, err := http.NewRequest(opt.Method, url, bodyReader)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tvar tr *http.Transport\n\tif opt.TlsConfig == nil {\n\t\ttr = &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t} else {\n\t\ttr = &http.Transport{\n\t\t\tTLSClientConfig: opt.TlsConfig,\n\t\t}\n\t}\n\tclient := &http.Client{Transport: tr}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn string(body), fmt.Errorf(\"non-2xx response: %d\", resp.StatusCode)\n\t}\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server using the Echo framework, supporting both HTTP/2 and HTTPS configurations, with customizable timeouts and root path handling.\n\nStruct Description: The Api struct represents an HTTP server configuration with support for TLS, HTTP/2, and customizable timeouts. It provides methods to start and stop the server gracefully.\n\nFields:\nport: int - The port number on which the server will listen\nbindIp: string - The IP address to bind the server to\ntlsCertFile: string - Path to TLS certificate file (empty for non-HTTPS)\ntlsKeyFile: string - Path to TLS private key file (empty for non-HTTPS)\ntimeout: time.Duration - Server timeout duration for read/write operations\nrootPath: string - The root path for the server's default route\nsrv: *echo.Echo - The Echo server instance\n\nMethods:\nStart: () -> error - Initializes and starts the HTTP server in a goroutine, supporting both TLS and HTTP/2 configurations. Returns nil on successful startup.\nStop: (ctx context.Context) -> error - Gracefully shuts down the server using the provided context. Returns any error that occurs during shutdown.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"golang.org/x/net/http2\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.HideBanner = true\n\ta.srv.HidePort = true\n\ta.srv.Server.ReadTimeout = a.timeout\n\ta.srv.Server.IdleTimeout = a.timeout\n\ta.srv.Server.WriteTimeout = a.timeout + a.timeout\n\n\ta.srv.GET(\n\t\ta.rootPath,\n\t\tfunc(c echo.Context) error {\n\t\t\treturn c.HTML(http.StatusOK, `Hey, Gotenberg has no UI, it's an API. Head to the <a href=\"https://gotenberg.dev\">documentation</a> to learn how to interact with it \ud83d\ude80`)\n\t\t},\n\t)\n\n\tgo func() {\n\t\tvar err error\n\t\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\t\terr = a.srv.StartTLS(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), a.tlsCertFile, a.tlsKeyFile)\n\t\t} else {\n\t\t\tserver := &http2.Server{}\n\t\t\terr = a.srv.StartH2CServer(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), server)\n\t\t}\n\t\tif !errors.Is(err, http.ErrServerClosed) {\n\t\t\ta.logger.Fatal(err.Error())\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Shutdown(ctx)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "wrong_result": "```go\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.Server.Addr = fmt.Sprintf(\"%s:%d\", a.bindIp, a.port)\n\ta.srv.Server.ReadTimeout = a.timeout\n\ta.srv.Server.WriteTimeout = a.timeout\n\n\tvar tlsConfig *tls.Config\n\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(a.tlsCertFile, a.tlsKeyFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttlsConfig = &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t}\n\t}\n\ta.srv.Server.TLSConfig = tlsConfig\n\n\tgo func() {\n\t\tif err := a.srv.Server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Server.Shutdown(ctx)\n}\n```"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests and serves HTML content with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The main function initializes an Echo server, configures middleware for recovery and logging, sets up a route handler for the root path (\"/\") that returns HTML content, and starts the server with automatic TLS on port 443.\n\nInput: None (The function takes no explicit input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"crypto/tls\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, \"<html><body><h1>Hello, World!</h1></body></html>\")\n\t})\n\n\tm := autocert.Manager{\n\t\tPrompt: autocert.Prompt,\n\t\tHostPolicy: autocert.HostWhitelist(\"example.com\"),\n\t}\n\n\tgo func() {\n\t\tif err := http.ListenAndServe(\":80\", m.HTTPHandler(nil)); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tserver := &http.Server{\n\t\tAddr:    \":443\",\n\t\tHandler: e,\n\t\tTLSConfig: &tls.Config{\n\t\t\tGetCertificate: m.GetCertificate,\n\t\t},\n\t}\n\n\tif err := server.ListenAndServeTLS(\"\", \"\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  }
]