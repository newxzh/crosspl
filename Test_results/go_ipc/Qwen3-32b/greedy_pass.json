[
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles JSONP requests, serving dynamic JSON data wrapped in a callback function.\n\nFunction Description: The main function initializes an Echo server, sets up middleware for logging and recovery, serves static files from a \"public\" directory, and defines a route (\"/jsonp\") that responds to GET requests with JSONP-formatted data containing a response message, current timestamp, and random number.\n\nInput: None (The function takes no direct input parameters, but the \"/jsonp\" endpoint accepts an optional query parameter \"callback\" specifying the JSONP callback function name)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and serves responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recovery())\n\n\te.Static(\"/public\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tif callback == \"\" {\n\t\t\tcallback = \"callback\"\n\t\t}\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"message\":   \"response\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t\t\"random\":    rand.Float64(),\n\t\t}\n\n\t\tjsonData, _ := json.Marshal(data)\n\t\tc.Response().Header().Set(echo.HeaderContentType, \"application/javascript\")\n\t\t_, _ = c.Response().Write([]byte(callback + \"(\" + string(jsonData) + \");\"))\n\t\treturn nil\n\t})\n\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic routes and includes middleware for logging and recovery.\n\nFunction Description: The main function initializes a new Echo instance, sets up middleware for logging and panic recovery, defines a route handler for the root path (\"/\"), and starts the HTTP server on port 1323.\n\nInput: None (The function takes no direct input parameters; configuration is done internally)\n\nOutput: None (The function does not return any value; it starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles POST requests for two different endpoints (/tenhou and /majsoul) to process incoming data and forward it to respective receivers.\n\nStruct Description: The mjHandler struct is a request handler that processes incoming HTTP requests for the Tenhou and Majsoul game platforms, logging errors and forwarding data to appropriate receivers.\n\nFields:\n- log: echo.Logger - Logger for error and info logging\n- tenhouMessageReceiver: *tenhou.MessageReceiver - Receiver for Tenhou game messages\n- majsoulMessageQueue: chan []byte - Channel for buffering Majsoul game messages\n\nMethods:\n- analysisTenhou: (c echo.Context) -> error - Processes POST requests to /tenhou endpoint, reads request body, forwards data to tenhouMessageReceiver, and returns HTTP response\n- analysisMajsoul: (c echo.Context) -> error - Processes POST requests to /majsoul endpoint, reads request body, sends data to majsoulMessageQueue, and returns HTTP response\n\nFunction Description: The runServer function initializes and starts an HTTP server with configurable port and HTTPS options, setting up routes and middleware for the Echo framework.\n\nInput:\n- isHTTPS: bool - Flag indicating whether to use HTTPS\n- port: int - Port number for the server to listen on\n\nOutput:\n- error - Returns any error that occurs during server startup or operation",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/labstack/gommon/log\"\n\tstdLog \"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n)\n\ntype mjHandler struct {\n\tlog echo.Logger\n\n\ttenhouMessageReceiver *tenhou.MessageReceiver\n\tmajsoulMessageQueue   chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.tenhouMessageReceiver.Put(data)\n\treturn c.NoContent(http.StatusOK)\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.majsoulMessageQueue <- data\n\treturn c.NoContent(http.StatusOK)\n}\n\nvar h *mjHandler\n\nfunc runServer(isHTTPS bool, port int) (err error) {\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\te.StdLogger = stdLog.New(ioutil.Discard, \"\", 0)\n\te.Logger.SetLevel(log.INFO)\n\n\th = &mjHandler{\n\t\tlog:                   e.Logger,\n\t\ttenhouMessageReceiver: tenhou.NewMessageReceiver(),\n\t\tmajsoulMessageQueue:   make(chan []byte, 100),\n\t}\n\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORS())\n\te.POST(\"/tenhou\", h.analysisTenhou)\n\te.POST(\"/majsoul\", h.analysisMajsoul)\n\n\taddr := \":\" + strconv.Itoa(port)\n\tif !isHTTPS {\n\t\terr = e.Start(addr)\n\t} else {\n\t\terr = startTLS(e, addr)\n\t}\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype mjHandler struct {\n\tlog                    echo.Logger\n\ttenhouMessageReceiver  *tenhou.MessageReceiver\n\tmajsoulMessageQueue    chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tbody, err := io.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.log.Error(\"Failed to read request body:\", err)\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Invalid request body\")\n\t}\n\th.tenhouMessageReceiver.Receive(body)\n\treturn c.JSON(http.StatusOK, map[string]string{\"status\": \"processed\"})\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tbody, err := io.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.log.Error(\"Failed to read request body:\", err)\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Invalid request body\")\n\t}\n\th.majsoulMessageQueue <- body\n\treturn c.JSON(http.StatusOK, map[string]string{\"status\": \"queued\"})\n}\n\nfunc runServer(isHTTPS bool, port int) error {\n\te := echo.New()\n\n\ttenhouReceiver := &tenhou.MessageReceiver{}\n\tmajsoulQueue := make(chan []byte)\n\n\thandler := &mjHandler{\n\t\tlog:                    e.Logger,\n\t\ttenhouMessageReceiver:  tenhouReceiver,\n\t\tmajsoulMessageQueue:    majsoulQueue,\n\t}\n\n\te.POST(\"/tenhou\", handler.analysisTenhou)\n\te.POST(\"/majsoul\", handler.analysisMajsoul)\n\n\taddress := fmt.Sprintf(\":%d\", port)\n\tif isHTTPS {\n\t\treturn e.StartTLS(address, \"cert.pem\", \"key.pem\")\n\t}\n\treturn e.Start(address)\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a Go struct that represents an HTTP server application using the Echo framework, with configurable options and standard middleware.\n\nStruct Description: The `App` struct represents an HTTP server application built on the Echo framework. It encapsulates the Echo engine instance and provides methods to initialize and run the server with common middleware (recovery, logging) and default routes.\n\nFields:\n- Engine: *echo.Echo - The core Echo framework instance that handles HTTP routing and middleware\n- Conf: *conf.Conf - Configuration object for server settings (port, debug mode, etc.)\n\nMethods:\n- NewApp: func(opts ...AppOptions) *App - Constructor that initializes a new App instance with optional configuration. Applies default middleware (recovery, logging) and sets up basic routes.\n  Input: opts ...AppOptions (variadic parameter for configuration options)\n  Output: *App (new App instance)\n\n- Run: func() - Starts the HTTP server using the configured port from Conf. Panics if server fails to start.\n  Input: None\n  Output: None (runs indefinitely until server stops)\n\n- Must: func(error) - Helper function (not shown in reference) that panics on error, typically used for server startup\n  Input: error\n  Output: None",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n}\n\nfunc NewApp(opts ...AppOptions) *App {\n\toptions := AppOptions{}\n\tfor _, i := range opts {\n\t\toptions = i\n\t\tbreak\n\t}\n\n\toptions.init()\n\n\tengine := echo.New()\n\n\tengine.Debug = conf.UBool(\"debug\")\n\n\tengine.Use(middleware.Recover())\n\n\tengine.GET(\"/favicon.ico\", func(c echo.Context) error {\n\t\treturn c.Redirect(http.StatusMovedPermanently, \"/static/images/favicon.ico\")\n\t})\n\n\tengine.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n\t\tFormat: `${method} | ${status} | ${uri} -> ${latency_human}` + \"\\n\",\n\t}))\n\n\tapp := &App{\n\t\tEngine: engine,\n\t}\n\n\treturn app\n}\n\nfunc (app *App) Run() {\n\tMust(app.Engine.Start(\":\" + app.Conf.UString(\"port\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n\tConf   *Conf\n}\n\ntype AppOption func(*App)\n\nfunc NewApp(opts ...AppOption) *App {\n\tapp := &App{\n\t\tEngine: echo.New(),\n\t\tConf:   &Conf{Port: \"1323\", Debug: false},\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(app)\n\t}\n\n\tapp.Engine.Use(middleware.Recovery())\n\tapp.Engine.Use(middleware.Logger())\n\tapp.Engine.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(200, \"OK\")\n\t})\n\n\treturn app\n}\n\nfunc (a *App) Run() {\n\taddr := \":\" + a.Conf.Port\n\tMust(a.Engine.Start(addr))\n}\n\nfunc Must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\ntype Conf struct {\n\tPort  string\n\tDebug bool\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server with WebSocket support using the Echo framework, capable of handling messages, health checks, and streaming, with optional authentication.\n\nStruct Description: The API struct represents an HTTP server with WebSocket capabilities, message buffering, and authentication support. It handles incoming HTTP requests and WebSocket connections while managing message broadcasting and logging.\n\nFields:\n\nMessages: [ring.Ring] - A ring buffer for storing messages with configurable capacity\nRWMutex: [sync.RWMutex] - Read-write mutex for thread-safe operations on shared data\nConfig: [*bridge.Config] - Configuration object containing server settings and parameters\nmrouter: [*melody.Melody] - WebSocket router for handling WebSocket connections and messages\n\nMethods:\n\nNew: [func(cfg *bridge.Config) bridge.Bridger] -> [bridge.Bridger] - Constructor that initializes the API instance, sets up routes, and starts the HTTP server\nhandleWebsocketMessage: [func(message config.Message, s *melody.Session)] -> [void] - Handles incoming WebSocket messages, prepares them for broadcasting, and sends to remote channel\nhandleWebsocket: [func(c echo.Context) error] -> [error] - WebSocket handler that manages WebSocket connections using the melody router\nhandleHealthcheck: [func(c echo.Context) error] -> [error] - Health check endpoint handler (implied by route registration)\nhandleMessages: [func(c echo.Context) error] -> [error] - Messages endpoint handler (implied by route registration)\nhandleStream: [func(c echo.Context) error] -> [error] - Stream endpoint handler (implied by route registration)\nhandlePostMessage: [func(c echo.Context) error] -> [error] - Message posting endpoint handler (implied by route registration)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/olahol/melody\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype API struct {\n\tMessages ring.Ring\n\tsync.RWMutex\n\t*bridge.Config\n\tmrouter *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\tb := &API{Config: cfg}\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\n\tb.mrouter = melody.New()\n\tb.mrouter.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tmessage := config.Message{}\n\t\terr := json.Unmarshal(msg, &message)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to decode message from byte[] '%s'\", string(msg))\n\t\t\treturn\n\t\t}\n\t\tb.handleWebsocketMessage(message, s)\n\t})\n\tb.mrouter.HandleConnect(func(session *melody.Session) {\n\t\tgreet := b.getGreeting()\n\t\tdata, err := json.Marshal(greet)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to encode message '%v'\", greet)\n\t\t\treturn\n\t\t}\n\t\terr = session.Write(data)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to write message '%s'\", string(data))\n\t\t\treturn\n\t\t}\n\t})\n\n\tb.Messages = ring.Ring{}\n\tif b.GetInt(\"Buffer\") != 0 {\n\t\tb.Messages.SetCapacity(b.GetInt(\"Buffer\"))\n\t}\n\tif b.GetString(\"Token\") != \"\" {\n\t\te.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == b.GetString(\"Token\"), nil\n\t\t}))\n\t}\n\n\te.GET(\"/api/health\", b.handleHealthcheck)\n\te.GET(\"/api/messages\", b.handleMessages)\n\te.GET(\"/api/stream\", b.handleStream)\n\te.GET(\"/api/websocket\", b.handleWebsocket)\n\te.POST(\"/api/message\", b.handlePostMessage)\n\tgo func() {\n\t\tif b.GetString(\"BindAddress\") == \"\" {\n\t\t\tb.Log.Fatalf(\"No BindAddress configured.\")\n\t\t}\n\t\tb.Log.Infof(\"Listening on %s\", b.GetString(\"BindAddress\"))\n\t\tb.Log.Fatal(e.Start(b.GetString(\"BindAddress\")))\n\t}()\n\treturn b\n}\n\nfunc (b *API) handleWebsocketMessage(message config.Message, s *melody.Session) {\n\tmessage.Channel = \"api\"\n\tmessage.Protocol = \"api\"\n\tmessage.Account = b.Account\n\tmessage.ID = \"\"\n\tmessage.Timestamp = time.Now()\n\n\tdata, err := json.Marshal(message)\n\tif err != nil {\n\t\tb.Log.Errorf(\"failed to encode message for loopback '%v'\", message)\n\t\treturn\n\t}\n\t_ = b.mrouter.BroadcastOthers(data, s)\n\n\tb.Log.Debugf(\"Sending websocket message from %s on %s to gateway\", message.Username, \"api\")\n\tb.Remote <- message\n}\n\nfunc (b *API) handleWebsocket(c echo.Context) error {\n\terr := b.mrouter.HandleRequest(c.Response(), c.Request())\n\tif err != nil {\n\t\tb.Log.Errorf(\"error in websocket handling  '%v'\", err)\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/gorilla/ring\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/olahol/melody\"\n\t\"github.com/pkg/errors\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype API struct {\n\tMessages *ring.Ring\n\tRWMutex  sync.RWMutex\n\tConfig   *bridge.Config\n\tmrouter  *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\tapi := &API{\n\t\tMessages: ring.New(cfg.MessageCapacity),\n\t\tConfig:   cfg,\n\t\tmrouter:  melody.New(),\n\t}\n\n\te := echo.New()\n\n\t// Set up WebSocket message handler\n\tapi.mrouter.MessageHandler = func(ns *melody.Session, msg []byte) {\n\t\tvar message config.Message\n\t\tif err := json.Unmarshal(msg, &message); err != nil {\n\t\t\treturn\n\t\t}\n\t\tapi.handleWebsocketMessage(message, ns)\n\t}\n\n\t// Routes\n\te.GET(\"/ws\", api.handleWebsocket)\n\te.GET(\"/health\", api.handleHealthcheck)\n\te.GET(\"/messages\", api.handleMessages)\n\te.POST(\"/message\", api.handlePostMessage)\n\te.GET(\"/stream\", api.handleStream)\n\n\t// Optional authentication middleware\n\tif cfg.AuthEnabled {\n\t\tauthMiddleware := func(c echo.Context, u, p string) (bool, error) {\n\t\t\treturn u == cfg.AuthUser && p == cfg.AuthPass, nil\n\t\t}\n\t\te.Use(echo.BasicAuth(authMiddleware))\n\t}\n\n\tgo func() {\n\t\tif err := e.Start(\":\" + cfg.Port); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn api\n}\n\nfunc (a *API) handleWebsocketMessage(message config.Message, s *melody.Session) {\n\ta.RWMutex.Lock()\n\tdefer a.RMutex.Unlock()\n\n\ta.Messages.Value = message\n\ta.Messages = a.Messages.Next()\n\n\t// Send to remote channel if configured\n\tif a.Config.RemoteChan != nil {\n\t\ta.Config.RemoteChan <- message\n\t}\n\n\t// Broadcast to connected clients\n\ta.mrouter.BroadcastJSON(message)\n}\n\nfunc (a *API) handleWebsocket(c echo.Context) error {\n\treturn a.mrouter.HandleRequest(c.Response(), c.Request())\n}\n\nfunc (a *API) handleHealthcheck(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"status\": \"healthy\"})\n}\n\nfunc (a *API) handleMessages(c echo.Context) error {\n\ta.RWMutex.RLock()\n\tdefer a.RWMutex.RUnlock()\n\n\tvar messages []config.Message\n\tcurrent := a.Messages\n\tfor i := 0; i < a.Messages.Len(); i++ {\n\t\tif msg, ok := current.Value.(config.Message); ok {\n\t\t\tmessages = append(messages, msg)\n\t\t}\n\t\tcurrent = current.Next()\n\t}\n\n\treturn c.JSON(http.StatusOK, messages)\n}\n\nfunc (a *API) handlePostMessage(c echo.Context) error {\n\tvar message config.Message\n\tif err := c.Bind(&message); err != nil {\n\t\treturn echo.NewHTTPError(http.StatusBadRequest, err.Error())\n\t}\n\n\ta.RWMutex.Lock()\n\ta.Messages.Value = message\n\ta.Messages = a.Messages.Next()\n\ta.RWMutex.Unlock()\n\n\ta.mrouter.BroadcastJSON(message)\n\treturn c.JSON(http.StatusCreated, message)\n}\n\nfunc (a *API) handleStream(c echo.Context) error {\n\t// Implement streaming logic if needed\n\treturn c.Stream(http.StatusOK, \"text/event-stream\", nil)\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Implement an HTTP server using the Echo framework in Go that handles workflow-related requests with authentication and specific route handlers.\n\nFunction Description: The function `startWorkflowServer` initializes and starts an HTTP server using the Echo framework. It sets up middleware for authentication, defines route handlers for specific endpoints (`/secrets` and `/trigger`), and starts the server on the specified host and port. The server validates incoming requests using a predefined workflow key and performs specific actions based on the route.\n\nInput:  \n- `host` (string): The host address on which the server will listen.  \n- `port` (uint64): The port number on which the server will listen.  \n\nOutput:  \n- None (The function starts an HTTP server and blocks indefinitely unless an error occurs).  \n\nNote: The function uses global variables (`workflowKey`, `builderKey`, `secretsHit`, `triggerHit`, etc.) and external configurations (`config.Current.File.ServerUrl`), which should be defined elsewhere in the code.  \n\n(Strictly followed the format requirements without inserting irrelevant characters.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/rs/zerolog/log\"\n\t\"github.com/ziflex/lecho/v2\"\n)\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\tlogger := lecho.From(log.Logger)\n\te.Logger = logger\n\te.Use(lecho.Middleware(lecho.Config{Logger: logger})\n\n\tkeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == workflowKey, nil\n\t})\n\n\teg := e.Group(\"\", keyAuth)\n\n\teg.POST(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit = true\n\t\tparams, err := c.FormParams()\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tfor key, val := range params {\n\t\t\tswitch key {\n\t\t\tcase \"SECRET_KEY\":\n\t\t\t\tif val[0] != builderKey {\n\t\t\t\t\tlog.Fatal().Msg(\"bad key\")\n\t\t\t\t}\n\t\t\tcase \"SECRET_URL\":\n\t\t\t\tif val[0] != config.Current.File.ServerUrl {\n\t\t\t\t\tlog.Fatal().Msg(\"bad url\")\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tlog.Fatal().Msg(\"unknown secret\")\n\t\t\t}\n\t\t}\n\t\treturn c.NoContent(200)\n\t})\n\n\teg.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit = true\n\t\treturn c.NoContent(200)\n\t})\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tkey := c.Request().Header.Get(\"Workflow-Key\")\n\t\t\tif key != workflowKey {\n\t\t\t\treturn c.String(http.StatusUnauthorized, \"Unauthorized\")\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\te.GET(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit++\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"builder_key\": builderKey})\n\t})\n\n\te.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit++\n\t\treturn c.NoContent(http.StatusOK)\n\t})\n\n\taddr := host + \":\" + strconv.FormatUint(port, 10)\n\te.Logger.Fatal(e.Start(addr))\n}\n```"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user authentication with JWT tokens. The server should have routes for login, accessible content, and restricted content that requires JWT authentication.\n\nFunction Description: The main function initializes an Echo server, configures middleware for logging and recovery, sets up route handlers for login and accessible content, and creates a restricted route group that requires JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger its handlers)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately but are referenced in this main function. The JWT configuration uses a custom claims structure (jwtCustomClaims) which should also be defined elsewhere.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tconfig := middleware.JWTConfig{\n\t\tClaims:     &jwtCustomClaims{},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\tr.Use(middleware.JWTWithConfig(config))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype jwtCustomClaims struct {\n\tjwt.StandardClaims\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\tconfig := middleware.JWTConfig{\n\t\tNewClaimsFunc: func(c echo.Context) jwt.Claims {\n\t\t\treturn new(jwtCustomClaims)\n\t\t},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\n\te.POST(\"/login\", func(c echo.Context) error {\n\t\tclaims := &jwtCustomClaims{\n\t\t\tStandardClaims: jwt.StandardClaims{\n\t\t\t\tExpiresAt: jwt.At(time.Now().Add(time.Hour * 72).Unix()),\n\t\t\t\tIssuer:    \"test\",\n\t\t\t\tAudience:  \"users\",\n\t\t\t},\n\t\t}\n\t\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\t\tsignedToken, _ := token.SignedString([]byte(\"secret\"))\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"token\": signedToken})\n\t})\n\n\te.GET(\"/accessible\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Accessible\")\n\t})\n\n\trestricted := e.Group(\"/restricted\")\n\trestricted.Use(middleware.JWTWithConfig(config))\n\trestricted.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Restricted\")\n\t})\n\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various API endpoints for a Vault management system, including authentication, token management, secret management, and more.\n\nFunction Description: The StartListener function initializes and starts an Echo HTTP server with configured routes and middleware. It sets up various API endpoints for Vault operations, applies middleware for logging, recovery, and request handling, and serves static assets if provided. The server can be started with or without TLS based on configuration.\n\nInput:\n- listener: config.ListenerConfig - Configuration for the server listener including address and TLS settings\n- assets: *rice.Box - Optional box containing static assets to be served by the server\n\nOutput: None (the function starts the server which runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\t\"log\"\n\n\t\"github.com/caiyeon/goldfish/config\"\n\t\"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\te        *echo.Echo\n)\n\nfunc StartListener(listener config.ListenerConfig, assets *rice.Box) {\n\te = echo.New()\n\te.HideBanner = true\n\te.Server.ReadTimeout = 10 * time.Second\n\te.Server.WriteTimeout = 2 * time.Minute\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.BodyLimit(\"32M\"))\n\te.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n\t\tLevel: 5,\n\t}))\n\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tc.Response().Header().Set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\")\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\tif assets != nil {\n\t\tassetHandler := http.FileServer(assets.HTTPBox())\n\t\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\t\te.GET(\"/assets/css/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/js/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/fonts/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/img/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t}\n\n\te.GET(\"/v1/health\", handlers.Health())\n\te.GET(\"/v1/vaulthealth\", handlers.VaultHealth())\n\te.POST(\"/v1/bootstrap\", handlers.Bootstrap())\n\n\te.POST(\"/v1/login\", handlers.Login())\n\te.POST(\"/v1/login/renew-self\", handlers.RenewSelf())\n\n\te.GET(\"/v1/token/accessors\", handlers.GetTokenAccessors())\n\te.POST(\"/v1/token/lookup-accessor\", handlers.LookupTokenByAccessor())\n\te.POST(\"/v1/token/revoke-accessor\", handlers.RevokeTokenByAccessor())\n\te.POST(\"/v1/token/revoke-self\", handlers.RevokeSelf())\n\te.POST(\"/v1/token/create\", handlers.CreateToken())\n\te.GET(\"/v1/token/listroles\", handlers.ListRoles())\n\te.GET(\"/v1/token/role\", handlers.GetRole())\n\n\te.GET(\"/v1/userpass/users\", handlers.GetUserpassUsers())\n\te.POST(\"/v1/userpass/delete\", handlers.DeleteUserpassUser())\n\n\te.GET(\"/v1/approle/roles\", handlers.GetApproleRoles())\n\te.POST(\"/v1/approle/delete\", handlers.DeleteApproleRole())\n\n\te.GET(\"/v1/ldap/groups\", handlers.GetLDAPGroups())\n\te.GET(\"/v1/ldap/users\", handlers.GetLDAPUsers())\n\n\te.GET(\"/v1/policy\", handlers.GetPolicy())\n\te.DELETE(\"/v1/policy\", handlers.DeletePolicy())\n\te.GET(\"/v1/policy-capabilities\", handlers.PolicyCapabilities())\n\n\te.GET(\"/v1/request\", handlers.GetRequest())\n\te.POST(\"/v1/request/add\", handlers.AddRequest())\n\te.POST(\"/v1/request/approve\", handlers.ApproveRequest())\n\te.DELETE(\"/v1/request/reject\", handlers.RejectRequest())\n\n\te.GET(\"/v1/transit\", handlers.TransitInfo())\n\te.POST(\"/v1/transit/encrypt\", handlers.EncryptString())\n\te.POST(\"/v1/transit/decrypt\", handlers.DecryptString())\n\n\te.GET(\"/v1/mount\", handlers.GetMount())\n\te.POST(\"/v1/mount\", handlers.ConfigMount())\n\n\te.GET(\"/v1/secrets\", handlers.GetSecrets())\n\te.POST(\"/v1/secrets\", handlers.PostSecrets())\n\te.DELETE(\"/v1/secrets\", handlers.DeleteSecrets())\n\n\te.GET(\"/v1/bulletins\", handlers.GetBulletins())\n\n\te.POST(\"/v1/wrapping/wrap\", handlers.WrapHandler())\n\te.POST(\"/v1/wrapping/unwrap\", handlers.UnwrapHandler())\n\n\tif listener.Tls_disable {\n\t\te.Logger.Fatal(e.Start(listener.Address))\n\t\treturn\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/GeertJohan/go.rice\"\n)\n\nfunc StartListener(listener config.ListenerConfig, assets *rice.Box) {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.RequestID())\n\n\te.POST(\"/auth/login\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\te.POST(\"/auth/register\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\n\te.POST(\"/tokens/renew\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\te.POST(\"/tokens/revoke\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\n\te.POST(\"/secrets/store\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\te.GET(\"/secrets/:name\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\te.DELETE(\"/secrets/:name\", func(c echo.Context) error {\n\t\treturn c.NoContent(200)\n\t})\n\n\tif assets != nil {\n\t\te.GET(\"/assets/*\", echo.WrapHandler(assets.HTTPHandler()))\n\t}\n\n\tgo func() {\n\t\tif listener.TLS != nil {\n\t\t\tif err := e.StartTLS(listener.Address, listener.TLS.CertFile, listener.TLS.KeyFile); err != nil && !echo.IsErrServerClosed(err) {\n\t\t\t\te.Logger.Fatal(err)\n\t\t\t}\n\t\t} else {\n\t\t\tif err := e.Start(listener.Address); err != nil && !echo.IsErrServerClosed(err) {\n\t\t\t\te.Logger.Fatal(err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\t<-quit\n\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tif err := e.Shutdown(ctx); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user-related requests with CORS support and logging middleware.\n\nFunction Description: The main function initializes an Echo server instance, configures middleware (logger, recovery, and CORS), sets up route handlers, and starts the server on port 1323.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handler function `getUsers` would need to be implemented separately to handle the GET request to \"/api/users\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n\t\tAllowMethods: []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"*\"},\n\t\tAllowMethods: []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodDelete},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Start(\":1323\")\n}\n\nfunc getUsers(c echo.Context) error {\n\t// Implementation to be provided separately\n\treturn c.String(http.StatusOK, \"Users endpoint\")\n}"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that includes rate limiting middleware using Sentinel, with custom resource extraction and block fallback handlers.\n\nFunction Description: The function sets up a Fiber web server with Sentinel middleware for rate limiting. The middleware extracts the client's real IP from headers as the resource key and provides a custom JSON response when requests are blocked. The server listens on port 8080 and includes a test endpoint.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import \"github.com/gofiber/fiber/v2\"\n\nfunc Example() {\n\tapp := fiber.New()\n\tapp.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx *fiber.Ctx) string {\n\t\t\t\treturn ctx.GetReqHeaders()[\"X-Real-IP\"]\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx *fiber.Ctx) error {\n\t\t\t\treturn ctx.Status(400).JSON(struct {\n\t\t\t\t\tError string `json:\"error\"`\n\t\t\t\t\tCode  int    `json:\"code\"`\n\t\t\t\t}{\n\t\t\t\t\t\"too many request; the quota used up\",\n\t\t\t\t\t10222,\n\t\t\t\t})\n\t\t\t})),\n\t)\n\n\tapp.Get(\"/test\", func(ctx *fiber.Ctx) error { return nil })\n\t_ = app.Listen(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\n\t\"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/api/flow\"\n\t\"github.com/alibaba/sentinel-golang/ext/http/fiber\"\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc main() {\n\tif err := api.InitDefault(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\trule, err := flow.NewRule(\"ip:127.0.0.1\").\n\t\tWithTokenBucket(true).\n\t\tWithIntervalInSec(1).\n\t\tWithBurstCapacity(2).\n\t\tWithCount(1)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = flow.LoadRules([]*flow.Rule{rule}); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tapp := fiber.New()\n\n\tresourceExtractor := func(c *fiber.Ctx) string {\n\t\tip := c.Get(\"X-Forwarded-For\")\n\t\tif ip == \"\" {\n\t\t\tip = c.Get(\"X-Real-IP\")\n\t\t}\n\t\tif ip == \"\" {\n\t\t\tip = c.IP()\n\t\t}\n\t\treturn \"ip:\" + ip\n\t}\n\n\tblockHandler := func(c *fiber.Ctx, err error) error {\n\t\treturn c.Status(429).JSON(fiber.Map{\n\t\t\t\"error\":   \"Rate limit exceeded\",\n\t\t\t\"message\": \"Too many requests, please try again later.\",\n\t\t})\n\t}\n\n\tapp.Use(fiber.SentinelMiddleware(\n\t\tfiber.WithResourceExtractor(resourceExtractor),\n\t\tfiber.WithBlockHandler(blockHandler),\n\t))\n\n\tapp.Get(\"/test\", func(c *fiber.Ctx) error {\n\t\treturn c.JSON(fiber.Map{\"message\": \"OK\"})\n\t})\n\n\tlog.Println(\"Server started on :8080\")\n\tapp.Listen(\":8080\")\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that handles health checks and image conversion requests.\n\nFunction Description: The main function initializes and configures a Fiber HTTP server, sets up middleware for ETag generation, defines route handlers for health checks and image conversion, and starts the server on a specified host and port.\n\nInput:\n- Configuration parameters (host, port, read buffer size, concurrency, keepalive settings) are read from the config.Config object\n- No direct input parameters to the main function itself\n\nOutput:\n- Running HTTP server that listens on specified address\n- Console output indicating server status\n- Potential fatal error if server fails to start\n\nThe function performs these key operations:\n1. Initializes Fiber app with custom configuration\n2. Adds ETag middleware\n3. Registers route handlers:\n   - /healthz endpoint for health checks\n   - /* catch-all endpoint for image conversion\n4. Starts the server and handles startup errors",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"webp_server_go/config\"\n\t\"webp_server_go/handler\"\n)\n\nvar app = fiber.New(fiber.Config{\n\tServerHeader:          \"WebP Server Go\",\n\tAppName:               \"WebP Server Go\",\n\tDisableStartupMessage: true,\n\tProxyHeader:           \"X-Real-IP\",\n\tReadBufferSize:        config.Config.ReadBufferSize,\n\tConcurrency:           config.Config.Concurrency,\n\tDisableKeepalive:      config.Config.DisableKeepalive,\n})\n\nfunc main() {\n\tapp.Use(etag.New(etag.Config{\n\t\tWeak: true,\n\t}))\n\n\tlistenAddress := config.Config.Host + \":\" + config.Config.Port\n\n\tapp.Get(\"/healthz\", handler.Healthz)\n\tapp.Get(\"/*\", handler.Convert)\n\n\tfmt.Println(\"WebP Server Go is Running on http://\" + listenAddress)\n\n\tbindErr := app.Listen(listenAddress)\n\tif bindErr != nil {\n\t\tlog.Fatal(\"Error starting server: \", bindErr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/gofiber/fiber/v2\"\n    \"github.com/gofiber/fiber/v2/middleware/etag\"\n    \"github.com/yourusername/config\"\n)\n\nfunc main() {\n    app := fiber.New(fiber.Config{\n        ReadBufferSize:  config.Config.ReadBufferSize,\n        Concurrency:     config.Config.Concurrency,\n        EnableKeepAlives: config.Config.Keepalive,\n    })\n\n    app.Use(etag.New())\n\n    app.Get(\"/healthz\", func(c *fiber.Ctx) error {\n        return c.SendStatus(fiber.StatusOK)\n    })\n\n    app.Use(\"*\", func(c *fiber.Ctx) error {\n        // Image conversion logic implementation required\n        return c.SendStatus(fiber.StatusOK)\n    })\n\n    address := fmt.Sprintf(\"%s:%d\", config.Config.Host, config.Config.Port)\n    if err := app.Listen(address); err != nil {\n        log.Fatal(err)\n    }\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go for a dashboard application that manages queues and tenants, with optional basic authentication and template rendering capabilities.\n\nStruct Description: The Dashboard struct represents a web dashboard that provides queue management functionality through HTTP endpoints. It uses the Fiber framework for routing and middleware, supports HTML template rendering, and can be configured with basic authentication.\n\nFields:\n\nApp: *fiber.App - The Fiber application instance for handling HTTP requests\nqueue: models.Queue - Interface for queue operations\ntenantManager: models.TenantManager - Interface for tenant management operations\ncfg: config.DashboardConfig - Configuration settings for the dashboard\n\nMethods:\n\nNewDashboard: (queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) -> *Dashboard - Initializes a new Dashboard instance with the given dependencies and configuration, sets up template engine, basic auth middleware, and route handlers\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nQueues: (c *fiber.Ctx) -> error - Handler for GET / route\nNewQueue: (c *fiber.Ctx) -> error - Handler for POST /queues route\nQueue: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue route\nQueueSettings: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/settings route\nSaveQueueSettings: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/settings route\nDeleteQueueConfirm: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/delete route\nDeleteQueue: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/delete route\nMessage: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/messages/:message route",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"github.com/gofiber/template/html/v2\"\n)\n\ntype Dashboard struct {\n\tApp *fiber.App\n\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tvar engine *html.Engine\n\n\tif cfg.Dev {\n\t\tengine = html.New(\"./dashboard/views\", \".html\")\n\t\tengine.Reload(true)\n\t\tengine.Debug(true)\n\t} else {\n\t\thttp.FS(viewsfs)\n\t\tfs2, err := fs.Sub(viewsfs, \"views\")\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tengine = html.NewFileSystem(http.FS(fs2), \".html\")\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tViews:                 engine,\n\t\tDisableStartupMessage: true,\n\t})\n\n\tif cfg.User != \"\" && cfg.Pass != \"\" {\n\t\tapp.Use(basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.User: cfg.Pass,\n\t\t\t},\n\t\t}))\n\t}\n\n\td := &Dashboard{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp.Get(\"/\", d.Queues)\n\tapp.Post(\"/queues\", d.NewQueue)\n\tapp.Get(\"/queues/:queue\", d.Queue)\n\tapp.Get(\"/queues/:queue/settings\", d.QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", d.SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", d.DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", d.DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", d.Message)\n\n\treturn d\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"Dashboard: http://localhost:%d\\n\", d.cfg.Port)\n\treturn d.App.Listen(fmt.Sprintf(\":%d\", d.cfg.Port))\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif d.cfg.Enabled {\n\t\treturn d.App.Shutdown()\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"text/template\"\n)\n\ntype Dashboard struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\tcfg           config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tapp := fiber.New()\n\n\tif cfg.Templates != \"\" {\n\t\tapp.Settings.Views = fiber.Views{\n\t\t\tEngine: template.Must(template.ParseGlob(cfg.Templates)),\n\t\t}\n\t}\n\n\tif cfg.BasicAuthUser != \"\" && cfg.BasicAuthPassword != \"\" {\n\t\tapp.Use(basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.BasicAuthUser: cfg.BasicAuthPassword,\n\t\t\t},\n\t\t}))\n\t}\n\n\td := &Dashboard{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn d.Queues(c)\n\t})\n\tapp.Post(\"/queues\", func(c *fiber.Ctx) error {\n\t\treturn d.NewQueue(c)\n\t})\n\tapp.Get(\"/queues/:queue\", func(c *fiber.Ctx) error {\n\t\treturn d.Queue(c)\n\t})\n\tapp.Get(\"/queues/:queue/settings\", func(c *fiber.Ctx) error {\n\t\treturn d.QueueSettings(c)\n\t})\n\tapp.Post(\"/queues/:queue/settings\", func(c *fiber.Ctx) error {\n\t\treturn d.SaveQueueSettings(c)\n\t})\n\tapp.Get(\"/queues/:queue/delete\", func(c *fiber.Ctx) error {\n\t\treturn d.DeleteQueueConfirm(c)\n\t})\n\tapp.Post(\"/queues/:queue/delete\", func(c *fiber.Ctx) error {\n\t\treturn d.DeleteQueue(c)\n\t})\n\tapp.Get(\"/queues/:queue/messages/:message\", func(c *fiber.Ctx) error {\n\t\treturn d.Message(c)\n\t})\n\n\treturn d\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn d.App.Listen(d.cfg.Address)\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn d.App.Shutdown()\n}\n\nfunc (d *Dashboard) Queues(c *fiber.Ctx) error {\n\tqueues, err := d.queue.List()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.Render(\"queues\", fiber.Map{\"Queues\": queues})\n}\n\nfunc (d *Dashboard) NewQueue(c *fiber.Ctx) error {\n\tname := c.FormValue(\"name\")\n\tif err := d.queue.Create(name); err != nil {\n\t\treturn err\n\t}\n\treturn c.Redirect(\"/queues/\" + name)\n}\n\nfunc (d *Dashboard) Queue(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tqueue, err := d.queue.Get(queueName)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.Render(\"queue\", fiber.Map{\"Queue\": queue})\n}\n\nfunc (d *Dashboard) QueueSettings(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tqueue, err := d.queue.Get(queueName)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.Render(\"queue_settings\", fiber.Map{\"Queue\": queue})\n}\n\nfunc (d *Dashboard) SaveQueueSettings(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tsettings := c.FormValue(\"settings\")\n\tif err := d.queue.UpdateSettings(queueName, settings); err != nil {\n\t\treturn err\n\t}\n\treturn c.Redirect(\"/queues/\" + queueName)\n}\n\nfunc (d *Dashboard) DeleteQueueConfirm(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\treturn c.Render(\"delete_queue_confirm\", fiber.Map{\"QueueName\": queueName})\n}\n\nfunc (d *Dashboard) DeleteQueue(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tif err := d.queue.Delete(queueName); err != nil {\n\t\treturn err\n\t}\n\treturn c.Redirect(\"/\")\n}\n\nfunc (d *Dashboard) Message(c *fiber.Ctx) error {\n\tqueueName := c.Params(\"queue\")\n\tmessageID := c.Params(\"message\")\n\tmessage, err := d.queue.GetMessage(queueName, messageID)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.Render(\"message\", fiber.Map{\"Message\": message})\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that initializes and runs a Fiber-based HTTP server with specific routes for job management, while also starting a background engine process.\n\nFunction Description: The function `Run` initializes a Fiber web server with disabled startup messages, sets up three routes for job management (creating new jobs, checking job status, and retrieving jobs), starts a background engine process in a goroutine, and finally starts listening on a specified host and port.\n\nInput: None (uses package-level constants Host and Port for server configuration)\n\nOutput: None (runs indefinitely as a web server, but technically returns an error if the server fails to start)\n\nNote: The function uses package-level constants Host and Port for server configuration and assumes the existence of handler functions NewJob, GetStatus, and GetJob, as well as an Engine function for background processing.",
    "Canonical_solution": "import (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs/\", NewJob)\n\tapp.Get(\"/jobs/status/:id\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\tapp.Listen(Host + \":\" + Port)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "```go\npackage main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() error {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\tapp.Post(\"/jobs\", NewJob)\n\tapp.Get(\"/jobs/:id/status\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\tgo Engine()\n\treturn app.Listen(Host + \":\" + Port)\n}\n```"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Implement a Fiber-based HTTP server in Go that handles Amazon SQS (Simple Queue Service) API requests, including authentication, routing, and various SQS operations.\n\nStruct Description: The SQS struct represents an HTTP server that processes Amazon SQS API requests. It uses Fiber framework for HTTP handling and includes queue management functionality with tenant isolation.\n\nFields:\n\nApp: *fiber.App - Fiber application instance for HTTP server\nqueue: models.Queue - Queue management interface\ntenantManager: models.TenantManager - Tenant management interface\ncfg: config.SQSConfig - Configuration for the SQS server\n\nMethods:\n\nNewSQS: (queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) -> *SQS - Constructor that initializes the SQS server with dependencies and configuration\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nAction: (c *fiber.Ctx) -> error - Main request handler that routes SQS API requests based on X-Amz-Target header\nSendMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessage SQS operation\nSendMessageBatch: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessageBatch SQS operation\nReceiveMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles ReceiveMessage SQS operation\nDeleteMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles DeleteMessage SQS operation\nListQueues: (c *fiber.Ctx, tenantId int64) -> error - Handles ListQueues SQS operation\nGetQueueURL: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueUrl SQS operation\nCreateQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles CreateQueue SQS operation\nGetQueueAttributes: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueAttributes SQS operation\nPurgeQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles PurgeQueue SQS operation\nChangeMessageVisibility: (c *fiber.Ctx, tenantId int64) -> error - Handles ChangeMessageVisibility SQS operation\nerrorHandler: (ctx *fiber.Ctx, err error) -> error - Custom error handler for the Fiber app\nauthMiddleware: (c *fiber.Ctx) -> error - Authentication middleware for tenant validation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/valyala/fasthttp/fasthttpadaptor\"\n)\n\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\ts := &SQS{\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t\tErrorHandler:          s.errorHandler,\n\t\tBodyLimit:             cfg.MaxRequestSize,\n\t})\n\n\tapp.Use(s.authMiddleware)\n\tapp.Post(\"/*\", s.Action)\n\n\ts.App = app\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"SQS Endpoint: http://localhost:%d\\n\", s.cfg.Port)\n\treturn s.App.Listen(fmt.Sprintf(\":%d\", s.cfg.Port))\n}\n\nfunc (s *SQS) Stop() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\tawsMethodHeader, ok := c.GetReqHeaders()[\"X-Amz-Target\"]\n\tif !ok {\n\t\treturn errors.New(\"X-Amz-Target header not found\")\n\t}\n\tawsMethod := awsMethodHeader[0]\n\n\tvar r *http.Request = &http.Request{}\n\tfasthttpadaptor.ConvertRequest(c.Context(), r, false)\n\n\ttenantId := c.Locals(\"tenantId\").(int64)\n\n\tvar rc error\n\tswitch awsMethod {\n\tcase \"AmazonSQS.SendMessage\":\n\t\trc = s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\trc = s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\trc = s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\trc = s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\trc = s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\trc = s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\trc = s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\trc = s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\trc = s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\trc = s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\trc = NewSQSError(400, \"UnsupportedOperation\", fmt.Sprintf(\"SQS method %s not implemented\", awsMethod))\n\t}\n\n\treturn rc\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"github.com/gofiber/fiber/v2\"\n)\n\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\tcfg           config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\tapp := fiber.New(fiber.Config{\n\t\tErrorHandler: func(c *fiber.Ctx, err error) error {\n\t\t\treturn (&SQS{App: c.App(), queue: queue, tenantManager: tenantManager, cfg: cfg}).errorHandler(c, err)\n\t\t},\n\t})\n\ts := &SQS{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\tapp.Post(\"/\", s.authMiddleware, s.Action)\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Listen(s.cfg.Address)\n}\n\nfunc (s *SQS) Stop() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\treturn s.App.Shutdown()\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\ttarget := c.Get(\"X-Amz-Target\")\n\tif target == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\tparts := strings.Split(target, \".\")\n\tif len(parts) != 2 || parts[0] != \"AmazonSQS\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\taction := parts[1]\n\ttenantID := c.Locals(\"tenantId\").(int64)\n\tswitch action {\n\tcase \"SendMessage\":\n\t\treturn s.SendMessage(c, tenantID)\n\tcase \"SendMessageBatch\":\n\t\treturn s.SendMessageBatch(c, tenantID)\n\tcase \"ReceiveMessage\":\n\t\treturn s.ReceiveMessage(c, tenantID)\n\tcase \"DeleteMessage\":\n\t\treturn s.DeleteMessage(c, tenantID)\n\tcase \"ListQueues\":\n\t\treturn s.ListQueues(c, tenantID)\n\tcase \"GetQueueUrl\":\n\t\treturn s.GetQueueURL(c, tenantID)\n\tcase \"CreateQueue\":\n\t\treturn s.CreateQueue(c, tenantID)\n\tcase \"GetQueueAttributes\":\n\t\treturn s.GetQueueAttributes(c, tenantID)\n\tcase \"PurgeQueue\":\n\t\treturn s.PurgeQueue(c, tenantID)\n\tcase \"ChangeMessageVisibility\":\n\t\treturn s.ChangeMessageVisibility(c, tenantID)\n\tdefault:\n\t\treturn fiber.ErrMethodNotAllowed\n\t}\n}\n\nfunc (s *SQS) SendMessage(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\tmessageBody := c.FormValue(\"MessageBody\")\n\tif queueURL == \"\" || messageBody == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\tmessageID, err := s.queue.AddMessage(queueURL, messageBody)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(fmt.Sprintf(\"<SendMessageResponse><MessageId>%s</MessageId></SendMessageResponse>\", messageID))\n}\n\nfunc (s *SQS) SendMessageBatch(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\tentries := c.FormValue(\"Entries\")\n\tif queueURL == \"\" || entries == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\t_, err = s.queue.AddMessages(queueURL, entries)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(\"<SendMessageBatchResponse/>\")\n}\n\nfunc (s *SQS) ReceiveMessage(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\tif queueURL == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\tmessages, err := s.queue.ReceiveMessages(queueURL)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(fmt.Sprintf(\"<ReceiveMessageResponse>%s</ReceiveMessageResponse>\", messages))\n}\n\nfunc (s *SQS) DeleteMessage(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\treceiptHandle := c.FormValue(\"ReceiptHandle\")\n\tif queueURL == \"\" || receiptHandle == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\terr = s.queue.DeleteMessage(queueURL, receiptHandle)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(\"<DeleteMessageResponse/>\")\n}\n\nfunc (s *SQS) ListQueues(c *fiber.Ctx, tenantID int64) error {\n\tqueues, err := s.tenantManager.ListQueues(tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(fmt.Sprintf(\"<ListQueuesResponse>%s</ListQueuesResponse>\", queues))\n}\n\nfunc (s *SQS) GetQueueURL(c *fiber.Ctx, tenantID int64) error {\n\tqueueName := c.FormValue(\"QueueName\")\n\tif queueName == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\turl, err := s.tenantManager.GetQueueURL(tenantID, queueName)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(fmt.Sprintf(\"<GetQueueUrlResponse><QueueUrl>%s</QueueUrl></GetQueueUrlResponse>\", url))\n}\n\nfunc (s *SQS) CreateQueue(c *fiber.Ctx, tenantID int64) error {\n\tqueueName := c.FormValue(\"QueueName\")\n\tif queueName == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\turl, err := s.tenantManager.CreateQueue(tenantID, queueName)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(fmt.Sprintf(\"<CreateQueueResponse><QueueUrl>%s</QueueUrl></CreateQueueResponse>\", url))\n}\n\nfunc (s *SQS) GetQueueAttributes(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\tattributeName := c.FormValue(\"AttributeName\")\n\tif queueURL == \"\" || attributeName == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\tattributes, err := s.queue.GetQueueAttributes(queueURL, attributeName)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(fmt.Sprintf(\"<GetQueueAttributesResponse>%s</GetQueueAttributesResponse>\", attributes))\n}\n\nfunc (s *SQS) PurgeQueue(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\tif queueURL == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\terr = s.queue.PurgeQueue(queueURL)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(\"<PurgeQueueResponse/>\")\n}\n\nfunc (s *SQS) ChangeMessageVisibility(c *fiber.Ctx, tenantID int64) error {\n\tqueueURL := c.FormValue(\"QueueUrl\")\n\treceiptHandle := c.FormValue(\"ReceiptHandle\")\n\tvisibilityTimeout := c.FormValue(\"VisibilityTimeout\")\n\tif queueURL == \"\" || receiptHandle == \"\" || visibilityTimeout == \"\" {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.QueueBelongsToTenant(queueURL, tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\ttimeout, _ := strconv.Atoi(visibilityTimeout)\n\terr = s.queue.ChangeMessageVisibility(queueURL, receiptHandle, timeout)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn c.SendString(\"<ChangeMessageVisibilityResponse/>\")\n}\n\nfunc (s *SQS) errorHandler(c *fiber.Ctx, err error) error {\n\ts.cfg.Logger.Error(err)\n\tcode := fiber.StatusInternalServerError\n\tif e, ok := err.(*fiber.Error); ok {\n\t\tcode = e.Code\n\t}\n\terrResp := fmt.Sprintf(\"<ErrorResponse><Error><Type>Sender</Type><Code>%d</Code><Message>%s</Message></Error></ErrorResponse>\", code, err.Error())\n\treturn c.Status(code).SendString(errResp)\n}\n\nfunc (s *SQS) authMiddleware(c *fiber.Ctx) error {\n\ttenantIDStr := c.Get(\"X-Tenant-ID\")\n\ttenantID, err := strconv.ParseInt(tenantIDStr, 10, 64)\n\tif err != nil {\n\t\treturn fiber.ErrBadRequest\n\t}\n\texists, err := s.tenantManager.TenantExists(tenantID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !exists {\n\t\treturn fiber.ErrForbidden\n\t}\n\tc.Locals(\"tenantId\", tenantID)\n\treturn c.Next()\n}\n```"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with configurable settings including middleware, routes, and TLS support.\n\nFunction Description: The function serves as the entry point for starting a Gin-based HTTP server. It initializes the Gin engine with default middleware (Logger and Recovery) and additional custom middleware (CORS, Correlation, Auth, etc.). It registers various route handlers for different endpoints including health checks, metrics, and a home route. The server can be started with or without TLS based on configuration.\n\nInput: \n- None (configuration is read from viper and cobra command context)\n\nOutput: \n- None (runs HTTP server as a blocking operation, panics on error)\n\nMethods:\n- The function itself serves as the main execution method for the cobra.Command's Run field\n\nNote: The function uses global configuration via viper and is designed to work as part of a cobra CLI command structure. It handles server startup errors by panicking, which is appropriate for a main application entry point.\n\n(Strictly following the format with no extra characters)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n)\n\nvar towerCmd = &cobra.Command{\n\tUse:   \"api\",\n\tShort: \"Start beaver api server\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tr := gin.Default()\n\n\t\tr.Use(middleware.Cors())\n\t\tr.Use(middleware.Correlation())\n\t\tr.Use(middleware.Logger())\n\t\tr.Use(middleware.Metric())\n\t\tr.Use(middleware.Auth())\n\n\t\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\t\tc.String(http.StatusNoContent, \"\")\n\t\t})\n\n\t\tr.GET(\"/\", controller.Home)\n\n\t\tr.GET(\"/_health\", controller.Health)\n\n\t\tr.GET(\n\t\t\tviper.GetString(\"app.metrics.prometheus.endpoint\"),\n\t\t\tgin.WrapH(controller.Metrics()),\n\t\t)\n\n\t\tvar runerr error\n\n\t\tif viper.GetBool(\"app.tls.status\") {\n\t\t\trunerr = r.RunTLS(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t\tviper.GetString(\"app.tls.pemPath\"),\n\t\t\t\tviper.GetString(\"app.tls.keyPath\"),\n\t\t\t)\n\t\t} else {\n\t\t\trunerr = r.Run(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t)\n\t\t}\n\n\t\tif runerr != nil {\n\t\t\tpanic(runerr.Error())\n\t\t}\n\t},\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n\t\"net/http\"\n)\n\nfunc StartServer() {\n\tr := gin.Default()\n\n\tr.Use(func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t})\n\n\tr.Use(func(c *gin.Context) {\n\t\tcorrelationID := \"CORR-12345\" \n\t\tc.Writer.Header().Set(\"X-Correlation-ID\", correlationID)\n\t\tc.Next()\n\t})\n\n\tr.Use(func(c *gin.Context) {\n\t\ttoken := c.GetHeader(\"Authorization\")\n\t\tif token != \"valid-token\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n\t\t}\n\t\tc.Next()\n\t})\n\n\tr.GET(\"/healthz\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"OK\")\n\t})\n\tr.GET(\"/metrics\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"metrics\": \"data\"})\n\t})\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Welcome\"})\n\t})\n\n\tport := viper.GetString(\"server.port\")\n\taddr := \":\" + port\n\ttlsEnabled := viper.GetBool(\"server.tls.enabled\")\n\n\tif tlsEnabled {\n\t\tcertFile := viper.GetString(\"server.tls.cert\")\n\t\tkeyFile := viper.GetString(\"server.tls.key\")\n\t\tif err := r.RunTLS(addr, certFile, keyFile); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t} else {\n\t\tif err := r.Run(addr); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n//go:embed static/*\nvar staticFS embed.FS\n\nfunc StartServer() {\n\tr := gin.Default()\n\tr.StaticFS(\"/static\", http.FS(staticFS))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that implements a session-based counter. The server should increment and persist a counter value across requests using Redis as the session store.\n\nFunction Description: The main function initializes a Gin web server with Redis-based session management and implements a GET endpoint (\"/incr\") that increments and returns a counter value stored in the session.\n\nInput: None (The function takes no direct input parameters. Input comes through HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly. Output is sent as HTTP responses. The \"/incr\" endpoint returns JSON with the current count value)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/sessions\"\n\t\"github.com/gin-gonic/sessions/redis\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore, _ := redis.NewStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"session\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsess := sessions.Default(c)\n\t\tcount := sess.Get(\"count\")\n\t\tvar current int\n\t\tif count == nil {\n\t\t\tcurrent = 0\n\t\t} else {\n\t\t\tcurrent = count.(int) + 1\n\t\t}\n\t\tsess.Set(\"count\", current)\n\t\t_ = sess.Save()\n\t\tc.JSON(200, gin.H{\"count\": current})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with caching capabilities for specific routes using in-memory storage.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), configures an in-memory cache store, and sets up a GET route (\"/cache_ping\") that returns a cached response. The cached response includes a \"pong\" message with the current Unix timestamp, and the cache is set to expire after one minute.\n\nInput: None (The function takes no parameters as it sets up the server configuration internally)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8080)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/cache\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore := cache.NewInMemoryStore(time.Second)\n\tr.GET(\"/cache_ping\", cache.CachePage(store, time.Minute, func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t}))\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"time\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\tcacheClient := cache.New(1*time.Minute, 10*time.Minute)\n\n\trouter.GET(\"/cache_ping\", func(c *gin.Context) {\n\t\tif cached, found := cacheClient.Get(\"pong_key\"); found {\n\t\t\tc.JSON(200, cached)\n\t\t\treturn\n\t\t}\n\n\t\ttimestamp := time.Now().Unix()\n\t\tdata := map[string]interface{}{\n\t\t\t\"message\":   \"pong\",\n\t\t\t\"timestamp\": timestamp,\n\t\t}\n\t\tcacheClient.Set(\"pong_key\", data, cache.DefaultExpiration)\n\t\tc.JSON(200, data)\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint to handle and respond to header data.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET handler for the root path (\"/\"), processes incoming request headers, and returns a JSON response containing specific header values. The server listens on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but processes HTTP request headers internally)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\th := testHeader{}\n\n\t\tif err := c.ShouldBindHeader(&h); err != nil {\n\t\t\tc.JSON(http.StatusOK, err)\n\t\t}\n\n\t\tfmt.Printf(\"%#v\\n\", h)\n\t\tc.JSON(http.StatusOK, gin.H{\"Rate\": h.Rate, \"Domain\": h.Domain})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, c.Request.Header)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin-based HTTP server with TLS support, serving HTML content and static assets, while also implementing HTTP/2 server push for static resources.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up static file serving, configures HTML templates, implements HTTP/2 server push for static assets, and starts the server with TLS encryption. It handles requests to the root path (\"/\") by returning HTML content and pushing a JavaScript file to the client.\n\nInput:\n- port (string): The port number to listen on (e.g., \":8080\")\n- certFile (string): Path to the TLS certificate file (e.g., \"./testdata/server.pem\")\n- keyFile (string): Path to the TLS private key file (e.g., \"./testdata/server.key\")\n- htmlTemplates (template.Template): HTML templates to be used for rendering\n- staticDir (string): Directory path for static assets (e.g., \"./assets\")\n\nOutput: None (the function runs indefinitely as a web server)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/assets\", \"./assets\")\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher := c.Writer.Pusher(); pusher != nil {\n\t\t\tif err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n\t\t\t\tlog.Printf(\"Failed to push: %v\", err)\n\t\t\t}\n\t\t}\n\t\tc.HTML(200, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"html/template\"\n\t\"net/http\"\n)\n\nfunc StartServer(port, certFile, keyFile string, htmlTemplates template.Template, staticDir string) {\n\trouter := gin.Default()\n\trouter.Static(\"/static\", staticDir)\n\trouter.SetHTMLTemplate(&htmlTemplates)\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher, ok := c.Writer.Pusher(); ok {\n\t\t\t_ = pusher.Push(\"/static/js/app.js\", nil)\n\t\t}\n\t\tc.HTML(200, \"index.html\", nil)\n\t})\n.router.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, save the uploaded file to the server, and return a success message with the file details and form fields.\n\nFunction Description: The function initializes a Gin router, configures it to handle multipart form uploads (with a maximum size limit), serves static files from a public directory, and sets up a POST endpoint for file uploads. The endpoint binds the incoming request to a struct containing the file and form fields, saves the file to the server, and returns a success message with the file name and form field values.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it sends HTTP responses through the Gin context)\n\nNote: The function assumes the existence of a `BindFile` struct type which should contain at least these fields:\n- File: *multipart.FileHeader - The uploaded file\n- Name: string - A form field value\n- Email: string - A form field value",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar bindFile BindFile\n\n\t\tif err := c.ShouldBind(&bindFile); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tfile := bindFile.File\n\t\tdst := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"upload file err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, bindFile.Name, bindFile.Email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype BindFile struct {\n\tFile  *multipart.FileHeader `form:\"file\" binding:\"required\"`\n\tName  string                `form:\"name\" binding:\"required\"`\n\tEmail string                `form:\"email\" binding:\"required\"`\n}\n\nfunc SetupServer() {\n\tr := gin.Default()\n\tr.MaxMultipartMemory = 10 << 20\n\n\tr.Static(\"/public\", \"./public\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar bindFile BindFile\n\t\tif err := c.ShouldBind(&bindFile); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tif err := c.SaveUploadedFile(bindFile.File, \"./uploads/\"+bindFile.File.Filename); err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Upload successful\",\n\t\t\t\"file\":    bindFile.File.Filename,\n\t\t\t\"name\":    bindFile.Name,\n\t\t\t\"email\":   bindFile.Email,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}\n\nfunc main() {\n\tSetupServer()\n}\n```"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests for inventory operations, specifically for trying inventory items. The server should parse JSON input, process the inventory try operation, and return appropriate JSON responses.\n\nFunction Description: The main function sets up a Gin HTTP server with a single POST endpoint \"/service-c/try\" that accepts JSON inventory data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing inventory data (structure not shown in reference code but implied to have an ID field)\n- Gin context object providing request/response capabilities\n\nOutput:\n- Success case (200 status):\n  ```json\n  {\n    \"success\": true,\n    \"message\": \"inventory [ID] tried!\"\n  }\n  ```\n- Error case (400 status):\n  ```json\n  {\n    \"success\": false,\n    \"message\": \"[error description]\"\n  }\n  ```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-c/try\", func(context *gin.Context) {\n\t\tinv := &Inventory{}\n\t\terr := context.BindJSON(inv)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"inventory %d tried!\", inv.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"inventory %d tried!\", inv.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8082\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype InventoryItem struct {\n\tID string `json:\"id\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-c/try\", func(c *gin.Context) {\n\t\tvar item InventoryItem\n\t\tif err := c.ShouldBindJSON(&item); err != nil {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tif item.ID == \"\" {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": \"missing inventory ID\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(200, gin.H{\n\t\t\t\"success\": true,\n\t\t\t\"message\": \"inventory \" + item.ID + \" tried!\",\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling multipart form uploads. It processes uploaded files along with name and email form fields, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters but handles HTTP requests with the following expected inputs:\n- POST /upload requests containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - Multipart files: \"files\" (array of files)\n- GET requests for static files from the \"./public\" directory)\n\nOutput: None (The function doesn't return any value but produces the following outputs:\n- For successful uploads: HTTP 200 response with success message\n- For errors: HTTP 400 responses with error messages\n- Static file serving for requests to the root path)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc StartServer() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tif err := c.Request.ParseMultipartForm(8 << 20); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tif name == \"\" || email == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"missing name or email\"})\n\t\t\treturn\n\t\t}\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"files\"]\n\t\tif len(files) == 0 {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"no files uploaded\"})\n\t\t\treturn\n\t\t}\n\t\tfor _, file := range files {\n\t\t\tsrc, err := file.Open()\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to open uploaded file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer src.Close()\n\t\t\tif err := os.MkdirAll(\"uploads\", os.ModePerm); err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to create upload directory\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdest, err := os.Create(\"uploads/\" + file.Filename)\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to save file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dest.Close()\n\t\t\tif _, err := io.Copy(dest, src); err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to save file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Upload successful\",\n\t\t\t\"name\":    name,\n\t\t\t\"email\":   email,\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but the server configuration is hardcoded in the function)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The static file directory (\"/tmp\") and server port (\":8080\") are hardcoded in this implementation but could be made configurable through parameters in a more flexible version.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/static\", \"/tmp\")\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello World\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle GET requests, extract request information, and return a JSON response containing the request path and IP details.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET route handler that captures the request path and IP information (including RemoteAddr, X-Forwarded-For, and X-Real-Ip headers), and returns this information as a JSON response. The server runs on a specified address.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP clients and may log errors during server startup)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nconst (\n\tAddr = \"127.0.0.1:2003\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\treq := c.Request\n\t\turlPath := fmt.Sprintf(\"http://%s%s\", Addr, req.URL.Path)\n\t\trealIP := fmt.Sprintf(\"RemoteAddr=%s,X-Forwarded-For=%v,X-Real-Ip=%v\", req.RemoteAddr, req.Header.Get(\"X-Forwarded-For\"), req.Header.Get(\"X-Real-Ip\"))\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": urlPath,\n\t\t\t\"ip\":   realIP,\n\t\t})\n\t})\n\n\tif err := r.Run(Addr); err != nil {\n\t\tlog.Printf(\"Error: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"log\"\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\tr.GET(\"/info\", func(c *gin.Context) {\n\t\tpath := c.Request.URL.Path\n\t\tremoteAddr := c.Request.RemoteAddr\n\t\txForwardedFor := c.Request.Header.Get(\"X-Forwarded-For\")\n\t\txRealIP := c.Request.Header.Get(\"X-Real-Ip\")\n\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": path,\n\t\t\t\"ip_details\": gin.H{\n\t\t\t\t\"remote_addr\":     remoteAddr,\n\t\t\t\t\"x_forwarded_for\": xForwardedFor,\n\t\t\t\t\"x_real_ip\":       xRealIP,\n\t\t\t},\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic string response.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler for the \"/ping\" endpoint, and starts the server on the default port (8080). When a GET request is made to \"/ping\", it responds with the string \"pong\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything; it starts an HTTP server that runs until interrupted)",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Go function that implements an HTTP server using the Gin framework, which includes session management using Redis for storing and incrementing a counter value.\n\nFunction Description: The function sets up a Gin web server with Redis-based session management. It provides a single endpoint \"/incr\" that increments a counter stored in the session and returns the current count in JSON format. The server runs on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP requests and runs the web server indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/redis\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := redis.NewStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Middleware(store))\n\tr.POST(\"/incr\", func(c *gin.Context) {\n\t\tsess := sessions.Default(c)\n\t\tcount := sess.Get(\"counter\")\n\t\tvar current int\n\t\tif count == nil {\n\t\t\tcurrent = 0\n\t\t} else {\n\t\t\tcurrent = count.(int)\n\t\t}\n\t\tcurrent++\n\t\tsess.Set(\"counter\", current)\n\t\tsess.Save()\n\t\tc.JSON(200, gin.H{\"count\": current})\n\t})\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses to clients and runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gin.Gzip(gin.DefaultCompressLevel()))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong %d\\n\", time.Now().Unix())\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Go function that sets up a Gin-based HTTP server with specific API endpoints for handling web information requests. The function should initialize the server, define route handlers, and process incoming requests to return appropriate JSON responses.\n\nFunction Description: The `api` function initializes a Gin HTTP server with default middleware (Logger and Recovery). It defines two main routes: a root endpoint (\"/\") that returns a simple status message, and an API group (\"/api\") with endpoints for handling web information requests (\"/info\" for both GET and POST methods). The function processes incoming requests, validates input, executes business logic through `RunJob`, and returns structured JSON responses.\n\nInput:\n- `options` (*common.ENOptions): A pointer to an options structure containing configuration parameters for the application. This parameter is used to pass various settings to the business logic processing.\n\nOutput:\n- None (direct output via HTTP responses)\n- The function starts an HTTP server that listens on port 31000 and handles incoming requests\n- Returns error if server fails to start (logged via gologger)\n\nThe function does not explicitly return any values but sends HTTP responses in JSON format with the following possible structures:\n1. Success response (200 status code):\n```json\n{\n  \"code\": 200,\n  \"message\": \"ok\",\n  \"data\": [result_data]\n}\n```\n2. Error responses (400/500 status codes):\n```json\n{\n  \"code\": [error_code],\n  \"message\": \"[error_message]\"\n}\n```",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/wgpsec/ENScan/common\"\n\t\"github.com/wgpsec/ENScan/common/gologger\"\n)\nfunc api(options *common.ENOptions) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"OK\",\n\t\t})\n\t})\n\twebInfo := func(c *gin.Context) {\n\t\tvar w webOp\n\t\terr := c.ShouldBind(&w)\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\n\t\t\t\t\"code\":    500,\n\t\t\t\t\"message\": \"\u6570\u636e\u7ed1\u5b9a\u5f02\u5e38\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.OrgName == \"\" {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"code\":    400,\n\t\t\t\t\"message\": \"\u8bf7\u8f93\u5165\u67e5\u8be2\u6761\u4ef6\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.Branch {\n\t\t\toptions.IsGetBranch = true\n\t\t}\n\t\toptions.KeyWord = w.OrgName\n\t\toptions.GetFlags = w.Filed\n\t\toptions.ScanType = w.ScanType\n\t\toptions.InvestNum = w.Invest\n\t\toptions.IsSupplier = w.Supplier\n\t\toptions.IsHold = w.Holds\n\t\toptions.Deep = w.Depth\n\t\toptions.IsMergeOut = true\n\t\tcommon.Parse(options)\n\t\tdata := RunJob(options)\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"ok\",\n\t\t\t\"data\":    data,\n\t\t})\n\t}\n\ta := r.Group(\"/api\")\n\t{\n\t\ta.GET(\"/info\", webInfo)\n\t\ta.POST(\"/info\", webInfo)\n\t}\n\terr := r.Run(\":31000\")\n\tif err != nil {\n\t\tgologger.Error().Msgf(\"API\u670d\u52a1\u542f\u52a8\u5931\u8d25\uff01\")\n\t\tgologger.Fatal().Msgf(err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc api(options *common.ENOptions) error {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    http.StatusOK,\n\t\t\t\"message\": \"ok\",\n\t\t})\n\t})\n\n\tapiGroup := r.Group(\"/api\")\n\t{\n\t\tapiGroup.GET(\"/info\", func(c *gin.Context) {\n\t\t\turl := c.Query(\"url\")\n\t\t\tif url == \"\" {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    http.StatusBadRequest,\n\t\t\t\t\t\"message\": \"Missing URL parameter\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresult, err := RunJob(options, url)\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\t\"code\":    http.StatusInternalServerError,\n\t\t\t\t\t\"message\": err.Error(),\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":    http.StatusOK,\n\t\t\t\t\"message\": \"ok\",\n\t\t\t\t\"data\":    result,\n\t\t\t})\n\t\t})\n\n\t\tapiGroup.POST(\"/info\", func(c *gin.Context) {\n\t\t\tvar input struct {\n\t\t\t\tURL string `json:\"url\" binding:\"required\"`\n\t\t\t}\n\n\t\t\tif err := c.ShouldBindJSON(&input); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    http.StatusBadRequest,\n\t\t\t\t\t\"message\": \"Invalid request payload\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresult, err := RunJob(options, input.URL)\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\t\"code\":    http.StatusInternalServerError,\n\t\t\t\t\t\"message\": err.Error(),\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":    http.StatusOK,\n\t\t\t\t\"message\": \"ok\",\n\t\t\t\t\"data\":    result,\n\t\t\t})\n\t\t})\n\t}\n\n\treturn r.Run(\":31000\")\n}"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Go function that sets up a basic HTTP server using the Gin framework, with routes for login and home pages, including cookie handling for authentication.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), defines two routes (/login and /home), and starts the server on port 8080. The /login route sets a cookie, while the /home route requires cookie authentication through middleware and returns JSON data.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens indefinitely)\n\nNote: The CookieTool() middleware referenced in the home route would need to be defined separately to verify the cookie set by the login route.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\troute := gin.Default()\n\n\troute.GET(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"label\", \"ok\", 30, \"/\", \"localhost\", false, true)\n\t\tc.String(200, \"Login success!\")\n\t})\n\n\troute.GET(\"/home\", CookieTool(), func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"data\": \"Your home page\"})\n\t})\n\n\troute.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\n\tCookieTool := func() gin.HandlerFunc {\n\t\treturn func(c *gin.Context) {\n\t\t\t_, err := c.Cookie(\"auth\")\n\t\t\tif err == http.ErrNoCookie {\n\t\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n\t\t\t\tc.Abort()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.Next()\n\t\t}\n\t}()\n\n\trouter.POST(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"auth\", \"session_token\", 3600, \"/\", \"localhost\", false, true)\n\t\tc.JSON(200, gin.H{\"status\": \"login successful\"})\n\t})\n\n\thome := router.Group(\"/home\")\n\thome.Use(CookieTool)\n\t{\n\t\thome.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"Welcome to the home page!\"})\n\t\t})\n\t}\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint. The endpoint should accept a name parameter, make a gRPC call to a Greeter service, and return the response as JSON. The function should handle both successful responses and errors from the gRPC call.\n\nFunction Description: The function initializes a Gin router with default middleware, establishes a gRPC connection to a Greeter service, and defines a GET endpoint at \"/rest/n/:name\". When called, the endpoint extracts the name parameter, makes a gRPC call to the Greeter service, and returns either the greeting message or an error in JSON format. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters but relies on incoming HTTP requests to the defined endpoint)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/gin-gonic/examples/grpc/example1/gen/helloworld/v1\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := v1.NewGreeterClient(conn)\n\n\tr := gin.Default()\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\n\t\treq := &v1.HelloRequest{Name: name}\n\t\tres, err := client.SayHello(c, req)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"result\": fmt.Sprint(res.Message),\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"could not run server: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"path/to/generated/proto\" // Replace with actual generated proto path\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewGreeterClient(conn)\n\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\treq := &pb.HelloRequest{Name: name}\n\t\tresp, err := client.SayHello(c.Request.Context(), req)\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(200, gin.H{\"message\": resp.Message})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles user management with versioned API endpoints and authentication middleware.\n\nFunction Description: The main function initializes a Gin router with versioned API endpoints (/v1 and /v2) for user management. Each version has public GET endpoints and protected POST endpoints that require authentication through middleware.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8081)\n\nMethods:\n\nAuthMiddleWare: () -> gin.HandlerFunc - Returns a Gin middleware function that handles authentication for protected routes\nAddV1User: (*gin.Context) -> None - Handles POST requests to add users for API version 1\nAddV2User: (*gin.Context) -> None - Handles POST requests to add users for API version 2",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tapiV1 := router.Group(\"/v1\")\n\n\tapiV1.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V1 Users\")\n\t})\n\n\tauthV1 := apiV1.Group(\"/\", AuthMiddleWare())\n\n\tauthV1.POST(\"users/add\", AddV1User)\n\n\tapiV2 := router.Group(\"/v2\")\n\n\tapiV2.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V2 Users\")\n\t})\n\n\tauthV2 := apiV2.Group(\"/\", AuthMiddleWare())\n\n\tauthV2.POST(\"users/add\", AddV2User)\n\n\t_ = router.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\n\tv1 := router.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/users\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Public V1 Users Endpoint\"})\n\t\t})\n\t\tv1.POST(\"/users\", AuthMiddleware(), AddV1User)\n\t}\n\n\tv2 := router.Group(\"/v2\")\n\t{\n\t\tv2.GET(\"/users\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Public V2 Users Endpoint\"})\n\t\t})\n\t\tv2.POST(\"/users\", AuthMiddleware(), AddV2User)\n\t}\n\n\trouter.Run(\":8081\")\n}\n\nfunc AuthMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\ttoken := c.GetHeader(\"Authorization\")\n\t\tif token != \"Bearer secret\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Authentication required\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}\n\nfunc AddV1User(c *gin.Context) {\n\tvar user struct {\n\t\tName  string `json:\"name\"`\n\t\tEmail string `json:\"email\"`\n\t}\n\tif err := c.ShouldBindJSON(&user); err != nil {\n\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\treturn\n\t}\n\tc.JSON(http.StatusCreated, gin.H{\"message\": \"V1 User added\", \"user\": user})\n}\n\nfunc AddV2User(c *gin.Context) {\n\tvar user struct {\n\t\tName     string `json:\"name\"`\n\t\tEmail    string `json:\"email\"`\n\t\tUsername string `json:\"username\"`\n\t}\n\tif err := c.ShouldBindJSON(&user); err != nil {\n\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\treturn\n\t}\n\tc.JSON(http.StatusCreated, gin.H{\"message\": \"V2 User added\", \"user\": user})\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that returns a \"pong\" message with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\":   \"pong\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a JSON message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at \"/api/hello\" that returns a JSON response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/api/hello\" endpoint)\n\nOutput: \n- When successful: The server runs indefinitely, listening on port 8080\n- When failing: An error message is printed if the server fails to start\n- HTTP Response: For GET requests to \"/api/hello\", returns a JSON response with status 200 OK: {\"message\": \"Hello, HTTP!\"}",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\n\terr := router.Run(\":8080\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tfmt.Printf(\"Server failed to start: %v\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and the message \"pong [current_unix_timestamp]\" when the \"/ping\" endpoint is accessed)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong %d\", time.Now().Unix())\n\t})\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t}\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"embed\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\n//go:embed static/*\nvar staticFiles embed.FS\n\nfunc RunServer() {\n\tr := gin.Default()\n\tr.StaticFS(\"/static\", http.FS(staticFiles))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, saving the uploaded file to the local filesystem and returning a success message.\n\nFunction Description: The function initializes a Gin router with default middleware, sets up a static file server, and defines a POST endpoint for file uploads. It handles multipart form data containing a file and additional fields (name and email), saves the file to disk, and returns a confirmation message.\n\nInput: \n- None (the function takes no direct input parameters; inputs come via HTTP requests)\n\nOutput:\n- None (the function doesn't return anything; it starts an HTTP server that runs indefinitely)\n\nNote: The function expects HTTP POST requests to the \"/upload\" endpoint with multipart form data containing:\n1. A file (form field name \"file\")\n2. Text fields \"name\" and \"email\"",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, _ := c.FormFile(\"file\")\n\t\tsrc, _ := file.Open()\n\t\tdefer src.Close()\n\n\t\tdst, _ := os.Create(file.Filename)\n\t\tdefer dst.Close()\n\n\t\tio.Copy(dst, src)\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc StartUploadServer() {\n\trouter := gin.Default()\n\trouter.Static(\"/static\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tif err := c.Request.ParseMultipartForm(10 << 20); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Parse form error: \" + err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tfile, handler, err := c.Request.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"File is required\"})\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tif name == \"\" || email == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Name and email are required\"})\n\t\t\treturn\n\t\t}\n\n\t\tuploadDir := \"./uploads\"\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create upload directory\"})\n\t\t\treturn\n\t\t}\n\n\t\tdstPath := filepath.Join(uploadDir, handler.Filename)\n\t\tdst, err := os.Create(dstPath)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create file\"})\n\t\t\treturn\n\t\t}\n\t\tdefer dst.Close()\n\n\t\tif _, err := io.Copy(dst, file); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\":  \"File uploaded successfully\",\n\t\t\t\"filename\": handler.Filename,\n\t\t\t\"name\":     name,\n\t\t\t\"email\":    email,\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server that sends responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong %d\", time.Now().Unix())\n\t})\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session cookie.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/cookie\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tstore := cookie.NewStore([]byte(\"secret_key\"))\n\tr.Use(sessions.Sessions(\"session\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tcount := session.Get(\"count\")\n\t\tvar newCount int\n\t\tif count == nil {\n\t\t\tnewCount = 1\n\t\t} else {\n\t\t\tnewCount = count.(int) + 1\n\t\t}\n\t\tsession.Set(\"count\", newCount)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": newCount})\n\t})\n\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Implement a rate-limited HTTP server using the Gin framework in Go, which includes middleware for request rate limiting and a simple endpoint to test the rate limiting functionality.\n\nFunction Description: The `ginRun` function initializes and starts a Gin HTTP server with rate limiting capabilities. It sets up a leaky bucket rate limiter middleware and provides a single endpoint (\"/rate\") for testing the rate limiting. The server runs on port 8080.\n\nInput: \n- `rps` (int): The maximum number of requests per second that the server will allow (rate limit value)\n\nOutput: \n- None (The function starts an HTTP server that runs indefinitely until interrupted)\n- Logs the current rate limit setting to stdout\n- Responds to HTTP requests on the \"/rate\" endpoint with a JSON message",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc ginRun(rps int) {\n\tlimit = ratelimit.New(rps)\n\n\tapp := gin.Default()\n\tapp.Use(leakBucket())\n\n\tapp.GET(\"/rate\", func(ctx *gin.Context) {\n\t\tctx.JSON(200, \"rate limiting test\")\n\t})\n\n\tlog.Printf(color.CyanString(\"Current Rate Limit: %v requests/s\", rps))\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/time/rate\"\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc ginRun(rps int) {\n\tlog.Printf(\"Rate limit set to %d RPS\", rps)\n\tr := gin.Default()\n\n\tlimiter := rate.NewLimiter(rate.Limit(rps), 1)\n\tr.Use(func(c *gin.Context) {\n\t\tif !limiter.Allow() {\n\t\t\tc.AbortWithStatusJSON(http.StatusTooManyRequests, gin.H{\"error\": \"rate limit exceeded\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t})\n\n\tr.GET(\"/rate\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"success\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/cookie\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tstore := cookie.NewStore([]byte(\"secret\"))\n\tr.Use(sessions.Middleware(store))\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\ts := sessions.Default(c)\n\t\tcount := s.Get(\"count\")\n\t\tvar current int\n\t\tif count == nil {\n\t\t\tcurrent = 0\n\t\t} else {\n\t\t\tcurrent = count.(int)\n\t\t}\n\t\tcurrent++\n\t\ts.Set(\"count\", current)\n\t\ts.Save()\n\t\tc.JSON(200, gin.H{\"count\": current})\n\t})\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Go function that sets up a simple HTTP server using the Gin framework to retrieve and return the client's IP address.\n\nFunction Description: The function initializes a Gin HTTP server with default middleware (Logger and Recovery), registers a GET endpoint \"/getip\" that retrieves the client's IP address from the request context, and returns it as a JSON response. The server listens on port 8080.\n\nInput: None (The function takes no input parameters)\n\nOutput: None (The function does not return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip := c.ClientIP()\n\t\tc.JSON(http.StatusOK, gin.H{\"ip\": ip})\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net\"\n)\n\nfunc StartServer() {\n\tr := gin.Default()\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip, _, _ := net.SplitHostPort(c.Request.RemoteAddr)\n\t\tc.JSON(200, gin.H{\"ip\": ip})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Implement a JWT-based authentication service using Gin framework in Go, which provides public endpoints for token generation and private endpoints that require valid JWT tokens for access.\n\nFunction Description: The main function sets up a Gin HTTP server with JWT authentication. It creates two route groups: a public group for token generation and a private group that requires JWT authentication. The public endpoint generates JWT tokens, while the private endpoint demonstrates protected access.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests with the following possible inputs:\n- GET request to \"/api/\" for token generation\n- GET request to \"/api/private/\" for accessing protected content)\n\nOutput: HTTP responses with the following possible outputs:\n- For \"/api/\": JSON response containing a JWT token or error message\n- For \"/api/private/\": JSON response with protected content or authentication error\n- The server runs continuously on localhost:8080",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\nvar secretKey = []byte(\"my_secret_key\")\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\t{\n\t\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\t\tclaims := &jwt.StandardClaims{\n\t\t\t\tIssuer:    \"auth-service\",\n\t\t\t\tExpiresAt: time.Now().Add(24 * time.Hour).Unix(),\n\t\t\t}\n\t\t\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\t\t\tsignedToken, err := token.SignedString(secretKey)\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"Could not generate token\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.JSON(http.StatusOK, gin.H{\"token\": signedToken})\n\t\t})\n\t}\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(AuthMiddleware())\n\t{\n\t\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"This is private content\"})\n\t\t})\n\t}\n\n\tr.Run(\":8080\")\n}\n\nfunc AuthMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tauthHeader := c.GetHeader(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Authorization header required\"})\n\t\t\treturn\n\t\t}\n\n\t\ttokenStr := strings.TrimPrefix(authHeader, \"Bearer \")\n\t\tif tokenStr == authHeader {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token format\"})\n\t\t\treturn\n\t\t}\n\n\t\tclaims := &jwt.StandardClaims{}\n\t\tparsedToken, err := jwt.ParseWithClaims(tokenStr, claims, func(t *jwt.Token) (interface{}, error) {\n\t\t\treturn secretKey, nil\n\t\t})\n\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\treturn\n\t\t}\n\n\t\tif !parsedToken.Valid {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.Set(\"claims\", claims)\n\t}\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS web server using the Gin framework, serving a welcome page at the \"/welcome\" endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up HTML templates, registers a GET handler for the \"/welcome\" endpoint that returns an HTML response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput:\n- port (string): The port number to listen on, e.g., \":8080\"\n- certFile (string): Path to the TLS certificate file, e.g., \"./testdata/server.pem\"\n- keyFile (string): Path to the TLS private key file, e.g., \"./testdata/server.key\"\n- html (template.Template): HTML template to be used for responses\n\nOutput: None (the function runs indefinitely as a web server)\n\nNote: The function includes a warning about not using embedded certificates in production environments.",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tlogger := log.New(os.Stderr, \"\", 0)\n\tlogger.Println(\"[WARNING] DON'T USE THE EMBED CERTS FROM THIS EXAMPLE IN PRODUCTION ENVIRONMENT, GENERATE YOUR OWN!\")\n\n\tr := gin.Default()\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"html/template\"\n\t\"net/http\"\n)\n\nfunc StartServer(port, certFile, keyFile string, html template.Template) {\n\tr := gin.Default()\n\tr.HTMLTemplates = &html\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"welcome.html\", gin.H{})\n\t})\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests to a specific endpoint, processes JSON input, and returns appropriate JSON responses.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint \"/service-b/try\" that receives JSON account data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- None (the function takes no direct input parameters, but receives HTTP requests with JSON payloads matching the Account struct format)\n\nOutput:\n- None (the function doesn't return any value directly, but sends HTTP responses with JSON bodies containing either success or error messages)\n\nNote: The Account struct (not shown in reference code) would typically contain at least an ID field to be properly processed by this endpoint.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-b/try\", func(context *gin.Context) {\n\t\taccount := &Account{}\n\t\terr := context.BindJSON(account)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"account %d tried!\", account.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"account %d tried!\", account.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype Account struct {\n\tID string `json:\"id\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/service-b/try\", func(c *gin.Context) {\n\t\tvar account Account\n\t\tif err := c.ShouldBindJSON(&account); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif account.ID == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"missing account ID\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"success\", \"account_id\": account.ID})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles file uploads, saves them to a specified directory, and returns the file URL.\n\nFunction Description: The main function initializes a Gin HTTP server with file upload capabilities. It sets up a static file server for serving uploaded files and implements a POST endpoint for uploading files. The server saves uploaded files with unique names and returns their access URLs.\n\nInput: \n- HTTP POST request with multipart/form-data containing a file field named \"file\"\n- File content in the request body\n\nOutput:\n- JSON response containing:\n  - Status code (0 for success, non-zero for errors)\n  - Message describing the operation result\n  - Data object containing the URL to access the uploaded file (on success)\n  OR\n  - Error message (on failure)\n\nThe server runs on port 8085 and serves static files from \"/root/file/\" directory. Uploaded files are saved with names formatted as \"timestamp-randomstring.extension\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"gim/pkg/util\"\n)\n\nconst baseUrl = \"http://111.229.238.28:8085/file/\"\n\ntype Response struct {\n\tCode    int         `json:\"code\"`\n\tMessage string      `json:\"message\"`\n\tData    interface{} `json:\"data\"`\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/file\", \"/root/file\")\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusOK, Response{Code: 1001, Message: err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tfilenames := strings.Split(file.Filename, \".\")\n\t\tname := strconv.FormatInt(time.Now().UnixNano(), 10) + \"-\" + util.RandString(30) + \".\" + filenames[len(filenames)-1]\n\t\tfilePath := \"/root/file/\" + name\n\t\terr = c.SaveUploadedFile(file, filePath)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusOK, Response{Code: 1001, Message: err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, Response{\n\t\t\tCode:    0,\n\t\t\tMessage: \"success\",\n\t\t\tData:    map[string]string{\"url\": baseUrl + name},\n\t\t})\n\t})\n\terr := router.Run(\":8085\")\n\tif err != nil {\n\t\tlogger.Logger.Error(\"Run error\", zap.Error(err))\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\trand.Seed(time.Now().UnixNano())\n\n\tuploadDir := \"/root/file/\"\n\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\tpanic(\"Failed to create upload directory\")\n\t}\n\tr.Static(\"/files\", uploadDir)\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, header, err := c.Request.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"status\":  1,\n\t\t\t\t\"message\": \"Error retrieving the file\",\n\t\t\t\t\"error\":   err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\text := filepath.Ext(header.Filename)\n\t\ttimestamp := time.Now().UnixNano()\n\t\trandomStr := generateRandomString(6)\n\t\tnewFilename := fmt.Sprintf(\"%d-%s%s\", timestamp, randomStr, ext)\n\t\tnewPath := filepath.Join(uploadDir, newFilename)\n\n\t\toutFile, err := os.Create(newPath)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"status\":  2,\n\t\t\t\t\"message\": \"Error saving the file\",\n\t\t\t\t\"error\":   err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tdefer outFile.Close()\n\n\t\tif _, err := io.Copy(outFile, file); err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"status\":  3,\n\t\t\t\t\"message\": \"Error writing the file\",\n\t\t\t\t\"error\":   err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\turl := fmt.Sprintf(\"/files/%s\", newFilename)\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"status\":  0,\n\t\t\t\"message\": \"File uploaded successfully\",\n\t\t\t\"data\": gin.H{\n\t\t\t\t\"url\": url,\n\t\t\t},\n\t\t})\n\t})\n\n\tr.Run(\":8085\")\n}\n\nfunc generateRandomString(length int) string {\n\tconst chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n\tvar result strings.Builder\n\tfor i := 0; i < length; i++ {\n\t\tresult.WriteByte(chars[rand.Intn(len(chars))])\n\t}\n\treturn result.String()\n}\n```"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that serves HTML templates, static files, and a favicon, with routes for the main page and a foo page.\n\nFunction Description: The main function initializes a Gin router, sets up HTML templates from embedded files, serves static files, defines route handlers for the root path (\"/\"), \"/foo\" path, and favicon, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but relies on embedded filesystem content for templates and assets)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)\n\nNote: The implementation assumes the existence of an embedded filesystem (variable 'f' of type embed.FS) containing template files in \"templates/\" and \"templates/foo/\" directories, and assets in an \"assets/\" directory.",
    "Canonical_solution": "import (\n\t\"embed\"\n\t\"html/template\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\ttempl := template.Must(template.New(\"\").ParseFS(f, \"templates/*.tmpl\", \"templates/foo/*.tmpl\"))\n\trouter.SetHTMLTemplate(templ)\n\n\trouter.StaticFS(\"/public\", http.FS(f))\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\n\trouter.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"bar.tmpl\", gin.H{\n\t\t\t\"title\": \"Foo website\",\n\t\t})\n\t})\n\n\trouter.GET(\"favicon.ico\", func(c *gin.Context) {\n\t\tfile, _ := f.ReadFile(\"assets/favicon.ico\")\n\t\tc.Data(\n\t\t\thttp.StatusOK,\n\t\t\t\"image/x-icon\",\n\t\t\tfile,\n\t\t)\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\n\ttmpl := template.Must(template.ParseFS(f, \"templates/*.html\", \"templates/foo/*.html\"))\n\trouter.SetHTMLTemplate(tmpl)\n\n\tassetsFS, _ := f.Sub(\"assets\")\n\trouter.StaticFS(\"/assets\", http.FS(assetsFS))\n\n\trouter.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\tfavicon, err := f.ReadFile(\"assets/favicon.ico\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatus(http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\t\tc.Data(http.StatusOK, \"image/vnd.microsoft.icon\", favicon)\n\t})\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.html\", gin.H{})\n\t})\n\n\trouter.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"foo/index.html\", gin.H{})\n\t})\n\n\trouter.Run(\":8080\")\n}"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a specified directory.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), serves static files from a \"./public\" directory, and handles POST requests to \"/upload\" endpoint for file uploads with additional form fields (name and email). It processes the uploaded files and form data, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it starts an HTTP server on port 8080 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tsrc, _ := file.Open()\n\t\t\tdefer src.Close()\n\n\t\t\tdst, _ := os.Create(file.Filename)\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc setupRouter() {\n\trouter := gin.Default()\n\n\trouter.Static(\"/\", \"./public\")\n\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tif err := c.Request.ParseMultipartForm(10 << 20); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Unable to parse form\"})\n\t\t\treturn\n\t\t}\n\n\t\tname := c.Request.FormValue(\"name\")\n\t\temail := c.Request.FormValue(\"email\")\n\n\t\tfiles := c.Request.MultipartForm.File[\"file\"]\n\t\tfor _, fileHeader := range files {\n\t\t\tfile, err := fileHeader.Open()\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to open uploaded file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\tif err := os.MkdirAll(\"./uploads\", os.ModePerm); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create upload directory\"})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tdst, err := os.Create(\"./uploads/\" + fileHeader.Filename)\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create destination file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tif _, err := io.Copy(dst, file); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to save uploaded file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Files uploaded successfully\",\n\t\t\t\"name\":    name,\n\t\t\t\"email\":   email,\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}\n\nfunc main() {\n\tsetupRouter()\n}"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves a static favicon file and responds to a GET request with a text message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), serves a static favicon file, registers a GET route handler, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but sends responses to HTTP requests and runs the server indefinitely)\n\nNote: The instruction is for function-level code as the reference code shows a main function implementation rather than a struct/class implementation.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tapp := gin.Default()\n\n\tapp.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\n\tapp.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello favicon.\")\n\t})\n\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Server is running\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using the Gin web framework, which responds to GET requests at the root path with a JSON message.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a GET route handler for the root path (\"/\") that returns a JSON response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput: \n- port (string): The port number on which the server should listen, prefixed with \":\" (e.g., \":5002\")\n- certFile (string): Path to the TLS certificate file (e.g., \"manager.crt\")\n- keyFile (string): Path to the TLS private key file (e.g., \"manager.key\")\n\nOutput: None (The function runs an infinite loop to serve HTTP requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\ts := gin.Default()\n\ts.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"passed\"})\n\t})\n\ts.RunTLS(\":5002\", \"manager.crt\", \"manager.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc StartServer(port, certFile, keyFile string) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"Hello, world!\",\n\t\t})\n\t})\n\tr.RunTLS(port, certFile, keyFile)\n}"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Go function that initializes and configures a Gin HTTP server with New Relic monitoring middleware, and defines a simple route handler.\n\nFunction Description: The function sets up a basic Gin web server with default middleware (Logger and Recovery), configures New Relic monitoring if environment variables are present, and registers a root route handler that returns \"Hello World!\". The server runs on the default port (8080).\n\nInput: None (uses environment variables APP_NAME and NEW_RELIC_API_KEY for optional New Relic configuration)\n\nOutput: None (starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tcfg := newrelic.NewConfig(os.Getenv(\"APP_NAME\"), os.Getenv(\"NEW_RELIC_API_KEY\"))\n\tapp, err := newrelic.NewApplication(cfg)\n\tif err != nil {\n\t\tlog.Printf(\"failed to make new_relic app: %v\", err)\n\t} else {\n\t\trouter.Use(NewRelicMonitoring(app))\n\t}\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello World!\\n\")\n\t})\n\trouter.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent/v3/newrelic\"\n\t\"github.com/newrelic/go-agent/v3/integrations/nrgin\"\n\t\"os\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tappName := os.Getenv(\"APP_NAME\")\n\tlicenseKey := os.Getenv(\"NEW_RELIC_API_KEY\")\n\n\tif appName != \"\" && licenseKey != \"\" {\n\t\tconfig := newrelic.NewConfig(appName, licenseKey)\n\t\tapp, _ := newrelic.NewApplication(config)\n\t\tr.Use(nrgin.Middleware(app))\n\t}\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello World!\")\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at the \"/ping\" endpoint that responds with \"pong\", and starts the server on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends \"pong\" as a response to GET requests at \"/ping\" and runs the HTTP server continuously until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- None (The function takes no parameters as it's the main entry point)\n\nOutput: \n- None (The function doesn't return but runs an HTTP server indefinitely or until fatal error)\n\nNote: The function uses autotls.Run() which automatically obtains and renews TLS certificates from Let's Encrypt for the specified domains. The server will listen on both HTTP (port 80) and HTTPS (port 443) ports.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tmanager := &autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tEmail:      \"admin@example.com\",\n\t\tCache:      autocert.DirCache(\"/var/www/certcache\"),\n\t\tHostPolicy: autocert.HostWhitelist(\"example.com\"),\n\t}\n\n\tlog.Fatal(autocert.Run(manager, r))\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that provides translation services through the DeepLX API. The server should handle GET and POST requests, implement authentication middleware, and support proxy configuration.\n\nFunction Description: The main function initializes a Gin HTTP server with CORS support, sets up routes for translation services, and starts the server on a specified port. It includes:\n1. Configuration initialization\n2. Proxy setup (if configured)\n3. Route handlers for root (/) and translation (/translate) endpoints\n4. Authentication middleware for protected routes\n5. Translation request processing and response handling\n\nInput:\n- Configuration parameters (IP, Port, Proxy, Token) from initConfig()\n- Environment variable PROXY (optional)\n- HTTP requests:\n  * GET / - Returns server information\n  * POST /translate - Accepts JSON payload with translation parameters\n\nOutput:\n- HTTP responses:\n  * For GET /: JSON response with server information\n  * For POST /translate: JSON response with translation results or error message\n- Console output: Server startup message and configuration status\n\nStruct Description: (Not applicable - the reference code is at function level)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\ttranslate \"github.com/OwO-Network/DeepLX/translate\"\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tcfg := initConfig()\n\n\tfmt.Printf(\"DeepL X has been successfully launched! Listening on %v:%v\\n\", cfg.IP, cfg.Port)\n\tfmt.Println(\"Developed by sjlleo <i@leo.moe> and missuo <me@missuo.me>.\")\n\n\tproxyURL := os.Getenv(\"PROXY\")\n\tif proxyURL == \"\" {\n\t\tproxyURL = cfg.Proxy\n\t}\n\tif proxyURL != \"\" {\n\t\tproxy, err := url.Parse(proxyURL)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to parse proxy URL: %v\", err)\n\t\t}\n\t\thttp.DefaultTransport = &http.Transport{\n\t\t\tProxy: http.ProxyURL(proxy),\n\t\t}\n\t}\n\n\tif cfg.Token != \"\" {\n\t\tfmt.Println(\"Access token is set.\")\n\t}\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tr.Use(cors.Default())\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    http.StatusOK,\n\t\t\t\"message\": \"DeepL Free API, Developed by sjlleo and missuo. Go to /translate with POST. http://github.com/OwO-Network/DeepLX\",\n\t\t})\n\t})\n\n\tr.POST(\"/translate\", authMiddleware(cfg), func(c *gin.Context) {\n\t\treq := PayloadFree{}\n\t\tc.BindJSON(&req)\n\n\t\tsourceLang := req.SourceLang\n\t\ttargetLang := req.TargetLang\n\t\ttranslateText := req.TransText\n\t\ttagHandling := req.TagHandling\n\n\t\tproxyURL := cfg.Proxy\n\n\t\tif tagHandling != \"\" && tagHandling != \"html\" && tagHandling != \"xml\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"code\":    http.StatusBadRequest,\n\t\t\t\t\"message\": \"Invalid tag_handling value. Allowed values are 'html' and 'xml'.\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tresult, err := translate.TranslateByDeepLX(sourceLang, targetLang, translateText, tagHandling, proxyURL, \"\")\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Translation failed: %s\", err)\n\t\t}\n\n\t\tif result.Code == http.StatusOK {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":         http.StatusOK,\n\t\t\t\t\"id\":           result.ID,\n\t\t\t\t\"data\":         result.Data,\n\t\t\t\t\"alternatives\": result.Alternatives,\n\t\t\t\t\"source_lang\":  result.SourceLang,\n\t\t\t\t\"target_lang\":  result.TargetLang,\n\t\t\t\t\"method\":       result.Method,\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(result.Code, gin.H{\n\t\t\t\t\"code\":    result.Code,\n\t\t\t\t\"message\": result.Message,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.Run(fmt.Sprintf(\"%v:%v\", cfg.IP, cfg.Port))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-contrib/cors\"\n\t\"net/http\"\n\t\"strings\"\n\t\"io\"\n\t\"encoding/json\"\n\t\"bytes\"\n\t\"net/url\"\n)\n\ntype Config struct {\n\tIP    string\n\tPort  string\n\tProxy string\n\tToken string\n}\n\nfunc initConfig() *Config {\n\treturn &Config{\n\t\tIP:    \"0.0.0.0\",\n\t\tPort:  \"8080\",\n\t\tProxy: \"\",\n\t\tToken: \"secret_token\",\n\t}\n}\n\nfunc main() {\n\tconfig := initConfig()\n\n\tr := gin.Default()\n\n\tcorsConfig := cors.Config{\n\t\tAllowOrigins: []string{\"*\"},\n\t\tAllowMethods: []string{\"GET\", \"POST\"},\n\t\tAllowHeaders: []string{\"Content-Type\", \"Authorization\"},\n\t\tAllowCredentials: true,\n\t}\n\tr.Use(cors.New(corsConfig))\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"status\": \"Translation service running\",\n\t\t\t\"config\": gin.H{\n\t\t\t\t\"ip\":   config.IP,\n\t\t\t\t\"port\": config.Port,\n\t\t\t},\n\t\t})\n\t})\n\n\tauthGroup := r.Group(\"/translate\")\n\tauthGroup.Use(authMiddleware(config.Token))\n\t{\n\t\tauthGroup.POST(\"/\", translateHandler(config))\n\t}\n\n\taddr := config.IP + \":\" + config.Port\n\tif err := r.Run(addr); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc authMiddleware(token string) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tauthHeader := c.GetHeader(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing authorization token\"})\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(authHeader, \" \")\n\t\tif len(parts) != 2 || parts[0] != \"Bearer\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token format\"})\n\t\t\treturn\n\t\t}\n\n\t\tif parts[1] != token {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t}\n}\n\nfunc translateHandler(config *Config) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tvar reqBody struct {\n\t\t\tText      string `json:\"text\"`\n\t\t\tSourceLang string `json:\"source_lang\"`\n\t\t\tTargetLang string `json:\"target_lang\"`\n\t\t}\n\n\t\tif err := c.ShouldBindJSON(&reqBody); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request body\"})\n\t\t\treturn\n\t\t}\n\n\t\tdeepLXURL := \"https://api.deeplx.org/translate\"\n\t\tclient := createHTTPClient(config.Proxy)\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"text\":         reqBody.Text,\n\t\t\t\"source_lang\":  reqBody.SourceLang,\n\t\t\t\"target_lang\":  reqBody.TargetLang,\n\t\t}\n\n\t\tjsonData, _ := json.Marshal(data)\n\n\t\treq, err := http.NewRequest(\"POST\", deepLXURL, bytes.NewBuffer(jsonData))\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create request\"})\n\t\t\treturn\n\t\t}\n\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"DeepLX API request failed\"})\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\trespBody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to read response\"})\n\t\t\treturn\n\t\t}\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tvar deepLXError map[string]string\n\t\t\tjson.Unmarshal(respBody, &deepLXError)\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": deepLXError[\"message\"]})\n\t\t\treturn\n\t\t}\n\n\t\tc.Data(resp.StatusCode, \"application/json\", respBody)\n\t}\n}\n\nfunc createHTTPClient(proxyURL string) *http.Client {\n\tif proxyURL == \"\" {\n\t\treturn &http.Client{}\n\t}\n\n\tproxy, err := url.Parse(proxyURL)\n\tif err != nil {\n\t\treturn &http.Client{}\n\t}\n\n\treturn &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tProxy: http.ProxyURL(proxy),\n\t\t},\n\t}\n}\n```"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles various routes including a ping endpoint, user lookup, and authenticated admin updates.\n\nFunction Description: The main function initializes a Gin web server with default middleware (Logger and Recovery), sets up route handlers for different HTTP methods, and starts the server on port 8080. It includes:\n1. A simple ping/pong endpoint\n2. A user lookup endpoint with path parameters\n3. An authenticated admin endpoint for updating values\n4. Basic authentication middleware for protected routes\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything, but sends HTTP responses to clients)\n\nNote: The code assumes the existence of a global DB map variable (not shown in the reference) for storing user values. The actual implementation would need to include this or an alternative storage mechanism.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tuser := c.Params.ByName(\"name\")\n\t\tvalue, ok := DB[user]\n\t\tif ok {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"value\": value})\n\t\t} else {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"status\": \"no value\"})\n\t\t}\n\t})\n\n\tauthorized := r.Group(\"/\", gin.BasicAuth(gin.Accounts{\n\t\t\"foo\":  \"bar\",\n\t\t\"manu\": \"123\",\n\t}))\n\n\tauthorized.POST(\"admin\", func(c *gin.Context) {\n\t\tuser := c.MustGet(gin.AuthUserKey).(string)\n\n\t\tvar json struct {\n\t\t\tValue string `json:\"value\" binding:\"required\"`\n\t\t}\n\n\t\tif c.Bind(&json) == nil {\n\t\t\tDB[user] = json.Value\n\t\t\tc.JSON(200, gin.H{\"status\": \"ok\"})\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nvar DB = make(map[string]string)\n\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\trouter.GET(\"/users/:id\", func(c *gin.Context) {\n\t\tid := c.Param(\"id\")\n\t\tif val, exists := DB[id]; exists {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"id\": id, \"value\": val})\n\t\t} else {\n\t\t\tc.AbortWithStatus(http.StatusNotFound)\n\t\t}\n\t})\n\n\trouter.POST(\"/admin/update\", authMiddleware(), func(c *gin.Context) {\n\t\tkey := c.PostForm(\"key\")\n\t\tvalue := c.PostForm(\"value\")\n\t\tDB[key] = value\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"updated\", \"key\": key})\n\t})\n\n\trouter.Run(\":8080\")\n}\n\nfunc authMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tuser, pass, ok := c.Request.BasicAuth()\n\t\tif !ok || user != \"admin\" || pass != \"secret\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Unauthorized\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}\n```"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a simple HTTP server in Go using the Gin framework that handles file uploads via POST requests.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint (\"/upload\") that receives and discards uploaded file data, then responds with \"ok\". The server runs on port 8888.\n\nInput: None (The function takes no direct input parameters, but receives HTTP POST requests with file data in the request body)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and body \"ok\" for successful uploads)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tbody := c.Request.Body\n\t\tio.Copy(io.Discard, body)\n\t\tc.String(http.StatusOK, \"ok\")\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t_, _ = c.FormFile(\"file\")\n\t\tc.String(http.StatusOK, \"ok\")\n\t})\n\tr.Run(\":8888\")\n}"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but configuration is hardcoded: static files are served from \"/tmp\" and the server listens on port 8080)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/\", \"/tmp\")\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello from Gin!\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters. HTTP requests to the \"/ping\" endpoint serve as indirect input.)\n\nOutput: None (The function doesn't return any value directly. It sends HTTP responses to clients as output.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"time\"\n)\n\nfunc main() {\n    r := gin.Default()\n    r.Use(gin.Gzip(gin.DefaultCompression))\n    r.GET(\"/ping\", func(c *gin.Context) {\n        c.String(200, \"pong %d\", time.Now().Unix())\n    })\n    r.Run(\":8080\")\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP client in Go that establishes a connection to a server, sends a message, and handles the connection lifecycle properly.\n\nFunction Description: The function establishes a TCP connection to a specified server address, sends a predefined message (\"hello\"), and prints the number of bytes written or any error encountered. It ensures the connection is properly closed after use.\n\nInput: None (The server address is hardcoded as \"127.0.0.1:49153\" in this example)\n\nOutput: \n- On success: Prints the number of bytes written to the connection (integer)\n- On failure: Prints the error encountered during connection or writing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\tdialer := &net.Dialer{\n\t\tLocalAddr: &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(\"127.0.0.1\"),\n\t\t\tPort: 0,\n\t\t},\n\t}\n\n\tconn, err := dialer.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tt := &wrappedConn{conn}\n\tvar w io.Writer = t\n\tif n, err := w.Write([]byte(\"hello\")); err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(n)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tmessage := \"hello\"\n\tn, err := conn.Write([]byte(message))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(n)\n}"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Implement a TCP client function in Go that establishes a connection to a server, sends data, and receives a response.\n\nFunction Description: The function `Tcp` handles TCP communication with a remote server. It establishes a connection, sends optional data, and reads the server's response. Errors are captured and returned in the response structure. The connection is automatically closed when the function completes.\n\nInput: \n- `ctx context.Context`: Context for managing deadlines and cancellation signals\n- `req *pb.TcpRequest`: Request object containing:\n  - `Address string`: The server address to connect to (format \"host:port\")\n  - `Data string`: Optional data to send to the server\n- `rsp *pb.TcpResponse`: Response object to populate with results\n\nOutput:\n- `error`: Returns an error if address validation fails, otherwise nil (errors during TCP operations are stored in the response)\n- Modifies `rsp` with:\n  - `Status string`: \"OK\" on success or error message\n  - `Data string`: Received data from server (if any)",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\tpb \"github.com/micro/services/ping/proto\"\n)\n\nfunc (p *Ping) Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif len(req.Address) == 0 {\n\t\treturn errors.BadRequest(\"ping.tcp\", \"missing address\")\n\t}\n\n\tc, err := net.Dial(\"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\tdefer c.Close()\n\n\tif len(req.Data) == 0 {\n\t\trsp.Status = \"OK\"\n\t\treturn nil\n\t}\n\n\tfmt.Fprint(c, req.Data)\n\n\tdata, err := bufio.NewReader(c).ReadString('\\n')\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\n\trsp.Status = \"OK\"\n\trsp.Data = data\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif req.Address == \"\" {\n\t\treturn fmt.Errorf(\"address is required\")\n\t}\n\tif _, err := net.ResolveTCPAddr(\"tcp\", req.Address); err != nil {\n\t\treturn fmt.Errorf(\"invalid address: %v\", err)\n\t}\n\tconn, err := (&net.Dialer{}).DialContext(ctx, \"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = \"Connection failed: \" + err.Error()\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\tif req.Data != \"\" {\n\t\tif _, err := conn.Write([]byte(req.Data)); err != nil {\n\t\t\trsp.Status = \"Send failed: \" + err.Error()\n\t\t\treturn nil\n\t\t}\n\t}\n\tdata, err := io.ReadAll(conn)\n\tif err != nil && err != io.EOF {\n\t\trsp.Status = \"Receive failed: \" + err.Error()\n\t\treturn nil\n\t}\n\trsp.Data = string(data)\n\trsp.Status = \"OK\"\n\treturn nil\n}"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a function that establishes a TCP connection to a server, reads all data from the connection, and returns the data as a string.\n\nFunction Description: The function connects to a TCP server at the specified address, reads all available data from the connection, closes the connection, and returns the received data as a string. If the connection fails, it should panic with the error.\n\nInput: \n- address (string): The server address in the format \"host:port\" (e.g., \"localhost:9000\")\n\nOutput: \n- string: The data received from the server\n- error: Returns an error if the connection or read operation fails (though in the reference code it panics on connection error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tbs, _ := ioutil.ReadAll(conn)\n\tfmt.Println(string(bs))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net\"\n)\n\nfunc ReadAllFromTCP(address string) (string, error) {\n\tconn, err := net.Dial(\"tcp\", address)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\tdata, err := io.ReadAll(conn)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Implement a TCP/UDP port scanner with proxy support and configurable source IP addresses.\n\nStruct Description: The Scanner struct provides functionality to check if a specific port is open on a given host, supporting both TCP and UDP protocols. It includes timeout configuration, proxy support, and the ability to specify source IP addresses for the connection.\n\nFields:\n- timeout: time.Duration - Maximum duration to wait for a connection attempt\n- proxyDialer: proxy.Dialer - Optional proxy dialer for making connections through a proxy\n- ListenHandler: *ListenHandler - Configuration for source IP addresses (both IPv4 and IPv6)\n\nMethods:\n- ConnectPort: (host string, p *port.Port, timeout time.Duration) -> (bool, error) - Attempts to connect to the specified port on the given host. Returns true if the port is open/reachable, along with any error that occurred during the connection attempt. The port parameter includes the protocol (TCP/UDP) and port number. The timeout parameter specifies the maximum duration for the connection attempt.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\t\"golang.org/x/net/proxy\"\n)\n\ntype Scanner struct {\n\ttimeout     time.Duration\n\tproxyDialer proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *port.Port, timeout time.Duration) (bool, error) {\n\thostport := net.JoinHostPort(host, fmt.Sprint(p.Port))\n\tvar (\n\t\terr  error\n\t\tconn net.Conn\n\t)\n\tif s.proxyDialer != nil {\n\t\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tproxyDialer, ok := s.proxyDialer.(proxy.ContextDialer)\n\t\tif !ok {\n\t\t\treturn false, errors.New(\"invalid proxy dialer\")\n\t\t}\n\t\tconn, err = proxyDialer.DialContext(ctx, p.Protocol.String(), hostport)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t} else {\n\t\tnetDialer := net.Dialer{\n\t\t\tTimeout: timeout,\n\t\t}\n\t\tif s.ListenHandler.SourceIp4 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIp4}\n\t\t} else if s.ListenHandler.SourceIP6 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIP6}\n\t\t}\n\t\tconn, err = netDialer.Dial(p.Protocol.String(), hostport)\n\t}\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer conn.Close()\n\n\tswitch p.Protocol {\n\tcase protocol.UDP:\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif _, err := conn.Write(nil); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif err := conn.SetReadDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tn, err := io.Copy(io.Discard, conn)\n\t\tif err != nil && !os.IsTimeout(err) {\n\t\t\treturn false, err\n\t\t}\n\t\treturn n > 0, nil\n\t}\n\n\treturn true, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/golang/net/proxy\"\n)\n\ntype Scanner struct {\n\ttimeout      time.Duration\n\tproxyDialer  proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\ntype ListenHandler struct {\n\tIPv4Source net.IP\n\tIPv6Source net.IP\n}\n\ntype Port struct {\n\tProtocol string\n\tNumber   string\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *Port, timeout time.Duration) (bool, error) {\n\tproto := p.Protocol\n\tportNum := p.Number\n\n\tvar targetAddr net.Addr\n\tvar err error\n\tif proto == \"tcp\" {\n\t\ttargetAddr, err = net.ResolveTCPAddr(\"tcp\", net.JoinHostPort(host, portNum))\n\t} else if proto == \"udp\" {\n\t\ttargetAddr, err = net.ResolveUDPAddr(\"udp\", net.JoinHostPort(host, portNum))\n\t} else {\n\t\treturn false, fmt.Errorf(\"unsupported protocol: %s\", proto)\n\t}\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\ttargetIP := targetAddr.(*net.IPAddr).IP\n\tvar sourceIP net.IP\n\tif targetIP.To4() != nil {\n\t\tsourceIP = s.ListenHandler.IPv4Source\n\t} else {\n\t\tsourceIP = s.ListenHandler.IPv6Source\n\t}\n\n\tif proto == \"tcp\" {\n\t\tvar dialer proxy.Dialer\n\t\tif s.proxyDialer != nil {\n\t\t\tdialer = s.proxyDialer\n\t\t} else {\n\t\t\tlocalAddr := &net.TCPAddr{IP: sourceIP, Port: 0}\n\t\t\tdialer = &net.Dialer{\n\t\t\t\tLocalAddr: localAddr,\n\t\t\t\tTimeout:   timeout,\n\t\t\t}\n\t\t}\n\n\t\tconn, err := dialer.Dial(\"tcp\", targetAddr.String())\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tdefer conn.Close()\n\t\treturn true, nil\n\t} else if proto == \"udp\" {\n\t\tudpTargetAddr, ok := targetAddr.(*net.UDPAddr)\n\t\tif !ok {\n\t\t\treturn false, fmt.Errorf(\"invalid UDP address\")\n\t\t}\n\n\t\tlocalUDPAddr := &net.UDPAddr{IP: sourceIP, Port: 0}\n\t\tconn, err := net.ListenUDP(\"udp\", localUDPAddr)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tdefer conn.Close()\n\n\t\tconn.SetReadDeadline(time.Now().Add(timeout))\n\t\tconn.SetWriteDeadline(time.Now().Add(timeout))\n\n\t\t_, err = conn.WriteToUDP([]byte{0}, udpTargetAddr)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\n\t\tbuf := make([]byte, 1024)\n\t\t_, _, err = conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tif netErr, ok := err.(net.Error); ok && netErr.Timeout() {\n\t\t\t\treturn false, nil\n\t\t\t}\n\t\t\treturn false, err\n\t\t}\n\n\t\treturn true, nil\n\t}\n\n\treturn false, fmt.Errorf(\"unsupported protocol: %s\", proto)\n}"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It holds configuration information and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Pointer to configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC server for the specified realm using TCP. Returns the response or error.\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful. Returns the response or accumulated errors.\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a KDC server, including sending data and reading response. Ensures connection is closed when done.",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sort\"\n\t\"bytes\"\n\t\"io\"\n)\n\ntype Config struct {\n\tKDCs map[string]map[int]string\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCs[realm]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no KDCs found for realm %s\", realm)\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar lastErr error\n\tpriorities := make([]int, 0, len(kdcs))\n\tfor p := range kdcs {\n\t\tpriorities = append(priorities, p)\n\t}\n\tsort.Ints(priorities)\n\tfor _, p := range priorities {\n\t\taddr := kdcs[p]\n\t\tconn, err := net.Dial(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tlastErr = err\n\t\t\tcontinue\n\t\t}\n\t\ttcpConn := conn.(*net.TCPConn)\n\t\tresp, err := c.sendTCP(tcpConn, b)\n\t\tif err != nil {\n\t\t\tlastErr = err\n\t\t\tcontinue\n\t\t}\n\t\treturn resp, nil\n\t}\n\treturn nil, lastErr\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tif _, err := conn.Write(b); err != nil {\n\t\treturn nil, err\n\t}\n\tvar resp bytes.Buffer\n\tbuf := make([]byte, 4096)\n\tfor {\n\t\tn, err := conn.Read(buf)\n\t\tif n > 0 {\n\t\t\tif _, err := resp.Write(buf[:n]); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn resp.Bytes(), nil\n}\n```"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a TCP client in Go that establishes a connection to a server, handles data transmission, and manages connection lifecycle with proper error handling and resource cleanup.\n\nStruct Description: The `Client` struct represents a TCP client that connects to a server using a round-robin server selection strategy. It manages server connections, handles policy enforcement, and processes data transmission for both TCP and UDP protocols.\n\nFields:\n- serverPicker: [protocol.ServerPicker] - Selects servers in a round-robin fashion from available server list  \n- policyManager: [policy.Manager] - Manages connection policies including timeouts and user levels\n\nMethods:\n- NewClient: [func(ctx context.Context, config *ClientConfig) (*Client, error)] -> (*Client, error) - Creates a new Client instance with server configurations and policy manager\n- Process: [func(ctx context.Context, link *transport.Link, dialer internet.Dialer) error] -> error - Main processing method that establishes connection, handles handshake, and manages data transfer between client and server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/xtls/xray-core/common\"\n\t\"github.com/xtls/xray-core/common/buf\"\n\t\"github.com/xtls/xray-core/common/errors\"\n\t\"github.com/xtls/xray-core/common/net\"\n\t\"github.com/xtls/xray-core/common/protocol\"\n\t\"github.com/xtls/xray-core/common/retry\"\n\t\"github.com/xtls/xray-core/common/session\"\n\t\"github.com/xtls/xray-core/common/signal\"\n\t\"github.com/xtls/xray-core/common/task\"\n\t\"github.com/xtls/xray-core/core\"\n\t\"github.com/xtls/xray-core/features/policy\"\n\t\"github.com/xtls/xray-core/transport\"\n\t\"github.com/xtls/xray-core/transport/internet\"\n\t\"github.com/xtls/xray-core/transport/internet/stat\"\n)\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\tserverList := protocol.NewServerList()\n\tfor _, rec := range config.Server {\n\t\ts, err := protocol.NewServerSpecFromPB(rec)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(\"failed to get server spec\").Base(err)\n\t\t}\n\t\tserverList.AddServer(s)\n\t}\n\tif serverList.Size() == 0 {\n\t\treturn nil, errors.New(\"0 target server\")\n\t}\n\n\tv := core.MustFromContext(ctx)\n\tc := &Client{\n\t\tserverPicker:  protocol.NewRoundRobinServerPicker(serverList),\n\t\tpolicyManager: v.GetFeature(policy.ManagerType()).(policy.Manager),\n\t}\n\n\treturn c, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\toutbounds := session.OutboundsFromContext(ctx)\n\tob := outbounds[len(outbounds)-1]\n\tif !ob.Target.IsValid() {\n\t\treturn errors.New(\"target not specified.\")\n\t}\n\tob.Name = \"socks\"\n\tob.CanSpliceCopy = 2\n\tdestination := ob.Target\n\n\tvar server *protocol.ServerSpec\n\tvar dest net.Destination\n\tvar conn stat.Connection\n\n\tif err := retry.ExponentialBackoff(5, 100).On(func() error {\n\t\tserver = c.serverPicker.PickServer()\n\t\tdest = server.Destination()\n\t\trawConn, err := dialer.Dial(ctx, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconn = rawConn\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn errors.New(\"failed to find an available destination\").Base(err)\n\t}\n\n\tdefer func() {\n\t\tif err := conn.Close(); err != nil {\n\t\t\terrors.LogInfoInner(ctx, err, \"failed to closed connection\")\n\t\t}\n\t}()\n\n\tp := c.policyManager.ForLevel(0)\n\n\trequest := &protocol.RequestHeader{\n\t\tVersion: socks5Version,\n\t\tCommand: protocol.RequestCommandTCP,\n\t\tAddress: destination.Address,\n\t\tPort:    destination.Port,\n\t}\n\n\tif destination.Network == net.Network_UDP {\n\t\trequest.Command = protocol.RequestCommandUDP\n\t}\n\n\tuser := server.PickUser()\n\tif user != nil {\n\t\trequest.User = user\n\t\tp = c.policyManager.ForLevel(user.Level)\n\t}\n\n\tif err := conn.SetDeadline(time.Now().Add(p.Timeouts.Handshake)); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to set deadline for handshake\")\n\t}\n\tudpRequest, err := ClientHandshake(request, conn, conn)\n\tif err != nil {\n\t\treturn errors.New(\"failed to establish connection to server\").AtWarning().Base(err)\n\t}\n\tif udpRequest != nil {\n\t\tif udpRequest.Address == net.AnyIP || udpRequest.Address == net.AnyIPv6 {\n\t\t\tudpRequest.Address = dest.Address\n\t\t}\n\t}\n\n\tif err := conn.SetDeadline(time.Time{}); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to clear deadline after handshake\")\n\t}\n\n\tvar newCtx context.Context\n\tvar newCancel context.CancelFunc\n\tif session.TimeoutOnlyFromContext(ctx) {\n\t\tnewCtx, newCancel = context.WithCancel(context.Background())\n\t}\n\n\tctx, cancel := context.WithCancel(ctx)\n\ttimer := signal.CancelAfterInactivity(ctx, func() {\n\t\tcancel()\n\t\tif newCancel != nil {\n\t\t\tnewCancel()\n\t\t}\n\t}, p.Timeouts.ConnectionIdle)\n\n\tvar requestFunc func() error\n\tvar responseFunc func() error\n\tif request.Command == protocol.RequestCommandTCP {\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\treturn buf.Copy(link.Reader, buf.NewWriter(conn), buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treturn buf.Copy(buf.NewReader(conn), link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t} else if request.Command == protocol.RequestCommandUDP {\n\t\tudpConn, err := dialer.Dial(ctx, udpRequest.Destination())\n\t\tif err != nil {\n\t\t\treturn errors.New(\"failed to create UDP connection\").Base(err)\n\t\t}\n\t\tdefer udpConn.Close()\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\twriter := &UDPWriter{Writer: udpConn, Request: request}\n\t\t\treturn buf.Copy(link.Reader, writer, buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treader := &UDPReader{Reader: udpConn}\n\t\t\treturn buf.Copy(reader, link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t}\n\n\tif newCtx != nil {\n\t\tctx = newCtx\n\t}\n\n\tresponseDonePost := task.OnSuccess(responseFunc, task.Close(link.Writer))\n\tif err := task.Run(ctx, requestFunc, responseDonePost); err != nil {\n\t\treturn errors.New(\"connection ends\").Base(err)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n)\n\ntype contextReader struct {\n\tctx context.Context\n\tr   io.Reader\n}\n\nfunc (cr *contextReader) Read(p []byte) (int, error) {\n\tselect {\n\tcase <-cr.ctx.Done():\n\t\treturn 0, cr.ctx.Err()\n\tdefault:\n\t}\n\treturn cr.r.Read(p)\n}\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\ntype ClientConfig struct {\n\t// Configuration fields\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\t// Implementation of NewClient\n\treturn &Client{}, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link net.Conn, dialer net.Dialer) error {\n\tserverAddr, err := c.serverPicker.PickServer()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"server selection failed: %w\", err)\n\t}\n\n\tconn, err := dialer.DialContext(ctx, \"tcp\", serverAddr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"connection failed: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\ttimeout := c.policyManager.GetTimeout()\n\tconn.SetDeadline(time.Now().Add(timeout))\n\n\tdone := make(chan error, 2)\n\tgo func() {\n\t\t_, err := io.Copy(conn, &contextReader{ctx, link})\n\t\tdone <- err\n\t}()\n\tgo func() {\n\t\t_, err := io.Copy(link, &contextReader{ctx, conn})\n\t\tdone <- err\n\t}()\n\n\terr1 := <-done\n\terr2 := <-done\n\n\tif err1 != nil && !isExpectedError(err1) {\n\t\treturn err1\n\t}\n\tif err2 != nil && !isExpectedError(err2) {\n\t\treturn err2\n\t}\n\treturn nil\n}\n\nfunc isExpectedError(err error) bool {\n\tif err == nil || err == io.EOF {\n\t\treturn true\n\t}\n\tif opErr, ok := err.(*net.OpError); ok && opErr.Err == io.EOF {\n\t\treturn true\n\t}\n\treturn false\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Implement a Go struct that handles DNS queries over UDP with context support and deadline management.\n\nStruct Description: DNSEndpoint represents a DNS server endpoint capable of performing DNS queries with context support, deadline management, and transaction ID matching.\n\nFields:\nAddr: string - The address of the DNS server in \"host:port\" format\n\nMethods:\nExchange: (ctx context.Context, payload, buf []byte) -> (n int, err error) - Performs a DNS query exchange:\n  - Establishes a UDP connection to the server\n  - Sets deadline from context if available\n  - Generates random transaction ID\n  - Sends DNS query payload\n  - Reads response and validates transaction ID\n  - Returns number of bytes read or any error\n  - Automatically closes connection when done",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\td := &net.Dialer{}\n\tc, err := d.DialContext(ctx, \"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"dial: %v\", err)\n\t}\n\tdefer c.Close()\n\tif t, ok := ctx.Deadline(); ok {\n\t\t_ = c.SetDeadline(t)\n\t}\n\tif _, err := rand.Read(payload[:2]); err != nil {\n\t\treturn 0, err\n\t}\n\t_, err = c.Write(payload)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"write: %v\", err)\n\t}\n\tid := uint16(payload[0])<<8 | uint16(buf[1])\n\tfor {\n\t\tif n, err = c.Read(buf[:514]); err != nil {\n\t\t\treturn n, fmt.Errorf(\"read: %v\", err)\n\t\t}\n\t\tif n < 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif id != uint16(buf[0])<<8|uint16(buf[1]) {\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n\treturn\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"fmt\"\n\t\"net\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (d *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", d.Addr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer conn.Close()\n\n\tif err := ctx.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tconn.SetDeadline(deadline)\n\t}\n\n\tctxDone := ctx.Done()\n\tdone := make(chan struct{})\n\tgo func() {\n\t\tselect {\n\t\tcase <-ctxDone:\n\t\t\tconn.Close()\n\t\tcase <-done:\n\t\t}\n\t}()\n\tdefer func() {\n\t\tdone <- struct{}{}\n\t}()\n\n\tvar tid [2]byte\n\tif _, err := rand.Read(tid[:]); err != nil {\n\t\treturn 0, err\n\t}\n\n\tif len(payload) < 2 {\n\t\treturn 0, fmt.Errorf(\"payload too short\")\n\t}\n\tpayload[0], payload[1] = tid[0], tid[1]\n\n\tif _, err := conn.Write(payload); err != nil {\n\t\treturn 0, err\n\t}\n\n\tn, err = conn.Read(buf)\n\tif err != nil {\n\t\treturn n, err\n\t}\n\n\tif n < 2 || buf[0] != tid[0] || buf[1] != tid[1] {\n\t\treturn n, fmt.Errorf(\"transaction id mismatch\")\n\t}\n\n\treturn n, nil\n}"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It maintains configuration and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC for the specified realm, handling multiple KDC addresses and error cases\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a single KDC connection",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"sort\"\n)\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs, ok := c.Config.KDCs[realm]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no KDCs found for realm %s\", realm)\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar keys []int\n\tfor k := range kdcs {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Ints(keys)\n\n\tvar lastErr error\n\tfor _, k := range keys {\n\t\taddr := kdcs[k]\n\t\tconn, err := net.Dial(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tlastErr = fmt.Errorf(\"failed to dial %s: %v\", addr, err)\n\t\t\tcontinue\n\t\t}\n\t\ttcpConn := conn.(*net.TCPConn)\n\t\tresp, err := c.sendTCP(tcpConn, b)\n\t\tif err != nil {\n\t\t\tlastErr = fmt.Errorf(\"failed to communicate with %s: %v\", addr, err)\n\t\t\tcontinue\n\t\t}\n\t\treturn resp, nil\n\t}\n\treturn nil, lastErr\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\n\tif _, err := conn.Write(b); err != nil {\n\t\treturn nil, fmt.Errorf(\"write failed: %v\", err)\n\t}\n\n\tresp, err := io.ReadAll(conn)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"read failed: %v\", err)\n\t}\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Implement a TCP client in Go that periodically sends metrics data to an OpenTSDB server, handling different types of metrics (counters, gauges, histograms, meters, and timers) with appropriate formatting.\n\nStruct Description: The OpenTSDBConfig struct contains configuration parameters for connecting to an OpenTSDB server and sending metrics data at regular intervals.\n\nFields:\nAddr: *net.TCPAddr - The TCP address of the OpenTSDB server\nRegistry: Registry - The metrics registry containing all metrics to be reported\nFlushInterval: time.Duration - The interval at which metrics are sent to the server\nDurationUnit: time.Duration - The time unit for converting timer metrics\nPrefix: string - The prefix to be added to all metric names\n\nMethods:\nOpenTSDBWithConfig: OpenTSDBWithConfig(c OpenTSDBConfig) - Starts a ticker that periodically calls openTSDB with the given configuration at the specified FlushInterval\nopenTSDB: openTSDB(c *OpenTSDBConfig) error - Establishes a TCP connection to the OpenTSDB server, formats and sends all metrics from the registry, and returns any error that occurs during the process",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\n\ntype OpenTSDBConfig struct {\n\tAddr          *net.TCPAddr\n\tRegistry      Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tfor _ = range time.Tick(c.FlushInterval) {\n\t\tif err := openTSDB(&c); nil != err {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tshortHostname := getShortHostname()\n\tnow := time.Now().Unix()\n\tdu := float64(c.DurationUnit)\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif nil != err {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\tw := bufio.NewWriter(conn)\n\tc.Registry.Each(func(name string, i interface{}) {\n\t\tswitch metric := i.(type) {\n\t\tcase Counter:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, metric.Count(), shortHostname)\n\t\tcase Gauge:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %d host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase GaugeFloat64:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %f host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase Histogram:\n\t\t\th := metric.Snapshot()\n\t\t\tps := h.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, h.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, h.Min(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, h.Max(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, h.Mean(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, h.StdDev(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4], shortHostname)\n\t\tcase Meter:\n\t\t\tm := metric.Snapshot()\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, m.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, m.RateMean(), shortHostname)\n\t\tcase Timer:\n\t\t\tt := metric.Snapshot()\n\t\t\tps := t.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, t.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, t.Min()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, t.Max()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, t.Mean()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, t.StdDev()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean-rate %d %.2f host=%s\\n\", c.Prefix, name, now, t.RateMean(), shortHostname)\n\t\t}\n\t\tw.Flush()\n\t})\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\n\ntype OpenTSDBConfig struct {\n\tAddr          *net.TCPAddr\n\tRegistry      Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\ntype Counter interface {\n\tCount() int64\n}\n\ntype Gauge interface {\n\tValue() float64\n}\n\ntype Histogram interface {\n\tCount() int64\n\tSum() float64\n\tMin() float64\n\tMax() float64\n}\n\ntype Meter interface {\n\tCount() int64\n\tRate() float64\n}\n\ntype Timer interface {\n\tCount() int64\n\tSum() time.Duration\n\tMin() time.Duration\n\tMax() time.Duration\n}\n\ntype Registry interface {\n\tEachCounter(func(string, Counter))\n\tEachGauge(func(string, Gauge))\n\tEachHistogram(func(string, Histogram))\n\tEachMeter(func(string, Meter))\n\tEachTimer(func(string, Timer))\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tticker := time.NewTicker(c.FlushInterval)\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tif err := openTSDB(&c); err != nil {\n\t\t\t\t\tlog.Println(\"Failed to send metrics to OpenTSDB:\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tnow := time.Now().Unix()\n\twriter := bufio.NewWriter(conn)\n\n\tc.Registry.EachCounter(func(name string, counter Counter) {\n\t\tfullName := c.Prefix + name\n\t\tval := counter.Count()\n\t\tfmt.Fprintf(writer, \"%s %d %d\\ntype=counter\\n\", fullName, val, now)\n\t})\n\n\tc.Registry.EachGauge(func(name string, gauge Gauge) {\n\t\tfullName := c.Prefix + name\n\t\tval := gauge.Value()\n\t\tfmt.Fprintf(writer, \"%s %f %d\\ntype=gauge\\n\", fullName, val, now)\n\t})\n\n\tc.Registry.EachHistogram(func(name string, histogram Histogram) {\n\t\tfullName := c.Prefix + name\n\t\tcount := histogram.Count()\n\t\tsum := histogram.Sum()\n\t\tmin := histogram.Min()\n\t\tmax := histogram.Max()\n\t\tfmt.Fprintf(writer, \"%s.count %d %d\\ntype=histogram\\n\", fullName, count, now)\n\t\tfmt.Fprintf(writer, \"%s.sum %f %d\\ntype=histogram\\n\", fullName, sum, now)\n\t\tfmt.Fprintf(writer, \"%s.min %f %d\\ntype=histogram\\n\", fullName, min, now)\n\t\tfmt.Fprintf(writer, \"%s.max %f %d\\ntype=histogram\\n\", fullName, max, now)\n\t})\n\n\tc.Registry.EachMeter(func(name string, meter Meter) {\n\t\tfullName := c.Prefix + name\n\t\tcount := meter.Count()\n\t\trate := meter.Rate()\n\t\tfmt.Fprintf(writer, \"%s.count %d %d\\ntype=meter\\n\", fullName, count, now)\n\t\tfmt.Fprintf(writer, \"%s.rate %f %d\\ntype=meter\\n\", fullName, rate, now)\n\t})\n\n\tc.Registry.EachTimer(func(name string, timer Timer) {\n\t\tfullName := c.Prefix + name\n\t\tcount := timer.Count()\n\t\tsum := float64(timer.Sum()) / float64(c.DurationUnit)\n\t\tmin := float64(timer.Min()) / float64(c.DurationUnit)\n\t\tmax := float64(timer.Max()) / float64(c.DurationUnit)\n\t\tfmt.Fprintf(writer, \"%s.count %d %d\\ntype=timer\\n\", fullName, count, now)\n\t\tfmt.Fprintf(writer, \"%s.sum %f %d\\ntype=timer\\n\", fullName, sum, now)\n\t\tfmt.Fprintf(writer, \"%s.min %f %d\\ntype=timer\\n\", fullName, min, now)\n\t\tfmt.Fprintf(writer, \"%s.max %f %d\\ntype=timer\\n\", fullName, max, now)\n\t})\n\n\treturn writer.Flush()\n}"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Implement a TCP client in Go that can establish connections to servers, handle TLS if required, and manage timeouts for network operations.\n\nStruct Description: The Client struct represents a configurable TCP client capable of handling both plain TCP and TLS connections, with various timeout controls and DNS message exchange functionality.\n\nFields:\n\nNet: string - Network type (e.g., \"tcp\", \"tcp-tls\", \"udp\")\nUDPSize: uint16 - UDP buffer size for DNS messages\nTLSConfig: *tls.Config - TLS configuration for secure connections\nDialer: *net.Dialer - Custom dialer for connection establishment\nTimeout: time.Duration - Overall operation timeout\nDialTimeout: time.Duration - Timeout specifically for connection establishment\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nTsigSecret: map[string]string - TSIG authentication secrets\nSingleInflight: bool - Whether to use singleflight for duplicate request suppression\ngroup: singleflight - Internal singleflight group for request deduplication\n\nMethods:\n\nDial: (address string) -> (*Conn, error) - Establishes a connection to the specified address, handling TLS if configured\nExchange: (m *Msg, address string) -> (*Msg, time.Duration, error) - Performs a complete DNS message exchange with timeout handling\nexchange: (m *Msg, a string) -> (*Msg, time.Duration, error) - Internal method for performing the actual message exchange\ngetTimeoutForRequest: (timeout time.Duration) -> time.Duration - Calculates the appropriate timeout for a request considering various configuration options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tNet       string\n\tUDPSize   uint16\n\tTLSConfig *tls.Config\n\tDialer    *net.Dialer\n\tTimeout   time.Duration\n\tDialTimeout    time.Duration\n\tReadTimeout    time.Duration\n\tWriteTimeout   time.Duration\n\tTsigSecret     map[string]string\n\tSingleInflight bool\n\tgroup          singleflight\n}\n\nfunc (c *Client) Dial(address string) (conn *Conn, err error) {\n\tvar d net.Dialer\n\tif c.Dialer == nil {\n\t\td = net.Dialer{Timeout: c.getTimeoutForRequest(c.dialTimeout())}\n\t} else {\n\t\td = *c.Dialer\n\t}\n\n\tnetwork := c.Net\n\tif network == \"\" {\n\t\tnetwork = \"udp\"\n\t}\n\n\tuseTLS := strings.HasPrefix(network, \"tcp\") && strings.HasSuffix(network, \"-tls\")\n\n\tconn = new(Conn)\n\tif useTLS {\n\t\tnetwork = strings.TrimSuffix(network, \"-tls\")\n\t\tconn.Conn, err = tls.DialWithDialer(&d, network, address, c.TLSConfig)\n\t} else {\n\t\tconn.Conn, err = d.Dial(network, address)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (r *Msg, rtt time.Duration, err error) {\n\tif !c.SingleInflight {\n\t\treturn c.exchange(m, address)\n\t}\n\n\tq := m.Question[0]\n\tkey := fmt.Sprintf(\"%s:%d:%d\", q.Name, q.Qtype, q.Qclass)\n\tr, rtt, err, shared := c.group.Do(key, func() (*Msg, time.Duration, error) {\n\t\treturn c.exchange(m, address)\n\t})\n\tif r != nil && shared {\n\t\tr = r.Copy()\n\t}\n\n\treturn r, rtt, err\n}\n\nfunc (c *Client) exchange(m *Msg, a string) (r *Msg, rtt time.Duration, err error) {\n\tvar co *Conn\n\n\tco, err = c.Dial(a)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer co.Close()\n\n\topt := m.IsEdns0()\n\tif opt != nil && opt.UDPSize() >= MinMsgSize {\n\t\tco.UDPSize = opt.UDPSize()\n\t}\n\tif opt == nil && c.UDPSize >= MinMsgSize {\n\t\tco.UDPSize = c.UDPSize\n\t}\n\n\tco.TsigSecret = c.TsigSecret\n\tt := time.Now()\n\tco.SetWriteDeadline(t.Add(c.getTimeoutForRequest(c.writeTimeout())))\n\tif err = co.WriteMsg(m); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tco.SetReadDeadline(time.Now().Add(c.getTimeoutForRequest(c.readTimeout())))\n\tr, err = co.ReadMsg()\n\tif err == nil && r.Id != m.Id {\n\t\terr = ErrId\n\t}\n\trtt = time.Since(t)\n\treturn r, rtt, err\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tvar requestTimeout time.Duration\n\tif c.Timeout != 0 {\n\t\trequestTimeout = c.Timeout\n\t} else {\n\t\trequestTimeout = timeout\n\t}\n\tif c.Dialer != nil && c.Dialer.Timeout != 0 {\n\t\tif c.Dialer.Timeout < requestTimeout {\n\t\t\trequestTimeout = c.Dialer.Timeout\n\t\t}\n\t}\n\treturn requestTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tNet          string\n\tUDPSize      uint16\n\tTLSConfig    *tls.Config\n\tDialer       *net.Dialer\n\tTimeout      time.Duration\n\tDialTimeout  time.Duration\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tTsigSecret   map[string]string\n\tSingleInflight bool\n\tgroup        singleflight.Group\n}\n\ntype singleflight struct {\n\tGroup\n}\n\ntype Group struct{}\n\nfunc (g *Group) Do(key string, fn func() (interface{}, error)) (interface{}, bool, error) {\n\tv, err := fn()\n\treturn v, false, err\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tif c.Timeout > 0 && timeout > c.Timeout {\n\t\treturn c.Timeout\n\t}\n\treturn timeout\n}\n\nfunc (c *Client) Dial(address string) (net.Conn, error) {\n\tvar network string\n\tswitch c.Net {\n\tcase \"tcp\", \"tcp-tls\":\n\t\tnetwork = \"tcp\"\n\tcase \"udp\":\n\t\tnetwork = \"udp\"\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unsupported network: %s\", c.Net)\n\t}\n\n\tdialer := c.Dialer\n\tif dialer == nil {\n\t\tdialer = &net.Dialer{\n\t\t\tTimeout: c.getTimeoutForRequest(c.DialTimeout),\n\t\t}\n\t}\n\n\tconn, err := dialer.Dial(network, address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif c.Net == \"tcp-tls\" {\n\t\ttlsConfig := c.TLSConfig\n\t\tif tlsConfig == nil {\n\t\t\ttlsConfig = &tls.Config{}\n\t\t}\n\n\t\tif tlsConfig.ServerName == \"\" {\n\t\t\thost, _, _ := net.SplitHostPort(address)\n\t\t\ttlsConfig.ServerName = host\n\t\t}\n\n\t\ttlsConn := tls.Client(conn, tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\tconn.Close()\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif err := tlsConn.VerifyHostname(tlsConfig.ServerName); err != nil {\n\t\t\tconn.Close()\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn tlsConn, nil\n\t}\n\n\treturn conn, nil\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (*Msg, time.Duration, error) {\n\tif c.SingleInflight {\n\t\tkey := fmt.Sprintf(\"%s:%s\", address, m.String())\n\t\tresult, _, _ := c.group.Do(key, func() (interface{}, error) {\n\t\t\treturn c.exchange(m, address)\n\t\t})\n\t\tif result == nil {\n\t\t\treturn nil, 0, fmt.Errorf(\"singleflight error\")\n\t\t}\n\t\treturn result.(*exchangeResult).Resp, result.(*exchangeResult).Duration, nil\n\t}\n\treturn c.exchange(m, address)\n}\n\nfunc (c *Client) exchange(m *Msg, a string) (*Msg, time.Duration, error) {\n\tconn, err := c.Dial(a)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer conn.Close()\n\n\tstart := time.Now()\n\n\twriteTimeout := c.getTimeoutForRequest(c.WriteTimeout)\n\tif writeTimeout > 0 {\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(writeTimeout)); err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t}\n\n\tmsgBytes, err := m.Pack()\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tbuf := make([]byte, 2)\n\tbinary.BigEndian.PutUint16(buf, uint16(len(msgBytes)))\n\tif _, err := conn.Write(buf); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tif _, err := conn.Write(msgBytes); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\treadTimeout := c.getTimeoutForRequest(c.ReadTimeout)\n\tif readTimeout > 0 {\n\t\tif err := conn.SetReadDeadline(time.Now().Add(readTimeout)); err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t}\n\n\tvar respLen uint16\n\tif err := binary.Read(conn, binary.BigEndian, &respLen); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\trespBytes := make([]byte, respLen)\n\tif _, err := io.ReadFull(conn, respBytes); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tresp, err := UnpackMsg(respBytes)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tduration := time.Since(start)\n\treturn resp, duration, nil\n}\n\ntype Msg struct{}\n\nfunc (m *Msg) String() string { return \"mock\" }\nfunc (m *Msg) Pack() ([]byte, error) {\n\treturn []byte(\"mockmsg\"), nil\n}\n\nfunc UnpackMsg(b []byte) (*Msg, error) {\n\treturn &Msg{}, nil\n}\n\ntype exchangeResult struct {\n\tResp     *Msg\n\tDuration time.Duration\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a Git daemon in Go that handles TCP connections for Git operations, including upload-pack and upload-archive services, with connection management, timeout handling, and access control.\n\nStruct Description: The GitDaemon struct represents a TCP server that handles Git protocol connections. It manages client connections, enforces limits, and processes Git service requests.\n\nFields:\n\nctx: [context.Context] - Context for cancellation and timeout propagation  \naddr: [string] - TCP address to listen on  \nfinished: [chan struct{}] - Channel to signal server shutdown  \nconns: [connections] - Track active connections (wrapper around map[net.Conn]struct{})  \ncfg: [*config.Config] - Server configuration  \nbe: [*backend.Backend] - Backend for repository access and authentication  \nwg: [sync.WaitGroup] - Wait group for graceful shutdown  \nonce: [sync.Once] - Ensure cleanup happens once  \nlogger: [*log.Logger] - Structured logger  \ndone: [atomic.Bool] - Atomic flag indicating server shutdown status  \n\nMethods:\n\nNewGitDaemon: [func(context.Context) (*GitDaemon, error)] -> Creates a new GitDaemon instance with context-derived configuration  \nListenAndServe: [func() error] -> Starts listening on configured address and serves connections  \nServe: [func(net.Listener) error] -> Handles incoming connections on provided listener (main server loop)  \nhandleClient: [func(net.Conn)] -> Processes individual client connections (private method)  \n\nHelper Types:\n\nserverConn: [struct] - Wraps net.Conn with timeout handling  \nconnections: [struct] - Thread-safe connection tracking with sync.Map  \n\nKey Behaviors:\n1. Implements exponential backoff for temporary connection errors\n2. Enforces maximum connection limits\n3. Handles Git protocol packets (pktline format)\n4. Validates repository paths and access permissions\n5. Processes both git-upload-pack and git-upload-archive services\n6. Implements idle and maximum timeout handling\n7. Provides clean shutdown via context cancellation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/charmbracelet/log\"\n\t\"github.com/charmbracelet/soft-serve/pkg/access\"\n\t\"github.com/charmbracelet/soft-serve/pkg/backend\"\n\t\"github.com/charmbracelet/soft-serve/pkg/config\"\n\t\"github.com/charmbracelet/soft-serve/pkg/git\"\n\t\"github.com/charmbracelet/soft-serve/pkg/utils\"\n\t\"github.com/go-git/go-git/v5/plumbing/format/pktline\"\n)\n\ntype GitDaemon struct {\n\tctx      context.Context\n\taddr     string\n\tfinished chan struct{}\n\tconns    connections\n\tcfg      *config.Config\n\tbe       *backend.Backend\n\twg       sync.WaitGroup\n\tonce     sync.Once\n\tlogger   *log.Logger\n\tdone     atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := config.FromContext(ctx)\n\taddr := cfg.Git.ListenAddr\n\td := &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     addr,\n\t\tfinished: make(chan struct{}, 1),\n\t\tcfg:      cfg,\n\t\tbe:       backend.FromContext(ctx),\n\t\tconns:    connections{m: make(map[net.Conn]struct{})},\n\t\tlogger:   log.FromContext(ctx).WithPrefix(\"gitdaemon\"),\n\t}\n\treturn d, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\tlistener, err := net.Listen(\"tcp\", d.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn d.Serve(listener)\n}\n\nfunc (d *GitDaemon) Serve(listener net.Listener) error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\n\td.wg.Add(1)\n\tdefer d.wg.Done()\n\tdefer listener.Close()\n\n\tvar tempDelay time.Duration\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.finished:\n\t\t\t\treturn ErrServerClosed\n\t\t\tdefault:\n\t\t\t\td.logger.Debugf(\"git: error accepting connection: %v\", err)\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay > max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif d.conns.Size()+1 >= d.cfg.Git.MaxConnections {\n\t\t\td.logger.Debugf(\"git: max connections reached, closing %s\", conn.RemoteAddr())\n\t\t\td.fatal(conn, git.ErrMaxConnections)\n\t\t\tcontinue\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\td.handleClient(conn)\n\t\t\td.wg.Done()\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tidleTimeout := time.Duration(d.cfg.Git.IdleTimeout) * time.Second\n\tc := &serverConn{\n\t\tConn:          conn,\n\t\tidleTimeout:   idleTimeout,\n\t\tcloseCanceler: cancel,\n\t}\n\tif d.cfg.Git.MaxTimeout > 0 {\n\t\tdur := time.Duration(d.cfg.Git.MaxTimeout) * time.Second\n\t\tc.maxDeadline = time.Now().Add(dur)\n\t}\n\td.conns.Add(c)\n\tdefer func() {\n\t\td.conns.Close(c)\n\t}()\n\n\terrc := make(chan error, 1)\n\n\ts := pktline.NewScanner(c)\n\tgo func() {\n\t\tif !s.Scan() {\n\t\t\tif err := s.Err(); err != nil {\n\t\t\t\terrc <- err\n\t\t\t}\n\t\t}\n\t\terrc <- nil\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tif err := ctx.Err(); err != nil {\n\t\t\td.logger.Debugf(\"git: connection context error: %v\", err)\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t}\n\t\treturn\n\tcase err := <-errc:\n\t\tif nerr, ok := err.(net.Error); ok && nerr.Timeout() {\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t\treturn\n\t\t} else if err != nil {\n\t\t\td.logger.Debugf(\"git: error scanning pktline: %v\", err)\n\t\t\td.fatal(c, git.ErrSystemMalfunction)\n\t\t\treturn\n\t\t}\n\n\t\tline := s.Bytes()\n\t\tsplit := bytes.SplitN(line, []byte{' '}, 2)\n\t\tif len(split) != 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\tservice := git.Service(split[0])\n\t\tswitch service {\n\t\tcase git.UploadPackService:\n\t\tcase git.UploadArchiveService:\n\t\tdefault:\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\topts := bytes.SplitN(split[1], []byte{0}, 3)\n\t\tif len(opts) < 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\thost := strings.TrimPrefix(string(opts[1]), \"host=\")\n\t\textraParams := map[string]string{}\n\n\t\tif len(opts) > 2 {\n\t\t\tbuf := bytes.TrimPrefix(opts[2], []byte{0})\n\t\t\tfor _, o := range bytes.Split(buf, []byte{0}) {\n\t\t\t\topt := string(o)\n\t\t\t\tif opt == \"\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tkv := strings.SplitN(opt, \"=\", 2)\n\t\t\t\tif len(kv) != 2 {\n\t\t\t\t\td.logger.Errorf(\"git: invalid option %q\", opt)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\textraParams[kv[0]] = kv[1]\n\t\t\t}\n\t\t}\n\n\t\tbe := d.be\n\t\tif !be.AllowKeyless(ctx) {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tname := utils.SanitizeRepo(string(opts[0]))\n\t\td.logger.Debugf(\"git: connect %s %s %s\", c.RemoteAddr(), service, name)\n\t\tdefer d.logger.Debugf(\"git: disconnect %s %s %s\", c.RemoteAddr(), service, name)\n\n\t\trepo := name + \".git\"\n\t\treposDir := filepath.Join(d.cfg.DataPath, \"repos\")\n\t\tif err := git.EnsureWithin(reposDir, repo); err != nil {\n\t\t\td.logger.Debugf(\"git: error ensuring repo path: %v\", err)\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tif _, err := d.be.Repository(ctx, repo); err != nil {\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tauth := be.AccessLevel(ctx, name, \"\")\n\t\tif auth < access.ReadOnlyAccess {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tenvs := []string{\n\t\t\t\"SOFT_SERVE_REPO_NAME=\" + name,\n\t\t\t\"SOFT_SERVE_REPO_PATH=\" + filepath.Join(reposDir, repo),\n\t\t\t\"SOFT_SERVE_HOST=\" + host,\n\t\t\t\"SOFT_SERVE_LOG_PATH=\" + filepath.Join(d.cfg.DataPath, \"log\", \"hooks.log\"),\n\t\t}\n\n\t\tif len(extraParams) > 0 {\n\t\t\tvar gitProto string\n\t\t\tfor k, v := range extraParams {\n\t\t\t\tif len(gitProto) > 0 {\n\t\t\t\t\tgitProto += \":\"\n\t\t\t\t}\n\t\t\t\tgitProto += k + \"=\" + v\n\t\t\t}\n\t\t\tenvs = append(envs, \"GIT_PROTOCOL=\"+gitProto)\n\t\t}\n\n\t\tenvs = append(envs, d.cfg.Environ()...)\n\n\t\tcmd := git.ServiceCommand{\n\t\t\tStdin:  c,\n\t\t\tStdout: c,\n\t\t\tStderr: c,\n\t\t\tEnv:    envs,\n\t\t\tDir:    filepath.Join(reposDir, repo),\n\t\t}\n\n\t\tif err := service.Handler(ctx, cmd); err != nil {\n\t\t\td.logger.Debugf(\"git: error handling request: %v\", err)\n\t\t\td.fatal(c, err)\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "```go\npackage gitdaemon\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\t\"log\"\n\t\"sync/atomic\"\n)\n\ntype GitDaemon struct {\n\tctx      context.Context\n\taddr     string\n\tfinished chan struct{}\n\tconns    connections\n\tcfg      *config.Config\n\tbe       *backend.Backend\n\twg       sync.WaitGroup\n\tonce     sync.Once\n\tlogger   *log.Logger\n\tdone     atomic.Bool\n}\n\ntype connections struct {\n\tm sync.Map\n}\n\nfunc (c *connections) add(conn net.Conn) {\n\tc.m.Store(conn, struct{}{})\n}\n\nfunc (c *connections) remove(conn net.Conn) {\n\tc.m.Delete(conn)\n}\n\nfunc (c *connections) count() int {\n\treturn c.m.Len()\n}\n\ntype serverConn struct {\n\tconn          net.Conn\n\treadTimeout   time.Duration\n\twriteTimeout  time.Duration\n}\n\nfunc (sc *serverConn) Read(b []byte) (int, error) {\n\tif sc.readTimeout > 0 {\n\t\terr := sc.conn.SetReadDeadline(time.Now().Add(sc.readTimeout))\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\treturn sc.conn.Read(b)\n}\n\nfunc (sc *serverConn) Write(b []byte) (int, error) {\n\tif sc.writeTimeout > 0 {\n\t\terr := sc.conn.SetWriteDeadline(time.Now().Add(sc.writeTimeout))\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t}\n\treturn sc.conn.Write(b)\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := &config.Config{}\n\tbe := &backend.Backend{}\n\tlogger := log.New(log.Writer(), \"gitdaemon: \", log.Flags())\n\td := &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     cfg.Addr,\n\t\tfinished: make(chan struct{}),\n\t\tconns:    connections{},\n\t\tcfg:      cfg,\n\t\tbe:       be,\n\t\tlogger:   logger,\n\t\tdone:     atomic.Bool{},\n\t}\n\treturn d, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tbackoff := 1 * time.Second\n\tfor {\n\t\tln, err := net.Listen(\"tcp\", d.addr)\n\t\tif err == nil {\n\t\t\treturn d.Serve(ln)\n\t\t}\n\t\tif !isTemporary(err) {\n\t\t\treturn err\n\t\t}\n\t\td.logger.Printf(\"Listen error: %v, retrying in %v\", err, backoff)\n\t\ttime.Sleep(backoff)\n\t\tbackoff = time.Duration(float64(backoff) * 1.5)\n\t\tif backoff > 30*time.Second {\n\t\t\tbackoff = 30 * time.Second\n\t\t}\n\t}\n}\n\nfunc isTemporary(err error) bool {\n\tnetErr, ok := err.(net.Error)\n\treturn ok && netErr.Temporary()\n}\n\nfunc (d *GitDaemon) Serve(ln net.Listener) error {\n\tdefer ln.Close()\n\tgo func() {\n\t\tselect {\n\t\tcase <-d.ctx.Done():\n\t\t\td.Shutdown()\n\t\tcase <-d.finished:\n\t\t}\n\t}()\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tif d.done.Load() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\td.logger.Printf(\"Temporary error accepting connection: %v\", err)\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\td.handleConnection(conn)\n\t}\n}\n\nfunc (d *GitDaemon) handleConnection(conn net.Conn) {\n\tif d.conns.count() >= d.cfg.MaxConnections {\n\t\td.logger.Printf(\"Max connections reached, closing new connection\")\n\t\tconn.Close()\n\t\treturn\n\t}\n\td.conns.add(conn)\n\td.wg.Add(1)\n\tgo func() {\n\t\tdefer d.wg.Done()\n\t\tdefer d.conns.remove(conn)\n\t\td.handleClient(conn)\n\t}()\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tsc := &serverConn{\n\t\tconn:          conn,\n\t\treadTimeout:   d.cfg.ReadTimeout,\n\t\twriteTimeout:  d.cfg.WriteTimeout,\n\t}\n\n\tservice, repoPath, err := readServiceAndRepo(sc)\n\tif err != nil {\n\t\td.logger.Printf(\"Error reading service: %v\", err)\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tif !isValidRepoPath(repoPath) {\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tif !d.be.AuthorizeUser(service, repoPath) {\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tswitch service {\n\tcase \"git-upload-pack\":\n\t\thandleUploadPack(sc, repoPath, d.be)\n\tcase \"git-upload-archive\":\n\t\thandleUploadArchive(sc, repoPath, d.be)\n\tdefault:\n\t\tconn.Close()\n\t}\n}\n\nfunc readServiceAndRepo(conn net.Conn) (string, string, error) {\n\t// Placeholder for reading service and repo from the connection\n\treturn \"git-upload-pack\", \"repo.git\", nil\n}\n\nfunc isValidRepoPath(path string) bool {\n\t// Validate path against allowed patterns\n\treturn true\n}\n\nfunc handleUploadPack(conn net.Conn, path string, be *backend.Backend) {\n\t// Handle git-upload-pack logic\n}\n\nfunc handleUploadArchive(conn net.Conn, path string, be *backend.Backend) {\n\t// Handle git-upload-archive logic\n}\n\nfunc (d *GitDaemon) Shutdown() {\n\td.once.Do(func() {\n\t\td.done.Store(true)\n\t\tclose(d.finished)\n\t\td.conns.m.Range(func(key, value interface{}) bool {\n\t\t\tconn := key.(net.Conn)\n\t\t\tconn.Close()\n\t\t\treturn true\n\t\t})\n\t})\n}\n```"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management. The server should be able to start, accept connections, read data from clients, and properly shut down while cleaning up resources.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management capabilities. It maintains state about active connections and provides methods to start, serve, and manage the server lifecycle.\n\nFields:\n\nAddr: [string] - The network address to listen on (e.g., \":8080\")\nNet: [string] - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: [Handler] - The handler for processing incoming requests\nReadTimeout: [time.Duration] - Maximum duration for reading a request\nWriteTimeout: [time.Duration] - Maximum duration for writing a response\nIdleTimeout: [func() time.Duration] - Function returning idle connection timeout\nlock: [sync.RWMutex] - Protects concurrent access to server state\nstarted: [bool] - Indicates if server is running\nshutdown: [chan struct{}] - Channel for shutdown signaling\nconns: [map[net.Conn]struct{}] - Map of active connections\n\nMethods:\n\nListenAndServe: [Name]() -> [error] - Starts the server and begins accepting connections\nserveTCP: [Name](net.Listener) -> [error] - Main TCP serving loop that accepts connections\nserveTCPConn: [Name](*sync.WaitGroup, net.Conn) -> [] - Handles an individual TCP connection\nreadTCP: [Name](net.Conn, time.Duration) -> ([]byte, error) - Reads data from a TCP connection\ninit: [Name]() -> [] - Initializes server resources\nisStarted: [Name]() -> [bool] - Checks if server is running\ngetIdleTimeout: [Name]() -> [time.Duration] - Returns idle timeout duration\ngetReadTimeout: [Name]() -> [time.Duration] - Returns read timeout duration",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := net.Listen(srv.Net, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer wg.Done()\n\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := srv.getIdleTimeout()\n\n\tfor srv.isStarted() {\n\t\tm, err := srv.readTCP(rw, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n}\n\nfunc (srv *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\tvar length uint16\n\tif err := binary.Read(conn, binary.BigEndian, &length); err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := make([]byte, length)\n\tif _, err := io.ReadFull(conn, m); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn m, nil\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getIdleTimeout() time.Duration {\n\tif srv.IdleTimeout != nil {\n\t\treturn srv.IdleTimeout()\n\t}\n\treturn tcpIdleTimeout\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tHandler     func(net.Conn)\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tlock         sync.RWMutex\n\tstarted      bool\n\tshutdown     chan struct{}\n\tconns        map[net.Conn]struct{}\n}\n\nfunc (s *Server) init() {\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getIdleTimeout() time.Duration {\n\tif s.IdleTimeout != nil {\n\t\treturn s.IdleTimeout()\n\t}\n\treturn 0\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\treturn s.ReadTimeout\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif err := s.init(); err != nil {\n\t\treturn err\n\t}\n\tif s.isStarted() {\n\t\treturn errors.New(\"server already started\")\n\t}\n\tln, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\treturn s.serveTCP(ln)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tdefer ln.Close()\n\tgo func() {\n\t\t<-s.shutdown\n\t\tln.Close()\n\t\ts.lock.RLock()\n\t\tfor conn := range s.conns {\n\t\t\tconn.Close()\n\t\t}\n\t\ts.lock.RUnlock()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := ln.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif opErr, ok := err.(*net.OpError); ok && opErr.Temporary() {\n\t\t\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ts.lock.Lock()\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\t\t\tgo s.serveTCPConn(conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn\n\t\tdefault:\n\t\t\treadTimeout := s.getReadTimeout()\n\t\t\tif readTimeout > 0 {\n\t\t\t\tconn.SetReadDeadline(time.Now().Add(readTimeout))\n\t\t\t}\n\t\t\twriteTimeout := s.WriteTimeout\n\t\t\tif writeTimeout > 0 {\n\t\t\t\tconn.SetWriteDeadline(time.Now().Add(writeTimeout))\n\t\t\t}\n\t\t\tdata, err := s.readTCP(conn, readTimeout)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif s.Handler != nil {\n\t\t\t\ts.Handler(conn)\n\t\t\t}\n\t\t\tidleTimeout := s.getIdleTimeout()\n\t\t\tif idleTimeout > 0 {\n\t\t\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (s *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tif timeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(timeout))\n\t}\n\tbuffer := make([]byte, 4096)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buffer[:n], nil\n}"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, handles client requests, and manages connection lifecycle with configurable timeouts.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - The request handler interface\nReadTimeout: time.Duration - Maximum duration for reading the entire request\nWriteTimeout: time.Duration - Maximum duration for writing the response\nIdleTimeout: func() time.Duration - Function returning the maximum idle connection duration\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Main server loop that accepts and handles connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual client connection\ninit() - Initializes server resources\nisStarted() bool - Returns server running status\ngetReadTimeout() time.Duration - Returns configured read timeout or default",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, false, false)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\tlimit := maxTCPQueries\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n\tif srv.Handler == nil {\n\t\tsrv.Handler = DefaultServeMux\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tServe(conn net.Conn)\n}\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tHandler     Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown    chan struct{}\n\tconns       map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.init()\n\tif s.isStarted() {\n\t\treturn fmt.Errorf(\"server already started\")\n\t}\n\n\tln, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ln.Close()\n\n\ts.lock.Lock()\n\ts.started = true\n\ts.lock.Unlock()\n\n\treturn s.serveTCP(ln)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tdefer ln.Close()\n\n\tgo func() {\n\t\t<-s.shutdown\n\t\tln.Close()\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := ln.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif opErr, ok := err.(*net.OpError); ok && opErr.Temporary() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\ts.lock.Lock()\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\n\t\t\tgo s.serveTCPConn(conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tidleTimeout := s.IdleTimeout()\n\tif idleTimeout > 0 {\n\t\tif err := conn.SetReadDeadline(time.Now().Add(idleTimeout)); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(idleTimeout)); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\treadTimeout := s.getReadTimeout()\n\tif readTimeout > 0 {\n\t\tif err := conn.SetReadDeadline(time.Now().Add(readTimeout)); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\ts.Handler.Serve(conn)\n\n\twriteTimeout := s.WriteTimeout\n\tif writeTimeout > 0 {\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(writeTimeout)); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (s *Server) init() {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tif s.conns == nil {\n\t\ts.conns = make(map[net.Conn]struct{})\n\t}\n\tif s.shutdown == nil {\n\t\ts.shutdown = make(chan struct{})\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.ReadTimeout > 0 {\n\t\treturn s.ReadTimeout\n\t}\n\treturn 0\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection lifecycles, timeouts, and provide hooks for customizing reader/writer behavior.\n\nStruct Description: The Server struct represents a configurable TCP server that can handle DNS queries (though this could be adapted for other protocols). It manages listener lifecycle, connection pooling, and provides various timeout and security configurations.\n\nFields:\n\nAddr: string - The address to listen on (e.g., \":domain\")\nNet: string - Network type (\"tcp\", \"tcp4\", \"tcp6\", or their TLS variants)\nListener: net.Listener - The active TCP listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection (not used in TCP mode)\nHandler: Handler - Handler for incoming requests\nUDPSize: int - UDP buffer size\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nIdleTimeout: func() time.Duration - Function returning idle timeout duration\nTsigProvider: TsigProvider - TSIG provider for DNS\nTsigSecret: map[string]string - TSIG secrets\nNotifyStartedFunc: func() - Callback when server starts\nDecorateReader: DecorateReader - Function to decorate the reader\nDecorateWriter: DecorateWriter - Function to decorate the writer\nMaxTCPQueries: int - Maximum queries per connection\nReusePort: bool - Enable SO_REUSEPORT\nReuseAddr: bool - Enable SO_REUSEADDR\nMsgAcceptFunc: MsgAcceptFunc - Function to filter incoming messages\nlock: sync.RWMutex - Mutex for concurrent access protection\nstarted: bool - Server running state\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\nudpPool: sync.Pool - Pool for UDP buffers\n\nMethods:\n\nListenAndServe: () -> error - Starts the server and begins accepting connections\nserveTCP: (net.Listener) -> error - Internal method to serve TCP connections\nserveTCPConn: (*sync.WaitGroup, net.Conn) -> () - Handles an individual TCP connection\nisStarted: () -> bool - Checks if server is running (internal)\ninit: () -> () - Initializes server state (internal)\ngetReadTimeout: () -> time.Duration - Gets current read timeout (internal)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tListener net.Listener\n\tTLSConfig *tls.Config\n\tPacketConn net.PacketConn\n\tHandler   Handler\n\tUDPSize int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tTsigProvider TsigProvider\n\tTsigSecret map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries int\n\tReusePort bool\n\tReuseAddr bool\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigProvider: srv.tsigProvider(), tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"binary\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr             string\n\tNet              string\n\tListener         net.Listener\n\tTLSConfig        *tls.Config\n\tPacketConn       net.PacketConn\n\tHandler          Handler\n\tUDPSize          int\n\tReadTimeout      time.Duration\n\tWriteTimeout     time.Duration\n\tIdleTimeout      func() time.Duration\n\tTsigProvider     TsigProvider\n\tTsigSecret       map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader   DecorateReader\n\tDecorateWriter   DecorateWriter\n\tMaxTCPQueries    int\n\tReusePort        bool\n\tReuseAddr        bool\n\tMsgAcceptFunc    MsgAcceptFunc\n\tlock             sync.RWMutex\n\tstarted          bool\n\tshutdown         chan struct{}\n\tconns            map[net.Conn]struct{}\n\tudpPool          sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tsrv.init()\n\tsrv.lock.RLock()\n\tif srv.started {\n\t\tsrv.lock.RUnlock()\n\t\treturn nil\n\t}\n\tsrv.lock.RUnlock()\n\n\tln, err := net.Listen(srv.Net, srv.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif srv.TLSConfig != nil {\n\t\tln = tls.NewListener(ln, srv.TLSConfig)\n\t}\n\tsrv.Listener = ln\n\tgo srv.serveTCP(ln)\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\treturn nil\n}\n\nfunc (srv *Server) serveTCP(ln net.Listener) {\n\tdefer ln.Close()\n\tsrv.lock.Lock()\n\tsrv.started = true\n\tsrv.lock.Unlock()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-srv.shutdown:\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[conn] = struct{}{}\n\t\tsrv.lock.Unlock()\n\n\t\tgo srv.serveTCPConn(nil, conn)\n\t}\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer conn.Close()\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, conn)\n\tsrv.lock.Unlock()\n\n\tfor {\n\t\tvar rd time.Time\n\t\tif srv.ReadTimeout > 0 {\n\t\t\trd = time.Now().Add(srv.ReadTimeout)\n\t\t} else {\n\t\t\tit := srv.IdleTimeout()\n\t\t\trd = time.Now().Add(it)\n\t\t}\n\t\tconn.SetReadDeadline(rd)\n\n\t\treader := conn\n\t\tif srv.DecorateReader != nil {\n\t\t\treader = srv.DecorateReader(conn)\n\t\t}\n\n\t\tbr := bufio.NewReader(reader)\n\t\tvar length [2]byte\n\t\tif _, err := br.Read(length[:]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tmsgLen := int(binary.BigEndian.Uint16(length[:]))\n\t\tmsg := make([]byte, msgLen)\n\t\tif _, err := br.Read(msg); err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tif srv.MsgAcceptFunc != nil {\n\t\t\tif err := srv.MsgAcceptFunc(msg); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\twriter := conn\n\t\tif srv.WriteTimeout > 0 {\n\t\t\tconn.SetWriteDeadline(time.Now().Add(srv.WriteTimeout))\n\t\t}\n\t\tif srv.DecorateWriter != nil {\n\t\t\twriter = srv.DecorateWriter(conn)\n\t\t}\n\n\t\tbw := bufio.NewWriter(writer)\n\t\tif _, err := bw.Write(length[:]); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif _, err := bw.Write(msg); err != nil {\n\t\t\treturn\n\t\t}\n\t\tif err := bw.Flush(); err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tif srv.MaxTCPQueries > 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tdefer srv.lock.RUnlock()\n\treturn srv.started\n}\n\nfunc (srv *Server) init() {\n\tif srv.conns == nil {\n\t\tsrv.conns = make(map[net.Conn]struct{})\n\t}\n\tif srv.shutdown == nil {\n\t\tsrv.shutdown = make(chan struct{})\n\t}\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout > 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\tif srv.IdleTimeout != nil {\n\t\treturn srv.IdleTimeout()\n\t}\n\treturn 0\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a TCP echo server in Go that listens for incoming connections on a specified port, reads data from clients, and echoes the same data back to them.\n\nFunction Description: The function implements a simple TCP server that continuously accepts client connections, reads data from each connection, and writes the same data back (echo). It handles network errors appropriately and ensures resources are cleaned up.\n\nInput: None (The port number is hardcoded as \":9000\" in the implementation)\n\nOutput: None (The function runs indefinitely until interrupted, with all output being network communication with clients)",
    "Canonical_solution": "import \"net\"\n\nfunc main() {\n\tln, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tfor {\n\t\t\tbs := make([]byte, 1024)\n\t\t\tn, err := conn.Read(bs)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t_, err = conn.Write(bs[:n])\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Accept error:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tbuf := make([]byte, 1024)\n\t\t\tfor {\n\t\t\t\tn, err := c.Read(buf)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"Read error:\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif _, err := c.Write(buf[:n]); err != nil {\n\t\t\t\t\tlog.Println(\"Write error:\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}(conn)\n\t}\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and graceful shutdown capabilities.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - Interface for handling incoming requests\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nShutdownContext(context.Context) error - Gracefully shuts down the server with context support\nisStarted() bool - Helper method to check server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw, writer: w}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) ShutdownContext(ctx context.Context) error {\n\tsrv.lock.Lock()\n\tif !srv.started {\n\t\tsrv.lock.Unlock()\n\t\treturn &Error{err: \"server not started\"}\n\t}\n\n\tsrv.started = false\n\n\tif srv.Listener != nil {\n\t\tsrv.Listener.Close()\n\t}\n\n\tfor rw := range srv.conns {\n\t\trw.SetReadDeadline(aLongTimeAgo)\n\t}\n\n\tsrv.lock.Unlock()\n\n\tvar ctxErr error\n\tselect {\n\tcase <-srv.shutdown:\n\tcase <-ctx.Done():\n\t\tctxErr = ctx.Err()\n\t}\n\n\treturn ctxErr\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tServeTCP(conn net.Conn)\n}\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tlock         sync.RWMutex\n\tstarted      bool\n\tshutdown     chan struct{}\n\tconns        map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.RLock()\n\tstarted := s.started\n\ts.lock.RUnlock()\n\tif !started {\n\t\tln, err := net.Listen(s.Net, s.Addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.lock.Lock()\n\t\tif s.started {\n\t\t\ts.lock.Unlock()\n\t\t\treturn nil\n\t\t}\n\t\ts.started = true\n\t\ts.shutdown = make(chan struct{})\n\t\ts.conns = make(map[net.Conn]struct{})\n\t\ts.lock.Unlock()\n\t\tif err := s.serveTCP(ln); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tdefer ln.Close()\n\tvar wg sync.WaitGroup\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\twg.Wait()\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := ln.Accept()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ts.lock.Lock()\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\t\t\twg.Add(1)\n\t\t\tgo s.serveTCPConn(&wg, conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer wg.Done()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\tidleTimeout := s.IdleTimeout()\n\tif s.ReadTimeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t}\n\tif s.WriteTimeout > 0 {\n\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t}\n\tif idleTimeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t}\n\ts.Handler.ServeTCP(conn)\n}\n\nfunc (s *Server) ShutdownContext(ctx context.Context) error {\n\ts.lock.RLock()\n\tstarted := s.started\n\ts.lock.RUnlock()\n\tif !started {\n\t\treturn nil\n\t}\n\tclose(s.shutdown)\n\ts.lock.RLock()\n\tconns := make([]net.Conn, 0, len(s.conns))\n\tfor conn := range s.conns {\n\t\tconns = append(conns, conn)\n\t}\n\ts.lock.RUnlock()\n\tfor _, conn := range conns {\n\t\tconn.Close()\n\t}\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tcase <-time.After(5 * time.Second):\n\t\treturn nil\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Unix domain socket server in Go that listens for incoming connections, handles client communication, and processes received data through a product function. The server should manage connection limits, timeouts, and proper resource cleanup.\n\nStruct Description: The `unix` struct represents a Unix domain socket server with configuration options for path, permissions, and connection handling. It manages the socket lifecycle and processes incoming data.\n\nFields:\n- name: string - Identifier for the server instance\n- config: *Config - Pointer to configuration containing path, mode, timeout, max connections, and max bytes\n- done: chan struct{} - Channel to signal server shutdown\n- eventPool: *event.Pool - Pool for managing event objects\n\nMethods:\n- ProductLoop(productFunc api.ProductFunc) -> void - Main server loop that listens for connections and delegates handling to worker goroutines. Takes a product function for processing events.\n- handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) -> void - Handles individual client connections, reads data, and passes it to the product function. Manages connection timeouts and cleanup.\n- checkBind(path string) -> error - Validates and prepares the socket path by removing existing files if necessary\n- chmod(path string, mode string) -> error - Sets filesystem permissions on the socket file",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/loggie-io/loggie/pkg/core/api\"\n\t\"github.com/loggie-io/loggie/pkg/core/event\"\n\t\"github.com/loggie-io/loggie/pkg/core/log\"\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/net/netutil\"\n)\n\ntype unix struct {\n\tname      string\n\tconfig    *Config\n\tdone      chan struct{}\n\teventPool *event.Pool\n}\n\nfunc (k *unix) ProductLoop(productFunc api.ProductFunc) {\n\tlog.Info(\"%s start product loop\", k.String())\n\n\tif err := checkBind(k.config.Path); err != nil {\n\t\tlog.Error(\"check unix sock path error: %+v\", err)\n\t\treturn\n\t}\n\n\tlistener, err := net.Listen(\"unix\", k.config.Path)\n\tif err != nil {\n\t\tlog.Error(\"setup unix listener failed: %v\", err)\n\t\treturn\n\t}\n\n\tif err := chmod(k.config.Path, k.config.Mode); err != nil {\n\t\tlog.Error(\"chmod unix path %s with %s failed: %v\", k.config.Path, k.config.Mode, err)\n\t\treturn\n\t}\n\n\tif k.config.MaxConnections > 0 {\n\t\tlistener = netutil.LimitListener(listener, k.config.MaxConnections)\n\t}\n\n\tdefer listener.Close()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tfor {\n\t\tselect {\n\t\tcase <-k.done:\n\t\t\treturn\n\n\t\tdefault:\n\t\t}\n\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Warn(\"unix sock listener accept connection failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo k.handleConn(ctx, conn, productFunc)\n\t}\n}\n\nfunc (k *unix) handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) {\n\tdefer conn.Close()\n\n\tbuf := bufio.NewReader(conn)\n\tscan := bufio.NewScanner(buf)\n\n\tinitBuffer := make([]byte, k.config.MaxBytes/4)\n\tscan.Buffer(initBuffer, k.config.MaxBytes)\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\n\t\tdefault:\n\t\t}\n\n\t\tif err := conn.SetDeadline(time.Now().Add(k.config.Timeout)); err != nil {\n\t\t\tlog.Warn(\"set connection timeout error: %v\", err)\n\t\t}\n\n\t\tif !scan.Scan() {\n\t\t\tif scan.Err() != nil {\n\t\t\t\tlog.Warn(\"scan connection error: %v\", scan.Err())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tbreak\n\t\t}\n\n\t\tbody := scan.Bytes()\n\t\tcopyBody := make([]byte, len(body))\n\t\tcopy(copyBody, body)\n\t\te := k.eventPool.Get()\n\t\te.Fill(e.Meta(), e.Header(), copyBody)\n\n\t\tproductFunc(e)\n\t}\n}\n\nfunc checkBind(path string) error {\n\t_, err := os.Lstat(path)\n\tif err != nil {\n\t\tif os.IsNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\n\t\treturn errors.WithMessagef(err, \"stat path %s failed\", path)\n\t}\n\n\tif err := os.Remove(path); err != nil {\n\t\treturn errors.WithMessagef(err, \"remove path %s failed\", path)\n\t}\n\n\treturn nil\n}\n\nfunc chmod(path string, mode string) error {\n\tparsed, err := strconv.ParseUint(mode, 8, 32)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err = os.Chmod(path, os.FileMode(parsed)); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"net/os\"\n\t\"time\"\n)\n\ntype unix struct {\n\tname      string\n\tconfig    *Config\n\tdone      chan struct{}\n\teventPool *event.Pool\n}\n\ntype Config struct {\n\tPath     string\n\tMode     string\n\tTimeout  time.Duration\n\tMaxConns int\n\tMaxBytes int\n}\n\nfunc (u *unix) ProductLoop(productFunc api.ProductFunc) {\n\tif err := u.checkBind(u.config.Path); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\taddr := &net.UnixAddr{Name: u.config.Path, Net: \"unix\"}\n\tlistener, err := net.ListenUnix(\"unix\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer listener.Close()\n\tdefer os.Remove(u.config.Path)\n\n\tgo func() {\n\t\t<-u.done\n\t\tlistener.Close()\n\t}()\n\n\tsem := make(chan struct{}, u.config.MaxConns)\n\tfor {\n\t\tconn, err := listener.AcceptUnix()\n\t\tif err != nil {\n\t\t\tif errors.Is(err, net.ErrClosed) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Println(\"Accept error:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tsem <- struct{}{}\n\t\tgo func() {\n\t\t\tdefer func() { <-sem }()\n\t\t\tu.handleConn(context.Background(), conn, productFunc)\n\t\t}()\n\t}\n}\n\nfunc (u *unix) handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) {\n\tconn.SetReadDeadline(time.Now().Add(u.config.Timeout))\n\tconn.SetWriteDeadline(time.Now().Add(u.config.Timeout))\n\n\tbuf := make([]byte, u.config.MaxBytes)\n\tn, err := conn.Read(buf)\n\tif err != nil && !errors.Is(err, os.ErrDeadlineExceeded) {\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tif n == len(buf) && err == nil {\n\t\tconn.Close()\n\t\treturn\n\t}\n\n\tevent := u.eventPool.Get()\n\tevent.Data = append(event.Data[:0], buf[:n]...)\n\tproductFunc(event)\n\tu.eventPool.Put(event)\n\tconn.Close()\n}\n\nfunc (u *unix) checkBind(path string) error {\n\tif err := os.Remove(path); err != nil && !os.IsNotExist(err) {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (u *unix) chmod(path string, modeStr string) error {\n\tmode, err := strconv.ParseInt(modeStr, 8, 32)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn os.Chmod(path, os.FileMode(mode))\n}"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Implement a gRPC client in Go that establishes a secure connection to a gRPC server with authentication, sends a request, and processes the response.\n\nFunction Description: The function `doClientWork` demonstrates how to create a gRPC client that connects to a server, authenticates using provided credentials, sends a \"Hello\" request, and logs the response. It handles connection setup, authentication, RPC call execution, and connection cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes, but these could be parameterized in a real implementation)\n\nOutput: None (The function logs results to stdout but doesn't return any values)\n\n---\n\nTask Description: Implement an authentication struct for gRPC credentials in Go that provides request metadata and specifies transport security requirements.\n\nStruct Description: The `Authentication` struct implements gRPC's `credentials.PerRPCCredentials` interface to provide per-RPC credentials (login/password) for gRPC requests.\n\nFields:\nLogin: string - The username for authentication\nPassword: string - The password for authentication\n\nMethods:\nGetRequestMetadata: (context.Context, ...string) -> (map[string]string, error) - Returns the authentication metadata (login/password) to be included in RPC requests\nRequireTransportSecurity: () -> bool - Indicates whether transport security is required (returns false in this implementation)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(context.Context, ...string) (map[string]string, error) {\n\treturn map[string]string{\"login\": a.Login, \"password\": a.Password}, nil\n}\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tauth := Authentication{\n\t\tLogin:    \"gopher\",\n\t\tPassword: \"password\",\n\t}\n\n\tconn, err := grpc.Dial(\"localhost\"+port, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&auth))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tc := NewGreeterClient(conn)\n\n\tr, err := c.SayHello(context.Background(), &HelloRequest{Name: \"gopher\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"doClientWork: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(ctx context.Context, uri ...string) (map[string]string, error) {\n\treturn map[string]string{\n\t\t\"login\":    a.Login,\n\t\t\"password\": a.Password,\n\t}, nil\n}\n\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:50051\",\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithPerRPCCredentials(&Authentication{\n\t\t\tLogin:    \"user\",\n\t\t\tPassword: \"pass\",\n\t\t}))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\treq := &HelloRequest{Name: \"World\"}\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Response: %s\", resp.Message)\n}\n\ntype HelloServiceClient interface {\n\tSayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)\n}\n\ntype HelloRequest struct {\n\tName string\n}\n\ntype HelloResponse struct {\n\tMessage string\n}\n\nfunc NewHelloServiceClient(conn *grpc.ClientConn) HelloServiceClient {\n\treturn &helloServiceClient{conn: conn}\n}\n\ntype helloServiceClient struct {\n\tconn *grpc.ClientConn\n}\n\nfunc (c *helloServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {\n\treturn &HelloResponse{Message: \"Hello, \" + in.Name}, nil\n}"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Implement a gRPC client function in Go that establishes a bidirectional streaming connection with a gRPC server, sends a chat message, and continuously receives responses from the server until the connection is closed.\n\nFunction Description: The function `Test` is a test function that demonstrates bidirectional streaming gRPC communication. It connects to a gRPC server, sends a chat message, and asynchronously receives responses from the server. The function handles connection errors, stream creation errors, and different types of response errors (including EOF when the server closes the connection).\n\nInput: None (The function is a test function with no explicit input parameters, but it connects to a predefined server address \"127.0.0.1:8089\")\n\nOutput: None (The function doesn't return any value but prints received messages and errors to stdout)\n\nNote: The function uses a deferred connection closure and runs the send operation in a separate goroutine to allow simultaneous sending and receiving. The main loop continues receiving until an EOF error or other fatal error occurs.",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"io\"\n\t\"log\"\n\t\"testing\"\n\n\t\"learning_tools/grpc/bidirectional_streaming_rpc/proto\"\n)\nfunc Test(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tdefer conn.Close()\n\tclient := proto.NewChatServiceClient(conn)\n\tctx := context.Background()\n\tstream, err := client.Chat(ctx)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tgo func() {\n\t\tif err := stream.Send(&proto.Request{Input: \"\u804a\u5929\"}); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"\u670d\u52a1\u7aef\u7ed3\u675f\u901a\u77e5:\", err.Error())\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(\"\u63a5\u53d7\u6570\u636e\u9519\u8bef:\", err.Error())\n\t\t}\n\t\tfmt.Println(\"\u670d\u52a1\u7aef\u8fd4\u56de:\", response.Output)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"grpc-chat/pb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc Test() {\n\tserverAddr := \"127.0.0.1:8089\"\n\tconn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewChatServiceClient(conn)\n\tstream, err := client.Chat(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create stream: %v\", err)\n\t}\n\n\tgo func() {\n\t\tmsg := &pb.Message{Text: \"Hello, Server!\"}\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\tlog.Printf(\"Send error: %v\", err)\n\t\t}\n\t}()\n\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"Server closed the connection.\")\n\t\t\treturn\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Received error: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"Received: %s\\n\", resp.GetText())\n\t}\n}"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Create a Go function that establishes a secure gRPC client connection to a server, performs a math operation (addition) using the gRPC service, and returns the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:8092 using TLS credentials from a specified certificate file. It creates a client for the MathService, sends a request with two integer arguments, and returns the server's response containing the result of the addition operation.\n\nInput: \n- None (all configuration is hardcoded in the function)\n\nOutput:\n- Prints the response code and message from the gRPC server to stdout\n- Returns nothing (void function)\n\nNote: The function handles connection establishment, service client creation, request sending, and connection cleanup automatically. Error conditions will cause the function to panic.",
    "Canonical_solution": "import (\n\t\"google.golang.org/grpc\"\n\t\"grpcSSLCode/message\"\n\t\"context\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"fmt\"\n\t\"google.golang.org/grpc/credentials\"\n)\nfunc main() {\n\tcreds, err := credentials.NewClientTLSFromFile(\"./keys/server.pem\", \"go-grpc-example\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tgrpc.WithInsecure()\n\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer conn.Close()\n\n\tserviceClient := message.NewMathServiceClient(conn)\n\n\taddArgs := message.RequestArgs{Args1: 3, Args2: 5}\n\n\tresponse, err := serviceClient.AddMethod(context.Background(), &addArgs)\n\tif err != nil {\n\t\tgrpclog.Fatal(err.Error())\n\t}\n\n\tfmt.Println(response.GetCode(), response.GetMessage())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"mathpb\"\n)\n\nfunc RunClient() {\n\ttlsCert, err := credentials.NewClientTLSFromFile(\"server.crt\", \"localhost\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(tlsCert))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := mathpb.NewMathServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\treq := &mathpb.AddRequest{A: 5, B: 3}\n\tresp, err := client.Add(ctx, req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"Code: %d, Message: %s\\n\", resp.Code, resp.Message)\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a Go function that makes a gRPC call to a test service's EmptyCall method, handling connection establishment and cleanup.\n\nFunction Description: The function invokes the EmptyCall RPC method on a gRPC test service. It establishes a connection to the server with timeout and blocking options, makes the RPC call, and properly closes the connection. The function handles both connection errors and RPC call errors.\n\nInput:\n- address: string - The server address to connect to\n- dialOptions: []grpc.DialOption - List of gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tdialOptions = append(dialOptions, grpc.WithBlock())\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewTestServiceClient(clientConn)\n\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\ttestpb \"path/to/testpb\"\n)\n\nfunc emptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tconn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := testpb.NewTestServiceClient(conn)\n\tresp, err := client.EmptyCall(context.Background(), &testpb.Empty{})\n\treturn resp, err\n}"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Implement a function to register a mapper with a gRPC server using the Device Management Interface (DMI) API. The function should establish a connection to the server, send a registration request, and return the list of devices and device models provided by the server.\n\nFunction Description: The `RegisterMapper` function connects to a gRPC server using Unix domain socket, sends a mapper registration request with the provided configuration, and returns the device and device model lists from the server response. It handles connection establishment, timeout context, and proper cleanup of resources.\n\nInput: \n- `withData` [bool]: A flag indicating whether to include data in the registration request.\n\nOutput:\n- `[]*dmiapi.Device`: A slice of pointers to Device objects returned by the server.\n- `[]*dmiapi.DeviceModel`: A slice of pointers to DeviceModel objects returned by the server.\n- `error`: An error object if any step fails, nil otherwise.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/common\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tresp, err := c.MapperRegister(ctx, &dmiapi.MapperRegisterRequest{\n\t\tWithData: withData,\n\t\tMapper: &dmiapi.MapperInfo{\n\t\t\tName:       cfg.Common.Name,\n\t\t\tVersion:    cfg.Common.Version,\n\t\t\tApiVersion: cfg.Common.APIVersion,\n\t\t\tProtocol:   cfg.Common.Protocol,\n\t\t\tAddress:    []byte(cfg.GrpcServer.SocketPath),\n\t\t\tState:      common.DeviceStatusOK,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.DeviceList, resp.ModelList, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "```go\nimport (\n\t\"context\"\n\t\"time\"\n\t\"google.golang.org/grpc\"\n\t\"dmiapi\"\n)\n\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tconn, err := grpc.Dial(\"unix:///var/run/dmi.sock\", grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewDeviceManagementClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tresp, err := client.RegisterMapper(ctx, &dmiapi.RegisterMapperRequest{WithData: withData})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.Devices, resp.DeviceModels, nil\n}\n```"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a remote server, performs profiling operations based on input flags, and handles connection cleanup.\n\nFunction Description: The function `remoteCommand` establishes an insecure gRPC connection to a specified address, creates a profiling client, and executes either profiling enable/disable operations or retrieves a snapshot based on command-line flags. It handles connection timeouts and ensures proper connection closure.\n\nInput:\n- Context (implicit through package variables)\n- Command-line flags (implicit through package variables):\n  - `flagAddress`: string - gRPC server address to connect to\n  - `flagTimeout`: int - connection timeout in seconds (0 for no timeout)\n  - `flagEnableProfiling`: bool - whether to enable profiling\n  - `flagDisableProfiling`: bool - whether to disable profiling\n  - `flagRetrieveSnapshot`: bool - whether to retrieve a snapshot\n  - `flagSnapshot`: string - snapshot identifier (when retrieving)\n\nOutput:\n- error - returns nil on success, or an error describing what went wrong during execution",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tppb \"google.golang.org/grpc/profiling/proto\"\n)\nfunc remoteCommand() error {\n\tctx := context.Background()\n\tif *flagTimeout > 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(context.Background(), time.Duration(*flagTimeout)*time.Second)\n\t\tdefer cancel()\n\t}\n\n\tlogger.Infof(\"dialing %s\", *flagAddress)\n\tcc, err := grpc.Dial(*flagAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Errorf(\"cannot dial %s: %v\", *flagAddress, err)\n\t\treturn err\n\t}\n\tdefer cc.Close()\n\n\tc := ppb.NewProfilingClient(cc)\n\n\tif *flagEnableProfiling || *flagDisableProfiling {\n\t\treturn setEnabled(ctx, c, *flagEnableProfiling)\n\t}\n\tif *flagRetrieveSnapshot {\n\t\treturn retrieveSnapshot(ctx, c, *flagSnapshot)\n\t}\n\treturn fmt.Errorf(\"what should I do with the remote target?\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"errors\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tempty \"github.com/golang/protobuf/ptypes/empty\"\n)\n\nfunc remoteCommand() error {\n\tvar dialCtx context.Context\n\tvar cancel context.CancelFunc\n\tif flagTimeout > 0 {\n\t\tdialCtx, cancel = context.WithTimeout(context.Background(), time.Duration(flagTimeout)*time.Second)\n\t} else {\n\t\tdialCtx, cancel = context.WithCancel(context.Background())\n\t}\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(dialCtx, flagAddress, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\toperations := 0\n\tif flagEnableProfiling {\n\t\toperations++\n\t}\n\tif flagDisableProfiling {\n\t\toperations++\n\t}\n\tif flagRetrieveSnapshot {\n\t\toperations++\n\t}\n\tif operations != 1 {\n\t\treturn errors.New(\"exactly one of --enable, --disable, or --retrieve must be specified\")\n\t}\n\n\tclient := profiling.NewProfilingServiceClient(conn)\n\n\tif flagEnableProfiling {\n\t\t_, err = client.EnableProfiling(context.Background(), &empty.Empty{})\n\t} else if flagDisableProfiling {\n\t\t_, err = client.DisableProfiling(context.Background(), &empty.Empty{})\n\t} else if flagRetrieveSnapshot {\n\t\tif flagSnapshot == \"\" {\n\t\t\treturn errors.New(\"snapshot ID required when retrieving\")\n\t\t}\n\t\t_, err = client.RetrieveSnapshot(context.Background(), &SnapshotRequest{Id: flagSnapshot})\n\t}\n\n\treturn err\n}"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, publishes messages, and handles connection cleanup.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, publishes two predefined messages, and ensures proper connection closure. It demonstrates basic gRPC client operations including connection establishment, RPC calls, and resource cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes)\n\nOutput: None (The function publishes messages to the server and logs errors if any occur)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"github.com/example/pubsub\"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubSubClient(conn)\n\n\tmsgs := []string{\"Message One\", \"Message Two\"}\n\tfor _, m := range msgs {\n\t\treq := &pb.PubMessage{Payload: m}\n\t\tif _, err := client.Publish(context.Background(), req); err != nil {\n\t\t\tlog.Printf(\"Publish error: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a Dragonfly daemon server over a Unix domain socket to download files from a specified URL to a local output path, with various download configuration options.\n\nFunction Description: The function establishes a gRPC connection to a Dragonfly daemon server running on a Unix domain socket, initiates a file download operation with specified parameters including authentication headers for S3 storage, and streams the download results until completion.\n\nInput:\n- ctx context.Context - Context for controlling the gRPC call lifecycle\n- unixSocketPath string - Path to the Unix domain socket (e.g., \"/run/dfdaemon.sock\")\n- downloadRequest *dfdaemonv1.DownRequest - Download request containing:\n  * Uuid: string - Unique identifier for the download\n  * Url: string - Source URL to download from\n  * Output: string - Local output path\n  * Recursive: bool - Whether to download recursively\n  * UrlMeta: *commonv1.UrlMeta - Metadata including S3 authentication headers\n  * Other download configuration parameters\n\nOutput:\n- map[string]*dfdaemonv1.DownResult - Map of download results keyed by output path\n- error - Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tdfdaemonv1 \"d7y.io/api/v2/pkg/apis/dfdaemon/v1\"\n)\nfunc main() {\n\tdialer := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", addr)\n\t}\n\n\tunixAddr := \"/run/dfdaemon.sock\"\n\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tunixAddr,\n\t\tgrpc.WithContextDialer(dialer),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tvar (\n\t\tclient = dfdaemonv1.NewDaemonClient(conn)\n\t\tctx    = context.Background()\n\t)\n\n\tdownloadClient, err := client.Download(ctx, &dfdaemonv1.DownRequest{\n\t\tUuid:              \"95305fa2-138b-4466-acec-62865ab6403c\",\n\t\tUrl:               \"s3://minio-test-bucket/dragonfly-test/usr/\" + *subDir,\n\t\tOutput:            \"/var/lib/dragonfly-grpc-test/usr/\" + *subDir,\n\t\tRecursive:         true,\n\t\tTimeout:           0,\n\t\tLimit:             0,\n\t\tDisableBackSource: false,\n\t\tUrlMeta: &commonv1.UrlMeta{\n\t\t\tDigest: \"\",\n\t\t\tTag:    \"\",\n\t\t\tRange:  \"\",\n\t\t\tFilter: \"Expires&Signature\",\n\t\t\tHeader: map[string]string{\n\t\t\t\t\"awsEndpoint\":         \"http://minio.dragonfly-e2e.svc:9000\",\n\t\t\t\t\"awsRegion\":           \"us-west-1\",\n\t\t\t\t\"awsAccessKeyID\":      \"root\",\n\t\t\t\t\"awsSecretAccessKey\":  \"password\",\n\t\t\t\t\"awsS3ForcePathStyle\": \"true\",\n\t\t\t},\n\t\t},\n\t\tUid:                1000,\n\t\tGid:                1000,\n\t\tKeepOriginalOffset: false,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tresults := map[string]*dfdaemonv1.DownResult{}\n\tfor {\n\t\tresp, err := downloadClient.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"google.golang.org/grpc\"\n\t\"dfdaemonv1\"\n\t\"commonv1\"\n)\n\nfunc DownloadFile(ctx context.Context, unixSocketPath string, downloadRequest *dfdaemonv1.DownRequest) (map[string]*dfdaemonv1.DownResult, error) {\n\tconn, err := grpc.DialContext(ctx, \"unix://\"+unixSocketPath, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := dfdaemonv1.NewDfDaemonClient(conn)\n\tstream, err := client.Download(ctx, downloadRequest)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresults := make(map[string]*dfdaemonv1.DownResult)\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n\n\treturn results, nil\n}"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a function that connects to a gRPC server, retrieves pod information using the HyperD Public API, and returns the response.\n\nFunction Description: The function establishes an insecure connection to a gRPC server at the specified address, creates a Public API client, sends a PodInfoRequest for a specific pod ID, and returns the pod information response. The connection is automatically closed when the function completes.\n\nInput: \n- server string: The address of the gRPC server (e.g., \"localhost:50051\")\n- podID string: The ID of the pod to query (e.g., \"pod-zpIOTSAjmM\")\n\nOutput:\n- *types.PodInfoResponse: The response containing pod information\n- error: Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/hyperhq/hyperd/types\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure())\n\tif err != nil {\n\t\tfmt.Printf(\"Connect server error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\n\tclient := types.NewPublicAPIClient(conn)\n\trequest := types.PodInfoRequest{\n\t\tPodID: \"pod-zpIOTSAjmM\",\n\t}\n\tresponse, err := client.PodInfo(context.Background(), &request)\n\tif err != nil {\n\t\tfmt.Printf(\"Get PodInfo error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Got response: %v\", response)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "```go\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\thyperdpublicapi \"github.com/hyperd/hyperd-public-api\"\n\ttypes \"github.com/hyperd/types\"\n)\n\nfunc GetPodInfo(server, podID string) (*types.PodInfoResponse, error) {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\n\tclient := hyperdpublicapi.NewPublicAPIClient(conn)\n\treq := &hyperdpublicapi.PodInfoRequest{PodId: podID}\n\tctx := context.Background()\n\tresp, err := client.PodInfo(ctx, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n```"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Implement a gRPC client function in Go that reports device status to a gRPC server using a Unix domain socket connection.\n\nFunction Description: The function `ReportDeviceStatus` establishes a connection to a gRPC server through a Unix domain socket, sends a device status report request, and handles the response. It manages connection lifecycle including setup, error handling, and cleanup.\n\nInput: \n- request *dmiapi.ReportDeviceStatusRequest: A pointer to the gRPC request message containing device status information to be reported.\n\nOutput:\n- error: Returns an error if any step fails (connection establishment, RPC call, etc.), or nil if successful.\n\nNote: The function uses configuration from `config.Cfg()` to determine the Unix socket path and includes proper connection timeout handling.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\t_, err = c.ReportDeviceStatus(ctx, request)\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tsocketPath := config.Cfg().SocketPath\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tconn, err := grpc.DialContext(ctx, \"unix://\"+socketPath, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect to gRPC server: %w\", err)\n\t}\n\tdefer conn.Close()\n\tclient := dmiapi.NewDeviceStatusServiceClient(conn)\n\t_, err = client.ReportDeviceStatus(ctx, request)\n\treturn err\n}\n```"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC metrics server, creates a client for the MetricsService, and prints the metrics retrieved from the server.\n\nFunction Description: The function connects to a gRPC server specified by the metricsServerAddress, initializes a MetricsService client, and prints the metrics. If the connection fails, it logs a fatal error. The connection is automatically closed when the function completes.\n\nInput: \n- metricsServerAddress: string - The address of the gRPC metrics server to connect to.\n- totalOnly: bool - A flag indicating whether to print only the total metrics or all metrics.\n\nOutput: None (prints metrics to the console or logs errors).",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tgrpclog.Fatalf(\"Metrics server address is empty.\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tmetricspb \"path/to/generated/metrics_proto\"\n)\n\nfunc PrintMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.Dial(metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := metricspb.NewMetricsServiceClient(conn)\n\tresp, err := client.GetMetrics(context.Background(), &metricspb.GetMetricsRequest{\n\t\tTotalOnly: totalOnly,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to retrieve metrics: %v\", err)\n\t}\n\n\tif totalOnly {\n\t\tfmt.Printf(\"Total Metrics: %v\\n\", resp.TotalMetric)\n\t} else {\n\t\tfor _, m := range resp.Metrics {\n\t\t\tfmt.Printf(\"Metric: %s, Value: %v\\n\", m.Name, m.Value)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and processes the response.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and logs the server's response or any errors encountered during the process.\n\nInput: \n- address: string - The server address in format \"host:port\" (default: \"localhost:50051\")\n- name: string - The name to send in the greeting request (default: \"world\")\n\nOutput:\n- None (directly logs results to console)\n- Side effect: Sends gRPC request and receives response",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"go.opencensus.io/examples/grpc/proto\"\n\t\"go.opencensus.io/plugin/ocgrpc\"\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"world\"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithStatsHandler(&ocgrpc.ClientHandler{}), grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Cannot connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Printf(\"Could not greet: %v\", err)\n\t} else {\n\t\tlog.Printf(\"Greeting: %s\", r.Message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"google.golang.org/grpc\"\n\t\"helloworld\"\n)\n\nfunc RunClient(address string, name string) {\n\tif address == \"\" {\n\t\taddress = \"localhost:50051\"\n\t}\n\tif name == \"\" {\n\t\tname = \"world\"\n\t}\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := helloworld.NewGreeterClient(conn)\n\treq := &helloworld.HelloRequest{Name: name}\n\tresp, err := client.SayHello(context.Background(), req)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", resp.Message)\n}\n```"
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Create a gRPC client in Go that connects to a RouteGuide service, performs various operations (getting features, listing features within a rectangle, recording a route, and conducting route chat), and handles secure/insecure connections.\n\nFunction Description: The main function establishes a connection to a gRPC server, creates a RouteGuide client, and demonstrates various service operations. It handles both secure (TLS) and insecure connections based on input flags.\n\nInput:\n- Command line flags (implicit):\n  - tls (bool): Whether to use TLS encryption\n  - serverHostOverride (string): Server name for certificate validation\n  - caFile (string): Path to CA certificate file\n  - serverAddr (string): Server address in format host:port\n\nOutput:\n- None (direct output to console/logger)\n- Side effects: Makes gRPC calls to server and prints results\n\nMethods called (from RouteGuideClient):\n1. printFeature(client, point) - Gets and prints a feature at given point\n2. printFeatures(client, rectangle) - Lists features within given rectangle\n3. runRecordRoute(client) - Records a route and prints statistics\n4. runRouteChat(client) - Conducts bidirectional route chat",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"io\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/credentials\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n\n\tprintFeature(client, &pb.Point{409146138, -746188906})\n\tprintFeature(client, &pb.Point{0, 0})\n\tprintFeatures(client, &pb.Rectangle{&pb.Point{400000000, -750000000}, &pb.Point{420000000, -730000000}})\n\trunRecordRoute(client)\n\trunRouteChat(client)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math\"\n\t\"net\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/tls/certprovider/pemfile\"\n\t\"google.golang.org/protobuf/types/known/anypb\"\n\n\tpb \"path/to/routeguide\"\n)\n\nvar (\n\ttls                = flag.Bool(\"tls\", false, \"Use TLS\")\n\tserverHostOverride = flag.String(\"server_host_override\", \"\", \"Server host override\")\n\tcaFile             = flag.String(\"ca_file\", \"\", \"CA certificate file\")\n\tserverAddr         = flag.String(\"server_addr\", \"localhost:50051\", \"Server address\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tif *caFile != \"\" {\n\t\t\tcreds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t\t}\n\t\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t\t} else {\n\t\t\tconfig := &tls.Config{\n\t\t\t\tServerName: *serverHostOverride,\n\t\t\t}\n\t\t\tconfig.RootCAs = x509.SystemCertPool()\n\t\t\tif config.RootCAs == nil {\n\t\t\t\tlog.Fatal(\"Failed to get system cert pool\")\n\t\t\t}\n\t\t\topts = append(opts, grpc.WithTransportCredentials(credentials.NewTLS(config)))\n\t\t}\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"grpc.Dial failed: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewRouteGuideClient(conn)\n\n\tpoint := &pb.Point{Latitude: 409146138, Longitude: -746188907}\n\tprintFeature(client, point)\n\n\trect := &pb.Rectangle{\n\t\tLow:  &pb.Point{Latitude: 400000000, Longitude: -750000000},\n\t\tHigh: &pb.Point{Latitude: 420000000, Longitude: -730000000},\n\t}\n\tprintFeatures(client, rect)\n\n\trunRecordRoute(client)\n\n\trunRouteChat(client)\n}\n\nfunc printFeature(client pb.RouteGuideClient, point *pb.Point) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tfeature, err := client.GetFeature(ctx, point)\n\tif err != nil {\n\t\tlog.Fatalf(\"%v.GetFeature failed: %v\", client, err)\n\t}\n\tlog.Printf(\"Feature: %s\", feature)\n}\n\nfunc printFeatures(client pb.RouteGuideClient, rect *pb.Rectangle) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.ListFeatures(ctx, rect)\n\tif err != nil {\n\t\tlog.Fatalf(\"%v.ListFeatures failed: %v\", client, err)\n\t}\n\tfor {\n\t\tfeature, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"%v.ListFeatures failed: %v\", client, err)\n\t\t}\n\t\tlog.Printf(\"Found feature: %s\", feature)\n\t}\n}\n\nfunc runRecordRoute(client pb.RouteGuideClient) {\n\tpoints := []*pb.Point{\n\t\t{Latitude: 400000000, Longitude: -750000000},\n\t\t{Latitude: 410000000, Longitude: -750000000},\n\t\t{Latitude: 405000000, Longitude: -745000000},\n\t\t{Latitude: 400000000, Longitude: -740000000},\n\t\t{Latitude: 402500000, Longitude: -742500000},\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.RecordRoute(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"%v.RecordRoute failed: %v\", client, err)\n\t}\n\tfor _, point := range points {\n\t\tif err := stream.Send(point); err != nil {\n\t\t\tlog.Fatalf(\"%v.Send failed: %v\", stream, err)\n\t\t}\n\t\ttime.Sleep(500 * time.Millisecond)\n\t}\n\tsummary, err := stream.CloseAndRecv()\n\tif err != nil {\n\t\tlog.Fatalf(\"%v.CloseAndRecv failed: %v\", stream, err)\n\t}\n\tlog.Printf(\"Route summary: %s\", summary)\n}\n\nfunc runRouteChat(client pb.RouteGuideClient) {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tstream, err := client.RouteChat(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"%v.RouteChat failed: %v\", client, err)\n\t}\n\tnotes := []*pb.RouteNote{\n\t\t{Location: &pb.Point{Latitude: 0, Longitude: 0}, Message: \"Hello 1\"},\n\t\t{Location: &pb.Point{Latitude: 0, Longitude: 1}, Message: \"Hello 2\"},\n\t\t{Location: &pb.Point{Latitude: 1, Longitude: 0}, Message: \"Hello 3\"},\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor _, note := range notes {\n\t\t\tif err := stream.Send(note); err != nil {\n\t\t\t\tlog.Fatalf(\"%v.Send failed: %v\", stream, err)\n\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t\tstream.CloseSend()\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tnote, err := stream.Recv()\n\t\t\tif err == io.EOF {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"%v.Recv failed: %v\", stream, err)\n\t\t\t}\n\t\t\tlog.Printf(\"Received note: %s\", note.Message)\n\t\t}\n\t}()\n\twg.Wait()\n}"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a server, invokes an empty call RPC method, and returns the response.\n\nFunction Description: The function `invokeEmptyCall` connects to a gRPC server at the specified address, creates a client for the EmptyService, makes an empty call RPC, and returns the response. It handles connection establishment and cleanup, including context timeout and connection closure.\n\nInput: \n- address: string - The address of the gRPC server to connect to\n- dialOptions: variadic grpc.DialOption - Optional gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during the connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), testTimeout)\n\tdefer cancel()\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewEmptyServiceClient(clientConn)\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"time\"\n\t\"google.golang.org/grpc\"\n\t\"testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tconn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := testpb.NewEmptyServiceClient(conn)\n\tctxCall, cancelCall := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancelCall()\n\tresp, err := client.EmptyCall(ctxCall, &testpb.Empty{})\n\treturn resp, err\n}\n```"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and receives a response.\n\nFunction Description: The function establishes a connection to a gRPC server using the provided address, creates a client for the HelloService, sends a HelloRequest with the specified name, and returns the server's response. It handles connection errors and timeout contexts.\n\nInput:\n- addr: string - The address of the gRPC server to connect to (e.g., \"127.0.0.1:8972\")\n- name: string - The name to include in the greeting request\n\nOutput:\n- string - The greeting response from the server\n- error - Any error that occurred during the process\n\nNote: The function should properly close the connection when done and handle context timeouts.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"hello_grpc_client/proto\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &proto.HelloRequest{\n\t\tName: *name,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc Greet(addr, name string) (string, error) {\n\tconn, err := grpc.Dial(addr, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewHelloServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tresp, err := client.SayHello(ctx, &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn resp.Message, nil\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and properly handle the connection lifecycle.\n\nFunction Description: The function tests gRPC client functionality by connecting to a user authentication service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper gRPC connection management and metadata handling.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None directly returned, but prints authentication tokens to stdout\n- Returns error if connection or RPC calls fail\n\nNote: The function includes error handling and connection cleanup via defer. It uses metadata to pass a UUID for request tracking and demonstrates multiple RPC calls in a loop.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/src\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"authpb\"\n)\n\nfunc TestAuthClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := authpb.NewAuthServiceClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\tuuidBytes := make([]byte, 16)\n\t\t_, err := rand.Read(uuidBytes)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuuid := hex.EncodeToString(uuidBytes)\n\n\t\tmd := metadata.Pairs(\"uuid\", uuid)\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\n\t\tresp, err := client.Login(ctx, &authpb.LoginRequest{\n\t\t\tUsername: &account,\n\t\t\tPassword: &password,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"rpc call failed: %v\", err)\n\t\t}\n\t\tfmt.Println(\"Received token:\", *resp.Token)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, publishes messages, and handles connection cleanup.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client for the PubsubService, publishes two predefined messages, and ensures proper connection closure. The function handles potential connection errors and publishing failures.\n\nInput: None (The target server address is hardcoded as \"localhost:1234\" and messages are predefined)\n\nOutput: None (The function performs side effects by publishing messages to the gRPC server and may terminate the program on errors)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"ch4.4-3/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"example.com/pubsub\"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\tmsgs := []string{\"message1\", \"message2\"}\n\n\tfor _, msg := range msgs {\n\t\treq := &pb.PublishRequest{Message: msg}\n\t\tif _, err := client.Publish(context.Background(), req); err != nil {\n\t\t\tlog.Fatalf(\"Publish failed: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and handle the responses.\n\nFunction Description: The function tests a gRPC client implementation by connecting to a user service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper connection handling, metadata usage, and error handling in gRPC communications.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None (prints tokens to stdout)\n- Returns error if connection or RPC fails\n\nNote: The function includes proper connection cleanup using defer and demonstrates metadata handling for request tracing.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/utils\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/user_agent/pb\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/google/uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuserpb \"path/to/userpb\" // Replace with actual proto package path\n)\n\nfunc TestGRPCClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := userpb.NewUserClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\tu, err := uuid.NewUUID()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to generate UUID: %v\", err)\n\t\t}\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\"request_id\", u.String()))\n\n\t\treq := &userpb.LoginRequest{\n\t\t\tAccount:  account,\n\t\t\tPassword: password,\n\t\t}\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"RPC failed: %v\", err)\n\t\t}\n\n\t\tfmt.Println(\"Received token:\", resp.GetToken())\n\t}\n\n\treturn nil\n}\n```"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a function that tests a gRPC client connection to a user authentication service, sends multiple login requests, and prints the received authentication tokens.\n\nFunction Description: The function establishes an insecure gRPC connection to a specified server address, creates a user client, and sends 20 consecutive login requests with metadata containing a UUID. Each successful response's token is printed, while errors cause immediate termination.\n\nInput: None (The service address is hardcoded as \"127.0.0.1:8881\" and login credentials are fixed as account \"hwholiday\" and password \"123456\")\n\nOutput: None (The function prints tokens to stdout and may return early on error through testing.T's Error method)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\t\"github.com/google/uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuserpb \"path/to/user_proto_package\"\n)\n\nfunc TestAuthClient(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8881\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer conn.Close()\n\tclient := userpb.NewUserClient(conn)\n\tfor i := 0; i < 20; i++ {\n\t\tu, err := uuid.NewUUID()\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tmd := metadata.Pairs(\"uuid\", u.String())\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\t\treq := &userpb.LoginRequest{Account: \"hwholiday\", Password: \"123456\"}\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tfmt.Println(resp.Token)\n\t}\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Write a Go function that tests the version retrieval functionality of a gRPC service using the Stripe CLI client. The function should establish a connection to the gRPC server, call the Version method, and verify the response matches the expected version.\n\nFunction Description: The function `TestVersionReturnsCLIVersion` is a test function that verifies the version information returned by a gRPC service. It establishes an authenticated connection to a gRPC server, calls the Version RPC method, and checks that the returned version matches the expected value (\"master\"). The connection is properly closed after the test completes.\n\nInput: \n- `t *testing.T`: The testing context provided by Go's testing framework for reporting test failures and logging.\n- Implicit context from `withAuth(context.Background())`: An authenticated context for the gRPC call.\n\nOutput: \n- The function does not return any value but will fail the test if any of the following occur:\n  - The gRPC connection cannot be established\n  - The Version RPC call fails\n  - The returned version does not match the expected value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Version(ctx, &rpc.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version failed: %v\", err)\n\t}\n\n\texpected := rpc.VersionResponse{\n\t\tVersion: \"master\",\n\t}\n\n\tassert.Equal(t, expected.Version, resp.Version)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/empty\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewClient(conn)\n\n\tctx := withAuth(context.Background())\n\n\treq := &empty.Empty{}\n\tresp, err := client.Version(ctx, req)\n\tif err != nil {\n\t\tt.Fatalf(\"Version call failed: %v\", err)\n\t}\n\n\tif resp.Version != \"master\" {\n\t\tt.Errorf(\"Expected version 'master', got '%s'\", resp.Version)\n\t}\n}"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: The task involves creating a gRPC client in Go that connects to a CloudSlack service, establishes a bidirectional stream, and handles incoming events while managing connection lifecycle and errors.\n\nFunction Description: The `start` function initializes a gRPC connection to a CloudSlack server, establishes a bidirectional stream for communication, sends a connection request, and continuously listens for incoming events. It handles connection errors, server closures, and context cancellations appropriately.\n\nInput: \n- `ctx context.Context`: The context for managing the lifecycle of the gRPC connection and handling cancellations.\n- The function also relies on the struct's fields (`log`, `cfg`, `client`, `commGroupMetadata`, `clusterName`, and `botID`) for configuration and logging.\n\nOutput: \n- `error`: Returns an error if any step in the connection or communication process fails, including gRPC connection errors, credential errors, or stream errors. Returns nil if the context is canceled gracefully.\n\nNote: The function uses deferred calls to ensure proper cleanup of resources (closing the gRPC connection and stream) and includes detailed error handling for various gRPC-specific scenarios.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"github.com/kubeshop/botkube/pkg/api/cloudslack\"\n\t\"github.com/kubeshop/botkube/pkg/grpcx\"\n\t\"github.com/kubeshop/botkube/pkg/config\"\n\t\"github.com/kubeshop/botkube/pkg/api/cloudplatform\"\n\t\"github.com/kubeshop/botkube/internal/config/remote\"\n)\n\ntype CloudSlack struct {\n\tlog               logrus.FieldLogger\n\tcfg               config.CloudSlack\n\tclient            *slack.Client\n\tcommGroupMetadata CommGroupMetadata\n\tclusterName       string\n}\n\nfunc (b *CloudSlack) start(ctx context.Context) error {\n\tremoteConfig, ok := remote.GetConfig()\n\tif !ok {\n\t\treturn fmt.Errorf(\"while getting remote config for %s\", config.CloudSlackCommPlatformIntegration)\n\t}\n\n\tcreds, err := grpcx.ClientTransportCredentials(b.log, b.cfg.Server)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC credentials: %w\", err)\n\t}\n\n\topts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(creds),\n\t\tgrpc.WithStreamInterceptor(cloudplatform.AddStreamingClientCredentials(remoteConfig)),\n\t\tgrpc.WithUnaryInterceptor(cloudplatform.AddUnaryClientCredentials(remoteConfig)),\n\t}\n\n\tconn, err := grpc.Dial(b.cfg.Server.URL, opts...)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC connection: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\treq := &pb.ConnectRequest{\n\t\tInstanceId: remoteConfig.Identifier,\n\t\tBotId:      b.botID,\n\t}\n\tc, err := pb.NewCloudSlackClient(conn).Connect(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while initializing gRPC cloud client: %w\", err)\n\t}\n\tdefer func(c pb.CloudSlack_ConnectClient) {\n\t\terr := c.CloseSend()\n\t\tif err != nil {\n\t\t\tb.log.Errorf(\"while closing connection: %s\", err.Error())\n\t\t}\n\t}(c)\n\n\terr = c.Send(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while sending gRPC connection request. %w\", err)\n\t}\n\n\tfor {\n\t\tdata, err := c.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tb.log.Warn(\"gRPC connection was closed by server\")\n\t\t\t\treturn errors.New(\"gRPC connection closed\")\n\t\t\t}\n\t\t\terrStatus, ok := status.FromError(err)\n\t\t\tif ok && errStatus.Code() == codes.Canceled && errStatus.Message() == context.Canceled.Error() {\n\t\t\t\tb.log.Debugf(\"Context was cancelled. Skipping returning error...\")\n\t\t\t\treturn fmt.Errorf(\"while resolving error from gRPC response %s\", errStatus.Err())\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"while receiving cloud slack events: %w\", err)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype MyStruct struct {\n\tlog               *Logger\n\tcfg               *Config\n\tclient            CloudSlackServiceClient\n\tcommGroupMetadata string\n\tclusterName       string\n\tbotID             string\n}\n\ntype CloudSlackServiceClient interface {\n\tStream(context.Context, ...grpc.CallOption) (CloudSlack_StreamClient, error)\n}\n\ntype CloudSlack_StreamClient interface {\n\tSend(msg interface{}) error\n\tRecv() (interface{}, error)\n\tCloseSend() error\n}\n\nfunc (s *MyStruct) start(ctx context.Context) error {\n\tconn, err := grpc.DialContext(ctx, s.cfg.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t\tif errors.Is(err, context.Canceled) || errors.Is(err, context.DeadlineExceeded) {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"failed to dial: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewCloudSlackServiceClient(conn)\n\ts.client = client\n\n\tstream, err := client.Stream(ctx)\n\tif err != nil {\n\t\tif errors.Is(err, context.Canceled) || errors.Is(err, context.DeadlineExceeded) {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"failed to establish stream: %w\", err)\n\t}\n\tdefer stream.CloseSend()\n\n\treq := &ConnectRequest{\n\t\tMetadata:    s.commGroupMetadata,\n\t\tClusterName: s.clusterName,\n\t\tBotId:       s.botID,\n\t}\n\tif err := stream.Send(req); err != nil {\n\t\tif errors.Is(err, context.Canceled) || errors.Is(err, context.DeadlineExceeded) {\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"failed to send initial request: %w\", err)\n\t}\n\n\tfor {\n\t\tevent, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\ts.log.Info(\"Server closed the stream\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif errors.Is(err, context.Canceled) || errors.Is(err, context.DeadlineExceeded) {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif status, ok := status.FromError(err); ok {\n\t\t\t\tif status.Code() == codes.Canceled || status.Code() == codes.DeadlineExceeded {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"stream receive error: %w\", err)\n\t\t}\n\t\ts.handleEvent(event)\n\t}\n}"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, subscribes to a specific topic, and continuously receives messages from the subscribed topic until the stream ends or an error occurs.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, and subscribes to a topic specified by the input string. It then enters a loop to receive messages from the subscribed topic, printing each message until the stream is closed or an error occurs. The connection is automatically closed when the function completes.\n\nInput: \n- topic string: The topic to subscribe to (e.g., \"golang:\")\n\nOutput: \n- None (messages are printed to stdout)\n- Errors: Any connection or stream errors will cause the function to terminate and log the error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\tstream, err := client.Subscribe(context.Background(), &pb.String{Value: \"golang:\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"io\"\n\n\t\"google.golang.org/grpc\"\n\t\"pubsub\"\n)\n\nfunc subscribeToTopic(topic string) {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.Insecure())\n\tif err != nil {\n\t\tlog.Printf(\"Failed to connect: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := pubsub.NewPubSubClient(conn)\n\tstream, err := client.Subscribe(context.Background(), &pubsub.SubscribeRequest{Topic: topic})\n\tif err != nil {\n\t\tlog.Printf(\"Failed to subscribe: %v\", err)\n\t\treturn\n\t}\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error receiving: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(msg.Content)\n\t}\n}"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Implement a gRPC client function in Go that connects to a gRPC server, performs unary and streaming RPCs, and handles communication with the server.\n\nFunction Description: The function `doClientWork` establishes a connection to a gRPC server, performs a unary RPC call (`Hello`), and then sets up bidirectional streaming (`Channel`). It sends messages periodically in one goroutine while receiving messages in the main goroutine.\n\nInput: None (The server address is hardcoded as \"localhost:1234\")\n\nOutput: None (The function prints received messages to stdout and logs errors to stderr)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(reply.GetValue())\n\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tif err := stream.Send(&String{Value: \"hi\"}); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}()\n\n\tfor {\n\t\tlog.Println(222)\n\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\ntype Message struct {\n\tText string\n}\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to connect:\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewMyServiceClient(conn)\n\n\t// Unary RPC\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tresp, err := client.Hello(ctx, &emptypb.Empty{})\n\tif err != nil {\n\t\tlog.Fatalln(\"Unary call failed:\", err)\n\t}\n\tfmt.Println(\"Unary response:\", resp.GetMessage())\n\n\t// Streaming RPC\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Fatalln(\"Stream creation failed:\", err)\n\t}\n\n\t// Sender goroutine\n\tgo func() {\n\t\tticker := time.NewTicker(1 * time.Second)\n\t\tdefer ticker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tif err := stream.Send(&Message{Text: \"Client Ping\"}); err != nil {\n\t\t\t\t\tlog.Println(\"Send error:\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Receiver loop\n\tfor {\n\t\tmsg := &Message{}\n\t\tif err := stream.RecvMsg(msg); err != nil {\n\t\t\tlog.Println(\"Receive error:\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Received:\", msg.Text)\n\t}\n}"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a function that demonstrates how to establish a gRPC client connection, make a login request to a user service, and handle the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client for the User service, sends a login request with account credentials, and returns the authentication token. It includes error handling and connection cleanup.\n\nInput: \n- serviceAddress (string): The address of the gRPC server in \"host:port\" format\n- account (string): The user's account name for login\n- password (string): The user's password for login\n\nOutput:\n- token (string): The authentication token returned by the server upon successful login\n- error: Any error that occurs during the connection or RPC call\n\nNote: The function assumes the existence of generated gRPC client code from a protobuf definition that includes a User service with RpcUserLogin method.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v5/v5_user/pb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(v5_service.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\tAccount:  \"hw\",\n\t\tPassword: \"123\",\n\t})\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tt.Log(res.Token)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/generated/proto\"\n)\n\nfunc LoginToUserService(serviceAddress, account, password string) (string, error) {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewUserClient(conn)\n\n\trequest := &pb.LoginRequest{\n\t\tAccount:  account,\n\t\tPassword: password,\n\t}\n\n\tresponse, err := client.RpcUserLogin(context.Background(), request)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn response.Token, nil\n}"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a function to test gRPC client functionality for user login using Go's gRPC package. The function should establish a connection to a gRPC server, send multiple login requests with metadata, and handle responses.\n\nFunction Description: The function tests the gRPC client's ability to communicate with a user service. It establishes an insecure connection to the specified server address, creates a client instance, and sends 20 consecutive login requests with generated UUID metadata. Each request uses the same account credentials and prints the received authentication token.\n\nInput: None (The function is a test function with hardcoded values)\n\nOutput: None (The function prints tokens to stdout and may return errors through the testing framework)\n\nNote: The function uses package-level variables and imports from external packages as shown in the reference code. The connection is automatically closed when the function completes.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/utils\"\n\tuuid \"github.com/satori/go.uuid\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/google/uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tpb \"example.com/user/proto\"\n)\n\nfunc TestLogin(t *testing.T) {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewUserClient(conn)\n\n\tfor i := 0; i < 20; i++ {\n\t\tu, err := uuid.NewRandom()\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tctx := metadata.NewOutgoingContext(context.Background(), metadata.Pairs(\"request-id\", u.String()))\n\t\treq := &pb.LoginRequest{Username: \"testuser\", Password: \"password123\"}\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Login failed: %v\", err)\n\t\t}\n\t\tfmt.Println(\"Received token:\", resp.Token)\n\t}\n}"
  },
  {
    "Task_id": 238,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a login request, and retrieves an authentication token.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a gRPC client for the User service, sends a login request with account credentials, and returns the authentication token received from the server. The function includes error handling and connection cleanup.\n\nInput:\n- serviceAddress (string): The address of the gRPC server in format \"host:port\"\n- account (string): The user account name for login\n- password (string): The user password for login\n\nOutput:\n- token (string): The authentication token returned by the server\n- error: Any error that occurs during the connection or RPC call\n\nNote: The function generates a unique request UUID for tracking purposes and uses insecure connection (for testing purposes only). In production, you should use proper TLS credentials.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v6/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v6/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\tAccount:  \"hw\",\n\t\tPassword: \"123\",\n\t})\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tt.Log(res.Token)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/google/uuid\"\n)\n\ntype LoginRequest struct {\n\tAccount    string `protobuf:\"bytes,1,opt,name=account,proto3\" json:\"account,omitempty\"`\n\tPassword   string `protobuf:\"bytes,2,opt,name=password,proto3\" json:\"password,omitempty\"`\n\tRequestId  string `protobuf:\"bytes,3,opt,name=request_id,json=requestId,proto3\" json:\"request_id,omitempty\"`\n}\n\ntype LoginResponse struct {\n\tToken string `protobuf:\"bytes,1,opt,name=token,proto3\" json:\"token,omitempty\"`\n}\n\ntype UserClient interface {\n\tLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)\n}\n\nfunc Login(serviceAddress, account, password string) (string, error) {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to connect to gRPC server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserClient(conn)\n\n\trequestID, err := uuid.NewUUID()\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to generate request UUID: %v\", err)\n\t}\n\n\treq := &LoginRequest{\n\t\tAccount:   account,\n\t\tPassword:  password,\n\t\tRequestId: requestID.String(),\n\t}\n\n\tresp, err := client.Login(context.Background(), req)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"login request failed: %v\", err)\n\t}\n\n\treturn resp.Token, nil\n}"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a HelloService server, sends a greeting, and handles the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:1234, creates a client for the HelloService, sends a \"hello\" message, and processes the server's reply. It handles connection errors and RPC call errors appropriately.\n\nInput: None (The server address and message are hardcoded in this example)\n\nOutput: None (The function logs errors and doesn't return any value, though in a real implementation you might want to return the reply or error)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\ths \"ch4.4-1/helloservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := hs.NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &hs.String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype HelloServiceClient interface {\n\tSayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)\n}\n\ntype HelloRequest struct {\n\tMessage string\n}\n\ntype HelloResponse struct {\n\tMessage string\n}\n\nfunc runClient() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\n\treq := &HelloRequest{Message: \"hello\"}\n\tctx := context.Background()\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\tlog.Fatalf(\"RPC failed: %v\", err)\n\t}\n\n\t_ = resp\n}\n\nfunc NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {\n\treturn &helloServiceClient{cc}\n}\n\ntype helloServiceClient struct {\n\tcc *grpc.ClientConn\n}\n\nfunc (c *helloServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {\n\tout := new(HelloResponse)\n\terr := c.cc.Invoke(ctx, \"/hello_service.HelloService/SayHello\", in, out, grpc.EmptyTag())\n\treturn out, err\n}"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a function that establishes a gRPC connection to a server, creates a client, and makes a request to retrieve fixture data for a specific event.\n\nFunction Description: The function `TestFixturesReturnsData` tests the gRPC client's ability to connect to a server and retrieve fixture data for a specified event. It establishes a connection, creates a client, sends a request, and handles potential errors. The connection is automatically closed when the function completes.\n\nInput: \n- `t *testing.T`: The testing context for reporting failures and logging.\n- Implicit context with authentication (via `withAuth`).\n\nOutput: \n- None explicitly returned, but the function will fail the test if any step (connection, client creation, or request) encounters an error. The response from the gRPC server is captured in `resp` but not returned.",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\nfunc TestFixturesReturnsData(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Fixture(ctx, &rpc.FixtureRequest{Event: \"customer.created\"})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc TestFixturesReturnsData(t *testing.T) {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure(), withAuth)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewFixtureServiceClient(conn)\n\treq := &EventRequest{EventId: \"test-event-123\"}\n\n\tctx := context.Background()\n\tresp, err := client.GetFixtures(ctx, req)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to retrieve fixtures: %v\", err)\n\t}\n\n\t_ = resp\n}"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a metrics server, retrieves metrics, and prints them. The function should handle connection setup and teardown, and provide options for controlling output format.\n\nFunction Description: The function connects to a gRPC metrics server using the provided address, creates a metrics service client, and prints the retrieved metrics. It supports a flag to determine whether to print all metrics or just the total. The connection is automatically closed when the function completes.\n\nInput:\n- metricsServerAddress (string): The address of the gRPC metrics server to connect to\n- totalOnly (bool): Flag indicating whether to print only the total metrics or all metrics\n\nOutput: None (prints metrics to stdout directly)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/interop/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tlogger.Fatal(\"-metrics_server_address is unset\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"google.golang.org/grpc\"\n\t\"metricspb\"\n)\n\nfunc GetAndPrintMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.Dial(metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := metricspb.NewMetricsServiceClient(conn)\n\tresp, err := client.GetMetrics(context.Background(), &metricspb.GetMetricsRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to retrieve metrics: %v\", err)\n\t}\n\n\tif totalOnly {\n\t\tfmt.Printf(\"Total: %d\\n\", resp.Total)\n\t} else {\n\t\tfor _, metric := range resp.Metrics {\n\t\t\tfmt.Printf(\"Metric: %s, Value: %d\\n\", metric.Name, metric.Value)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 242,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends a greeting request, and processes the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and returns the server's greeting response. It handles connection errors and request failures appropriately.\n\nInput: \n- address [string]: The network address of the gRPC server (e.g., \"localhost:50051\")\n- name [string]: The name to include in the greeting request (optional, defaults to \"world\")\n\nOutput:\n- [string]: The greeting message received from the server\n- [error]: Any error that occurred during connection or request processing",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"os\"\n\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"pb\"\n)\n\nfunc Greet(address, name string) (string, error) {\n\tif name == \"\" {\n\t\tname = \"world\"\n\t}\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewGreeterClient(conn)\n\treq := &pb.HelloRequest{Name: name}\n\tctx := context.Background()\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn resp.Message, nil\n}"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends multiple requests, and processes the responses using the GoFrame framework.\n\nFunction Description: The function connects to a gRPC server using service discovery, creates a client stub, and makes repeated calls to a SayHello RPC method. It handles connection errors and response processing, with built-in logging and graceful connection closure.\n\nInput: None (uses package-level constants and context)\n\nOutput: None (logs results to console via GoFrame's logging system)\n\nNote: The function includes an internal loop that makes 10 RPC calls with a 1-second delay between calls. Connection is automatically closed when function completes.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/gsvc\"\n\t\"github.com/gogf/gf/v2/os/gctx\"\n\n\t\"github.com/gogf/gf/contrib/rpc/grpcx/v2\"\n\n\tpb \"github.com/gogf/gf/example/rpc/grpcx/rawgrpc/helloworld\"\n)\nfunc main() {\n\tvar (\n\t\tctx     = gctx.GetInitCtx()\n\t\tservice = gsvc.NewServiceWithName(`hello`)\n\t)\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(`%s://%s`, gsvc.Schema, service.GetKey()),\n\t\tgrpcx.Balancer.WithRandom(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tg.Log().Fatalf(ctx, \"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tfor i := 0; i < 10; i++ {\n\t\tres, err := client.SayHello(ctx, &pb.HelloRequest{Name: `GoFrame`})\n\t\tif err != nil {\n\t\t\tg.Log().Fatalf(ctx, \"could not greet: %+v\", err)\n\t\t}\n\t\tg.Log().Printf(ctx, \"Greeting: %s\", res.Message)\n\t\ttime.Sleep(time.Second)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/gogf/gf/v2/os/glog\"\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/proto\"\n)\n\nconst (\n\tgrpcServerAddress = \"localhost:50051\"\n)\n\nfunc RunGRPCClient() {\n\tconn, err := grpc.Dial(grpcServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tglog.Fatal(context.Background(), \"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewHelloServiceClient(conn)\n\tctx := context.Background()\n\n\tfor i := 0; i < 10; i++ {\n\t\treqCtx, cancel := context.WithTimeout(ctx, 3*time.Second)\n\t\tdefer cancel()\n\n\t\tresp, err := client.SayHello(reqCtx, &pb.HelloRequest{Name: \"User\"})\n\t\tif err != nil {\n\t\t\tglog.Error(ctx, \"RPC failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tglog.Info(ctx, \"Response: \", resp.Message)\n\t\ttime.Sleep(time.Second)\n\t}\n}"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles plugin registration and message streaming between clients and middleware components.\n\nStruct Description: The pluginServer struct implements a gRPC service for plugin registration and message handling, managing concurrent access with synchronization and supporting both middleware and non-middleware listeners.\n\nFields:\n- UnimplementedPluginServer: pb.UnimplementedPluginServer - Embedded type for forward compatibility\n- lock: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n- RegisterListener: (stream pb.Plugin_RegisterListenerServer) -> error - Handles client registration and message streaming\n  - Input: gRPC bidirectional stream of pb.Plugin_RegisterListenerServer\n  - Output: error indicating operation status\n  - Description: Registers listeners, processes incoming messages, matches against regex patterns, handles middleware responses, and manages one-time listeners\n\n- rpcInit: () -> () - Initializes and starts the gRPC server\n  - Input: None (uses package-level Integrations.RPC configuration)\n  - Output: None (runs as goroutine)\n  - Description: Creates TCP listener, configures gRPC server with interceptors and keepalive, registers service, and starts serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock sync.Mutex\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\ts.lock.Lock()\n\tinitialData, err := stream.Recv()\n\tif err == io.EOF {\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlistener := initialData.GetListener()\n\tif listener == nil {\n\t\treturn status.Error(codes.InvalidArgument, \"First message must be a listener\")\n\t}\n\n\tisMiddleware := listener.Middleware != nil && *listener.Middleware\n\tisOnce := listener.Once != nil && *listener.Once\n\n\tvar regex *regexp.Regexp\n\tif listener.Regex != nil {\n\t\tregex, err = regexp.Compile(*listener.Regex)\n\t\tif err != nil {\n\t\t\treturn status.Error(codes.InvalidArgument, \"Invalid regex\")\n\t\t}\n\t}\n\n\tvar listenerList *[]chan pb.MiddlewareChannelMessage\n\n\tif isMiddleware {\n\t\tlistenerList = &ListenersMiddleware\n\t} else {\n\t\tlistenerList = &ListenersNonMiddleware\n\t}\n\n\tc := make(chan pb.MiddlewareChannelMessage)\n\t*listenerList = append(*listenerList, c)\n\n\ts.lock.Unlock()\n\tdefer func() {\n\t\tfor i := range *listenerList {\n\t\t\tif (*listenerList)[i] == c {\n\t\t\t\t*listenerList = append((*listenerList)[:i], (*listenerList)[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tmessage := <-c\n\n\t\tsendNilResponse := func() {\n\t\t\tc <- &pb.ListenerClientData_Response{\n\t\t\t\tResponse: &pb.MiddlewareResponse{\n\t\t\t\t\tMsg: nil,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\tif listener.Regex != nil && !regex.MatchString(message.(*pb.Event).Msg) {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\terr = stream.Send(message.(*pb.Event))\n\t\tif err != nil {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif isMiddleware {\n\t\t\tmwRes, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tswitch data := mwRes.Data.(type) {\n\t\t\tcase *pb.ListenerClientData_Listener:\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn status.Error(codes.InvalidArgument, \"Middleware returned a listener instead of a response\")\n\t\t\tcase *pb.ListenerClientData_Response:\n\t\t\t\tc <- data\n\t\t\t}\n\t\t}\n\n\t\tif isOnce {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc rpcInit() {\n\tif Integrations.RPC == nil {\n\t\treturn\n\t}\n\tgo func() {\n\t\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", Integrations.RPC.Port))\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tgrpcServer := grpc.NewServer(\n\t\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\t\tif err := authorize(ctx); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn handler(ctx, req)\n\t\t\t}),\n\t\t\tgrpc.StreamInterceptor(func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\t\tif err := authorize(stream.Context()); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\treturn handler(srv, stream)\n\t\t\t}),\n\t\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{Time: time.Second * 10}),\n\t\t)\n\t\tpb.RegisterPluginServer(grpcServer, &pluginServer{})\n\t\tgrpcServer.Serve(lis)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"regexp\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\tpb \"path/to/your/protobuf\"\n)\n\ntype ListenerInfo struct {\n\tregex        *regexp.Regexp\n\tisMiddleware bool\n\toneTime      bool\n}\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock       sync.Mutex\n\tlisteners  map[grpc.ServerStream]*ListenerInfo\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\treq, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpattern := req.GetPattern()\n\tisMiddleware := req.GetIsMiddleware()\n\toneTime := req.GetOneTime()\n\n\tregex, err := regexp.Compile(pattern)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.lock.Lock()\n\ts.listeners[stream] = &ListenerInfo{\n\t\tregex:      regex,\n\t\tisMiddleware: isMiddleware,\n\t\toneTime:    oneTime,\n\t}\n\ts.lock.Unlock()\n\n\tgo func() {\n\t\tfor {\n\t\t\tmsg, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\ts.lock.Lock()\n\t\t\t\tdelete(s.listeners, stream)\n\t\t\t\ts.lock.Unlock()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdata := msg.GetData()\n\n\t\t\ts.lock.Lock()\n\t\t\tfor otherStream, info := range s.listeners {\n\t\t\t\tif info.regex.MatchString(data) {\n\t\t\t\t\tif err := otherStream.Send(msg); err != nil {\n\t\t\t\t\t\tdelete(s.listeners, otherStream)\n\t\t\t\t\t}\n\t\t\t\t\tif info.oneTime {\n\t\t\t\t\t\tdelete(s.listeners, otherStream)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ts.lock.Unlock()\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc rpcInit() {\n\tgo func() {\n\t\tlis, err := net.Listen(\"tcp\", Integrations.RPC.Address)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t\t}\n\n\t\topts := []grpc.ServerOption{\n\t\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\t\tMaxConnectionIdle: 120 * time.Second,\n\t\t\t\tTimeout:           20 * time.Second,\n\t\t\t}),\n\t\t\tgrpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\t\t\tMinTime:             5 * time.Second,\n\t\t\t\tPermitWithoutStream: true,\n\t\t\t}),\n\t\t}\n\n\t\tgrpcServer := grpc.NewServer(opts...)\n\t\tpb.RegisterPluginServer(grpcServer, &pluginServer{\n\t\t\tlisteners: make(map[grpc.ServerStream]*ListenerInfo),\n\t\t})\n\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework. The server should be able to gracefully shut down when the context is canceled.\n\nFunction Description: The MainExt function initializes and starts a gRPC server. It sets up a network listener, creates a gRPC server instance, registers the service implementation, and starts the server in a goroutine. The function waits for the context to be canceled before gracefully shutting down the server.\n\nInput:\n- ctx [context.Context]: The context used to control the lifecycle of the gRPC server. Canceling this context will trigger a graceful shutdown.\n- cfg [Config]: A configuration object containing the port number on which the server should listen.\n\nOutput: None (The function runs indefinitely until the context is canceled or an error occurs.)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\ttriggerpb \"github.com/vanus-labs/vanus/api/trigger\"\n)\n\ntype TriggerServer struct {\n\tcfg Config\n}\n\nfunc NewTriggerServer(cfg Config) *TriggerServer {\n\treturn &TriggerServer{\n\t\tcfg: cfg,\n\t}\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlisten, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\tlog.Error().Msg(\"failed to listen\")\n\t\tos.Exit(-1)\n\t}\n\n\tsrv := NewTriggerServer(cfg)\n\n\tvar opts []grpc.ServerOption\n\tgrpcServer := grpc.NewServer(opts...)\n\ttriggerpb.RegisterTriggerWorkerServer(grpcServer, srv)\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tlog.Info(ctx).Msg(\"the grpc server ready to work\")\n\t\terr = grpcServer.Serve(listen)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx).Err(err).Msg(\"grpc server occurred an error\")\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\tgrpcServer.GracefulStop()\n\twg.Wait()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Config struct {\n\tPort string\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlis, err := net.Listen(\"tcp\", \":\"+cfg.Port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\t// Register the service implementation here\n\t// Example: pb.RegisterYourServiceServer(s, &yourService{})\n\n\tserverDone := make(chan error)\n\tgo func() {\n\t\tserverDone <- s.Serve(lis)\n\t\tclose(serverDone)\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\ts.GracefulStop()\n\tcase err := <-serverDone:\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Server exited with error: %v\", err)\n\t\t}\n\t}\n\n\t<-serverDone\n}"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, creates a new gRPC server instance, registers a service implementation, and starts serving incoming requests.\n\nInput: \n- port: string - The network port on which the server should listen (e.g., \":50051\")\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/helloworld/helloworld\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\ts.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype grpcServer struct {\n\tgrpc.UnimplementedGreeterServer\n}\n\nfunc (s *grpcServer) SayHello(stream grpc.ServerStream) error {\n\treturn nil\n}\n\nfunc main() {\n\tvar port string\n\tflag.StringVar(&port, \"port\", \":50051\", \"Port to listen on\")\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\tRegisterGreeterServer(s, &grpcServer{})\n\tlog.Printf(\"gRPC server running on %s\", port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including receiving metrics and processing them through a handler function.\n\nStruct Description: The Server struct represents a gRPC server that listens for incoming metric data and processes it using a provided handler function. It manages server lifecycle and handles gRPC communication.\n\nFields:\n- Server: *grpc.Server - The underlying gRPC server instance\n- lis: net.Listener - The network listener for the server\n- handler: func([]*metricpb.Metric) - The function that processes received metrics\n- startMtx: sync.Mutex - Mutex to ensure thread-safe server startup\n\nMethods:\n- NewServer: (handler func([]*metricpb.Metric)) -> *Server - Creates a new Server instance with the given metric handler and initializes the gRPC server\n- Start: (t testing.TB) -> () - Starts the gRPC server on a random available port and begins listening for requests\n- SendMetrics: (ctx context.Context, mlist *forwardrpc.MetricList) -> (*empty.Empty, error) - Handles unary RPC calls for metric submission\n- SendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles streaming RPC calls for metric submission",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/samplers/metricpb\"\n)\n\ntype Server struct {\n\t*grpc.Server\n\tlis      net.Listener\n\thandler  func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\tres := &Server{\n\t\tServer:  grpc.NewServer(),\n\t\thandler: handler,\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.Server, res)\n\treturn res\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tvar err error\n\ts.lis, err = net.Listen(\"tcp\", \"127.0.0.1:\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to create a TCP connection for a test GRPC \"+\n\t\t\t\"server: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := s.Serve(s.lis); err != nil && err != grpc.ErrServerStopped {\n\t\t\tt.Logf(\"failed to stop the test forwarding gRPC server: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tmetrics := []*metricpb.Metric{}\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetrics = append(metrics, metric)\n\t}\n\t_, err := s.SendMetrics(context.Background(), &forwardrpc.MetricList{\n\t\tMetrics: metrics,\n\t})\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/empty\"\n\t\"forwardrpc\"\n\t\"metricpb\"\n)\n\ntype Server struct {\n\tServer  *grpc.Server\n\tlis     net.Listener\n\thandler func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\treturn &Server{\n\t\tServer: grpc.NewServer(),\n\t\thandler: handler,\n\t}\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tif s.lis != nil {\n\t\treturn\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts.lis = lis\n\n\tforwardrpc.RegisterForwardServer(s.Server, s)\n\n\tgo func() {\n\t\tif err := s.Server.Serve(lis); err != nil {\n\t\t\tt.Logf(\"server error: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(stream forwardrpc.Forward_SendMetricsV2Server) error {\n\tvar metrics []*metricpb.Metric\n\tfor {\n\t\tmetric, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetrics = append(metrics, metric)\n\t}\n\ts.handler(metrics)\n\treturn stream.SendAndClose(&empty.Empty{})\n}\n```"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both physical data source operations and execution of data processing tasks, using Unix domain sockets for inter-process communication.\n\nStruct Description: The implementation consists of two main structs: physicalServer handles the materialization of data sources, while executionServer manages the execution of data processing tasks.\n\nFields:\n\nphysicalServer:\n- database: physical.Database - The underlying database implementation\n- socketDir: string - Directory where Unix domain sockets will be created\n- wg: *sync.WaitGroup - WaitGroup for managing server goroutines\n\nexecutionServer:\n- node: execution.Node - The execution node to process data\n\nMethods:\n\nphysicalServer:\n- Materialize(context.Context, *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) - Materializes a data source and starts a gRPC server for execution\n\nexecutionServer:\n- Run(*plugins.RunRequest, plugins.ExecutionDatasource_RunServer) error - Executes the data processing task and streams results back to the client",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cube2222/octosql/execution\"\n\t\"github.com/cube2222/octosql/physical\"\n\t\"github.com/cube2222/octosql/plugins/internal/plugins\"\n)\n\ntype physicalServer struct {\n\tplugins.UnimplementedDatasourceServer\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, request *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\timpl, _, err := s.database.GetTable(ctx, request.TableContext.TableName, request.TableContext.Options)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't get table: %w\", err)\n\t}\n\n\tnode, err := impl.Materialize(\n\t\tctx,\n\t\tphysical.Environment{\n\t\t\tVariableContext: request.VariableContext.ToNativePhysicalVariableContext(),\n\t\t},\n\t\trequest.Schema.ToNativeSchema(),\n\t\tpushedDownPredicates,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't materialize datasource: %w\", err)\n\t}\n\n\tsocketName := ulid.MustNew(ulid.Now(), rand.Reader).String() + \".sock\"\n\tsocketPath := filepath.Join(s.socketDir, socketName)\n\tlog.Printf(\"Listening execution on %s\", socketPath)\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\texecServer := &executionServer{\n\t\tnode: node,\n\t}\n\ts.wg.Add(1)\n\n\tgrpcServer := grpc.NewServer()\n\tplugins.RegisterExecutionDatasourceServer(grpcServer, execServer)\n\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\ntype executionServer struct {\n\tplugins.UnimplementedExecutionDatasourceServer\n\tnode execution.Node\n}\n\nfunc (e *executionServer) Run(request *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tif err := e.node.Run(\n\t\texecution.ExecutionContext{\n\t\t\tContext:         stream.Context(),\n\t\t\tVariableContext: request.VariableContext.ToNativeExecutionVariableContext(),\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, record execution.Record) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tRecord: plugins.NativeRecordToProto(record),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send record to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, msg execution.MetadataMessage) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tMetadata: plugins.NativeMetadataMessageToProto(msg),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send metadata message to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t); err != nil {\n\t\treturn fmt.Errorf(\"couldn't run node: %w\", err)\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n\n\t\"github.com/google/uuid\"\n\tplugins \"path/to/generated/proto\" // Adjust import path\n\tphysical \"path/to/physical\"       // Adjust import path\n\texecution \"path/to/execution\"     // Adjust import path\n)\n\ntype physicalServer struct {\n\tdatabase   physical.Database\n\tsocketDir  string\n\twg         *sync.WaitGroup\n}\n\ntype executionServer struct {\n\tnode execution.Node\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, req *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\tsocketPath := filepath.Join(s.socketDir, fmt.Sprintf(\"execution-%s.sock\", uuid.New().String()))\n\t\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, status.Errorf(codes.Internal, \"failed to listen: %v\", err)\n\t}\n\t\n\texecServer := grpc.NewServer()\n\tplugins.RegisterExecutionDatasourceServer(execServer, &executionServer{node: s.database.GetExecutionNode()})\n\t\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := execServer.Serve(lis); err != nil {\n\t\t\tlog.Printf(\"execution server failed: %v\", err)\n\t\t}\n\t}()\n\t\n\treturn &plugins.MaterializeResponse{\n\t\tSocketPath: socketPath,\n\t}, nil\n}\n\nfunc (s *executionServer) Run(req *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tresults, err := s.node.Process(req.GetQuery())\n\tif err != nil {\n\t\treturn status.Errorf(codes.Internal, \"processing failed: %v\", err)\n\t}\n\t\n\tfor _, data := range results {\n\t\tif err := stream.Send(&plugins.RunResponse{Data: data}); err != nil {\n\t\t\treturn status.Errorf(codes.Internal, \"failed to send response: %v\", err)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *executionServer) Close() error {\n\treturn nil\n}\n\nfunc main() {\n\tos.MkdirAll(\"/tmp/data-sockets\", 0755)\n\t\n\tdb := physical.NewDatabase()\n\twg := &sync.WaitGroup()\n\t\n\tphisicalSrv := &physicalServer{\n\t\tdatabase:  db,\n\t\tsocketDir: \"/tmp/data-sockets\",\n\t\twg:        wg,\n\t}\n\t\n\tlis, err := net.Listen(\"unix\", \"/tmp/data-sockets/physical.sock\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\t\n\ts := grpc.NewServer()\n\tplugins.RegisterMaterializeServiceServer(s, phisicalSrv)\n\t\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\t\n\twg.Wait()\n}"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a gRPC server for remote actor communication in a distributed actor system using Proto.Actor and Go's gRPC framework.\n\nStruct Description: The Remote struct manages the gRPC server and associated components for remote actor communication in a Proto.Actor system.\n\nFields:\n\nactorSystem: *actor.ActorSystem - Reference to the actor system this remote belongs to\ns: *grpc.Server - The gRPC server instance\nedpReader: *endpointReader - Handles incoming gRPC connections\nedpManager: *endpointManager - Manages active endpoints\nconfig: *Config - Configuration for the remote server\nkinds: map[string]*actor.Props - Map of actor kinds to their properties\nactivatorPid: *actor.PID - Process ID for the activator actor\nblocklist: *BlockList - List of blocked endpoints\n\nMethods:\n\nNewRemote: (actorSystem *actor.ActorSystem, config *Config) -> *Remote - Constructor that initializes a new Remote instance with given actor system and configuration\nStart: () -> () - Starts the gRPC server and initializes all remote communication components\nShutdown: (graceful bool) -> () - Stops the gRPC server, either gracefully or forcefully",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log/slog\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/asynkron/protoactor-go/extensions\"\n\t\"github.com/asynkron/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n)\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\tr := &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n\tfor k, v := range config.Kinds {\n\t\tr.kinds[k] = v\n\t}\n\n\tactorSystem.Extensions.Register(r)\n\n\treturn r\n}\n\nfunc (r *Remote) Start() {\n\tgrpclog.SetLoggerV2(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))\n\tlis, err := net.Listen(\"tcp\", r.config.Address())\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to listen: %v\", err))\n\t}\n\n\tvar address string\n\tif r.config.AdvertisedHost != \"\" {\n\t\taddress = r.config.AdvertisedHost\n\t} else {\n\t\taddress = lis.Addr().String()\n\t}\n\n\tr.actorSystem.ProcessRegistry.RegisterAddressResolver(r.remoteHandler)\n\tr.actorSystem.ProcessRegistry.Address = address\n\tr.Logger().Info(\"Starting remote with address\", slog.String(\"address\", address))\n\n\tr.edpManager = newEndpointManager(r)\n\tr.edpManager.start()\n\n\tr.s = grpc.NewServer(r.config.ServerOptions...)\n\tr.edpReader = newEndpointReader(r)\n\tRegisterRemotingServer(r.s, r.edpReader)\n\tr.Logger().Info(\"Starting Proto.Actor server\", slog.String(\"address\", address))\n\tgo r.s.Serve(lis)\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.edpReader.suspend(true)\n\t\tr.edpManager.stop()\n\n\t\tc := make(chan bool, 1)\n\t\tgo func() {\n\t\t\tr.s.GracefulStop()\n\t\t\tc <- true\n\t\t}()\n\n\t\tselect {\n\t\tcase <-c:\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\")\n\t\tcase <-time.After(time.Second * 10):\n\t\t\tr.s.Stop()\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\", slog.String(\"err\", \"timeout\"))\n\t\t}\n\t} else {\n\t\tr.s.Stop()\n\t\tr.Logger().Info(\"Killed Proto.Actor server\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\treturn &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tedpReader:   newEndpointReader(actorSystem, config),\n\t\tedpManager:  newEndpointManager(actorSystem, config),\n\t\tblocklist:   newBlockList(config.BlocklistTTL),\n\t}\n}\n\nfunc (r *Remote) Start() {\n\tlis, err := net.Listen(\"tcp\", r.config.Address)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tr.s = grpc.NewServer()\n\tRegisterRemoteServer(r.s, newRemoteServer(r.actorSystem, r.edpManager, r.kinds, r.activatorPid))\n\n\tgo func() {\n\t\tif err := r.s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\tr.edpReader.Start()\n\tr.edpManager.Start()\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.s.GracefulStop()\n\t} else {\n\t\tr.s.Stop()\n\t}\n\tr.edpReader.Stop()\n\tr.edpManager.Stop()\n}\n\ntype RemoteServer struct {\n\tactorSystem  *actor.ActorSystem\n\tedpManager   *endpointManager\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n}\n\nfunc newRemoteServer(actorSystem *actor.ActorSystem, edpManager *endpointManager, kinds map[string]*actor.Props, activatorPid *actor.PID) *RemoteServer {\n\treturn &RemoteServer{\n\t\tactorSystem:  actorSystem,\n\t\tedpManager:   edpManager,\n\t\tkinds:        kinds,\n\t\tactivatorPid: activatorPid,\n\t}\n}\n\nfunc (s *RemoteServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {\n\treturn &PingResponse{}, nil\n}\n\nfunc (s *RemoteServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {\n\treturn &RegisterResponse{}, nil\n}\n\nfunc (s *RemoteServer) Message(ctx context.Context, req *MessageRequest) (*MessageResponse, error) {\n\treturn &MessageResponse{}, nil\n}\n\nfunc (s *RemoteServer) RequestResponse(ctx context.Context, req *RequestResponseRequest) (*RequestResponseResponse, error) {\n\treturn &RequestResponseResponse{}, nil\n}"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Create a gRPC server in Go that collects and processes metrics data using OpenTelemetry protocol, with capabilities for handling incoming requests, storing metrics, and managing server lifecycle.\n\nStruct Description: GRPCCollector is a gRPC server implementation that handles metrics collection following the OpenTelemetry protocol. It manages incoming requests, stores metrics data, tracks headers, and provides server control functionality.\n\nFields:\n\nField1: collpb.UnimplementedMetricsServiceServer - Embedded type to satisfy gRPC interface requirements\nField2: headersMu sync.Mutex - Mutex for thread-safe access to headers\nField3: headers metadata.MD - Stores incoming request headers\nField4: storage *Storage - Stores collected metrics data\nField5: resultCh <-chan ExportResult - Channel for receiving export results\nField6: listener net.Listener - Network listener for the server\nField7: srv *grpc.Server - gRPC server instance\n\nMethods:\n\nMethod1: NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) - Creates and starts a new gRPC collector instance\nMethod2: Shutdown() - Stops the gRPC server gracefully\nMethod3: Addr() net.Addr - Returns the network address the server is listening on\nMethod4: Collect() *Storage - Returns the storage containing collected metrics\nMethod5: Headers() map[string][]string - Returns collected headers in a thread-safe manner\nMethod6: Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) - Handles incoming metrics export requests and processes them",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/proto/otlp/collector/metrics/v1\"\n)\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\n\tresultCh <-chan ExportResult\n\tlistener net.Listener\n\tsrv      *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tif endpoint == \"\" {\n\t\tendpoint = \"localhost:0\"\n\t}\n\n\tc := &GRPCCollector{\n\t\tstorage:  NewStorage(),\n\t\tresultCh: resultCh,\n\t}\n\n\tvar err error\n\tc.listener, err = net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.srv = grpc.NewServer()\n\tcollpb.RegisterMetricsServiceServer(c.srv, c)\n\tgo func() { _ = c.srv.Serve(c.listener) }()\n\n\treturn c, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() { c.srv.Stop() }\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\treturn metadata.Join(c.headers)\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tc.storage.Add(req)\n\n\tif h, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tc.headersMu.Lock()\n\t\tc.headers = metadata.Join(c.headers, h)\n\t\tc.headersMu.Unlock()\n\t}\n\n\tif c.resultCh != nil {\n\t\tr := <-c.resultCh\n\t\tif r.Response == nil {\n\t\t\treturn &collpb.ExportMetricsServiceResponse{}, r.Err\n\t\t}\n\t\treturn r.Response, r.Err\n\t}\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"collpb\"\n)\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\theadersMu  sync.Mutex\n\theaders    metadata.MD\n\tstorage    *Storage\n\tresultCh   <-chan ExportResult\n\tlistener   net.Listener\n\tsrv        *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tlis, err := net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsrv := grpc.NewServer()\n\tstorage := NewStorage()\n\n\tgc := &GRPCCollector{\n\t\tUnimplementedMetricsServiceServer: collpb.UnimplementedMetricsServiceServer{},\n\t\theaders:    metadata.MD{},\n\t\tstorage:    storage,\n\t\tresultCh:   resultCh,\n\t\tlistener:   lis,\n\t\tsrv:        srv,\n\t}\n\n\tcollpb.RegisterMetricsServiceServer(srv, gc)\n\n\tgo srv.Serve(lis)\n\n\treturn gc, nil\n}\n\nfunc (s *GRPCCollector) Shutdown() {\n\ts.srv.GracefulStop()\n\ts.listener.Close()\n}\n\nfunc (s *GRPCCollector) Addr() net.Addr {\n\treturn s.listener.Addr()\n}\n\nfunc (s *GRPCCollector) Collect() *Storage {\n\treturn s.storage\n}\n\nfunc (s *GRPCCollector) Headers() map[string][]string {\n\ts.headersMu.Lock()\n\tdefer s.headersMu.Unlock()\n\theaders := make(map[string][]string)\n\tfor k, v := range s.headers {\n\t\theaders[k] = v\n\t}\n\treturn headers\n}\n\nfunc (s *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif !ok {\n\t\tmd = metadata.MD{}\n\t}\n\ts.headersMu.Lock()\n\ts.headers = md\n\ts.headersMu.Unlock()\n\n\ts.storage.AddMetrics(req.Metrics)\n\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}\n\ntype Storage struct {\n\tmetrics []*collpb.ResourceMetrics\n\tmu      sync.Mutex\n}\n\nfunc NewStorage() *Storage {\n\treturn &Storage{\n\t\tmetrics: []*collpb.ResourceMetrics{},\n\t}\n}\n\nfunc (s *Storage) AddMetrics(metrics []*collpb.ResourceMetrics) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.metrics = append(s.metrics, metrics...)\n}\n\nfunc (s *Storage) GetMetrics() []*collpb.ResourceMetrics {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\treturn s.metrics\n}\n\ntype ExportResult struct {\n}"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls with ORCA (Open Request Cost Aggregation) metrics recording capabilities.\n\nStruct Description: The server struct implements the gRPC service interface (generated from the protobuf definition) and includes ORCA metrics recording functionality.\n\nFields:\n- UnimplementedEchoServer: [pb.UnimplementedEchoServer] - Embedded type to satisfy the gRPC service interface requirements\n\nMethods:\n- UnaryEcho: [Name](ctx context.Context, in *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls, records request costs using ORCA metrics, and returns an echo response\n- main: [Name]() -> None - Sets up the gRPC server, registers the service, configures ORCA metrics reporting, and starts the server\n\nInput Parameters for UnaryEcho:\n- ctx: [context.Context] - Context containing call information and ORCA metrics recorder\n- in: [*pb.EchoRequest] - Incoming request message containing the message to echo\n\nOutput for UnaryEcho:\n- [*pb.EchoResponse] - Response message containing the echoed message\n- [error] - Potential error during processing\n\nNote: The main function doesn't have explicit input/output but performs server setup and execution.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/orca\"\n\t\"google.golang.org/grpc/internal\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tcmr := orca.CallMetricsRecorderFromContext(ctx)\n\tif cmr == nil {\n\t\treturn nil, status.Errorf(codes.Internal, \"unable to retrieve call metrics recorder (missing ORCA ServerOption?)\")\n\t}\n\tcmr.SetRequestCost(\"db_queries\", 10)\n\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(orca.CallMetricsServerOption(nil))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tsmr := orca.NewServerMetricsRecorder()\n\topts := orca.ServiceOptions{\n\t\tMinReportingInterval:  3 * time.Second,\n\t\tServerMetricsProvider: smr,\n\t}\n\tinternal.ORCAAllowAnyMinReportingInterval.(func(so *orca.ServiceOptions))(&opts)\n\tif err := orca.Register(s, opts); err != nil {\n\t\tlog.Fatalf(\"Failed to register ORCA service: %v\", err)\n\t}\n\n\ts.Serve(lis)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"orca\"\n\t\"pb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype echoServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *echoServer) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tif r, ok := orca.FromContext(ctx); ok {\n\t\tcost := orca.Cost{\n\t\t\tService: \"Echo\",\n\t\t\tMethod:  \"UnaryEcho\",\n\t\t\tCost:    1.0,\n\t\t}\n\t\tr.Record(cost)\n\t}\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\treporter, _ := orca.NewStatsdReporter(\"localhost:8125\", \"grpc.server\")\n\torca.SetDefaultReporter(reporter)\n\n\tlis, _ := net.Listen(\"tcp\", \":50051\")\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &echoServer{})\n\ts.Serve(lis)\n}"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, registers service implementations, and starts serving on a specified port with optional TLS credentials.\n\nFunction Description: The main function initializes and starts a gRPC server that hosts two services: a custom SpannerExecutorProxy service and a standard health check service. It validates required configuration parameters, sets up the network listener, creates the gRPC server instance, registers services, and begins serving requests.\n\nInput:\n- proxyPort (string): The port number on which the gRPC server should listen\n- spannerPort (string): The port number for Spanner service (validation only)\n- cert (string): Path to certificate file for TLS (validation only)\n- Additional client options are obtained internally through getClientOptionsForSysTests()\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Logs server startup information or errors to stdout\n\nNote: The function doesn't explicitly return values but may terminate the program with log.Fatal or log.Fatalf in case of errors during setup. Successful execution results in a continuously running gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"cloud.google.com/go/spanner/executor/apiv1/executorpb\"\n\t\"cloud.google.com/go/spanner/test/cloudexecutor/executor\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *proxyPort == \"\" {\n\t\tlog.Fatal(\"Proxy port need to be assigned in order to start worker proxy.\")\n\t}\n\tif *spannerPort == \"\" {\n\t\tlog.Fatal(\"Spanner proxyPort need to be assigned in order to start worker proxy.\")\n\t}\n\tif *cert == \"\" {\n\t\tlog.Fatalf(\"Certificate need to be assigned in order to start worker proxy.\")\n\t}\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%s\", *proxyPort))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\tclientOptions := getClientOptionsForSysTests()\n\tcloudProxyServer, err := executor.NewCloudProxyServer(context.Background(), clientOptions)\n\tif err != nil {\n\t\tlog.Fatalf(\"Creating Cloud Proxy Server failed: %v\", err)\n\t}\n\texecutorpb.RegisterSpannerExecutorProxyServer(grpcServer, cloudProxyServer)\n\n\thealthServer := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(grpcServer, healthServer)\n\n\tlog.Printf(\"Server started on proxyPort:%s\\n\", *proxyPort)\n\terr = grpcServer.Serve(lis)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to start server on proxyPort: %s\\n\", *proxyPort)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"strconv\"\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/spanner_executor_proxy\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\nfunc getClientOptionsForSysTests(cert string) []grpc.ServerOption {\n\tvar opts []grpc.ServerOption\n\tif cert != \"\" {\n\t\tcreds, err := grpc.Creds(newTLSCredentials(cert))\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, creds)\n\t}\n\treturn opts\n}\n\nfunc newTLSCredentials(certFile string) grpc.TransportCredentials {\n\t// Implementation would load cert and key, but key is not provided in input\n\t// This is a placeholder; actual implementation requires key file\n\tcreds, _ := grpc.SSLServerConfigFromFile(certFile, certFile)\n\treturn creds\n}\n\nfunc main() {\n\tproxyPort := \"50051\"\n\tspannerPort := \"9010\"\n\tcert := \"\"\n\n\tif proxyPort == \"\" {\n\t\tlog.Fatal(\"proxyPort is required\")\n\t}\n\tportNum, err := strconv.Atoi(proxyPort)\n\tif err != nil || portNum < 1 || portNum > 65535 {\n\t\tlog.Fatalf(\"Invalid proxyPort: %s\", proxyPort)\n\t}\n\n\tif spannerPort != \"\" {\n\t\tportNum, err := strconv.Atoi(spannerPort)\n\t\tif err != nil || portNum < 1 || portNum > 65535 {\n\t\t\tlog.Fatalf(\"Invalid spannerPort: %s\", spannerPort)\n\t\t}\n\t}\n\n\tif cert != \"\" {\n\t\tif _, err := os.Stat(cert); os.IsNotExist(err) {\n\t\t\tlog.Fatalf(\"Certificate file not found: %s\", cert)\n\t\t}\n\t}\n\n\taddr := \":\" + proxyPort\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen on %s: %v\", addr, err)\n\t}\n\n\topts := getClientOptionsForSysTests(cert)\n\ts := grpc.NewServer(opts...)\n\n\tpb.RegisterSpannerExecutorProxyServer(s, &SpannerExecutorProxy{})\n\tgrpc_health_v1.RegisterHealthServer(s, health.NewServer())\n\n\tlog.Printf(\"gRPC server starting on %s\", addr)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both xDS (Discovery Service) and LRS (Load Reporting Service) protocols, with proper request/response channels and connection monitoring capabilities.\n\nStruct Description: The Server struct represents a gRPC server that implements both xDS v3 and LRS v3 services. It manages communication channels for requests/responses and tracks connection state.\n\nFields:\n\nXDSRequestChan: *testutils.Channel - Channel for receiving xDS requests\nXDSResponseChan: chan *Response - Channel for sending xDS responses\nLRSRequestChan: *testutils.Channel - Channel for receiving LRS requests\nLRSResponseChan: chan *Response - Channel for sending LRS responses\nLRSStreamOpenChan: *testutils.Channel - Channel for tracking LRS stream openings\nLRSStreamCloseChan: *testutils.Channel - Channel for tracking LRS stream closings\nNewConnChan: *testutils.Channel - Channel for tracking new connections\nAddress: string - Server's listening address\nxdsServerV3: *xdsServerV3 - xDS v3 server implementation\nlrsServerV3: *lrsServerV3 - LRS v3 server implementation\n\nMethods:\n\nNewServer: (addr string) -> *Server - Creates a new Server instance with initialized channels\nStartServer: (lis net.Listener) -> (*Server, func(), error) - Starts the gRPC server on given listener and returns cleanup function\nStreamAggregatedResources: (s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) -> error - Handles xDS v3 streaming RPC\nStreamLoadStats: (s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) -> error - Handles LRS v3 streaming RPC",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils\"\n\t\"google.golang.org/protobuf/proto\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3lrspb \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n)\n\ntype Server struct {\n\tXDSRequestChan *testutils.Channel\n\tXDSResponseChan chan *Response\n\tLRSRequestChan *testutils.Channel\n\tLRSResponseChan chan *Response\n\tLRSStreamOpenChan *testutils.Channel\n\tLRSStreamCloseChan *testutils.Channel\n\tNewConnChan *testutils.Channel\n\tAddress string\n\t*xdsServerV3\n\t*lrsServerV3\n}\n\ntype wrappedListener struct {\n\tnet.Listener\n\tserver *Server\n}\n\nfunc (wl *wrappedListener) Accept() (net.Conn, error) {\n\tc, err := wl.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\twl.server.NewConnChan.Send(struct{}{})\n\treturn c, err\n}\n\nfunc StartServer(lis net.Listener) (*Server, func(), error) {\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\treturn nil, func() {}, fmt.Errorf(\"net.Listen() failed: %v\", err)\n\t\t}\n\t}\n\n\ts := NewServer(lis.Addr().String())\n\twp := &wrappedListener{\n\t\tListener: lis,\n\t\tserver:   s,\n\t}\n\n\tserver := grpc.NewServer()\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(server, s)\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(server, s)\n\tgo server.Serve(wp)\n\n\treturn s, func() { server.Stop() }, nil\n}\n\nfunc NewServer(addr string) *Server {\n\ts := &Server{\n\t\tXDSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tNewConnChan:        testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tXDSResponseChan:    make(chan *Response, defaultChannelBufferSize),\n\t\tLRSResponseChan:    make(chan *Response, 1),\n\t\tLRSStreamOpenChan:  testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSStreamCloseChan: testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tAddress:            addr,\n\t}\n\ts.xdsServerV3 = &xdsServerV3{reqChan: s.XDSRequestChan, respChan: s.XDSResponseChan}\n\ts.lrsServerV3 = &lrsServerV3{reqChan: s.LRSRequestChan, respChan: s.LRSResponseChan, streamOpenChan: s.LRSStreamOpenChan, streamCloseChan: s.LRSStreamCloseChan}\n\treturn s\n}\n\ntype xdsServerV3 struct {\n\treqChan  *testutils.Channel\n\trespChan chan *Response\n}\n\nfunc (xdsS *xdsServerV3) StreamAggregatedResources(s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\terrCh := make(chan error, 2)\n\tgo func() {\n\t\tfor {\n\t\t\treq, err := s.Recv()\n\t\t\tif err != nil {\n\t\t\t\terrCh <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\txdsS.reqChan.Send(&Request{req, err})\n\t\t}\n\t}()\n\tgo func() {\n\t\tvar retErr error\n\t\tdefer func() {\n\t\t\terrCh <- retErr\n\t\t}()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase r := <-xdsS.respChan:\n\t\t\t\tif r.Err != nil {\n\t\t\t\t\tretErr = r.Err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := s.Send(r.Resp.(*v3discoverypb.DiscoveryResponse)); err != nil {\n\t\t\t\t\tretErr = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-s.Context().Done():\n\t\t\t\tretErr = s.Context().Err()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tif err := <-errCh; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\ntype lrsServerV3 struct {\n\treqChan         *testutils.Channel\n\trespChan        chan *Response\n\tstreamOpenChan  *testutils.Channel\n\tstreamCloseChan *testutils.Channel\n}\n\nfunc (lrsS *lrsServerV3) StreamLoadStats(s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\tlrsS.streamOpenChan.Send(nil)\n\tdefer lrsS.streamCloseChan.Send(nil)\n\n\treq, err := s.Recv()\n\tlrsS.reqChan.Send(&Request{req, err})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase r := <-lrsS.respChan:\n\t\tif r.Err != nil {\n\t\t\treturn r.Err\n\t\t}\n\t\tif err := s.Send(r.Resp.(*v3lrspb.LoadStatsResponse)); err != nil {\n\t\t\treturn err\n\t\t}\n\tcase <-s.Context().Done():\n\t\treturn s.Context().Err()\n\t}\n\n\tfor {\n\t\treq, err := s.Recv()\n\t\tlrsS.reqChan.Send(&Request{req, err})\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\t\"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\t\"github.com/yourorg/testutils\"\n)\n\ntype Server struct {\n\tXDSRequestChan      *testutils.Channel\n\tXDSResponseChan     chan *Response\n\tLRSRequestChan      *testutils.Channel\n\tLRSResponseChan     chan *Response\n\tLRSStreamOpenChan   *testutils.Channel\n\tLRSStreamCloseChan  *testutils.Channel\n\tNewConnChan         *testutils.Channel\n\tAddress             string\n\txdsServerV3         *xdsServerV3\n\tlrsServerV3         *lrsServerV3\n}\n\ntype xdsServerV3 struct {\n\tserver *Server\n}\n\ntype lrsServerV3 struct {\n\tserver *Server\n}\n\ntype Response struct {\n\tResource interface{}\n}\n\nfunc NewServer(addr string) *Server {\n\ts := &Server{\n\t\tXDSRequestChan:      testutils.NewChannel(),\n\t\tXDSResponseChan:     make(chan *Response),\n\t\tLRSRequestChan:      testutils.NewChannel(),\n\t\tLRSResponseChan:     make(chan *Response),\n\t\tLRSStreamOpenChan:   testutils.NewChannel(),\n\t\tLRSStreamCloseChan:  testutils.NewChannel(),\n\t\tNewConnChan:         testutils.NewChannel(),\n\t\tAddress:             addr,\n\t\txdsServerV3:         &xdsServerV3{},\n\t\tlrsServerV3:         &lrsServerV3{},\n\t}\n\ts.xdsServerV3.server = s\n\ts.lrsServerV3.server = s\n\treturn s\n}\n\nfunc (s *Server) StartServer(lis net.Listener) (*Server, func(), error) {\n\tgrpcServer := grpc.NewServer(\n\t\tgrpc.StreamInterceptor(func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\ts.NewConnChan.Send(true)\n\t\t\treturn handler(srv, stream, info, handler)\n\t\t}),\n\t)\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(grpcServer, s.xdsServerV3)\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(grpcServer, s.lrsServerV3)\n\tgo grpcServer.Serve(lis)\n\tcleanup := func() {\n\t\tgrpcServer.GracefulStop()\n\t}\n\treturn s, cleanup, nil\n}\n\nfunc (s *xdsServerV3) StreamAggregatedResources(stream v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.server.XDSRequestChan.Send(req)\n\t\tselect {\n\t\tcase resp := <-s.server.XDSResponseChan:\n\t\t\tif err := stream.Send(resp); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (s *lrsServerV3) StreamLoadStats(stream v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\ts.server.LRSStreamOpenChan.Send(true)\n\tdefer s.server.LRSStreamCloseChan.Send(true)\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.server.LRSRequestChan.Send(req)\n\t}\n}\n```"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and handles gRPC communications.\n\nFunction Description: The main function sets up a gRPC server that listens on port 50051, registers the gRPC service implementation, and starts serving requests. It includes error handling for server setup and operation.\n\nInput: None (The function takes no explicit parameters but uses a hardcoded port \":50051\" for listening)\n\nOutput: None (The function doesn't return anything but will log fatal errors if the server fails to start or serve)\n\nNote: The actual gRPC service implementation (greeter struct) is not shown in the reference code but would need to be defined separately to implement the proto.GreeterServer interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"grpc-hello/proto\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tserver := grpc.NewServer()\n\treflection.Register(server)\n\tproto.RegisterGreeterServer(server, &greeter{})\n\n\tfmt.Println(\"grpc server start ...\")\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype greeter struct {\n\tgrpc.UnknownServiceServer\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tRegisterGreeterServer(s, &greeter{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a gRPC server for chaincode communication in a Hyperledger Fabric network, supporting both secure (TLS) and insecure connections, with the ability to handle chaincode registration and message echoing.\n\nStruct Description: ccSrv represents a chaincode gRPC server that listens for incoming connections, handles chaincode registration, and echoes received messages back to the client.\n\nFields:\nl: net.Listener - The network listener for incoming connections\ngrpcSrv: *grpc.Server - The gRPC server instance\nt: *testing.T - Testing context for assertions\nexpectedCCname: string - The expected chaincode name for validation during registration\n\nMethods:\nRegister: (stream pb.ChaincodeSupport_RegisterServer) -> error - Handles the chaincode registration stream, validates the chaincode name, and echoes messages back to the client\nstop: () -> () - Stops the gRPC server and closes the listener\nnewCCServer: (t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) -> *ccSrv - Creates and configures a new chaincode server instance with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\tpb \"github.com/hyperledger/fabric-protos-go-apiv2/peer\"\n\t\"github.com/hyperledger/fabric/common/crypto/tlsgen\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype ccSrv struct {\n\tl              net.Listener\n\tgrpcSrv        *grpc.Server\n\tt              *testing.T\n\texpectedCCname string\n}\n\nfunc (cs *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\tmsg, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\trequire.Equal(cs.t, pb.ChaincodeMessage_REGISTER.String(), msg.Type.String())\n\tchaincodeID := &pb.ChaincodeID{}\n\terr = proto.Unmarshal(msg.Payload, chaincodeID)\n\tif err != nil {\n\t\treturn err\n\t}\n\trequire.Equal(cs.t, cs.expectedCCname, chaincodeID.Name)\n\tfor {\n\t\tmsg, _ = stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = stream.Send(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (cs *ccSrv) stop() {\n\tcs.grpcSrv.Stop()\n\tcs.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tvar s *grpc.Server\n\tif withTLS {\n\t\tkeyPair, err := ca.NewServerCertKeyPair(\"localhost\")\n\t\trequire.NoError(t, err)\n\t\tcert, err := tls.X509KeyPair(keyPair.Cert, keyPair.Key)\n\t\trequire.NoError(t, err)\n\t\ttlsConf := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t\t\tClientCAs:    x509.NewCertPool(),\n\t\t}\n\t\ttlsConf.ClientCAs.AppendCertsFromPEM(ca.CertBytes())\n\t\ts = grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConf)))\n\t} else {\n\t\ts = grpc.NewServer()\n\t}\n\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", \"\", port))\n\trequire.NoError(t, err, \"%v\", err)\n\treturn &ccSrv{\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t\tl:              l,\n\t\tgrpcSrv:        s,\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/protobuf/proto\"\n\n\tpb \"path/to/chaincode/proto\" // Adjust import path\n)\n\ntype ccSrv struct {\n\tl            net.Listener\n\tgrpcSrv      *grpc.Server\n\tt            *testing.T\n\texpectedCCname string\n}\n\nfunc (s *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif msg.Type == pb.ChaincodeMessage_REGISTER {\n\t\t\tvar regMsg pb.Registration\n\t\t\tif err := proto.Unmarshal(msg.Payload, &regMsg); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif regMsg.Name != s.expectedCCname {\n\t\t\t\ts.t.Errorf(\"expected chaincode name %s, got %s\", s.expectedCCname, regMsg.Name)\n\t\t\t\treturn status.Errorf(status.FailedPrecondition, \"chaincode name mismatch\")\n\t\t\t}\n\t\t}\n\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *ccSrv) stop() {\n\ts.grpcSrv.GracefulStop()\n\ts.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif withTLS {\n\t\tcert, err := ca.ServerCertKeyPair(\"localhost\", \"server\")\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\topts = append(opts, grpc.Creds(credentials.NewServerTLSFromCert(cert)))\n\t}\n\n\tgrpcSrv := grpc.NewServer(opts...)\n\tcc := &ccSrv{\n\t\tl:              lis,\n\t\tgrpcSrv:        grpcSrv,\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t}\n\n\tpb.RegisterChaincodeSupportServer(grpcSrv, cc)\n\n\tgo func() {\n\t\tif err := grpcSrv.Serve(lis); err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\t}()\n\n\treturn cc\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and registers a service to handle those requests.\n\nFunction Description: The function sets up a gRPC server that listens on a given TCP port, creates a new gRPC server instance, registers a service to handle incoming requests, and starts the server in a goroutine. The server runs until it is stopped or encounters an error.\n\nInput: None (The port is hardcoded as \":50052\" in the example, but could be parameterized)\n\nOutput: None (The function runs indefinitely until stopped or an error occurs, with side effects of starting the gRPC server)\n\nNote: The actual service implementation (ChannelzService) would need to be defined elsewhere and imported. The example shows the server setup pattern but assumes the service is already implemented.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tdefer lis.Close()\n\ts := grpc.NewServer()\n\tservice.RegisterChannelzServiceToServer(s)\n\tgo s.Serve(lis)\n\tdefer s.Stop()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\tpb \"example.com/channelz\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterChannelzServiceServer(s, &pb.ChannelzService{})\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\tselect {}\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The function `Run` initializes and starts a gRPC server with the provided network options. It sets up a network listener, creates a gRPC server instance, registers a key service, and handles graceful shutdown upon receiving interrupt or termination signals.\n\nInput: \n- `opts` [struct] - Configuration options for the server, containing:\n  - `Network` [string] - The network type (e.g., \"tcp\")\n  - `Address` [string] - The address to listen on (e.g., \":50051\")\n  - `Prompt` [interface{}] - Optional prompt for the key service\n\nOutput: \n- `error` - Returns an error if the server fails to start or encounters issues during execution",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/getsops/sops/v3/keyservice\"\n\t\"google.golang.org/grpc\"\n)\nfunc Run(opts Opts) error {\n\tlis, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer lis.Close()\n\tgrpcServer := grpc.NewServer()\n\tkeyservice.RegisterKeyServiceServer(grpcServer, keyservice.Server{\n\t\tPrompt: opts.Prompt,\n\t})\n\n\tsigc := make(chan os.Signal, 1)\n\tsignal.Notify(sigc, os.Interrupt, os.Kill, syscall.SIGTERM)\n\tgo func(c chan os.Signal) {\n\t\tsig := <-c\n\t\tlis.Close()\n\t\tos.Exit(0)\n\t}(sigc)\n\treturn grpcServer.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"google.golang.org/grpc\"\n)\n\ntype keyService struct {\n\tprompt interface{}\n}\n\nfunc (s *keyService) Serve(ctx context.Context, req *struct{}) (*struct{}, error) {\n\treturn &struct{}{}, nil\n}\n\nfunc Run(opts struct {\n\tNetwork string\n\tAddress string\n\tPrompt  interface{}\n}) error {\n\tln, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tserver := grpc.NewServer()\n\tRegisterKeyServiceServer(server, &keyService{prompt: opts.Prompt})\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- server.Serve(ln)\n\t}()\n\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)\n\n\tfor {\n\t\tselect {\n\t\tcase err := <-errChan:\n\t\t\treturn err\n\t\tcase <-sigChan:\n\t\t\tserver.GracefulStop()\n\t\t\treturn nil\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a Go struct that implements a mock gRPC server proxy for testing purposes, with start and stop functionality.\n\nStruct Description: The ProxyGRPCMock struct provides a mock implementation of a gRPC server that can be started and stopped programmatically. It allows for custom gRPC service implementations and registration routines to be injected for testing purposes.\n\nFields:\n- GRPCImplementer: [interface{}] - The implementation of the gRPC service handler\n- GRPCRegister: [func(s *grpc.Server, srv interface{})] - The function to register the gRPC service implementation with the server\n- listener: [net.Listener] - The network listener for the gRPC server\n\nMethods:\n- Start: [func(URL string) error] -> [error] - Starts the gRPC server on the specified URL (format \"scheme://path\"). Returns error if initialization fails.\n- Stop: [func() error] -> [error] - Stops the gRPC server by closing the listener. Returns error if no listener exists or closing fails.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister func(s *grpc.Server, srv interface{})\n\tlistener net.Listener\n}\n\nfunc (p *ProxyGRPCMock) Start(URL string) error {\n\tif p.GRPCImplementer == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC handler\")\n\t}\n\n\tif p.GRPCRegister == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC registration routine\")\n\t}\n\n\turl, err := url.Parse(URL)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tl, err := net.Listen(url.Scheme, url.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.listener = l\n\n\tgrpcServer := grpc.NewServer()\n\tp.GRPCRegister(grpcServer, p.GRPCImplementer)\n\n\tgo func() {\n\t\tgrpcServer.Serve(l)\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.listener == nil {\n\t\treturn fmt.Errorf(\"Missing proxy listener\")\n\t}\n\n\treturn p.listener.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister    func(s *grpc.Server, srv interface{})\n\tlistener        net.Listener\n\tserver          *grpc.Server\n}\n\nfunc (p *ProxyGRPCMock) Start(url string) error {\n\tparts := strings.Split(url, \"://\")\n\tif len(parts) != 2 {\n\t\treturn fmt.Errorf(\"invalid URL format: %s\", url)\n\t}\n\tnetwork, addr := parts[0], parts[1]\n\tlis, err := net.Listen(network, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.listener = lis\n\tp.server = grpc.NewServer()\n\tp.GRPCRegister(p.server, p.GRPCImplementer)\n\tgo p.server.Serve(lis)\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.server != nil {\n\t\tp.server.GracefulStop()\n\t\tp.server = nil\n\t}\n\tif p.listener == nil {\n\t\treturn errors.New(\"no listener exists\")\n\t}\n\terr := p.listener.Close()\n\tp.listener = nil\n\treturn err\n}"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles various WebSocket operations including checking user online status, sending messages to users, broadcasting messages to all users, and retrieving user lists.\n\nStruct Description: The `server` struct implements the gRPC service interface defined in the protobuf file, providing concrete implementations for WebSocket operations.\n\nFields:\n- UnimplementedAccServerServer: [protobuf.UnimplementedAccServerServer] - Embedded type to ensure forward compatibility with gRPC service updates\n\nMethods:\n- QueryUsersOnline: [Name](ctx context.Context, req *protobuf.QueryUsersOnlineReq) -> (*protobuf.QueryUsersOnlineRsp, error) - Checks if a specified user is currently online\n- SendMsg: [Name](ctx context.Context, req *protobuf.SendMsgReq) -> (*protobuf.SendMsgRsp, error) - Sends a message to a specific user\n- SendMsgAll: [Name](ctx context.Context, req *protobuf.SendMsgAllReq) -> (*protobuf.SendMsgAllRsp, error) - Broadcasts a message to all connected users\n- GetUserList: [Name](ctx context.Context, req *protobuf.GetUserListReq) -> (*protobuf.GetUserListRsp, error) - Retrieves the list of currently connected users\n- Init: [Name]() -> () - Initializes and starts the gRPC server with configuration from Viper",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/link1st/gowebsocket/v2/common\"\n\t\"github.com/link1st/gowebsocket/v2/models\"\n\t\"github.com/link1st/gowebsocket/v2/protobuf\"\n\t\"github.com/link1st/gowebsocket/v2/servers/websocket\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n}\n\nfunc (s *server) QueryUsersOnline(c context.Context, req *protobuf.QueryUsersOnlineReq) (rsp *protobuf.QueryUsersOnlineRsp, err error) {\n\trsp = &protobuf.QueryUsersOnlineRsp{}\n\tonline := websocket.CheckUserOnline(req.GetAppID(), req.GetUserID())\n\tsetErr(req, common.OK, \"\")\n\trsp.Online = online\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsg(c context.Context, req *protobuf.SendMsgReq) (rsp *protobuf.SendMsgRsp, err error) {\n\trsp = &protobuf.SendMsgRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\tsendResults, err := websocket.SendUserMessageLocal(req.GetAppID(), req.GetUserID(), data)\n\tif err != nil {\n\t\tsetErr(rsp, common.ServerError, \"\")\n\t\treturn rsp, nil\n\t}\n\tif !sendResults {\n\t\tsetErr(rsp, common.OperationFailure, \"\")\n\t\treturn rsp, nil\n\t}\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsgAll(c context.Context, req *protobuf.SendMsgAllReq) (rsp *protobuf.SendMsgAllRsp, err error) {\n\trsp = &protobuf.SendMsgAllRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\twebsocket.AllSendMessages(req.GetAppID(), req.GetUserID(), data)\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) GetUserList(c context.Context, req *protobuf.GetUserListReq) (rsp *protobuf.GetUserListRsp, err error) {\n\trsp = &protobuf.GetUserListRsp{}\n\tuserList := websocket.GetUserList(req.GetAppID())\n\tsetErr(rsp, common.OK, \"\")\n\trsp.UserID = userList\n\treturn rsp, nil\n}\n\nfunc Init() {\n\trpcPort := viper.GetString(\"app.rpcPort\")\n\tlis, err := net.Listen(\"tcp\", \":\"+rpcPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\t\"protobuf\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n\tonlineUsers map[string]chan string\n\tmu          sync.RWMutex\n}\n\nfunc (s *server) QueryUsersOnline(ctx context.Context, req *protobuf.QueryUsersOnlineReq) (*protobuf.QueryUsersOnlineRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\t_, exists := s.onlineUsers[req.UserId]\n\treturn &protobuf.QueryUsersOnlineRsp{Online: exists}, nil\n}\n\nfunc (s *server) SendMsg(ctx context.Context, req *protobuf.SendMsgReq) (*protobuf.SendMsgRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tuserChan, exists := s.onlineUsers[req.UserId]\n\tif !exists {\n\t\treturn nil, status.Errorf(codes.NotFound, \"user not online\")\n\t}\n\tuserChan <- req.Msg\n\treturn &protobuf.SendMsgRsp{Success: true}, nil\n}\n\nfunc (s *server) SendMsgAll(ctx context.Context, req *protobuf.SendMsgAllReq) (*protobuf.SendMsgAllRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tfor _, userChan := range s.onlineUsers {\n\t\tuserChan <- req.Msg\n\t}\n\treturn &protobuf.SendMsgAllRsp{Success: true}, nil\n}\n\nfunc (s *server) GetUserList(ctx context.Context, req *protobuf.GetUserListReq) (*protobuf.GetUserListRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tusers := make([]string, 0, len(s.onlineUsers))\n\tfor user := range s.onlineUsers {\n\t\tusers = append(users, user)\n\t}\n\treturn &protobuf.GetUserListRsp{Users: users}, nil\n}\n\nfunc (s *server) Init() {\n\ts.onlineUsers = make(map[string]chan string)\n\tviper.SetConfigFile(\"config.yaml\")\n\tif err := viper.ReadInConfig(); err != nil {\n\t\tlog.Fatalf(\"Error reading config file: %v\", err)\n\t}\n\tport := viper.GetInt(\"grpc.port\")\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\tgrpcServer := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(grpcServer, s)\n\tlog.Printf(\"gRPC server started on port %d\", port)\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server to handle incoming requests on a specified network address.\n\nFunction Description: The function `startServer` sets up a gRPC server that listens on the provided TCP address. It creates a new gRPC server instance, registers the Echo service implementation, and begins serving requests. If any step fails, it logs the error and terminates the program.\n\nInput: \n- `addr` [string] - The network address (including port) on which the gRPC server should listen (e.g., \"localhost:50051\").\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error).",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &ecServer{addr: addr})\n\tlog.Printf(\"serving on %s\\n\", addr)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\t// Register the Echo service implementation (assumed to be defined elsewhere)\n\t// RegisterEchoServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Create a mock CSI (Container Storage Interface) provider server in Go that implements the gRPC interface for a secrets store CSI driver. This server should be able to simulate both successful and error responses for testing purposes.\n\nStruct Description: The MockCSIProviderServer struct represents a mock implementation of a CSI provider server that communicates via gRPC over a Unix domain socket. It allows configuration of mock responses and error conditions for testing the CSI driver integration.\n\nFields:\n- grpcServer: *grpc.Server - The gRPC server instance\n- listener: net.Listener - The network listener for the gRPC server\n- socketPath: string - The filesystem path for the Unix domain socket\n- returnErr: error - An error to return for simulated error conditions\n- errorCode: string - The error code to include in responses\n- objects: []*v1alpha1.ObjectVersion - Mock object versions to return\n- files: []*v1alpha1.File - Mock files to return\n\nMethods:\n- NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) - Creates a new mock server instance with the given socket path\n- SetReturnError(err error) - Sets an error to be returned by the mock server\n- SetObjects(objects map[string]string) - Configures mock object versions to return\n- SetFiles(files []*v1alpha1.File) - Configures mock files to return\n- SetProviderErrorCode(errorCode string) - Sets the error code for responses\n- Start() error - Starts the gRPC server listening on the configured socket\n- Stop() - Gracefully stops the gRPC server\n- Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) - Implements the Mount gRPC method\n- Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) - Implements the Version gRPC method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"sigs.k8s.io/secrets-store-csi-driver/provider/v1alpha1\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer *grpc.Server\n\tlistener   net.Listener\n\tsocketPath string\n\treturnErr  error\n\terrorCode  string\n\tobjects    []*v1alpha1.ObjectVersion\n\tfiles      []*v1alpha1.File\n}\n\nfunc NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tserver := grpc.NewServer()\n\ts := &MockCSIProviderServer{\n\t\tgrpcServer: server,\n\t\tsocketPath: socketPath,\n\t}\n\tv1alpha1.RegisterCSIDriverProviderServer(server, s)\n\treturn s, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tvar ov []*v1alpha1.ObjectVersion\n\tfor k, v := range objects {\n\t\tov = append(ov, &v1alpha1.ObjectVersion{Id: k, Version: v})\n\t}\n\tm.objects = ov\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tvar ov []*v1alpha1.File\n\tfor _, v := range files {\n\t\tov = append(ov, &v1alpha1.File{\n\t\t\tPath:     v.Path,\n\t\t\tMode:     v.Mode,\n\t\t\tContents: v.Contents,\n\t\t})\n\t}\n\tm.files = ov\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\tvar err error\n\tm.listener, err = net.Listen(\"unix\", m.socketPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tgo func() {\n\t\tif err = m.grpcServer.Serve(m.listener); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.GracefulStop()\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tvar attrib, secret map[string]string\n\tvar filePermission os.FileMode\n\tvar err error\n\n\tif m.returnErr != nil {\n\t\treturn &v1alpha1.MountResponse{}, m.returnErr\n\t}\n\tif err = json.Unmarshal([]byte(req.GetAttributes()), &attrib); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal attributes, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetSecrets()), &secret); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal secrets, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetPermission()), &filePermission); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal file permission, error: %w\", err)\n\t}\n\treturn &v1alpha1.MountResponse{\n\t\tObjectVersion: m.objects,\n\t\tError: &v1alpha1.Error{\n\t\t\tCode: m.errorCode,\n\t\t},\n\t\tFiles: m.files,\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion:        \"v1alpha1\",\n\t\tRuntimeName:    \"fakeprovider\",\n\t\tRuntimeVersion: \"0.0.10\",\n\t}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer *grpc.Server\n\tlistener   net.Listener\n\tsocketPath string\n\treturnErr  error\n\terrorCode  string\n\tobjects    []*v1alpha1.ObjectVersion\n\tfiles      []*v1alpha1.File\n}\n\nfunc NewMockCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tif err := os.Remove(socketPath); err != nil && !os.IsNotExist(err) {\n\t\treturn nil, err\n\t}\n\n\tlistener, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &MockCSIProviderServer{\n\t\tgrpcServer: grpc.NewServer(),\n\t\tlistener:   listener,\n\t\tsocketPath: socketPath,\n\t}, nil\n}\n\nfunc (s *MockCSIProviderServer) SetReturnError(err error) {\n\ts.returnErr = err\n}\n\nfunc (s *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tvar objVersions []*v1alpha1.ObjectVersion\n\tfor name, version := range objects {\n\t\tobjVersions = append(objVersions, &v1alpha1.ObjectVersion{\n\t\t\tName:    name,\n\t\t\tVersion: version,\n\t\t})\n\t}\n\ts.objects = objVersions\n}\n\nfunc (s *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\ts.files = files\n}\n\nfunc (s *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\ts.errorCode = errorCode\n}\n\nfunc (s *MockCSIProviderServer) Start() error {\n\tgo func() {\n\t\tif err := s.grpcServer.Serve(s.listener); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (s *MockCSIProviderServer) Stop() {\n\ts.grpcServer.GracefulStop()\n\ts.listener.Close()\n\tos.Remove(s.socketPath)\n}\n\nfunc (s *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tif s.returnErr != nil {\n\t\treturn nil, s.returnErr\n\t}\n\n\tresp := &v1alpha1.MountResponse{}\n\n\tif s.errorCode != \"\" {\n\t\tresp.ErrorCode = s.errorCode\n\t} else {\n\t\tresp.Objects = s.objects\n\t\tresp.Files = s.files\n\t}\n\n\treturn resp, nil\n}\n\nfunc (s *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\tif s.returnErr != nil {\n\t\treturn nil, s.returnErr\n\t}\n\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion: \"1.0.0\",\n\t}, nil\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a gRPC server in Go that handles authentication services, connects to Redis for data storage, and exposes Prometheus metrics for monitoring.\n\nStruct Description: The authHandler struct implements the AuthServiceServer interface and provides authentication functionality using Redis as the backend storage.\n\nFields:\nredisClient: *redis.Client - The Redis client used for data storage and retrieval\n\nMethods:\nServe: (listener net.Listener) -> error - Starts the gRPC server and begins listening for incoming requests\nRegisterWithPrometheus: () -> error - Registers gRPC and custom metrics with Prometheus\nStartMetricsServer: () -> error - Starts an HTTP server for Prometheus metrics collection\n\nNote: The struct implements all required gRPC service methods defined in the auth.proto file, though these are not shown in the reference code. The main functionality includes:\n1. Setting up a gRPC server with Prometheus monitoring\n2. Establishing Redis connection\n3. Combining gRPC and HTTP servers for both RPC calls and metrics collection\n4. Proper error handling and logging throughout the process",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/go-redis/redis\"\n\t\"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/lucperkins/colossus/proto/auth\"\n)\nfunc main() {\n\tlog.Printf(\"Starting up the gRPC auth server on localhost:%d\", PORT)\n\n\tlog.Print(\"Attempting to connect to Redis\")\n\n\tredisClient := redis.NewClient(&redis.Options{\n\t\tAddr: \"colossus-redis-cluster:6379\",\n\t})\n\n\t_, err := redisClient.Ping().Result()\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect to Redis cluster: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully connected to Redis\")\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", PORT))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully created TCP listener\")\n\n\tserver := grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n\t)\n\n\tauthServer := authHandler{\n\t\tredisClient: redisClient,\n\t}\n\n\thttpServer := &http.Server{\n\t\tHandler: promhttp.HandlerFor(metricsRegistry, promhttp.HandlerOpts{}),\n\t\tAddr:    fmt.Sprintf(\"0.0.0.0:%d\", PROMETHEUS_PORT),\n\t}\n\n\tauth.RegisterAuthServiceServer(server, &authServer)\n\n\tgrpcMetrics.InitializeMetrics(server)\n\n\tmetricsRegistry.MustRegister(grpcMetrics, authCounter, failCounter)\n\n\tlog.Print(\"Successfully registered with Prometheus\")\n\n\tgo func() {\n\t\tlog.Print(\"Starting up HTTP server for Prometheus metrics collection\")\n\n\t\tif err := httpServer.ListenAndServe(); err != nil {\n\t\t\tlog.Fatalf(\"Unable to start HTTP server for Prometheus metrics: %v\", err)\n\t\t}\n\t}()\n\n\tlog.Fatal(server.Serve(listener))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/go-redis/redis/v8\"\n\t\"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\tauth \"example.com/authpb\"\n)\n\ntype authHandler struct {\n\tredisClient *redis.Client\n}\n\nfunc (ah *authHandler) Serve(listener net.Listener) error {\n\tah.redisClient = redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\",\n\t\tDB:       0,\n\t})\n\n\tpong, err := ah.redisClient.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tlog.Printf(\"Failed to connect to Redis: %v\", err)\n\t\treturn err\n\t}\n\tlog.Println(\"Connected to Redis:\", pong)\n\n\tgrpcServer := grpc.NewServer()\n\tgrpc_prometheus.Register(grpcServer)\n\tauth.RegisterAuthServiceServer(grpcServer, ah)\n\n\tif err := ah.RegisterWithPrometheus(); err != nil {\n\t\tlog.Printf(\"Failed to register Prometheus metrics: %v\", err)\n\t\treturn err\n\t}\n\n\tlog.Printf(\"Starting gRPC server on %v\", listener.Addr())\n\tif err := grpcServer.Serve(listener); err != nil {\n\t\tlog.Printf(\"gRPC server failed: %v\", err)\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (ah *authHandler) RegisterWithPrometheus() error {\n\tauthAttempts := prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"auth_attempts_total\",\n\t\t\tHelp: \"Total number of authentication attempts.\",\n\t\t},\n\t\t[]string{\"success\"},\n\t)\n\tprometheus.MustRegister(authAttempts)\n\treturn nil\n}\n\nfunc (ah *authHandler) StartMetricsServer() error {\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tlog.Println(\"Starting Prometheus metrics server on :8081\")\n\tif err := http.ListenAndServe(\":8081\", nil); err != nil {\n\t\tlog.Printf(\"Metrics server failed: %v\", err)\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Implement a gRPC server in Go that collects and manages execution statistics for tasks in a distributed system.\n\nStruct Description: The Executor struct represents a gRPC server that handles execution statistics collection and management. It maintains a list of execution stats and provides methods to serve gRPC requests and process incoming statistics.\n\nFields:\nstats: []*pb.ExecutionStat - A slice of pointers to ExecutionStat protobuf messages, storing the collected execution statistics.\n\nMethods:\nserveGrpc: (listener net.Listener) -> () - Starts a gRPC server on the given listener, registering the Executor as a GleamExecutorServer implementation.\nCollectExecutionStatistics: (stream pb.GleamExecutor_CollectExecutionStatisticsServer) -> error - Processes a stream of execution statistics, updating the internal stats collection when matching task IDs are found. Returns nil on successful completion or an error if stream processing fails.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/chrislusf/gleam/pb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (exe *Executor) serveGrpc(listener net.Listener) {\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(grpcServer, exe)\n\tgrpcServer.Serve(listener)\n}\n\nfunc (exe *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstats, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, stat := range stats.Stats {\n\t\t\tfor i, current := range exe.stats {\n\t\t\t\tif current.StepId == stat.StepId && current.TaskId == stat.TaskId {\n\t\t\t\t\texe.stats[i] = stat\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"example.com/gleam\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (e *Executor) serveGrpc(listener net.Listener) {\n\ts := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(s, e)\n\tif err := s.Serve(listener); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (e *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstat, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfound := false\n\t\tfor i, s := range e.stats {\n\t\t\tif s.TaskId == stat.TaskId {\n\t\t\t\te.stats[i] = stat\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\te.stats = append(e.stats, stat)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a function that sets up and starts a gRPC server with reflection capabilities, registering multiple services and handling incoming requests.\n\nFunction Description: The Serve function initializes a gRPC server on a specified TCP port, registers multiple service implementations (RouteGuide and Foobar), enables server reflection for debugging, and starts listening for incoming RPC requests. It also demonstrates protobuf JSON marshaling of a well-known type.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but runs indefinitely to serve requests)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":5001\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"server: failed to create listener: %v\", err)\n\t}\n\n\te, _ := protojson.Marshal(&WellKnownRequest{Timestamp: timestamppb.Now()})\n\tfmt.Printf(\"string(e) = %+v\\n\", string(e))\n\n\ts := newServer()\n\tgs := grpc.NewServer()\n\tRegisterRouteGuideServer(gs, s)\n\tRegisterFoobarServer(gs, s)\n\treflection.Register(gs)\n\tgs.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\trouteguide \"google.golang.org/grpc/examples/route_guide/routeguide\"\n)\n\ntype routeGuideServer struct {\n\trouteguide.UnimplementedRouteGuideServer\n}\n\ntype foobarServer struct{}\n\nfunc (s *foobarServer) SomeMethod(ctx context.Context, req *SomeRequest) (*SomeResponse, error) {\n\treturn &SomeResponse{}, nil\n}\n\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\trouteguide.RegisterRouteGuideServer(s, &routeGuideServer{})\n\t// Assuming foobar package and RegisterFoobarServer exist\n\t// foobar.RegisterFoobarServer(s, &foobarServer{})\n\treflection.Register(s)\n\n\tts := timestamppb.Now()\n\tjsonData, _ := protojson.Marshal(ts)\n\tfmt.Println(\"Timestamp JSON:\", string(jsonData))\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement a gRPC server for a CSI (Container Storage Interface) driver in Go, including server lifecycle management, request interception, and authentication.\n\nStruct Description: CSIDriver represents a gRPC server implementation for CSI driver operations, managing server lifecycle, intercepting requests, and handling authentication.\n\nFields:\n- listener: net.Listener - Network listener for incoming connections\n- server: *grpc.Server - gRPC server instance\n- servers: *CSIDriverServers - CSI service implementations (Controller, Identity, Node)\n- wg: sync.WaitGroup - Synchronization for graceful shutdown\n- running: bool - Server running state flag\n- lock: sync.Mutex - Mutex for thread-safe operations\n- creds: *CSICreds - Authentication credentials\n- logGRPC: LogGRPC - Callback for logging gRPC calls\n\nMethods:\n- NewCSIDriver(*CSIDriverServers) -> *CSIDriver - Constructor that creates a new CSIDriver instance with given service implementations\n- Start(net.Listener, grpc.UnaryServerInterceptor) -> error - Starts the gRPC server with optional interceptor\n- goServe(chan<- bool) -> - Internal method to start server in goroutine\n- Stop() -> - Stops the server gracefully\n- callInterceptor(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) -> (interface{}, error) - Request interceptor handling authentication and logging",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype CSIDriver struct {\n\tlistener net.Listener\n\tserver   *grpc.Server\n\tservers  *CSIDriverServers\n\twg       sync.WaitGroup\n\trunning  bool\n\tlock     sync.Mutex\n\tcreds    *CSICreds\n\tlogGRPC  LogGRPC\n}\n\ntype LogGRPC func(method string, request, reply interface{}, err error)\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t}\n}\n\nfunc (c *CSIDriver) Start(l net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tc.listener = l\n\n\tif interceptor == nil {\n\t\tinterceptor = c.callInterceptor\n\t}\n\tc.server = grpc.NewServer(grpc.UnaryInterceptor(interceptor))\n\n\tif c.servers.Controller != nil {\n\t\tcsi.RegisterControllerServer(c.server, c.servers.Controller)\n\t}\n\tif c.servers.Identity != nil {\n\t\tcsi.RegisterIdentityServer(c.server, c.servers.Identity)\n\t}\n\tif c.servers.Node != nil {\n\t\tcsi.RegisterNodeServer(c.server, c.servers.Node)\n\t}\n\n\twaitForServer := make(chan bool)\n\tc.goServe(waitForServer)\n\t<-waitForServer\n\tc.running = true\n\treturn nil\n}\n\nfunc (c *CSIDriver) goServe(started chan<- bool) {\n\tgo func() {\n\t\tc.wg.Add(1)\n\t\tdefer c.wg.Done()\n\t\tstarted <- true\n\t\tc.server.Serve(c.listener)\n\t}()\n}\n\nfunc (c *CSIDriver) Stop() {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif !c.running {\n\t\treturn\n\t}\n\n\tc.server.Stop()\n\tc.wg.Wait()\n}\n\nfunc (c *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\terr := authInterceptor(c.creds, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trsp, err := handler(ctx, req)\n\tif c.logGRPC != nil {\n\t\tc.logGRPC(info.FullMethod, req, rsp, err)\n\t}\n\treturn rsp, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\n\t\"github.com/container-storage-interface/spec/lib/go/csi\"\n)\n\ntype CSICreds struct{}\n\nfunc (c *CSICreds) Authenticate(ctx context.Context) bool {\n\t// Placeholder for actual authentication logic\n\treturn true\n}\n\ntype LogGRPC func(ctx context.Context, method string, req interface{})\n\ntype CSIDriverServers struct {\n\tIdentity   csi.IdentityServer\n\tController csi.ControllerServer\n\tNode       csi.NodeServer\n}\n\ntype CSIDriver struct {\n\tlistener  net.Listener\n\tserver    *grpc.Server\n\tservers   *CSIDriverServers\n\twg        sync.WaitGroup\n\trunning   bool\n\tlock      sync.Mutex\n\tcreds     *CSICreds\n\tlogGRPC   LogGRPC\n}\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t}\n}\n\nfunc (cs *CSIDriver) Start(ln net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\tcs.lock.Lock()\n\tdefer cs.lock.Unlock()\n\n\tif cs.running {\n\t\treturn fmt.Errorf(\"server is already running\")\n\t}\n\n\tcs.listener = ln\n\n\tcombinedInterceptor := func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\tvar nextHandler grpc.UnaryHandler\n\t\tif interceptor != nil {\n\t\t\tnextHandler = func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\t\t\treturn interceptor(ctx, req, info, handler)\n\t\t\t}\n\t\t} else {\n\t\t\tnextHandler = handler\n\t\t}\n\t\treturn cs.callInterceptor(ctx, req, info, nextHandler)\n\t}\n\n\tcs.server = grpc.NewServer(grpc.UnaryInterceptor(combinedInterceptor))\n\tcsi.RegisterIdentityServer(cs.server, cs.servers.Identity)\n\tcsi.RegisterControllerServer(cs.server, cs.servers.Controller)\n\tcsi.RegisterNodeServer(cs.server, cs.servers.Node)\n\n\tcs.running = true\n\n\tdone := make(chan bool)\n\tcs.wg.Add(1)\n\tgo cs.goServe(done)\n\n\tselect {\n\tcase <-done:\n\tcase <-time.After(5 * time.Second):\n\t\treturn fmt.Errorf(\"server failed to start within timeout\")\n\t}\n\n\treturn nil\n}\n\nfunc (cs *CSIDriver) goServe(done chan<- bool) {\n\tdefer cs.wg.Done()\n\tdefer close(done)\n\n\tif err := cs.server.Serve(cs.listener); err != nil {\n\t\tlog.Printf(\"gRPC server stopped with error: %v\", err)\n\t\tdone <- false\n\t\treturn\n\t}\n\tdone <- true\n}\n\nfunc (cs *CSIDriver) Stop() {\n\tcs.lock.Lock()\n\tdefer cs.lock.Unlock()\n\n\tif !cs.running {\n\t\treturn\n\t}\n\n\tcs.running = false\n\tcs.server.GracefulStop()\n\tcs.wg.Wait()\n}\n\nfunc (cs *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tif cs.creds != nil && !cs.creds.Authenticate(ctx) {\n\t\treturn nil, status.Errorf(codes.Unauthenticated, \"request not authenticated\")\n\t}\n\n\tif cs.logGRPC != nil {\n\t\tcs.logGRPC(ctx, info.FullMethod, req)\n\t}\n\n\treturn handler(ctx, req)\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown.\n\nStruct Description: The Plumber struct represents a gRPC server instance with configuration options, logging, and shutdown capabilities.\n\nFields:\n- Config: *options.Config - Configuration settings for the server\n- CLIOptions: *options.CLIOptions - Command line interface options\n- PersistentConfig: *options.PersistentConfig - Persistent configuration settings\n- Actions: *actions.Actions - Server actions and operations\n- Bus: bus.IBus - Message bus interface\n- ServiceShutdownCtx: context.Context - Context for shutdown signaling\n- log: *logrus.Entry - Logger instance\n\nMethods:\n- startGRPCServer: () -> error - Starts the gRPC server and listens for incoming requests\n- watchServiceShutdown: (*grpc.Server) -> () - Monitors for shutdown signals and stops the gRPC server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/batchcorp/plumber-schemas/build/go/protos\"\n\t\"github.com/streamdal/plumber/server\"\n)\n\ntype Plumber struct {\n\tConfig               *options.Config\n\tCLIOptions           *options.CLIOptions\n\tPersistentConfig     *options.PersistentConfig\n\tActions              *actions.Actions\n\tBus                  bus.IBus\n\tServiceShutdownCtx   context.Context\n\tlog                  *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlis, err := net.Listen(\"tcp\", p.CLIOptions.Server.GrpcListenAddress)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to listen on '%s': %s\", p.CLIOptions.Server.GrpcListenAddress, err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tgrpcServer := grpc.NewServer(opts...)\n\n\tp.PersistentConfig.ClusterID = p.CLIOptions.Server.ClusterId\n\n\tplumberServer := &server.Server{\n\t\tActions:          p.Actions,\n\t\tPersistentConfig: p.PersistentConfig,\n\t\tAuthToken:        p.CLIOptions.Server.AuthToken,\n\t\tBus:              p.Bus,\n\t\tLog:              logrus.WithField(\"pkg\", \"plumber/cli_server.go\"),\n\t\tCLIOptions:       p.CLIOptions,\n\t}\n\n\tprotos.RegisterPlumberServerServer(grpcServer, plumberServer)\n\n\tgo p.watchServiceShutdown(grpcServer)\n\n\tp.log.Debugf(\"starting gRPC server on %s\", p.CLIOptions.Server.GrpcListenAddress)\n\n\terrCh := make(chan error, 1)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\terrCh <- errors.Wrap(err, \"unable to start gRPC server\")\n\t\t}\n\t}()\n\n\tafterCh := time.After(5 * time.Second)\n\n\tselect {\n\tcase <-afterCh:\n\t\treturn nil\n\tcase err := <-errCh:\n\t\treturn err\n\t}\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\n\tp.log.Debug(\"received shutdown request in gRPC server via ServiceShutdownCtx\")\n\n\ttime.Sleep(5 * time.Second)\n\n\tgrpcServer.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"github.com/sirupsen/logrus\"\n\tpb \"path/to/your/protobuf\"\n)\n\ntype Plumber struct {\n\tConfig           *options.Config\n\tCLIOptions       *options.CLIOptions\n\tPersistentConfig *options.PersistentConfig\n\tActions          *actions.Actions\n\tBus              bus.IBus\n\tServiceShutdownCtx context.Context\n\tlog              *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\taddr := fmt.Sprintf(\":%d\", p.CLIOptions.GRPCPort)\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif p.Config.TLSEnabled {\n\t\tcreds, err := credentials.NewServerTLSFromFile(p.Config.CertFile, p.Config.KeyFile)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\topts = append(opts, grpc.UnaryInterceptor(p.unaryInterceptor()))\n\n\ts := grpc.NewServer(opts...)\n\tpb.RegisterPlumberServer(s, &server{plumber: p})\n\n\tp.log.Infof(\"gRPC server starting on %s\", addr)\n\tgo p.watchServiceShutdown(s)\n\treturn s.Serve(lis)\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\tp.log.Info(\"Shutting down gRPC server...\")\n\tgrpcServer.GracefulStop()\n}\n\nfunc (p *Plumber) unaryInterceptor() grpc.UnaryServerInterceptor {\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\tp.log.WithField(\"method\", info.FullMethod).Info(\"Received request\")\n\t\treturn handler(ctx, req)\n\t}\n}\n\ntype server struct {\n\tpb.PlumberServer\n\tplumber *Plumber\n}"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both unary and bidirectional streaming RPCs for an echo service, with TLS security.\n\nStruct Description: The server struct implements the EchoServer interface generated from the protobuf definition, providing echo functionality for both unary and streaming RPCs.\n\nFields:\n- UnimplementedEchoServer: pb.UnimplementedEchoServer - Embedded type to ensure forward compatibility\n\nMethods:\n- UnaryEcho: (context.Context, *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls by echoing back the received message\n- BidirectionalStreamingEcho: (pb.Echo_BidirectionalStreamingEchoServer) -> error - Handles bidirectional streaming by continuously receiving messages and echoing them back until the stream ends\n\nInput: None (The struct itself doesn't take input parameters, but its methods do as described above)\n\nOutput: None (The struct doesn't return anything directly, but its methods return values as described above)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/examples/data\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(_ context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tfmt.Printf(\"unary echoing message %q\\n\", in.Message)\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc (s *server) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfor {\n\t\tin, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfmt.Printf(\"server: error receiving from stream: %v\\n\", err)\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"bidi echoing message %q\\n\", in.Message)\n\t\tstream.Send(&pb.EchoResponse{Message: in.Message})\n\t}\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"the port to serve on\")\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tcreds, err := credentials.NewServerTLSFromFile(data.Path(\"x509/server_cert.pem\"), data.Path(\"x509/server_key.pem\"))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create credentials: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"path/to/your/protobuf\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype echoServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *echoServer) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc (s *echoServer) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := stream.Send(req); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc main() {\n\tcert, err := tls.LoadX509KeyPair(\"server.pem\", \"server.key\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load server certificate: %v\", err)\n\t}\n\tcertPool := x509.NewCertPool()\n\tcaCert, err := ioutil.ReadFile(\"ca.pem\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to read CA certificate: %v\", err)\n\t}\n\tif !certPool.AppendCertsFromPEM(caCert) {\n\t\tlog.Fatalf(\"Failed to append CA certificate\")\n\t}\n\n\tcreds := credentials.NewTLS(&tls.Config{\n\t\tCertificates: []tls.Certificate{cert},\n\t\tClientCAs:    certPool,\n\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t})\n\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, &echoServer{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles incoming requests with custom stream preprocessing and graceful shutdown capabilities.\n\nStruct Description: The `server` struct represents a gRPC server instance with additional control for graceful shutdown and stream preprocessing.\n\nFields:\n- grpcSrv: *grpc.Server - The underlying gRPC server instance\n- closeC: chan struct{} - Channel used to signal server shutdown\n\nMethods:\n- Serve: (lis net.Listener) -> error - Starts the gRPC server on the provided listener, initializing it with custom stream preprocessing\n- preGrpcStream: (ctx context.Context, info *tap.Info) -> (context.Context, error) - Intercepts incoming gRPC streams before processing, with special handling for the \"/vanus.core.raft.RaftServer/SendMessage\" method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\tsrv := grpc.NewServer(\n\t\tgrpc.InTapHandle(s.preGrpcStream),\n\t)\n\ts.grpcSrv = srv\n\n\treturn srv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tcCtx, cancel := context.WithCancel(ctx)\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-cCtx.Done():\n\t\t\tcase <-s.closeC:\n\t\t\t\tcancel()\n\t\t\t}\n\t\t}()\n\t\treturn cCtx, nil\n\t}\n\treturn ctx, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\topts := []grpc.ServerOption{\n\t\tgrpc.TapHandler(tap.NewServerHandlerFuncs(&tap.ServerHandlerFuncs{\n\t\t\tInterceptStream: s.preGrpcStream,\n\t\t})),\n\t}\n\ts.grpcSrv = grpc.NewServer(opts...)\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- s.grpcSrv.Serve(lis)\n\t}()\n\n\tselect {\n\tcase err := <-errChan:\n\t\treturn err\n\tcase <-s.closeC:\n\t\ts.grpcSrv.GracefulStop()\n\t\treturn <-errChan\n\t}\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethod == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tlog.Printf(\"Intercepted method: %s\", info.FullMethod)\n\t\tctx = context.WithValue(ctx, \"special_method\", true)\n\t}\n\treturn ctx, nil\n}"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Create a gRPC service struct in Go that manages a gRPC server for key management operations, including starting the server, graceful shutdown, and immediate termination capabilities.\n\nStruct Description: GRPCService represents a gRPC server wrapper that handles Unix domain socket communication for key management services. It manages server lifecycle and configuration.\n\nFields:\naddr: string - The Unix domain socket address the server will listen on\ntimeout: time.Duration - Connection timeout duration for gRPC connections\nserver: *grpc.Server - The underlying gRPC server instance\nkmsService: Service - The key management service implementation to be registered with gRPC\n\nMethods:\nNewGRPCService(address string, timeout time.Duration, kmsService Service) -> *GRPCService - Constructor that initializes a new GRPCService instance with the given address, timeout and service implementation\nListenAndServe() -> error - Starts the gRPC server on the configured Unix domain socket address and begins serving requests\nShutdown() -> void - Gracefully stops the gRPC server, allowing existing connections to complete\nClose() -> void - Immediately stops the gRPC server without waiting for connections to complete",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tkmsapi \"k8s.io/kms/apis/v2\"\n)\n\ntype GRPCService struct {\n\taddr    string\n\ttimeout time.Duration\n\tserver  *grpc.Server\n\n\tkmsService Service\n}\n\nfunc NewGRPCService(\n\taddress string,\n\ttimeout time.Duration,\n\tkmsService Service,\n) *GRPCService {\n\treturn &GRPCService{\n\t\taddr:       address,\n\t\ttimeout:    timeout,\n\t\tkmsService: kmsService,\n\t}\n}\n\nfunc (s *GRPCService) ListenAndServe() error {\n\tln, err := net.Listen(\"unix\", s.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ln.Close()\n\n\tgs := grpc.NewServer(\n\t\tgrpc.ConnectionTimeout(s.timeout),\n\t)\n\ts.server = gs\n\n\tkmsapi.RegisterKeyManagementServiceServer(gs, s)\n\n\treturn gs.Serve(ln)\n}\n\nfunc (s *GRPCService) Shutdown() {\n\tif s.server != nil {\n\t\ts.server.GracefulStop()\n\t}\n}\n\nfunc (s *GRPCService) Close() {\n\tif s.server != nil {\n\t\ts.server.Stop()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Service interface{}\n\ntype GRPCService struct {\n\taddr       string\n\ttimeout    time.Duration\n\tserver     *grpc.Server\n\tkmsService Service\n}\n\nfunc NewGRPCService(addr string, timeout time.Duration, kmsService Service) *GRPCService {\n\treturn &GRPCService{\n\t\taddr:       addr,\n\t\ttimeout:    timeout,\n\t\tkmsService: kmsService,\n\t}\n}\n\nfunc (s *GRPCService) ListenAndServe() error {\n\tlis, err := net.Listen(\"unix\", s.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.server = grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\tctx, cancel := context.WithTimeout(ctx, s.timeout)\n\t\t\tdefer cancel()\n\t\t\treturn handler(ctx, req)\n\t\t}),\n\t)\n\t// RegisterKeyManagementServer(s.server, s.kmsService) // Registration logic depends on generated code\n\treturn s.server.Serve(lis)\n}\n\nfunc (s *GRPCService) Shutdown() {\n\tif s.server != nil {\n\t\ts.server.GracefulStop()\n\t}\n}\n\nfunc (s *GRPCService) Close() {\n\tif s.server != nil {\n\t\ts.server.Stop()\n\t}\n}"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests using ALTS (Application Layer Transport Security) for authentication.\n\nFunction Description: The main function sets up a gRPC server with ALTS credentials, registers an Echo service implementation, and starts listening on a specified TCP port.\n\nInput:\n- port (int): The TCP port number on which the server should listen (passed via command-line flag)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)\n\nMethods:\n- None (this is a function-level implementation, not a struct)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\taltsTC := alts.NewServerCreds(alts.DefaultServerOptions())\n\n\ts := grpc.NewServer(grpc.Creds(altsTC))\n\n\tpb.RegisterEchoServer(s, &ecServer{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype echoServer struct{}\n\nfunc (s *echoServer) Echo(in *EchoRequest, stream grpc.ServerStream) error {\n\tresp := &EchoResponse{Message: in.Message}\n\treturn stream.SendMsg(resp)\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"The server port\")\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(alts.NewServerCreds()))\n\tRegisterEchoServer(s, &echoServer{})\n\treflection.Register(s)\n\n\tlog.Printf(\"gRPC ALTS server listening on :%d\", *port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Create a gRPC server configuration and management system in Go that handles server setup, TLS configuration, client credentials, and network listeners with support for both buffered and regular network connections.\n\nStruct Description: GRPCServerConfig represents a configuration for setting up a gRPC server with various options including network settings, TLS configuration, and connection parameters.\n\nFields:\n- Address: string - The network address to listen on\n- Network: string - The network type (e.g., \"tcp\", \"unix\", or \"buffered\")\n- TLSCertPath: string - Path to TLS certificate file\n- TLSKeyPath: string - Path to TLS private key file\n- MaxConnAge: time.Duration - Maximum connection age before termination\n- Enabled: bool - Whether the server is enabled\n- BufferSize: int - Size of buffer for buffered connections\n- ClientCAPath: string - Path to client CA certificate file\n- MaxWorkers: uint32 - Maximum number of stream workers\n- flagPrefix: string - Prefix for configuration flags\n\nMethods:\n- Complete: (level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) -> (RunnableGRPCServer, error) - Completes the configuration and returns a runnable server instance\n- listenerAndDialer: () -> (net.Listener, DialFunc, NetDialFunc, error) - Creates a network listener and dialer functions based on configuration\n- tlsOpts: () -> ([]grpc.ServerOption, *certwatcher.CertWatcher, error) - Generates TLS server options based on certificate configuration\n- clientCreds: () -> (credentials.TransportCredentials, error) - Creates client transport credentials based on TLS configuration\n\nStruct Description: completedGRPCServer represents a fully configured and runnable gRPC server instance.\n\nFields:\n- opts: []grpc.ServerOption - Server options\n- listener: net.Listener - Network listener\n- svcRegistrationFn: func(*grpc.Server) - Service registration function\n- listenFunc: func() error - Function to start listening\n- prestopFunc: func() - Function to run before stopping\n- stopFunc: func() - Function to stop the server\n- dial: func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error) - Dial function for clients\n- netDial: func(context.Context, string) (net.Conn, error) - Raw network dial function\n- creds: credentials.TransportCredentials - Client transport credentials\n- certWatcher: *certwatcher.CertWatcher - Certificate watcher for TLS\n\nMethods:\n- WithOpts: (...grpc.ServerOption) -> RunnableGRPCServer - Adds additional server options\n- Listen: (context.Context) -> func() error - Starts the server and returns a listen function\n- DialContext: (context.Context, ...grpc.DialOption) -> (*grpc.ClientConn, error) - Creates a client connection\n- NetDialContext: (context.Context, string) -> (net.Conn, error) - Creates a raw network connection\n- Insecure: () -> bool - Returns whether the connection is insecure\n- GracefulStop: () - Stops the server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/test/bufconn\"\n\n\t\"sigs.k8s.io/controller-runtime/pkg/certwatcher\"\n\n\t\"github.com/authzed/spicedb/internal/grpchelpers\"\n\t\"github.com/authzed/spicedb/pkg/x509util\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\n\tflagPrefix string\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(server *grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn &disabledGrpcServer{}, nil\n\t}\n\tif c.BufferSize == 0 {\n\t\tc.BufferSize = 1024 * 1024\n\t}\n\topts = append(opts, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionAge: c.MaxConnAge,\n\t}), grpc.NumStreamWorkers(c.MaxWorkers))\n\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\topts = append(opts, tlsOpts...)\n\n\tclientCreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tl, dial, netDial, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to listen on addr for gRPC server: %w\", err)\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tsvcRegistrationFn(srv)\n\treturn &completedGRPCServer{\n\t\topts:              opts,\n\t\tlistener:          l,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tlistenFunc: func() error {\n\t\t\treturn srv.Serve(l)\n\t\t},\n\t\tdial:    dial,\n\t\tnetDial: netDial,\n\t\tprestopFunc: func() {\n\t\t},\n\t\tstopFunc:    srv.GracefulStop,\n\t\tcreds:       clientCreds,\n\t\tcertWatcher: certWatcher,\n\t}, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, DialFunc, NetDialFunc, error) {\n\tif c.Network == BufferedNetwork {\n\t\tbl := bufconn.Listen(c.BufferSize)\n\t\treturn bl, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\t\topts = append(opts, grpc.WithContextDialer(func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t\t}))\n\n\t\t\t\treturn grpchelpers.Dial(ctx, BufferedNetwork, opts...)\n\t\t\t}, func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t}, nil\n\t}\n\tl, err := net.Listen(c.Network, c.Address)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\treturn l, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\treturn grpchelpers.Dial(ctx, c.Address, opts...)\n\t}, nil, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn nil, nil, nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\twatcher, err := certwatcher.New(c.TLSCertPath, c.TLSKeyPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\tGetCertificate: watcher.GetCertificate,\n\t\t\tMinVersion:     tls.VersionTLS12,\n\t\t})\n\t\treturn []grpc.ServerOption{grpc.Creds(creds)}, watcher, nil\n\tdefault:\n\t\treturn nil, nil, nil\n\t}\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn insecure.NewCredentials(), nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\tvar err error\n\t\tvar pool *x509.CertPool\n\t\tif c.ClientCAPath != \"\" {\n\t\t\tpool, err = x509util.CustomCertPool(c.ClientCAPath)\n\t\t} else {\n\t\t\tpool, err = x509.SystemCertPool()\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn credentials.NewTLS(&tls.Config{RootCAs: pool, MinVersion: tls.VersionTLS12}), nil\n\tdefault:\n\t\treturn nil, nil\n\t}\n}\n\ntype completedGRPCServer struct {\n\topts              []grpc.ServerOption\n\tlistener          net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc        func() error\n\tprestopFunc       func()\n\tstopFunc          func()\n\tdial              func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial           func(ctx context.Context, s string) (net.Conn, error)\n\tcreds             credentials.TransportCredentials\n\tcertWatcher       *certwatcher.CertWatcher\n}\n\nfunc (c *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\tc.opts = append(c.opts, opts...)\n\tsrv := grpc.NewServer(c.opts...)\n\tc.svcRegistrationFn(srv)\n\tc.listenFunc = func() error {\n\t\treturn srv.Serve(c.listener)\n\t}\n\tc.stopFunc = srv.GracefulStop\n\treturn c\n}\n\nfunc (c *completedGRPCServer) Listen(ctx context.Context) func() error {\n\tif c.certWatcher != nil {\n\t\tgo func() {\n\t\t\tif err := c.certWatcher.Start(ctx); err != nil {\n\t\t\t}\n\t\t}()\n\t}\n\treturn c.listenFunc\n}\n\nfunc (c *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\topts = append(opts, grpc.WithTransportCredentials(c.creds))\n\treturn c.dial(ctx, opts...)\n}\n\nfunc (c *completedGRPCServer) NetDialContext(ctx context.Context, s string) (net.Conn, error) {\n\treturn c.netDial(ctx, s)\n}\n\nfunc (c *completedGRPCServer) Insecure() bool {\n\treturn c.creds.Info().SecurityProtocol == \"insecure\"\n}\n\nfunc (c *completedGRPCServer) GracefulStop() {\n\tc.prestopFunc()\n\tc.stopFunc()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package grpcserver\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\tflagPrefix   string\n}\n\ntype RunnableGRPCServer interface {\n\tListen(context.Context) (func() error, error)\n\tDialContext(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tNetDialContext(context.Context, string) (net.Conn, error)\n\tGracefulStop()\n\tInsecure() bool\n\tWithOpts(...grpc.ServerOption) RunnableGRPCServer\n}\n\ntype completedGRPCServer struct {\n\topts            []grpc.ServerOption\n\tlistener        net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc        func() error\n\tprestopFunc     func()\n\tstopFunc        func()\n\tdial            func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial         func(context.Context, string) (net.Conn, error)\n\tcreds           credentials.TransportCredentials\n\tcertWatcher     *certwatcher.CertWatcher\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn nil, nil\n\t}\n\n\tlistener, dialFunc, netDialFunc, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttlsOptions, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tserverOptions := append(opts, tlsOptions...)\n\n\tcreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tserverOptions = append(serverOptions, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionAge: c.MaxConnAge,\n\t}))\n\n\ts := &completedGRPCServer{\n\t\topts:            serverOptions,\n\t\tlistener:        listener,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tdial:            dialFunc,\n\t\tnetDial:         netDialFunc,\n\t\tcreds:           creds,\n\t\tcertWatcher:     certWatcher,\n\t\tlistenFunc: func() error {\n\t\t\tsrv := grpc.NewServer(s.opts...)\n\t\t\ts.svcRegistrationFn(srv)\n\t\t\tgo func() {\n\t\t\t\tif err := srv.Serve(listener); err != nil {\n\t\t\t\t\tlevel.Debug().Err(err).Msg(\"gRPC server failed\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\treturn nil\n\t\t},\n\t\tstopFunc: func() {\n\t\t\tif certWatcher != nil {\n\t\t\t\tcertWatcher.Stop()\n\t\t\t}\n\t\t},\n\t}\n\n\treturn s, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error), func(context.Context, string) (net.Conn, error), error) {\n\tvar listener net.Listener\n\tvar err error\n\n\tswitch c.Network {\n\tcase \"tcp\", \"unix\":\n\t\tlistener, err = net.Listen(c.Network, c.Address)\n\tcase \"buffered\":\n\t\tbaseListener, err := net.Listen(\"tcp\", c.Address)\n\t\tif err != nil {\n\t\t\treturn nil, nil, nil, err\n\t\t}\n\t\tlistener = &bufferedListener{\n\t\t\tListener: baseListener,\n\t\t\tbufSize:  c.BufferSize,\n\t\t}\n\tdefault:\n\t\treturn nil, nil, nil, ErrInvalidNetworkType\n\t}\n\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\n\tdialFunc := func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\treturn grpc.DialContext(ctx, c.Address, append(opts, grpc.WithTransportCredentials(c.creds))...)\n\t}\n\n\tnetDialFunc := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\tconn, err := net.DialContext(ctx, \"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif c.BufferSize > 0 {\n\t\t\treturn &bufferedConn{\n\t\t\t\tConn:      conn,\n\t\t\t\tr:         bufio.NewReaderSize(conn, c.BufferSize),\n\t\t\t\tw:         bufio.NewWriterSize(conn, c.BufferSize),\n\t\t\t}, nil\n\t\t}\n\t\treturn conn, nil\n\t}\n\n\treturn listener, dialFunc, netDialFunc, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tif c.TLSCertPath == \"\" || c.TLSKeyPath == \"\" {\n\t\treturn nil, nil, nil\n\t}\n\n\tcertWatcher, err := certwatcher.New(certwatcher.Options{\n\t\tCertFile: c.TLSCertPath,\n\t\tKeyFile:  c.TLSKeyPath,\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\ttlsConfig := &tls.Config{\n\t\tGetCertificate: certWatcher.GetCertificate,\n\t\tMinVersion:     tls.VersionTLS12,\n\t}\n\n\tif c.ClientCAPath != \"\" {\n\t\tcaCertPool := x509.NewCertPool()\n\t\tcaCert, err := os.ReadFile(c.ClientCAPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tif !caCertPool.AppendCertsFromPEM(caCert) {\n\t\t\treturn nil, nil, ErrInvalidCACert\n\t\t}\n\t\ttlsConfig.ClientCAs = caCertPool\n\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t}\n\n\treturn []grpc.ServerOption{grpc.Creds(credentials.NewTLS(tlsConfig))}, certWatcher, nil\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tif c.TLSCertPath == \"\" || c.TLSKeyPath == \"\" {\n\t\treturn credentials.Insecure(), nil\n\t}\n\n\ttlsConfig := &tls.Config{\n\t\tMinVersion: tls.VersionTLS12,\n\t}\n\n\tif c.ClientCAPath != \"\" {\n\t\tcaCertPool := x509.NewCertPool()\n\t\tcaCert, err := os.ReadFile(c.ClientCAPath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif !caCertPool.AppendCertsFromPEM(caCert) {\n\t\t\treturn nil, ErrInvalidCACert\n\t\t}\n\t\ttlsConfig.RootCAs = caCertPool\n\t\ttlsConfig.ClientCAs = caCertPool\n\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t}\n\n\treturn credentials.NewTLS(tlsConfig), nil\n}\n\ntype bufferedListener struct {\n\tnet.Listener\n\tbufSize int\n}\n\nfunc (l *bufferedListener) Accept() (net.Conn, error) {\n\tconn, err := l.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &bufferedConn{\n\t\tConn: conn,\n\t\tr:    bufio.NewReaderSize(conn, l.bufSize),\n\t\tw:    bufio.NewWriterSize(conn, l.bufSize),\n\t}, nil\n}\n\ntype bufferedConn struct {\n\tnet.Conn\n\tr *bufio.Reader\n\tw *bufio.Writer\n}\n\nfunc (c *bufferedConn) Read(b []byte) (int, error) {\n\treturn c.r.Read(b)\n}\n\nfunc (c *bufferedConn) Write(b []byte) (int, error) {\n\tn, err := c.w.Write(b)\n\tif err != nil {\n\t\treturn n, err\n\t}\n\treturn c.w.Flush(), nil\n}\n\nfunc (s *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\ts.opts = append(s.opts, opts...)\n\treturn s\n}\n\nfunc (s *completedGRPCServer) Listen(ctx context.Context) (func() error, error) {\n\tif s.listenFunc == nil {\n\t\treturn nil, ErrServerNotConfigured\n\t}\n\treturn s.listenFunc, nil\n}\n\nfunc (s *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\tif s.dial == nil {\n\t\treturn nil, ErrServerNotConfigured\n\t}\n\treturn s.dial(ctx, opts...)\n}\n\nfunc (s *completedGRPCServer) NetDialContext(ctx context.Context, addr string) (net.Conn, error) {\n\tif s.netDial == nil {\n\t\treturn nil, ErrServerNotConfigured\n\t}\n\treturn s.netDial(ctx, addr)\n}\n\nfunc (s *completedGRPCServer) GracefulStop() {\n\tif s.stopFunc != nil {\n\t\ts.stopFunc()\n\t}\n}\n\nfunc (s *completedGRPCServer) Insecure() bool {\n\treturn s.creds == nil || s.creds.Info().SecurityProtocol == \"insecure\"\n}"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including server initialization, startup, and metric processing.\n\nStruct Description: The Server struct represents a gRPC server for forwarding metrics. It manages server lifecycle, handles incoming metric data, and provides logging capabilities.\n\nFields:\n\nserver: *grpc.Server - The gRPC server instance\naddress: string - Network address to bind the server to\ningest: sources.Ingest - Interface for processing incoming metrics\nlistener: net.Listener - Network listener for incoming connections\nlogger: *logrus.Entry - Logger for server operations\nopts: *options - Configuration options for the server\nreadyChannel: chan struct{} - Channel to signal when server is ready\n\nMethods:\n\nNew: (address string, logger *logrus.Entry, opts ...Option) -> *Server - Creates a new Server instance with specified address, logger, and optional configurations. Initializes gRPC server and registers services.\n\nStart: (ingest sources.Ingest) -> error - Starts the gRPC server, binds to the specified address, and begins listening for incoming connections. Takes a metric ingestion interface as input. Returns any error that occurs during startup or operation.\n\nSendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles incoming metric streams from clients. Processes each metric received and sends back an empty response when done. Returns any error that occurs during stream processing.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/sources\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\tres := &Server{\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\topts:         &options{},\n\t\tserver:       grpc.NewServer(),\n\t\treadyChannel: make(chan struct{}),\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(res.opts)\n\t}\n\n\tif res.opts.traceClient == nil {\n\t\tres.opts.traceClient = trace.DefaultClient\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.server, res)\n\n\treturn res\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\n\tvar err error\n\ts.listener, err = net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\ts.logger.WithError(err).WithField(\"address\", s.address).\n\t\t\tErrorf(\"failed to bind import server\")\n\t\treturn err\n\t}\n\n\tlogger := s.logger.WithFields(logrus.Fields{\"address\": s.listener.Addr()})\n\tlogger.Info(\"Starting gRPC server\")\n\n\tclose(s.readyChannel)\n\terr = s.server.Serve(s.listener)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"gRPC server was not shut down cleanly\")\n\t}\n\tlogger.Info(\"Stopped gRPC server\")\n\treturn err\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\ts.logger.WithError(err).Error(\"error recieving metrics\")\n\t\t\treturn err\n\t\t}\n\t\ts.ingest.IngestMetricProto(metric)\n\t}\n\terr := server.SendAndClose(&emptypb.Empty{})\n\tif err != nil {\n\t\ts.logger.WithError(err).Error(\"error closing stream\")\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\t\"forwardrpc\"\n\t\"sources\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\ntype options struct{}\n\ntype Option func(*Server)\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\ts := &Server{\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\treadyChannel: make(chan struct{}),\n\t\topts:         &options{},\n\t}\n\tfor _, opt := range opts {\n\t\topt(s)\n\t}\n\ts.server = grpc.NewServer()\n\tforwardrpc.RegisterForwardServer(s.server, s)\n\treturn s\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\tln, err := net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.listener = ln\n\tclose(s.readyChannel)\n\treturn s.server.Serve(ln)\n}\n\nfunc (s *Server) SendMetricsV2(stream forwardrpc.Forward_SendMetricsV2Server) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := s.ingest.Ingest(req); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn stream.SendAndClose(&empty.Empty{})\n}"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, optionally with TLS security, and registers a test service for handling RPC calls.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, configures TLS if enabled, creates a new gRPC server instance, registers a test service, and starts serving incoming requests.\n\nInput:\n- port (int): The port number on which the server should listen\n- useTLS (bool): Flag indicating whether to use TLS security\n- certFile (string): Path to the TLS certificate file (required if useTLS is true)\n- keyFile (string): Path to the TLS private key file (required if useTLS is true)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"google.golang.org/grpc/interop\"\n\ttestpb \"google.golang.org/grpc/interop/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tp := strconv.Itoa(*port)\n\tlis, err := net.Listen(\"tcp\", \":\"+p)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tgrpclog.Fatalf(\"Failed to generate credentials %v\", err)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tserver := grpc.NewServer(opts...)\n\ttestpb.RegisterTestServiceServer(server, interop.NewTestServer())\n\tserver.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"github.com/golang/protobuf/ptypes/empty\"\n)\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"Port to listen on\")\n\tuseTLS := flag.Bool(\"tls\", false, \"Use TLS\")\n\tcertFile := flag.String(\"cert\", \"\", \"TLS certificate file\")\n\tkeyFile := flag.String(\"key\", \"\", \"TLS private key file\")\n\tflag.Parse()\n\n\tif *useTLS && (*certFile == \"\" || *keyFile == \"\") {\n\t\tlog.Fatalf(\"cert and key files are required when TLS is enabled\")\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"could not load TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\ts := grpc.NewServer(opts...)\n\n\ttype testService struct{}\n\n\tvar TestServiceDesc = grpc.ServiceDesc{\n\t\tServiceName: \"test.TestService\",\n\t\tMethods: []grpc.MethodDesc{\n\t\t\t{\n\t\t\t\tMethodName: \"NoOp\",\n\t\t\t\tHandler: func(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n\t\t\t\t\tin := &empty.Empty{}\n\t\t\t\t\tif dec == nil {\n\t\t\t\t\t\treturn &empty.Empty{}, nil\n\t\t\t\t\t}\n\t\t\t\t\tif err := dec(in); err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t\treturn &empty.Empty{}, nil\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tStreams:  []grpc.StreamDesc{},\n\t\tMetadata: \"test\",\n\t}\n\n\ttestSvc := &testService{}\n\tgrpc.RegisterService(&TestServiceDesc, testSvc)\n\n\tlog.Printf(\"gRPC server starting on %s with TLS=%v\", addr, *useTLS)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a gRPC server in Go that handles Bigtable administration and operations, with proper initialization and cleanup capabilities.\n\nStruct Description: The Server struct represents a gRPC server instance that manages Bigtable table administration and operations. It handles network connections, server lifecycle, and maintains internal state.\n\nFields:\nAddr: [string] - The network address the server is listening on\nl: [net.Listener] - The network listener for incoming connections\nsrv: [*grpc.Server] - The gRPC server instance\ns: [*server] - The internal server implementation handling business logic\n\nMethods:\nNewServer: [func(laddr string, opt ...grpc.ServerOption) (*Server, error)] -> Creates and starts a new Server instance\n- Input: laddr (string) - The address to listen on, opt (...grpc.ServerOption) - Optional gRPC server configurations\n- Output: (*Server, error) - Returns the server instance or an error if initialization fails\n- Description: Initializes the server, sets up the listener, registers gRPC services, and starts serving requests in a goroutine\n\nClose: [func(s *Server)] -> Properly shuts down the Server instance\n- Input: None (method receiver)\n- Output: None\n- Description: Stops the gRPC server, closes the listener, and cleans up internal resources",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl   net.Listener\n\tsrv *grpc.Server\n\ts   *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tsrv:  grpc.NewServer(opt...),\n\t\ts: &server{\n\t\t\ttables: make(map[string]*table),\n\t\t},\n\t}\n\tbtapb.RegisterBigtableTableAdminServer(s.srv, s.s)\n\tbtpb.RegisterBigtableServer(s.srv, s.s)\n\n\tgo s.srv.Serve(s.l)\n\n\treturn s, nil\n}\n\nfunc (s *Server) Close() {\n\ts.s.mu.Lock()\n\tif s.s.gcc != nil {\n\t\tclose(s.s.gcc)\n\t}\n\ts.s.mu.Unlock()\n\n\ts.srv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "```go\npackage main\n\nimport (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct{}\n\ntype Server struct {\n\tAddr string\n\tl    net.Listener\n\tsrv  *grpc.Server\n\ts    *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsrv := grpc.NewServer(opt...)\n\ts := &server{}\n\n\t// Register services here (example: bigtable.RegisterBigtableServer(srv, s))\n\n\treturn &Server{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tsrv:  srv,\n\t\ts:    s,\n\t}, nil\n}\n\nfunc (s *Server) Close() {\n\ts.srv.GracefulStop()\n\ts.l.Close()\n}\n```"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: Create a gRPC test server for monitoring metrics that can handle metric descriptor creation and time series requests, while tracking user agents and request counts.\n\nStruct Description: MetricsTestServer is a gRPC server implementation for testing metric monitoring functionality. It maintains state for tracking incoming requests and user agents, and provides methods for server control and data retrieval.\n\nFields:\n- lis: net.Listener - Network listener for the gRPC server\n- srv: *grpc.Server - gRPC server instance\n- Endpoint: string - Server's network endpoint address\n- userAgent: string - Last received User-Agent header from requests\n- createMetricDescriptorReqs: []*monitoringpb.CreateMetricDescriptorRequest - Collected metric descriptor requests\n- createServiceTimeSeriesReqs: []*monitoringpb.CreateTimeSeriesRequest - Collected time series requests\n- RetryCount: int - Number of retry attempts (usage context not shown in code)\n- mu: sync.Mutex - Mutex for thread-safe access to shared fields\n\nMethods:\n- Shutdown() -> None - Gracefully stops the gRPC server\n- UserAgent() -> string - Retrieves and clears the stored User-Agent\n- CreateServiceTimeSeriesRequests() -> []*monitoringpb.CreateTimeSeriesRequest - Retrieves and clears stored time series requests\n- appendCreateMetricDescriptorReq(context.Context, *monitoringpb.CreateMetricDescriptorRequest) -> None - Thread-safe method to store metric descriptor requests\n- appendCreateServiceTimeSeriesReq(context.Context, *monitoringpb.CreateTimeSeriesRequest) -> None - Thread-safe method to store time series requests and capture User-Agent\n- Serve() -> error - Starts serving gRPC requests\n- NewMetricTestServer() -> (*MetricsTestServer, error) - Constructor that initializes the server with default keepalive parameters and registers the metric service",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"cloud.google.com/go/monitoring/apiv3/v2/monitoringpb\"\n\tmetricpb \"google.golang.org/genproto/googleapis/api/metric\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\ntype MetricsTestServer struct {\n\tlis                         net.Listener\n\tsrv                         *grpc.Server\n\tEndpoint                    string\n\tuserAgent                   string\n\tcreateMetricDescriptorReqs  []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount                  int\n\tmu                          sync.Mutex\n}\n\nfunc (m *MetricsTestServer) Shutdown() {\n\tm.srv.GracefulStop()\n}\n\nfunc (m *MetricsTestServer) UserAgent() string {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tua := m.userAgent\n\tm.userAgent = \"\"\n\treturn ua\n}\n\nfunc (m *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\treqs := m.createServiceTimeSeriesReqs\n\tm.createServiceTimeSeriesReqs = nil\n\treturn reqs\n}\n\nfunc (m *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createMetricDescriptorReqs = append(m.createMetricDescriptorReqs, req)\n}\n\nfunc (m *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createServiceTimeSeriesReqs = append(m.createServiceTimeSeriesReqs, req)\n\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tm.userAgent = strings.Join(md.Get(\"User-Agent\"), \";\")\n\t}\n}\n\nfunc (m *MetricsTestServer) Serve() error {\n\treturn m.srv.Serve(m.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tsrv := grpc.NewServer(grpc.KeepaliveParams(keepalive.ServerParameters{Time: 5 * time.Minute}))\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttestServer := &MetricsTestServer{\n\t\tEndpoint: lis.Addr().String(),\n\t\tlis:      lis,\n\t\tsrv:      srv,\n\t}\n\n\tmonitoringpb.RegisterMetricServiceServer(\n\t\tsrv,\n\t\t&fakeMetricServiceServer{metricsTestServer: testServer},\n\t)\n\n\treturn testServer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tmonitoringpb \"cloud.google.com/go/monitoring/apiv3/monitoringpb\"\n)\n\ntype MetricsTestServer struct {\n\tlis                    net.Listener\n\tsrv                    *grpc.Server\n\tEndpoint               string\n\tuserAgent              string\n\tcreateMetricDescriptorReqs []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs  []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount             int\n\tmu                     sync.Mutex\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tsrv := grpc.NewServer()\n\ts := &MetricsTestServer{\n\t\tlis:  lis,\n\t\tsrv:  srv,\n\t\tEndpoint: lis.Addr().String(),\n\t}\n\tmonitoringpb.RegisterMonitoringServiceServer(srv, s)\n\treturn s, nil\n}\n\nfunc (s *MetricsTestServer) CreateMetricDescriptor(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) (*monitoringpb.MetricDescriptor, error) {\n\ts.appendCreateMetricDescriptorReq(ctx, req)\n\treturn &monitoringpb.MetricDescriptor{}, nil\n}\n\nfunc (s *MetricsTestServer) CreateTimeSeries(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) (*monitoringpb.Empty, error) {\n\ts.appendCreateServiceTimeSeriesReq(ctx, req)\n\treturn &monitoringpb.Empty{}, nil\n}\n\nfunc (s *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif ok {\n\t\tif vals := md.Get(\"user-agent\"); len(vals) > 0 {\n\t\t\ts.userAgent = vals[0]\n\t\t}\n\t}\n\ts.createMetricDescriptorReqs = append(s.createMetricDescriptorReqs, req)\n}\n\nfunc (s *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif ok {\n\t\tif vals := md.Get(\"user-agent\"); len(vals) > 0 {\n\t\t\ts.userAgent = vals[0]\n\t\t}\n\t}\n\ts.createServiceTimeSeriesReqs = append(s.createServiceTimeSeriesReqs, req)\n}\n\nfunc (s *MetricsTestServer) Shutdown() {\n\ts.srv.GracefulStop()\n}\n\nfunc (s *MetricsTestServer) UserAgent() string {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tua := s.userAgent\n\ts.userAgent = \"\"\n\treturn ua\n}\n\nfunc (s *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\treqs := s.createServiceTimeSeriesReqs\n\ts.createServiceTimeSeriesReqs = nil\n\treturn reqs\n}\n\nfunc (s *MetricsTestServer) Serve() error {\n\treturn s.srv.Serve(s.lis)\n}"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a mock gRPC server for OpenTelemetry traces receiver that can handle incoming trace data requests, track request metrics, and optionally use TLS for secure communication.\n\nStruct Description: The mockTracesReceiver struct implements a gRPC server for receiving OpenTelemetry trace data, tracking request counts and spans, and handling metadata. It embeds a base mockReceiver struct and implements the ptraceotlp.GRPCServer interface.\n\nFields:\n\nsrv: [*grpc.Server] - The gRPC server instance\nln: [net.Listener] - Network listener for the server\nrequestCount: [*atomic.Int32] - Counter for received requests\ntotalItems: [*atomic.Int32] - Counter for total spans received\nmux: [sync.Mutex] - Mutex for thread-safe operations\nmetadata: [metadata.MD] - Stores metadata from incoming requests\nexportError: [error] - Error to return from export operations\nexportResponse: [func() ptraceotlp.ExportResponse] - Function to generate export responses\nlastRequest: [ptrace.Traces] - Stores the last received trace data\nhasMetadata: [bool] - Flag indicating whether to process metadata\nspanCountByMetadata: [map[string]int] - Tracks span counts by metadata keys\n\nMethods:\n\nExport: [Name](ctx context.Context, req ptraceotlp.ExportRequest) -> (ptraceotlp.ExportResponse, error) - Handles incoming trace export requests, updates counters, and processes metadata\nstart: [Name]() -> () - Starts the gRPC server in a goroutine\n\nAssociated Functions:\n\notelArrowTracesReceiverOnGRPCServer: [Name](ln net.Listener, useTLS bool) -> (*mockTracesReceiver, error) - Creates and configures a new mock traces receiver with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype mockReceiver struct {\n\tsrv          *grpc.Server\n\tln           net.Listener\n\trequestCount *atomic.Int32\n\ttotalItems   *atomic.Int32\n\tmux          sync.Mutex\n\tmetadata     metadata.MD\n\texportError  error\n}\n\ntype mockTracesReceiver struct {\n\tptraceotlp.UnimplementedGRPCServer\n\tmockReceiver\n\texportResponse      func() ptraceotlp.ExportResponse\n\tlastRequest         ptrace.Traces\n\thasMetadata         bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (r *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tr.requestCount.Add(int32(1))\n\ttd := req.Traces()\n\tr.totalItems.Add(int32(td.SpanCount()))\n\tr.mux.Lock()\n\tdefer r.mux.Unlock()\n\tr.metadata, _ = metadata.FromIncomingContext(ctx)\n\tif r.hasMetadata {\n\t\tv1 := r.metadata.Get(\"key1\")\n\t\tv2 := r.metadata.Get(\"key2\")\n\t\thashKey := fmt.Sprintf(\"%s|%s\", v1, v2)\n\t\tr.spanCountByMetadata[hashKey] += (td.SpanCount())\n\t}\n\tr.lastRequest = td\n\treturn r.exportResponse(), r.exportError\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tsopts := []grpc.ServerOption{}\n\n\tif useTLS {\n\t\t_, currentFile, _, _ := runtime.Caller(0)\n\t\tbasepath := filepath.Dir(currentFile)\n\t\tcertpath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_cert.pem\"))\n\t\tkeypath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_key.pem\"))\n\n\t\tcreds, err := credentials.NewServerTLSFromFile(certpath, keypath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsopts = append(sopts, grpc.Creds(creds))\n\t}\n\n\trcv := &mockTracesReceiver{\n\t\tmockReceiver: mockReceiver{\n\t\t\tsrv:          grpc.NewServer(sopts...),\n\t\t\tln:           ln,\n\t\t\trequestCount: &atomic.Int32{},\n\t\t\ttotalItems:   &atomic.Int32{},\n\t\t},\n\t\texportResponse: ptraceotlp.NewExportResponse,\n\t}\n\n\tptraceotlp.RegisterGRPCServer(rcv.srv, rcv)\n\n\treturn rcv, nil\n}\n\nfunc (r *mockTracesReceiver) start() {\n\tgo func() {\n\t\t_ = r.srv.Serve(r.ln)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"encoding/pem\"\n\t\"math/big\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/metadata\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/trace/pdata\"\n\t\"go.opentelemetry.io/otel/trace/ptraceotlp\"\n\t\"go.opentelemetry.io/otel/trace/ptrace\"\n\t\"go.opentelemetry.io/otel/trace/internal/atomic\"\n)\n\ntype mockReceiver struct{}\n\ntype mockTracesReceiver struct {\n\t*mockReceiver\n\tsrv                 *grpc.Server\n\tln                  net.Listener\n\trequestCount        *atomic.Int32\n\ttotalItems          *atomic.Int32\n\tmux                 sync.Mutex\n\tmetadata            metadata.MD\n\texportError         error\n\texportResponse      func() ptraceotlp.ExportResponse\n\tlastRequest         ptrace.Traces\n\thasMetadata         bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (m *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tm.requestCount.Add(1)\n\ttraces := req.GetTraces()\n\tm.lastRequest = traces\n\tspanCount := 0\n\tfor i := 0; i < traces.ResourceSpans().Len(); i++ {\n\t\trs := traces.ResourceSpans().At(i)\n\t\tfor j := 0; j < rs.ScopeSpans().Len(); j++ {\n\t\t\tss := rs.ScopeSpans().At(j)\n\t\t\tspanCount += ss.Spans().Len()\n\t\t}\n\t}\n\tm.totalItems.Add(int32(spanCount))\n\n\tif m.hasMetadata {\n\t\tmd, _ := metadata.FromIncomingContext(ctx)\n\t\tm.mux.Lock()\n\t\tm.metadata = md\n\t\tm.mux.Unlock()\n\t\tfor key := range md {\n\t\t\tm.spanCountByMetadata[key] += spanCount\n\t\t}\n\t}\n\n\tif m.exportError != nil {\n\t\treturn nil, m.exportError\n\t}\n\n\tif m.exportResponse != nil {\n\t\treturn m.exportResponse(), nil\n\t}\n\n\treturn ptraceotlp.NewExportResponse(), nil\n}\n\nfunc (m *mockTracesReceiver) start() {\n\tgo func() {\n\t\tif err := m.srv.Serve(m.ln); err != nil {\n\t\t}\n\t}()\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tvar opts []grpc.ServerOption\n\n\tif useTLS {\n\t\tpriv, err := rsa.GenerateKey(rand.Reader, 2048)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\ttemplate := x509.Certificate{\n\t\t\tSerialNumber: big.NewInt(1),\n\t\t\tNotBefore:    time.Now(),\n\t\t\tNotAfter:     time.Now().Add(365 * 24 * time.Hour),\n\t\t\tKeyUsage:     x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment,\n\t\t\tExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\n\t\t\tIPAddresses:  []net.IP{net.IPv4(127, 0, 0, 1), net.IPv6loopback},\n\t\t}\n\n\t\tderBytes, err := x509.CreateCertificate(rand.Reader, &template, &template, &priv.PublicKey, priv)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tcertPEM := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: derBytes})\n\t\tkeyPEM := pem.EncodeToMemory(&pem.Block{Type: \"RSA PRIVATE KEY\", Bytes: x509.MarshalPKCS1PrivateKey(priv)})\n\n\t\tblock, _ := pem.Decode(certPEM)\n\t\tif block == nil {\n\t\t\treturn nil, &net.OpError{Op: \"decode\", Err: net.UnknownNetworkError(\"failed to parse certificate PEM\")}\n\t\t}\n\t\tcert, err := x509.ParseCertificate(block.Bytes)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\ttlsCert := &tls.Certificate{\n\t\t\tCertificate: [][]byte{cert.Raw},\n\t\t\tPrivateKey:  priv,\n\t\t\tLeaf:        cert,\n\t\t}\n\n\t\tconfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{*tlsCert},\n\t\t}\n\t\tcreds := credentials.NewTLS(config)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\tm := &mockTracesReceiver{\n\t\tsrv:                 server,\n\t\tln:                  ln,\n\t\trequestCount:        atomic.NewInt32(0),\n\t\ttotalItems:          atomic.NewInt32(0),\n\t\tmetadata:            metadata.MD{},\n\t\tspanCountByMetadata: make(map[string]int),\n\t}\n\n\totlptracegrpc.RegisterTracesServer(server, m)\n\treturn m, nil\n}\n```"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with basic lifecycle management capabilities, including initialization, startup, and shutdown.\n\nStruct Description: The Server struct represents a gRPC server instance with network listening capabilities. It manages the server lifecycle and provides methods to start and stop the server gracefully.\n\nFields:\nAddr: [string] - The network address (IP:port) where the server is listening\nPort: [int] - The port number on which the server is listening\nl: [net.Listener] - The network listener for incoming connections\nGsrv: [*grpc.Server] - The gRPC server instance\n\nMethods:\nNewServer: [func(opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance with default settings (random available port)\nNewServerWithPort: [func(port int, opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance on the specified port\nStart: [func()] -> [] - Starts the gRPC server in a goroutine to handle incoming requests\nClose: [func()] -> [] - Gracefully stops the gRPC server and closes the network listener",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\treturn NewServerWithPort(0, opts...)\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"127.0.0.1:%d\", port))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tPort: parsePort(l.Addr().String()),\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) Start() {\n\tgo func() {\n\t\tif err := s.Gsrv.Serve(s.l); err != nil {\n\t\t\tlog.Printf(\"testutil.Server.Start: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Close() {\n\ts.Gsrv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\treturn NewServerWithPort(0, opts...)\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\taddr := fmt.Sprintf(\":%d\", port)\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttcpAddr, ok := lis.Addr().(*net.TCPAddr)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"failed to get TCP address\")\n\t}\n\ts := &Server{\n\t\tAddr: lis.Addr().String(),\n\t\tPort: tcpAddr.Port,\n\t\tl:    lis,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) Start() {\n\tgo s.Gsrv.Serve(s.l)\n}\n\nfunc (s *Server) Close() {\n\ts.Gsrv.GracefulStop()\n\ts.l.Close()\n}"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls for an Echo service, including secure communication with transport credentials.\n\nFunction Description: The `startGRPCServer` function initializes and starts a gRPC server with the provided listener and transport credentials. It registers an Echo service implementation and begins serving incoming requests.\n\nInput:\n- `lis` [net.Listener] - A network listener that specifies the address and port to listen on\n- `creds` [credentials.TransportCredentials] - Transport credentials for secure communication (TLS)\n\nOutput:\n- `error` - Returns an error if the server fails to start or encounters a fatal error during operation, otherwise runs indefinitely serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype ecServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *ecServer) UnaryEcho(_ context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc newServer() *ecServer {\n\treturn &ecServer{}\n}\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, newServer())\n\treturn s.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"example.com/echo\"\n)\n\ntype echoServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *echoServer) Echo(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, &echoServer{})\n\tif err := s.Serve(lis); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the specified gRPC service.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified TCP port, configures keepalive policies, registers the Echo service, and starts serving requests. It handles any errors that occur during setup or serving.\n\nInput: \n- port (string): The port number on which the server should listen, formatted as a string (e.g., \":50051\").\n- kaep (keepalive.EnforcementPolicy): The keepalive enforcement policy for the server.\n- kasp (keepalive.ServerParameters): The keepalive server parameters.\n\nOutput: \n- None (the function runs indefinitely until an error occurs or the server is stopped).\n- Errors during setup or serving are logged and the program exits.\n\nNote: The function assumes the existence of a pre-defined `server` struct that implements the `EchoServer` interface from the generated protobuf code.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\taddress := fmt.Sprintf(\":%v\", *port)\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\nfunc main(port string, kaep keepalive.EnforcementPolicy, kasp keepalive.ServerParameters) {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer(\n\t\tgrpc.KeepaliveParams(kasp),\n\t\tgrpc.KeepaliveEnforcementPolicy(kaep),\n\t)\n\tRegisterEchoServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Create a function to start a gRPC server for signal exchange, including setting up a network listener and registering the server with gRPC.\n\nFunction Description: The function `startSignal` initializes and starts a gRPC server for signal exchange. It creates a TCP listener on an available port, initializes a new gRPC server instance, registers the signal exchange service, and starts the server in a goroutine. The function is designed for testing purposes and includes error handling.\n\nInput: \n- `t *testing.T`: A testing context for error reporting and test helpers.\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance.\n- `net.Listener`: The network listener used by the gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tsigProto \"github.com/netbirdio/netbird/signal/proto\"\n\tsig \"github.com/netbirdio/netbird/signal/server\"\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts := grpc.NewServer()\n\tsrv, err := sig.NewServer(context.Background(), otel.Meter(\"\"))\n\trequire.NoError(t, err)\n\n\tsigProto.RegisterSignalExchangeServer(s, srv)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn s, lis\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\t\"testing\"\n\t\"google.golang.org/grpc\"\n\t\"signal\"\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to create listener: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tsignal.RegisterSignalExchangeServer(s, &signal.Server{})\n\tgo s.Serve(lis)\n\treturn s, lis\n}"
  },
  {
    "Task_id": 291,
    "Instruction": "The provided reference code is at the function level, so I'll provide instructions in the function-level format:\n\nTask Description: Implement a gRPC server setup in Go that handles both Unix domain sockets and TCP connections with TLS support and keepalive configurations.\n\nFunction Description: The code consists of two main functions for setting up a gRPC server: `createListener` creates a network listener for the server, and `grpcServer` configures and creates a gRPC server instance with optional TLS and keepalive settings.\n\nInput:\n1. For `createListener` function:\n   - config [Config] - Configuration object containing listener address and other settings\n\n2. For `grpcServer` function:\n   - config [Config] - Configuration object containing gRPC server settings and TLS configuration\n\nOutput:\n1. For `createListener` function:\n   - [net.Listener] - Network listener ready for gRPC server\n   - [error] - Error if listener creation fails\n\n2. For `grpcServer` function:\n   - [*grpc.Server] - Configured gRPC server instance\n   - [error] - Error if server creation fails\n\nThe Config struct used as input is defined as:\n- GRPCServer [*grpc.Server] - Optional pre-configured gRPC server instance\n- Listener [string] - Network address to listen on (e.g., \"unix:///path/to/socket\" or \"tcp://:port\")\n- Endpoint [string] - Server endpoint\n- ServerTLSConfig [tls.Config] - TLS configuration for secure connections",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/k3s-io/kine/pkg/util\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"go.etcd.io/etcd/server/v3/embed\"\n)\n\ntype Config struct {\n\tGRPCServer           *grpc.Server\n\tListener             string\n\tEndpoint             string\n\tServerTLSConfig      tls.Config\n}\n\nfunc createListener(config Config) (ret net.Listener, rerr error) {\n\tif config.Listener == \"\" {\n\t\tconfig.Listener = KineSocket\n\t}\n\tscheme, address := util.SchemeAndAddress(config.Listener)\n\n\tif scheme == \"unix\" {\n\t\tif err := os.Remove(address); err != nil && !os.IsNotExist(err) {\n\t\t\tlogrus.Warnf(\"failed to remove socket %s: %v\", address, err)\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := os.Chmod(address, 0600); err != nil {\n\t\t\t\trerr = err\n\t\t\t}\n\t\t}()\n\t} else {\n\t\tscheme = \"tcp\"\n\t}\n\n\treturn net.Listen(scheme, address)\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\tgopts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\t\tMinTime:             embed.DefaultGRPCKeepAliveMinTime,\n\t\t\tPermitWithoutStream: false,\n\t\t}),\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tTime:    embed.DefaultGRPCKeepAliveInterval,\n\t\t\tTimeout: embed.DefaultGRPCKeepAliveTimeout,\n\t\t}),\n\t}\n\n\tif config.ServerTLSConfig.CertFile != \"\" && config.ServerTLSConfig.KeyFile != \"\" {\n\t\tcreds, err := credentials.NewServerTLSFromFile(config.ServerTLSConfig.CertFile, config.ServerTLSConfig.KeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tgopts = append(gopts, grpc.Creds(creds))\n\t}\n\n\treturn grpc.NewServer(gopts...), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Config struct {\n\tGRPCServer       *grpc.Server\n\tListener         string\n\tEndpoint         string\n\tServerTLSConfig  *tls.Config\n}\n\nfunc createListener(config Config) (net.Listener, error) {\n\taddr := config.Listener\n\tif addr == \"\" {\n\t\treturn nil, fmt.Errorf(\"listener address is empty\")\n\t}\n\n\tparts := strings.SplitN(addr, \"://\", 2)\n\tif len(parts) != 2 {\n\t\treturn nil, fmt.Errorf(\"invalid listener address format: %s\", addr)\n\t}\n\n\tnetwork, path := parts[0], parts[1]\n\n\tswitch network {\n\tcase \"unix\":\n\t\tif err := os.Remove(path); err != nil && !os.IsNotExist(err) {\n\t\t\treturn nil, fmt.Errorf(\"failed to remove existing unix socket: %v\", err)\n\t\t}\n\t\treturn net.Listen(\"unix\", path)\n\tcase \"tcp\":\n\t\treturn net.Listen(\"tcp\", path)\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unsupported network type: %s\", network)\n\t}\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\topts := []grpc.ServerOption{}\n\n\tif config.ServerTLSConfig != nil {\n\t\tcreds := credentials.NewTLS(config.ServerTLSConfig)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tkaParams := keepalive.ServerParameters{\n\t\tTime:    10 * time.Minute,\n\t\tTimeout: 5 * time.Minute,\n\t}\n\tkaEnforcement := keepalive.EnforcementPolicy{\n\t\tMinTime:             1 * time.Minute,\n\t\tPermitWithoutStream: true,\n\t}\n\topts = append(opts, grpc.KeepaliveParams(kaParams))\n\topts = append(opts, grpc.KeepaliveEnforcementPolicy(kaEnforcement))\n\n\treturn grpc.NewServer(opts...), nil\n}"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server for management services, including setting up necessary dependencies and configurations.\n\nFunction Description: The function `startManagement` initializes and starts a gRPC server with management services. It sets up a temporary directory for data storage, configures the server with keepalive policies, initializes various managers and stores, and registers the management service. The server listens on a dynamically assigned port and runs in a goroutine.\n\nInput:\n- `t *testing.T`: Testing context for temporary directory creation and cleanup\n- `signalAddr string`: Address of the signal service\n- `counter *int`: Pointer to a counter for tracking server operations (used in mock implementation)\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance\n- `string`: The address the server is listening on\n- `error`: Any error that occurred during initialization",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server\"\n\t\"github.com/netbirdio/netbird/management/server/activity\"\n\t\"github.com/netbirdio/netbird/management/server/settings\"\n\t\"github.com/netbirdio/netbird/management/server/store\"\n\t\"github.com/netbirdio/netbird/management/server/telemetry\"\n)\n\nvar (\n\tkaep = keepalive.EnforcementPolicy{\n\t\tMinTime:             15 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\n\tkasp = keepalive.ServerParameters{\n\t\tMaxConnectionIdle:     15 * time.Second,\n\t\tMaxConnectionAgeGrace: 5 * time.Second,\n\t\tTime:                  5 * time.Second,\n\t\tTimeout:               2 * time.Second,\n\t}\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tt.Helper()\n\tdataDir := t.TempDir()\n\n\tconfig := &server.Config{\n\t\tStuns:      []*server.Host{},\n\t\tTURNConfig: &server.TURNConfig{},\n\t\tSignal: &server.Host{\n\t\t\tProto: \"http\",\n\t\t\tURI:   signalAddr,\n\t\t},\n\t\tDatadir:    dataDir,\n\t\tHttpConfig: nil,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tstore, cleanUp, err := store.NewTestStoreFromSQL(context.Background(), \"\", config.Datadir)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tt.Cleanup(cleanUp)\n\n\tpeersUpdateManager := server.NewPeersUpdateManager(nil)\n\teventStore := &activity.InMemoryEventStore{}\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tia, _ := integrations.NewIntegratedValidator(context.Background(), eventStore)\n\n\tmetrics, err := telemetry.NewDefaultAppMetrics(context.Background())\n\trequire.NoError(t, err)\n\n\taccountManager, err := server.BuildManager(context.Background(), store, peersUpdateManager, nil, \"\", \"netbird.selfhosted\", eventStore, nil, false, ia, metrics)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tsecretsManager := server.NewTimeBasedAuthSecretsManager(peersUpdateManager, config.TURNConfig, config.Relay)\n\tmgmtServer, err := server.NewServer(context.Background(), config, accountManager, settings.NewManager(store), peersUpdateManager, secretsManager, nil, nil)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tmock := &mockServer{\n\t\tManagementServiceServer: mgmtServer,\n\t\tcounter:                 counter,\n\t}\n\tmgmtProto.RegisterManagementServiceServer(s, mock)\n\tgo func() {\n\t\tif err = s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn s, lis.Addr().String(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\ttempDir := t.TempDir()\n\n\tkaep := keepalive.EnforcementPolicy{\n\t\tMinTime:             5 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\tkp := keepalive.ServerParameters{\n\t\tTime:    30 * time.Second,\n\t\tTimeout: 10 * time.Second,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\ts := grpc.NewServer(\n\t\tgrpc.KeepaliveEnforcementPolicy(kaep),\n\t\tgrpc.KeepaliveParams(kp),\n\t)\n\n\ttype mockManagementService struct {\n\t\tcounter *int\n\t}\n\tmockedService := &mockManagementService{counter: counter}\n\n\tRegisterManagementServiceServer(s, mockedService)\n\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(\"server failed: \" + err.Error())\n\t\t}\n\t}()\n\n\treturn s, lis.Addr().String(), nil\n}\n\n// Dummy registration function for the management service\nfunc RegisterManagementServiceServer(s *grpc.Server, svc *mockManagementService) {}"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Create a gRPC server in Go that implements an echo service and health checking functionality. The server should listen on a specified port, handle incoming gRPC requests, and periodically toggle its health status between SERVING and NOT_SERVING states.\n\nFunction Description: The main function sets up a gRPC server with echo service and health check capabilities. It creates a TCP listener, initializes the gRPC server, registers services, and starts serving requests. A background goroutine periodically changes the health status for demonstration purposes.\n\nInput:\n- port (int): The TCP port number on which the server should listen\n- sleep (time.Duration): The interval at which health status should toggle\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Errors are logged if they occur during server setup or operation\n\nNote: The function uses package-level variables for port and sleep duration (typically set via command-line flags) and assumes the existence of an echoServer struct that implements the Echo service interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n\t\"google.golang.org/grpc/health\"\n\thealthgrpc \"google.golang.org/grpc/health/grpc_health_v1\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\thealthcheck := health.NewServer()\n\thealthgrpc.RegisterHealthServer(s, healthcheck)\n\tpb.RegisterEchoServer(s, &echoServer{})\n\n\tgo func() {\n\t\tnext := healthpb.HealthCheckResponse_SERVING\n\n\t\tfor {\n\t\t\thealthcheck.SetServingStatus(system, next)\n\n\t\t\tif next == healthpb.HealthCheckResponse_SERVING {\n\t\t\t\tnext = healthpb.HealthCheckResponse_NOT_SERVING\n\t\t\t} else {\n\t\t\t\tnext = healthpb.HealthCheckResponse_SERVING\n\t\t\t}\n\n\t\t\ttime.Sleep(*sleep)\n\t\t}\n\t}()\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\t\"context\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/health\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\ntype echoServer struct {\n\tgrpc.UnimplementedEchoServer\n}\n\nfunc (s *echoServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {\n\treturn &EchoResponse{Message: req.Message}, nil\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"The port to listen on\")\n\tsleep := flag.Duration(\"sleep\", 5*time.Second, \"Interval to toggle health status\")\n\tflag.Parse()\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\ths := health.NewServer()\n\ths.SetServingStatus(\"\", healthpb.HealthCheckResponse_SERVING)\n\n\tRegisterEchoServer(s, &echoServer{})\n\thealthpb.RegisterHealthServer(s, hs)\n\n\tgo func() {\n\t\tserving := true\n\t\tfor {\n\t\t\ttime.Sleep(*sleep)\n\t\t\tif serving {\n\t\t\t\ths.SetServingStatus(\"\", healthpb.HealthCheckResponse_NOT_SERVING)\n\t\t\t} else {\n\t\t\t\ths.SetServingStatus(\"\", healthpb.HealthCheckResponse_SERVING)\n\t\t\t}\n\t\t\tserving = !serving\n\t\t}\n\t}()\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a gRPC server in Go that provides a simple key-value store service with various RPC methods for setting, getting, and streaming items.\n\nStruct Description: The intStoreServer struct implements a gRPC server for a key-value store service, handling item storage and retrieval operations through different RPC patterns (unary, server streaming, client streaming, and bidirectional streaming).\n\nFields:\nAddr: string - The network address where the server is listening\nl: net.Listener - The network listener for incoming connections\ngsrv: *grpc.Server - The gRPC server instance\nitems: map[string]int32 - The internal storage for key-value pairs\n\nMethods:\nnewIntStoreServer: () -> *intStoreServer - Creates and starts a new server instance on an available port\nstop: () -> () - Gracefully shuts down the server\nSet: (context.Context, *pb.Item) -> (*pb.SetResponse, error) - Unary RPC to set a key-value pair\nsetItem: (*pb.Item) -> int32 - Internal helper method to store an item\nGet: (context.Context, *pb.GetRequest) -> (*pb.Item, error) - Unary RPC to retrieve a value by key\nListItems: (*pb.ListItemsRequest, pb.IntStore_ListItemsServer) -> error - Server streaming RPC to list items matching criteria\nSetStream: (pb.IntStore_SetStreamServer) -> error - Client streaming RPC to set multiple items\nStreamChat: (pb.IntStore_StreamChatServer) -> error - Bidirectional streaming RPC for chat-like communication",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"cloud.google.com/go/rpcreplay/proto/intstore\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype intStoreServer struct {\n\tpb.IntStoreServer\n\n\tAddr string\n\tl    net.Listener\n\tgsrv *grpc.Server\n\n\titems map[string]int32\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts := &intStoreServer{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tgsrv: grpc.NewServer(),\n\t}\n\tpb.RegisterIntStoreServer(s.gsrv, s)\n\tgo s.gsrv.Serve(s.l)\n\treturn s\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.gsrv.Stop()\n\ts.l.Close()\n}\n\nfunc (s *intStoreServer) Set(_ context.Context, item *pb.Item) (*pb.SetResponse, error) {\n\told := s.setItem(item)\n\treturn &pb.SetResponse{PrevValue: old}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *pb.Item) int32 {\n\tif s.items == nil {\n\t\ts.items = map[string]int32{}\n\t}\n\told := s.items[item.Name]\n\ts.items[item.Name] = item.Value\n\treturn old\n}\n\nfunc (s *intStoreServer) Get(_ context.Context, req *pb.GetRequest) (*pb.Item, error) {\n\tval, ok := s.items[req.Name]\n\tif !ok {\n\t\treturn nil, status.Errorf(codes.NotFound, \"%q\", req.Name)\n\t}\n\treturn &pb.Item{Name: req.Name, Value: val}, nil\n}\n\nfunc (s *intStoreServer) ListItems(req *pb.ListItemsRequest, ss pb.IntStore_ListItemsServer) error {\n\tfor name, val := range s.items {\n\t\tif val > req.GreaterThan {\n\t\t\tif err := ss.Send(&pb.Item{Name: name, Value: val}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(ss pb.IntStore_SetStreamServer) error {\n\tn := 0\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.setItem(item)\n\t\tn++\n\t}\n\treturn ss.SendAndClose(&pb.Summary{Count: int32(n)})\n}\n\nfunc (s *intStoreServer) StreamChat(ss pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := ss.Send(item); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"example.com/protos\"\n)\n\ntype intStoreServer struct {\n\tAddr  string\n\tl     net.Listener\n\tgsrv  *grpc.Server\n\titems map[string]int32\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsrv := grpc.NewServer()\n\tistore := &intStoreServer{\n\t\tAddr:   l.Addr().String(),\n\t\tl:      l,\n\t\tgsrv:   srv,\n\t\titems:  make(map[string]int32),\n\t}\n\tpb.RegisterIntStoreServer(srv, istore)\n\tgo srv.Serve(l)\n\treturn istore\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.gsrv.GracefulStop()\n\ts.l.Close()\n}\n\nfunc (s *intStoreServer) Set(ctx context.Context, item *pb.Item) (*pb.SetResponse, error) {\n\ts.setItem(item)\n\treturn &pb.SetResponse{Success: true}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *pb.Item) int32 {\n\ts.items[item.Key] = item.Value\n\treturn item.Value\n}\n\nfunc (s *intStoreServer) Get(ctx context.Context, req *pb.GetRequest) (*pb.Item, error) {\n\tval, ok := s.items[req.Key]\n\tif !ok {\n\t\treturn nil, status.Errorf(codes.NotFound, \"key %s not found\", req.Key)\n\t}\n\treturn &pb.Item{Key: req.Key, Value: val}, nil\n}\n\nfunc (s *intStoreServer) ListItems(req *pb.ListItemsRequest, stream pb.IntStore_ListItemsServer) error {\n\tprefix := req.KeyPrefix\n\tfor k, v := range s.items {\n\t\tif strings.HasPrefix(k, prefix) {\n\t\t\tif err := stream.Send(&pb.Item{Key: k, Value: v}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(stream pb.IntStore_SetStreamServer) error {\n\tfor {\n\t\titem, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn stream.SendAndClose(&pb.SetResponse{Success: true})\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.setItem(item)\n\t}\n}\n\nfunc (s *intStoreServer) StreamChat(stream pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\titem, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := stream.Send(item); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n```"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with configurable network settings, TLS security, and keepalive parameters.\n\nStruct Description: The Server struct represents a gRPC server instance with network listener capabilities. It provides methods to start and stop the server, and handles configuration of security and connection parameters.\n\nFields:\nListener: [net.Listener] - The network listener for incoming connections\nServer: [*grpc.Server] - The gRPC server instance\n\nMethods:\nStart: [Name]() -> [error] - Starts the gRPC server and begins listening for incoming requests. Returns an error if the listener or server is not initialized.\nStop: [Name]() -> [void] - Gracefully stops the gRPC server if it's running.\nNewServer: [Name](address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) -> (*Server, error) - Creates a new Server instance with the specified address, TLS configuration, and keepalive parameters. Sets up default values for message sizes, connection timeout, and enforcement policy if not provided. Returns the server instance or an error if initialization fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil {\n\t\treturn errors.New(\"nil listener\")\n\t}\n\n\tif s.Server == nil {\n\t\treturn errors.New(\"nil server\")\n\t}\n\n\treturn s.Server.Serve(s.Listener)\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.Stop()\n\t}\n}\n\nfunc NewServer(\n\taddress string,\n\ttlsConf *tls.Config,\n\tsrvKaOpts *keepalive.ServerParameters,\n) (*Server, error) {\n\tif address == \"\" {\n\t\treturn nil, errors.New(\"server listen address not provided\")\n\t}\n\n\tlistener, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar serverOpts []grpc.ServerOption\n\n\tif srvKaOpts != nil {\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(*srvKaOpts))\n\t} else {\n\t\tserverKeepAliveParameters := keepalive.ServerParameters{\n\t\t\tTime:    1 * time.Minute,\n\t\t\tTimeout: 20 * time.Second,\n\t\t}\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(serverKeepAliveParameters))\n\t}\n\n\tif tlsConf != nil {\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(tlsConf)))\n\t}\n\n\tserverOpts = append(serverOpts, grpc.MaxSendMsgSize(maxSendMessageSize))\n\tserverOpts = append(serverOpts, grpc.MaxRecvMsgSize(maxRecvMessageSize))\n\n\tkep := keepalive.EnforcementPolicy{\n\t\tMinTime:             serverMinInterval,\n\t\tPermitWithoutStream: true,\n\t}\n\tserverOpts = append(serverOpts, grpc.KeepaliveEnforcementPolicy(kep))\n\n\tserverOpts = append(serverOpts, grpc.ConnectionTimeout(connectionTimeout))\n\n\tserver := grpc.NewServer(serverOpts...)\n\n\treturn &Server{Listener: listener, Server: server}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"crypto/tls\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc NewServer(address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) (*Server, error) {\n\tln, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tif tlsConf != nil {\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(tlsConf)))\n\t}\n\n\topts = append(opts, grpc.MaxRecvMsgSize(1024*1024*10))\n\topts = append(opts, grpc.MaxSendMsgSize(1024*1024*10))\n\n\tif srvKaOpts == nil {\n\t\tsrvKaOpts = &keepalive.ServerParameters{\n\t\t\tTime:              2 * time.Hour,\n\t\t\tTimeout:           20 * time.Second,\n\t\t\tMaxConnectionIdle: 0,\n\t\t\tMaxConnectionAge:  0,\n\t\t\tMaxConnectionAgeGrace: 0,\n\t\t}\n\t}\n\topts = append(opts, grpc.KeepaliveParams(*srvKaOpts))\n\n\tkaEnforcementPolicy := &keepalive.EnforcementPolicy{\n\t\tMinTime:             1 * time.Minute,\n\t\tPermitWithoutStream: true,\n\t}\n\topts = append(opts, grpc.KeepaliveEnforcementPolicy(*kaEnforcementPolicy))\n\n\ts := grpc.NewServer(opts...)\n\n\treturn &Server{\n\t\tListener: ln,\n\t\tServer:   s,\n\t}, nil\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil || s.Server == nil {\n\t\treturn errors.New(\"server not initialized\")\n\t}\n\tgo s.Server.Serve(s.Listener)\n\treturn nil\n}\n\nfunc (s *Server) Stop() {\n\ts.Server.GracefulStop()\n}"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that sets up and starts a mock gRPC server for management service testing, including generating a WireGuard key for authentication purposes.\n\nFunction Description: The function `startMockManagement` initializes and starts a mock gRPC server that implements a management service interface. It creates a TCP listener on an available port, generates a WireGuard key pair for server authentication, and registers mock implementations of the management service methods. The server runs in a goroutine to handle incoming requests asynchronously.\n\nInput: \n- t *testing.T: Testing context for error reporting and test helpers\n\nOutput:\n- *grpc.Server: The created gRPC server instance\n- net.Listener: The network listener for the server\n- *mock_server.ManagementServiceServerMock: The mock implementation of the management service\n- wgtypes.Key: The generated WireGuard private key for the server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server/mock_server\"\n\t\"golang.zx2c4.com/wireguard/wgctrl/wgtypes\"\n)\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\ts := grpc.NewServer()\n\n\tserverKey, err := wgtypes.GenerateKey()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmgmtMockServer := &mock_server.ManagementServiceServerMock{\n\t\tGetServerKeyFunc: func(context.Context, *mgmtProto.Empty) (*mgmtProto.ServerKeyResponse, error) {\n\t\t\tresponse := &mgmtProto.ServerKeyResponse{\n\t\t\t\tKey: serverKey.PublicKey().String(),\n\t\t\t}\n\t\t\treturn response, nil\n\t\t},\n\t}\n\n\tmgmtProto.RegisterManagementServiceServer(s, mgmtMockServer)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\treturn s, lis, mgmtMockServer, serverKey\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package mock\r\n\r\nimport (\r\n\t\"net\"\r\n\t\"testing\"\r\n\r\n\t\"google.golang.org/grpc\"\r\n\t\"wgtypes\"\r\n)\r\n\r\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\r\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n\r\n\tprivKey, err := wgtypes.GenerateKey()\r\n\tif err != nil {\r\n\t\tt.Fatal(err)\r\n\t}\r\n\r\n\tgrpcServer := grpc.NewServer()\r\n\tmockServer := new(mock_server.ManagementServiceServerMock)\r\n\r\n\tmanagement.RegisterManagementServiceServer(grpcServer, mockServer)\r\n\r\n\tgo func() {\r\n\t\tif err := grpcServer.Serve(lis); err != nil {\r\n\t\t\tt.Logf(\"server error: %v\", err)\r\n\t\t}\r\n\t}()\r\n\r\n\treturn grpcServer, lis, mockServer, privKey\r\n}"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Implement a Redis-based session management system in Go that allows storing, retrieving, and managing HTTP session data using Redis as the backend storage.\n\nStruct Description: The implementation consists of two main structs - `SessionStore` for handling individual session operations and `Provider` for managing the Redis connection pool and session lifecycle.\n\nFields:\n\nSessionStore:\n- p: *redis.Pool - Redis connection pool\n- sid: string - Session ID\n- lock: sync.RWMutex - Read-write lock for thread safety\n- values: map[interface{}]interface{} - Key-value pairs storing session data\n- maxlifetime: int64 - Session expiration time in seconds\n\nProvider:\n- maxlifetime: int64 - Default session expiration time\n- savePath: string - Redis server address\n- poolsize: int - Connection pool size\n- password: string - Redis authentication password\n- dbNum: int - Redis database number\n- poollist: *redis.Pool - Redis connection pool instance\n\nMethods:\n\nSessionStore:\n- Set(key, value interface{}) error - Stores a key-value pair in the session\n- Get(key interface{}) interface{} - Retrieves a value by key from the session\n- Delete(key interface{}) error - Removes a key-value pair from the session\n- Flush() error - Clears all session data\n- SessionID() string - Returns the session ID\n- SessionRelease(w http.ResponseWriter) - Persists session data to Redis before closing\n\nProvider:\n- SessionInit(maxlifetime int64, savePath string) error - Initializes the Redis connection pool with configuration\n- SessionRead(sid string) (session.Store, error) - Retrieves session data from Redis\n- SessionExist(sid string) bool - Checks if a session exists in Redis\n- SessionRegenerate(oldsid, sid string) (session.Store, error) - Creates a new session ID while preserving data\n- SessionDestroy(sid string) error - Removes session data from Redis",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/astaxie/beego/session\"\n\t\"github.com/garyburd/redigo/redis\"\n)\n\nvar redispder = &Provider{}\nvar MaxPoolSize = 100\n\ntype SessionStore struct {\n\tp           *redis.Pool\n\tsid         string\n\tlock        sync.RWMutex\n\tvalues      map[interface{}]interface{}\n\tmaxlifetime int64\n}\n\nfunc (rs *SessionStore) Set(key, value interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values[key] = value\n\treturn nil\n}\n\nfunc (rs *SessionStore) Get(key interface{}) interface{} {\n\trs.lock.RLock()\n\tdefer rs.lock.RUnlock()\n\tif v, ok := rs.values[key]; ok {\n\t\treturn v\n\t}\n\treturn nil\n}\n\nfunc (rs *SessionStore) Delete(key interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\tdelete(rs.values, key)\n\treturn nil\n}\n\nfunc (rs *SessionStore) Flush() error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (rs *SessionStore) SessionID() string {\n\treturn rs.sid\n}\n\nfunc (rs *SessionStore) SessionRelease(w http.ResponseWriter) {\n\tb, err := session.EncodeGob(rs.values)\n\tif err != nil {\n\t\treturn\n\t}\n\tc := rs.p.Get()\n\tdefer c.Close()\n\tc.Do(\"SETEX\", rs.sid, rs.maxlifetime, string(b))\n}\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\nfunc (rp *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\trp.maxlifetime = maxlifetime\n\tconfigs := strings.Split(savePath, \",\")\n\tif len(configs) > 0 {\n\t\trp.savePath = configs[0]\n\t}\n\tif len(configs) > 1 {\n\t\tpoolsize, err := strconv.Atoi(configs[1])\n\t\tif err != nil || poolsize <= 0 {\n\t\t\trp.poolsize = MaxPoolSize\n\t\t} else {\n\t\t\trp.poolsize = poolsize\n\t\t}\n\t} else {\n\t\trp.poolsize = MaxPoolSize\n\t}\n\tif len(configs) > 2 {\n\t\trp.password = configs[2]\n\t}\n\tif len(configs) > 3 {\n\t\tdbnum, err := strconv.Atoi(configs[3])\n\t\tif err != nil || dbnum < 0 {\n\t\t\trp.dbNum = 0\n\t\t} else {\n\t\t\trp.dbNum = dbnum\n\t\t}\n\t} else {\n\t\trp.dbNum = 0\n\t}\n\trp.poollist = redis.NewPool(func() (redis.Conn, error) {\n\t\tc, err := redis.Dial(\"tcp\", rp.savePath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif rp.password != \"\" {\n\t\t\tif _, err := c.Do(\"AUTH\", rp.password); err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\t_, err = c.Do(\"SELECT\", rp.dbNum)\n\t\tif err != nil {\n\t\t\tc.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\treturn c, err\n\t}, rp.poolsize)\n\n\treturn rp.poollist.Get().Err()\n}\n\nfunc (rp *Provider) SessionRead(sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionExist(sid string) bool {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, err := redis.Int(c.Do(\"EXISTS\", sid)); err != nil || existed == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (rp *Provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, _ := redis.Int(c.Do(\"EXISTS\", oldsid)); existed == 0 {\n\t\tc.Do(\"SET\", sid, \"\", \"EX\", rp.maxlifetime)\n\t} else {\n\t\tc.Do(\"RENAME\", oldsid, sid)\n\t\tc.Do(\"EXPIRE\", sid, rp.maxlifetime)\n\t}\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionDestroy(sid string) error {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tc.Do(\"DEL\", sid)\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "right_result": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"encoding/json\"\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n\t\"net/http\"\n)\n\ntype SessionStore struct {\n\tp         *redis.Pool\n\tsid       string\n\tlock      sync.RWMutex\n\tvalues    map[interface{}]interface{}\n\tmaxlifetime int64\n}\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\nfunc (s *SessionStore) Set(key, value interface{}) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\ts.values[key] = value\n\treturn nil\n}\n\nfunc (s *SessionStore) Get(key interface{}) interface{} {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.values[key]\n}\n\nfunc (s *SessionStore) Delete(key interface{}) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tdelete(s.values, key)\n\treturn nil\n}\n\nfunc (s *SessionStore) Flush() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\ts.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (s *SessionStore) SessionID() string {\n\treturn s.sid\n}\n\nfunc (s *SessionStore) SessionRelease(w http.ResponseWriter) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tconn := s.p.Get()\n\tdefer conn.Close()\n\n\tfor k, v := range s.values {\n\t\tkeyStr := fmt.Sprintf(\"%v\", k)\n\t\tdata, err := json.Marshal(v)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\t_, err = conn.Do(\"HSET\", s.sid, keyStr, data)\n\t\tif err != nil {\n\t\t}\n\t}\n\n\t_, err := conn.Do(\"EXPIRE\", s.sid, s.maxlifetime)\n\tif err != nil {\n\t}\n}\n\nfunc (p *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\tp.maxlifetime = maxlifetime\n\tp.savePath = savePath\n\n\tp.poollist = &redis.Pool{\n\t\tMaxIdle:     p.poolsize,\n\t\tMaxActive:   p.poolsize,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", p.savePath,\n\t\t\t\tredis.DialPassword(p.password),\n\t\t\t\tredis.DialDatabase(p.dbNum))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif time.Since(t) < time.Minute {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\t_, err := c.Do(\"PING\")\n\t\t\treturn err\n\t\t},\n\t}\n\n\treturn nil\n}\n\nfunc (p *Provider) SessionRead(sid string) (interface{}, error) {\n\ts := &SessionStore{\n\t\tp:         p.poollist,\n\t\tsid:       sid,\n\t\tlock:      sync.RWMutex{},\n\t\tvalues:    make(map[interface{}]interface{}),\n\t\tmaxlifetime: p.maxlifetime,\n\t}\n\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\treply, err := redis.Strings(conn.Do(\"HGETALL\", sid))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(reply) == 0 {\n\t\treturn s, nil\n\t}\n\n\tfor i := 0; i < len(reply); i += 2 {\n\t\tkeyStr := reply[i]\n\t\tjsonValue := reply[i+1]\n\t\tvar val interface{}\n\t\terr := json.Unmarshal([]byte(jsonValue), &val)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\ts.values[keyStr] = val\n\t}\n\n\treturn s, nil\n}\n\nfunc (p *Provider) SessionExist(sid string) bool {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\texists, err := redis.Bool(conn.Do(\"EXISTS\", sid))\n\tif err != nil {\n\t\treturn false\n\t}\n\treturn exists\n}\n\nfunc (p *Provider) SessionRegenerate(oldsid, sid string) (interface{}, error) {\n\toldStore, err := p.SessionRead(oldsid)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvaluesCopy := make(map[interface{}]interface{})\n\tfor k, v := range oldStore.(*SessionStore).GetValues() {\n\t\tvaluesCopy[k] = v\n\t}\n\n\tnewStore := &SessionStore{\n\t\tp:         p.poollist,\n\t\tsid:       sid,\n\t\tlock:      sync.RWMutex{},\n\t\tvalues:    valuesCopy,\n\t\tmaxlifetime: p.maxlifetime,\n\t}\n\n\tnewStore.SessionRelease(nil)\n\n\tif err := p.SessionDestroy(oldsid); err != nil {\n\t}\n\treturn newStore, nil\n}\n\nfunc (s *SessionStore) GetValues() map[interface{}]interface{} {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\tcopy := make(map[interface{}]interface{})\n\tfor k, v := range s.values {\n\t\tcopy[k] = v\n\t}\n\treturn copy\n}\n\nfunc (p *Provider) SessionDestroy(sid string) error {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", sid)\n\treturn err\n}\n```"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool and methods for interacting with Redis, including setting, getting, deleting keys, and flushing the database.\n\nStruct Description: RedisStore is a struct that manages a connection pool to Redis and provides methods for common Redis operations with support for expiration times.\n\nFields:\n- pool: *redis.Pool - A connection pool to Redis for efficient connection reuse\n- defaultExpiration: time.Duration - The default expiration time for keys when not explicitly specified\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method for executing Redis commands with serialization and expiration handling",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host, password string, defaultExpiration time.Duration) *RedisStore {\n\tpool := &redis.Pool{\n\t\tMaxIdle:         3,\n\t\tIdleTimeout:     240 * time.Second,\n\t\tTestOnBorrow:    func(c redis.Conn, t time.Time) error { _, err := c.Do(\"PING\"); return err },\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif password != \"\" {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, nil\n\t\t},\n\t}\n\treturn &RedisStore{\n\t\tpool:              pool,\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (rs *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\teffectiveExpires := expires\n\tif effectiveExpires <= 0 {\n\t\teffectiveExpires = rs.defaultExpiration\n\t}\n\n\treturn rs.invoke(conn.Do, key, value, effectiveExpires)\n}\n\nfunc (rs *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\tdata, err := redis.Bytes(conn.Do(\"GET\", key))\n\tif err != nil {\n\t\tif err == redis.ErrNil {\n\t\t\treturn errors.New(\"key not found\")\n\t\t}\n\t\treturn err\n\t}\n\n\treturn json.Unmarshal(data, ptrValue)\n}\n\nfunc (rs *RedisStore) Delete(key string) error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (rs *RedisStore) Flush() error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"FLUSHDB\")\n\treturn err\n}\n\nfunc (rs *RedisStore) invoke(f func(cmd string, args ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\tdata, err := json.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar args []interface{}\n\targs = append(args, key, data)\n\n\tif expires > 0 {\n\t\targs = append(args, \"PX\", int64(expires.Milliseconds()))\n\t} else if rs.defaultExpiration > 0 {\n\t\targs = append(args, \"PX\", int64(rs.defaultExpiration.Milliseconds()))\n\t}\n\n\t_, err = f(\"SET\", args...)\n\treturn err\n}"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Redis client struct in Go that manages connections to Redis servers and provides common Redis operations. The implementation should use connection pooling and support thread-safe access to multiple Redis instances.\n\nStruct Description: RedisClient is a struct that encapsulates Redis connection pooling and provides methods for common Redis operations. It maintains a thread-safe map of Redis clients for different server addresses.\n\nFields:\n\npool: *redis.Pool - The connection pool for Redis operations\nAddress: string - The Redis server address (URL)\n\nMethods:\n\nGetRedisClient: (address string, maxIdle int, maxActive int) -> *RedisClient - Retrieves or creates a Redis client for the given address with specified pool settings\nGet: (key string) -> (string, error) - Retrieves the value for a given key from Redis\nSet: (key string, val interface{}) -> (interface{}, error) - Sets the value for a given key in Redis\nLPush: (key string, value ...interface{}) -> (int, error) - Pushes values to the left of a Redis list\nLPop: (key string) -> (string, error) - Pops a value from the left of a Redis list\nHSet: (hashID string, field string, val string) -> error - Sets a field in a Redis hash\nHGet: (hashID string, field string) -> (string, error) - Gets a field from a Redis hash",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\tAddress string\n}\n\nvar (\n\tredisMap map[string]*RedisClient\n\tmapMutex *sync.RWMutex\n)\n\nconst (\n\tdefaultMaxIdle   = 10\n\tdefaultMaxActive = 50\n)\n\nfunc init() {\n\tredisMap = make(map[string]*RedisClient)\n\tmapMutex = new(sync.RWMutex)\n}\n\nfunc newPool(redisURL string, maxIdle, maxActive int) *redis.Pool {\n\treturn &redis.Pool{\n\t\tMaxIdle:   maxIdle,\n\t\tMaxActive: maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.DialURL(redisURL)\n\t\t\treturn c, err\n\t\t},\n\t}\n}\n\nfunc GetRedisClient(address string, maxIdle, maxActive int) *RedisClient {\n\tif maxIdle <= 0 {\n\t\tmaxIdle = defaultMaxIdle\n\t}\n\tif maxActive <= 0 {\n\t\tmaxActive = defaultMaxActive\n\t}\n\tvar redis *RedisClient\n\tvar mok bool\n\tmapMutex.RLock()\n\tredis, mok = redisMap[address]\n\tmapMutex.RUnlock()\n\tif !mok {\n\t\tredis = &RedisClient{Address: address, pool: newPool(address, maxIdle, maxActive)}\n\t\tmapMutex.Lock()\n\t\tredisMap[address] = redis\n\t\tmapMutex.Unlock()\n\t}\n\treturn redis\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"GET\", key)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"SET\", key, val))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tret, err := redis.Int(conn.Do(\"LPUSH\", key, value))\n\treturn ret, err\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"LPOP\", key))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"HGET\", hashID, field)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "right_result": "package redisclient\n\nimport (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\tAddress string\n}\n\nvar clients = sync.Map{}\n\nfunc GetRedisClient(address string, maxIdle int, maxActive int) *RedisClient {\n\tif v, ok := clients.Load(address); ok {\n\t\treturn v.(*RedisClient)\n\t}\n\n\tpool := &redis.Pool{\n\t\tMaxIdle:     maxIdle,\n\t\tMaxActive:   maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\treturn redis.Dial(\"tcp\", address)\n\t\t},\n\t}\n\n\tclient := &RedisClient{\n\t\tpool:    pool,\n\t\tAddress: address,\n\t}\n\n\tclients.Store(address, client)\n\treturn client\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"GET\", key))\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn conn.Do(\"SET\", key, val)\n}\n\nfunc (rc *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\targs := []interface{}{key}\n\targs = append(args, value...)\n\treply, err := conn.Do(\"LPUSH\", args...)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn redis.Int(reply, nil)\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"LPOP\", key))\n}\n\nfunc (rc *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treturn redis.String(conn.Do(\"HGET\", hashID, field))\n}"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool to interact with a Redis server, supporting common operations like Set, Get, Delete, and Flush with configurable expiration times.\n\nStruct Description: RedisStore is a struct that manages a pool of Redis connections and provides methods to interact with Redis, including setting, getting, deleting keys, and flushing the database. It supports configurable expiration times for cached items.\n\nFields:\n- pool: *redis.Pool - A connection pool to manage Redis connections efficiently\n- defaultExpiration: time.Duration - The default expiration time for cached items\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method to handle Redis operations with expiration logic",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n\n\t\"github.com/garyburd/redigo/redis\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host, password string, defaultExpiration time.Duration) *RedisStore {\n\tpool := &redis.Pool{\n\t\tMaxIdle:     3,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tconn, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif password != \"\" {\n\t\t\t\tif _, err := conn.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tconn.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn conn, err\n\t\t},\n\t}\n\treturn &RedisStore{\n\t\tpool:              pool,\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (rs *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\tmarshaledValue, err := json.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn rs.invoke(\n\t\tfunc(conn redis.Conn, key string, value interface{}) error {\n\t\t\t_, err := conn.Do(\"SET\", key, value)\n\t\t\treturn err\n\t\t},\n\t\tkey,\n\t\tmarshaledValue,\n\t\texpires,\n\t)\n}\n\nfunc (rs *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\tval, err := redis.String(conn.Do(\"GET\", key))\n\tif err != nil {\n\t\tif err == redis.ErrNil {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t}\n\n\tif err := json.Unmarshal([]byte(val), ptrValue); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (rs *RedisStore) Delete(key string) error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (rs *RedisStore) Flush() error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"FLUSHDB\")\n\treturn err\n}\n\nfunc (rs *RedisStore) invoke(f func(conn redis.Conn, key string, value interface{}) error, key string, value interface{}, expires time.Duration) error {\n\tconn := rs.pool.Get()\n\tdefer conn.Close()\n\n\tactualExpires := expires\n\tif actualExpires == 0 {\n\t\tactualExpires = rs.defaultExpiration\n\t}\n\n\tif err := f(conn, key, value); err != nil {\n\t\treturn err\n\t}\n\n\tif actualExpires > 0 {\n\t\texpireSeconds := int64(actualExpires.Seconds())\n\t\t_, err := conn.Do(\"EXPIRE\", key, expireSeconds)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Create a Go struct that implements a RocketMQ push consumer with configurable options, message handling, and tracing capabilities.\n\nStruct Description: The PushConsumer struct encapsulates a RocketMQ push consumer with additional features like rate limiting, tracing, and message processing. It manages consumer lifecycle and message subscription.\n\nFields:\n\nname: string - Name identifier for the consumer  \nPushConsumer: rocketmq.PushConsumer - Embedded RocketMQ push consumer instance  \nPushConsumerConfig: PushConsumerConfig - Configuration for the consumer  \nsubscribers: map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error) - Map of topic to message handler functions  \ninterceptors: []primitive.Interceptor - List of interceptors for message processing  \nbucket: *ratelimit.Bucket - Rate limiter bucket for controlling consumption rate  \nstarted: bool - Flag indicating if consumer is running  \n\nMethods:\n\nRegisterSingleMessage: (f func(context.Context, *primitive.MessageExt) error) -> *PushConsumer - Registers a single message handler function with tracing and panic recovery  \nStart: () -> error - Initializes and starts the RocketMQ consumer with configured options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"runtime/debug\"\n\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/juju/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.12.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype PushConsumer struct {\n\trocketmq.PushConsumer\n\tname string\n\tPushConsumerConfig\n\n\tsubscribers  map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors []primitive.Interceptor\n\tbucket       *ratelimit.Bucket\n\tstarted      bool\n}\n\nfunc (cc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\ttracer := xtrace.NewTracer(trace.SpanKindConsumer)\n\tattrs := []attribute.KeyValue{\n\t\tsemconv.MessagingSystemKey.String(\"rocketmq\"),\n\t\tsemconv.MessagingRocketmqClientGroupKey.String(cc.Group),\n\t\tsemconv.MessagingRocketmqClientIDKey.String(cc.InstanceName),\n\t\tsemconv.MessagingRocketmqConsumptionModelKey.String(cc.MessageModel),\n\t}\n\n\tfn := func(ctx context.Context, msgs ...*primitive.MessageExt) (result consumer.ConsumeResult, err error) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tresult, err = consumer.ConsumeRetryLater, errors.New(\"consumer message panic\")\n\t\t\t}\n\t\t}()\n\t\tfor _, msg := range msgs {\n\t\t\tvar (\n\t\t\t\tspan trace.Span\n\t\t\t)\n\n\t\t\tif cc.EnableTrace {\n\t\t\t\tcarrier := propagation.MapCarrier{}\n\t\t\t\tfor key, value := range msg.GetProperties() {\n\t\t\t\t\tcarrier[key] = value\n\t\t\t\t}\n\t\t\t\tctx, span = tracer.Start(ctx, msg.Topic, carrier, trace.WithAttributes(attrs...))\n\t\t\t\tspan.SetAttributes(\n\t\t\t\t\tsemconv.MessagingRocketmqNamespaceKey.String(msg.Topic),\n\t\t\t\t\tsemconv.MessagingRocketmqMessageTagKey.String(msg.GetTags()),\n\t\t\t\t)\n\t\t\t\tdefer span.End()\n\t\t\t}\n\n\t\t\tif cc.bucket != nil {\n\t\t\t\tif ok := cc.bucket.WaitMaxDuration(1, cc.WaitMaxDuration); !ok {\n\t\t\t\t\treturn consumer.ConsumeRetryLater, nil\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\tif cc.EnableTrace && span != nil {\n\t\t\t\t\tspan.RecordError(err)\n\t\t\t\t}\n\t\t\t\treturn consumer.ConsumeRetryLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\tcc.subscribers[cc.Topic] = fn\n\treturn cc\n}\n\nfunc (cc *PushConsumer) Start() error {\n\tif cc.started {\n\t\treturn nil\n\t}\n\n\tvar opts = []consumer.Option{\n\t\tconsumer.WithGroupName(cc.Group),\n\t\tconsumer.WithInstance(cc.InstanceName),\n\t\tconsumer.WithNameServer(cc.Addr),\n\t\tconsumer.WithMaxReconsumeTimes(cc.Reconsume),\n\t\tconsumer.WithInterceptor(cc.interceptors...),\n\t\tconsumer.WithConsumeMessageBatchMaxSize(cc.ConsumeMessageBatchMaxSize),\n\t\tconsumer.WithPullBatchSize(cc.PullBatchSize),\n\t\tconsumer.WithConsumeGoroutineNums(cc.ConsumeGoroutineNums),\n\t\tconsumer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: cc.AccessKey,\n\t\t\tSecretKey: cc.SecretKey,\n\t\t}),\n\t}\n\tif cc.PushConsumerConfig.MessageModel == \"BroadCasting\" {\n\t\topts = append(opts, consumer.WithConsumerModel(consumer.BroadCasting))\n\t}\n\n\tclient, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcc.PushConsumer = client\n\n\tselector := consumer.MessageSelector{\n\t\tType:       consumer.TAG,\n\t\tExpression: \"\",\n\t}\n\tif cc.PushConsumerConfig.SubExpression != \"*\" {\n\t\tselector.Expression = cc.PushConsumerConfig.SubExpression\n\t}\n\n\tfor topic, fn := range cc.subscribers {\n\t\tif err := cc.PushConsumer.Subscribe(topic, selector, fn); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cc.Enable {\n\t\tif err := client.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tcc.started = true\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 128,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/rocketmq\"\n\t\"github.com/juju/ratelimit\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype PushConsumerConfig struct {\n\tInstanceName string\n\tGroup        string\n\tMessageModel consumer.MessageModel\n}\n\ntype PushConsumer struct {\n\tname             string\n\tPushConsumer     rocketmq.PushConsumer\n\tPushConsumerConfig PushConsumerConfig\n\tsubscribers      map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors     []primitive.Interceptor\n\tbucket           *ratelimit.Bucket\n\tstarted          bool\n}\n\nfunc (c *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\thandler := func(ctx context.Context, msgs ...*primitive.MessageExt) (consumer.ConsumeResult, error) {\n\t\tfor _, msg := range msgs {\n\t\t\tif !c.bucket.Take() {\n\t\t\t\treturn consumer.ReconsumeLater, nil\n\t\t\t}\n\t\t\tctx, span := trace.SpanFromContext(ctx).TracerProvider().Tracer(\"rocketmq\").Start(ctx, \"process_message\")\n\t\t\tdefer span.End()\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\treturn consumer.ReconsumeLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\ttopic := \"default-topic\" \n\tc.subscribers[topic] = handler\n\treturn c\n}\n\nfunc (c *PushConsumer) Start() error {\n\tif c.started {\n\t\treturn errors.New(\"consumer already started\")\n\t}\n\n\topts := []primitive.NewPushConsumerOption{\n\t\tprimitive.WithConsumerInterceptorChain(c.interceptors...),\n\t}\n\tvar err error\n\tc.PushConsumer, err = rocketmq.NewPushConsumer(\n\t\tprimitive.NewPushConsumerOptions{\n\t\t\tInstanceName: c.PushConsumerConfig.InstanceName,\n\t\t\tGroup:        c.PushConsumerConfig.Group,\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor topic, handler := range c.subscribers {\n\t\tif err := c.PushConsumer.Subscribe(topic, c.PushConsumerConfig.MessageModel, handler); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := c.PushConsumer.Start(); err != nil {\n\t\treturn err\n\t}\n\n\tc.started = true\n\treturn nil\n}"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages to brokers using different modes (Sync, Async, or OneWay) with configurable options.\n\nStruct Description: The Producer struct encapsulates a RocketMQ producer client with methods for starting, closing, and sending messages. It supports configuration options and interceptors.\n\nFields:\n\n- started: bool - Indicates whether the producer has been started\n- Producer: rocketmq.Producer - The underlying RocketMQ producer instance\n- name: string - Name identifier for the producer\n- ProducerConfig: ProducerConfig - Configuration settings for the producer\n- interceptors: []primitive.Interceptor - List of interceptors for message processing\n\nMethods:\n\n- Start() -> error - Initializes and starts the RocketMQ producer with configured options\n- Close() -> error - Shuts down the producer gracefully\n- SendWithContext(ctx context.Context, msg []byte) -> error - Sends a byte array message with context\n- SendWithMsg(ctx context.Context, msg *primitive.Message) -> error - Sends a primitive.Message with context\n- SendWithResult(ctx context.Context, msg []byte, tag string) -> (*primitive.SendResult, error) - Sends a message with tag and returns send result\n- SendMsg(ctx context.Context, msg *primitive.Message) -> (*primitive.SendResult, error) - Sends a message and returns send result",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/douyu/jupiter/pkg/xlog\"\n)\n\ntype Producer struct {\n\tstarted bool\n\n\trocketmq.Producer\n\tname string\n\tProducerConfig\n\tinterceptors []primitive.Interceptor\n}\n\nfunc (pc *Producer) Start() error {\n\tif pc.started {\n\t\treturn nil\n\t}\n\n\tclient, err := rocketmq.NewProducer(\n\t\tproducer.WithGroupName(pc.Group),\n\t\tproducer.WithNameServer(pc.Addr),\n\t\tproducer.WithRetry(pc.Retry),\n\t\tproducer.WithInterceptor(pc.interceptors...),\n\t\tproducer.WithInstanceName(pc.InstanceName),\n\t\tproducer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: pc.AccessKey,\n\t\t\tSecretKey: pc.SecretKey,\n\t\t}),\n\t)\n\tif err != nil {\n\t\txlog.Jupiter().Panic(\"create producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tif err := client.Start(); err != nil {\n\t\txlog.Jupiter().Panic(\"start producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tpc.started = true\n\tpc.Producer = client\n\treturn nil\n}\n\nfunc (pc *Producer) Close() error {\n\terr := pc.Shutdown()\n\tif err != nil {\n\t\txlog.Jupiter().Warn(\"consumer close fail\", xlog.Any(\"error\", err.Error()))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\t_, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tmsg.Topic = pc.Topic\n\t_, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\tif tag != \"\" {\n\t\tm.WithTag(tag)\n\t}\n\n\tres, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", string(msg)))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}\n\nfunc (pc *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tres, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 127,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n)\n\ntype ProducerConfig struct {\n\tNameServer    string\n\tProducerGroup string\n\tTopic         string\n\tSendMode      string // \"SYNC\", \"ASYNC\", \"ONEWAY\"\n}\n\ntype Producer struct {\n\tstarted        bool\n\tProducer       rocketmq.Producer\n\tname           string\n\tProducerConfig ProducerConfig\n\tinterceptors   []primitive.Interceptor\n}\n\nfunc (p *Producer) Start() error {\n\tif p.started {\n\t\treturn nil\n\t}\n\n\topts := []primitive.NewProducerOption{\n\t\tprimitive.WithNsResolver(primitive.NewPassthroughResolver([]string{p.ProducerConfig.NameServer})),\n\t\tprimitive.WithProducerGroup(p.ProducerConfig.ProducerGroup),\n\t}\n\n\tfor _, interceptor := range p.interceptors {\n\t\topts = append(opts, primitive.WithInterceptor(interceptor))\n\t}\n\n\tvar err error\n\tp.Producer, err = rocketmq.NewProducer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = p.Producer.Start()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.started = true\n\treturn nil\n}\n\nfunc (p *Producer) Close() error {\n\tif !p.started {\n\t\treturn nil\n\t}\n\terr := p.Producer.Shutdown()\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.started = false\n\treturn nil\n}\n\nfunc (p *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tif !p.started {\n\t\treturn errors.New(\"producer not started\")\n\t}\n\n\tmessage := primitive.NewMessage(p.ProducerConfig.Topic, msg)\n\tfor _, interceptor := range p.interceptors {\n\t\tinterceptor.Intercept(message)\n\t}\n\n\tswitch p.ProducerConfig.SendMode {\n\tcase \"SYNC\":\n\t\t_, err := p.Producer.SendSync(ctx, message)\n\t\treturn err\n\tcase \"ASYNC\":\n\t\tp.Producer.SendAsync(ctx, message, func(ctx context.Context, result *primitive.SendResult, err error) {\n\t\t})\n\t\treturn nil\n\tcase \"ONEWAY\":\n\t\tp.Producer.SendOneWay(ctx, message)\n\t\treturn nil\n\tdefault:\n\t\treturn errors.New(\"invalid send mode\")\n\t}\n}\n\nfunc (p *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tif !p.started {\n\t\treturn errors.New(\"producer not started\")\n\t}\n\n\tfor _, interceptor := range p.interceptors {\n\t\tinterceptor.Intercept(msg)\n\t}\n\n\tswitch p.ProducerConfig.SendMode {\n\tcase \"SYNC\":\n\t\t_, err := p.Producer.SendSync(ctx, msg)\n\t\treturn err\n\tcase \"ASYNC\":\n\t\tp.Producer.SendAsync(ctx, msg, func(ctx context.Context, result *primitive.SendResult, err error) {\n\t\t})\n\t\treturn nil\n\tcase \"ONEWAY\":\n\t\tp.Producer.SendOneWay(ctx, msg)\n\t\treturn nil\n\tdefault:\n\t\treturn errors.New(\"invalid send mode\")\n\t}\n}\n\nfunc (p *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tif !p.started {\n\t\treturn nil, errors.New(\"producer not started\")\n\t}\n\n\tmessage := primitive.NewMessage(p.ProducerConfig.Topic, msg)\n\tmessage.WithTag(tag)\n\tfor _, interceptor := range p.interceptors {\n\t\tinterceptor.Intercept(message)\n\t}\n\n\tswitch p.ProducerConfig.SendMode {\n\tcase \"SYNC\":\n\t\treturn p.Producer.SendSync(ctx, message)\n\tcase \"ASYNC\":\n\t\treturn nil, errors.New(\"async mode not supported in SendWithResult\")\n\tcase \"ONEWAY\":\n\t\tp.Producer.SendOneWay(ctx, message)\n\t\treturn nil, nil\n\tdefault:\n\t\treturn nil, errors.New(\"invalid send mode\")\n\t}\n}\n\nfunc (p *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tif !p.started {\n\t\treturn nil, errors.New(\"producer not started\")\n\t}\n\n\tfor _, interceptor := range p.interceptors {\n\t\tinterceptor.Intercept(msg)\n\t}\n\n\tswitch p.ProducerConfig.SendMode {\n\tcase \"SYNC\":\n\t\treturn p.Producer.SendSync(ctx, msg)\n\tcase \"ASYNC\":\n\t\treturn nil, errors.New(\"async mode not supported in SendMsg\")\n\tcase \"ONEWAY\":\n\t\tp.Producer.SendOneWay(ctx, msg)\n\t\treturn nil, nil\n\tdefault:\n\t\treturn nil, errors.New(\"invalid send mode\")\n\t}\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Create a function that performs a simple HTTP GET request to a remote URL and returns the response body as a string.\n\nFunction Description: The function `remote_get` makes an HTTP GET request to the specified remote URL. It handles the response by checking the status code, reading the response body, and returning it as a string. If any errors occur during the request or response processing, they are returned as part of the error output.\n\nInput: \n- `remote` (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- (string, error): A tuple containing the response body as a string and an error. If the request is successful, the error will be nil. If an error occurs, the string will be empty, and the error will contain the relevant error message.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"remote_get: wrong status code %d\", resp.StatusCode))\n\t}\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", fmt.Errorf(\"HTTP request failed with status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a function to retrieve a proxy address from a specified HTTP endpoint and return it in a formatted string.\n\nFunction Description: The function `getOneProxy` makes an HTTP GET request to a predefined proxy server endpoint, reads the response body to obtain the proxy address, formats it with an \"http://\" prefix, and returns both the formatted and raw proxy strings. It includes basic error handling for the response reading process.\n\nInput: None (The function takes no input parameters)\n\nOutput: \n1. A string representing the formatted proxy address with \"http://\" prefix\n2. A string representing the raw proxy address from the response body",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, _ := http.Get(\"http://45.78.45.70:5015/get/\")\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t}\n\tproxy := \"http://\" + string(body)\n\tfmt.Println(\"\u4f7f\u7528\u9ed8\u8ba4\u4ee3\u7406\uff1a\" + proxy)\n\treturn proxy, string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, err := http.Get(\"https://api.example.com/proxy\")\n\tif err != nil || resp.StatusCode != 200 {\n\t\treturn \"\", \"\"\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\n\trawProxy := strings.TrimSpace(string(body))\n\tformattedProxy := \"http://\" + rawProxy\n\treturn formattedProxy, rawProxy\n}"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Create a robust RabbitMQ producer in Go that handles connection management, channel initialization, and message publishing with automatic reconnection capabilities.\n\nStruct Description: The Session struct represents a RabbitMQ producer session that maintains connection state and provides message publishing functionality with automatic reconnection.\n\nFields:\n- name: string - The name of the queue to publish to\n- logger: *log.Logger - Logger for session events\n- connection: *amqp.Connection - RabbitMQ connection object\n- channel: *amqp.Channel - RabbitMQ channel object\n- done: chan bool - Channel to signal shutdown\n- notifyConnClose: chan *amqp.Error - Channel for connection close notifications\n- notifyChanClose: chan *amqp.Error - Channel for channel close notifications\n- notifyConfirm: chan amqp.Confirmation - Channel for publish confirmations\n- isReady: bool - Flag indicating if session is ready to publish\n\nMethods:\n- New(name string, addr string) -> *Session - Creates a new Session instance and starts connection management\n- handleReconnect(addr string) - Manages reconnection logic in a goroutine\n- connect(addr string) -> (*amqp.Connection, error) - Establishes connection to RabbitMQ server\n- handleReInit(conn *amqp.Connection) -> bool - Handles channel reinitialization after connection\n- init(conn *amqp.Connection) -> error - Initializes channel and declares queue\n- changeConnection(connection *amqp.Connection) - Updates connection and sets up close notifications\n- changeChannel(channel *amqp.Channel) - Updates channel and sets up close/confirm notifications\n- Push(data []byte) -> error - Safely publishes message with retry logic\n- UnsafePush(data []byte) -> error - Publishes message without safety checks (used internally)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n)\n\ntype Session struct {\n\tname            string\n\tlogger          *log.Logger\n\tconnection      *amqp.Connection\n\tchannel         *amqp.Channel\n\tdone            chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n}\n\nfunc New(name string, addr string) *Session {\n\tsession := Session{\n\t\tlogger: log.New(os.Stdout, \"\", log.LstdFlags),\n\t\tname:   name,\n\t\tdone:   make(chan bool),\n\t}\n\tgo session.handleReconnect(addr)\n\treturn &session\n}\n\nfunc (session *Session) handleReconnect(addr string) {\n\tfor {\n\t\tsession.isReady = false\n\t\tlog.Println(\"Attempting to connect\")\n\n\t\tconn, err := session.connect(addr)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to connect. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif done := session.handleReInit(conn); done {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (session *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsession.changeConnection(conn)\n\tlog.Println(\"Connected!\")\n\treturn conn, nil\n}\n\nfunc (session *Session) handleReInit(conn *amqp.Connection) bool {\n\tfor {\n\t\tsession.isReady = false\n\n\t\terr := session.init(conn)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to initialize channel. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn true\n\t\t\tcase <-time.After(2 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tselect {\n\t\tcase <-session.done:\n\t\t\treturn true\n\t\tcase <-session.notifyConnClose:\n\t\t\tlog.Println(\"Connection closed. Reconnecting...\")\n\t\t\treturn false\n\t\tcase <-session.notifyChanClose:\n\t\t\tlog.Println(\"Channel closed. Re-running init...\")\n\t\t}\n\t}\n}\n\nfunc (session *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ch.Confirm(false)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = ch.QueueDeclare(\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsession.changeChannel(ch)\n\tsession.isReady = true\n\tlog.Println(\"Setup!\")\n\n\treturn nil\n}\n\nfunc (session *Session) changeConnection(connection *amqp.Connection) {\n\tsession.connection = connection\n\tsession.notifyConnClose = make(chan *amqp.Error)\n\tsession.connection.NotifyClose(session.notifyConnClose)\n}\n\nfunc (session *Session) changeChannel(channel *amqp.Channel) {\n\tsession.channel = channel\n\tsession.notifyChanClose = make(chan *amqp.Error)\n\tsession.notifyConfirm = make(chan amqp.Confirmation, 1)\n\tsession.channel.NotifyClose(session.notifyChanClose)\n\tsession.channel.NotifyPublish(session.notifyConfirm)\n}\n\nfunc (session *Session) Push(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"failed to push: not connected\")\n\t}\n\tfor {\n\t\terr := session.UnsafePush(data)\n\t\tif err != nil {\n\t\t\tsession.logger.Println(\"Push failed. Retrying...\")\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn errors.New(\"session is shutting down\")\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tselect {\n\t\tcase confirm := <-session.notifyConfirm:\n\t\t\tif confirm.Ack {\n\t\t\t\tsession.logger.Println(\"Push confirmed!\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\tcase <-time.After(5 * time.Second):\n\t\t}\n\t\tsession.logger.Println(\"Push didn't confirm. Retrying...\")\n\t}\n}\n\nfunc (session *Session) UnsafePush(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"not connected to a server\")\n\t}\n\treturn session.channel.Publish(\n\t\t\"\",\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        data,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Session struct {\n\tname           string\n\tlogger         *log.Logger\n\tconnection     *amqp.Connection\n\tchannel        *amqp.Channel\n\tdone           chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n\tmu              sync.RWMutex\n\tcond            *sync.Cond\n}\n\nfunc New(name string, addr string) *Session {\n\ts := &Session{\n\t\tname:           name,\n\t\tlogger:         log.New(os.Stderr, \"RabbitMQ Producer: \", log.LstdFlags),\n\t\tdone:           make(chan bool),\n\t\tnotifyConnClose: make(chan *amqp.Error),\n\t\tnotifyChanClose: make(chan *amqp.Error),\n\t\tnotifyConfirm:   make(chan amqp.Confirmation),\n\t}\n\ts.cond = sync.NewCond(&s.mu.RWMutex)\n\n\tgo s.handleReconnect(addr)\n\n\tconn, err := s.connect(addr)\n\tif err != nil {\n\t\ts.logger.Printf(\"Initial connection failed: %v\", err)\n\t\treturn s\n\t}\n\n\tif s.handleReInit(conn) {\n\t\ts.mu.Lock()\n\t\ts.isReady = true\n\t\ts.mu.Unlock()\n\t\ts.cond.Broadcast()\n\t} else {\n\t\ts.logger.Println(\"Failed to initialize initially\")\n\t}\n\n\treturn s\n}\n\nfunc (s *Session) handleReconnect(addr string) {\n\tfor {\n\t\tselect {\n\t\tcase <-s.done:\n\t\t\treturn\n\t\tcase err := <-s.notifyConnClose:\n\t\t\ts.logger.Printf(\"Connection closed, reason: %s\", err)\n\t\tcase err := <-s.notifyChanClose:\n\t\t\ts.logger.Printf(\"Channel closed, reason: %s\", err)\n\t\t}\n\n\t\tconn, err := s.connect(addr)\n\t\tif err != nil {\n\t\t\ts.logger.Printf(\"Failed to reconnect: %v\", err)\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tif s.handleReInit(conn) {\n\t\t\ts.logger.Println(\"Reconnected and reinitialized\")\n\t\t} else {\n\t\t\ts.logger.Println(\"Failed to reinitialize after reconnect\")\n\t\t}\n\t}\n}\n\nfunc (s *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.changeConnection(conn)\n\treturn conn, nil\n}\n\nfunc (s *Session) changeConnection(conn *amqp.Connection) {\n\tif s.connection != nil {\n\t\ts.connection.Close()\n\t}\n\ts.connection = conn\n\ts.notifyConnClose = s.connection.NotifyClose(make(chan *amqp.Error))\n}\n\nfunc (s *Session) changeChannel(channel *amqp.Channel) {\n\tif s.channel != nil {\n\t\ts.channel.Close()\n\t}\n\ts.channel = channel\n\ts.notifyChanClose = s.channel.NotifyClose(make(chan *amqp.Error))\n\ts.notifyConfirm = s.channel.NotifyPublish(make(chan amqp.Confirmation))\n}\n\nfunc (s *Session) init(conn *amqp.Connection) error {\n\tchannel, err := conn.Channel()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := channel.Qos(\n\t\t1,     // prefetch count\n\t\t0,     // prefetch size\n\t\tfalse, // global\n\t); err != nil {\n\t\tchannel.Close()\n\t\treturn err\n\t}\n\n\tif err := channel.Confirm(false); err != nil {\n\t\tchannel.Close()\n\t\treturn err\n\t}\n\n\tif _, err := channel.QueueDeclare(\n\t\ts.name, // name\n\t\tfalse,  // durable\n\t\tfalse,  // delete when unused\n\t\tfalse,  // exclusive\n\t\tfalse,  // no-wait\n\t\tnil,    // arguments\n\t); err != nil {\n\t\tchannel.Close()\n\t\treturn err\n\t}\n\n\ts.changeChannel(channel)\n\treturn nil\n}\n\nfunc (s *Session) handleReInit(conn *amqp.Connection) bool {\n\terr := s.init(conn)\n\tif err != nil {\n\t\ts.logger.Printf(\"Failed to reinitialize: %v\", err)\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (s *Session) Push(data []byte) error {\n\ts.mu.RLock()\n\tready := s.isReady\n\ts.mu.RUnlock()\n\n\tif !ready {\n\t\ts.mu.Lock()\n\t\tfor !s.isReady {\n\t\t\ts.cond.Wait()\n\t\t}\n\t\ts.mu.Unlock()\n\t}\n\n\treturn s.UnsafePush(data)\n}\n\nfunc (s *Session) UnsafePush(data []byte) error {\n\tif s.channel == nil {\n\t\treturn errors.New(\"channel not initialized\")\n\t}\n\n\tif err := s.channel.Publish(\n\t\t\"\",          // exchange\n\t\ts.name,      // routing key (queue name)\n\t\tfalse,       // mandatory\n\t\tfalse,       // immediate\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        data,\n\t\t},\n\t); err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase confirm := <-s.notifyConfirm:\n\t\tif confirm.Ack {\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"message not acknowledged\")\n\tcase <-time.After(5 * time.Second):\n\t\treturn errors.New(\"timeout waiting for confirmation\")\n\t}\n}\n```"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Implement a RabbitMQ client in Go that handles connection management, queue declaration, and message publishing with retry logic for reliability.\n\nStruct Description: RabbitClient is a struct that encapsulates the functionality for interacting with a RabbitMQ server, including establishing connections, declaring queues, and publishing messages with automatic reconnection attempts on failures.\n\nFields:\n- url: string - The connection URL for the RabbitMQ server\n- queueName: string - The name of the queue to interact with\n- connection: *amqp.Connection - The active RabbitMQ connection\n- channel: *amqp.Channel - The channel for communication with RabbitMQ\n\nMethods:\n- Connect() -> void - Establishes connection to RabbitMQ server, creates a channel, and declares a queue with TTL and priority settings. Implements retry logic on failures.\n- PublishTgMessage(messageBag MessageBag) -> void - Publishes a message to the declared queue after JSON serialization. Implements retry logic on failures and handles reconnection.\n- Close() -> void - Properly closes the channel and connection to RabbitMQ if they exist.\n- NewRabbitClient(url string, queueName string) -> *RabbitClient - Constructor function that initializes and returns a new RabbitClient instance with established connection.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"time\"\n)\n\ntype RabbitClient struct {\n\turl\t\t\tstring\n\tqueueName\tstring\n\tconnection\t*amqp.Connection\n\tchannel\t\t*amqp.Channel\n}\n\nfunc (rc *RabbitClient) Connect() {\n\tfor {\n\t\tvar err error\n\n\t\trc.connection, err = amqp.Dial(rc.url)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't connect to rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\trc.channel, err = rc.connection.Channel()\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't create channel (connect was ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\targs := make(amqp.Table)\n\t\targs[\"x-message-ttl\"] = int32(1000 * 60 * 60 * 24 * 10)\n\t\targs[\"x-max-priority\"] = int32(255)\n\n\t\t_, err = rc.channel.QueueDeclare(\n\t\t\trc.queueName,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\targs,\n\t\t)\n\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't declare queue (connect, channel were ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tfor {\n\t\tbody, err := json.Marshal(messageBag)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error marshaling a message.\")\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Printf(\"Publishing %+v ...\\n\", string(body))\n\n\t\terr = rc.channel.Publish(\n\t\t\t\"\",\n\t\t\trc.queueName,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tamqp.Publishing{\n\t\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\t\tContentType: \"text/plain\",\n\t\t\t\tBody: body,\n\t\t\t\tPriority: messageBag.Priority,\n\t\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't publish text '%s', will retry in 1 sec: %s\", string(body), err)\n\t\t\trc.Close()\n\t\t\trc.Connect()\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) Close() {\n\tif rc.channel != nil {\n\t\trc.channel.Close()\n\t}\n\tif rc.connection != nil {\n\t\trc.connection.Close()\n\t}\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\trabbit := &RabbitClient{\n\t\turl: url,\n\t\tqueueName: queueName,\n\t}\n\trabbit.Connect()\n\tlog.Println(\"Successfully connected to RabbitMQ\")\n\treturn rabbit\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype MessageBag struct {\n\t// Assume fields are defined here\n}\n\ntype RabbitClient struct {\n\turl        string\n\tqueueName  string\n\tconnection *amqp.Connection\n\tchannel    *amqp.Channel\n}\n\nfunc (rc *RabbitClient) Connect() {\n\tif rc.channel != nil {\n\t\t_ = rc.channel.Close()\n\t}\n\tif rc.connection != nil {\n\t\t_ = rc.connection.Close()\n\t}\n\n\tfor {\n\t\tconn, err := amqp.Dial(rc.url)\n\t\tif err == nil {\n\t\t\tch, err := conn.Channel()\n\t\t\tif err == nil {\n\t\t\t\targs := amqp.Table{\n\t\t\t\t\t\"x-message-ttl\":    60000,\n\t\t\t\t\t\"x-max-priority\":   10,\n\t\t\t\t}\n\t\t\t\t_, err = ch.QueueDeclare(\n\t\t\t\t\trc.queueName,\n\t\t\t\t\ttrue,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\targs,\n\t\t\t\t)\n\t\t\t\tif err == nil {\n\t\t\t\t\trc.connection = conn\n\t\t\t\t\trc.channel = ch\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttime.Sleep(5 * time.Second)\n\t}\n}\n\nfunc (rc *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tfor i := 0; i < 3; i++ {\n\t\tbody, err := json.Marshal(messageBag)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\terr = rc.channel.Publish(\n\t\t\t\"\",\n\t\t\trc.queueName,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tamqp.Publishing{\n\t\t\t\tContentType:  \"application/json\",\n\t\t\t\tBody:         body,\n\t\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\t})\n\t\tif err == nil {\n\t\t\treturn\n\t\t}\n\t\trc.Connect()\n\t}\n}\n\nfunc (rc *RabbitClient) Close() {\n\tif rc.channel != nil {\n\t\t_ = rc.channel.Close()\n\t}\n\tif rc.connection != nil {\n\t\t_ = rc.connection.Close()\n\t}\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\trc := &RabbitClient{\n\t\turl:       url,\n\t\tqueueName: queueName,\n\t}\n\trc.Connect()\n\treturn rc\n}"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Implement a thread-safe RabbitMQ producer in Go that handles connection management, queue/exchange declaration, and message publishing.\n\nStruct Description: AMQPConn represents a RabbitMQ connection with built-in connection pooling and thread safety. It manages the AMQP connection, channel, and provides message sending capability.\n\nFields:\n\nmu: [sync.Mutex] - Mutex for thread-safe operations\nep: [Endpoint] - Configuration endpoint containing AMQP settings\nconn: [*amqp.Connection] - Underlying AMQP connection\nchannel: [*amqp.Channel] - AMQP channel for message operations\nex: [bool] - Flag indicating if connection is expired\nt: [time.Time] - Timestamp of last operation\n\nMethods:\n\nSend: [Name](msg string) -> [error] - Publishes a message to RabbitMQ. Handles connection establishment, channel creation, and queue/exchange declaration if not already done. Returns error if operation fails.\n[Input Parameters]:\n- msg: string - The message to be published\n[Return Type]:\n- error - Returns nil on success, error on failure",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc (conn *AMQPConn) Send(msg string) error {\n\tconn.mu.Lock()\n\tdefer conn.mu.Unlock()\n\n\tif conn.ex {\n\t\treturn errExpired\n\t}\n\tconn.t = time.Now()\n\n\tif conn.conn == nil {\n\t\tprefix := \"amqp://\"\n\t\tif conn.ep.AMQP.SSL {\n\t\t\tprefix = \"amqps://\"\n\t\t}\n\n\t\tvar cfg amqp.Config\n\t\tcfg.Dial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(network, addr, time.Second)\n\t\t}\n\t\tc, err := amqp.DialConfig(fmt.Sprintf(\"%s%s\", prefix, conn.ep.AMQP.URI), cfg)\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tchannel, err := c.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := channel.ExchangeDeclare(\n\t\t\tconn.ep.AMQP.QueueName,\n\t\t\tconn.ep.AMQP.Type,\n\t\t\tconn.ep.AMQP.Durable,\n\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\tconn.ep.AMQP.Internal,\n\t\t\tconn.ep.AMQP.NoWait,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif conn.ep.AMQP.Type != \"topic\" {\n\t\t\tif _, err := channel.QueueDeclare(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.Durable,\n\t\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\t\tfalse,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err := channel.QueueBind(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.RouteKey,\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tconn.conn = c\n\t\tconn.channel = channel\n\t}\n\n\treturn conn.channel.Publish(\n\t\tconn.ep.AMQP.QueueName,\n\t\tconn.ep.AMQP.RouteKey,\n\t\tconn.ep.AMQP.Mandatory,\n\t\tconn.ep.AMQP.Immediate,\n\t\tamqp.Publishing{\n\t\t\tHeaders:         amqp.Table{},\n\t\t\tContentType:     \"application/json\",\n\t\t\tContentEncoding: \"\",\n\t\t\tBody:            []byte(msg),\n\t\t\tDeliveryMode:    conn.ep.AMQP.DeliveryMode,\n\t\t\tPriority:        conn.ep.AMQP.Priority,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Endpoint struct {\n\tURL        string\n\tExchange   string\n\tQueue      string\n\tRoutingKey string\n}\n\ntype AMQPConn struct {\n\tmu    sync.Mutex\n\tep    Endpoint\n\tconn  *amqp.Connection\n\tchannel *amqp.Channel\n\tex    bool\n\tt     time.Time\n}\n\nfunc (a *AMQPConn) Send(msg string) error {\n\ta.mu.Lock()\n\tdefer a.mu.Unlock()\n\n\tif a.ex || a.conn == nil || a.conn.IsClosed() {\n\t\tvar err error\n\t\ta.conn, err = amqp.Dial(a.ep.URL)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.ex = false\n\t\ta.t = time.Now()\n\t}\n\n\tif a.channel == nil || a.channel.IsClosed() {\n\t\tvar err error\n\t\ta.channel, err = a.conn.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := a.channel.ExchangeDeclare(\n\t\t\ta.ep.Exchange,\n\t\t\t\"fanout\",\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t_, err = a.channel.QueueDeclare(\n\t\t\ta.ep.Queue,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tnil,\n\t\t)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := a.channel.QueueBind(\n\t\t\ta.ep.Queue,\n\t\t\ta.ep.RoutingKey,\n\t\t\ta.ep.Exchange,\n\t\t\tfalse,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := a.channel.Publish(\n\t\ta.ep.Exchange,\n\t\ta.ep.RoutingKey,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(msg),\n\t\t},\n\t); err != nil {\n\t\treturn err\n\t}\n\n\ta.t = time.Now()\n\treturn nil\n}"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that handles OAuth-based headless authentication by establishing a connection to a server, receiving authentication instructions, and returning a JWT token upon successful authentication.\n\nFunction Description: The `ssoLogin` function establishes a WebSocket connection to a specified endpoint for headless OAuth authentication. It listens for server messages, displays authentication instructions to the user, and waits for the JWT token to be returned. The function handles connection closure and interrupts gracefully.\n\nInput: \n- `endpoint` (string): The URL endpoint of the authentication server (e.g., \"https://example.com\")\n\nOutput: \n- `string`: The JWT authentication token received from the server after successful authentication. Returns an empty string if authentication fails or is interrupted.\n\nNote: The function includes proper error handling and connection cleanup, and it displays the authentication URL to the user when received from the server.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/gravitl/netmaker/logger\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tvar (\n\t\tauthToken string\n\t\tinterrupt = make(chan os.Signal, 1)\n\t\turl, _    = url.Parse(endpoint)\n\t\tsocketURL = fmt.Sprintf(\"wss://%s/api/oauth/headless\", url.Host)\n\t)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tconn, _, err := websocket.DefaultDialer.Dial(socketURL, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"error connecting to endpoint \", socketURL, err.Error())\n\t}\n\tdefer conn.Close()\n\t_, msg, err := conn.ReadMessage()\n\tif err != nil {\n\t\tlog.Fatal(\"error reading from server: \", err.Error())\n\t}\n\tfmt.Printf(\"Please visit:\\n %s \\n to authenticate\\n\", string(msg))\n\tdone := make(chan struct{})\n\tdefer close(done)\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif msgType < 0 {\n\t\t\t\t\tdone <- struct{}{}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(err.Error(), \"normal\") {\n\t\t\t\t\tlog.Fatal(\"read error: \", err.Error())\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif msgType == websocket.CloseMessage {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif strings.Contains(string(msg), \"JWT: \") {\n\t\t\t\tauthToken = strings.TrimPrefix(string(msg), \"JWT: \")\n\t\t\t} else {\n\t\t\t\tlogger.Log(0, \"Message from server:\", string(msg))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn authToken\n\t\tcase <-interrupt:\n\t\t\terr := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlogger.Log(0, \"write close:\", err.Error())\n\t\t\t}\n\t\t\treturn authToken\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tu, err := url.Parse(endpoint)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tif u.Scheme == \"https\" {\n\t\tu.Scheme = \"wss\"\n\t} else if u.Scheme == \"http\" {\n\t\tu.Scheme = \"ws\"\n\t} else {\n\t\treturn \"\"\n\t}\n\twsURL := u.String()\n\n\tconn, _, err := websocket.DefaultDialer.Dial(wsURL, nil)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\tdefer conn.Close()\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tdone := make(chan struct{})\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tvar jwtToken string\n\tvar errOnce sync.Once\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\terrOnce.Do(func() {\n\t\t\t\t\tclose(done)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tmsgStr := string(msg)\n\t\t\tif strings.HasPrefix(msgStr, \"http://\") || strings.HasPrefix(msgStr, \"https://\") {\n\t\t\t\tfmt.Println(\"Please authenticate by visiting:\", msgStr)\n\t\t\t} else {\n\t\t\t\tjwtToken = msgStr\n\t\t\t\tclose(done)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn jwtToken\n\t\tcase <-interrupt:\n\t\t\tconn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseGoingAway, \"\"))\n\t\t\tconn.Close()\n\t\t\treturn \"\"\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that establishes multiple concurrent connections to a WebSocket server, maintains these connections, and handles incoming messages. The client should be able to gracefully handle connection errors and properly close connections when done.\n\nFunction Description: The function establishes WebSocket connections to a specified server endpoint with unique identifiers, maintains these connections in separate goroutines, and continuously reads incoming messages. Each connection includes user identification and authentication parameters in the URL query string.\n\nInput: \n- None (The function uses hardcoded values for demonstration, but could be modified to accept parameters like host, port, path, and connection count)\n\nOutput: \n- None (The function primarily logs its activities and errors to stdout)\n\nNote: The function runs indefinitely until 100,000 connections are established (for testing purposes), with each connection attempt spaced by 1 second. Each connection runs in its own goroutine and includes error handling for both connection establishment and message reading.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\ti := 0\n\tfor {\n\t\ti++\n\t\tif i == 100000 {\n\t\t\tfmt.Println(\"\u5df2\u7ecf\u4e86\u89e310000\u4e2a\u94fe\u63a5\")\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t\tgo func(id int) {\n\t\t\tu := url.URL{Scheme: \"ws\", Host: \"127.0.0.1:8182\", Path: \"/v1/push\", RawQuery: fmt.Sprintf(\"uid=%d&sign=2&time=%d\", id, time.Now().Unix())}\n\t\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"\u94fe\u63a5\u5730\u5740%s,\u5931\u8d25\u539f\u56e0%s\", u.String(), err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer c.Close()\n\t\t\tfor {\n\t\t\t\t_, _, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"ERR_ERR_ERR_ERR_ERR_ERR_read:\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\tfor i := 0; i < 100000; i++ {\n\t\tid := i\n\t\tgo func(id int) {\n\t\t\tqueryParams := url.Values{}\n\t\t\tqueryParams.Add(\"user_id\", fmt.Sprintf(\"user%d\", id))\n\t\t\tqueryParams.Add(\"auth_token\", \"secret_token\")\n\t\t\tu := url.URL{\n\t\t\t\tScheme:   \"ws\",\n\t\t\t\tHost:     \"localhost:8080\",\n\t\t\t\tPath:     \"/socket\",\n\t\t\t\tRawQuery: queryParams.Encode(),\n\t\t\t}\n\t\t\tlog.Printf(\"Connecting to %s\", u.String())\n\t\t\tconn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Dial error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer conn.Close()\n\t\t\tfor {\n\t\t\t\t_, message, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"Received: %s\", message)\n\t\t\t}\n\t\t}(id)\n\t\ttime.Sleep(time.Second)\n\t}\n\tselect {}\n}"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that connects to a server, sends multiple messages at random intervals, and handles incoming messages concurrently.\n\nFunction Description: The function establishes a WebSocket connection to a specified server, spawns a goroutine to continuously read incoming messages, and sends a random number of messages to the server with small delays between each send. The function should properly handle connection errors and ensure the connection is closed when done.\n\nInput:\n- i (int64): Seed value for random number generation\n- room (string): Identifier for the message room/context\n\nOutput: None (the function performs operations but doesn't return any value)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/rs/xid\"\n)\n\nfunc testClient(i int64, room string) {\n\tr := rand.New(rand.NewSource(i))\n\tconn, _, err := websocket.DefaultDialer.Dial(SERVER, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo func() {\n\t\tfor {\n\t\t\t_ = conn.SetReadDeadline(time.Now().Add(10 * time.Second))\n\t\t\t_, _, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tdefer conn.Close()\n\n\tops := r.Intn(100)\n\tfor i := 0; i < ops; i++ {\n\t\tm := msg(r, room)\n\t\terr = conn.WriteMessage(websocket.TextMessage, m)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"err\", err)\n\t\t}\n\t\ttime.Sleep(30 * time.Millisecond)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"log\"\n)\n\nfunc WebSocketClient(i int64, room string) {\n\tu := url.URL{\n\t\tScheme: \"ws\",\n\t\tHost:   \"localhost:8080\",\n\t\tPath:   \"/room\",\n\t}\n\tparams := u.Query()\n\tparams.Add(\"room\", room)\n\tu.RawQuery = params.Encode()\n\n\tconn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Printf(\"Dial error: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %s\\n\", message)\n\t\t}\n\t}()\n\n\trand.Seed(i)\n\tnumMessages := 5 + rand.Intn(11)\n\n\tfor j := 0; j < numMessages; j++ {\n\t\tmsg := fmt.Sprintf(\"Message %d from room %s\", j, room)\n\t\terr := conn.WriteMessage(websocket.TextMessage, []byte(msg))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Write error: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tdelay := time.Duration(100 + rand.Intn(401)) * time.Millisecond\n\t\ttime.Sleep(delay)\n\t}\n}"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Create a function that handles WebSocket connections by upgrading HTTP connections, reading incoming messages, and forwarding them to a channel for further processing.\n\nFunction Description: The function `makeUpgradeOnConnect` generates and returns an HTTP handler function that upgrades incoming HTTP connections to WebSocket connections. It reads messages from the WebSocket connection and sends them to a provided channel. The WebSocket connection is properly closed when processing is complete.\n\nInput: \n- `ch chan string`: A channel of strings used to forward incoming WebSocket messages for further processing.\n\nOutput: \n- Returns a function of type `func(http.ResponseWriter, *http.Request)` that serves as an HTTP handler for WebSocket connections.\n\nNote: The returned HTTP handler function does not explicitly return any value but handles WebSocket communication and message forwarding internally.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc makeUpgradeOnConnect(ch chan string) func(http.ResponseWriter, *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tc, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer c.Close()\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tgo func() {\n\t\t\t\tch <- string(message)\n\t\t\t}()\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc makeUpgradeOnConnect(ch chan string) func(http.ResponseWriter, *http.Request) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Upgrade failed\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\tmt, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif mt == websocket.TextMessage {\n\t\t\t\tch <- string(msg)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that handles specific command requests through a web interface. The server should process incoming commands and forward them to a command parser.\n\nFunction Description: The `cmdHandle` function is an HTTP handler that processes POST requests containing a \"cmd\" parameter. It extracts the command and passes it to a command parser. The `InitWeb` function initializes the web server, registers the handler, and starts listening on a specified URL.\n\nInput:\n- For `cmdHandle`:\n  - `w http.ResponseWriter` - Used to write the HTTP response\n  - `r *http.Request` - Contains the incoming HTTP request\n- For `InitWeb`:\n  - None (uses package-level variable `world.Web_Url` for server address)\n\nOutput:\n- For `cmdHandle`:\n  - None (writes response directly to `http.ResponseWriter`)\n- For `InitWeb`:\n  - None (starts server as a side effect, may log errors)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\tcmd := r.FormValue(\"cmd\")\n\tif cmd != \"\" {\n\t\tcm.ParseConsole(g_Cmd, (cmd))\n\t}\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/gm\", cmdHandle)\n\terr := http.ListenAndServe(world.Web_Url, nil)\n\tif err != nil {\n\t\tbase.LOG.Println(\"World Web Server : \", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package web\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"world\"\n)\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tif err := r.ParseForm(); err != nil {\n\t\thttp.Error(w, \"Error parsing form data\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tcmd := r.PostFormValue(\"cmd\")\n\tif cmd == \"\" {\n\t\thttp.Error(w, \"Missing 'cmd' parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tworld.CmdParser(cmd)\n\tw.Write([]byte(\"Command processed\"))\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/cmd\", cmdHandle)\n\tgo func() {\n\t\tif err := http.ListenAndServe(world.Web_Url, nil); err != nil {\n\t\t\tlog.Fatal(\"Failed to start web server: \", err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a WebSocket proxy struct in Go that can handle WebSocket connections by forwarding messages between a client and a backend server.\n\nStruct Description: The `WebsocketProxy` struct is a reverse proxy for WebSocket connections. It upgrades incoming HTTP connections to WebSocket, connects to a backend WebSocket server, and forwards messages bidirectionally between the client and backend.\n\nFields:\n- Director: `func(incoming *http.Request, out http.Header)` - Optional function to modify the request headers before connecting to the backend.\n- Backend: `func(*http.Request) *url.URL` - Required function that returns the backend URL to connect to.\n- Upgrader: `*websocket.Upgrader` - Optional WebSocket upgrader configuration for client connections.\n- Dialer: `*websocket.Dialer` - Optional WebSocket dialer configuration for backend connections.\n\nMethods:\n- ServeHTTP: `(rw http.ResponseWriter, req *http.Request)` -> `None` - Main handler method that implements the http.Handler interface. It upgrades the client connection, connects to the backend, and sets up bidirectional message forwarding.\n  - Input Parameters:\n    - rw: `http.ResponseWriter` - The HTTP response writer\n    - req: `*http.Request` - The HTTP request\n  - Description: Handles the WebSocket proxy logic including connection upgrading, backend dialing, and message replication between client and backend.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == nil {\n\t\tif prior, ok := req.Header[\"X-Forwarded-For\"]; ok {\n\t\t\tclientIP = strings.Join(prior, \", \") + \", \" + clientIP\n\t\t}\n\t\trequestHeader.Set(\"X-Forwarded-For\", clientIP)\n\t}\n\n\trequestHeader.Set(\"X-Forwarded-Proto\", \"http\")\n\tif req.TLS != nil {\n\t\trequestHeader.Set(\"X-Forwarded-Proto\", \"https\")\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\treplicateWebsocketConn := func(dst, src *websocket.Conn, errc chan error) {\n\t\tfor {\n\t\t\tmsgType, msg, err := src.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\t\tif e, ok := err.(*websocket.CloseError); ok {\n\t\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\terrc <- err\n\t\t\t\tdst.WriteMessage(websocket.CloseMessage, m)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = dst.WriteMessage(msgType, msg)\n\t\t\tif err != nil {\n\t\t\t\terrc <- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\tif e, ok := err.(*websocket.CloseError); !ok || e.Code == websocket.CloseAbnormalClosure {\n\t\tlog.Printf(message, err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector  func(*http.Request, http.Header)\n\tBackend   func(*http.Request) *url.URL\n\tUpgrader  *websocket.Upgrader\n\tDialer    *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tbackendURL := p.Backend(req)\n\tif backendURL == nil {\n\t\thttp.Error(rw, \"Backend URL is required\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tupgrader := p.Upgrader\n\tif upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\t\treturn true\n\t\t\t},\n\t\t}\n\t}\n\n\tclientConn, err := upgrader.Upgrade(rw, req, nil)\n\tif err != nil {\n\t\thttp.Error(rw, \"Could not upgrade client connection\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendHeaders := make(http.Header)\n\tif p.Director != nil {\n\t\tp.Director(req, backendHeaders)\n\t}\n\n\tdialer := p.Dialer\n\tif dialer == nil {\n\t\tdialer = &websocket.Dialer{\n\t\t\tProxy: http.ProxyFromEnvironment,\n\t\t}\n\t}\n\n\tctx := req.Context()\n\tbackendConn, resp, err := dialer.DialContext(ctx, backendURL.String(), backendHeaders)\n\tif err != nil {\n\t\tif resp != nil {\n\t\t\trw.WriteHeader(resp.StatusCode)\n\t\t\tio.Copy(rw, resp.Body)\n\t\t\tresp.Body.Close()\n\t\t} else {\n\t\t\thttp.Error(rw, \"Error connecting to backend\", http.StatusServiceUnavailable)\n\t\t}\n\t\tclientConn.Close()\n\t\treturn\n\t}\n\tdefer backendConn.Close()\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer backendConn.Close()\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tmessageType, message, err := clientConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := backendConn.WriteMessage(messageType, message); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer clientConn.Close()\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tmessageType, message, err := backendConn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := clientConn.WriteMessage(messageType, message); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\twg.Wait()\n}"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, reads incoming messages, and echoes them back to the client.\n\nFunction Description: The handler function manages WebSocket connections by upgrading HTTP requests, handling incoming messages, and maintaining the connection until closure. It includes error handling for connection issues and logs key events.\n\nInput:\n- w http.ResponseWriter: The HTTP response writer used to send responses\n- r *http.Request: The HTTP request containing connection details\n\nOutput: None (void function), but it performs the following actions:\n- Upgrades HTTP connection to WebSocket\n- Reads and echoes messages\n- Closes the connection when done or on error\n- Logs connection events and errors",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\tnetheader \"knative.dev/networking/pkg/http/header\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tif netheader.IsKubeletProbe(r) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\treturn\n\t}\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"Error upgrading websocket:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tlog.Println(\"Connection upgraded to WebSocket. Entering receive loop.\")\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tif websocket.IsCloseError(err, websocket.CloseAbnormalClosure) {\n\t\t\t\tlog.Println(\"Client disconnected.\")\n\t\t\t} else {\n\t\t\t\tlog.Println(\"Handler exiting on error:\", err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Successfully received: %q\", message)\n\t\tif err = conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Println(\"Failed to write message:\", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Successfully wrote: %q\", message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"Upgrade error:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tlog.Println(\"Connection established\")\n\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Read error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Received message: %s\", message)\n\n\t\tif err := conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Println(\"Write error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Sent message: %s\", message)\n\t}\n\n\tlog.Println(\"Connection closed\")\n}"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, sends a greeting message to the client, and echoes back any messages received from the client.\n\nFunction Description: The function `hello` handles WebSocket communication by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It then enters a loop where it sends a greeting message to the client and reads messages from the client, printing them to the console. The connection is properly closed when the function exits.\n\nInput: \n- `c echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails or if there is an error during message reading/writing. Otherwise, it returns nil once the connection is closed.\n\nNote: The function runs indefinitely in a loop until the WebSocket connection is closed or an error occurs.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc hello(c echo.Context) error {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\tconn, err := upgrader.Upgrade(c.Response().Writer(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tif err := conn.WriteMessage(websocket.TextMessage, []byte(\"Hello, client!\")); err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tif closeErr, ok := err.(websocket.CloseError); ok {\n\t\t\t\tlog.Println(\"Connection closed:\", closeErr)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"Received: %s\", msg)\n\t\tif err := conn.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Implement a WebSocket echo server function in Go that handles WebSocket connections, reads incoming messages, and echoes them back to the client.\n\nFunction Description: The `echo` function upgrades an HTTP connection to a WebSocket connection, continuously reads messages from the client, and echoes them back. It handles connection errors and ensures proper cleanup by closing the connection when done.\n\nInput: \n- `ctx *gin.Context`: A Gin context object containing the HTTP request and response writer needed for WebSocket upgrade.\n\nOutput: \n- None (void function), but it performs the following operations:\n  - Upgrades the HTTP connection to WebSocket\n  - Reads and echoes messages until connection is closed\n  - Handles and logs errors\n  - Closes the WebSocket connection when done",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc echo(ctx *gin.Context) {\n\tw,r := ctx.Writer, ctx.Request\n\tc, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"upgrade:\", err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\tfor {\n\t\tmt, message, err := c.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"read:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"recv:%s\", message)\n\t\terr = c.WriteMessage(mt, message)\n\t\tif err != nil {\n\t\t\tlog.Println(\"write:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *gin.Context) bool {\n\t\treturn true\n\t},\n}\n\nfunc echo(ctx *gin.Context) {\n\tconn, err := upgrader.Upgrade(ctx.Writer, ctx.Request, nil)\n\tif err != nil {\n\t\tlog.Println(\"Upgrade error:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"ReadMessage error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tif err := conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Println(\"WriteMessage error:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests on the root path (\"/\") and returns a welcome message.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. When accessed, it responds with a welcome message. The server listens on port 8080.\n\nInput: None (The HTTP server handles incoming requests automatically)\n\nOutput: None (The function runs indefinitely, serving HTTP responses to incoming requests)\n\n---\n\nNote: Since the reference code is at the package level (with `main` function) rather than a struct/class level, I've provided the function-level instruction format. The code demonstrates a complete executable program rather than a reusable struct/class component.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\tmyHandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to my website!\")\n\t}\n\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome!\")\n\t})\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a UDP client in Go that can send data to a specified server address and port using the net package's DialUDP function.\n\nStruct Description: The SocketBee struct represents a UDP client capable of sending data to a server. It embeds a bees.Bee for base functionality and includes a channel for event handling.\n\nFields:\neventChan: chan bees.Event - Channel for handling events within the bee framework.\n\nMethods:\nAction: [Name](action bees.Action) -> []bees.Placeholder - Handles the \"send\" action to transmit data to a UDP server. Takes an action object containing the target address, port, and data to send. Returns a list of placeholders (currently unused). Panics on errors during address resolution, connection establishment, or data transmission.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/muesli/beehive/bees\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\n\teventChan chan bees.Event\n}\n\nfunc (mod *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\touts := []bees.Placeholder{}\n\n\tvar data string\n\tvar addr string\n\tvar port int\n\n\taction.Options.Bind(\"address\", &addr)\n\taction.Options.Bind(\"port\", &port)\n\taction.Options.Bind(\"data\", &data)\n\n\tswitch action.Name {\n\tcase \"send\":\n\t\tsa, err := net.ResolveUDPAddr(\"udp\", addr+\":\"+strconv.Itoa(port))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, sa)\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tdefer conn.Close()\n\t\t_, err = conn.Write([]byte(data))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\tdefault:\n\t\tpanic(\"Unknown action triggered in \" + mod.Name() + \": \" + action.Name)\n\t}\n\n\treturn outs\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\t\"strconv\"\n)\n\ntype SocketBee struct {\n\t*bees.Bee\n\teventChan chan bees.Event\n}\n\nfunc (b *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\tif action.Name() != \"send\" {\n\t\treturn nil\n\t}\n\n\taddr := action.Get(\"address\").StringValue()\n\tport := action.Get(\"port\").IntegerValue()\n\tdata := action.Get(\"data\").StringValue()\n\n\tportStr := strconv.Itoa(int(port))\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(addr, portStr))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, udpAddr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(data))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn []bees.Placeholder{}\n}"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Implement a function to send a Wake-on-LAN (WoL) magic packet to a target device using UDP broadcast.\n\nFunction Description: The function `WakeUp` sends a Wake-on-LAN magic packet to a specified MAC address over UDP broadcast. It allows optional specification of a local network interface for the broadcast and handles the creation and transmission of the magic packet.\n\nInput:\n- `macAddr` (string): The MAC address of the target device to wake up, in format \"XX:XX:XX:XX:XX:XX\"\n- `broadcastIP` (string): The broadcast IP address to use (e.g., \"255.255.255.255\")\n- `bcastInterface` (string): [Optional] The network interface to use for broadcasting. If empty, system default will be used\n- `port` (int): The UDP port number to use for the WoL packet (typically 7 or 9)\n\nOutput:\n- (error): Returns nil on success, or an error if any step fails (invalid MAC, network error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc WakeUp(macAddr, broadcastIP, bcastInterface string, port int) error {\n\tvar localAddr *net.UDPAddr\n\tvar err error\n\tif bcastInterface != \"\" {\n\t\tlocalAddr, err = ipFromInterface(bcastInterface)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tbcastAddr := fmt.Sprintf(\"%s:%d\", broadcastIP, port)\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", bcastAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmp, err := New(macAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbs, err := mp.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", localAddr, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tn, err := conn.Write(bs)\n\tif err == nil && n != 102 {\n\t\terr = fmt.Errorf(\"magic packet sent was %d bytes (expected 102 bytes sent)\", n)\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc WakeUp(macAddr, broadcastIP, bcastInterface string, port int) error {\n\tparts := strings.Split(strings.TrimSpace(macAddr), \":\")\n\tif len(parts) != 6 {\n\t\treturn fmt.Errorf(\"invalid MAC address format: %s\", macAddr)\n\t}\n\tvar macBytes []byte\n\tfor i, part := range parts {\n\t\tpart = strings.ToUpper(strings.TrimSpace(part))\n\t\tif len(part) != 2 {\n\t\t\treturn fmt.Errorf(\"invalid MAC part at index %d: %s\", i, part)\n\t\t}\n\t\tb, err := strconv.ParseInt(part, 16, 8)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"invalid MAC part %s: %v\", part, err)\n\t\t}\n\t\tmacBytes = append(macBytes, byte(b))\n\t}\n\n\tpacket := make([]byte, 6+16*6)\n\tfor i := 0; i < 6; i++ {\n\t\tpacket[i] = 0xFF\n\t}\n\tfor i := 0; i < 16; i++ {\n\t\toffset := 6 + i*6\n\t\tcopy(packet[offset:offset+6], macBytes)\n\t}\n\n\tvar localAddr *net.UDPAddr\n\tif bcastInterface != \"\" {\n\t\tifi, err := net.InterfaceByName(bcastInterface)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to get interface %s: %v\", bcastInterface, err)\n\t\t}\n\t\taddrs, err := ifi.Addrs()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to get interface addresses: %v\", err)\n\t\t}\n\t\tvar ip net.IP\n\t\tfor _, a := range addrs {\n\t\t\tswitch v := a.(type) {\n\t\t\tcase *net.IPNet:\n\t\t\t\tip4 := v.IP.To4()\n\t\t\t\tif ip4 != nil {\n\t\t\t\t\tip = ip4\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\tcase *net.IPAddr:\n\t\t\t\tip4 := v.IP.To4()\n\t\t\t\tif ip4 != nil {\n\t\t\t\t\tip = ip4\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ip == nil {\n\t\t\treturn fmt.Errorf(\"no IPv4 address found on interface %s\", bcastInterface)\n\t\t}\n\t\tlocalAddr = &net.UDPAddr{IP: ip, Port: 0}\n\t}\n\n\tremoteAddr, err := net.ResolveUDPAddr(\"udp\", fmt.Sprintf(\"%s:%d\", broadcastIP, port))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid remote address: %v\", err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", localAddr, remoteAddr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dial UDP: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tif err := conn.SetBroadcast(true); err != nil {\n\t\treturn fmt.Errorf(\"failed to set broadcast option: %v\", err)\n\t}\n\n\tif _, err := conn.Write(packet); err != nil {\n\t\treturn fmt.Errorf(\"failed to send magic packet: %v\", err)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Implement a Go struct that tests the health of an NTP (Network Time Protocol) server by checking its stratum level through UDP communication.\n\nStruct Description: The NtpHealthTester struct is responsible for verifying the health of an NTP server by establishing a UDP connection, sending a query, and validating the server's response based on its stratum level. The struct includes methods for testing the server and providing a string representation of the maximum allowed stratum.\n\nFields:\nmaxStratum: int - The maximum acceptable stratum level for the NTP server to be considered healthy.\n\nMethods:\nTest: (ht *HealthTest) -> bool - Tests the health of an NTP server by sending a UDP packet and validating the response. Returns true if the server's stratum is within the acceptable range, false otherwise.\nString: () -> string - Returns a string representation of the maximum allowed stratum level.\nnewNtpHealthTester: (params map[string]interface{}, htp *HealthTestParameters) -> HealthTester - A constructor function that creates a new NtpHealthTester instance with the specified maximum stratum level.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n)\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc (t *NtpHealthTester) Test(ht *HealthTest) bool {\n\tudpAddress, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(ht.ipAddress.String(), \"123\"))\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdata := make([]byte, 48)\n\tdata[0] = 4<<3 | 3\n\n\tconn, err := net.DialUDP(\"udp\", nil, udpAddress)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdefer conn.Close()\n\n\t_, err = conn.Write(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tconn.SetDeadline(time.Now().Add(ht.timeout))\n\n\t_, err = conn.Read(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tstratum := data[1]\n\n\tif stratum == 0 || stratum > byte(t.maxStratum) {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (t *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"%d\", t.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\tmaxStratum := 3\n\tif v, ok := params[\"max_stratum\"]; ok {\n\t\tmaxStratum = typeutil.ToInt(v)\n\t}\n\treturn &NtpHealthTester{maxStratum: maxStratum}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n)\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc (ht *NtpHealthTester) Test(healthTest *HealthTest) bool {\n\taddr, err := net.ResolveUDPAddr(\"udp\", healthTest.Address)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer conn.Close()\n\n\tbuf := make([]byte, 48)\n\tbuf[0] = 0x1B\n\n\t_, err = conn.Write(buf)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif err := conn.SetReadDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\treturn false\n\t}\n\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif n < 48 {\n\t\treturn false\n\t}\n\n\tstratum := int(buf[1])\n\treturn stratum <= ht.maxStratum\n}\n\nfunc (ht *NtpHealthTester) String() string {\n\treturn strconv.Itoa(ht.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\treturn &NtpHealthTester{\n\t\tmaxStratum: htp.MaxStratum,\n\t}\n}"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Write a Go function that tests UDP communication between a client and server. The function should create a UDP server, establish a client connection, send a test message, and verify the server's response.\n\nFunction Description: The function `TestUDPTransport` tests UDP transport functionality by creating a UDP server, sending a message from a client to the server, and verifying that the server receives the correct message. It uses goroutines for asynchronous server handling and channels for communication between the server and test function.\n\nInput: \n- `t *testing.T`: A testing context provided by the Go testing framework for assertions and logging.\n\nOutput: \n- None (This is a test function, so it reports failures via the testing framework rather than returning values). \n\nNote: The function relies on an external `NewTUDPServerTransport` function (not shown in the reference) to create the server transport and a `serveOnce` helper function (also not shown) to handle the server-side receive operation.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\nfunc TestUDPTransport(t *testing.T) {\n\tserver, err := NewTUDPServerTransport(\"127.0.0.1:0\")\n\trequire.NoError(t, err)\n\tdefer server.Close()\n\n\tassert.NoError(t, server.Open())\n\tassert.True(t, server.IsOpen())\n\tassert.NotNil(t, server.Conn())\n\n\tc := make(chan []byte)\n\tdefer close(c)\n\n\tgo serveOnce(t, server, c)\n\n\tdestAddr, err := net.ResolveUDPAddr(\"udp\", server.Addr().String())\n\trequire.NoError(t, err)\n\n\tconnUDP, err := net.DialUDP(destAddr.Network(), nil, destAddr)\n\trequire.NoError(t, err)\n\tdefer connUDP.Close()\n\n\tn, err := connUDP.Write([]byte(\"test\"))\n\tassert.NoError(t, err)\n\tassert.Equal(t, 4, n)\n\n\tselect {\n\tcase data := <-c:\n\t\tassert.Equal(t, \"test\", string(data))\n\tcase <-time.After(time.Second * 1):\n\t\tt.Error(\"Server did not respond in time\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package mytest\n\nimport (\n\t\"net\"\n\t\"testing\"\n)\n\nfunc TestUDPTransport(t *testing.T) {\n\tserver, addr, err := NewTUDPServerTransport()\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to create server: %v\", err)\n\t}\n\tdefer server.Close()\n\n\treceived := make(chan string)\n\tgo serveOnce(server, received)\n\n\tclientConn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to connect to server: %v\", err)\n\t}\n\tdefer clientConn.Close()\n\n\ttestMessage := \"Test message from client\"\n\t_, err = clientConn.Write([]byte(testMessage))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to send message: %v\", err)\n\t}\n\n\treceivedMsg := <-received\n\tif receivedMsg != testMessage {\n\t\tt.Errorf(\"Message mismatch: expected %q, got %q\", testMessage, receivedMsg)\n\t}\n}"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: The task involves creating a DNS bootstrap resolver that can query DNS servers to resolve domain names to IP addresses using UDP protocol. The resolver should handle concurrent operations, retry failed queries, and manage connection lifecycle properly.\n\nStruct Description: The Bootstrap struct represents a DNS bootstrap resolver that maintains state for DNS queries, including target domain, server address, and query status. It handles concurrent resolution requests and manages connection retries.\n\nFields:\nfqdn: [string] - The fully qualified domain name to resolve\nport: [uint16] - The port number of the DNS server\nbootstrap: [*net.UDPAddr] - The UDP address of the DNS bootstrap server\nqt: [uint16] - The DNS query type (e.g., A or AAAA records)\nlogger: [*zap.Logger] - Logger for debugging and error reporting\nupdating: [atomic.Bool] - Atomic flag indicating if an update is in progress\nnextUpdate: [time.Time] - Timestamp for the next scheduled update\nreadyNotify: [chan struct{}] - Channel to notify when resolution is complete\nm: [sync.Mutex] - Mutex for protecting shared state\nready: [bool] - Flag indicating if resolution is complete\naddrStr: [string] - The resolved address string\n\nMethods:\nresolve: [Name](ctx context.Context, qt uint16) -> (netip.Addr, uint32, error) - Resolves the configured domain name to an IP address using the specified query type. Handles UDP communication with retries and timeout management. Returns the resolved address, its TTL, or an error.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/netip\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/IrineSistiana/mosdns/v5/pkg/dnsutils\"\n\t\"github.com/miekg/dns\"\n\t\"go.uber.org/zap\"\n)\n\ntype Bootstrap struct {\n\tfqdn      string\n\tport      uint16\n\tbootstrap *net.UDPAddr\n\tqt        uint16\n\tlogger    *zap.Logger\n\n\tupdating   atomic.Bool\n\tnextUpdate time.Time\n\n\treadyNotify chan struct{}\n\tm           sync.Mutex\n\tready       bool\n\taddrStr     string\n}\n\nfunc (sp *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tconst edns0UdpSize = 1200\n\n\tq := new(dns.Msg)\n\tq.SetQuestion(sp.fqdn, qt)\n\tq.SetEdns0(edns0UdpSize, false)\n\n\tc, err := net.DialUDP(\"udp\", nil, sp.bootstrap)\n\tif err != nil {\n\t\treturn netip.Addr{}, 0, err\n\t}\n\tdefer c.Close()\n\n\twriteErrC := make(chan error, 1)\n\ttype res struct {\n\t\tresp *dns.Msg\n\t\terr  error\n\t}\n\treadResC := make(chan res, 1)\n\n\tcancelWrite := make(chan struct{})\n\tdefer close(cancelWrite)\n\tgo func() {\n\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\twriteErrC <- err\n\t\t\treturn\n\t\t}\n\n\t\tretryTicker := time.NewTicker(time.Second)\n\t\tdefer retryTicker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-cancelWrite:\n\t\t\t\treturn\n\t\t\tcase <-retryTicker.C:\n\t\t\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\t\t\twriteErrC <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tm, _, err := dnsutils.ReadMsgFromUDP(c, edns0UdpSize)\n\t\treadResC <- res{resp: m, err: err}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn netip.Addr{}, 0, context.Cause(ctx)\n\tcase err := <-writeErrC:\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to write query, %w\", err)\n\tcase r := <-readResC:\n\t\tresp := r.resp\n\t\terr := r.err\n\t\tif err != nil {\n\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to read resp, %w\", err)\n\t\t}\n\n\t\tfor _, v := range resp.Answer {\n\t\t\tvar ip net.IP\n\t\t\tvar ttl uint32\n\t\t\tswitch rr := v.(type) {\n\t\t\tcase *dns.A:\n\t\t\t\tip = rr.A\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tcase *dns.AAAA:\n\t\t\t\tip = rr.AAAA\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\taddr, ok := netip.AddrFromSlice(ip)\n\t\t\tif ok {\n\t\t\t\treturn addr, ttl, nil\n\t\t\t}\n\t\t}\n\n\t\treturn netip.Addr{}, 0, errNoAddrInResp\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net\"\n\t\"net/netip\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"go.uber.org/zap\"\n)\n\ntype Bootstrap struct {\n\tfqdn       string\n\tport       uint16\n\tbootstrap  *net.UDPAddr\n\tqt         uint16\n\tlogger     *zap.Logger\n\tupdating   atomic.Bool\n\tnextUpdate time.Time\n\treadyNotify chan struct{}\n\tm          sync.Mutex\n\tready      bool\n\taddrStr    string\n}\n\nfunc (b *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tb.m.Lock()\n\tif b.ready {\n\t\taddr, _ := netip.ParseAddr(b.addrStr)\n\t\tb.m.Unlock()\n\t\treturn addr, 0, nil\n\t}\n\tb.m.Unlock()\n\n\tquery, id, err := buildQuery(b.fqdn, qt)\n\tif err != nil {\n\t\tb.logger.Error(\"failed to build DNS query\", zap.Error(err))\n\t\treturn netip.Addr{}, 0, err\n\t}\n\n\tserverAddr := b.bootstrap\n\n\tconst maxRetries = 3\n\tfor retry := 0; retry <= maxRetries; retry++ {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn netip.Addr{}, 0, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, serverAddr)\n\t\tif err != nil {\n\t\t\tb.logger.Error(\"failed to dial UDP\", zap.Error(err))\n\t\t\tif retry == maxRetries {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"dial udp: %w\", err)\n\t\t\t}\n\t\t\ttime.Sleep(time.Second << uint(retry))\n\t\t\tcontinue\n\t\t}\n\t\tdefer conn.Close()\n\n\t\tconn.SetWriteDeadline(time.Now().Add(5 * time.Second))\n\t\tconn.SetReadDeadline(time.Now().Add(5 * time.Second))\n\n\t\t_, err = conn.Write(query)\n\t\tif err != nil {\n\t\t\tb.logger.Error(\"failed to write DNS query\", zap.Error(err))\n\t\t\tif retry == maxRetries {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"write: %w\", err)\n\t\t\t}\n\t\t\ttime.Sleep(time.Second << uint(retry))\n\t\t\tcontinue\n\t\t}\n\n\t\tbuf := make([]byte, 512)\n\t\tn, _, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tb.logger.Error(\"failed to read DNS response\", zap.Error(err))\n\t\t\tif retry == maxRetries {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"read: %w\", err)\n\t\t\t}\n\t\t\ttime.Sleep(time.Second << uint(retry))\n\t\t\tcontinue\n\t\t}\n\n\t\taddr, ttl, err := parseDNSResponse(buf[:n], qt, id)\n\t\tif err != nil {\n\t\t\tb.logger.Error(\"failed to parse DNS response\", zap.Error(err))\n\t\t\tif retry == maxRetries {\n\t\t\t\treturn netip.Addr{}, 0, err\n\t\t\t}\n\t\t\ttime.Sleep(time.Second << uint(retry))\n\t\t\tcontinue\n\t\t}\n\n\t\tb.m.Lock()\n\t\tb.addrStr = addr.String()\n\t\tb.ready = true\n\t\tclose(b.readyNotify)\n\t\tb.m.Unlock()\n\n\t\treturn addr, ttl, nil\n\t}\n\n\treturn netip.Addr{}, 0, fmt.Errorf(\"exceeded max retries\")\n}\n\nfunc buildQuery(fqdn string, qt uint16) ([]byte, uint16, error) {\n\tid := uint16(rand.Uint32() & 0xFFFF)\n\tmsg := make([]byte, 12)\n\tbinary.BigEndian.PutUint16(msg[0:2], id)\n\tbinary.BigEndian.PutUint16(msg[2:4], 0x0100) // Standard query, RD bit\n\tbinary.BigEndian.PutUint16(msg[4:6], 1)      // QDCOUNT=1\n\n\toffset := 12\n\tlabels := strings.Split(fqdn, \".\")\n\tfor _, label := range labels {\n\t\tlb := []byte(label)\n\t\tif len(lb) > 63 {\n\t\t\treturn nil, 0, fmt.Errorf(\"label too long: %s\", label)\n\t\t}\n\t\tmsg = append(msg, byte(len(lb)))\n\t\tmsg = append(msg, lb...)\n\t\toffset += 1 + len(lb)\n\t}\n\tmsg = append(msg, 0x00)\n\toffset += 1\n\n\tmsg = append(msg, 0x00, byte(qt>>8), byte(qt&0xFF))\n\toffset += 2\n\tmsg = append(msg, 0x00, 0x01)\n\toffset += 2\n\n\treturn msg, id, nil\n}\n\nfunc parseDNSResponse(response []byte, qt uint16, id uint16) (netip.Addr, uint32, error) {\n\tif len(response) < 12 {\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"response too short\")\n\t}\n\tif binary.BigEndian.Uint16(response[0:2]) != id {\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"transaction ID mismatch\")\n\t}\n\n\tflags := binary.BigEndian.Uint16(response[2:4])\n\tif (flags & 0x8000) == 0 {\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"not a response\")\n\t}\n\n\tqdcount := binary.BigEndian.Uint16(response[4:6])\n\tif qdcount != 1 {\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"qdcount not 1\")\n\t}\n\n\toffset := 12\n\tif _, err := parseDomainName(response, offset); err != nil {\n\t\treturn netip.Addr{}, 0, err\n\t}\n\toffset += len(response[offset:]) - (len(response[offset:]) - len(response[offset:]))\n\n\tancount := binary.BigEndian.Uint16(response[6:8])\n\tif ancount == 0 {\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"no answers in response\")\n\t}\n\n\tfor i := 0; i < int(ancount); i++ {\n\t\tnameOffset, err := parseDomainName(response, offset)\n\t\tif err != nil {\n\t\t\treturn netip.Addr{}, 0, err\n\t\t}\n\t\toffset += nameOffset\n\n\t\trrtype := binary.BigEndian.Uint16(response[offset : offset+2])\n\t\toffset += 2\n\t\trrclass := binary.BigEndian.Uint16(response[offset : offset+2])\n\t\toffset += 2\n\t\tttl := binary.BigEndian.Uint32(response[offset : offset+4])\n\t\toffset += 4\n\t\trdlength := binary.BigEndian.Uint16(response[offset : offset+2])\n\t\toffset += 2\n\t\trdata := response[offset : offset+int(rdlength)]\n\t\toffset += int(rdlength)\n\n\t\tif rrtype != qt {\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch qt {\n\t\tcase 1:\n\t\t\tif len(rdata) < 4 {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"A record too short\")\n\t\t\t}\n\t\t\tip := net.IP(rdata).To4()\n\t\t\tif ip == nil {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"invalid A record\")\n\t\t\t}\n\t\t\taddr, _ := netip.ParseAddr(ip.String())\n\t\t\treturn addr, ttl, nil\n\t\tcase 28:\n\t\t\tif len(rdata) < 16 {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"AAAA record too short\")\n\t\t\t}\n\t\t\tip := net.IP(rdata).To16()\n\t\t\tif ip == nil {\n\t\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"invalid AAAA record\")\n\t\t\t}\n\t\t\taddr, _ := netip.ParseAddr(ip.String())\n\t\t\treturn addr, ttl, nil\n\t\tdefault:\n\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"unsupported record type: %d\", qt)\n\t\t}\n\t}\n\n\treturn netip.Addr{}, 0, fmt.Errorf(\"no matching answer record\")\n}\n\nfunc parseDomainName(data []byte, offset int) (int, error) {\n\tstartOffset := offset\n\tfor {\n\t\tif offset >= len(data) {\n\t\t\treturn 0, fmt.Errorf(\"offset exceeds data length\")\n\t\t}\n\t\tlabelLen := int(data[offset])\n\t\toffset++\n\t\tif labelLen == 0 {\n\t\t\tbreak\n\t\t}\n\t\tif labelLen&0xC0 == 0xC0 {\n\t\t\tptr := int(binary.BigEndian.Uint16(data[offset-1:offset+1])) & 0x3FFF\n\t\t\tnextOffset, err := parseDomainName(data, ptr)\n\t\t\tif err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\treturn nextOffset, nil\n\t\t}\n\t\tif offset+labelLen > len(data) {\n\t\t\treturn 0, fmt.Errorf(\"label length exceeds data\")\n\t\t}\n\t\toffset += labelLen\n\t}\n\treturn offset - startOffset, nil\n}"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a function that sends a predefined stop marker to a destination address over UDP protocol.\n\nFunction Description: The function `sendStopMarker` establishes a UDP connection between a source address and a destination address, then sends a fixed byte sequence (stop marker) to indicate a stopping condition. It handles basic error logging if the connection fails.\n\nInput: \n- `src` [string]: The source IP address or hostname (without port)\n- `dst` [string]: The destination IP address or hostname (without port)\n\nOutput: None (void function). The function writes the stop marker to the UDP connection but doesn't return any value. Errors are logged if they occur.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n)\n\nvar stopMarker = []byte{2, 2, 2, 2, 2, 2, 2, 2}\n\nfunc sendStopMarker(src, dst string) {\n\tl, _ := net.ResolveUDPAddr(\"udp\", src+\":2222\")\n\tr, _ := net.ResolveUDPAddr(\"udp\", dst+\":2222\")\n\tconn, err := net.DialUDP(\"udp\", l, r)\n\tif err != nil {\n\t\tlog.Printf(\"fail to send stopmarker: %s\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tconn.Write(stopMarker)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n)\n\nfunc sendStopMarker(src, dst string) {\n\tudpDst, err := net.ResolveUDPAddr(\"udp\", dst+\":8080\")\n\tif err != nil {\n\t\tlog.Printf(\"Error resolving destination address: %v\", err)\n\t\treturn\n\t}\n\tudpSrc, err := net.ResolveUDPAddr(\"udp\", src+\":0\")\n\tif err != nil {\n\t\tlog.Printf(\"Error resolving source address: %v\", err)\n\t\treturn\n\t}\n\tconn, err := net.DialUDP(\"udp\", udpSrc, udpDst)\n\tif err != nil {\n\t\tlog.Printf(\"Error dialing UDP: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tstopMarker := []byte(\"STOP_MARKER\")\n\t_, err = conn.Write(stopMarker)\n\tif err != nil {\n\t\tlog.Printf(\"Error writing to UDP connection: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that serves a health check endpoint and starts listening on a specified host and port.\n\nFunction Description: The function `startHTTPServer` initializes and starts an HTTP server with a single `/healthz` endpoint that returns a 200 OK status and \"ok\" response. The server listens on the IP address and port specified by the input parameters.\n\nInput: \n- `argHealthzIP` (string pointer): The IP address on which the server should listen.\n- `argHealthzPort` (int pointer): The port number on which the server should listen.\n\nOutput: \n- None (the function runs indefinitely or until an error occurs, in which case it logs the error and exits).",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc startHTTPServer() {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(200)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\n\tklog.Info(\"Starting eventer http service\")\n\tklog.Fatal(http.ListenAndServe(net.JoinHostPort(*argHealthzIP, strconv.Itoa(int(*argHealthzPort))), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc startHTTPServer(argHealthzIP *string, argHealthzPort *int) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\n\taddress := fmt.Sprintf(\"%s:%d\", *argHealthzIP, *argHealthzPort)\n\tif err := http.ListenAndServe(address, nil); err != nil {\n\t\tlog.Fatalf(\"Failed to start HTTP server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Implement a UDP-based trap listener for SNMP (Simple Network Management Protocol) messages, capable of receiving and processing traps/informs, with support for SNMPv3 security features and proper resource cleanup.\n\nStruct Description: TrapListener is a struct that manages a UDP listener for SNMP traps, handling incoming messages, security validation, and response generation.\n\nFields:\n- done: chan bool - Channel to signal completion of listener shutdown\n- listening: chan bool - Channel to signal when listener is active\n- Mutex: sync.Mutex - Mutex for thread-safe operations\n- Params: *GoSNMP - Configuration parameters for SNMP handling\n- OnNewTrap: TrapHandlerFunc - Callback function for new trap processing\n- CloseTimeout: time.Duration - Timeout for graceful shutdown\n- conn: *net.UDPConn - UDP connection object\n- proto: string - Protocol type (typically \"udp\")\n- usmStatsUnknownEngineIDsCount: uint32 - Counter for unknown engine IDs (SNMPv3)\n- finish: int32 - Atomic flag for shutdown state\n\nMethods:\n- NewTrapListener() -> *TrapListener - Creates and initializes a new TrapListener instance\n- Close() - Gracefully shuts down the listener and cleans up resources\n- SendUDP(packet *SnmpPacket, addr *net.UDPAddr) -> error - Sends an SNMP packet via UDP\n- listenUDP(addr string) -> error - Main listening loop for incoming traps\n- reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) -> error - Handles SNMPv3 engine ID mismatch reporting",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\ntype TrapListener struct {\n\tdone      chan bool\n\tlistening chan bool\n\tsync.Mutex\n\n\tParams *GoSNMP\n\n\tOnNewTrap TrapHandlerFunc\n\n\tCloseTimeout time.Duration\n\n\tconn  *net.UDPConn\n\tproto string\n\n\tusmStatsUnknownEngineIDsCount uint32\n\n\tfinish int32\n}\n\nfunc NewTrapListener() *TrapListener {\n\ttl := &TrapListener{\n\t\tfinish:       0,\n\t\tdone:         make(chan bool),\n\t\tlistening:    make(chan bool, 1),\n\t\tCloseTimeout: defaultCloseTimeout,\n\t}\n\n\treturn tl\n}\n\nfunc (t *TrapListener) Close() {\n\tif atomic.CompareAndSwapInt32(&t.finish, 0, 1) {\n\t\tt.Lock()\n\t\tdefer t.Unlock()\n\n\t\tif t.conn == nil {\n\t\t\treturn\n\t\t}\n\n\t\tif err := t.conn.Close(); err != nil {\n\t\t\tt.Params.Logger.Printf(\"failed to Close() the TrapListener socket: %s\", err)\n\t\t}\n\n\t\tselect {\n\t\tcase <-t.done:\n\t\tcase <-time.After(t.CloseTimeout):\n\t\t\tt.Params.Logger.Printf(\"timeout while awaiting done signal on TrapListener Close()\")\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) SendUDP(packet *SnmpPacket, addr *net.UDPAddr) error {\n\tob, err := packet.marshalMsg()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error marshaling SnmpPacket: %w\", err)\n\t}\n\n\tcount, err := t.conn.WriteTo(ob, addr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error sending SnmpPacket: %w\", err)\n\t}\n\n\tif count != len(ob) {\n\t\tt.Params.Logger.Printf(\"Failed to send all bytes of SnmpPacket!\\n\")\n\t}\n\treturn nil\n}\n\nfunc (t *TrapListener) listenUDP(addr string) error {\n\tudpAddr, err := net.ResolveUDPAddr(t.proto, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tt.conn, err = net.ListenUDP(udp, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer t.conn.Close()\n\n\tt.listening <- true\n\n\tfor {\n\t\tswitch {\n\t\tcase atomic.LoadInt32(&t.finish) == 1:\n\t\t\tt.done <- true\n\t\t\treturn nil\n\n\t\tdefault:\n\t\t\tvar buf [4096]byte\n\t\t\trlen, remote, err := t.conn.ReadFromUDP(buf[:])\n\t\t\tif err != nil {\n\t\t\t\tif atomic.LoadInt32(&t.finish) == 1 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tt.Params.Logger.Printf(\"TrapListener: error in read %s\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tmsg := buf[:rlen]\n\t\t\ttrap, err := t.Params.UnmarshalTrap(msg, false)\n\t\t\tif err != nil {\n\t\t\t\tt.Params.Logger.Printf(\"TrapListener: error in UnmarshalTrap %s\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif trap.Version == Version3 && trap.SecurityModel == UserSecurityModel && t.Params.SecurityModel == UserSecurityModel {\n\t\t\t\tsecurityParams, ok := t.Params.SecurityParameters.(*UsmSecurityParameters)\n\t\t\t\tif !ok {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: Invalid SecurityParameters types\")\n\t\t\t\t}\n\t\t\t\tpacketSecurityParams, ok := trap.SecurityParameters.(*UsmSecurityParameters)\n\t\t\t\tif !ok {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: Invalid SecurityParameters types\")\n\t\t\t\t}\n\t\t\t\tsnmpEngineID := securityParams.AuthoritativeEngineID\n\t\t\t\tmsgAuthoritativeEngineID := packetSecurityParams.AuthoritativeEngineID\n\t\t\t\tif msgAuthoritativeEngineID != snmpEngineID {\n\t\t\t\t\tif len(msgAuthoritativeEngineID) < 5 || len(msgAuthoritativeEngineID) > 32 {\n\t\t\t\t\t\tatomic.AddUint32(&t.usmStatsUnknownEngineIDsCount, 1)\n\t\t\t\t\t\terr := t.reportAuthoritativeEngineID(trap, snmpEngineID, remote)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: %s\\n\", err)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.OnNewTrap(trap, remote)\n\n\t\t\tif trap.PDUType == InformRequest {\n\t\t\t\ttrap.PDUType = GetResponse\n\t\t\t\ttrap.Error = NoError\n\t\t\t\ttrap.ErrorIndex = 0\n\t\t\t\terr := t.SendUDP(trap, remote)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: %s\\n\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) error {\n\tnewSecurityParams, ok := trap.SecurityParameters.Copy().(*UsmSecurityParameters)\n\tif !ok {\n\t\treturn errors.New(\"unable to cast SecurityParams to UsmSecurityParameters\")\n\t}\n\tnewSecurityParams.AuthoritativeEngineID = snmpEngineID\n\treportPacket := trap\n\treportPacket.PDUType = Report\n\treportPacket.MsgFlags &= AuthPriv\n\treportPacket.SecurityParameters = newSecurityParams\n\treportPacket.Variables = []SnmpPDU{\n\t\t{\n\t\t\tName:  usmStatsUnknownEngineIDs,\n\t\t\tValue: int(atomic.LoadUint32(&t.usmStatsUnknownEngineIDsCount)),\n\t\t\tType:  Integer,\n\t\t},\n\t}\n\treturn t.SendUDP(reportPacket, addr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"encoding/asn1\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\ntype TrapListener struct {\n\tdone                    chan bool\n\tlistening               chan bool\n\tMutex                   sync.Mutex\n\tParams                  *GoSNMP\n\tOnNewTrap               TrapHandlerFunc\n\tCloseTimeout            time.Duration\n\tconn                    *net.UDPConn\n\tproto                   string\n\tusmStatsUnknownEngineIDsCount uint32\n\tfinish                  int32\n}\n\ntype GoSNMP struct {\n\tSecurityModel        int\n\tSecurityName         string\n\tAuthPassword         string\n\tPrivPassword         string\n\tEngineID             string\n\tMaxMessageSize       int\n\tMsgFlags             int\n\tSecurityLevel        int\n\tContextEngineID      string\n\tContextName          string\n}\n\ntype SnmpPacket struct {\n\tVersion         int\n\tCommunity       string\n\tSecurityModel   int\n\tSecurityName    string\n\tSecurityLevel   int\n\tAuthenticator   []byte\n\tPrivParameters  []byte\n\tMsgFlags        int\n\tMsgID           int\n\tMsgMaxSize      int\n\tEngineID        string\n\tUserName        string\n\tAuthKey         []byte\n\tPrivKey         []byte\n\tPDU             PDU\n}\n\ntype PDU struct {\n\tType            int\n\tIdentifier      int\n\tErrorCode       int\n\tErrorStatus     int\n\tErrorIndex      int\n\tVariableBindings []VariableBinding\n}\n\ntype VariableBinding struct {\n\tName  string\n\tType  int\n\tValue interface{}\n}\n\ntype TrapHandlerFunc func(packet *SnmpPacket, addr *net.UDPAddr) error\n\nfunc NewTrapListener() *TrapListener {\n\treturn &TrapListener{\n\t\tdone:          make(chan bool),\n\t\tlistening:     make(chan bool),\n\t\tParams:        &GoSNMP{},\n\t\tCloseTimeout:  5 * time.Second,\n\t\tproto:         \"udp\",\n\t\tfinish:        0,\n\t}\n}\n\nfunc (t *TrapListener) Close() {\n\tif !atomic.CompareAndSwapInt32(&t.finish, 0, 1) {\n\t\treturn\n\t}\n\tt.conn.Close()\n\tclose(t.done)\n\tselect {\n\tcase <-t.listening:\n\tcase <-time.After(t.CloseTimeout):\n\t}\n}\n\nfunc (t *TrapListener) SendUDP(packet *SnmpPacket, addr *net.UDPAddr) error {\n\tdata, err := asn1.Marshal(packet)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = t.conn.WriteToUDP(data, addr)\n\treturn err\n}\n\nfunc (t *TrapListener) listenUDP(addr string) error {\n\tudpAddr, err := net.ResolveUDPAddr(t.proto, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tt.conn, err = net.ListenUDP(t.proto, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tclose(t.listening)\n\tdefer t.conn.Close()\n\t\n\tbuffer := make([]byte, t.Params.MaxMessageSize)\n\tfor {\n\t\tn, remoteAddr, err := t.conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tif atomic.LoadInt32(&t.finish) == 1 {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tpacket := &SnmpPacket{}\n\t\trest, err := asn1.Unmarshal(buffer[:n], packet)\n\t\tif err != nil || len(rest) > 0 {\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tif packet.Version == 3 && packet.SecurityModel == 3 {\n\t\t\tif packet.EngineID != t.Params.EngineID {\n\t\t\t\tatomic.AddUint32(&t.usmStatsUnknownEngineIDsCount, 1)\n\t\t\t\tt.reportAuthoritativeEngineID(packet, t.Params.EngineID, remoteAddr)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t\n\t\t\t// Authentication and privacy checks\n\t\t\tif packet.MsgFlags&0x01 != 0 {\n\t\t\t\t// Authentication required\n\t\t\t\tif !validateAuth(packet, t.Params.AuthPassword, t.Params.SecurityName) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif packet.MsgFlags&0x02 != 0 {\n\t\t\t\t// Privacy required\n\t\t\t\tif !validatePriv(packet, t.Params.PrivPassword, t.Params.SecurityName) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif t.OnNewTrap != nil {\n\t\t\tt.OnNewTrap(packet, remoteAddr)\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) error {\n\tresponse := &SnmpPacket{\n\t\tVersion:     3,\n\t\tSecurityModel: 3,\n\t\tEngineID:    snmpEngineID,\n\t\tPDU: PDU{\n\t\t\tType: 0xa7, // Report PDU\n\t\t\tVariableBindings: []VariableBinding{\n\t\t\t\t{\n\t\t\t\t\tName:  \"1.3.6.1.6.3.15.1.4.1.0\",\n\t\t\t\t\tType:  4,\n\t\t\t\t\tValue: snmpEngineID,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn t.SendUDP(response, addr)\n}\n\nfunc validateAuth(packet *SnmpPacket, authPass, userName string) bool {\n\t// Implement authentication validation logic\n\t// This is a simplified placeholder\n\treturn true\n}\n\nfunc validatePriv(packet *SnmpPacket, privPass, userName string) bool {\n\t// Implement privacy validation logic\n\t// This is a simplified placeholder\n\treturn true\n}"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, processes incoming messages using ROT13 cipher, and sends the transformed messages back to the client.\n\nFunction Description: The function initializes a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it applies the ROT13 cipher transformation and sends the result back to the originating client. The server handles network errors and cleans up resources properly on exit.\n\nInput:\n- port: int - The UDP port number to listen on (passed as a pointer in the original code)\n\nOutput: None (the function runs indefinitely until terminated or an unrecoverable error occurs)\n\nNote: The function uses external packages for logging (github.com/enfein/mieru/v3/pkg/log) and ROT13 transformation (github.com/enfein/mieru/v3/pkg/testtool). The main processing loop includes error handling for network operations and message processing.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n)\nfunc main() {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.Itoa(*port))\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ResolveUDPAddr() failed: %v\", err)\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ListenUDP() failed: %v\", err)\n\t}\n\tlog.Infof(\"UDP server is initialized, listening to %s\", addr.String())\n\tdefer conn.Close()\n\tbuf := make([]byte, 1500)\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Read() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif n == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tout, err := testtool.TestHelperRot13(buf[:n])\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"rot13() failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tif _, err = conn.WriteToUDP(out, addr); err != nil {\n\t\t\tlog.Errorf(\"Write() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc StartUDPServer(port *int) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", fmt.Sprintf(\"0.0.0.0:%d\", *port))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tbuf := make([]byte, 65535)\n\tfor {\n\t\tn, remoteAddr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t\tcontinue\n\t\t}\n\t\tdata := buf[:n]\n\t\ttransformed := testtool.ROT13(data)\n\t\tif _, err := conn.WriteToUDP(transformed, remoteAddr); err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a UDP server in Go that listens for incoming messages on a specified port and prints received messages along with the sender's address.\n\nFunction Description: The function sets up a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it trims whitespace, prints the message content and the sender's address, and continues listening for new messages.\n\nInput: None (The port and IP address are hardcoded in the function)\n\nOutput: None (The function prints output to stdout but doesn't return any values)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\nfunc main() {\n\tconn, err := net.ListenUDP(\"udp\", &net.UDPAddr{\n\t\tPort: 3000,\n\t\tIP:   net.ParseIP(\"0.0.0.0\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer conn.Close()\n\tfmt.Printf(\"server listening %s\\n\", conn.LocalAddr().String())\n\n\tfor {\n\t\tmessage := make([]byte, 20)\n\t\trlen, remote, err := conn.ReadFromUDP(message[:])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tdata := strings.TrimSpace(string(message[:rlen]))\n\t\tfmt.Printf(\"received: %s from %s\\n\", data, remote)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n\t\"log\"\n)\n\nfunc main() {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":8080\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tfor {\n\t\tbuf := make([]byte, 1024)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tmsg := strings.TrimSpace(string(buf[:n]))\n\t\tfmt.Printf(\"Received: %s from %s\\n\", msg, remoteAddr)\n\t}\n}"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, receives messages from clients, and echoes them back to the sender.\n\nFunction Description: The function sets up a UDP server that binds to a given port, continuously listens for incoming messages, and responds by sending the received message back to the client. It handles network errors gracefully and ensures resources are properly cleaned up.\n\nInput: \n- port [string] - The port number on which the UDP server should listen (e.g., \":10002\")\n\nOutput: \n- None (The function runs indefinitely until interrupted)\n- Error messages are printed to stdout if any occur during setup or operation\n\nNote: The function does not return any values but prints status and error messages to stdout. It runs in an infinite loop to handle continuous incoming UDP messages.\n\nThe function performs the following key operations:\n1. Resolves the UDP address using the provided port\n2. Creates and binds a UDP listener\n3. Sets up deferred cleanup for the connection\n4. Enters a loop to read incoming messages and echo them back\n5. Handles and reports any network errors that occur",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc main() {\n\tserverType := strings.ToLower(os.Getenv(\"serverType\"))\n\n\tif serverType == \"udp\" {\n\t\tServerAddr, err := net.ResolveUDPAddr(\"udp\", \":10002\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Started UDP server on port 10002\")\n\n\t\tServerConn, err := net.ListenUDP(\"udp\", ServerAddr)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tdefer ServerConn.Close()\n\n\t\tbuf := make([]byte, 1024)\n\n\t\tfor {\n\t\t\tn, addr, err := ServerConn.ReadFromUDP(buf)\n\t\t\tfmt.Printf(\"received: %s from: %s\\n\", string(buf[0:n]), addr)\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"error: \", err)\n\t\t\t}\n\n\t\t\tServerConn.WriteTo(buf[0:n], addr)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n)\n\nfunc startUDPEchoServer(port string) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", port)\n\tif err != nil {\n\t\tlog.Println(\"ResolveUDPAddr error:\", err)\n\t\treturn\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Println(\"ListenUDP error:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tlog.Printf(\"UDP server started on %s\\n\", addr)\n\n\tfor {\n\t\tbuf := make([]byte, 1024)\n\t\tn, remoteAddr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"ReadFromUDP error: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\t_, err2 := conn.WriteToUDP(buf[:n], remoteAddr)\n\t\tif err2 != nil {\n\t\t\tlog.Printf(\"WriteToUDP error: %v\\n\", err2)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tstartUDPEchoServer(\":10002\")\n}"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a WebSocket proxy struct in Go that can handle bidirectional communication between a client and a backend server, including connection upgrading, message replication, and error handling.\n\nStruct Description: The WebsocketProxy struct acts as a reverse proxy for WebSocket connections, forwarding messages between clients and backend servers while handling connection upgrades and error scenarios.\n\nFields:\n\nDirector: func(*http.Request, http.Header) - A function that can modify the outgoing request headers before connecting to the backend.\nBackend: func(*http.Request) *url.URL - A function that returns the backend URL to connect to.\nUpgrader: *websocket.Upgrader - Configures the WebSocket connection upgrade from HTTP.\nDialer: *websocket.Dialer - Configures how to dial the backend WebSocket connection.\n\nMethods:\n\nServeHTTP: (http.ResponseWriter, *http.Request) -> None - The main handler method that:\n  1. Determines the backend URL\n  2. Establishes connection to backend\n  3. Upgrades client connection\n  4. Sets up bidirectional message replication\n  5. Handles ping/pong messages\n  6. Manages connection errors and closures\n\nreplicateWebsocketConn: (*websocket.Conn, *websocket.Conn, chan error) -> None - A helper method that:\n  1. Continuously reads messages from source connection\n  2. Forwards them to destination connection\n  3. Handles connection errors and closure messages\n  4. Reports errors through the provided channel",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/samber/lo\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tconnPub.SetPingHandler(func(appData string) error {\n\t\terr := connBackend.WriteControl(websocket.PingMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\terr = connPub.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif errors.Is(err, websocket.ErrCloseSent) {\n\t\t\treturn nil\n\t\t} else if e, ok := lo.ErrorsAs[net.Error](err); ok && e.Timeout() {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t})\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\n\tvar closeError *websocket.CloseError\n\tif ok := errors.As(err, &closeError); !ok || (closeError != nil && closeError.Code == websocket.CloseAbnormalClosure) {\n\t\tlog.Printf(message, err)\n\t}\n}\n\nfunc replicateWebsocketConn(dst, src *websocket.Conn, errc chan error) {\n\tfor {\n\t\tmsgType, msg, err := src.ReadMessage()\n\t\tif err != nil {\n\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\tif e, ok := lo.ErrorsAs[*websocket.CloseError](err); ok && e != nil {\n\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t}\n\t\t\t}\n\t\t\terrc <- err\n\t\t\t_ = dst.WriteMessage(websocket.CloseMessage, m)\n\t\t\tbreak\n\t\t}\n\t\terr = dst.WriteMessage(msgType, msg)\n\t\tif err != nil {\n\t\t\terrc <- err\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector  func(*http.Request, http.Header)\n\tBackend   func(*http.Request) *url.URL\n\tUpgrader  *websocket.Upgrader\n\tDialer    *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tbackendURL := p.Backend(r)\n\tif backendURL == nil {\n\t\thttp.Error(w, \"no backend specified\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendReq, err := http.NewRequest(\"GET\", backendURL.String(), nil)\n\tif err != nil {\n\t\thttp.Error(w, \"invalid backend URL\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendReq.Host = backendURL.Host\n\tif p.Director != nil {\n\t\tp.Director(r, backendReq.Header)\n\t}\n\n\tbackendConn, resp, err := p.Dialer.DialRequest(backendReq)\n\tif err != nil {\n\t\tif resp != nil {\n\t\t\thttp.Error(w, resp.Status, resp.StatusCode)\n\t\t} else {\n\t\t\thttp.Error(w, \"backend connection error\", http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer backendConn.Close()\n\n\tclientConn, err := p.Upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"upgrade error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer clientConn.Close()\n\n\tclientConn.SetPingHandler(func(appData string) error {\n\t\treturn backendConn.WriteMessage(websocket.PingMessage, []byte(appData))\n\t})\n\tclientConn.SetPongHandler(func(appData string) error {\n\t\treturn backendConn.WriteMessage(websocket.PongMessage, []byte(appData))\n\t})\n\n\tbackendConn.SetPingHandler(func(appData string) error {\n\t\treturn clientConn.WriteMessage(websocket.PingMessage, []byte(appData))\n\t})\n\tbackendConn.SetPongHandler(func(appData string) error {\n\t\treturn clientConn.WriteMessage(websocket.PongMessage, []byte(appData))\n\t})\n\n\terrChan := make(chan error, 2)\n\tgo p.replicateWebsocketConn(clientConn, backendConn, errChan)\n\tgo p.replicateWebsocketConn(backendConn, clientConn, errChan)\n\n\t<-errChan\n}\n\nfunc (p *WebsocketProxy) replicateWebsocketConn(src, dst *websocket.Conn, errChan chan<- error) {\n\tfor {\n\t\tmessageType, payload, err := src.ReadMessage()\n\t\tif err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t\tif err := dst.WriteMessage(messageType, payload); err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and returns a simple text response.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" message to the response writer. The `main` function sets up the HTTP server by registering the handler and starting the server on port 8080.\n\nInput: \n- `w http.ResponseWriter`: Used to write the HTTP response.\n- `r *http.Request`: Contains information about the incoming HTTP request.\n\nOutput: \n- The `handler` function writes \"Hello World, I'm Golang!\" to the response writer (`w`).\n- The `main` function starts an HTTP server that listens on port 8080 and serves the response from the `handler` function.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n    \"net/http\"\n    \"log\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Hello World, I'm Golang!\\n\"))\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Go function that establishes a WebSocket connection to a specified URL, sends a protobuf message as a JSON payload, and returns the WebSocket connection for further communication.\n\nFunction Description: The function `openWebSocket` establishes a secure WebSocket connection (wss://) to a given URL with optional custom headers. It authenticates using admin macaroon if no custom headers are provided, sends a protobuf message as JSON, and returns the active WebSocket connection. The caller is responsible for closing the connection.\n\nInput:\n- `node` [*node.HarnessNode] - Node configuration containing REST address and authentication details\n- `url` [string] - The endpoint path for the WebSocket connection\n- `method` [string] - The method parameter to include in the query string\n- `req` [proto.Message] - The protobuf message to send as initial payload\n- `customHeader` [http.Header] - Optional custom HTTP headers for the request\n\nOutput:\n- [*websocket.Conn] - Established WebSocket connection for bidirectional communication\n- [error] - Error if any step in the connection process fails",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lightningnetwork/lnd/lnrpc\"\n\t\"github.com/lightningnetwork/lnd/lntest/node\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar (\n\twebSocketDialer = &websocket.Dialer{\n\t\tHandshakeTimeout: time.Second,\n\t\tTLSClientConfig:  insecureTransport.TLSClientConfig,\n\t}\n\tcloseMsg = websocket.FormatCloseMessage(\n\t\twebsocket.CloseNormalClosure, \"done\",\n\t)\n)\n\nfunc openWebSocket(node *node.HarnessNode, url, method string,\n\treq proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\n\theader := customHeader\n\tif header == nil {\n\t\theader = make(http.Header)\n\t\tif err := addAdminMacaroon(node, header); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tfullURL := fmt.Sprintf(\n\t\t\"wss://%s%s?method=%s\", node.Cfg.RESTAddr(), url, method,\n\t)\n\tconn, resp, err := webSocketDialer.Dial(fullURL, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() { _ = resp.Body.Close() }()\n\n\treqMsg, err := lnrpc.RESTJsonMarshalOpts.Marshal(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = conn.WriteMessage(websocket.TextMessage, reqMsg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 117,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\n\nfunc openWebSocket(node *HarnessNode, url string, method string, req proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\twsURL := &url.URL{\n\t\tScheme: \"wss\",\n\t\tHost:   node.GetRestAddr(),\n\t\tPath:   url,\n\t}\n\tq := wsURL.Query()\n\tq.Add(\"method\", method)\n\twsURL.RawQuery = q.Encode()\n\n\tvar headers http.Header\n\tif customHeader == nil {\n\t\theaders = make(http.Header)\n\t\tmac := node.AdminMacaroon()\n\t\theaders.Add(\"Grpc-Metadata-Macaroon\", mac)\n\t} else {\n\t\theaders = customHeader\n\t}\n\n\tdialer := websocket.Dialer{}\n\tconn, resp, err := dialer.Dial(wsURL.String(), headers)\n\tif err != nil {\n\t\tif resp != nil {\n\t\t\tresp.Body.Close()\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t}\n\n\tdata, err := protojson.Marshal(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := conn.WriteMessage(websocket.TextMessage, data); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a WebSocket server in Go that handles WebSocket connections, messages, and events using the nhooyr.io/websocket package. The server should provide event-based handling for connection establishment, message reception, and connection closure.\n\nStruct Description: The `testServer` struct represents a WebSocket server with event handling capabilities. It manages HTTP routes, WebSocket connections, and provides methods to subscribe to WebSocket events.\n\nFields:\n\n- sync.Mutex: sync.Mutex - Provides thread-safe access to the server's resources\n- eventEmitter: playwright.EventEmitter - Handles event subscription and emission for WebSocket events\n- mux: *http.ServeMux - HTTP request multiplexer for routing\n- testServer: *httptest.Server - HTTP test server instance\n- routes: map[string]http.HandlerFunc - Map of URL paths to their handler functions\n- requestSubscriberes: map[string][]chan *http.Request - Channels for request subscribers\n- PREFIX: string - Server URL prefix\n- EMPTY_PAGE: string - Path to empty page\n- CROSS_PROCESS_PREFIX: string - Prefix for cross-process communication\n- WS_PREFIX: string - WebSocket endpoint prefix\n- PORT: string - Server port number\n\nMethods:\n\n- wsHandler: (w http.ResponseWriter, r *http.Request) -> void - Handles WebSocket connection upgrade and message processing\n- OnceWebSocketConnection: (handler func(c *websocket.Conn, r *http.Request)) -> void - Registers a one-time connection handler\n- OnWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a persistent close handler\n- OnceWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a one-time close handler\n- OnWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a persistent message handler\n- OnceWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a one-time message handler\n- SendOnWebSocketConnection: (msgType websocket.MessageType, data []byte) -> void - Sends a message when a connection is established\n- WaitForWebSocketConnection: () -> <-chan *wsConnection - Returns a channel that receives the first WebSocket connection\n\nAdditional Struct:\n\n- wsConnection: struct - Represents an active WebSocket connection\n  Fields:\n    - Conn: *websocket.Conn - The WebSocket connection\n    - Req: *http.Request - The associated HTTP request\n  Methods:\n    - SendMessage: (msgType websocket.MessageType, data []byte) -> void - Sends a message through the connection",
    "Canonical_solution": "import (\n\t\"github.com/coder/websocket\"\n\t\"github.com/playwright-community/playwright-go\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype testServer struct {\n\tsync.Mutex\n\teventEmitter         playwright.EventEmitter\n\tmux                  *http.ServeMux\n\ttestServer           *httptest.Server\n\troutes               map[string]http.HandlerFunc\n\trequestSubscriberes  map[string][]chan *http.Request\n\tPREFIX               string\n\tEMPTY_PAGE           string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX            string\n\tPORT                 string\n}\n\nfunc (t *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tInsecureSkipVerify: true,\n\t})\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not upgrade ws connection:\", err)\n\t\treturn\n\t}\n\tdefer c.Close(websocket.StatusNormalClosure, \"\")\n\n\tt.eventEmitter.Emit(\"connection\", c, r)\n\n\tfor {\n\t\ttyp, message, err := c.Read(r.Context())\n\t\tif err != nil {\n\t\t\tcloseErr := new(websocket.CloseError)\n\t\t\tif errors.As(err, closeErr) {\n\t\t\t\tt.eventEmitter.Emit(\"close\", closeErr)\n\t\t\t}\n\t\t\tswitch websocket.CloseStatus(err) {\n\t\t\tcase websocket.StatusNormalClosure, websocket.StatusGoingAway, websocket.StatusNoStatusRcvd:\n\t\t\tdefault:\n\t\t\t\tlog.Println(\"testServer: could not read ws message:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tt.eventEmitter.Emit(\"message\", c, r, typ, message)\n\t}\n}\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (c *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\terr := c.Conn.Write(c.Req.Context(), msgType, data)\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\treturn\n\t}\n}\n\nfunc (t *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\tt.eventEmitter.Once(\"connection\", handler)\n}\n\nfunc (t *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.On(\"close\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.Once(\"close\", handler)\n}\n\nfunc (t *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.On(\"message\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.Once(\"message\", handler)\n}\n\nfunc (t *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\terr := c.Write(r.Context(), msgType, data)\n\t\tif err != nil {\n\t\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\t\treturn\n\t\t}\n\t})\n}\n\nfunc (t *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tchannel := make(chan *wsConnection)\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\tchannel <- &wsConnection{Conn: c, Req: r}\n\t\tclose(channel)\n\t})\n\treturn channel\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"sync\"\n\t\"github.com/nhooyr.io/websocket\"\n\t\"github.com/playwright-community/playwright-go\"\n)\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (wc *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) error {\n\treturn websocket.WriteMessage(wc.Conn, msgType, data)\n}\n\ntype testServer struct {\n\tMutex                sync.Mutex\n\teventEmitter         *playwright.EventEmitter\n\tmux                  *http.ServeMux\n\ttestServer           *httptest.Server\n\troutes               map[string]http.HandlerFunc\n\trequestSubscribers   map[string][]chan *http.Request\n\tPREFIX               string\n\tEMPTY_PAGE           string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX            string\n\tPORT                 string\n\tsendOnConnectMsgType websocket.MessageType\n\tsendOnConnectMsg     []byte\n\tconnectionChan       chan *wsConnection\n}\n\nfunc (ts *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Not a WebSocket request\", http.StatusBadRequest)\n\t\treturn\n\t}\n\twc := &wsConnection{Conn: c, Req: r}\n\n\tts.eventEmitter.Emit(\"connection\", wc)\n\n\tif ts.sendOnConnectMsg != nil {\n\t\tif err := wc.SendMessage(ts.sendOnConnectMsgType, ts.sendOnConnectMsg); err != nil {\n\t\t}\n\t}\n\n\tselect {\n\tcase ts.connectionChan <- wc:\n\tdefault:\n\t}\n\n\tgo func() {\n\t\tdefer c.Close()\n\t\tfor {\n\t\t\tmsgType, msg, err := c.Read(r.Context())\n\t\t\tif err != nil {\n\t\t\t\tvar closeErr *websocket.CloseError\n\t\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\t\tts.eventEmitter.Emit(\"close\", closeErr)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tts.eventEmitter.Emit(\"message\", c, r, msgType, msg)\n\t\t}\n\t}()\n}\n\nfunc (ts *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\tts.eventEmitter.Once(\"connection\", func(args ...interface{}) {\n\t\tif len(args) > 0 {\n\t\t\tif conn, ok := args[0].(*wsConnection); ok {\n\t\t\t\thandler(conn.Conn, conn.Req)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (ts *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\tts.eventEmitter.On(\"close\", func(args ...interface{}) {\n\t\tif len(args) > 0 {\n\t\t\tif closeErr, ok := args[0].(*websocket.CloseError); ok {\n\t\t\t\thandler(closeErr)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (ts *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\tts.eventEmitter.Once(\"close\", func(args ...interface{}) {\n\t\tif len(args) > 0 {\n\t\t\tif closeErr, ok := args[0].(*websocket.CloseError); ok {\n\t\t\t\thandler(closeErr)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (ts *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tts.eventEmitter.On(\"message\", func(args ...interface{}) {\n\t\tif len(args) >= 4 {\n\t\t\tif conn, ok := args[0].(*websocket.Conn); ok {\n\t\t\t\tif r, ok2 := args[1].(*http.Request); ok2 {\n\t\t\t\t\tif mt, ok3 := args[2].(websocket.MessageType); ok3 {\n\t\t\t\t\t\tif msg, ok4 := args[3].([]byte); ok4 {\n\t\t\t\t\t\t\thandler(conn, r, mt, msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (ts *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tts.eventEmitter.Once(\"message\", func(args ...interface{}) {\n\t\tif len(args) >= 4 {\n\t\t\tif conn, ok := args[0].(*websocket.Conn); ok {\n\t\t\t\tif r, ok2 := args[1].(*http.Request); ok2 {\n\t\t\t\t\tif mt, ok3 := args[2].(websocket.MessageType); ok3 {\n\t\t\t\t\t\tif msg, ok4 := args[3].([]byte); ok4 {\n\t\t\t\t\t\t\thandler(conn, r, mt, msg)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (ts *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\tts.Lock()\n\tdefer ts.Unlock()\n\tts.sendOnConnectMsgType = msgType\n\tts.sendOnConnectMsg = data\n}\n\nfunc (ts *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\treturn ts.connectionChan\n}"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a userland proxy using Go's pipe mechanism. The handler starts the proxy process, monitors its initialization status, and handles potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct manages the lifecycle of a userland proxy process, including process execution, IPC communication via pipes, and status monitoring.\n\nFields:\n- cmd: *exec.Cmd - The command object representing the proxy process to be executed.\n- ExtraFiles: []*os.File - Additional file descriptors to be passed to the child process (contains the pipe writer).\n\nMethods:\n- Start() -> error - Initializes the proxy process, establishes IPC via pipe, monitors startup status, and returns any errors encountered during execution or timeout. The method creates a pipe, passes the writer to the child process, reads the initialization status from the pipe reader, and handles errors or timeouts.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd        *exec.Cmd\n\tExtraFiles []*os.File\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer r.Close()\n\tdefer w.Close()\n\n\tp.ExtraFiles = []*os.File{w}\n\tp.cmd.ExtraFiles = p.ExtraFiles\n\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\n\ttimeout := 5 * time.Second\n\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\tdefer cancel()\n\n\tvar initStatus string\n\tdone := make(chan error, 1)\n\n\tgo func() {\n\t\treader := bufio.NewReader(r)\n\t\tline, err := reader.ReadString('\\n')\n\t\tinitStatus = line\n\t\tdone <- err\n\t}()\n\n\tselect {\n\tcase err := <-done:\n\t\tif err != nil && err != io.EOF {\n\t\t\treturn err\n\t\t}\n\t\tif initStatus != \"READY\\n\" {\n\t\t\treturn fmt.Errorf(\"proxy initialization failed: %s\", initStatus)\n\t\t}\n\tcase <-ctx.Done():\n\t\tif err := p.cmd.Process.Kill(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn fmt.Errorf(\"proxy initialization timeout\")\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Create a Go struct that implements a log retrieval mechanism using pipes for inter-process communication, allowing for reading logs from a file and writing them to a pipe for consumption by another process.\n\nStruct Description: The `logRetriever` struct provides a way to read logs from a file and write them to a pipe, implementing `io.ReadCloser` for standard read and close operations. It also includes methods to manage the pipe's writer and output.\n\nFields:\n- reader: *os.File - The read end of the pipe used to consume log data.\n- writer: *os.File - The write end of the pipe used to send log data.\n- output: *fileCloner - A helper component that clones the writer's output to a log file.\n\nMethods:\n- newlogRetriever: (logFile string) -> (*logRetriever, error) - Initializes a new logRetriever instance, creates a pipe, and sets up file cloning. If the log file exists, copies its contents to the pipe.\n- Read: (p []byte) -> (int, error) - Implements io.Reader to read data from the pipe's reader.\n- CloseWriter: () -> error - Closes the pipe's writer to signal the end of data transmission.\n- Close: () -> error - Implements io.Closer to close the pipe's reader and release resources.\n- Opt: () -> cio.Opt - Returns an option for configuring IO streams, using a null reader and the output cloner.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"os\"\n)\n\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (l *logRetriever, err error) {\n\tl = &logRetriever{}\n\tif l.reader, l.writer, err = os.Pipe(); err != nil {\n\t\treturn\n\t}\n\n\tif l.output, err = newFileCloner(l.writer, logFile); err != nil {\n\t\treturn\n\t}\n\n\tif util.FileExists(logFile) {\n\t\tvar reader io.ReadCloser\n\t\tif reader, err = os.Open(logFile); err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer util.DeferErr(&err, reader.Close)\n\n\t\tif _, err = io.Copy(l.writer, reader); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}\n\nvar _ io.ReadCloser = &logRetriever{}\n\nfunc (l *logRetriever) Opt() cio.Opt {\n\treturn cio.WithStreams(&nullReader{}, l.output, l.output)\n}\n\nfunc (l *logRetriever) Read(p []byte) (n int, err error) {\n\treturn l.reader.Read(p)\n}\n\nfunc (l *logRetriever) CloseWriter() (err error) {\n\treturn l.writer.Close()\n}\n\nfunc (l *logRetriever) Close() error {\n\treturn l.reader.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"os\"\n)\n\ntype fileCloner struct {\n\twriter  io.WriteCloser\n\tlogFile *os.File\n}\n\nfunc (fc *fileCloner) Write(p []byte) (int, error) {\n\tif n, err := fc.writer.Write(p); err != nil {\n\t\treturn n, err\n\t}\n\tif n, err := fc.logFile.Write(p); err != nil {\n\t\treturn n, err\n\t}\n\treturn len(p), nil\n}\n\nfunc (fc *fileCloner) Close() error {\n\treturn fc.logFile.Close()\n}\n\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (*logRetriever, error) {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tlogF, err := os.OpenFile(logFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfc := &fileCloner{\n\t\twriter:  w,\n\t\tlogFile: logF,\n\t}\n\n\tsrc, err := os.Open(logFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer src.Close()\n\n\tif _, err := io.Copy(fc, src); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &logRetriever{\n\t\treader: r,\n\t\twriter: w,\n\t\toutput: fc,\n\t}, nil\n}\n\nfunc (lr *logRetriever) Read(p []byte) (int, error) {\n\treturn lr.reader.Read(p)\n}\n\nfunc (lr *logRetriever) CloseWriter() error {\n\treturn lr.writer.Close()\n}\n\nfunc (lr *logRetriever) Close() error {\n\tif err := lr.reader.Close(); err != nil {\n\t\treturn err\n\t}\n\tif err := lr.writer.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn lr.output.Close()\n}\n\nfunc (lr *logRetriever) Opt() cio.Opt {\n\treturn cio.Opt{\n\t\tStdin:  io.NopCloser(&bytes.Buffer{}),\n\t\tStdout: lr.output,\n\t\tStderr: lr.output,\n\t}\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Go function that implements a basic HTTP server which responds to all requests with a repeated character response of specified size.\n\nFunction Description: The function should start an HTTP server on a specified port that handles all incoming requests by writing a response consisting of a repeated character ('a') with a length determined by the responseSize parameter. The server should log any errors that occur during writing or server startup.\n\nInput: \n- serverPort: string - The port number on which the HTTP server should listen (e.g., \"8080\")\n- responseSize: int - The size/length of the response to be generated (number of 'a' characters to repeat)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are logged to stdout if any occur during server operation\n\nNote: The function doesn't explicitly return values but runs an HTTP server that handles requests and may log errors. The response is written directly to the http.ResponseWriter for each incoming request.\n\nExample usage:\n```go\nfunc main() {\n    startHTTPServer(\"8080\", 1024)  // Starts server on port 8080 with 1024-byte responses\n}\n```",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresponse := bytes.Repeat([]byte(\"a\"), int(*responseSize))\n\taddr := \"localhost:\" + *serverPort\n\tlog.Println(\"Starting HTTP server on:\", addr)\n\tlserr := http.ListenAndServe(addr, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t_, werr := w.Write(response)\n\t\tif werr != nil {\n\t\t\tlog.Println(werr)\n\t\t}\n\t}))\n\tif lserr != nil {\n\t\tlog.Println(lserr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc startHTTPServer(serverPort string, responseSize int) {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdata := make([]byte, responseSize)\n\t\tfor i := range data {\n\t\t\tdata[i] = 'a'\n\t\t}\n\t\tif _, err := w.Write(data); err != nil {\n\t\t\tlog.Printf(\"Error writing response: %v\", err)\n\t\t}\n\t})\n\n\taddr := \":\" + serverPort\n\tlog.Printf(\"Starting server on %s\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Printf(\"Error starting server: %v\", err)\n\t}\n}\n```"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes and ports concurrently, with specific handlers for different endpoints. The server should mirror incoming requests (displaying request details) by default and respond with \"hello\" for specific pipeline activity routes.\n\nFunction Description: The main function sets up an HTTP server with multiple handlers and listens on multiple ports concurrently. It includes:\n1. A simple helloHandler that responds with \"hello\"\n2. A mirrorHandler that displays detailed request information\n3. Concurrent server instances on ports 9091-9097\n4. A primary server instance on port 9098\n\nInput: None (The functions handle HTTP requests which contain their own input data)\n\nOutput: None (The functions write responses to http.ResponseWriter)\n\nMethods:\n\nhelloHandler: func(w http.ResponseWriter, req *http.Request) - Responds with \"hello\" string\nmirrorHandler: func(w http.ResponseWriter, req *http.Request) - Displays detailed request information including method, URL, headers, and body\nListenAndServe: Called on multiple ports to start HTTP servers concurrently\n\nNote: The code uses http.HandleFunc to register routes and starts servers on multiple ports using goroutines for concurrent operation. The mirrorHandler includes a 10ms delay and outputs request details to both the response and stdout using a TeeWriter.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\thelloHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\tio.WriteString(w, \"hello\")\n\t}\n\tmirrorHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\ttime.Sleep(10 * time.Millisecond)\n\t\tbody, err := io.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tbody = []byte(fmt.Sprintf(\"<read failed: %v>\", err))\n\t\t}\n\n\t\ttw := NewTeeWriter(w, os.Stdout)\n\n\t\turl := req.URL.Path\n\t\tif req.URL.Query().Encode() != \"\" {\n\t\t\turl += \"?\" + req.URL.Query().Encode()\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Your Request\")\n\t\tfmt.Fprintln(tw, \"==============\")\n\t\tfmt.Fprintln(tw, \"Method:\", req.Method)\n\t\tfmt.Fprintln(tw, \"URL   :\", url)\n\n\t\tfmt.Fprintln(tw, \"Header:\")\n\t\tfor k, v := range req.Header {\n\t\t\tfmt.Fprintf(tw, \"    %s: %v\\n\", k, v)\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Body  :\", string(body))\n\t}\n\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\thttp.HandleFunc(\"/pipeline/activity/1\", helloHandler)\n\thttp.HandleFunc(\"/pipeline/activity/2\", helloHandler)\n\n\tfor _, port := range []int{9091, 9092, 9093, 9094, 9095, 9096, 9097} {\n\t\tgo http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}\n\n\thttp.ListenAndServe(\":9098\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"hello\"))\n}\n\nfunc mirrorHandler(w http.ResponseWriter, req *http.Request) {\n\ttime.Sleep(10 * time.Millisecond)\n\tbody, _ := io.ReadAll(req.Body)\n\tdefer req.Body.Close()\n\tresponse := fmt.Sprintf(\"Method: %s\\nURL: %s\\nHeaders: %v\\nBody: %s\\n\", req.Method, req.URL, req.Header, body)\n\ttw := io.MultiWriter(w, os.Stdout)\n\tio.WriteString(tw, response)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/hello\", helloHandler)\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\n\tfor port := 9091; port <= 9097; port++ {\n\t\tgo func(p int) {\n\t\t\tfmt.Printf(\"Server started on port %d\\n\", p)\n\t\t\thttp.ListenAndServe(fmt.Sprintf(\":%d\", p), nil)\n\t\t}(port)\n\t}\n\n\tfmt.Println(\"Primary server started on port 9098\")\n\thttp.ListenAndServe(\":9098\", nil)\n}"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create a Go struct that represents a financial chart for trading visualization, with capabilities to serve HTTP endpoints for health checks, trading data, and trading history. The struct should maintain candle data, orders, and wallet information, and provide methods to serve this data via HTTP endpoints.\n\nStruct Description: The Chart struct represents a financial trading chart with HTTP server capabilities. It maintains candle data, order information, and paper wallet details, and provides methods to serve this data through HTTP endpoints (/health, /data, /history). The struct uses synchronization to handle concurrent access and provides real-time trading visualization data.\n\nFields:\n\nport: int - The port number on which the HTTP server will listen\ncandles: map[string][]Candle - Stores candle data grouped by trading pairs\ndataframe: map[string]*model.Dataframe - Stores dataframe information for each trading pair\nordersIDsByPair: map[string]*set.LinkedHashSetINT64 - Maintains order IDs organized by trading pairs\norderByID: map[int64]model.Order - Maps order IDs to their corresponding order details\npaperWallet: *exchange.PaperWallet - Pointer to the paper trading wallet information\nlastUpdate: time.Time - Timestamp of the last data update\nMutex: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n\nhandleHealth: (w http.ResponseWriter, _ *http.Request) -> None - Handles health check requests, returning service status based on last update time\nhandleData: (w http.ResponseWriter, r *http.Request) -> None - Serves trading data (candles, asset values, equity values) for a specific trading pair in JSON format\nhandleTradingHistoryData: (w http.ResponseWriter, r *http.Request) -> None - Serves trading history data for a specific pair in CSV format\nStart: () -> error - Starts the HTTP server and registers all endpoint handlers",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/csv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/rodrigo-brito/ninjabot/exchange\"\n\t\"github.com/rodrigo-brito/ninjabot/model\"\n\t\"github.com/StudioSol/set\"\n\tlog \"github.com/sirupsen/logrus\"\n)\n\ntype Chart struct {\n\tsync.Mutex\n\tport            int\n\tcandles         map[string][]Candle\n\tdataframe       map[string]*model.Dataframe\n\tordersIDsByPair map[string]*set.LinkedHashSetINT64\n\torderByID       map[int64]model.Order\n\tpaperWallet     *exchange.PaperWallet\n\tlastUpdate      time.Time\n}\n\nfunc (c *Chart) handleHealth(w http.ResponseWriter, _ *http.Request) {\n\tif time.Since(c.lastUpdate) > time.Hour+10*time.Minute {\n\t\t_, err := w.Write([]byte(c.lastUpdate.String()))\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t\tw.WriteHeader(http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc (c *Chart) handleData(w http.ResponseWriter, r *http.Request) {\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-type\", \"text/json\")\n\n\tvar maxDrawdown *drawdown\n\tif c.paperWallet != nil {\n\t\tvalue, start, end := c.paperWallet.MaxDrawdown()\n\t\tmaxDrawdown = &drawdown{\n\t\t\tStart: start,\n\t\t\tEnd:   end,\n\t\t\tValue: fmt.Sprintf(\"%.1f\", value*100),\n\t\t}\n\t}\n\n\tasset, quote := exchange.SplitAssetQuote(pair)\n\tassetValues, equityValues := c.equityValuesByPair(pair)\n\terr := json.NewEncoder(w).Encode(map[string]interface{}{\n\t\t\"candles\":       c.candlesByPair(pair),\n\t\t\"asset_values\":  assetValues,\n\t\t\"equity_values\": equityValues,\n\t\t\"quote\":         quote,\n\t\t\"asset\":         asset,\n\t\t\"max_drawdown\":  maxDrawdown,\n\t})\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n}\n\nfunc (c *Chart) handleTradingHistoryData(w http.ResponseWriter, r *http.Request) {\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-type\", \"text/csv\")\n\tw.Header().Set(\"Content-Disposition\", \"attachment;filename=history_\"+pair+\".csv\")\n\tw.Header().Set(\"Transfer-Encoding\", \"chunked\")\n\n\torders := c.orderStringByPair(pair)\n\n\tbuffer := bytes.NewBuffer(nil)\n\tcsvWriter := csv.NewWriter(buffer)\n\terr := csvWriter.Write([]string{\"created_at\", \"status\", \"side\", \"id\", \"type\", \"quantity\", \"price\", \"total\", \"profit\"})\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing header file: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\n\terr = csvWriter.WriteAll(orders)\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing data: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\tcsvWriter.Flush()\n\n\tw.WriteHeader(http.StatusOK)\n\t_, err = w.Write(buffer.Bytes())\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing response: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n}\n\nfunc (c *Chart) Start() error {\n\thttp.HandleFunc(\"/health\", c.handleHealth)\n\thttp.HandleFunc(\"/history\", c.handleTradingHistoryData)\n\thttp.HandleFunc(\"/data\", c.handleData)\n\n\tfmt.Printf(\"Chart available at http://localhost:%d\\n\", c.port)\n\treturn http.ListenAndServe(fmt.Sprintf(\":%d\", c.port), nil)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/csv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\t\"sync\"\n\t\"encoding\"\n)\n\ntype Chart struct {\n\tport               int\n\tcandles            map[string][]Candle\n\tdataframe          map[string]*model.Dataframe\n\tordersIDsByPair    map[string]*set.LinkedHashSetINT64\n\torderByID          map[int64]model.Order\n\tpaperWallet        *exchange.PaperWallet\n\tlastUpdate         time.Time\n\tMutex              sync.Mutex\n}\n\ntype Candle struct {\n\t// Define fields as needed\n}\n\nfunc (c *Chart) handleHealth(w http.ResponseWriter, r *http.Request) {\n\tc.Mutex.Lock()\n\tdefer c.Mutex.Unlock()\n\n\tif time.Since(c.lastUpdate) > 5*time.Minute {\n\t\thttp.Error(w, \"Service Unavailable\", http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"OK\"))\n}\n\nfunc (c *Chart) handleData(w http.ResponseWriter, r *http.Request) {\n\tc.Mutex.Lock()\n\tdefer c.Mutex.Unlock()\n\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\thttp.Error(w, \"Missing pair parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tcandles, ok := c.candles[pair]\n\tif !ok {\n\t\thttp.Error(w, \"No data for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\tdf, ok := c.dataframe[pair]\n\tif !ok {\n\t\thttp.Error(w, \"No dataframe for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\torderIDsSet, ok := c.ordersIDsByPair[pair]\n\tif !ok {\n\t\thttp.Error(w, \"No orders for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\tvar orderIDs []int64\n\torderIDs = orderIDsSet.ToSlice()\n\n\torders := make([]model.Order, len(orderIDs))\n\tfor i, id := range orderIDs {\n\t\torder, exists := c.orderByID[id]\n\t\tif !exists {\n\t\t\thttp.Error(w, \"Order not found\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\torders[i] = order\n\t}\n\n\tresponse := struct {\n\t\tCandles   []Candle       `json:\"candles\"`\n\t\tDataframe *model.Dataframe `json:\"dataframe\"`\n\t\tOrders    []model.Order  `json:\"orders\"`\n\t\tPaperWallet *exchange.PaperWallet `json:\"paper_wallet\"`\n\t}{\n\t\tCandles:   candles,\n\t\tDataframe: df,\n\t\tOrders:    orders,\n\t\tPaperWallet: c.paperWallet,\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(response)\n}\n\nfunc (c *Chart) handleTradingHistoryData(w http.ResponseWriter, r *http.Request) {\n\tc.Mutex.Lock()\n\tdefer c.Mutex.Unlock()\n\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\thttp.Error(w, \"Missing pair parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\torderIDsSet, ok := c.ordersIDsByPair[pair]\n\tif !ok {\n\t\thttp.Error(w, \"No orders for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\n\tvar orderIDs []int64\n\torderIDs = orderIDsSet.ToSlice()\n\n\tvar records [][]string\n\trecords = append(records, []string{\"OrderID\", \"Pair\", \"Type\", \"Price\", \"Amount\", \"Timestamp\"})\n\n\tfor _, id := range orderIDs {\n\t\torder, exists := c.orderByID[id]\n\t\tif !exists {\n\t\t\thttp.Error(w, \"Order not found\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\trecords = append(records, []string{\n\t\t\tfmt.Sprintf(\"%d\", id),\n\t\t\torder.Pair,\n\t\t\torder.Type,\n\t\t\tfmt.Sprintf(\"%f\", order.Price),\n\t\t\tfmt.Sprintf(\"%f\", order.Amount),\n\t\t\torder.Timestamp.Format(time.RFC3339),\n\t\t})\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"text/csv\")\n\tw.Header().Set(\"Content-Disposition\", \"attachment; filename=history.csv\")\n\tcsvWriter := csv.NewWriter(w)\n\tif err := csvWriter.WriteAll(records); err != nil {\n\t\thttp.Error(w, \"Failed to write CSV\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tcsvWriter.Flush()\n}\n\nfunc (c *Chart) Start() error {\n\thttp.HandleFunc(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\tc.handleHealth(w, r)\n\t})\n\thttp.HandleFunc(\"/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tc.handleData(w, r)\n\t})\n\thttp.HandleFunc(\"/history\", func(w http.ResponseWriter, r *http.Request) {\n\t\tc.handleTradingHistoryData(w, r)\n\t})\n\n\taddr := fmt.Sprintf(\":%d\", c.port)\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Go HTTP server that handles incoming requests, processes JSON payloads, and returns a modified response with a large body and custom headers.\n\nFunction Description: The main function sets up an HTTP server that listens on port 10000. It defines a handler for the root path (\"/\") that:\n1. Reads and closes the request body\n2. Unmarshals the JSON body into a contextEntity struct\n3. Modifies the response status, headers, and body\n4. Marshals the modified contextEntity back to JSON and sends it as the response\n5. Handles errors appropriately with status codes\n\nInput: \n- HTTP requests with JSON body containing a contextEntity structure\n- The handler expects the request body to be a valid JSON representation of contextEntity\n\nOutput:\n- HTTP responses with:\n  - Status 200 on success with modified JSON payload\n  - Status 400 for bad requests (invalid JSON or read errors)\n  - Status 500 for internal server errors (marshaling failures)\n- Response includes:\n  - Custom header \"X-Remote-Name: G.O.O.D\"\n  - Large body (64KB of '-' characters)\n  - Modified contextEntity structure as JSON",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tlargeBodySize := 64 * 1024\n\tlargeBody := bytes.Repeat([]byte(`-`), largeBodySize)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer r.Body.Close()\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity := &contextEntity{}\n\t\terr = json.Unmarshal(body, ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity.Response.StatusCode = 200\n\t\tctxEntity.Response.Header.Add(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tctxEntity.Response.Body = largeBody\n\n\t\tbuff, err := json.Marshal(ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write(buff)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype contextEntity struct {\n\tLargeBody string `json:\"largeBody\"`\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Bad request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdefer r.Body.Close()\n\n\t\tvar entity contextEntity\n\t\tif err := json.Unmarshal(body, &entity); err != nil {\n\t\t\thttp.Error(w, \"Bad request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tentity.LargeBody = strings.Repeat(\"-\", 65536)\n\t\tw.Header().Set(\"X-Remote-Name\", \"G.O.O.D\")\n\n\t\tmodifiedJSON, err := json.Marshal(entity)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write(modifiedJSON)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a POST request and serves an HTML form for file submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it serves an HTML form (rendered from a template). For POST requests, it processes file uploads by saving the uploaded file to the filesystem.\n\nInput:\n- None (The function takes no direct input parameters, but handles HTTP requests with the following characteristics:\n  - GET requests to \"/\" trigger form rendering\n  - POST requests to \"/\" with a \"file\" form field trigger file upload processing)\n\nOutput:\n- None (The function doesn't return any value, but has the following side effects:\n  - Starts an HTTP server on port 9000\n  - Writes responses to http.ResponseWriter\n  - Creates files on the filesystem for successful uploads)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\ttpl, err := template.ParseFiles(\"form.gohtml\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tif req.Method == \"POST\" {\n\t\t\tsrc, _, err := req.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer src.Close()\n\n\t\t\tdst, err := os.Create(filepath.Join(\"./\", \"file.txt\"))\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\terr = tpl.Execute(res, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20)\n\t\t\tfile, handler, err := r.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\t\t\tnewFile, err := os.Create(handler.Filename)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Error creating the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer newFile.Close()\n\t\t\tif _, err := io.Copy(newFile, file); err != nil {\n\t\t\t\thttp.Error(w, \"Error saving the file\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Fprintf(w, \"Upload successful: %s\", handler.Filename)\n\t\t} else {\n\t\t\tconst form = `<html><body><form method=\"POST\" enctype=\"multipart/form-data\"><input type=\"file\" name=\"file\"><input type=\"submit\"></form></body></html>`\n\t\t\ttmpl := template.Must(template.New(\"form\").Parse(form))\n\t\t\tif err := tmpl.Execute(w, nil); err != nil {\n\t\t\t\thttp.Error(w, \"Error rendering form\", http.StatusInternalServerError)\n\t\t\t}\n\t\t}\n\t})\n\tlog.Println(\"Starting server on :9000\")\n\tlog.Fatal(http.ListenAndServe(\":9000\", nil))\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a simple HTTP server in Go that sets a cookie when the root path (\"/\") is accessed.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. When a request is made to the root path, it responds by setting a cookie named \"my-cookie\" with the value \"some value\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\thttp.SetCookie(res, &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t})\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie := &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t\tw.Write([]byte(\"Cookie set\"))\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a simple HTTP server in Go that responds to requests with a greeting message containing the value of the \"AUTHOR\" environment variable.\n\nFunction Description: The main function sets up a basic HTTP server with a single route (\"/\") that responds to all HTTP requests. The response is a plain text message combining \"hello \" with the value of the \"AUTHOR\" environment variable. The server listens on a specified port.\n\nInput: \n- *addr (string pointer): A command-line flag specifying the server address and port to listen on (e.g., \":8080\")\n\nOutput: \n- None (The function runs indefinitely, serving HTTP requests until interrupted)\n- For each HTTP request to \"/\", outputs \"hello [AUTHOR]\" as the response body\n\nNote: The function does not explicitly return any values but writes to the http.ResponseWriter for each incoming request. The server continues running until terminated.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n)\nfunc main() {\n\tflag.Parse()\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"hello \"+os.Getenv(\"AUTHOR\"))\n\t})\n\thttp.ListenAndServe(*addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n\nvar addr = flag.String(\"addr\", \":8080\", \"\")\n\nfunc main() {\n\tflag.Parse()\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tauthor := os.Getenv(\"AUTHOR\")\n\t\tw.Write([]byte(\"hello \" + author))\n\t})\n\tlog.Fatal(http.ListenAndServe(*addr, nil))\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a function that serves a genesis file over HTTP on a specified port, setting the appropriate content type and handling the file serving.\n\nFunction Description: The function `ServeGenesisFileAtPort` creates a basic HTTP server that serves a specified genesis file when requested at the `/genesis.car` endpoint. The server sets the content type to `application/octet-stream` and uses the `http.ServeFile` function to handle the file serving. The server runs on the specified port and panics if it fails to start.\n\nInput:  \n- `genesisFilePath` (string): The file path to the genesis file that will be served.  \n- `port` (int): The port number on which the HTTP server will listen.  \n\nOutput:  \n- None (the function does not return; it panics if the server fails to start).",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\tpanic(http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\n\taddr := fmt.Sprintf(\":%d\", port)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Create a Go HTTP server that acts as a proxy, forwarding requests based on a header value and returning the corresponding stored response.\n\nFunction Description: The main function sets up an HTTP server with a root handler that retrieves and forwards responses based on the \"proxify\" header. It stores responses in a global map and cleans up after forwarding. The server runs concurrently.\n\nInput: \n- options.HTTPListenerAddress (string): The address and port on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (the function runs indefinitely as a server)\n- Errors are logged fatally if the server fails to start\n\nNote: The implementation uses global variables (response and responses) for storing and retrieving HTTP responses. The handler expects requests to contain a \"proxify\" header that serves as a key to look up pre-stored responses in the responses map. After forwarding a response, it removes the corresponding entry from the map.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"io\"\n)\n\nvar (\n\tresponse   *http.Response\n\tresponses  map[string]*http.Response\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tkey := req.Header.Get(\"proxify\")\n\t\tresponse := responses[key]\n\t\tdelete(responses, key)\n\n\t\tfor k, v := range response.Header {\n\t\t\tw.Header().Add(k, strings.Join(v, \"; \"))\n\t\t}\n\t\tw.WriteHeader(response.StatusCode)\n\t\tio.Copy(w, response.Body)\n\t})\n\tgo func() {\n\t\tif err := http.ListenAndServe(options.HTTPListenerAddress, nil); err != nil {\n\t\t\tgologger.Fatal().Msgf(\"Could not listen and serve: %s\\n\", err)\n\t\t}\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n)\n\nvar (\n\tresponses = make(map[string]*http.Response)\n\tmu        sync.RWMutex\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tkey := r.Header.Get(\"proxify\")\n\t\tif key == \"\" {\n\t\t\thttp.Error(w, \"Missing proxify header\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tmu.RLock()\n\t\tstoredResp, exists := responses[key]\n\t\tmu.RUnlock()\n\n\t\tif !exists {\n\t\t\thttp.Error(w, \"No stored response found\", http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\n\t\tfor name, values := range storedResp.Header {\n\t\t\tfor _, value := range values {\n\t\t\t\tw.Header().Add(name, value)\n\t\t\t}\n\t\t}\n\t\tw.WriteHeader(storedResp.StatusCode)\n\n\t\tbody, err := io.ReadAll(storedResp.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading stored response body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer storedResp.Body.Close()\n\t\tif _, err := w.Write(body); err != nil {\n\t\t\thttp.Error(w, \"Error writing response body\", http.StatusInternalServerError)\n\t\t\tlog.Println(\"Write error:\", err)\n\t\t\treturn\n\t\t}\n\n\t\tmu.Lock()\n\t\tdelete(responses, key)\n\t\tmu.Unlock()\n\t})\n\n\taddr := options.HTTPListenerAddress\n\tlog.Printf(\"Starting server on %s\\n\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a Go HTTP server that serves as an interface for running and displaying scorecard results for GitHub repositories. The server should handle requests, process repository information, execute scorecard checks, and return results in either JSON or HTML format based on the request's content type.\n\nFunction Description: The `serveCmd` function creates and configures a Cobra command that starts an HTTP server. The server listens for requests, processes GitHub repository URLs, runs scorecard checks on those repositories, and returns the results. The function handles template parsing, route registration, and server startup.\n\nInput: \n- `o *options.Options`: A pointer to an options struct containing configuration settings like log level and commit depth\n\nOutput: \n- `*cobra.Command`: Returns a configured Cobra command that can be executed to start the HTTP server\n\nThe function does not explicitly return any values from its Run method, but it does:\n1. Write HTTP responses to the client (through http.ResponseWriter)\n2. Output logs through the logger\n3. May panic in case of critical errors during template parsing or server startup",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/ossf/scorecard/v5/clients/githubrepo\"\n\t\"github.com/ossf/scorecard/v5/clients/ossfuzz\"\n\t\"github.com/ossf/scorecard/v5/log\"\n\t\"github.com/ossf/scorecard/v5/options\"\n\t\"github.com/ossf/scorecard/v5/pkg/scorecard\"\n)\nfunc serveCmd(o *options.Options) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve the scorecard program over http\",\n\t\tLong:  ``,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tlogger := log.NewLogger(log.ParseLevel(o.LogLevel))\n\n\t\t\tt, err := template.New(\"webpage\").Parse(tpl)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"parsing webpage template\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\thttp.HandleFunc(\"/\", func(rw http.ResponseWriter, r *http.Request) {\n\t\t\t\trepoParam := r.URL.Query().Get(\"repo\")\n\t\t\t\tconst length = 3\n\t\t\t\ts := strings.SplitN(repoParam, \"/\", length)\n\t\t\t\tif len(s) != length {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\trepo, err := githubrepo.MakeGithubRepo(repoParam)\n\t\t\t\tif err != nil {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\tctx := r.Context()\n\t\t\t\trepoClient := githubrepo.CreateGithubRepoClient(ctx, logger)\n\t\t\t\tossFuzzRepoClient, err := ossfuzz.CreateOSSFuzzClientEager(ossfuzz.StatusURL)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"initializing clients\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t\tdefer ossFuzzRepoClient.Close()\n\t\t\t\trepoResult, err := scorecard.Run(ctx, repo,\n\t\t\t\t\tscorecard.WithCommitDepth(o.CommitDepth),\n\t\t\t\t\tscorecard.WithRepoClient(repoClient),\n\t\t\t\t\tscorecard.WithOSSFuzzClient(ossFuzzRepoClient),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"running enabled scorecard checks on repo\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\n\t\t\t\tif r.Header.Get(\"Content-Type\") == \"application/json\" {\n\t\t\t\t\tif err := repoResult.AsJSON(o.ShowDetails, log.ParseLevel(o.LogLevel), rw); err != nil {\n\t\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := t.Execute(rw, repoResult); err != nil {\n\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t}\n\t\t\t})\n\t\t\tport := os.Getenv(\"PORT\")\n\t\t\tif port == \"\" {\n\t\t\t\tport = \"8080\"\n\t\t\t}\n\t\t\tlogger.Info(\"Listening on localhost:\" + port + \"\\n\")\n\t\t\terr = http.ListenAndServe(fmt.Sprintf(\"0.0.0.0:%s\", port), nil)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"listening and serving\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t},\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/yourorg/scorecard\"\n\t\"github.com/yourorg/options\"\n)\n\nfunc serveCmd(o *options.Options) *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse: \"serve\",\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\ttmpl, err := template.ParseFiles(\"templates/results.html\")\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to parse template: %w\", err)\n\t\t\t}\n\n\t\t\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif r.Method == \"GET\" {\n\t\t\t\t\ttmpl.Execute(w, nil)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\thttp.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n\t\t\t})\n\n\t\t\thttp.HandleFunc(\"/analyze\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif r.Method != \"POST\" {\n\t\t\t\t\thttp.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tr.ParseForm()\n\t\t\t\trepoURL := r.FormValue(\"repo_url\")\n\t\t\t\tif repoURL == \"\" {\n\t\t\t\t\thttp.Error(w, \"Missing repository URL\", http.StatusBadRequest)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tresults, err := scorecard.RunChecks(repoURL, o.CommitDepth)\n\t\t\t\tif err != nil {\n\t\t\t\t\thttp.Error(w, fmt.Sprintf(\"Scorecard error: %v\", err), http.StatusInternalServerError)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\taccept := r.Header.Get(\"Accept\")\n\t\t\t\tif accept == \"application/json\" {\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\t\t\tif err := json.NewEncoder(w).Encode(results); err != nil {\n\t\t\t\t\t\thttp.Error(w, \"Failed to encode JSON\", http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif err := tmpl.Execute(w, results); err != nil {\n\t\t\t\t\tlog.Printf(\"Template execution error: %v\", err)\n\t\t\t\t\thttp.Error(w, \"Failed to render results\", http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\taddr := fmt.Sprintf(\":%d\", o.Port)\n\t\t\tlog.Printf(\"Starting server on %s\", addr)\n\t\t\treturn http.ListenAndServe(addr, nil)\n\t\t},\n\t}\n\treturn cmd\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Go HTTP server that handles Stripe webhook events, specifically processing billing meter error reports and other event types.\n\nFunction Description: The main function sets up an HTTP server with a \"/webhook\" endpoint that receives and processes Stripe webhook events. It validates the webhook signature, retrieves full event details from Stripe, and handles specific event types (particularly \"v1.billing.meter.error_report_triggered\").\n\nInput:\n- HTTP POST requests to \"/webhook\" endpoint containing:\n  - Request body with Stripe event payload (JSON format)\n  - \"Stripe-Signature\" header for webhook validation\n- Environment variables:\n  - apiKey: Stripe API key for authentication\n  - webhookSecret: Secret for validating webhook signatures\n\nOutput:\n- HTTP responses:\n  - 200 OK for successful processing\n  - 500 Internal Server Error for any processing failures\n- Console output:\n  - Success messages with meter IDs for handled events\n  - Error messages for any processing failures\n  - Notifications for unhandled event types\n\nThe function does not explicitly return values but writes to the HTTP response and console.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v81\"\n\tbillingMeters \"github.com/stripe/stripe-go/v81/billing/meter\"\n\t\"github.com/stripe/stripe-go/v81/rawrequest\"\n\twebhook \"github.com/stripe/stripe-go/v81/webhook\"\n)\nfunc main() {\n\tb, err := stripe.GetRawRequestBackend(stripe.APIBackend)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tclient := rawrequest.Client{B: b, Key: apiKey}\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, req *http.Request) {\n\t\tconst MaxBodyBytes = int64(65536)\n\t\treq.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)\n\t\tpayload, err := ioutil.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\terr = webhook.ValidatePayload(payload, req.Header.Get(\"Stripe-Signature\"), webhookSecret)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tvar thinEvent map[string]interface{}\n\n\t\tif err := json.Unmarshal(payload, &thinEvent); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse thin event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\teventID := thinEvent[\"id\"].(string)\n\n\t\tvar event map[string]interface{}\n\n\t\tresp, err := client.RawRequest(http.MethodGet, \"/v2/core/events/\"+eventID, \"\", nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get pull event: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tif err := json.Unmarshal(resp.RawJSON, &event); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse pull event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tswitch t := event[\"type\"].(string); t {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\trelatedObject := event[\"related_object\"].(map[string]interface{})\n\t\t\tmeter, err := billingMeters.Get(relatedObject[\"id\"].(string), nil)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get related meter object: %v\\n\", err.Error())\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmeterID := meter.ID\n\t\t\tfmt.Printf(\"Success! %s\\n\", meterID)\n\t\t\tfmt.Println(fmt.Sprint(event[\"data\"]))\n\t\tdefault:\n\t\t\tfmt.Fprintf(os.Stderr, \"Unhandled event type: %s\\n\", t)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\terr = http.ListenAndServe(\":4242\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v72\"\n\t\"github.com/stripe/stripe-go/v72/webhook\"\n)\n\nfunc main() {\n\tstripe.Key = os.Getenv(\"apiKey\")\n\tif stripe.Key == \"\" {\n\t\tlog.Fatal(\"apiKey not set\")\n\t}\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodPost {\n\t\t\thttp.Error(w, \"Invalid method\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\n\t\tpayload, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error reading body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\twebhookSecret := os.Getenv(\"webhookSecret\")\n\t\tif webhookSecret == \"\" {\n\t\t\thttp.Error(w, \"Webhook secret not set\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tsigHeader := r.Header.Get(\"Stripe-Signature\")\n\t\tif sigHeader == \"\" {\n\t\t\thttp.Error(w, \"Missing signature\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tevent, err := webhook.ConstructEvent(payload, sigHeader, webhookSecret)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Invalid webhook signature\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tswitch event.Type {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\tdata := event.Data.Object\n\t\t\tif meter, ok := data[\"meter\"].(map[string]interface{}); ok {\n\t\t\t\tmeterID, _ := meter[\"id\"].(string)\n\t\t\t\tfmt.Printf(\"Handled error report for meter: %s\\n\", meterID)\n\t\t\t} else {\n\t\t\t\thttp.Error(w, \"Invalid event data\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\tdefault:\n\t\t\tfmt.Printf(\"Unhandled event type: %s\\n\", event.Type)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"3000\"\n\t}\n\tfmt.Printf(\"Server starting on port %s\\n\", port)\n\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\tlog.Fatalf(\"Server error: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a simple HTTP server in Go that tracks and displays the number of visits by maintaining a cookie-based counter.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles incoming requests. For each request, it checks for a cookie named \"my-cookie\". If the cookie doesn't exist, it creates one with an initial value of \"0\". The function increments the cookie value on each visit and sends it back in the response, effectively maintaining a visit counter.\n\nInput: None (The function takes no direct input parameters. It responds to HTTP requests received on port 9000.)\n\nOutput: None (The function doesn't return any value. It writes the current visit count to the HTTP response and sets/updates the cookie in the response header.)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"my-cookie\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"my-cookie\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\tcount++\n\t\tcookie.Value = strconv.Itoa(count)\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, cookie.Value)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"my-cookie\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"my-cookie\",\n\t\t\t\tValue: \"0\",\n\t\t\t\tPath:  \"/\",\n\t\t\t}\n\t\t}\n\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\tcount++\n\t\tcookie.Value = strconv.Itoa(count)\n\t\thttp.SetCookie(w, cookie)\n\t\tfmt.Fprintf(w, \"Visits: %s\", cookie.Value)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server with health check and metrics endpoints using Go's net/http package.\n\nFunction Description: The function `serveMetrics` initializes an HTTP server with two endpoints: `/healthz` for health checks (returns \"OK\" with 200 status) and `/metrics` for Prometheus metrics (handled by promhttp). The server listens on the specified address and runs until terminated.\n\nInput: \n- `address` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (function runs indefinitely until server termination)\n- Logs fatal errors if server fails to start",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tlog.Fatal(http.ListenAndServe(address, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tfmt.Fprint(w, \"OK\")\n\t})\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tlog.Printf(\"Starting server on %s...\", address)\n\tif err := http.ListenAndServe(address, nil); err != nil {\n\t\tlog.Fatal(\"Failed to start server:\", err)\n\t}\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebSocket connections at the root path (\"/\"). The server should load configuration from a JSON file and start listening on a specified port.\n\nFunction Description: The main function initializes the server by loading configuration, setting up a WebSocket handler at the root path, and starting the HTTP server on the configured port.\n\nInput: None (configuration is loaded from \"config.json\" file)\n\nOutput: None (the function runs indefinitely serving HTTP requests or panics if server fails to start)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"golang.org/x/net/websocket\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\tConfig = load(\"config.json\")\n\t\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\ts := websocket.Server{Handler: websocket.Handler(wsHandler)}\n\t\ts.ServeHTTP(w, req)\n\t})\n\n\terr := http.ListenAndServe(\":\"+strconv.Itoa(Config.Port), nil)\n\tif err != nil {\n\t\tpanic(\"Error: \" + err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Config struct {\n\tPort string `json:\"port\"`\n}\n\nfunc main() {\n\tconfigFile, err := os.Open(\"config.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer configFile.Close()\n\tvar config Config\n\tif err := json.NewDecoder(configFile).Decode(&config); err != nil {\n\t\tpanic(err)\n\t}\n\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})\n\n\tif err := http.ListenAndServe(\":\"+config.Port, nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles form submissions and displays a simple HTML form.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form. For POST requests, it reads the form value and prints it to the console while still displaying the form. The server listens on port 9000.\n\nInput: None (The function takes no direct input parameters, but receives HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but writes to the HTTP response and prints to console)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t <input type=\"text\" name=\"q\">\n\t\t <input type=\"submit\">\n\n\t\t</form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tmessage := r.FormValue(\"message\")\n\t\t\tfmt.Println(\"Received message:\", message)\n\t\t}\n\t\tfmt.Fprintf(w, \"<h1>Submit Form</h1><form method=\\\"POST\\\"><input type=\\\"text\\\" name=\\\"message\\\" /><button type=\\\"submit\\\">Send</button></form>\")\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and starts an HTTP server listening on port 8080.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response.\n- `r *http.Request` - Represents the HTTP request received from the client.\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles form submissions and displays the submitted value. The server should respond to both GET and POST requests on the root path (\"/\") and render an HTML form with a checkbox input.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path (\"/\"). The handler processes form submissions, extracts the form value, and returns an HTML response containing the form and the submitted value.\n\nInput: None (The function takes no direct input parameters. Input is received through HTTP requests.)\n\nOutput: None (The function doesn't return any value. Output is sent through the HTTP response writer.)\n\nNote: The function internally uses http.ResponseWriter to send responses and *http.Request to receive requests. The handler checks for a form value with key \"q\" and includes it in the response. The server listens on port 9000.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t<input type=\"checkbox\" name=\"q\">\n\t\t<input type=\"submit\">\n\n\t\t</form>`+val)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tq := r.FormValue(\"q\")\n\t\t\tfmt.Fprintf(w, `<html><body>\n\t\t\t\t<form method=\"POST\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"q\" value=\"1\"> Check me\n\t\t\t\t\t<input type=\"submit\">\n\t\t\t\t</form>\n\t\t\t\t<p>Submitted value: %s</p>\n\t\t\t</body></html>`, q)\n\t\t} else {\n\t\t\tfmt.Fprintf(w, `<html><body>\n\t\t\t\t<form method=\"POST\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"q\" value=\"1\"> Check me\n\t\t\t\t\t<input type=\"submit\">\n\t\t\t\t</form>\n\t\t\t</body></html>`)\n\t\t}\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with \"hello world\".\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. The handler writes \"hello world\" as the response. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters; requests are handled via HTTP)\n\nOutput: None (The function doesn't return anything; responses are written to the http.ResponseWriter)\n\nNote: The reference code shows a complete implementation where:\n1. A handler function is defined to write \"hello world\" response\n2. The handler is registered for the root path \"/\"\n3. The server starts listening on port 8080",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nvar myHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\"hello world\")) })\n\nfunc main() {\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport \"net/http\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"hello world\"))\n\t})\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a function that serves Prometheus metrics via an HTTP server, updating custom metrics (uptime and packet count) on each request.\n\nFunction Description: The ServeMetricsAt function starts an HTTP server to expose Prometheus metrics. It registers custom metrics (uptime and packet count), updates them on each request to the metrics endpoint, and serves the metrics using the Prometheus HTTP handler. The function runs the server in a goroutine to avoid blocking the main program.\n\nInput:\n- addr (string): The network address (including port) where the metrics server should listen (e.g., \":8080\")\n- c (*collector.Collector): A pointer to a collector instance used to get the current packet count (can be nil)\n\nOutput: None (the function runs indefinitely in a background goroutine)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\n\t\"github.com/dreadl0ck/netcap/collector\"\n)\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tprometheus.MustRegister(upTime)\n\tprometheus.MustRegister(numPackets)\n\n\tfmt.Println(\"starting to serve metrics at:\", addr+metricsRoute)\n\n\tgo func() {\n\t\tmetricsHandler := promhttp.Handler()\n\n\t\thttp.HandleFunc(metricsRoute, func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupTime.WithLabelValues().Set(math.RoundToEven(time.Since(startTime).Seconds())\n\n\t\t\tif c != nil {\n\t\t\t\tnumPackets.WithLabelValues().Set(float64(c.GetNumPackets()))\n\t\t\t}\n\n\t\t\tmetricsHandler.ServeHTTP(w, r)\n\t\t})\n\t\tlog.Fatal(\"failed to serve metrics: \", http.ListenAndServe(addr, nil))\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc ServeMetricsAt(addr string, c *Collector) {\n\tvar (\n\t\tuptime = prometheus.NewGauge(prometheus.GaugeOpts{\n\t\t\tName: \"service_uptime_seconds\",\n\t\t\tHelp: \"Service uptime in seconds.\",\n\t\t})\n\t\tpacketCount = prometheus.NewGauge(prometheus.GaugeOpts{\n\t\t\tName: \"packets_total\",\n\t\t\tHelp: \"Total number of packets.\",\n\t\t})\n\t)\n\tprometheus.MustRegister(uptime, packetCount)\n\n\tstartTime := time.Now()\n\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuptime.Set(float64(time.Since(startTime).Seconds()))\n\t\tif c != nil {\n\t\t\tpacketCount.Set(float64(c.GetPacketCount()))\n\t\t}\n\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t})\n\n\tgo func() {\n\t\t_ = http.ListenAndServe(addr, nil)\n\t}()\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a Go HTTP server that implements WebDAV functionality with custom logging and special handling for specific HTTP headers.\n\nStruct Description: The webdav.Handler struct provides WebDAV server functionality with in-memory storage for files and locks. We'll wrap this with custom request handling.\n\nFields:\n- FileSystem: webdav.FileSystem - In-memory filesystem implementation\n- LockSystem: webdav.LockSystem - In-memory lock system implementation\n- Logger: func(*http.Request, error) - Custom logging function for request tracking\n\nMethods:\n- ServeHTTP: (http.ResponseWriter, *http.Request) -> () - Main handler method that processes HTTP requests\n- NewMemFS: () -> webdav.FileSystem - Creates new in-memory filesystem\n- NewMemLS: () -> webdav.LockSystem - Creates new in-memory lock system\n\nAdditional Functions:\n- main: () -> () - Entry point that sets up the server and routes\n- requestHandler: (http.ResponseWriter, *http.Request) -> () - Custom middleware for special header handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/webdav\"\n)\n\nfunc main() {\n\tfs := webdav.NewMemFS()\n\tls := webdav.NewMemLS()\n\thandler := &webdav.Handler{\n\t\tFileSystem: fs,\n\t\tLockSystem: ls,\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlog.Printf(\"Request: %s %s, Error: %v\", r.Method, r.URL.Path, err)\n\t\t},\n\t}\n\thttp.Handle(\"/\", requestHandler(handler))\n\tlog.Println(\"Starting server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc requestHandler(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Custom-Header\") == \"SpecialValue\" {\n\t\t\tw.Header().Set(\"X-Response-Header\", \"CustomHeaderProcessed\")\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a Go HTTP server that handles user sessions through cookies, specifically managing a session ID cookie that can be updated with a user's email address via form submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both displaying a form and processing form submissions. It manages a session cookie named \"session-id\" which initially has no value but can be updated with the user's email when submitted through the form. The function writes an HTML response containing the current cookie value and a form for submitting an email address.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests which may contain form data in the \"email\" field)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 9000 and responds to requests with HTML content and cookie operations)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"session-id\")\n\t\tif err != nil {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName: \"session-id\",\n\t\t\t}\n\t\t}\n\n\t\tif req.FormValue(\"email\") != \"\" {\n\t\t\tcookie.Value = req.FormValue(\"email\")\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, `<!DOCTYPE html>\n<html>\n  <body>\n    <form>\n    `+cookie.Value+`\n      <input type=\"email\" name=\"email\">\n      <input type=\"submit\">\n    </form>\n  </body>\n</html>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"html\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"session-id\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{Name: \"session-id\", Value: \"\"}\n\t\t} else if err != nil {\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\terr := r.ParseForm()\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"Bad Request\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tcookie.Value = r.FormValue(\"email\")\n\t\t}\n\n\t\thttp.SetCookie(w, cookie)\n\n\t\thtmlResponse := `\n\t\t<html>\n\t\t\t<body>\n\t\t\t\t<p>Current Session ID: ` + html.EscapeString(cookie.Value) + `</p>\n\t\t\t\t<form method=\"POST\">\n\t\t\t\t\t<input type=\"text\" name=\"email\" placeholder=\"Enter email\">\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\">\n\t\t\t\t</form>\n\t\t\t</body>\n\t\t</html>\n\t`\n\t\tw.Write([]byte(htmlResponse))\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with plain text.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes a plain text response (\"Dog\") to the client. The handler also sets the Content-Type header to \"text/plain\".\n\nInput: None (The function takes no direct input parameters; it handles HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return anything; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tres.Header()[\"Content-Type\"] = []string{\"text/plain\"}\n\t\tfmt.Fprint(res, \"Dog\")\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport \"net/http\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tw.Write([]byte(\"Dog\"))\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server to serve web content, including handling specific routes for examples and serving static files.\n\nFunction Description: The `serve` function initializes an HTTP server that handles multiple routes. It serves a home page, handles requests for WASM execution files, and processes example-related routes with dynamic content generation. The function uses Go's `net/http` package to create routes and serve content, including HTML templates and static files.\n\nInput: \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput:\n- `error`: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nThe function performs these key operations:\n1. Loads example data using `getExamples()`\n2. Sets up template handling for the home page and example pages\n3. Configures route handlers for:\n   - Root path (\"/\") serving the home page\n   - WASM execution file (\"/wasm_exec.js\")\n   - Example paths (\"/example/[type]/[link]/...\")\n4. Starts the HTTP server on the specified address",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\thomeTemplate := template.Must(template.ParseFiles(\"index.html\"))\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\turl := r.URL.Path\n\t\tif url == \"/wasm_exec.js\" {\n\t\t\thttp.FileServer(http.Dir(filepath.Join(build.Default.GOROOT, \"misc/wasm/\"))).ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(url, \"/\")\n\t\tif len(parts) > 4 &&\n\t\t\tparts[1] == \"example\" {\n\t\t\texampleType := parts[2]\n\t\t\texampleLink := parts[3]\n\t\t\tfor _, example := range *examples {\n\t\t\t\tif example.Link != exampleLink {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfiddle := filepath.Join(exampleLink, \"jsfiddle\")\n\t\t\t\tif len(parts[4]) != 0 {\n\t\t\t\t\thttp.StripPrefix(\"/example/\"+exampleType+\"/\"+exampleLink+\"/\", http.FileServer(http.Dir(fiddle))).ServeHTTP(w, r)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\ttemp := template.Must(template.ParseFiles(\"example.html\"))\n\t\t\t\t_, err := temp.ParseFiles(filepath.Join(fiddle, \"demo.html\"))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tdata := struct {\n\t\t\t\t\t*Example\n\t\t\t\t\tJS bool\n\t\t\t\t}{\n\t\t\t\t\texample,\n\t\t\t\t\texampleType == \"js\",\n\t\t\t\t}\n\n\t\t\t\terr = temp.Execute(w, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\terr := homeTemplate.Execute(w, examples)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype Example struct {\n\tType  string\n\tLink  string\n\t// Assume other fields as needed\n}\n\nfunc serve(addr string) error {\n\texamples, err := getExamples()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttmpl, err := template.ParseFiles(\"home.html\", \"example.html\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tif err := tmpl.ExecuteTemplate(w, \"home.html\", examples); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t})\n\n\thttp.HandleFunc(\"/wasm_exec.js\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.ServeFile(w, r, \"wasm_exec.js\")\n\t})\n\n\thttp.HandleFunc(\"/example/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tpath := strings.TrimPrefix(r.URL.Path, \"/example/\")\n\t\tparts := strings.SplitN(path, \"/\", 2)\n\t\tif len(parts) < 2 {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\ttyp, link := parts[0], parts[1]\n\t\tvar example *Example\n\t\tfor _, e := range examples {\n\t\t\tif e.Type == typ && e.Link == link {\n\t\t\t\texample = &e\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif example == nil {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tif err := tmpl.ExecuteTemplate(w, \"example.html\", example); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t})\n\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"static\"))))\n\n\tlog.Println(\"Server started on\", addr)\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes with different authentication methods (Basic Auth and Bearer Token) and serves Prometheus metrics on authenticated endpoints.\n\nFunction Description: The main function sets up an HTTP server with three routes:\n1. Root (\"/\") route with a basic handler\n2. \"/metrics\" route protected by Basic Authentication\n3. \"/bearer-metrics\" route protected by Bearer Token authentication\nThe server listens on port 8080 and uses the net/http package for HTTP operations.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The implementation assumes the existence of two helper functions:\n1. checkBasicAuth(w http.ResponseWriter, r *http.Request) bool\n2. checkBearerAuth(w http.ResponseWriter, r *http.Request) bool\nwhich handle the respective authentication methods.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBasicAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Basic realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBearerAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Bearer realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\taddress := \":8080\"\n\n\t_ = http.ListenAndServe(address, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, world!\")\n\t})\n\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif !checkBasicAuth(w, r) {\n\t\t\treturn\n\t\t}\n\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t})\n\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif !checkBearerAuth(w, r) {\n\t\t\treturn\n\t\t}\n\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles multiple routes with different functionalities, including a root route, a route to display request headers, and a route to show build information.\n\nFunction Description: The HTTP server will respond to different endpoints with specific behaviors:\n1. Root endpoint (\"/\") returns a greeting message\n2. \"/headers\" endpoint returns all request headers\n3. \"/api/buildstamp\" endpoint returns build information\n\nInput: \n- HTTP requests to specified endpoints (/, /headers, /api/buildstamp)\n- BuildStamp string variable containing build information\n\nOutput: \n- For \"/\": Plain text response \"hello, my name is Go~~\"\n- For \"/headers\": List of all request headers in \"name: value\" format\n- For \"/api/buildstamp\": Current value of BuildStamp variable\n- HTTP responses through the http.ResponseWriter interface",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar BuildStamp = \"No Build Stamp Provided\"\n\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello, my name is Go~~\\n\")\n}\n\nfunc headers(w http.ResponseWriter, req *http.Request) {\n\tfor name, headers := range req.Header {\n\t\tfor _, h := range headers {\n\t\t\tfmt.Fprintf(w, \"%v: %v\\n\", name, h)\n\t\t}\n\t}\n}\n\nfunc buildStamp(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"%s\", BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.HandleFunc(\"/api/buildstamp\", buildStamp)\n\thttp.HandleFunc(\"/headers\", headers)\n\n\thttp.ListenAndServe(\":20219\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar BuildStamp = \"Build information goes here\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"hello, my name is Go~~\")\n\t})\n\n\thttp.HandleFunc(\"/headers\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfor k, v := range r.Header {\n\t\t\tfmt.Fprintf(w, \"%s: %s\\n\", k, strings.Join(v, \", \"))\n\t\t}\n\t})\n\n\thttp.HandleFunc(\"/api/buildstamp\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"%s\", BuildStamp)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- port [int] - The port number on which the HTTP server should listen\n\nOutput:\n- [chan string] - A channel that will receive the SDP data from incoming HTTP requests",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tch := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tbody, _ := io.ReadAll(r.Body)\n\t\t\tch <- string(body)\n\t\t\tw.Write([]byte(\"done\"))\n\t\t} else {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t}\n\t})\n\tgo func() {\n\t\thttp.ListenAndServe(\":\"+strconv.Itoa(port), nil)\n\t}()\n\treturn ch\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles requests to the root path (\"/\") and returns a welcome message combined with a predefined string variable and a version string.\n\nFunction Description: The main function sets up a basic HTTP server that listens on port 8080. It registers a handler function for the root path (\"/\") which writes a welcome message concatenated with a local string variable and a package-level version string to the response.\n\nInput: None (The HTTP server listens for incoming requests on the specified port)\n\nOutput: None (The function runs indefinitely, serving HTTP responses. The handler writes output to the http.ResponseWriter)\n\nNote: The reference code is at the package level (main package) rather than being encapsulated in a struct or class. The instruction follows the function-level format as requested.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\ta := \"hello \"\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"Welcome to my website! \", a, v)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar version = \"v1.0.0\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tmsg := \"Hello from Go server\"\n\t\t_, _ = fmt.Fprintf(w, \"Welcome! %s | App Version: %s\", msg, version)\n\t})\n\t_ = http.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a function that starts a debug HTTP server with various endpoints for monitoring and debugging purposes, including standard debug endpoints (pprof, metrics, trace) and custom endpoints.\n\nFunction Description: The function `Start` initializes and launches an HTTP server with multiple debugging and monitoring endpoints. It sets up handlers for standard endpoints like pprof, expvar, trace, and metrics, along with any additional custom endpoints provided. The server runs on a predefined address and serves an index page with links to all available endpoints.\n\nInput: \n- `extra ...Endpoint`: Variadic parameter accepting zero or more custom endpoint objects. Each Endpoint should have:\n  - `Path`: string - The URL path for the endpoint\n  - `Name`: string - Display name for the endpoint\n  - `Handler`: http.Handler - The handler function for the endpoint\n\nOutput: None (the function runs indefinitely serving HTTP requests, or returns if no address is configured)\n\nNote: The function uses package-level variables (not shown in the reference code) including `addr` for the server address, and assumes the existence of handler functions like `expvarHandler`, `gcHandler`, and `freeOSMemoryHandler`.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n\t\"strings\"\n\n\t\"golang.org/x/net/trace\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\treturn\n\t}\n\n\tpp := http.NewServeMux()\n\tindex := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(`\n\t\t\t\t<a href=\"vars\">Vars</a><br>\n\t\t\t\t<a href=\"debug/pprof/\">PProf</a><br>\n\t\t\t\t<a href=\"metrics\">Metrics</a><br>\n\t\t\t\t<a href=\"debug/requests\">Requests</a><br>\n\t\t\t\t<a href=\"debug/events\">Events</a><br>\n\t\t\t`))\n\t\tfor _, e := range extra {\n\t\t\tfmt.Fprintf(w, `<a href=\"%s\">%s</a><br>`, strings.TrimPrefix(e.Path, \"/\"), e.Name)\n\t\t}\n\t\tw.Write([]byte(`\n\t\t\t\t<br>\n\t\t\t\t<form method=\"post\" action=\"gc\" style=\"display: inline;\"><input type=\"submit\" value=\"GC\"></form>\n\t\t\t\t<form method=\"post\" action=\"freeosmemory\" style=\"display: inline;\"><input type=\"submit\" value=\"Free OS Memory\"></form>\n\t\t\t`))\n\t})\n\tpp.Handle(\"/\", index)\n\tpp.Handle(\"/debug\", index)\n\tpp.Handle(\"/vars\", http.HandlerFunc(expvarHandler))\n\tpp.Handle(\"/gc\", http.HandlerFunc(gcHandler))\n\tpp.Handle(\"/freeosmemory\", http.HandlerFunc(freeOSMemoryHandler))\n\tpp.Handle(\"/debug/pprof/\", http.HandlerFunc(pprof.Index))\n\tpp.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(pprof.Cmdline))\n\tpp.Handle(\"/debug/pprof/profile\", http.HandlerFunc(pprof.Profile))\n\tpp.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(pprof.Symbol))\n\tpp.Handle(\"/debug/pprof/trace\", http.HandlerFunc(pprof.Trace))\n\tpp.Handle(\"/debug/requests\", http.HandlerFunc(trace.Traces))\n\tpp.Handle(\"/debug/events\", http.HandlerFunc(trace.Events))\n\tpp.Handle(\"/metrics\", promhttp.Handler())\n\tfor _, e := range extra {\n\t\tpp.Handle(e.Path, e.Handler)\n\t}\n\tlog.Println(\"warning: could not start debug HTTP server:\", http.ListenAndServe(addr, pp))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n)\n\ntype Endpoint struct {\n\tPath    string\n\tName    string\n\tHandler http.Handler\n}\n\nvar addr string\n\nvar expvarHandler http.Handler\nvar traceHandler http.Handler\nvar metricsHandler http.Handler\nvar gcHandler func(w http.ResponseWriter, r *http.Request)\nvar freeOSMemoryHandler func(w http.ResponseWriter, r *http.Request)\n\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\treturn\n\t}\n\n\tstandardEndpoints := []Endpoint{\n\t\t{Path: \"/debug/pprof/\", Name: \"pprof\", Handler: http.HandlerFunc(pprof.Index)},\n\t\t{Path: \"/debug/vars\", Name: \"expvar\", Handler: expvarHandler},\n\t\t{Path: \"/debug/trace\", Name: \"trace\", Handler: traceHandler},\n\t\t{Path: \"/debug/metrics\", Name: \"metrics\", Handler: metricsHandler},\n\t\t{Path: \"/debug/gc\", Name: \"GC\", Handler: http.HandlerFunc(gcHandler)},\n\t\t{Path: \"/debug/freemem\", Name: \"Free OS Memory\", Handler: http.HandlerFunc(freeOSMemoryHandler)},\n\t}\n\n\tallEndpoints := append(standardEndpoints, extra...)\n\n\tfor _, ep := range allEndpoints {\n\t\thttp.Handle(ep.Path, ep.Handler)\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"<html><body><h1>Debug Endpoints</h1><ul>\")\n\t\tfor _, ep := range allEndpoints {\n\t\t\tfmt.Fprintf(w, \"<li><a href='%s'>%s</a></li>\", ep.Path, ep.Name)\n\t\t}\n\t\tfmt.Fprintf(w, \"</ul></body></html>\")\n\t})\n\n\tlog.Printf(\"Starting debug server on %s\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with \"Hello World!\" to all requests on the root path.\n\nFunction Description: The main function sets up an HTTP server that handles requests to the root path (\"/\") by responding with a \"Hello World!\" message. It uses the net/http package to register a handler function and start the server.\n\nInput: None (The function takes no direct input parameters, but the HTTP server will process incoming HTTP requests)\n\nOutput: None (The function doesn't return anything directly, but it will output \"Hello World!\" as an HTTP response to requests, and may output error messages to the log if the server fails to start)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with a simple greeting message to all incoming requests.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles all incoming requests. When a request is received, it writes a \"Hello!\" response. The server listens on port 80 and logs any errors that occur during startup.\n\nInput: None (The function takes no direct input parameters; configuration is hardcoded)\n\nOutput: None (The function doesn't return anything directly but starts a long-running HTTP server process that handles incoming requests and writes responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log/slog\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\tlog.Info(\"Starting server at port 80\")\n\tif err := http.ListenAndServe(\":80\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\tlog.Fatal(http.ListenAndServe(\":80\", nil))\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when a request is received. The server listens on port 8080.\n\nInput:  \n- `w http.ResponseWriter`: Used to construct the HTTP response.  \n- `r *http.Request`: Contains information about the incoming HTTP request.  \n\nOutput:  \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response body. No explicit return value.  \n\nExample usage:  \n```go\nhttp.HandleFunc(\"/\", handler)  \nhttp.ListenAndServe(\":8080\", nil)  \n```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Hello World, I'm Golang!\"))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a multipart form and displays an upload form to the client.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form for file uploads. For POST requests, it processes the uploaded file. The server listens on port 9000.\n\nInput: \n- None (The function takes no direct input parameters, but handles HTTP requests with:\n  - GET requests to \"/\" path\n  - POST requests with multipart/form-data containing a file under the \"q\" field)\n\nOutput:\n- For GET requests: Returns HTML form for file upload (content-type: text/html)\n- For POST requests: Processes the uploaded file (prints file info to console)\n- Server runs continuously on port 9000 until terminated",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tfile, hdr, err := req.FormFile(key)\n\t\tfmt.Println(file, hdr, err)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"q\">\n      <input type=\"submit\">\n    </form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t\tfmt.Fprintf(w, `<form method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"q\" required>\n  <input type=\"submit\" value=\"Upload\">\n</form>`)\n\t\t\treturn\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20)\n\t\t\tfile, handler, err := r.FormFile(\"q\")\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, \"File upload failed\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\tcontentType := handler.Header.Get(\"Content-Type\")\n\t\t\tbuf := make([]byte, 512)\n\t\t\tn, _ := file.Read(buf)\n\t\t\tpreview := buf[:n]\n\n\t\t\tfmt.Fprintf(os.Stdout, \"File: %s | Size: %d | Type: %s | Preview: %x\\n\", \n\t\t\t\thandler.Filename, handler.Size, contentType, preview)\n\t\t\tfmt.Fprintf(w, \"File uploaded successfully: %s\", handler.Filename)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server with instrumented handlers for metrics collection using Prometheus. The function should register routes for metrics and a custom endpoint, apply middleware for context handling, and instrument handlers with counters and histograms.\n\nFunction Description: The function ExampleInstrumentHandlerWithLabelResolver demonstrates how to create an HTTP server with Prometheus instrumentation. It sets up counter and histogram metrics, creates handlers for specific routes, applies middleware to extract headers into context, and starts the server on port 3000. The function doesn't take any explicit parameters but relies on package-level configurations.\n\nInput: None (uses package-level constants and variables)\n\nOutput: None (starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\nfunc ExampleInstrumentHandlerWithLabelResolver() {\n\tcounter := prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"api_requests_total\",\n\t\t\tHelp: \"A counter for requests to the wrapped handler.\",\n\t\t},\n\t\t[]string{\"code\", \"method\", \"myheader\"},\n\t)\n\n\tduration := prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:    \"request_duration_seconds\",\n\t\t\tHelp:    \"A histogram of latencies for requests.\",\n\t\t\tBuckets: []float64{.25, .5, 1, 2.5, 5, 10},\n\t\t},\n\t\t[]string{\"handler\", \"method\", \"myheader\"},\n\t)\n\n\tpullHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Pull\"))\n\t})\n\n\topts := WithLabelFromCtx(\"myheader\",\n\t\tfunc(ctx context.Context) string {\n\t\t\treturn ctx.Value(CtxResolverKey).(string)\n\t\t},\n\t)\n\n\tpullChain := InstrumentHandlerDuration(duration.MustCurryWith(prometheus.Labels{\"handler\": \"pull\"}),\n\t\tInstrumentHandlerCounter(counter, pullHandler, opts),\n\t\topts,\n\t)\n\n\tmiddleware := func(next http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tctx := context.WithValue(r.Context(), CtxResolverKey, r.Header.Get(\"x-my-header\"))\n\n\t\t\tnext(w, r.WithContext(ctx))\n\t\t}\n\t}\n\n\thttp.Handle(\"/metrics\", Handler())\n\thttp.Handle(\"/pull\", middleware(pullChain))\n\n\tif err := http.ListenAndServe(\":3000\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nvar (\n\treqs = prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"http_requests_total\",\n\t\t\tHelp: \"Total number of HTTP requests.\",\n\t\t},\n\t\t[]string{\"method\", \"handler\", \"user_id\"},\n\t)\n\tlatency = prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName: \"http_request_latencies_seconds\",\n\t\t\tHelp: \"Latency distribution of HTTP requests.\",\n\t\t},\n\t\t[]string{\"method\", \"handler\", \"user_id\"},\n\t)\n)\n\nfunc ExampleInstrumentHandlerWithLabelResolver() {\n\tprometheus.MustRegister(reqs)\n\tprometheus.MustRegister(latency)\n\n\tcontextMiddleware := func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tuserID := r.Header.Get(\"X-User-ID\")\n\t\t\tctx := context.WithValue(r.Context(), \"user_id\", userID)\n\t\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t\t})\n\t}\n\n\tlabelResolver := func(r *http.Request) map[string]string {\n\t\tuserID, _ := r.Context().Value(\"user_id\").(string)\n\t\treturn map[string]string{\n\t\t\t\"user_id\": userID,\n\t\t}\n\t}\n\n\tcustomHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Hello, world!\"))\n\t})\n\n\tinstrumentedHandler := prometheus.InstrumentHandlerWithLabels(\n\t\treqs,\n\t\tlatency,\n\t\tlabelResolver,\n\t\tcontextMiddleware(customHandler),\n\t)\n\n\thttp.Handle(\"/custom\", instrumentedHandler)\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\thttp.ListenAndServe(\":3000\", nil)\n}"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when the server receives a request to that path.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response back to the client.\n- `r *http.Request` - Contains information about the incoming HTTP request (not used in this simple example).\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the response writer (`w`), which is sent back to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Hello World, I'm Golang!\\n\"))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Create a function that implements a basic HTTP server which echoes back the request body to the response.\n\nFunction Description: The function `httpserver` starts an HTTP server on the specified address. It handles all incoming requests to the root path (\"/\") by copying the request body directly to the response writer. This effectively echoes back the received data to the client. The server runs until an error occurs or is manually stopped.\n\nInput:  \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\").\n\nOutput:  \n- `error`: Returns an error if the server fails to start or encounters a fatal error during operation. Returns nil if the server is terminated gracefully.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tio.Copy(w, req.Body)\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tio.Copy(w, r.Body)\n\t})\n\treturn http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- `port` [int] - The port number on which the HTTP server should listen.\n\nOutput:\n- `chan string` - A channel that will receive the SDP data from incoming HTTP requests.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tch := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"POST\" {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tch <- string(body)\n\t\tw.Write([]byte(\"done\"))\n\t})\n\tgo func() {\n\t\t_ = http.ListenAndServe(\":\"+strconv.Itoa(port), nil)\n\t}()\n\treturn ch\n}"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and responds with the requested URL path.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes the requested URL path as plain text in the response.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return any value; it continuously serves HTTP requests until terminated)\n\nNote: The handler function takes two parameters:\n1. res http.ResponseWriter - used to write the HTTP response\n2. req *http.Request - contains information about the incoming request",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprint(res, req.URL.Path)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport \"net/http\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tw.Write([]byte(r.URL.Path))\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a basic HTTP server in Go that echoes back the request headers to the client. The server should handle requests on the root path (\"/\") and respond by writing the request headers to the response.\n\nFunction Description: The `ServeHTTP` function is an HTTP handler that writes the request headers to the response writer. It is registered to handle requests on the root path (\"/\") and starts an HTTP server listening on `127.0.0.1:8080`.\n\nInput: \n- `w http.ResponseWriter`: Used to construct the HTTP response.\n- `r *http.Request`: Contains the incoming HTTP request details, including headers.\n\nOutput: None (writes directly to the `http.ResponseWriter`).",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tr.Header.Write(w)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport \"net/http\"\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(r.Header.String()))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)\n}"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a basic HTTP server in Go that serves a template-based web page and handles requests on a configurable port.\n\nFunction Description: The main function sets up an HTTP server with a root route handler that renders a template. It configures the server port from environment variables with a default fallback, then starts the server.\n\nInput: \n- Environment variable \"PORT\" (optional): Specifies the port number to listen on\n- Template file \"todos/index.jet\": The template to be rendered and served\n\nOutput:\n- HTTP server running on the specified port, serving the rendered template at the root path (\"/\")\n- Log output indicating the server's running status and any template errors\n\nNote: The reference code shows the implementation but doesn't explicitly define separate functions for each operation. The main function combines:\n1. Route handling (with template rendering)\n2. Port configuration\n3. Server startup",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tview, err := views.GetTemplate(\"todos/index.jet\")\n\t\tif err != nil {\n\t\t\tlog.Println(\"Unexpected template err:\", err.Error())\n\t\t}\n\t\tview.Execute(w, nil, todos)\n\t})\n\n\tport := os.Getenv(\"PORT\")\n\tif len(port) == 0 {\n\t\tport = \":8080\"\n\t} else if !strings.HasPrefix(\":\", port) {\n\t\tport = \":\" + port\n\t}\n\n\tlog.Println(\"Serving on \" + port)\n\thttp.ListenAndServe(port, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"text/template\"\n)\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\ttmpl, err := template.ParseFiles(\"todos/index.jet\")\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error parsing template: %v\", err)\n\t\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tif err := tmpl.Execute(w, nil); err != nil {\n\t\t\tlog.Printf(\"Error executing template: %v\", err)\n\t\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\t}\n\t})\n\n\taddr := \":\" + port\n\tlog.Printf(\"Server is running on port %s\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles multiple routes with different response messages.\n\nFunction Description: The code demonstrates how to set up a simple HTTP server with two route handlers. The first handler responds to the root path (\"/\") with a \"doggy\" message, while the second handler responds to the \"/cat/\" path with a \"catty\" message. The server listens on port 9000.\n\nInput: \n- None (HTTP requests are automatically handled by the server)\n\nOutput: \n- None (The server writes responses directly to the http.ResponseWriter)\n\nMethods:\n- upTown: Handles requests to the root path (\"/\") and writes \"doggy doggy doggy\" to the response\n- youUp: Handles requests to the \"/cat/\" path and writes \"catty catty catty\" to the response\n- main: Registers the route handlers and starts the HTTP server on port 9000",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc upTown(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"doggy doggy doggy\")\n}\n\nfunc youUp(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport \"net/http\"\n\nfunc upTown(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"doggy doggy doggy\"))\n}\n\nfunc youUp(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"catty catty catty\"))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a Go HTTP server that serves PNG images generated by a package function.\n\nFunction Description: The main function sets up a basic HTTP server that responds to requests at the root path (\"/\") by generating a PNG image using an external package function and serving it with the correct content type.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the http.ResponseWriter and *http.Request parameters in the handler function)\n\nOutput: None (The function doesn't return any value but serves HTTP responses with PNG image data)",
    "Canonical_solution": "import (\n    \"fmt\"\n    \"net/http\"\n    \"io\"\n    \"bytes\"\n    \"davidhampgonsalves/lifedashboard/pkg\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        png := pkg.Generate();\n        w.Header().Set(\"Content-Type\", \"image/png\")\n        io.Copy(w, bytes.NewBuffer(png))\n    })\n\n    fmt.Println(\"Server listening on http://localhost:8080\")\n    http.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"image\"\n\t\"image/color\"\n\t\"image/draw\"\n\t\"image/png\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\timg := image.NewRGBA(image.Rect(0, 0, 200, 200))\n\tdraw.Draw(img, img.Bounds(), &image.Uniform{color.RGBA{255, 0, 0, 255}}, image.ZP, draw.Src)\n\tw.Header().Set(\"Content-Type\", \"image/png\")\n\tpng.Encode(w, img)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebDAV requests with custom logging and special handling for certain Litmus test cases.\n\nFunction Description: The main function sets up a WebDAV server with in-memory storage (MemFS) and in-memory locking (MemLS). It includes custom logging for WebDAV operations and special handling for a specific Litmus test case (\"props: 3 (propfind_invalid2)\"). The server listens on a specified port and handles all incoming HTTP requests.\n\nInput: None (though the code uses a command-line flag for port configuration which would be handled by the flag package)\n\nOutput: None (the function runs indefinitely as a server, but may log errors or fatal conditions)\n\nNote: The actual implementation shows the server uses a port flag (not shown in parameters) and produces log output, but these are side effects rather than formal outputs.\n\n---\n\nFor completeness, if we were to describe the webdav.Handler struct being used (though not explicitly defined in this code):\n\nStruct Description: webdav.Handler is a struct from golang.org/x/net/webdav that implements http.Handler for WebDAV protocol operations.\n\nFields:\nFileSystem: webdav.FileSystem - The underlying file system implementation\nLockSystem: webdav.LockSystem - The locking system implementation\nLogger: func(*http.Request, error) - Optional function for logging requests and errors\n\nMethods:\nServeHTTP: ServeHTTP(http.ResponseWriter, *http.Request) -> None - Main handler method that processes HTTP requests according to WebDAV protocol",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"golang.org/x/net/webdav\"\n)\n\nfunc main() {\n\tport := flag.String(\"port\", \"8080\", \"Port to listen on\")\n\tflag.Parse()\n\n\tfs := webdav.NewMemFS()\n\tls := webdav.NewMemLS()\n\n\thandler := webdav.Handler{\n\t\tFileSystem: fs,\n\t\tLockSystem: ls,\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tua := r.UserAgent()\n\t\t\tlog.Printf(\"WEBDAV %s %s User-Agent: %s Error: %v\", r.Method, r.URL.Path, ua, err)\n\t\t},\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif strings.Contains(r.UserAgent(), \"propfind_invalid2\") && r.Method == \"PROPFIND\" {\n\t\t\tw.WriteHeader(http.StatusMultiStatus)\n\t\t\treturn\n\t\t}\n\t\thandler.ServeHTTP(w, r)\n\t})\n\n\taddr := \":\" + *port\n\tlog.Printf(\"Server started on %s\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes middleware for request logging and rate limiting using Sentinel. The server should handle a GET request at the \"/test\" endpoint.\n\nFunction Description: The function sets up an Echo HTTP server with middleware for logging and rate limiting. The rate limiting is implemented using Sentinel middleware, which extracts the client's real IP from the request headers and applies a block fallback response when the rate limit is exceeded. The server listens on port 1323.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 1323.)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\nfunc Example() {\n\tr := echo.New()\n\tr.Use(middleware.Logger())\n\tr.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx echo.Context) string {\n\t\t\t\tif res, ok := ctx.Get(\"X-Real-IP\").(string); ok {\n\t\t\t\t\treturn res\n\t\t\t\t}\n\t\t\t\treturn \"\"\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx echo.Context) error {\n\t\t\t\treturn ctx.JSON(400, map[string]interface{}{\n\t\t\t\t\t\"err\":  \"too many requests; the quota used up\",\n\t\t\t\t\t\"code\": 10222,\n\t\t\t\t})\n\t\t\t}),\n\t\t),\n\t)\n\n\tr.GET(\"/test\", func(c echo.Context) error {\n\t\treturn nil\n\t})\n\tr.Logger.Fatal(r.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/core/flow\"\n\t\"github.com/alibaba/sentinel-golang/adapter/echo/middleware\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\t// Logging middleware\n\te.Use(middleware.Logger())\n\n\t// Initialize Sentinel\n\tif err := api.InitDefault(); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Load rate limiting rule\n\trule := &flow.Rule{\n\t\tResource: \"test\",\n\t\tThreshold: 10,\n\t\tStatIntervalMs: 1000,\n\t\tMetricType: flow.QPS,\n\t\tControlBehavior: flow.Reject,\n\t\tStrategy: flow.Origin,\n\t}\n\tif _, err := api.LoadRules([]*flow.Rule{rule}); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Configure Sentinel middleware\n\te.Use(middleware.Sentinel(middleware.SentinelConfig{\n\t\tResourceExtractor: func(c echo.Context) string {\n\t\t\tif c.Request().URL.Path == \"/test\" {\n\t\t\t\treturn \"test\"\n\t\t\t}\n\t\t\treturn \"default\"\n\t\t},\n\t\tOriginExtractor: func(c echo.Context) string {\n\t\t\trealIP := c.Request().Header.Get(\"X-Real-IP\")\n\t\t\tif realIP == \"\" {\n\t\t\t\trealIP = c.Request().Header.Get(\"X-Forwarded-For\")\n\t\t\t}\n\t\t\tif realIP == \"\" {\n\t\t\t\trealIP = c.Request().RemoteAddr\n\t\t\t}\n\t\t\treturn realIP\n\t\t},\n\t\tBlockHandler: func(c echo.Context, err error) error {\n\t\t\treturn c.JSON(http.StatusTooManyRequests, map[string]string{\"error\": \"Rate limit exceeded\"})\n\t\t},\n\t}))\n\n\t// Define endpoint\n\te.GET(\"/test\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"OK\")\n\t})\n\n\t// Start server\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes route handling, middleware integration, and JWT-based authentication for restricted routes.\n\nFunction Description: The main function initializes an Echo server, configures middleware (logger and recovery), sets up routes for login and accessible content, and creates a restricted route group with JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger route handlers)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately as they're referenced but not shown in the provided code.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tr.Use(middleware.JWT([]byte(\"secret\")))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recovery())\n\n\te.POST(\"/login\", loginHandler)\n\te.GET(\"/accessible\", accessibleHandler)\n\n\trestricted := e.Group(\"/restricted\")\n\trestricted.Use(middleware.JWTWithConfig(middleware.JWTConfig{\n\t\tSigningKey: []byte(\"secret\"),\n\t}))\n\trestricted.GET(\"/\", restrictedHandler)\n\n\te.Start(\":1323\")\n}\n\nfunc loginHandler(c echo.Context) error {\n\treturn nil\n}\n\nfunc accessibleHandler(c echo.Context) error {\n\treturn nil\n}\n\nfunc restrictedHandler(c echo.Context) error {\n\treturn nil\n}"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server using the Echo framework in Go, with basic middleware and a simple route handler.\n\nFunction Description: The function `StartHTTPServer` initializes a new Echo instance, adds logger and recovery middleware, registers a GET route handler for the root path (\"/\"), and starts the HTTP server on the specified address.\n\nInput:  \n- `address` (string): The network address (e.g., \":8080\") on which the HTTP server should listen.\n\nOutput:  \n- `error`: Returns an error if the server fails to start; otherwise, it blocks until the server is stopped.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\treturn e.Start(address)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recovery())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello from Echo\")\n\t})\n\treturn e.Start(address)\n}\n```"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that streams JSON-encoded location data with a delay between each transmission.\n\nFunction Description: The main function initializes an Echo server, sets up a GET route handler at the root path (\"/\") that streams location data as JSON with a 1-second delay between each location. The response uses proper HTTP headers for JSON content type and flushes after each location is sent.\n\nInput: None (The function takes no direct input parameters, but relies on a predefined 'locations' collection that should be available in scope)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"encoding/json\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\t\tfor _, l := range locations {\n\t\t\tif err := json.NewEncoder(c.Response()).Encode(l); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype Location struct {\n\tName string  `json:\"name\"`\n\tLat  float64 `json:\"lat\"`\n\tLng  float64 `json:\"lng\"`\n}\n\nvar locations = []Location{\n\t{Name: \"Home\", Lat: 37.7749, Lng: -122.4194},\n\t{Name: \"Work\", Lat: 34.0522, Lng: -118.2437},\n\t{Name: \"Park\", Lat: 40.7128, Lng: -74.0060},\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\tfor _, loc := range locations {\n\t\t\tjsonBytes, err := json.Marshal(loc)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tjsonBytes = append(jsonBytes, byte('\\n'))\n\t\t\tif _, err = c.Response().Writer.Write(jsonBytes); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves static files from an embedded filesystem using the go.rice package.\n\nFunction Description: The main function initializes an Echo web server, sets up route handlers for serving static files from an embedded directory (\"app\"), and starts the server on port 1323. The static files are served under the root path (\"/\") and a static prefix path (\"/static/*\").\n\nInput: None (The function takes no explicit parameters)\n\nOutput: None (The function doesn't return anything explicitly but starts an HTTP server that runs indefinitely until interrupted)\n\nNote: The reference code shows the complete implementation at the package level (main function) rather than as an isolated function or struct. The instruction follows the function-level format as the code primarily demonstrates functional behavior rather than object-oriented structure.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\trice \"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\tassetHandler := http.FileServer(rice.MustFindBox(\"app\").HTTPBox())\n\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static/\", assetHandler)))\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/GeertJohan/go.rice\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\tappBox := rice.MustFindBox(\"app\")\n\tappFS := http.FileServer(appBox.HTTPBox())\n\n\tstaticBox := rice.MustFindBox(\"app/static\")\n\tstaticFS := http.FileServer(staticBox.HTTPBox())\n\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static\", staticFS)))\n\te.GET(\"/*\", echo.WrapHandler(http.StripPrefix(\"\", appFS)))\n\n\te.Start(\":1323\")\n}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various routes with authentication middleware and serves different endpoints for application management.\n\nFunction Description: The `serve` function initializes and starts an HTTP server using the Echo framework. It sets up route handlers for various endpoints related to application management, including upload, installation, renaming, and deletion of apps. The function also implements authentication middleware (BasicAuth and KeyAuth) to secure certain endpoints. The server runs on the specified host and port.\n\nInput: \n- `host` (string): The host address where the server will run (e.g., \"localhost\" or \"0.0.0.0\")\n- `port` (uint64): The port number on which the server will listen (e.g., 8080)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error, at which point it logs the error and exits)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\n\tforcedBasicAuth := middleware.BasicAuth(func(username string, password string, c echo.Context) (bool, error) {\n\t\treturn username == config.Current.BasicAuth.Username && password == config.Current.BasicAuth.Password, nil\n\t})\n\tbasicAuth := func(f echo.HandlerFunc) echo.HandlerFunc {\n\t\tif config.Current.BasicAuth.Enable {\n\t\t\treturn forcedBasicAuth(f)\n\t\t} else {\n\t\t\treturn f\n\t\t}\n\t}\n\tworkflowKeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == config.Current.BuilderKey, nil\n\t})\n\n\te.GET(\"/\", renderIndex, basicAuth)\n\te.GET(\"/favicon.png\", getFavIcon, basicAuth)\n\te.POST(\"/apps\", uploadUnsignedApp, basicAuth)\n\te.GET(\"/apps/:id/install\", appResolver(renderInstall))\n\te.GET(\"/apps/:id/manifest\", appResolver(getManifest))\n\te.GET(\"/apps/:id/resign\", appResolver(resignApp), basicAuth)\n\te.GET(\"/apps/:id/delete\", appResolver(deleteApp), basicAuth)\n\te.GET(\"/apps/:id/rename\", appResolver(renderRenameApp), basicAuth)\n\te.POST(\"/apps/:id/rename\", appResolver(renameApp), basicAuth)\n\te.GET(\"/apps/:id/2fa\", appResolver(render2FAPage), basicAuth)\n\te.POST(\"/apps/:id/2fa\", appResolver(set2FA), basicAuth)\n\te.GET(\"/jobs\", getLastJob, workflowKeyAuth)\n\te.GET(\"/jobs/:id/2fa\", jobResolver(get2FA), workflowKeyAuth)\n\te.POST(\"/jobs/:id/signed\", jobResolver(uploadSignedApp), workflowKeyAuth)\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"*\"},\n\t\tAllowMethods: []string{http.MethodGet, http.MethodPost, http.MethodPatch, http.MethodDelete},\n\t}))\n\n\te.POST(\"/upload\", uploadHandler).Use(CombinedAuth())\n\te.POST(\"/install\", installHandler).Use(CombinedAuth())\n\te.PATCH(\"/rename\", renameHandler).Use(CombinedAuth())\n\te.DELETE(\"/delete\", deleteHandler).Use(CombinedAuth())\n\n\taddr := fmt.Sprintf(\"%s:%d\", host, port)\n\tif err := e.Start(addr); err != nil {\n\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}\n\nfunc CombinedAuth() echo.MiddlewareFunc {\n\treturn func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tuser, pass, ok := c.Request().BasicAuth()\n\t\t\tif ok && checkBasicAuth(user, pass) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t\tapiKey := c.Request().Header.Get(\"X-API-Key\")\n\t\t\tif checkKeyAuth(apiKey) {\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t\treturn echo.ErrUnauthorized\n\t\t}\n\t}\n}\n\nfunc checkBasicAuth(user, pass string) bool {\n\treturn user == \"admin\" && pass == \"secret\"\n}\n\nfunc checkKeyAuth(apiKey string) bool {\n\treturn apiKey == \"myapikey123\"\n}\n\nfunc uploadHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Upload successful\"})\n}\n\nfunc installHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Install successful\"})\n}\n\nfunc renameHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Rename successful\"})\n}\n\nfunc deleteHandler(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Delete successful\"})\n}"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves basic server information and runs on a configurable address.\n\nFunction Description: The main function initializes an Echo HTTP server, configures middleware for logging and compression, sets up a route handler for server information, and starts the server on the specified address.\n\nInput: \n- Command-line argument (optional): \"--addr\" to specify the server address (default: \"127.0.0.1:9090\")\n\nOutput: \n- Running HTTP server that responds to GET requests at \"/serverinfo\" with server hostname and address\n- No explicit return value (runs indefinitely until interrupted)\n\nNote: The reference code shows a complete implementation at the package level (main function) rather than a standalone function or struct level. The instruction follows the function-level format as the code primarily demonstrates functional behavior through the main function.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo\"\n\tmd \"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:9090\", \"addr for backend\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\tserver := echo.New()\n\tserver.Use(md.Logger())\n\tserver.Use(md.Gzip())\n\n\tserver.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thostname, _ := os.Hostname()\n\t\treturn c.String(http.StatusOK, hostname+\"\\n\"+*addr)\n\t})\n\n\tserver.Start(*addr)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n\t\"os\"\n\t\"flag\"\n)\n\nfunc main() {\n\tvar addr = flag.String(\"addr\", \"127.0.0.1:9090\", \"\")\n\tflag.Parse()\n\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thostname, _ := os.Hostname()\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"Hostname\": hostname,\n\t\t\t\"Address\":  *addr,\n\t\t})\n\t})\n\n\te.Start(*addr)\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests on two different endpoints (\"/request\" and \"/stream\") and serves over HTTPS.\n\nFunction Description: The main function initializes an Echo server instance, registers route handlers for two GET endpoints, and starts an HTTPS server using provided TLS certificate files.\n\nInput: None (The function takes no direct input parameters, but relies on external TLS certificate files \"cert.pem\" and \"key.pem\")\n\nOutput: None (The function doesn't return anything but starts a persistent HTTP server process)\n\nNote: The actual route handler functions (request and stream) would need to be implemented separately to handle the respective endpoints. The server will run indefinitely until interrupted, listening on port 1323 with TLS encryption.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/request\", request)\n\te.GET(\"/stream\", stream)\n\te.Logger.Fatal(e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/request\", request)\n\te.GET(\"/stream\", stream)\n\te.StartTLS(\":1323\", \"cert.pem\", \"key.pem\")\n}\n\nfunc request(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Request endpoint\")\n}\n\nfunc stream(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Stream endpoint\")\n}"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server using the Echo framework, supporting both HTTP/2 and HTTPS configurations, with customizable timeouts and root path handling.\n\nStruct Description: The Api struct represents an HTTP server configuration with support for TLS, HTTP/2, and customizable timeouts. It provides methods to start and stop the server gracefully.\n\nFields:\nport: int - The port number on which the server will listen\nbindIp: string - The IP address to bind the server to\ntlsCertFile: string - Path to TLS certificate file (empty for non-HTTPS)\ntlsKeyFile: string - Path to TLS private key file (empty for non-HTTPS)\ntimeout: time.Duration - Server timeout duration for read/write operations\nrootPath: string - The root path for the server's default route\nsrv: *echo.Echo - The Echo server instance\n\nMethods:\nStart: () -> error - Initializes and starts the HTTP server in a goroutine, supporting both TLS and HTTP/2 configurations. Returns nil on successful startup.\nStop: (ctx context.Context) -> error - Gracefully shuts down the server using the provided context. Returns any error that occurs during shutdown.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"golang.org/x/net/http2\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.HideBanner = true\n\ta.srv.HidePort = true\n\ta.srv.Server.ReadTimeout = a.timeout\n\ta.srv.Server.IdleTimeout = a.timeout\n\ta.srv.Server.WriteTimeout = a.timeout + a.timeout\n\n\ta.srv.GET(\n\t\ta.rootPath,\n\t\tfunc(c echo.Context) error {\n\t\t\treturn c.HTML(http.StatusOK, `Hey, Gotenberg has no UI, it's an API. Head to the <a href=\"https://gotenberg.dev\">documentation</a> to learn how to interact with it \ud83d\ude80`)\n\t\t},\n\t)\n\n\tgo func() {\n\t\tvar err error\n\t\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\t\terr = a.srv.StartTLS(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), a.tlsCertFile, a.tlsKeyFile)\n\t\t} else {\n\t\t\tserver := &http2.Server{}\n\t\t\terr = a.srv.StartH2CServer(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), server)\n\t\t}\n\t\tif !errors.Is(err, http.ErrServerClosed) {\n\t\t\ta.logger.Fatal(err.Error())\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Shutdown(ctx)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/labstack/gommon/log\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\te := echo.New()\n\ta.srv = e\n\n\te.Use(middleware.TimeoutWithConfig(middleware.TimeoutConfig{\n\t\tTimeout: a.timeout,\n\t}))\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, a.rootPath)\n\t})\n\n\te.Server.ReadTimeout = a.timeout\n\te.Server.WriteTimeout = a.timeout\n\n\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\tif _, err := os.Stat(a.tlsCertFile); os.IsNotExist(err) {\n\t\t\treturn fmt.Errorf(\"tls certificate file not found: %v\", err)\n\t\t}\n\t\tif _, err := os.Stat(a.tlsKeyFile); os.IsNotExist(err) {\n\t\t\treturn fmt.Errorf(\"tls key file not found: %v\", err)\n\t\t}\n\t\te.Server.TLSConfig = &tls.Config{\n\t\t\tMinVersion: tls.VersionTLS12,\n\t\t}\n\t}\n\n\taddr := fmt.Sprintf(\"%s:%d\", a.bindIp, a.port)\n\tgo func() {\n\t\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\t\tif err := e.StartTLS(addr, a.tlsCertFile, a.tlsKeyFile); err != nil {\n\t\t\t\te.Logger.Fatal(err)\n\t\t\t}\n\t\t} else {\n\t\t\tif err := e.Start(addr); err != nil {\n\t\t\t\te.Logger.Fatal(err)\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Shutdown(ctx)\n}"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic requests and includes middleware for processing statistics.\n\nStruct Description: The Stats struct is used to track and handle statistics for HTTP requests processed by the server.\n\nFields:\n- Count: [int] - Tracks the number of requests processed\n- StartTime: [time.Time] - Records the time when the server started processing requests\n\nMethods:\n- Process: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that increments the request count for each processed request\n- Handle: [func(c echo.Context) error] -> [error] - Handler function that returns the current statistics (request count and uptime) in JSON format\n- NewStats: [func() *Stats] -> [*Stats] - Constructor function that initializes a new Stats instance with default values\n\nAdditional Functions:\n- ServerHeader: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that adds a Server header to responses\n- main: [func()] -> [None] - Entry point that creates the Echo server, registers routes and middleware, and starts the server on port 1323",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Debug = true\n\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle)\n\n\te.Use(ServerHeader)\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"time\"\n\t\"sync\"\n\t\"net/http\"\n)\n\ntype Stats struct {\n\tCount     int\n\tStartTime time.Time\n\tmu        sync.Mutex\n}\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tCount:     0,\n\t\tStartTime: time.Now(),\n\t}\n}\n\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ts.mu.Lock()\n\t\ts.Count++\n\t\ts.mu.Unlock()\n\t\treturn next(c)\n\t}\n}\n\nfunc (s *Stats) Handle(c echo.Context) error {\n\ts.mu.Lock()\n\tcount := s.Count\n\tuptime := time.Since(s.StartTime)\n\ts.mu.Unlock()\n\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\"count\":  count,\n\t\t\"uptime\": uptime.String(),\n\t})\n}\n\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(\"Server\", \"Echo-Stats-Server\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\tstats := NewStats()\n\n\te.Use(ServerHeader)\n\te.Use(stats.Process)\n\n\te.GET(\"/hello\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.GET(\"/stats\", stats.Handle)\n\n\te.Start(\":1323\")\n}"
  }
]