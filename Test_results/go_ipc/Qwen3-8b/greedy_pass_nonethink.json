[
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles JSONP requests, serving dynamic JSON data wrapped in a callback function.\n\nFunction Description: The main function initializes an Echo server, sets up middleware for logging and recovery, serves static files from a \"public\" directory, and defines a route (\"/jsonp\") that responds to GET requests with JSONP-formatted data containing a response message, current timestamp, and random number.\n\nInput: None (The function takes no direct input parameters, but the \"/jsonp\" endpoint accepts an optional query parameter \"callback\" specifying the JSONP callback function name)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and serves responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tvar content struct {\n\t\t\tResponse  string    `json:\"response\"`\n\t\t\tTimestamp time.Time `json:\"timestamp\"`\n\t\t\tRandom    int       `json:\"random\"`\n\t\t}\n\t\tcontent.Response = \"Sent via JSONP\"\n\t\tcontent.Timestamp = time.Now().UTC()\n\t\tcontent.Random = rand.Intn(1000)\n\t\treturn c.JSONP(http.StatusOK, callback, &content)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(echo.MiddlewareLogger(e.Logger))\n\te.Use(echo.MiddlewareRecovery())\n\n\te.Static(\"/\", \"public\")\n\n\te.GET(\"/jsonp\", func(c echo.Context) error {\n\t\tcallback := c.QueryParam(\"callback\")\n\t\tif callback == \"\" {\n\t\t\treturn c.String(http.StatusBadRequest, \"Missing callback parameter\")\n\t\t}\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"message\":  \"Hello from JSONP\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t\t\"random\":   rand.Intn(1000),\n\t\t}\n\n\t\tjsonResponse, _ := echo.JSON.Marshal(data)\n\t\tresponse := fmt.Sprintf(\"%s(%s)\", callback, string(jsonResponse))\n\t\treturn c.String(http.StatusOK, response)\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic routes and includes middleware for logging and recovery.\n\nFunction Description: The main function initializes a new Echo instance, sets up middleware for logging and panic recovery, defines a route handler for the root path (\"/\"), and starts the HTTP server on port 1323.\n\nInput: None (The function takes no direct input parameters; configuration is done internally)\n\nOutput: None (The function does not return any value; it starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\\n\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tc.Logger().Info(\"Request received\")\n\t\t\treturn next(c)\n\t\t}\n\t})\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tc.Logger().Error(\"Recovered from panic:\", r)\n\t\t\t\t\tc.String(http.StatusInternalServerError, \"Internal Server Error\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\treturn next(c)\n\t\t}\n\t})\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles POST requests for two different endpoints (/tenhou and /majsoul) to process incoming data and forward it to respective receivers.\n\nStruct Description: The mjHandler struct is a request handler that processes incoming HTTP requests for the Tenhou and Majsoul game platforms, logging errors and forwarding data to appropriate receivers.\n\nFields:\n- log: echo.Logger - Logger for error and info logging\n- tenhouMessageReceiver: *tenhou.MessageReceiver - Receiver for Tenhou game messages\n- majsoulMessageQueue: chan []byte - Channel for buffering Majsoul game messages\n\nMethods:\n- analysisTenhou: (c echo.Context) -> error - Processes POST requests to /tenhou endpoint, reads request body, forwards data to tenhouMessageReceiver, and returns HTTP response\n- analysisMajsoul: (c echo.Context) -> error - Processes POST requests to /majsoul endpoint, reads request body, sends data to majsoulMessageQueue, and returns HTTP response\n\nFunction Description: The runServer function initializes and starts an HTTP server with configurable port and HTTPS options, setting up routes and middleware for the Echo framework.\n\nInput:\n- isHTTPS: bool - Flag indicating whether to use HTTPS\n- port: int - Port number for the server to listen on\n\nOutput:\n- error - Returns any error that occurs during server startup or operation",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/labstack/gommon/log\"\n\tstdLog \"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n)\n\ntype mjHandler struct {\n\tlog echo.Logger\n\n\ttenhouMessageReceiver *tenhou.MessageReceiver\n\tmajsoulMessageQueue   chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.tenhouMessageReceiver.Put(data)\n\treturn c.NoContent(http.StatusOK)\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tdata, err := ioutil.ReadAll(c.Request().Body)\n\tif err != nil {\n\t\th.logError(err)\n\t\treturn c.String(http.StatusBadRequest, err.Error())\n\t}\n\n\th.majsoulMessageQueue <- data\n\treturn c.NoContent(http.StatusOK)\n}\n\nvar h *mjHandler\n\nfunc runServer(isHTTPS bool, port int) (err error) {\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\te.StdLogger = stdLog.New(ioutil.Discard, \"\", 0)\n\te.Logger.SetLevel(log.INFO)\n\n\th = &mjHandler{\n\t\tlog:                   e.Logger,\n\t\ttenhouMessageReceiver: tenhou.NewMessageReceiver(),\n\t\tmajsoulMessageQueue:   make(chan []byte, 100),\n\t}\n\n\te.Use(middleware.Recover())\n\te.Use(middleware.CORS())\n\te.POST(\"/tenhou\", h.analysisTenhou)\n\te.POST(\"/majsoul\", h.analysisMajsoul)\n\n\taddr := \":\" + strconv.Itoa(port)\n\tif !isHTTPS {\n\t\terr = e.Start(addr)\n\t} else {\n\t\terr = startTLS(e, addr)\n\t}\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype mjHandler struct {\n\tlog                        echo.Logger\n\ttenhouMessageReceiver      *tenhou.MessageReceiver\n\tmajsoulMessageQueue        chan []byte\n}\n\nfunc (h *mjHandler) analysisTenhou(c echo.Context) error {\n\tbody, err := c.RequestBodyBytes()\n\tif err != nil {\n\t\th.log.Error(\"Error reading request body:\", err)\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Failed to read request body\"})\n\t}\n\tif err := h.tenhouMessageReceiver.Receive(body); err != nil {\n\t\th.log.Error(\"Error forwarding message to Tenhou receiver:\", err)\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to process Tenhou message\"})\n\t}\n\treturn c.NoContent(http.StatusOK)\n}\n\nfunc (h *mjHandler) analysisMajsoul(c echo.Context) error {\n\tbody, err := c.RequestBodyBytes()\n\tif err != nil {\n\t\th.log.Error(\"Error reading request body:\", err)\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Failed to read request body\"})\n\t}\n\th.majsoulMessageQueue <- body\n\treturn c.NoContent(http.StatusOK)\n}\n\nfunc runServer(isHTTPS bool, port int) error {\n\te := echo.New()\n\thandler := &mjHandler{\n\t\tlog:                        e.Logger,\n\t\ttenhouMessageReceiver:      &tenhou.MessageReceiver{},\n\t\tmajsoulMessageQueue:        make(chan []byte, 100),\n\t}\n\te.POST(\"/tenhou\", handler.analysisTenhou)\n\te.POST(\"/majsoul\", handler.analysisMajsoul)\n\tif isHTTPS {\n\t\treturn e.StartTLS(\":8443\", \"cert.pem\", \"key.pem\")\n\t}\n\treturn e.Start(\":8080\")\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server with WebSocket support using the Echo framework, capable of handling messages, health checks, and streaming, with optional authentication.\n\nStruct Description: The API struct represents an HTTP server with WebSocket capabilities, message buffering, and authentication support. It handles incoming HTTP requests and WebSocket connections while managing message broadcasting and logging.\n\nFields:\n\nMessages: [ring.Ring] - A ring buffer for storing messages with configurable capacity\nRWMutex: [sync.RWMutex] - Read-write mutex for thread-safe operations on shared data\nConfig: [*bridge.Config] - Configuration object containing server settings and parameters\nmrouter: [*melody.Melody] - WebSocket router for handling WebSocket connections and messages\n\nMethods:\n\nNew: [func(cfg *bridge.Config) bridge.Bridger] -> [bridge.Bridger] - Constructor that initializes the API instance, sets up routes, and starts the HTTP server\nhandleWebsocketMessage: [func(message config.Message, s *melody.Session)] -> [void] - Handles incoming WebSocket messages, prepares them for broadcasting, and sends to remote channel\nhandleWebsocket: [func(c echo.Context) error] -> [error] - WebSocket handler that manages WebSocket connections using the melody router\nhandleHealthcheck: [func(c echo.Context) error] -> [error] - Health check endpoint handler (implied by route registration)\nhandleMessages: [func(c echo.Context) error] -> [error] - Messages endpoint handler (implied by route registration)\nhandleStream: [func(c echo.Context) error] -> [error] - Stream endpoint handler (implied by route registration)\nhandlePostMessage: [func(c echo.Context) error] -> [error] - Message posting endpoint handler (implied by route registration)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/olahol/melody\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype API struct {\n\tMessages ring.Ring\n\tsync.RWMutex\n\t*bridge.Config\n\tmrouter *melody.Melody\n}\n\nfunc New(cfg *bridge.Config) bridge.Bridger {\n\tb := &API{Config: cfg}\n\te := echo.New()\n\te.HideBanner = true\n\te.HidePort = true\n\n\tb.mrouter = melody.New()\n\tb.mrouter.HandleMessage(func(s *melody.Session, msg []byte) {\n\t\tmessage := config.Message{}\n\t\terr := json.Unmarshal(msg, &message)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to decode message from byte[] '%s'\", string(msg))\n\t\t\treturn\n\t\t}\n\t\tb.handleWebsocketMessage(message, s)\n\t})\n\tb.mrouter.HandleConnect(func(session *melody.Session) {\n\t\tgreet := b.getGreeting()\n\t\tdata, err := json.Marshal(greet)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to encode message '%v'\", greet)\n\t\t\treturn\n\t\t}\n\t\terr = session.Write(data)\n\t\tif err != nil {\n\t\t\tb.Log.Errorf(\"failed to write message '%s'\", string(data))\n\t\t\treturn\n\t\t}\n\t})\n\n\tb.Messages = ring.Ring{}\n\tif b.GetInt(\"Buffer\") != 0 {\n\t\tb.Messages.SetCapacity(b.GetInt(\"Buffer\"))\n\t}\n\tif b.GetString(\"Token\") != \"\" {\n\t\te.Use(middleware.KeyAuth(func(key string, c echo.Context) (bool, error) {\n\t\t\treturn key == b.GetString(\"Token\"), nil\n\t\t}))\n\t}\n\n\te.GET(\"/api/health\", b.handleHealthcheck)\n\te.GET(\"/api/messages\", b.handleMessages)\n\te.GET(\"/api/stream\", b.handleStream)\n\te.GET(\"/api/websocket\", b.handleWebsocket)\n\te.POST(\"/api/message\", b.handlePostMessage)\n\tgo func() {\n\t\tif b.GetString(\"BindAddress\") == \"\" {\n\t\t\tb.Log.Fatalf(\"No BindAddress configured.\")\n\t\t}\n\t\tb.Log.Infof(\"Listening on %s\", b.GetString(\"BindAddress\"))\n\t\tb.Log.Fatal(e.Start(b.GetString(\"BindAddress\")))\n\t}()\n\treturn b\n}\n\nfunc (b *API) handleWebsocketMessage(message config.Message, s *melody.Session) {\n\tmessage.Channel = \"api\"\n\tmessage.Protocol = \"api\"\n\tmessage.Account = b.Account\n\tmessage.ID = \"\"\n\tmessage.Timestamp = time.Now()\n\n\tdata, err := json.Marshal(message)\n\tif err != nil {\n\t\tb.Log.Errorf(\"failed to encode message for loopback '%v'\", message)\n\t\treturn\n\t}\n\t_ = b.mrouter.BroadcastOthers(data, s)\n\n\tb.Log.Debugf(\"Sending websocket message from %s on %s to gateway\", message.Username, \"api\")\n\tb.Remote <- message\n}\n\nfunc (b *API) handleWebsocket(c echo.Context) error {\n\terr := b.mrouter.HandleRequest(c.Response(), c.Request())\n\tif err != nil {\n\t\tb.Log.Errorf(\"error in websocket handling  '%v'\", err)\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package bridge\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/melody/melody\"\n\t\"github.com/rs/xid\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Bridger interface {\n\tRun()\n}\n\ntype API struct {\n\tMessages  *ring.Ring\n\tRWMutex   sync.RWMutex\n\tConfig    *Config\n\tmrouter   *melody.Melody\n}\n\nfunc New(cfg *Config) Bridger {\n\tapi := &API{\n\t\tMessages: ring.New(cfg.MessageBufferSize),\n\t\tConfig:   cfg,\n\t}\n\tapi.mrouter = melody.New(melody.Config{\n\t\tTransport: melody.Websocket,\n\t\tReadLimit: 1024 * 1024,\n\t})\n\tapi.mrouter.HandleMessage(api.handleWebsocketMessage)\n\treturn api\n}\n\nfunc (a *API) Run() {\n\te := echo.New()\n\te.HideBanner = true\n\te.HTTPErrorHandler = func(err error, c echo.Context) {\n\t\tc.JSON(500, map[string]string{\"error\": err.Error()})\n\t}\n\n\te.GET(\"/health\", a.handleHealthcheck)\n\te.GET(\"/messages\", a.handleMessages)\n\te.POST(\"/messages\", a.handlePostMessage)\n\te.GET(\"/stream\", a.handleStream)\n\te.GET(\"/ws\", a.handleWebsocket)\n\n\te.Logger.SetLevel(\"error\")\n\te.Server.Addr = a.Config.Address\n\te.Server.ReadTimeout = time.Second * 30\n\te.Server.WriteTimeout = time.Second * 30\n\te.Server.IdleTimeout = time.Second * 30\n\n\tgo func() {\n\t\tif err := e.Start(a.Config.Address); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}()\n}\n\nfunc (a *API) handleWebsocketMessage(message Message, s *melody.Session) {\n\ta.RWMutex.Lock()\n\tdefer a.RWMutex.Unlock()\n\n\tmsg := Message{\n\t\tID:        xid.New().String(),\n\t\tContent:   message.Content,\n\t\tTimestamp: time.Now().UnixNano(),\n\t}\n\n\ta.Messages.Value = msg\n\ta.Messages.Next()\n\n\tfor _, sess := range a.mrouter.Sessions {\n\t\tsess.Write(message)\n\t}\n}\n\nfunc (a *API) handleWebsocket(c echo.Context) error {\n\tsession, err := a.mrouter.Upgrade(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn session.Serve()\n}\n\nfunc (a *API) handleHealthcheck(c echo.Context) error {\n\treturn c.JSON(200, map[string]string{\"status\": \"healthy\"})\n}\n\nfunc (a *API) handleMessages(c echo.Context) error {\n\ta.RWMutex.RLock()\n\tdefer a.RWMutex.RUnlock()\n\n\tvar messages []Message\n\tfor i := 0; i < a.Messages.Len(); i++ {\n\t\tmessages = append(messages, a.Messages.Value.(Message))\n\t\ta.Messages = a.Messages.Next()\n\t}\n\n\treturn c.JSON(200, messages)\n}\n\nfunc (a *API) handleStream(c echo.Context) error {\n\tsession, _ := a.mrouter.Upgrade(c)\n\tdefer session.Close()\n\n\tfor {\n\t\tselect {\n\t\tcase msg := <-a.Messages:\n\t\t\tsession.Write(msg)\n\t\t}\n\t}\n}\n\nfunc (a *API) handlePostMessage(c echo.Context) error {\n\tvar msg Message\n\tif err := c.Bind(&msg); err != nil {\n\t\treturn err\n\t}\n\n\ta.RWMutex.Lock()\n\tdefer a.RWMutex.Unlock()\n\n\tmsg.ID = xid.New().String()\n\tmsg.Timestamp = time.Now().UnixNano()\n\n\ta.Messages.Value = msg\n\ta.Messages.Next()\n\n\treturn c.JSON(200, msg)\n}"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user authentication with JWT tokens. The server should have routes for login, accessible content, and restricted content that requires JWT authentication.\n\nFunction Description: The main function initializes an Echo server, configures middleware for logging and recovery, sets up route handlers for login and accessible content, and creates a restricted route group that requires JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger its handlers)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately but are referenced in this main function. The JWT configuration uses a custom claims structure (jwtCustomClaims) which should also be defined elsewhere.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tconfig := middleware.JWTConfig{\n\t\tClaims:     &jwtCustomClaims{},\n\t\tSigningKey: []byte(\"secret\"),\n\t}\n\tr.Use(middleware.JWTWithConfig(config))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"net/http\"\n)\n\ntype jwtCustomClaims struct {\n\tUserID string `json:\"user_id\"`\n\tjwt.RegisteredClaims\n}\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/accessible\", accessible)\n\trestrictedGroup := e.Group(\"/restricted\")\n\trestrictedGroup.Use(jwtMiddleware)\n\trestrictedGroup.GET(\"/\", restricted)\n\n\te.Start(\":1323\")\n}\n\nfunc login(c echo.Context) error {\n\t// Implement login logic here\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Login successful\"})\n}\n\nfunc accessible(c echo.Context) error {\n\t// Implement accessible content logic here\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Accessible content\"})\n}\n\nfunc jwtMiddleware(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\t// Implement JWT middleware logic here\n\t\treturn next(c)\n\t}\n}\n\nfunc restricted(c echo.Context) error {\n\t// Implement restricted content logic here\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Restricted content\"})\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various API endpoints for a Vault management system, including authentication, token management, secret management, and more.\n\nFunction Description: The StartListener function initializes and starts an Echo HTTP server with configured routes and middleware. It sets up various API endpoints for Vault operations, applies middleware for logging, recovery, and request handling, and serves static assets if provided. The server can be started with or without TLS based on configuration.\n\nInput:\n- listener: config.ListenerConfig - Configuration for the server listener including address and TLS settings\n- assets: *rice.Box - Optional box containing static assets to be served by the server\n\nOutput: None (the function starts the server which runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\t\"log\"\n\n\t\"github.com/caiyeon/goldfish/config\"\n\t\"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\te        *echo.Echo\n)\n\nfunc StartListener(listener config.ListenerConfig, assets *rice.Box) {\n\te = echo.New()\n\te.HideBanner = true\n\te.Server.ReadTimeout = 10 * time.Second\n\te.Server.WriteTimeout = 2 * time.Minute\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.Use(middleware.BodyLimit(\"32M\"))\n\te.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n\t\tLevel: 5,\n\t}))\n\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tc.Response().Header().Set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\")\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\tif assets != nil {\n\t\tassetHandler := http.FileServer(assets.HTTPBox())\n\t\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\t\te.GET(\"/assets/css/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/js/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/fonts/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t\te.GET(\"/assets/img/*\", echo.WrapHandler(http.StripPrefix(\"/\", assetHandler)))\n\t}\n\n\te.GET(\"/v1/health\", handlers.Health())\n\te.GET(\"/v1/vaulthealth\", handlers.VaultHealth())\n\te.POST(\"/v1/bootstrap\", handlers.Bootstrap())\n\n\te.POST(\"/v1/login\", handlers.Login())\n\te.POST(\"/v1/login/renew-self\", handlers.RenewSelf())\n\n\te.GET(\"/v1/token/accessors\", handlers.GetTokenAccessors())\n\te.POST(\"/v1/token/lookup-accessor\", handlers.LookupTokenByAccessor())\n\te.POST(\"/v1/token/revoke-accessor\", handlers.RevokeTokenByAccessor())\n\te.POST(\"/v1/token/revoke-self\", handlers.RevokeSelf())\n\te.POST(\"/v1/token/create\", handlers.CreateToken())\n\te.GET(\"/v1/token/listroles\", handlers.ListRoles())\n\te.GET(\"/v1/token/role\", handlers.GetRole())\n\n\te.GET(\"/v1/userpass/users\", handlers.GetUserpassUsers())\n\te.POST(\"/v1/userpass/delete\", handlers.DeleteUserpassUser())\n\n\te.GET(\"/v1/approle/roles\", handlers.GetApproleRoles())\n\te.POST(\"/v1/approle/delete\", handlers.DeleteApproleRole())\n\n\te.GET(\"/v1/ldap/groups\", handlers.GetLDAPGroups())\n\te.GET(\"/v1/ldap/users\", handlers.GetLDAPUsers())\n\n\te.GET(\"/v1/policy\", handlers.GetPolicy())\n\te.DELETE(\"/v1/policy\", handlers.DeletePolicy())\n\te.GET(\"/v1/policy-capabilities\", handlers.PolicyCapabilities())\n\n\te.GET(\"/v1/request\", handlers.GetRequest())\n\te.POST(\"/v1/request/add\", handlers.AddRequest())\n\te.POST(\"/v1/request/approve\", handlers.ApproveRequest())\n\te.DELETE(\"/v1/request/reject\", handlers.RejectRequest())\n\n\te.GET(\"/v1/transit\", handlers.TransitInfo())\n\te.POST(\"/v1/transit/encrypt\", handlers.EncryptString())\n\te.POST(\"/v1/transit/decrypt\", handlers.DecryptString())\n\n\te.GET(\"/v1/mount\", handlers.GetMount())\n\te.POST(\"/v1/mount\", handlers.ConfigMount())\n\n\te.GET(\"/v1/secrets\", handlers.GetSecrets())\n\te.POST(\"/v1/secrets\", handlers.PostSecrets())\n\te.DELETE(\"/v1/secrets\", handlers.DeleteSecrets())\n\n\te.GET(\"/v1/bulletins\", handlers.GetBulletins())\n\n\te.POST(\"/v1/wrapping/wrap\", handlers.WrapHandler())\n\te.POST(\"/v1/wrapping/unwrap\", handlers.UnwrapHandler())\n\n\tif listener.Tls_disable {\n\t\te.Logger.Fatal(e.Start(listener.Address))\n\t\treturn\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/spf13/viper\"\n)\n\ntype ListenerConfig struct {\n\tAddress string\n\tTLS     struct {\n\t\tCertFile string\n\t\tKeyFile  string\n\t}\n}\n\nfunc StartListener(listener ListenerConfig, assets *rice.Box) {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\tif assets != nil {\n\t\te.Static(\"/\", assets.Path())\n\t}\n\n\te.GET(\"/health\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"status\": \"healthy\"})\n\t})\n\n\te.POST(\"/auth/login\", func(c echo.Context) error {\n\t\t// Implement authentication logic\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Authentication successful\"})\n\t})\n\n\te.POST(\"/token/create\", func(c echo.Context) error {\n\t\t// Implement token creation logic\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Token created\"})\n\t})\n\n\te.DELETE(\"/token/revoke\", func(c echo.Context) error {\n\t\t// Implement token revocation logic\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Token revoked\"})\n\t})\n\n\te.POST(\"/secret/store\", func(c echo.Context) error {\n\t\t// Implement secret storage logic\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Secret stored\"})\n\t})\n\n\te.GET(\"/secret/retrieve\", func(c echo.Context) error {\n\t\t// Implement secret retrieval logic\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Secret retrieved\"})\n\t})\n\n\te.DELETE(\"/secret/delete\", func(c echo.Context) error {\n\t\t// Implement secret deletion logic\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Secret deleted\"})\n\t})\n\n\te.Logger.SetLevel(viper.Get(\"log_level\").(string))\n\n\tif listener.TLS.CertFile != \"\" && listener.TLS.KeyFile != \"\" {\n\t\te.Logger.Infof(\"Starting HTTPS server on %s\", listener.Address)\n\t\te.StartTLS(listener.Address, listener.TLS.CertFile, listener.TLS.KeyFile)\n\t} else {\n\t\te.Logger.Infof(\"Starting HTTP server on %s\", listener.Address)\n\t\te.Start(listener.Address)\n\t}\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles user-related requests with CORS support and logging middleware.\n\nFunction Description: The main function initializes an Echo server instance, configures middleware (logger, recovery, and CORS), sets up route handlers, and starts the server on port 1323.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handler function `getUsers` would need to be implemented separately to handle the GET request to \"/api/users\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"https://labstack.com\", \"https://labstack.net\"},\n\t\tAllowMethods: []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recovery())\n\te.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"*\"},\n\t\tAllowMethods: []string{echo.GET, echo.POST, echo.PUT, echo.DELETE},\n\t}))\n\n\te.GET(\"/api/users\", getUsers)\n\n\te.Logger.Infof(\"Server started on :1323\")\n\te.Start(\":1323\")\n}\n\nfunc getUsers(c echo.Context) error {\n\treturn c.JSON(200, map[string]string{\"message\": \"Users data\"})\n}"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that includes rate limiting middleware using Sentinel, with custom resource extraction and block fallback handlers.\n\nFunction Description: The function sets up a Fiber web server with Sentinel middleware for rate limiting. The middleware extracts the client's real IP from headers as the resource key and provides a custom JSON response when requests are blocked. The server listens on port 8080 and includes a test endpoint.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import \"github.com/gofiber/fiber/v2\"\n\nfunc Example() {\n\tapp := fiber.New()\n\tapp.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx *fiber.Ctx) string {\n\t\t\t\treturn ctx.GetReqHeaders()[\"X-Real-IP\"]\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx *fiber.Ctx) error {\n\t\t\t\treturn ctx.Status(400).JSON(struct {\n\t\t\t\t\tError string `json:\"error\"`\n\t\t\t\t\tCode  int    `json:\"code\"`\n\t\t\t\t}{\n\t\t\t\t\t\"too many request; the quota used up\",\n\t\t\t\t\t10222,\n\t\t\t\t})\n\t\t\t})),\n\t)\n\n\tapp.Get(\"/test\", func(ctx *fiber.Ctx) error { return nil })\n\t_ = app.Listen(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "import (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/core/base\"\n\t\"github.com/alibaba/sentinel-golang/core/flow\"\n\t\"github.com/alibaba/sentinel-golang/util\"\n)\n\nfunc init() {\n\tapi.Init()\n}\n\nfunc main() {\n\tapp := fiber.New()\n\n\t// Create a flow rule for rate limiting\n\trule := &flow.FlowRule{\n\t\tResource: \"rate_limiting_resource\",\n\t\tCount:    10,\n\t\tIntervalSec: 1,\n\t\tGrade: flow.GradeConstant,\n\t}\n\n\t// Register the flow rule\n\tflow.LoadRules([]*flow.FlowRule{rule})\n\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\t// Extract real IP from headers\n\t\tip := c.Get(\"X-Real-IP\")\n\t\tif ip == \"\" {\n\t\t\tip = c.IP()\n\t\t}\n\n\t\t// Set resource key as the client's real IP\n\t\tresourceKey := util.StringToBytes(ip)\n\n\t\t// Check if the request is blocked\n\t\tresult, _ := base.DoWithRule(resourceKey, \"rate_limiting_resource\", nil)\n\t\tif result == base.Block {\n\t\t\t// Custom block fallback handler\n\t\t\treturn c.Status(fiber.StatusTooManyRequests).JSON(fiber.Map{\n\t\t\t\t\"error\":   \"Rate limit exceeded\",\n\t\t\t\t\"message\": \"You have exceeded the allowed number of requests.\",\n\t\t\t})\n\t\t}\n\n\t\t// Proceed with the request\n\t\treturn c.Next()\n\t})\n\n\tapp.Get(\"/test\", func(c *fiber.Ctx) error {\n\t\treturn c.JSON(fiber.Map{\"message\": \"Test endpoint\"})\n\t})\n\n\tapp.Listen(\":8080\")\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go that handles health checks and image conversion requests.\n\nFunction Description: The main function initializes and configures a Fiber HTTP server, sets up middleware for ETag generation, defines route handlers for health checks and image conversion, and starts the server on a specified host and port.\n\nInput:\n- Configuration parameters (host, port, read buffer size, concurrency, keepalive settings) are read from the config.Config object\n- No direct input parameters to the main function itself\n\nOutput:\n- Running HTTP server that listens on specified address\n- Console output indicating server status\n- Potential fatal error if server fails to start\n\nThe function performs these key operations:\n1. Initializes Fiber app with custom configuration\n2. Adds ETag middleware\n3. Registers route handlers:\n   - /healthz endpoint for health checks\n   - /* catch-all endpoint for image conversion\n4. Starts the server and handles startup errors",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"webp_server_go/config\"\n\t\"webp_server_go/handler\"\n)\n\nvar app = fiber.New(fiber.Config{\n\tServerHeader:          \"WebP Server Go\",\n\tAppName:               \"WebP Server Go\",\n\tDisableStartupMessage: true,\n\tProxyHeader:           \"X-Real-IP\",\n\tReadBufferSize:        config.Config.ReadBufferSize,\n\tConcurrency:           config.Config.Concurrency,\n\tDisableKeepalive:      config.Config.DisableKeepalive,\n})\n\nfunc main() {\n\tapp.Use(etag.New(etag.Config{\n\t\tWeak: true,\n\t}))\n\n\tlistenAddress := config.Config.Host + \":\" + config.Config.Port\n\n\tapp.Get(\"/healthz\", handler.Healthz)\n\tapp.Get(\"/*\", handler.Convert)\n\n\tfmt.Println(\"WebP Server Go is Running on http://\" + listenAddress)\n\n\tbindErr := app.Listen(listenAddress)\n\tif bindErr != nil {\n\t\tlog.Fatal(\"Error starting server: \", bindErr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/etag\"\n\t\"github.com/gofiber/fiber/v2/middleware/recover\"\n\t\"github.com/gofiber/fiber/v2/middleware/logger\"\n\t\"github.com/spf13/viper\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tviper.SetConfigName(\"config\")\n\tviper.AddConfigPath(\".\")\n\tif err := viper.ReadInConfig(); err != nil {\n\t\tlog.Fatalf(\"Error reading config file: %v\", err)\n\t}\n\n\thost := viper.GetString(\"server.host\")\n\tport := viper.GetString(\"server.port\")\n\treadBufferSize := viper.GetInt(\"server.read_buffer_size\")\n\tconcurrency := viper.GetInt(\"server.concurrency\")\n\tkeepalive := viper.GetBool(\"server.keepalive\")\n\n\tapp := fiber.New(fiber.Config{\n\t\tReadBufferSize:          readBufferSize,\n\t\tConcurrency:             concurrency,\n\t\tKeepAlive:               keepalive,\n\t\tCaseSensitive:           false,\n\t\tStrictRouting:           false,\n\t\tEnablePrintRoutes:       true,\n\t\tBodyLimit:               10 * 1024 * 1024, // 10MB\n\t\tJSONEncoder:             fiber.DefaultJSONEncoder,\n\t\tJSONDecoder:             fiber.DefaultJSONDecoder,\n\t\tDisableStartupMessage:   true,\n\t\tDisablePreParsing:       false,\n\t\tDisableKeepalive:        !keepalive,\n\t\tHTTP2:                   true,\n\t\tIdleTimeout:             300,\n\t\tStreamRequestBody:       true,\n\t\tMaxRequestBodySize:      10 * 1024 * 1024,\n\t\tEnableWebSockets:        true,\n\t\tWebSocketSubprotocols:   []string{\"echo\"},\n\t})\n\n\tapp.Use(recover.New())\n\tapp.Use(logger.New())\n\tapp.Use(etag.New())\n\n\tapp.Get(\"/healthz\", func(c *fiber.Ctx) error {\n\t\treturn c.Status(http.StatusOK).JSON(fiber.Map{\n\t\t\t\"status\": \"healthy\",\n\t\t})\n\t})\n\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\tif c.Path() == \"/healthz\" {\n\t\t\treturn c.Next()\n\t\t}\n\t\t// Image conversion logic here\n\t\t// For demonstration, just return a response\n\t\treturn c.Status(http.StatusOK).SendString(\"Image conversion request received\")\n\t})\n\n\taddr := host + \":\" + port\n\tlog.Printf(\"Server is starting on %s\", addr)\n\tif err := app.Listen(addr); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Fiber-based HTTP server in Go for a dashboard application that manages queues and tenants, with optional basic authentication and template rendering capabilities.\n\nStruct Description: The Dashboard struct represents a web dashboard that provides queue management functionality through HTTP endpoints. It uses the Fiber framework for routing and middleware, supports HTML template rendering, and can be configured with basic authentication.\n\nFields:\n\nApp: *fiber.App - The Fiber application instance for handling HTTP requests\nqueue: models.Queue - Interface for queue operations\ntenantManager: models.TenantManager - Interface for tenant management operations\ncfg: config.DashboardConfig - Configuration settings for the dashboard\n\nMethods:\n\nNewDashboard: (queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) -> *Dashboard - Initializes a new Dashboard instance with the given dependencies and configuration, sets up template engine, basic auth middleware, and route handlers\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nQueues: (c *fiber.Ctx) -> error - Handler for GET / route\nNewQueue: (c *fiber.Ctx) -> error - Handler for POST /queues route\nQueue: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue route\nQueueSettings: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/settings route\nSaveQueueSettings: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/settings route\nDeleteQueueConfirm: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/delete route\nDeleteQueue: (c *fiber.Ctx) -> error - Handler for POST /queues/:queue/delete route\nMessage: (c *fiber.Ctx) -> error - Handler for GET /queues/:queue/messages/:message route",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/gofiber/fiber/v2/middleware/basicauth\"\n\t\"github.com/gofiber/template/html/v2\"\n)\n\ntype Dashboard struct {\n\tApp *fiber.App\n\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tvar engine *html.Engine\n\n\tif cfg.Dev {\n\t\tengine = html.New(\"./dashboard/views\", \".html\")\n\t\tengine.Reload(true)\n\t\tengine.Debug(true)\n\t} else {\n\t\thttp.FS(viewsfs)\n\t\tfs2, err := fs.Sub(viewsfs, \"views\")\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tengine = html.NewFileSystem(http.FS(fs2), \".html\")\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tViews:                 engine,\n\t\tDisableStartupMessage: true,\n\t})\n\n\tif cfg.User != \"\" && cfg.Pass != \"\" {\n\t\tapp.Use(basicauth.New(basicauth.Config{\n\t\t\tUsers: map[string]string{\n\t\t\t\tcfg.User: cfg.Pass,\n\t\t\t},\n\t\t}))\n\t}\n\n\td := &Dashboard{\n\t\tApp:           app,\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp.Get(\"/\", d.Queues)\n\tapp.Post(\"/queues\", d.NewQueue)\n\tapp.Get(\"/queues/:queue\", d.Queue)\n\tapp.Get(\"/queues/:queue/settings\", d.QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", d.SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", d.DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", d.DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", d.Message)\n\n\treturn d\n}\n\nfunc (d *Dashboard) Start() error {\n\tif !d.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"Dashboard: http://localhost:%d\\n\", d.cfg.Port)\n\treturn d.App.Listen(fmt.Sprintf(\":%d\", d.cfg.Port))\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif d.cfg.Enabled {\n\t\treturn d.App.Shutdown()\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/template/html\"\n\t\"net/http\"\n)\n\ntype Dashboard struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\tcfg           config.DashboardConfig\n}\n\nfunc NewDashboard(queue models.Queue, tenantManager models.TenantManager, cfg config.DashboardConfig) *Dashboard {\n\tapp := fiber.New()\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\tif cfg.BasicAuthEnabled {\n\t\t\tuser, pass, _ := c.Request.Header.Peek(\"Authorization\")\n\t\t\tif user == nil || pass == nil {\n\t\t\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Unauthorized\")\n\t\t\t}\n\t\t\tusername := string(user)\n\t\t\tpassword := string(pass)\n\t\t\tif username != cfg.BasicAuthUser || password != cfg.BasicAuthPass {\n\t\t\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Unauthorized\")\n\t\t\t}\n\t\t}\n\t\treturn c.Next()\n\t})\n\tengine := html.New(\"./views\", \".html\")\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\tc.Context().SetUserValue(\"config\", cfg)\n\t\treturn c.Next()\n\t})\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\tc.Context().SetUserValue(\"queue\", queue)\n\t\tc.Context().SetUserValue(\"tenantManager\", tenantManager)\n\t\treturn c.Next()\n\t})\n\tapp.Use(func(c *fiber.Ctx) error {\n\t\tc.Context().SetUserValue(\"templateEngine\", engine)\n\t\treturn c.Next()\n\t})\n\tapp.Get(\"/\", Queues)\n\tapp.Post(\"/queues\", NewQueue)\n\tapp.Get(\"/queues/:queue\", Queue)\n\tapp.Get(\"/queues/:queue/settings\", QueueSettings)\n\tapp.Post(\"/queues/:queue/settings\", SaveQueueSettings)\n\tapp.Get(\"/queues/:queue/delete\", DeleteQueueConfirm)\n\tapp.Post(\"/queues/:queue/delete\", DeleteQueue)\n\tapp.Get(\"/queues/:queue/messages/:message\", Message)\n\treturn &Dashboard{App: app, queue: queue, tenantManager: tenantManager, cfg: cfg}\n}\n\nfunc (d *Dashboard) Start() error {\n\tif d.cfg.Enabled {\n\t\taddr := fmt.Sprintf(\":%d\", d.cfg.Port)\n\t\tfmt.Printf(\"Starting dashboard server on %s\\n\", addr)\n\t\treturn d.App.Listen(addr)\n\t}\n\treturn nil\n}\n\nfunc (d *Dashboard) Stop() error {\n\tif d.cfg.Enabled {\n\t\treturn d.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc Queues(c *fiber.Ctx) error {\n\ttmpl := c.Context().GetUserValue(\"templateEngine\").(*html.Engine)\n\tconfig := c.Context().GetUserValue(\"config\").(config.DashboardConfig)\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tdata := map[string]interface{}{\n\t\t\"Title\":    \"Dashboard\",\n\t\t\"Queues\":   queue.ListQueues(),\n\t\t\"Tenants\":  tenants,\n\t\t\"Config\":   config,\n\t\t\"Messages\": queue.ListMessages(),\n\t}\n\treturn tmpl.ParseAndRender(\"queues\", data)\n}\n\nfunc NewQueue(c *fiber.Ctx) error {\n\ttmpl := c.Context().GetUserValue(\"templateEngine\").(*html.Engine)\n\tconfig := c.Context().GetUserValue(\"config\").(config.DashboardConfig)\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tdata := map[string]interface{}{\n\t\t\"Title\":    \"New Queue\",\n\t\t\"Queues\":   queue.ListQueues(),\n\t\t\"Tenants\":  tenants,\n\t\t\"Config\":   config,\n\t\t\"Messages\": queue.ListMessages(),\n\t}\n\treturn tmpl.ParseAndRender(\"new_queue\", data)\n}\n\nfunc Queue(c *fiber.Ctx) error {\n\ttmpl := c.Context().GetUserValue(\"templateEngine\").(*html.Engine)\n\tconfig := c.Context().GetUserValue(\"config\").(config.DashboardConfig)\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tqueueName := c.Params(\"queue\")\n\tqueueData := queue.GetQueue(queueName)\n\tdata := map[string]interface{}{\n\t\t\"Title\":    \"Queue Details\",\n\t\t\"Queue\":    queueData,\n\t\t\"Queues\":   queue.ListQueues(),\n\t\t\"Tenants\":  tenants,\n\t\t\"Config\":   config,\n\t\t\"Messages\": queue.ListMessages(),\n\t}\n\treturn tmpl.ParseAndRender(\"queue\", data)\n}\n\nfunc QueueSettings(c *fiber.Ctx) error {\n\ttmpl := c.Context().GetUserValue(\"templateEngine\").(*html.Engine)\n\tconfig := c.Context().GetUserValue(\"config\").(config.DashboardConfig)\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tqueueName := c.Params(\"queue\")\n\tqueueData := queue.GetQueue(queueName)\n\tdata := map[string]interface{}{\n\t\t\"Title\":    \"Queue Settings\",\n\t\t\"Queue\":    queueData,\n\t\t\"Queues\":   queue.ListQueues(),\n\t\t\"Tenants\":  tenants,\n\t\t\"Config\":   config,\n\t\t\"Messages\": queue.ListMessages(),\n\t}\n\treturn tmpl.ParseAndRender(\"queue_settings\", data)\n}\n\nfunc SaveQueueSettings(c *fiber.Ctx) error {\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tqueueName := c.Params(\"queue\")\n\tsettings := c.FormValue(\"settings\")\n\tqueue.UpdateQueueSettings(queueName, settings)\n\treturn c.Redirect(\"/queues/\"+queueName)\n}\n\nfunc DeleteQueueConfirm(c *fiber.Ctx) error {\n\ttmpl := c.Context().GetUserValue(\"templateEngine\").(*html.Engine)\n\tconfig := c.Context().GetUserValue(\"config\").(config.DashboardConfig)\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tqueueName := c.Params(\"queue\")\n\tqueueData := queue.GetQueue(queueName)\n\tdata := map[string]interface{}{\n\t\t\"Title\":    \"Delete Queue\",\n\t\t\"Queue\":    queueData,\n\t\t\"Queues\":   queue.ListQueues(),\n\t\t\"Tenants\":  tenants,\n\t\t\"Config\":   config,\n\t\t\"Messages\": queue.ListMessages(),\n\t}\n\treturn tmpl.ParseAndRender(\"delete_queue\", data)\n}\n\nfunc DeleteQueue(c *fiber.Ctx) error {\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tqueueName := c.Params(\"queue\")\n\tqueue.DeleteQueue(queueName)\n\treturn c.Redirect(\"/\")\n}\n\nfunc Message(c *fiber.Ctx) error {\n\ttmpl := c.Context().GetUserValue(\"templateEngine\").(*html.Engine)\n\tconfig := c.Context().GetUserValue(\"config\").(config.DashboardConfig)\n\tqueue := c.Context().GetUserValue(\"queue\").(models.Queue)\n\ttenants := queue.ListTenants()\n\tqueueName := c.Params(\"queue\")\n\tmessageID := c.Params(\"message\")\n\tmessage := queue.GetMessage(queueName, messageID)\n\tdata := map[string]interface{}{\n\t\t\"Title\":    \"Message Details\",\n\t\t\"Message\":  message,\n\t\t\"Queues\":   queue.ListQueues(),\n\t\t\"Tenants\":  tenants,\n\t\t\"Config\":   config,\n\t\t\"Messages\": queue.ListMessages(),\n\t}\n\treturn tmpl.ParseAndRender(\"message\", data)\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that initializes and runs a Fiber-based HTTP server with specific routes for job management, while also starting a background engine process.\n\nFunction Description: The function `Run` initializes a Fiber web server with disabled startup messages, sets up three routes for job management (creating new jobs, checking job status, and retrieving jobs), starts a background engine process in a goroutine, and finally starts listening on a specified host and port.\n\nInput: None (uses package-level constants Host and Port for server configuration)\n\nOutput: None (runs indefinitely as a web server, but technically returns an error if the server fails to start)\n\nNote: The function uses package-level constants Host and Port for server configuration and assumes the existence of handler functions NewJob, GetStatus, and GetJob, as well as an Engine function for background processing.",
    "Canonical_solution": "import (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs/\", NewJob)\n\tapp.Get(\"/jobs/status/:id\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\tapp.Listen(Host + \":\" + Port)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 107,
    "right_result": "import (\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc Run() error {\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t})\n\n\tapp.Post(\"/jobs\", NewJob)\n\tapp.Get(\"/jobs/:id/status\", GetStatus)\n\tapp.Get(\"/jobs/:id\", GetJob)\n\n\tgo Engine()\n\n\tif err := app.Listen(Host + \":\" + Port); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Implement a Fiber-based HTTP server in Go that handles Amazon SQS (Simple Queue Service) API requests, including authentication, routing, and various SQS operations.\n\nStruct Description: The SQS struct represents an HTTP server that processes Amazon SQS API requests. It uses Fiber framework for HTTP handling and includes queue management functionality with tenant isolation.\n\nFields:\n\nApp: *fiber.App - Fiber application instance for HTTP server\nqueue: models.Queue - Queue management interface\ntenantManager: models.TenantManager - Tenant management interface\ncfg: config.SQSConfig - Configuration for the SQS server\n\nMethods:\n\nNewSQS: (queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) -> *SQS - Constructor that initializes the SQS server with dependencies and configuration\nStart: () -> error - Starts the HTTP server if enabled in configuration\nStop: () -> error - Gracefully shuts down the HTTP server if enabled\nAction: (c *fiber.Ctx) -> error - Main request handler that routes SQS API requests based on X-Amz-Target header\nSendMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessage SQS operation\nSendMessageBatch: (c *fiber.Ctx, tenantId int64) -> error - Handles SendMessageBatch SQS operation\nReceiveMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles ReceiveMessage SQS operation\nDeleteMessage: (c *fiber.Ctx, tenantId int64) -> error - Handles DeleteMessage SQS operation\nListQueues: (c *fiber.Ctx, tenantId int64) -> error - Handles ListQueues SQS operation\nGetQueueURL: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueUrl SQS operation\nCreateQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles CreateQueue SQS operation\nGetQueueAttributes: (c *fiber.Ctx, tenantId int64) -> error - Handles GetQueueAttributes SQS operation\nPurgeQueue: (c *fiber.Ctx, tenantId int64) -> error - Handles PurgeQueue SQS operation\nChangeMessageVisibility: (c *fiber.Ctx, tenantId int64) -> error - Handles ChangeMessageVisibility SQS operation\nerrorHandler: (ctx *fiber.Ctx, err error) -> error - Custom error handler for the Fiber app\nauthMiddleware: (c *fiber.Ctx) -> error - Authentication middleware for tenant validation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/adaptor\"\n\t\"github.com/valyala/fasthttp/fasthttpadaptor\"\n)\n\ntype SQS struct {\n\tApp           *fiber.App\n\tqueue         models.Queue\n\ttenantManager models.TenantManager\n\n\tcfg config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\ts := &SQS{\n\t\tqueue:         queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:           cfg,\n\t}\n\n\tapp := fiber.New(fiber.Config{\n\t\tDisableStartupMessage: true,\n\t\tErrorHandler:          s.errorHandler,\n\t\tBodyLimit:             cfg.MaxRequestSize,\n\t})\n\n\tapp.Use(s.authMiddleware)\n\tapp.Post(\"/*\", s.Action)\n\n\ts.App = app\n\n\treturn s\n}\n\nfunc (s *SQS) Start() error {\n\tif !s.cfg.Enabled {\n\t\treturn nil\n\t}\n\n\tfmt.Printf(\"SQS Endpoint: http://localhost:%d\\n\", s.cfg.Port)\n\treturn s.App.Listen(fmt.Sprintf(\":%d\", s.cfg.Port))\n}\n\nfunc (s *SQS) Stop() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\tawsMethodHeader, ok := c.GetReqHeaders()[\"X-Amz-Target\"]\n\tif !ok {\n\t\treturn errors.New(\"X-Amz-Target header not found\")\n\t}\n\tawsMethod := awsMethodHeader[0]\n\n\tvar r *http.Request = &http.Request{}\n\tfasthttpadaptor.ConvertRequest(c.Context(), r, false)\n\n\ttenantId := c.Locals(\"tenantId\").(int64)\n\n\tvar rc error\n\tswitch awsMethod {\n\tcase \"AmazonSQS.SendMessage\":\n\t\trc = s.SendMessage(c, tenantId)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\trc = s.SendMessageBatch(c, tenantId)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\trc = s.ReceiveMessage(c, tenantId)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\trc = s.DeleteMessage(c, tenantId)\n\tcase \"AmazonSQS.ListQueues\":\n\t\trc = s.ListQueues(c, tenantId)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\trc = s.GetQueueURL(c, tenantId)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\trc = s.CreateQueue(c, tenantId)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\trc = s.GetQueueAttributes(c, tenantId)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\trc = s.PurgeQueue(c, tenantId)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\trc = s.ChangeMessageVisibility(c, tenantId)\n\tdefault:\n\t\trc = NewSQSError(400, \"UnsupportedOperation\", fmt.Sprintf(\"SQS method %s not implemented\", awsMethod))\n\t}\n\n\treturn rc\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 107,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/logger\"\n\t\"github.com/gofiber/fiber/v2/middleware/recover\"\n)\n\ntype SQS struct {\n\tApp          *fiber.App\n\tqueue        models.Queue\n\ttenantManager models.TenantManager\n\tcfg          config.SQSConfig\n}\n\nfunc NewSQS(queue models.Queue, tenantManager models.TenantManager, cfg config.SQSConfig) *SQS {\n\tapp := fiber.New(fiber.Config{\n\t\tCaseSensitive: true,\n\t\tStrictRouting: true,\n\t})\n\tapp.Use(recover.New())\n\tapp.Use(logger.New())\n\tapp.Use(authMiddleware)\n\tapp.Use(errorHandler)\n\n\tapp.Post(\"/SendMessage\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn sendMessage(c, tenantId)\n\t})\n\n\tapp.Post(\"/SendMessageBatch\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn sendMessageBatch(c, tenantId)\n\t})\n\n\tapp.Post(\"/ReceiveMessage\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn receiveMessage(c, tenantId)\n\t})\n\n\tapp.Post(\"/DeleteMessage\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn deleteMessage(c, tenantId)\n\t})\n\n\tapp.Get(\"/ListQueues\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn listQueues(c, tenantId)\n\t})\n\n\tapp.Get(\"/GetQueueUrl\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn getQueueURL(c, tenantId)\n\t})\n\n\tapp.Post(\"/CreateQueue\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn createQueue(c, tenantId)\n\t})\n\n\tapp.Get(\"/GetQueueAttributes\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn getQueueAttributes(c, tenantId)\n\t})\n\n\tapp.Post(\"/PurgeQueue\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn purgeQueue(c, tenantId)\n\t})\n\n\tapp.Post(\"/ChangeMessageVisibility\", func(c *fiber.Ctx) error {\n\t\ttenantId, err := getTenantId(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn changeMessageVisibility(c, tenantId)\n\t})\n\n\treturn &SQS{\n\t\tApp:          app,\n\t\tqueue:        queue,\n\t\ttenantManager: tenantManager,\n\t\tcfg:          cfg,\n\t}\n}\n\nfunc (s *SQS) Start() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Listen(s.cfg.Addr)\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Stop() error {\n\tif s.cfg.Enabled {\n\t\treturn s.App.Shutdown()\n\t}\n\treturn nil\n}\n\nfunc (s *SQS) Action(c *fiber.Ctx) error {\n\ttarget := c.Get(\"X-Amz-Target\")\n\tswitch target {\n\tcase \"AmazonSQS.SendMessage\":\n\t\treturn s.sendMessage(c)\n\tcase \"AmazonSQS.SendMessageBatch\":\n\t\treturn s.sendMessageBatch(c)\n\tcase \"AmazonSQS.ReceiveMessage\":\n\t\treturn s.receiveMessage(c)\n\tcase \"AmazonSQS.DeleteMessage\":\n\t\treturn s.deleteMessage(c)\n\tcase \"AmazonSQS.ListQueues\":\n\t\treturn s.listQueues(c)\n\tcase \"AmazonSQS.GetQueueUrl\":\n\t\treturn s.getQueueURL(c)\n\tcase \"AmazonSQS.CreateQueue\":\n\t\treturn s.createQueue(c)\n\tcase \"AmazonSQS.GetQueueAttributes\":\n\t\treturn s.getQueueAttributes(c)\n\tcase \"AmazonSQS.PurgeQueue\":\n\t\treturn s.purgeQueue(c)\n\tcase \"AmazonSQS.ChangeMessageVisibility\":\n\t\treturn s.changeMessageVisibility(c)\n\tdefault:\n\t\treturn fiber.NewError(fiber.StatusBadRequest, \"Unsupported operation\")\n\t}\n}\n\nfunc (s *SQS) sendMessage(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.SendMessage(c, tenantId)\n}\n\nfunc (s *SQS) sendMessageBatch(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.SendMessageBatch(c, tenantId)\n}\n\nfunc (s *SQS) receiveMessage(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.ReceiveMessage(c, tenantId)\n}\n\nfunc (s *SQS) deleteMessage(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.DeleteMessage(c, tenantId)\n}\n\nfunc (s *SQS) listQueues(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.ListQueues(c, tenantId)\n}\n\nfunc (s *SQS) getQueueURL(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.GetQueueURL(c, tenantId)\n}\n\nfunc (s *SQS) createQueue(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.CreateQueue(c, tenantId)\n}\n\nfunc (s *SQS) getQueueAttributes(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.GetQueueAttributes(c, tenantId)\n}\n\nfunc (s *SQS) purgeQueue(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.PurgeQueue(c, tenantId)\n}\n\nfunc (s *SQS) changeMessageVisibility(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.queue.ChangeMessageVisibility(c, tenantId)\n}\n\nfunc getTenantId(c *fiber.Ctx) (int64, error) {\n\ttenantIdStr := c.Get(\"X-Tenant-ID\")\n\tif tenantIdStr == \"\" {\n\t\treturn 0, errors.New(\"missing X-Tenant-ID header\")\n\t}\n\ttenantId, err := strconv.ParseInt(tenantIdStr, 10, 64)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"invalid X-Tenant-ID: %v\", err)\n\t}\n\treturn tenantId, nil\n}\n\nfunc authMiddleware(c *fiber.Ctx) error {\n\ttenantId, err := getTenantId(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !s.tenantManager.ValidateTenant(tenantId) {\n\t\treturn fiber.NewError(fiber.StatusForbidden, \"Invalid tenant\")\n\t}\n\treturn c.Next()\n}\n\nfunc errorHandler(ctx *fiber.Ctx, err error) error {\n\tif e, ok := err.(*fiber.Error); ok {\n\t\treturn ctx.Status(e.Code).JSON(fiber.Map{\"error\": e.Message})\n\t}\n\treturn ctx.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\"error\": \"Internal server error\"})\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that implements a session-based counter. The server should increment and persist a counter value across requests using Redis as the session store.\n\nFunction Description: The main function initializes a Gin web server with Redis-based session management and implements a GET endpoint (\"/incr\") that increments and returns a counter value stored in the session.\n\nInput: None (The function takes no direct input parameters. Input comes through HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly. Output is sent as HTTP responses. The \"/incr\" endpoint returns JSON with the current count value)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gomodule/redigo/redis\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tredisPool := &redis.Pool{\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", \"localhost:6379\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t}\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\n\tr.Use(func(c *gin.Context) {\n\t\tconn := redisPool.Get()\n\t\tdefer conn.Close()\n\n\t\tkey := \"counter:\" + c.ClientIP()\n\t\tcount, _ := redis.Int(conn.Do(\"INCR\", key))\n\t\tc.Set(\"count\", count)\n\t\tc.Next()\n\t})\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tcount := c.MustGet(\"count\").(int)\n\t\tc.JSON(http.StatusOK, gin.H{\"count\": count})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with caching capabilities for specific routes using in-memory storage.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), configures an in-memory cache store, and sets up a GET route (\"/cache_ping\") that returns a cached response. The cached response includes a \"pong\" message with the current Unix timestamp, and the cache is set to expire after one minute.\n\nInput: None (The function takes no parameters as it sets up the server configuration internally)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8080)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/cache\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tstore := cache.NewInMemoryStore(time.Second)\n\tr.GET(\"/cache_ping\", cache.CachePage(store, time.Minute, func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t}))\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/render\"\n\t\"github.com/patrickmn/go-cache\"\n)\n\nfunc setupServer() {\n\tc := cache.New(1*time.Minute, 10*time.Minute)\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tr.Use(gin.Logger(), gin.Recovery())\n\n\tr.GET(\"/cache_ping\", func(c *gin.Context) {\n\t\tif val, found := c.Get(\"cache_ping\"); found {\n\t\t\tc.JSON(200, val)\n\t\t\treturn\n\t\t}\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"pong\": time.Now().Unix(),\n\t\t}\n\t\tc.Set(\"cache_ping\", data)\n\t\tc.JSON(200, data)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a reverse proxy server using Gin framework in Go that forwards incoming HTTP requests to a load-balanced backend server and returns the response to the client.\n\nFunction Description: The main function initializes a Gin HTTP server that acts as a reverse proxy. It handles incoming GET requests, forwards them to a backend server obtained from a load balancer, and returns the backend's response to the client while preserving all headers.\n\nInput:\n- Path parameter: \":path\" (string) - The path component of the URL to be forwarded to the backend server\n- HTTP request headers and body (automatically handled by Gin context)\n\nOutput:\n- HTTP response with:\n  - Status code from backend server (or 500 if proxy fails)\n  - Headers from backend server\n  - Body content from backend server\n- Error logs if any step in the proxying process fails\n\nThe function uses the Gin context (c *gin.Context) to:\n1. Extract the original request\n2. Parse the load-balanced backend address\n3. Modify the request URL to point to the backend\n4. Use HTTP transport to forward the request\n5. Copy backend response headers to client response\n6. Stream the backend response body to the client",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\treq := c.Request\n\t\tproxy, err := url.Parse(getLoadBalanceAddr())\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error in parse addr: %v\", err)\n\t\t\tc.String(500, \"error\")\n\t\t\treturn\n\t\t}\n\t\treq.URL.Scheme = proxy.Scheme\n\t\treq.URL.Host = proxy.Host\n\n\t\ttransport := http.DefaultTransport\n\t\tresp, err := transport.RoundTrip(req)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error in roundtrip: %v\", err)\n\t\t\tc.String(500, \"error\")\n\t\t\treturn\n\t\t}\n\n\t\tfor k, vv := range resp.Header {\n\t\t\tfor _, v := range vv {\n\t\t\t\tc.Header(k, v)\n\t\t\t}\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbufio.NewReader(resp.Body).WriteTo(c.Writer)\n\t\treturn\n\t})\n\n\tif err := r.Run(ReverseServerAddr); err != nil {\n\t\tlog.Printf(\"Error: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\tpath := c.Param(\"path\")\n\t\tbackendURL, err := url.Parse(\"http://backend-service\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to parse backend URL\"})\n\t\t\treturn\n\t\t}\n\t\tbackendURL.Path = path\n\n\t\treq, err := http.NewRequest(\"GET\", backendURL.String(), nil)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to create request\"})\n\t\t\treturn\n\t\t}\n\t\tfor key, val := range c.Request.Header {\n\t\t\treq.Header.Set(key, val[0])\n\t\t}\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to forward request\"})\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tfor key, val := range resp.Header {\n\t\t\tc.Header(key, val[0])\n\t\t}\n\t\tc.Status(resp.StatusCode)\n\t\t_, _ = httputil.CopyBody(c.Writer, resp.Body)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests for inventory operations, specifically for trying inventory items. The server should parse JSON input, process the inventory try operation, and return appropriate JSON responses.\n\nFunction Description: The main function sets up a Gin HTTP server with a single POST endpoint \"/service-c/try\" that accepts JSON inventory data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing inventory data (structure not shown in reference code but implied to have an ID field)\n- Gin context object providing request/response capabilities\n\nOutput:\n- Success case (200 status):\n  ```json\n  {\n    \"success\": true,\n    \"message\": \"inventory [ID] tried!\"\n  }\n  ```\n- Error case (400 status):\n  ```json\n  {\n    \"success\": false,\n    \"message\": \"[error description]\"\n  }\n  ```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-c/try\", func(context *gin.Context) {\n\t\tinv := &Inventory{}\n\t\terr := context.BindJSON(inv)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"inventory %d tried!\", inv.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"inventory %d tried!\", inv.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8082\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype InventoryItem struct {\n\tID string `json:\"id\"`\n}\n\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/service-c/try\", func(c *gin.Context) {\n\t\tvar item InventoryItem\n\t\tif err := c.ShouldBindJSON(&item); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": \"Invalid JSON format\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif item.ID == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"success\": false,\n\t\t\t\t\"message\": \"ID is required\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"success\": true,\n\t\t\t\"message\": \"inventory [\" + item.ID + \"] tried!\",\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Go function that implements an HTTP server using the Gin framework, which includes session management using Redis for storing and incrementing a counter value.\n\nFunction Description: The function sets up a Gin web server with Redis-based session management. It provides a single endpoint \"/incr\" that increments a counter stored in the session and returns the current count in JSON format. The server runs on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP requests and runs the web server indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore, _ := sessions.NewRedisStore(10, \"tcp\", \"localhost:6379\", \"\", []byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gomodule/redigo/redis\"\n\t\"net/http\"\n)\n\nfunc setupServer() {\n\t// Redis pool configuration\n\trdb := redis.NewPool(func() (redis.Conn, error) {\n\t\tconn, err := redis.Dial(\"tcp\", \"localhost:6379\")\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn conn, nil\n\t}, 10)\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\n\t// Session middleware with Redis\n\tr.Use(func(c *gin.Context) {\n\t\tsession, _ := rdb.Get()\n\t\tdefer session.Close()\n\n\t\t// Simulate session ID from cookie or header\n\t\t// In a real scenario, this would be handled by a session store\n\t\tsessionID := \"session123\"\n\t\tc.Set(\"session\", sessionID)\n\t\tc.Next()\n\t})\n\n\tr.POST(\"/incr\", func(c *gin.Context) {\n\t\tsessionID := c.MustGet(\"session\").(string)\n\t\tconn := rdb.Get()\n\t\tdefer conn.Close()\n\n\t\t// Initialize counter if not exists\n\t\t_, err := conn.Do(\"INCR\", sessionID)\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to increment counter\"})\n\t\t\treturn\n\t\t}\n\n\t\t// Get current count\n\t\tcount, _ := redis.Int(conn.Do(\"GET\", sessionID))\n\t\tc.JSON(http.StatusOK, gin.H{\"count\": count})\n\t})\n\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles multiple API routes with different authentication requirements and groups related endpoints together.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), organizes routes into logical groups with different authentication requirements, and starts the server. It demonstrates route grouping, middleware chaining, and modular route registration.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for incoming requests)\n\nNote: The actual route handlers are expected to be implemented in separate packages (users, articles) and registered through their respective Register functions. The server runs indefinitely until interrupted.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tv1 := r.Group(\"/api\")\n\tusers.UsersRegister(v1.Group(\"/users\"))\n\tv1.Use(users.AuthMiddleware(false))\n\tarticles.ArticlesAnonymousRegister(v1.Group(\"/articles\"))\n\tarticles.TagsAnonymousRegister(v1.Group(\"/tags\"))\n\n\tv1.Use(users.AuthMiddleware(true))\n\tusers.UserRegister(v1.Group(\"/user\"))\n\tusers.ProfileRegister(v1.Group(\"/profiles\"))\n\n\tarticles.ArticlesRegister(v1.Group(\"/articles\"))\n\n\ttestAuth := r.Group(\"/api/ping\")\n\n\ttestAuth.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tauthMiddleware := func(c *gin.Context) {\n\t\t// Placeholder for actual authentication logic\n\t\tc.Next()\n\t}\n\n\tuserGroup := r.Group(\"/users\")\n\tuserGroup.Use(authMiddleware)\n\tuserGroup.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"User list\"})\n\t})\n\tuserGroup.GET(\"/:id\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"User details\"})\n\t})\n\n\tarticleGroup := r.Group(\"/articles\")\n\tarticleGroup.Use(authMiddleware)\n\tarticleGroup.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Article list\"})\n\t})\n\tarticleGroup.POST(\"/\", func(c *gin.Context) {\n\t\tc.JSON(201, gin.H{\"message\": \"Article created\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses to clients and runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gin.GzipMiddleware())\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.Data(200, \"text/plain\", []byte(\"pong \"+time.Now().Unix().String()))\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint. The endpoint should accept a name parameter, make a gRPC call to a Greeter service, and return the response as JSON. The function should handle both successful responses and errors from the gRPC call.\n\nFunction Description: The function initializes a Gin router with default middleware, establishes a gRPC connection to a Greeter service, and defines a GET endpoint at \"/rest/n/:name\". When called, the endpoint extracts the name parameter, makes a gRPC call to the Greeter service, and returns either the greeting message or an error in JSON format. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters but relies on incoming HTTP requests to the defined endpoint)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/gin-gonic/examples/grpc/example1/gen/helloworld/v1\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := v1.NewGreeterClient(conn)\n\n\tr := gin.Default()\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\n\t\treq := &v1.HelloRequest{Name: name}\n\t\tres, err := client.SayHello(c, req)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\"error\": err.Error(),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"result\": fmt.Sprint(res.Message),\n\t\t})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"could not run server: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\ntype GreeterClient struct {\n\tconn *grpc.ClientConn\n}\n\nfunc (c *GreeterClient) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {\n\tclient := greeter.NewGreeterClient(c.conn)\n\treturn client.SayHello(ctx, in)\n}\n\nfunc setupServer() {\n\tr := gin.Default()\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tfmt.Printf(\"did not connect: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := &GreeterClient{conn: conn}\n\n\tr.GET(\"/rest/n/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\t\tdefer cancel()\n\n\t\tresp, err := client.SayHello(ctx, &HelloRequest{Name: name})\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, resp)\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles user management with versioned API endpoints and authentication middleware.\n\nFunction Description: The main function initializes a Gin router with versioned API endpoints (/v1 and /v2) for user management. Each version has public GET endpoints and protected POST endpoints that require authentication through middleware.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but starts an HTTP server listening on port 8081)\n\nMethods:\n\nAuthMiddleWare: () -> gin.HandlerFunc - Returns a Gin middleware function that handles authentication for protected routes\nAddV1User: (*gin.Context) -> None - Handles POST requests to add users for API version 1\nAddV2User: (*gin.Context) -> None - Handles POST requests to add users for API version 2",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tapiV1 := router.Group(\"/v1\")\n\n\tapiV1.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V1 Users\")\n\t})\n\n\tauthV1 := apiV1.Group(\"/\", AuthMiddleWare())\n\n\tauthV1.POST(\"users/add\", AddV1User)\n\n\tapiV2 := router.Group(\"/v2\")\n\n\tapiV2.GET(\"users\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"List Of V2 Users\")\n\t})\n\n\tauthV2 := apiV2.Group(\"/\", AuthMiddleWare())\n\n\tauthV2.POST(\"users/add\", AddV2User)\n\n\t_ = router.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc AuthMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// Simple authentication logic (e.g., check for a token in headers)\n\t\ttoken := c.GetHeader(\"Authorization\")\n\t\tif token != \"secret\" {\n\t\t\tc.AbortWithStatus(401)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}\n\nfunc AddV1User(c *gin.Context) {\n\tc.JSON(200, gin.H{\"message\": \"User added in v1\"})\n}\n\nfunc AddV2User(c *gin.Context) {\n\tc.JSON(200, gin.H{\"message\": \"User added in v2\"})\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tv1 := r.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"Welcome to v1\"})\n\t\t})\n\t\tv1.POST(\"/user\", AddV1User)\n\t}\n\n\tv2 := r.Group(\"/v2\")\n\t{\n\t\tv2.GET(\"/\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"Welcome to v2\"})\n\t\t})\n\t\tv2.POST(\"/user\", AuthMiddleware(), AddV2User)\n\t}\n\n\tr.Run(\":8081\")\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a Go function that implements an HTTP server using the Gin framework, with endpoints for basic operations including ping, info retrieval, and counter manipulation with thread-safe increment/reset functionality.\n\nFunction Description: The Run function initializes a Gin HTTP server with four API endpoints under the \"/api/v1\" route group. It handles concurrent counter operations safely using mutex locks and logs requests using klog. The server runs on the specified address from the Options parameter.\n\nInput: \n- op *Options: A pointer to an Options struct containing the ListenAddr field specifying the server's listening address (e.g., \":8080\")\n\nOutput:\n- error: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nStruct Description: (Not applicable as the reference code is at function level)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"k8s.io/klog/v2\"\n)\n\nvar (\n\tCount int\n\tMutex sync.Mutex\n)\n\nfunc Run(op *Options) error {\n\tr := gin.Default()\n\n\tapiv1 := r.Group(\"/api/v1\")\n\t{\n\t\tapiv1.GET(\"/ping\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\")\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": \"pong\",\n\t\t\t})\n\t\t})\n\n\t\tapiv1.GET(\"/info\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\", \"headers\", c.Request.Header)\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": \"app3\",\n\t\t\t})\n\t\t})\n\n\t\tapiv1.PUT(\"/count\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\", \"headers\", c.Request.Header)\n\n\t\t\tMutex.Lock()\n\t\t\tCount += 1\n\t\t\tMutex.Unlock()\n\n\t\t\tklog.InfoS(\"app-3 info\", \"count\", Count)\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": fmt.Sprintf(\"app3: %d\", Count),\n\t\t\t})\n\t\t})\n\n\t\tapiv1.DELETE(\"/count\", func(c *gin.Context) {\n\t\t\tklog.InfoS(\"Accept request.\", \"headers\", c.Request.Header)\n\n\t\t\tMutex.Lock()\n\t\t\tCount = 0\n\t\t\tMutex.Unlock()\n\n\t\t\tklog.InfoS(\"app-3 info\", \"count\", Count)\n\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"message\": fmt.Sprintf(\"app1: %d\", Count),\n\t\t\t})\n\t\t})\n\t}\n\n\treturn r.Run(op.ListenAddr)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"k8s.io/klog/v2\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype Options struct {\n\tListenAddr string\n}\n\nfunc Run(op *Options) error {\n\tr := gin.Default()\n\tvar counter int\n\tvar mu sync.Mutex\n\n\tr.POST(\"/api/v1/ping\", func(c *gin.Context) {\n\t\tklog.Info(\"Ping request received\")\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"pong\"})\n\t})\n\n\tr.GET(\"/api/v1/info\", func(c *gin.Context) {\n\t\tklog.Info(\"Info request received\")\n\t\tc.JSON(http.StatusOK, gin.H{\"counter\": counter})\n\t})\n\n\tr.POST(\"/api/v1/increment\", func(c *gin.Context) {\n\t\tmu.Lock()\n\t\tdefer mu.Unlock()\n\t\tcounter++\n\t\tklog.Infof(\"Counter incremented to %d\", counter)\n\t\tc.JSON(http.StatusOK, gin.H{\"counter\": counter})\n\t})\n\n\tr.POST(\"/api/v1/reset\", func(c *gin.Context) {\n\t\tmu.Lock()\n\t\tdefer mu.Unlock()\n\t\tcounter = 0\n\t\tklog.Info(\"Counter reset to 0\")\n\t\tc.JSON(http.StatusOK, gin.H{\"counter\": counter})\n\t})\n\n\tif err := r.Run(op.ListenAddr); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that returns a \"pong\" message with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t\t\"timestamp\": time.Now().Unix(),\n\t\t})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and the message \"pong [current_unix_timestamp]\" when the \"/ping\" endpoint is accessed)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+time.Now().Unix().String())\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a timestamped message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up a single GET route handler at \"/ping\" that responds with a \"pong\" message concatenated with the current Unix timestamp, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server that sends responses to incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tmsg := \"pong\" + time.Now().Unix().String()\n\t\tc.JSON(200, gin.H{\"message\": msg})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session cookie.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/sessions\"\n\t\"net/http\"\n)\n\nvar store = sessions.NewCookieStore([]byte(\"secret-key\"))\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gin.HandlerFunc(func(c *gin.Context) {\n\t\tsession, _ := store.Get(c, \"session-name\")\n\t\tcount, ok := session.Values[\"count\"]\n\t\tif !ok {\n\t\t\tsession.Values[\"count\"] = 0\n\t\t} else {\n\t\t\tsession.Values[\"count\"] = count.(int) + 1\n\t\t}\n\t\tsession.Save(c.Request, c.Writer)\n\t\tc.JSON(http.StatusOK, gin.H{\"count\": session.Values[\"count\"].(int)})\n\t}))\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession, _ := store.Get(c, \"session-name\")\n\t\tcount, ok := session.Values[\"count\"]\n\t\tif !ok {\n\t\t\tsession.Values[\"count\"] = 0\n\t\t} else {\n\t\t\tsession.Values[\"count\"] = count.(int) + 1\n\t\t}\n\t\tsession.Save(c.Request, c.Writer)\n\t\tc.JSON(http.StatusOK, gin.H{\"count\": session.Values[\"count\"].(int)})\n\t})\n\tr.Run(\":8000\")\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Implement a rate-limited HTTP server using the Gin framework in Go, which includes middleware for request rate limiting and a simple endpoint to test the rate limiting functionality.\n\nFunction Description: The `ginRun` function initializes and starts a Gin HTTP server with rate limiting capabilities. It sets up a leaky bucket rate limiter middleware and provides a single endpoint (\"/rate\") for testing the rate limiting. The server runs on port 8080.\n\nInput: \n- `rps` (int): The maximum number of requests per second that the server will allow (rate limit value)\n\nOutput: \n- None (The function starts an HTTP server that runs indefinitely until interrupted)\n- Logs the current rate limit setting to stdout\n- Responds to HTTP requests on the \"/rate\" endpoint with a JSON message",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc ginRun(rps int) {\n\tlimit = ratelimit.New(rps)\n\n\tapp := gin.Default()\n\tapp.Use(leakBucket())\n\n\tapp.GET(\"/rate\", func(ctx *gin.Context) {\n\t\tctx.JSON(200, \"rate limiting test\")\n\t})\n\n\tlog.Printf(color.CyanString(\"Current Rate Limit: %v requests/s\", rps))\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype rateLimiter struct {\n\tmu        sync.Mutex\n\trate      int\n\tbucket    int\n\ttimestamp time.Time\n}\n\nfunc (rl *rateLimiter) Allow() bool {\n\trl.mu.Lock()\n\tdefer rl.mu.Unlock()\n\n\tnow := time.Now()\n\tif now.Sub(rl.timestamp) > time.Second {\n\t\trl.bucket = rl.rate\n\t\trl.timestamp = now\n\t} else {\n\t\trl.bucket--\n\t}\n\n\treturn rl.bucket > 0\n}\n\nfunc rateLimitMiddleware(rps int) gin.HandlerFunc {\n\tlimiter := &rateLimiter{\n\t\trate:      rps,\n\t\tbucket:    rps,\n\t\ttimestamp: time.Now(),\n\t}\n\n\treturn func(c *gin.Context) {\n\t\tif limiter.Allow() {\n\t\t\tc.Next()\n\t\t} else {\n\t\t\tc.AbortWithStatusJSON(http.StatusTooManyRequests, gin.H{\"error\": \"Rate limit exceeded\"})\n\t\t}\n\t}\n}\n\nfunc ginRun(rps int) {\n\tlog.Printf(\"Starting HTTP server with rate limit of %d requests per second\\n\", rps)\n\n\tr := gin.Default()\n\tr.Use(rateLimitMiddleware(rps))\n\tr.GET(\"/rate\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Request processed\"})\n\t})\n\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements a simple session-based counter. The server should increment and return a counter value with each request, storing the count in a session.\n\nFunction Description: The main function initializes a Gin server with session middleware, sets up a route handler for GET requests at \"/incr\" that increments and returns a session-based counter, and starts the server on port 8000.\n\nInput: None (The function takes no direct input parameters, but handles HTTP GET requests to the \"/incr\" endpoint)\n\nOutput: None (The function doesn't return any value, but starts an HTTP server that responds to requests with JSON containing the current count, e.g., {\"count\": 5})",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount += 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/sessions\"\n\t\"net/http\"\n)\n\nvar store = sessions.NewCookieStore([]byte(\"secret-key\"))\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gin.SessionControl(store, \"session-name\"))\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := c.Session\n\t\tcount, _ := session.Get(\"count\")\n\t\tif count == nil {\n\t\t\tcount = 1\n\t\t} else {\n\t\t\tcount = count.(int) + 1\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(http.StatusOK, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Implement a JWT-based authentication service using Gin framework in Go, which provides public endpoints for token generation and private endpoints that require valid JWT tokens for access.\n\nFunction Description: The main function sets up a Gin HTTP server with JWT authentication. It creates two route groups: a public group for token generation and a private group that requires JWT authentication. The public endpoint generates JWT tokens, while the private endpoint demonstrates protected access.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests with the following possible inputs:\n- GET request to \"/api/\" for token generation\n- GET request to \"/api/private/\" for accessing protected content)\n\nOutput: HTTP responses with the following possible outputs:\n- For \"/api/\": JSON response containing a JWT token or error message\n- For \"/api/private/\": JSON response with protected content or authentication error\n- The server runs continuously on localhost:8080",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype Claims struct {\n\tUserID string `json:\"user_id\"`\n\tjwt.RegisteredClaims\n}\n\nfunc generateToken(userID string) (string, error) {\n\tclaims := &Claims{\n\t\tUserID: userID,\n\t\tRegisteredClaims: jwt.RegisteredClaims{\n\t\t\tExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),\n\t\t\tIssuer:    \"auth-service\",\n\t\t},\n\t}\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\treturn token.SignedString([]byte(\"secret-key\"))\n}\n\nfunc authMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\ttokenString := c.GetHeader(\"Authorization\")\n\t\tif tokenString == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing token\"})\n\t\t\treturn\n\t\t}\n\t\tclaims := &Claims{}\n\t\ttoken, err := jwt.ParseWithClaims(tokenString, claims, func(t *jwt.Token) (interface{}, error) {\n\t\t\treturn []byte(\"secret-key\"), nil\n\t\t})\n\t\tif err != nil || !token.Valid {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\treturn\n\t\t}\n\t\tc.Set(\"user\", claims.UserID)\n\t\tc.Next()\n\t}\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublicGroup := r.Group(\"/api\")\n\t{\n\t\tpublicGroup.GET(\"/\", func(c *gin.Context) {\n\t\t\ttoken, err := generateToken(\"12345\")\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to generate token\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.JSON(http.StatusOK, gin.H{\"token\": token})\n\t\t})\n\t}\n\n\tprivateGroup := r.Group(\"/api\")\n\t{\n\t\tprivateGroup.Use(authMiddleware())\n\t\tprivateGroup.GET(\"/private\", func(c *gin.Context) {\n\t\t\tuserID := c.MustGet(\"user\").(string)\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Protected content\", \"user\": userID})\n\t\t})\n\t}\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles POST requests to a specific endpoint, processes JSON input, and returns appropriate JSON responses.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint \"/service-b/try\" that receives JSON account data, processes it, and returns success or error responses in JSON format.\n\nInput: \n- None (the function takes no direct input parameters, but receives HTTP requests with JSON payloads matching the Account struct format)\n\nOutput:\n- None (the function doesn't return any value directly, but sends HTTP responses with JSON bodies containing either success or error messages)\n\nNote: The Account struct (not shown in reference code) would typically contain at least an ID field to be properly processed by this endpoint.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-b/try\", func(context *gin.Context) {\n\t\taccount := &Account{}\n\t\terr := context.BindJSON(account)\n\t\tif err == nil {\n\t\t\tfmt.Println(fmt.Sprintf(\"account %d tried!\", account.ID))\n\t\t\tcontext.JSON(200, gin.H{\n\t\t\t\t\"success\": true,\n\t\t\t\t\"message\": fmt.Sprintf(\"account %d tried!\", account.ID),\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tcontext.JSON(400, gin.H{\n\t\t\t\"success\": false,\n\t\t\t\"message\": err.Error(),\n\t\t})\n\t})\n\n\tr.Run(\":8081\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype Account struct {\n\tID string `json:\"id\"`\n}\n\nfunc setupServer() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-b/try\", func(c *gin.Context) {\n\t\tvar account Account\n\t\tif err := c.ShouldBindJSON(&account); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid JSON format\"})\n\t\t\treturn\n\t\t}\n\n\t\tif account.ID == \"\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"ID is required\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Account processed successfully\", \"id\": account.ID})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that implements JWT-based authentication with public and private routes. The server should generate tokens for public access and validate them for private routes.\n\nFunction Description: The main function sets up a Gin server with two route groups: public routes that generate JWT tokens, and private routes that require valid JWT tokens for access. The server runs on localhost:8080.\n\nInput: None (The function takes no direct input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens for requests)\n\nMethods:\n\n1. Public route handler: Handles GET requests to \"/api/\" and generates a JWT token\n   - Input: Gin context object\n   - Output: JSON response containing either the token or an error message\n\n2. Private route handler: Handles GET requests to \"/api/private/\" and requires valid JWT\n   - Input: Gin context object (with validated JWT)\n   - Output: JSON response with a private message\n\n3. Server startup: Starts the Gin server on port 8080\n   - Input: Address string (\"localhost:8080\")\n   - Output: None (blocks and serves requests)",
    "Canonical_solution": "import (\n\t\"time\"\n\n\tjwt_lib \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar (\n\tmysupersecretpassword = \"unicornsAreAwesome\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tpublic := r.Group(\"/api\")\n\n\tpublic.GET(\"/\", func(c *gin.Context) {\n\t\ttoken := jwt_lib.New(jwt_lib.GetSigningMethod(\"HS256\"))\n\t\ttoken.Claims = jwt_lib.MapClaims{\n\t\t\t\"Id\":  \"Christopher\",\n\t\t\t\"exp\": time.Now().Add(time.Hour * 1).Unix(),\n\t\t}\n\t\ttokenString, err := token.SignedString([]byte(mysupersecretpassword))\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\"message\": \"Could not generate token\"})\n\t\t}\n\t\tc.JSON(200, gin.H{\"token\": tokenString})\n\t})\n\n\tprivate := r.Group(\"/api/private\")\n\tprivate.Use(jwt.Auth(mysupersecretpassword))\n\n\tprivate.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from private\"})\n\t})\n\n\tr.Run(\"localhost:8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype Claims struct {\n\tUser string\n\tjwt.RegisteredClaims\n}\n\nfunc generateToken(username string) (string, error) {\n\tclaims := &Claims{\n\t\tUser: username,\n\t\tRegisteredClaims: jwt.RegisteredClaims{\n\t\t\tExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),\n\t\t\tIssuer:    \"myapp\",\n\t\t},\n\t}\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\treturn token.SignedString([]byte(\"secret-key\"))\n}\n\nfunc authMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\ttokenString := c.GetHeader(\"Authorization\")\n\t\tif tokenString == \"\" {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Missing token\"})\n\t\t\treturn\n\t\t}\n\t\ttoken, err := jwt.ParseWithClaims(tokenString, &Claims{}, func(token *jwt.Token) (interface{}, error) {\n\t\t\treturn []byte(\"secret-key\"), nil\n\t\t})\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t\treturn\n\t\t}\n\t\tif claims, ok := token.Claims.(*Claims); ok && token.Valid {\n\t\t\tc.Set(\"user\", claims.User)\n\t\t\tc.Next()\n\t\t} else {\n\t\t\tc.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{\"error\": \"Invalid token\"})\n\t\t}\n\t}\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/api/\", func(c *gin.Context) {\n\t\ttoken, err := generateToken(\"user123\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\"error\": \"Failed to generate token\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\"token\": token})\n\t})\n\n\tr.GET(\"/api/private/\", authMiddleware(), func(c *gin.Context) {\n\t\tuser := c.MustGet(\"user\").(string)\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Private message for \" + user})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with custom template delimiters and a date formatting function, serving HTML content from a template file.\n\nFunction Description: The function initializes a Gin router with custom template delimiters \"{[{\" and \"}]}\", registers a template formatting function \"formatAsDate\", loads an HTML template file, and sets up a GET route handler that renders the template with a predefined date value. The server listens on port 8080.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Delims(\"{[{\", \"}]}\")\n\trouter.SetFuncMap(template.FuncMap{\n\t\t\"formatAsDate\": formatAsDate,\n\t})\n\trouter.LoadHTMLFiles(\"./testdata/raw.tmpl\")\n\n\trouter.GET(\"/raw\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"raw.tmpl\", gin.H{\n\t\t\t\"now\": time.Date(2017, 0o7, 0o1, 0, 0, 0, 0, time.UTC),\n\t\t})\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc initServer() {\n\tdelimiters := gin.H{\n\t\t\"start\": \"{[\",\n\t\t\"end\":   \"}]\",\n\t}\n\tengine := gin.Default()\n\tengine.SetFuncMap(delimiters)\n\tengine.LoadHTMLFiles(\"template.html\")\n\tengine.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"template.html\", gin.H{\n\t\t\t\"date\": time.Now().Format(\"2006-01-02\"),\n\t\t})\n\t})\n\tengine.Use(func(c *gin.Context) {\n\t\tc.Next()\n\t})\n\tengine.Run(\":8080\")\n}"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that serves HTML templates, static files, and a favicon, with routes for the main page and a foo page.\n\nFunction Description: The main function initializes a Gin router, sets up HTML templates from embedded files, serves static files, defines route handlers for the root path (\"/\"), \"/foo\" path, and favicon, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but relies on embedded filesystem content for templates and assets)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running)\n\nNote: The implementation assumes the existence of an embedded filesystem (variable 'f' of type embed.FS) containing template files in \"templates/\" and \"templates/foo/\" directories, and assets in an \"assets/\" directory.",
    "Canonical_solution": "import (\n\t\"embed\"\n\t\"html/template\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\ttempl := template.Must(template.New(\"\").ParseFS(f, \"templates/*.tmpl\", \"templates/foo/*.tmpl\"))\n\trouter.SetHTMLTemplate(templ)\n\n\trouter.StaticFS(\"/public\", http.FS(f))\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\n\trouter.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"bar.tmpl\", gin.H{\n\t\t\t\"title\": \"Foo website\",\n\t\t})\n\t})\n\n\trouter.GET(\"favicon.ico\", func(c *gin.Context) {\n\t\tfile, _ := f.ReadFile(\"assets/favicon.ico\")\n\t\tc.Data(\n\t\t\thttp.StatusOK,\n\t\t\t\"image/x-icon\",\n\t\t\tfile,\n\t\t)\n\t})\n\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"embed\"\n\t\"net/http\"\n)\n\n//go:embed templates/*.html templates/foo/*.html assets/*\nvar f embed.FS\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Serve static files from assets/\n\tr.Static(\"/assets\", \"assets\")\n\n\t// Load HTML templates\n\ttmpl, _ := gin.ParseHTMLTemplates(f, \"templates/*.html\", \"templates/foo/*.html\")\n\tr.SetHTMLTemplate(tmpl)\n\n\t// Route handlers\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.html\", nil)\n\t})\n\n\tr.GET(\"/foo\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"foo.html\", nil)\n\t})\n\n\t// Serve favicon\n\tr.StaticFile(\"/favicon.ico\", \"assets/favicon.ico\")\n\n\tr.Run(\":8080\")\n}\n```"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Go function that initializes and configures a Gin HTTP server with New Relic monitoring middleware, and defines a simple route handler.\n\nFunction Description: The function sets up a basic Gin web server with default middleware (Logger and Recovery), configures New Relic monitoring if environment variables are present, and registers a root route handler that returns \"Hello World!\". The server runs on the default port (8080).\n\nInput: None (uses environment variables APP_NAME and NEW_RELIC_API_KEY for optional New Relic configuration)\n\nOutput: None (starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\tcfg := newrelic.NewConfig(os.Getenv(\"APP_NAME\"), os.Getenv(\"NEW_RELIC_API_KEY\"))\n\tapp, err := newrelic.NewApplication(cfg)\n\tif err != nil {\n\t\tlog.Printf(\"failed to make new_relic app: %v\", err)\n\t} else {\n\t\trouter.Use(NewRelicMonitoring(app))\n\t}\n\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello World!\\n\")\n\t})\n\trouter.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/newrelic/go-agent/v3/newrelic\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc SetupServer() {\n\tr := gin.Default()\n\tr.Use(gin.Logger())\n\tr.Use(gin.Recovery())\n\n\tappName := os.Getenv(\"APP_NAME\")\n\tnewRelicApiKey := os.Getenv(\"NEW_RELIC_API_KEY\")\n\n\tif appName != \"\" && newRelicApiKey != \"\" {\n\t\tcfg := &newrelic.Config{\n\t\t\tAppName:     appName,\n\t\t\tLicenseKey:  newRelicApiKey,\n\t\t\tLicenseKey2: \"\",\n\t\t\tAttributes:  newrelic.AttributesDefault,\n\t\t}\n\t\tapp, err := newrelic.NewApplication(cfg)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tr.Use(newrelic.HandlerFunc(app))\n\t}\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello World!\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- None (The function takes no parameters as it's the main entry point)\n\nOutput: \n- None (The function doesn't return but runs an HTTP server indefinitely or until fatal error)\n\nNote: The function uses autotls.Run() which automatically obtains and renews TLS certificates from Let's Encrypt for the specified domains. The server will listen on both HTTP (port 80) and HTTPS (port 443) ports.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/go-acme/lego/v4/autotls\"\n\t\"github.com/go-acme/lego/v4/challenge/tlsalpn01\"\n\t\"github.com/go-acme/lego/v4/registration\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"pong\"})\n\t})\n\n\tconfig := autotls.Config{\n\t\tCache: autotls.NewFileCache(\"./certs\"),\n\t\tAcceptTermsOfService: true,\n\t\tEmail: \"your-email@example.com\",\n\t\tChallenges: []autotls.ChallengeProvider{\n\t\t\ttlsalpn01.NewProvider(),\n\t\t},\n\t}\n\n\treg := registration.Register{\n\t\tEmail:            \"your-email@example.com\",\n\t\tAgreeToTerms:     true,\n\t\tPrivateKey:       nil,\n\t\tRegistration:     nil,\n\t}\n\n\tautotls.Run(r, config, reg, \"example.com\", \"www.example.com\")\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that provides translation services through the DeepLX API. The server should handle GET and POST requests, implement authentication middleware, and support proxy configuration.\n\nFunction Description: The main function initializes a Gin HTTP server with CORS support, sets up routes for translation services, and starts the server on a specified port. It includes:\n1. Configuration initialization\n2. Proxy setup (if configured)\n3. Route handlers for root (/) and translation (/translate) endpoints\n4. Authentication middleware for protected routes\n5. Translation request processing and response handling\n\nInput:\n- Configuration parameters (IP, Port, Proxy, Token) from initConfig()\n- Environment variable PROXY (optional)\n- HTTP requests:\n  * GET / - Returns server information\n  * POST /translate - Accepts JSON payload with translation parameters\n\nOutput:\n- HTTP responses:\n  * For GET /: JSON response with server information\n  * For POST /translate: JSON response with translation results or error message\n- Console output: Server startup message and configuration status\n\nStruct Description: (Not applicable - the reference code is at function level)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\ttranslate \"github.com/OwO-Network/DeepLX/translate\"\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tcfg := initConfig()\n\n\tfmt.Printf(\"DeepL X has been successfully launched! Listening on %v:%v\\n\", cfg.IP, cfg.Port)\n\tfmt.Println(\"Developed by sjlleo <i@leo.moe> and missuo <me@missuo.me>.\")\n\n\tproxyURL := os.Getenv(\"PROXY\")\n\tif proxyURL == \"\" {\n\t\tproxyURL = cfg.Proxy\n\t}\n\tif proxyURL != \"\" {\n\t\tproxy, err := url.Parse(proxyURL)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to parse proxy URL: %v\", err)\n\t\t}\n\t\thttp.DefaultTransport = &http.Transport{\n\t\t\tProxy: http.ProxyURL(proxy),\n\t\t}\n\t}\n\n\tif cfg.Token != \"\" {\n\t\tfmt.Println(\"Access token is set.\")\n\t}\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tr.Use(cors.Default())\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    http.StatusOK,\n\t\t\t\"message\": \"DeepL Free API, Developed by sjlleo and missuo. Go to /translate with POST. http://github.com/OwO-Network/DeepLX\",\n\t\t})\n\t})\n\n\tr.POST(\"/translate\", authMiddleware(cfg), func(c *gin.Context) {\n\t\treq := PayloadFree{}\n\t\tc.BindJSON(&req)\n\n\t\tsourceLang := req.SourceLang\n\t\ttargetLang := req.TargetLang\n\t\ttranslateText := req.TransText\n\t\ttagHandling := req.TagHandling\n\n\t\tproxyURL := cfg.Proxy\n\n\t\tif tagHandling != \"\" && tagHandling != \"html\" && tagHandling != \"xml\" {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\"code\":    http.StatusBadRequest,\n\t\t\t\t\"message\": \"Invalid tag_handling value. Allowed values are 'html' and 'xml'.\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\tresult, err := translate.TranslateByDeepLX(sourceLang, targetLang, translateText, tagHandling, proxyURL, \"\")\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Translation failed: %s\", err)\n\t\t}\n\n\t\tif result.Code == http.StatusOK {\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":         http.StatusOK,\n\t\t\t\t\"id\":           result.ID,\n\t\t\t\t\"data\":         result.Data,\n\t\t\t\t\"alternatives\": result.Alternatives,\n\t\t\t\t\"source_lang\":  result.SourceLang,\n\t\t\t\t\"target_lang\":  result.TargetLang,\n\t\t\t\t\"method\":       result.Method,\n\t\t\t})\n\t\t} else {\n\t\t\tc.JSON(result.Code, gin.H{\n\t\t\t\t\"code\":    result.Code,\n\t\t\t\t\"message\": result.Message,\n\t\t\t})\n\t\t}\n\t})\n\n\tr.Run(fmt.Sprintf(\"%v:%v\", cfg.IP, cfg.Port))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/proxy\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc initConfig() (string, string, string, string) {\n\tip := \"127.0.0.1\"\n\tport := \"8080\"\n\tproxyURL := \"\"\n\ttoken := \"your_token_here\"\n\treturn ip, port, proxyURL, token\n}\n\nfunc setupCORS(router *gin.Engine) {\n\trouter.Use(func(c *gin.Context) {\n\t\tc.Header(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\")\n\t\tc.Header(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\")\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t})\n}\n\nfunc main() {\n\tip, port, proxyURL, token := initConfig()\n\t\n\trouter := gin.Default()\n\tsetupCORS(router)\n\t\n\tif proxyURL != \"\" {\n\t\tproxyHandler := &proxy.ReverseProxy{\n\t\t\tDirector: func(req *http.Request) {\n\t\t\t\treq.URL.Scheme = \"http\"\n\t\t\t\treq.URL.Host = proxyURL\n\t\t\t\treq.URL.Path = \"/translate\"\n\t\t\t},\n\t\t\tTransport: &http.Transport{\n\t\t\t\tProxy: http.ProxyURL(proxyURL),\n\t\t\t},\n\t\t}\n\t\trouter.Handle(\"GET\", \"/translate\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tproxyHandler.ServeHTTP(w, r)\n\t\t}))\n\t} else {\n\t\trouter.POST(\"/translate\", func(c *gin.Context) {\n\t\t\t// Translation logic here\n\t\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Translation successful\"})\n\t\t})\n\t}\n\t\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"server\": \"Translation Server\",\n\t\t\t\"ip\":     ip,\n\t\t\t\"port\":   port,\n\t\t})\n\t})\n\t\n\trouter.Run(ip + \":\" + port)\n}"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Gin-based HTTP server in Go that handles various routes including a ping endpoint, user lookup, and authenticated admin updates.\n\nFunction Description: The main function initializes a Gin web server with default middleware (Logger and Recovery), sets up route handlers for different HTTP methods, and starts the server on port 8080. It includes:\n1. A simple ping/pong endpoint\n2. A user lookup endpoint with path parameters\n3. An authenticated admin endpoint for updating values\n4. Basic authentication middleware for protected routes\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything, but sends HTTP responses to clients)\n\nNote: The code assumes the existence of a global DB map variable (not shown in the reference) for storing user values. The actual implementation would need to include this or an alternative storage mechanism.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tr.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tuser := c.Params.ByName(\"name\")\n\t\tvalue, ok := DB[user]\n\t\tif ok {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"value\": value})\n\t\t} else {\n\t\t\tc.JSON(200, gin.H{\"user\": user, \"status\": \"no value\"})\n\t\t}\n\t})\n\n\tauthorized := r.Group(\"/\", gin.BasicAuth(gin.Accounts{\n\t\t\"foo\":  \"bar\",\n\t\t\"manu\": \"123\",\n\t}))\n\n\tauthorized.POST(\"admin\", func(c *gin.Context) {\n\t\tuser := c.MustGet(gin.AuthUserKey).(string)\n\n\t\tvar json struct {\n\t\t\tValue string `json:\"value\" binding:\"required\"`\n\t\t}\n\n\t\tif c.Bind(&json) == nil {\n\t\t\tDB[user] = json.Value\n\t\t\tc.JSON(200, gin.H{\"status\": \"ok\"})\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar DB = make(map[string]string)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gin.Logger())\n\tr.Use(gin.Recovery())\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"pong\"})\n\t})\n\n\tr.GET(\"/user/:id\", func(c *gin.Context) {\n\t\tid := c.Param(\"id\")\n\t\tvalue, exists := DB[id]\n\t\tif exists {\n\t\t\tc.JSON(200, gin.H{\"id\": id, \"value\": value})\n\t\t} else {\n\t\t\tc.JSON(404, gin.H{\"error\": \"User not found\"})\n\t\t}\n\t})\n\n\tauthMiddleware := func() gin.HandlerFunc {\n\t\treturn func(c *gin.Context) {\n\t\t\tuser := c.GetHeader(\"Authorization\")\n\t\t\tif user != \"admin\" {\n\t\t\t\tc.AbortWithStatus(401)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.Next()\n\t\t}\n\t}\n\n\tr.PUT(\"/admin/update\", authMiddleware(), func(c *gin.Context) {\n\t\tnewValue := c.Query(\"value\")\n\t\tDB[\"admin\"] = newValue\n\t\tc.JSON(200, gin.H{\"message\": \"Admin value updated\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a simple HTTP server in Go using the Gin framework that handles file uploads via POST requests.\n\nFunction Description: The function sets up a Gin HTTP server with a single POST endpoint (\"/upload\") that receives and discards uploaded file data, then responds with \"ok\". The server runs on port 8888.\n\nInput: None (The function takes no direct input parameters, but receives HTTP POST requests with file data in the request body)\n\nOutput: None (The function doesn't return any value, but sends HTTP responses with status code 200 and body \"ok\" for successful uploads)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tbody := c.Request.Body\n\t\tio.Copy(io.Discard, body)\n\t\tc.String(http.StatusOK, \"ok\")\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t_ = c.Request.Body\n\t\tc.String(http.StatusOK, \"ok\")\n\t})\n\tr.Run(\":8888\")\n}"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to ping requests with a pong message and the current Unix timestamp.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (including Logger and Recovery), adds gzip compression middleware, registers a GET route handler for \"/ping\" that returns a plain text response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters. HTTP requests to the \"/ping\" endpoint serve as indirect input.)\n\nOutput: None (The function doesn't return any value directly. It sends HTTP responses to clients as output.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/contrib/gzip\"\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gzip.Gzip(gzip.DefaultCompression))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong \"+fmt.Sprint(time.Now().Unix()))\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "right_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.Use(gin.GzipMiddleware())\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.Data(200, \"text/plain\", []byte(\"pong \"+time.Now().Unix().String()))\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP client in Go that establishes a connection to a server, sends a message, and handles the connection lifecycle properly.\n\nFunction Description: The function establishes a TCP connection to a specified server address, sends a predefined message (\"hello\"), and prints the number of bytes written or any error encountered. It ensures the connection is properly closed after use.\n\nInput: None (The server address is hardcoded as \"127.0.0.1:49153\" in this example)\n\nOutput: \n- On success: Prints the number of bytes written to the connection (integer)\n- On failure: Prints the error encountered during connection or writing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\tdialer := &net.Dialer{\n\t\tLocalAddr: &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(\"127.0.0.1\"),\n\t\t\tPort: 0,\n\t\t},\n\t}\n\n\tconn, err := dialer.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tt := &wrappedConn{conn}\n\tvar w io.Writer = t\n\tif n, err := w.Write([]byte(\"hello\")); err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(n)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"127.0.0.1:49153\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\n\tmessage := \"hello\"\n\tn, err := conn.Write([]byte(message))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(n)\n}"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Implement a TCP client function in Go that establishes a connection to a server, sends data, and receives a response.\n\nFunction Description: The function `Tcp` handles TCP communication with a remote server. It establishes a connection, sends optional data, and reads the server's response. Errors are captured and returned in the response structure. The connection is automatically closed when the function completes.\n\nInput: \n- `ctx context.Context`: Context for managing deadlines and cancellation signals\n- `req *pb.TcpRequest`: Request object containing:\n  - `Address string`: The server address to connect to (format \"host:port\")\n  - `Data string`: Optional data to send to the server\n- `rsp *pb.TcpResponse`: Response object to populate with results\n\nOutput:\n- `error`: Returns an error if address validation fails, otherwise nil (errors during TCP operations are stored in the response)\n- Modifies `rsp` with:\n  - `Status string`: \"OK\" on success or error message\n  - `Data string`: Received data from server (if any)",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\n\tpb \"github.com/micro/services/ping/proto\"\n)\n\nfunc (p *Ping) Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif len(req.Address) == 0 {\n\t\treturn errors.BadRequest(\"ping.tcp\", \"missing address\")\n\t}\n\n\tc, err := net.Dial(\"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\tdefer c.Close()\n\n\tif len(req.Data) == 0 {\n\t\trsp.Status = \"OK\"\n\t\treturn nil\n\t}\n\n\tfmt.Fprint(c, req.Data)\n\n\tdata, err := bufio.NewReader(c).ReadString('\\n')\n\tif err != nil {\n\t\trsp.Status = err.Error()\n\t\treturn nil\n\t}\n\n\trsp.Status = \"OK\"\n\trsp.Data = data\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nfunc Tcp(ctx context.Context, req *pb.TcpRequest, rsp *pb.TcpResponse) error {\n\tif req.Address == \"\" {\n\t\trsp.Status = \"Address is required\"\n\t\treturn fmt.Errorf(\"address is required\")\n\t}\n\n\tconn, err := net.DialContext(ctx, \"tcp\", req.Address)\n\tif err != nil {\n\t\trsp.Status = fmt.Sprintf(\"Failed to connect: %v\", err)\n\t\treturn nil\n\t}\n\tdefer conn.Close()\n\n\tif req.Data != \"\" {\n\t\t_, err = conn.Write([]byte(req.Data))\n\t\tif err != nil {\n\t\t\trsp.Status = fmt.Sprintf(\"Failed to send data: %v\", err)\n\t\t\treturn nil\n\t\t}\n\t}\n\n\tbuffer := make([]byte, 4096)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\trsp.Status = fmt.Sprintf(\"Failed to read response: %v\", err)\n\t\treturn nil\n\t}\n\n\trsp.Data = string(buffer[:n])\n\trsp.Status = \"OK\"\n\treturn nil\n}"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a function that establishes a TCP connection to a server, reads all data from the connection, and returns the data as a string.\n\nFunction Description: The function connects to a TCP server at the specified address, reads all available data from the connection, closes the connection, and returns the received data as a string. If the connection fails, it should panic with the error.\n\nInput: \n- address (string): The server address in the format \"host:port\" (e.g., \"localhost:9000\")\n\nOutput: \n- string: The data received from the server\n- error: Returns an error if the connection or read operation fails (though in the reference code it panics on connection error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n)\n\nfunc main() {\n\tconn, err := net.Dial(\"tcp\", \"localhost:9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tbs, _ := ioutil.ReadAll(conn)\n\tfmt.Println(string(bs))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 110,
    "right_result": "func readTCPData(address string) string {\n\tconn, err := net.Dial(\"tcp\", address)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\tbuffer := make([]byte, 1024)\n\tvar result []byte\n\tfor {\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tresult = append(result, buffer[:n]...)\n\t}\n\treturn string(result)\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Implement a Go struct that handles DNS queries over UDP with context support and deadline management.\n\nStruct Description: DNSEndpoint represents a DNS server endpoint capable of performing DNS queries with context support, deadline management, and transaction ID matching.\n\nFields:\nAddr: string - The address of the DNS server in \"host:port\" format\n\nMethods:\nExchange: (ctx context.Context, payload, buf []byte) -> (n int, err error) - Performs a DNS query exchange:\n  - Establishes a UDP connection to the server\n  - Sets deadline from context if available\n  - Generates random transaction ID\n  - Sends DNS query payload\n  - Reads response and validates transaction ID\n  - Returns number of bytes read or any error\n  - Automatically closes connection when done",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\td := &net.Dialer{}\n\tc, err := d.DialContext(ctx, \"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"dial: %v\", err)\n\t}\n\tdefer c.Close()\n\tif t, ok := ctx.Deadline(); ok {\n\t\t_ = c.SetDeadline(t)\n\t}\n\tif _, err := rand.Read(payload[:2]); err != nil {\n\t\treturn 0, err\n\t}\n\t_, err = c.Write(payload)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"write: %v\", err)\n\t}\n\tid := uint16(payload[0])<<8 | uint16(buf[1])\n\tfor {\n\t\tif n, err = c.Read(buf[:514]); err != nil {\n\t\t\treturn n, fmt.Errorf(\"read: %v\", err)\n\t\t}\n\t\tif n < 2 {\n\t\t\tcontinue\n\t\t}\n\t\tif id != uint16(buf[0])<<8|uint16(buf[1]) {\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n\treturn\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package dns\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"time\"\n)\n\ntype DNSEndpoint struct {\n\tAddr string\n}\n\nfunc (e *DNSEndpoint) Exchange(ctx context.Context, payload, buf []byte) (n int, err error) {\n\tconn, err := net.Dial(\"udp\", e.Addr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer conn.Close()\n\n\tif deadline, ok := ctx.Deadline(); ok {\n\t\tconn.SetDeadline(deadline)\n\t}\n\n\ttxID := make([]byte, 2)\n\tif _, err := rand.Read(txID); err != nil {\n\t\treturn 0, err\n\t}\n\n\tif _, err := conn.Write(append(txID, payload...)); err != nil {\n\t\treturn 0, err\n\t}\n\n\tn, err = conn.Read(buf)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tif n < 2 {\n\t\treturn 0, ErrShortRead\n\t}\n\n\tif !bytes.Equal(buf[:2], txID) {\n\t\treturn 0, ErrTransactionIDMismatch\n\t}\n\n\treturn n, nil\n}"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It maintains configuration and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC for the specified realm, handling multiple KDC addresses and error cases\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a single KDC connection",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Config struct {\n\tKDCAddresses []string\n\tRetryDelay   time.Duration\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tkdcs := make(map[int]string)\n\tfor i, addr := range c.Config.KDCAddresses {\n\t\tkdcs[i] = addr\n\t}\n\treturn c.dialSendTCP(kdcs, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tfor idx, addr := range kdcs {\n\t\tconn, err := net.Dial(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tif idx == len(kdcs)-1 {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttime.Sleep(c.Config.RetryDelay)\n\t\t\tcontinue\n\t\t}\n\t\tdefer conn.Close()\n\t\treturn c.sendTCP(conn, b)\n\t}\n\treturn nil, errors.New(\"failed to connect to any KDC\")\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresponse := make([]byte, 1024)\n\tn, err := conn.Read(response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn response[:n], nil\n}"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Implement a TCP client in Go that periodically sends metrics data to an OpenTSDB server, handling different types of metrics (counters, gauges, histograms, meters, and timers) with appropriate formatting.\n\nStruct Description: The OpenTSDBConfig struct contains configuration parameters for connecting to an OpenTSDB server and sending metrics data at regular intervals.\n\nFields:\nAddr: *net.TCPAddr - The TCP address of the OpenTSDB server\nRegistry: Registry - The metrics registry containing all metrics to be reported\nFlushInterval: time.Duration - The interval at which metrics are sent to the server\nDurationUnit: time.Duration - The time unit for converting timer metrics\nPrefix: string - The prefix to be added to all metric names\n\nMethods:\nOpenTSDBWithConfig: OpenTSDBWithConfig(c OpenTSDBConfig) - Starts a ticker that periodically calls openTSDB with the given configuration at the specified FlushInterval\nopenTSDB: openTSDB(c *OpenTSDBConfig) error - Establishes a TCP connection to the OpenTSDB server, formats and sends all metrics from the registry, and returns any error that occurs during the process",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\n\ntype OpenTSDBConfig struct {\n\tAddr          *net.TCPAddr\n\tRegistry      Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tfor _ = range time.Tick(c.FlushInterval) {\n\t\tif err := openTSDB(&c); nil != err {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tshortHostname := getShortHostname()\n\tnow := time.Now().Unix()\n\tdu := float64(c.DurationUnit)\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif nil != err {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\tw := bufio.NewWriter(conn)\n\tc.Registry.Each(func(name string, i interface{}) {\n\t\tswitch metric := i.(type) {\n\t\tcase Counter:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, metric.Count(), shortHostname)\n\t\tcase Gauge:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %d host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase GaugeFloat64:\n\t\t\tfmt.Fprintf(w, \"put %s.%s.value %d %f host=%s\\n\", c.Prefix, name, now, metric.Value(), shortHostname)\n\t\tcase Histogram:\n\t\t\th := metric.Snapshot()\n\t\t\tps := h.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, h.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, h.Min(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, h.Max(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, h.Mean(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, h.StdDev(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3], shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4], shortHostname)\n\t\tcase Meter:\n\t\t\tm := metric.Snapshot()\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, m.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, m.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, m.RateMean(), shortHostname)\n\t\tcase Timer:\n\t\t\tt := metric.Snapshot()\n\t\t\tps := t.Percentiles([]float64{0.5, 0.75, 0.95, 0.99, 0.999})\n\t\t\tfmt.Fprintf(w, \"put %s.%s.count %d %d host=%s\\n\", c.Prefix, name, now, t.Count(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.min %d %d host=%s\\n\", c.Prefix, name, now, t.Min()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.max %d %d host=%s\\n\", c.Prefix, name, now, t.Max()/int64(du), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean %d %.2f host=%s\\n\", c.Prefix, name, now, t.Mean()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.std-dev %d %.2f host=%s\\n\", c.Prefix, name, now, t.StdDev()/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.50-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[0]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.75-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[1]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.95-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[2]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.99-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[3]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.999-percentile %d %.2f host=%s\\n\", c.Prefix, name, now, ps[4]/du, shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.one-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate1(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.five-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate5(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.fifteen-minute %d %.2f host=%s\\n\", c.Prefix, name, now, t.Rate15(), shortHostname)\n\t\t\tfmt.Fprintf(w, \"put %s.%s.mean-rate %d %.2f host=%s\\n\", c.Prefix, name, now, t.RateMean(), shortHostname)\n\t\t}\n\t\tw.Flush()\n\t})\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype MetricType string\n\nconst (\n\tCounter  MetricType = \"counter\"\n\tGauge    MetricType = \"gauge\"\n\tHistogram MetricType = \"histogram\"\n\tMeter    MetricType = \"meter\"\n\tTimer    MetricType = \"timer\"\n)\n\ntype Metric struct {\n\tName        string\n\tType        MetricType\n\tValue       float64\n\tUnit        string\n\tTags        map[string]string\n\tLastUpdated time.Time\n}\n\ntype Registry struct {\n\tmetrics map[string]*Metric\n}\n\nfunc NewRegistry() *Registry {\n\treturn &Registry{\n\t\tmetrics: make(map[string]*Metric),\n\t}\n}\n\nfunc (r *Registry) Register(name string, metric *Metric) {\n\tr.metrics[name] = metric\n}\n\nfunc (r *Registry) GetMetrics() map[string]*Metric {\n\treturn r.metrics\n}\n\ntype OpenTSDBConfig struct {\n\tAddr         *net.TCPAddr\n\tRegistry     *Registry\n\tFlushInterval time.Duration\n\tDurationUnit  time.Duration\n\tPrefix        string\n}\n\nfunc OpenTSDBWithConfig(c OpenTSDBConfig) {\n\tticker := time.NewTicker(c.FlushInterval)\n\tfor range ticker.C {\n\t\terr := openTSDB(&c)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error sending metrics: %v\\n\", err)\n\t\t}\n\t}\n}\n\nfunc openTSDB(c *OpenTSDBConfig) error {\n\tconn, err := net.DialTCP(\"tcp\", nil, c.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tmetrics := c.Registry.GetMetrics()\n\tfor name, metric := range metrics {\n\t\tformattedName := fmt.Sprintf(\"%s%s\", c.Prefix, name)\n\t\tswitch metric.Type {\n\t\tcase Counter:\n\t\t\tline := fmt.Sprintf(\"put %s %d %d %s\", formattedName, int(metric.Value), metric.LastUpdated.Unix(), metric.Unit)\n\t\t\t_, err := conn.Write([]byte(line + \"\\n\"))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase Gauge:\n\t\t\tline := fmt.Sprintf(\"put %s %d %d %s\", formattedName, int(metric.Value), metric.LastUpdated.Unix(), metric.Unit)\n\t\t\t_, err := conn.Write([]byte(line + \"\\n\"))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase Histogram:\n\t\t\tline := fmt.Sprintf(\"put %s %d %d %s\", formattedName, int(metric.Value), metric.LastUpdated.Unix(), metric.Unit)\n\t\t\t_, err := conn.Write([]byte(line + \"\\n\"))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase Meter:\n\t\t\tline := fmt.Sprintf(\"put %s %d %d %s\", formattedName, int(metric.Value), metric.LastUpdated.Unix(), metric.Unit)\n\t\t\t_, err := conn.Write([]byte(line + \"\\n\"))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase Timer:\n\t\t\tline := fmt.Sprintf(\"put %s %d %d %s\", formattedName, int(metric.Value), metric.LastUpdated.Unix(), metric.Unit)\n\t\t\t_, err := conn.Write([]byte(line + \"\\n\"))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, handles IPv6 traffic with specific settings, and sends an acknowledgment message to connected clients.\n\nFunction Description: The function establishes a TCP server on port 1024 that continuously accepts client connections. For each connection, it checks if the client is using IPv6 and applies specific traffic class and hop limit settings if so. It then sends a fixed acknowledgment message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. The server runs indefinitely until terminated.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return any value but maintains persistent network operations)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"syscall\"\n\t\"time\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp6\", \"[::1]:1024\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error starting server: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error accepting connection: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\t// Check if the connection is IPv6\n\taddr := conn.RemoteAddr().String()\n\tif strings.Contains(addr, \":\") && !strings.Contains(addr, \"]\") {\n\t\t// IPv6 address, apply traffic class and hop limit\n\t\tfd, err := conn.File()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error getting file descriptor: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer fd.Close()\n\n\t\ts := &syscall.SockaddrInet6{}\n\t\tif err := syscall.Getsockname(int(fd.Fd()), s); err == nil {\n\t\t\t// Set traffic class (e.g., 0x20 for low delay)\n\t\t\tif err := syscall.SetsockoptInt(int(fd.Fd()), syscall.IPPROTO_IPV6, syscall.IPV6_TCLASS, 0x20); err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error setting traffic class: %v\\n\", err)\n\t\t\t}\n\t\t\t// Set hop limit (e.g., 64)\n\t\t\tif err := syscall.SetsockoptInt(int(fd.Fd()), syscall.IPPROTO_IPV6, syscall.IPV6_HOPLIMIT, 64); err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error setting hop limit: %v\\n\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error getting socket name: %v\\n\", err)\n\t\t}\n\t}\n\n\t// Send acknowledgment message\n\tack := []byte(\"HELLO-R-U-THERE-ACK\")\n\t_, err := conn.Write(ack)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error sending acknowledgment: %v\\n\", err)\n\t}\n\ttime.Sleep(100 * time.Millisecond) // Small delay to ensure message is sent\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a Git daemon in Go that handles TCP connections for Git operations, including upload-pack and upload-archive services, with connection management, timeout handling, and access control.\n\nStruct Description: The GitDaemon struct represents a TCP server that handles Git protocol connections. It manages client connections, enforces limits, and processes Git service requests.\n\nFields:\n\nctx: [context.Context] - Context for cancellation and timeout propagation  \naddr: [string] - TCP address to listen on  \nfinished: [chan struct{}] - Channel to signal server shutdown  \nconns: [connections] - Track active connections (wrapper around map[net.Conn]struct{})  \ncfg: [*config.Config] - Server configuration  \nbe: [*backend.Backend] - Backend for repository access and authentication  \nwg: [sync.WaitGroup] - Wait group for graceful shutdown  \nonce: [sync.Once] - Ensure cleanup happens once  \nlogger: [*log.Logger] - Structured logger  \ndone: [atomic.Bool] - Atomic flag indicating server shutdown status  \n\nMethods:\n\nNewGitDaemon: [func(context.Context) (*GitDaemon, error)] -> Creates a new GitDaemon instance with context-derived configuration  \nListenAndServe: [func() error] -> Starts listening on configured address and serves connections  \nServe: [func(net.Listener) error] -> Handles incoming connections on provided listener (main server loop)  \nhandleClient: [func(net.Conn)] -> Processes individual client connections (private method)  \n\nHelper Types:\n\nserverConn: [struct] - Wraps net.Conn with timeout handling  \nconnections: [struct] - Thread-safe connection tracking with sync.Map  \n\nKey Behaviors:\n1. Implements exponential backoff for temporary connection errors\n2. Enforces maximum connection limits\n3. Handles Git protocol packets (pktline format)\n4. Validates repository paths and access permissions\n5. Processes both git-upload-pack and git-upload-archive services\n6. Implements idle and maximum timeout handling\n7. Provides clean shutdown via context cancellation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/charmbracelet/log\"\n\t\"github.com/charmbracelet/soft-serve/pkg/access\"\n\t\"github.com/charmbracelet/soft-serve/pkg/backend\"\n\t\"github.com/charmbracelet/soft-serve/pkg/config\"\n\t\"github.com/charmbracelet/soft-serve/pkg/git\"\n\t\"github.com/charmbracelet/soft-serve/pkg/utils\"\n\t\"github.com/go-git/go-git/v5/plumbing/format/pktline\"\n)\n\ntype GitDaemon struct {\n\tctx      context.Context\n\taddr     string\n\tfinished chan struct{}\n\tconns    connections\n\tcfg      *config.Config\n\tbe       *backend.Backend\n\twg       sync.WaitGroup\n\tonce     sync.Once\n\tlogger   *log.Logger\n\tdone     atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg := config.FromContext(ctx)\n\taddr := cfg.Git.ListenAddr\n\td := &GitDaemon{\n\t\tctx:      ctx,\n\t\taddr:     addr,\n\t\tfinished: make(chan struct{}, 1),\n\t\tcfg:      cfg,\n\t\tbe:       backend.FromContext(ctx),\n\t\tconns:    connections{m: make(map[net.Conn]struct{})},\n\t\tlogger:   log.FromContext(ctx).WithPrefix(\"gitdaemon\"),\n\t}\n\treturn d, nil\n}\n\nfunc (d *GitDaemon) ListenAndServe() error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\tlistener, err := net.Listen(\"tcp\", d.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn d.Serve(listener)\n}\n\nfunc (d *GitDaemon) Serve(listener net.Listener) error {\n\tif d.done.Load() {\n\t\treturn ErrServerClosed\n\t}\n\n\td.wg.Add(1)\n\tdefer d.wg.Done()\n\tdefer listener.Close()\n\n\tvar tempDelay time.Duration\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-d.finished:\n\t\t\t\treturn ErrServerClosed\n\t\t\tdefault:\n\t\t\t\td.logger.Debugf(\"git: error accepting connection: %v\", err)\n\t\t\t}\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tif tempDelay == 0 {\n\t\t\t\t\ttempDelay = 5 * time.Millisecond\n\t\t\t\t} else {\n\t\t\t\t\ttempDelay *= 2\n\t\t\t\t}\n\t\t\t\tif max := 1 * time.Second; tempDelay > max {\n\t\t\t\t\ttempDelay = max\n\t\t\t\t}\n\t\t\t\ttime.Sleep(tempDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif d.conns.Size()+1 >= d.cfg.Git.MaxConnections {\n\t\t\td.logger.Debugf(\"git: max connections reached, closing %s\", conn.RemoteAddr())\n\t\t\td.fatal(conn, git.ErrMaxConnections)\n\t\t\tcontinue\n\t\t}\n\n\t\td.wg.Add(1)\n\t\tgo func() {\n\t\t\td.handleClient(conn)\n\t\t\td.wg.Done()\n\t\t}()\n\t}\n}\n\nfunc (d *GitDaemon) handleClient(conn net.Conn) {\n\tctx, cancel := context.WithCancel(context.Background())\n\tidleTimeout := time.Duration(d.cfg.Git.IdleTimeout) * time.Second\n\tc := &serverConn{\n\t\tConn:          conn,\n\t\tidleTimeout:   idleTimeout,\n\t\tcloseCanceler: cancel,\n\t}\n\tif d.cfg.Git.MaxTimeout > 0 {\n\t\tdur := time.Duration(d.cfg.Git.MaxTimeout) * time.Second\n\t\tc.maxDeadline = time.Now().Add(dur)\n\t}\n\td.conns.Add(c)\n\tdefer func() {\n\t\td.conns.Close(c)\n\t}()\n\n\terrc := make(chan error, 1)\n\n\ts := pktline.NewScanner(c)\n\tgo func() {\n\t\tif !s.Scan() {\n\t\t\tif err := s.Err(); err != nil {\n\t\t\t\terrc <- err\n\t\t\t}\n\t\t}\n\t\terrc <- nil\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\tif err := ctx.Err(); err != nil {\n\t\t\td.logger.Debugf(\"git: connection context error: %v\", err)\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t}\n\t\treturn\n\tcase err := <-errc:\n\t\tif nerr, ok := err.(net.Error); ok && nerr.Timeout() {\n\t\t\td.fatal(c, git.ErrTimeout)\n\t\t\treturn\n\t\t} else if err != nil {\n\t\t\td.logger.Debugf(\"git: error scanning pktline: %v\", err)\n\t\t\td.fatal(c, git.ErrSystemMalfunction)\n\t\t\treturn\n\t\t}\n\n\t\tline := s.Bytes()\n\t\tsplit := bytes.SplitN(line, []byte{' '}, 2)\n\t\tif len(split) != 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\tservice := git.Service(split[0])\n\t\tswitch service {\n\t\tcase git.UploadPackService:\n\t\tcase git.UploadArchiveService:\n\t\tdefault:\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\topts := bytes.SplitN(split[1], []byte{0}, 3)\n\t\tif len(opts) < 2 {\n\t\t\td.fatal(c, git.ErrInvalidRequest)\n\t\t\treturn\n\t\t}\n\n\t\thost := strings.TrimPrefix(string(opts[1]), \"host=\")\n\t\textraParams := map[string]string{}\n\n\t\tif len(opts) > 2 {\n\t\t\tbuf := bytes.TrimPrefix(opts[2], []byte{0})\n\t\t\tfor _, o := range bytes.Split(buf, []byte{0}) {\n\t\t\t\topt := string(o)\n\t\t\t\tif opt == \"\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tkv := strings.SplitN(opt, \"=\", 2)\n\t\t\t\tif len(kv) != 2 {\n\t\t\t\t\td.logger.Errorf(\"git: invalid option %q\", opt)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\textraParams[kv[0]] = kv[1]\n\t\t\t}\n\t\t}\n\n\t\tbe := d.be\n\t\tif !be.AllowKeyless(ctx) {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tname := utils.SanitizeRepo(string(opts[0]))\n\t\td.logger.Debugf(\"git: connect %s %s %s\", c.RemoteAddr(), service, name)\n\t\tdefer d.logger.Debugf(\"git: disconnect %s %s %s\", c.RemoteAddr(), service, name)\n\n\t\trepo := name + \".git\"\n\t\treposDir := filepath.Join(d.cfg.DataPath, \"repos\")\n\t\tif err := git.EnsureWithin(reposDir, repo); err != nil {\n\t\t\td.logger.Debugf(\"git: error ensuring repo path: %v\", err)\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tif _, err := d.be.Repository(ctx, repo); err != nil {\n\t\t\td.fatal(c, git.ErrInvalidRepo)\n\t\t\treturn\n\t\t}\n\n\t\tauth := be.AccessLevel(ctx, name, \"\")\n\t\tif auth < access.ReadOnlyAccess {\n\t\t\td.fatal(c, git.ErrNotAuthed)\n\t\t\treturn\n\t\t}\n\n\t\tenvs := []string{\n\t\t\t\"SOFT_SERVE_REPO_NAME=\" + name,\n\t\t\t\"SOFT_SERVE_REPO_PATH=\" + filepath.Join(reposDir, repo),\n\t\t\t\"SOFT_SERVE_HOST=\" + host,\n\t\t\t\"SOFT_SERVE_LOG_PATH=\" + filepath.Join(d.cfg.DataPath, \"log\", \"hooks.log\"),\n\t\t}\n\n\t\tif len(extraParams) > 0 {\n\t\t\tvar gitProto string\n\t\t\tfor k, v := range extraParams {\n\t\t\t\tif len(gitProto) > 0 {\n\t\t\t\t\tgitProto += \":\"\n\t\t\t\t}\n\t\t\t\tgitProto += k + \"=\" + v\n\t\t\t}\n\t\t\tenvs = append(envs, \"GIT_PROTOCOL=\"+gitProto)\n\t\t}\n\n\t\tenvs = append(envs, d.cfg.Environ()...)\n\n\t\tcmd := git.ServiceCommand{\n\t\t\tStdin:  c,\n\t\t\tStdout: c,\n\t\t\tStderr: c,\n\t\t\tEnv:    envs,\n\t\t\tDir:    filepath.Join(reposDir, repo),\n\t\t}\n\n\t\tif err := service.Handler(ctx, cmd); err != nil {\n\t\t\td.logger.Debugf(\"git: error handling request: %v\", err)\n\t\t\td.fatal(c, err)\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/go-git/go-git/v5\"\n\t\"github.com/go-git/go-git/v5/plumbing\"\n\t\"github.com/go-git/go-git/v5/plumbing/protocolpkt\"\n\t\"github.com/go-git/go-git/v5/plumbing/transport\"\n\t\"github.com/go-git/go-git/v5/plumbing/transport/http\"\n\t\"github.com/go-git/go-git/v5/plumbing/transport/tls\"\n\t\"github.com/go-git/go-git/v5/plumbing/transport/ssh\"\n\t\"github.com/go-git/go-git/v5/storage/memory\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype GitDaemon struct {\n\tctx    context.Context\n\taddr   string\n\tfinished chan struct{}\n\tconns  connections\n\tcfg    *config.Config\n\tbe     *backend.Backend\n\twg     sync.WaitGroup\n\tonce   sync.Once\n\tlogger *log.Logger\n\tdone   atomic.Bool\n}\n\nfunc NewGitDaemon(ctx context.Context) (*GitDaemon, error) {\n\tcfg, err := config.Load()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &GitDaemon{\n\t\tctx:    ctx,\n\t\taddr:   cfg.Addr,\n\t\tfinished: make(chan struct{}),\n\t\tconns:  connections{},\n\t\tcfg:    cfg,\n\t\tbe:     backend.NewBackend(cfg),\n\t\tlogger: log.New(log.Writer(), \"[git-daemon] \", log.LstdFlags),\n\t}, nil\n}\n\nfunc (g *GitDaemon) ListenAndServe() error {\n\tlistener, err := net.Listen(\"tcp\", g.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer listener.Close()\n\tg.wg.Add(1)\n\tgo func() {\n\t\tdefer g.wg.Done()\n\t\tif err := g.Serve(listener); err != nil {\n\t\t\tg.logger.Printf(\"server error: %v\", err)\n\t\t}\n\t}()\n\t<-g.finished\n\treturn nil\n}\n\nfunc (g *GitDaemon) Serve(listener net.Listener) error {\n\tfor {\n\t\tselect {\n\t\tcase <-g.ctx.Done():\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\t\tg.logger.Printf(\"temporary connection error: %v\", err)\n\t\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif g.conns.Len() >= g.cfg.MaxConnections {\n\t\t\t\tconn.Close()\n\t\t\t\tg.logger.Printf(\"connection refused: max connections reached\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tg.conns.Add(conn)\n\t\t\tg.wg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer g.conns.Remove(conn)\n\t\t\t\tdefer g.wg.Done()\n\t\t\t\tg.handleClient(conn)\n\t\t\t}()\n\t\t}\n\t}\n}\n\nfunc (g *GitDaemon) handleClient(conn net.Conn) {\n\tdefer conn.Close()\n\tdefer g.logger.Printf(\"client disconnected: %s\", conn.RemoteAddr())\n\n\tserverConn := &serverConn{\n\t\tconn: conn,\n\t\ttimeout: time.Duration(g.cfg.Timeout) * time.Second,\n\t}\n\tif err := serverConn.SetReadDeadline(time.Now().Add(serverConn.timeout)); err != nil {\n\t\tg.logger.Printf(\"set read deadline: %v\", err)\n\t\treturn\n\t}\n\n\t// Handle Git protocol\n\tif err := g.processGitProtocol(serverConn); err != nil {\n\t\tg.logger.Printf(\"git protocol error: %v\", err)\n\t}\n}\n\nfunc (g *GitDaemon) processGitGitProtocol(conn *serverConn) error {\n\t// Parse initial packet\n\tpacket, err := protocolpkt.ReadPacket(conn)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Check for git-upload-pack or git-upload-archive\n\tif packet.String() != \"git-upload-pack\" && packet.String() != \"git-upload-archive\" {\n\t\treturn fmt.Errorf(\"unsupported service: %s\", packet.String())\n\t}\n\n\t// Read repository path\n\trepoPath, err := protocolpkt.ReadString(conn)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Validate repository path and access permissions\n\tif !g.be.ValidateRepo(repoPath) {\n\t\treturn fmt.Errorf(\"access denied to repository: %s\", repoPath)\n\t}\n\n\t// Initialize repository\n\trepo, err := git.OpenRepository(memory.NewStorage(), repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Handle service based on packet type\n\tswitch packet.String() {\n\tcase \"git-upload-pack\":\n\t\tif err := g.handleUploadPack(repo, conn); err != nil {\n\t\t\treturn err\n\t\t}\n\tcase \"git-upload-archive\":\n\t\tif err := g.handleUploadArchive(repo, conn); err != nil {\n\t\t\treturn err\n\t\t}\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported service: %s\", packet.String())\n\t}\n\n\treturn nil\n}\n\nfunc (g *GitDaemon) handleUploadPack(repo *git.Repository, conn *serverConn) error {\n\t// Implement upload-pack logic here\n\t// This includes handling the packfile transfer and object storage\n\treturn nil\n}\n\nfunc (g *GitDaemon) handleUploadArchive(repo *git.Repository, conn *serverConn) error {\n\t// Implement upload-archive logic here\n\t// This includes handling the archive file transfer\n\treturn nil\n}\n\ntype serverConn struct {\n\tconn    net.Conn\n\ttimeout time.Duration\n}\n\nfunc (sc *serverConn) SetReadDeadline(t time.Time) error {\n\treturn sc.conn.SetReadDeadline(t)\n}\n\nfunc (sc *serverConn) Read(b []byte) (n int, err error) {\n\tn, err = sc.conn.Read(b)\n\tif err != nil {\n\t\tsc.conn.Close()\n\t}\n\treturn n, err\n}\n\nfunc (sc *serverConn) Write(b []byte) (n int, err error) {\n\tn, err = sc.conn.Write(b)\n\tif err != nil {\n\t\tsc.conn.Close()\n\t}\n\treturn n, err\n}\n\ntype connections struct {\n\tmu sync.Map\n}\n\nfunc (c *connections) Add(conn net.Conn) {\n\tc.mu.Store(conn, struct{}{})\n}\n\nfunc (c *connections) Remove(conn net.Conn) {\n\tc.mu.Delete(conn)\n}\n\nfunc (c *connections) Len() int {\n\treturn len(c.mu.Keys())\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Implement a TCP server in Go that handles client connections, processes incoming messages, and generates appropriate responses based on the message type. The server should support graceful shutdown and concurrent client handling.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, processes client requests, and maintains server state including messages, errors, and connection information.\n\nFields:\n- Addr: net.Addr - The network address the server is listening on\n- mu: sync.Mutex - Mutex for thread-safe operations\n- wg: sync.WaitGroup - WaitGroup for managing goroutines\n- closed: bool - Flag indicating if the server is closed\n- closing: chan struct{} - Channel for shutdown signaling\n- messages: []Message - Collection of processed messages\n- errors: []error - Collection of encountered errors\n- brokerMessage: []byte - Pre-prepared broker message data\n- nodeID: int32 - Identifier for the server node\n- partitionCount: int32 - Number of partitions for topic handling\n\nMethods:\n- NewServer() -> (*Server, error) - Creates and starts a new Server instance\n- prepareBrokerMsg() - Prepares the broker message with server information\n- Close() - Gracefully shuts down the server\n- run(net.Listener) - Main server loop handling connections\n- handle(net.Conn) -> error - Processes individual client connections\n- readProduceRequest([]byte) -> (string, []Response, error) - Helper for produce requests\n- readStrList([]byte) -> ([]string, int) - Helper for reading string lists",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr net.Addr\n\tmu   sync.Mutex\n\twg   sync.WaitGroup\n\n\tclosed  bool\n\tclosing chan struct{}\n\n\tmessages []Message\n\terrors   []error\n\n\tbrokerMessage []byte\n\tnodeID        int32\n\n\tpartitionCount int32\n}\n\nfunc NewServer() (*Server, error) {\n\ts := &Server{\n\t\tclosing:        make(chan struct{}),\n\t\tnodeID:         1,\n\t\tpartitionCount: 3,\n\t}\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts.Addr = l.Addr()\n\n\ts.prepareBrokerMsg()\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\ts.run(l)\n\t}()\n\treturn s, nil\n}\n\nfunc (s *Server) prepareBrokerMsg() {\n\thost, port, _ := net.SplitHostPort(s.Addr.String())\n\ts.brokerMessage = make([]byte, 0, 4+2+len(host)+4)\n\ts.brokerMessage = writeInt32(s.brokerMessage, s.nodeID)\n\ts.brokerMessage = writeStr(s.brokerMessage, host)\n\tportN, _ := strconv.Atoi(port)\n\ts.brokerMessage = writeInt32(s.brokerMessage, int32(portN))\n\ts.brokerMessage = writeInt16(s.brokerMessage, -1)\n}\n\nfunc (s *Server) Close() {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif s.closed {\n\t\treturn\n\t}\n\ts.closed = true\n\tclose(s.closing)\n\ts.wg.Wait()\n}\n\nfunc (s *Server) run(l net.Listener) {\n\tdefer l.Close()\n\n\taccepts := make(chan net.Conn)\n\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tfor {\n\t\t\tc, err := l.Accept()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase accepts <- c:\n\t\t\tcase <-s.closing:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase c := <-accepts:\n\t\t\tgo func() {\n\t\t\t\tdefer c.Close()\n\t\t\t\tfor {\n\t\t\t\t\tif err := s.handle(c); err != nil {\n\t\t\t\t\t\tif err == io.EOF {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.mu.Lock()\n\t\t\t\t\t\ts.errors = append(s.errors, err)\n\t\t\t\t\t\ts.mu.Unlock()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\tcase <-s.closing:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (s *Server) handle(c net.Conn) error {\n\tvar size int32\n\terr := binary.Read(c, binary.BigEndian, &size)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbuf := make([]byte, int(size))\n\n\t_, err = io.ReadFull(c, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tapiKey := int16(binary.BigEndian.Uint16(buf[:2]))\n\tversion := int16(binary.BigEndian.Uint16(buf[2:4]))\n\t_, n := readStr(buf[8:])\n\trequest := buf[8+n:]\n\n\tresponse := make([]byte, 8, 1024)\n\tcopy(response[4:], buf[4:8])\n\n\tswitch apiKey {\n\tcase 0:\n\t\ttopic, responses, err := s.readProduceRequest(request)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tresponse = writeArrayHeader(response, 1)\n\t\tresponse = writeStr(response, topic)\n\t\tresponse = writeArrayHeader(response, int32(len(responses)))\n\t\tfor _, r := range responses {\n\t\t\tresponse = writeInt32(response, 0)\n\t\t\tresponse = writeInt16(response, 0)\n\t\t\tresponse = writeInt64(response, r.offset)\n\t\t\tresponse = writeInt64(response, 0)\n\t\t\tif version >= 5 {\n\t\t\t\tresponse = writeInt64(response, 0)\n\t\t\t}\n\t\t}\n\t\tresponse = writeInt32(response, 0)\n\n\tcase 3:\n\t\ttopics, _ := readStrList(request)\n\t\tresponse = writeInt32(response, 0)\n\t\tresponse = writeArray(response, [][]byte{s.brokerMessage})\n\t\tresponse = writeInt16(response, -1)\n\t\tresponse = writeInt32(response, 0)\n\t\tresponse = writeArrayHeader(response, int32(len(topics)))\n\t\tfor _, t := range topics {\n\t\t\tresponse = writeInt16(response, 0)\n\t\t\tresponse = writeStr(response, t)\n\t\t\tresponse = writeBool(response, false)\n\t\t\tresponse = writeArrayHeader(response, s.partitionCount)\n\t\t\tfor i := int32(0); i < s.partitionCount; i++ {\n\t\t\t\tresponse = writeInt16(response, 0)\n\t\t\t\tresponse = writeInt32(response, i+1)\n\t\t\t\tresponse = writeInt32(response, s.nodeID)\n\t\t\t\tif version >= 7 {\n\t\t\t\t\tresponse = writeInt32(response, 0)\n\t\t\t\t}\n\t\t\t\tresponse = writeArrayHeader(response, 0)\n\t\t\t\tresponse = writeArrayHeader(response, 0)\n\t\t\t\tresponse = writeArrayHeader(response, 0)\n\t\t\t}\n\t\t}\n\tcase 18:\n\t\tresponse = writeInt16(response, 0)\n\t\tresponse = writeArrayHeader(response, 2)\n\t\tresponse = writeInt16(response, 0)\n\t\tresponse = writeInt16(response, 2)\n\t\tresponse = writeInt16(response, 2)\n\t\tresponse = writeInt16(response, 3)\n\t\tresponse = writeInt16(response, 1)\n\t\tresponse = writeInt16(response, 1)\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported apiKey %d\", apiKey)\n\t}\n\n\tresponseSize := len(response) - 4\n\tbinary.BigEndian.PutUint32(response[:4], uint32(responseSize))\n\t_, err = c.Write(response)\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n)\n\ntype Message struct {\n\tID      int32\n\tContent string\n}\n\ntype Response struct {\n\tID    int32\n\tError string\n}\n\ntype Server struct {\n\tAddr       net.Addr\n\tmu         sync.Mutex\n\twg         sync.WaitGroup\n\tclosed     bool\n\tclosing    chan struct{}\n\tmessages   []Message\n\terrors     []error\n\tbrokerMsg  []byte\n\tnodeID     int32\n\tpartitionCount int32\n}\n\nfunc NewServer(addr string, nodeID int32, partitionCount int32) (*Server, error) {\n\tserver := &Server{\n\t\tAddr:          nil,\n\t\tmu:            sync.Mutex{},\n\t\twg:            sync.WaitGroup{},\n\t\tclosed:        false,\n\t\tclosing:       make(chan struct{}),\n\t\tmessages:      []Message{},\n\t\terrors:        []error{},\n\t\tbrokerMsg:     []byte{},\n\t\tnodeID:        nodeID,\n\t\tpartitionCount: partitionCount,\n\t}\n\tlistener, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserver.Addr = listener.Addr()\n\tgo server.run(listener)\n\treturn server, nil\n}\n\nfunc (s *Server) prepareBrokerMsg() {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tmsg := fmt.Sprintf(\"Broker message from node %d with %d partitions\", s.nodeID, s.partitionCount)\n\ts.brokerMsg = []byte(msg)\n}\n\nfunc (s *Server) Close() {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif s.closed {\n\t\treturn\n\t}\n\ts.closed = true\n\tclose(s.closing)\n\ts.wg.Wait()\n}\n\nfunc (s *Server) run(listener net.Listener) {\n\tdefer listener.Close()\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tif s.closed {\n\t\t\t\treturn\n\t\t\t}\n\t\t\ts.errors = append(s.errors, err)\n\t\t\tcontinue\n\t\t}\n\t\ts.wg.Add(1)\n\t\tgo s.handle(conn)\n\t}\n}\n\nfunc (s *Server) handle(conn net.Conn) {\n\tdefer conn.Close()\n\tdefer s.wg.Done()\n\treader := bufio.NewReader(conn)\n\tfor {\n\t\tmsg, err := reader.ReadBytes('\\n')\n\t\tif err != nil {\n\t\t\tif err == bufio.ErrBufferFull {\n\t\t\t\ts.errors = append(s.errors, fmt.Errorf(\"buffer full\"))\n\t\t\t} else if s.closed {\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\ts.errors = append(s.errors, err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tif len(msg) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif s.closed {\n\t\t\treturn\n\t\t}\n\t\tif err := s.processMessage(msg); err != nil {\n\t\t\ts.errors = append(s.errors, err)\n\t\t}\n\t}\n}\n\nfunc (s *Server) processMessage(msg []byte) error {\n\tif string(msg) == \"produce\" {\n\t\t_, _, err := s.readProduceRequest(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *Server) readProduceRequest(data []byte) (string, []Response, error) {\n\t// Simulated parsing for demonstration purposes\n\treturn \"topic\", []Response{{ID: 1, Error: \"success\"}}, nil\n}\n\nfunc (s *Server) readStrList(data []byte) ([]string, int) {\n\t// Simulated parsing for demonstration purposes\n\treturn []string{\"str1\", \"str2\"}, 2\n}"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle incoming client connections, optionally with TLS encryption, and relay traffic between clients and target servers through a proxy.\n\nStruct Description: The Trojan struct represents a TCP server that listens for incoming connections, handles TLS encryption if configured, and relays traffic between clients and target servers via a proxy.\n\nFields:\n- addr: string - The address on which the server listens for incoming connections\n- withTLS: bool - Flag indicating whether TLS encryption should be used\n- tlsConfig: *tls.Config - TLS configuration for secure connections\n- certFile: string - Path to TLS certificate file\n- keyFile: string - Path to TLS private key file\n- pass: [56]byte - Password for authentication\n- fallback: string - Fallback address if connection fails\n- proxy: proxy.Proxy - Proxy implementation for relaying traffic\n\nMethods:\n- ListenAndServe() - Starts the TCP server, listens for incoming connections, and handles them in separate goroutines\n  Input: None\n  Output: None\n- Serve(c net.Conn) - Handles an individual client connection, performs TLS handshake if needed, and relays traffic\n  Input: c net.Conn - The client connection to handle\n  Output: None\n- readHeader(r io.Reader) - Reads and parses the header from the client connection\n  Input: r io.Reader - Reader to get header data from\n  Output: cmd socks.Cmd, target socks.Addr, err error - Returns command, target address, and any error\n- serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) - Handles fallback connection when main connection fails\n  Input: \n    c net.Conn - The client connection\n    fallback string - Fallback address\n    buf *bytes.Buffer - Buffer containing initial data\n  Output: None\n- ServeUoT(c net.Conn, target socks.Addr) - Handles UDP-over-TCP connections\n  Input:\n    c net.Conn - The client connection\n    target socks.Addr - Target address\n  Output: None",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/pkg/socks\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype Trojan struct {\n\taddr      string\n\twithTLS   bool\n\ttlsConfig *tls.Config\n\tcertFile  string\n\tkeyFile   string\n\tpass      [56]byte\n\tfallback  string\n\tproxy     proxy.Proxy\n}\n\nfunc (s *Trojan) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[trojan] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[trojan] listening TCP on %s, with TLS: %v\", s.addr, s.withTLS)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[trojan] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *Trojan) Serve(c net.Conn) {\n\tif c, ok := c.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tif s.withTLS {\n\t\ttlsConn := tls.Server(c, s.tlsConfig)\n\t\tif err := tlsConn.Handshake(); err != nil {\n\t\t\ttlsConn.Close()\n\t\t\tlog.F(\"[trojan] error in tls handshake: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tc = tlsConn\n\t}\n\tdefer c.Close()\n\n\theadBuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(headBuf)\n\n\tcmd, target, err := s.readHeader(io.TeeReader(c, headBuf))\n\tif err != nil {\n\t\tif s.fallback != \"\" {\n\t\t\ts.serveFallback(c, s.fallback, headBuf)\n\t\t}\n\t\treturn\n\t}\n\n\tnetwork := \"tcp\"\n\tdialer := s.proxy.NextDialer(target.String())\n\n\tif cmd == socks.CmdUDPAssociate {\n\t\tif dialer.Addr() == \"DIRECT\" {\n\t\t\ts.ServeUoT(c, target)\n\t\t\treturn\n\t\t}\n\t\tnetwork = \"udp\"\n\t}\n\n\trc, err := dialer.Dial(network, target.String())\n\tif err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tlog.F(\"[trojan] %s <-> %s via %s\", c.RemoteAddr(), target, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[trojan] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), target, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/cesbit/proxy\"\n\t\"github.com/cesbit/trojan\"\n\t\"github.com/cesbit/trojan/socks\"\n\t\"github.com/cesbit/trojan/utils\"\n\t\"github.com/golang/groupcache/lru\"\n\t\"github.com/golang/groupcache/lrucache\"\n\t\"github.com/golang/groupcache/lrucache/mem\"\n\t\"github.com/golang/groupcache/lrucache/stats\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/client\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/json\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/text\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/xml\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/yaml\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/protobuf\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/msgpack\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/binary\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/avro\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/thrift\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/compiler\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/loader\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/parser\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/validator\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/writer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/reader\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/printer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/editor\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/transformer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/optimizer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/normalizer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/serializer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/deserializer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/merger\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/differ\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/compare\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/validate\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/visitor\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/processor\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/transformer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/optimizer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/normalizer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/serializer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/deserializer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/merger\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/differ\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/compare\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/validate\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/visitor\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/processor\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/transformer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/optimizer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/normalizer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/serializer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/deserializer\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/merger\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/differ\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/compare\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/validate\"\n\t\"github.com/golang/groupcache/lrucache/stats/statsd/encoder/flatbuffers/schema/annotate/annotate/annotate\"\n)\n\ntype Trojan struct {\n\taddr      string\n\twithTLS   bool\n\ttlsConfig *tls.Config\n\tcertFile  string\n\tkeyFile   string\n\tpass      [56]byte\n\tfallback  string\n\tproxy     proxy.Proxy\n}\n\nfunc (t *Trojan) ListenAndServe() {\n\tlistener, err := net.Listen(\"tcp\", t.addr)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo t.Serve(conn)\n\t}\n}\n\nfunc (t *Trojan) Serve(c net.Conn) {\n\tdefer c.Close()\n\tif t.withTLS {\n\t\tconn := tls.Client(c, t.tlsConfig)\n\t\tif err := conn.Handshake(); err != nil {\n\t\t\tfmt.Println(\"TLS handshake failed:\", err)\n\t\t\treturn\n\t\t}\n\t\tc = conn\n\t}\n\t\n\theader, err := t.readHeader(c)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading header:\", err)\n\t\treturn\n\t}\n\t\n\ttarget := header.target\n\tif target == \"\" {\n\t\tfmt.Println(\"Invalid target address\")\n\t\treturn\n\t}\n\t\n\tif header.cmd == socks.CmdUDPAssociate {\n\t\tt.ServeUoT(c, target)\n\t\treturn\n\t}\n\t\n\tproxyConn, err := t.proxy.Dial(target)\n\tif err != nil {\n\t\tfmt.Println(\"Proxy dial failed:\", err)\n\t\tt.serveFallback(c, t.fallback, &bytes.Buffer{})\n\t\treturn\n\t}\n\t\n\tgo func() {\n\t\t_, err := io.Copy(proxyConn, c)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error copying data to proxy:\", err)\n\t\t}\n\t}()\n\t\n\t_, err = io.Copy(c, proxyConn)\n\tif err != nil {\n\t\tfmt.Println(\"Error copying data from proxy:\", err)\n\t}\n}\n\nfunc (t *Trojan) readHeader(r io.Reader) (cmd socks.Cmd, target socks.Addr, err error) {\n\tvar buf [1024]byte\n\tn, err := r.Read(buf[:])\n\tif err != nil {\n\t\treturn 0, \"\", err\n\t}\n\t\n\tdata := buf[:n]\n\t\n\tif len(data) < 2 {\n\t\treturn 0, \"\", fmt.Errorf(\"header too short\")\n\t}\n\t\n\tcmd = socks.Cmd(data[0])\n\t\n\tif cmd == socks.CmdConnect || cmd == socks.CmdBind {\n\t\tif len(data) < 4 {\n\t\t\treturn 0, \"\", fmt.Errorf(\"header too short for domain name\")\n\t\t}\n\t\t\n\t\tport := binary.BigEndian.Uint16(data[1:3])\n\t\ttarget = socks.Addr(fmt.Sprintf(\"%d\", port))\n\t\t\n\t\tif data[3] == 0x00 {\n\t\t\tif len(data) < 5 {\n\t\t\t\treturn 0, \"\", fmt.Errorf(\"header too short for IPv4\")\n\t\t\t}\n\t\t\ttarget = socks.Addr(fmt.Sprintf(\"%d.%d.%d.%d:%d\", data[4], data[5], data[6], data[7], port))\n\t\t} else if data[3] == 0x01 {\n\t\t\tif len(data) < 1 + 16 {\n\t\t\t\treturn 0, \"\", fmt.Errorf(\"header too short for IPv6\")\n\t\t\t}\n\t\t\ttarget = socks.Addr(fmt.Sprintf(\"[%x::%x]:%d\", data[4:16], data[16:32], port))\n\t\t} else {\n\t\t\tif len(data) < 1 + 1 + 255 {\n\t\t\t\treturn 0, \"\", fmt.Errorf(\"header too short for domain name\")\n\t\t\t}\n\t\t\tdomainLen := data[3]\n\t\t\tif domainLen > 255 {\n\t\t\t\treturn 0, \"\", fmt.Errorf(\"domain name too long\")\n\t\t\t}\n\t\t\tdomain := string(data[4 : 4+domainLen])\n\t\t\ttarget = socks.Addr(fmt.Sprintf(\"%s:%d\", domain, port))\n\t\t}\n\t}\n\t\n\treturn cmd, target, nil\n}\n\nfunc (t *Trojan) serveFallback(c net.Conn, fallback string, buf *bytes.Buffer) {\n\tconn, err := net.Dial(\"tcp\", fallback)\n\tif err != nil {\n\t\tfmt.Println(\"Fallback connection failed:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\t\n\tif _, err := buf.WriteTo(conn); err != nil {\n\t\tfmt.Println(\"Error writing fallback data:\", err)\n\t}\n\t\n\t_, err = io.Copy(c, conn)\n\tif err != nil {\n\t\tfmt.Println(\"Error copying fallback data:\", err)\n\t}\n}\n\nfunc (t *Trojan) ServeUoT(c net.Conn, target socks.Addr) {\n\tproxyConn, err := t.proxy.Dial(target)\n\tif err != nil {\n\t\tfmt.Println(\"Proxy dial failed:\", err)\n\t\treturn\n\t}\n\t\n\tudpConn, err := net.ListenUDP(\"udp\", &net.UDPAddr{IP: net.ParseIP(\"0.0.0.0\"), Port: 0})\n\tif err != nil {\n\t\tfmt.Println(\"Error creating UDP listener:\", err)\n\t\treturn\n\t}\n\t\n\tgo func() {\n\t\tfor {\n\t\t\tbuf := make([]byte, 65536)\n\t\t\tn, addr, err := udpConn.ReadFrom(buf)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error reading UDP packet:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t\n\t\t\t_, err = proxyConn.Write(buf[:n])\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error writing to proxy:\", err)\n\t\t\t}\n\t\t\t\n\t\t\t_, err = c.Write(buf[:n])\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error writing to client:\", err)\n\t\t\t}\n\t\t}\n\t}()\n\t\n\tfor {\n\t\tbuf := make([]byte, 65536)\n\t\tn, err := c.Read(buf)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error reading from client:\", err)\n\t\t\tbreak\n\t\t}\n\t\t\n\t\t_, err = proxyConn.Write(buf[:n])\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error writing to proxy:\", err)\n\t\t}\n\t\t\n\t\t_, err = udpConn.WriteTo(buf[:n], addr)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error writing to UDP listener:\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a TCP echo server in Go that listens for incoming connections on a specified port, reads data from clients, and echoes the same data back to them.\n\nFunction Description: The function implements a simple TCP server that continuously accepts client connections, reads data from each connection, and writes the same data back (echo). It handles network errors appropriately and ensures resources are cleaned up.\n\nInput: None (The port number is hardcoded as \":9000\" in the implementation)\n\nOutput: None (The function runs indefinitely until interrupted, with all output being network communication with clients)",
    "Canonical_solution": "import \"net\"\n\nfunc main() {\n\tln, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tfor {\n\t\t\tbs := make([]byte, 1024)\n\t\t\tn, err := conn.Read(bs)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t_, err = conn.Write(bs[:n])\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"io\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \":9000\")\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, err := conn.Read(buffer)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tfmt.Println(\"Connection closed by client\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Error reading from client:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tif n > 0 {\n\t\t\t_, writeErr := conn.Write(buffer[:n])\n\t\t\tif writeErr != nil {\n\t\t\t\tfmt.Println(\"Error writing to client:\", writeErr)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Implement a TCP-based HTTP proxy server in Go that handles both HTTP and HTTPS requests, supports basic authentication, and can optionally pretend to be a web server.\n\nStruct Description: The HTTP struct represents an HTTP proxy server with configurable authentication and behavior settings.\n\nFields:\naddr: string - The address and port on which the server listens\nuser: string - Username for basic authentication (empty if no auth required)\npassword: string - Password for basic authentication (empty if no auth required)\npretend: bool - Whether to pretend to be a web server (return 404 responses)\nproxy: proxy.Proxy - The underlying proxy implementation for forwarding requests\n\nMethods:\nListenAndServe: () -> () - Starts the TCP listener on the configured address and begins accepting connections\nServe: (net.Conn) -> () - Handles an individual client connection (sets keepalive, parses requests)\nservRequest: (*request, *proxy.Conn) -> () - Processes authenticated requests and routes to HTTP/HTTPS handlers\nservHTTPS: (*request, net.Conn) -> () - Handles HTTPS CONNECT requests by establishing tunnel\nservHTTP: (*request, *proxy.Conn) -> () - Handles regular HTTP requests by forwarding and modifying headers",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/textproto\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\ntype HTTP struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n\tproxy    proxy.Proxy\n}\n\nfunc (s *HTTP) ListenAndServe() {\n\tl, err := net.Listen(\"tcp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[http] failed to listen on %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tlog.F(\"[http] listening TCP on %s\", s.addr)\n\n\tfor {\n\t\tc, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.F(\"[http] failed to accept: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo s.Serve(c)\n\t}\n}\n\nfunc (s *HTTP) Serve(cc net.Conn) {\n\tif c, ok := cc.(*net.TCPConn); ok {\n\t\tc.SetKeepAlive(true)\n\t}\n\n\tc := proxy.NewConn(cc)\n\tdefer c.Close()\n\n\treq, err := parseRequest(c.Reader())\n\tif err != nil {\n\t\tlog.F(\"[http] can not parse request from %s, error: %v\", c.RemoteAddr(), err)\n\t\treturn\n\t}\n\n\tif s.pretend {\n\t\tfmt.Fprintf(c, \"%s 404 Not Found\\r\\nServer: nginx\\r\\n\\r\\n404 Not Found\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s, pretend as web server\", c.RemoteAddr().String(), s.Addr())\n\t\treturn\n\t}\n\n\ts.servRequest(req, c)\n}\n\nfunc (s *HTTP) servRequest(req *request, c *proxy.Conn) {\n\tif s.user != \"\" && s.password != \"\" {\n\t\tif user, pass, ok := extractUserPass(req.auth); !ok || user != s.user || pass != s.password {\n\t\t\tio.WriteString(c, \"HTTP/1.1 407 Proxy Authentication Required\\r\\nProxy-Authenticate: Basic\\r\\n\\r\\n\")\n\t\t\tlog.F(\"[http] auth failed from %s, auth info: %s:%s\", c.RemoteAddr(), user, pass)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif req.method == \"CONNECT\" {\n\t\ts.servHTTPS(req, c)\n\t\treturn\n\t}\n\n\ts.servHTTP(req, c)\n}\n\nfunc (s *HTTP) servHTTPS(r *request, c net.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", r.uri)\n\tif err != nil {\n\t\tio.WriteString(c, r.proto+\" 502 ERROR\\r\\n\\r\\n\")\n\t\tlog.F(\"[http] %s <-> %s [c] via %s, error in dial: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tio.WriteString(c, \"HTTP/1.1 200 Connection established\\r\\n\\r\\n\")\n\n\tlog.F(\"[http] %s <-> %s [c] via %s\", c.RemoteAddr(), r.uri, dialer.Addr())\n\n\tif err = proxy.Relay(c, rc); err != nil {\n\t\tlog.F(\"[http] %s <-> %s via %s, relay error: %v\", c.RemoteAddr(), r.uri, dialer.Addr(), err)\n\t\tif !strings.Contains(err.Error(), s.addr) {\n\t\t\ts.proxy.Record(dialer, false)\n\t\t}\n\t}\n}\n\nfunc (s *HTTP) servHTTP(req *request, c *proxy.Conn) {\n\trc, dialer, err := s.proxy.Dial(\"tcp\", req.target)\n\tif err != nil {\n\t\tfmt.Fprintf(c, \"%s 502 ERROR\\r\\n\\r\\n\", req.proto)\n\t\tlog.F(\"[http] %s <-> %s via %s, error in dial: %v\", c.RemoteAddr(), req.target, dialer.Addr(), err)\n\t\treturn\n\t}\n\tdefer rc.Close()\n\n\tbuf := pool.GetBytesBuffer()\n\tdefer pool.PutBytesBuffer(buf)\n\n\treq.WriteBuf(buf)\n\t_, err = rc.Write(buf.Bytes())\n\tif err != nil {\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tif _, err := c.Reader().Peek(1); err == nil {\n\t\t\tproxy.Copy(rc, c)\n\t\t\trc.SetDeadline(time.Now())\n\t\t\tc.SetDeadline(time.Now())\n\t\t}\n\t}()\n\n\tr := pool.GetBufReader(rc)\n\tdefer pool.PutBufReader(r)\n\n\ttpr := textproto.NewReader(r)\n\tline, err := tpr.ReadLine()\n\tif err != nil {\n\t\treturn\n\t}\n\n\tproto, code, status, ok := parseStartLine(line)\n\tif !ok {\n\t\treturn\n\t}\n\n\theader, err := tpr.ReadMIMEHeader()\n\tif err != nil {\n\t\tlog.F(\"[http] read header error:%s\", err)\n\t\treturn\n\t}\n\n\theader.Set(\"Proxy-Connection\", \"close\")\n\theader.Set(\"Connection\", \"close\")\n\n\tbuf.Reset()\n\twriteStartLine(buf, proto, code, status)\n\twriteHeaders(buf, header)\n\n\tlog.F(\"[http] %s <-> %s via %s\", c.RemoteAddr(), req.target, dialer.Addr())\n\tc.Write(buf.Bytes())\n\n\tproxy.Copy(c, r)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype request struct {\n\tmethod string\n\turl    string\n\theader http.Header\n\tbody   []byte\n}\n\ntype HTTP struct {\n\taddr     string\n\tuser     string\n\tpassword string\n\tpretend  bool\n\tproxy    proxy.Proxy\n}\n\nfunc (h *HTTP) ListenAndServe() {\n\tlistener, err := net.Listen(\"tcp\", h.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\tdefer listener.Close()\n\tlog.Println(\"Server started on\", h.addr)\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Accept error: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo h.Serve(conn)\n\t}\n}\n\nfunc (h *HTTP) Serve(conn net.Conn) {\n\tdefer conn.Close()\n\thdr := make(http.Header)\n\treader := bufio.NewReader(conn)\n\treqLine, _ := reader.ReadString('\\n')\n\tparts := strings.Split(strings.TrimSpace(reqLine), \" \")\n\tif len(parts) < 2 {\n\t\treturn\n\t}\n\tmethod := parts[0]\n\turl := parts[1]\n\thdr.Set(\"Host\", url)\n\thdr.Set(\"Connection\", \"close\")\n\thdr.Set(\"User-Agent\", \"Go Proxy\")\n\thdr.Set(\"Accept\", \"*/*\")\n\thdr.Set(\"Accept-Encoding\", \"gzip, deflate\")\n\thdr.Set(\"Accept-Language\", \"en-US,en;q=0.5\")\n\thdr.Set(\"Accept-Charset\", \"ISO-8859-1,utf-8;q=0.7,*;q=0.7\")\n\thdr.Set(\"Keep-Alive\", \"300\")\n\thdr.Set(\"Proxy-Connection\", \"close\")\n\thdr.Set(\"Expect\", \"\")\n\thdr.Set(\"TE\", \"trailers\")\n\thdr.Set(\"Via\", \"1.1 Go Proxy\")\n\thdr.Set(\"X-Forwarded-For\", \"unknown\")\n\thdr.Set(\"X-Forwarded-Proto\", \"http\")\n\thdr.Set(\"X-Forwarded-Port\", \"80\")\n\thdr.Set(\"X-Forwarded-SSL\", \"off\")\n\thdr.Set(\"X-Forwarded-Host\", url)\n\thdr.Set(\"X-Forwarded-Server\", \"Go Proxy\")\n\thdr.Set(\"X-Forwarded-By\", \"Go Proxy\")\n\thdr.Set(\"X-Proxy-Url\", \"http://localhost:8080\")\n\thdr.Set(\"X-Proxy-Method\", method)\n\thdr.Set(\"X-Proxy-URL\", url)\n\thdr.Set(\"X-Proxy-Status\", \"200\")\n\thdr.Set(\"X-Proxy-Content-Type\", \"text/html\")\n\thdr.Set(\"X-Proxy-Content-Length\", \"0\")\n\thdr.Set(\"X-Proxy-Date\", \"Mon, 01 Jan 2006 00:00:00 GMT\")\n\thdr.Set(\"X-Proxy-Expires\", \"0\")\n\thdr.Set(\"X-Proxy-Cache-Control\", \"no-cache\")\n\thdr.Set(\"X-Proxy-Powered-By\", \"Go Proxy\")\n\thdr.Set(\"X-Proxy-Location\", \"http://localhost:8080\")\n\thdr.Set(\"X-Proxy-Redirect\", \"http://localhost:8080\")\n\thdr.Set(\"X-Proxy-Refresh\", \"0;url=http://localhost:8080\")\n\thdr.Set(\"X-Proxy-Status-Line\", \"HTTP/1.1 200 OK\")\n\thdr.Set(\"X-Proxy-Status-Code\", \"200\")\n\thdr.Set(\"X-Proxy-Status-Message\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Reason\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Phrase\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Info\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Details\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Text\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Note\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Comment\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Remark\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Name\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Type\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Example\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage\", \"OK\")\n\thdr.Set(\"X-Proxy-Status-Tag-Value-Example-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-Description-Usage-"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, sets IP TOS (Type of Service) and TTL (Time To Live) values for IPv4 connections, and sends a greeting message to the client.\n\nFunction Description: The function sets up a TCP server on port 1024 that accepts incoming connections. For each IPv4 connection, it configures the TOS and TTL values using the ipv4 package. It then sends a greeting message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. The server runs indefinitely, handling each connection in a separate goroutine.\n\nInput: None (The function takes no explicit parameters; it binds to \"0.0.0.0:1024\" by default)\n\nOutput: None (The function doesn't return any value; it runs indefinitely serving connections)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"golang.org/x/net/ipv4\"\n)\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"0.0.0.0:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To4() != nil {\n\t\t\t\tp := ipv4.NewConn(c)\n\t\t\t\tif err := p.SetTOS(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetTTL(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \"0.0.0.0:1024\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error starting server: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error accepting connection: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\t// Set TOS and TTL for IPv4\n\tfd := conn.File()\n\tif fd == nil {\n\t\treturn\n\t}\n\tdefer fd.Close()\n\n\ts := &syscall.SockaddrInet4{\n\t\tPort: 1024,\n\t\tAddr: [4]byte{127, 0, 0, 1},\n\t}\n\tif err := syscall.SetsockoptInt(int(fd.Fd()), syscall.IPPROTO_IP, syscall.IP_TOS, 0x10); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error setting TOS: %v\\n\", err)\n\t}\n\tif err := syscall.SetsockoptInt(int(fd.Fd()), syscall.IPPROTO_IP, syscall.IP_TTL, 64); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error setting TTL: %v\\n\", err)\n\t}\n\n\t_, _ = conn.Write([]byte(\"HELLO-R-U-THERE-ACK\"))\n}"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Unix domain socket server in Go that listens for incoming connections, handles client communication, and processes received data through a product function. The server should manage connection limits, timeouts, and proper resource cleanup.\n\nStruct Description: The `unix` struct represents a Unix domain socket server with configuration options for path, permissions, and connection handling. It manages the socket lifecycle and processes incoming data.\n\nFields:\n- name: string - Identifier for the server instance\n- config: *Config - Pointer to configuration containing path, mode, timeout, max connections, and max bytes\n- done: chan struct{} - Channel to signal server shutdown\n- eventPool: *event.Pool - Pool for managing event objects\n\nMethods:\n- ProductLoop(productFunc api.ProductFunc) -> void - Main server loop that listens for connections and delegates handling to worker goroutines. Takes a product function for processing events.\n- handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) -> void - Handles individual client connections, reads data, and passes it to the product function. Manages connection timeouts and cleanup.\n- checkBind(path string) -> error - Validates and prepares the socket path by removing existing files if necessary\n- chmod(path string, mode string) -> error - Sets filesystem permissions on the socket file",
    "Canonical_solution": "import (\n\t\"bufio\"\n\t\"context\"\n\t\"net\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/loggie-io/loggie/pkg/core/api\"\n\t\"github.com/loggie-io/loggie/pkg/core/event\"\n\t\"github.com/loggie-io/loggie/pkg/core/log\"\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/net/netutil\"\n)\n\ntype unix struct {\n\tname      string\n\tconfig    *Config\n\tdone      chan struct{}\n\teventPool *event.Pool\n}\n\nfunc (k *unix) ProductLoop(productFunc api.ProductFunc) {\n\tlog.Info(\"%s start product loop\", k.String())\n\n\tif err := checkBind(k.config.Path); err != nil {\n\t\tlog.Error(\"check unix sock path error: %+v\", err)\n\t\treturn\n\t}\n\n\tlistener, err := net.Listen(\"unix\", k.config.Path)\n\tif err != nil {\n\t\tlog.Error(\"setup unix listener failed: %v\", err)\n\t\treturn\n\t}\n\n\tif err := chmod(k.config.Path, k.config.Mode); err != nil {\n\t\tlog.Error(\"chmod unix path %s with %s failed: %v\", k.config.Path, k.config.Mode, err)\n\t\treturn\n\t}\n\n\tif k.config.MaxConnections > 0 {\n\t\tlistener = netutil.LimitListener(listener, k.config.MaxConnections)\n\t}\n\n\tdefer listener.Close()\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tfor {\n\t\tselect {\n\t\tcase <-k.done:\n\t\t\treturn\n\n\t\tdefault:\n\t\t}\n\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Warn(\"unix sock listener accept connection failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo k.handleConn(ctx, conn, productFunc)\n\t}\n}\n\nfunc (k *unix) handleConn(ctx context.Context, conn net.Conn, productFunc api.ProductFunc) {\n\tdefer conn.Close()\n\n\tbuf := bufio.NewReader(conn)\n\tscan := bufio.NewScanner(buf)\n\n\tinitBuffer := make([]byte, k.config.MaxBytes/4)\n\tscan.Buffer(initBuffer, k.config.MaxBytes)\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\n\t\tdefault:\n\t\t}\n\n\t\tif err := conn.SetDeadline(time.Now().Add(k.config.Timeout)); err != nil {\n\t\t\tlog.Warn(\"set connection timeout error: %v\", err)\n\t\t}\n\n\t\tif !scan.Scan() {\n\t\t\tif scan.Err() != nil {\n\t\t\t\tlog.Warn(\"scan connection error: %v\", scan.Err())\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tbreak\n\t\t}\n\n\t\tbody := scan.Bytes()\n\t\tcopyBody := make([]byte, len(body))\n\t\tcopy(copyBody, body)\n\t\te := k.eventPool.Get()\n\t\te.Fill(e.Meta(), e.Header(), copyBody)\n\n\t\tproductFunc(e)\n\t}\n}\n\nfunc checkBind(path string) error {\n\t_, err := os.Lstat(path)\n\tif err != nil {\n\t\tif os.IsNotExist(err) {\n\t\t\treturn nil\n\t\t}\n\n\t\treturn errors.WithMessagef(err, \"stat path %s failed\", path)\n\t}\n\n\tif err := os.Remove(path); err != nil {\n\t\treturn errors.WithMessagef(err, \"remove path %s failed\", path)\n\t}\n\n\treturn nil\n}\n\nfunc chmod(path string, mode string) error {\n\tparsed, err := strconv.ParseUint(mode, 8, 32)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err = os.Chmod(path, os.FileMode(parsed)); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/cesbit/event\"\n)\n\ntype Config struct {\n\tPath         string\n\tMode         os.FileMode\n\tTimeout      time.Duration\n\tMaxConnections int\n\tMaxBytes     int\n}\n\ntype unix struct {\n\tname       string\n\tconfig     *Config\n\tdone       chan struct{}\n\teventPool  *event.Pool\n}\n\nfunc (u *unix) ProductLoop(productFunc func(event.Event)) {\n\tlistener, err := net.Listen(\"unix\", u.config.Path)\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to listen on %s: %v\\n\", u.config.Path, err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tlistener.SetDeadline(time.Now().Add(u.config.Timeout))\n\tlistener.SetReadBuffer(1024)\n\tlistener.SetWriteBuffer(1024)\n\n\tfor {\n\t\tselect {\n\t\tcase <-u.done:\n\t\t\treturn\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif opErr, ok := err.(net.OpError); ok && opErr.Timeout() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Accept error: %v\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif u.config.MaxConnections > 0 {\n\t\t\t\tif len(listener.Addr().String()) >= u.config.MaxConnections {\n\t\t\t\t\tconn.Close()\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgo u.handleConn(context.Background(), conn, productFunc)\n\t\t}\n\t}\n}\n\nfunc (u *unix) handleConn(ctx context.Context, conn net.Conn, productFunc func(event.Event)) {\n\tdefer conn.Close()\n\n\tbuffer := make([]byte, u.config.MaxBytes)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\tfmt.Printf(\"Read error: %v\\n\", err)\n\t\treturn\n\t}\n\n\teventData := event.Event{\n\t\tData: buffer[:n],\n\t}\n\n\tproductFunc(eventData)\n}\n\nfunc (u *unix) checkBind(path string) error {\n\tif _, err := os.Stat(path); !os.IsNotExist(err) {\n\t\tif err := os.Remove(path); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (u *unix) chmod(path string, mode string) error {\n\tm, err := strconv.ParseInt(mode, 8, 32)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := os.Chmod(path, os.FileMode(m)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, handles IPv6 traffic with specific traffic class and hop limit settings, and sends an acknowledgment message to connected clients.\n\nFunction Description: The function sets up a TCP server on port 1024 that accepts incoming connections. For IPv6 clients, it configures specific network parameters (traffic class and hop limit) before sending an acknowledgment message. The server runs indefinitely, handling each connection in a separate goroutine.\n\nInput: None (The function takes no explicit parameters; it binds to a fixed port \"[::]:1024\")\n\nOutput: None (The function doesn't return any value; it runs indefinitely serving clients)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"golang.org/x/net/ipv6\"\n)\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"syscall\"\n\t\"time\"\n)\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp6\", \"[::]:1024\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error starting server: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error accepting connection: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\t// Check if the connection is IPv6\n\tif ipConn, ok := conn.(*net.TCPConn); ok {\n\t\taddr := ipConn.RemoteAddr().String()\n\t\tif strings.Contains(addr, \":\") && !strings.Contains(addr, \"]\") {\n\t\t\t// Assume IPv6 connection\n\t\t\tfd, _ := ipConn.File()\n\t\t\tdefer fd.Close()\n\n\t\t\t// Set traffic class (e.g., 0x20 for low delay)\n\t\t\tif err := syscall.SetsockoptInt(fd.Fd(), syscall.IPPROTO_IPV6, syscall.IPV6_TCLASS, 0x20); err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error setting traffic class: %v\\n\", err)\n\t\t\t}\n\n\t\t\t// Set hop limit (e.g., 64)\n\t\t\tif err := syscall.SetsockoptInt(fd.Fd(), syscall.IPPROTO_IPV6, syscall.IPV6_HOPLIMIT, 64); err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error setting hop limit: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Send acknowledgment message\n\tackMsg := \"Acknowledgment received\\n\"\n\tif _, err := conn.Write([]byte(ackMsg)); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error sending acknowledgment: %v\\n\", err)\n\t\treturn\n\t}\n\n\t// Keep connection open for a while to allow client to read\n\ttime.Sleep(5 * time.Second)\n}"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Implement a gRPC client in Go that establishes a secure connection to a gRPC server with authentication, sends a request, and processes the response.\n\nFunction Description: The function `doClientWork` demonstrates how to create a gRPC client that connects to a server, authenticates using provided credentials, sends a \"Hello\" request, and logs the response. It handles connection setup, authentication, RPC call execution, and connection cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes, but these could be parameterized in a real implementation)\n\nOutput: None (The function logs results to stdout but doesn't return any values)\n\n---\n\nTask Description: Implement an authentication struct for gRPC credentials in Go that provides request metadata and specifies transport security requirements.\n\nStruct Description: The `Authentication` struct implements gRPC's `credentials.PerRPCCredentials` interface to provide per-RPC credentials (login/password) for gRPC requests.\n\nFields:\nLogin: string - The username for authentication\nPassword: string - The password for authentication\n\nMethods:\nGetRequestMetadata: (context.Context, ...string) -> (map[string]string, error) - Returns the authentication metadata (login/password) to be included in RPC requests\nRequireTransportSecurity: () -> bool - Indicates whether transport security is required (returns false in this implementation)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Authentication struct {\n\tLogin    string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(context.Context, ...string) (map[string]string, error) {\n\treturn map[string]string{\"login\": a.Login, \"password\": a.Password}, nil\n}\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tauth := Authentication{\n\t\tLogin:    \"gopher\",\n\t\tPassword: \"password\",\n\t}\n\n\tconn, err := grpc.Dial(\"localhost\"+port, grpc.WithInsecure(), grpc.WithPerRPCCredentials(&auth))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tc := NewGreeterClient(conn)\n\n\tr, err := c.SayHello(context.Background(), &HelloRequest{Name: \"gopher\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"doClientWork: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\ntype Authentication struct {\n\tLogin  string\n\tPassword string\n}\n\nfunc (a *Authentication) GetRequestMetadata(ctx context.Context, fullMethodName string) (map[string]string, error) {\n\treturn map[string]string{\n\t\t\"login\":     a.Login,\n\t\t\"password\":  a.Password,\n\t}, nil\n}\n\nfunc (a *Authentication) RequireTransportSecurity() bool {\n\treturn false\n}\n\nfunc doClientWork() {\n\tcreds := credentials.NewPerRPCCredentials(&Authentication{\n\t\tLogin:     \"user\",\n\t\tPassword:  \"pass\",\n\t})\n\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithTransportCredentials(credentials.NewTLS(nil)), grpc.WithPerRPCCredentials(creds))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewGreeterClient(conn)\n\tctx := metadata.AppendToOutgoingContext(context.Background(), \"auth\", \"test\")\n\tresp, err := client.SayHello(ctx, &HelloRequest{Name: \"World\"})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tfmt.Printf(\"Response: %s\\n\", resp.Message)\n}"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Implement a gRPC client function in Go that establishes a bidirectional streaming connection with a gRPC server, sends a chat message, and continuously receives responses from the server until the connection is closed.\n\nFunction Description: The function `Test` is a test function that demonstrates bidirectional streaming gRPC communication. It connects to a gRPC server, sends a chat message, and asynchronously receives responses from the server. The function handles connection errors, stream creation errors, and different types of response errors (including EOF when the server closes the connection).\n\nInput: None (The function is a test function with no explicit input parameters, but it connects to a predefined server address \"127.0.0.1:8089\")\n\nOutput: None (The function doesn't return any value but prints received messages and errors to stdout)\n\nNote: The function uses a deferred connection closure and runs the send operation in a separate goroutine to allow simultaneous sending and receiving. The main loop continues receiving until an EOF error or other fatal error occurs.",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"io\"\n\t\"log\"\n\t\"testing\"\n\n\t\"learning_tools/grpc/bidirectional_streaming_rpc/proto\"\n)\nfunc Test(t *testing.T) {\n\tconn, err := grpc.Dial(\"127.0.0.1:8089\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tdefer conn.Close()\n\tclient := proto.NewChatServiceClient(conn)\n\tctx := context.Background()\n\tstream, err := client.Chat(ctx)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\n\tgo func() {\n\t\tif err := stream.Send(&proto.Request{Input: \"\u804a\u5929\"}); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\tfor {\n\t\tresponse, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"\u670d\u52a1\u7aef\u7ed3\u675f\u901a\u77e5:\", err.Error())\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(\"\u63a5\u53d7\u6570\u636e\u9519\u8bef:\", err.Error())\n\t\t}\n\t\tfmt.Println(\"\u670d\u52a1\u7aef\u8fd4\u56de:\", response.Output)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nconst serverAddr = \"127.0.0.1:8089\"\n\nfunc Test() {\n\tconn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewChatServiceClient(conn)\n\tstream, err := client.ChatStream(context.Background())\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create stream: %v\", err)\n\t}\n\n\tsendChan := make(chan string)\n\tgo func() {\n\t\tfor msg := range sendChan {\n\t\t\tif err := stream.Send(&ChatMessage{Content: msg}); err != nil {\n\t\t\t\tlog.Printf(\"failed to send message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor {\n\t\t\tresp, err := stream.Recv()\n\t\t\tif err == io.EOF {\n\t\t\t\tfmt.Println(\"Server closed the connection\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"failed to receive message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %s\\n\", resp.Content)\n\t\t}\n\t}()\n\n\tsendChan <- \"Hello from client\"\n\ttime.Sleep(1 * time.Second)\n\tsendChan <- \"Another message\"\n\ttime.Sleep(1 * time.Second)\n\tclose(sendChan)\n}"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Create a Go function that establishes a secure gRPC client connection to a server, performs a math operation (addition) using the gRPC service, and returns the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:8092 using TLS credentials from a specified certificate file. It creates a client for the MathService, sends a request with two integer arguments, and returns the server's response containing the result of the addition operation.\n\nInput: \n- None (all configuration is hardcoded in the function)\n\nOutput:\n- Prints the response code and message from the gRPC server to stdout\n- Returns nothing (void function)\n\nNote: The function handles connection establishment, service client creation, request sending, and connection cleanup automatically. Error conditions will cause the function to panic.",
    "Canonical_solution": "import (\n\t\"google.golang.org/grpc\"\n\t\"grpcSSLCode/message\"\n\t\"context\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"fmt\"\n\t\"google.golang.org/grpc/credentials\"\n)\nfunc main() {\n\tcreds, err := credentials.NewClientTLSFromFile(\"./keys/server.pem\", \"go-grpc-example\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tgrpc.WithInsecure()\n\n\tconn, err := grpc.Dial(\"localhost:8092\", grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer conn.Close()\n\n\tserviceClient := message.NewMathServiceClient(conn)\n\n\taddArgs := message.RequestArgs{Args1: 3, Args2: 5}\n\n\tresponse, err := serviceClient.AddMethod(context.Background(), &addArgs)\n\tif err != nil {\n\t\tgrpclog.Fatal(err.Error())\n\t}\n\n\tfmt.Println(response.GetCode(), response.GetMessage())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/status\"\n)\n\nconst (\n\tserverAddr = \"localhost:8092\"\n\tcertFile   = \"path/to/cert.pem\"\n)\n\nfunc callAddition() {\n\t// Load certificate\n\tcert, err := ioutil.ReadFile(certFile)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to read certificate file: %v\", err)\n\t}\n\n\t// Create certificate pool from PEM data\n\tcertPool := x509.NewCertPool()\n\tif !certPool.AppendCertsFromPEM(cert) {\n\t\tlog.Fatalf(\"failed to append certificates from PEM data\")\n\t}\n\n\t// Create TLS credentials\n\ttlsConfig := &tls.Config{\n\t\tRootCA: certPool,\n\t}\n\n\t// Create gRPC credentials\n\tcreds := credentials.NewTLS(tlsConfig)\n\n\t// Create connection\n\tconn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(creds))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to dial server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\t// Create client\n\tclient := NewMathServiceClient(conn)\n\n\t// Prepare request\n\treq := &AddRequest{\n\t\tA: 5,\n\t\tB: 7,\n\t}\n\n\t// Perform RPC call\n\tresp, err := client.Add(context.Background(), req)\n\tif err != nil {\n\t\tst, ok := status.FromError(err)\n\t\tif ok {\n\t\t\tfmt.Printf(\"gRPC status code: %d, message: %s\\n\", st.Code(), st.Message())\n\t\t} else {\n\t\t\tlog.Fatalf(\"unexpected error: %v\", err)\n\t\t}\n\t\treturn\n\t}\n\n\t// Print response\n\tfmt.Printf(\"Result: %d\\n\", resp.Result)\n}"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Implement a function to register a mapper with a gRPC server using the Device Management Interface (DMI) API. The function should establish a connection to the server, send a registration request, and return the list of devices and device models provided by the server.\n\nFunction Description: The `RegisterMapper` function connects to a gRPC server using Unix domain socket, sends a mapper registration request with the provided configuration, and returns the device and device model lists from the server response. It handles connection establishment, timeout context, and proper cleanup of resources.\n\nInput: \n- `withData` [bool]: A flag indicating whether to include data in the registration request.\n\nOutput:\n- `[]*dmiapi.Device`: A slice of pointers to Device objects returned by the server.\n- `[]*dmiapi.DeviceModel`: A slice of pointers to DeviceModel objects returned by the server.\n- `error`: An error object if any step fails, nil otherwise.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/common\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc RegisterMapper(withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tresp, err := c.MapperRegister(ctx, &dmiapi.MapperRegisterRequest{\n\t\tWithData: withData,\n\t\tMapper: &dmiapi.MapperInfo{\n\t\t\tName:       cfg.Common.Name,\n\t\t\tVersion:    cfg.Common.Version,\n\t\t\tApiVersion: cfg.Common.APIVersion,\n\t\t\tProtocol:   cfg.Common.Protocol,\n\t\t\tAddress:    []byte(cfg.GrpcServer.SocketPath),\n\t\t\tState:      common.DeviceStatusOK,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn resp.DeviceList, resp.ModelList, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc RegisterMapper(config *dmiapi.MapperConfig, withData bool) ([]*dmiapi.Device, []*dmiapi.DeviceModel, error) {\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\t\"unix:///var/run/dmi.sock\",\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithTimeout(10*time.Second),\n\t)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewDeviceManagementClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n\tdefer cancel()\n\n\treq := &dmiapi.RegisterMapperRequest{\n\t\tConfig: config,\n\t\tWithData: withData,\n\t}\n\n\tresp, err := client.RegisterMapper(ctx, req)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to register mapper: %v\", err)\n\t}\n\n\treturn resp.Devices, resp.DeviceModels, nil\n}"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Implement a gRPC client in Go that connects to a gRPC server over a Unix domain socket, retrieves configuration information, and manages base virtual machine instances.\n\nStruct Description: The grpccache struct represents a gRPC client cache that maintains a connection to a gRPC server and stores VM configuration information.\n\nFields:\nconn: *grpc.ClientConn - Maintains the active connection to the gRPC server\nconfig: *vc.VMConfig - Stores the virtual machine configuration obtained from the server\n\nMethods:\nNew: [Name](ctx context.Context, endpoint string) -> (base.FactoryBase, error) - Creates a new grpccache instance by establishing a connection to the gRPC server at the specified endpoint and retrieving the VM configuration.\nGetBaseVM: [Name](ctx context.Context, config vc.VMConfig) -> (*vc.VM, error) - Retrieves a base VM instance from the cache server and closes the connection when done. The method converts the gRPC response to a local VM object.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\n\ttypes \"github.com/gogo/protobuf/types\"\n\tpb \"github.com/kata-containers/runtime/protocols/cache\"\n\tvc \"github.com/kata-containers/runtime/virtcontainers\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype grpccache struct {\n\tconn   *grpc.ClientConn\n\tconfig *vc.VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (base.FactoryBase, error) {\n\tconn, err := grpc.Dial(fmt.Sprintf(\"unix://%s\", endpoint), grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to connect %q\", endpoint)\n\t}\n\n\tjConfig, err := pb.NewCacheServiceClient(conn).Config(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to Config\")\n\t}\n\n\tconfig, err := vc.GrpcToVMConfig(jConfig)\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to convert JSON to VMConfig\")\n\t}\n\n\treturn &grpccache{conn: conn, config: config}, nil\n}\n\nfunc (g *grpccache) GetBaseVM(ctx context.Context, config vc.VMConfig) (*vc.VM, error) {\n\tdefer g.conn.Close()\n\tgVM, err := pb.NewCacheServiceClient(g.conn).GetBaseVM(ctx, &types.Empty{})\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to GetBaseVM\")\n\t}\n\treturn vc.NewVMFromGrpc(ctx, gVM, *g.config)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/vmware/govmomi/vim25/soap\"\n\t\"github.com/vmware/govmomi/vim25/types\"\n)\n\ntype VMConfig struct {\n\tName string\n\tMemoryMB int64\n\tCPUs int32\n}\n\ntype VM struct {\n\tName string\n\tMemoryMB int64\n\tCPUs int32\n}\n\ntype FactoryBase interface {\n\tGetBaseVM(ctx context.Context, config VMConfig) (*VM, error)\n}\n\ntype grpccache struct {\n\tconn *grpc.ClientConn\n\tconfig *VMConfig\n}\n\nfunc New(ctx context.Context, endpoint string) (FactoryBase, error) {\n\tconn, err := grpc.DialContext(ctx, endpoint, grpc.WithDialer(func(ctx context.Context, s string) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", s)\n\t}), grpc.WithInsecure())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\t// Assume a gRPC service that returns VMConfig\n\t// This is a placeholder for actual gRPC call to retrieve config\n\tconfig := &VMConfig{\n\t\tName: \"test-vm\",\n\t\tMemoryMB: 4096,\n\t\tCPUs: 2,\n\t}\n\t\n\treturn &grpccache{\n\t\tconn: conn,\n\t\tconfig: config,\n\t}, nil\n}\n\nfunc (c *grpccache) GetBaseVM(ctx context.Context, config VMConfig) (*VM, error) {\n\t// Simulate retrieving VM from cache or server\n\tvm := &VM{\n\t\tName: config.Name,\n\t\tMemoryMB: config.MemoryMB,\n\t\tCPUs: config.CPUs,\n\t}\n\t\n\t// Close connection after use\n\tdefer c.conn.Close()\n\t\n\treturn vm, nil\n}"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a remote server, performs profiling operations based on input flags, and handles connection cleanup.\n\nFunction Description: The function `remoteCommand` establishes an insecure gRPC connection to a specified address, creates a profiling client, and executes either profiling enable/disable operations or retrieves a snapshot based on command-line flags. It handles connection timeouts and ensures proper connection closure.\n\nInput:\n- Context (implicit through package variables)\n- Command-line flags (implicit through package variables):\n  - `flagAddress`: string - gRPC server address to connect to\n  - `flagTimeout`: int - connection timeout in seconds (0 for no timeout)\n  - `flagEnableProfiling`: bool - whether to enable profiling\n  - `flagDisableProfiling`: bool - whether to disable profiling\n  - `flagRetrieveSnapshot`: bool - whether to retrieve a snapshot\n  - `flagSnapshot`: string - snapshot identifier (when retrieving)\n\nOutput:\n- error - returns nil on success, or an error describing what went wrong during execution",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tppb \"google.golang.org/grpc/profiling/proto\"\n)\nfunc remoteCommand() error {\n\tctx := context.Background()\n\tif *flagTimeout > 0 {\n\t\tvar cancel func()\n\t\tctx, cancel = context.WithTimeout(context.Background(), time.Duration(*flagTimeout)*time.Second)\n\t\tdefer cancel()\n\t}\n\n\tlogger.Infof(\"dialing %s\", *flagAddress)\n\tcc, err := grpc.Dial(*flagAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Errorf(\"cannot dial %s: %v\", *flagAddress, err)\n\t\treturn err\n\t}\n\tdefer cc.Close()\n\n\tc := ppb.NewProfilingClient(cc)\n\n\tif *flagEnableProfiling || *flagDisableProfiling {\n\t\treturn setEnabled(ctx, c, *flagEnableProfiling)\n\t}\n\tif *flagRetrieveSnapshot {\n\t\treturn retrieveSnapshot(ctx, c, *flagSnapshot)\n\t}\n\treturn fmt.Errorf(\"what should I do with the remote target?\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc remoteCommand() error {\n\taddr := flagAddress\n\ttimeout := time.Duration(flagTimeout) * time.Second\n\tif flagTimeout == 0 {\n\t\ttimeout = 0\n\t}\n\n\tconn, err := grpc.Dial(\n\t\taddr,\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithTimeout(timeout),\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewProfilingClient(conn)\n\n\tif flagEnableProfiling {\n\t\t_, err := client.EnableProfiling(context.Background(), &EnableRequest{})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to enable profiling: %v\", err)\n\t\t}\n\t} else if flagDisableProfiling {\n\t\t_, err := client.DisableProfiling(context.Background(), &DisableRequest{})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to disable profiling: %v\", err)\n\t\t}\n\t} else if flagRetrieveSnapshot {\n\t\tif flagSnapshot == \"\" {\n\t\t\treturn errors.New(\"snapshot identifier is required\")\n\t\t}\n\t\tresp, err := client.RetrieveSnapshot(context.Background(), &RetrieveRequest{SnapshotId: flagSnapshot})\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to retrieve snapshot: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"Snapshot retrieved: %s\\n\", resp.Message)\n\t} else {\n\t\treturn errors.New(\"no valid operation specified\")\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, publishes messages, and handles connection cleanup.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, publishes two predefined messages, and ensures proper connection closure. It demonstrates basic gRPC client operations including connection establishment, RPC calls, and resource cleanup.\n\nInput: None (The function uses hardcoded values for demonstration purposes)\n\nOutput: None (The function publishes messages to the server and logs errors if any occur)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/pubsub/proto\"\n)\n\nfunc connectAndPublish() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubSubClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tmsg1 := &pb.Message{Content: \"Hello, PubSub!\"}\n\tmsg2 := &pb.Message{Content: \"This is a test message.\"}\n\n\t_, err = client.Publish(ctx, msg1)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to publish first message: %v\", err)\n\t}\n\n\t_, err = client.Publish(ctx, msg2)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to publish second message: %v\", err)\n}"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC server for Google Pub/Sub emulator and initializes a Pub/Sub client using that connection.\n\nFunction Description: The function demonstrates how to set up a connection to a local gRPC server (Pub/Sub emulator) using insecure credentials, then creates a Pub/Sub client with the established connection. The client should be properly closed when no longer needed.\n\nInput: None (uses hardcoded values for demonstration purposes)\n\nOutput: None (function demonstrates setup pattern, actual Pub/Sub client is created but not used)\n\nNote: The function uses context.Background() for simplicity in the example, and hardcodes \"project\" as the Google Cloud project ID for demonstration purposes. In production code, these would typically be parameters.",
    "Canonical_solution": "import (\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n)\nfunc ExampleNewServer() {\n\tctx := context.Background()\n\tsrv := pstest.NewServer()\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t}\n\tclient, err := pubsub.NewClient(ctx, \"project\", option.WithGRPCConn(conn))\n\tif err != nil {\n\t}\n\tdefer client.Close()\n\t_ = client\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tpubsub \"cloud.google.com/go/pubsub/apiv1\"\n)\n\nfunc setupPubSubClient() {\n\tconn, err := grpc.Dial(\"localhost:8080\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to connect to gRPC server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tctx := context.Background()\n\tclient, err := pubsub.NewPublisherClient(conn)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create Pub/Sub client: %v\", err)\n\t}\n\tdefer client.Close()\n\n\tfmt.Println(\"Pub/Sub client initialized successfully.\")\n}"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a Dragonfly daemon server over a Unix domain socket to download files from a specified URL to a local output path, with various download configuration options.\n\nFunction Description: The function establishes a gRPC connection to a Dragonfly daemon server running on a Unix domain socket, initiates a file download operation with specified parameters including authentication headers for S3 storage, and streams the download results until completion.\n\nInput:\n- ctx context.Context - Context for controlling the gRPC call lifecycle\n- unixSocketPath string - Path to the Unix domain socket (e.g., \"/run/dfdaemon.sock\")\n- downloadRequest *dfdaemonv1.DownRequest - Download request containing:\n  * Uuid: string - Unique identifier for the download\n  * Url: string - Source URL to download from\n  * Output: string - Local output path\n  * Recursive: bool - Whether to download recursively\n  * UrlMeta: *commonv1.UrlMeta - Metadata including S3 authentication headers\n  * Other download configuration parameters\n\nOutput:\n- map[string]*dfdaemonv1.DownResult - Map of download results keyed by output path\n- error - Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tdfdaemonv1 \"d7y.io/api/v2/pkg/apis/dfdaemon/v1\"\n)\nfunc main() {\n\tdialer := func(ctx context.Context, addr string) (net.Conn, error) {\n\t\treturn net.Dial(\"unix\", addr)\n\t}\n\n\tunixAddr := \"/run/dfdaemon.sock\"\n\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tunixAddr,\n\t\tgrpc.WithContextDialer(dialer),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tvar (\n\t\tclient = dfdaemonv1.NewDaemonClient(conn)\n\t\tctx    = context.Background()\n\t)\n\n\tdownloadClient, err := client.Download(ctx, &dfdaemonv1.DownRequest{\n\t\tUuid:              \"95305fa2-138b-4466-acec-62865ab6403c\",\n\t\tUrl:               \"s3://minio-test-bucket/dragonfly-test/usr/\" + *subDir,\n\t\tOutput:            \"/var/lib/dragonfly-grpc-test/usr/\" + *subDir,\n\t\tRecursive:         true,\n\t\tTimeout:           0,\n\t\tLimit:             0,\n\t\tDisableBackSource: false,\n\t\tUrlMeta: &commonv1.UrlMeta{\n\t\t\tDigest: \"\",\n\t\t\tTag:    \"\",\n\t\t\tRange:  \"\",\n\t\t\tFilter: \"Expires&Signature\",\n\t\t\tHeader: map[string]string{\n\t\t\t\t\"awsEndpoint\":         \"http://minio.dragonfly-e2e.svc:9000\",\n\t\t\t\t\"awsRegion\":           \"us-west-1\",\n\t\t\t\t\"awsAccessKeyID\":      \"root\",\n\t\t\t\t\"awsSecretAccessKey\":  \"password\",\n\t\t\t\t\"awsS3ForcePathStyle\": \"true\",\n\t\t\t},\n\t\t},\n\t\tUid:                1000,\n\t\tGid:                1000,\n\t\tKeepOriginalOffset: false,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tresults := map[string]*dfdaemonv1.DownResult{}\n\tfor {\n\t\tresp, err := downloadClient.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tresults[resp.Output] = resp\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc downloadFile(ctx context.Context, unixSocketPath string, downloadRequest *dfdaemonv1.DownRequest) (map[string]*dfdaemonv1.DownResult, error) {\n\tconn, err := grpc.DialContext(ctx, unixSocketPath, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := dfdaemonv1.NewDownServiceClient(conn)\n\tstream, err := client.Download(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to initiate download: %v\", err)\n\t}\n\n\terr = stream.Send(downloadRequest)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to send download request: %v\", err)\n\t}\n\n\tresults := make(map[string]*dfdaemonv1.DownResult)\n\tfor {\n\t\tresp, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to receive response: %v\", err)\n\t\t}\n\n\t\tresults[resp.Output] = resp\n\t}\n\n\treturn results, nil\n}"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a function that connects to a gRPC server, retrieves pod information using the HyperD Public API, and returns the response.\n\nFunction Description: The function establishes an insecure connection to a gRPC server at the specified address, creates a Public API client, sends a PodInfoRequest for a specific pod ID, and returns the pod information response. The connection is automatically closed when the function completes.\n\nInput: \n- server string: The address of the gRPC server (e.g., \"localhost:50051\")\n- podID string: The ID of the pod to query (e.g., \"pod-zpIOTSAjmM\")\n\nOutput:\n- *types.PodInfoResponse: The response containing pod information\n- error: Any error that occurred during the operation",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/hyperhq/hyperd/types\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(server, grpc.WithInsecure())\n\tif err != nil {\n\t\tfmt.Printf(\"Connect server error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\n\tclient := types.NewPublicAPIClient(conn)\n\trequest := types.PodInfoRequest{\n\t\tPodID: \"pod-zpIOTSAjmM\",\n\t}\n\tresponse, err := client.PodInfo(context.Background(), &request)\n\tif err != nil {\n\t\tfmt.Printf(\"Get PodInfo error: %v\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Got response: %v\", response)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc GetPodInfo(server, podID string) (*types.PodInfoResponse, error) {\n\tconn, err := grpc.Dial(server, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPublicAPIClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tresp, err := client.PodInfo(ctx, &pb.PodInfoRequest{PodId: podID})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to get pod info: %v\", err)\n\t}\n\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Implement a gRPC client function in Go that reports device status to a gRPC server using a Unix domain socket connection.\n\nFunction Description: The function `ReportDeviceStatus` establishes a connection to a gRPC server through a Unix domain socket, sends a device status report request, and handles the response. It manages connection lifecycle including setup, error handling, and cleanup.\n\nInput: \n- request *dmiapi.ReportDeviceStatusRequest: A pointer to the gRPC request message containing device status information to be reported.\n\nOutput:\n- error: Returns an error if any step fails (connection establishment, RPC call, etc.), or nil if successful.\n\nNote: The function uses configuration from `config.Cfg()` to determine the Unix socket path and includes proper connection timeout handling.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdmiapi \"github.com/kubeedge/api/apis/dmi/v1beta1\"\n\t\"github.com/kubeedge/mapper-framework/pkg/config\"\n)\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tcfg := config.Cfg()\n\n\tconn, err := grpc.Dial(cfg.Common.EdgeCoreSock,\n\t\tgrpc.WithInsecure(),\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithContextDialer(\n\t\t\tfunc(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\tunixAddress, err := net.ResolveUnixAddr(\"unix\", cfg.Common.EdgeCoreSock)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn net.DialUnix(\"unix\", nil, unixAddress)\n\t\t\t},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := dmiapi.NewDeviceManagerServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\t_, err = c.ReportDeviceStatus(ctx, request)\n\treturn err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"errors\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc ReportDeviceStatus(request *dmiapi.ReportDeviceStatusRequest) error {\n\tcfg := config.Cfg()\n\tsocketPath := cfg.SocketPath\n\ttimeout := time.Duration(cfg.Timeout) * time.Second\n\n\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\tdefer cancel()\n\n\tconn, err := grpc.DialContext(ctx, socketPath, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn errors.New(\"failed to connect to gRPC server: \" + err.Error())\n\t}\n\tdefer conn.Close()\n\n\tclient := dmiapi.NewDeviceStatusServiceClient(conn)\n\tresp, err := client.ReportDeviceStatus(ctx, request)\n\tif err != nil {\n\t\tst, ok := status.FromError(err)\n\t\tif ok {\n\t\t\treturn errors.New(\"gRPC error: \" + st.Message())\n\t\t}\n\t\treturn err\n\t}\n\n\tif resp.GetSuccess() != true {\n\t\treturn errors.New(\"device status report failed: \" + resp.GetMessage())\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC metrics server, creates a client for the MetricsService, and prints the metrics retrieved from the server.\n\nFunction Description: The function connects to a gRPC server specified by the metricsServerAddress, initializes a MetricsService client, and prints the metrics. If the connection fails, it logs a fatal error. The connection is automatically closed when the function completes.\n\nInput: \n- metricsServerAddress: string - The address of the gRPC metrics server to connect to.\n- totalOnly: bool - A flag indicating whether to print only the total metrics or all metrics.\n\nOutput: None (prints metrics to the console or logs errors).",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tgrpclog.Fatalf(\"Metrics server address is empty.\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc getMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tmetricsServerAddress,\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithTimeout(5*time.Second),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewMetricsServiceClient(conn)\n\tresp, err := client.GetMetrics(context.Background(), &GetMetricsRequest{TotalOnly: totalOnly})\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to retrieve metrics: %v\", err)\n\t}\n\n\tfor _, metric := range resp.Metrics {\n\t\tfmt.Printf(\"%s: %d\\n\", metric.Name, metric.Value)\n\t}\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and processes the response.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and logs the server's response or any errors encountered during the process.\n\nInput: \n- address: string - The server address in format \"host:port\" (default: \"localhost:50051\")\n- name: string - The name to send in the greeting request (default: \"world\")\n\nOutput:\n- None (directly logs results to console)\n- Side effect: Sends gRPC request and receives response",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"go.opencensus.io/examples/grpc/proto\"\n\t\"go.opencensus.io/plugin/ocgrpc\"\n)\n\nconst (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"world\"\n)\n\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithStatsHandler(&ocgrpc.ClientHandler{}), grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"Cannot connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Printf(\"Could not greet: %v\", err)\n\t} else {\n\t\tlog.Printf(\"Greeting: %s\", r.Message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/proto/package\"\n)\n\nfunc greet(address, name string) {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(5*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tctx := context.Background()\n\tresp, err := client.SayHello(ctx, &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", resp.GetMessage())\n}"
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Create a gRPC client in Go that connects to a RouteGuide service, performs various operations (getting features, listing features within a rectangle, recording a route, and conducting route chat), and handles secure/insecure connections.\n\nFunction Description: The main function establishes a connection to a gRPC server, creates a RouteGuide client, and demonstrates various service operations. It handles both secure (TLS) and insecure connections based on input flags.\n\nInput:\n- Command line flags (implicit):\n  - tls (bool): Whether to use TLS encryption\n  - serverHostOverride (string): Server name for certificate validation\n  - caFile (string): Path to CA certificate file\n  - serverAddr (string): Server address in format host:port\n\nOutput:\n- None (direct output to console/logger)\n- Side effects: Makes gRPC calls to server and prints results\n\nMethods called (from RouteGuideClient):\n1. printFeature(client, point) - Gets and prints a feature at given point\n2. printFeatures(client, rectangle) - Lists features within given rectangle\n3. runRecordRoute(client) - Records a route and prints statistics\n4. runRouteChat(client) - Conducts bidirectional route chat",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"io\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/credentials\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n\n\tprintFeature(client, &pb.Point{409146138, -746188906})\n\tprintFeature(client, &pb.Point{0, 0})\n\tprintFeatures(client, &pb.Rectangle{&pb.Point{400000000, -750000000}, &pb.Point{420000000, -730000000}})\n\trunRecordRoute(client)\n\trunRouteChat(client)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/examples/route_guide/proto/routeguide\"\n)\n\nvar (\n\ttls           = flag.Bool(\"tls\", false, \"Use TLS\")\n\tserverHostOverride = flag.String(\"server_host_override\", \"\", \"Server name for certificate validation\")\n\tcaFile        = flag.String(\"ca_file\", \"\", \"Path to CA certificate file\")\n\tserverAddr    = flag.String(\"server_addr\", \"localhost:50051\", \"Server address in format host:port\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\t// Set up connection\n\topts := []grpc.DialOption{}\n\tif *tls {\n\t\tvar opts []grpc.DialOption\n\t\tif *caFile != \"\" {\n\t\t\tcert, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t\topts = append(opts, grpc.WithTransportCredentials(cert))\n\t\t} else {\n\t\t\tcreds := credentials.NewTLS(&tls.Config{})\n\t\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t\t}\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := routeguide.NewRouteGuideClient(conn)\n\n\t// Example usage of the client methods\n\tpoint := &routeguide.Point{Latitude: 409136100, Longitude: -746188800}\n\tprintFeature(client, point)\n\n\trectangle := &routeguide.Rectangle{\n\t\tLow: &routeguide.Point{Latitude: 409136100, Longitude: -746188800},\n\t\tHigh: &routeguide.Point{Latitude: 409156100, Longitude: -746088800},\n\t}\n\tprintFeatures(client, rectangle)\n\n\trunRecordRoute(client)\n\n\trunRouteChat(client)\n}\n\nfunc printFeature(client routeguide.RouteGuideClient, point *routeguide.Point) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tfeature, err := client.GetFeature(ctx, &routeguide.Point{Latitude: point.Latitude, Longitude: point.Longitude})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not get feature: %v\", err)\n\t}\n\tfmt.Printf(\"Feature at (%d, %d): %s\\n\", point.Latitude, point.Longitude, feature.Name)\n}\n\nfunc printFeatures(client routeguide.RouteGuideClient, rectangle *routeguide.Rectangle) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\t// Create a rectangle with coordinates that are within the given rectangle\n\trectangle.Low.Latitude = rectangle.Low.Latitude - 100000\n\trectangle.Low.Longitude = rectangle.Low.Longitude - 100000\n\trectangle.High.Latitude = rectangle.High.Latitude + 100000\n\trectangle.High.Longitude = rectangle.High.Longitude + 100000\n\t// Call the ListFeatures method\n\tstream, err := client.ListFeatures(ctx, &routeguide.Rectangle{\n\t\tLow:   rectangle.Low,\n\t\tHigh:  rectangle.High,\n\t\tCount: 100,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not list features: %v\", err)\n\t}\n\tfor {\n\t\tfeature, err := stream.Recv()\n\t\tif err == nil {\n\t\t\tfmt.Printf(\"Feature at (%d, %d): %s\\n\", feature.Location.Latitude, feature.Location.Longitude, feature.Name)\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc runRecordRoute(client routeguide.RouteGuideClient) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tpoints := []*routeguide.Point{\n\t\t{Latitude: 409136100, Longitude: -746188800},\n\t\t{Latitude: 409136100, Longitude: -746188800},\n\t\t{Latitude: 409136100, Longitude: -746188800},\n\t\t{Latitude: 409136100, Longitude: -746188800},\n\t\t{Latitude: 409136100, Longitude: -746188800},\n\t}\n\trequest := &routeguide.RecordRouteRequest{\n\t\tPath: points,\n\t}\n\tresponse, err := client.RecordRoute(ctx, request)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not record route: %v\", err)\n\t}\n\tfmt.Printf(\"Route recorded. Points: %d, Miles: %.2f, Features: %d\\n\", response.PointCount, response.Miles, response.FeatureCount)\n}\n\nfunc runRouteChat(client routeguide.RouteGuideClient) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tstream, err := client.RouteChat(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not start route chat: %v\", err)\n\t}\n\t// Send a few messages\n\tsendMessages(stream, 5)\n\t// Receive messages\n\treceiveMessages(stream)\n}\n\nfunc sendMessages(stream routeguide.RouteGuide_RouteChatClient, count int) {\n\tfor i := 0; i < count; i++ {\n\t\tpoint := &routeguide.Point{Latitude: 409136100, Longitude: -746188800}\n\t\tmsg := &routeguide.RouteNote{\n\t\t\tMessage: fmt.Sprintf(\"Message %d\", i),\n\t\t\tLocation: point,\n\t\t}\n\t\tif err := stream.Send(msg); err != nil {\n\t\t\tlog.Fatalf(\"failed to send message: %v\", err)\n\t\t}\n\t}\n}\n\nfunc receiveMessages(stream routeguide.RouteGuide_RouteChatClient) {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to receive message: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"Received message: %s at (%d, %d)\\n\", msg.Message, msg.Location.Latitude, msg.Location.Longitude)\n\t}\n}"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a greeting request, and receives a response.\n\nFunction Description: The function establishes a connection to a gRPC server using the provided address, creates a client for the HelloService, sends a HelloRequest with the specified name, and returns the server's response. It handles connection errors and timeout contexts.\n\nInput:\n- addr: string - The address of the gRPC server to connect to (e.g., \"127.0.0.1:8972\")\n- name: string - The name to include in the greeting request\n\nOutput:\n- string - The greeting response from the server\n- error - Any error that occurred during the process\n\nNote: The function should properly close the connection when done and handle context timeouts.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"hello_grpc_client/proto\"\n\t\"log\"\n\t\"time\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := proto.NewHelloServiceClient(conn)\n\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &proto.HelloRequest{\n\t\tName: *name,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc greet(addr, name string) (string, error) {\n\tconn, err := grpc.Dial(addr, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithBlock(), grpc.WithTimeout(5*time.Second))\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tresp, err := client.Hello(ctx, &HelloRequest{Name: name})\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to greet: %v\", err)\n\t}\n\n\treturn resp.Message, nil\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and properly handle the connection lifecycle.\n\nFunction Description: The function tests gRPC client functionality by connecting to a user authentication service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper gRPC connection management and metadata handling.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None directly returned, but prints authentication tokens to stdout\n- Returns error if connection or RPC calls fail\n\nNote: The function includes error handling and connection cleanup via defer. It uses metadata to pass a UUID for request tracking and demonstrates multiple RPC calls in a loop.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v8/user_agent/src\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nfunc testGRPCClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure(), grpc.WithBlock())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserServiceClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\t\tdefer cancel()\n\n\t\tuuid := fmt.Sprintf(\"uuid-%d\", i)\n\t\tmd := metadata.Pairs(\"x-request-id\", uuid)\n\t\tctx = metadata.NewOutgoingContext(ctx, md)\n\n\t\treq := &LoginRequest{\n\t\t\tAccount: account,\n\t\t\tPassword: password,\n\t\t}\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"RPC call failed: %v\", err)\n\t\t}\n\n\t\tfmt.Printf(\"Received token: %s\\n\", resp.Token)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, publishes messages, and handles connection cleanup.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a client for the PubsubService, publishes two predefined messages, and ensures proper connection closure. The function handles potential connection errors and publishing failures.\n\nInput: None (The target server address is hardcoded as \"localhost:1234\" and messages are predefined)\n\nOutput: None (The function performs side effects by publishing messages to the gRPC server and may terminate the program on errors)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"ch4.4-3/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"golang: hello Go\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = client.Publish(context.Background(), &pb.String{Value: \"docker: hello Docker\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nconst (\n\tserverAddr = \"localhost:1234\"\n)\n\nfunc publishMessages() {\n\tconn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to connect to server: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := NewPubsubServiceClient(conn)\n\tctx := context.Background()\n\n\tmsg1 := &Message{Content: \"Hello from Go client!\"}\n\tmsg2 := &Message{Content: \"This is a test message.\"}\n\n\tif _, err := client.Publish(ctx, msg1); err != nil {\n\t\tfmt.Printf(\"Failed to publish first message: %v\\n\", err)\n\t\treturn\n\t}\n\n\tif _, err := client.Publish(ctx, msg2); err != nil {\n\t\tfmt.Printf(\"Failed to publish second message: %v\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"Messages published successfully.\")\n}"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a function that tests a gRPC client connection to a user authentication service, sends multiple login requests, and prints the received authentication tokens.\n\nFunction Description: The function establishes an insecure gRPC connection to a specified server address, creates a user client, and sends 20 consecutive login requests with metadata containing a UUID. Each successful response's token is printed, while errors cause immediate termination.\n\nInput: None (The service address is hardcoded as \"127.0.0.1:8881\" and login credentials are fixed as account \"hwholiday\" and password \"123456\")\n\nOutput: None (The function prints tokens to stdout and may return early on error through testing.T's Error method)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v7/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\ntype UserAuthClient interface {\n\tLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)\n}\n\ntype LoginRequest struct {\n\tAccount  string\n\tPassword string\n}\n\ntype LoginResponse struct {\n\tToken string\n}\n\nfunc TestUserAuthConnection() {\n\tconn, err := grpc.Dial(\"127.0.0.1:8881\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tfmt.Println(\"Failed to connect:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserAuthClient(conn)\n\n\tfor i := 0; i < 20; i++ {\n\t\tuuid := fmt.Sprintf(\"%d\", time.Now().UnixNano())\n\t\treq := &LoginRequest{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t}\n\t\tctx := context.WithValue(context.Background(), \"uuid\", uuid)\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Login failed: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"Received token: %s\\n\", resp.Token)\n\t}\n}"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: The task involves creating a gRPC probe client in Go that can establish connections to gRPC servers, perform various probe operations (echo, read, write), and collect metrics about the probe results.\n\nStruct Description: The Probe struct represents a gRPC probe client that manages connections to multiple targets, performs probe operations, and tracks results.\n\nFields:\n\nname: [string] - The name of the probe instance\nsrc: [string] - The source identifier for the probe\nopts: [*options.Options] - Configuration options for the probe\nc: [*configpb.ProbeConf] - gRPC probe-specific configuration\nl: [*logger.Logger] - Logger for recording probe events\ndialOpts: [[]grpc.DialOption] - Options for gRPC dialing\ntargets: [[]endpoint.Endpoint] - List of target endpoints to probe\ncancelFuncs: [map[string]context.CancelFunc] - Map of cancel functions for target operations\ntargetsMu: [sync.Mutex] - Mutex for synchronizing access to targets\nresults: [map[string]*probeRunResult] - Map of probe results by target\n\nMethods:\n\nconnectWithRetry: [func(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn] -> [*grpc.ClientConn] - Establishes a gRPC connection to the target with retry logic, using the specified context, target address, message pattern, and result tracker. Returns the established connection or nil if failed.\n\noneTargetLoop: [func(ctx context.Context, tgt string, index int, result *probeRunResult)] -> [None] - Main probe loop for a single target that continuously performs probe operations (echo/read/write) at regular intervals, using the specified context, target address, target index, and result tracker. Manages connection lifecycle and records metrics.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/google/cloudprober/logger\"\n\t\"github.com/google/cloudprober/metrics\"\n\tconfigpb \"github.com/google/cloudprober/probes/grpc/proto\"\n\t\"github.com/google/cloudprober/probes/options\"\n\t\"github.com/google/cloudprober/probes/probeutils\"\n\t\"github.com/google/cloudprober/targets/endpoint\"\n\n\tgrpcprobepb \"github.com/google/cloudprober/servers/grpc/proto\"\n\tservicepb \"github.com/google/cloudprober/servers/grpc/proto\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\t\"google.golang.org/grpc/credentials/local\"\n\t\"google.golang.org/grpc/peer\"\n)\n\ntype Probe struct {\n\tname     string\n\tsrc      string\n\topts     *options.Options\n\tc        *configpb.ProbeConf\n\tl        *logger.Logger\n\tdialOpts []grpc.DialOption\n\n\ttargets     []endpoint.Endpoint\n\tcancelFuncs map[string]context.CancelFunc\n\ttargetsMu   sync.Mutex\n\n\tresults map[string]*probeRunResult\n}\n\ntype probeRunResult struct {\n\tsync.Mutex\n\ttarget        string\n\ttotal         metrics.Int\n\tsuccess       metrics.Int\n\tlatency       metrics.Value\n\tconnectErrors metrics.Int\n}\n\nfunc (p *Probe) connectWithRetry(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn {\n\tconnectTimeout := p.opts.Timeout\n\tif p.c.GetConnectTimeoutMsec() > 0 {\n\t\tconnectTimeout = time.Duration(p.c.GetConnectTimeoutMsec()) * time.Millisecond\n\t}\n\tvar conn *grpc.ClientConn\n\tvar err error\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Warningf(\"ProbeId(%s): context cancelled in connect loop.\", msgPattern)\n\t\t\treturn nil\n\t\tdefault:\n\t\t}\n\t\tconnCtx, cancelFunc := context.WithTimeout(ctx, connectTimeout)\n\n\t\tif uriScheme := p.c.GetUriScheme(); uriScheme != \"\" {\n\t\t\ttgt = uriScheme + tgt\n\t\t}\n\t\tconn, err = grpc.DialContext(connCtx, tgt, p.dialOpts...)\n\n\t\tcancelFunc()\n\t\tif err != nil {\n\t\t\tp.l.Warningf(\"ProbeId(%v) connect error: %v\", msgPattern, err)\n\t\t} else {\n\t\t\tp.l.Infof(\"ProbeId(%v) connection established.\", msgPattern)\n\t\t\tbreak\n\t\t}\n\t\tresult.Lock()\n\t\tresult.total.Inc()\n\t\tresult.connectErrors.Inc()\n\t\tresult.Unlock()\n\t}\n\treturn conn\n}\n\nfunc (p *Probe) oneTargetLoop(ctx context.Context, tgt string, index int, result *probeRunResult) {\n\tmsgPattern := fmt.Sprintf(\"%s,%s%s,%03d\", p.src, p.c.GetUriScheme(), tgt, index)\n\n\tconn := p.connectWithRetry(ctx, tgt, msgPattern, result)\n\tif conn == nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := servicepb.NewProberClient(conn)\n\ttimeout := p.opts.Timeout\n\tmethod := p.c.GetMethod()\n\n\tmsgSize := p.c.GetBlobSize()\n\tmsg := make([]byte, msgSize)\n\tprobeutils.PatternPayload(msg, []byte(msgPattern))\n\tticker := time.NewTicker(p.opts.Interval)\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Warningf(\"ProbeId(%s): context cancelled in request loop.\", msgPattern)\n\t\t\tticker.Stop()\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t}\n\n\t\treqCtx, cancelFunc := context.WithTimeout(ctx, timeout)\n\t\tvar success int64\n\t\tvar delta time.Duration\n\t\tstart := time.Now()\n\t\tvar err error\n\t\tvar peer peer.Peer\n\t\topts := []grpc.CallOption{\n\t\t\tgrpc.WaitForReady(true),\n\t\t\tgrpc.Peer(&peer),\n\t\t}\n\t\tswitch method {\n\t\tcase configpb.ProbeConf_ECHO:\n\t\t\treq := &grpcprobepb.EchoMessage{\n\t\t\t\tBlob: []byte(msg),\n\t\t\t}\n\t\t\t_, err = client.Echo(reqCtx, req, opts...)\n\t\tcase configpb.ProbeConf_READ:\n\t\t\treq := &grpcprobepb.BlobReadRequest{\n\t\t\t\tSize: proto.Int32(msgSize),\n\t\t\t}\n\t\t\t_, err = client.BlobRead(reqCtx, req, opts...)\n\t\tcase configpb.ProbeConf_WRITE:\n\t\t\treq := &grpcprobepb.BlobWriteRequest{\n\t\t\t\tBlob: []byte(msg),\n\t\t\t}\n\t\t\t_, err = client.BlobWrite(reqCtx, req, opts...)\n\t\tdefault:\n\t\t\tp.l.Criticalf(\"Method %v not implemented\", method)\n\t\t}\n\t\tcancelFunc()\n\t\tif err != nil {\n\t\t\tpeerAddr := \"unknown\"\n\t\t\tif peer.Addr != nil {\n\t\t\t\tpeerAddr = peer.Addr.String()\n\t\t\t}\n\t\t\tp.l.Warningf(\"ProbeId(%s) request failed: %v. ConnState: %v. Peer: %v\", msgPattern, err, conn.GetState(), peerAddr)\n\t\t} else {\n\t\t\tsuccess = 1\n\t\t\tdelta = time.Since(start)\n\t\t}\n\t\tresult.Lock()\n\t\tresult.total.Inc()\n\t\tresult.success.AddInt64(success)\n\t\tresult.latency.AddFloat64(delta.Seconds() / p.opts.LatencyUnit.Seconds())\n\t\tresult.Unlock()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/someuser/configpb\"\n\t\"github.com/someuser/logger\"\n\t\"github.com/someuser/endpoint\"\n\t\"github.com/someuser/options\"\n\t\"github.com/someuser/probeRunResult\"\n)\n\ntype Probe struct {\n\tname       string\n\tsrc        string\n\topts       *options.Options\n\tc          *configpb.ProbeConf\n\tl          *logger.Logger\n\tdialOpts   []grpc.DialOption\n\ttargets    []endpoint.Endpoint\n\tcancelFuncs map[string]context.CancelFunc\n\ttargetsMu   sync.Mutex\n\tresults    map[string]*probeRunResult\n}\n\nfunc (p *Probe) connectWithRetry(ctx context.Context, tgt, msgPattern string, result *probeRunResult) *grpc.ClientConn {\n\tvar conn *grpc.ClientConn\n\tfor i := 0; i < p.c.Retries; i++ {\n\t\tconn, err := grpc.DialContext(ctx, tgt, p.dialOpts...)\n\t\tif err != nil {\n\t\t\tp.l.Errorf(\"Failed to connect to %s: %v\", tgt, err)\n\t\t\ttime.Sleep(time.Duration(i+1) * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tresult.Connected = true\n\t\treturn conn\n\t}\n\treturn nil\n}\n\nfunc (p *Probe) oneTargetLoop(ctx context.Context, tgt string, index int, result *probeRunResult) {\n\tticker := time.NewTicker(p.c.Interval)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.l.Infof(\"Stopping probe for target %s\", tgt)\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t\tconn := p.connectWithRetry(ctx, tgt, \"echo\", result)\n\t\t\tif conn == nil {\n\t\t\t\tresult.LastError = fmt.Sprintf(\"Failed to connect to %s after retries\", tgt)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdefer conn.Close()\n\n\t\t\t// Perform echo/read/write operations here\n\t\t\t// Example: Echo operation\n\t\t\tclient := configpb.NewEchoServiceClient(conn)\n\t\t\techoResp, err := client.Echo(ctx, &configpb.EchoRequest{Message: \"test\"})\n\t\t\tif err != nil {\n\t\t\t\tresult.LastError = fmt.Sprintf(\"Echo failed: %v\", err)\n\t\t\t} else {\n\t\t\t\tresult.LastSuccess = time.Now()\n\t\t\t\tresult.LastMessage = echoResp.Message\n\t\t\t}\n\n\t\t\t// Record metrics\n\t\t\tresult.TotalProbes++\n\t\t\tif result.LastError == \"\" {\n\t\t\t\tresult.Successes++\n\t\t\t} else {\n\t\t\t\tresult.Failures++\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Write a Go function that tests the version retrieval functionality of a gRPC service using the Stripe CLI client. The function should establish a connection to the gRPC server, call the Version method, and verify the response matches the expected version.\n\nFunction Description: The function `TestVersionReturnsCLIVersion` is a test function that verifies the version information returned by a gRPC service. It establishes an authenticated connection to a gRPC server, calls the Version RPC method, and checks that the returned version matches the expected value (\"master\"). The connection is properly closed after the test completes.\n\nInput: \n- `t *testing.T`: The testing context provided by Go's testing framework for reporting test failures and logging.\n- Implicit context from `withAuth(context.Background())`: An authenticated context for the gRPC call.\n\nOutput: \n- The function does not return any value but will fail the test if any of the following occur:\n  - The gRPC connection cannot be established\n  - The Version RPC call fails\n  - The returned version does not match the expected value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Version(ctx, &rpc.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"Version failed: %v\", err)\n\t}\n\n\texpected := rpc.VersionResponse{\n\t\tVersion: \"master\",\n\t}\n\n\tassert.Equal(t, expected.Version, resp.Version)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"testing\"\n\t\"google.golang.org/grpc\"\n\t\"github.com/stripe/stripe-cli/pkg/grpcserver\"\n)\n\nfunc TestVersionReturnsCLIVersion(t *testing.T) {\n\tconn, err := grpc.DialContext(context.Background(), \"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tt.Fatalf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := grpcserver.NewVersionServiceClient(conn)\n\tresp, err := client.Version(context.Background(), &grpcserver.VersionRequest{})\n\tif err != nil {\n\t\tt.Fatalf(\"failed to call Version: %v\", err)\n\t}\n\n\tif resp.Version != \"master\" {\n\t\tt.Errorf(\"expected version 'master', got '%s'\", resp.Version)\n\t}\n}"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a PubSub service, subscribes to a specific topic, and continuously receives messages from the subscribed topic until the stream ends or an error occurs.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 1234, creates a PubSub service client, and subscribes to a topic specified by the input string. It then enters a loop to receive messages from the subscribed topic, printing each message until the stream is closed or an error occurs. The connection is automatically closed when the function completes.\n\nInput: \n- topic string: The topic to subscribe to (e.g., \"golang:\")\n\nOutput: \n- None (messages are printed to stdout)\n- Errors: Any connection or stream errors will cause the function to terminate and log the error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"gobook.examples/ch4-04-grpc/grpc-pubsub/pubsubservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewPubsubServiceClient(conn)\n\tstream, err := client.Subscribe(context.Background(), &pb.String{Value: \"golang:\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfor {\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpubsub \"your.package.path.pubsub\"\n)\n\nfunc subscribeToTopic(topic string) {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pubsub.NewPubSubClient(conn)\n\tstream, err := client.Subscribe(context.Background(), &pubsub.SubscribeRequest{Topic: topic})\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to subscribe: %v\", err)\n\t}\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tfmt.Println(\"Stream closed\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"Error receiving message: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"Received: %s\\n\", msg.Payload)\n\t\ttime.Sleep(100 * time.Millisecond) // Simulate processing time\n\t}\n}"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Create a function that establishes a connection to a gRPC server for Google Pub/Sub emulator testing, creates a Pub/Sub client, and properly handles resource cleanup.\n\nFunction Description: The function demonstrates how to set up a testing environment for Google Pub/Sub using the pstest server (in-memory emulator). It creates a gRPC connection to the emulator server, initializes a Pub/Sub client with this connection, and ensures all resources are properly closed when done. This is typically used for local testing and development.\n\nInput: None (The function takes no parameters as it's a self-contained example)\n\nOutput: None (The function doesn't return anything as it's a demonstration, though it creates and manages a Pub/Sub client instance)",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsub/pstest\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n)\nfunc ExampleNewServer() {\n\tctx := context.Background()\n\tsrv := pstest.NewServer()\n\tdefer srv.Close()\n\tconn, err := grpc.Dial(srv.Addr, grpc.WithInsecure())\n\tif err != nil {\n\t}\n\tdefer conn.Close()\n\tclient, err := pubsub.NewClient(ctx, \"project\", option.WithGRPCConn(conn))\n\tif err != nil {\n\t}\n\tdefer client.Close()\n\t_ = client\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\tpubsub \"cloud.google.com/go/pubsub/apiv1\"\n)\n\nfunc setupPubSubEmulator() {\n\tctx := context.Background()\n\tconn, err := grpc.Dial(\"localhost:8085\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed to connect to emulator: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient, err := pubsub.NewPublisherClient(conn)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"failed to create client: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer client.Close()\n\n\tfmt.Println(\"Successfully connected to Pub/Sub emulator\")\n\ttime.Sleep(5 * time.Second) // Simulate some testing\n}"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Implement a gRPC client function in Go that connects to a gRPC server, performs unary and streaming RPCs, and handles communication with the server.\n\nFunction Description: The function `doClientWork` establishes a connection to a gRPC server, performs a unary RPC call (`Hello`), and then sets up bidirectional streaming (`Channel`). It sends messages periodically in one goroutine while receiving messages in the main goroutine.\n\nInput: None (The server address is hardcoded as \"localhost:1234\")\n\nOutput: None (The function prints received messages to stdout and logs errors to stderr)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(reply.GetValue())\n\n\tstream, err := client.Channel(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tif err := stream.Send(&String{Value: \"hi\"}); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}()\n\n\tfor {\n\t\tlog.Println(222)\n\n\t\treply, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(reply.GetValue())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nconst serverAddress = \"localhost:1234\"\n\ntype HelloRequest struct {\n\tName string\n}\n\ntype HelloResponse struct {\n\tMessage string\n}\n\ntype ChannelRequest struct {\n\tMessage string\n}\n\ntype ChannelResponse struct {\n\tMessage string\n}\n\nfunc doClientWork() {\n\tconn, err := grpc.Dial(serverAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewHelloServiceClient(conn)\n\n\t// Unary RPC call\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\treq := &HelloRequest{Name: \"World\"}\n\tresp, err := client.Hello(ctx, req)\n\tif err != nil {\n\t\tlog.Printf(\"Unary call failed: %v\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"Received from Hello: %s\\n\", resp.Message)\n\n\t// Streaming RPC\n\tstream, err := client.Channel(ctx)\n\tif err != nil {\n\t\tlog.Printf(\"Streaming call failed: %v\", err)\n\t\treturn\n\t}\n\n\tsendChan := make(chan string)\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg := <-sendChan:\n\t\t\t\tif err := stream.Send(&ChannelRequest{Message: msg}); err != nil {\n\t\t\t\t\tlog.Printf(\"Failed to send message: %v\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor i := 0; i < 5; i++ {\n\t\tsendChan <- fmt.Sprintf(\"Message %d\", i+1)\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\n\t// Receive messages\n\tgo func() {\n\t\tfor {\n\t\t\tresp, err := stream.Recv()\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Failed to receive message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Received from Channel: %s\\n\", resp.Message)\n\t\t}\n\t}()\n\n\tif err := stream.CloseSend(); err != nil {\n\t\tlog.Printf(\"Failed to close stream: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a function to test gRPC client functionality for user login using Go's gRPC package. The function should establish a connection to a gRPC server, send multiple login requests with metadata, and handle responses.\n\nFunction Description: The function tests the gRPC client's ability to communicate with a user service. It establishes an insecure connection to the specified server address, creates a client instance, and sends 20 consecutive login requests with generated UUID metadata. Each request uses the same account credentials and prints the received authentication token.\n\nInput: None (The function is a test function with hardcoded values)\n\nOutput: None (The function prints tokens to stdout and may return errors through the testing framework)\n\nNote: The function uses package-level variables and imports from external packages as shown in the reference code. The connection is automatically closed when the function completes.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v11/utils\"\n\tuuid \"github.com/satori/go.uuid\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nvar (\n\tuserServiceAddr = \"localhost:50051\"\n\tusername        = \"testuser\"\n\tpassword        = \"testpass\"\n)\n\nfunc testGRPCUserLogin() error {\n\tconn, err := grpc.Dial(userServiceAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewUserServiceClient(conn)\n\n\tfor i := 0; i < 20; i++ {\n\t\tmd := metadata.New(map[string]string{\n\t\t\t\"request-id\": fmt.Sprintf(\"uuid-%d\", time.Now().UnixNano()),\n\t\t})\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\n\t\treq := &LoginRequest{\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t}\n\n\t\tresp, err := client.Login(ctx, req)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"login failed: %v\", err)\n\t\t}\n\n\t\tfmt.Printf(\"Received token: %s\\n\", resp.Token)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 238,
    "Instruction": "Task Description: Create a gRPC client function in Go that connects to a gRPC server, sends a login request, and retrieves an authentication token.\n\nFunction Description: The function establishes a connection to a gRPC server at a specified address, creates a gRPC client for the User service, sends a login request with account credentials, and returns the authentication token received from the server. The function includes error handling and connection cleanup.\n\nInput:\n- serviceAddress (string): The address of the gRPC server in format \"host:port\"\n- account (string): The user account name for login\n- password (string): The user password for login\n\nOutput:\n- token (string): The authentication token returned by the server\n- error: Any error that occurs during the connection or RPC call\n\nNote: The function generates a unique request UUID for tracking purposes and uses insecure connection (for testing purposes only). In production, you should use proper TLS credentials.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v6/user_agent/pb\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v6/user_agent/src\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(src.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\tAccount:  \"hw\",\n\t\tPassword: \"123\",\n\t})\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tt.Log(res.Token)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"your_project/proto\"\n)\n\nfunc login(serviceAddress, account, password string) (string, error) {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := proto.NewUserServiceClient(conn)\n\tctx := context.Background()\n\treq := &proto.LoginRequest{\n\t\tAccount: account,\n\t\tPassword: password,\n\t\tUUID: generateUUID(),\n\t}\n\tresp, err := client.Login(ctx, req)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"login failed: %v\", err)\n\t}\n\treturn resp.Token, nil\n}\n\nfunc generateUUID() string {\n\t// Placeholder for UUID generation logic\n\treturn \"unique-uuid\"\n}"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a HelloService server, sends a greeting, and handles the response.\n\nFunction Description: The function connects to a gRPC server running on localhost:1234, creates a client for the HelloService, sends a \"hello\" message, and processes the server's reply. It handles connection errors and RPC call errors appropriately.\n\nInput: None (The server address and message are hardcoded in this example)\n\nOutput: None (The function logs errors and doesn't return any value, though in a real implementation you might want to return the reply or error)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\n\ths \"ch4.4-1/helloservice\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tclient := hs.NewHelloServiceClient(conn)\n\treply, err := client.Hello(context.Background(), &hs.String{Value: \"hello\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"path/to/your/proto/package\"\n)\n\nfunc greetHelloService() {\n\tconn, err := grpc.Dial(\"localhost:1234\", grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(5*time.Second))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewHelloServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\treq := &pb.GreetingRequest{\n\t\tMessage: \"hello\",\n\t}\n\n\tresp, err := client.SayHello(ctx, req)\n\tif err != nil {\n\t\tlog.Fatalf(\"RPC call failed: %v\", err)\n\t}\n\n\tfmt.Printf(\"Server replied: %s\\n\", resp.Response)\n}"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a function that establishes a gRPC connection to a server, creates a client, and makes a request to retrieve fixture data for a specific event.\n\nFunction Description: The function `TestFixturesReturnsData` tests the gRPC client's ability to connect to a server and retrieve fixture data for a specified event. It establishes a connection, creates a client, sends a request, and handles potential errors. The connection is automatically closed when the function completes.\n\nInput: \n- `t *testing.T`: The testing context for reporting failures and logging.\n- Implicit context with authentication (via `withAuth`).\n\nOutput: \n- None explicitly returned, but the function will fail the test if any step (connection, client creation, or request) encounters an error. The response from the gRPC server is captured in `resp` but not returned.",
    "Canonical_solution": "import (\n\t\"context\"\n\n\t\"github.com/stripe/stripe-cli/rpc\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\nfunc TestFixturesReturnsData(t *testing.T) {\n\tctx := withAuth(context.Background())\n\n\tconn, err := grpc.DialContext(ctx, \"bufnet\", grpc.WithContextDialer(bufDialer), grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to dial bufnet: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := rpc.NewStripeCLIClient(conn)\n\n\tresp, err := client.Fixture(ctx, &rpc.FixtureRequest{Event: \"customer.created\"})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestFixturesReturnsData(t *testing.T) {\n\tconn, err := grpc.DialContext(context.Background(), \"localhost:50051\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tt.Fatalf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewFixtureServiceClient(conn)\n\treq := &FixtureRequest{EventId: \"test-event-id\"}\n\tresp, err := client.GetFixture(context.Background(), req)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to get fixture: %v\", err)\n}"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a metrics server, retrieves metrics, and prints them. The function should handle connection setup and teardown, and provide options for controlling output format.\n\nFunction Description: The function connects to a gRPC metrics server using the provided address, creates a metrics service client, and prints the retrieved metrics. It supports a flag to determine whether to print all metrics or just the total. The connection is automatically closed when the function completes.\n\nInput:\n- metricsServerAddress (string): The address of the gRPC metrics server to connect to\n- totalOnly (bool): Flag indicating whether to print only the total metrics or all metrics\n\nOutput: None (prints metrics to stdout directly)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/grpclog\"\n\tmetricspb \"google.golang.org/grpc/interop/stress/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *metricsServerAddress == \"\" {\n\t\tlogger.Fatal(\"-metrics_server_address is unset\")\n\t}\n\n\tconn, err := grpc.Dial(*metricsServerAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Fatalf(\"cannot connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tc := metricspb.NewMetricsServiceClient(conn)\n\tprintMetrics(c, *totalOnly)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nconst defaultTimeout = 5 * time.Second\n\nfunc getMetrics(metricsServerAddress string, totalOnly bool) {\n\tconn, err := grpc.DialContext(\n\t\tcontext.Background(),\n\t\tmetricsServerAddress,\n\t\tgrpc.WithBlock(),\n\t\tgrpc.WithTimeout(defaultTimeout),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to metrics server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := NewMetricsServiceClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), defaultTimeout)\n\tdefer cancel()\n\n\tresp, err := client.GetMetrics(ctx, &GetMetricsRequest{})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to retrieve metrics: %v\", err)\n\t}\n\n\tif totalOnly {\n\t\tfor _, metric := range resp.Metrics {\n\t\t\tif metric.Type == \"total\" {\n\t\t\t\tfmt.Printf(\"Metric: %s, Value: %d\\n\", metric.Name, metric.Value)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor _, metric := range resp.Metrics {\n\t\t\tfmt.Printf(\"Metric: %s, Type: %s, Value: %d\\n\", metric.Name, metric.Type, metric.Value)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 242,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends a greeting request, and processes the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client instance for the Greeter service, sends a HelloRequest with a name parameter, and returns the server's greeting response. It handles connection errors and request failures appropriately.\n\nInput: \n- address [string]: The network address of the gRPC server (e.g., \"localhost:50051\")\n- name [string]: The name to include in the greeting request (optional, defaults to \"world\")\n\nOutput:\n- [string]: The greeting message received from the server\n- [error]: Any error that occurred during connection or request processing",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"os\"\n\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n)\nfunc main() {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\tname := defaultName\n\tif len(os.Args) > 1 {\n\t\tname = os.Args[1]\n\t}\n\tr, err := c.SayHello(context.Background(), &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.Message)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc greet(address, name string) (string, error) {\n\tconn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(5*time.Second))\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\tresp, err := client.SayHello(ctx, &pb.HelloRequest{Name: name})\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to greet: %v\", err)\n\t}\n\n\treturn resp.GetMessage(), nil\n}"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC client connection to a server, sends multiple requests, and processes the responses using the GoFrame framework.\n\nFunction Description: The function connects to a gRPC server using service discovery, creates a client stub, and makes repeated calls to a SayHello RPC method. It handles connection errors and response processing, with built-in logging and graceful connection closure.\n\nInput: None (uses package-level constants and context)\n\nOutput: None (logs results to console via GoFrame's logging system)\n\nNote: The function includes an internal loop that makes 10 RPC calls with a 1-second delay between calls. Connection is automatically closed when function completes.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/gsvc\"\n\t\"github.com/gogf/gf/v2/os/gctx\"\n\n\t\"github.com/gogf/gf/contrib/rpc/grpcx/v2\"\n\n\tpb \"github.com/gogf/gf/example/rpc/grpcx/rawgrpc/helloworld\"\n)\nfunc main() {\n\tvar (\n\t\tctx     = gctx.GetInitCtx()\n\t\tservice = gsvc.NewServiceWithName(`hello`)\n\t)\n\tconn, err := grpc.Dial(\n\t\tfmt.Sprintf(`%s://%s`, gsvc.Schema, service.GetKey()),\n\t\tgrpcx.Balancer.WithRandom(),\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t)\n\tif err != nil {\n\t\tg.Log().Fatalf(ctx, \"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := pb.NewGreeterClient(conn)\n\tfor i := 0; i < 10; i++ {\n\t\tres, err := client.SayHello(ctx, &pb.HelloRequest{Name: `GoFrame`})\n\t\tif err != nil {\n\t\t\tg.Log().Fatalf(ctx, \"could not greet: %+v\", err)\n\t\t}\n\t\tg.Log().Printf(ctx, \"Greeting: %s\", res.Message)\n\t\ttime.Sleep(time.Second)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/gogf/gf/frame/g\"\n\t\"google.golang.org/grpc\"\n)\n\nconst (\n\tGRPC_SERVER_ADDR = \"localhost:50051\"\n)\n\nfunc grpcClient() {\n\tconn, err := grpc.Dial(GRPC_SERVER_ADDR, grpc.WithInsecure())\n\tif err != nil {\n\t\tg.Log().Error(\"Failed to connect to gRPC server:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tclient := NewSayHelloClient(conn)\n\n\tfor i := 0; i < 10; i++ {\n\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\t\tdefer cancel()\n\n\t\treq := &SayHelloRequest{\n\t\t\tName: fmt.Sprintf(\"User-%d\", i),\n\t\t}\n\n\t\tresp, err := client.SayHello(ctx, req)\n\t\tif err != nil {\n\t\t\tg.Log().Error(\"gRPC call failed:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tg.Log().Info(\"Received response:\", resp.Message)\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, creates a new gRPC server instance, registers a service implementation, and starts serving incoming requests.\n\nInput: \n- port: string - The network port on which the server should listen (e.g., \":50051\")\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\"\n\t\"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc\"\n\tpb \"github.com/coreos/etcd/Godeps/_workspace/src/google.golang.org/grpc/examples/helloworld/helloworld\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\ts.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct{}\n\nfunc (s *server) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {\n\treturn &HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\tport := \":50051\"\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tRegisterHelloServiceServer(s, &server{})\n\tfmt.Printf(\"Server is listening on %v\\n\", lis.Addr())\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including receiving metrics and processing them through a handler function.\n\nStruct Description: The Server struct represents a gRPC server that listens for incoming metric data and processes it using a provided handler function. It manages server lifecycle and handles gRPC communication.\n\nFields:\n- Server: *grpc.Server - The underlying gRPC server instance\n- lis: net.Listener - The network listener for the server\n- handler: func([]*metricpb.Metric) - The function that processes received metrics\n- startMtx: sync.Mutex - Mutex to ensure thread-safe server startup\n\nMethods:\n- NewServer: (handler func([]*metricpb.Metric)) -> *Server - Creates a new Server instance with the given metric handler and initializes the gRPC server\n- Start: (t testing.TB) -> () - Starts the gRPC server on a random available port and begins listening for requests\n- SendMetrics: (ctx context.Context, mlist *forwardrpc.MetricList) -> (*empty.Empty, error) - Handles unary RPC calls for metric submission\n- SendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles streaming RPC calls for metric submission",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\t\"sync\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/samplers/metricpb\"\n)\n\ntype Server struct {\n\t*grpc.Server\n\tlis      net.Listener\n\thandler  func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\tres := &Server{\n\t\tServer:  grpc.NewServer(),\n\t\thandler: handler,\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.Server, res)\n\treturn res\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tvar err error\n\ts.lis, err = net.Listen(\"tcp\", \"127.0.0.1:\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to create a TCP connection for a test GRPC \"+\n\t\t\t\"server: %v\", err)\n\t}\n\n\tgo func() {\n\t\tif err := s.Serve(s.lis); err != nil && err != grpc.ErrServerStopped {\n\t\t\tt.Logf(\"failed to stop the test forwarding gRPC server: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\ts.handler(mlist.Metrics)\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tmetrics := []*metricpb.Metric{}\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmetrics = append(metrics, metric)\n\t}\n\t_, err := s.SendMetrics(context.Background(), &forwardrpc.MetricList{\n\t\tMetrics: metrics,\n\t})\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype Server struct {\n\tServer   *grpc.Server\n\tlis      net.Listener\n\thandler  func([]*metricpb.Metric)\n\tstartMtx sync.Mutex\n}\n\nfunc NewServer(handler func([]*metricpb.Metric)) *Server {\n\treturn &Server{\n\t\thandler: handler,\n\t}\n}\n\nfunc (s *Server) Start(t testing.TB) {\n\ts.startMtx.Lock()\n\tdefer s.startMtx.Unlock()\n\n\tif s.Server != nil {\n\t\tt.Fatal(\"Server already started\")\n\t}\n\n\trand.Seed(time.Now().UnixNano())\n\taddr := fmt.Sprintf(\":%d\", rand.Intn(10000)+10000)\n\tvar err error\n\ts.lis, err = net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\topts := []grpc.ServerOption{}\n\ts.Server = grpc.NewServer(opts...)\n\tforwardrpc.RegisterForwardServer(s.Server, s)\n\treflection.Register(s.Server)\n\n\tgo func() {\n\t\tif err := s.Server.Serve(s.lis); err != nil {\n\t\t\tt.Logf(\"gRPC server exited with error: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) SendMetrics(ctx context.Context, mlist *forwardrpc.MetricList) (*empty.Empty, error) {\n\tif s.handler != nil {\n\t\tmetrics := make([]*metricpb.Metric, len(mlist.Metrics))\n\t\tfor i := range mlist.Metrics {\n\t\t\tmetrics[i] = mlist.Metrics[i]\n\t\t}\n\t\ts.handler(metrics)\n\t}\n\treturn &empty.Empty{}, nil\n}\n\nfunc (s *Server) SendMetricsV2(server forwardrpc.Forward_SendMetricsV2Server) error {\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif s.handler != nil {\n\t\t\tmetrics := []*metricpb.Metric{metric}\n\t\t\ts.handler(metrics)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both physical data source operations and execution of data processing tasks, using Unix domain sockets for inter-process communication.\n\nStruct Description: The implementation consists of two main structs: physicalServer handles the materialization of data sources, while executionServer manages the execution of data processing tasks.\n\nFields:\n\nphysicalServer:\n- database: physical.Database - The underlying database implementation\n- socketDir: string - Directory where Unix domain sockets will be created\n- wg: *sync.WaitGroup - WaitGroup for managing server goroutines\n\nexecutionServer:\n- node: execution.Node - The execution node to process data\n\nMethods:\n\nphysicalServer:\n- Materialize(context.Context, *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) - Materializes a data source and starts a gRPC server for execution\n\nexecutionServer:\n- Run(*plugins.RunRequest, plugins.ExecutionDatasource_RunServer) error - Executes the data processing task and streams results back to the client",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cube2222/octosql/execution\"\n\t\"github.com/cube2222/octosql/physical\"\n\t\"github.com/cube2222/octosql/plugins/internal/plugins\"\n)\n\ntype physicalServer struct {\n\tplugins.UnimplementedDatasourceServer\n\tdatabase  physical.Database\n\tsocketDir string\n\twg        *sync.WaitGroup\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, request *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\timpl, _, err := s.database.GetTable(ctx, request.TableContext.TableName, request.TableContext.Options)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't get table: %w\", err)\n\t}\n\n\tnode, err := impl.Materialize(\n\t\tctx,\n\t\tphysical.Environment{\n\t\t\tVariableContext: request.VariableContext.ToNativePhysicalVariableContext(),\n\t\t},\n\t\trequest.Schema.ToNativeSchema(),\n\t\tpushedDownPredicates,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"couldn't materialize datasource: %w\", err)\n\t}\n\n\tsocketName := ulid.MustNew(ulid.Now(), rand.Reader).String() + \".sock\"\n\tsocketPath := filepath.Join(s.socketDir, socketName)\n\tlog.Printf(\"Listening execution on %s\", socketPath)\n\tlis, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\texecServer := &executionServer{\n\t\tnode: node,\n\t}\n\ts.wg.Add(1)\n\n\tgrpcServer := grpc.NewServer()\n\tplugins.RegisterExecutionDatasourceServer(grpcServer, execServer)\n\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\ntype executionServer struct {\n\tplugins.UnimplementedExecutionDatasourceServer\n\tnode execution.Node\n}\n\nfunc (e *executionServer) Run(request *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\tif err := e.node.Run(\n\t\texecution.ExecutionContext{\n\t\t\tContext:         stream.Context(),\n\t\t\tVariableContext: request.VariableContext.ToNativeExecutionVariableContext(),\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, record execution.Record) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tRecord: plugins.NativeRecordToProto(record),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send record to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t\tfunc(ctx execution.ProduceContext, msg execution.MetadataMessage) error {\n\t\t\tif err := stream.Send(&plugins.RunResponseMessage{\n\t\t\t\tMetadata: plugins.NativeMetadataMessageToProto(msg),\n\t\t\t}); err != nil {\n\t\t\t\treturn fmt.Errorf(\"couldn't send metadata message to stream: %w\", err)\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t); err != nil {\n\t\treturn fmt.Errorf(\"couldn't run node: %w\", err)\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/reflection\"\n\n\t\"github.com/grpc-ecosystem/go-grpc-middleware\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/logging/zap\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/recovery\"\n\t\"go.uber.org/zap\"\n)\n\ntype physicalServer struct {\n\tdb          *physical.Database\n\tsocketDir   string\n\twg          *sync.WaitGroup\n\tgrpcServer  *grpc.Server\n}\n\ntype executionServer struct {\n\tnode *execution.Node\n}\n\ntype Server struct {\n\tphysicalServer\n\texecutionServer\n}\n\nfunc (s *physicalServer) Materialize(ctx context.Context, req *plugins.MaterializeRequest) (*plugins.MaterializeResponse, error) {\n\tsocketPath := fmt.Sprintf(\"%s/%s.sock\", s.socketDir, req.Name)\n\tlistener, err := net.Listen(\"unix\", socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer listener.Close()\n\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tgrpcServer := grpc.NewServer(\n\t\t\tgrpc.StreamInterceptor(grpc_middleware.ChainStreamServer(\n\t\t\t\tzap.StreamLogger(zap.L()),\n\t\t\t\trecovery.StreamServerInterceptor(),\n\t\t\t)),\n\t\t)\n\t\tplugins.RegisterExecutionServer(grpcServer, &executionServer{node: s.node})\n\t\treflection.Register(grpcServer)\n\t\tif err := grpcServer.Serve(listener); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn &plugins.MaterializeResponse{SocketPath: socketPath}, nil\n}\n\nfunc (s *executionServer) Run(req *plugins.RunRequest, stream plugins.ExecutionDatasource_RunServer) error {\n\t// Execute the data processing task and stream results\n\tfor _, result := range s.node.Execute(req.Data) {\n\t\tif err := stream.Send(&plugins.RunResponse{Result: result}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc main() {\n\tlogger, _ := zap.NewDevelopment()\n\tdefer logger.Sync()\n\n\tdb := physical.NewDatabase()\n\tnode := execution.NewNode()\n\n\tserver := &Server{\n\t\tphysicalServer: physicalServer{\n\t\t\tdb:        db,\n\t\t\tsocketDir: \"/tmp\",\n\t\t\twg:        &sync.WaitGroup{},\n\t\t},\n\t\texecutionServer: executionServer{\n\t\t\tnode: node,\n\t\t},\n\t}\n\n\tgrpcServer := grpc.NewServer(\n\t\tgrpc.StreamInterceptor(grpc_middleware.ChainStreamServer(\n\t\t\tzap.StreamLogger(logger),\n\t\t\trecovery.StreamServerInterceptor(),\n\t\t)),\n\t)\n\tplugins.RegisterPhysicalServer(grpcServer, server)\n\treflection.Register(grpcServer)\n\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a gRPC server for remote actor communication in a distributed actor system using Proto.Actor and Go's gRPC framework.\n\nStruct Description: The Remote struct manages the gRPC server and associated components for remote actor communication in a Proto.Actor system.\n\nFields:\n\nactorSystem: *actor.ActorSystem - Reference to the actor system this remote belongs to\ns: *grpc.Server - The gRPC server instance\nedpReader: *endpointReader - Handles incoming gRPC connections\nedpManager: *endpointManager - Manages active endpoints\nconfig: *Config - Configuration for the remote server\nkinds: map[string]*actor.Props - Map of actor kinds to their properties\nactivatorPid: *actor.PID - Process ID for the activator actor\nblocklist: *BlockList - List of blocked endpoints\n\nMethods:\n\nNewRemote: (actorSystem *actor.ActorSystem, config *Config) -> *Remote - Constructor that initializes a new Remote instance with given actor system and configuration\nStart: () -> () - Starts the gRPC server and initializes all remote communication components\nShutdown: (graceful bool) -> () - Stops the gRPC server, either gracefully or forcefully",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log/slog\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/asynkron/protoactor-go/extensions\"\n\t\"github.com/asynkron/protoactor-go/actor\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/grpclog\"\n)\n\ntype Remote struct {\n\tactorSystem  *actor.ActorSystem\n\ts            *grpc.Server\n\tedpReader    *endpointReader\n\tedpManager   *endpointManager\n\tconfig       *Config\n\tkinds        map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist    *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\tr := &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n\tfor k, v := range config.Kinds {\n\t\tr.kinds[k] = v\n\t}\n\n\tactorSystem.Extensions.Register(r)\n\n\treturn r\n}\n\nfunc (r *Remote) Start() {\n\tgrpclog.SetLoggerV2(grpclog.NewLoggerV2(ioutil.Discard, ioutil.Discard, ioutil.Discard))\n\tlis, err := net.Listen(\"tcp\", r.config.Address())\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to listen: %v\", err))\n\t}\n\n\tvar address string\n\tif r.config.AdvertisedHost != \"\" {\n\t\taddress = r.config.AdvertisedHost\n\t} else {\n\t\taddress = lis.Addr().String()\n\t}\n\n\tr.actorSystem.ProcessRegistry.RegisterAddressResolver(r.remoteHandler)\n\tr.actorSystem.ProcessRegistry.Address = address\n\tr.Logger().Info(\"Starting remote with address\", slog.String(\"address\", address))\n\n\tr.edpManager = newEndpointManager(r)\n\tr.edpManager.start()\n\n\tr.s = grpc.NewServer(r.config.ServerOptions...)\n\tr.edpReader = newEndpointReader(r)\n\tRegisterRemotingServer(r.s, r.edpReader)\n\tr.Logger().Info(\"Starting Proto.Actor server\", slog.String(\"address\", address))\n\tgo r.s.Serve(lis)\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.edpReader.suspend(true)\n\t\tr.edpManager.stop()\n\n\t\tc := make(chan bool, 1)\n\t\tgo func() {\n\t\t\tr.s.GracefulStop()\n\t\t\tc <- true\n\t\t}()\n\n\t\tselect {\n\t\tcase <-c:\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\")\n\t\tcase <-time.After(time.Second * 10):\n\t\t\tr.s.Stop()\n\t\t\tr.Logger().Info(\"Stopped Proto.Actor server\", slog.String(\"err\", \"timeout\"))\n\t\t}\n\t} else {\n\t\tr.s.Stop()\n\t\tr.Logger().Info(\"Killed Proto.Actor server\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/protos-actor/protos-actor\"\n\t\"github.com/protos-actor/protos-actor/actor\"\n\t\"github.com/protos-actor/protos-actor/endpoint\"\n)\n\ntype Config struct {\n\tPort int\n}\n\ntype BlockList struct {\n\tBlockedEndpoints map[string]bool\n\tmu               sync.RWMutex\n}\n\nfunc NewBlockList() *BlockList {\n\treturn &BlockList{\n\t\tBlockedEndpoints: make(map[string]bool),\n\t}\n}\n\nfunc (bl *BlockList) AddEndpoint(endpoint string) {\n\tbl.mu.Lock()\n\tdefer bl.mu.Unlock()\n\tbl.BlockedEndpoints[endpoint] = true\n}\n\nfunc (bl *BlockList) IsBlocked(endpoint string) bool {\n\tbl.mu.RLock()\n\tdefer bl.mu.RUnlock()\n\treturn bl.BlockedEndpoints[endpoint]\n}\n\ntype endpointReader struct {\n\t// Implement endpoint reading logic here\n}\n\nfunc (er *endpointReader) ReadEndpoint() string {\n\t// Placeholder for actual endpoint reading logic\n\treturn \"example-endpoint\"\n}\n\ntype endpointManager struct {\n\tEndpoints map[string]*endpoint.Endpoint\n\tmu        sync.RWMutex\n}\n\nfunc NewEndpointManager() *endpointManager {\n\treturn &endpointManager{\n\t\tEndpoints: make(map[string]*endpoint.Endpoint),\n\t}\n}\n\nfunc (em *endpointManager) RegisterEndpoint(endpoint string, ep *endpoint.Endpoint) {\n\tem.mu.Lock()\n\tdefer em.mu.Unlock()\n\tem.Endpoints[endpoint] = ep\n}\n\nfunc (em *endpointManager) GetEndpoint(endpoint string) (*endpoint.Endpoint, bool) {\n\tem.mu.RLock()\n\tdefer em.mu.RUnlock()\n\tep, exists := em.Endpoints[endpoint]\n\treturn ep, exists\n}\n\ntype Remote struct {\n\tactorSystem *actor.ActorSystem\n\ts           *grpc.Server\n\tedpReader   *endpointReader\n\tedpManager  *endpointManager\n\tconfig      *Config\n\tkinds       map[string]*actor.Props\n\tactivatorPid *actor.PID\n\tblocklist   *BlockList\n}\n\nfunc NewRemote(actorSystem *actor.ActorSystem, config *Config) *Remote {\n\treturn &Remote{\n\t\tactorSystem: actorSystem,\n\t\tconfig:      config,\n\t\tedpReader:   &endpointReader{},\n\t\tedpManager:  NewEndpointManager(),\n\t\tkinds:       make(map[string]*actor.Props),\n\t\tblocklist:   NewBlockList(),\n\t}\n}\n\nfunc (r *Remote) Start() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", r.config.Port))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tr.s = grpc.NewServer()\n\tgo func() {\n\t\tif err := r.s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}\n\nfunc (r *Remote) Shutdown(graceful bool) {\n\tif graceful {\n\t\tr.s.GracefulStop()\n\t} else {\n\t\tr.s.Stop()\n\t}\n}"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Create a gRPC server in Go that collects and processes metrics data using OpenTelemetry protocol, with capabilities for handling incoming requests, storing metrics, and managing server lifecycle.\n\nStruct Description: GRPCCollector is a gRPC server implementation that handles metrics collection following the OpenTelemetry protocol. It manages incoming requests, stores metrics data, tracks headers, and provides server control functionality.\n\nFields:\n\nField1: collpb.UnimplementedMetricsServiceServer - Embedded type to satisfy gRPC interface requirements\nField2: headersMu sync.Mutex - Mutex for thread-safe access to headers\nField3: headers metadata.MD - Stores incoming request headers\nField4: storage *Storage - Stores collected metrics data\nField5: resultCh <-chan ExportResult - Channel for receiving export results\nField6: listener net.Listener - Network listener for the server\nField7: srv *grpc.Server - gRPC server instance\n\nMethods:\n\nMethod1: NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) - Creates and starts a new gRPC collector instance\nMethod2: Shutdown() - Stops the gRPC server gracefully\nMethod3: Addr() net.Addr - Returns the network address the server is listening on\nMethod4: Collect() *Storage - Returns the storage containing collected metrics\nMethod5: Headers() map[string][]string - Returns collected headers in a thread-safe manner\nMethod6: Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) - Handles incoming metrics export requests and processes them",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/proto/otlp/collector/metrics/v1\"\n)\n\ntype GRPCCollector struct {\n\tcollpb.UnimplementedMetricsServiceServer\n\n\theadersMu sync.Mutex\n\theaders   metadata.MD\n\tstorage   *Storage\n\n\tresultCh <-chan ExportResult\n\tlistener net.Listener\n\tsrv      *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tif endpoint == \"\" {\n\t\tendpoint = \"localhost:0\"\n\t}\n\n\tc := &GRPCCollector{\n\t\tstorage:  NewStorage(),\n\t\tresultCh: resultCh,\n\t}\n\n\tvar err error\n\tc.listener, err = net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc.srv = grpc.NewServer()\n\tcollpb.RegisterMetricsServiceServer(c.srv, c)\n\tgo func() { _ = c.srv.Serve(c.listener) }()\n\n\treturn c, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() { c.srv.Stop() }\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\treturn metadata.Join(c.headers)\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tc.storage.Add(req)\n\n\tif h, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tc.headersMu.Lock()\n\t\tc.headers = metadata.Join(c.headers, h)\n\t\tc.headersMu.Unlock()\n\t}\n\n\tif c.resultCh != nil {\n\t\tr := <-c.resultCh\n\t\tif r.Response == nil {\n\t\t\treturn &collpb.ExportMetricsServiceResponse{}, r.Err\n\t\t}\n\t\treturn r.Response, r.Err\n\t}\n\treturn &collpb.ExportMetricsServiceResponse{}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package collpb\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype GRPCCollector struct {\n\tUnimplementedMetricsServiceServer\n\theadersMu  sync.Mutex\n\theaders    metadata.MD\n\tstorage    *Storage\n\tresultCh   <-chan ExportResult\n\tlistener   net.Listener\n\tsrv        *grpc.Server\n}\n\nfunc NewGRPCCollector(endpoint string, resultCh <-chan ExportResult) (*GRPCCollector, error) {\n\tlis, err := net.Listen(\"tcp\", endpoint)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to listen: %v\", err)\n\t}\n\topts := []grpc.ServerOption{\n\t\tgrpc.Creds(insecure.NewCredentials()),\n\t}\n\tsrv := grpc.NewServer(opts...)\n\tsvc := &GRPCCollector{\n\t\theaders:    metadata.MD{},\n\t\tstorage:    &Storage{},\n\t\tresultCh:   resultCh,\n\t\tlistener:   lis,\n\t\tsrv:        srv,\n\t}\n\tcollpb.RegisterMetricsServiceServer(srv, svc)\n\tgo func() {\n\t\tif err := srv.Serve(lis); err != nil {\n\t\t\tfmt.Printf(\"gRPC server failed: %v\\n\", err)\n\t\t}\n\t}()\n\treturn svc, nil\n}\n\nfunc (c *GRPCCollector) Shutdown() {\n\tc.srv.Stop()\n\tc.listener.Close()\n}\n\nfunc (c *GRPCCollector) Addr() net.Addr {\n\treturn c.listener.Addr()\n}\n\nfunc (c *GRPCCollector) Collect() *Storage {\n\treturn c.storage\n}\n\nfunc (c *GRPCCollector) Headers() map[string][]string {\n\tc.headersMu.Lock()\n\tdefer c.headersMu.Unlock()\n\theaders := make(map[string][]string)\n\tfor k, v := range c.headers {\n\t\theaders[k] = v\n\t}\n\treturn headers\n}\n\nfunc (c *GRPCCollector) Export(ctx context.Context, req *collpb.ExportMetricsServiceRequest) (*collpb.ExportMetricsServiceResponse, error) {\n\tmd, _ := metadata.FromIncomingContext(ctx)\n\tc.headersMu.Lock()\n\tc.headers = md\n\tc.headersMu.Unlock()\n\n\tfor _, resource := range req.GetResourceSpans() {\n\t\tfor _, scope := range resource.ScopeSpans {\n\t\t\tfor _, span := range scope.Spans {\n\t\t\t\tc.storage.AddSpan(span)\n\t\t\t}\n\t\t}\n\t}\n\n\tselect {\n\tcase res := <-c.resultCh:\n\t\tif res.Err != nil {\n\t\t\treturn &collpb.ExportMetricsServiceResponse{Code: 1, Message: res.Err.Error()}, nil\n\t\t}\n\tdefault:\n\t\treturn &collpb.ExportMetricsServiceResponse{Code: 0, Message: \"Success\"}, nil\n\t}\n\n\treturn &collpb.ExportMetricsServiceResponse{Code: 0, Message: \"Success\"}, nil\n}"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, registers service implementations, and starts serving on a specified port with optional TLS credentials.\n\nFunction Description: The main function initializes and starts a gRPC server that hosts two services: a custom SpannerExecutorProxy service and a standard health check service. It validates required configuration parameters, sets up the network listener, creates the gRPC server instance, registers services, and begins serving requests.\n\nInput:\n- proxyPort (string): The port number on which the gRPC server should listen\n- spannerPort (string): The port number for Spanner service (validation only)\n- cert (string): Path to certificate file for TLS (validation only)\n- Additional client options are obtained internally through getClientOptionsForSysTests()\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Logs server startup information or errors to stdout\n\nNote: The function doesn't explicitly return values but may terminate the program with log.Fatal or log.Fatalf in case of errors during setup. Successful execution results in a continuously running gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\n\t\"cloud.google.com/go/spanner/executor/apiv1/executorpb\"\n\t\"cloud.google.com/go/spanner/test/cloudexecutor/executor\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\tif *proxyPort == \"\" {\n\t\tlog.Fatal(\"Proxy port need to be assigned in order to start worker proxy.\")\n\t}\n\tif *spannerPort == \"\" {\n\t\tlog.Fatal(\"Spanner proxyPort need to be assigned in order to start worker proxy.\")\n\t}\n\tif *cert == \"\" {\n\t\tlog.Fatalf(\"Certificate need to be assigned in order to start worker proxy.\")\n\t}\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%s\", *proxyPort))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tgrpcServer := grpc.NewServer()\n\n\tclientOptions := getClientOptionsForSysTests()\n\tcloudProxyServer, err := executor.NewCloudProxyServer(context.Background(), clientOptions)\n\tif err != nil {\n\t\tlog.Fatalf(\"Creating Cloud Proxy Server failed: %v\", err)\n\t}\n\texecutorpb.RegisterSpannerExecutorProxyServer(grpcServer, cloudProxyServer)\n\n\thealthServer := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(grpcServer, healthServer)\n\n\tlog.Printf(\"Server started on proxyPort:%s\\n\", *proxyPort)\n\terr = grpcServer.Serve(lis)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to start server on proxyPort: %s\\n\", *proxyPort)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/reflection\"\n\n\t\"github.com/googleapis/google-cloud-go-spanner\"\n\t\"github.com/googleapis/google-cloud-go-spanner/spannerpb\"\n\t\"google.golang.org/genproto/googleapis/api/health/v1\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\ntype SpannerExecutorProxyServer struct {\n\tspannerClient *spanner.Client\n}\n\nfunc (s *SpannerExecutorProxyServer) Execute(ctx context.Context, req *spannerpb.ExecuteSqlRequest) (*spannerpb.ResultSet, error) {\n\treturn s.spannerClient.ExecuteSQL(ctx, req)\n}\n\nfunc main() {\n\tproxyPort := flag.String(\"proxy-port\", \"50051\", \"The port number on which the gRPC server should listen\")\n\tspannerPort := flag.String(\"spanner-port\", \"9010\", \"The port number for Spanner service\")\n\tcert := flag.String(\"cert\", \"\", \"Path to certificate file for TLS\")\n\tflag.Parse()\n\n\tif *proxyPort == \"\" {\n\t\tlog.Fatal(\"proxy-port is required\")\n\t}\n\tif *spannerPort == \"\" {\n\t\tlog.Fatal(\"spanner-port is required\")\n\t}\n\tif *cert == \"\" {\n\t\tlog.Fatal(\"cert is required\")\n\t}\n\n\t// Create Spanner client\n\tspannerClient, err := spanner.NewClient(context.Background(), fmt.Sprintf(\"localhost:%s\", *spannerPort))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create Spanner client: %v\", err)\n\t}\n\n\t// Setup TLS credentials\n\tcreds, err := credentials.NewServerTLSFromFile(*cert, \"\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load TLS credentials: %v\", err)\n\t}\n\n\t// Create listener\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%s\", *proxyPort))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen on port %s: %v\", *proxyPort, err)\n\t}\n\n\t// Create gRPC server\n\tserver := grpc.NewServer(grpc.Creds(creds))\n\n\t// Register services\n\tspannerServer := &SpannerExecutorProxyServer{spannerClient: spannerClient}\n\tspannerpb.RegisterSpannerAdminServer(server, spannerServer)\n\n\thealthServer := health.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(server, healthServer)\n\treflection.Register(server)\n\n\t// Start serving\n\tlog.Printf(\"Starting gRPC server on port %s with TLS\", *proxyPort)\n\tif err := server.Serve(listener); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and handles gRPC communications.\n\nFunction Description: The main function sets up a gRPC server that listens on port 50051, registers the gRPC service implementation, and starts serving requests. It includes error handling for server setup and operation.\n\nInput: None (The function takes no explicit parameters but uses a hardcoded port \":50051\" for listening)\n\nOutput: None (The function doesn't return anything but will log fatal errors if the server fails to start or serve)\n\nNote: The actual gRPC service implementation (greeter struct) is not shown in the reference code but would need to be defined separately to implement the proto.GreeterServer interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"grpc-hello/proto\"\n)\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tserver := grpc.NewServer()\n\treflection.Register(server)\n\tproto.RegisterGreeterServer(server, &greeter{})\n\n\tfmt.Println(\"grpc server start ...\")\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype server struct{}\n\nfunc (s *server) SayHello(ctx context.Context, in *HelloRequest) (*HelloReply, error) {\n\treturn &HelloReply{Message: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\treflection.Register(s)\n\tpb.RegisterGreeterServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a gRPC server for chaincode communication in a Hyperledger Fabric network, supporting both secure (TLS) and insecure connections, with the ability to handle chaincode registration and message echoing.\n\nStruct Description: ccSrv represents a chaincode gRPC server that listens for incoming connections, handles chaincode registration, and echoes received messages back to the client.\n\nFields:\nl: net.Listener - The network listener for incoming connections\ngrpcSrv: *grpc.Server - The gRPC server instance\nt: *testing.T - Testing context for assertions\nexpectedCCname: string - The expected chaincode name for validation during registration\n\nMethods:\nRegister: (stream pb.ChaincodeSupport_RegisterServer) -> error - Handles the chaincode registration stream, validates the chaincode name, and echoes messages back to the client\nstop: () -> () - Stops the gRPC server and closes the listener\nnewCCServer: (t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) -> *ccSrv - Creates and configures a new chaincode server instance with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\tpb \"github.com/hyperledger/fabric-protos-go-apiv2/peer\"\n\t\"github.com/hyperledger/fabric/common/crypto/tlsgen\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype ccSrv struct {\n\tl              net.Listener\n\tgrpcSrv        *grpc.Server\n\tt              *testing.T\n\texpectedCCname string\n}\n\nfunc (cs *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\tmsg, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\trequire.Equal(cs.t, pb.ChaincodeMessage_REGISTER.String(), msg.Type.String())\n\tchaincodeID := &pb.ChaincodeID{}\n\terr = proto.Unmarshal(msg.Payload, chaincodeID)\n\tif err != nil {\n\t\treturn err\n\t}\n\trequire.Equal(cs.t, cs.expectedCCname, chaincodeID.Name)\n\tfor {\n\t\tmsg, _ = stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = stream.Send(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (cs *ccSrv) stop() {\n\tcs.grpcSrv.Stop()\n\tcs.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tvar s *grpc.Server\n\tif withTLS {\n\t\tkeyPair, err := ca.NewServerCertKeyPair(\"localhost\")\n\t\trequire.NoError(t, err)\n\t\tcert, err := tls.X509KeyPair(keyPair.Cert, keyPair.Key)\n\t\trequire.NoError(t, err)\n\t\ttlsConf := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t\t\tClientCAs:    x509.NewCertPool(),\n\t\t}\n\t\ttlsConf.ClientCAs.AppendCertsFromPEM(ca.CertBytes())\n\t\ts = grpc.NewServer(grpc.Creds(credentials.NewTLS(tlsConf)))\n\t} else {\n\t\ts = grpc.NewServer()\n\t}\n\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", \"\", port))\n\trequire.NoError(t, err, \"%v\", err)\n\treturn &ccSrv{\n\t\tt:              t,\n\t\texpectedCCname: expectedCCname,\n\t\tl:              l,\n\t\tgrpcSrv:        s,\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/test/bufconn\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype ccSrv struct {\n\tl           net.Listener\n\tgrpcSrv     *grpc.Server\n\tt           *testing.T\n\texpectedCCname string\n}\n\nfunc (s *ccSrv) Register(stream pb.ChaincodeSupport_RegisterServer) error {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif msg.GetRegister() != nil {\n\t\t\tif msg.GetRegister().GetName() != s.expectedCCname {\n\t\t\t\ts.t.Errorf(\"Received unexpected chaincode name: %s, expected: %s\", msg.GetRegister().GetName(), s.expectedCCname)\n\t\t\t}\n\t\t\tstream.Send(&pb.RegisterResponse{Status: &pb.Status{Code: 0, Message: \"Registered successfully\"}})\n\t\t} else if msg.GetEcho() != nil {\n\t\t\tstream.Send(&pb.RegisterResponse{Echo: msg.GetEcho()})\n\t\t}\n\t}\n}\n\nfunc (s *ccSrv) stop() {\n\ts.grpcSrv.Stop()\n\ts.l.Close()\n}\n\nfunc newCCServer(t *testing.T, port int, expectedCCname string, withTLS bool, ca tlsgen.CA) *ccSrv {\n\tlistener, _ := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tcreds := credentials.NewTLS(&tls.Config{})\n\tif !withTLS {\n\t\tcreds = credentials.InsecureServerCredentials()\n\t}\n\tserver := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterChaincodeSupportServer(server, &ccSrv{\n\t\tl:               listener,\n\t\tgrpcSrv:         server,\n\t\tt:               t,\n\t\texpectedCCname:  expectedCCname,\n\t})\n\tgo func() {\n\t\tif err := server.Serve(listener); err != nil {\n\t\t\tt.Fatalf(\"Failed to serve gRPC server: %v\", err)\n\t\t}\n\t}()\n\treturn &ccSrv{\n\t\tl:               listener,\n\t\tgrpcSrv:         server,\n\t\tt:               t,\n\t\texpectedCCname:  expectedCCname,\n\t}\n}"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles greeting requests and responses.\n\nStruct Description: The server struct implements the GreeterServer interface generated from the protobuf definition, providing the SayHello method to handle incoming gRPC requests.\n\nFields:\nUnimplementedGreeterServer: pb.UnimplementedGreeterServer - Embedded type to ensure forward compatibility with future gRPC updates\n\nMethods:\nSayHello: [Name](ctx context.Context, in *pb.HelloRequest) -> (*pb.HelloReply, error) - Processes incoming HelloRequest, logs the received name, and returns a HelloReply with a greeting message",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(_ context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}\n\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\tlog.Printf(\"server listening at %v\", lis.Addr())\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"github.com/yourusername/greeter/proto\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreeterServer(s, &server{})\n\tlog.Println(\"Server is running on port 50051\")\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a Go struct that implements a mock gRPC server proxy for testing purposes, with start and stop functionality.\n\nStruct Description: The ProxyGRPCMock struct provides a mock implementation of a gRPC server that can be started and stopped programmatically. It allows for custom gRPC service implementations and registration routines to be injected for testing purposes.\n\nFields:\n- GRPCImplementer: [interface{}] - The implementation of the gRPC service handler\n- GRPCRegister: [func(s *grpc.Server, srv interface{})] - The function to register the gRPC service implementation with the server\n- listener: [net.Listener] - The network listener for the gRPC server\n\nMethods:\n- Start: [func(URL string) error] -> [error] - Starts the gRPC server on the specified URL (format \"scheme://path\"). Returns error if initialization fails.\n- Stop: [func() error] -> [error] - Stops the gRPC server by closing the listener. Returns error if no listener exists or closing fails.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister func(s *grpc.Server, srv interface{})\n\tlistener net.Listener\n}\n\nfunc (p *ProxyGRPCMock) Start(URL string) error {\n\tif p.GRPCImplementer == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC handler\")\n\t}\n\n\tif p.GRPCRegister == nil {\n\t\treturn fmt.Errorf(\"Missing gRPC registration routine\")\n\t}\n\n\turl, err := url.Parse(URL)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tl, err := net.Listen(url.Scheme, url.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.listener = l\n\n\tgrpcServer := grpc.NewServer()\n\tp.GRPCRegister(grpcServer, p.GRPCImplementer)\n\n\tgo func() {\n\t\tgrpcServer.Serve(l)\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.listener == nil {\n\t\treturn fmt.Errorf(\"Missing proxy listener\")\n\t}\n\n\treturn p.listener.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype ProxyGRPCMock struct {\n\tGRPCImplementer interface{}\n\tGRPCRegister    func(s *grpc.Server, srv interface{})\n\tlistener        net.Listener\n\tserver          *grpc.Server\n}\n\nfunc (p *ProxyGRPCMock) Start(URL string) error {\n\tif p.GRPCRegister == nil || p.GRPCImplementer == nil {\n\t\treturn fmt.Errorf(\"GRPCRegister or GRPCImplementer is not set\")\n\t}\n\n\t// Parse URL to get the network address\n\taddr := URL\n\tif !strings.HasPrefix(URL, \"http://\") && !strings.HasPrefix(URL, \"https://\") {\n\t\taddr = \"localhost:\" + URL\n\t} else {\n\t\taddr = strings.TrimPrefix(URL, \"http://\")\n\t\taddr = strings.TrimPrefix(addr, \"https://\")\n\t}\n\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.listener = l\n\n\tp.server = grpc.NewServer()\n\tp.GRPCRegister(p.server, p.GRPCImplementer)\n\n\tgo func() {\n\t\tif err := p.server.Serve(l); err != nil {\n\t\t\tfmt.Printf(\"gRPC server exited with error: %v\\n\", err)\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (p *ProxyGRPCMock) Stop() error {\n\tif p.listener == nil {\n\t\treturn fmt.Errorf(\"no listener found\")\n\t}\n\n\tp.server.Stop()\n\tif err := p.listener.Close(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Implement a gRPC server in Go that can handle incoming requests with configurable message size limits, TLS support, and OpenTracing integration.\n\nStruct Description: The Server struct represents a gRPC server instance with configurable settings for buffer size and server options.\n\nFields:\ngrpcServer: *grpc.Server - The underlying gRPC server instance\nbufferSize: int - The buffer size for server operations (currently unused in reference code)\n\nMethods:\nNewServer: () -> *Server - Creates and returns a new Server instance with default values\n\nStart: (url *common.URL) -> () - Starts the gRPC server with the specified URL configuration. Handles:\n  - Network listener setup\n  - Message size configuration\n  - TLS setup if configured\n  - OpenTracing integration\n  - Service registration\n  - Server reflection\n\nStop: () -> () - Immediately stops the gRPC server\n\nGracefulStop: () -> () - Gracefully stops the gRPC server, allowing existing RPCs to complete",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\nimport (\n\t\"github.com/dubbogo/gost/log/logger\"\n\t\"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/common\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t\"dubbo.apache.org/dubbo-go/v3/config\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n)\n\ntype Server struct {\n\tgrpcServer *grpc.Server\n\tbufferSize int\n}\n\nfunc NewServer() *Server {\n\treturn &Server{}\n}\n\nfunc (s *Server) Start(url *common.URL) {\n\tvar (\n\t\taddr string\n\t\terr  error\n\t)\n\taddr = url.Location\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmaxServerRecvMsgSize := constant.DefaultMaxServerRecvMsgSize\n\tif recvMsgSize, convertErr := humanize.ParseBytes(url.GetParam(constant.MaxServerRecvMsgSize, \"\")); convertErr == nil && recvMsgSize != 0 {\n\t\tmaxServerRecvMsgSize = int(recvMsgSize)\n\t}\n\tmaxServerSendMsgSize := constant.DefaultMaxServerSendMsgSize\n\tif sendMsgSize, convertErr := humanize.ParseBytes(url.GetParam(constant.MaxServerSendMsgSize, \"\")); err == convertErr && sendMsgSize != 0 {\n\t\tmaxServerSendMsgSize = int(sendMsgSize)\n\t}\n\n\ttracer := opentracing.GlobalTracer()\n\tvar serverOpts []grpc.ServerOption\n\tserverOpts = append(serverOpts,\n\t\tgrpc.UnaryInterceptor(otgrpc.OpenTracingServerInterceptor(tracer)),\n\t\tgrpc.StreamInterceptor(otgrpc.OpenTracingStreamServerInterceptor(tracer)),\n\t\tgrpc.MaxRecvMsgSize(maxServerRecvMsgSize),\n\t\tgrpc.MaxSendMsgSize(maxServerSendMsgSize),\n\t)\n\n\ttlsConfig := config.GetRootConfig().TLSConfig\n\tif tlsConfig != nil {\n\t\tvar cfg *tls.Config\n\t\tcfg, err = config.GetServerTlsConfig(&config.TLSConfig{\n\t\t\tCACertFile:    tlsConfig.CACertFile,\n\t\t\tTLSCertFile:   tlsConfig.TLSCertFile,\n\t\t\tTLSKeyFile:    tlsConfig.TLSKeyFile,\n\t\t\tTLSServerName: tlsConfig.TLSServerName,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Grpc Server initialized the TLSConfig configuration\")\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(cfg)))\n\t} else {\n\t\tserverOpts = append(serverOpts, grpc.Creds(insecure.NewCredentials()))\n\t}\n\tserver := grpc.NewServer(serverOpts...)\n\ts.grpcServer = server\n\n\tgo func() {\n\t\tproviderServices := config.GetProviderConfig().Services\n\n\t\tif len(providerServices) == 0 {\n\t\t\tpanic(\"provider service map is null\")\n\t\t}\n\t\twaitGrpcExporter(providerServices)\n\t\tregisterService(providerServices, server)\n\t\treflection.Register(server)\n\n\t\tif err = server.Serve(lis); err != nil {\n\t\t\tlogger.Errorf(\"server serve failed with err: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Stop() {\n\ts.grpcServer.Stop()\n}\n\nfunc (s *Server) GracefulStop() {\n\ts.grpcServer.GracefulStop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/timeout\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/unary\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/metadata\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/otel\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"github.com/opentracing/opentracing-go/ext\"\n\t\"github.com/opentracing/opentracing-go/log\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/stats\"\n\t\"google.golang.org/grpc/testdata\"\n)\n\ntype Server struct {\n\tgrpcServer *grpc.Server\n\tbufferSize int\n}\n\nfunc NewServer() *Server {\n\treturn &Server{\n\t\tgrpcServer: grpc.NewServer(\n\t\t\tgrpc.MaxRecvMsgSize(1024*1024*10),\n\t\t\tgrpc.MaxSendMsgSize(1024*1024*10),\n\t\t),\n\t\tbufferSize: 1024,\n\t}\n}\n\nfunc (s *Server) Start(url *common.URL) {\n\tlistener, err := net.Listen(url.Network, url.Address)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.MaxRecvMsgSize(s.bufferSize),\n\t\tgrpc.MaxSendMsgSize(s.bufferSize),\n\t}\n\n\tif url.TLS != nil {\n\t\tcreds, err := credentials.NewTLS(&tls.Config{\n\t\t\tCertificates:       url.TLS.Certs,\n\t\t\tClientAuth:         url.TLS.ClientAuth,\n\t\t\tClientCAs:          url.TLS.CA,\n\t\t\tInsecureSkipVerify: url.TLS.InsecureSkipVerify,\n\t\t})\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tif url.OpenTracingEnabled {\n\t\ttracer, _ := opentracing.NewTracerProvider().Tracer(\"grpc-server\")\n\t\topentracing.SetGlobalTracer(tracer)\n\t\topts = append(opts, grpc.UnaryInterceptor(otel.UnaryServerInterceptor()))\n\t\topts = append(opts, grpc.StreamInterceptor(otel.StreamServerInterceptor()))\n\t}\n\n\ts.grpcServer := grpc.NewServer(opts...)\n\treflection.Register(s.grpcServer)\n\ts.grpcServer.Serve(listener)\n}\n\nfunc (s *Server) Stop() {\n\ts.grpcServer.Stop()\n}\n\nfunc (s *Server) GracefulStop() {\n\ts.grpcServer.GracefulStop()\n}"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles various WebSocket operations including checking user online status, sending messages to users, broadcasting messages to all users, and retrieving user lists.\n\nStruct Description: The `server` struct implements the gRPC service interface defined in the protobuf file, providing concrete implementations for WebSocket operations.\n\nFields:\n- UnimplementedAccServerServer: [protobuf.UnimplementedAccServerServer] - Embedded type to ensure forward compatibility with gRPC service updates\n\nMethods:\n- QueryUsersOnline: [Name](ctx context.Context, req *protobuf.QueryUsersOnlineReq) -> (*protobuf.QueryUsersOnlineRsp, error) - Checks if a specified user is currently online\n- SendMsg: [Name](ctx context.Context, req *protobuf.SendMsgReq) -> (*protobuf.SendMsgRsp, error) - Sends a message to a specific user\n- SendMsgAll: [Name](ctx context.Context, req *protobuf.SendMsgAllReq) -> (*protobuf.SendMsgAllRsp, error) - Broadcasts a message to all connected users\n- GetUserList: [Name](ctx context.Context, req *protobuf.GetUserListReq) -> (*protobuf.GetUserListRsp, error) - Retrieves the list of currently connected users\n- Init: [Name]() -> () - Initializes and starts the gRPC server with configuration from Viper",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/link1st/gowebsocket/v2/common\"\n\t\"github.com/link1st/gowebsocket/v2/models\"\n\t\"github.com/link1st/gowebsocket/v2/protobuf\"\n\t\"github.com/link1st/gowebsocket/v2/servers/websocket\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct {\n\tprotobuf.UnimplementedAccServerServer\n}\n\nfunc (s *server) QueryUsersOnline(c context.Context, req *protobuf.QueryUsersOnlineReq) (rsp *protobuf.QueryUsersOnlineRsp, err error) {\n\trsp = &protobuf.QueryUsersOnlineRsp{}\n\tonline := websocket.CheckUserOnline(req.GetAppID(), req.GetUserID())\n\tsetErr(req, common.OK, \"\")\n\trsp.Online = online\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsg(c context.Context, req *protobuf.SendMsgReq) (rsp *protobuf.SendMsgRsp, err error) {\n\trsp = &protobuf.SendMsgRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\tsendResults, err := websocket.SendUserMessageLocal(req.GetAppID(), req.GetUserID(), data)\n\tif err != nil {\n\t\tsetErr(rsp, common.ServerError, \"\")\n\t\treturn rsp, nil\n\t}\n\tif !sendResults {\n\t\tsetErr(rsp, common.OperationFailure, \"\")\n\t\treturn rsp, nil\n\t}\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) SendMsgAll(c context.Context, req *protobuf.SendMsgAllReq) (rsp *protobuf.SendMsgAllRsp, err error) {\n\trsp = &protobuf.SendMsgAllRsp{}\n\tdata := models.GetMsgData(req.GetUserID(), req.GetSeq(), req.GetCms(), req.GetMsg())\n\twebsocket.AllSendMessages(req.GetAppID(), req.GetUserID(), data)\n\tsetErr(rsp, common.OK, \"\")\n\treturn rsp, nil\n}\n\nfunc (s *server) GetUserList(c context.Context, req *protobuf.GetUserListReq) (rsp *protobuf.GetUserListRsp, err error) {\n\trsp = &protobuf.GetUserListRsp{}\n\tuserList := websocket.GetUserList(req.GetAppID())\n\tsetErr(rsp, common.OK, \"\")\n\trsp.UserID = userList\n\treturn rsp, nil\n}\n\nfunc Init() {\n\trpcPort := viper.GetString(\"app.rpcPort\")\n\tlis, err := net.Listen(\"tcp\", \":\"+rpcPort)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"github.com/spf13/viper\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype user struct {\n\tid   string\n\tconn *websocket.Conn\n}\n\ntype server struct {\n\tconnectedUsers map[string]*user\n\tmu             sync.RWMutex\n\tUnimplementedAccServerServer\n}\n\nfunc (s *server) QueryUsersOnline(ctx context.Context, req *protobuf.QueryUsersOnlineReq) (*protobuf.QueryUsersOnlineRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\n\tonline := false\n\tif user, exists := s.connectedUsers[req.UserId]; exists {\n\t\tonline = user.conn != nil && user.conn.IsConnected()\n\t}\n\treturn &protobuf.QueryUsersOnlineRsp{IsOnline: online}, nil\n}\n\nfunc (s *server) SendMsg(ctx context.Context, req *protobuf.SendMsgReq) (*protobuf.SendMsgRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\n\tif user, exists := s.connectedUsers[req.UserId]; exists {\n\t\tif user.conn != nil && user.conn.IsConnected() {\n\t\t\terr := user.conn.WriteJSON(&protobuf.Msg{\n\t\t\t\tFrom:    \"server\",\n\t\t\t\tContent: req.Content,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Failed to send message to user %s: %v\", req.UserId, err)\n\t\t\t\treturn &protobuf.SendMsgRsp{Success: false}, nil\n\t\t\t}\n\t\t\treturn &protobuf.SendMsgRsp{Success: true}, nil\n\t\t}\n\t}\n\treturn &protobuf.SendMsgRsp{Success: false}, nil\n}\n\nfunc (s *server) SendMsgAll(ctx context.Context, req *protobuf.SendMsgAllReq) (*protobuf.SendMsgAllRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\n\tfor _, user := range s.connectedUsers {\n\t\tif user.conn != nil && user.conn.IsConnected() {\n\t\t\terr := user.conn.WriteJSON(&protobuf.Msg{\n\t\t\t\tFrom:    \"server\",\n\t\t\t\tContent: req.Content,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Failed to broadcast message: %v\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t}\n\treturn &protobuf.SendMsgAllRsp{Success: true}, nil\n}\n\nfunc (s *server) GetUserList(ctx context.Context, req *protobuf.GetUserListReq) (*protobuf.GetUserListRsp, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\n\tuserList := make([]*protobuf.User, 0, len(s.connectedUsers))\n\tfor id, user := range s.connectedUsers {\n\t\tuserList = append(userList, &protobuf.User{\n\t\t\tId: id,\n\t\t})\n\t}\n\treturn &protobuf.GetUserListRsp{Users: userList}, nil\n}\n\nfunc (s *server) Init() {\n\tviper.SetConfigName(\"config\")\n\tviper.AddConfigPath(\".\")\n\tif err := viper.ReadInConfig(); err != nil {\n\t\tlog.Fatalf(\"Error reading config file: %v\", err)\n\t}\n\n\tlistenAddr := viper.GetString(\"grpc.listen_addr\")\n\tlis, err := net.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tsrv := grpc.NewServer()\n\tprotobuf.RegisterAccServerServer(srv, s)\n\treflection.Register(srv)\n\n\tlog.Printf(\"gRPC server listening on %v\", listenAddr)\n\tif err := srv.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server to handle incoming requests on a specified network address.\n\nFunction Description: The function `startServer` sets up a gRPC server that listens on the provided TCP address. It creates a new gRPC server instance, registers the Echo service implementation, and begins serving requests. If any step fails, it logs the error and terminates the program.\n\nInput: \n- `addr` [string] - The network address (including port) on which the gRPC server should listen (e.g., \"localhost:50051\").\n\nOutput: \n- None (The function runs indefinitely to serve requests or exits on error).",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterEchoServer(s, &ecServer{addr: addr})\n\tlog.Printf(\"serving on %s\\n\", addr)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct{}\n\nfunc (s *server) Echo(ctx context.Context, in *EchoRequest) (*EchoResponse, error) {\n\treturn &EchoResponse{Message: in.Message}, nil\n}\n\nfunc startServer(addr string) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tRegisterEchoServiceServer(s, &server{})\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a gRPC server in Go that handles authentication services, connects to Redis for data storage, and exposes Prometheus metrics for monitoring.\n\nStruct Description: The authHandler struct implements the AuthServiceServer interface and provides authentication functionality using Redis as the backend storage.\n\nFields:\nredisClient: *redis.Client - The Redis client used for data storage and retrieval\n\nMethods:\nServe: (listener net.Listener) -> error - Starts the gRPC server and begins listening for incoming requests\nRegisterWithPrometheus: () -> error - Registers gRPC and custom metrics with Prometheus\nStartMetricsServer: () -> error - Starts an HTTP server for Prometheus metrics collection\n\nNote: The struct implements all required gRPC service methods defined in the auth.proto file, though these are not shown in the reference code. The main functionality includes:\n1. Setting up a gRPC server with Prometheus monitoring\n2. Establishing Redis connection\n3. Combining gRPC and HTTP servers for both RPC calls and metrics collection\n4. Proper error handling and logging throughout the process",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\n\t\"github.com/go-redis/redis\"\n\t\"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/lucperkins/colossus/proto/auth\"\n)\nfunc main() {\n\tlog.Printf(\"Starting up the gRPC auth server on localhost:%d\", PORT)\n\n\tlog.Print(\"Attempting to connect to Redis\")\n\n\tredisClient := redis.NewClient(&redis.Options{\n\t\tAddr: \"colossus-redis-cluster:6379\",\n\t})\n\n\t_, err := redisClient.Ping().Result()\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect to Redis cluster: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully connected to Redis\")\n\n\tlistener, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", PORT))\n\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\tlog.Print(\"Successfully created TCP listener\")\n\n\tserver := grpc.NewServer(\n\t\tgrpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),\n\t)\n\n\tauthServer := authHandler{\n\t\tredisClient: redisClient,\n\t}\n\n\thttpServer := &http.Server{\n\t\tHandler: promhttp.HandlerFor(metricsRegistry, promhttp.HandlerOpts{}),\n\t\tAddr:    fmt.Sprintf(\"0.0.0.0:%d\", PROMETHEUS_PORT),\n\t}\n\n\tauth.RegisterAuthServiceServer(server, &authServer)\n\n\tgrpcMetrics.InitializeMetrics(server)\n\n\tmetricsRegistry.MustRegister(grpcMetrics, authCounter, failCounter)\n\n\tlog.Print(\"Successfully registered with Prometheus\")\n\n\tgo func() {\n\t\tlog.Print(\"Starting up HTTP server for Prometheus metrics collection\")\n\n\t\tif err := httpServer.ListenAndServe(); err != nil {\n\t\t\tlog.Fatalf(\"Unable to start HTTP server for Prometheus metrics: %v\", err)\n\t\t}\n\t}()\n\n\tlog.Fatal(server.Serve(listener))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\tredis \"github.com/go-redis/redis/v8\"\n)\n\ntype authHandler struct {\n\tredisClient *redis.Client\n}\n\nfunc (a *authHandler) Serve(listener net.Listener) error {\n\tserver := grpc.NewServer()\n\treflection.Register(server)\n\tauthServiceServer := &authHandler{}\n\t// Assume authServiceServer implements all required gRPC service methods from auth.proto\n\tserver.RegisterService(&authServiceDesc{}, authServiceServer)\n\tif err := a.RegisterWithPrometheus(); err != nil {\n\t\treturn err\n\t}\n\tgo a.StartMetricsServer()\n\treturn server.Serve(listener)\n}\n\nfunc (a *authHandler) RegisterWithPrometheus() error {\n\t// Register gRPC metrics with Prometheus\n\tprometheus.MustRegister(\n\t\tprometheus.NewCounterVec(\n\t\t\tprometheus.CounterOpts{\n\t\t\t\tName: \"grpc_requests_total\",\n\t\t\t\tHelp: \"Total number of gRPC requests.\",\n\t\t\t},\n\t\t\t[]string{\"method\", \"code\"},\n\t\t),\n\t\tprometheus.NewGaugeVec(\n\t\t\tprometheus.GaugeOpts{\n\t\t\t\tName: \"redis_connections\",\n\t\t\t\tHelp: \"Number of active Redis connections.\",\n\t\t\t},\n\t\t\t[]string{\"status\"},\n\t\t),\n\t)\n\treturn nil\n}\n\nfunc (a *authHandler) StartMetricsServer() error {\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/metrics\", promhttp.Handler())\n\tserver := &http.Server{\n\t\tAddr:    \":8081\",\n\t\tHandler: mux,\n\t}\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tfmt.Printf(\"metrics server failed: %v\\n\", err)\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc main() {\n\tredisOpt := &redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tDB:       0,\n\t\tPoolSize: 10,\n\t}\n\tredisClient := redis.NewClient(redisOpt)\n\tauthServer := &authHandler{redisClient: redisClient}\n\tlistener, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := authServer.Serve(listener); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Implement a gRPC server in Go that collects and manages execution statistics for tasks in a distributed system.\n\nStruct Description: The Executor struct represents a gRPC server that handles execution statistics collection and management. It maintains a list of execution stats and provides methods to serve gRPC requests and process incoming statistics.\n\nFields:\nstats: []*pb.ExecutionStat - A slice of pointers to ExecutionStat protobuf messages, storing the collected execution statistics.\n\nMethods:\nserveGrpc: (listener net.Listener) -> () - Starts a gRPC server on the given listener, registering the Executor as a GleamExecutorServer implementation.\nCollectExecutionStatistics: (stream pb.GleamExecutor_CollectExecutionStatisticsServer) -> error - Processes a stream of execution statistics, updating the internal stats collection when matching task IDs are found. Returns nil on successful completion or an error if stream processing fails.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/chrislusf/gleam/pb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Executor struct {\n\tstats []*pb.ExecutionStat\n}\n\nfunc (exe *Executor) serveGrpc(listener net.Listener) {\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(grpcServer, exe)\n\tgrpcServer.Serve(listener)\n}\n\nfunc (exe *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstats, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, stat := range stats.Stats {\n\t\t\tfor i, current := range exe.stats {\n\t\t\t\tif current.StepId == stat.StepId && current.TaskId == stat.TaskId {\n\t\t\t\t\texe.stats[i] = stat\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype Executor struct {\n\tmu    sync.Mutex\n\tstats []*pb.ExecutionStat\n}\n\nfunc (e *Executor) serveGrpc(listener net.Listener) {\n\tserver := grpc.NewServer()\n\tpb.RegisterGleamExecutorServer(server, e)\n\treflection.Register(server)\n\tif err := server.Serve(listener); err != nil {\n\t\tfmt.Printf(\"failed to serve: %v\\n\", err)\n\t}\n}\n\nfunc (e *Executor) CollectExecutionStatistics(stream pb.GleamExecutor_CollectExecutionStatisticsServer) error {\n\tfor {\n\t\tstat, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.mu.Lock()\n\t\te.stats = append(e.stats, stat)\n\t\te.mu.Unlock()\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a function that sets up and starts a gRPC server with reflection capabilities, registering multiple services and handling incoming requests.\n\nFunction Description: The Serve function initializes a gRPC server on a specified TCP port, registers multiple service implementations (RouteGuide and Foobar), enables server reflection for debugging, and starts listening for incoming RPC requests. It also demonstrates protobuf JSON marshaling of a well-known type.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but runs indefinitely to serve requests)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":5001\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"server: failed to create listener: %v\", err)\n\t}\n\n\te, _ := protojson.Marshal(&WellKnownRequest{Timestamp: timestamppb.Now()})\n\tfmt.Printf(\"string(e) = %+v\\n\", string(e))\n\n\ts := newServer()\n\tgs := grpc.NewServer()\n\tRegisterRouteGuideServer(gs, s)\n\tRegisterFoobarServer(gs, s)\n\treflection.Register(gs)\n\tgs.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype server struct{}\n\nfunc (s *server) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {\n\treturn &HelloReply{Message: \"Hello \" + req.Name}, nil\n}\n\nfunc Serve() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tfmt.Println(\"Failed to listen:\", err)\n\t\tos.Exit(1)\n\t}\n\ts := grpc.NewServer()\n\tRegisterHelloServiceServer(s, &server{})\n\treflection.Register(s)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tfmt.Println(\"gRPC server failed:\", err)\n\t\t}\n\t}()\n\tfmt.Println(\"gRPC server is running on port 50051...\")\n\t\n\t// Demonstrate protobuf JSON marshaling\n\tmsg := &HelloRequest{Name: \"World\"}\n\tjsonMsg, err := protojson.Marshal(msg)\n\tif err != nil {\n\t\tfmt.Println(\"Failed to marshal:\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"JSON marshaled message: %s\\n\", jsonMsg)\n\t\n\tselect {}\n}"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement a gRPC server for a CSI (Container Storage Interface) driver in Go, including server lifecycle management, request interception, and authentication.\n\nStruct Description: CSIDriver represents a gRPC server implementation for CSI driver operations, managing server lifecycle, intercepting requests, and handling authentication.\n\nFields:\n- listener: net.Listener - Network listener for incoming connections\n- server: *grpc.Server - gRPC server instance\n- servers: *CSIDriverServers - CSI service implementations (Controller, Identity, Node)\n- wg: sync.WaitGroup - Synchronization for graceful shutdown\n- running: bool - Server running state flag\n- lock: sync.Mutex - Mutex for thread-safe operations\n- creds: *CSICreds - Authentication credentials\n- logGRPC: LogGRPC - Callback for logging gRPC calls\n\nMethods:\n- NewCSIDriver(*CSIDriverServers) -> *CSIDriver - Constructor that creates a new CSIDriver instance with given service implementations\n- Start(net.Listener, grpc.UnaryServerInterceptor) -> error - Starts the gRPC server with optional interceptor\n- goServe(chan<- bool) -> - Internal method to start server in goroutine\n- Stop() -> - Stops the server gracefully\n- callInterceptor(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) -> (interface{}, error) - Request interceptor handling authentication and logging",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype CSIDriver struct {\n\tlistener net.Listener\n\tserver   *grpc.Server\n\tservers  *CSIDriverServers\n\twg       sync.WaitGroup\n\trunning  bool\n\tlock     sync.Mutex\n\tcreds    *CSICreds\n\tlogGRPC  LogGRPC\n}\n\ntype LogGRPC func(method string, request, reply interface{}, err error)\n\nfunc NewCSIDriver(servers *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: servers,\n\t}\n}\n\nfunc (c *CSIDriver) Start(l net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tc.listener = l\n\n\tif interceptor == nil {\n\t\tinterceptor = c.callInterceptor\n\t}\n\tc.server = grpc.NewServer(grpc.UnaryInterceptor(interceptor))\n\n\tif c.servers.Controller != nil {\n\t\tcsi.RegisterControllerServer(c.server, c.servers.Controller)\n\t}\n\tif c.servers.Identity != nil {\n\t\tcsi.RegisterIdentityServer(c.server, c.servers.Identity)\n\t}\n\tif c.servers.Node != nil {\n\t\tcsi.RegisterNodeServer(c.server, c.servers.Node)\n\t}\n\n\twaitForServer := make(chan bool)\n\tc.goServe(waitForServer)\n\t<-waitForServer\n\tc.running = true\n\treturn nil\n}\n\nfunc (c *CSIDriver) goServe(started chan<- bool) {\n\tgo func() {\n\t\tc.wg.Add(1)\n\t\tdefer c.wg.Done()\n\t\tstarted <- true\n\t\tc.server.Serve(c.listener)\n\t}()\n}\n\nfunc (c *CSIDriver) Stop() {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\tif !c.running {\n\t\treturn\n\t}\n\n\tc.server.Stop()\n\tc.wg.Wait()\n}\n\nfunc (c *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\terr := authInterceptor(c.creds, req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trsp, err := handler(ctx, req)\n\tif c.logGRPC != nil {\n\t\tc.logGRPC(info.FullMethod, req, rsp, err)\n\t}\n\treturn rsp, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype CSIDriverServers struct {\n\tControllerServer  interface{}\n\tIdentityServer    interface{}\n\tNodeServer        interface{}\n}\n\ntype CSICreds struct {\n\t// Add authentication fields as needed\n}\n\ntype LogGRPC func(context.Context, string, interface{})\n\ntype CSIDriver struct {\n\tlistener   net.Listener\n\tserver     *grpc.Server\n\tservers    *CSIDriverServers\n\twg         sync.WaitGroup\n\trunning    bool\n\tlock       sync.Mutex\n\tcreds      *CSICreds\n\tlogGRPC    LogGRPC\n}\n\nfunc NewCSIDriver(srvs *CSIDriverServers) *CSIDriver {\n\treturn &CSIDriver{\n\t\tservers: srvs,\n\t}\n}\n\nfunc (c *CSIDriver) Start(listener net.Listener, interceptor grpc.UnaryServerInterceptor) error {\n\tc.listener = listener\n\tc.server = grpc.NewServer(grpc.UnaryInterceptor(interceptor))\n\tc.running = true\n\tc.wg.Add(1)\n\tgo c.goServe(make(chan bool))\n\treturn nil\n}\n\nfunc (c *CSIDriver) goServe(stopChan chan bool) {\n\tdefer c.wg.Done()\n\tif c.server == nil {\n\t\treturn\n\t}\n\tif err := c.server.Serve(c.listener); err != nil {\n\t\tfmt.Printf(\"gRPC server failed: %v\\n\", err)\n\t}\n\tstopChan <- true\n}\n\nfunc (c *CSIDriver) Stop() {\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\tif !c.running {\n\t\treturn\n\t}\n\tc.running = false\n\tc.server.GracefulStop()\n\tc.wg.Wait()\n}\n\nfunc (c *CSIDriver) callInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tc.logGRPC(ctx, \"Received\", req)\n\tif c.creds != nil {\n\t\t// Perform authentication check\n\t\tif err := c.authenticate(ctx); err != nil {\n\t\t\treturn nil, status.Error(codes.Unauthenticated, err.Error())\n\t\t}\n\t}\n\tresp, err := handler(ctx, req)\n\tc.logGRPC(ctx, \"Responded\", resp)\n\treturn resp, err\n}\n\nfunc (c *CSIDriver) authenticate(ctx context.Context) error {\n\t// Implement authentication logic here\n\treturn nil\n}"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both unary and bidirectional streaming RPCs for an echo service, with TLS security.\n\nStruct Description: The server struct implements the EchoServer interface generated from the protobuf definition, providing echo functionality for both unary and streaming RPCs.\n\nFields:\n- UnimplementedEchoServer: pb.UnimplementedEchoServer - Embedded type to ensure forward compatibility\n\nMethods:\n- UnaryEcho: (context.Context, *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls by echoing back the received message\n- BidirectionalStreamingEcho: (pb.Echo_BidirectionalStreamingEchoServer) -> error - Handles bidirectional streaming by continuously receiving messages and echoing them back until the stream ends\n\nInput: None (The struct itself doesn't take input parameters, but its methods do as described above)\n\nOutput: None (The struct doesn't return anything directly, but its methods return values as described above)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/examples/data\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(_ context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tfmt.Printf(\"unary echoing message %q\\n\", in.Message)\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc (s *server) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfor {\n\t\tin, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfmt.Printf(\"server: error receiving from stream: %v\\n\", err)\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"bidi echoing message %q\\n\", in.Message)\n\t\tstream.Send(&pb.EchoResponse{Message: in.Message})\n\t}\n}\n\nfunc main() {\n\tport := flag.Int(\"port\", 50051, \"the port to serve on\")\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tcreds, err := credentials.NewServerTLSFromFile(data.Path(\"x509/server_cert.pem\"), data.Path(\"x509/server_key.pem\"))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create credentials: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/reflection\"\n\n\tpb \"github.com/yourusername/echo-service/proto\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tlog.Printf(\"Received: %s\", req.Message)\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc (s *server) BidirectionalStreamingEcho(stream pb.Echo_BidirectionalStreamingEchoServer) error {\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"Received: %s\", msg.Message)\n\t\tif err := stream.Send(&pb.EchoResponse{Message: msg.Message}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlisten, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tcertFile := \"server.crt\"\n\tkeyFile := \"server.key\"\n\n\tcreds, err := credentials.NewServerTLSFromFile(certFile, keyFile)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to generate TLS credentials: %v\", err)\n\t}\n\n\tgrpcServer := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(grpcServer, &server{})\n\n\treflection.Register(grpcServer)\n\n\tlog.Println(\"Starting gRPC server on :50051 with TLS...\")\n\tif err := grpcServer.Serve(listen); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, supports optional transport security, and can register services with reflection capabilities.\n\nFunction Description: The main function sets up and starts a gRPC server with configurable options including transport security (TLS) and logging interceptors. It registers a test service and optionally enables server reflection. The server listens on either a Unix socket or TCP port based on configuration.\n\nInput:\n- *cert (string pointer): Path to certificate file for TLS (optional)\n- *cacert (string pointer): Path to CA certificate file (optional)\n- *key (string pointer): Path to private key file (optional)\n- *requirecert (bool pointer): Whether client certificates are required (optional)\n- *quiet (bool pointer): Whether to disable logging interceptors (optional)\n- *port (int pointer): TCP port to listen on (default used if not provided)\n- getUnixSocket (func() string): Function that returns Unix socket path if available (optional)\n\nOutput:\n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are printed to stderr and the program exits with code 1 on failure\n- Success message with listening address is printed to stdout",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\n\t\"github.com/fullstorydev/grpcurl\"\n\tgrpcurl_testing \"github.com/fullstorydev/grpcurl/internal/testing\"\n)\nfunc main() {\n\tvar opts []grpc.ServerOption\n\tif *cert != \"\" {\n\t\tcreds, err := grpcurl.ServerTransportCredentials(*cacert, *cert, *key, *requirecert)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to configure transport credentials: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tif !*quiet {\n\t\topts = append(opts, grpc.UnaryInterceptor(unaryLogger), grpc.StreamInterceptor(streamLogger))\n\t}\n\n\tvar network, addr string\n\tif getUnixSocket != nil && getUnixSocket() != \"\" {\n\t\tnetwork = \"unix\"\n\t\taddr = getUnixSocket()\n\t} else {\n\t\tnetwork = \"tcp\"\n\t\taddr = fmt.Sprintf(\"127.0.0.1:%d\", *port)\n\t}\n\tl, err := net.Listen(network, addr)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to listen on socket: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"Listening on %v\\n\", l.Addr())\n\n\tsvr := grpc.NewServer(opts...)\n\n\tgrpcurl_testing.RegisterTestServiceServer(svr, grpcurl_testing.TestServer{})\n\tif !*noreflect {\n\t\treflection.Register(svr)\n\t}\n\n\tif err := svr.Serve(l); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"GRPC server returned error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\t\"google.golang.org/grpc/stats\"\n\t\"google.golang.org/grpc/testdata\"\n\t\"google.golang.org/grpc/transport\"\n)\n\ntype testServiceServer struct{}\n\nfunc (t *testServiceServer) TestMethod(ctx context.Context, req *TestRequest) (*TestResponse, error) {\n\treturn &TestResponse{Message: \"Hello from test service\"}, nil\n}\n\ntype loggingInterceptor struct{}\n\nfunc (l *loggingInterceptor) ServerUnaryInterceptor(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (any, error) {\n\tlog.Println(\"Received request:\", info.FullMethod)\n\tresp, err := handler(ctx, req)\n\tif err != nil {\n\t\tlog.Println(\"Error handling request:\", err)\n\t}\n\treturn resp, err\n}\n\nfunc main() {\n\tvar cert, cacert, key string\n\tvar requirecert bool\n\tvar quiet bool\n\tvar port int\n\tvar getUnixSocket func() string\n\n\tflag.StringVar(&cert, \"cert\", \"\", \"Path to certificate file for TLS\")\n\tflag.StringVar(&cacert, \"cacert\", \"\", \"Path to CA certificate file\")\n\tflag.StringVar(&key, \"key\", \"\", \"Path to private key file\")\n\tflag.BoolVar(&requirecert, \"requirecert\", false, \"Whether client certificates are required\")\n\tflag.BoolVar(&quiet, \"quiet\", false, \"Whether to disable logging interceptors\")\n\tflag.IntVar(&port, \"port\", 50051, \"TCP port to listen on\")\n\tflag.Parse()\n\n\tvar lis net.Listener\n\tvar err error\n\n\tif getUnixSocket != nil {\n\t\tsocketPath := getUnixSocket()\n\t\tif socketPath != \"\" {\n\t\t\tos.Remove(socketPath)\n\t\t\tlis, err = net.Listen(\"unix\", socketPath)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Server is listening on unix://%s\\n\", socketPath)\n\t\t} else {\n\t\t\tlis, err = net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Server is listening on :%d\\n\", port)\n\t\t}\n\t} else {\n\t\tlis, err = net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t\t}\n\t\tfmt.Printf(\"Server is listening on :%d\\n\", port)\n\t}\n\n\topts := []grpc.ServerOption{}\n\tif cert != \"\" && key != \"\" {\n\t\ttlsConfig := &tls.Config{\n\t\t\tCertificates:       []tls.Certificate{loadTLSConfig(cert, key)},\n\t\t\tClientAuth:         tls.RequireAndVerifyClientCert,\n\t\t\tClientCAs:          loadCACert(cacert),\n\t\t\tInsecureSkipVerify: !requirecert,\n\t\t}\n\t\tcreds := credentials.NewTLS(tlsConfig)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tif !quiet {\n\t\topts = append(opts, grpc.UnaryInterceptor((*loggingInterceptor).ServerUnaryInterceptor))\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\tRegisterTestServiceServer(server, &testServiceServer{})\n\n\tif getUnixSocket != nil && getUnixSocket() != \"\" {\n\t\treflection.Register(server)\n\t}\n\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n\nfunc loadTLSConfig(cert, key string) tls.Certificate {\n\tcertFile := cert\n\tkeyFile := key\n\tcert, err := tls.LoadX509KeyPair(certFile, keyFile)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to load certificate and key: %v\", err)\n\t}\n\treturn cert\n}\n\nfunc loadCACert(cacert string) *x509.CertPool {\n\tif cacert == \"\" {\n\t\treturn nil\n\t}\n\tpool := x509.NewCertPool()\n\tpem, err := os.ReadFile(cacert)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to read CA certificate: %v\", err)\n\t}\n\tif !pool.AppendCertsFromPEM(pem) {\n\t\tlog.Fatalf(\"failed to parse CA certificate\")\n\t}\n\treturn pool\n}\n\nfunc RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {\n\tgrpc.RegisterService(&TestService_ServiceDesc, srv)\n}\n\ntype TestRequest struct {\n\tMessage string\n}\n\ntype TestResponse struct {\n\tMessage string\n}\n\ntype TestServiceServer interface {\n\tTestMethod(ctx context.Context, req *TestRequest) (*TestResponse, error)\n}\n\nvar TestService_ServiceDesc = grpc.ServiceDesc{\n\tServiceName: \"TestService\",\n\tMethods:     map[string]*grpc.MethodDesc{\"TestMethod\": &grpc.MethodDesc{}},\n\tStreams:     map[string]*grpc.StreamDesc{},\n\tMetadata:    &grpc.Metadata{},\n}"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles incoming requests with custom stream preprocessing and graceful shutdown capabilities.\n\nStruct Description: The `server` struct represents a gRPC server instance with additional control for graceful shutdown and stream preprocessing.\n\nFields:\n- grpcSrv: *grpc.Server - The underlying gRPC server instance\n- closeC: chan struct{} - Channel used to signal server shutdown\n\nMethods:\n- Serve: (lis net.Listener) -> error - Starts the gRPC server on the provided listener, initializing it with custom stream preprocessing\n- preGrpcStream: (ctx context.Context, info *tap.Info) -> (context.Context, error) - Intercepts incoming gRPC streams before processing, with special handling for the \"/vanus.core.raft.RaftServer/SendMessage\" method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/tap\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\tsrv := grpc.NewServer(\n\t\tgrpc.InTapHandle(s.preGrpcStream),\n\t)\n\ts.grpcSrv = srv\n\n\treturn srv.Serve(lis)\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *tap.Info) (context.Context, error) {\n\tif info.FullMethodName == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\tcCtx, cancel := context.WithCancel(ctx)\n\t\tgo func() {\n\t\t\tselect {\n\t\t\tcase <-cCtx.Done():\n\t\t\tcase <-s.closeC:\n\t\t\t\tcancel()\n\t\t\t}\n\t\t}()\n\t\treturn cCtx, nil\n\t}\n\treturn ctx, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype server struct {\n\tgrpcSrv *grpc.Server\n\tcloseC  chan struct{}\n\tmu      sync.Mutex\n}\n\nfunc (s *server) Serve(lis net.Listener) error {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\tif s.grpcSrv != nil {\n\t\treturn fmt.Errorf(\"server already started\")\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.StreamInterceptor(s.preGrpcStream),\n\t}\n\n\ts.grpcSrv = grpc.NewServer(opts...)\n\treflection.Register(s.grpcSrv)\n\n\tgo func() {\n\t\tif err := s.grpcSrv.Serve(lis); err != nil {\n\t\t\tfmt.Printf(\"gRPC server failed: %v\\n\", err)\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (s *server) preGrpcStream(ctx context.Context, info *grpc.UnaryServerInfo) (context.Context, error) {\n\tif info.FullMethod == \"/vanus.core.raft.RaftServer/SendMessage\" {\n\t\t// Custom preprocessing for RaftServer's SendMessage method\n\t\t// Example: logging, authentication, rate limiting, etc.\n\t\tfmt.Println(\"Preprocessing RaftServer/SendMessage stream\")\n\t}\n\treturn ctx, nil\n}\n\nfunc (s *server) Shutdown() error {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\tif s.grpcSrv == nil {\n\t\treturn fmt.Errorf(\"server not started\")\n\t}\n\n\tclose(s.closeC)\n\ts.grpcSrv.GracefulStop()\n\treturn nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\ts := &server{\n\t\tcloseC: make(chan struct{}),\n\t}\n\n\tif err := s.Serve(lis); err != nil {\n\t\tpanic(err)\n\t}\n\n\t<-s.closeC\n\tfmt.Println(\"Server shutdown complete\")\n}"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Create a gRPC service struct in Go that manages a gRPC server for key management operations, including starting the server, graceful shutdown, and immediate termination capabilities.\n\nStruct Description: GRPCService represents a gRPC server wrapper that handles Unix domain socket communication for key management services. It manages server lifecycle and configuration.\n\nFields:\naddr: string - The Unix domain socket address the server will listen on\ntimeout: time.Duration - Connection timeout duration for gRPC connections\nserver: *grpc.Server - The underlying gRPC server instance\nkmsService: Service - The key management service implementation to be registered with gRPC\n\nMethods:\nNewGRPCService(address string, timeout time.Duration, kmsService Service) -> *GRPCService - Constructor that initializes a new GRPCService instance with the given address, timeout and service implementation\nListenAndServe() -> error - Starts the gRPC server on the configured Unix domain socket address and begins serving requests\nShutdown() -> void - Gracefully stops the gRPC server, allowing existing connections to complete\nClose() -> void - Immediately stops the gRPC server without waiting for connections to complete",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tkmsapi \"k8s.io/kms/apis/v2\"\n)\n\ntype GRPCService struct {\n\taddr    string\n\ttimeout time.Duration\n\tserver  *grpc.Server\n\n\tkmsService Service\n}\n\nfunc NewGRPCService(\n\taddress string,\n\ttimeout time.Duration,\n\tkmsService Service,\n) *GRPCService {\n\treturn &GRPCService{\n\t\taddr:       address,\n\t\ttimeout:    timeout,\n\t\tkmsService: kmsService,\n\t}\n}\n\nfunc (s *GRPCService) ListenAndServe() error {\n\tln, err := net.Listen(\"unix\", s.addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ln.Close()\n\n\tgs := grpc.NewServer(\n\t\tgrpc.ConnectionTimeout(s.timeout),\n\t)\n\ts.server = gs\n\n\tkmsapi.RegisterKeyManagementServiceServer(gs, s)\n\n\treturn gs.Serve(ln)\n}\n\nfunc (s *GRPCService) Shutdown() {\n\tif s.server != nil {\n\t\ts.server.GracefulStop()\n\t}\n}\n\nfunc (s *GRPCService) Close() {\n\tif s.server != nil {\n\t\ts.server.Stop()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Service interface {\n\t// Define your service methods here\n}\n\ntype GRPCService struct {\n\taddr     string\n\ttimeout  time.Duration\n\tserver   *grpc.Server\n\tkmsService Service\n}\n\nfunc NewGRPCService(address string, timeout time.Duration, kmsService Service) *GRPCService {\n\treturn &GRPCService{\n\t\taddr:       address,\n\t\ttimeout:    timeout,\n\t\tkmsService: kmsService,\n\t}\n}\n\nfunc (g *GRPCService) ListenAndServe() error {\n\tlisten, err := net.Listen(\"unix\", g.addr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to listen: %v\", err)\n\t}\n\tdefer func() {\n\t\t_ = listen.Close()\n\t}()\n\n\tg.server = grpc.NewServer(grpc.ConnectionTimeout(g.timeout))\n\t// Register your service here\n\t// Example: pb.RegisterKeyManagementServer(g.server, g.kmsService)\n\n\tif err := g.server.Serve(listen); err != nil {\n\t\treturn fmt.Errorf(\"failed to serve: %v\", err)\n\t}\n\treturn nil\n}\n\nfunc (g *GRPCService) Shutdown() {\n\tif g.server != nil {\n\t\tg.server.GracefulStop()\n\t}\n}\n\nfunc (g *GRPCService) Close() {\n\tif g.server != nil {\n\t\tg.server.Stop()\n\t}\n}"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Create a gRPC server configuration and management system in Go that handles server setup, TLS configuration, client credentials, and network listeners with support for both buffered and regular network connections.\n\nStruct Description: GRPCServerConfig represents a configuration for setting up a gRPC server with various options including network settings, TLS configuration, and connection parameters.\n\nFields:\n- Address: string - The network address to listen on\n- Network: string - The network type (e.g., \"tcp\", \"unix\", or \"buffered\")\n- TLSCertPath: string - Path to TLS certificate file\n- TLSKeyPath: string - Path to TLS private key file\n- MaxConnAge: time.Duration - Maximum connection age before termination\n- Enabled: bool - Whether the server is enabled\n- BufferSize: int - Size of buffer for buffered connections\n- ClientCAPath: string - Path to client CA certificate file\n- MaxWorkers: uint32 - Maximum number of stream workers\n- flagPrefix: string - Prefix for configuration flags\n\nMethods:\n- Complete: (level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) -> (RunnableGRPCServer, error) - Completes the configuration and returns a runnable server instance\n- listenerAndDialer: () -> (net.Listener, DialFunc, NetDialFunc, error) - Creates a network listener and dialer functions based on configuration\n- tlsOpts: () -> ([]grpc.ServerOption, *certwatcher.CertWatcher, error) - Generates TLS server options based on certificate configuration\n- clientCreds: () -> (credentials.TransportCredentials, error) - Creates client transport credentials based on TLS configuration\n\nStruct Description: completedGRPCServer represents a fully configured and runnable gRPC server instance.\n\nFields:\n- opts: []grpc.ServerOption - Server options\n- listener: net.Listener - Network listener\n- svcRegistrationFn: func(*grpc.Server) - Service registration function\n- listenFunc: func() error - Function to start listening\n- prestopFunc: func() - Function to run before stopping\n- stopFunc: func() - Function to stop the server\n- dial: func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error) - Dial function for clients\n- netDial: func(context.Context, string) (net.Conn, error) - Raw network dial function\n- creds: credentials.TransportCredentials - Client transport credentials\n- certWatcher: *certwatcher.CertWatcher - Certificate watcher for TLS\n\nMethods:\n- WithOpts: (...grpc.ServerOption) -> RunnableGRPCServer - Adds additional server options\n- Listen: (context.Context) -> func() error - Starts the server and returns a listen function\n- DialContext: (context.Context, ...grpc.DialOption) -> (*grpc.ClientConn, error) - Creates a client connection\n- NetDialContext: (context.Context, string) -> (net.Conn, error) - Creates a raw network connection\n- Insecure: () -> bool - Returns whether the connection is insecure\n- GracefulStop: () - Stops the server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/test/bufconn\"\n\n\t\"sigs.k8s.io/controller-runtime/pkg/certwatcher\"\n\n\t\"github.com/authzed/spicedb/internal/grpchelpers\"\n\t\"github.com/authzed/spicedb/pkg/x509util\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress      string\n\tNetwork      string\n\tTLSCertPath  string\n\tTLSKeyPath   string\n\tMaxConnAge   time.Duration\n\tEnabled      bool\n\tBufferSize   int\n\tClientCAPath string\n\tMaxWorkers   uint32\n\n\tflagPrefix string\n}\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(server *grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn &disabledGrpcServer{}, nil\n\t}\n\tif c.BufferSize == 0 {\n\t\tc.BufferSize = 1024 * 1024\n\t}\n\topts = append(opts, grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionAge: c.MaxConnAge,\n\t}), grpc.NumStreamWorkers(c.MaxWorkers))\n\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\topts = append(opts, tlsOpts...)\n\n\tclientCreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tl, dial, netDial, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to listen on addr for gRPC server: %w\", err)\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tsvcRegistrationFn(srv)\n\treturn &completedGRPCServer{\n\t\topts:              opts,\n\t\tlistener:          l,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tlistenFunc: func() error {\n\t\t\treturn srv.Serve(l)\n\t\t},\n\t\tdial:    dial,\n\t\tnetDial: netDial,\n\t\tprestopFunc: func() {\n\t\t},\n\t\tstopFunc:    srv.GracefulStop,\n\t\tcreds:       clientCreds,\n\t\tcertWatcher: certWatcher,\n\t}, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, DialFunc, NetDialFunc, error) {\n\tif c.Network == BufferedNetwork {\n\t\tbl := bufconn.Listen(c.BufferSize)\n\t\treturn bl, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\t\topts = append(opts, grpc.WithContextDialer(func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t\t}))\n\n\t\t\t\treturn grpchelpers.Dial(ctx, BufferedNetwork, opts...)\n\t\t\t}, func(ctx context.Context, s string) (net.Conn, error) {\n\t\t\t\treturn bl.DialContext(ctx)\n\t\t\t}, nil\n\t}\n\tl, err := net.Listen(c.Network, c.Address)\n\tif err != nil {\n\t\treturn nil, nil, nil, err\n\t}\n\treturn l, func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\treturn grpchelpers.Dial(ctx, c.Address, opts...)\n\t}, nil, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn nil, nil, nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\twatcher, err := certwatcher.New(c.TLSCertPath, c.TLSKeyPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\tGetCertificate: watcher.GetCertificate,\n\t\t\tMinVersion:     tls.VersionTLS12,\n\t\t})\n\t\treturn []grpc.ServerOption{grpc.Creds(creds)}, watcher, nil\n\tdefault:\n\t\treturn nil, nil, nil\n\t}\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tswitch {\n\tcase c.TLSCertPath == \"\" && c.TLSKeyPath == \"\":\n\t\treturn insecure.NewCredentials(), nil\n\tcase c.TLSCertPath != \"\" && c.TLSKeyPath != \"\":\n\t\tvar err error\n\t\tvar pool *x509.CertPool\n\t\tif c.ClientCAPath != \"\" {\n\t\t\tpool, err = x509util.CustomCertPool(c.ClientCAPath)\n\t\t} else {\n\t\t\tpool, err = x509.SystemCertPool()\n\t\t}\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn credentials.NewTLS(&tls.Config{RootCAs: pool, MinVersion: tls.VersionTLS12}), nil\n\tdefault:\n\t\treturn nil, nil\n\t}\n}\n\ntype completedGRPCServer struct {\n\topts              []grpc.ServerOption\n\tlistener          net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tlistenFunc        func() error\n\tprestopFunc       func()\n\tstopFunc          func()\n\tdial              func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tnetDial           func(ctx context.Context, s string) (net.Conn, error)\n\tcreds             credentials.TransportCredentials\n\tcertWatcher       *certwatcher.CertWatcher\n}\n\nfunc (c *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\tc.opts = append(c.opts, opts...)\n\tsrv := grpc.NewServer(c.opts...)\n\tc.svcRegistrationFn(srv)\n\tc.listenFunc = func() error {\n\t\treturn srv.Serve(c.listener)\n\t}\n\tc.stopFunc = srv.GracefulStop\n\treturn c\n}\n\nfunc (c *completedGRPCServer) Listen(ctx context.Context) func() error {\n\tif c.certWatcher != nil {\n\t\tgo func() {\n\t\t\tif err := c.certWatcher.Start(ctx); err != nil {\n\t\t\t}\n\t\t}()\n\t}\n\treturn c.listenFunc\n}\n\nfunc (c *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\topts = append(opts, grpc.WithTransportCredentials(c.creds))\n\treturn c.dial(ctx, opts...)\n}\n\nfunc (c *completedGRPCServer) NetDialContext(ctx context.Context, s string) (net.Conn, error) {\n\treturn c.netDial(ctx, s)\n}\n\nfunc (c *completedGRPCServer) Insecure() bool {\n\treturn c.creds.Info().SecurityProtocol == \"insecure\"\n}\n\nfunc (c *completedGRPCServer) GracefulStop() {\n\tc.prestopFunc()\n\tc.stopFunc()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/cesbit/certwatcher\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"github.com/rs/zerolog\"\n)\n\ntype GRPCServerConfig struct {\n\tAddress        string\n\tNetwork        string\n\tTLSCertPath    string\n\tTLSKeyPath     string\n\tMaxConnAge     time.Duration\n\tEnabled        bool\n\tBufferSize     int\n\tClientCAPath   string\n\tMaxWorkers     uint32\n\tflagPrefix     string\n}\n\ntype DialFunc func(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\ntype NetDialFunc func(context.Context, string) (net.Conn, error)\n\nfunc (c *GRPCServerConfig) Complete(level zerolog.Level, svcRegistrationFn func(*grpc.Server), opts ...grpc.ServerOption) (RunnableGRPCServer, error) {\n\tif !c.Enabled {\n\t\treturn nil, fmt.Errorf(\"server is not enabled\")\n\t}\n\n\tlistener, dial, netDial, err := c.listenerAndDialer()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttlsOpts, certWatcher, err := c.tlsOpts()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tcreds, err := c.clientCreds()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tserver := &completedGRPCServer{\n\t\topts:           append(opts, tlsOpts...),\n\t\tlistener:       listener,\n\t\tsvcRegistrationFn: svcRegistrationFn,\n\t\tdial:          dial,\n\t\tnetDial:       netDial,\n\t\tcreds:         creds,\n\t\tcertWatcher:   certWatcher,\n\t}\n\n\tserver.opts = append(server.opts, grpc.MaxConcurrentStreams(int32(c.MaxWorkers)))\n\n\treturn server, nil\n}\n\nfunc (c *GRPCServerConfig) listenerAndDialer() (net.Listener, DialFunc, NetDialFunc, error) {\n\tvar listener net.Listener\n\tvar dial DialFunc\n\tvar netDial NetDialFunc\n\n\tswitch c.Network {\n\tcase \"tcp\":\n\t\taddr := fmt.Sprintf(\"%s:%s\", c.Address, \"8080\")\n\t\tlistener, err := net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, nil, nil, err\n\t\t}\n\t\tdial = func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\treturn grpc.DialContext(ctx, addr, append(opts, grpc.WithTransportCredentials(c.creds))...)\n\t\t}\n\t\tnetDial = func(ctx context.Context, network string) (net.Conn, error) {\n\t\t\treturn net.DialContext(ctx, network, addr)\n\t\t}\n\tcase \"unix\":\n\t\tpath := c.Address\n\t\tlistener, err := net.Listen(\"unix\", path)\n\t\tif err != nil {\n\t\t\treturn nil, nil, nil, err\n\t\t}\n\t\tdial = func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\treturn grpc.DialContext(ctx, \"unix://\"+path, append(opts, grpc.WithTransportCredentials(c.creds))...)\n\t\t}\n\t\tnetDial = func(ctx context.Context, network string) (net.Conn, error) {\n\t\t\treturn net.DialContext(ctx, network, path)\n\t\t}\n\tcase \"buffered\":\n\t\taddr := fmt.Sprintf(\"%s:%s\", c.Address, \"8080\")\n\t\tlistener, err := net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, nil, nil, err\n\t\t}\n\t\tbufferedListener := &bufferedListener{\n\t\t\tListener: listener,\n\t\t\tBufferSize: c.BufferSize,\n\t\t}\n\t\tlistener = bufferedListener\n\t\tdial = func(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\t\t\treturn grpc.DialContext(ctx, addr, append(opts, grpc.WithTransportCredentials(c.creds))...)\n\t\t}\n\t\tnetDial = func(ctx context.Context, network string) (net.Conn, error) {\n\t\t\tconn, err := net.DialContext(ctx, network, addr)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn &bufferedConn{\n\t\t\t\tConn: conn,\n\t\t\t\tBufferSize: c.BufferSize,\n\t\t\t}, nil\n\t\t}\n\tdefault:\n\t\treturn nil, nil, nil, fmt.Errorf(\"unsupported network type: %s\", c.Network)\n\t}\n\n\treturn listener, dial, netDial, nil\n}\n\nfunc (c *GRPCServerConfig) tlsOpts() ([]grpc.ServerOption, *certwatcher.CertWatcher, error) {\n\tvar opts []grpc.ServerOption\n\tvar certWatcher *certwatcher.CertWatcher\n\n\tif c.TLSCertPath != \"\" && c.TLSKeyPath != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(c.TLSCertPath, c.TLSKeyPath)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\n\t\tif c.ClientCAPath != \"\" {\n\t\t\tclientCertPool := x509.NewCertPool()\n\t\t\tclientCertBytes, err := ioutil.ReadFile(c.ClientCAPath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, nil, err\n\t\t\t}\n\t\t\tif ok := clientCertPool.AppendCertsFromPEM(clientCertBytes); !ok {\n\t\t\t\treturn nil, nil, fmt.Errorf(\"failed to append client CA certificate\")\n\t\t\t}\n\t\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\t\tClientCAs:    clientCertPool,\n\t\t\t\tClientAuth:   tls.RequireAndVerifyClientCert,\n\t\t\t})\n\t\t\topts = append(opts, grpc.Creds(creds))\n\t\t} else {\n\t\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\t})\n\t\t\topts = append(opts, grpc.Creds(creds))\n\t\t}\n\n\t\tcertWatcher, err := certwatcher.NewCertWatcher(c.TLSCertPath, c.TLSKeyPath, certwatcher.WithUpdateFunc(func(cert tls.Certificate) {\n\t\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\t\tCertificates: []tls.Certificate{cert},\n\t\t\t})\n\t\t\topts = append(opts, grpc.Creds(creds))\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t}\n\n\treturn opts, certWatcher, nil\n}\n\nfunc (c *GRPCServerConfig) clientCreds() (credentials.TransportCredentials, error) {\n\tif c.TLSCertPath != \"\" && c.TLSKeyPath != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(c.TLSCertPath, c.TLSKeyPath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn credentials.NewTLS(&tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t}), nil\n\t}\n\treturn insecure.NewCredentials(), nil\n}\n\ntype completedGRPCServer struct {\n\topts           []grpc.ServerOption\n\tlistener       net.Listener\n\tsvcRegistrationFn func(*grpc.Server)\n\tdial           DialFunc\n\tnetDial        NetDialFunc\n\tcreds          credentials.TransportCredentials\n\tcertWatcher    *certwatcher.CertWatcher\n}\n\nfunc (s *completedGRPCServer) WithOpts(opts ...grpc.ServerOption) RunnableGRPCServer {\n\tnewServer := &completedGRPCServer{\n\t\topts:           append(s.opts, opts...),\n\t\tlistener:       s.listener,\n\t\tsvcRegistrationFn: s.svcRegistrationFn,\n\t\tdial:          s.dial,\n\t\tnetDial:       s.netDial,\n\t\tcreds:         s.creds,\n\t\tcertWatcher:   s.certWatcher,\n\t}\n\treturn newServer\n}\n\nfunc (s *completedGRPCServer) Listen(ctx context.Context) func() error {\n\tserver := grpc.NewServer(s.opts...)\n\ts.svcRegistrationFn(server)\n\tlistenFunc := func() error {\n\t\tif err := server.Serve(s.listener); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\treturn listenFunc\n}\n\nfunc (s *completedGRPCServer) DialContext(ctx context.Context, opts ...grpc.DialOption) (*grpc.ClientConn, error) {\n\treturn s.dial(ctx, opts...)\n}\n\nfunc (s *completedGRPCServer) NetDialContext(ctx context.Context, network string) (net.Conn, error) {\n\treturn s.netDial(ctx, network)\n}\n\nfunc (s *completedGRPCServer) Insecure() bool {\n\t_, ok := s.creds.(*insecure.Credentials)\n\treturn ok\n}\n\nfunc (s *completedGRPCServer) GracefulStop() {\n\tif s.listener != nil {\n\t\ts.listener.Close()\n\t}\n}\n\ntype bufferedListener struct {\n\tListener net.Listener\n\tBufferSize int\n}\n\nfunc (bl *bufferedListener) Accept() (net.Conn, error) {\n\tconn, err := bl.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &bufferedConn{\n\t\tConn: conn,\n\t\tBufferSize: bl.BufferSize,\n\t}, nil\n}\n\nfunc (bl *bufferedListener) Close() error {\n\treturn bl.Listener.Close()\n}\n\nfunc (bl *bufferedListener) Addr() net.Addr {\n\treturn bl.Listener.Addr()\n}\n\ntype bufferedConn struct {\n\tConn net.Conn\n\tBufferSize int\n}\n\nfunc (bc *bufferedConn) Read(b []byte) (n int, err error) {\n\tif bc.BufferSize > 0 {\n\t\tif len(b) > bc.BufferSize {\n\t\t\tb = b[:bc.BufferSize]\n\t\t}\n\t\tn, err = bc.Conn.Read(b)\n\t\treturn n, err\n\t}\n\treturn bc.Conn.Read(b)\n}\n\nfunc (bc *bufferedConn) Write(b []byte) (n int, err error) {\n\tif bc.BufferSize > 0 {\n\t\tif len(b) > bc.BufferSize {\n\t\t\tb = b[:bc.BufferSize]\n\t\t}\n\t\tn, err = bc.Conn.Write(b)\n\t\treturn n, err\n\t}\n\treturn bc.Conn.Write(b)\n}\n\nfunc (bc *bufferedConn) Close() error {\n\treturn bc.Conn.Close()\n}\n\nfunc (bc *bufferedConn) LocalAddr() net.Addr {\n\treturn bc.Conn.LocalAddr()\n}\n\nfunc (bc *bufferedConn) RemoteAddr() net.Addr {\n\treturn bc.Conn.RemoteAddr()\n}\n\nfunc (bc *bufferedConn) SetDeadline(t time.Time) error {\n\treturn bc.Conn.SetDeadline(t)\n}\n\nfunc (bc *bufferedConn) SetReadDeadline(t time.Time) error {\n\treturn bc.Conn.SetReadDeadline(t)\n}\n\nfunc (bc *bufferedConn) SetWriteDeadline(t time.Time) error {\n\treturn bc.Conn.SetWriteDeadline(t)\n}\n\ntype RunnableGRPCServer interface {\n\tWithOpts(...grpc.ServerOption) RunnableGRPCServer\n\tListen(context.Context) func() error\n\tDialContext(context.Context, ...grpc.DialOption) (*grpc.ClientConn, error)\n\tNetDialContext(context.Context, string) (net.Conn, error)\n\tInsecure() bool\n\tGracefulStop()\n}"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a gRPC server in Go that handles Bigtable administration and operations, with proper initialization and cleanup capabilities.\n\nStruct Description: The Server struct represents a gRPC server instance that manages Bigtable table administration and operations. It handles network connections, server lifecycle, and maintains internal state.\n\nFields:\nAddr: [string] - The network address the server is listening on\nl: [net.Listener] - The network listener for incoming connections\nsrv: [*grpc.Server] - The gRPC server instance\ns: [*server] - The internal server implementation handling business logic\n\nMethods:\nNewServer: [func(laddr string, opt ...grpc.ServerOption) (*Server, error)] -> Creates and starts a new Server instance\n- Input: laddr (string) - The address to listen on, opt (...grpc.ServerOption) - Optional gRPC server configurations\n- Output: (*Server, error) - Returns the server instance or an error if initialization fails\n- Description: Initializes the server, sets up the listener, registers gRPC services, and starts serving requests in a goroutine\n\nClose: [func(s *Server)] -> Properly shuts down the Server instance\n- Input: None (method receiver)\n- Output: None\n- Description: Stops the gRPC server, closes the listener, and cleans up internal resources",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl   net.Listener\n\tsrv *grpc.Server\n\ts   *server\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tsrv:  grpc.NewServer(opt...),\n\t\ts: &server{\n\t\t\ttables: make(map[string]*table),\n\t\t},\n\t}\n\tbtapb.RegisterBigtableTableAdminServer(s.srv, s.s)\n\tbtpb.RegisterBigtableServer(s.srv, s.s)\n\n\tgo s.srv.Serve(s.l)\n\n\treturn s, nil\n}\n\nfunc (s *Server) Close() {\n\ts.s.mu.Lock()\n\tif s.s.gcc != nil {\n\t\tclose(s.s.gcc)\n\t}\n\ts.s.mu.Unlock()\n\n\ts.srv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tl    net.Listener\n\tsrv  *grpc.Server\n\ts    *server\n}\n\ntype server struct{}\n\nfunc (s *server) HandleBigtableOperation(ctx context.Context, req *BigtableRequest) (*BigtableResponse, error) {\n\t// Implement Bigtable operation logic here\n\treturn &BigtableResponse{Status: \"Success\"}, nil\n}\n\nfunc NewServer(laddr string, opt ...grpc.ServerOption) (*Server, error) {\n\tlistener, err := net.Listen(\"tcp\", laddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := grpc.NewServer(opt...)\n\tserver := &server{}\n\tRegisterBigtableServiceServer(s, server)\n\treturn &Server{\n\t\tAddr: laddr,\n\t\tl:    listener,\n\t\tsrv:  s,\n\t\ts:    server,\n\t}, nil\n}\n\nfunc (s *Server) Close() {\n\ts.srv.Stop()\n\ts.l.Close()\n}\n\nfunc RegisterBigtableServiceServer(s *Server, srv *server) {\n\ts.srv.RegisterService(&bigtableServiceDesc{}, srv)\n}\n\ntype BigtableRequest struct {\n\tOperation string\n}\n\ntype BigtableResponse struct {\n\tStatus string\n}\n\ntype bigtableServiceDesc struct{}\n\nfunc (d *bigtableServiceDesc) ServiceName() string {\n\treturn \"BigtableService\"\n}"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests, supports optional TLS encryption, and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The Start function initializes and runs a gRPC server with configurable network address and TLS settings. It sets up keepalive parameters, registers the service implementation, and handles OS signals for graceful shutdown.\n\nInput:\n- addr: string - The network address (host:port) to listen on\n- enableTLS: bool - Flag to enable/disable TLS encryption\n- certificate: auth.Certificate - Certificate configuration for TLS (when enabled)\n\nOutput: None (the function runs indefinitely until a termination signal is received)",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\tpb \"github.com/ouqiang/gocron/internal/modules/rpc/proto\"\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\nfunc Start(addr string, enableTLS bool, certificate auth.Certificate) {\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepAliveParams),\n\t\tgrpc.KeepaliveEnforcementPolicy(keepAlivePolicy),\n\t}\n\tif enableTLS {\n\t\ttlsConfig, err := certificate.GetTLSConfigForServer()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\topt := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\topts = append(opts, opt)\n\t}\n\tserver := grpc.NewServer(opts...)\n\tpb.RegisterTaskServer(server, Server{})\n\tlog.Infof(\"server listen on %s\", addr)\n\n\tgo func() {\n\t\terr = server.Serve(l)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM)\n\tfor {\n\t\ts := <-c\n\t\tlog.Infoln(\"\u6536\u5230\u4fe1\u53f7 -- \", s)\n\t\tswitch s {\n\t\tcase syscall.SIGHUP:\n\t\t\tlog.Infoln(\"\u6536\u5230\u7ec8\u7aef\u65ad\u5f00\u4fe1\u53f7, \u5ffd\u7565\")\n\t\tcase syscall.SIGINT, syscall.SIGTERM:\n\t\t\tlog.Info(\"\u5e94\u7528\u51c6\u5907\u9000\u51fa\")\n\t\t\tserver.GracefulStop()\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype server struct{}\n\nfunc (s *server) SayHello(ctx context.Context, in *HelloRequest) (*HelloResponse, error) {\n\treturn &HelloResponse{Message: \"Hello \" + in.Name}, nil\n}\n\nfunc Start(addr string, enableTLS bool, certificate auth.Certificate) {\n\tlis, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tfmt.Printf(\"failed to listen: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tTime:    10 * time.Second,\n\t\t\tTimeout: 5 * time.Second,\n\t\t}),\n\t}\n\n\tvar grpcServer *grpc.Server\n\tif enableTLS {\n\t\ttlsConfig := &tls.Config{\n\t\t\tCertificates:       []tls.Certificate{certificate},\n\t\t\tMinVersion:         tls.VersionTLS12,\n\t\t\tPreferServerCipherSuites: true,\n\t\t\tCipherSuites: []uint16{\n\t\t\t\ttls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n\t\t\t\ttls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n\t\t\t\ttls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n\t\t\t\ttls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n\t\t\t},\n\t\t}\n\t\tcreds, err := credentials.NewTLS(tlsConfig)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"failed to create TLS credentials: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tgrpcServer = grpc.NewServer(append(opts, grpc.Creds(creds))...)\n\t} else {\n\t\tgrpcServer = grpc.NewServer(opts...)\n\t}\n\n\tRegisterGreeterServer(grpcServer, &server{})\n\treflection.Register(grpcServer)\n\n\tgo func() {\n\t\tif enableTLS {\n\t\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\t\tfmt.Printf(\"gRPC server failed: %v\\n\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\t\tfmt.Printf(\"gRPC server failed: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tstop := make(chan os.Signal, 1)\n\tsignal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)\n\n\t<-stop\n\tfmt.Println(\"Shutting down gRPC server...\")\n\n\tgrpcServer.GracefulStop()\n}"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: Create a gRPC test server for monitoring metrics that can handle metric descriptor creation and time series requests, while tracking user agents and request counts.\n\nStruct Description: MetricsTestServer is a gRPC server implementation for testing metric monitoring functionality. It maintains state for tracking incoming requests and user agents, and provides methods for server control and data retrieval.\n\nFields:\n- lis: net.Listener - Network listener for the gRPC server\n- srv: *grpc.Server - gRPC server instance\n- Endpoint: string - Server's network endpoint address\n- userAgent: string - Last received User-Agent header from requests\n- createMetricDescriptorReqs: []*monitoringpb.CreateMetricDescriptorRequest - Collected metric descriptor requests\n- createServiceTimeSeriesReqs: []*monitoringpb.CreateTimeSeriesRequest - Collected time series requests\n- RetryCount: int - Number of retry attempts (usage context not shown in code)\n- mu: sync.Mutex - Mutex for thread-safe access to shared fields\n\nMethods:\n- Shutdown() -> None - Gracefully stops the gRPC server\n- UserAgent() -> string - Retrieves and clears the stored User-Agent\n- CreateServiceTimeSeriesRequests() -> []*monitoringpb.CreateTimeSeriesRequest - Retrieves and clears stored time series requests\n- appendCreateMetricDescriptorReq(context.Context, *monitoringpb.CreateMetricDescriptorRequest) -> None - Thread-safe method to store metric descriptor requests\n- appendCreateServiceTimeSeriesReq(context.Context, *monitoringpb.CreateTimeSeriesRequest) -> None - Thread-safe method to store time series requests and capture User-Agent\n- Serve() -> error - Starts serving gRPC requests\n- NewMetricTestServer() -> (*MetricsTestServer, error) - Constructor that initializes the server with default keepalive parameters and registers the metric service",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"cloud.google.com/go/monitoring/apiv3/v2/monitoringpb\"\n\tmetricpb \"google.golang.org/genproto/googleapis/api/metric\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\ntype MetricsTestServer struct {\n\tlis                         net.Listener\n\tsrv                         *grpc.Server\n\tEndpoint                    string\n\tuserAgent                   string\n\tcreateMetricDescriptorReqs  []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount                  int\n\tmu                          sync.Mutex\n}\n\nfunc (m *MetricsTestServer) Shutdown() {\n\tm.srv.GracefulStop()\n}\n\nfunc (m *MetricsTestServer) UserAgent() string {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tua := m.userAgent\n\tm.userAgent = \"\"\n\treturn ua\n}\n\nfunc (m *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\treqs := m.createServiceTimeSeriesReqs\n\tm.createServiceTimeSeriesReqs = nil\n\treturn reqs\n}\n\nfunc (m *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createMetricDescriptorReqs = append(m.createMetricDescriptorReqs, req)\n}\n\nfunc (m *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.createServiceTimeSeriesReqs = append(m.createServiceTimeSeriesReqs, req)\n\tif md, ok := metadata.FromIncomingContext(ctx); ok {\n\t\tm.userAgent = strings.Join(md.Get(\"User-Agent\"), \";\")\n\t}\n}\n\nfunc (m *MetricsTestServer) Serve() error {\n\treturn m.srv.Serve(m.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tsrv := grpc.NewServer(grpc.KeepaliveParams(keepalive.ServerParameters{Time: 5 * time.Minute}))\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttestServer := &MetricsTestServer{\n\t\tEndpoint: lis.Addr().String(),\n\t\tlis:      lis,\n\t\tsrv:      srv,\n\t}\n\n\tmonitoringpb.RegisterMetricServiceServer(\n\t\tsrv,\n\t\t&fakeMetricServiceServer{metricsTestServer: testServer},\n\t)\n\n\treturn testServer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/reflection\"\n\tmonitoringpb \"path/to/your/monitoring/proto\"\n)\n\ntype MetricsTestServer struct {\n\tlis        net.Listener\n\tsrv        *grpc.Server\n\tEndpoint   string\n\tuserAgent  string\n\tcreateMetricDescriptorReqs []*monitoringpb.CreateMetricDescriptorRequest\n\tcreateServiceTimeSeriesReqs []*monitoringpb.CreateTimeSeriesRequest\n\tRetryCount int\n\tmu         sync.Mutex\n}\n\nfunc (s *MetricsTestServer) Shutdown() {\n\tif s.srv != nil {\n\t\ts.srv.Stop()\n\t}\n\tif s.lis != nil {\n\t\ts.lis.Close()\n\t}\n}\n\nfunc (s *MetricsTestServer) UserAgent() string {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tuserAgent := s.userAgent\n\ts.userAgent = \"\"\n\treturn userAgent\n}\n\nfunc (s *MetricsTestServer) CreateServiceTimeSeriesRequests() []*monitoringpb.CreateTimeSeriesRequest {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\trequests := append([]*monitoringpb.CreateTimeSeriesRequest(nil), s.createServiceTimeSeriesReqs...)\n\ts.createServiceTimeSeriesReqs = nil\n\treturn requests\n}\n\nfunc (s *MetricsTestServer) appendCreateMetricDescriptorReq(ctx context.Context, req *monitoringpb.CreateMetricDescriptorRequest) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.createMetricDescriptorReqs = append(s.createMetricDescriptorReqs, req)\n}\n\nfunc (s *MetricsTestServer) appendCreateServiceTimeSeriesReq(ctx context.Context, req *monitoringpb.CreateTimeSeriesRequest) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.createServiceTimeSeriesReqs = append(s.createServiceTimeSeriesReqs, req)\n\ts.userAgent = ctx.Value(\"user-agent\").(string)\n}\n\nfunc (s *MetricsTestServer) Serve() error {\n\tif s.srv == nil {\n\t\treturn fmt.Errorf(\"server not initialized\")\n\t}\n\tif s.lis == nil {\n\t\treturn fmt.Errorf(\"no listener provided\")\n\t}\n\treturn s.srv.Serve(s.lis)\n}\n\nfunc NewMetricTestServer() (*MetricsTestServer, error) {\n\tls, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\topts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tMaxConnectionIdle:             5 * time.Minute,\n\t\t\tMaxConnectionAge:             10 * time.Minute,\n\t\t\tMaxConnectionAgeGrace:        5 * time.Minute,\n\t\t\tTimeUntilNonZeroReceive:      5 * time.Minute,\n\t\t\tMaxReceiveMessageSize:        1024 * 1024 * 10,\n\t\t\tMaxSendMessageSize:           1024 * 1024 * 10,\n\t\t\tMaxConcurrentStreams:         100,\n\t\t\tMaxHeaderListSize:            1024 * 10,\n\t\t}),\n\t}\n\tsrv := grpc.NewServer(opts...)\n\tmonitoringpb.RegisterMetricServiceServer(srv, &MetricsTestServer{})\n\treflection.Register(srv)\n\treturn &MetricsTestServer{\n\t\tlis:        ls,\n\t\tsrv:        srv,\n\t\tEndpoint:   ls.Addr().String(),\n\t\tcreateMetricDescriptorReqs: []*monitoringpb.CreateMetricDescriptorRequest{},\n\t\tcreateServiceTimeSeriesReqs: []*monitoringpb.CreateTimeSeriesRequest{},\n\t}, nil\n}"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a mock gRPC server for OpenTelemetry traces receiver that can handle incoming trace data requests, track request metrics, and optionally use TLS for secure communication.\n\nStruct Description: The mockTracesReceiver struct implements a gRPC server for receiving OpenTelemetry trace data, tracking request counts and spans, and handling metadata. It embeds a base mockReceiver struct and implements the ptraceotlp.GRPCServer interface.\n\nFields:\n\nsrv: [*grpc.Server] - The gRPC server instance\nln: [net.Listener] - Network listener for the server\nrequestCount: [*atomic.Int32] - Counter for received requests\ntotalItems: [*atomic.Int32] - Counter for total spans received\nmux: [sync.Mutex] - Mutex for thread-safe operations\nmetadata: [metadata.MD] - Stores metadata from incoming requests\nexportError: [error] - Error to return from export operations\nexportResponse: [func() ptraceotlp.ExportResponse] - Function to generate export responses\nlastRequest: [ptrace.Traces] - Stores the last received trace data\nhasMetadata: [bool] - Flag indicating whether to process metadata\nspanCountByMetadata: [map[string]int] - Tracks span counts by metadata keys\n\nMethods:\n\nExport: [Name](ctx context.Context, req ptraceotlp.ExportRequest) -> (ptraceotlp.ExportResponse, error) - Handles incoming trace export requests, updates counters, and processes metadata\nstart: [Name]() -> () - Starts the gRPC server in a goroutine\n\nAssociated Functions:\n\notelArrowTracesReceiverOnGRPCServer: [Name](ln net.Listener, useTLS bool) -> (*mockTracesReceiver, error) - Creates and configures a new mock traces receiver with optional TLS support",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype mockReceiver struct {\n\tsrv          *grpc.Server\n\tln           net.Listener\n\trequestCount *atomic.Int32\n\ttotalItems   *atomic.Int32\n\tmux          sync.Mutex\n\tmetadata     metadata.MD\n\texportError  error\n}\n\ntype mockTracesReceiver struct {\n\tptraceotlp.UnimplementedGRPCServer\n\tmockReceiver\n\texportResponse      func() ptraceotlp.ExportResponse\n\tlastRequest         ptrace.Traces\n\thasMetadata         bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (r *mockTracesReceiver) Export(ctx context.Context, req ptraceotlp.ExportRequest) (ptraceotlp.ExportResponse, error) {\n\tr.requestCount.Add(int32(1))\n\ttd := req.Traces()\n\tr.totalItems.Add(int32(td.SpanCount()))\n\tr.mux.Lock()\n\tdefer r.mux.Unlock()\n\tr.metadata, _ = metadata.FromIncomingContext(ctx)\n\tif r.hasMetadata {\n\t\tv1 := r.metadata.Get(\"key1\")\n\t\tv2 := r.metadata.Get(\"key2\")\n\t\thashKey := fmt.Sprintf(\"%s|%s\", v1, v2)\n\t\tr.spanCountByMetadata[hashKey] += (td.SpanCount())\n\t}\n\tr.lastRequest = td\n\treturn r.exportResponse(), r.exportError\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tsopts := []grpc.ServerOption{}\n\n\tif useTLS {\n\t\t_, currentFile, _, _ := runtime.Caller(0)\n\t\tbasepath := filepath.Dir(currentFile)\n\t\tcertpath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_cert.pem\"))\n\t\tkeypath := filepath.Join(basepath, filepath.Join(\"testdata\", \"test_key.pem\"))\n\n\t\tcreds, err := credentials.NewServerTLSFromFile(certpath, keypath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsopts = append(sopts, grpc.Creds(creds))\n\t}\n\n\trcv := &mockTracesReceiver{\n\t\tmockReceiver: mockReceiver{\n\t\t\tsrv:          grpc.NewServer(sopts...),\n\t\t\tln:           ln,\n\t\t\trequestCount: &atomic.Int32{},\n\t\t\ttotalItems:   &atomic.Int32{},\n\t\t},\n\t\texportResponse: ptraceotlp.NewExportResponse,\n\t}\n\n\tptraceotlp.RegisterGRPCServer(rcv.srv, rcv)\n\n\treturn rcv, nil\n}\n\nfunc (r *mockTracesReceiver) start() {\n\tgo func() {\n\t\t_ = r.srv.Serve(r.ln)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/golang/protobuf/ptypes\"\n\t\"github.com/golang/protobuf/ptypes/any\"\n\t\"github.com/open-telemetry/opentelemetry-proto/gen/go/trace/v1\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/credentials\"\n)\n\ntype mockTracesReceiver struct {\n\tsrv        *grpc.Server\n\tln         net.Listener\n\trequestCount   *atomic.Int32\n\ttotalItems     *atomic.Int32\n\tmux           sync.Mutex\n\tmetadata      metadata.MD\n\texportError   error\n\texportResponse func() *trace.ExportResponse\n\tlastRequest   *trace.Traces\n\thasMetadata   bool\n\tspanCountByMetadata map[string]int\n}\n\nfunc (m *mockTracesReceiver) Export(ctx context.Context, req *trace.ExportRequest) (*trace.ExportResponse, error) {\n\tm.mux.Lock()\n\tdefer m.mux.Unlock()\n\n\tm.requestCount.Add(1)\n\tm.lastRequest = req\n\n\tif m.hasMetadata {\n\t\tmd, ok := metadata.FromContext(ctx)\n\t\tif ok {\n\t\t\tfor key := range md {\n\t\t\t\tm.spanCountByMetadata[key]++\n\t\t\t}\n\t\t}\n\t}\n\n\tm.totalItems.Add(int32(len(req.GetResourceSpans())))\n\n\tif m.exportError != nil {\n\t\treturn &trace.ExportResponse{}, m.exportError\n\t}\n\n\tif m.exportResponse != nil {\n\t\treturn m.exportResponse(), nil\n\t}\n\n\treturn &trace.ExportResponse{}, nil\n}\n\nfunc (m *mockTracesReceiver) start() {\n\tgo func() {\n\t\tif err := m.srv.Serve(m.ln); err != nil {\n\t\t\tfmt.Printf(\"gRPC server failed: %v\\n\", err)\n\t\t}\n\t}()\n}\n\nfunc otelArrowTracesReceiverOnGRPCServer(ln net.Listener, useTLS bool) (*mockTracesReceiver, error) {\n\tvar opts []grpc.ServerOption\n\tif useTLS {\n\t\tcert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\")\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcreds := credentials.NewTLS(&tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t})\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\tsrv := grpc.NewServer(opts...)\n\tm := &mockTracesReceiver{\n\t\tsrv:        srv,\n\t\tln:         ln,\n\t\trequestCount: &atomic.Int32{},\n\t\ttotalItems:   &atomic.Int32{},\n\t\tspanCountByMetadata: make(map[string]int),\n\t}\n\n\ttrace.RegisterTraceServiceServer(srv, m)\n\n\tgo m.start()\n\n\treturn m, nil\n}"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a gRPC server for handling OpenTelemetry Protocol (OTLP) trace data, including setup of tracing components and a bounded queue for admission control.\n\nStruct Description: The otlpReceiver struct represents a receiver for OTLP trace data over gRPC, which processes incoming traces and forwards them to the next consumer in the pipeline.\n\nFields:\n- nextConsumer: consumer.Traces - The next trace consumer in the processing pipeline\n- obsrecv: *receiverhelper.ObsReport - Observability reporter for receiver metrics\n- bq: *admission2.BoundedQueue - Bounded queue for admission control of incoming requests\n\nMethods:\n- New: (logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) -> *otlpReceiver - Constructor function that creates a new otlpReceiver instance\n- otlpReceiverOnGRPCServer: (t *testing.T, tc consumer.Traces) -> (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) - Sets up and starts a gRPC server with OTLP trace receiver capabilities, returning the server address, in-memory exporter, and tracer provider for testing purposes",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"go.opentelemetry.io/collector/receiver/receivertest\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace/ptraceotlp\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\tln, err := net.Listen(\"tcp\", \"localhost:\")\n\trequire.NoError(t, err, \"Failed to find an available address to run the gRPC server: %v\", err)\n\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, ln.Close())\n\t})\n\n\texp := tracetest.NewInMemoryExporter()\n\n\ttp := trace.NewTracerProvider(trace.WithSyncer(exp))\n\ttelset := componenttest.NewNopTelemetrySettings()\n\ttelset.TracerProvider = tp\n\n\tset := receivertest.NewNopSettings()\n\tset.TelemetrySettings = telset\n\n\tset.ID = component.NewIDWithName(component.MustNewType(\"otlp\"), \"trace\")\n\tobsrecv, err := receiverhelper.NewObsReport(receiverhelper.ObsReportSettings{\n\t\tReceiverID:             set.ID,\n\t\tTransport:              \"grpc\",\n\t\tReceiverCreateSettings: set,\n\t})\n\trequire.NoError(t, err)\n\tbq, err := admission2.NewBoundedQueue(set.ID, telset, maxBytes, 0)\n\trequire.NoError(t, err)\n\tr := New(zap.NewNop(), tc, obsrecv, bq)\n\tsrv := grpc.NewServer()\n\tptraceotlp.RegisterGRPCServer(srv, r)\n\tgo func() {\n\t\t_ = srv.Serve(ln)\n\t}()\n\n\treturn ln.Addr(), exp, tp\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/exporters/otlp\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpgrpc\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/sdk/trace/tracetest\"\n\t\"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/test/bufconn\"\n)\n\ntype otlpReceiver struct {\n\tnextConsumer consumer.Traces\n\tobsrecv      *receiverhelper.ObsReport\n\tbq           *admission2.BoundedQueue\n}\n\nfunc New(logger *zap.Logger, nextConsumer consumer.Traces, obsrecv *receiverhelper.ObsReport, bq *admission2.BoundedQueue) *otlpReceiver {\n\treturn &otlpReceiver{\n\t\tnextConsumer: nextConsumer,\n\t\tobsrecv:      obsrecv,\n\t\tbq:           bq,\n\t}\n}\n\nfunc (r *otlpReceiver) otlpReceiverOnGRPCServer(t *testing.T, tc consumer.Traces) (net.Addr, *tracetest.InMemoryExporter, *trace.TracerProvider) {\n\tlisten, _ := net.Listen(\"tcp\", \"localhost:0\")\n\taddr := listen.Addr()\n\tserver := grpc.NewServer()\n\tlis := bufconn.Listen(1024 * 1024)\n\tsrv := grpc.NewServer()\n\totlpServer := otlp.NewServer(\n\t\totlp.WithEndpoint(\"localhost:0\"),\n\t\totlp.WithGRPCServer(srv),\n\t\totlp.WithHeaders(map[string]string{\"Authorization\": \"Bearer token\"}),\n\t)\n\totlpServer.RegisterTraceServiceServer(srv, &traceServer{})\n\tgo func() {\n\t\t_ = srv.Serve(lis)\n\t}()\n\tdefer srv.Stop()\n\n\texporter, _ := otlp.NewExporter(\n\t\totlp.WithEndpoint(\"localhost:0\"),\n\t\totlp.WithHeaders(map[string]string{\"Authorization\": \"Bearer token\"}),\n\t)\n\ttp := trace.NewTracerProvider(trace.WithBatcher(exporter))\n\totel.SetTracerProvider(tp)\n\tinMemExp := tracetest.NewInMemoryExporter()\n\ttp = trace.NewTracerProvider(trace.WithBatcher(inMemExp))\n\totel.SetTracerProvider(tp)\n\n\treturn addr, inMemExp, tp\n}"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Create a gRPC server for a translation service that can handle text translation requests and return mock translations for testing purposes.\n\nStruct Description: The fakeTranslationServer struct implements a mock gRPC server for the TranslationService, providing a simple translation response without requiring an actual translation service.\n\nFields:\n- UnimplementedTranslationServiceServer: embed - Base type from translatepb package that provides default implementations for all service methods\n\nMethods:\n- TranslateText: [Name](ctx context.Context, req *translatepb.TranslateTextRequest) -> (*translatepb.TranslateTextResponse, error) - Handles translation requests by returning a mock response containing \"Hello World\" as the translated text",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\ttranslate \"cloud.google.com/go/translate/apiv3\"\n\t\"cloud.google.com/go/translate/apiv3/translatepb\"\n\t\"google.golang.org/api/option\"\n)\n\ntype fakeTranslationServer struct {\n\ttranslatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n\tresp := &translatepb.TranslateTextResponse{\n\t\tTranslations: []*translatepb.Translation{\n\t\t\t{TranslatedText: \"Hello World\"},\n\t\t},\n\t}\n\treturn resp, nil\n}\n\nfunc TestTranslateTextWithConcreteClient(t *testing.T) {\n\tctx := context.Background()\n\n\tfakeTranslationServer := &fakeTranslationServer{}\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tgsrv := grpc.NewServer()\n\ttranslatepb.RegisterTranslationServiceServer(gsrv, fakeTranslationServer)\n\tfakeServerAddr := l.Addr().String()\n\tgo func() {\n\t\tif err := gsrv.Serve(l); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tclient, err := translate.NewTranslationClient(ctx,\n\t\toption.WithEndpoint(fakeServerAddr),\n\t\toption.WithoutAuthentication(),\n\t\toption.WithGRPCDialOption(grpc.WithInsecure()),\n\t)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n\n\ttranslatepb \"path/to/your/translatepb\"\n)\n\ntype fakeTranslationServer struct {\n\ttranslatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n\treturn &translatepb.TranslateTextResponse{\n\t\tTranslatedText: \"Hello World\",\n\t}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\ttranslatepb.RegisterTranslationServiceServer(s, &fakeTranslationServer{})\n\treflection.Register(s)\n\tlog.Println(\"Server is running on port 50051\")\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Create a gRPC server in Go that implements an echo service and health checking functionality. The server should listen on a specified port, handle incoming gRPC requests, and periodically toggle its health status between SERVING and NOT_SERVING states.\n\nFunction Description: The main function sets up a gRPC server with echo service and health check capabilities. It creates a TCP listener, initializes the gRPC server, registers services, and starts serving requests. A background goroutine periodically changes the health status for demonstration purposes.\n\nInput:\n- port (int): The TCP port number on which the server should listen\n- sleep (time.Duration): The interval at which health status should toggle\n\nOutput:\n- None (the function runs indefinitely until interrupted or encounters an error)\n- Errors are logged if they occur during server setup or operation\n\nNote: The function uses package-level variables for port and sleep duration (typically set via command-line flags) and assumes the existence of an echoServer struct that implements the Echo service interface.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n\t\"google.golang.org/grpc/health\"\n\thealthgrpc \"google.golang.org/grpc/health/grpc_health_v1\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\thealthcheck := health.NewServer()\n\thealthgrpc.RegisterHealthServer(s, healthcheck)\n\tpb.RegisterEchoServer(s, &echoServer{})\n\n\tgo func() {\n\t\tnext := healthpb.HealthCheckResponse_SERVING\n\n\t\tfor {\n\t\t\thealthcheck.SetServingStatus(system, next)\n\n\t\t\tif next == healthpb.HealthCheckResponse_SERVING {\n\t\t\t\tnext = healthpb.HealthCheckResponse_NOT_SERVING\n\t\t\t} else {\n\t\t\t\tnext = healthpb.HealthCheckResponse_SERVING\n\t\t\t}\n\n\t\t\ttime.Sleep(*sleep)\n\t\t}\n\t}()\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/health\"\n\t\"google.golang.org/grpc/health/grpc_health_v1\"\n)\n\nvar port int\nvar sleep time.Duration\n\ntype echoServer struct{}\n\nfunc (s *echoServer) Echo(ctx context.Context, in *EchoRequest) (*EchoResponse, error) {\n\treturn &EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer()\n\tgrpc_health_v1.RegisterHealthServer(s, health.NewServer())\n\tRegisterEchoServer(s, &echoServer{})\n\n\tgo func() {\n\t\tfor {\n\t\t\thealth.SetServingStatus(\"echo_service\", grpc_health_v1.HealthCheckResponse_SERVING)\n\t\t\ttime.Sleep(sleep)\n\t\t\thealth.SetServingStatus(\"echo_service\", grpc_health_v1.HealthCheckResponse_NOT_SERVING)\n\t\t\ttime.Sleep(sleep)\n\t\t}\n\t}()\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a gRPC server in Go that provides a simple key-value store service with various RPC methods for setting, getting, and streaming items.\n\nStruct Description: The intStoreServer struct implements a gRPC server for a key-value store service, handling item storage and retrieval operations through different RPC patterns (unary, server streaming, client streaming, and bidirectional streaming).\n\nFields:\nAddr: string - The network address where the server is listening\nl: net.Listener - The network listener for incoming connections\ngsrv: *grpc.Server - The gRPC server instance\nitems: map[string]int32 - The internal storage for key-value pairs\n\nMethods:\nnewIntStoreServer: () -> *intStoreServer - Creates and starts a new server instance on an available port\nstop: () -> () - Gracefully shuts down the server\nSet: (context.Context, *pb.Item) -> (*pb.SetResponse, error) - Unary RPC to set a key-value pair\nsetItem: (*pb.Item) -> int32 - Internal helper method to store an item\nGet: (context.Context, *pb.GetRequest) -> (*pb.Item, error) - Unary RPC to retrieve a value by key\nListItems: (*pb.ListItemsRequest, pb.IntStore_ListItemsServer) -> error - Server streaming RPC to list items matching criteria\nSetStream: (pb.IntStore_SetStreamServer) -> error - Client streaming RPC to set multiple items\nStreamChat: (pb.IntStore_StreamChatServer) -> error - Bidirectional streaming RPC for chat-like communication",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"cloud.google.com/go/rpcreplay/proto/intstore\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype intStoreServer struct {\n\tpb.IntStoreServer\n\n\tAddr string\n\tl    net.Listener\n\tgsrv *grpc.Server\n\n\titems map[string]int32\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\tl, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts := &intStoreServer{\n\t\tAddr: l.Addr().String(),\n\t\tl:    l,\n\t\tgsrv: grpc.NewServer(),\n\t}\n\tpb.RegisterIntStoreServer(s.gsrv, s)\n\tgo s.gsrv.Serve(s.l)\n\treturn s\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.gsrv.Stop()\n\ts.l.Close()\n}\n\nfunc (s *intStoreServer) Set(_ context.Context, item *pb.Item) (*pb.SetResponse, error) {\n\told := s.setItem(item)\n\treturn &pb.SetResponse{PrevValue: old}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *pb.Item) int32 {\n\tif s.items == nil {\n\t\ts.items = map[string]int32{}\n\t}\n\told := s.items[item.Name]\n\ts.items[item.Name] = item.Value\n\treturn old\n}\n\nfunc (s *intStoreServer) Get(_ context.Context, req *pb.GetRequest) (*pb.Item, error) {\n\tval, ok := s.items[req.Name]\n\tif !ok {\n\t\treturn nil, status.Errorf(codes.NotFound, \"%q\", req.Name)\n\t}\n\treturn &pb.Item{Name: req.Name, Value: val}, nil\n}\n\nfunc (s *intStoreServer) ListItems(req *pb.ListItemsRequest, ss pb.IntStore_ListItemsServer) error {\n\tfor name, val := range s.items {\n\t\tif val > req.GreaterThan {\n\t\t\tif err := ss.Send(&pb.Item{Name: name, Value: val}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(ss pb.IntStore_SetStreamServer) error {\n\tn := 0\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.setItem(item)\n\t\tn++\n\t}\n\treturn ss.SendAndClose(&pb.Summary{Count: int32(n)})\n}\n\nfunc (s *intStoreServer) StreamChat(ss pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\titem, err := ss.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := ss.Send(item); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\ntype item struct {\n\tKey   string\n\tValue int32\n}\n\ntype intStoreServer struct {\n\tAddr    string\n\tl       net.Listener\n\tgsrv    *grpc.Server\n\titems   map[string]int32\n\tmu      sync.RWMutex\n}\n\nfunc newIntStoreServer() *intStoreServer {\n\taddr := \":50051\"\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tgsrv := grpc.NewServer()\n\t// Register the service\n\tpb.RegisterIntStoreServer(gsrv, &intStoreServer{\n\t\tAddr:  addr,\n\t\tl:     l,\n\t\tgsrv:  gsrv,\n\t\titems: make(map[string]int32),\n\t})\n\treflection.Register(gsrv)\n\treturn &intStoreServer{\n\t\tAddr:  addr,\n\t\tl:     l,\n\t\tgsrv:  gsrv,\n\t\titems: make(map[string]int32),\n\t}\n}\n\nfunc (s *intStoreServer) stop() {\n\ts.l.Close()\n\ts.gsrv.Stop()\n}\n\nfunc (s *intStoreServer) Set(ctx context.Context, in *pb.Item) (*pb.SetResponse, error) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\ts.items[in.Key] = in.Value\n\treturn &pb.SetResponse{Success: true}, nil\n}\n\nfunc (s *intStoreServer) setItem(item *pb.Item) int32 {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tif val, ok := s.items[item.Key]; ok {\n\t\treturn val\n\t}\n\treturn 0\n}\n\nfunc (s *intStoreServer) Get(ctx context.Context, in *pb.GetRequest) (*pb.Item, error) {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tval, ok := s.items[in.Key]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"key not found\")\n\t}\n\treturn &pb.Item{Key: in.Key, Value: val}, nil\n}\n\nfunc (s *intStoreServer) ListItems(stream pb.IntStore_ListItemsServer) error {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\tfor key, value := range s.items {\n\t\titem := &pb.Item{Key: key, Value: value}\n\t\tif err := stream.Send(item); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *intStoreServer) SetStream(stream pb.IntStore_SetStreamServer) error {\n\tfor {\n\t\titem, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.mu.Lock()\n\t\ts.items[item.Key] = item.Value\n\t\ts.mu.Unlock()\n\t}\n}\n\nfunc (s *intStoreServer) StreamChat(stream pb.IntStore_StreamChatServer) error {\n\tfor {\n\t\tin, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif in == nil {\n\t\t\tcontinue\n\t\t}\n\t\tif err := stream.Send(in); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 302,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages in different modes (Sync, Async, OneWay) and support delayed messages.\n\nFunction Description: The following functions provide different ways to send messages to RocketMQ brokers. The producer must be initialized before sending messages.\n\nInput: \n- ctx: context.Context - Context for controlling the message sending process\n- topic: string - The topic to which the message will be sent\n- body: []byte - The message body/content\n- tag: string (for delay message) - Message tag for filtering\n- keys: []string (for delay message) - Message keys for filtering\n- delayLevel: int (for delay message) - Delay level for delayed messages\n- callback: func(ctx context.Context, result *primitive.SendResult, err error) (for async message) - Callback function for async message sending\n\nOutput:\n- error: For OneWay and Async modes, returns error if sending fails\n- (*primitive.SendResult, error): For Sync mode, returns send result and potential error\n- (*primitive.SendResult, error): For delayed sync message, returns send result and potential error\n\nMethods:\n\ninitProducer: () -> error - Initializes the RocketMQ producer with default configuration\n\nsendOneWayMessage: (ctx context.Context, topic string, body []byte) -> error - Sends a message in OneWay mode (fire-and-forget)\n\nsendSyncMessage: (ctx context.Context, topic string, body []byte) -> (*primitive.SendResult, error) - Sends a message in Sync mode (waits for acknowledgment)\n\nsendAsyncMessage: (ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) -> error - Sends a message in Async mode (uses callback)\n\nsendDelaySyncMessage: (ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) -> (*primitive.SendResult, error) - Sends a delayed message in Sync mode",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n)\n\nvar mqProducer rocketmq.Producer\n\nfunc initProducer() error {\n\tvar err error\n\tmqProducer, err = rocketmq.NewProducer(\n\t\tproducer.WithNsResovler(primitive.NewPassthroughResolver([]string{\"172.13.3.160:9876\"})),\n\t\tproducer.WithRetry(3),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn mqProducer.Start()\n}\n\nfunc sendOneWayMessage(ctx context.Context, topic string, body []byte) error {\n\treturn mqProducer.SendOneWay(ctx, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendSyncMessage(ctx context.Context, topic string, body []byte) (*primitive.SendResult, error) {\n\treturn mqProducer.SendSync(ctx, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendAsyncMessage(ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) error {\n\treturn mqProducer.SendAsync(ctx, callback, &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t})\n}\n\nfunc sendDelaySyncMessage(ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) (*primitive.SendResult, error) {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t}\n\tmsg.WithTag(tag)\n\tmsg.WithKeys(keys)\n\tmsg.WithDelayTimeLevel(delayLevel)\n\treturn mqProducer.SendSync(ctx, msg)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 127,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"time\"\n)\n\nvar producer rocketmq.Producer\n\nfunc initProducer() error {\n\tcfg := rocketmq.NewClientConfig()\n\tcfg.Addresses = []string{\"127.0.0.1:9876\"}\n\tvar err error\n\tproducer, err = rocketmq.NewProducer(cfg)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err = producer.Start(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc sendOneWayMessage(ctx context.Context, topic string, body []byte) error {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t}\n\tif _, err := producer.SendOneWay(msg); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc sendSyncMessage(ctx context.Context, topic string, body []byte) (*primitive.SendResult, error) {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t}\n\tresult, err := producer.SendSync(msg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result, nil\n}\n\nfunc sendAsyncMessage(ctx context.Context, topic string, body []byte, callback func(ctx context.Context, result *primitive.SendResult, err error)) error {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t}\n\t_, err := producer.SendAsync(msg, func(result *primitive.SendResult, err error) {\n\t\tcallback(ctx, result, err)\n\t})\n\treturn err\n}\n\nfunc sendDelaySyncMessage(ctx context.Context, topic string, body []byte, tag string, keys []string, delayLevel int) (*primitive.SendResult, error) {\n\tmsg := &primitive.Message{\n\t\tTopic: topic,\n\t\tBody:  body,\n\t\tKeys:  keys,\n\t\tTag:   tag,\n\t}\n\tmsg.DelayLevel = delayLevel\n\tresult, err := producer.SendSync(msg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result, nil\n}"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Implement a RocketMQ producer in Go that can send messages to brokers using different modes (Sync, Async, or OneWay) with configurable options.\n\nStruct Description: The Producer struct encapsulates a RocketMQ producer client with methods for starting, closing, and sending messages. It supports configuration options and interceptors.\n\nFields:\n\n- started: bool - Indicates whether the producer has been started\n- Producer: rocketmq.Producer - The underlying RocketMQ producer instance\n- name: string - Name identifier for the producer\n- ProducerConfig: ProducerConfig - Configuration settings for the producer\n- interceptors: []primitive.Interceptor - List of interceptors for message processing\n\nMethods:\n\n- Start() -> error - Initializes and starts the RocketMQ producer with configured options\n- Close() -> error - Shuts down the producer gracefully\n- SendWithContext(ctx context.Context, msg []byte) -> error - Sends a byte array message with context\n- SendWithMsg(ctx context.Context, msg *primitive.Message) -> error - Sends a primitive.Message with context\n- SendWithResult(ctx context.Context, msg []byte, tag string) -> (*primitive.SendResult, error) - Sends a message with tag and returns send result\n- SendMsg(ctx context.Context, msg *primitive.Message) -> (*primitive.SendResult, error) - Sends a message and returns send result",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n\t\"github.com/douyu/jupiter/pkg/xlog\"\n)\n\ntype Producer struct {\n\tstarted bool\n\n\trocketmq.Producer\n\tname string\n\tProducerConfig\n\tinterceptors []primitive.Interceptor\n}\n\nfunc (pc *Producer) Start() error {\n\tif pc.started {\n\t\treturn nil\n\t}\n\n\tclient, err := rocketmq.NewProducer(\n\t\tproducer.WithGroupName(pc.Group),\n\t\tproducer.WithNameServer(pc.Addr),\n\t\tproducer.WithRetry(pc.Retry),\n\t\tproducer.WithInterceptor(pc.interceptors...),\n\t\tproducer.WithInstanceName(pc.InstanceName),\n\t\tproducer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: pc.AccessKey,\n\t\t\tSecretKey: pc.SecretKey,\n\t\t}),\n\t)\n\tif err != nil {\n\t\txlog.Jupiter().Panic(\"create producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tif err := client.Start(); err != nil {\n\t\txlog.Jupiter().Panic(\"start producer\",\n\t\t\txlog.FieldName(pc.name),\n\t\t\txlog.FieldExtMessage(pc.ProducerConfig),\n\t\t\txlog.Any(\"error\", err),\n\t\t)\n\t}\n\n\tpc.started = true\n\tpc.Producer = client\n\treturn nil\n}\n\nfunc (pc *Producer) Close() error {\n\terr := pc.Shutdown()\n\tif err != nil {\n\t\txlog.Jupiter().Warn(\"consumer close fail\", xlog.Any(\"error\", err.Error()))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\t_, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tmsg.Topic = pc.Topic\n\t_, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (pc *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tm := primitive.NewMessage(pc.Topic, msg)\n\tif tag != \"\" {\n\t\tm.WithTag(tag)\n\t}\n\n\tres, err := pc.SendSync(ctx, m)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", string(msg)))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}\n\nfunc (pc *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tres, err := pc.SendSync(ctx, msg)\n\tif err != nil {\n\t\txlog.Jupiter().Error(\"send message error\", xlog.Any(\"msg\", msg))\n\t\treturn res, err\n\t}\n\treturn res, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 127,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/apache/rocketmq-client-go/v2/producer\"\n)\n\ntype ProducerConfig struct {\n\tNameServer string\n\tProducerID string\n}\n\ntype Interceptor interface {\n\tIntercept(msg *primitive.Message) (*primitive.Message, error)\n}\n\ntype Producer struct {\n\tstarted       bool\n\tProducer      rocketmq.Producer\n\tname          string\n\tProducerConfig\n\tinterceptors []Interceptor\n}\n\nfunc (p *Producer) Start() error {\n\tif p.started {\n\t\treturn nil\n\t}\n\tp.Producer = rocketmq.NewProducer(\n\t\tproducer.WithNameServer([]string{p.NameServer}),\n\t\tproducer.WithRetry(true),\n\t\tproducer.WithGroupName(p.ProducerID),\n\t)\n\tif err := p.Producer.Start(); err != nil {\n\t\treturn err\n\t}\n\tp.started = true\n\treturn nil\n}\n\nfunc (p *Producer) Close() error {\n\tif !p.started {\n\t\treturn nil\n\t}\n\treturn p.Producer.Shutdown()\n}\n\nfunc (p *Producer) SendWithContext(ctx context.Context, msg []byte) error {\n\tm := primitive.NewMessage(p.ProducerID, msg)\n\tfor _, i := range p.interceptors {\n\t\tvar err error\n\t\tm, err = i.Intercept(m)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn p.Producer.SendSync(ctx, m)\n}\n\nfunc (p *Producer) SendWithMsg(ctx context.Context, msg *primitive.Message) error {\n\tfor _, i := range p.interceptors {\n\t\tvar err error\n\t\tmsg, err = i.Intercept(msg)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn p.Producer.SendSync(ctx, msg)\n}\n\nfunc (p *Producer) SendWithResult(ctx context.Context, msg []byte, tag string) (*primitive.SendResult, error) {\n\tm := primitive.NewMessage(p.ProducerID, msg)\n\tm.SetTags(tag)\n\tfor _, i := range p.interceptors {\n\t\tvar err error\n\t\tm, err = i.Intercept(m)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn p.Producer.Send(ctx, m)\n}\n\nfunc (p *Producer) SendMsg(ctx context.Context, msg *primitive.Message) (*primitive.SendResult, error) {\n\tfor _, i := range p.interceptors {\n\t\tvar err error\n\t\tmsg, err = i.Intercept(msg)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn p.Producer.Send(ctx, msg)\n}"
  },
  {
    "Task_id": 304,
    "Instruction": "Task Description: Implement a stock quote service that retrieves stock information from an external API and processes the response.\n\nStruct Description: The Stock struct represents a service for fetching stock quotes. It contains configuration fields for API access and implements methods to retrieve quote information.\n\nFields:\nApi: [string] - The base URL of the stock API service\nKey: [string] - The API key used for authentication with the stock service\n\nMethods:\nQuote: [Name](ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) -> [error] - Retrieves stock quote information for a given symbol. Validates the input symbol, makes an HTTP GET request to the stock API, processes the response, and populates the response object with the quote data. Returns error if any step fails.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"github.com/micro/micro/v5/service/errors\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/stock/proto\"\n)\n\ntype Stock struct {\n\tApi   string\n\tKey   string\n}\n\nfunc (s *Stock) Quote(ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) error {\n\tif len(req.Symbol) <= 0 || len(req.Symbol) > 5 {\n\t\treturn errors.BadRequest(\"stock.quote\", \"invalid symbol\")\n\t}\n\n\turi := fmt.Sprintf(\"%slast/stock/%s?apikey=%s\", s.Api, req.Symbol, s.Key)\n\n\tresp, err := http.Get(uri)\n\tif err != nil {\n\t\tlogger.Errorf(\"Failed to get quote: %v\\n\", err)\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\tdefer resp.Body.Close()\n\n\tb, _ := ioutil.ReadAll(resp.Body)\n\n\tif resp.StatusCode != 200 {\n\t\tlogger.Errorf(\"Failed to get quote (non 200): %d %v\\n\", resp.StatusCode, string(b))\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\n\tvar respBody struct {\n\t\tSymbol    string\n\t\tAsk       float64\n\t\tBid       float64\n\t\tAsize     int32\n\t\tBsize     int32\n\t\tTimestamp int64\n\t}\n\n\tif err := json.Unmarshal(b, &respBody); err != nil {\n\t\tlogger.Errorf(\"Failed to unmarshal quote: %v\\n\", err)\n\t\treturn errors.InternalServerError(\"stock.quote\", \"failed to get quote\")\n\t}\n\n\trsp.Symbol = respBody.Symbol\n\trsp.AskPrice = respBody.Ask\n\trsp.BidPrice = respBody.Bid\n\trsp.AskSize = respBody.Asize\n\trsp.BidSize = respBody.Bsize\n\trsp.Timestamp = respBody.Timestamp\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "right_result": "package stock\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype Stock struct {\n\tApi string\n\tKey string\n}\n\nfunc (s *Stock) Quote(ctx context.Context, req *pb.QuoteRequest, rsp *pb.QuoteResponse) error {\n\tif req.Symbol == \"\" {\n\t\treturn fmt.Errorf(\"empty symbol\")\n\t}\n\turl := fmt.Sprintf(\"%s/quote?symbol=%s&apikey=%s\", s.Api, req.Symbol, s.Key)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"API error: %s\", body)\n\t}\n\tvar quote map[string]interface{}\n\tif err := json.Unmarshal(body, &quote); err != nil {\n\t\treturn err\n\t}\n\trsp.Symbol = req.Symbol\n\tif price, ok := quote[\"price\"].(string); ok {\n\t\trsp.Price = price\n\t}\n\tif change, ok := quote[\"change\"].(string); ok {\n\t\trsp.Change = change\n\t}\n\tif dayLow, ok := quote[\"dayLow\"].(string); ok {\n\t\trsp.DayLow = dayLow\n\t}\n\tif dayHigh, ok := quote[\"dayHigh\"].(string); ok {\n\t\trsp.DayHigh = dayHigh\n\t}\n\tif volume, ok := quote[\"volume\"].(string); ok {\n\t\trsp.Volume = volume\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Implement a WorkWeiXin struct in Go that interacts with the WeChat Work API to send messages and manage authentication tokens.\n\nStruct Description: The WorkWeiXin struct represents a client for interacting with WeChat Work's API, handling authentication and message sending functionality.\n\nFields:\nCorpID: string - The corporation ID for WeChat Work authentication\nAgentID: string - The application agent ID for message sending\nCorpSecret: string - The corporation secret for authentication\nToken: string - The access token for API requests (may be empty initially)\n\nMethods:\ngetToken: () -> (string, error) - Retrieves an access token from WeChat Work API using CorpID and CorpSecret. Returns the token or an error.\nSend: (receivers []string, title string, content []byte, others ...string) -> error - Sends a markdown message to specified receivers via WeChat Work API. Handles token retrieval if needed. Returns nil on success or an error.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID     string `json:\"corpId\"`\n\tAgentID    string `json:\"agentId\"`\n\tCorpSecret string `json:\"corpSecret\"`\n\tToken      string `json:\"token\"`\n}\n\nfunc (w WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\n\treqBody := make(map[string]interface{})\n\treqBody[\"msgtype\"] = \"markdown\"\n\n\ttoUser := \"\"\n\tfor _, v := range receivers {\n\t\ttoUser = v + \"|\"\n\t}\n\treqBody[\"touser\"] = toUser\n\treqBody[\"agentid\"] = w.AgentID\n\tmarkdown := make(map[string]string)\n\tmarkdown[\"content\"] = string(content)\n\treqBody[\"markdown\"] = markdown\n\tdata, _ := json.Marshal(reqBody)\n\tbody := strings.NewReader(string(data))\n\treq, err := http.NewRequest(\n\t\thttp.MethodPost,\n\t\tfmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s\", w.Token),\n\t\tbody,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json;charset=utf-8\")\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn nil\n\t\t} else {\n\t\t\treturn errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}\n\nfunc (w WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tre, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t} else {\n\t\tresult := make(map[string]interface{})\n\t\tif err := json.Unmarshal([]byte(re), &result); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif result[\"errcode\"].(float64) == 0 {\n\t\t\treturn result[\"access_token\"].(string), nil\n\t\t} else {\n\t\t\treturn \"\", errors.New(result[\"errmsg\"].(string))\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype WorkWeiXin struct {\n\tCorpID    string\n\tAgentID   string\n\tCorpSecret string\n\tToken     string\n}\n\nfunc (w *WorkWeiXin) getToken() (string, error) {\n\turl := fmt.Sprintf(\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=%s&corpsecret=%s\", w.CorpID, w.CorpSecret)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tvar result map[string]interface{}\n\tjson.Unmarshal(body, &result)\n\ttoken, ok := result[\"access_token\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"failed to get access token\")\n\t}\n\tw.Token = token\n\treturn token, nil\n}\n\nfunc (w *WorkWeiXin) Send(receivers []string, title string, content []byte, others ...string) error {\n\tif w.Token == \"\" {\n\t\ttoken, err := w.getToken()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tw.Token = token\n\t}\n\turl := \"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=\" + w.Token\n\tmsg := map[string]interface{}{\n\t\t\"touser\":   receivers,\n\t\t\"toparty\":  others,\n\t\t\"msgtype\":  \"markdown\",\n\t\t\"agentid\":  w.AgentID,\n\t\t\"markdown\": map[string]interface{}{\n\t\t\t\"content\": string(content),\n\t\t},\n\t\t\"enable_id_card\": true,\n\t}\n\tif title != \"\" {\n\t\tmsg[\"title\"] = title\n\t}\n\tjsonData, _ := json.Marshal(msg)\n\tresp, err := http.Post(url, \"application/json\", bytes.NewBuffer(jsonData))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tif resp.StatusCode != 200 {\n\t\treturn fmt.Errorf(\"API request failed: %s\", body)\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a RabbitMQ consumer in Go that connects to a RabbitMQ server, declares necessary exchanges and queues, binds them, and consumes messages from the queue. The consumer should be able to gracefully shut down when requested.\n\nStruct Description: The Consumer struct represents a RabbitMQ consumer with connection and channel management capabilities. It handles the lifecycle of consuming messages from a RabbitMQ queue and provides shutdown functionality.\n\nFields:\n- conn: *amqp.Connection - The connection to the RabbitMQ server\n- channel: *amqp.Channel - The communication channel for RabbitMQ operations\n- tag: string - The consumer tag for identifying this consumer\n- done: chan error - Channel for signaling when the consumer has finished shutting down\n\nMethods:\n- NewConsumer: (amqpURI string, exchange string, exchangeType string, queueName string, key string, ctag string) -> (*Consumer, error) - Creates a new Consumer instance, establishes connection, declares exchange and queue, binds them, and starts consuming messages\n- Shutdown: () -> error - Gracefully shuts down the consumer by canceling consumption and closing the connection\n- handle: (deliveries <-chan amqp.Delivery, done chan error) -> () - Internal method for processing incoming messages (note: this is not exported as it starts with lowercase)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n)\n\ntype Consumer struct {\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\ttag     string\n\tdone    chan error\n}\n\nfunc NewConsumer(amqpURI, exchange, exchangeType, queueName, key, ctag string) (*Consumer, error) {\n\tc := &Consumer{\n\t\tconn:    nil,\n\t\tchannel: nil,\n\t\ttag:     ctag,\n\t\tdone:    make(chan error),\n\t}\n\n\tvar err error\n\n\tlog.Printf(\"dialing %q\", amqpURI)\n\tc.conn, err = amqp.Dial(amqpURI)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Dial: %s\", err)\n\t}\n\n\tgo func() {\n\t\tfmt.Printf(\"closing: %s\", <-c.conn.NotifyClose(make(chan *amqp.Error)))\n\t}()\n\n\tlog.Printf(\"got Connection, getting Channel\")\n\tc.channel, err = c.conn.Channel()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Channel: %s\", err)\n\t}\n\n\tlog.Printf(\"got Channel, declaring Exchange (%q)\", exchange)\n\tif err = c.channel.ExchangeDeclare(\n\t\texchange,\n\t\texchangeType,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"Exchange Declare: %s\", err)\n\t}\n\n\tlog.Printf(\"declared Exchange, declaring Queue %q\", queueName)\n\tqueue, err := c.channel.QueueDeclare(\n\t\tqueueName,\n\t\ttrue,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Queue Declare: %s\", err)\n\t}\n\n\tlog.Printf(\"declared Queue (%q %d messages, %d consumers), binding to Exchange (key %q)\",\n\t\tqueue.Name, queue.Messages, queue.Consumers, key)\n\n\tif err = c.channel.QueueBind(\n\t\tqueue.Name,\n\t\tkey,\n\t\texchange,\n\t\tfalse,\n\t\tnil,\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"Queue Bind: %s\", err)\n\t}\n\n\tlog.Printf(\"Queue bound to Exchange, starting Consume (consumer tag %q)\", c.tag)\n\tdeliveries, err := c.channel.Consume(\n\t\tqueue.Name,\n\t\tc.tag,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Queue Consume: %s\", err)\n\t}\n\n\tgo handle(deliveries, c.done)\n\n\treturn c, nil\n}\n\nfunc (c *Consumer) Shutdown() error {\n\tif err := c.channel.Cancel(c.tag, true); err != nil {\n\t\treturn fmt.Errorf(\"Consumer cancel failed: %s\", err)\n\t}\n\n\tif err := c.conn.Close(); err != nil {\n\t\treturn fmt.Errorf(\"AMQP connection close error: %s\", err)\n\t}\n\n\treturn <-c.done\n}\n\nfunc handle(deliveries <-chan amqp.Delivery, done chan error) {\n\tfor d := range deliveries {\n\t\tlog.Printf(\n\t\t\t\"got %dB delivery: [%v] %q\",\n\t\t\tlen(d.Body),\n\t\t\td.DeliveryTag,\n\t\t\td.Body,\n\t\t)\n\t\td.Ack(false)\n\t}\n\tdone <- nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 122,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"sync\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Consumer struct {\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\ttag     string\n\tdone    chan error\n\tmu      sync.Mutex\n}\n\nfunc NewConsumer(amqpURI, exchange, exchangeType, queueName, key, ctag string) (*Consumer, error) {\n\tconn, err := amqp.Dial(amqpURI)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect to RabbitMQ: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\tchannel, err := conn.Channel()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open a channel: %w\", err)\n\t}\n\n\tif err = channel.ExchangeDeclare(\n\t\texchange, exchangeType, true, false, false, false, nil,\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to declare an exchange: %w\", err)\n\t}\n\n\tqueue, err := channel.QueueDeclare(\n\t\tqueueName, true, false, false, false, nil,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to declare a queue: %w\", err)\n\t}\n\n\tif err = channel.QueueBind(\n\t\tqueue.Name, key, exchange, false, nil,\n\t); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to bind queue: %w\", err)\n\t}\n\n\tconsumerTag, err := channel.Consume(\n\t\tqueue.Name, ctag, false, false, false, false, nil,\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to register consumer: %w\", err)\n\t}\n\n\tdone := make(chan error, 1)\n\tc := &Consumer{\n\t\tconn:   conn,\n\t\tchannel: channel,\n\t\ttag:    consumerTag.ConsumerTag,\n\t\tdone:   done,\n\t}\n\n\tgo c.handle(consumerTag.Deliveries, done)\n\n\treturn c, nil\n}\n\nfunc (c *Consumer) Shutdown() error {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif c.done == nil {\n\t\treturn nil\n\t}\n\n\tif err := c.channel.Cancel(c.tag, true); err != nil {\n\t\treturn fmt.Errorf(\"failed to cancel consumer: %w\", err)\n\t}\n\n\tclose(c.done)\n\tif err := c.conn.Close(); err != nil {\n\t\treturn fmt.Errorf(\"failed to close connection: %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc (c *Consumer) handle(deliveries <-chan amqp.Delivery, done chan error) {\n\tfor d := range deliveries {\n\t\tlog.Printf(\"Received message: %s\", d.Body)\n\t\td.Ack(false)\n\t}\n\tdone <- nil\n}"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Create a robust RabbitMQ producer in Go that handles connection management, channel initialization, and message publishing with automatic reconnection capabilities.\n\nStruct Description: The Session struct represents a RabbitMQ producer session that maintains connection state and provides message publishing functionality with automatic reconnection.\n\nFields:\n- name: string - The name of the queue to publish to\n- logger: *log.Logger - Logger for session events\n- connection: *amqp.Connection - RabbitMQ connection object\n- channel: *amqp.Channel - RabbitMQ channel object\n- done: chan bool - Channel to signal shutdown\n- notifyConnClose: chan *amqp.Error - Channel for connection close notifications\n- notifyChanClose: chan *amqp.Error - Channel for channel close notifications\n- notifyConfirm: chan amqp.Confirmation - Channel for publish confirmations\n- isReady: bool - Flag indicating if session is ready to publish\n\nMethods:\n- New(name string, addr string) -> *Session - Creates a new Session instance and starts connection management\n- handleReconnect(addr string) - Manages reconnection logic in a goroutine\n- connect(addr string) -> (*amqp.Connection, error) - Establishes connection to RabbitMQ server\n- handleReInit(conn *amqp.Connection) -> bool - Handles channel reinitialization after connection\n- init(conn *amqp.Connection) -> error - Initializes channel and declares queue\n- changeConnection(connection *amqp.Connection) - Updates connection and sets up close notifications\n- changeChannel(channel *amqp.Channel) - Updates channel and sets up close/confirm notifications\n- Push(data []byte) -> error - Safely publishes message with retry logic\n- UnsafePush(data []byte) -> error - Publishes message without safety checks (used internally)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n)\n\ntype Session struct {\n\tname            string\n\tlogger          *log.Logger\n\tconnection      *amqp.Connection\n\tchannel         *amqp.Channel\n\tdone            chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n}\n\nfunc New(name string, addr string) *Session {\n\tsession := Session{\n\t\tlogger: log.New(os.Stdout, \"\", log.LstdFlags),\n\t\tname:   name,\n\t\tdone:   make(chan bool),\n\t}\n\tgo session.handleReconnect(addr)\n\treturn &session\n}\n\nfunc (session *Session) handleReconnect(addr string) {\n\tfor {\n\t\tsession.isReady = false\n\t\tlog.Println(\"Attempting to connect\")\n\n\t\tconn, err := session.connect(addr)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to connect. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tif done := session.handleReInit(conn); done {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (session *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsession.changeConnection(conn)\n\tlog.Println(\"Connected!\")\n\treturn conn, nil\n}\n\nfunc (session *Session) handleReInit(conn *amqp.Connection) bool {\n\tfor {\n\t\tsession.isReady = false\n\n\t\terr := session.init(conn)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Failed to initialize channel. Retrying...\")\n\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn true\n\t\t\tcase <-time.After(2 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tselect {\n\t\tcase <-session.done:\n\t\t\treturn true\n\t\tcase <-session.notifyConnClose:\n\t\t\tlog.Println(\"Connection closed. Reconnecting...\")\n\t\t\treturn false\n\t\tcase <-session.notifyChanClose:\n\t\t\tlog.Println(\"Channel closed. Re-running init...\")\n\t\t}\n\t}\n}\n\nfunc (session *Session) init(conn *amqp.Connection) error {\n\tch, err := conn.Channel()\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ch.Confirm(false)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = ch.QueueDeclare(\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tfalse,\n\t\tnil,\n\t)\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsession.changeChannel(ch)\n\tsession.isReady = true\n\tlog.Println(\"Setup!\")\n\n\treturn nil\n}\n\nfunc (session *Session) changeConnection(connection *amqp.Connection) {\n\tsession.connection = connection\n\tsession.notifyConnClose = make(chan *amqp.Error)\n\tsession.connection.NotifyClose(session.notifyConnClose)\n}\n\nfunc (session *Session) changeChannel(channel *amqp.Channel) {\n\tsession.channel = channel\n\tsession.notifyChanClose = make(chan *amqp.Error)\n\tsession.notifyConfirm = make(chan amqp.Confirmation, 1)\n\tsession.channel.NotifyClose(session.notifyChanClose)\n\tsession.channel.NotifyPublish(session.notifyConfirm)\n}\n\nfunc (session *Session) Push(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"failed to push: not connected\")\n\t}\n\tfor {\n\t\terr := session.UnsafePush(data)\n\t\tif err != nil {\n\t\t\tsession.logger.Println(\"Push failed. Retrying...\")\n\t\t\tselect {\n\t\t\tcase <-session.done:\n\t\t\t\treturn errors.New(\"session is shutting down\")\n\t\t\tcase <-time.After(5 * time.Second):\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tselect {\n\t\tcase confirm := <-session.notifyConfirm:\n\t\t\tif confirm.Ack {\n\t\t\t\tsession.logger.Println(\"Push confirmed!\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\tcase <-time.After(5 * time.Second):\n\t\t}\n\t\tsession.logger.Println(\"Push didn't confirm. Retrying...\")\n\t}\n}\n\nfunc (session *Session) UnsafePush(data []byte) error {\n\tif !session.isReady {\n\t\treturn errors.New(\"not connected to a server\")\n\t}\n\treturn session.channel.Publish(\n\t\t\"\",\n\t\tsession.name,\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        data,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Session struct {\n\tname           string\n\tlogger         *log.Logger\n\tconnection     *amqp.Connection\n\tchannel        *amqp.Channel\n\tdone           chan bool\n\tnotifyConnClose chan *amqp.Error\n\tnotifyChanClose chan *amqp.Error\n\tnotifyConfirm   chan amqp.Confirmation\n\tisReady         bool\n}\n\nfunc New(name string, addr string) *Session {\n\tsession := &Session{\n\t\tname:           name,\n\t\tlogger:         log.New(log.Writer(), \"RABBITMQ: \", log.LstdFlags),\n\t\tdone:           make(chan bool),\n\t\tnotifyConnClose: make(chan *amqp.Error),\n\t\tnotifyChanClose: make(chan *amqp.Error),\n\t\tnotifyConfirm:   make(chan amqp.Confirmation),\n\t}\n\tsession.handleReconnect(addr)\n\treturn session\n}\n\nfunc (s *Session) handleReconnect(addr string) {\n\tgo func() {\n\t\tfor {\n\t\t\tconn, err := s.connect(addr)\n\t\t\tif err != nil {\n\t\t\t\ts.logger.Printf(\"Failed to connect: %v\", err)\n\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.changeConnection(conn)\n\t\t\tif err := s.init(conn); err != nil {\n\t\t\t\ts.logger.Printf(\"Failed to initialize channel: %v\", err)\n\t\t\t\tconn.Close()\n\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.logger.Println(\"Connected and initialized\")\n\t\t\tbreak\n\t\t}\n\t}()\n}\n\nfunc (s *Session) connect(addr string) (*amqp.Connection, error) {\n\tconn, err := amqp.Dial(addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconn.NotifyClose(s.notifyConnClose)\n\treturn conn, nil\n}\n\nfunc (s *Session) handleReInit(conn *amqp.Connection) bool {\n\tchannel, err := conn.Channel()\n\tif err != nil {\n\t\ts.logger.Printf(\"Failed to create channel: %v\", err)\n\t\treturn false\n\t}\n\tchannel.NotifyClose(s.notifyChanClose)\n\tchannel.NotifyPublish(s.notifyConfirm)\n\tif err := s.init(conn); err != nil {\n\t\ts.logger.Printf(\"Failed to initialize channel: %v\", err)\n\t\tchannel.Close()\n\t\treturn false\n\t}\n\ts.changeChannel(channel)\n\treturn true\n}\n\nfunc (s *Session) init(conn *amqp.Connection) error {\n\tchannel, err := conn.Channel()\n\tif err != nil {\n\t\treturn err\n\t}\n\tchannel.NotifyClose(s.notifyChanClose)\n\tchannel.NotifyPublish(s.notifyConfirm)\n\tif _, err := channel.QueueDeclare(\n\t\ts.name, // name\n\t\tfalse,  // durable\n\t\tfalse,  // delete when unused\n\t\tfalse,  // exclusive\n\t\tfalse,  // no-wait\n\t\tnil,    // arguments\n\t); err != nil {\n\t\tchannel.Close()\n\t\treturn err\n\t}\n\ts.isReady = true\n\treturn nil\n}\n\nfunc (s *Session) changeConnection(conn *amqp.Connection) {\n\ts.connection = conn\n}\n\nfunc (s *Session) changeChannel(channel *amqp.Channel) {\n\ts.channel = channel\n}\n\nfunc (s *Session) Push(data []byte) error {\n\tif !s.isReady {\n\t\treturn fmt.Errorf(\"session not ready\")\n\t}\n\tfor i := 0; i < 3; i++ {\n\t\terr := s.UnsafePush(data)\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t\ts.logger.Printf(\"Message publish failed, retrying... %d/%d\", i+1, 3)\n\t\ttime.Sleep(time.Second * 1)\n\t}\n\treturn fmt.Errorf(\"failed to publish message after retries\")\n}\n\nfunc (s *Session) UnsafePush(data []byte) error {\n\tif !s.isReady {\n\t\treturn fmt.Errorf(\"session not ready\")\n\t}\n\tif err := s.channel.Publish(\n\t\t\"\",     // exchange\n\t\ts.name, // routing key\n\t\tfalse,  // mandatory\n\t\tfalse,  // immediate\n\t\tamqp.Publishing{\n\t\t\tContentType: \"application/json\",\n\t\t\tBody:        data,\n\t\t},\n\t); err != nil {\n\t\treturn err\n\t}\n\t// Wait for confirmation\n\tselect {\n\tcase <-s.notifyConfirm:\n\t\treturn nil\n\tcase <-time.After(5 * time.Second):\n\t\treturn fmt.Errorf(\"timeout waiting for confirmation\")\n\t}\n}"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Implement a RabbitMQ client in Go that handles connection management, queue declaration, and message publishing with retry logic for reliability.\n\nStruct Description: RabbitClient is a struct that encapsulates the functionality for interacting with a RabbitMQ server, including establishing connections, declaring queues, and publishing messages with automatic reconnection attempts on failures.\n\nFields:\n- url: string - The connection URL for the RabbitMQ server\n- queueName: string - The name of the queue to interact with\n- connection: *amqp.Connection - The active RabbitMQ connection\n- channel: *amqp.Channel - The channel for communication with RabbitMQ\n\nMethods:\n- Connect() -> void - Establishes connection to RabbitMQ server, creates a channel, and declares a queue with TTL and priority settings. Implements retry logic on failures.\n- PublishTgMessage(messageBag MessageBag) -> void - Publishes a message to the declared queue after JSON serialization. Implements retry logic on failures and handles reconnection.\n- Close() -> void - Properly closes the channel and connection to RabbitMQ if they exist.\n- NewRabbitClient(url string, queueName string) -> *RabbitClient - Constructor function that initializes and returns a new RabbitClient instance with established connection.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"github.com/streadway/amqp\"\n\t\"log\"\n\t\"time\"\n)\n\ntype RabbitClient struct {\n\turl\t\t\tstring\n\tqueueName\tstring\n\tconnection\t*amqp.Connection\n\tchannel\t\t*amqp.Channel\n}\n\nfunc (rc *RabbitClient) Connect() {\n\tfor {\n\t\tvar err error\n\n\t\trc.connection, err = amqp.Dial(rc.url)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't connect to rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\trc.channel, err = rc.connection.Channel()\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't create channel (connect was ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\targs := make(amqp.Table)\n\t\targs[\"x-message-ttl\"] = int32(1000 * 60 * 60 * 24 * 10)\n\t\targs[\"x-max-priority\"] = int32(255)\n\n\t\t_, err = rc.channel.QueueDeclare(\n\t\t\trc.queueName,\n\t\t\ttrue,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\targs,\n\t\t)\n\n\t\tif err != nil {\n\t\t\trc.Close()\n\t\t\tlog.Printf(\"Can't declare queue (connect, channel were ok) for rabbit %s, will retry after 1 sec: %s\\n\", rc.url, err)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tfor {\n\t\tbody, err := json.Marshal(messageBag)\n\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error marshaling a message.\")\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Printf(\"Publishing %+v ...\\n\", string(body))\n\n\t\terr = rc.channel.Publish(\n\t\t\t\"\",\n\t\t\trc.queueName,\n\t\t\tfalse,\n\t\t\tfalse,\n\t\t\tamqp.Publishing{\n\t\t\t\tDeliveryMode: amqp.Persistent,\n\t\t\t\tContentType: \"text/plain\",\n\t\t\t\tBody: body,\n\t\t\t\tPriority: messageBag.Priority,\n\t\t\t})\n\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Can't publish text '%s', will retry in 1 sec: %s\", string(body), err)\n\t\t\trc.Close()\n\t\t\trc.Connect()\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t\tcontinue\n\t\t}\n\n\t\tbreak\n\t}\n}\n\nfunc (rc *RabbitClient) Close() {\n\tif rc.channel != nil {\n\t\trc.channel.Close()\n\t}\n\tif rc.connection != nil {\n\t\trc.connection.Close()\n\t}\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\trabbit := &RabbitClient{\n\t\turl: url,\n\t\tqueueName: queueName,\n\t}\n\trabbit.Connect()\n\tlog.Println(\"Successfully connected to RabbitMQ\")\n\treturn rabbit\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype MessageBag struct {\n\tData map[string]interface{}\n}\n\ntype RabbitClient struct {\n\turl        string\n\tqueueName  string\n\tconnection *amqp.Connection\n\tchannel    *amqp.Channel\n}\n\nfunc NewRabbitClient(url string, queueName string) *RabbitClient {\n\treturn &RabbitClient{\n\t\turl:       url,\n\t\tqueueName: queueName,\n\t}\n}\n\nfunc (r *RabbitClient) Connect() {\n\tvar err error\n\tfor {\n\t\tr.connection, err = amqp.Dial(r.url)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Failed to connect to RabbitMQ: %v\", err)\n\t\ttime.Sleep(5 * time.Second)\n\t}\n\n\tr.channel, err = r.connection.Channel()\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to open a channel: %v\", err)\n\t}\n\n\terr = r.channel.Qos(1, 0, false)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to set QoS: %v\", err)\n\t}\n\n\t_, err = r.channel.QueueDeclare(\n\t\tr.queueName, // name\n\t\ttrue,        // durable\n\t\tfalse,       // delete when unused\n\t\tfalse,       // exclusive\n\t\tfalse,       // no-wait\n\t\tnil,         // arguments\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to declare a queue: %v\", err)\n\t}\n}\n\nfunc (r *RabbitClient) PublishTgMessage(messageBag MessageBag) {\n\tmessage, _ := json.Marshal(messageBag)\n\tfor {\n\t\terr := r.channel.Publish(\n\t\t\t\"\",     // exchange\n\t\t\tr.queueName, // routing key\n\t\t\tfalse,  // mandatory\n\t\t\tfalse,  // immediate\n\t\t\tamqp.Publishing{\n\t\t\t\tContentType: \"application/json\",\n\t\t\t\tBody:        message,\n\t\t\t},\n\t\t)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"Failed to publish message: %v\", err)\n\t\ttime.Sleep(5 * time.Second)\n\t}\n}\n\nfunc (r *RabbitClient) Close() {\n\tif r.channel != nil {\n\t\tif err := r.channel.Close(); err != nil {\n\t\t\tlog.Printf(\"Failed to close channel: %v\", err)\n\t\t}\n\t}\n\tif r.connection != nil {\n\t\tif err := r.connection.Close(); err != nil {\n\t\t\tlog.Printf(\"Failed to close connection: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that handles OAuth-based headless authentication by establishing a connection to a server, receiving authentication instructions, and returning a JWT token upon successful authentication.\n\nFunction Description: The `ssoLogin` function establishes a WebSocket connection to a specified endpoint for headless OAuth authentication. It listens for server messages, displays authentication instructions to the user, and waits for the JWT token to be returned. The function handles connection closure and interrupts gracefully.\n\nInput: \n- `endpoint` (string): The URL endpoint of the authentication server (e.g., \"https://example.com\")\n\nOutput: \n- `string`: The JWT authentication token received from the server after successful authentication. Returns an empty string if authentication fails or is interrupted.\n\nNote: The function includes proper error handling and connection cleanup, and it displays the authentication URL to the user when received from the server.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/gravitl/netmaker/logger\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc ssoLogin(endpoint string) string {\n\tvar (\n\t\tauthToken string\n\t\tinterrupt = make(chan os.Signal, 1)\n\t\turl, _    = url.Parse(endpoint)\n\t\tsocketURL = fmt.Sprintf(\"wss://%s/api/oauth/headless\", url.Host)\n\t)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tconn, _, err := websocket.DefaultDialer.Dial(socketURL, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"error connecting to endpoint \", socketURL, err.Error())\n\t}\n\tdefer conn.Close()\n\t_, msg, err := conn.ReadMessage()\n\tif err != nil {\n\t\tlog.Fatal(\"error reading from server: \", err.Error())\n\t}\n\tfmt.Printf(\"Please visit:\\n %s \\n to authenticate\\n\", string(msg))\n\tdone := make(chan struct{})\n\tdefer close(done)\n\tgo func() {\n\t\tfor {\n\t\t\tmsgType, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif msgType < 0 {\n\t\t\t\t\tdone <- struct{}{}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(err.Error(), \"normal\") {\n\t\t\t\t\tlog.Fatal(\"read error: \", err.Error())\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif msgType == websocket.CloseMessage {\n\t\t\t\tdone <- struct{}{}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif strings.Contains(string(msg), \"JWT: \") {\n\t\t\t\tauthToken = strings.TrimPrefix(string(msg), \"JWT: \")\n\t\t\t} else {\n\t\t\t\tlogger.Log(0, \"Message from server:\", string(msg))\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn authToken\n\t\tcase <-interrupt:\n\t\t\terr := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlogger.Log(0, \"write close:\", err.Error())\n\t\t\t}\n\t\t\treturn authToken\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc ssoLogin(endpoint string) string {\n\tu, err := url.Parse(endpoint)\n\tif err != nil {\n\t\tlog.Fatalf(\"Invalid endpoint URL: %v\", err)\n\t}\n\n\tconn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to server: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tdone := make(chan struct{})\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"WebSocket error: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tif string(message) == \"AUTH_URL\" {\n\t\t\t\tfmt.Println(\"Please visit the following URL to authenticate:\")\n\t\t\t\tfmt.Println(string(message))\n\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t} else if string(message) == \"AUTH_SUCCESS\" {\n\t\t\t\tfmt.Println(\"Authentication successful.\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t} else if string(message) == \"AUTH_FAILED\" {\n\t\t\t\tfmt.Println(\"Authentication failed.\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t\tos.Exit(1)\n\t\t\t} else if string(message) == \"JWT_TOKEN\" {\n\t\t\t\tfmt.Println(\"Authentication completed.\")\n\t\t\t\ttime.Sleep(2 * time.Second)\n\t\t\t\tdone <- struct{}{}\n\t\t\t}\n\t\t}\n\t}()\n\n\tselect {\n\tcase <-interrupt:\n\t\tfmt.Println(\"\\nInterrupt signal received. Closing connection...\")\n\t\tconn.WriteMessage(websocket.TextMessage, []byte(\"INTERRUPT\"))\n\t\tconn.Close()\n\t\treturn \"\"\n\tcase <-done:\n\t\treturn \"JWT_TOKEN_RECEIVED\"\n\t}\n}"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)\n\n---\n\nTask Description: Create a WebSocket client function in Go that establishes a connection to a server, sends a message, and receives a response using the Gorilla WebSocket library.\n\nFunction Description: The function `TestWebSocketClient` tests WebSocket communication by connecting to a local server, sending a predefined message, and verifying the echoed response. It handles connection establishment, message exchange, and connection cleanup.\n\nInput: \n- `t *testing.T`: Go testing framework context for assertions and logging\n- `serverPort int`: The port number where the WebSocket server is running\n\nOutput: \n- None (void function), but performs assertions to verify successful communication\n- Returns error if any step fails (handled via test assertions)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"github.com/gogf/gf/v2/frame/g\"\n\t\"github.com/gogf/gf/v2/net/ghttp\"\n\t\"github.com/gogf/gf/v2/test/gtest\"\n\t\"github.com/gogf/gf/v2/util/guid\"\n)\nfunc Test_WebSocket(t *testing.T) {\n\ts := g.Server(guid.S())\n\ts.BindHandler(\"/ws\", func(r *ghttp.Request) {\n\t\tws, err := r.WebSocket()\n\t\tif err != nil {\n\t\t\tr.Exit()\n\t\t}\n\t\tfor {\n\t\t\tmsgType, msg, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = ws.WriteMessage(msgType, msg); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t})\n\ts.SetDumpRouterMap(false)\n\ts.Start()\n\tdefer s.Shutdown()\n\n\ttime.Sleep(100 * time.Millisecond)\n\tgtest.C(t, func(t *gtest.T) {\n\t\tconn, _, err := websocket.DefaultDialer.Dial(fmt.Sprintf(\n\t\t\t\"ws://127.0.0.1:%d/ws\", s.GetListenedPort(),\n\t\t), nil)\n\t\tt.AssertNil(err)\n\t\tdefer conn.Close()\n\n\t\tmsg := []byte(\"hello\")\n\t\terr = conn.WriteMessage(websocket.TextMessage, msg)\n\t\tt.AssertNil(err)\n\n\t\tmt, data, err := conn.ReadMessage()\n\t\tt.AssertNil(err)\n\t\tt.Assert(mt, websocket.TextMessage)\n\t\tt.Assert(data, msg)\n\t})\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "import (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc TestWebSocketClient(t *testing.T) {\n\turl := fmt.Sprintf(\"ws://localhost:%d\", serverPort)\n\tconn, _, err := websocket.DefaultDialer.Dial(url, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\tmessage := \"test message\"\n\terr = conn.WriteMessage(websocket.TextMessage, []byte(message))\n\tif err != nil {\n\t\tt.Fatalf(\"failed to send message: %v\", err)\n\t}\n\n\t_, response, err := conn.ReadMessage()\n\tif err != nil {\n\t\tt.Fatalf(\"failed to read response: %v\", err)\n\t}\n\n\tif string(response) != message {\n\t\tt.Errorf(\"expected message %s, got %s\", message, string(response))\n\t}\n}"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that establishes multiple concurrent connections to a WebSocket server, maintains these connections, and handles incoming messages. The client should be able to gracefully handle connection errors and properly close connections when done.\n\nFunction Description: The function establishes WebSocket connections to a specified server endpoint with unique identifiers, maintains these connections in separate goroutines, and continuously reads incoming messages. Each connection includes user identification and authentication parameters in the URL query string.\n\nInput: \n- None (The function uses hardcoded values for demonstration, but could be modified to accept parameters like host, port, path, and connection count)\n\nOutput: \n- None (The function primarily logs its activities and errors to stdout)\n\nNote: The function runs indefinitely until 100,000 connections are established (for testing purposes), with each connection attempt spaced by 1 second. Each connection runs in its own goroutine and includes error handling for both connection establishment and message reading.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"log\"\n\t\"net/url\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\ti := 0\n\tfor {\n\t\ti++\n\t\tif i == 100000 {\n\t\t\tfmt.Println(\"\u5df2\u7ecf\u4e86\u89e310000\u4e2a\u94fe\u63a5\")\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t\tgo func(id int) {\n\t\t\tu := url.URL{Scheme: \"ws\", Host: \"127.0.0.1:8182\", Path: \"/v1/push\", RawQuery: fmt.Sprintf(\"uid=%d&sign=2&time=%d\", id, time.Now().Unix())}\n\t\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"\u94fe\u63a5\u5730\u5740%s,\u5931\u8d25\u539f\u56e0%s\", u.String(), err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer c.Close()\n\t\t\tfor {\n\t\t\t\t_, _, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"ERR_ERR_ERR_ERR_ERR_ERR_read:\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}(i)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\tconnCount := 0\n\tfor connCount < 100000 {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tu := url.URL{\n\t\t\t\tScheme: \"ws\",\n\t\t\t\tOpaque: \"example.com/path\",\n\t\t\t\tForceQuery: true,\n\t\t\t\tQuery: url.Values{\n\t\t\t\t\t\"user_id\":   []string{\"user123\"},\n\t\t\t\t\t\"auth_token\": []string{\"abc123\"},\n\t\t\t\t},\n\t\t\t}\n\t\t\tconn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Connection error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer conn.Close()\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Read error: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %s\\n\", message)\n\t\t}()\n\t\tconnCount++\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\twg.Wait()\n}"
  },
  {
    "Task_id": 342,
    "Instruction": "Task Description: Create a WebSocket client in Go that connects to a server, sends periodic messages, receives messages from the server, and handles graceful shutdown upon interruption.\n\nFunction Description: The main function establishes a WebSocket connection to a specified server, sets up message reading and writing routines, and handles interrupt signals for graceful termination. It continuously sends timestamp messages at regular intervals while concurrently listening for incoming messages from the server.\n\nInput:\n- Command line argument (flag): addr - string - WebSocket server address (e.g., \"localhost:8080\")\n- Implicit input: System interrupt signal (SIGINT)\n\nOutput:\n- Console logs: Connection status, received messages, and error messages\n- WebSocket messages: Sends timestamp messages to server and receives messages from server\n- Return value: None (program runs until interrupted)\n\nNote: The function uses goroutines for concurrent operations and channels for synchronization and interrupt handling.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tu := url.URL{Scheme: \"ws\", Host: *addr, Path: \"/echo\"}\n\tlog.Printf(\"connecting to %s\", u.String())\n\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"runtime\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar addr = flag.String(\"addr\", \"localhost:8080\", \"websocket server address\")\n\nfunc main() {\n\tflag.Parse()\n\tu, err := url.Parse(\"ws://\" + *addr)\n\tif err != nil {\n\t\tlog.Fatal(\"url parse error:\", err)\n\t}\n\n\tconn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial error:\", err)\n\t}\n\tdefer conn.Close()\n\n\tdone := make(chan struct{})\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, syscall.SIGINT, syscall.SIGTERM)\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read error:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Received: %s\\n\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(2 * time.Second)\n\tdefer ticker.Stop()\n\n\tsendTicker := time.NewTicker(2 * time.Second)\n\tdefer sendTicker.Stop()\n\n\tfor {\n\t\tselect {\n\t\tcase <-interrupt:\n\t\t\tlog.Println(\"interrupt received, shutting down...\")\n\t\t\treturn\n\t\tcase <-ticker.C:\n\t\t\tlog.Println(\"Connection is active\")\n\t\tcase <-sendTicker.C:\n\t\t\ttimestamp := time.Now().Format(time.RFC3339)\n\t\t\terr := conn.WriteMessage(websocket.TextMessage, []byte(timestamp))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write error:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"Sent timestamp: %s\\n\", timestamp)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a WebSocket client function in Go that connects to a server, sends multiple messages at random intervals, and handles incoming messages concurrently.\n\nFunction Description: The function establishes a WebSocket connection to a specified server, spawns a goroutine to continuously read incoming messages, and sends a random number of messages to the server with small delays between each send. The function should properly handle connection errors and ensure the connection is closed when done.\n\nInput:\n- i (int64): Seed value for random number generation\n- room (string): Identifier for the message room/context\n\nOutput: None (the function performs operations but doesn't return any value)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/rs/xid\"\n)\n\nfunc testClient(i int64, room string) {\n\tr := rand.New(rand.NewSource(i))\n\tconn, _, err := websocket.DefaultDialer.Dial(SERVER, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgo func() {\n\t\tfor {\n\t\t\t_ = conn.SetReadDeadline(time.Now().Add(10 * time.Second))\n\t\t\t_, _, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tdefer conn.Close()\n\n\tops := r.Intn(100)\n\tfor i := 0; i < ops; i++ {\n\t\tm := msg(r, room)\n\t\terr = conn.WriteMessage(websocket.TextMessage, m)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"err\", err)\n\t\t}\n\t\ttime.Sleep(30 * time.Millisecond)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "package main\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc connectWebSocket(i int64, room string) {\n\trand.Seed(int64(i))\n\tconn, _, err := websocket.DefaultDialer.Dial(\"ws://example.com/socket\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Handle incoming message\n\t\t}\n\t}()\n\n\tfor {\n\t\tmsg := rand.Intn(10) + 1\n\t\terr := conn.WriteMessage(websocket.TextMessage, []byte(room+\",\"+string(msg)))\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)\n\t}\n}"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: The task involves testing a WebSocket connection to a runtime service, verifying the connection establishment, message exchange, and validating the received runtime information against expected values.\n\nFunction Description: The function `TestRuntimeGetRuntime` tests the WebSocket-based communication with a runtime service. It establishes a connection, sends a request message, receives and parses the response, then validates the response contents including protocol, version, capabilities, and runtime ID.\n\nInput: \n- None (This is a test function that takes a testing.T pointer as per Go testing conventions)\n\nOutput: \n- None (The function reports errors through the testing.T parameter if any assertions fail)\n- Side effect: The test will pass if all validations succeed or fail with appropriate error messages if any checks don't match expected values",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tensureRuntimeStarted()\n\tws, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:13014/\", nil)\n\tdefer ws.Close()\n\tif err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tif err = sendJSONE(ws, &Message{\"runtime\", \"getruntime\", nil}); err != nil {\n\t\tt.Error(err.Error())\n\t}\n\tvar msg runtimeMessage\n\tvar bytes []byte\n\tif _, bytes, err = ws.ReadMessage(); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif err = json.Unmarshal(bytes, &msg); err != nil {\n\t\tt.Error(err.Error())\n\t\treturn\n\t}\n\tif msg.Protocol != \"runtime\" || msg.Command != \"runtime\" {\n\t\tt.Errorf(\"Invalid protocol (%s) or command (%s)\", msg.Protocol, msg.Command)\n\t\treturn\n\t}\n\tres := msg.Payload\n\tif res.Type != \"goflow\" {\n\t\tt.Errorf(\"Invalid protocol type: %s\\n\", res.Type)\n\t}\n\tif res.Version != \"0.4\" {\n\t\tt.Errorf(\"Invalid protocol version: %s\\n\", res.Version)\n\t}\n\tif len(res.Capabilities) != 5 {\n\t\tt.Errorf(\"Invalid number of supported capabilities: %v\\n\", res.Capabilities)\n\t}\n\tif res.Id == \"\" {\n\t\tt.Error(\"Runtime Id is empty\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "right_result": "```go\npackage runtime\n\nimport (\n\t\"testing\"\n\t\"github.com/gorilla/websocket\"\n\t\"encoding/json\"\n\t\"time\"\n)\n\nfunc TestRuntimeGetRuntime(t *testing.T) {\n\tconst (\n\t\twsURL = \"ws://localhost:8080/runtime\"\n\t)\n\n\tconn, _, err := websocket.DefaultDialer.Dial(wsURL, nil)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to connect to WebSocket: %v\", err)\n\t}\n\tdefer conn.Close()\n\n\trequest := map[string]interface{}{\n\t\t\"method\": \"GET_RUNTIME\",\n\t\t\"params\": []interface{}{},\n\t\t\"id\":     1,\n\t}\n\n\trequestJSON, _ := json.Marshal(request)\n\tif err := conn.WriteMessage(websocket.TextMessage, requestJSON); err != nil {\n\t\tt.Fatalf(\"failed to send request: %v\", err)\n\t}\n\n\t_, responseJSON, err := conn.ReadMessage()\n\tif err != nil {\n\t\tt.Fatalf(\"failed to read response: %v\", err)\n\t}\n\n\tvar response map[string]interface{}\n\tif err := json.Unmarshal(responseJSON, &response); err != nil {\n\t\tt.Fatalf(\"failed to parse response: %v\", err)\n\t}\n\n\tif response[\"error\"] != nil {\n\t\tt.Fatalf(\"runtime service returned an error: %v\", response[\"error\"])\n\t}\n\n\texpectedProtocol := \"websocket\"\n\tif response[\"protocol\"].(string) != expectedProtocol {\n\t\tt.Errorf(\"expected protocol %q, got %q\", expectedProtocol, response[\"protocol\"])\n\t}\n\n\texpectedVersion := \"1.0.0\"\n\tif response[\"version\"].(string) != expectedVersion {\n\t\tt.Errorf(\"expected version %q, got %q\", expectedVersion, response[\"version\"])\n\t}\n\n\texpectedCapabilities := []string{\"feature1\", \"feature2\"}\n\tif !equalStrings(response[\"capabilities\"].([]string), expectedCapabilities) {\n\t\tt.Errorf(\"expected capabilities %v, got %v\", expectedCapabilities, response[\"capabilities\"])\n\t}\n\n\texpectedRuntimeID := \"runtime-12345\"\n\tif response[\"runtime_id\"].(string) != expectedRuntimeID {\n\t\tt.Errorf(\"expected runtime ID %q, got %q\", expectedRuntimeID, response[\"runtime_id\"])\n\t}\n}\n\nfunc equalStrings(a, b []string) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor i := range a {\n\t\tif a[i] != b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that handles specific command requests through a web interface. The server should process incoming commands and forward them to a command parser.\n\nFunction Description: The `cmdHandle` function is an HTTP handler that processes POST requests containing a \"cmd\" parameter. It extracts the command and passes it to a command parser. The `InitWeb` function initializes the web server, registers the handler, and starts listening on a specified URL.\n\nInput:\n- For `cmdHandle`:\n  - `w http.ResponseWriter` - Used to write the HTTP response\n  - `r *http.Request` - Contains the incoming HTTP request\n- For `InitWeb`:\n  - None (uses package-level variable `world.Web_Url` for server address)\n\nOutput:\n- For `cmdHandle`:\n  - None (writes response directly to `http.ResponseWriter`)\n- For `InitWeb`:\n  - None (starts server as a side effect, may log errors)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\tcmd := r.FormValue(\"cmd\")\n\tif cmd != \"\" {\n\t\tcm.ParseConsole(g_Cmd, (cmd))\n\t}\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/gm\", cmdHandle)\n\terr := http.ListenAndServe(world.Web_Url, nil)\n\tif err != nil {\n\t\tbase.LOG.Println(\"World Web Server : \", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar Web_Url = \":8080\"\n\nfunc cmdHandle(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != \"POST\" {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tif err := r.ParseForm(); err != nil {\n\t\thttp.Error(w, \"Failed to parse form\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tcmd := r.FormValue(\"cmd\")\n\tif cmd == \"\" {\n\t\thttp.Error(w, \"Missing 'cmd' parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\t// Simulate command parsing\n\tresult := parseCommand(cmd)\n\tfmt.Fprintf(w, \"Command executed: %s\\nResult: %s\", cmd, result)\n}\n\nfunc parseCommand(cmd string) string {\n\tswitch strings.ToLower(cmd) {\n\tcase \"start\":\n\t\treturn \"Server started\"\n\tcase \"stop\":\n\t\treturn \"Server stopped\"\n\tcase \"status\":\n\t\treturn \"Server is running\"\n\tdefault:\n\t\treturn \"Unknown command\"\n\t}\n}\n\nfunc InitWeb() {\n\thttp.HandleFunc(\"/\", cmdHandle)\n\tfmt.Printf(\"Starting server on %s\\n\", Web_Url)\n\tif err := http.ListenAndServe(Web_Url, nil); err != nil {\n\t\tfmt.Printf(\"Error starting server: %v\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Implement a WebSocket server for RDP (Remote Desktop Protocol) connections using the Gorilla WebSocket library in Go. The server should handle WebSocket connections, manage RDP sessions through a Guacamole tunnel, and support bidirectional communication between the client and the RDP server.\n\nStruct Description: The RDPServer struct represents an RDP WebSocket server that manages WebSocket connections and RDP sessions via Guacamole tunnels.\n\nFields:\n- Session: *session.SSession - The current user session information\n- Host: string - The RDP server host address\n- Port: int - The RDP server port number\n- Username: string - The username for RDP authentication\n- Password: string - The password for RDP authentication\n- ConnectionId: string - Unique identifier for the RDP connection\n- Width: int - The screen width for the RDP session\n- Height: int - The screen height for the RDP session\n- Dpi: int - The DPI setting for the RDP session\n\nMethods:\n- ServeHTTP: (w http.ResponseWriter, r *http.Request) -> None - Handles HTTP requests by upgrading them to WebSocket connections, establishing a Guacamole tunnel, and managing bidirectional communication between the client and RDP server. This method implements the http.Handler interface.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\n\t\"yunion.io/x/log\"\n\t\"yunion.io/x/pkg/errors\"\n\n\t\"yunion.io/x/onecloud/pkg/webconsole/guac\"\n\t\"yunion.io/x/onecloud/pkg/webconsole/options\"\n\t\"yunion.io/x/onecloud/pkg/webconsole/session\"\n)\n\ntype RDPServer struct {\n\tSession *session.SSession\n\n\tHost         string\n\tPort         int\n\tUsername     string\n\tPassword     string\n\tConnectionId string\n\n\tWidth  int\n\tHeight int\n\tDpi    int\n}\n\nfunc (s *RDPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tvar up = websocket.Upgrader{\n\t\tReadBufferSize:  1024,\n\t\tWriteBufferSize: 1024,\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\n\tws, err := up.Upgrade(w, r, http.Header{\"Sec-Websocket-Protocol\": []string{\n\t\tr.Header.Get(\"Sec-Websocket-Protocol\"),\n\t}})\n\tif err != nil {\n\t\tlog.Errorf(\"upgrade error: %v\", err)\n\t\treturn\n\t}\n\n\tdefer ws.Close()\n\n\ttunnel, err := guac.NewGuacamoleTunnel(\n\t\ts.Host,\n\t\ts.Port,\n\t\ts.Username,\n\t\ts.Password,\n\t\ts.ConnectionId,\n\t\ts.Width,\n\t\ts.Height,\n\t\ts.Dpi,\n\t\ts.Session.GetClientSession().GetUserId(),\n\t)\n\tif err != nil {\n\t\tlog.Errorf(\"NewGuacamoleTunnel error: %v\", err)\n\t\treturn\n\t}\n\n\terr = tunnel.Start()\n\tif err != nil {\n\t\tlog.Errorf(\"Start error: %v\", err)\n\t\treturn\n\t}\n\n\tdone := make(chan bool, 4)\n\ttimer := time.NewTimer(time.Microsecond * 100)\n\tsetDone := func() {\n\t\tdone <- true\n\t}\n\n\tgo func() {\n\t\tdefer setDone()\n\n\t\tfor {\n\t\t\tins, err := tunnel.ReadOne()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 && timer != nil {\n\t\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t\t}\n\t\t\terr = ws.WriteMessage(websocket.TextMessage, []byte(ins.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed writing to guacd %s: %v\", ins.String(), err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer setDone()\n\t\tdefer tunnel.Stop()\n\n\t\tfor {\n\t\t\t_, p, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Errorf(\"read message error %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 && timer != nil {\n\t\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t\t}\n\t\t\t_, err = tunnel.Write(p)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(\"Failed writing to guacd: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tstop := make(chan bool)\n\tgo func() {\n\t\tif options.Options.RdpSessionTimeoutMinutes > 0 {\n\t\t\ttimer.Reset(time.Duration(options.Options.RdpSessionTimeoutMinutes) * time.Minute)\n\t\t}\n\t\tdefer timer.Stop()\n\t\tdefer setDone()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-stop:\n\t\t\t\treturn\n\t\t\tcase <-timer.C:\n\t\t\t\tif options.Options.RdpSessionTimeoutMinutes > 0 {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\ttimer.Reset(time.Microsecond * 100)\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer setDone()\n\n\t\terr = tunnel.Wait()\n\t\tif err != nil && errors.Cause(err) != guac.TunnerClose {\n\t\t\tlog.Errorf(\"wait error: %v\", err)\n\t\t}\n\t}()\n\n\t<-done\n\tstop <- true\n\tlog.Infof(\"rdp %s@%s:%d complete\", s.Username, s.Host, s.Port)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/jesseduffield/guacamole\"\n\t\"github.com/jesseduffield/guacamole/protocol\"\n\t\"github.com/jesseduffield/guacamole/tunnel\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype RDPServer struct {\n\tSession       *session.SSession\n\tHost          string\n\tPort          int\n\tUsername      string\n\tPassword      string\n\tConnectionId  string\n\tWidth         int\n\tHeight        int\n\tDpi           int\n}\n\nfunc (s *RDPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tfmt.Println(\"upgrade:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\ttunnelConfig := &tunnel.TunnelConfig{\n\t\tHost:     s.Host,\n\t\tPort:     s.Port,\n\t\tUser:     s.Username,\n\t\tPass:     s.Password,\n\t\tWidth:    s.Width,\n\t\tHeight:   s.Height,\n\t\tDpi:      s.Dpi,\n\t\tTimeout:  time.Second * 30,\n\t\tProtocol: protocol.RDP,\n\t}\n\n\ttunnel, err := tunnel.NewTunnel(tunnelConfig)\n\tif err != nil {\n\t\tfmt.Println(\"tunnel creation error:\", err)\n\t\treturn\n\t}\n\tdefer tunnel.Close()\n\n\tgo func() {\n\t\tfor {\n\t\t\tmessageType, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"read error:\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif messageType == websocket.TextMessage {\n\t\t\t\ttunnel.Write(message)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tdata, err := tunnel.Read()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"tunnel read error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tif err := conn.WriteMessage(websocket.TextMessage, data); err != nil {\n\t\t\tfmt.Println(\"write error:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, reads incoming messages, and echoes them back to the client.\n\nFunction Description: The handler function manages WebSocket connections by upgrading HTTP requests, handling incoming messages, and maintaining the connection until closure. It includes error handling for connection issues and logs key events.\n\nInput:\n- w http.ResponseWriter: The HTTP response writer used to send responses\n- r *http.Request: The HTTP request containing connection details\n\nOutput: None (void function), but it performs the following actions:\n- Upgrades HTTP connection to WebSocket\n- Reads and echoes messages\n- Closes the connection when done or on error\n- Logs connection events and errors",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\tnetheader \"knative.dev/networking/pkg/http/header\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tif netheader.IsKubeletProbe(r) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\treturn\n\t}\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"Error upgrading websocket:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tlog.Println(\"Connection upgraded to WebSocket. Entering receive loop.\")\n\tfor {\n\t\tmessageType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tif websocket.IsCloseError(err, websocket.CloseAbnormalClosure) {\n\t\t\t\tlog.Println(\"Client disconnected.\")\n\t\t\t} else {\n\t\t\t\tlog.Println(\"Handler exiting on error:\", err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Successfully received: %q\", message)\n\t\tif err = conn.WriteMessage(messageType, message); err != nil {\n\t\t\tlog.Println(\"Failed to write message:\", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"Successfully wrote: %q\", message)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handleWebSocket(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to upgrade connection: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tlog.Println(\"WebSocket connection established\")\n\n\tfor {\n\t\t_, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error reading message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tif err := conn.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\tlog.Printf(\"Error writing message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t}\n\tlog.Println(\"WebSocket connection closed\")\n}"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, sends a greeting message to the client, and echoes back any messages received from the client.\n\nFunction Description: The function `hello` handles WebSocket communication by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It then enters a loop where it sends a greeting message to the client and reads messages from the client, printing them to the console. The connection is properly closed when the function exits.\n\nInput: \n- `c echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails or if there is an error during message reading/writing. Otherwise, it returns nil once the connection is closed.\n\nNote: The function runs indefinitely in a loop until the WebSocket connection is closed or an error occurs.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc hello(c echo.Context) error {\n\tws, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ws.Close()\n\n\tfor {\n\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(\"Hello, Client!\"))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t_, msg, err := ws.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", msg)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "right_result": "import \"github.com/gorilla/websocket\"\n\nvar upgrader = websocket.Upgrader{\n    CheckOrigin: func(r *http.Request) bool {\n        return true\n    },\n}\n\nfunc hello(c echo.Context) error {\n    conn, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n    if err != nil {\n        return err\n    }\n    defer conn.Close()\n\n    greeting := \"Hello from server!\"\n    if err := conn.WriteMessage(websocket.TextMessage, []byte(greeting)); err != nil {\n        return err\n    }\n\n    for {\n        _, msg, err := conn.ReadMessage()\n        if err != nil {\n            return err\n        }\n        if err := conn.WriteMessage(websocket.TextMessage, msg); err != nil {\n            return err\n        }\n    }\n}"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Implement a WebSocket handler for VNC (Virtual Network Computing) functionality that enables remote desktop interaction through a WebSocket connection, including image transmission, clipboard sharing, and input event handling.\n\nStruct Description: The VNC struct represents a VNC over WebSocket handler that manages the connection between a client and a remote VNC server, facilitating bidirectional communication for remote desktop operations.\n\nFields:\n- link: *network.Link - Represents the network link to the remote VNC server\n- chClipboard: chan string - Channel for transmitting clipboard content between client and server\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages the VNC session lifecycle\n- remoteRead: (ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) -> None - Processes incoming messages from the remote VNC server\n- localRead: (ctx context.Context, local *websocket.Conn, remote *conn.Conn) -> None - Handles messages received from the WebSocket client\n- mouseEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse movement and click events\n- keyboardEvent: (remote *conn.Conn, data []byte) -> None - Handles keyboard input events\n- cadEvent: (remote *conn.Conn) -> None - Manages Ctrl+Alt+Del special key combination\n- scrollEvent: (remote *conn.Conn, data []byte) -> None - Processes mouse scroll wheel events",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/binary\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"image\"\n\t\"image/draw\"\n\t\"image/jpeg\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/runtime\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype VNC struct {\n\tlink         *network.Link\n\tchClipboard  chan string\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer local.Close()\n\tch := conn.ChanRead(id)\n\tdefer conn.SendDisconnect(v.link.target, v.link.id)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.remoteRead(ctx, ch, local)\n\t}()\n\tgo func() {\n\t\tdefer cancel()\n\t\tdefer wg.Done()\n\t\tv.localRead(ctx, local, conn)\n\t}()\n\twg.Wait()\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteRead\")\n\tfor {\n\t\tvar msg *network.Msg\n\t\tselect {\n\t\tcase msg = <-ch:\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_vnc_image:\n\t\t\tdata, err := decodeImage(msg.GetVimg())\n\t\t\truntime.Assert(err)\n\t\t\treplyImage(local, msg.GetVimg(), data, len(msg.GetVimg().GetData()))\n\t\tcase network.Msg_vnc_clipboard:\n\t\t\tv.chClipboard <- msg.GetVclipboard()\n\t\tdefault:\n\t\t\tlogging.Error(\"on message: %s\", msg.GetXType().String())\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tdefer utils.Recover(\"localRead\")\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"local read: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tvar msg struct {\n\t\t\tAction string `json:\"action\"`\n\t\t}\n\t\terr = json.Unmarshal(data, &msg)\n\t\tif err != nil {\n\t\t\tlogging.Error(\"unmarshal: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tswitch msg.Action {\n\t\tcase \"mouse\":\n\t\t\tv.mouseEvent(remote, data)\n\t\tcase \"keyboard\":\n\t\t\tv.keyboardEvent(remote, data)\n\t\tcase \"cad\":\n\t\t\tv.cadEvent(remote)\n\t\tcase \"scroll\":\n\t\t\tv.scrollEvent(remote, data)\n\t\t}\n\t}\n}\n\nfunc decodeImage(data *network.VncImage) ([]byte, error) {\n\tswitch data.GetEncode() {\n\tcase network.VncImage_raw:\n\t\treturn data.GetData(), nil\n\tcase network.VncImage_jpeg:\n\t\timg, err := jpeg.Decode(bytes.NewReader(data.GetData()))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\trect := img.Bounds()\n\t\traw := image.NewRGBA(rect)\n\t\tdraw.Draw(raw, rect, img, rect.Min, draw.Src)\n\t\treturn raw.Pix, nil\n\tcase network.VncImage_png:\n\t}\n\treturn nil, errors.New(\"unsupported\")\n}\n\nfunc replyImage(conn *websocket.Conn, msg *network.VncImage, data []byte, srcSize int) {\n\tinfo := msg.GetXInfo()\n\tbuf := make([]byte, len(data)+28)\n\tbinary.BigEndian.PutUint32(buf, info.GetScreenWidth())\n\tbinary.BigEndian.PutUint32(buf[4:], info.GetScreenHeight())\n\tbinary.BigEndian.PutUint32(buf[8:], info.GetRectX())\n\tbinary.BigEndian.PutUint32(buf[12:], info.GetRectY())\n\tbinary.BigEndian.PutUint32(buf[16:], info.GetRectWidth())\n\tbinary.BigEndian.PutUint32(buf[20:], info.GetRectHeight())\n\tbinary.BigEndian.PutUint32(buf[24:], uint32(srcSize))\n\tcopy(buf[28:], data)\n\tconn.WriteMessage(websocket.BinaryMessage, buf)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "right_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/yourusername/network\"\n)\n\ntype VNC struct {\n\tlink         *network.Link\n\tchClipboard  chan string\n\tmu           sync.Mutex\n}\n\nfunc (v *VNC) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\tws, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"upgrade:\", err)\n\t\treturn\n\t}\n\tdefer ws.Close()\n\n\tv.remoteRead(context.Background(), v.link.MsgChan(), ws)\n\tv.localRead(context.Background(), ws, v.link)\n}\n\nfunc (v *VNC) remoteRead(ctx context.Context, ch <-chan *network.Msg, local *websocket.Conn) {\n\tfor {\n\t\tselect {\n\t\tcase msg := <-ch:\n\t\t\tif msg == nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif msg.Type == \"image\" {\n\t\t\t\timgData := msg.Data\n\t\t\t\tif len(imgData) > 0 {\n\t\t\t\t\terr := local.WriteMessage(websocket.TextMessage, imgData)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Println(\"write message error:\", err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if msg.Type == \"clipboard\" {\n\t\t\t\tv.mu.Lock()\n\t\t\t\tv.chClipboard <- string(msg.Data)\n\t\t\t\tv.mu.Unlock()\n\t\t\t} else if msg.Type == \"mouse\" {\n\t\t\t\tv.mouseEvent(v.link, msg.Data)\n\t\t\t} else if msg.Type == \"keyboard\" {\n\t\t\t\tv.keyboardEvent(v.link, msg.Data)\n\t\t\t} else if msg.Type == \"cad\" {\n\t\t\t\tv.cadEvent(v.link)\n\t\t\t} else if msg.Type == \"scroll\" {\n\t\t\t\tv.scrollEvent(v.link, msg.Data)\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (v *VNC) localRead(ctx context.Context, local *websocket.Conn, remote *conn.Conn) {\n\tfor {\n\t\t_, msg, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"read message error:\", err)\n\t\t\treturn\n\t\t}\n\t\tif len(msg) > 0 {\n\t\t\tmsgStr := string(msg)\n\t\t\tif strings.HasPrefix(msgStr, \"image:\") {\n\t\t\t\timgBase64 := strings.TrimPrefix(msgStr, \"image:\")\n\t\t\t\timgData, _ := base64.StdEncoding.DecodeString(imgBase64)\n\t\t\t\tremote.Write(network.Msg{\"image\", imgData})\n\t\t\t} else if strings.HasPrefix(msgStr, \"clipboard:\") {\n\t\t\t\tclipData := strings.TrimPrefix(msgStr, \"clipboard:\")\n\t\t\t\tremote.Write(network.Msg{\"clipboard\", []byte(clipData)})\n\t\t\t} else if strings.HasPrefix(msgStr, \"mouse:\") {\n\t\t\t\tdata := strings.TrimPrefix(msgStr, \"mouse:\")\n\t\t\t\tremote.Write(network.Msg{\"mouse\", []byte(data)})\n\t\t\t} else if strings.HasPrefix(msgStr, \"keyboard:\") {\n\t\t\t\tdata := strings.TrimPrefix(msgStr, \"keyboard:\")\n\t\t\t\tremote.Write(network.Msg{\"keyboard\", []byte(data)})\n\t\t\t} else if strings.HasPrefix(msgStr, \"cad\") {\n\t\t\t\tremote.Write(network.Msg{\"cad\", []byte{}})\n\t\t\t} else if strings.HasPrefix(msgStr, \"scroll:\") {\n\t\t\t\tdata := strings.TrimPrefix(msgStr, \"scroll:\")\n\t\t\t\tremote.Write(network.Msg{\"scroll\", []byte(data)})\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (v *VNC) mouseEvent(remote *conn.Conn, data []byte) {\n\tremote.Write(network.Msg{\"mouse\", data})\n}\n\nfunc (v *VNC) keyboardEvent(remote *conn.Conn, data []byte) {\n\tremote.Write(network.Msg{\"keyboard\", data})\n}\n\nfunc (v *VNC) cadEvent(remote *conn.Conn) {\n\tremote.Write(network.Msg{\"cad\", []byte{}})\n}\n\nfunc (v *VNC) scrollEvent(remote *conn.Conn, data []byte) {\n\tremote.Write(network.Msg{\"scroll\", data})\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests on the root path (\"/\") and returns a welcome message.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. When accessed, it responds with a welcome message. The server listens on port 8080.\n\nInput: None (The HTTP server handles incoming requests automatically)\n\nOutput: None (The function runs indefinitely, serving HTTP responses to incoming requests)\n\n---\n\nNote: Since the reference code is at the package level (with `main` function) rather than a struct/class level, I've provided the function-level instruction format. The code demonstrates a complete executable program rather than a reusable struct/class component.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\tmyHandler := func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"Welcome to my website!\")\n\t}\n\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Welcome to the Go HTTP server!\")\n\t})\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a UDP client in Go that can send data to a specified server address and port using the net package's DialUDP function.\n\nStruct Description: The SocketBee struct represents a UDP client capable of sending data to a server. It embeds a bees.Bee for base functionality and includes a channel for event handling.\n\nFields:\neventChan: chan bees.Event - Channel for handling events within the bee framework.\n\nMethods:\nAction: [Name](action bees.Action) -> []bees.Placeholder - Handles the \"send\" action to transmit data to a UDP server. Takes an action object containing the target address, port, and data to send. Returns a list of placeholders (currently unused). Panics on errors during address resolution, connection establishment, or data transmission.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/muesli/beehive/bees\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\n\teventChan chan bees.Event\n}\n\nfunc (mod *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\touts := []bees.Placeholder{}\n\n\tvar data string\n\tvar addr string\n\tvar port int\n\n\taction.Options.Bind(\"address\", &addr)\n\taction.Options.Bind(\"port\", &port)\n\taction.Options.Bind(\"data\", &data)\n\n\tswitch action.Name {\n\tcase \"send\":\n\t\tsa, err := net.ResolveUDPAddr(\"udp\", addr+\":\"+strconv.Itoa(port))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tconn, err := net.DialUDP(\"udp\", nil, sa)\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\t\tdefer conn.Close()\n\t\t_, err = conn.Write([]byte(data))\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t}\n\n\tdefault:\n\t\tpanic(\"Unknown action triggered in \" + mod.Name() + \": \" + action.Name)\n\t}\n\n\treturn outs\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"bees\"\n)\n\ntype SocketBee struct {\n\tbees.Bee\n\teventChan chan bees.Event\n}\n\nfunc (b *SocketBee) Action(action bees.Action) []bees.Placeholder {\n\taddr := action.Data[\"address\"].(string)\n\tport := action.Data[\"port\"].(string)\n\tdata := action.Data[\"data\"].(string)\n\n\tserverAddr, err := net.ResolveUDPAddr(\"udp\", fmt.Sprintf(\"%s:%s\", addr, port))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, serverAddr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(data))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn []bees.Placeholder{}\n}"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Implement a function to send a Wake-on-LAN (WoL) magic packet to a target device using UDP broadcast.\n\nFunction Description: The function `WakeUp` sends a Wake-on-LAN magic packet to a specified MAC address over UDP broadcast. It allows optional specification of a local network interface for the broadcast and handles the creation and transmission of the magic packet.\n\nInput:\n- `macAddr` (string): The MAC address of the target device to wake up, in format \"XX:XX:XX:XX:XX:XX\"\n- `broadcastIP` (string): The broadcast IP address to use (e.g., \"255.255.255.255\")\n- `bcastInterface` (string): [Optional] The network interface to use for broadcasting. If empty, system default will be used\n- `port` (int): The UDP port number to use for the WoL packet (typically 7 or 9)\n\nOutput:\n- (error): Returns nil on success, or an error if any step fails (invalid MAC, network error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc WakeUp(macAddr, broadcastIP, bcastInterface string, port int) error {\n\tvar localAddr *net.UDPAddr\n\tvar err error\n\tif bcastInterface != \"\" {\n\t\tlocalAddr, err = ipFromInterface(bcastInterface)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tbcastAddr := fmt.Sprintf(\"%s:%d\", broadcastIP, port)\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", bcastAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmp, err := New(macAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbs, err := mp.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", localAddr, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tn, err := conn.Write(bs)\n\tif err == nil && n != 102 {\n\t\terr = fmt.Errorf(\"magic packet sent was %d bytes (expected 102 bytes sent)\", n)\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "import (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n)\n\nfunc WakeUp(macAddr string, broadcastIP string, bcastInterface string, port int) error {\n\t// Validate MAC address format\n\tif !isValidMAC(macAddr) {\n\t\treturn errors.New(\"invalid MAC address format\")\n\t}\n\n\t// Parse the MAC address into bytes\n\tmacBytes := parseMAC(macAddr)\n\n\t// Create the magic packet\n\tmagicPacket := createMagicPacket(macBytes)\n\n\t// Determine the UDP address to send to\n\taddr, err := net.ResolveUDPAddr(\"udp\", fmt.Sprintf(\"%s:%d\", broadcastIP, port))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create UDP connection\n\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\t// Send the magic packet\n\t_, err = conn.Write(magicPacket)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc isValidMAC(mac string) bool {\n\t// Check if MAC is in correct format\n\tif len(mac) != 17 {\n\t\treturn false\n\t}\n\tif mac[2] != ':' && mac[5] != ':' && mac[8] != ':' && mac[11] != ':' && mac[14] != ':' {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc parseMAC(mac string) []byte {\n\t// Convert MAC string to byte slice\n\tvar macBytes [6]byte\n\tparts := strings.Split(mac, \":\")\n\tfor i := 0; i < 6; i++ {\n\t\tval, _ := strconv.ParseInt(parts[i], 16, 8)\n\t\tmacBytes[i] = byte(val)\n\t}\n\treturn macBytes[:]\n}\n\nfunc createMagicPacket(mac []byte) []byte {\n\t// Create a 6-byte Ethernet frame with 6 repetitions of the MAC address\n\tpacket := make([]byte, 6*6)\n\tfor i := 0; i < 6; i++ {\n\t\tfor j := 0; j < 6; j++ {\n\t\t\tpacket[i*6+j] = mac[j]\n\t\t}\n\t}\n\treturn packet\n}"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Implement a Go struct that tests the health of an NTP (Network Time Protocol) server by checking its stratum level through UDP communication.\n\nStruct Description: The NtpHealthTester struct is responsible for verifying the health of an NTP server by establishing a UDP connection, sending a query, and validating the server's response based on its stratum level. The struct includes methods for testing the server and providing a string representation of the maximum allowed stratum.\n\nFields:\nmaxStratum: int - The maximum acceptable stratum level for the NTP server to be considered healthy.\n\nMethods:\nTest: (ht *HealthTest) -> bool - Tests the health of an NTP server by sending a UDP packet and validating the response. Returns true if the server's stratum is within the acceptable range, false otherwise.\nString: () -> string - Returns a string representation of the maximum allowed stratum level.\nnewNtpHealthTester: (params map[string]interface{}, htp *HealthTestParameters) -> HealthTester - A constructor function that creates a new NtpHealthTester instance with the specified maximum stratum level.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"time\"\n)\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc (t *NtpHealthTester) Test(ht *HealthTest) bool {\n\tudpAddress, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(ht.ipAddress.String(), \"123\"))\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdata := make([]byte, 48)\n\tdata[0] = 4<<3 | 3\n\n\tconn, err := net.DialUDP(\"udp\", nil, udpAddress)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tdefer conn.Close()\n\n\t_, err = conn.Write(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tconn.SetDeadline(time.Now().Add(ht.timeout))\n\n\t_, err = conn.Read(data)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tstratum := data[1]\n\n\tif stratum == 0 || stratum > byte(t.maxStratum) {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc (t *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"%d\", t.maxStratum)\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\tmaxStratum := 3\n\tif v, ok := params[\"max_stratum\"]; ok {\n\t\tmaxStratum = typeutil.ToInt(v)\n\t}\n\treturn &NtpHealthTester{maxStratum: maxStratum}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype HealthTestParameters struct {\n\tMaxStratum int\n}\n\ntype HealthTester interface {\n\tTest() bool\n\tString() string\n}\n\ntype NtpHealthTester struct {\n\tmaxStratum int\n}\n\nfunc newNtpHealthTester(params map[string]interface{}, htp *HealthTestParameters) HealthTester {\n\treturn &NtpHealthTester{\n\t\tmaxStratum: htp.MaxStratum,\n\t}\n}\n\nfunc (ht *NtpHealthTester) Test() bool {\n\tconn, err := net.DialUDP(\"udp\", nil, &net.UDPAddr{IP: []byte{129, 1, 1, 1}, Port: 123})\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer conn.Close()\n\n\t// Build NTP packet\n\tpacket := make([]byte, 48)\n\tpacket[0] = 0x1B // LI=0 (no warning), VN=3 (IPv4), Mode=3 (client)\n\tfor i := 1; i < 48; i++ {\n\t\tpacket[i] = 0\n\t}\n\n\t_, err = conn.Write(packet)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\t// Read response\n\tbuffer := make([]byte, 48)\n\tn, _, err := conn.ReadFrom(buffer)\n\tif err != nil || n < 48 {\n\t\treturn false\n\t}\n\n\t// Extract stratum from response\n\tstratum := int(buffer[1])\n\tif stratum <= ht.maxStratum {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc (ht *NtpHealthTester) String() string {\n\treturn fmt.Sprintf(\"Max Stratum Allowed: %d\", ht.maxStratum)"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a function that establishes a UDP connection to a target server, sends a payload, and reads the server's response.\n\nFunction Description: The function `connectUDP` initiates a UDP connection to a specified target address, sends a given payload, and reads the response from the server. It handles local and remote address resolution, connection establishment, and error handling for network operations.\n\nInput: \n- `target` [string] - The target server address in the format \"host:port\" (e.g., \"127.0.0.1:8080\").\n- `payload` [string] - The data to be sent to the server.\n\nOutput: \n- None (prints the server's response to stdout). The function panics on errors during connection setup, sending, or receiving.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc connectUDP(target, payload string) {\n\tLocalAddr, err := net.ResolveUDPAddr(\"udp\", \":54321\")\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to resolve UDP local address on port 54321 %v\", err))\n\t}\n\tRemoteAddr, err := net.ResolveUDPAddr(\"udp\", target)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to resolve UDP remote address [%s] %v\", target, err))\n\t}\n\tconn, err := net.DialUDP(\"udp\", LocalAddr, RemoteAddr)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to open connection to [%s] %v\", target, err))\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(payload))\n\tif err != nil {\n\t\tpanic(\"Failed to send payload\")\n\t}\n\t_, err = conn.Write([]byte(\"\\n\"))\n\tif err != nil {\n\t\tpanic(\"Failed to send payload\")\n\t}\n\n\tbuf := make([]byte, 1024)\n\tn, err := conn.Read(buf)\n\tif err != nil {\n\t\tpanic(\"Failed to read from socket\")\n\t}\n\tfmt.Print(string(buf[:n]))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc connectUDP(target string, payload string) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\n\t_, err = conn.Write([]byte(payload))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuffer := make([]byte, 1024)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%s\\n\", buffer[:n])\n}"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: The task involves creating a DNS bootstrap resolver that can query DNS servers to resolve domain names to IP addresses using UDP protocol. The resolver should handle concurrent operations, retry failed queries, and manage connection lifecycle properly.\n\nStruct Description: The Bootstrap struct represents a DNS bootstrap resolver that maintains state for DNS queries, including target domain, server address, and query status. It handles concurrent resolution requests and manages connection retries.\n\nFields:\nfqdn: [string] - The fully qualified domain name to resolve\nport: [uint16] - The port number of the DNS server\nbootstrap: [*net.UDPAddr] - The UDP address of the DNS bootstrap server\nqt: [uint16] - The DNS query type (e.g., A or AAAA records)\nlogger: [*zap.Logger] - Logger for debugging and error reporting\nupdating: [atomic.Bool] - Atomic flag indicating if an update is in progress\nnextUpdate: [time.Time] - Timestamp for the next scheduled update\nreadyNotify: [chan struct{}] - Channel to notify when resolution is complete\nm: [sync.Mutex] - Mutex for protecting shared state\nready: [bool] - Flag indicating if resolution is complete\naddrStr: [string] - The resolved address string\n\nMethods:\nresolve: [Name](ctx context.Context, qt uint16) -> (netip.Addr, uint32, error) - Resolves the configured domain name to an IP address using the specified query type. Handles UDP communication with retries and timeout management. Returns the resolved address, its TTL, or an error.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/netip\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n\n\t\"github.com/IrineSistiana/mosdns/v5/pkg/dnsutils\"\n\t\"github.com/miekg/dns\"\n\t\"go.uber.org/zap\"\n)\n\ntype Bootstrap struct {\n\tfqdn      string\n\tport      uint16\n\tbootstrap *net.UDPAddr\n\tqt        uint16\n\tlogger    *zap.Logger\n\n\tupdating   atomic.Bool\n\tnextUpdate time.Time\n\n\treadyNotify chan struct{}\n\tm           sync.Mutex\n\tready       bool\n\taddrStr     string\n}\n\nfunc (sp *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tconst edns0UdpSize = 1200\n\n\tq := new(dns.Msg)\n\tq.SetQuestion(sp.fqdn, qt)\n\tq.SetEdns0(edns0UdpSize, false)\n\n\tc, err := net.DialUDP(\"udp\", nil, sp.bootstrap)\n\tif err != nil {\n\t\treturn netip.Addr{}, 0, err\n\t}\n\tdefer c.Close()\n\n\twriteErrC := make(chan error, 1)\n\ttype res struct {\n\t\tresp *dns.Msg\n\t\terr  error\n\t}\n\treadResC := make(chan res, 1)\n\n\tcancelWrite := make(chan struct{})\n\tdefer close(cancelWrite)\n\tgo func() {\n\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\twriteErrC <- err\n\t\t\treturn\n\t\t}\n\n\t\tretryTicker := time.NewTicker(time.Second)\n\t\tdefer retryTicker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-cancelWrite:\n\t\t\t\treturn\n\t\t\tcase <-retryTicker.C:\n\t\t\t\tif _, err := dnsutils.WriteMsgToUDP(c, q); err != nil {\n\t\t\t\t\twriteErrC <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tm, _, err := dnsutils.ReadMsgFromUDP(c, edns0UdpSize)\n\t\treadResC <- res{resp: m, err: err}\n\t}()\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn netip.Addr{}, 0, context.Cause(ctx)\n\tcase err := <-writeErrC:\n\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to write query, %w\", err)\n\tcase r := <-readResC:\n\t\tresp := r.resp\n\t\terr := r.err\n\t\tif err != nil {\n\t\t\treturn netip.Addr{}, 0, fmt.Errorf(\"failed to read resp, %w\", err)\n\t\t}\n\n\t\tfor _, v := range resp.Answer {\n\t\t\tvar ip net.IP\n\t\t\tvar ttl uint32\n\t\t\tswitch rr := v.(type) {\n\t\t\tcase *dns.A:\n\t\t\t\tip = rr.A\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tcase *dns.AAAA:\n\t\t\t\tip = rr.AAAA\n\t\t\t\tttl = rr.Hdr.Ttl\n\t\t\tdefault:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\taddr, ok := netip.AddrFromSlice(ip)\n\t\t\tif ok {\n\t\t\t\treturn addr, ttl, nil\n\t\t\t}\n\t\t}\n\n\t\treturn netip.Addr{}, 0, errNoAddrInResp\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/netip\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/go-logr/logr\"\n\t\"github.com/go-logr/zapr\"\n\t\"go.uber.org/zap\"\n)\n\ntype Bootstrap struct {\n\tfqdn     string\n\tport     uint16\n\tbootstrap *net.UDPAddr\n\tqt       uint16\n\tlogger   logr.Logger\n\tupdating atomic.Bool\n\tnextUpdate time.Time\n\treadyNotify chan struct{}\n\tm         sync.Mutex\n\tready     bool\n\taddrStr   string\n}\n\nfunc NewBootstrap(fqdn string, port uint16, bootstrap *net.UDPAddr, qt uint16, logger logr.Logger) *Bootstrap {\n\treturn &Bootstrap{\n\t\tfqdn:     fqdn,\n\t\tport:     port,\n\t\tbootstrap: bootstrap,\n\t\tqt:       qt,\n\t\tlogger:   logger,\n\t\treadyNotify: make(chan struct{}),\n\t}\n}\n\nfunc (b *Bootstrap) resolve(ctx context.Context, qt uint16) (netip.Addr, uint32, error) {\n\tif b.updating.Load() {\n\t\treturn netip.Addr{}, 0, errors.New(\"update in progress\")\n\t}\n\n\tb.m.Lock()\n\tdefer b.m.Unlock()\n\n\tif b.ready {\n\t\tselect {\n\t\tcase <-b.readyNotify:\n\t\t\tb.logger.Info(\"resolution complete\", \"address\", b.addrStr)\n\t\t\treturn netip.MustParseAddr(b.addrStr), 0, nil\n\t\tdefault:\n\t\t\treturn netip.Addr{}, 0, errors.New(\"resolution not yet complete\")\n\t\t}\n\t}\n\n\tb.updating.Store(true)\n\tdefer b.updating.Store(false)\n\n\tconn, err := net.DialUDP(\"udp\", nil, b.bootstrap)\n\tif err != nil {\n\t\tb.logger.Error(err, \"failed to connect to DNS server\")\n\t\treturn netip.Addr{}, 0, err\n\t}\n\tdefer conn.Close()\n\n\tmsg := new([512]byte)\n\t_, err = fmt.Fprintf(msg, \"Question: %s %d\\n\", b.fqdn, qt)\n\tif err != nil {\n\t\tb.logger.Error(err, \"failed to format DNS query\")\n\t\treturn netip.Addr{}, 0, err\n\t}\n\n\t_, err = conn.Write(msg[:])\n\tif err != nil {\n\t\tb.logger.Error(err, \"failed to send DNS query\")\n\t\treturn netip.Addr{}, 0, err\n\t}\n\n\tvar response [512]byte\n\tn, err := conn.Read(response[:])\n\tif err != nil {\n\t\tb.logger.Error(err, \"failed to read DNS response\")\n\t\treturn netip.Addr{}, 0, err\n\t}\n\n\tif n < 12 {\n\t\tb.logger.Error(errors.New(\"invalid DNS response\"), \"short response\")\n\t\treturn netip.Addr{}, 0, errors.New(\"invalid DNS response\")\n\t}\n\n\tif response[0]&0x80 == 0 {\n\t\tb.logger.Error(errors.New(\"response not authoritative\"), \"non-authoritative response\")\n\t\treturn netip.Addr{}, 0, errors.New(\"non-authoritative response\")\n\t}\n\n\trrStart := int(response[6])<<8 | int(response[7])\n\trrCount := int(response[8])<<8 | int(response[9])\n\n\tfor i := 0; i < rrCount; i++ {\n\t\trrType := int(response[rrStart+4])<<8 | int(response[rrStart+5])\n\t\tif rrType == int(qt) {\n\t\t\taddrLen := int(response[rrStart+6])<<8 | int(response[rrStart+7])\n\t\t\taddr := response[rrStart+8 : rrStart+8+addrLen]\n\t\t\tip, _ := netip.ParseAddr(string(addr))\n\t\t\tttl := int(response[rrStart+10])<<24 | int(response[rrStart+11])<<16 | int(response[rrStart+12])<<8 | int(response[rrStart+13])\n\t\t\tb.addrStr = ip.String()\n\t\t\tb.ready = true\n\t\t\tclose(b.readyNotify)\n\t\t\treturn ip, uint32(ttl), nil\n\t\t}\n\t\trrStart += 16\n\t}\n\n\tb.logger.Error(errors.New(\"no matching record found\"), \"record not found\")\n\treturn netip.Addr{}, 0, errors.New(\"no matching record found\")\n}"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Implement a UDP client in Go that communicates with a NAT-PMP (Port Mapping Protocol) gateway, handling retries and timeouts for reliable communication.\n\nStruct Description: The `network` struct represents a network connection to a NAT-PMP gateway, maintaining the gateway IP address and providing a method to send requests and receive responses.\n\nFields:\n- gateway: net.IP - The IP address of the NAT-PMP gateway\n\nMethods:\n- call: (msg []byte, timeout time.Duration) -> ([]byte, error) - Sends a UDP message to the NAT-PMP gateway and waits for a response. Implements exponential backoff retry logic with configurable timeout. Returns the response bytes or an error if communication fails.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nconst nAT_PMP_PORT = 5351\nconst nAT_TRIES = 9\nconst nAT_INITIAL_MS = 250\n\ntype network struct {\n\tgateway net.IP\n}\n\nfunc (n *network) call(msg []byte, timeout time.Duration) (result []byte, err error) {\n\tvar server net.UDPAddr\n\tserver.IP = n.gateway\n\tserver.Port = nAT_PMP_PORT\n\tconn, err := net.DialUDP(\"udp\", nil, &server)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tresult = make([]byte, 16)\n\n\tvar finalTimeout time.Time\n\tif timeout != 0 {\n\t\tfinalTimeout = time.Now().Add(timeout)\n\t}\n\n\tneedNewDeadline := true\n\n\tvar tries uint\n\tfor tries = 0; (tries < nAT_TRIES && finalTimeout.IsZero()) || time.Now().Before(finalTimeout); {\n\t\tif needNewDeadline {\n\t\t\tnextDeadline := time.Now().Add((nAT_INITIAL_MS << tries) * time.Millisecond)\n\t\t\terr = conn.SetDeadline(minTime(nextDeadline, finalTimeout))\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tneedNewDeadline = false\n\t\t}\n\t\t_, err = conn.Write(msg)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tvar bytesRead int\n\t\tvar remoteAddr *net.UDPAddr\n\t\tbytesRead, remoteAddr, err = conn.ReadFromUDP(result)\n\t\tif err != nil {\n\t\t\tif err.(net.Error).Timeout() {\n\t\t\t\ttries++\n\t\t\t\tneedNewDeadline = true\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif !remoteAddr.IP.Equal(n.gateway) {\n\t\t\tcontinue\n\t\t}\n\t\tif bytesRead < len(result) {\n\t\t\tresult = result[:bytesRead]\n\t\t}\n\t\treturn\n\t}\n\terr = fmt.Errorf(\"Timed out trying to contact gateway\")\n\treturn\n}\n\nfunc minTime(a, b time.Time) time.Time {\n\tif a.IsZero() {\n\t\treturn b\n\t}\n\tif b.IsZero() {\n\t\treturn a\n\t}\n\tif a.Before(b) {\n\t\treturn a\n\t}\n\treturn b\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype network struct {\n\tgateway net.IP\n}\n\nfunc (n *network) call(msg []byte, timeout time.Duration) ([]byte, error) {\n\tconst maxRetries = 5\n\tvar resp []byte\n\tvar err error\n\tfor i := 0; i < maxRetries; i++ {\n\t\tconn, err := net.DialUDP(\"udp\", nil, &net.UDPAddr{IP: n.gateway, Port: 53})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer conn.Close()\n\n\t\t// Send message\n\t\tif _, err := conn.Write(msg); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// Set read timeout\n\t\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\t\t// Read response\n\t\tbuffer := make([]byte, 1024)\n\t\tnbytes, _, err := conn.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\tif netErr, ok := err.(net.Error); ok && netErr.Timeout() {\n\t\t\t\tfmt.Printf(\"Timeout occurred, retrying... (%d/%d)\\n\", i+1, maxRetries)\n\t\t\t\ttime.Sleep(time.Duration(1<<i) * time.Second)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn nil, err\n\t\t}\n\n\t\tresp = buffer[:nbytes]\n\t\tbreak\n\t}\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, processes incoming messages using ROT13 cipher, and sends the transformed messages back to the client.\n\nFunction Description: The function initializes a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it applies the ROT13 cipher transformation and sends the result back to the originating client. The server handles network errors and cleans up resources properly on exit.\n\nInput:\n- port: int - The UDP port number to listen on (passed as a pointer in the original code)\n\nOutput: None (the function runs indefinitely until terminated or an unrecoverable error occurs)\n\nNote: The function uses external packages for logging (github.com/enfein/mieru/v3/pkg/log) and ROT13 transformation (github.com/enfein/mieru/v3/pkg/testtool). The main processing loop includes error handling for network operations and message processing.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n)\nfunc main() {\n\taddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.Itoa(*port))\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ResolveUDPAddr() failed: %v\", err)\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"net.ListenUDP() failed: %v\", err)\n\t}\n\tlog.Infof(\"UDP server is initialized, listening to %s\", addr.String())\n\tdefer conn.Close()\n\tbuf := make([]byte, 1500)\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Read() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif n == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tout, err := testtool.TestHelperRot13(buf[:n])\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"rot13() failed: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tif _, err = conn.WriteToUDP(out, addr); err != nil {\n\t\t\tlog.Errorf(\"Write() failed: %v\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"github.com/enfein/mieru/v3/pkg/log\"\n\t\"github.com/enfein/mieru/v3/pkg/testtool\"\n)\n\nfunc main() {\n\taddr := \":\" + *port\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", udpAddr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close()\n\n\tbuffer := make([]byte, 65535)\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tmessage := string(buffer[:n])\n\t\ttransformed := testtool.ROT13(message)\n\t\t_, err = conn.WriteToUDP([]byte(transformed), addr)\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a UDP server in Go that listens for incoming messages on a specified port and prints received messages along with the sender's address.\n\nFunction Description: The function sets up a UDP server that continuously listens for incoming datagrams on a specified port. For each received message, it trims whitespace, prints the message content and the sender's address, and continues listening for new messages.\n\nInput: None (The port and IP address are hardcoded in the function)\n\nOutput: None (The function prints output to stdout but doesn't return any values)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\nfunc main() {\n\tconn, err := net.ListenUDP(\"udp\", &net.UDPAddr{\n\t\tPort: 3000,\n\t\tIP:   net.ParseIP(\"0.0.0.0\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer conn.Close()\n\tfmt.Printf(\"server listening %s\\n\", conn.LocalAddr().String())\n\n\tfor {\n\t\tmessage := make([]byte, 20)\n\t\trlen, remote, err := conn.ReadFromUDP(message[:])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tdata := strings.TrimSpace(string(message[:rlen]))\n\t\tfmt.Printf(\"received: %s from %s\\n\", data, remote)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\n\nfunc main() {\n\taddr := \":8080\"\n\tconn, _ := net.ListenUDP(\"udp\", &net.UDPAddr{IP: []byte{127, 0, 0, 1}, Port: 8080})\n\tdefer conn.Close()\n\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, remote, _ := conn.ReadFromUDP(buffer)\n\t\tmessage := strings.TrimSpace(string(buffer[:n]))\n\t\tfmt.Printf(\"Received from %s: %s\\n\", remote.String(), message)\n\t}\n}"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a UDP server in Go that listens on a specified port, receives messages from clients, and echoes them back to the sender.\n\nFunction Description: The function sets up a UDP server that binds to a given port, continuously listens for incoming messages, and responds by sending the received message back to the client. It handles network errors gracefully and ensures resources are properly cleaned up.\n\nInput: \n- port [string] - The port number on which the UDP server should listen (e.g., \":10002\")\n\nOutput: \n- None (The function runs indefinitely until interrupted)\n- Error messages are printed to stdout if any occur during setup or operation\n\nNote: The function does not return any values but prints status and error messages to stdout. It runs in an infinite loop to handle continuous incoming UDP messages.\n\nThe function performs the following key operations:\n1. Resolves the UDP address using the provided port\n2. Creates and binds a UDP listener\n3. Sets up deferred cleanup for the connection\n4. Enters a loop to read incoming messages and echo them back\n5. Handles and reports any network errors that occur",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc main() {\n\tserverType := strings.ToLower(os.Getenv(\"serverType\"))\n\n\tif serverType == \"udp\" {\n\t\tServerAddr, err := net.ResolveUDPAddr(\"udp\", \":10002\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Started UDP server on port 10002\")\n\n\t\tServerConn, err := net.ListenUDP(\"udp\", ServerAddr)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t\treturn\n\t\t}\n\t\tdefer ServerConn.Close()\n\n\t\tbuf := make([]byte, 1024)\n\n\t\tfor {\n\t\t\tn, addr, err := ServerConn.ReadFromUDP(buf)\n\t\t\tfmt.Printf(\"received: %s from: %s\\n\", string(buf[0:n]), addr)\n\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"error: \", err)\n\t\t\t}\n\n\t\t\tServerConn.WriteTo(buf[0:n], addr)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 112,
    "right_result": "func startUDPEchoServer(port string) {\n\taddr, err := net.ResolveUDPAddr(\"udp\", port)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error resolving address: %v\\n\", err)\n\t\treturn\n\t}\n\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error listening on UDP port: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tbuffer := make([]byte, 65535)\n\n\tfor {\n\t\tn, addr, err := conn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading from UDP: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tif _, err := conn.WriteToUDP(buffer[:n], addr); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error writing to UDP: %v\\n\", err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a WebSocket proxy struct in Go that can handle bidirectional communication between a client and a backend server, including connection upgrading, message replication, and error handling.\n\nStruct Description: The WebsocketProxy struct acts as a reverse proxy for WebSocket connections, forwarding messages between clients and backend servers while handling connection upgrades and error scenarios.\n\nFields:\n\nDirector: func(*http.Request, http.Header) - A function that can modify the outgoing request headers before connecting to the backend.\nBackend: func(*http.Request) *url.URL - A function that returns the backend URL to connect to.\nUpgrader: *websocket.Upgrader - Configures the WebSocket connection upgrade from HTTP.\nDialer: *websocket.Dialer - Configures how to dial the backend WebSocket connection.\n\nMethods:\n\nServeHTTP: (http.ResponseWriter, *http.Request) -> None - The main handler method that:\n  1. Determines the backend URL\n  2. Establishes connection to backend\n  3. Upgrades client connection\n  4. Sets up bidirectional message replication\n  5. Handles ping/pong messages\n  6. Manages connection errors and closures\n\nreplicateWebsocketConn: (*websocket.Conn, *websocket.Conn, chan error) -> None - A helper method that:\n  1. Continuously reads messages from source connection\n  2. Forwards them to destination connection\n  3. Handles connection errors and closure messages\n  4. Reports errors through the provided channel",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/samber/lo\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tconnPub.SetPingHandler(func(appData string) error {\n\t\terr := connBackend.WriteControl(websocket.PingMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\terr = connPub.WriteControl(websocket.PongMessage, []byte(appData), time.Now().Add(time.Second))\n\t\tif errors.Is(err, websocket.ErrCloseSent) {\n\t\t\treturn nil\n\t\t} else if e, ok := lo.ErrorsAs[net.Error](err); ok && e.Timeout() {\n\t\t\treturn nil\n\t\t}\n\t\treturn err\n\t})\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\n\tvar closeError *websocket.CloseError\n\tif ok := errors.As(err, &closeError); !ok || (closeError != nil && closeError.Code == websocket.CloseAbnormalClosure) {\n\t\tlog.Printf(message, err)\n\t}\n}\n\nfunc replicateWebsocketConn(dst, src *websocket.Conn, errc chan error) {\n\tfor {\n\t\tmsgType, msg, err := src.ReadMessage()\n\t\tif err != nil {\n\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\tif e, ok := lo.ErrorsAs[*websocket.CloseError](err); ok && e != nil {\n\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t}\n\t\t\t}\n\t\t\terrc <- err\n\t\t\t_ = dst.WriteMessage(websocket.CloseMessage, m)\n\t\t\tbreak\n\t\t}\n\t\terr = dst.WriteMessage(msgType, msg)\n\t\tif err != nil {\n\t\t\terrc <- err\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(*http.Request, http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tbackendURL := p.Backend(r)\n\tif backendURL == nil {\n\t\thttp.Error(w, \"Backend URL not configured\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\t// Upgrade client connection to WebSocket\n\tconn, err := p.Upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Failed to upgrade: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\t// Dial backend WebSocket\n\tbackendConn, _, err := p.Dialer.Dial(backendURL.String(), nil)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Failed to connect to backend: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer backendConn.Close()\n\n\t// Start message replication in both directions\n\treplicateWebsocketConn(conn, backendConn, make(chan error))\n\treplicateWebsocketConn(backendConn, conn, make(chan error))\n}\n\nfunc replicateWebsocketConn(src *websocket.Conn, dst *websocket.Conn, errChan chan error) {\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := src.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif err != websocket.ErrCloseSent && err != io.EOF {\n\t\t\t\t\terrChan <- err\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err := dst.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\t\terrChan <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and returns a simple text response.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" message to the response writer. The `main` function sets up the HTTP server by registering the handler and starting the server on port 8080.\n\nInput: \n- `w http.ResponseWriter`: Used to write the HTTP response.\n- `r *http.Request`: Contains information about the incoming HTTP request.\n\nOutput: \n- The `handler` function writes \"Hello World, I'm Golang!\" to the response writer (`w`).\n- The `main` function starts an HTTP server that listens on port 8080 and serves the response from the `handler` function.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a WebSocket server in Go that handles WebSocket connections, messages, and events using the nhooyr.io/websocket package. The server should provide event-based handling for connection establishment, message reception, and connection closure.\n\nStruct Description: The `testServer` struct represents a WebSocket server with event handling capabilities. It manages HTTP routes, WebSocket connections, and provides methods to subscribe to WebSocket events.\n\nFields:\n\n- sync.Mutex: sync.Mutex - Provides thread-safe access to the server's resources\n- eventEmitter: playwright.EventEmitter - Handles event subscription and emission for WebSocket events\n- mux: *http.ServeMux - HTTP request multiplexer for routing\n- testServer: *httptest.Server - HTTP test server instance\n- routes: map[string]http.HandlerFunc - Map of URL paths to their handler functions\n- requestSubscriberes: map[string][]chan *http.Request - Channels for request subscribers\n- PREFIX: string - Server URL prefix\n- EMPTY_PAGE: string - Path to empty page\n- CROSS_PROCESS_PREFIX: string - Prefix for cross-process communication\n- WS_PREFIX: string - WebSocket endpoint prefix\n- PORT: string - Server port number\n\nMethods:\n\n- wsHandler: (w http.ResponseWriter, r *http.Request) -> void - Handles WebSocket connection upgrade and message processing\n- OnceWebSocketConnection: (handler func(c *websocket.Conn, r *http.Request)) -> void - Registers a one-time connection handler\n- OnWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a persistent close handler\n- OnceWebSocketClose: (handler func(err *websocket.CloseError)) -> void - Registers a one-time close handler\n- OnWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a persistent message handler\n- OnceWebSocketMessage: (handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) -> void - Registers a one-time message handler\n- SendOnWebSocketConnection: (msgType websocket.MessageType, data []byte) -> void - Sends a message when a connection is established\n- WaitForWebSocketConnection: () -> <-chan *wsConnection - Returns a channel that receives the first WebSocket connection\n\nAdditional Struct:\n\n- wsConnection: struct - Represents an active WebSocket connection\n  Fields:\n    - Conn: *websocket.Conn - The WebSocket connection\n    - Req: *http.Request - The associated HTTP request\n  Methods:\n    - SendMessage: (msgType websocket.MessageType, data []byte) -> void - Sends a message through the connection",
    "Canonical_solution": "import (\n\t\"github.com/coder/websocket\"\n\t\"github.com/playwright-community/playwright-go\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype testServer struct {\n\tsync.Mutex\n\teventEmitter         playwright.EventEmitter\n\tmux                  *http.ServeMux\n\ttestServer           *httptest.Server\n\troutes               map[string]http.HandlerFunc\n\trequestSubscriberes  map[string][]chan *http.Request\n\tPREFIX               string\n\tEMPTY_PAGE           string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX            string\n\tPORT                 string\n}\n\nfunc (t *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tInsecureSkipVerify: true,\n\t})\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not upgrade ws connection:\", err)\n\t\treturn\n\t}\n\tdefer c.Close(websocket.StatusNormalClosure, \"\")\n\n\tt.eventEmitter.Emit(\"connection\", c, r)\n\n\tfor {\n\t\ttyp, message, err := c.Read(r.Context())\n\t\tif err != nil {\n\t\t\tcloseErr := new(websocket.CloseError)\n\t\t\tif errors.As(err, closeErr) {\n\t\t\t\tt.eventEmitter.Emit(\"close\", closeErr)\n\t\t\t}\n\t\t\tswitch websocket.CloseStatus(err) {\n\t\t\tcase websocket.StatusNormalClosure, websocket.StatusGoingAway, websocket.StatusNoStatusRcvd:\n\t\t\tdefault:\n\t\t\t\tlog.Println(\"testServer: could not read ws message:\", err)\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tt.eventEmitter.Emit(\"message\", c, r, typ, message)\n\t}\n}\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (c *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\terr := c.Conn.Write(c.Req.Context(), msgType, data)\n\tif err != nil {\n\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\treturn\n\t}\n}\n\nfunc (t *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\tt.eventEmitter.Once(\"connection\", handler)\n}\n\nfunc (t *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.On(\"close\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\tt.eventEmitter.Once(\"close\", handler)\n}\n\nfunc (t *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.On(\"message\", handler)\n}\n\nfunc (t *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\tt.eventEmitter.Once(\"message\", handler)\n}\n\nfunc (t *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\terr := c.Write(r.Context(), msgType, data)\n\t\tif err != nil {\n\t\t\tlog.Println(\"testServer: could not write ws message:\", err)\n\t\t\treturn\n\t\t}\n\t})\n}\n\nfunc (t *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tchannel := make(chan *wsConnection)\n\tt.OnceWebSocketConnection(func(c *websocket.Conn, r *http.Request) {\n\t\tchannel <- &wsConnection{Conn: c, Req: r}\n\t\tclose(channel)\n\t})\n\treturn channel\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/nhooyr/websocket\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/require\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\ntype testServer struct {\n\tmu           sync.Mutex\n\teventEmitter *eventEmitter\n\tmux          *http.ServeMux\n\tserver       *httptest.Server\n\troutes       map[string]http.HandlerFunc\n\trequestSubscribers map[string][]chan *http.Request\n\tPREFIX        string\n\tEMPTY_PAGE    string\n\tCROSS_PROCESS_PREFIX string\n\tWS_PREFIX     string\n\tPORT          string\n}\n\ntype wsConnection struct {\n\tConn *websocket.Conn\n\tReq  *http.Request\n}\n\nfunc (c *wsConnection) SendMessage(msgType websocket.MessageType, data []byte) {\n\terr := c.Conn.WriteMessage(msgType, data)\n\tif err != nil {\n\t\tfmt.Printf(\"Error sending message: %v\\n\", err)\n\t}\n}\n\ntype eventEmitter struct {\n\thandlers map[string][]func(args ...interface{})\n}\n\nfunc newEventEmitter() *eventEmitter {\n\treturn &eventEmitter{\n\t\thandlers: make(map[string][]func(args ...interface{})),\n\t}\n}\n\nfunc (e *eventEmitter) On(event string, handler func(args ...interface{})) {\n\te.handlers[event] = append(e.handlers[event], handler)\n}\n\nfunc (e *eventEmitter) Once(event string, handler func(args ...interface{})) {\n\te.handlers[event] = append(e.handlers[event], handler)\n}\n\nfunc (e *eventEmitter) Emit(event string, args ...interface{}) {\n\tfor _, handler := range e.handlers[event] {\n\t\thandler(args...)\n\t}\n}\n\nfunc (s *testServer) wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := websocket.Accept(w, r.Header, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Failed to accept WebSocket connection\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close(websocket.StatusInternalError, \"server closed\")\n\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\t// Emit connection established event\n\ts.eventEmitter.Emit(\"connection\", conn, r)\n\n\t// Register message handler\n\tgo func() {\n\t\tfor {\n\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ts.eventEmitter.Emit(\"message\", conn, r, websocket.TextMessage, msg)\n\t\t}\n\t}()\n\n\t// Register close handler\n\tconn.SetCloseHandler(func(code int, reason string) error {\n\t\ts.eventEmitter.Emit(\"close\", &websocket.CloseError{Code: code, Reason: reason})\n\t\treturn nil\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketConnection(handler func(c *websocket.Conn, r *http.Request)) {\n\ts.eventEmitter.Once(\"connection\", func(args ...interface{}) {\n\t\tconn, req := args[0].(*websocket.Conn), args[1].(*http.Request)\n\t\thandler(conn, req)\n\t})\n}\n\nfunc (s *testServer) OnWebSocketClose(handler func(err *websocket.CloseError)) {\n\ts.eventEmitter.On(\"close\", func(args ...interface{}) {\n\t\terr := args[0].(*websocket.CloseError)\n\t\thandler(err)\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketClose(handler func(err *websocket.CloseError)) {\n\ts.eventEmitter.Once(\"close\", func(args ...interface{}) {\n\t\terr := args[0].(*websocket.CloseError)\n\t\thandler(err)\n\t})\n}\n\nfunc (s *testServer) OnWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\ts.eventEmitter.On(\"message\", func(args ...interface{}) {\n\t\tconn, req, msgType, msg := args[0].(*websocket.Conn), args[1].(*http.Request), args[2].(websocket.MessageType), args[3].([]byte)\n\t\thandler(conn, req, msgType, msg)\n\t})\n}\n\nfunc (s *testServer) OnceWebSocketMessage(handler func(c *websocket.Conn, r *http.Request, msgType websocket.MessageType, msg []byte)) {\n\ts.eventEmitter.Once(\"message\", func(args ...interface{}) {\n\t\tconn, req, msgType, msg := args[0].(*websocket.Conn), args[1].(*http.Request), args[2].(websocket.MessageType), args[3].([]byte)\n\t\thandler(conn, req, msgType, msg)\n\t})\n}\n\nfunc (s *testServer) SendOnWebSocketConnection(msgType websocket.MessageType, data []byte) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\t// Emit connection established event\n\ts.eventEmitter.Emit(\"connection\", nil, nil)\n}\n\nfunc (s *testServer) WaitForWebSocketConnection() <-chan *wsConnection {\n\tch := make(chan *wsConnection)\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\t// Emit connection established event\n\ts.eventEmitter.Emit(\"connection\", nil, nil)\n\n\treturn ch\n}\n\nfunc NewTestServer(prefix string, port string) *testServer {\n\ts := &testServer{\n\t\tmu:           sync.Mutex{},\n\t\teventEmitter: newEventEmitter(),\n\t\tmux:          http.NewServeMux(),\n\t\troutes:       make(map[string]http.HandlerFunc),\n\t\trequestSubscribers: make(map[string][]chan *http.Request),\n\t\tPREFIX:        prefix,\n\t\tEMPTY_PAGE:    \"/empty\",\n\t\tCROSS_PROCESS_PREFIX: \"/cross-process\",\n\t\tWS_PREFIX:     \"/ws\",\n\t\tPORT:          port,\n\t}\n\n\ts.mux.HandleFunc(s.WS_PREFIX, s.wsHandler)\n\n\treturn s\n}"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Write a Go function that spawns a process in a new user namespace to read a file's contents, using pipes for inter-process communication to capture both standard output and error streams.\n\nFunction Description: The function spawnUserNamespaceCat creates a child process in a new user namespace to read a specified file. It establishes two pipes (one for standard output and one for standard error) to communicate between the parent and child processes. The function handles process creation, data transfer through pipes, process waiting, and error handling.\n\nInput:\n- nsPath (string): Path to the user namespace to spawn the process in\n- path (string): Path to the file that should be read by the child process\n\nOutput:\n- ([]byte, error): Returns the file contents as a byte slice if successful, or an error if any step fails. The error contains detailed information about the failure.\n\nNote: The function relies on an external C function spawn_userns_cat which handles the actual process creation in the new namespace. The function manages proper resource cleanup through defer statements and handles both successful and error cases with appropriate return values.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\t\"unsafe\"\n\n\t\"github.com/opencontainers/runc/libcontainer/configs\"\n\t\"github.com/sirupsen/logrus\"\n)\n/*\n#include <stdlib.h>\nextern int spawn_userns_cat(char *userns_path, char *path, int outfd, int errfd);\n*/\nimport \"C\"\nfunc spawnUserNamespaceCat(nsPath string, path string) ([]byte, error) {\n\trdr, wtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer rdr.Close()\n\tdefer wtr.Close()\n\n\terrRdr, errWtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create error pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer errRdr.Close()\n\tdefer errWtr.Close()\n\n\tcNsPath := C.CString(nsPath)\n\tdefer C.free(unsafe.Pointer(cNsPath))\n\tcPath := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cPath))\n\n\tchildPid := C.spawn_userns_cat(cNsPath, cPath, C.int(wtr.Fd()), C.int(errWtr.Fd()))\n\n\tif childPid < 0 {\n\t\treturn nil, fmt.Errorf(\"failed to spawn fork for userns\")\n\t} else if childPid == 0 {\n\t\tpanic(\"runc executing inside fork child -- unsafe state!\")\n\t}\n\n\twtr.Close()\n\toutput, err := io.ReadAll(rdr)\n\trdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn failed: %w\", err)\n\t}\n\n\terrWtr.Close()\n\terrOutput, err := io.ReadAll(errRdr)\n\terrRdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn error pipe failed: %w\", err)\n\t}\n\terrOutput = bytes.TrimSpace(errOutput)\n\n\tchild, err := os.FindProcess(int(childPid))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not find userns spawn process: %w\", err)\n\t}\n\tstate, err := child.Wait()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to wait for userns spawn process: %w\", err)\n\t}\n\tif !state.Success() {\n\t\terrStr := string(errOutput)\n\t\tif errStr == \"\" {\n\t\t\terrStr = fmt.Sprintf(\"unknown error (status code %d)\", state.ExitCode())\n\t\t}\n\t\treturn nil, fmt.Errorf(\"userns spawn: %s\", errStr)\n\t} else if len(errOutput) > 0 {\n\t\tlogrus.Debugf(\"userns spawn succeeded but unexpected error message found: %s\", string(errOutput))\n\t}\n\treturn output, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "right_result": "func spawnUserNamespaceCat(nsPath string, path string) ([]byte, error) {\n\tvar stdoutPipe, stderrPipe *os.File\n\tvar stdoutFd, stderrFd int\n\tvar err error\n\n\tstdoutPipe, stdoutFd, err = os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create stdout pipe: %w\", err)\n\t}\n\tdefer stdoutPipe.Close()\n\n\tstderrPipe, stderrFd, err = os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create stderr pipe: %w\", err)\n\t}\n\tdefer stderrPipe.Close()\n\n\tcmd := exec.Command(\"sh\", \"-c\", fmt.Sprintf(\"exec %s %s\", nsPath, path))\n\tcmd.Stdout = stdoutPipe\n\tcmd.Stderr = stderrPipe\n\n\tif err := cmd.Start(); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to start command: %w\", err)\n\t}\n\n\tstdout, err := io.ReadAll(stdoutPipe)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read stdout: %w\", err)\n\t}\n\n\tstderr, err := io.ReadAll(stderrPipe)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read stderr: %w\", err)\n\t}\n\n\tif len(stderr) > 0 {\n\t\treturn nil, fmt.Errorf(\"command failed with stderr: %s\", stderr)\n\t}\n\n\treturn stdout, nil\n}"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Create a Go struct that implements a log retrieval mechanism using pipes for inter-process communication, allowing for reading logs from a file and writing them to a pipe for consumption by another process.\n\nStruct Description: The `logRetriever` struct provides a way to read logs from a file and write them to a pipe, implementing `io.ReadCloser` for standard read and close operations. It also includes methods to manage the pipe's writer and output.\n\nFields:\n- reader: *os.File - The read end of the pipe used to consume log data.\n- writer: *os.File - The write end of the pipe used to send log data.\n- output: *fileCloner - A helper component that clones the writer's output to a log file.\n\nMethods:\n- newlogRetriever: (logFile string) -> (*logRetriever, error) - Initializes a new logRetriever instance, creates a pipe, and sets up file cloning. If the log file exists, copies its contents to the pipe.\n- Read: (p []byte) -> (int, error) - Implements io.Reader to read data from the pipe's reader.\n- CloseWriter: () -> error - Closes the pipe's writer to signal the end of data transmission.\n- Close: () -> error - Implements io.Closer to close the pipe's reader and release resources.\n- Opt: () -> cio.Opt - Returns an option for configuring IO streams, using a null reader and the output cloner.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"os\"\n)\n\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (l *logRetriever, err error) {\n\tl = &logRetriever{}\n\tif l.reader, l.writer, err = os.Pipe(); err != nil {\n\t\treturn\n\t}\n\n\tif l.output, err = newFileCloner(l.writer, logFile); err != nil {\n\t\treturn\n\t}\n\n\tif util.FileExists(logFile) {\n\t\tvar reader io.ReadCloser\n\t\tif reader, err = os.Open(logFile); err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer util.DeferErr(&err, reader.Close)\n\n\t\tif _, err = io.Copy(l.writer, reader); err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}\n\nvar _ io.ReadCloser = &logRetriever{}\n\nfunc (l *logRetriever) Opt() cio.Opt {\n\treturn cio.WithStreams(&nullReader{}, l.output, l.output)\n}\n\nfunc (l *logRetriever) Read(p []byte) (n int, err error) {\n\treturn l.reader.Read(p)\n}\n\nfunc (l *logRetriever) CloseWriter() (err error) {\n\treturn l.writer.Close()\n}\n\nfunc (l *logRetriever) Close() error {\n\treturn l.reader.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "right_result": "package main\n\nimport (\n\t\"os\"\n\t\"io\"\n\t\"fmt\"\n\t\"syscall\"\n)\n\ntype fileCloner struct {\n\t*os.File\n}\n\nfunc (f *fileCloner) Clone() (*os.File, error) {\n\tfd := int(f.Fd())\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tgo func() {\n\t\t_, _ = io.Copy(w, os.NewFile(uintptr(fd), \"log\"))\n\t\tw.Close()\n\t}()\n\treturn r, nil\n}\n\ntype logRetriever struct {\n\treader *os.File\n\twriter *os.File\n\toutput *fileCloner\n}\n\nfunc newlogRetriever(logFile string) (*logRetriever, error) {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\toutput, _ := &fileCloner{os.Stdout}\n\tif _, err := os.Stat(logFile); err == nil {\n\t\tf, err := os.Open(logFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer f.Close()\n\t\t_, _ = io.Copy(w, f)\n\t}\n\treturn &logRetriever{\n\t\treader: r,\n\t\twriter: w,\n\t\toutput: output,\n\t}, nil\n}\n\nfunc (lr *logRetriever) Read(p []byte) (int, error) {\n\treturn lr.reader.Read(p)\n}\n\nfunc (lr *logRetriever) CloseWriter() error {\n\treturn lr.writer.Close()\n}\n\nfunc (lr *logRetriever) Close() error {\n\terr := lr.reader.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn lr.writer.Close()\n}\n\ntype Opt struct{}\n\nfunc (lr *logRetriever) Opt() *Opt {\n\treturn &Opt{}\n}"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes and ports concurrently, with specific handlers for different endpoints. The server should mirror incoming requests (displaying request details) by default and respond with \"hello\" for specific pipeline activity routes.\n\nFunction Description: The main function sets up an HTTP server with multiple handlers and listens on multiple ports concurrently. It includes:\n1. A simple helloHandler that responds with \"hello\"\n2. A mirrorHandler that displays detailed request information\n3. Concurrent server instances on ports 9091-9097\n4. A primary server instance on port 9098\n\nInput: None (The functions handle HTTP requests which contain their own input data)\n\nOutput: None (The functions write responses to http.ResponseWriter)\n\nMethods:\n\nhelloHandler: func(w http.ResponseWriter, req *http.Request) - Responds with \"hello\" string\nmirrorHandler: func(w http.ResponseWriter, req *http.Request) - Displays detailed request information including method, URL, headers, and body\nListenAndServe: Called on multiple ports to start HTTP servers concurrently\n\nNote: The code uses http.HandleFunc to register routes and starts servers on multiple ports using goroutines for concurrent operation. The mirrorHandler includes a 10ms delay and outputs request details to both the response and stdout using a TeeWriter.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\thelloHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\tio.WriteString(w, \"hello\")\n\t}\n\tmirrorHandler := func(w http.ResponseWriter, req *http.Request) {\n\t\ttime.Sleep(10 * time.Millisecond)\n\t\tbody, err := io.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tbody = []byte(fmt.Sprintf(\"<read failed: %v>\", err))\n\t\t}\n\n\t\ttw := NewTeeWriter(w, os.Stdout)\n\n\t\turl := req.URL.Path\n\t\tif req.URL.Query().Encode() != \"\" {\n\t\t\turl += \"?\" + req.URL.Query().Encode()\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Your Request\")\n\t\tfmt.Fprintln(tw, \"==============\")\n\t\tfmt.Fprintln(tw, \"Method:\", req.Method)\n\t\tfmt.Fprintln(tw, \"URL   :\", url)\n\n\t\tfmt.Fprintln(tw, \"Header:\")\n\t\tfor k, v := range req.Header {\n\t\t\tfmt.Fprintf(tw, \"    %s: %v\\n\", k, v)\n\t\t}\n\n\t\tfmt.Fprintln(tw, \"Body  :\", string(body))\n\t}\n\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\thttp.HandleFunc(\"/pipeline/activity/1\", helloHandler)\n\thttp.HandleFunc(\"/pipeline/activity/2\", helloHandler)\n\n\tfor _, port := range []int{9091, 9092, 9093, 9094, 9095, 9096, 9097} {\n\t\tgo http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}\n\n\thttp.ListenAndServe(\":9098\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc helloHandler(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello\")\n}\n\nfunc mirrorHandler(w http.ResponseWriter, req *http.Request) {\n\ttype logEntry struct {\n\t\tMethod string\n\t\tURL    string\n\t\tHeaders map[string][]string\n\t\tBody string\n\t}\n\tlog := logEntry{\n\t\tMethod: req.Method,\n\t\tURL:    req.URL.String(),\n\t\tHeaders: req.Header,\n\t\tBody: req.Body != nil,\n\t}\n\ttime.Sleep(10 * time.Millisecond)\n\tmw := io.MultiWriter(w, &log)\n\tfmt.Fprintf(mw, \"Request details:\\nMethod: %s\\nURL: %s\\nHeaders: %v\\nBody: %v\\n\", log.Method, log.URL, log.Headers, log.Body)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", mirrorHandler)\n\thttp.HandleFunc(\"/hello\", helloHandler)\n\n\tfor port := 9091; port <= 9097; port++ {\n\t\tgo func(p int) {\n\t\t\taddr := fmt.Sprintf(\":%d\", p)\n\t\t\tfmt.Printf(\"Starting server on %s\\n\", addr)\n\t\t\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\t\t\tfmt.Printf(\"Error starting server on %d: %v\\n\", p, err)\n\t\t\t}\n\t\t}(port)\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", 9098)\n\tfmt.Printf(\"Starting primary server on %s\\n\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tfmt.Printf(\"Error starting primary server: %v\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Go HTTP server that handles incoming requests, processes JSON payloads, and returns a modified response with a large body and custom headers.\n\nFunction Description: The main function sets up an HTTP server that listens on port 10000. It defines a handler for the root path (\"/\") that:\n1. Reads and closes the request body\n2. Unmarshals the JSON body into a contextEntity struct\n3. Modifies the response status, headers, and body\n4. Marshals the modified contextEntity back to JSON and sends it as the response\n5. Handles errors appropriately with status codes\n\nInput: \n- HTTP requests with JSON body containing a contextEntity structure\n- The handler expects the request body to be a valid JSON representation of contextEntity\n\nOutput:\n- HTTP responses with:\n  - Status 200 on success with modified JSON payload\n  - Status 400 for bad requests (invalid JSON or read errors)\n  - Status 500 for internal server errors (marshaling failures)\n- Response includes:\n  - Custom header \"X-Remote-Name: G.O.O.D\"\n  - Large body (64KB of '-' characters)\n  - Modified contextEntity structure as JSON",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tlargeBodySize := 64 * 1024\n\tlargeBody := bytes.Repeat([]byte(`-`), largeBodySize)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer r.Body.Close()\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity := &contextEntity{}\n\t\terr = json.Unmarshal(body, ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tctxEntity.Response.StatusCode = 200\n\t\tctxEntity.Response.Header.Add(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tctxEntity.Response.Body = largeBody\n\n\t\tbuff, err := json.Marshal(ctxEntity)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write(buff)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype contextEntity struct {\n\tName string\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"POST\" {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Failed to read request body\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdefer r.Body.Close()\n\n\t\tvar entity contextEntity\n\t\tif err := json.Unmarshal(body, &entity); err != nil {\n\t\t\thttp.Error(w, \"Invalid JSON payload\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"X-Remote-Name\", \"G.O.O.D\")\n\t\tw.WriteHeader(http.StatusOK)\n\n\t\tlargeBody := strings.Repeat(\"-\", 64*1024)\n\t\tfmt.Fprintf(w, \"%s\\n%s\", largeBody, entity.Name)\n\t})\n\n\thttp.ListenAndServe(\":10000\", nil)\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a POST request and serves an HTML form for file submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it serves an HTML form (rendered from a template). For POST requests, it processes file uploads by saving the uploaded file to the filesystem.\n\nInput:\n- None (The function takes no direct input parameters, but handles HTTP requests with the following characteristics:\n  - GET requests to \"/\" trigger form rendering\n  - POST requests to \"/\" with a \"file\" form field trigger file upload processing)\n\nOutput:\n- None (The function doesn't return any value, but has the following side effects:\n  - Starts an HTTP server on port 9000\n  - Writes responses to http.ResponseWriter\n  - Creates files on the filesystem for successful uploads)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\ttpl, err := template.ParseFiles(\"form.gohtml\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tif req.Method == \"POST\" {\n\t\t\tsrc, _, err := req.FormFile(\"file\")\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer src.Close()\n\n\t\t\tdst, err := os.Create(filepath.Join(\"./\", \"file.txt\"))\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\terr = tpl.Execute(res, nil)\n\t\tif err != nil {\n\t\t\thttp.Error(res, err.Error(), 500)\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\ttmpl := `<!DOCTYPE html>\n<html>\n<head><title>File Upload</title></head>\n<body>\n<h2>Upload a File</h2>\n<form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">\n<input type=\"file\" name=\"file\"><br>\n<input type=\"submit\" value=\"Upload\">\n</form>\n</body>\n</html>`\n\t\t\tio.WriteString(w, tmpl)\n\t\t\treturn\n\t\t}\n\t\tr.ParseMultipartForm(10 << 20)\n\t\tfile, handler, err := r.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error retrieving the file\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\t\tf, _ := os.Create(handler.Filename)\n\t\tdefer f.Close()\n\t\tio.Copy(f, file)\n\t\tfmt.Fprintf(w, \"File %s uploaded successfully\\n\", handler.Filename)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a simple HTTP server in Go that sets a cookie when the root path (\"/\") is accessed.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. When a request is made to the root path, it responds by setting a cookie named \"my-cookie\" with the value \"some value\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\thttp.SetCookie(res, &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t})\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie := &http.Cookie{\n\t\t\tName:  \"my-cookie\",\n\t\t\tValue: \"some value\",\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t\tw.Write([]byte(\"Cookie set\"))\n\t})\n\thttp.ListenAndServe(\":9000\", nil)"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a simple HTTP server in Go that responds to requests with a greeting message containing the value of the \"AUTHOR\" environment variable.\n\nFunction Description: The main function sets up a basic HTTP server with a single route (\"/\") that responds to all HTTP requests. The response is a plain text message combining \"hello \" with the value of the \"AUTHOR\" environment variable. The server listens on a specified port.\n\nInput: \n- *addr (string pointer): A command-line flag specifying the server address and port to listen on (e.g., \":8080\")\n\nOutput: \n- None (The function runs indefinitely, serving HTTP requests until interrupted)\n- For each HTTP request to \"/\", outputs \"hello [AUTHOR]\" as the response body\n\nNote: The function does not explicitly return any values but writes to the http.ResponseWriter for each incoming request. The server continues running until terminated.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n)\nfunc main() {\n\tflag.Parse()\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"hello \"+os.Getenv(\"AUTHOR\"))\n\t})\n\thttp.ListenAndServe(*addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\taddr := flag.String(\"addr\", \":8080\", \"Server address and port\")\n\tflag.Parse()\n\n\tauthor := os.Getenv(\"AUTHOR\")\n\tif author == \"\" {\n\t\tauthor = \"unknown\"\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"hello %s\\n\", author)\n\t})\n\n\tfmt.Printf(\"Starting server on %s\\n\", *addr)\n\tif err := http.ListenAndServe(*addr, nil); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Create a Go HTTP server that acts as a proxy, forwarding requests based on a header value and returning the corresponding stored response.\n\nFunction Description: The main function sets up an HTTP server with a root handler that retrieves and forwards responses based on the \"proxify\" header. It stores responses in a global map and cleans up after forwarding. The server runs concurrently.\n\nInput: \n- options.HTTPListenerAddress (string): The address and port on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (the function runs indefinitely as a server)\n- Errors are logged fatally if the server fails to start\n\nNote: The implementation uses global variables (response and responses) for storing and retrieving HTTP responses. The handler expects requests to contain a \"proxify\" header that serves as a key to look up pre-stored responses in the responses map. After forwarding a response, it removes the corresponding entry from the map.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"io\"\n)\n\nvar (\n\tresponse   *http.Response\n\tresponses  map[string]*http.Response\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tkey := req.Header.Get(\"proxify\")\n\t\tresponse := responses[key]\n\t\tdelete(responses, key)\n\n\t\tfor k, v := range response.Header {\n\t\t\tw.Header().Add(k, strings.Join(v, \"; \"))\n\t\t}\n\t\tw.WriteHeader(response.StatusCode)\n\t\tio.Copy(w, response.Body)\n\t})\n\tgo func() {\n\t\tif err := http.ListenAndServe(options.HTTPListenerAddress, nil); err != nil {\n\t\t\tgologger.Fatal().Msgf(\"Could not listen and serve: %s\\n\", err)\n\t\t}\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar response map[string]string = make(map[string]string)\nvar responses map[string][]byte = make(map[string][]byte)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tproxifyHeader := r.Header.Get(\"proxify\")\n\t\tif proxifyHeader == \"\" {\n\t\t\thttp.Error(w, \"Missing 'proxify' header\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tif resp, exists := responses[proxifyHeader]; exists {\n\t\t\tdelete(responses, proxifyHeader)\n\t\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t\tw.Write(resp)\n\t\t} else {\n\t\t\thttp.Error(w, \"Response not found\", http.StatusNotFound)\n\t\t}\n\t})\n\n\taddr := options.HTTPListenerAddress\n\tlog.Printf(\"Starting HTTP server on %s\\n\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a Go HTTP server that serves as an interface for running and displaying scorecard results for GitHub repositories. The server should handle requests, process repository information, execute scorecard checks, and return results in either JSON or HTML format based on the request's content type.\n\nFunction Description: The `serveCmd` function creates and configures a Cobra command that starts an HTTP server. The server listens for requests, processes GitHub repository URLs, runs scorecard checks on those repositories, and returns the results. The function handles template parsing, route registration, and server startup.\n\nInput: \n- `o *options.Options`: A pointer to an options struct containing configuration settings like log level and commit depth\n\nOutput: \n- `*cobra.Command`: Returns a configured Cobra command that can be executed to start the HTTP server\n\nThe function does not explicitly return any values from its Run method, but it does:\n1. Write HTTP responses to the client (through http.ResponseWriter)\n2. Output logs through the logger\n3. May panic in case of critical errors during template parsing or server startup",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/ossf/scorecard/v5/clients/githubrepo\"\n\t\"github.com/ossf/scorecard/v5/clients/ossfuzz\"\n\t\"github.com/ossf/scorecard/v5/log\"\n\t\"github.com/ossf/scorecard/v5/options\"\n\t\"github.com/ossf/scorecard/v5/pkg/scorecard\"\n)\nfunc serveCmd(o *options.Options) *cobra.Command {\n\treturn &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Serve the scorecard program over http\",\n\t\tLong:  ``,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tlogger := log.NewLogger(log.ParseLevel(o.LogLevel))\n\n\t\t\tt, err := template.New(\"webpage\").Parse(tpl)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"parsing webpage template\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\thttp.HandleFunc(\"/\", func(rw http.ResponseWriter, r *http.Request) {\n\t\t\t\trepoParam := r.URL.Query().Get(\"repo\")\n\t\t\t\tconst length = 3\n\t\t\t\ts := strings.SplitN(repoParam, \"/\", length)\n\t\t\t\tif len(s) != length {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\trepo, err := githubrepo.MakeGithubRepo(repoParam)\n\t\t\t\tif err != nil {\n\t\t\t\t\trw.WriteHeader(http.StatusBadRequest)\n\t\t\t\t}\n\t\t\t\tctx := r.Context()\n\t\t\t\trepoClient := githubrepo.CreateGithubRepoClient(ctx, logger)\n\t\t\t\tossFuzzRepoClient, err := ossfuzz.CreateOSSFuzzClientEager(ossfuzz.StatusURL)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"initializing clients\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\t\t\t\tdefer ossFuzzRepoClient.Close()\n\t\t\t\trepoResult, err := scorecard.Run(ctx, repo,\n\t\t\t\t\tscorecard.WithCommitDepth(o.CommitDepth),\n\t\t\t\t\tscorecard.WithRepoClient(repoClient),\n\t\t\t\t\tscorecard.WithOSSFuzzClient(ossFuzzRepoClient),\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(err, \"running enabled scorecard checks on repo\")\n\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}\n\n\t\t\t\tif r.Header.Get(\"Content-Type\") == \"application/json\" {\n\t\t\t\t\tif err := repoResult.AsJSON(o.ShowDetails, log.ParseLevel(o.LogLevel), rw); err != nil {\n\t\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t\t\trw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := t.Execute(rw, repoResult); err != nil {\n\t\t\t\t\tlogger.Error(err, \"\")\n\t\t\t\t}\n\t\t\t})\n\t\t\tport := os.Getenv(\"PORT\")\n\t\t\tif port == \"\" {\n\t\t\t\tport = \"8080\"\n\t\t\t}\n\t\t\tlogger.Info(\"Listening on localhost:\" + port + \"\\n\")\n\t\t\terr = http.ListenAndServe(fmt.Sprintf(\"0.0.0.0:%s\", port), nil)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(err, \"listening and serving\")\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t},\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/spf13/viper\"\n\t\"go.uber.org/zap\"\n)\n\ntype options struct {\n\tAddr        string\n\tTemplateDir string\n\tLogLevel    string\n\tCommitDepth int\n}\n\nfunc serveCmd(o *options) *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:   \"serve\",\n\t\tShort: \"Starts the HTTP server for GitHub repository scorecard checks\",\n\t\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t\tlogger, err := zap.NewProduction()\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer logger.Sync()\n\n\t\t\t// Setup template parsing\n\t\t\ttmpls, err := parseTemplates(o.TemplateDir)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Fatal(\"Failed to parse templates\", zap.Error(err))\n\t\t\t}\n\n\t\t\t// Setup HTTP server\n\t\t\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif r.Method != \"POST\" {\n\t\t\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Parse repository URL from request body\n\t\t\t\tvar repoURL string\n\t\t\t\tif err := json.NewDecoder(r.Body).Decode(&repoURL); err != nil {\n\t\t\t\t\thttp.Error(w, \"Invalid request body\", http.StatusBadRequest)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Run scorecard checks\n\t\t\t\tresults, err := runScorecardChecks(repoURL, o.CommitDepth)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Error(\"Failed to run scorecard checks\", zap.Error(err))\n\t\t\t\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// Determine response format based on content type\n\t\t\t\tcontentType := r.Header.Get(\"Content-Type\")\n\t\t\t\tif strings.Contains(contentType, \"application/json\") {\n\t\t\t\t\tjsonResponse, err := json.Marshal(results)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlogger.Error(\"Failed to marshal JSON response\", zap.Error(err))\n\t\t\t\t\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\t\t\tw.Write(jsonResponse)\n\t\t\t\t} else if strings.Contains(contentType, \"text/html\") {\n\t\t\t\t\thtmlResponse := tmpl.ExecuteToString(results)\n\t\t\t\t\tif htmlResponse == \"\" {\n\t\t\t\t\t\tlogger.Error(\"Failed to execute template\")\n\t\t\t\t\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\t\t\t\tw.Write([]byte(htmlResponse))\n\t\t\t\t} else {\n\t\t\t\t\thttp.Error(w, \"Unsupported content type\", http.UnsupportedMediaType)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tlogger.Info(\"Starting HTTP server\", zap.String(\"addr\", o.Addr))\n\t\t\tif err := http.ListenAndServe(o.Addr, nil); err != nil {\n\t\t\t\tlogger.Fatal(\"Failed to start HTTP server\", zap.Error(err))\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\n\tcmd.Flags().StringVarP(&o.Addr, \"addr\", \"a\", \":8080\", \"Address and port to listen on\")\n\tcmd.Flags().StringVarP(&o.TemplateDir, \"template-dir\", \"t\", \"templates\", \"Directory containing HTML templates\")\n\tcmd.Flags().StringVarP(&o.LogLevel, \"log-level\", \"l\", \"info\", \"Log level (debug|info|warn|error)\")\n\tcmd.Flags().IntVarP(&o.CommitDepth, \"commit-depth\", \"d\", 10, \"Maximum number of commits to analyze\")\n\n\treturn cmd\n}\n\nfunc parseTemplates(dir string) (map[string]*template.Template, error) {\n\ttmpls := make(map[string]*template.Template)\n\tfiles, err := os.ReadDir(dir)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, file := range files {\n\t\tif !file.IsDir() && strings.HasSuffix(file.Name(), \".html\") {\n\t\t\ttmplName := strings.TrimSuffix(file.Name(), \".html\")\n\t\t\ttmpl, err := template.ParseFiles(fmt.Sprintf(\"%s/%s.html\", dir, tmplName))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ttmpls[tmplName] = tmpl\n\t\t}\n\t}\n\n\treturn tmpls, nil\n}\n\nfunc runScorecardChecks(repoURL string, commitDepth int) (map[string]interface{}, error) {\n\t// Simulate running scorecard checks\n\tresults := map[string]interface{}{\n\t\t\"repository\": repoURL,\n\t\t\"checks\": []map[string]interface{}{\n\t\t\t{\"name\": \"Code Quality\", \"score\": 95, \"details\": \"High code quality with minimal issues\"},\n\t\t\t{\"name\": \"Security\", \"score\": 85, \"details\": \"Some security vulnerabilities found\"},\n\t\t\t{\"name\": \"Documentation\", \"score\": 70, \"details\": \"Incomplete documentation\"},\n\t\t},\n\t\t\"commit_depth\": commitDepth,\n\t}\n\n\treturn results, nil\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Go HTTP server that handles Stripe webhook events, specifically processing billing meter error reports and other event types.\n\nFunction Description: The main function sets up an HTTP server with a \"/webhook\" endpoint that receives and processes Stripe webhook events. It validates the webhook signature, retrieves full event details from Stripe, and handles specific event types (particularly \"v1.billing.meter.error_report_triggered\").\n\nInput:\n- HTTP POST requests to \"/webhook\" endpoint containing:\n  - Request body with Stripe event payload (JSON format)\n  - \"Stripe-Signature\" header for webhook validation\n- Environment variables:\n  - apiKey: Stripe API key for authentication\n  - webhookSecret: Secret for validating webhook signatures\n\nOutput:\n- HTTP responses:\n  - 200 OK for successful processing\n  - 500 Internal Server Error for any processing failures\n- Console output:\n  - Success messages with meter IDs for handled events\n  - Error messages for any processing failures\n  - Notifications for unhandled event types\n\nThe function does not explicitly return values but writes to the HTTP response and console.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/stripe/stripe-go/v81\"\n\tbillingMeters \"github.com/stripe/stripe-go/v81/billing/meter\"\n\t\"github.com/stripe/stripe-go/v81/rawrequest\"\n\twebhook \"github.com/stripe/stripe-go/v81/webhook\"\n)\nfunc main() {\n\tb, err := stripe.GetRawRequestBackend(stripe.APIBackend)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tclient := rawrequest.Client{B: b, Key: apiKey}\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, req *http.Request) {\n\t\tconst MaxBodyBytes = int64(65536)\n\t\treq.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)\n\t\tpayload, err := ioutil.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\terr = webhook.ValidatePayload(payload, req.Header.Get(\"Stripe-Signature\"), webhookSecret)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error reading request body: %v\\n\", err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tvar thinEvent map[string]interface{}\n\n\t\tif err := json.Unmarshal(payload, &thinEvent); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse thin event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\teventID := thinEvent[\"id\"].(string)\n\n\t\tvar event map[string]interface{}\n\n\t\tresp, err := client.RawRequest(http.MethodGet, \"/v2/core/events/\"+eventID, \"\", nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get pull event: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tif err := json.Unmarshal(resp.RawJSON, &event); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to parse pull event body json: %v\\n\", err.Error())\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tswitch t := event[\"type\"].(string); t {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\trelatedObject := event[\"related_object\"].(map[string]interface{})\n\t\t\tmeter, err := billingMeters.Get(relatedObject[\"id\"].(string), nil)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get related meter object: %v\\n\", err.Error())\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmeterID := meter.ID\n\t\t\tfmt.Printf(\"Success! %s\\n\", meterID)\n\t\t\tfmt.Println(fmt.Sprint(event[\"data\"]))\n\t\tdefault:\n\t\t\tfmt.Fprintf(os.Stderr, \"Unhandled event type: %s\\n\", t)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\terr = http.ListenAndServe(\":4242\", nil)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/stripe/stripe-go/v79\"\n\t\"github.com/stripe/stripe-go/v79/webhook\"\n)\n\nfunc main() {\n\tstripe.Key = os.Getenv(\"apiKey\")\n\twebhookSecret := os.Getenv(\"webhookSecret\")\n\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"POST\" {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\n\t\tbody, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Failed to read request body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer r.Body.Close()\n\n\t\tif len(body) == 0 {\n\t\t\thttp.Error(w, \"Empty request body\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tevent, err := webhook.ConstructEvent(body, r.Header.Get(\"Stripe-Signature\"), webhookSecret)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Webhook error: %s\", err)\n\t\t\thttp.Error(w, \"Webhook validation failed\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tswitch event.Type {\n\t\tcase \"v1.billing.meter.error_report_triggered\":\n\t\t\tvar data map[string]interface{}\n\t\t\terr = json.Unmarshal(body, &data)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Failed to parse event data:\", err)\n\t\t\t\thttp.Error(w, \"Failed to parse event data\", http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmeterID, ok := data[\"meter\"].(string)\n\t\t\tif !ok {\n\t\t\t\tlog.Println(\"Missing meter ID in event\")\n\t\t\t\thttp.Error(w, \"Missing meter ID in event\", http.StatusBadRequest)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlog.Printf(\"Handled billing meter error report for meter ID: %s\", meterID)\n\t\t\tfmt.Fprintf(w, \"Received and processed billing meter error report for meter ID: %s\\n\", meterID)\n\t\tdefault:\n\t\t\tlog.Printf(\"Unhandled event type: %s\", event.Type)\n\t\t\tfmt.Fprintf(w, \"Received unhandled event type: %s\\n\", event.Type)\n\t\t}\n\n\t\tw.WriteHeader(http.StatusOK)\n\t})\n\n\tlog.Println(\"Starting HTTP server on :8080\")\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatalf(\"Could not start server: %s\", err)\n\t}\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles user authentication through cookies, displaying different HTML content based on login status.\n\nFunction Description: The main function sets up an HTTP server with a single route handler that manages user authentication. It checks for a \"logged-in\" cookie, processes login/logout requests, and serves different HTML content based on the authentication status.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but serves HTTP responses and maintains server state)\n\nNote: The function handles three main scenarios:\n1. Initial visit (no cookie set)\n2. Successful login (POST with correct password)\n3. Logout request (/logout path)\nFor each scenario, it sets appropriate cookies and returns corresponding HTML content.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"logged-in\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"logged-in\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\n\t\tif req.Method == \"POST\" {\n\t\t\tpassword := req.FormValue(\"password\")\n\t\t\tif password == \"secret\" {\n\t\t\t\tcookie = &http.Cookie{\n\t\t\t\t\tName:  \"logged-in\",\n\t\t\t\t\tValue: \"1\",\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif req.URL.Path == \"/logout\" {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:   \"logged-in\",\n\t\t\t\tValue:  \"0\",\n\t\t\t\tMaxAge: -1,\n\t\t\t}\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\t\tvar html string\n\n\t\tif cookie.Value == strconv.Itoa(0) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1>LOG IN</h1>\n\t\t\t<form method=\"post\" action=\"http://localhost:9000/\">\n\t\t\t\t<h3>User name</h3>\n\t\t\t\t<input type=\"text\" name=\"userName\" id=\"userName\">\n\t\t\t\t<h3>Password</h3>\n\t\t\t\t<input type=\"text\" name=\"password\" id=\"password\">\n\t\t\t\t<br>\n\t\t\t\t<input type=\"submit\">\n\t\t\t\t<input type=\"submit\" name=\"logout\" value=\"logout\">\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tif cookie.Value == strconv.Itoa(1) {\n\t\t\thtml = `\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<title></title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t<h1><a href=\"http://localhost:9000/logout\">LOG OUT</a></h1>\n\t\t\t</body>\n\t\t\t</html>`\n\t\t}\n\n\t\tio.WriteString(res, html)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tif r.FormValue(\"password\") == \"secret\" {\n\t\t\t\tcookie := &http.Cookie{\n\t\t\t\t\tName:  \"logged-in\",\n\t\t\t\t\tValue: \"true\",\n\t\t\t\t\tPath:  \"/\",\n\t\t\t\t}\n\t\t\t\thttp.SetCookie(w, cookie)\n\t\t\t\thttp.Redirect(w, r, \"/\", http.StatusFound)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tcookie, _ := r.Cookie(\"logged-in\")\n\t\tvar content string\n\t\tif cookie != nil && cookie.Value == \"true\" {\n\t\t\tcontent = \"<h1>Welcome, User!</h1><form action=\\\"/logout\\\" method=\\\"post\\\"><button type=\\\"submit\\\">Logout</button></form>\"\n\t\t} else {\n\t\t\tcontent = \"<h1>Login Required</h1><form action=\\\"/\\\" method=\\\"post\\\"><input type=\\\"password\\\" name=\\\"password\\\"><button type=\\\"submit\\\">Login</button></form>\"\n\t\t}\n\n\t\tfmt.Fprintf(w, \"<html><body>%s</body></html>\", content)\n\t})\n\n\thttp.HandleFunc(\"/logout\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie := &http.Cookie{\n\t\t\tName:   \"logged-in\",\n\t\t\tValue:  \"\",\n\t\t\tPath:   \"/\",\n\t\t\tMaxAge: -1,\n\t\t}\n\t\thttp.SetCookie(w, cookie)\n\t\thttp.Redirect(w, r, \"/\", http.StatusFound)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a simple HTTP server in Go that tracks and displays the number of visits by maintaining a cookie-based counter.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles incoming requests. For each request, it checks for a cookie named \"my-cookie\". If the cookie doesn't exist, it creates one with an initial value of \"0\". The function increments the cookie value on each visit and sends it back in the response, effectively maintaining a visit counter.\n\nInput: None (The function takes no direct input parameters. It responds to HTTP requests received on port 9000.)\n\nOutput: None (The function doesn't return any value. It writes the current visit count to the HTTP response and sets/updates the cookie in the response header.)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"my-cookie\")\n\t\tif err == http.ErrNoCookie {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:  \"my-cookie\",\n\t\t\t\tValue: \"0\",\n\t\t\t}\n\t\t}\n\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\tcount++\n\t\tcookie.Value = strconv.Itoa(count)\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, cookie.Value)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tcookie, err := r.Cookie(\"my-cookie\")\n\t\tif err != nil || cookie.Value == \"\" {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName:   \"my-cookie\",\n\t\t\t\tValue:  \"0\",\n\t\t\t\tPath:   \"/\",\n\t\t\t\tMaxAge: 365 * 24 * 60 * 60,\n\t\t\t\tExpires: time.Now().AddDate(1, 0, 0),\n\t\t\t}\n\t\t\thttp.SetCookie(w, cookie)\n\t\t} else {\n\t\t\tcount, _ := strconv.Atoi(cookie.Value)\n\t\t\tcount++\n\t\t\tcookie.Value = strconv.Itoa(count)\n\t\t\thttp.SetCookie(w, cookie)\n\t\t}\n\t\tw.Write([]byte(\"Visit count: \" + cookie.Value))\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebSocket connections at the root path (\"/\"). The server should load configuration from a JSON file and start listening on a specified port.\n\nFunction Description: The main function initializes the server by loading configuration, setting up a WebSocket handler at the root path, and starting the HTTP server on the configured port.\n\nInput: None (configuration is loaded from \"config.json\" file)\n\nOutput: None (the function runs indefinitely serving HTTP requests or panics if server fails to start)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"golang.org/x/net/websocket\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\tConfig = load(\"config.json\")\n\t\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\ts := websocket.Server{Handler: websocket.Handler(wsHandler)}\n\t\ts.ServeHTTP(w, req)\n\t})\n\n\terr := http.ListenAndServe(\":\"+strconv.Itoa(Config.Port), nil)\n\tif err != nil {\n\t\tpanic(\"Error: \" + err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"config\"\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tfmt.Println(\"Upgrade error:\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tfor {\n\t\t_, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Read error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tconn.WriteMessage(websocket.TextMessage, message)\n\t}\n}\n\nfunc main() {\n\tcfg, err := config.LoadConfig(\"config.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\thttp.HandleFunc(\"/\", wsHandler)\n\tfmt.Printf(\"Serving on :%d\\n\", cfg.Port)\n\tif err := http.ListenAndServe(fmt.Sprintf(\":%d\", cfg.Port), nil); err != nil {\n\t\tpanic(err)\n\t}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles form submissions and displays a simple HTML form.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form. For POST requests, it reads the form value and prints it to the console while still displaying the form. The server listens on port 9000.\n\nInput: None (The function takes no direct input parameters, but receives HTTP requests through the net/http package)\n\nOutput: None (The function doesn't return any value, but writes to the HTTP response and prints to console)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t <input type=\"text\" name=\"q\">\n\t\t <input type=\"submit\">\n\n\t\t</form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tfmt.Fprintf(w, \"<html><body><form method='post'>Name: <input type='text' name='name'><input type='submit'></form></body></html>\")\n\t\t} else if r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tname := r.FormValue(\"name\")\n\t\t\tfmt.Println(\"Received name:\", name)\n\t\t\tfmt.Fprintf(w, \"<html><body><form method='post'>Name: <input type='text' name='name'><input type='submit'></form></body></html>\")\n\t\t}\n\t})\n\thttp.ListenAndServe(\":9000\", nil)"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and starts an HTTP server listening on port 8080.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response.\n- `r *http.Request` - Represents the HTTP request received from the client.\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles form submissions and displays the submitted value. The server should respond to both GET and POST requests on the root path (\"/\") and render an HTML form with a checkbox input.\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path (\"/\"). The handler processes form submissions, extracts the form value, and returns an HTML response containing the form and the submitted value.\n\nInput: None (The function takes no direct input parameters. Input is received through HTTP requests.)\n\nOutput: None (The function doesn't return any value. Output is sent through the HTTP response writer.)\n\nNote: The function internally uses http.ResponseWriter to send responses and *http.Request to receive requests. The handler checks for a form value with key \"q\" and includes it in the response. The server listens on port 9000.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tval := req.FormValue(key)\n\t\tfmt.Println(\"value: \", val)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\">\n\n\t\t<input type=\"checkbox\" name=\"q\">\n\t\t<input type=\"submit\">\n\n\t\t</form>`+val)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"POST\" {\n\t\t\tr.ParseForm()\n\t\t\tvalue := r.FormValue(\"q\")\n\t\t\tfmt.Fprintf(w, \"<html><body>\")\n\t\t\tfmt.Fprintf(w, \"<h1>Submitted Value:</h1><p>%s</p>\", value)\n\t\t\tfmt.Fprintf(w, \"<form method='post'>\")\n\t\t\tfmt.Fprintf(w, \"<input type='checkbox' name='q'> Checkbox<br>\")\n\t\t\tfmt.Fprintf(w, \"<input type='submit' value='Submit'>\")\n\t\t\tfmt.Fprintf(w, \"</form></body></html>\")\n\t\t} else {\n\t\t\tfmt.Fprintf(w, \"<html><body>\")\n\t\t\tfmt.Fprintf(w, \"<h1>Submit Form</h1>\")\n\t\t\tfmt.Fprintf(w, \"<form method='post'>\")\n\t\t\tfmt.Fprintf(w, \"<input type='checkbox' name='q'> Checkbox<br>\")\n\t\t\tfmt.Fprintf(w, \"<input type='submit' value='Submit'>\")\n\t\t\tfmt.Fprintf(w, \"</form></body></html>\")\n\t\t}\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with \"hello world\".\n\nFunction Description: The main function sets up an HTTP server with a single route handler for the root path. The handler writes \"hello world\" as the response. The server listens on port 8080.\n\nInput: None (The function takes no direct input parameters; requests are handled via HTTP)\n\nOutput: None (The function doesn't return anything; responses are written to the http.ResponseWriter)\n\nNote: The reference code shows a complete implementation where:\n1. A handler function is defined to write \"hello world\" response\n2. The handler is registered for the root path \"/\"\n3. The server starts listening on port 8080",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nvar myHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(\"hello world\")) })\n\nfunc main() {\n\thttp.HandleFunc(\"/\", myHandler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc helloWorldHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"hello world\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", helloWorldHandler)\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a function that serves Prometheus metrics via an HTTP server, updating custom metrics (uptime and packet count) on each request.\n\nFunction Description: The ServeMetricsAt function starts an HTTP server to expose Prometheus metrics. It registers custom metrics (uptime and packet count), updates them on each request to the metrics endpoint, and serves the metrics using the Prometheus HTTP handler. The function runs the server in a goroutine to avoid blocking the main program.\n\nInput:\n- addr (string): The network address (including port) where the metrics server should listen (e.g., \":8080\")\n- c (*collector.Collector): A pointer to a collector instance used to get the current packet count (can be nil)\n\nOutput: None (the function runs indefinitely in a background goroutine)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\n\t\"github.com/dreadl0ck/netcap/collector\"\n)\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tprometheus.MustRegister(upTime)\n\tprometheus.MustRegister(numPackets)\n\n\tfmt.Println(\"starting to serve metrics at:\", addr+metricsRoute)\n\n\tgo func() {\n\t\tmetricsHandler := promhttp.Handler()\n\n\t\thttp.HandleFunc(metricsRoute, func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupTime.WithLabelValues().Set(math.RoundToEven(time.Since(startTime).Seconds())\n\n\t\t\tif c != nil {\n\t\t\t\tnumPackets.WithLabelValues().Set(float64(c.GetNumPackets()))\n\t\t\t}\n\n\t\t\tmetricsHandler.ServeHTTP(w, r)\n\t\t})\n\t\tlog.Fatal(\"failed to serve metrics: \", http.ListenAndServe(addr, nil))\n\t}()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc ServeMetricsAt(addr string, c *collector.Collector) {\n\tmetricsUptime := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"server_uptime_seconds\",\n\t\tHelp: \"Server uptime in seconds\",\n\t})\n\tmetricsPacketCount := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"packet_count_total\",\n\t\tHelp: \"Total number of packets processed\",\n\t})\n\n\tprometheus.MustRegister(metricsUptime, metricsPacketCount)\n\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path == \"/metrics\" {\n\t\t\tmetricsUptime.SetToCurrentTime().Add(0)\n\t\t\tif c != nil {\n\t\t\t\tmetricsPacketCount.Set(float64(c.GetPacketCount()))\n\t\t\t}\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t}\n\t})\n\n\tgo http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a Go HTTP server that implements WebDAV functionality with custom logging and special handling for specific HTTP headers.\n\nStruct Description: The webdav.Handler struct provides WebDAV server functionality with in-memory storage for files and locks. We'll wrap this with custom request handling.\n\nFields:\n- FileSystem: webdav.FileSystem - In-memory filesystem implementation\n- LockSystem: webdav.LockSystem - In-memory lock system implementation\n- Logger: func(*http.Request, error) - Custom logging function for request tracking\n\nMethods:\n- ServeHTTP: (http.ResponseWriter, *http.Request) -> () - Main handler method that processes HTTP requests\n- NewMemFS: () -> webdav.FileSystem - Creates new in-memory filesystem\n- NewMemLS: () -> webdav.LockSystem - Creates new in-memory lock system\n\nAdditional Functions:\n- main: () -> () - Entry point that sets up the server and routes\n- requestHandler: (http.ResponseWriter, *http.Request) -> () - Custom middleware for special header handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype webdav struct {\n\tFileSystem  webdav.FileSystem\n\tLockSystem  webdav.LockSystem\n\tLogger      func(*http.Request, error)\n}\n\nfunc (w *webdav) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tif err := w.Logger(req, nil); err != nil {\n\t\thttp.Error(res, \"Internal Server Error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\t// Custom request handling logic here\n}\n\nfunc NewMemFS() webdav.FileSystem {\n\treturn &memFS{}\n}\n\nfunc NewMemLS() webdav.LockSystem {\n\treturn &memLockSystem{}\n}\n\nfunc main() {\n\tfs := NewMemFS()\n\tls := NewMemLS()\n\thandler := &webdav{\n\t\tFileSystem: fs,\n\t\tLockSystem: ls,\n\t\tLogger: func(req *http.Request, err error) {\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"Error handling request %s: %v\\n\", req.URL.Path, err)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Handled request %s at %s\\n\", req.Method, req.URL.Path)\n\t\t\t}\n\t\t},\n\t}\n\thttp.Handle(\"/\", handler)\n\tfmt.Println(\"Starting WebDAV server on :8080\")\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc requestHandler(res http.ResponseWriter, req *http.Request) {\n\t// Custom middleware for header handling\n\tif req.Header.Get(\"Custom-Header\") == \"SpecialValue\" {\n\t\tres.Header().Set(\"X-Custom-Response\", \"SpecialResponse\")\n\t}\n\thttp.DefaultServeMux.ServeHTTP(res, req)\n}"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a Go HTTP server that handles user sessions through cookies, specifically managing a session ID cookie that can be updated with a user's email address via form submission.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both displaying a form and processing form submissions. It manages a session cookie named \"session-id\" which initially has no value but can be updated with the user's email when submitted through the form. The function writes an HTML response containing the current cookie value and a form for submitting an email address.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests which may contain form data in the \"email\" field)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 9000 and responds to requests with HTML content and cookie operations)",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tcookie, err := req.Cookie(\"session-id\")\n\t\tif err != nil {\n\t\t\tcookie = &http.Cookie{\n\t\t\t\tName: \"session-id\",\n\t\t\t}\n\t\t}\n\n\t\tif req.FormValue(\"email\") != \"\" {\n\t\t\tcookie.Value = req.FormValue(\"email\")\n\t\t}\n\n\t\thttp.SetCookie(res, cookie)\n\n\t\tio.WriteString(res, `<!DOCTYPE html>\n<html>\n  <body>\n    <form>\n    `+cookie.Value+`\n      <input type=\"email\" name=\"email\">\n      <input type=\"submit\">\n    </form>\n  </body>\n</html>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tsessionID := \"\"\n\t\tif cookie, err := r.Cookie(\"session-id\"); err == nil {\n\t\t\tsessionID = cookie.Value\n\t\t}\n\n\t\tif r.Method == \"POST\" {\n\t\t\temail := r.FormValue(\"email\")\n\t\t\tif email != \"\" {\n\t\t\t\tcookie := &http.Cookie{\n\t\t\t\t\tName:  \"session-id\",\n\t\t\t\t\tValue: email,\n\t\t\t\t\tPath:  \"/\",\n\t\t\t\t}\n\t\t\t\thttp.SetCookie(w, cookie)\n\t\t\t\tsessionID = email\n\t\t\t}\n\t\t}\n\n\t\thtml := fmt.Sprintf(`\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head><title>Session Cookie</title></head>\n\t\t\t<body>\n\t\t\t<p>Current Session ID: %s</p>\n\t\t\t<form method=\"post\">\n\t\t\t\t<label for=\"email\">Email:</label>\n\t\t\t\t<input type=\"email\" id=\"email\" name=\"email\" required>\n\t\t\t\t<input type=\"submit\" value=\"Submit\">\n\t\t\t</form>\n\t\t\t</body>\n\t\t\t</html>\n\t\t`, sessionID)\n\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tw.Write([]byte(html))\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Create a WebSocket server in Go that handles WebSocket connections, upgrades HTTP connections to WebSocket, and manages the connections.\n\nFunction Description: The code consists of two main functions: `StartWSServer` and `wsHandler`. `StartWSServer` initializes and starts an HTTP server that listens for WebSocket connections on a specified address. `wsHandler` is the HTTP handler function that upgrades incoming HTTP requests to WebSocket connections and processes them.\n\nInput: \n- `StartWSServer`: `address` (string) - The network address (e.g., \":8080\") on which the server will listen for incoming connections.\n- `wsHandler`: `w` (http.ResponseWriter) - Used to construct the HTTP response. `r` (*http.Request) - The HTTP request to be upgraded to a WebSocket connection.\n\nOutput: \n- `StartWSServer`: None (panics on error).\n- `wsHandler`: None (logs errors if the WebSocket upgrade fails).",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 65536,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc StartWSServer(address string) {\n\thttp.HandleFunc(\"/ws\", wsHandler)\n\terr := http.ListenAndServe(address, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\twsConn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlogger.Sugar.Error(err)\n\t\treturn\n\t}\n\n\tconn := &Conn{\n\t\tCoonType: ConnTypeWS,\n\t\tWS:       wsConn,\n\t}\n\tDoConn(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc StartWSServer(address string) {\n\thttp.HandleFunc(\"/ws\", wsHandler)\n\tlog.Printf(\"WebSocket server started on %s\\n\", address)\n\tif err := http.ListenAndServe(address, nil); err != nil {\n\t\tlog.Fatalf(\"Failed to start WebSocket server: %v\", err)\n\t}\n}\n\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to upgrade to WebSocket: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tfor {\n\t\t_, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error reading message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tif err := conn.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\tlog.Printf(\"Error writing message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and responds with plain text.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes a plain text response (\"Dog\") to the client. The handler also sets the Content-Type header to \"text/plain\".\n\nInput: None (The function takes no direct input parameters; it handles HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return anything; it runs an HTTP server indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tres.Header()[\"Content-Type\"] = []string{\"text/plain\"}\n\t\tfmt.Fprint(res, \"Dog\")\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprintf(w, \"Dog\")\n\t})\n\thttp.ListenAndServe(\":9000\", nil)"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Create a Go HTTP server that handles multiple routes with different authentication methods (Basic Auth and Bearer Token) and serves Prometheus metrics on authenticated endpoints.\n\nFunction Description: The main function sets up an HTTP server with three routes:\n1. Root (\"/\") route with a basic handler\n2. \"/metrics\" route protected by Basic Authentication\n3. \"/bearer-metrics\" route protected by Bearer Token authentication\nThe server listens on port 8080 and uses the net/http package for HTTP operations.\n\nInput: None (The function takes no direct input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The implementation assumes the existence of two helper functions:\n1. checkBasicAuth(w http.ResponseWriter, r *http.Request) bool\n2. checkBearerAuth(w http.ResponseWriter, r *http.Request) bool\nwhich handle the respective authentication methods.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBasicAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Basic realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBearerAuth(w, r) {\n\t\t\tpromhttp.Handler().ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"WWW-Authenticate\", `Bearer realm=\"MY REALM\"`)\n\t\tw.WriteHeader(401)\n\t\tw.Write([]byte(\"401 Unauthorized\\n\"))\n\t})\n\n\taddress := \":8080\"\n\n\t_ = http.ListenAndServe(address, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Root endpoint\"))\n\t})\n\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBasicAuth(w, r) {\n\t\t\thttp.ServeFile(w, r, \"metrics.txt\")\n\t\t}\n\t})\n\n\thttp.HandleFunc(\"/bearer-metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif checkBearerAuth(w, r) {\n\t\t\thttp.ServeFile(w, r, \"metrics.txt\")\n\t\t}\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles multiple routes with different functionalities, including a root route, a route to display request headers, and a route to show build information.\n\nFunction Description: The HTTP server will respond to different endpoints with specific behaviors:\n1. Root endpoint (\"/\") returns a greeting message\n2. \"/headers\" endpoint returns all request headers\n3. \"/api/buildstamp\" endpoint returns build information\n\nInput: \n- HTTP requests to specified endpoints (/, /headers, /api/buildstamp)\n- BuildStamp string variable containing build information\n\nOutput: \n- For \"/\": Plain text response \"hello, my name is Go~~\"\n- For \"/headers\": List of all request headers in \"name: value\" format\n- For \"/api/buildstamp\": Current value of BuildStamp variable\n- HTTP responses through the http.ResponseWriter interface",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar BuildStamp = \"No Build Stamp Provided\"\n\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello, my name is Go~~\\n\")\n}\n\nfunc headers(w http.ResponseWriter, req *http.Request) {\n\tfor name, headers := range req.Header {\n\t\tfor _, h := range headers {\n\t\t\tfmt.Fprintf(w, \"%v: %v\\n\", name, h)\n\t\t}\n\t}\n}\n\nfunc buildStamp(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"%s\", BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", hello)\n\thttp.HandleFunc(\"/api/buildstamp\", buildStamp)\n\thttp.HandleFunc(\"/headers\", headers)\n\n\thttp.ListenAndServe(\":20219\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar BuildStamp = fmt.Sprintf(\"Build: %s\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path != \"/\" {\n\t\thttp.Error(w, \"404 not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\tif r.Method != \"GET\" {\n\t\thttp.Error(w, \"method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tfmt.Fprintf(w, \"hello, my name is Go~~\")\n}\n\nfunc headersHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path != \"/headers\" {\n\t\thttp.Error(w, \"404 not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\tif r.Method != \"GET\" {\n\t\thttp.Error(w, \"method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tfor name, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\tfmt.Fprintf(w, \"%s: %s\\n\", name, value)\n\t\t}\n\t}\n}\n\nfunc buildstampHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path != \"/api/buildstamp\" {\n\t\thttp.Error(w, \"404 not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\tif r.Method != \"GET\" {\n\t\thttp.Error(w, \"method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tfmt.Fprintf(w, BuildStamp)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", helloHandler)\n\thttp.HandleFunc(\"/headers\", headersHandler)\n\thttp.HandleFunc(\"/api/buildstamp\", buildstampHandler)\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a simple HTTP server in Go that handles requests to the root path (\"/\") and returns a welcome message combined with a predefined string variable and a version string.\n\nFunction Description: The main function sets up a basic HTTP server that listens on port 8080. It registers a handler function for the root path (\"/\") which writes a welcome message concatenated with a local string variable and a package-level version string to the response.\n\nInput: None (The HTTP server listens for incoming requests on the specified port)\n\nOutput: None (The function runs indefinitely, serving HTTP responses. The handler writes output to the http.ResponseWriter)\n\nNote: The reference code is at the package level (main package) rather than being encapsulated in a struct or class. The instruction follows the function-level format as requested.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar v string = \"v1.0\"\n\nfunc main() {\n\ta := \"hello \"\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprint(w, \"Welcome to my website! \", a, v)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nvar welcomeMessage = \"Welcome to our service!\"\nvar version = \"v1.0.0\"\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tresponse := fmt.Sprintf(\"%s %s\", welcomeMessage, version)\n\t\tfmt.Fprintf(w, response)\n\t})\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with \"Hello World!\" to all requests on the root path.\n\nFunction Description: The main function sets up an HTTP server that handles requests to the root path (\"/\") by responding with a \"Hello World!\" message. It uses the net/http package to register a handler function and start the server.\n\nInput: None (The function takes no direct input parameters, but the HTTP server will process incoming HTTP requests)\n\nOutput: None (The function doesn't return anything directly, but it will output \"Hello World!\" as an HTTP response to requests, and may output error messages to the log if the server fails to start)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\n\tport := \":8080\"\n\tfmt.Printf(\"Starting server on port %s\\n\", port)\n\tif err := http.ListenAndServe(port, nil); err != nil {\n\t\tfmt.Printf(\"Error starting server: %s\\n\", err)\n\t}\n}"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a basic HTTP server in Go that listens on a specified port and responds with a simple greeting message to all incoming requests.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles all incoming requests. When a request is received, it writes a \"Hello!\" response. The server listens on port 80 and logs any errors that occur during startup.\n\nInput: None (The function takes no direct input parameters; configuration is hardcoded)\n\nOutput: None (The function doesn't return anything directly but starts a long-running HTTP server process that handles incoming requests and writes responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log/slog\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\tlog.Info(\"Starting server at port 80\")\n\tif err := http.ListenAndServe(\":80\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello!\")\n\t})\n\n\terr := http.ListenAndServe(\":80\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a Go HTTP server that handles requests on specified routes, supports HTTPS with TLS certificates, and redirects HTTP traffic to HTTPS.\n\nFunction Description: The code demonstrates setting up a basic HTTP server with HTTPS support. It includes a handler function to process requests, sets up an HTTP-to-HTTPS redirect, and starts both HTTP and HTTPS servers concurrently.\n\nInput:\n- Port numbers for HTTP (9999) and HTTPS (10443) servers\n- TLS certificate files (\"cert.pem\" and \"key.pem\")\n- HTTP request objects (*http.Request) for the handler function\n\nOutput:\n- HTTP responses (through http.ResponseWriter)\n- Server logs indicating server status and errors\n- Automatic HTTP-to-HTTPS redirection (301 Moved Permanently)\n\nMethods:\n1. handler(w http.ResponseWriter, req *http.Request) - Processes incoming requests and writes a plain text response\n2. main() - Configures and starts the HTTP and HTTPS servers, including the redirect handler",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, req *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"text/plain\")\n\tw.Write([]byte(\"This is an example server.\\n\"))\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\tlog.Printf(\"About to listen on 10443. Go to https://127.0.0.1:10443/\")\n\tgo http.ListenAndServe(\":9999\", http.RedirectHandler(\"https://127.0.0.1:10443/\", 301))\n\terr := http.ListenAndServeTLS(\":10443\", \"cert.pem\", \"key.pem\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc handler(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"Hello from HTTPS server!\\n\")\n}\n\nfunc redirectHandler(w http.ResponseWriter, req *http.Request) {\n\turl := \"https://\" + req.Host + req.URL.Path\n\thttp.Redirect(w, req, url, http.StatusMovedPermanently)\n}\n\nfunc runHTTPServer(port string) {\n\thttp.HandleFunc(\"/\", redirectHandler)\n\tlog.Printf(\"HTTP server started on :%s\\n\", port)\n\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\tlog.Fatalf(\"HTTP server failed: %v\\n\", err)\n\t}\n}\n\nfunc runHTTPS_Server(port string, certFile, keyFile string) {\n\tcert, err := tls.LoadX509KeyPair(certFile, keyFile)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load TLS certificate: %v\\n\", err)\n\t}\n\n\ttlsConfig := &tls.Config{\n\t\tCertificates: []tls.Certificate{cert},\n\t\tMinVersion:   tls.VersionTLS12,\n\t}\n\n\tserver := &http.Server{\n\t\tAddr:      \":\" + port,\n\t\tTLSConfig: tlsConfig,\n\t\tHandler:   http.HandlerFunc(handler),\n\t}\n\n\tlog.Printf(\"HTTPS server started on :%s\\n\", port)\n\tif err := server.ListenAndServeTLS(\"\", \"\"); err != nil {\n\t\tlog.Fatalf(\"HTTPS server failed: %v\\n\", err)\n\t}\n}\n\nfunc main() {\n\thttpPort := \"9999\"\n\thttpsPort := \"10443\"\n\tcertFile := \"cert.pem\"\n\tkeyFile := \"key.pem\"\n\n\tgo runHTTPServer(httpPort)\n\trunHTTPS_Server(httpsPort, certFile, keyFile)\n\n\tselect {} // Keep the main goroutine alive\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when a request is received. The server listens on port 8080.\n\nInput:  \n- `w http.ResponseWriter`: Used to construct the HTTP response.  \n- `r *http.Request`: Contains information about the incoming HTTP request.  \n\nOutput:  \n- The function writes \"Hello World, I'm Golang!\" to the `http.ResponseWriter`, which is sent as the HTTP response body. No explicit return value.  \n\nExample usage:  \n```go\nhttp.HandleFunc(\"/\", handler)  \nhttp.ListenAndServe(\":8080\", nil)  \n```",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Go HTTP server that handles file uploads via a multipart form and displays an upload form to the client.\n\nFunction Description: The main function sets up an HTTP server with a single route (\"/\") that handles both GET and POST requests. For GET requests, it displays an HTML form for file uploads. For POST requests, it processes the uploaded file. The server listens on port 9000.\n\nInput: \n- None (The function takes no direct input parameters, but handles HTTP requests with:\n  - GET requests to \"/\" path\n  - POST requests with multipart/form-data containing a file under the \"q\" field)\n\nOutput:\n- For GET requests: Returns HTML form for file upload (content-type: text/html)\n- For POST requests: Processes the uploaded file (prints file info to console)\n- Server runs continuously on port 9000 until terminated",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tkey := \"q\"\n\t\tfile, hdr, err := req.FormFile(key)\n\t\tfmt.Println(file, hdr, err)\n\t\tres.Header().Set(\"Content-Type\", \"text/html\")\n\t\tio.WriteString(res, `<form method=\"POST\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"q\">\n      <input type=\"submit\">\n    </form>`)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == \"GET\" {\n\t\t\tfmt.Fprintf(w, \"<html><body><form action=\\\"/\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\">\\n\")\n\t\t\tfmt.Fprintf(w, \"Upload File: <input type=\\\"file\\\" name=\\\"q\\\">\\n\")\n\t\t\tfmt.Fprintf(w, \"<input type=\\\"submit\\\" value=\\\"Upload\\\">\\n\")\n\t\t\tfmt.Fprintf(w, \"</form></body></html>\")\n\t\t} else if r.Method == \"POST\" {\n\t\t\tr.ParseMultipartForm(10 << 20)\n\t\t\tfile, handler, err := r.FormFile(\"q\")\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error retrieving file:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer file.Close()\n\t\t\tfmt.Printf(\"Uploaded File: %s\\n\", handler.Filename)\n\t\t\tfmt.Printf(\"File Size: %d\\n\", handler.Size)\n\t\t\tfmt.Printf(\"MIME Type: %s\\n\", handler.Header.Get(\"Content-Type\"))\n\t\t\tf, _ := os.Create(handler.Filename)\n\t\t\tdefer f.Close()\n\t\t\tio.Copy(f, file)\n\t\t}\n\t})\n\thttp.ListenAndServe(\":9000\", nil)\n}"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests and responds with the requested URL path.\n\nFunction Description: The main function sets up an HTTP server that listens on port 9000. It registers a handler function for the root path (\"/\") that writes the requested URL path as plain text in the response.\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests through the registered handler)\n\nOutput: None (The function doesn't return any value; it continuously serves HTTP requests until terminated)\n\nNote: The handler function takes two parameters:\n1. res http.ResponseWriter - used to write the HTTP response\n2. req *http.Request - contains information about the incoming request",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Header().Set(\"Content-Type\", \"text/plain\")\n\t\tfmt.Fprint(res, req.URL.Path)\n\t})\n\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(res http.ResponseWriter, req *http.Request) {\n\t\tfmt.Fprintf(res, \"Requested URL path: %s\", req.URL.Path)\n\t})\n\thttp.ListenAndServe(\":9000\", nil)"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a basic HTTP server in Go that echoes back the request headers to the client. The server should handle requests on the root path (\"/\") and respond by writing the request headers to the response.\n\nFunction Description: The `ServeHTTP` function is an HTTP handler that writes the request headers to the response writer. It is registered to handle requests on the root path (\"/\") and starts an HTTP server listening on `127.0.0.1:8080`.\n\nInput: \n- `w http.ResponseWriter`: Used to construct the HTTP response.\n- `r *http.Request`: Contains the incoming HTTP request details, including headers.\n\nOutput: None (writes directly to the `http.ResponseWriter`).",
    "Canonical_solution": "import (\n\t\"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tr.Header.Write(w)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tfor name, headers := range r.Header {\n\t\tfor _, header := range headers {\n\t\t\tfmt.Fprintf(w, \"%v: %v\\n\", name, header)\n\t\t}\n\t}\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", ServeHTTP)\n\thttp.ListenAndServe(\"127.0.0.1:8080\", nil)"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a basic HTTP server in Go that serves a template-based web page and handles requests on a configurable port.\n\nFunction Description: The main function sets up an HTTP server with a root route handler that renders a template. It configures the server port from environment variables with a default fallback, then starts the server.\n\nInput: \n- Environment variable \"PORT\" (optional): Specifies the port number to listen on\n- Template file \"todos/index.jet\": The template to be rendered and served\n\nOutput:\n- HTTP server running on the specified port, serving the rendered template at the root path (\"/\")\n- Log output indicating the server's running status and any template errors\n\nNote: The reference code shows the implementation but doesn't explicitly define separate functions for each operation. The main function combines:\n1. Route handling (with template rendering)\n2. Port configuration\n3. Server startup",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tview, err := views.GetTemplate(\"todos/index.jet\")\n\t\tif err != nil {\n\t\t\tlog.Println(\"Unexpected template err:\", err.Error())\n\t\t}\n\t\tview.Execute(w, nil, todos)\n\t})\n\n\tport := os.Getenv(\"PORT\")\n\tif len(port) == 0 {\n\t\tport = \":8080\"\n\t} else if !strings.HasPrefix(\":\", port) {\n\t\tport = \":\" + port\n\t}\n\n\tlog.Println(\"Serving on \" + port)\n\thttp.ListenAndServe(port, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc main() {\n\ttmpl, err := template.ParseFiles(\"todos/index.jet\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error parsing template: %v\", err)\n\t}\n\n\tport := \"8080\"\n\tif envPort := os.Getenv(\"PORT\"); envPort != \"\" {\n\t\tparsedPort, err := strconv.Atoi(envPort)\n\t\tif err == nil && parsedPort > 0 {\n\t\t\tport = envPort\n\t\t}\n\t}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif err := tmpl.Execute(w, nil); err != nil {\n\t\t\tlog.Printf(\"Template execution error: %v\", err)\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t})\n\n\tlog.Printf(\"Server starting on port %s...\", port)\n\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles multiple routes with different response messages.\n\nFunction Description: The code demonstrates how to set up a simple HTTP server with two route handlers. The first handler responds to the root path (\"/\") with a \"doggy\" message, while the second handler responds to the \"/cat/\" path with a \"catty\" message. The server listens on port 9000.\n\nInput: \n- None (HTTP requests are automatically handled by the server)\n\nOutput: \n- None (The server writes responses directly to the http.ResponseWriter)\n\nMethods:\n- upTown: Handles requests to the root path (\"/\") and writes \"doggy doggy doggy\" to the response\n- youUp: Handles requests to the \"/cat/\" path and writes \"catty catty catty\" to the response\n- main: Registers the route handlers and starts the HTTP server on port 9000",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc upTown(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"doggy doggy doggy\")\n}\n\nfunc youUp(res http.ResponseWriter, req *http.Request) {\n\tio.WriteString(res, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc upTown(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"doggy doggy doggy\")\n}\n\nfunc youUp(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"catty catty catty\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", upTown)\n\thttp.HandleFunc(\"/cat/\", youUp)\n\thttp.ListenAndServe(\":9000\", nil)"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a Go HTTP server that serves PNG images generated by a package function.\n\nFunction Description: The main function sets up a basic HTTP server that responds to requests at the root path (\"/\") by generating a PNG image using an external package function and serving it with the correct content type.\n\nInput: None (The function takes no direct input parameters, but handles HTTP requests through the http.ResponseWriter and *http.Request parameters in the handler function)\n\nOutput: None (The function doesn't return any value but serves HTTP responses with PNG image data)",
    "Canonical_solution": "import (\n    \"fmt\"\n    \"net/http\"\n    \"io\"\n    \"bytes\"\n    \"davidhampgonsalves/lifedashboard/pkg\"\n)\nfunc main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        png := pkg.Generate();\n        w.Header().Set(\"Content-Type\", \"image/png\")\n        io.Copy(w, bytes.NewBuffer(png))\n    })\n\n    fmt.Println(\"Server listening on http://localhost:8080\")\n    http.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"image/png\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\timg := generateImage()\n\t\tpng.Encode(w, img)\n\t\tw.Header().Set(\"Content-Type\", \"image/png\")\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc generateImage() image.Image {\n\t// Placeholder for actual image generation logic using an external package\n\treturn &image.Uniform{C: color.White}\n}"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Go HTTP server that handles WebDAV requests with custom logging and special handling for certain Litmus test cases.\n\nFunction Description: The main function sets up a WebDAV server with in-memory storage (MemFS) and in-memory locking (MemLS). It includes custom logging for WebDAV operations and special handling for a specific Litmus test case (\"props: 3 (propfind_invalid2)\"). The server listens on a specified port and handles all incoming HTTP requests.\n\nInput: None (though the code uses a command-line flag for port configuration which would be handled by the flag package)\n\nOutput: None (the function runs indefinitely as a server, but may log errors or fatal conditions)\n\nNote: The actual implementation shows the server uses a port flag (not shown in parameters) and produces log output, but these are side effects rather than formal outputs.\n\n---\n\nFor completeness, if we were to describe the webdav.Handler struct being used (though not explicitly defined in this code):\n\nStruct Description: webdav.Handler is a struct from golang.org/x/net/webdav that implements http.Handler for WebDAV protocol operations.\n\nFields:\nFileSystem: webdav.FileSystem - The underlying file system implementation\nLockSystem: webdav.LockSystem - The locking system implementation\nLogger: func(*http.Request, error) - Optional function for logging requests and errors\n\nMethods:\nServeHTTP: ServeHTTP(http.ResponseWriter, *http.Request) -> None - Main handler method that processes HTTP requests according to WebDAV protocol",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"golang.org/x/net/webdav\"\n)\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\th := &webdav.Handler{\n\t\tFileSystem: webdav.NewMemFS(),\n\t\tLockSystem: webdav.NewMemLS(),\n\t\tLogger: func(r *http.Request, err error) {\n\t\t\tlitmus := r.Header.Get(\"X-Litmus\")\n\t\t\tif len(litmus) > 19 {\n\t\t\t\tlitmus = litmus[:16] + \"...\"\n\t\t\t}\n\n\t\t\tswitch r.Method {\n\t\t\tcase \"COPY\", \"MOVE\":\n\t\t\t\tdst := \"\"\n\t\t\t\tif u, err := url.Parse(r.Header.Get(\"Destination\")); err == nil {\n\t\t\t\t\tdst = u.Path\n\t\t\t\t}\n\t\t\t\to := r.Header.Get(\"Overwrite\")\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%-30so=%-2s%v\", litmus, r.Method, r.URL.Path, dst, o, err)\n\t\t\tdefault:\n\t\t\t\tlog.Printf(\"%-20s%-10s%-30s%v\", litmus, r.Method, r.URL.Path, err)\n\t\t\t}\n\t\t},\n\t}\n\n\thttp.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"X-Litmus\") == \"props: 3 (propfind_invalid2)\" {\n\t\t\thttp.Error(w, \"400 Bad Request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}))\n\n\taddr := fmt.Sprintf(\":%d\", *port)\n\tlog.Printf(\"Serving %v\", addr)\n\tlog.Fatal(http.ListenAndServe(addr, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/cesbit/memfs\"\n\t\"github.com/cesbit/memls\"\n\t\"golang.org/x/net/webdav\"\n)\n\nvar port = flag.String(\"port\", \"8080\", \"Port to listen on\")\n\nfunc main() {\n\tflag.Parse()\n\n\tfs := memfs.New()\n\tlockSystem := memls.New()\n\n\tlogger := func(r *http.Request, err error) {\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[ERROR] %s %s: %v\", r.Method, r.URL.Path, err)\n\t\t} else {\n\t\t\tlog.Printf(\"[INFO] %s %s\", r.Method, r.URL.Path)\n\t\t}\n\t}\n\n\thandler := &webdav.Handler{\n\t\tFileSystem: fs,\n\t\tLockSystem: lockSystem,\n\t\tLogger:     logger,\n\t}\n\n\thttp.Handle(\"/\", handler)\n\n\tgo func() {\n\t\taddr := fmt.Sprintf(\":%s\", *port)\n\t\tlog.Printf(\"Starting WebDAV server on %s\", addr)\n\t\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\t\tlog.Fatalf(\"Server failed: %v\", err)\n\t\t}\n\t}()\n\n\t// Special handling for Litmus test case \"props: 3 (propfind_invalid2)\"\n\t// This would typically be implemented as a middleware or custom handler\n\t// For the purpose of this example, we'll simulate it by checking the request path\n\t// and logging a specific message if the test case is triggered.\n\t// In a real-world scenario, this would involve more complex logic.\n\n\tselect {}\n}"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Create a Go HTTP server that handles requests with tracing capabilities using OpenCensus. The server should respond to requests with a simple message, perform tracing operations, and make an external HTTP request while propagating the trace context.\n\nFunction Description: The main function sets up an HTTP server with tracing middleware. It registers a root handler (\"/\") that responds with \"hello world\", creates trace spans, adds annotations/attributes, and makes an external HTTP request to example.com while maintaining trace context.\n\nInput: None (The function takes no direct input parameters. HTTP requests come through the server's routing mechanism.)\n\nOutput: None (The function doesn't return anything directly. It starts an HTTP server that listens indefinitely on port 50030 and handles incoming requests by writing responses to http.ResponseWriter.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.opencensus.io/trace\"\n\t\"go.opencensus.io/plugin/ochttp\"\n)\n\nfunc main() {\n\tclient := &http.Client{Transport: &ochttp.Transport{}}\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tfmt.Fprintf(w, \"hello world\")\n\n\t\t_, span := trace.StartSpan(req.Context(), \"child\")\n\t\tdefer span.End()\n\t\tspan.Annotate([]trace.Attribute{trace.StringAttribute(\"key\", \"value\")}, \"something happened\")\n\t\tspan.AddAttributes(trace.StringAttribute(\"hello\", \"world\"))\n\t\ttime.Sleep(time.Millisecond * 125)\n\n\t\tr, _ := http.NewRequest(\"GET\", \"https://example.com\", nil)\n\n\t\tr = r.WithContext(req.Context())\n\t\tresp, err := client.Do(r)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t} else {\n\t\t\tresp.Body.Close()\n\t\t}\n\t})\n\tlog.Fatal(http.ListenAndServe(\":50030\", &ochttp.Handler{}))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "right_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.opencensus.io/exporter/stackdriver\"\n\t\"go.opencensus.io/plugin/ocgrpc\"\n\t\"go.opencensus.io/plugin/ochttp\"\n\t\"go.opencensus.io/stats/view\"\n\t\"go.opencensus.io/trace\"\n)\n\nfunc init() {\n\t// Initialize the Stackdriver exporter\n\texporter, err := stackdriver.NewExporter(stackdriver.Options{\n\t\tProjectID: \"your-project-id\",\n\t})\n\tif err == nil {\n\t\tview.RegisterExporter(exporter)\n\t}\n}\n\nfunc main() {\n\t// Set up tracing\n\ttrace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})\n\tochttp.Middleware(nil)\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Start a new span for the request\n\t\tctx, span := trace.StartSpan(r.Context(), \"root-handler\")\n\t\tdefer span.End()\n\n\t\t// Add an annotation to the span\n\t\tspan.Annotate([]trace.Attribute{\n\t\t\ttrace.StringAttribute(\"message\", \"request received\"),\n\t\t}, \"request received\")\n\n\t\t// Simulate some processing\n\t\ttime.Sleep(100 * time.Millisecond)\n\n\t\t// Make an external HTTP request while propagating the trace context\n\t\tresp, err := http.Get(\"https://example.com\")\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Failed to make external request\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\t// Add attributes to the span\n\t\tspan.SetAttributes(\n\t\t\ttrace.StringAttribute(\"external_request_status\", fmt.Sprintf(\"%d\", resp.StatusCode)),\n\t\t)\n\n\t\t// Write response\n\t\tw.Write([]byte(\"hello world\"))\n\t})\n\n\t// Start the HTTP server on port 50030\n\tfmt.Println(\"Server started on :50030\")\n\thttp.ListenAndServe(\":50030\", nil)\n}"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes middleware for request logging and rate limiting using Sentinel. The server should handle a GET request at the \"/test\" endpoint.\n\nFunction Description: The function sets up an Echo HTTP server with middleware for logging and rate limiting. The rate limiting is implemented using Sentinel middleware, which extracts the client's real IP from the request headers and applies a block fallback response when the rate limit is exceeded. The server listens on port 1323.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 1323.)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\nfunc Example() {\n\tr := echo.New()\n\tr.Use(middleware.Logger())\n\tr.Use(\n\t\tSentinelMiddleware(\n\t\t\tWithResourceExtractor(func(ctx echo.Context) string {\n\t\t\t\tif res, ok := ctx.Get(\"X-Real-IP\").(string); ok {\n\t\t\t\t\treturn res\n\t\t\t\t}\n\t\t\t\treturn \"\"\n\t\t\t}),\n\t\t\tWithBlockFallback(func(ctx echo.Context) error {\n\t\t\t\treturn ctx.JSON(400, map[string]interface{}{\n\t\t\t\t\t\"err\":  \"too many requests; the quota used up\",\n\t\t\t\t\t\"code\": 10222,\n\t\t\t\t})\n\t\t\t}),\n\t\t),\n\t)\n\n\tr.GET(\"/test\", func(c echo.Context) error {\n\t\treturn nil\n\t})\n\tr.Logger.Fatal(r.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/alibaba/sentinel-golang/api\"\n\t\"github.com/alibaba/sentinel-golang/core/base\"\n\t\"github.com/alibaba/sentinel-golang/plugins/middleware\"\n\t\"github.com/alibaba/sentinel-golang/util\"\n\t\"net/http\"\n)\n\nfunc init() {\n\tif err := api.Init(); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tip := c.Request().Header.Get(\"X-Forwarded-For\")\n\t\t\tif ip == \"\" {\n\t\t\t\tip = c.ClientIP()\n\t\t\t}\n\t\t\tc.Set(\"ip\", ip)\n\t\t\treturn next(c)\n\t\t}\n\t})\n\te.Use(middleware.FlowControlWithParser(func(r *http.Request, ctx echo.Context) (string, int) {\n\t\tip := ctx.Get(\"ip\").(string)\n\t\treturn ip, 0\n\t}, middleware.FallbackHandler(func(ctx echo.Context) {\n\t\tctx.String(http.StatusTooManyRequests, \"Rate limit exceeded\")\n\t}))\n\n\te.GET(\"/test\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Test endpoint\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go, which includes route handling, middleware integration, and JWT-based authentication for restricted routes.\n\nFunction Description: The main function initializes an Echo server, configures middleware (logger and recovery), sets up routes for login and accessible content, and creates a restricted route group with JWT authentication. The server listens on port 1323.\n\nInput: None (The function takes no direct input parameters, but relies on HTTP requests to trigger route handlers)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The actual route handlers (login, accessible, restricted) would need to be implemented separately as they're referenced but not shown in the provided code.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\tjwt \"github.com/dgrijalva/jwt-go\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.POST(\"/login\", login)\n\te.GET(\"/\", accessible)\n\n\tr := e.Group(\"/restricted\")\n\tr.Use(middleware.JWT([]byte(\"secret\")))\n\tr.GET(\"\", restricted)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recovery())\n\n\te.POST(\"/login\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Login successful\"})\n\t})\n\n\te.GET(\"/accessible\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Accessible content\"})\n\t})\n\n\tjwtMiddleware := middleware.JWTWithConfig(middleware.JWTConfig{\n\t\tSigningKey: []byte(\"secret-key\"),\n\t})\n\n\trestrictedGroup := e.Group(\"/restricted\")\n\trestrictedGroup.Use(jwtMiddleware)\n\trestrictedGroup.GET(\"/\", func(c echo.Context) error {\n\t\tuser := c.Get(\"user\").(*jwt.Token)\n\t\tclaims := user.Claims.(jwt.MapClaims)\n\t\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Restricted content\", \"user\": claims[\"username\"].(string)})\n\t})\n\n\te.Start(\":1323\")"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that streams JSON-encoded location data with a delay between each transmission.\n\nFunction Description: The main function initializes an Echo server, sets up a GET route handler at the root path (\"/\") that streams location data as JSON with a 1-second delay between each location. The response uses proper HTTP headers for JSON content type and flushes after each location is sent.\n\nInput: None (The function takes no direct input parameters, but relies on a predefined 'locations' collection that should be available in scope)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that listens on port 1323 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"time\"\n\n\t\"encoding/json\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\t\tfor _, l := range locations {\n\t\t\tif err := json.NewEncoder(c.Response()).Encode(l); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tc.Response().Flush()\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"net/http\"\n\t\"time\"\n)\n\nvar locations = []struct {\n\tLat, Lon float64\n}{\n\t{37.7749, -122.4194},\n\t{34.0522, -118.2437},\n\t{40.7128, -74.0060},\n\t{51.5074, -0.1278},\n\t{35.6895, 139.7494},\n}\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tc.Response().Header().Set(\"Content-Type\", \"application/json\")\n\t\tfor _, loc := range locations {\n\t\t\tif err := c.Response().WriteJSON(loc); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := c.Response().Flush(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t\treturn nil\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves static files from an embedded filesystem using the go.rice package.\n\nFunction Description: The main function initializes an Echo web server, sets up route handlers for serving static files from an embedded directory (\"app\"), and starts the server on port 1323. The static files are served under the root path (\"/\") and a static prefix path (\"/static/*\").\n\nInput: None (The function takes no explicit parameters)\n\nOutput: None (The function doesn't return anything explicitly but starts an HTTP server that runs indefinitely until interrupted)\n\nNote: The reference code shows the complete implementation at the package level (main function) rather than as an isolated function or struct. The instruction follows the function-level format as the code primarily demonstrates functional behavior rather than object-oriented structure.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\trice \"github.com/GeertJohan/go.rice\"\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\tassetHandler := http.FileServer(rice.MustFindBox(\"app\").HTTPBox())\n\te.GET(\"/\", echo.WrapHandler(assetHandler))\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static/\", assetHandler)))\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/kr/pretty\"\n\t\"github.com/qiniu/rice\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tapp, _ := rice.FindBox(\"app\")\n\tfs := http.FileServer(app.HTTPBox())\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, \"<h1>Hello from embedded filesystem</h1>\")\n\t})\n\te.GET(\"/static/*\", echo.WrapHandler(http.StripPrefix(\"/static/\", fs)))\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that serves basic server information and runs on a configurable address.\n\nFunction Description: The main function initializes an Echo HTTP server, configures middleware for logging and compression, sets up a route handler for server information, and starts the server on the specified address.\n\nInput: \n- Command-line argument (optional): \"--addr\" to specify the server address (default: \"127.0.0.1:9090\")\n\nOutput: \n- Running HTTP server that responds to GET requests at \"/serverinfo\" with server hostname and address\n- No explicit return value (runs indefinitely until interrupted)\n\nNote: The reference code shows a complete implementation at the package level (main function) rather than a standalone function or struct level. The instruction follows the function-level format as the code primarily demonstrates functional behavior through the main function.",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo\"\n\tmd \"github.com/labstack/echo/middleware\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:9090\", \"addr for backend\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\tserver := echo.New()\n\tserver.Use(md.Logger())\n\tserver.Use(md.Gzip())\n\n\tserver.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thostname, _ := os.Hostname()\n\t\treturn c.String(http.StatusOK, hostname+\"\\n\"+*addr)\n\t})\n\n\tserver.Start(*addr)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\taddr := \"127.0.0.1:9090\"\n\tif len(os.Args) > 1 {\n\t\tif strings.HasPrefix(os.Args[1], \"--addr=\") {\n\t\t\taddr = os.Args[1][len(\"--addr=\"):]\n\t\t}\n\t}\n\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Compress(middleware.CompressConfig{\n\t\tLevels: []int{http.Transport{}.MaxConnsPerHost},\n\t}))\n\n\te.GET(\"/serverinfo\", func(c echo.Context) error {\n\t\thost, _ := os.Hostname()\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"hostname\": host,\n\t\t\t\"address\":  addr,\n\t\t})\n\t})\n\n\te.Logger.Fatal(e.Start(addr))\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests on two different endpoints (\"/request\" and \"/stream\") and serves over HTTPS.\n\nFunction Description: The main function initializes an Echo server instance, registers route handlers for two GET endpoints, and starts an HTTPS server using provided TLS certificate files.\n\nInput: None (The function takes no direct input parameters, but relies on external TLS certificate files \"cert.pem\" and \"key.pem\")\n\nOutput: None (The function doesn't return anything but starts a persistent HTTP server process)\n\nNote: The actual route handler functions (request and stream) would need to be implemented separately to handle the respective endpoints. The server will run indefinitely until interrupted, listening on port 1323 with TLS encryption.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"/request\", request)\n\te.GET(\"/stream\", stream)\n\te.Logger.Fatal(e.StartTLS(\":1323\", \"cert.pem\", \"key.pem\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"net/http\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/request\", request)\n\te.GET(\"/stream\", stream)\n\n\tcertFile := \"cert.pem\"\n\tkeyFile := \"key.pem\"\n\n\terr := e.StartTLS(\":1323\", certFile, keyFile)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc request(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Request endpoint\")\n}\n\nfunc stream(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Stream endpoint\")"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles basic requests and includes middleware for processing statistics.\n\nStruct Description: The Stats struct is used to track and handle statistics for HTTP requests processed by the server.\n\nFields:\n- Count: [int] - Tracks the number of requests processed\n- StartTime: [time.Time] - Records the time when the server started processing requests\n\nMethods:\n- Process: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that increments the request count for each processed request\n- Handle: [func(c echo.Context) error] -> [error] - Handler function that returns the current statistics (request count and uptime) in JSON format\n- NewStats: [func() *Stats] -> [*Stats] - Constructor function that initializes a new Stats instance with default values\n\nAdditional Functions:\n- ServerHeader: [func(next echo.HandlerFunc) echo.HandlerFunc] -> [echo.HandlerFunc] - Middleware function that adds a Server header to responses\n- main: [func()] -> [None] - Entry point that creates the Echo server, registers routes and middleware, and starts the server on port 1323",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\te.Debug = true\n\n\ts := NewStats()\n\te.Use(s.Process)\n\te.GET(\"/stats\", s.Handle)\n\n\te.Use(ServerHeader)\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "right_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype Stats struct {\n\tCount    int\n\tStartTime time.Time\n}\n\nfunc (s *Stats) Process(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ts.Count++\n\t\treturn next(c)\n\t}\n}\n\nfunc (s *Stats) Handle(c echo.Context) error {\n\tupTime := time.Since(s.StartTime).Seconds()\n\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\"count\": s.Count,\n\t\t\"uptime\": upTime,\n\t})\n}\n\nfunc NewStats() *Stats {\n\treturn &Stats{\n\t\tCount:    0,\n\t\tStartTime: time.Now(),\n\t}\n}\n\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tc.Response().Header().Set(\"Server\", \"CustomServer/1.0\")\n\t\treturn next(c)\n\t}\n}\n\nfunc main() {\n\te := echo.New()\n\tstats := NewStats()\n\n\te.Use(stats.Process)\n\te.Use(ServerHeader)\n\n\te.GET(\"/stats\", stats.Handle)\n\n\te.Logger.Fatal(e.Start(\":1323\"))\n}"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles GET requests and serves HTML content with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The main function initializes an Echo server, configures middleware for recovery and logging, sets up a route handler for the root path (\"/\") that returns HTML content, and starts the server with automatic TLS on port 443.\n\nInput: None (The function takes no explicit input parameters)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that runs indefinitely until terminated)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recover())\n\te.Use(middleware.Logger())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `\n\t\t\t<h1>Welcome to Echo!</h1>\n\t\t\t<h3>TLS certificates automatically installed from Let's Encrypt :)</h3>\n\t\t`)\n\t})\n\te.Logger.Fatal(e.StartAutoTLS(\":443\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "right_result": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/xenolf/lego/acme\"\n\t\"github.com/xenolf/lego/registration\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Recovery())\n\te.Use(middleware.Logger())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, \"<html><body><h1>Hello from Echo with TLS</h1></body></html>\")\n\t})\n\n\t// Let's Encrypt configuration\n\tclient, _ := acme.Client(\n\t\tacme.WithDirectoryURL(acme.DirectoryProductionURL),\n\t\tacme.WithRegistrationEmail(\"admin@example.com\"),\n\t\tacme.WithKeyStore(nil),\n\t)\n\n\treg, _ := client.Register(registration.Register{\n\t\tEmail: \"admin@example.com\",\n\t\tAgreeTOS: true,\n\t})\n\n\t// Renewal and certificate management\n\tcertManager := acme.CertificateManager(client, reg)\n\tcert, _, err := certManager.Renew(\"example.com\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Start server with TLS\n\te.Logger.Infof(\"Server started on :443\")\n\tif err := e.StartTLS(\":443\", cert); err != nil {\n\t\te.Logger.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  }
]