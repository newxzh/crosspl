[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Implement a Go struct that represents a Docker registry repository client, capable of interacting with Docker registry API v2 to manage blobs, manifests, and tags.\n\nStruct Description: The `repository` struct serves as a client for interacting with a Docker registry's repository, providing methods to access blob storage, manifests, and tag services. It maintains HTTP client configuration and URL building capabilities.\n\nFields:\n- client: *http.Client - Custom HTTP client configured with transport and redirect handling\n- ub: *v2.URLBuilder - URL builder for constructing registry API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Named() -> reference.Named - Returns the named reference of the repository\n- Blobs(context.Context) -> distribution.BlobStore - Returns a BlobStore for managing repository blobs\n- Manifests(context.Context, ...distribution.ManifestServiceOption) -> (distribution.ManifestService, error) - Returns a ManifestService for managing repository manifests\n- Tags(context.Context) -> distribution.TagService - Returns a TagService for managing repository tags\n\nTask Description: Implement a Go struct that represents a tag service for a Docker registry repository, capable of retrieving tag information from a Docker registry API v2.\n\nStruct Description: The `tags` struct provides tag-related operations for a Docker repository, implementing the distribution.TagService interface. It uses HTTP requests to interact with the registry's tag API endpoints.\n\nFields:\n- client: *http.Client - HTTP client for making requests to the registry\n- ub: *v2.URLBuilder - URL builder for constructing tag-related API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Get(context.Context, string) -> (distribution.Descriptor, error) - Retrieves the descriptor for a specific tag, making HEAD and GET requests as needed to the registry API",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/distribution/reference\"\n\t\"github.com/docker/distribution\"\n\tv2 \"github.com/docker/distribution/registry/api/v2\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc NewRepository(name reference.Named, baseURL string, transport http.RoundTripper) (distribution.Repository, error) {\n\tub, err := v2.NewURLBuilderFromString(baseURL, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:     transport,\n\t\tCheckRedirect: checkHTTPRedirect,\n\t}\n\n\treturn &repository{\n\t\tclient: client,\n\t\tub:     ub,\n\t\tname:   name,\n\t}, nil\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\tstatter := &blobStatter{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t}\n\treturn &blobs{\n\t\tname:    r.name,\n\t\tub:      r.ub,\n\t\tclient:  r.client,\n\t\tstatter: statter,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t\tetags:  make(map[string]string),\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.Named(),\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\tref, err := reference.WithTag(t.name, tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tu, err := t.ub.BuildManifestURL(ref)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tnewRequest := func(method string) (*http.Response, error) {\n\t\treq, err := http.NewRequest(method, u, nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tfor _, t := range distribution.ManifestMediaTypes() {\n\t\t\treq.Header.Add(\"Accept\", t)\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\treturn resp, err\n\t}\n\n\tresp, err := newRequest(\"HEAD\")\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tswitch {\n\tcase resp.StatusCode >= 200 && resp.StatusCode < 400 && len(resp.Header.Get(\"Docker-Content-Digest\")) > 0:\n\t\treturn descriptorFromResponse(resp)\n\tdefault:\n\t\tresp, err = newRequest(\"GET\")\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\treturn descriptorFromResponse(resp)\n\t\t}\n\t\treturn distribution.Descriptor{}, HandleErrorResponse(resp)\n\t}\n}\n\nfunc descriptorFromResponse(response *http.Response) (distribution.Descriptor, error) {\n\tdesc := distribution.Descriptor{}\n\theaders := response.Header\n\n\tctHeader := headers.Get(\"Content-Type\")\n\tif ctHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Type header\")\n\t}\n\tdesc.MediaType = ctHeader\n\n\tdigestHeader := headers.Get(\"Docker-Content-Digest\")\n\tif digestHeader == \"\" {\n\t\tbytes, err := ioutil.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\t_, desc, err := distribution.UnmarshalManifest(ctHeader, bytes)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn desc, nil\n\t}\n\n\tdgst, err := digest.Parse(digestHeader)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Digest = dgst\n\n\tlengthHeader := headers.Get(\"Content-Length\")\n\tif lengthHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Length header\")\n\t}\n\tlength, err := strconv.ParseInt(lengthHeader, 10, 64)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Size = length\n\n\treturn desc, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package distribution\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/docker/distribution/reference\"\n\t\"github.com/docker/distribution/manifest/schema2\"\n\t\"github.com/docker/distribution/registry/client/v2\"\n\t\"github.com/docker/distribution/registry/client/v2/manifest\"\n\t\"github.com/docker/distribution/registry/client/v2/tags\"\n\t\"github.com/docker/distribution/registry/client/v2/transport\"\n\t\"github.com/docker/distribution/registry/client/v2/transport/http\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\treturn &blobStore{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, opts ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifestService{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t\topts:   opts,\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tagsService{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\ntype tagsService struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (ts *tagsService) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\turl := ts.ub.TagURL(tag)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\treq = req.WithContext(ctx)\n\n\tresp, err := ts.client.Do(req)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn distribution.Descriptor{}, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tvar descriptor distribution.Descriptor\n\tif err := json.NewDecoder(resp.Body).Decode(&descriptor); err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\treturn descriptor, nil\n}"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a Go HTTP client struct that can make authenticated API requests with custom headers and handle responses, including error status codes.\n\nStruct Description: The Client struct represents an HTTP client with authentication credentials and endpoint configuration, capable of making various HTTP requests and processing responses.\n\nFields:\nUser: string - The username for basic authentication\nApiKey: string - The API key or password for basic authentication\nEndpoint: string - The base URL for API endpoints\n\nMethods:\nisOkStatus: [Name](code int) -> bool - Checks if the HTTP status code indicates a successful response (200, 201, 204 return true; 400, 404, 500, 409, 406 return false)\nnewRequest: [Name](method string, uri string, body interface{}) -> ([]byte, error) - Creates and executes an HTTP request with the given method, URI, and optional body. Returns the response body or an error if the request fails or returns a non-success status code. Automatically adds basic authentication headers.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tUser     string\n\tApiKey   string\n\tEndpoint string\n}\n\nfunc (c *Client) isOkStatus(code int) bool {\n\tcodes := map[int]bool{\n\t\t200: true,\n\t\t201: true,\n\t\t204: true,\n\t\t400: false,\n\t\t404: false,\n\t\t500: false,\n\t\t409: false,\n\t\t406: false,\n\t}\n\n\treturn codes[code]\n}\n\nfunc (c *Client) newRequest(method, uri string, body interface{}) ([]byte, error) {\n\tvar (\n\t\tclient = &http.Client{}\n\t\turl    = fmt.Sprintf(\"%s/%s\", c.Endpoint, uri)\n\t\terr    error\n\t\treq    *http.Request\n\t)\n\n\tif body != nil {\n\t\tbodyJSON, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq, err = http.NewRequest(method, url, bytes.NewBuffer(bodyJSON))\n\t} else {\n\t\treq, err = http.NewRequest(method, url, nil)\n\t}\n\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Error with request: %v - %q\", url, err)\n\t}\n\n\treq.SetBasicAuth(c.User, c.ApiKey)\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif !c.isOkStatus(resp.StatusCode) {\n\t\ttype apiErr struct {\n\t\t\tErr string `json:\"error\"`\n\t\t}\n\t\tvar outErr apiErr\n\t\tjson.Unmarshal(data, &outErr)\n\t\treturn nil, fmt.Errorf(\"Error in response: %s\", outErr.Err)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn data, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "type Client struct {\n\tUser    string\n\tApiKey  string\n\tEndpoint string\n}\n\nfunc (c *Client) isOkStatus(code int) bool {\n\tswitch code {\n\tcase 200, 201, 204:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc (c *Client) newRequest(method string, uri string, body interface{}) ([]byte, error) {\n\turl := c.Endpoint + uri\n\treq, err := http.NewRequest(method, url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\tb, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq.Body = io.NopCloser(bytes.NewBuffer(b))\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\n\treq.SetBasicAuth(c.User, c.ApiKey)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif !c.isOkStatus(resp.StatusCode) {\n\t\treturn nil, fmt.Errorf(\"request failed with status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a Go struct that represents an HTTP server application using the Echo framework, with configurable options and standard middleware.\n\nStruct Description: The `App` struct represents an HTTP server application built on the Echo framework. It encapsulates the Echo engine instance and provides methods to initialize and run the server with common middleware (recovery, logging) and default routes.\n\nFields:\n- Engine: *echo.Echo - The core Echo framework instance that handles HTTP routing and middleware\n- Conf: *conf.Conf - Configuration object for server settings (port, debug mode, etc.)\n\nMethods:\n- NewApp: func(opts ...AppOptions) *App - Constructor that initializes a new App instance with optional configuration. Applies default middleware (recovery, logging) and sets up basic routes.\n  Input: opts ...AppOptions (variadic parameter for configuration options)\n  Output: *App (new App instance)\n\n- Run: func() - Starts the HTTP server using the configured port from Conf. Panics if server fails to start.\n  Input: None\n  Output: None (runs indefinitely until server stops)\n\n- Must: func(error) - Helper function (not shown in reference) that panics on error, typically used for server startup\n  Input: error\n  Output: None",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\ntype App struct {\n\tEngine *echo.Echo\n}\n\nfunc NewApp(opts ...AppOptions) *App {\n\toptions := AppOptions{}\n\tfor _, i := range opts {\n\t\toptions = i\n\t\tbreak\n\t}\n\n\toptions.init()\n\n\tengine := echo.New()\n\n\tengine.Debug = conf.UBool(\"debug\")\n\n\tengine.Use(middleware.Recover())\n\n\tengine.GET(\"/favicon.ico\", func(c echo.Context) error {\n\t\treturn c.Redirect(http.StatusMovedPermanently, \"/static/images/favicon.ico\")\n\t})\n\n\tengine.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n\t\tFormat: `${method} | ${status} | ${uri} -> ${latency_human}` + \"\\n\",\n\t}))\n\n\tapp := &App{\n\t\tEngine: engine,\n\t}\n\n\treturn app\n}\n\nfunc (app *App) Run() {\n\tMust(app.Engine.Start(\":\" + app.Conf.UString(\"port\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "wrong_result": "type App struct {\n\tEngine *echo.Echo\n\tConf   *conf.Conf\n}\n\ntype AppOptions func(*App)\n\nfunc NewApp(opts ...AppOptions) *App {\n\tapp := &App{\n\t\tEngine: echo.New(),\n\t\tConf:   &conf.Conf{},\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(app)\n\t}\n\n\tapp.Engine.Use(middleware.Recovery())\n\tapp.Engine.Use(middleware.Logger())\n\n\tapp.Engine.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\treturn app\n}\n\nfunc (a *App) Run() {\n\tif err := a.Engine.Start(a.Conf.Port); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Must(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Implement an auto-managed HTTP provider in Go using the Echo framework that can dynamically start/stop an HTTP server with health check capabilities.\n\nStruct Description: AutoManagedProvider is a struct that manages an Echo-based HTTP server with automatic startup/shutdown capabilities and provides health check endpoints.\n\nFields:\n- activeProvider: *echo.Echo - The Echo HTTP server instance\n- activeProviderRunning: bool - Flag indicating if the server is currently running\n- activeProviderTesting: bool - Flag indicating if the server is in testing mode\n- httpClient: *http.Client - HTTP client used for internal communications\n- autoManagePort: int - Port number for the managed HTTP server\n\nMethods:\n- NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider - Constructor that creates a new AutoManagedProvider with configuration\n- UpdateTTL() - Manages the server lifecycle (starts if not running, stops if shutdown)\n- isShutdown() bool - Checks if the server should be shutdown (returns bool)\n- getCurrentNode() interface{} - Returns current node information for health checks (returns interface{})",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/labstack/echo\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\ttransport := &http.Transport{\n\t\tProxy: http.ProxyFromEnvironment,\n\t\tDialContext: (&net.Dialer{\n\t\t\tTimeout:   5 * time.Second,\n\t\t\tKeepAlive: 5 * time.Second,\n\t\t}).DialContext,\n\t\tMaxIdleConns:          10,\n\t\tIdleConnTimeout:       90 * time.Second,\n\t\tExpectContinueTimeout: 1 * time.Second,\n\t\tMaxConnsPerHost:       10,\n\t}\n\n\thttpClient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   2 * time.Second,\n\t}\n\n\tp := &AutoManagedProvider{\n\t\thttpClient:            httpClient,\n\t\tautoManagePort:        autoManPort,\n\t\tactiveProviderRunning: false,\n\t}\n\n\treturn p\n}\n\nfunc (p *AutoManagedProvider) UpdateTTL() {\n\tif p.isShutdown() && p.activeProviderRunning {\n\t\tp.activeProvider.Close()\n\t\treturn\n\t}\n\n\tif p.activeProviderRunning {\n\t\treturn\n\t}\n\n\tif !p.activeProviderTesting {\n\t\tp.activeProvider = echo.New()\n\t\tp.activeProvider.HideBanner = true\n\t\tp.activeProvider.GET(\"/_health\", func(context echo.Context) error {\n\t\t\treturn context.JSON(http.StatusOK, p.getCurrentNode())\n\t\t})\n\t}\n\tgo func() {\n\t\tp.activeProviderRunning = true\n\t\tappURI := fmt.Sprintf(\"0.0.0.0:%d\", p.autoManagePort)\n\t\tp.activeProvider.Start(appURI)\n\t\tp.activeProviderRunning = false\n\t}()\n}\n\nfunc (p *AutoManagedProvider) isShutdown() bool {\n\treturn false\n}\n\nfunc (p *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\ntype AutoManagedProvider struct {\n\tactiveProvider        *echo.Echo\n\tactiveProviderRunning bool\n\tactiveProviderTesting bool\n\thttpClient            *http.Client\n\tautoManagePort        int\n}\n\nfunc NewWithConfig(refreshTTL time.Duration, autoManPort int, hosts ...string) *AutoManagedProvider {\n\treturn &AutoManagedProvider{\n\t\tactiveProvider:       echo.New(),\n\t\tactiveProviderRunning: false,\n\t\tactiveProviderTesting: false,\n\t\thttpClient: &http.Client{\n\t\t\tTimeout: refreshTTL,\n\t\t},\n\t\tautoManagePort: autoManPort,\n\t}\n}\n\nfunc (a *AutoManagedProvider) UpdateTTL() {\n\tif a.isShutdown() {\n\t\ta.StopServer()\n\t} else {\n\t\ta.StartServer()\n\t}\n}\n\nfunc (a *AutoManagedProvider) isShutdown() bool {\n\treturn !a.activeProviderRunning\n}\n\nfunc (a *AutoManagedProvider) getCurrentNode() interface{} {\n\treturn map[string]interface{}{\n\t\t\"status\":   \"active\",\n\t\t\"port\":     a.autoManagePort,\n\t\t\"testing\":  a.activeProviderTesting,\n\t\t\"running\":  a.activeProviderRunning,\n\t}\n}\n\nfunc (a *AutoManagedProvider) StartServer() {\n\tif !a.activeProviderRunning {\n\t\tserver := &http.Server{\n\t\t\tAddr:    fmt.Sprintf(\":%d\", a.autoManagePort),\n\t\t\tHandler: a.activeProvider,\n\t\t}\n\t\tgo func() {\n\t\t\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\tfmt.Printf(\"Server failed to start: %v\\n\", err)\n\t\t\t}\n\t\t}()\n\t\ta.activeProviderRunning = true\n\t}\n}\n\nfunc (a *AutoManagedProvider) StopServer() {\n\tif a.activeProviderRunning {\n\t\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\t\tdefer cancel()\n\t\tif err := a.activeProvider.Server.Shutdown(ctx); err != nil {\n\t\t\tfmt.Printf(\"Server shutdown error: %v\\n\", err)\n\t\t}\n\t\ta.activeProviderRunning = false\n\t}\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server using the Echo framework, which acts as a reverse proxy to route requests to different host servers based on the request's host header.\n\nFunction Description: The function initializes an Echo instance, configures middleware, sets up route handlers, and starts an HTTP server that proxies requests to different Echo instances based on the host header. It maintains a map of hostnames to their corresponding Echo instances for routing purposes.\n\nInput: None (The function takes no parameters but internally uses a map of hostnames to Echo instances)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)\n\n---\n\nTask Description: Create a Go struct that represents a virtual host configuration for an Echo-based HTTP server.\n\nStruct Description: The Host struct represents a virtual host configuration that holds an Echo instance for handling requests to a specific hostname.\n\nFields:\nEcho: *echo.Echo - Pointer to an Echo instance that handles requests for this host\n\nMethods:\nNone (The struct is simple and only holds a reference to an Echo instance)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n\thosts := make(map[string]*Host)\n\n\tapi := echo.New()\n\tapi.Use(middleware.Logger())\n\tapi.Use(middleware.Recover())\n\n\thosts[\"api.localhost:1323\"] = &Host{api}\n\n\tapi.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"API\")\n\t})\n\n\te := echo.New()\n\te.Any(\"/*\", func(c echo.Context) (err error) {\n\t\treq := c.Request()\n\t\tres := c.Response()\n\t\thost := hosts[req.Host]\n\n\t\tif host == nil {\n\t\t\terr = echo.ErrNotFound\n\t\t} else {\n\t\t\thost.Echo.ServeHTTP(res, req)\n\t\t}\n\n\t\treturn\n\t})\n\te.Logger.Fatal(e.Start(\":1323\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "type Host struct {\n\tEcho *echo.Echo\n}\n\nfunc SetupReverseProxyServer() {\n\te := echo.New()\n\thostMap := make(map[string]*echo.Echo)\n\n\t// Example setup for two virtual hosts\n\thost1 := echo.New()\n\thost1.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(200, \"Response from host1\")\n\t})\n\thostMap[\"host1.com\"] = host1\n\n\thost2 := echo.New()\n\thost2.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(200, \"Response from host2\")\n\t})\n\thostMap[\"host2.com\"] = host2\n\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\thost := c.Request().Host\n\t\t\tif target, exists := hostMap[host]; exists {\n\t\t\t\tc.Set(\"echo\", target)\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t\treturn c.String(404, \"Host not found\")\n\t\t}\n\t})\n\n\te.Logger.Fatal(e.Start(\":8080\"))\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Implement an HTTP server using the Echo framework in Go that handles workflow-related requests with authentication and specific route handlers.\n\nFunction Description: The function `startWorkflowServer` initializes and starts an HTTP server using the Echo framework. It sets up middleware for authentication, defines route handlers for specific endpoints (`/secrets` and `/trigger`), and starts the server on the specified host and port. The server validates incoming requests using a predefined workflow key and performs specific actions based on the route.\n\nInput:  \n- `host` (string): The host address on which the server will listen.  \n- `port` (uint64): The port number on which the server will listen.  \n\nOutput:  \n- None (The function starts an HTTP server and blocks indefinitely unless an error occurs).  \n\nNote: The function uses global variables (`workflowKey`, `builderKey`, `secretsHit`, `triggerHit`, etc.) and external configurations (`config.Current.File.ServerUrl`), which should be defined elsewhere in the code.  \n\n(Strictly followed the format requirements without inserting irrelevant characters.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"github.com/rs/zerolog/log\"\n\t\"github.com/ziflex/lecho/v2\"\n)\n\nfunc startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\tlogger := lecho.From(log.Logger)\n\te.Logger = logger\n\te.Use(lecho.Middleware(lecho.Config{Logger: logger})\n\n\tkeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == workflowKey, nil\n\t})\n\n\teg := e.Group(\"\", keyAuth)\n\n\teg.POST(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit = true\n\t\tparams, err := c.FormParams()\n\t\tif err != nil {\n\t\t\tlog.Fatal().Err(err).Send()\n\t\t}\n\t\tfor key, val := range params {\n\t\t\tswitch key {\n\t\t\tcase \"SECRET_KEY\":\n\t\t\t\tif val[0] != builderKey {\n\t\t\t\t\tlog.Fatal().Msg(\"bad key\")\n\t\t\t\t}\n\t\t\tcase \"SECRET_URL\":\n\t\t\t\tif val[0] != config.Current.File.ServerUrl {\n\t\t\t\t\tlog.Fatal().Msg(\"bad url\")\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tlog.Fatal().Msg(\"unknown secret\")\n\t\t\t}\n\t\t}\n\t\treturn c.NoContent(200)\n\t})\n\n\teg.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit = true\n\t\treturn c.NoContent(200)\n\t})\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "func startWorkflowServer(host string, port uint64) {\n\te := echo.New()\n\te.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n\t\treturn func(c echo.Context) error {\n\t\t\tauthKey := c.Request().Header.Get(\"Authorization\")\n\t\t\tif authKey != workflowKey && authKey != builderKey {\n\t\t\t\treturn echo.NewHTTPError(http.StatusUnauthorized, \"invalid authorization key\")\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t})\n\te.GET(\"/secrets\", func(c echo.Context) error {\n\t\tsecretsHit++\n\t\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\t\"secrets\": \"accessed\",\n\t\t})\n\t})\n\te.POST(\"/trigger\", func(c echo.Context) error {\n\t\ttriggerHit++\n\t\treturn c.JSON(http.StatusOK, map[string]interface{}{\n\t\t\t\"trigger\": \"executed\",\n\t\t})\n\t})\n\te.Logger.SetLevel(log.LevelDebug)\n\te.Server.Addr = host + \":\" + fmt.Sprintf(\"%d\", port)\n\terr := e.Start(e.Server.Addr)\n\tif err != nil {\n\t\te.Logger.Error(err)\n\t}\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a function to retrieve metadata and ETag from Google Compute Engine (GCE) metadata server using a custom HTTP client with specific timeout configurations.\n\nFunction Description: The function `getETag` makes an HTTP GET request to the GCE metadata server to fetch metadata value and its associated ETag. It uses a pre-configured HTTP client with custom timeout settings and adds required headers to the request. The function handles various response scenarios including not found errors and non-200 status codes.\n\nInput:\n- suffix [string]: The metadata path suffix to append to the base metadata URL\n\nOutput:\n- value [string]: The retrieved metadata value\n- etag [string]: The ETag header value from the response\n- err [error]: Error object if any error occurs during the request or processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"google.golang.org/cloud/internal\"\n)\n\nvar metaClient = &http.Client{\n\tTransport: &internal.Transport{\n\t\tBase: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   750 * time.Millisecond,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 750 * time.Millisecond,\n\t\t},\n\t},\n}\n\nfunc getETag(suffix string) (value, etag string, err error) {\n\thost := os.Getenv(\"GCE_METADATA_HOST\")\n\tif host == \"\" {\n\t\thost = \"169.254.169.254\"\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\tres, err := metaClient.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func getETag(suffix string) (string, string, error) {\n    client := &http.Client{\n        Timeout: 5 * time.Second,\n    }\n    url := \"http://metadata.google.internal/computeMetadata/v1/\" + suffix\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return \"\", \"\", err\n    }\n    req.Header.Set(\"Metadata-Flavor\", \"Google\")\n    resp, err := client.Do(req)\n    if err != nil {\n        return \"\", \"\", err\n    }\n    defer resp.Body.Close()\n    if resp.StatusCode != http.StatusOK {\n        return \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n    }\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return \"\", \"\", err\n    }\n    etag := resp.Header.Get(\"ETag\")\n    return string(body), etag, nil\n}"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with configurable settings including middleware, routes, and TLS support.\n\nFunction Description: The function serves as the entry point for starting a Gin-based HTTP server. It initializes the Gin engine with default middleware (Logger and Recovery) and additional custom middleware (CORS, Correlation, Auth, etc.). It registers various route handlers for different endpoints including health checks, metrics, and a home route. The server can be started with or without TLS based on configuration.\n\nInput: \n- None (configuration is read from viper and cobra command context)\n\nOutput: \n- None (runs HTTP server as a blocking operation, panics on error)\n\nMethods:\n- The function itself serves as the main execution method for the cobra.Command's Run field\n\nNote: The function uses global configuration via viper and is designed to work as part of a cobra CLI command structure. It handles server startup errors by panicking, which is appropriate for a main application entry point.\n\n(Strictly following the format with no extra characters)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/spf13/viper\"\n)\n\nvar towerCmd = &cobra.Command{\n\tUse:   \"api\",\n\tShort: \"Start beaver api server\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tr := gin.Default()\n\n\t\tr.Use(middleware.Cors())\n\t\tr.Use(middleware.Correlation())\n\t\tr.Use(middleware.Logger())\n\t\tr.Use(middleware.Metric())\n\t\tr.Use(middleware.Auth())\n\n\t\tr.GET(\"/favicon.ico\", func(c *gin.Context) {\n\t\t\tc.String(http.StatusNoContent, \"\")\n\t\t})\n\n\t\tr.GET(\"/\", controller.Home)\n\n\t\tr.GET(\"/_health\", controller.Health)\n\n\t\tr.GET(\n\t\t\tviper.GetString(\"app.metrics.prometheus.endpoint\"),\n\t\t\tgin.WrapH(controller.Metrics()),\n\t\t)\n\n\t\tvar runerr error\n\n\t\tif viper.GetBool(\"app.tls.status\") {\n\t\t\trunerr = r.RunTLS(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t\tviper.GetString(\"app.tls.pemPath\"),\n\t\t\t\tviper.GetString(\"app.tls.keyPath\"),\n\t\t\t)\n\t\t} else {\n\t\t\trunerr = r.Run(\n\t\t\t\tfmt.Sprintf(\":%s\", strconv.Itoa(viper.GetInt(\"app.port\"))),\n\t\t\t)\n\t\t}\n\n\t\tif runerr != nil {\n\t\t\tpanic(runerr.Error())\n\t\t}\n\t},\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func RunServer() {\n\tv := viper.GetViper()\n\tcfg := config.LoadConfig(v)\n\t\n\tr := gin.Default()\n\t\n\t// Register middleware\n\tr.Use(middleware.Logger())\n\tr.Use(middleware.Recovery())\n\tr.Use(cors.Middleware())\n\tr.Use(correlation.Middleware())\n\tr.Use(auth.Middleware())\n\t\n\t// Health check endpoint\n\tr.GET(\"/health\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"healthy\"})\n\t})\n\t\n\t// Metrics endpoint\n\tr.GET(\"/metrics\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"metrics\": \"example metrics data\"})\n\t})\n\t\n\t// Home route\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Welcome to the API\")\n\t})\n\t\n\t// Start server\n\tif cfg.TLS.Enabled {\n\t\terr := r.RunTLS(cfg.Server.Addr, cfg.TLS.CertFile, cfg.TLS.KeyFile)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t} else {\n\t\terr := r.Run(cfg.Server.Addr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using Gin framework with automatic TLS certificate management from Let's Encrypt.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a simple GET route handler, configures automatic TLS certificate management using autocert, and starts the HTTPS server. The server will automatically obtain and renew TLS certificates from Let's Encrypt for specified domains.\n\nInput: None (The function takes no parameters as all configurations are internally defined)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely. It will log.Fatal if there's an error starting the server.)\n\nNote: The function demonstrates a complete setup for a production-ready HTTPS server with automatic certificate management. The domains and cache directory are hardcoded in this example but could be parameterized in a real implementation.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tm := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"example1.com\", \"example2.com\"),\n\t\tCache:      autocert.DirCache(\"/var/www/.cache\"),\n\t}\n\n\tlog.Fatal(autotls.RunWithManager(r, m))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc initHTTPSserver() {\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from secure server!\"})\n\t})\n\n\tm := &autocert.Manager{\n\t\tPrompt: true,\n\t\tEmail:  \"your-email@example.com\",\n\t\tHosts:  []string{\"example.com\", \"www.example.com\"},\n\t\tCache:  autocert.DirCache(\"/path/to/cache\"),\n\t}\n\n\tserver := &http.Server{\n\t.Addr: \":443\",\n\t\tHandler: r,\n\t}\n\n\tgo http.Serve(m.HTTPServer(), nil)\n\n\tlog.Println(\"Starting HTTPS server on :443\")\n\tif err := server.ListenAndServeTLS(\"\", \"\"); err != nil {\n\t\tlog.Fatal(\"Failed to start HTTPS server:\", err)\n\t}\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func initServer() {\n\tr := gin.Default()\n\tr.Use(gin.Logger(), gin.Recovery())\n\tr.Static(\"/static\", \"static\")\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a Go struct representing a Docker registry repository client that can interact with a Docker registry API to manage blobs, manifests, and tags.\n\nStruct Description: The `repository` struct represents a client for interacting with a Docker registry repository. It provides methods to access blob storage, manifests, and tags through the Docker Registry HTTP API V2.\n\nFields:\n- client: *http.Client - Custom HTTP client for making requests to the registry\n- ub: *v2.URLBuilder - URL builder for constructing registry API endpoints\n- name: reference.Named - Named reference to the Docker repository\n\nMethods:\n- Named() -> reference.Named - Returns the named reference of the repository\n- Blobs(context.Context) -> distribution.BlobStore - Returns a BlobStore for managing repository blobs\n- Manifests(context.Context, ...distribution.ManifestServiceOption) -> (distribution.ManifestService, error) - Returns a ManifestService for managing repository manifests\n- Tags(context.Context) -> distribution.TagService - Returns a TagService for managing repository tags\n\nAdditional Struct: `tags` - Handles tag operations for a Docker repository\n\nFields:\n- client: *http.Client - HTTP client for making requests\n- ub: *v2.URLBuilder - URL builder for API endpoints\n- name: reference.Named - Named reference to the repository\n\nMethods:\n- Get(context.Context, string) -> (distribution.Descriptor, error) - Retrieves descriptor information for a specific tag, first trying HEAD request and falling back to GET if needed",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/distribution/reference\"\n\t\"github.com/docker/distribution\"\n\tv2 \"github.com/docker/distribution/registry/api/v2\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n\t\"github.com/opencontainers/go-digest\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc NewRepository(name reference.Named, baseURL string, transport http.RoundTripper) (distribution.Repository, error) {\n\tub, err := v2.NewURLBuilderFromString(baseURL, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclient := &http.Client{\n\t\tTransport:     transport,\n\t\tCheckRedirect: checkHTTPRedirect,\n\t}\n\n\treturn &repository{\n\t\tclient: client,\n\t\tub:     ub,\n\t\tname:   name,\n\t}, nil\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\tstatter := &blobStatter{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t}\n\treturn &blobs{\n\t\tname:    r.name,\n\t\tub:      r.ub,\n\t\tclient:  r.client,\n\t\tstatter: statter,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, options ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifests{\n\t\tname:   r.name,\n\t\tub:     r.ub,\n\t\tclient: r.client,\n\t\tetags:  make(map[string]string),\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.Named(),\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\tref, err := reference.WithTag(t.name, tag)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tu, err := t.ub.BuildManifestURL(ref)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\n\tnewRequest := func(method string) (*http.Response, error) {\n\t\treq, err := http.NewRequest(method, u, nil)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tfor _, t := range distribution.ManifestMediaTypes() {\n\t\t\treq.Header.Add(\"Accept\", t)\n\t\t}\n\t\tresp, err := t.client.Do(req)\n\t\treturn resp, err\n\t}\n\n\tresp, err := newRequest(\"HEAD\")\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tswitch {\n\tcase resp.StatusCode >= 200 && resp.StatusCode < 400 && len(resp.Header.Get(\"Docker-Content-Digest\")) > 0:\n\t\treturn descriptorFromResponse(resp)\n\tdefault:\n\t\tresp, err = newRequest(\"GET\")\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\treturn descriptorFromResponse(resp)\n\t\t}\n\t\treturn distribution.Descriptor{}, HandleErrorResponse(resp)\n\t}\n}\n\nfunc descriptorFromResponse(response *http.Response) (distribution.Descriptor, error) {\n\tdesc := distribution.Descriptor{}\n\theaders := response.Header\n\n\tctHeader := headers.Get(\"Content-Type\")\n\tif ctHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Type header\")\n\t}\n\tdesc.MediaType = ctHeader\n\n\tdigestHeader := headers.Get(\"Docker-Content-Digest\")\n\tif digestHeader == \"\" {\n\t\tbytes, err := ioutil.ReadAll(response.Body)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\t_, desc, err := distribution.UnmarshalManifest(ctHeader, bytes)\n\t\tif err != nil {\n\t\t\treturn distribution.Descriptor{}, err\n\t\t}\n\t\treturn desc, nil\n\t}\n\n\tdgst, err := digest.Parse(digestHeader)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Digest = dgst\n\n\tlengthHeader := headers.Get(\"Content-Length\")\n\tif lengthHeader == \"\" {\n\t\treturn distribution.Descriptor{}, errors.New(\"missing or empty Content-Length header\")\n\t}\n\tlength, err := strconv.ParseInt(lengthHeader, 10, 64)\n\tif err != nil {\n\t\treturn distribution.Descriptor{}, err\n\t}\n\tdesc.Size = length\n\n\treturn desc, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package distribution\n\nimport (\n\t\"context\"\n\t\"net/http\"\n)\n\ntype repository struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (r *repository) Named() reference.Named {\n\treturn r.name\n}\n\nfunc (r *repository) Blobs(ctx context.Context) distribution.BlobStore {\n\treturn &blobStore{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\nfunc (r *repository) Manifests(ctx context.Context, opts ...distribution.ManifestServiceOption) (distribution.ManifestService, error) {\n\treturn &manifestService{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t\topts:   opts,\n\t}, nil\n}\n\nfunc (r *repository) Tags(ctx context.Context) distribution.TagService {\n\treturn &tags{\n\t\tclient: r.client,\n\t\tub:     r.ub,\n\t\tname:   r.name,\n\t}\n}\n\ntype tags struct {\n\tclient *http.Client\n\tub     *v2.URLBuilder\n\tname   reference.Named\n}\n\nfunc (t *tags) Get(ctx context.Context, tag string) (distribution.Descriptor, error) {\n\t// Implementation for retrieving descriptor info for a specific tag\n\t// First try HEAD request, then fallback to GET if needed\n\treturn distribution.Descriptor{}, nil\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server with a single GET endpoint to handle and respond to header data.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET handler for the root path (\"/\"), processes incoming request headers, and returns a JSON response containing specific header values. The server listens on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but processes HTTP request headers internally)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that outputs JSON responses)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\th := testHeader{}\n\n\t\tif err := c.ShouldBindHeader(&h); err != nil {\n\t\t\tc.JSON(http.StatusOK, err)\n\t\t}\n\n\t\tfmt.Printf(\"%#v\\n\", h)\n\t\tc.JSON(http.StatusOK, gin.H{\"Rate\": h.Rate, \"Domain\": h.Domain})\n\t})\n\n\tr.Run()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupServer() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\theaders := make(map[string]interface{})\n\t\tfor k, v := range c.Request.Header {\n\t\t\theaders[k] = v[0]\n\t\t}\n\t\tc.JSON(200, headers)\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin-based HTTP server with TLS support, serving HTML content and static assets, while also implementing HTTP/2 server push for static resources.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up static file serving, configures HTML templates, implements HTTP/2 server push for static assets, and starts the server with TLS encryption. It handles requests to the root path (\"/\") by returning HTML content and pushing a JavaScript file to the client.\n\nInput:\n- port (string): The port number to listen on (e.g., \":8080\")\n- certFile (string): Path to the TLS certificate file (e.g., \"./testdata/server.pem\")\n- keyFile (string): Path to the TLS private key file (e.g., \"./testdata/server.key\")\n- htmlTemplates (template.Template): HTML templates to be used for rendering\n- staticDir (string): Directory path for static assets (e.g., \"./assets\")\n\nOutput: None (the function runs indefinitely as a web server)",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/assets\", \"./assets\")\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher := c.Writer.Pusher(); pusher != nil {\n\t\t\tif err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n\t\t\t\tlog.Printf(\"Failed to push: %v\", err)\n\t\t\t}\n\t\t}\n\t\tc.HTML(200, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func RunTLSServer(port, certFile, keyFile string, htmlTemplates template.Template, staticDir string) {\n\tr := gin.Default()\n\tr.Use(gin.Logger(), gin.Recovery())\n\n\tr.LoadHTMLTemplates(htmlTemplates)\n\n\tr.StaticFS(\"/static\", http.Dir(staticDir))\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(200, \"index.html\", nil)\n\t\tpushJS(c, \"/static/main.js\")\n\t})\n\n\tserver := &http.Server{\n\t\tAddr:    port,\n\t\tTLSConfig: &tls.Config{\n\t\t\tMinVersion: tls.VersionTLS12,\n\t\t\tCurvePreferences: []tls.CurveID{\n\t\t\t\ttls.CurveP521,\n\t\t\t\ttls.CurveP384,\n\t\t\t\ttls.CurveP256,\n\t\t\t},\n\t\t},\n\t}\n\n\tgo func() {\n\t\tif err := server.ListenAndServeTLS(certFile, keyFile); err != nil {\n\t\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t\t}\n\t}()\n\n\t// Wait for interrupt signal to shutdown\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt)\n\t<-sigChan\n\tlog.Println(\"Shutting down server...\")\n\tserver.Close()\n}\n\nfunc pushJS(c *gin.Context, filePath string) {\n\tconn := c.Writer\n\tif h2conn, ok := conn.(*h2c.Conn); ok {\n\t\th2conn.Push(filePath, nil)\n\t}\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, save the uploaded file to the server, and return a success message with the file details and form fields.\n\nFunction Description: The function initializes a Gin router, configures it to handle multipart form uploads (with a maximum size limit), serves static files from a public directory, and sets up a POST endpoint for file uploads. The endpoint binds the incoming request to a struct containing the file and form fields, saves the file to the server, and returns a success message with the file name and form field values.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it sends HTTP responses through the Gin context)\n\nNote: The function assumes the existence of a `BindFile` struct type which should contain at least these fields:\n- File: *multipart.FileHeader - The uploaded file\n- Name: string - A form field value\n- Email: string - A form field value",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar bindFile BindFile\n\n\t\tif err := c.ShouldBind(&bindFile); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tfile := bindFile.File\n\t\tdst := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.String(http.StatusBadRequest, fmt.Sprintf(\"upload file err: %s\", err.Error()))\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, bindFile.Name, bindFile.Email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupFileUploadServer() {\n\tr := gin.Default()\n\tr.Static(\"/public\", \"./public\")\n\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tvar formData struct {\n\t\t\tName  string\n\t\t\tEmail string\n\t\t}\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.JSON(400, gin.H{\"error\": \"Failed to get file\"})\n\t\t\treturn\n\t\t}\n\n\t\tif err := c.Bind(&formData); err != nil {\n\t\t\tc.JSON(400, gin.H{\"error\": \"Failed to bind form data\"})\n\t\t\treturn\n\t\t}\n\n\t\tdst := fmt.Sprintf(\"./public/uploads/%s\", file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.JSON(500, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\":  \"File uploaded successfully\",\n\t\t\t\"filename\": file.Filename,\n\t\t\t\"name\":     formData.Name,\n\t\t\t\"email\":    formData.Email,\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling multipart form uploads. It processes uploaded files along with name and email form fields, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters but handles HTTP requests with the following expected inputs:\n- POST /upload requests containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - Multipart files: \"files\" (array of files)\n- GET requests for static files from the \"./public\" directory)\n\nOutput: None (The function doesn't return any value but produces the following outputs:\n- For successful uploads: HTTP 200 response with success message\n- For errors: HTTP 400 responses with error messages\n- Static file serving for requests to the root path)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupGinServer() {\n\tr := gin.Default()\n\n\t// Serve static files from the \"public\" directory\n\tr.Static(\"/public\", \"./public\")\n\n\t// Handle file upload endpoint\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\t// Parse form data\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to parse form data\"})\n\t\t\treturn\n\t\t}\n\t\tdefer form.RemoveAll()\n\n\t\t// Get name and email fields\n\t\tname := form.Value[\"name\"][0]\n\t\temail := form.Value[\"email\"][0]\n\n\t\t// Get uploaded files\n\t\tfiles := form.File[\"files\"]\n\t\tif len(files) == 0 {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"No files uploaded\"})\n\t\t\treturn\n\t\t}\n\n\t\t// Save each uploaded file\n\t\tfor _, file := range files {\n\t\t\tdst := \"./uploads/\" + file.Filename\n\t\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to save file\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// Return success response\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\":  \"Upload successful\",\n\t\t\t\"name\":    name,\n\t\t\t\"email\":   email,\n\t\t\t\"files\":   files,\n\t\t\t\"status\":  \"success\",\n\t\t})\n\t})\n\n\t// Start server on port 8080\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but the server configuration is hardcoded in the function)\n\nOutput: None (The function doesn't return any value but starts an HTTP server that continues running until interrupted)\n\nNote: The static file directory (\"/tmp\") and server port (\":8080\") are hardcoded in this implementation but could be made configurable through parameters in a more flexible version.",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\tr.Use(gin.Logger(), gin.Recovery())\n\tr.Static(\"/static\", \"/tmp\")\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from Gin!\"})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle GET requests, extract request information, and return a JSON response containing the request path and IP details.\n\nFunction Description: The function initializes a Gin router with default middleware, registers a GET route handler that captures the request path and IP information (including RemoteAddr, X-Forwarded-For, and X-Real-Ip headers), and returns this information as a JSON response. The server runs on a specified address.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return any value directly, but sends JSON responses to HTTP clients and may log errors during server startup)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nconst (\n\tAddr = \"127.0.0.1:2003\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/:path\", func(c *gin.Context) {\n\t\treq := c.Request\n\t\turlPath := fmt.Sprintf(\"http://%s%s\", Addr, req.URL.Path)\n\t\trealIP := fmt.Sprintf(\"RemoteAddr=%s,X-Forwarded-For=%v,X-Real-Ip=%v\", req.RemoteAddr, req.Header.Get(\"X-Forwarded-For\"), req.Header.Get(\"X-Real-Ip\"))\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": urlPath,\n\t\t\t\"ip\":   realIP,\n\t\t})\n\t})\n\n\tif err := r.Run(Addr); err != nil {\n\t\tlog.Printf(\"Error: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupGinServer() {\n\tr := gin.Default()\n\tr.GET(\"/*path\", func(c *gin.Context) {\n\t\tpath := c.Request.URL.Path\n\t\tip := c.ClientIP()\n\t\theaders := map[string]string{\n\t\t\t\"RemoteAddr\":   c.Request.RemoteAddr,\n\t\t\t\"X-Forwarded-For\": c.GetHeader(\"X-Forwarded-For\"),\n\t\t\t\"X-Real-Ip\":    c.GetHeader(\"X-Real-Ip\"),\n\t\t}\n\t\tc.JSON(200, gin.H{\n\t\t\t\"path\": path,\n\t\t\t\"ip\":   ip,\n\t\t\t\"headers\": headers,\n\t\t})\n\t})\n\tgo func() {\n\t\tif err := r.Run(\":8080\"); err != nil {\n\t\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic string response.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler for the \"/ping\" endpoint, and starts the server on the default port (8080). When a GET request is made to \"/ping\", it responds with the string \"pong\".\n\nInput: None (The function takes no direct input parameters; it handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything; it starts an HTTP server that runs until interrupted)",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that retrieves metadata from a metadata server using a custom HTTP client, with support for ETag headers and error handling.\n\nFunction Description: The function `getETag` makes an HTTP GET request to a metadata server endpoint, using a custom HTTP client with specific timeout configurations. It handles the response by checking status codes, reading the response body, and extracting both the content and ETag header. The function includes error handling for various scenarios including connection errors, missing resources, and non-200 status codes.\n\nInput:\n- client *http.Client: A custom HTTP client with configured timeouts for the request\n- suffix string: The path suffix to append to the base metadata URL\n\nOutput:\n- value string: The content of the response body as a string\n- etag string: The ETag header value from the response\n- err error: An error object if any step fails, nil on success",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar (\n\tmetaClient = &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   2 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 2 * time.Second,\n\t\t},\n\t}\n)\n\nfunc getETag(client *http.Client, suffix string) (value, etag string, err error) {\n\thost := os.Getenv(metadataHostEnv)\n\tif host == \"\" {\n\t\thost = metadataIP\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", userAgent)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func getETag(client *http.Client, suffix string) (value string, etag string, err error) {\n\turl := \"http://169.254.169.254\" + suffix\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tvalue = string(body)\n\tetag = resp.Header.Get(\"ETag\")\n\treturn value, etag, nil\n}"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Go function that sets up a Gin-based HTTP server with specific API endpoints for handling web information requests. The function should initialize the server, define route handlers, and process incoming requests to return appropriate JSON responses.\n\nFunction Description: The `api` function initializes a Gin HTTP server with default middleware (Logger and Recovery). It defines two main routes: a root endpoint (\"/\") that returns a simple status message, and an API group (\"/api\") with endpoints for handling web information requests (\"/info\" for both GET and POST methods). The function processes incoming requests, validates input, executes business logic through `RunJob`, and returns structured JSON responses.\n\nInput:\n- `options` (*common.ENOptions): A pointer to an options structure containing configuration parameters for the application. This parameter is used to pass various settings to the business logic processing.\n\nOutput:\n- None (direct output via HTTP responses)\n- The function starts an HTTP server that listens on port 31000 and handles incoming requests\n- Returns error if server fails to start (logged via gologger)\n\nThe function does not explicitly return any values but sends HTTP responses in JSON format with the following possible structures:\n1. Success response (200 status code):\n```json\n{\n  \"code\": 200,\n  \"message\": \"ok\",\n  \"data\": [result_data]\n}\n```\n2. Error responses (400/500 status codes):\n```json\n{\n  \"code\": [error_code],\n  \"message\": \"[error_message]\"\n}\n```",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/wgpsec/ENScan/common\"\n\t\"github.com/wgpsec/ENScan/common/gologger\"\n)\nfunc api(options *common.ENOptions) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"OK\",\n\t\t})\n\t})\n\twebInfo := func(c *gin.Context) {\n\t\tvar w webOp\n\t\terr := c.ShouldBind(&w)\n\t\tif err != nil {\n\t\t\tc.JSON(500, gin.H{\n\t\t\t\t\"code\":    500,\n\t\t\t\t\"message\": \"\u6570\u636e\u7ed1\u5b9a\u5f02\u5e38\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.OrgName == \"\" {\n\t\t\tc.JSON(400, gin.H{\n\t\t\t\t\"code\":    400,\n\t\t\t\t\"message\": \"\u8bf7\u8f93\u5165\u67e5\u8be2\u6761\u4ef6\uff01\",\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\tif w.Branch {\n\t\t\toptions.IsGetBranch = true\n\t\t}\n\t\toptions.KeyWord = w.OrgName\n\t\toptions.GetFlags = w.Filed\n\t\toptions.ScanType = w.ScanType\n\t\toptions.InvestNum = w.Invest\n\t\toptions.IsSupplier = w.Supplier\n\t\toptions.IsHold = w.Holds\n\t\toptions.Deep = w.Depth\n\t\toptions.IsMergeOut = true\n\t\tcommon.Parse(options)\n\t\tdata := RunJob(options)\n\t\tc.JSON(200, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"ok\",\n\t\t\t\"data\":    data,\n\t\t})\n\t}\n\ta := r.Group(\"/api\")\n\t{\n\t\ta.GET(\"/info\", webInfo)\n\t\ta.POST(\"/info\", webInfo)\n\t}\n\terr := r.Run(\":31000\")\n\tif err != nil {\n\t\tgologger.Error().Msgf(\"API\u670d\u52a1\u542f\u52a8\u5931\u8d25\uff01\")\n\t\tgologger.Fatal().Msgf(err.Error())\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func api(options *common.ENOptions) {\n\tr := gin.Default()\n\tr.Use(gin.Logger())\n\tr.Use(gin.Recovery())\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"code\":    200,\n\t\t\t\"message\": \"ok\",\n\t\t\t\"data\":    \"Server is running\",\n\t\t})\n\t})\n\n\tapiGroup := r.Group(\"/api\")\n\t{\n\t\tapiGroup.GET(\"/info\", func(c *gin.Context) {\n\t\t\tif err := c.ShouldBindJSON(&request); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    400,\n\t\t\t\t\t\"message\": \"Invalid request format\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresult, err := RunJob(options, request)\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\t\"code\":    500,\n\t\t\t\t\t\"message\": \"Internal server error\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":    200,\n\t\t\t\t\"message\": \"ok\",\n\t\t\t\t\"data\":    result,\n\t\t\t})\n\t\t})\n\n\t\tapiGroup.POST(\"/info\", func(c *gin.Context) {\n\t\t\tif err := c.ShouldBindJSON(&request); err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\n\t\t\t\t\t\"code\":    400,\n\t\t\t\t\t\"message\": \"Invalid request format\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresult, err := RunJob(options, request)\n\t\t\tif err != nil {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{\n\t\t\t\t\t\"code\":    500,\n\t\t\t\t\t\"message\": \"Internal server error\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\t\"code\":    200,\n\t\t\t\t\"message\": \"ok\",\n\t\t\t\t\"data\":    result,\n\t\t\t})\n\t\t})\n\t}\n\n\tif err := r.Run(\":31000\"); err != nil {\n\t\tgologger.Error().Msgf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Go function that sets up a basic HTTP server using the Gin framework, with routes for login and home pages, including cookie handling for authentication.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), defines two routes (/login and /home), and starts the server on port 8080. The /login route sets a cookie, while the /home route requires cookie authentication through middleware and returns JSON data.\n\nInput: None (The function takes no input parameters as it's the main entry point)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that listens indefinitely)\n\nNote: The CookieTool() middleware referenced in the home route would need to be defined separately to verify the cookie set by the login route.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\troute := gin.Default()\n\n\troute.GET(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"label\", \"ok\", 30, \"/\", \"localhost\", false, true)\n\t\tc.String(200, \"Login success!\")\n\t})\n\n\troute.GET(\"/home\", CookieTool(), func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"data\": \"Your home page\"})\n\t})\n\n\troute.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\n\tr.Use(gin.Logger(), gin.Recovery())\n\n\tr.POST(\"/login\", func(c *gin.Context) {\n\t\tc.SetCookie(\"auth_token\", \"secret_token\", 3600, \"/\", \"localhost\", false, true)\n\t\tc.JSON(200, gin.H{\"message\": \"Login successful\"})\n\t})\n\n\tauthMiddleware := func(c *gin.Context) {\n\t\tcookie, err := c.Cookie(\"auth_token\")\n\t\tif err != nil || cookie != \"secret_token\" {\n\t\t\tc.AbortWithStatusJSON(401, gin.H{\"error\": \"Unauthorized\"})\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n\n\tr.GET(\"/home\", authMiddleware, func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"data\": \"Welcome to the home page\"})\n\t})\n\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a JSON message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at \"/api/hello\" that returns a JSON response, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/api/hello\" endpoint)\n\nOutput: \n- When successful: The server runs indefinitely, listening on port 8080\n- When failing: An error message is printed if the server fails to start\n- HTTP Response: For GET requests to \"/api/hello\", returns a JSON response with status 200 OK: {\"message\": \"Hello, HTTP!\"}",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\n\terr := router.Run(\":8080\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\tr.GET(\"/api/hello\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello, HTTP!\"})\n\t})\n\tif err := r.Run(\":8080\"); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a Go struct that provides HTTP client functionality for making GET and POST requests with custom headers and query parameters.\n\nStruct Description: The `request` struct encapsulates HTTP client operations, providing methods to perform GET and POST requests with support for custom headers and query parameters. It handles URL construction, request execution, and response processing.\n\nFields:\n[Note: The reference implementation doesn't show any struct fields, as it's a stateless utility struct]\n\nMethods:\n\nMethod1: HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP GET request to the specified URL with the given query parameters and headers. Returns the response body as bytes, status code, and any error.\n\nMethod2: HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) -> ([]byte, int, error) - Performs an HTTP POST request to the specified URL with the given form data (as query parameters) and headers. Returns the response body as bytes, status code, and any error.\n\nMethod3: QueryBuilder(queryUrl string, queryValues map[string]string) -> string - Helper method that constructs a URL with query parameters from the given base URL and parameter map. Handles URL encoding of parameters.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar Request = NewRequest()\n\ntype request struct {\n}\n\nfunc NewRequest() *request {\n\treturn &request{}\n}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\treq, err := http.NewRequest(\"GET\", r.QueryBuilder(queryUrl, queryValues), nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) (body []byte, code int, err error) {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\n\treq, err := http.NewRequest(\"POST\", queryUrl, strings.NewReader(queryString))\n\tif err != nil {\n\t\treturn\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tif (headerValues != nil) && (len(headerValues) > 0) {\n\t\tfor key, value := range headerValues {\n\t\t\treq.Header.Set(key, value)\n\t\t}\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tcode = resp.StatusCode\n\tdefer resp.Body.Close()\n\n\tbodyByte, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\n\treturn bodyByte, code, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tif !strings.Contains(queryUrl, \"?\") {\n\t\tqueryUrl += \"?\"\n\t}\n\n\tqueryString := \"\"\n\tfor queryKey, queryValue := range queryValues {\n\t\tqueryString = queryString + \"&\" + queryKey + \"=\" + url.QueryEscape(queryValue)\n\t}\n\tqueryString = strings.Replace(queryString, \"&\", \"\", 1)\n\tqueryUrl += queryString\n\n\treturn queryUrl\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\ntype request struct{}\n\nfunc (r *request) HttpGet(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\tconstructedURL := r.QueryBuilder(queryUrl, queryValues)\n\treq, err := http.NewRequest(\"GET\", constructedURL, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tfor key, value := range headerValues {\n\t\treq.Header.Set(key, value)\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := bytes.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\treturn body, resp.StatusCode, nil\n}\n\nfunc (r *request) HttpPost(queryUrl string, queryValues map[string]string, headerValues map[string]string) ([]byte, int, error) {\n\tconstructedURL := r.QueryBuilder(queryUrl, queryValues)\n\treq, err := http.NewRequest(\"POST\", constructedURL, nil)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tfor key, value := range headerValues {\n\t\treq.Header.Set(key, value)\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := bytes.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\treturn body, resp.StatusCode, nil\n}\n\nfunc (r *request) QueryBuilder(queryUrl string, queryValues map[string]string) string {\n\tu, _ := url.Parse(queryUrl)\n\tq := u.Query()\n\tfor key, value := range queryValues {\n\t\tq.Add(key, value)\n\t}\n\tu.RawQuery = q.Encode()\n\treturn u.String()\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Implement a streaming HTTP server endpoint using Gin in Go that sends chunked data responses to clients.\n\nFunction Description: The function sets up a Gin HTTP server with a single endpoint (\"/stream\") that streams data to the client in real-time using chunked transfer encoding. It demonstrates how to implement server-sent events or real-time data streaming in Go.\n\nInput: None (The function takes no direct input parameters as it's the main server setup function)\n\nOutput: None (The function doesn't return anything but sets up a running HTTP server that outputs streaming data to connected clients)\n\n---\n\nFor completeness, here's the alternative struct-level format (though the reference code is function-level):\n\nTask Description: Create a struct that encapsulates a streaming HTTP server using Gin framework in Go.\n\nStruct Description: The StreamServer struct represents a configurable HTTP server capable of streaming data to clients.\n\nFields:\n- router: *gin.Engine - The Gin router instance\n- port: string - The port number to listen on\n- streamData: chan string - Channel for streaming data to clients\n\nMethods:\n- NewStreamServer(port string) *StreamServer - Constructor that initializes a new StreamServer instance\n- SetupRoutes() - Configures all HTTP routes and handlers\n- GenerateStreamData() - Generates sample data for streaming\n- Start() error - Starts the HTTP server\n- Stop() - Gracefully shuts down the server",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"io\"\n\t\"time\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Header(\"Content-Type\", \"text/plain\")\n\t\tc.Header(\"Transfer-Encoding\", \"chunked\")\n\n\t\tdataStream := make(chan string)\n\n\t\tgo func() {\n\t\t\tdefer close(dataStream)\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tdataStream <- fmt.Sprintf(\"Data %d\\n\", i)\n\t\t\t}\n\t\t}()\n\n\t\tfor data := range dataStream {\n\t\t\t_, _ = io.WriteString(c.Writer, data)\n\t\t\tc.Writer.Flush()\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc setupStreamingServer() {\n\tr := gin.Default()\n\tr.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Stream(func(w io.Writer) bool {\n\t\t\tfor i := 0; i < 10; i++ {\n\t\t\t\ttime.Sleep(1 * time.Second)\n\t\t\t\tfmt.Fprintf(w, \"Data chunk %d\\n\", i)\n\t\t\t}\n\t\t\treturn false\n\t\t})\n\t\tc.Writer.Header().Set(\"Content-Type\", \"text/event-stream\")\n\t\tc.Writer.Header().Set(\"Cache-Control\", \"no-cache\")\n\t\tc.Writer.Header().Set(\"Connection\", \"keep-alive\")\n\t\tc.Writer.WriteHeader(http.StatusOK)\n\t})\n\tr.Run(\":8080\")\n}\n\ntype StreamServer struct {\n\trouter     *gin.Engine\n\tport       string\n\tstreamData chan string\n}\n\nfunc NewStreamServer(port string) *StreamServer {\n\treturn &StreamServer{\n\t\trouter:     gin.Default(),\n\t\tport:       port,\n\t\tstreamData: make(chan string, 10),\n\t}\n}\n\nfunc (s *StreamServer) SetupRoutes() {\n\ts.router.GET(\"/stream\", func(c *gin.Context) {\n\t\tc.Stream(func(w io.Writer) bool {\n\t\t\tfor data := range s.streamData {\n\t\t\t\tfmt.Fprintf(w, \"data: %s\\n\\n\", data)\n\t\t\t}\n\t\t\treturn false\n\t\t})\n\t\tc.Writer.Header().Set(\"Content-Type\", \"text/event-stream\")\n\t\tc.Writer.Header().Set(\"Cache-Control\", \"no-cache\")\n\t\tc.Writer.Header().Set(\"Connection\", \"keep-alive\")\n\t\tc.Writer.WriteHeader(http.StatusOK)\n\t})\n}\n\nfunc (s *StreamServer) GenerateStreamData() {\n\tfor i := 0; i < 10; i++ {\n\t\ts.streamData <- fmt.Sprintf(\"Data chunk %d\", i)\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\tclose(s.streamData)\n}\n\nfunc (s *StreamServer) Start() error {\n\ts.SetupRoutes()\n\treturn s.router.Run(s.port)\n}\n\nfunc (s *StreamServer) Stop() {\n\t// Graceful shutdown logic can be added here if needed\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with static file serving capabilities and a simple ping endpoint.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), serves static files from a binary filesystem at the \"/static\" route, and sets up a GET endpoint at \"/ping\" that returns a simple text response. The server listens on port 8080.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything as it runs the server indefinitely)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\tassetfs \"github.com/elazarl/go-bindata-assetfs\"\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.Use(static.Serve(\"/static\", BinaryFileSystem(\"data\")))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t}\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func RunServer() {\n\tr := gin.Default()\n\tr.Use(gin.Logger(), gin.Recovery())\n\tr.Static(\"/static\", \"./static\")\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Go struct that represents a main server application using the Gin web framework, with capabilities for logging configuration, route grouping, and JWT authentication middleware integration.\n\nStruct Description: The Main struct represents a web server application that uses Gin as its web framework. It handles server initialization, route configuration with JWT authentication for protected routes, and serves as the entry point for the application.\n\nFields:\nrouter: *gin.Engine - The Gin engine instance that handles all HTTP routing and middleware\n\nMethods:\ninitServer: () -> error - Initializes the Gin server with configured logging settings (file and console logging based on configuration). Returns error if initialization fails.\nmain: () - Entry point of the application that creates the Main instance, initializes the server, sets up route handlers with JWT authentication for protected routes, and starts the server on the configured port.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"os\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/contrib/jwt\"\n)\n\ntype Main struct {\n\trouter *gin.Engine\n}\n\nfunc (m *Main) initServer() error {\n\tvar err error\n\n\tif common.Config.EnableGinFileLog {\n\t\tf, _ := os.Create(\"logs/gin.log\")\n\t\tif common.Config.EnableGinConsoleLog {\n\t\t\tgin.DefaultWriter = io.MultiWriter(os.Stdout, f)\n\t\t} else {\n\t\t\tgin.DefaultWriter = io.MultiWriter(f)\n\t\t}\n\t} else {\n\t\tif !common.Config.EnableGinConsoleLog {\n\t\t\tgin.DefaultWriter = io.MultiWriter()\n\t\t}\n\t}\n\n\tm.router = gin.Default()\n\n\treturn nil\n}\n\nfunc main() {\n\tm := Main{}\n\n\tif m.initServer() != nil {\n\t\treturn\n\t}\n\n\tc := controllers.User{}\n\tv1 := m.router.Group(\"/api/v1\")\n\t{\n\t\tadmin := v1.Group(\"/admin\")\n\t\t{\n\t\t\tadmin.POST(\"/auth\", c.Authenticate)\n\t\t}\n\n\t\tuser := v1.Group(\"/users\")\n\n\t\tuser.Use(jwt.Auth(common.Config.JwtSecretPassword))\n\t\t{\n\t\t\tuser.POST(\"\", c.AddUser)\n\t\t\tuser.GET(\"/list\", c.ListUsers)\n\t\t\tuser.GET(\"detail/:id\", c.GetUserByID)\n\t\t\tuser.GET(\"/\", c.GetUserByParams)\n\t\t\tuser.DELETE(\":id\", c.DeleteUserByID)\n\t\t\tuser.PATCH(\"\", c.UpdateUser)\n\t\t}\n\t}\n\n\tm.router.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n\n\tm.router.Run(common.Config.Port)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 105,
    "wrong_result": "type Main struct {\n\trouter *gin.Engine\n}\n\nfunc (m *Main) initServer() error {\n\t// Initialize Gin engine with logging configuration\n\t// Example: file and console logging setup\n\t// This is a placeholder for actual logging configuration logic\n\treturn nil\n}\n\nfunc (m *Main) main() {\n\t// Create Main instance\n\tserver := &Main{\n\t\trouter: gin.Default(),\n\t}\n\n\t// Initialize server with logging\n\tif err := server.initServer(); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Setup route grouping and JWT middleware\n\tprotected := server.router.Group(\"/api\")\n\t{\n\t\t// Example protected route with JWT middleware\n\t\tprotected.Use(middleware.JWTWithConfig(middleware.JWTConfig{\n\t\t\tSigningKey: []byte(\"secret-key\"),\n\t\t}))\n\t\tprotected.GET(\"/protected\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"Protected route accessed\"})\n\t\t})\n\t}\n\n\t// Start server on configured port\n\tserver.router.Run(\":8080\")\n}"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, saving the uploaded file to the local filesystem and returning a success message.\n\nFunction Description: The function initializes a Gin router with default middleware, sets up a static file server, and defines a POST endpoint for file uploads. It handles multipart form data containing a file and additional fields (name and email), saves the file to disk, and returns a confirmation message.\n\nInput: \n- None (the function takes no direct input parameters; inputs come via HTTP requests)\n\nOutput:\n- None (the function doesn't return anything; it starts an HTTP server that runs indefinitely)\n\nNote: The function expects HTTP POST requests to the \"/upload\" endpoint with multipart form data containing:\n1. A file (form field name \"file\")\n2. Text fields \"name\" and \"email\"",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, _ := c.FormFile(\"file\")\n\t\tsrc, _ := file.Open()\n\t\tdefer src.Close()\n\n\t\tdst, _ := os.Create(file.Filename)\n\t\tdefer dst.Close()\n\n\t\tio.Copy(dst, src)\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func setupServer() {\n\tr := gin.Default()\n\tr.Static(\"/static\", \"./static\")\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to parse upload request\"})\n\t\t\treturn\n\t\t}\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tdst := fmt.Sprintf(\"./uploads/%s_%s\", name, file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.AbortWithStatusJSON(500, gin.H{\"error\": \"Failed to save uploaded file\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(200, gin.H{\"message\": \"File uploaded successfully\", \"name\": name, \"email\": email})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with a single route handler that responds to GET requests.\n\nFunction Description: The function initializes a default Gin engine with built-in middleware (Logger and Recovery), registers a GET route handler at the path \"/hello\" that responds with a plain text message, and starts the server on port 80. The function is designed to be the main entry point of a Go application using the Gin web framework.\n\nInput: \n- ctx *app.Context: A context object from the eggos framework (used for logging in this example)\n\nOutput: \n- error: Returns any error that occurs during server execution, otherwise nil when the server is properly shut down",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/icexin/eggos/app\"\n)\nfunc main(ctx *app.Context) error {\n\tr := gin.Default()\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"hello from eggos\")\n\t})\n\tctx.Printf(\"run gin server on :80\")\n\treturn r.Run(\":80\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func RunServer(ctx *app.Context) error {\n\tr := gin.Default()\n\tr.Use(gin.Logger())\n\tr.Use(gin.Recovery())\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello from Gin server\")\n\t})\n\treturn r.Run(\":80\")\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a function to retrieve user information from Facebook's Graph API using an access token, with proper error handling and response validation.\n\nFunction Description: The function GetUserInfo makes an authenticated GET request to Facebook's Graph API to fetch user information (name, email, ID, and picture) using the provided access token. It handles the HTTP request/response cycle, validates the response, and parses the JSON data into a structured format.\n\nInput:\n- token: TokenInfo - A struct containing the Facebook access token (token.AccessToken is used)\n\nOutput:\n- model.UserInfo - A struct containing the user's information (ID, picture URL, name, email, and origin)\n- string - The raw JSON response body from the API\n- error - Any error that occurred during the API request or response processing",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/tarent/loginsrv/model\"\n)\n\nvar facebookAPI = \"https://graph.facebook.com/v2.12\"\n\nfunc (p Provider) GetUserInfo(token TokenInfo) (model.UserInfo, string, error) {\n\tfu := facebookUser{}\n\n\turl := fmt.Sprintf(\"%v/me?access_token=%v&fields=name,email,id,picture\", facebookAPI, token.AccessToken)\n\n\tclient := &http.Client{}\n\tcontentType := \"application/json\"\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Accept\", contentType)\n\tresp, err := client.Do(req)\n\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif !strings.Contains(resp.Header.Get(\"Content-Type\"), contentType) {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"wrong content-type on facebook get user info: %v\", resp.Header.Get(\"Content-Type\"))\n\t}\n\n\tif resp.StatusCode != 200 {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"got http status %v on facebook get user info\", resp.StatusCode)\n\t}\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"error reading facebook get user info: %v\", err)\n\t}\n\n\terr = json.Unmarshal(b, &fu)\n\tif err != nil {\n\t\treturn model.UserInfo{}, \"\", fmt.Errorf(\"error parsing facebook get user info: %v\", err)\n\t}\n\n\treturn model.UserInfo{\n\t\tSub:     fu.UserID,\n\t\tPicture: fu.Picture.Data.URL,\n\t\tName:    fu.Name,\n\t\tEmail:   fu.Email,\n\t\tOrigin:  \"facebook\",\n\t}, string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func GetUserInfo(token TokenInfo) (UserInfo, string, error) {\n\turl := \"https://graph.facebook.com/v18.0/me\"\n\tparams := url.Values{}\n\tparams.Add(\"fields\", \"id,name,email,picture.height(200).width(200),origin\")\n\tparams.Add(\"access_token\", token.AccessToken)\n\n\tresp, err := http.Get(url + \"?\" + params.Encode())\n\tif err != nil {\n\t\treturn UserInfo{}, \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn UserInfo{}, \"\", err\n\t}\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn UserInfo{}, string(body), fmt.Errorf(\"HTTP error: %d\", resp.StatusCode)\n\t}\n\n\tvar result map[string]interface{}\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\treturn UserInfo{}, string(body), err\n\t}\n\n\tuserID, ok := result[\"id\"].(string)\n\tif !ok {\n\t\treturn UserInfo{}, string(body), fmt.Errorf(\"missing user ID in response\")\n\t}\n\n\tname, ok := result[\"name\"].(string)\n\tif !ok {\n\t\treturn UserInfo{}, string(body), fmt.Errorf(\"missing name in response\")\n\t}\n\n\temail, ok := result[\"email\"].(string)\n\tif !ok {\n\t\temail = \"\"\n\t}\n\n\tpicture, ok := result[\"picture\"].(map[string]interface{})\n\tif ok {\n\t\tdata, ok := picture[\"data\"].(map[string]interface{})\n\t\tif ok {\n\t\t\turl, ok := data[\"url\"].(string)\n\t\t\tif ok {\n\t\t\t\tpictureURL = url\n\t\t\t}\n\t\t}\n\t}\n\n\torigin, ok := result[\"origin\"].(map[string]interface{})\n\tif ok {\n\t\turl, ok := origin[\"url\"].(string)\n\t\tif ok {\n\t\t\toriginURL = url\n\t\t}\n\t}\n\n\treturn UserInfo{\n\t\tID:        userID,\n\t\tName:      name,\n\t\tEmail:     email,\n\t\tPicture:   pictureURL,\n\t\tOrigin:    originURL,\n\t}, string(body), nil\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Go function that sets up a simple HTTP server using the Gin framework to retrieve and return the client's IP address.\n\nFunction Description: The function initializes a Gin HTTP server with default middleware (Logger and Recovery), registers a GET endpoint \"/getip\" that retrieves the client's IP address from the request context, and returns it as a JSON response. The server listens on port 8080.\n\nInput: None (The function takes no input parameters)\n\nOutput: None (The function does not return any value but starts an HTTP server that runs indefinitely)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip := c.ClientIP()\n\t\tc.JSON(http.StatusOK, gin.H{\"ip\": ip})\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupIPServer() {\n\tr := gin.Default()\n\tr.GET(\"/getip\", func(c *gin.Context) {\n\t\tip := c.ClientIP()\n\t\tc.JSON(200, gin.H{\"ip\": ip})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS web server using the Gin framework, serving a welcome page at the \"/welcome\" endpoint.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), sets up HTML templates, registers a GET handler for the \"/welcome\" endpoint that returns an HTML response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput:\n- port (string): The port number to listen on, e.g., \":8080\"\n- certFile (string): Path to the TLS certificate file, e.g., \"./testdata/server.pem\"\n- keyFile (string): Path to the TLS private key file, e.g., \"./testdata/server.key\"\n- html (template.Template): HTML template to be used for responses\n\nOutput: None (the function runs indefinitely as a web server)\n\nNote: The function includes a warning about not using embedded certificates in production environments.",
    "Canonical_solution": "import (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tlogger := log.New(os.Stderr, \"\", 0)\n\tlogger.Println(\"[WARNING] DON'T USE THE EMBED CERTS FROM THIS EXAMPLE IN PRODUCTION ENVIRONMENT, GENERATE YOUR OWN!\")\n\n\tr := gin.Default()\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/welcome\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func RunSecureServer(port, certFile, keyFile string, html template.Template) {\n    r := gin.Default()\n    r.SetHTMLTemplate(html)\n    r.GET(\"/welcome\", func(c *gin.Context) {\n        c.HTML(http.StatusOK, \"welcome.html\", nil)\n    })\n    log.Println(\"Starting HTTPS server on\", port)\n    log.Println(\"WARNING: Do not use embedded certificates in production environments\")\n    if err := r.RunTLS(port, certFile, keyFile); err != nil {\n        log.Fatalf(\"Failed to start server: %v\", err)\n    }\n}"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Go HTTP server using the Gin framework that handles file uploads, saves them to a specified directory, and returns the file URL.\n\nFunction Description: The main function initializes a Gin HTTP server with file upload capabilities. It sets up a static file server for serving uploaded files and implements a POST endpoint for uploading files. The server saves uploaded files with unique names and returns their access URLs.\n\nInput: \n- HTTP POST request with multipart/form-data containing a file field named \"file\"\n- File content in the request body\n\nOutput:\n- JSON response containing:\n  - Status code (0 for success, non-zero for errors)\n  - Message describing the operation result\n  - Data object containing the URL to access the uploaded file (on success)\n  OR\n  - Error message (on failure)\n\nThe server runs on port 8085 and serves static files from \"/root/file/\" directory. Uploaded files are saved with names formatted as \"timestamp-randomstring.extension\".",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"gim/pkg/util\"\n)\n\nconst baseUrl = \"http://111.229.238.28:8085/file/\"\n\ntype Response struct {\n\tCode    int         `json:\"code\"`\n\tMessage string      `json:\"message\"`\n\tData    interface{} `json:\"data\"`\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/file\", \"/root/file\")\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusOK, Response{Code: 1001, Message: err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tfilenames := strings.Split(file.Filename, \".\")\n\t\tname := strconv.FormatInt(time.Now().UnixNano(), 10) + \"-\" + util.RandString(30) + \".\" + filenames[len(filenames)-1]\n\t\tfilePath := \"/root/file/\" + name\n\t\terr = c.SaveUploadedFile(file, filePath)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusOK, Response{Code: 1001, Message: err.Error()})\n\t\t\treturn\n\t\t}\n\n\t\tc.JSON(http.StatusOK, Response{\n\t\t\tCode:    0,\n\t\t\tMessage: \"success\",\n\t\t\tData:    map[string]string{\"url\": baseUrl + name},\n\t\t})\n\t})\n\terr := router.Run(\":8085\")\n\tif err != nil {\n\t\tlogger.Logger.Error(\"Run error\", zap.Error(err))\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nconst uploadDir = \"/root/file/\"\n\nfunc init() {\n\trand.Seed(time.Now().UnixNano())\n}\n\nfunc generateUniqueFilename(ext string) string {\n\ttimestamp := time.Now().UnixNano()\n\trandomStr := fmt.Sprintf(\"%06d\", rand.Intn(1000000))\n\treturn fmt.Sprintf(\"%d%s%s\", timestamp, randomStr, ext)\n}\n\nfunc saveUploadedFile(c *gin.Context) {\n\tfile, err := c.FormFile(\"file\")\n\tif err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\"status\": 1,\n\t\t\t\"message\": \"Failed to get file\",\n\t\t\t\"data\":   nil,\n\t\t})\n\t\treturn\n\t}\n\n\tfilename := generateUniqueFilename(filepath.Ext(file.Filename))\n\tdst := filepath.Join(uploadDir, filename)\n\n\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\"status\": 1,\n\t\t\t\"message\": \"Failed to save file\",\n\t\t\t\"data\":   nil,\n\t\t})\n\t\treturn\n\t}\n\n\turl := fmt.Sprintf(\"http://localhost:8085/%s\", filename)\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"status\": 0,\n\t\t\"message\": \"File uploaded successfully\",\n\t\t\"data\":   gin.H{\"url\": url},\n\t})\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Serve static files from the upload directory\n\tr.Static(\"/root/file/\", uploadDir)\n\n\t// Handle file uploads\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tsaveUploadedFile(c)\n\t})\n\n\t// Start server\n\tr.Run(\":8085\")\n}"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Go function that initializes and runs a Gin HTTP server with automatic TLS support using Let's Encrypt, handling a simple ping-pong endpoint.\n\nFunction Description: The function initializes a default Gin engine with logger and recovery middleware, registers a GET endpoint \"/ping\" that responds with \"pong\", and starts the HTTPS server with automatic TLS certificate management for the specified domains.\n\nInput: \n- domains: []string - A slice of domain names for which TLS certificates should be obtained (e.g., [\"example1.com\", \"example2.com\"])\n\nOutput: \n- error - Returns an error if the server fails to start, otherwise runs indefinitely (the function will log.Fatal on error)\n\nNote: The function does not explicitly return but will log.Fatal if the server fails to start. The server runs indefinitely when successful.",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "import (\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/xenolf/lego/acme\"\n\t\"github.com/xenolf/lego/challenge/http01\"\n\t\"github.com/xenolf/lego/registration\"\n\t\"github.com/xenolf/lego/platform/config/env\"\n\t\"github.com/xenolf/lego/platform/monitor\"\n\t\"github.com/xenolf/lego/platform/timeout\"\n\t\"github.com/xenolf/lego/providers/dns/dns01\"\n\t\"github.com/xenolf/lego/providers/http01\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc initAndServe(domains []string) error {\n\t// Configure ACME client\n\tregConfig := registration.RegistererConfig{\n\t\tEmail: \"admin@example.com\",\n\t\tAgreeToTerms: true,\n\t}\n\treg, err := registration.NewRegistration(regConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Setup HTTP challenge\n\thttpChallenge := http01.NewDefaultProvider()\n\thttpChallenge.SetHTTPClient(&http.Client{\n\t\tTimeout: 30 * time.Second,\n\t})\n\n\t// Setup DNS challenge (example using Cloudflare, adjust accordingly)\n\tdnsChallenge := dns01.NewDefaultProvider()\n\tdnsChallenge.SetDNSProvider(\"cloudflare\", \"your_api_token\")\n\n\t// Create ACME client\n\tclient, err := acme.NewClient(\n\t\tacme.WithRegistration(reg),\n\t\tacme.WithDirectoryURL(\"https://acme-v02.api.letsencrypt.org/directory\"),\n\t\tacme.WithHTTPChallenge(httpChallenge),\n\t\tacme.WithDNSChallenge(dnsChallenge),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Generate and store TLS certificates\n\tcertificates, err := client.RequestCertificates(domains)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Set up Gin router\n\tr := gin.Default()\n\tr.Use(gin.Logger())\n\tr.Use(gin.Recovery())\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"pong\"})\n\t})\n\n\t// Start HTTPS server with obtained certificates\n\tserver := &http.Server{\n\t\tAddr:    \":443\",\n\t\tHandler: r,\n\t\tTLSConfig: &tls.Config{\n\t\t\tCertificates: certificates,\n\t\t},\n\t}\n\n\t// Start the server\n\tgo func() {\n\t\tif err := server.ListenAndServeTLS(\"\", \"\"); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\n\t// Monitor server health\n\tmonitor.Monitor(server, timeout.New(30*time.Second))\n\n\tselect {}\n}"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, and serves static files from a specified directory.\n\nFunction Description: The function initializes a Gin router with default middleware (Logger and Recovery), serves static files from a \"./public\" directory, and handles POST requests to \"/upload\" endpoint for file uploads with additional form fields (name and email). It processes the uploaded files and form data, saves the files to the server, and returns a success message.\n\nInput: None (The function takes no direct input parameters; it receives HTTP requests through the Gin router)\n\nOutput: None (The function does not return any value; it starts an HTTP server on port 8080 and handles incoming requests)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tsrc, _ := file.Open()\n\t\t\tdefer src.Close()\n\n\t\t\tdst, _ := os.Create(file.Filename)\n\t\t\tdefer dst.Close()\n\n\t\t\tio.Copy(dst, src)\n\t\t}\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email))\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupGinServer() {\n\tr := gin.Default()\n\tr.Static(\"/public\", \"./public\")\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tfile, _ := c.FormFile(\"file\")\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tdst := fmt.Sprintf(\"./public/uploads/%s\", file.Filename)\n\t\tc.SaveUploadedFile(file, dst)\n\t\tc.JSON(200, gin.H{\"message\": \"File uploaded successfully\", \"name\": name, \"email\": email})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a Go struct that handles HTTP requests to a metadata service with configurable endpoints, versioning, and resource paths. The struct should support request building, execution, and response handling with retry logic and mock capabilities for testing.\n\nStruct Description: The MetaData struct provides a client for interacting with a metadata service API. It supports building requests with versioning, resource types, and sub-resources, executing requests with retry logic, and decoding responses. It includes mock functionality for testing.\n\nFields:\n- mock: requestMock - A function type for mocking requests during testing\n- client: *http.Client - The HTTP client used to execute requests\n\nMethods:\n- NewMetaData(*http.Client) *MetaData - Constructor that initializes a new MetaData instance with an optional custom HTTP client\n- New() *MetaDataRequest - Creates a new request builder instance\n\nThe MetaDataRequest nested struct handles individual request configuration and execution:\n\nFields:\n- version: string - API version to use (defaults to \"latest\")\n- resourceType: string - Type of resource being accessed (defaults to \"meta-data\")\n- resource: string - Main resource path (required)\n- subResource: string - Optional sub-resource path\n- client: *http.Client - HTTP client for request execution\n- sendRequest: requestMock - Optional mock function for testing\n\nMethods:\n- Version(string) IMetaDataRequest - Sets the API version for the request\n- ResourceType(string) IMetaDataRequest - Sets the resource type for the request\n- Resource(string) IMetaDataRequest - Sets the main resource path\n- SubResource(string) IMetaDataRequest - Sets an optional sub-resource path\n- Url() (string, error) - Constructs the full request URL from components\n- Do(interface{}) error - Executes the request and decodes the response into the provided interface\n- send() (string, error) - Internal method that performs the actual HTTP request\n- Decode(string, interface{}) error - Handles response decoding (implementation not shown in reference)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\t\"encoding/json\"\n\t\"reflect\"\n\t\"os\"\n)\n\ntype MetaData struct {\n\tmock requestMock\n\tclient *http.Client\n}\n\nfunc NewMetaData(client *http.Client) *MetaData {\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\treturn &MetaData{\n\t\tclient: client,\n\t}\n}\n\nfunc (m *MetaData) New() *MetaDataRequest {\n\treturn &MetaDataRequest{\n\t\tclient:      m.client,\n\t\tsendRequest: m.mock,\n\t}\n}\n\ntype requestMock func(resource string) (string, error)\n\ntype MetaDataRequest struct {\n\tversion      string\n\tresourceType string\n\tresource     string\n\tsubResource  string\n\tclient       *http.Client\n\tsendRequest requestMock\n}\n\nfunc (vpc *MetaDataRequest) Version(version string) IMetaDataRequest {\n\tvpc.version = version\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) ResourceType(rtype string) IMetaDataRequest {\n\tvpc.resourceType = rtype\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) Resource(resource string) IMetaDataRequest {\n\tvpc.resource = resource\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) SubResource(sub string) IMetaDataRequest {\n\tvpc.subResource = sub\n\treturn vpc\n}\n\nfunc (vpc *MetaDataRequest) Url() (string, error) {\n\tif vpc.version == \"\" {\n\t\tvpc.version = \"latest\"\n\t}\n\tif vpc.resourceType == \"\" {\n\t\tvpc.resourceType = \"meta-data\"\n\t}\n\tif vpc.resource == \"\" {\n\t\treturn \"\", errors.New(\"the resource you want to visit must not be nil!\")\n\t}\n\tendpoint := os.Getenv(\"METADATA_ENDPOINT\")\n\tif endpoint == \"\" {\n\t\tendpoint = \"http://100.100.100.200\"\n\t}\n\tr := fmt.Sprintf(\"%s/%s/%s/%s\", endpoint, vpc.version, vpc.resourceType, vpc.resource)\n\tif vpc.subResource == \"\" {\n\t\treturn r, nil\n\t}\n\treturn fmt.Sprintf(\"%s/%s\", r, vpc.subResource), nil\n}\n\nfunc (vpc *MetaDataRequest) Do(api interface{}) (err error) {\n\tvar res = \"\"\n\tfor r := retry.Start(); r.Next(); {\n\t\tif vpc.sendRequest != nil {\n\t\t\tres, err = vpc.sendRequest(vpc.resource)\n\t\t} else {\n\t\t\tres, err = vpc.send()\n\t\t}\n\t\tif !shouldRetry(err) {\n\t\t\tbreak\n\t\t}\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn vpc.Decode(res, api)\n}\n\nfunc (vpc *MetaDataRequest) send() (string, error) {\n\turl, err := vpc.Url()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\trequ, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tresp, err := vpc.client.Do(requ)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", fmt.Errorf(\"Aliyun Metadata API Error: Status Code: %d\", resp.StatusCode)\n\t}\n\tdefer resp.Body.Close()\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "type requestMock func(*http.Request) (*http.Response, error)\n\ntype IMetaDataRequest interface {\n\tVersion(string) IMetaDataRequest\n\tResourceType(string) IMetaDataRequest\n\tResource(string) IMetaDataRequest\n\tSubResource(string) IMetaDataRequest\n\tUrl() (string, error)\n\tDo(interface{}) error\n}\n\ntype MetaDataRequest struct {\n\tversion      string\n\tresourceType string\n\tresource     string\n\tsubResource  string\n\tclient       *http.Client\n\tsendRequest  requestMock\n}\n\nfunc (r *MetaDataRequest) Version(v string) IMetaDataRequest {\n\tr.version = v\n\treturn r\n}\n\nfunc (r *MetaDataRequest) ResourceType(t string) IMetaDataRequest {\n\tr.resourceType = t\n\treturn r\n}\n\nfunc (r *MetaDataRequest) Resource(res string) IMetaDataRequest {\n\tr.resource = res\n\treturn r\n}\n\nfunc (r *MetaDataRequest) SubResource(sr string) IMetaDataRequest {\n\tr.subResource = sr\n\treturn r\n}\n\nfunc (r *MetaDataRequest) Url() (string, error) {\n\turl := \"http://\"\n\tif r.version != \"\" {\n\t\turl += r.version + \"/\"\n\t}\n\turl += r.resourceType + \"/\" + r.resource\n\tif r.subResource != \"\" {\n\t\turl += \"/\" + r.subResource\n\t}\n\treturn url, nil\n}\n\nfunc (r *MetaDataRequest) Do(result interface{}) error {\n\turl, err := r.Url()\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif r.sendRequest != nil {\n\t\tresp, err := r.sendRequest(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tif err := decode(resp.Body, result); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\tclient := r.client\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif err := decode(resp.Body, result); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *MetaDataRequest) send() (string, error) {\n\turl, err := r.Url()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tclient := r.client\n\tif client == nil {\n\t\tclient = &http.Client{}\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}\n\nfunc decode(body io.Reader, result interface{}) error {\n\tdata, err := io.ReadAll(body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tswitch v := result.(type) {\n\tcase *string:\n\t\t*v = string(data)\n\tcase *[]byte:\n\t\t*v = data\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported type for decoding response\")\n\t}\n\treturn nil\n}\n\ntype MetaData struct {\n\tmock   requestMock\n\tclient *http.Client\n}\n\nfunc NewMetaData(client *http.Client) *MetaData {\n\treturn &MetaData{\n\t\tclient: client,\n\t}\n}\n\nfunc New() *MetaDataRequest {\n\treturn &MetaDataRequest{}\n}"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a Go function that sets up a Gin HTTP server to handle file uploads along with form data, serving static files from a public directory.\n\nFunction Description: The function initializes a Gin router with default middleware, configures a static file server, and sets up a POST endpoint for handling file uploads with additional form fields. It validates the upload, saves the file, and returns a success message with the form data.\n\nInput: None (The function takes no direct input parameters but processes HTTP requests with the following expected form data:\n- \"name\": string - Name field from the form\n- \"email\": string - Email field from the form\n- \"file\": file - File to be uploaded)\n\nOutput: None (The function doesn't return any value but sends HTTP responses:\n- Success: HTTP 200 with upload confirmation message\n- Error: HTTP 400 with error message for invalid requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.MaxMultipartMemory = 8 << 20\n\trouter.Static(\"/\", \"./public\")\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tfilename := filepath.Base(file.Filename)\n\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\n\t\tc.String(http.StatusOK, \"File %s uploaded successfully with fields name=%s and email=%s.\", file.Filename, name, email)\n\t})\n\trouter.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func SetupGinServer() *gin.Engine {\n\tr := gin.Default()\n\tr.Static(\"/public\", \"./public\")\n\tr.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request\"})\n\t\t\treturn\n\t\t}\n\t\tdst := fmt.Sprintf(\"./public/uploads/%s\", file.Filename)\n\t\tif err := c.SaveUploadedFile(file, dst); err != nil {\n\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\":  \"File uploaded successfully\",\n\t\t\t\"name\":    name,\n\t\t\t\"email\":   email,\n\t\t\t\"filename\": file.Filename,\n\t\t})\n\t})\n\treturn r\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Go function that handles file uploads along with form data using the Gin web framework. The function should process multipart form data, save uploaded files, and return a response indicating success or failure.\n\nFunction Description: The function is a Gin route handler that processes POST requests to the \"/upload\" endpoint. It handles multipart/form-data submissions containing both form fields (name and email) and file uploads. The function saves all uploaded files to the server and returns a success message with the count of uploaded files and the form field values, or an error message if the operation fails.\n\nInput: \n- Gin context object (c *gin.Context) containing:\n  - Form fields: \"name\" (string), \"email\" (string)\n  - File uploads: \"files\" (multipart.FileHeader array)\n\nOutput:\n- On success: HTTP 200 status with success message (string)\n- On failure: HTTP 400 status with error message (string)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\tname := c.PostForm(\"name\")\n\t\temail := c.PostForm(\"email\")\n\n\t\tform, err := c.MultipartForm()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusBadRequest, \"get form err: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfiles := form.File[\"files\"]\n\n\t\tfor _, file := range files {\n\t\t\tfilename := filepath.Base(file.Filename)\n\t\t\tif err := c.SaveUploadedFile(file, filename); err != nil {\n\t\t\t\tc.String(http.StatusBadRequest, \"upload file err: %s\", err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tc.String(http.StatusOK, \"Uploaded successfully %d files with fields name=%s and email=%s.\", len(files), name, email)\n\t})\n\trouter.Run(\":8888\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func uploadHandler(c *gin.Context) {\n\tc.Header(\"Content-Type\", \"application/json\")\n\t\n\tif err := c.Request.ParseMultipartForm(10 << 20); err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to parse form data\"})\n\t\treturn\n\t}\n\t\n\tname := c.PostForm(\"name\")\n\temail := c.PostForm(\"email\")\n\tfiles := c.MustGet(\"files\").([]multipart.FileHeader)\n\t\n\tif name == \"\" || email == \"\" {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Missing required form fields\"})\n\t\treturn\n\t}\n\t\n\tvar uploadedCount int\n\tfor _, file := range files {\n\t\tfilePath := \"./uploads/\" + file.Filename\n\t\tdst, _ := os.Create(filePath)\n\t\tif _, err := io.Copy(dst, file.Open()); err != nil {\n\t\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to save file\"})\n\t\t\treturn\n\t\t}\n\t\tuploadedCount++\n\t}\n\t\n\tc.JSON(200, gin.H{\n\t\t\"message\":  \"Upload successful\",\n\t\t\"name\":     name,\n\t\t\"email\":    email,\n\t\t\"count\":    uploadedCount,\n\t})\n}"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves a static favicon file and responds to a GET request with a text message.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), serves a static favicon file, registers a GET route handler, and starts the server on port 8080.\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP requests)\n\nOutput: None (The function doesn't return anything but sends responses to HTTP requests and runs the server indefinitely)\n\nNote: The instruction is for function-level code as the reference code shows a main function implementation rather than a struct/class implementation.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tapp := gin.Default()\n\n\tapp.StaticFile(\"/favicon.ico\", \"./favicon.ico\")\n\n\tapp.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"Hello favicon.\")\n\t})\n\n\tapp.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\tr.Static(\"/favicon.ico\", \"./static\")\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.String(200, \"Hello from Gin!\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Go function that initializes and runs a secure HTTPS server using the Gin web framework, which responds to GET requests at the root path with a JSON message.\n\nFunction Description: The function initializes a Gin web server with default middleware (Logger and Recovery), sets up a GET route handler for the root path (\"/\") that returns a JSON response, and starts the HTTPS server using the provided TLS certificate and key files.\n\nInput: \n- port (string): The port number on which the server should listen, prefixed with \":\" (e.g., \":5002\")\n- certFile (string): Path to the TLS certificate file (e.g., \"manager.crt\")\n- keyFile (string): Path to the TLS private key file (e.g., \"manager.key\")\n\nOutput: None (The function runs an infinite loop to serve HTTP requests)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\ts := gin.Default()\n\ts.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"msg\": \"passed\"})\n\t})\n\ts.RunTLS(\":5002\", \"manager.crt\", \"manager.key\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func RunSecureServer(port, certFile, keyFile string) {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from secure server!\"})\n\t})\n\terr := r.RunTLS(port, certFile, keyFile)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that responds to GET requests with a basic message.\n\nFunction Description: The main function initializes a Gin router with default middleware (Logger and Recovery), sets up a GET route handler at the \"/ping\" endpoint that responds with \"pong\", and starts the server on the default port (8080).\n\nInput: None (The function takes no direct input parameters, but handles incoming HTTP GET requests to the \"/ping\" endpoint)\n\nOutput: None (The function doesn't return any value, but sends \"pong\" as a response to GET requests at \"/ping\" and runs the HTTP server continuously until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(http.StatusOK, \"pong\")\n\t})\n\n\tlog.Fatal(r.Run())\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Go HTTP client struct that can handle both HTTP and HTTPS requests with custom configurations, including authentication and request headers.\n\nStruct Description: The Client struct represents an HTTP client with configurable protocol, address, authentication, and transport settings. It provides methods to execute HTTP requests and handle responses.\n\nFields:\nProtocol: string - The protocol to use (http or https)\nAddr: string - The server address to connect to\nUser: string - The username for basic authentication\nPassword: string - The password for basic authentication\nc: *http.Client - The underlying HTTP client instance\n\nMethods:\nNewClient: (conf *ClientConfig) -> *Client - Creates a new Client instance with the given configuration, setting up either HTTP or HTTPS transport\nDoRequest: (method string, url string, body *bytes.Buffer) -> (*http.Response, error) - Executes an HTTP request with the given method, URL and body, adding basic auth if configured\nDo: (method string, url string, body map[string]interface{}) -> (*Response, error) - Executes a request with JSON body, parses the response and returns a structured Response object",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/juju/errors\"\n)\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\n\tc *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tc := new(Client)\n\n\tc.Addr = conf.Addr\n\tc.User = conf.User\n\tc.Password = conf.Password\n\n\tif conf.HTTPS {\n\t\tc.Protocol = \"https\"\n\t\ttr := &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t\tc.c = &http.Client{Transport: tr}\n\t} else {\n\t\tc.Protocol = \"http\"\n\t\tc.c = &http.Client{}\n\t}\n\n\treturn c\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\tif len(c.User) > 0 && len(c.Password) > 0 {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tresp, err := c.c.Do(req)\n\n\treturn resp, err\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tbodyData, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tbuf := bytes.NewBuffer(bodyData)\n\tif body == nil {\n\t\tbuf = bytes.NewBuffer(nil)\n\t}\n\n\tresp, err := c.DoRequest(method, url, buf)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tdefer resp.Body.Close()\n\n\tret := new(Response)\n\tret.Code = resp.StatusCode\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\n\tif len(data) > 0 {\n\t\terr = json.Unmarshal(data, &ret.ResponseItem)\n\t}\n\n\treturn ret, errors.Trace(err)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\ntype ClientConfig struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n}\n\ntype Response struct {\n\tStatusCode int\n\tBody       map[string]interface{}\n}\n\ntype Client struct {\n\tProtocol string\n\tAddr     string\n\tUser     string\n\tPassword string\n\tc        *http.Client\n}\n\nfunc NewClient(conf *ClientConfig) *Client {\n\tvar transport http.RoundTripper\n\tif conf.Protocol == \"https\" {\n\t\ttransport = &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}\n\t} else {\n\t\ttransport = &http.Transport{}\n\t}\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t}\n\treturn &Client{\n\t\tProtocol: conf.Protocol,\n\t\tAddr:     conf.Addr,\n\t\tUser:     conf.User,\n\t\tPassword: conf.Password,\n\t\tc:        client,\n\t}\n}\n\nfunc (c *Client) DoRequest(method string, url string, body *bytes.Buffer) (*http.Response, error) {\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif c.User != \"\" && c.Password != \"\" {\n\t\treq.SetBasicAuth(c.User, c.Password)\n\t}\n\tresp, err := c.c.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}\n\nfunc (c *Client) Do(method string, url string, body map[string]interface{}) (*Response, error) {\n\tjsonBody, err := json.Marshal(body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresp, err := c.DoRequest(method, url, bytes.NewBuffer(jsonBody))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tvar responseBody map[string]interface{}\n\tif err := json.NewDecoder(resp.Body).Decode(&responseBody); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Response{\n\t\tStatusCode: resp.StatusCode,\n\t\tBody:       responseBody,\n\t}, nil\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a Go function that implements a distributed transaction coordinator using HTTP communication between microservices. The function should handle transaction initiation, propagate transaction context, and coordinate between multiple services.\n\nFunction Description: The function serves as an HTTP handler for initiating a distributed transaction. It receives a transaction ID in the header, prepares transaction data for two different services (Account and Inventory), makes HTTP calls to these services, and handles their responses. The function ensures transaction context (xid) is propagated to all participating services.\n\nInput: \n- Gin context object (gin.Context) containing:\n  - HTTP request headers (including \"x_seata_xid\" for transaction ID)\n  - Request body (not used in this example, but could contain transaction details)\n\nOutput:\n- HTTP responses:\n  - 400 Bad Request with error details if any step fails\n  - Original service response if any service fails (non-200 status)\n  - Success response from the last service if all succeed (200 status)\n- Side effects: Makes HTTP calls to two different services with transaction data",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\n\tr.POST(\"/service-a/begin\", func(context *gin.Context) {\n\t\txid := context.Request.Header.Get(\"x_seata_xid\")\n\t\taccount := &Account{\n\t\t\tID:     1000024549,\n\t\t\tAmount: 200,\n\t\t}\n\t\tinv := &Inventory{\n\t\t\tID:  1000000005,\n\t\t\tQty: 2,\n\t\t}\n\n\t\taccountReq, err := json.Marshal(account)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tinvReq, err := json.Marshal(inv)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq1, err := http.NewRequest(\"POST\", \"http://localhost:2047/service-b/try\", bytes.NewBuffer(accountReq))\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq1.Header.Set(\"x_seata_xid\", xid)\n\n\t\treq2, err := http.NewRequest(\"POST\", \"http://localhost:2048/service-c/try\", bytes.NewBuffer(invReq))\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\treq2.Header.Set(\"x_seata_xid\", xid)\n\n\t\tclient := &http.Client{}\n\t\tresult1, err := client.Do(req1)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif result1.StatusCode != http.StatusOK {\n\t\t\tresult1.Write(context.Writer)\n\t\t\treturn\n\t\t}\n\n\t\tresult2, err := client.Do(req2)\n\t\tif err != nil {\n\t\t\tcontext.JSON(400, gin.H{\"success\": false, \"message\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tif result2.StatusCode == http.StatusOK {\n\t\t\tresult2.Write(context.Writer)\n\t\t\treturn\n\t\t}\n\t})\n\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func transactionInitiator(c *gin.Context) {\n\txid := c.GetHeader(\"x_seata_xid\")\n\tif xid == \"\" {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Transaction ID is required\"})\n\t\treturn\n\t}\n\n\t// Prepare transaction data for Account and Inventory services\n\taccountData := map[string]interface{}{\n\t\t\"action\": \"debit\",\n\t\t\"amount\": 100,\n\t\t\"xid\":   xid,\n\t}\n\tinventoryData := map[string]interface{}{\n\t\t\"action\": \"reserve\",\n\t\t\"count\":  5,\n\t\t\"xid\":   xid,\n\t}\n\n\t// Make HTTP call to Account service\n\taccountResp, err := http.Post(\"http://account-service/api/transaction\", \"application/json\", json.Marshal(accountData))\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to call Account service\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tdefer accountResp.Body.Close()\n\tif accountResp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(accountResp.Body)\n\t\tc.AbortWithStatusJSON(accountResp.StatusCode, gin.H{\"error\": \"Account service failed\", \"response\": string(body)})\n\t\treturn\n\t}\n\n\t// Make HTTP call to Inventory service\n\tinventoryResp, err := http.Post(\"http://inventory-service/api/transaction\", \"application/json\", json.Marshal(inventoryData))\n\tif err != nil {\n\t\tc.AbortWithStatusJSON(400, gin.H{\"error\": \"Failed to call Inventory service\", \"details\": err.Error()})\n\t\treturn\n\t}\n\tdefer inventoryResp.Body.Close()\n\tif inventoryResp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(inventoryResp.Body)\n\t\tc.AbortWithStatusJSON(inventoryResp.StatusCode, gin.H{\"error\": \"Inventory service failed\", \"response\": string(body)})\n\t\treturn\n\t}\n\n\t// All services succeeded\n\tc.JSON(http.StatusOK, gin.H{\"message\": \"Transaction committed\", \"xid\": xid})\n}"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a simple HTTP server using the Gin framework in Go that serves static files from a local directory and handles a basic GET request.\n\nFunction Description: The main function initializes a Gin HTTP server with default middleware (Logger and Recovery), sets up static file serving from a specified directory, registers a GET route handler, and starts the server on a specified port.\n\nInput: None (The function takes no direct input parameters, but configuration is hardcoded: static files are served from \"/tmp\" and the server listens on port 8080)\n\nOutput: None (The function doesn't return anything but starts an HTTP server that continues running until interrupted)",
    "Canonical_solution": "import (\n\t\"github.com/gin-gonic/contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(static.Serve(\"/\", static.LocalFile(\"/tmp\", false)))\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"test\")\n\t})\n\tr.Run(\":8080\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 105,
    "wrong_result": "func main() {\n\tr := gin.Default()\n\tr.Static(\"/\", \"/tmp\")\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"message\": \"Hello from Gin!\"})\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Implement a function that demonstrates asynchronous message production to a Kafka topic using the Sarama library in Go. The function should continuously generate and send messages at regular intervals while handling both successful deliveries and errors.\n\nFunction Description: The SaramaProducer function initializes and manages an asynchronous Kafka producer. It configures the producer with specific settings, handles message delivery success/failure notifications in a separate goroutine, and continuously generates and sends messages to a specified Kafka topic. The function runs indefinitely until terminated.\n\nInput: None (The function takes no input parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function doesn't return any value but prints success/error messages to stdout)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc SaramaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tconfig.Producer.Retry.Max = 1000\n\tconfig.Version = sarama.V2_2_0_0\n\n\tproducer, e := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif e != nil {\n\t\tfmt.Println(e)\n\t\treturn\n\t}\n\tdefer producer.AsyncClose()\n\n\tgo func(p sarama.AsyncProducer) {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase suc := <-p.Successes():\n\t\t\t\tfmt.Println(\"offset: \", suc.Offset, \"timestamp: \", suc.Timestamp.String(), \"partitions: \", suc.Partition)\n\t\t\tcase fail := <-p.Errors():\n\t\t\t\tfmt.Println(\"err: \", fail.Err)\n\t\t\t}\n\t\t}\n\t}(producer)\n\n\tvar value string\n\tfor i := 0; ; i++ {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\ttime11 := time.Now()\n\t\tvalue = \"this is a message 0606 \" + time11.Format(\"15:04:05\")\n\t\tmsg := &sarama.ProducerMessage{\n\t\t\tTopic: \"0606_test\",\n\t\t}\n\t\tmsg.Value = sarama.ByteEncoder(value)\n\t\tfmt.Println(value)\n\t\tproducer.Input() <- msg\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/Shopify/sarama\"\n)\n\nfunc SaramaProducer() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Retry.Max = 5\n\tconfig.Producer.Return.Successes = true\n\n\tbrokers := []string{\"localhost:9092\"}\n\tproducer, _ := sarama.NewAsyncProducer(brokers, config)\n\tdefer producer.Close()\n\n\tsuccessChan := producer.Successes()\n\terrorChan := producer.Errors()\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\n\tgo func() {\n\t\tfor msg := range successChan {\n\t\t\tfmt.Printf(\"Message sent successfully: %s\\n\", msg.Value)\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tfor err := range errorChan {\n\t\t\tfmt.Printf(\"Error sending message: %v\\n\", err)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(1 * time.Second)\n\tdefer ticker.Stop()\n\n\tfor range ticker.C {\n\t\tmsg := &sarama.ProducerMessage{\n\t\t\tTopic: \"test-topic\",\n\t\t\tValue: sarama.StringEncoder(fmt.Sprintf(\"Message %d at %s\", rand.Intn(1000), time.Now().Format(time.RFC3339))),\n\t\t}\n\t\tproducer.Send(msg)\n\t}\n\n\twg.Wait()\n}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a function that implements an asynchronous Kafka producer in Go, which continuously sends messages to a specified Kafka topic at regular intervals. The function should handle both success and error cases from the producer and properly clean up resources when done.\n\nFunction Description: The function `runAsyncKafkaProducer` initializes and manages an asynchronous Kafka producer that sends alternating message types (\"login\" and \"msg\" events) to a Kafka topic every 10 seconds. It configures the producer with appropriate settings, handles success/error notifications in a separate goroutine, and ensures proper resource cleanup.\n\nInput: None (The function takes no parameters as broker addresses and topic are hardcoded)\n\nOutput: None (The function runs indefinitely until terminated, printing success/error messages to stdout)\n\nReference Code Structure:\n\n```go\nfunc runAsyncKafkaProducer() {\n    // 1. Configure Kafka producer\n    config := sarama.NewConfig()\n    config.Producer.RequiredAcks = sarama.WaitForAll\n    config.Producer.Partitioner = sarama.NewRandomPartitioner\n    config.Producer.Return.Successes = true\n    config.Producer.Return.Errors = true\n    \n    // 2. Initialize async producer\n    producer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n    if err != nil {\n        panic(err)\n    }\n    defer producer.AsyncClose()\n    \n    // 3. Start goroutine to handle producer events\n    go func() {\n        for {\n            select {\n            case success := <-producer.Successes():\n                fmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n                    success.Topic, success.Partition, success.Offset)\n            case err := <-producer.Errors():\n                fmt.Printf(\"Failed to send message: %v\\n\", err)\n            }\n        }\n    }()\n    \n    // 4. Main message sending loop\n    var messageType int = 1\n    for {\n        msg := createMessage(messageType)\n        producer.Input() <- msg\n        \n        messageType = toggleMessageType(messageType)\n        time.Sleep(10 * time.Second)\n    }\n}\n\n// Helper functions would be defined here...\n```",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"time\"\n)\n\nfunc main() {\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll\n\tconfig.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconfig.Producer.Return.Successes = true\n\tconfig.Producer.Return.Errors = true\n\tAsyncProducer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer AsyncProducer.AsyncClose()\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase succ := <-AsyncProducer.Successes():\n\t\t\t\tfmt.Println(\"AsyncProducer.Successes()\", succ.Topic, succ.Offset, succ.Timestamp, succ.Partition)\n\t\t\tcase err := <-AsyncProducer.Errors():\n\t\t\t\tfmt.Println(\"AsyncProducer.Errors()\", err.Error())\n\t\t\t}\n\t\t}\n\t}()\n\tvar i = 1\n\tfor {\n\t\tMessage := &sarama.ProducerMessage{\n\t\t\tTopic:     \"msg_event\",\n\t\t\tTimestamp: time.Now(),\n\t\t}\n\t\tvar data []byte\n\t\tdate := time.Now().UnixNano() / 1e6\n\t\tif i == 1 {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"11\",\n\t\t\t\t\"uid\":         1,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"login\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 2\n\t\t} else {\n\t\t\tdata, _ = json.Marshal(map[string]interface{}{\n\t\t\t\t\"biz_tag\":     \"22\",\n\t\t\t\t\"uid\":         222222,\n\t\t\t\t\"create_time\": date,\n\t\t\t\t\"event\":       \"msg\",\n\t\t\t\t\"tag\":         \"1\",\n\t\t\t})\n\t\t\ti = 1\n\t\t}\n\n\t\tMessage.Value = sarama.ByteEncoder(data)\n\t\tAsyncProducer.Input() <- Message\n\t\ttime.Sleep(time.Second * 10)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 125,
    "wrong_result": "func runAsyncKafkaProducer() {\n    config := sarama.NewConfig()\n    config.Producer.RequiredAcks = sarama.WaitForAll\n    config.Producer.Partitioner = sarama.NewRandomPartitioner\n    config.Producer.Return.Successes = true\n    config.Producer.Return.Errors = true\n    \n    producer, err := sarama.NewAsyncProducer([]string{\"172.12.17.161:9092\"}, config)\n    if err != nil {\n        panic(err)\n    }\n    defer producer.AsyncClose()\n    \n    go func() {\n        for {\n            select {\n            case success := <-producer.Successes():\n                fmt.Printf(\"Message sent: topic=%s partition=%d offset=%d\\n\",\n                    success.Topic, success.Partition, success.Offset)\n            case err := <-producer.Errors():\n                fmt.Printf(\"Failed to send message: %v\\n\", err)\n            }\n        }\n    }()\n    \n    var messageType int = 1\n    for {\n        msg := createMessage(messageType)\n        producer.Input() <- msg\n        \n        messageType = toggleMessageType(messageType)\n        time.Sleep(10 * time.Second)\n    }\n}\n\nfunc createMessage(typeID int) *sarama.ProducerMessage {\n    var payload string\n    switch typeID {\n    case 1:\n        payload = \"login\"\n    case 2:\n        payload = \"msg\"\n    }\n    return &sarama.ProducerMessage{\n        Topic: \"test-topic\",\n        Value: sarama.StringEncoder(payload),\n    }\n}\n\nfunc toggleMessageType(current int) int {\n    if current == 1 {\n        return 2\n    }\n    return 1\n}"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a function that demonstrates how to use the Kafka synchronous producer in Go to send a message to a Kafka topic.\n\nFunction Description: The function initializes and configures a synchronous Kafka producer, sends a single message to a specified Kafka topic, and handles any errors that may occur during the process. The producer is properly closed after use.\n\nInput: None (The function is self-contained with hardcoded values for demonstration purposes)\n\nOutput: The function returns the result of the message send operation (partition and offset if successful, or error if failed) and prints it to the console. The function itself doesn't return any value but may terminate early if producer initialization fails.\n\nTask Description: Create a function that demonstrates how to use the Kafka synchronous producer in Go to send a message to a Kafka topic.\n\nFunction Description: The function initializes and configures a synchronous Kafka producer, sends a single message to a specified Kafka topic, and handles any errors that may occur during the process. The producer is properly closed after use.\n\nInput: None (The function is self-contained with hardcoded values for demonstration purposes)\n\nOutput: The function returns the result of the message send operation (partition and offset if successful, or error if failed) and prints it to the console. The function itself doesn't return any value but may terminate early if producer initialization fails.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"github.com/Shopify/sarama\"\n\t\"testing\"\n)\n\nfunc TestKafkaSyncProducer(t *testing.T) {\n\tconf := sarama.NewConfig()\n\tconf.Producer.RequiredAcks = sarama.WaitForAll\n\tconf.Producer.Partitioner = sarama.NewRandomPartitioner\n\tconf.Producer.Return.Successes = true\n\tconf.Producer.Return.Errors = true\n\tconf.Producer.Retry.Max = 1000\n\tconf.Version = sarama.V2_8_0_0\n\tproducer, err := sarama.NewSyncProducer([]string{\"172.12.12.165:9092\"}, conf)\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tdefer producer.Close()\n\tfmt.Println(producer.SendMessage(&sarama.ProducerMessage{\n\t\tTopic: \"gs_pay_transaction_topic\",\n\t\tValue: sarama.ByteEncoder(\"123123\"),\n\t}))\n\tselect {}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 123,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/segmentio/kafka-go\"\n)\n\nfunc sendMessageToKafka() {\n\tbrokers := []string{\"localhost:9092\"}\n\ttopic := \"test-topic\"\n\tmessage := \"Hello, Kafka!\"\n\n\tconfig := kafka.NewConfig()\n\tconfig.Brokers = brokers\n\tconfig.Topic = topic\n\n\tproducer := kafka.NewWriter(config)\n\tdefer producer.Close()\n\n\terr := producer.WriteMessages(kafka.Message{\n\t\tValue: []byte(message),\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to write message: %v\", err)\n\t}\n\n\tmsg, err := producer.ReadMessage(0)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to read message: %v\", err)\n\t}\n\n\tfmt.Printf(\"Message sent to partition %d with offset %d\\n\", msg.Partition, msg.Offset)\n}"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Implement a TCP/UDP port scanner with proxy support and configurable source IP addresses.\n\nStruct Description: The Scanner struct provides functionality to check if a specific port is open on a given host, supporting both TCP and UDP protocols. It includes timeout configuration, proxy support, and the ability to specify source IP addresses for the connection.\n\nFields:\n- timeout: time.Duration - Maximum duration to wait for a connection attempt\n- proxyDialer: proxy.Dialer - Optional proxy dialer for making connections through a proxy\n- ListenHandler: *ListenHandler - Configuration for source IP addresses (both IPv4 and IPv6)\n\nMethods:\n- ConnectPort: (host string, p *port.Port, timeout time.Duration) -> (bool, error) - Attempts to connect to the specified port on the given host. Returns true if the port is open/reachable, along with any error that occurred during the connection attempt. The port parameter includes the protocol (TCP/UDP) and port number. The timeout parameter specifies the maximum duration for the connection attempt.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"time\"\n\t\"golang.org/x/net/proxy\"\n)\n\ntype Scanner struct {\n\ttimeout     time.Duration\n\tproxyDialer proxy.Dialer\n\tListenHandler *ListenHandler\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *port.Port, timeout time.Duration) (bool, error) {\n\thostport := net.JoinHostPort(host, fmt.Sprint(p.Port))\n\tvar (\n\t\terr  error\n\t\tconn net.Conn\n\t)\n\tif s.proxyDialer != nil {\n\t\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\t\tdefer cancel()\n\t\tproxyDialer, ok := s.proxyDialer.(proxy.ContextDialer)\n\t\tif !ok {\n\t\t\treturn false, errors.New(\"invalid proxy dialer\")\n\t\t}\n\t\tconn, err = proxyDialer.DialContext(ctx, p.Protocol.String(), hostport)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t} else {\n\t\tnetDialer := net.Dialer{\n\t\t\tTimeout: timeout,\n\t\t}\n\t\tif s.ListenHandler.SourceIp4 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIp4}\n\t\t} else if s.ListenHandler.SourceIP6 != nil {\n\t\t\tnetDialer.LocalAddr = &net.TCPAddr{IP: s.ListenHandler.SourceIP6}\n\t\t}\n\t\tconn, err = netDialer.Dial(p.Protocol.String(), hostport)\n\t}\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer conn.Close()\n\n\tswitch p.Protocol {\n\tcase protocol.UDP:\n\t\tif err := conn.SetWriteDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif _, err := conn.Write(nil); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif err := conn.SetReadDeadline(time.Now().Add(timeout)); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tn, err := io.Copy(io.Discard, conn)\n\t\tif err != nil && !os.IsTimeout(err) {\n\t\t\treturn false, err\n\t\t}\n\t\treturn n > 0, nil\n\t}\n\n\treturn true, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype port struct {\n\tProtocol string\n\tPort     int\n}\n\ntype ListenHandler struct {\n\tIPv4ListenIP string\n\tIPv6ListenIP string\n}\n\ntype Scanner struct {\n\ttimeout       time.Duration\n\tproxyDialer   *http.Client\n\tListenHandler *ListenHandler\n}\n\nfunc NewScanner(timeout time.Duration, proxyDialer *http.Client, listenHandler *ListenHandler) *Scanner {\n\treturn &Scanner{\n\t\ttimeout:       timeout,\n\t\tproxyDialer:   proxyDialer,\n\t\tListenHandler: listenHandler,\n\t}\n}\n\nfunc (s *Scanner) ConnectPort(host string, p *port, timeout time.Duration) (bool, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n\tdefer cancel()\n\n\tvar dialer net.Dialer\n\tif s.ListenHandler != nil {\n\t\tdialer.LocalAddr = &net.TCPAddr{\n\t\t\tIP:   net.ParseIP(s.ListenHandler.IPv4ListenIP),\n\t\t\tPort: 0,\n\t\t}\n\t}\n\n\tswitch p.Protocol {\n\tcase \"tcp\":\n\t\tconn, err := dialer.DialContext(ctx, \"tcp\", fmt.Sprintf(\"%s:%d\", host, p.Port))\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tconn.Close()\n\t\treturn true, nil\n\tcase \"udp\":\n\t\taddr, err := net.ResolveUDPAddr(\"udp\", fmt.Sprintf(\"%s:%d\", host, p.Port))\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\t\tif err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tconn.Close()\n\t\treturn true, nil\n\tdefault:\n\t\treturn false, fmt.Errorf(\"unsupported protocol: %s\", p.Protocol)\n\t}\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a function that uploads a video file to a specified URL using a multipart/form-data POST request with custom headers.\n\nFunction Description: The function uploads a video file to a given URL with specified form fields and authentication headers. It handles file operations, creates a multipart form payload, sets appropriate headers (including content type and access token), executes the HTTP request, and returns the response body.\n\nInput:\n- url (string): The target URL for the video upload\n- method (string): HTTP method (typically \"POST\")\n- advertiserID (string): The advertiser ID for the form field\n- uploadType (string): The upload type for the form field\n- videoSignature (string): The video signature for the form field\n- filePath (string): Path to the video file to upload\n- accessToken (string): Access token for authentication header\n\nOutput:\n- ([]byte, error): Returns the response body as bytes and any error that occurred during execution\n\nNote: The function should follow the same steps as the reference code, including creating a custom http.Client, setting headers, handling multipart form data, and properly managing resources (file handles, response bodies).",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/video/ad/\"\n\tmethod := \"POST\"\n\n\tpayload := &bytes.Buffer{}\n\twriter := multipart.NewWriter(payload)\n\t_ = writer.WriteField(\"advertiser_id\", \"1760312309087432\")\n\t_ = writer.WriteField(\"upload_type\", \"UPLOAD_BY_FILE\")\n\t_ = writer.WriteField(\"video_signature\", \"6b12a8bbbe8e69a2ef5929028b0b50c3\")\n\n\tfile, errFile4 := os.Open(\"/Users/betta/Desktop/\u5e38\u7528/6b12a8bbbe8e69a2ef5929028b0b50c3.mp4\")\n\tdefer file.Close()\n\n\tpart4, errFile4 := writer.CreateFormFile(\"video_file\", filepath.Base(\"/Users/betta/Desktop/\u5e38\u7528/6b12a8bbbe8e69a2ef5929028b0b50c3.mp4\"))\n\t_, errFile4 = io.Copy(part4, file)\n\tif errFile4 != nil {\n\t\tfmt.Println(errFile4)\n\t\treturn\n\t}\n\terr := writer.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treq.Header.Add(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Add(\"Access-Token\", \"e88f206ab28a97ef494b853982d81739b81a1e37\")\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc uploadVideo(url string, method string, advertiserID string, uploadType string, videoSignature string, filePath string, accessToken string) ([]byte, error) {\n\tclient := &http.Client{\n\t\tTimeout: 30 * time.Second,\n\t}\n\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\n\t// Add form fields\n\tif advertiserID != \"\" {\n\t\tif err := writer.WriteField(\"advertiserID\", advertiserID); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif uploadType != \"\" {\n\t\tif err := writer.WriteField(\"uploadType\", uploadType); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif videoSignature != \"\" {\n\t\tif err := writer.WriteField(\"videoSignature\", videoSignature); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// Add video file\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tpart, err := writer.CreateFormFile(\"video\", filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, err = io.Copy(part, file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\twriter.Close()\n\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Set(\"Authorization\", \"Bearer \"+accessToken)\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tvar responseBody []byte\n\tif resp.Header.Get(\"Content-Encoding\") == \"gzip\" {\n\t\treader, err := gzip.NewReader(resp.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tresponseBody, err = io.ReadAll(reader)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tresponseBody, err = io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn responseBody, nil\n}"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Implement a TCP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and retry logic for multiple KDC addresses.\n\nStruct Description: The Client struct represents a TCP client for communicating with KDC servers. It holds configuration information and provides methods for sending data to KDCs.\n\nFields:\nConfig: [*Config] - Pointer to configuration containing KDC addresses and other settings\n\nMethods:\nsendKDCTCP: [sendKDCTCP(realm string, b []byte)] -> ([]byte, error) - Sends data to a KDC server for the specified realm using TCP. Returns the response or error.\ndialSendTCP: [dialSendTCP(kdcs map[int]string, b []byte)] -> ([]byte, error) - Attempts to connect to each KDC address in sequence until successful. Returns the response or accumulated errors.\nsendTCP: [sendTCP(conn *net.TCPConn, b []byte)] -> ([]byte, error) - Handles the actual TCP communication with a KDC server, including sending data and reading response. Ensures connection is closed when done.",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\t_, kdcs, err := cl.Config.GetKDCs(realm, true)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = dialSendTCP(kdcs, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tvar errs []string\n\tfor i := 1; i <= len(kdcs); i++ {\n\t\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", kdcs[i])\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error resolving KDC address: %v\", err))\n\t\t\tcontinue\n\t\t}\n\n\t\tconn, err := net.DialTimeout(\"tcp\", tcpAddr.String(), 5*time.Second)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting dial timeout on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.SetDeadline(time.Now().Add(5 * time.Second)); err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error setting deadline on connection to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\trb, err := sendTCP(conn.(*net.TCPConn), b)\n\t\tif err != nil {\n\t\t\terrs = append(errs, fmt.Sprintf(\"error sneding to %s: %v\", kdcs[i], err))\n\t\t\tcontinue\n\t\t}\n\t\treturn rb, nil\n\t}\n\treturn nil, fmt.Errorf(\"error sending to a KDC: %s\", strings.Join(errs, \"; \"))\n}\n\nfunc sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\tdefer conn.Close()\n\tvar r []byte\n\thb := make([]byte, 4, 4)\n\tbinary.BigEndian.PutUint32(hb, uint32(len(b)))\n\tb = append(hb, b...)\n\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to KDC (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\n\tsh := make([]byte, 4, 4)\n\t_, err = conn.Read(sh)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response size header: %v\", err)\n\t}\n\ts := binary.BigEndian.Uint32(sh)\n\n\trb := make([]byte, s, s)\n\t_, err = io.ReadFull(conn, rb)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error reading response: %v\", err)\n\t}\n\tif len(rb) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from KDC %s\", conn.RemoteAddr().String())\n\t}\n\treturn rb, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Config struct {\n\tKDCAddresses []string\n\tRetryTimeout time.Duration\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCTCP(realm string, b []byte) ([]byte, error) {\n\treturn c.dialSendTCP(map[int]string{}, b)\n}\n\nfunc (c *Client) dialSendTCP(kdcs map[int]string, b []byte) ([]byte, error) {\n\tfor i, addr := range c.Config.KDCAddresses {\n\t\tkdcs[i] = addr\n\t\tconn, err := net.Dial(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tresponse, err := c.sendTCP(conn, b)\n\t\tif err == nil {\n\t\t\tconn.Close()\n\t\t\treturn response, nil\n\t\t}\n\t\tconn.Close()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn nil, errors.New(\"no KDC address was reachable\")\n}\n\nfunc (c *Client) sendTCP(conn *net.TCPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuffer := make([]byte, 1024)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buffer[:n], nil\n}"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a TCP client in Go that establishes a connection to a server, handles data transmission, and manages connection lifecycle with proper error handling and resource cleanup.\n\nStruct Description: The `Client` struct represents a TCP client that connects to a server using a round-robin server selection strategy. It manages server connections, handles policy enforcement, and processes data transmission for both TCP and UDP protocols.\n\nFields:\n- serverPicker: [protocol.ServerPicker] - Selects servers in a round-robin fashion from available server list  \n- policyManager: [policy.Manager] - Manages connection policies including timeouts and user levels\n\nMethods:\n- NewClient: [func(ctx context.Context, config *ClientConfig) (*Client, error)] -> (*Client, error) - Creates a new Client instance with server configurations and policy manager\n- Process: [func(ctx context.Context, link *transport.Link, dialer internet.Dialer) error] -> error - Main processing method that establishes connection, handles handshake, and manages data transfer between client and server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/xtls/xray-core/common\"\n\t\"github.com/xtls/xray-core/common/buf\"\n\t\"github.com/xtls/xray-core/common/errors\"\n\t\"github.com/xtls/xray-core/common/net\"\n\t\"github.com/xtls/xray-core/common/protocol\"\n\t\"github.com/xtls/xray-core/common/retry\"\n\t\"github.com/xtls/xray-core/common/session\"\n\t\"github.com/xtls/xray-core/common/signal\"\n\t\"github.com/xtls/xray-core/common/task\"\n\t\"github.com/xtls/xray-core/core\"\n\t\"github.com/xtls/xray-core/features/policy\"\n\t\"github.com/xtls/xray-core/transport\"\n\t\"github.com/xtls/xray-core/transport/internet\"\n\t\"github.com/xtls/xray-core/transport/internet/stat\"\n)\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\tserverList := protocol.NewServerList()\n\tfor _, rec := range config.Server {\n\t\ts, err := protocol.NewServerSpecFromPB(rec)\n\t\tif err != nil {\n\t\t\treturn nil, errors.New(\"failed to get server spec\").Base(err)\n\t\t}\n\t\tserverList.AddServer(s)\n\t}\n\tif serverList.Size() == 0 {\n\t\treturn nil, errors.New(\"0 target server\")\n\t}\n\n\tv := core.MustFromContext(ctx)\n\tc := &Client{\n\t\tserverPicker:  protocol.NewRoundRobinServerPicker(serverList),\n\t\tpolicyManager: v.GetFeature(policy.ManagerType()).(policy.Manager),\n\t}\n\n\treturn c, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\toutbounds := session.OutboundsFromContext(ctx)\n\tob := outbounds[len(outbounds)-1]\n\tif !ob.Target.IsValid() {\n\t\treturn errors.New(\"target not specified.\")\n\t}\n\tob.Name = \"socks\"\n\tob.CanSpliceCopy = 2\n\tdestination := ob.Target\n\n\tvar server *protocol.ServerSpec\n\tvar dest net.Destination\n\tvar conn stat.Connection\n\n\tif err := retry.ExponentialBackoff(5, 100).On(func() error {\n\t\tserver = c.serverPicker.PickServer()\n\t\tdest = server.Destination()\n\t\trawConn, err := dialer.Dial(ctx, dest)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconn = rawConn\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn errors.New(\"failed to find an available destination\").Base(err)\n\t}\n\n\tdefer func() {\n\t\tif err := conn.Close(); err != nil {\n\t\t\terrors.LogInfoInner(ctx, err, \"failed to closed connection\")\n\t\t}\n\t}()\n\n\tp := c.policyManager.ForLevel(0)\n\n\trequest := &protocol.RequestHeader{\n\t\tVersion: socks5Version,\n\t\tCommand: protocol.RequestCommandTCP,\n\t\tAddress: destination.Address,\n\t\tPort:    destination.Port,\n\t}\n\n\tif destination.Network == net.Network_UDP {\n\t\trequest.Command = protocol.RequestCommandUDP\n\t}\n\n\tuser := server.PickUser()\n\tif user != nil {\n\t\trequest.User = user\n\t\tp = c.policyManager.ForLevel(user.Level)\n\t}\n\n\tif err := conn.SetDeadline(time.Now().Add(p.Timeouts.Handshake)); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to set deadline for handshake\")\n\t}\n\tudpRequest, err := ClientHandshake(request, conn, conn)\n\tif err != nil {\n\t\treturn errors.New(\"failed to establish connection to server\").AtWarning().Base(err)\n\t}\n\tif udpRequest != nil {\n\t\tif udpRequest.Address == net.AnyIP || udpRequest.Address == net.AnyIPv6 {\n\t\t\tudpRequest.Address = dest.Address\n\t\t}\n\t}\n\n\tif err := conn.SetDeadline(time.Time{}); err != nil {\n\t\terrors.LogInfoInner(ctx, err, \"failed to clear deadline after handshake\")\n\t}\n\n\tvar newCtx context.Context\n\tvar newCancel context.CancelFunc\n\tif session.TimeoutOnlyFromContext(ctx) {\n\t\tnewCtx, newCancel = context.WithCancel(context.Background())\n\t}\n\n\tctx, cancel := context.WithCancel(ctx)\n\ttimer := signal.CancelAfterInactivity(ctx, func() {\n\t\tcancel()\n\t\tif newCancel != nil {\n\t\t\tnewCancel()\n\t\t}\n\t}, p.Timeouts.ConnectionIdle)\n\n\tvar requestFunc func() error\n\tvar responseFunc func() error\n\tif request.Command == protocol.RequestCommandTCP {\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\treturn buf.Copy(link.Reader, buf.NewWriter(conn), buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treturn buf.Copy(buf.NewReader(conn), link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t} else if request.Command == protocol.RequestCommandUDP {\n\t\tudpConn, err := dialer.Dial(ctx, udpRequest.Destination())\n\t\tif err != nil {\n\t\t\treturn errors.New(\"failed to create UDP connection\").Base(err)\n\t\t}\n\t\tdefer udpConn.Close()\n\t\trequestFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.DownlinkOnly)\n\t\t\twriter := &UDPWriter{Writer: udpConn, Request: request}\n\t\t\treturn buf.Copy(link.Reader, writer, buf.UpdateActivity(timer))\n\t\t}\n\t\tresponseFunc = func() error {\n\t\t\tdefer timer.SetTimeout(p.Timeouts.UplinkOnly)\n\t\t\treader := &UDPReader{Reader: udpConn}\n\t\t\treturn buf.Copy(reader, link.Writer, buf.UpdateActivity(timer))\n\t\t}\n\t}\n\n\tif newCtx != nil {\n\t\tctx = newCtx\n\t}\n\n\tresponseDonePost := task.OnSuccess(responseFunc, task.Close(link.Writer))\n\tif err := task.Run(ctx, requestFunc, responseDonePost); err != nil {\n\t\treturn errors.New(\"connection ends\").Base(err)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n)\n\ntype Client struct {\n\tserverPicker  protocol.ServerPicker\n\tpolicyManager policy.Manager\n}\n\ntype ClientConfig struct {\n\tServers []string\n\tPolicy  policy.Policy\n}\n\nfunc NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {\n\tif len(config.Servers) == 0 {\n\t\treturn nil, errors.New(\"no servers provided in configuration\")\n\t}\n\tif config.Policy == nil {\n\t\treturn nil, errors.New(\"policy is required\")\n\t}\n\tserverPicker := protocol.NewRoundRobinServerPicker(config.Servers)\n\tpolicyManager := policy.NewManager(config.Policy)\n\treturn &Client{\n\t\tserverPicker:  serverPicker,\n\t\tpolicyManager: policyManager,\n\t}, nil\n}\n\nfunc (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) error {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tdefault:\n\t\t\tserver, err := c.serverPicker.NextServer()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tconn, err := dialer.DialContext(ctx, \"tcp\", server)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer conn.Close()\n\t\t\tif err := c.policyManager.EnforcePolicy(conn); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := c.handleHandshake(conn); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := c.transmitData(ctx, conn, link); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (c *Client) handleHandshake(conn net.Conn) error {\n\t// Implement handshake logic here\n\treturn nil\n}\n\nfunc (c *Client) transmitData(ctx context.Context, conn net.Conn, link *transport.Link) error {\n\t// Implement data transmission logic here\n\treturn nil\n}"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Implement a TCP client in Go that can establish connections to servers, handle TLS if required, and manage timeouts for network operations.\n\nStruct Description: The Client struct represents a configurable TCP client capable of handling both plain TCP and TLS connections, with various timeout controls and DNS message exchange functionality.\n\nFields:\n\nNet: string - Network type (e.g., \"tcp\", \"tcp-tls\", \"udp\")\nUDPSize: uint16 - UDP buffer size for DNS messages\nTLSConfig: *tls.Config - TLS configuration for secure connections\nDialer: *net.Dialer - Custom dialer for connection establishment\nTimeout: time.Duration - Overall operation timeout\nDialTimeout: time.Duration - Timeout specifically for connection establishment\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nTsigSecret: map[string]string - TSIG authentication secrets\nSingleInflight: bool - Whether to use singleflight for duplicate request suppression\ngroup: singleflight - Internal singleflight group for request deduplication\n\nMethods:\n\nDial: (address string) -> (*Conn, error) - Establishes a connection to the specified address, handling TLS if configured\nExchange: (m *Msg, address string) -> (*Msg, time.Duration, error) - Performs a complete DNS message exchange with timeout handling\nexchange: (m *Msg, a string) -> (*Msg, time.Duration, error) - Internal method for performing the actual message exchange\ngetTimeoutForRequest: (timeout time.Duration) -> time.Duration - Calculates the appropriate timeout for a request considering various configuration options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tNet       string\n\tUDPSize   uint16\n\tTLSConfig *tls.Config\n\tDialer    *net.Dialer\n\tTimeout   time.Duration\n\tDialTimeout    time.Duration\n\tReadTimeout    time.Duration\n\tWriteTimeout   time.Duration\n\tTsigSecret     map[string]string\n\tSingleInflight bool\n\tgroup          singleflight\n}\n\nfunc (c *Client) Dial(address string) (conn *Conn, err error) {\n\tvar d net.Dialer\n\tif c.Dialer == nil {\n\t\td = net.Dialer{Timeout: c.getTimeoutForRequest(c.dialTimeout())}\n\t} else {\n\t\td = *c.Dialer\n\t}\n\n\tnetwork := c.Net\n\tif network == \"\" {\n\t\tnetwork = \"udp\"\n\t}\n\n\tuseTLS := strings.HasPrefix(network, \"tcp\") && strings.HasSuffix(network, \"-tls\")\n\n\tconn = new(Conn)\n\tif useTLS {\n\t\tnetwork = strings.TrimSuffix(network, \"-tls\")\n\t\tconn.Conn, err = tls.DialWithDialer(&d, network, address, c.TLSConfig)\n\t} else {\n\t\tconn.Conn, err = d.Dial(network, address)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}\n\nfunc (c *Client) Exchange(m *Msg, address string) (r *Msg, rtt time.Duration, err error) {\n\tif !c.SingleInflight {\n\t\treturn c.exchange(m, address)\n\t}\n\n\tq := m.Question[0]\n\tkey := fmt.Sprintf(\"%s:%d:%d\", q.Name, q.Qtype, q.Qclass)\n\tr, rtt, err, shared := c.group.Do(key, func() (*Msg, time.Duration, error) {\n\t\treturn c.exchange(m, address)\n\t})\n\tif r != nil && shared {\n\t\tr = r.Copy()\n\t}\n\n\treturn r, rtt, err\n}\n\nfunc (c *Client) exchange(m *Msg, a string) (r *Msg, rtt time.Duration, err error) {\n\tvar co *Conn\n\n\tco, err = c.Dial(a)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer co.Close()\n\n\topt := m.IsEdns0()\n\tif opt != nil && opt.UDPSize() >= MinMsgSize {\n\t\tco.UDPSize = opt.UDPSize()\n\t}\n\tif opt == nil && c.UDPSize >= MinMsgSize {\n\t\tco.UDPSize = c.UDPSize\n\t}\n\n\tco.TsigSecret = c.TsigSecret\n\tt := time.Now()\n\tco.SetWriteDeadline(t.Add(c.getTimeoutForRequest(c.writeTimeout())))\n\tif err = co.WriteMsg(m); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tco.SetReadDeadline(time.Now().Add(c.getTimeoutForRequest(c.readTimeout())))\n\tr, err = co.ReadMsg()\n\tif err == nil && r.Id != m.Id {\n\t\terr = ErrId\n\t}\n\trtt = time.Since(t)\n\treturn r, rtt, err\n}\n\nfunc (c *Client) getTimeoutForRequest(timeout time.Duration) time.Duration {\n\tvar requestTimeout time.Duration\n\tif c.Timeout != 0 {\n\t\trequestTimeout = c.Timeout\n\t} else {\n\t\trequestTimeout = timeout\n\t}\n\tif c.Dialer != nil && c.Dialer.Timeout != 0 {\n\t\tif c.Dialer.Timeout < requestTimeout {\n\t\t\trequestTimeout = c.Dialer.Timeout\n\t\t}\n\t}\n\treturn requestTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 110,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/miekg/dns\"\n\t\"golang.org/x/sync/singleflight\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/transport\"\n\t\"google.golang.org/grpc/peer\"\n\t\"google.golang.org/grpc/status\"\n\t\"google.golang.org/grpc/test/bufconn\"\n\t\"google.golang.org/grpc/test/testpb\"\n\t\"google.golang.org/grpc/tls\"\n\t\"google.golang.org/grpc/transport/lb\"\n\t\"google.golang.org/grpc/transport/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/resolver\"\n\t\"google.golang.org/grpc/transport/resolver/dns/resolver/internal/resolver/internal/res"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management. The server should be able to start, accept connections, read data from clients, and properly shut down while cleaning up resources.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management capabilities. It maintains state about active connections and provides methods to start, serve, and manage the server lifecycle.\n\nFields:\n\nAddr: [string] - The network address to listen on (e.g., \":8080\")\nNet: [string] - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: [Handler] - The handler for processing incoming requests\nReadTimeout: [time.Duration] - Maximum duration for reading a request\nWriteTimeout: [time.Duration] - Maximum duration for writing a response\nIdleTimeout: [func() time.Duration] - Function returning idle connection timeout\nlock: [sync.RWMutex] - Protects concurrent access to server state\nstarted: [bool] - Indicates if server is running\nshutdown: [chan struct{}] - Channel for shutdown signaling\nconns: [map[net.Conn]struct{}] - Map of active connections\n\nMethods:\n\nListenAndServe: [Name]() -> [error] - Starts the server and begins accepting connections\nserveTCP: [Name](net.Listener) -> [error] - Main TCP serving loop that accepts connections\nserveTCPConn: [Name](*sync.WaitGroup, net.Conn) -> [] - Handles an individual TCP connection\nreadTCP: [Name](net.Conn, time.Duration) -> ([]byte, error) - Reads data from a TCP connection\ninit: [Name]() -> [] - Initializes server resources\nisStarted: [Name]() -> [bool] - Checks if server is running\ngetIdleTimeout: [Name]() -> [time.Duration] - Returns idle timeout duration\ngetReadTimeout: [Name]() -> [time.Duration] - Returns read timeout duration",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := net.Listen(srv.Net, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer wg.Done()\n\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := srv.getIdleTimeout()\n\n\tfor srv.isStarted() {\n\t\tm, err := srv.readTCP(rw, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n}\n\nfunc (srv *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\n\tvar length uint16\n\tif err := binary.Read(conn, binary.BigEndian, &length); err != nil {\n\t\treturn nil, err\n\t}\n\n\tm := make([]byte, length)\n\tif _, err := io.ReadFull(conn, m); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn m, nil\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getIdleTimeout() time.Duration {\n\tif srv.IdleTimeout != nil {\n\t\treturn srv.IdleTimeout()\n\t}\n\treturn tcpIdleTimeout\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler func(conn net.Conn)\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tHandler     Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown    chan struct{}\n\tconns       map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.started {\n\t\treturn nil\n\t}\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tif s.started {\n\t\treturn nil\n\t}\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n\ts.started = true\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.serveTCP(listener)\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\tlistener.Close()\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ts.lock.Lock()\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\t\t\tgo s.serveTCPConn(&sync.WaitGroup{}, conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer wg.Done()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\treadDeadline := time.Now().Add(s.ReadTimeout)\n\tconn.SetReadDeadline(readDeadline)\n\tdata, err := s.readTCP(conn, s.ReadTimeout)\n\tif err != nil {\n\t\treturn\n\t}\n\ts.Handler(conn)\n}\n\nfunc (s *Server) readTCP(conn net.Conn, timeout time.Duration) ([]byte, error) {\n\tconn.SetReadDeadline(time.Now().Add(timeout))\n\tbuffer := make([]byte, 1024)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buffer[:n], nil\n}\n\nfunc (s *Server) init() error {\n\treturn nil\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getIdleTimeout() time.Duration {\n\treturn s.IdleTimeout()\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\treturn s.ReadTimeout\n}"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Go struct that manages multiple TCP and UDP listeners for a proxy server, with methods to register and handle incoming connections.\n\nStruct Description: The Proxy struct manages network listeners for UDP, TCP, and local DNS-over-HTTPS (DoH) connections. It provides methods to create listeners from addresses and handle incoming connections through separate goroutines.\n\nFields:\nudpListeners: []*net.UDPConn - Slice of active UDP listeners\ntcpListeners: []*net.TCPListener - Slice of active TCP listeners\nlocalDoHListeners: []*net.TCPListener - Slice of active local DoH TCP listeners\n\nMethods:\nregisterUDPListener(*net.UDPConn) -> void - Adds a UDP listener to the udpListeners slice\nregisterTCPListener(*net.TCPListener) -> void - Adds a TCP listener to the tcpListeners slice\nregisterLocalDoHListener(*net.TCPListener) -> void - Adds a local DoH listener to the localDoHListeners slice\nudpListenerFromAddr(*net.UDPAddr) -> error - Creates and registers a UDP listener from address\ntcpListenerFromAddr(*net.TCPAddr) -> error - Creates and registers a TCP listener from address\nlocalDoHListenerFromAddr(*net.TCPAddr) -> error - Creates and registers a local DoH listener from address\nudpListener(*net.UDPConn) -> void - Handles incoming UDP connections (runs in goroutine)\ntcpListener(*net.TCPListener) -> void - Handles incoming TCP connections (runs in goroutine)\nstartAcceptingClients() -> void - Starts all registered listeners in separate goroutines",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n)\n\ntype Proxy struct {\n\tudpListeners    []*net.UDPConn\n\ttcpListeners    []*net.TCPListener\n\tlocalDoHListeners []*net.TCPListener\n}\n\nfunc (proxy *Proxy) registerUDPListener(conn *net.UDPConn) {\n\tproxy.udpListeners = append(proxy.udpListeners, conn)\n}\n\nfunc (proxy *Proxy) registerTCPListener(listener *net.TCPListener) {\n\tproxy.tcpListeners = append(proxy.tcpListeners, listener)\n}\n\nfunc (proxy *Proxy) registerLocalDoHListener(listener *net.TCPListener) {\n\tproxy.localDoHListeners = append(proxy.localDoHListeners, listener)\n}\n\nfunc (proxy *Proxy) udpListenerFromAddr(listenAddr *net.UDPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"udp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"udp4\"\n\t}\n\tclientPc, err := net.ListenUDP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerUDPListener(clientPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) tcpListenerFromAddr(listenAddr *net.TCPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"tcp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"tcp4\"\n\t}\n\tacceptPc, err := net.ListenTCP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerTCPListener(acceptPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) localDoHListenerFromAddr(listenAddr *net.TCPAddr) error {\n\tlistenAddrStr := listenAddr.String()\n\tnetwork := \"tcp\"\n\tisIPv4 := isDigit(listenAddrStr[0])\n\tif isIPv4 {\n\t\tnetwork = \"tcp4\"\n\t}\n\tacceptPc, err := net.ListenTCP(network, listenAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tproxy.registerLocalDoHListener(acceptPc)\n\treturn nil\n}\n\nfunc (proxy *Proxy) udpListener(clientPc *net.UDPConn) {\n\tdefer clientPc.Close()\n\tfor {\n\t\tbuffer := make([]byte, MaxDNSPacketSize-1)\n\t\tlength, clientAddr, err := clientPc.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tpacket := buffer[:length]\n\t\tgo proxy.processIncomingQuery(\"udp\", \"udp\", packet, &clientAddr, clientPc, time.Now(), false)\n\t}\n}\n\nfunc (proxy *Proxy) tcpListener(acceptPc *net.TCPListener) {\n\tdefer acceptPc.Close()\n\tfor {\n\t\tclientPc, err := acceptPc.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo func() {\n\t\t\tdefer clientPc.Close()\n\t\t\tif err := clientPc.SetDeadline(time.Now().Add(proxy.timeout)); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tstart := time.Now()\n\t\t\tpacket, err := ReadPrefixed(&clientPc)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tclientAddr := clientPc.RemoteAddr()\n\t\t\tproxy.processIncomingQuery(\"tcp\", \"tcp\", packet, &clientAddr, clientPc, start, false)\n\t\t}()\n\t}\n}\n\nfunc (proxy *Proxy) startAcceptingClients() {\n\tfor _, clientPc := range proxy.udpListeners {\n\t\tgo proxy.udpListener(clientPc)\n\t}\n\tproxy.udpListeners = nil\n\tfor _, acceptPc := range proxy.tcpListeners {\n\t\tgo proxy.tcpListener(acceptPc)\n\t}\n\tproxy.tcpListeners = nil\n\tfor _, acceptPc := range proxy.localDoHListeners {\n\t\tgo proxy.localDoHListener(acceptPc)\n\t}\n\tproxy.localDoHListeners = nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "type Proxy struct {\n\tudpListeners       []*net.UDPConn\n\ttcpListeners       []*net.TCPListener\n\tlocalDoHListeners  []*net.TCPListener\n}\n\nfunc (p *Proxy) registerUDPListener(conn *net.UDPConn) {\n\tp.udpListeners = append(p.udpListeners, conn)\n}\n\nfunc (p *Proxy) registerTCPListener(conn *net.TCPListener) {\n\tp.tcpListeners = append(p.tcpListeners, conn)\n}\n\nfunc (p *Proxy) registerLocalDoHListener(conn *net.TCPListener) {\n\tp.localDoHListeners = append(p.localDoHListeners, conn)\n}\n\nfunc (p *Proxy) udpListenerFromAddr(addr *net.UDPAddr) error {\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerUDPListener(conn)\n\tgo p.udpListener(conn)\n\treturn nil\n}\n\nfunc (p *Proxy) tcpListenerFromAddr(addr *net.TCPAddr) error {\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerTCPListener(listener)\n\tgo p.tcpListener(listener)\n\treturn nil\n}\n\nfunc (p *Proxy) localDoHListenerFromAddr(addr *net.TCPAddr) error {\n\tlistener, err := net.ListenTCP(\"tcp\", addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.registerLocalDoHListener(listener)\n\tgo p.tcpListener(listener)\n\treturn nil\n}\n\nfunc (p *Proxy) udpListener(conn *net.UDPConn) {\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, _ := conn.Read(buffer)\n\t\tif n > 0 {\n\t\t\t// Handle UDP data\n\t\t}\n\t}\n}\n\nfunc (p *Proxy) tcpListener(listener *net.TCPListener) {\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo func(conn net.Conn) {\n\t\t\tdefer conn.Close()\n\t\t\t// Handle TCP connection\n\t\t}(conn)\n\t}\n}\n\nfunc (p *Proxy) startAcceptingClients() {\n\tfor _, listener := range p.udpListeners {\n\t\tgo p.udpListener(listener)\n\t}\n\tfor _, listener := range p.tcpListeners {\n\t\tgo p.tcpListener(listener)\n\t}\n\tfor _, listener := range p.localDoHListeners {\n\t\tgo p.tcpListener(listener)\n\t}\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a Go struct that manages HTTP requests to interact with a community persistence service, including authentication and community creation functionality.\n\nStruct Description: The Manager struct provides methods to interact with a community persistence API, handling authentication and request/response processing. It maintains connection details and context for request cancellation.\n\nFields:\nurl: string - Base URL of the community persistence service\nusername: string - Username for basic authentication\npassword: string - Password for basic authentication\nctx: context.Context - Context for request cancellation and timeouts\n\nMethods:\nNewManager: (url string, username string, password string, ctx context.Context) -> *Manager - Constructor that initializes a new Manager instance with connection details and context\nCreatePersistentCommunity: (community string, password string) -> (*persisters.Community, error) - Creates a new persistent community by making an authenticated POST request to the service, returning the created community or an error",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tjsoniter \"github.com/json-iterator/go\"\n\t\"github.com/pojntfx/weron/internal/persisters\"\n)\n\nvar (\n\tjson = jsoniter.ConfigCompatibleWithStandardLibrary\n)\n\ntype Manager struct {\n\turl      string\n\tusername string\n\tpassword string\n\tctx      context.Context\n}\n\nfunc NewManager(\n\turl string,\n\tusername string,\n\tpassword string,\n\tctx context.Context,\n) *Manager {\n\treturn &Manager{\n\t\turl:      url,\n\t\tusername: username,\n\t\tpassword: password,\n\t\tctx:      ctx,\n\t}\n}\n\nfunc (m *Manager) CreatePersistentCommunity(community string, password string) (*persisters.Community, error) {\n\thc := &http.Client{}\n\n\tu, err := url.Parse(m.url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tq := u.Query()\n\tq.Set(\"community\", community)\n\tq.Set(\"password\", password)\n\tu.RawQuery = q.Encode()\n\n\treq, err := http.NewRequest(http.MethodPost, u.String(), http.NoBody)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.SetBasicAuth(m.username, m.password)\n\n\tres, err := hc.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif res.Body != nil {\n\t\tdefer res.Body.Close()\n\t}\n\tif res.StatusCode != http.StatusOK {\n\t\treturn nil, errors.New(res.Status)\n\t}\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tc := persisters.Community{}\n\tif err := json.Unmarshal(body, &c); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &c, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package persisters\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\ntype Manager struct {\n\turl     string\n\tusername string\n\tpassword string\n\tctx     context.Context\n}\n\nfunc NewManager(url string, username string, password string, ctx context.Context) *Manager {\n\treturn &Manager{\n\t\turl:     url,\n\t\tusername: username,\n\t\tpassword: password,\n\t\tctx:     ctx,\n\t}\n}\n\nfunc (m *Manager) CreatePersistentCommunity(community string, password string) (*Community, error) {\n\t// Construct the full URL for the create community endpoint\n\tcreateURL := fmt.Sprintf(\"%s/create\", m.url)\n\t\n\t// Prepare the request body\n\tbody := url.Values{}\n\tbody.Add(\"community\", community)\n\tbody.Add(\"password\", password)\n\t\n\t// Create the request\n\treq, err := http.NewRequest(\"POST\", createURL, strings.NewReader(body.Encode()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\t// Set headers\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t\n\t// Set basic authentication\n\treq.SetBasicAuth(m.username, m.password)\n\t\n\t// Execute the request with context\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\t\n\t// Check for HTTP errors\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"failed to create community: %s\", resp.Status)\n\t}\n\t\n\t// Parse the response (assuming JSON format)\n\tvar result Community\n\tif err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn &result, nil\n}"
  },
  {
    "Task_id": 190,
    "Instruction": "Task Description: Implement a high-performance TCP server in Go using kqueue for event notification, capable of handling multiple client connections efficiently with non-blocking I/O operations.\n\nStruct Description: The `poller` struct manages a single kqueue instance and handles all I/O operations for its assigned connections. It works as part of an engine (`g *Engine`) to process network events either as a listener (accepting new connections) or as a worker (handling read/write operations).\n\nFields:\n\ng: *Engine - Reference to the parent engine managing all pollers\nmux: sync.Mutex - Mutex for thread-safe access to eventList\nkfd: int - Kqueue file descriptor\nevtfd: int - Event file descriptor (unused in current implementation)\nindex: int - Poller's index in the engine's poller array\nshutdown: bool - Flag to control poller shutdown\nlistener: net.Listener - TCP listener (only for listener pollers)\nisListener: bool - Flag indicating if this is a listener poller\nunixSockAddr: string - Unix socket address (if using UNIX domain sockets)\nReadBuffer: []byte - Buffer for read operations\npollType: string - Type identifier (\"LISTENER\" or \"POLLER\")\neventList: []syscall.Kevent_t - Pending kqueue events to be processed\n\nMethods:\n\naddConn(c *Conn) -> error - Adds a new connection to the poller and registers it for read events\naddDialer(c *Conn) -> error - Adds a dialer connection and registers it for read/write events\ngetConn(fd int) -> *Conn - Retrieves a connection by file descriptor\ndeleteConn(c *Conn) -> - Removes a connection from tracking\ntrigger() -> - Wakes up the kqueue loop\naddRead(fd int) -> - Registers a file descriptor for read events\nresetRead(fd int) -> - Unregisters write events for a file descriptor\nmodWrite(fd int) -> - Registers a file descriptor for write events\naddReadWrite(fd int) -> - Registers a file descriptor for both read and write events\nreadWrite(ev *syscall.Kevent_t) -> - Processes read/write events from kqueue\nstart() -> - Starts the poller's main loop (either acceptorLoop or readWriteLoop)\nacceptorLoop() -> - Listener's main loop that accepts new connections\nreadWriteLoop() -> - Worker's main loop that processes I/O events\nstop() -> - Stops the poller and cleans up resources\nnewPoller(g *Engine, isListener bool, index int) -> (*poller, error) - Constructor that creates either a listener or worker poller",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"os\"\n\t\"runtime\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/lesismal/nbio/logging\"\n)\n\ntype poller struct {\n\tmux sync.Mutex\n\n\tg *Engine\n\n\tkfd   int\n\tevtfd int\n\n\tindex int\n\n\tshutdown bool\n\n\tlistener     net.Listener\n\tisListener   bool\n\tunixSockAddr string\n\n\tReadBuffer []byte\n\n\tpollType string\n\n\teventList []syscall.Kevent_t\n}\n\nfunc (p *poller) addConn(c *Conn) error {\n\tfd := c.fd\n\tif fd >= len(p.g.connsUnix) {\n\t\terr := fmt.Errorf(\"too many open files, fd[%d] >= MaxOpenFiles[%d]\",\n\t\t\tfd,\n\t\t\tlen(p.g.connsUnix))\n\t\tc.closeWithError(err)\n\t\treturn err\n\t}\n\tc.p = p\n\tif c.typ != ConnTypeUDPServer {\n\t\tp.g.onOpen(c)\n\t} else {\n\t\tp.g.onUDPListen(c)\n\t}\n\tp.g.connsUnix[fd] = c\n\tp.addRead(fd)\n\treturn nil\n}\n\nfunc (p *poller) addDialer(c *Conn) error {\n\tfd := c.fd\n\tif fd >= len(p.g.connsUnix) {\n\t\terr := fmt.Errorf(\"too many open files, fd[%d] >= MaxOpenFiles[%d]\",\n\t\t\tfd,\n\t\t\tlen(p.g.connsUnix),\n\t\t)\n\t\tc.closeWithError(err)\n\t\treturn err\n\t}\n\tc.p = p\n\tp.g.connsUnix[fd] = c\n\tc.isWAdded = true\n\tp.addReadWrite(fd)\n\treturn nil\n}\n\nfunc (p *poller) getConn(fd int) *Conn {\n\treturn p.g.connsUnix[fd]\n}\n\nfunc (p *poller) deleteConn(c *Conn) {\n\tif c == nil {\n\t\treturn\n\t}\n\tfd := c.fd\n\n\tif c.typ != ConnTypeUDPClientFromRead {\n\t\tif c == p.g.connsUnix[fd] {\n\t\t\tp.g.connsUnix[fd] = nil\n\t\t}\n\t}\n\n\tif c.typ != ConnTypeUDPServer {\n\t\tp.g.onClose(c, c.closeErr)\n\t}\n}\n\nfunc (p *poller) trigger() {\n\tsyscall.Kevent(p.kfd, []syscall.Kevent_t{{Ident: 0, Filter: syscall.EVFILT_USER, Fflags: syscall.NOTE_TRIGGER}}, nil, nil)\n}\n\nfunc (p *poller) addRead(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_READ})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) resetRead(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_DELETE, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) modWrite(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) addReadWrite(fd int) {\n\tp.mux.Lock()\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_READ})\n\tp.eventList = append(p.eventList, syscall.Kevent_t{Ident: uint64(fd), Flags: syscall.EV_ADD, Filter: syscall.EVFILT_WRITE})\n\tp.mux.Unlock()\n\tp.trigger()\n}\n\nfunc (p *poller) readWrite(ev *syscall.Kevent_t) {\n\tif ev.Flags&syscall.EV_DELETE > 0 {\n\t\treturn\n\t}\n\tfd := int(ev.Ident)\n\tc := p.getConn(fd)\n\tif c != nil {\n\t\tif ev.Filter == syscall.EVFILT_READ {\n\t\t\tif p.g.onRead == nil {\n\t\t\t\tfor {\n\t\t\t\t\tbuffer := p.g.borrow(c)\n\t\t\t\t\trc, n, err := c.ReadAndGetConn(buffer)\n\t\t\t\t\tif n > 0 {\n\t\t\t\t\t\tp.g.onData(rc, buffer[:n])\n\t\t\t\t\t}\n\t\t\t\t\tp.g.payback(c, buffer)\n\t\t\t\t\tif errors.Is(err, syscall.EINTR) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif errors.Is(err, syscall.EAGAIN) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (err != nil || n == 0) && ev.Flags&syscall.EV_DELETE == 0 {\n\t\t\t\t\t\tif err == nil {\n\t\t\t\t\t\t\terr = io.EOF\n\t\t\t\t\t\t}\n\t\t\t\t\t\tc.closeWithError(err)\n\t\t\t\t\t}\n\t\t\t\t\tif n < len(buffer) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tp.g.onRead(c)\n\t\t\t}\n\n\t\t\tif ev.Flags&syscall.EV_EOF != 0 {\n\t\t\t\tif c.onConnected == nil {\n\t\t\t\t\tc.flush()\n\t\t\t\t} else {\n\t\t\t\t\tc.onConnected(c, nil)\n\t\t\t\t\tc.onConnected = nil\n\t\t\t\t\tc.resetRead()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ev.Filter == syscall.EVFILT_WRITE {\n\t\t\tif c.onConnected == nil {\n\t\t\t\tc.flush()\n\t\t\t} else {\n\t\t\t\tc.resetRead()\n\t\t\t\tc.onConnected(c, nil)\n\t\t\t\tc.onConnected = nil\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) start() {\n\tif p.g.LockPoller {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\tdefer p.g.Done()\n\n\tif p.isListener {\n\t\tp.acceptorLoop()\n\t} else {\n\t\tdefer syscall.Close(p.kfd)\n\t\tp.readWriteLoop()\n\t}\n}\n\nfunc (p *poller) acceptorLoop() {\n\tif p.g.LockListener {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\n\tp.shutdown = false\n\tfor !p.shutdown {\n\t\tconn, err := p.listener.Accept()\n\t\tif err == nil {\n\t\t\tvar c *Conn\n\t\t\tc, err = NBConn(conn)\n\t\t\tif err != nil {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tp.g.pollers[c.Hash()%len(p.g.pollers)].addConn(c)\n\t\t} else {\n\t\t\tvar ne net.Error\n\t\t\tif ok := errors.As(err, &ne); ok && ne.Timeout() {\n\t\t\t\ttime.Sleep(time.Second / 20)\n\t\t\t} else {\n\t\t\t\tif !p.shutdown {\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) readWriteLoop() {\n\tif p.g.LockPoller {\n\t\truntime.LockOSThread()\n\t\tdefer runtime.UnlockOSThread()\n\t}\n\n\tevents := make([]syscall.Kevent_t, 1024)\n\tvar changes []syscall.Kevent_t\n\n\tp.shutdown = false\n\tfor !p.shutdown {\n\t\tp.mux.Lock()\n\t\tchanges = p.eventList\n\t\tp.eventList = nil\n\t\tp.mux.Unlock()\n\t\tn, err := syscall.Kevent(p.kfd, changes, events, nil)\n\t\tif err != nil && !errors.Is(err, syscall.EINTR) && !errors.Is(err, syscall.EBADF) && !errors.Is(err, syscall.ENOENT) && !errors.Is(err, syscall.EINVAL) {\n\t\t\treturn\n\t\t}\n\n\t\tfor i := 0; i < n; i++ {\n\t\t\tswitch int(events[i].Ident) {\n\t\t\tcase p.evtfd:\n\t\t\tdefault:\n\t\t\t\tp.readWrite(&events[i])\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *poller) stop() {\n\tp.shutdown = true\n\tif p.listener != nil {\n\t\tp.listener.Close()\n\t\tif p.unixSockAddr != \"\" {\n\t\t\tos.Remove(p.unixSockAddr)\n\t\t}\n\t}\n\tp.trigger()\n}\n\nfunc newPoller(g *Engine, isListener bool, index int) (*poller, error) {\n\tif isListener {\n\t\tif len(g.Addrs) == 0 {\n\t\t\tpanic(\"invalid listener num\")\n\t\t}\n\n\t\taddr := g.Addrs[index%len(g.Addrs)]\n\t\tln, err := g.Listen(g.Network, addr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tp := &poller{\n\t\t\tg:          g,\n\t\t\tindex:      index,\n\t\t\tlistener:   ln,\n\t\t\tisListener: isListener,\n\t\t\tpollType:   \"LISTENER\",\n\t\t}\n\t\tif g.Network == \"unix\" {\n\t\t\tp.unixSockAddr = addr\n\t\t}\n\n\t\treturn p, nil\n\t}\n\n\tfd, err := syscall.Kqueue()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, err = syscall.Kevent(fd, []syscall.Kevent_t{{\n\t\tIdent:  0,\n\t\tFilter: syscall.EVFILT_USER,\n\t\tFlags:  syscall.EV_ADD | syscall.EV_CLEAR,\n\t}}, nil, nil)\n\n\tif err != nil {\n\t\tsyscall.Close(fd)\n\t\treturn nil, err\n\t}\n\n\tp := &poller{\n\t\tg:          g,\n\t\tkfd:        fd,\n\t\tindex:      index,\n\t\tisListener: isListener,\n\t\tpollType:   \"POLLER\",\n\t}\n\n\treturn p, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"syscall\"\n\t\"sync\"\n)\n\ntype Conn struct {\n\tfd int\n}\n\ntype Engine struct{}\n\ntype poller struct {\n\tg        *Engine\n\tmux      sync.Mutex\n\tkfd      int\n\tindex    int\n\tshutdown bool\n\tlistener net.Listener\n\tisListener bool\n\tunixSockAddr string\n\tReadBuffer []byte\n\tpollType  string\n\teventList []syscall.Kevent_t\n}\n\nfunc (p *poller) addConn(c *Conn) error {\n\treturn nil\n}\n\nfunc (p *poller) addDialer(c *Conn) error {\n\treturn nil\n}\n\nfunc (p *poller) getConn(fd int) *Conn {\n\treturn &Conn{fd: fd}\n}\n\nfunc (p *poller) deleteConn(c *Conn) {\n}\n\nfunc (p *poller) trigger() {\n}\n\nfunc (p *poller) addRead(fd int) {\n}\n\nfunc (p *poller) resetRead(fd int) {\n}\n\nfunc (p *poller) modWrite(fd int) {\n}\n\nfunc (p *poller) addReadWrite(fd int) {\n}\n\nfunc (p *poller) readWrite(ev *syscall.Kevent_t) {\n}\n\nfunc (p *poller) start() {\n\tif p.isListener {\n\t\tp.acceptorLoop()\n\t} else {\n\t\tp.readWriteLoop()\n\t}\n}\n\nfunc (p *poller) acceptorLoop() {\n}\n\nfunc (p *poller) readWriteLoop() {\n}\n\nfunc (p *poller) stop() {\n}\n\nfunc newPoller(g *Engine, isListener bool, index int) (*poller, error) {\n\treturn &poller{\n\t\tg:        g,\n\t\tkfd:      -1,\n\t\tindex:    index,\n\t\tshutdown: false,\n\t\tpollType: \"LISTENER\",\n\t}, nil\n}"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Implement a TCP listener in Go that supports different listening methods (normal, iptables, and socket reuse) for handling incoming client connections, performing protocol negotiation, and managing client tasks.\n\nStruct Description: The Listen struct represents a TCP listener with configurable listening methods and address. It provides methods to start listening using different techniques and handle client connections.\n\nFields:\nmethod: [int] - Specifies the listening method (NORMAL, IPTABLES, or SOREUSE)\naddr: [string] - The address and port to listen on\n\nMethods:\nnewListen: [Name](method int, addr string) -> *Listen - Creates and returns a new Listen instance with the specified method and address\nstart: [Name](mgr *manager.Manager, options *initial.Options) -> void - Starts the listener in a goroutine using the configured method\nnormalListen: [Name](mgr *manager.Manager, options *initial.Options) -> void - Implements standard TCP listening and client handling\nsoReuseListen: [Name](mgr *manager.Manager, options *initial.Options) -> void - Implements socket reuse listening with additional authentication and proxy capabilities",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/libp2p/go-reuseport\"\n)\n\ntype Listen struct {\n\tmethod int\n\taddr   string\n}\n\nfunc newListen(method int, addr string) *Listen {\n\tlisten := new(Listen)\n\tlisten.method = method\n\tlisten.addr = addr\n\treturn listen\n}\n\nfunc (listen *Listen) start(mgr *manager.Manager, options *initial.Options) {\n\tswitch listen.method {\n\tcase NORMAL:\n\t\tgo listen.normalListen(mgr, options)\n\tcase IPTABLES:\n\t\tgo listen.iptablesListen(mgr, options)\n\tcase SOREUSE:\n\t\tgo listen.soReuseListen(mgr, options)\n\t}\n}\n\nfunc (listen *Listen) normalListen(mgr *manager.Manager, options *initial.Options) {\n\tlistener, err := net.Listen(\"tcp\", listen.addr)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[*] Error occurred: %s\\n\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tparam := new(protocol.NegParam)\n\t\tparam.Conn = conn\n\t\tproto := protocol.NewDownProto(param)\n\t\tproto.SNegotiate()\n\n\t\trMessage := protocol.NewDownMsg(conn, global.G_Component.Secret, protocol.ADMIN_UUID)\n\t\tfHeader, fMessage, err := protocol.DestructMessage(rMessage)\n\t\tif err != nil {\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\tif fHeader.MessageType == protocol.HI {\n\t\t\tmmess := fMessage.(*protocol.HIMess)\n\t\t\tif mmess.Greeting == \"Shhh...\" && mmess.IsAdmin == 0 {\n\t\t\t\tchildrenTask := &manager.ChildrenTask{\n\t\t\t\t\tMode: manager.C_NEWCHILD,\n\t\t\t\t\tUUID: mmess.UUID,\n\t\t\t\t\tConn: conn,\n\t\t\t\t}\n\t\t\t\tmgr.ChildrenManager.TaskChan <- childrenTask\n\t\t\t\t<-mgr.ChildrenManager.ResultChan\n\t\t\t\tmgr.ChildrenManager.ChildComeChan <- &manager.ChildInfo{UUID: mmess.UUID, Conn: conn}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t}\n}\n\nfunc (listen *Listen) soReuseListen(mgr *manager.Manager, options *initial.Options) {\n\tlistenAddr := fmt.Sprintf(\"%s:%s\", options.ReuseHost, options.ReusePort)\n\tlistener, err := reuseport.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tdefer listener.Close()\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"[*] Error occurred: %s\\n\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tparam := new(protocol.NegParam)\n\t\tparam.Conn = conn\n\t\tproto := protocol.NewDownProto(param)\n\t\tproto.SNegotiate()\n\n\t\tdefer conn.SetReadDeadline(time.Time{})\n\t\tconn.SetReadDeadline(time.Now().Add(2 * time.Second))\n\n\t\tbuffer := make([]byte, 16)\n\t\tcount, err := io.ReadFull(conn, buffer)\n\n\t\tif err != nil {\n\t\t\tif timeoutErr, ok := err.(net.Error); ok && timeoutErr.Timeout() {\n\t\t\t\tgo initial.ProxyStream(conn, buffer[:count], options.ReusePort)\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tconn.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif string(buffer[:count]) == share.AuthToken {\n\t\t\tconn.Write([]byte(share.AuthToken))\n\t\t} else {\n\t\t\tgo initial.ProxyStream(conn, buffer[:count], options.ReusePort)\n\t\t\tcontinue\n\t\t}\n\n\t\trMessage := protocol.NewDownMsg(conn, global.G_Component.Secret, protocol.ADMIN_UUID)\n\t\tfHeader, fMessage, err := protocol.DestructMessage(rMessage)\n\n\t\tif err != nil {\n\t\t\tconn.Close()\n\t\t\tcontinue\n\t\t}\n\n\t\tif fHeader.MessageType == protocol.HI {\n\t\t\tmmess := fMessage.(*protocol.HIMess)\n\t\t\tif mmess.Greeting == \"Shhh...\" && mmess.IsAdmin == 0 {\n\t\t\t\tchildrenTask := &manager.ChildrenTask{\n\t\t\t\t\tMode: manager.C_NEWCHILD,\n\t\t\t\t\tUUID: mmess.UUID,\n\t\t\t\t\tConn: conn,\n\t\t\t\t}\n\t\t\t\tmgr.ChildrenManager.TaskChan <- childrenTask\n\t\t\t\t<-mgr.ChildrenManager.ResultChan\n\t\t\t\tmgr.ChildrenManager.ChildComeChan <- &manager.ChildInfo{UUID: mmess.UUID, Conn: conn}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n)\n\nconst (\n\tNORMAL = iota\n\tIPTABLES\n\tSOREUSE\n)\n\ntype Listen struct {\n\tmethod int\n\taddr   string\n}\n\nfunc newListen(method int, addr string) *Listen {\n\treturn &Listen{method: method, addr: addr}\n}\n\nfunc (l *Listen) start(mgr *manager.Manager, options *initial.Options) {\n\tswitch l.method {\n\tcase NORMAL:\n\t\tl.normalListen(mgr, options)\n\tcase SOREUSE:\n\t\tl.soReuseListen(mgr, options)\n\tdefault:\n\t\tfmt.Println(\"Unsupported listening method\")\n\t}\n}\n\nfunc (l *Listen) normalListen(mgr *manager.Manager, options *initial.Options) {\n\tlistener, err := net.Listen(\"tcp\", l.addr)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting normal listener:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\tfmt.Println(\"Normal listener started on\", l.addr)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo mgr.HandleConnection(conn, options)\n\t}\n}\n\nfunc (l *Listen) soReuseListen(mgr *manager.Manager, options *initial.Options) {\n\tlistener, err := net.Listen(\"tcp\", l.addr)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting socket reuse listener:\", err)\n\t\treturn\n\t}\n\tdefer listener.Close()\n\n\t// Set SO_REUSEADDR option\n\tlistener.SetReusePort(true)\n\n\tfmt.Println(\"Socket reuse listener started on\", l.addr)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo mgr.HandleConnection(conn, options)\n\t}\n}"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and connection management.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, handles client requests, and manages connection lifecycle with configurable timeouts.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - The request handler interface\nReadTimeout: time.Duration - Maximum duration for reading the entire request\nWriteTimeout: time.Duration - Maximum duration for writing the response\nIdleTimeout: func() time.Duration - Function returning the maximum idle connection duration\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Main server loop that accepts and handles connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual client connection\ninit() - Initializes server resources\nisStarted() bool - Returns server running status\ngetReadTimeout() time.Duration - Returns configured read timeout or default",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, false, false)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw}\n\tw.writer = w\n\n\ttimeout := srv.getReadTimeout()\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\tlimit := maxTCPQueries\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n\tif srv.Handler == nil {\n\t\tsrv.Handler = DefaultServeMux\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc (srv *Server) getReadTimeout() time.Duration {\n\tif srv.ReadTimeout != 0 {\n\t\treturn srv.ReadTimeout\n\t}\n\treturn dnsTimeout\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tServeTCP(conn net.Conn)\n}\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tHandler  Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tlock      sync.RWMutex\n\tstarted   bool\n\tshutdown  chan struct{}\n\tconns     map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tif s.started {\n\t\treturn nil\n\t}\n\ts.started = true\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn s.serveTCP(listener)\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\t\tgo s.serveTCPConn(&sync.WaitGroup{}, conn)\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer wg.Done()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\tconn.SetReadDeadline(time.Now().Add(s.getReadTimeout()))\n\tconn.SetWriteDeadline(time.Now().Add(s.getWriteTimeout()))\n\ts.Handler.ServeTCP(conn)\n}\n\nfunc (s *Server) init() {\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\tif s.ReadTimeout > 0 {\n\t\treturn s.ReadTimeout\n\t}\n\treturn 30 * time.Second\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection lifecycles, timeouts, and provide hooks for customizing reader/writer behavior.\n\nStruct Description: The Server struct represents a configurable TCP server that can handle DNS queries (though this could be adapted for other protocols). It manages listener lifecycle, connection pooling, and provides various timeout and security configurations.\n\nFields:\n\nAddr: string - The address to listen on (e.g., \":domain\")\nNet: string - Network type (\"tcp\", \"tcp4\", \"tcp6\", or their TLS variants)\nListener: net.Listener - The active TCP listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection (not used in TCP mode)\nHandler: Handler - Handler for incoming requests\nUDPSize: int - UDP buffer size\nReadTimeout: time.Duration - Timeout for read operations\nWriteTimeout: time.Duration - Timeout for write operations\nIdleTimeout: func() time.Duration - Function returning idle timeout duration\nTsigProvider: TsigProvider - TSIG provider for DNS\nTsigSecret: map[string]string - TSIG secrets\nNotifyStartedFunc: func() - Callback when server starts\nDecorateReader: DecorateReader - Function to decorate the reader\nDecorateWriter: DecorateWriter - Function to decorate the writer\nMaxTCPQueries: int - Maximum queries per connection\nReusePort: bool - Enable SO_REUSEPORT\nReuseAddr: bool - Enable SO_REUSEADDR\nMsgAcceptFunc: MsgAcceptFunc - Function to filter incoming messages\nlock: sync.RWMutex - Mutex for concurrent access protection\nstarted: bool - Server running state\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\nudpPool: sync.Pool - Pool for UDP buffers\n\nMethods:\n\nListenAndServe: () -> error - Starts the server and begins accepting connections\nserveTCP: (net.Listener) -> error - Internal method to serve TCP connections\nserveTCPConn: (*sync.WaitGroup, net.Conn) -> () - Handles an individual TCP connection\nisStarted: () -> bool - Checks if server is running (internal)\ninit: () -> () - Initializes server state (internal)\ngetReadTimeout: () -> time.Duration - Gets current read timeout (internal)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr     string\n\tNet      string\n\tListener net.Listener\n\tTLSConfig *tls.Config\n\tPacketConn net.PacketConn\n\tHandler   Handler\n\tUDPSize int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tTsigProvider TsigProvider\n\tTsigSecret map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries int\n\tReusePort bool\n\tReuseAddr bool\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort, srv.ReuseAddr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigProvider: srv.tsigProvider(), tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tHandle(conn net.Conn)\n}\n\ntype TsigProvider interface {\n\tGetSecret(name string) (string, error)\n}\n\ntype MsgAcceptFunc func(conn net.Conn) bool\n\ntype DecorateReader func(reader *net.Reader) *net.Reader\ntype DecorateWriter func(writer *net.Writer) *net.Writer\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tListener    net.Listener\n\tTLSConfig   *tls.Config\n\tPacketConn  net.PacketConn\n\tHandler     Handler\n\tUDPSize     int\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tTsigProvider TsigProvider\n\tTsigSecret   map[string]string\n\tNotifyStartedFunc func()\n\tDecorateReader DecorateReader\n\tDecorateWriter DecorateWriter\n\tMaxTCPQueries int\n\tReusePort     bool\n\tReuseAddr     bool\n\tMsgAcceptFunc MsgAcceptFunc\n\tlock          sync.RWMutex\n\tstarted       bool\n\tshutdown      chan struct{}\n\tconns         map[net.Conn]struct{}\n\tudpPool       sync.Pool\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tif s.started {\n\t\treturn fmt.Errorf(\"server already started\")\n\t}\n\n\ts.started = true\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n\ts.NotifyStartedFunc()\n\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.Listener = listener\n\n\tif s.ReusePort {\n\t\tif err := listener.SetReusePort(true); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif s.ReuseAddr {\n\t\tif err := listener.SetReuseAddress(true); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif s.ReadTimeout > 0 {\n\t\tlistener.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t}\n\n\tif s.WriteTimeout > 0 {\n\t\tlistener.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t}\n\n\tgo s.serveTCP(listener)\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\tif opErr, ok := err.(net.OpError); ok && opErr.Timeout() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\ts.lock.Lock()\n\t\tif !s.started {\n\t\t\tconn.Close()\n\t\t\ts.lock.Unlock()\n\t\t\tcontinue\n\t\t}\n\n\t\tif s.MsgAcceptFunc != nil && !s.MsgAcceptFunc(conn) {\n\t\t\tconn.Close()\n\t\t\ts.lock.Unlock()\n\t\t\tcontinue\n\t\t}\n\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\tif s.DecorateReader != nil {\n\t\t\tconn = s.DecorateReader(&net.Reader{Conn: conn})\n\t\t}\n\n\t\tif s.DecorateWriter != nil {\n\t\t\tconn = s.DecorateWriter(&net.Writer{Conn: conn})\n\t\t}\n\n\t\tvar wg sync.WaitGroup\n\t\twg.Add(1)\n\t\tgo s.serveTCPConn(&wg, conn)\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer wg.Done()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tif s.ReadTimeout > 0 {\n\t\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\t}\n\n\tif s.WriteTimeout > 0 {\n\t\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\t}\n\n\tif s.IdleTimeout != nil {\n\t\tidleTimeout := s.IdleTimeout()\n\t\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\t}\n\n\tif s.Handler != nil {\n\t\ts.Handler.Handle(conn)\n\t}\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) init() {\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.ReadTimeout\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a TCP server in Go that can handle multiple client connections concurrently, manage server lifecycle, and track active connections.\n\nStruct Description: The Server struct represents a TCP server that listens for incoming connections, handles client communication, and provides server management capabilities.\n\nFields:\n- Addr: string - The network address to listen on (e.g., \":8080\")\n- Net: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\n- Handler: Handler - Interface for custom request handling (implementation not shown)\n- Listener: net.Listener - The underlying network listener\n- conns: map[net.Conn]struct{} - Track active connections\n- lock: sync.RWMutex - Protects concurrent access to server state\n- started: bool - Indicates if server is running\n- shutdown: chan struct{} - Channel for shutdown signaling\n\nMethods:\n- ListenAndServe() error - Starts the server and begins accepting connections\n- init() - Initializes server resources (internal use)\n- serveTCP(net.Listener) error - Main server loop that accepts connections (internal use)\n- serveTCPConn(*sync.WaitGroup, net.Conn) - Handles individual client connections (internal use)\n- isStarted() bool - Thread-safe check of server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tListener net.Listener\n\tconns    map[net.Conn]struct{}\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tl, err := net.Listen(srv.Net, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tsrv.Listener = l\n\tsrv.started = true\n\tunlock()\n\treturn srv.serveTCP(l)\n}\n\nfunc (srv *Server) init() {\n\tsrv.shutdown = make(chan struct{})\n\tsrv.conns = make(map[net.Conn]struct{})\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tdefer func() {\n\t\tsrv.lock.Lock()\n\t\tdelete(srv.conns, rw)\n\t\tsrv.lock.Unlock()\n\t\trw.Close()\n\t\twg.Done()\n\t}()\n\n\tbuf := make([]byte, 4096)\n\tfor {\n\t\tn, err := rw.Read(buf)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\t_, err = rw.Write(buf[:n])\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (srv *Server) isStarted() bool {\n\tsrv.lock.RLock()\n\tstarted := srv.started\n\tsrv.lock.RUnlock()\n\treturn started\n}\n\nfunc unlockOnce(l sync.Locker) func() {\n\tvar once sync.Once\n\treturn func() { once.Do(l.Unlock) }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"net\"\n\t\"sync\"\n)\n\ntype Handler interface {\n\tHandle(conn net.Conn)\n}\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\tListener net.Listener\n\tconns   map[net.Conn]struct{}\n\tlock    sync.RWMutex\n\tstarted bool\n\tshutdown chan struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.started {\n\t\treturn nil\n\t}\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\tvar err error\n\ts.Listener, err = net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n\ts.started = true\n\treturn s.serveTCP(s.Listener)\n}\n\nfunc (s *Server) init() {\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\t\tgo s.serveTCPConn(&sync.WaitGroup{}, conn)\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t\twg.Done()\n\t}()\n\ts.Handler.Handle(conn)\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a TLS server in Go that handles incoming TCP connections, performs TLS handshakes, manages connection timeouts, and processes domain-specific data through channels.\n\nStruct Description: The TLSServer struct represents a TLS-enabled TCP server that handles secure connections, manages connection state, and processes domain-specific data through channels. It includes functionality for accepting connections, handling TLS handshakes, managing timeouts, and shutting down gracefully.\n\nFields:\n- HTTPSServer: *HTTPSServer - Reference to the parent HTTPSServer containing configuration\n- Cache: *cache.Cache - Cache for storing active connections\n- TCPListen: *net.TCPListener - TCP listener for incoming connections\n- Done: chan byte - Channel for signaling server shutdown\n- DomainData: chan DomainData - Channel for sending domain-specific data\n- Error: chan error - Channel for reporting errors\n\nMethods:\n- NewTLSServer(*HTTPSServer) (*TLSServer, error) - Constructor that initializes a new TLSServer instance\n- ListenAndServe() error - Main server loop that handles domain data and errors\n- Shutdown() - Gracefully shuts down the server\n- Accept() - Accepts incoming connections and handles TLS handshakes (spawned as a goroutine)",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/txthinking/zoro\"\n)\n\ntype DomainData struct {\n\tDomain string\n\tData   []byte\n}\n\ntype TLSServer struct {\n\tHTTPSServer *HTTPSServer\n\tCache       *cache.Cache\n\tTCPListen   *net.TCPListener\n\tDone        chan byte\n\tDomainData  chan DomainData\n\tError       chan error\n}\n\nfunc NewTLSServer(s *HTTPSServer) (*TLSServer, error) {\n\tl, err := net.ListenTCP(\"tcp\", s.TLSAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &TLSServer{\n\t\tHTTPSServer: s,\n\t\tCache:       cache.New(cache.NoExpiration, cache.NoExpiration),\n\t\tTCPListen:   l,\n\t\tDone:        make(chan byte),\n\t\tDomainData:  make(chan DomainData),\n\t\tError:       make(chan error),\n\t}, nil\n}\n\nfunc (s *TLSServer) ListenAndServe() error {\n\tdefer close(s.Done)\n\tdefer s.TCPListen.Close()\n\tgo s.Accept()\n\tfor {\n\t\tselect {\n\t\tcase d := <-s.DomainData:\n\t\t\ti, ok := s.Cache.Get(\"domain:\" + d.Domain)\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tc := i.(*net.TCPConn)\n\t\t\tif err := c.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif _, err := c.Write(d.Data); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase err := <-s.Error:\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *TLSServer) Shutdown() {\n\tselect {\n\tcase <-s.Done:\n\t\treturn\n\tcase s.Error <- nil:\n\t}\n}\n\nfunc (s *TLSServer) Accept() {\n\tfor {\n\t\tc1, err := s.TCPListen.AcceptTCP()\n\t\tif err != nil {\n\t\t\tselect {\n\t\t\tcase <-s.Done:\n\t\t\t\treturn\n\t\t\tcase s.Error <- err:\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif s.HTTPSServer.TLSTimeout != 0 {\n\t\t\tif err := c1.SetKeepAlivePeriod(time.Duration(s.HTTPSServer.TLSTimeout) * time.Second); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tif s.HTTPSServer.TLSDeadline != 0 {\n\t\t\tif err := c1.SetDeadline(time.Now().Add(time.Duration(s.HTTPSServer.TLSDeadline) * time.Second)); err != nil {\n\t\t\t\tc1.Close()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\ttc := tls.Server(c1, s.HTTPSServer.TLSConfig)\n\t\tif err := tc.Handshake(); err != nil {\n\t\t\tc1.Close()\n\t\t\tcontinue\n\t\t}\n\t\tcs := tc.ConnectionState()\n\t\tif cs.ServerName == \"\" {\n\t\t\tlog.Println(tc.RemoteAddr().String() + \" no SNI\")\n\t\t\ttc.Close()\n\t\t\tcontinue\n\t\t}\n\t\ts.Cache.Set(tc.RemoteAddr().String(), tc, cache.DefaultExpiration)\n\t\tgo func(tc *tls.Conn) {\n\t\t\tdefer func() {\n\t\t\t\tp := &zoro.TCPPacket{\n\t\t\t\t\tAddress: tc.RemoteAddr().String(),\n\t\t\t\t}\n\t\t\t\tb, err := proto.Marshal(p)\n\t\t\t\tif err != nil {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-s.Done:\n\t\t\t\t\t\treturn\n\t\t\t\t\tcase s.Error <- err:\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbb := make([]byte, 2)\n\t\t\t\tbinary.BigEndian.PutUint16(bb, uint16(len(b)))\n\t\t\t\td := DomainData{\n\t\t\t\t\tDomain: strings.TrimSuffix(cs.ServerName, \".\"+s.HTTPSServer.Domain),\n\t\t\t\t\tData:   append(append([]byte{0x02}, bb...), b...),\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\tcase s.DomainData <- d:\n\t\t\t\t}\n\t\t\t\ts.Cache.Delete(tc.RemoteAddr().String())\n\t\t\t\ttc.Close()\n\t\t\t}()\n\t\t\tvar bf [1024 * 2]byte\n\t\t\tfor {\n\t\t\t\tif s.HTTPSServer.TLSDeadline != 0 {\n\t\t\t\t\tif err := tc.SetDeadline(time.Now().Add(time.Duration(s.HTTPSServer.TLSDeadline) * time.Second)); err != nil {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti, err := tc.Read(bf[:])\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tp := &zoro.TCPPacket{\n\t\t\t\t\tAddress: tc.RemoteAddr().String(),\n\t\t\t\t\tData:    bf[0:i],\n\t\t\t\t}\n\t\t\t\tb, err := proto.Marshal(p)\n\t\t\t\tif err != nil {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-s.Done:\n\t\t\t\t\t\treturn\n\t\t\t\t\tcase s.Error <- err:\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tbb := make([]byte, 2)\n\t\t\t\tbinary.BigEndian.PutUint16(bb, uint16(len(b)))\n\t\t\t\td := DomainData{\n\t\t\t\t\tDomain: strings.TrimSuffix(cs.ServerName, \".\"+s.HTTPSServer.Domain),\n\t\t\t\t\tData:   append(append([]byte{0x01}, bb...), b...),\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase <-s.Done:\n\t\t\t\t\treturn\n\t\t\t\tcase s.DomainData <- d:\n\t\t\t\t}\n\t\t\t}\n\t\t}(tc)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\ntype DomainData struct {\n\tDomain string\n\tData   []byte\n}\n\ntype HTTPSServer struct {\n\tConfig *tls.Config\n}\n\ntype Cache struct{}\n\ntype TLSServer struct {\n\tHTTPSServer *HTTPSServer\n\tCache       *Cache\n\tTCPListen   *net.TCPListener\n\tDone        chan byte\n\tDomainData  chan DomainData\n\tError       chan error\n}\n\nfunc NewTLSServer(httpsserver *HTTPSServer) (*TLSServer, error) {\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", \":443\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tlistener, err := net.ListenTCP(\"tcp\", tcpAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttlsConfig := &tls.Config{\n\t\tMinVersion: tls.VersionTLS12,\n\t}\n\ttlsListener := tls.NewListener(listener, tlsConfig)\n\tserver := &TLSServer{\n\t\tHTTPSServer: httpsserver,\n\t\tCache:       &Cache{},\n\t\tTCPListen:   tlsListener,\n\t\tDone:        make(chan byte),\n\t\tDomainData:  make(chan DomainData),\n\t\tError:       make(chan error),\n\t}\n\tgo server.ListenAndServe()\n\treturn server, nil\n}\n\nfunc (s *TLSServer) ListenAndServe() error {\n\tfor {\n\t\tselect {\n\t\tcase <-s.Done:\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := s.TCPListen.Accept()\n\t\t\tif err != nil {\n\t\t\t\ts.Error <- err\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tgo s.Accept(conn)\n\t\t}\n\t}\n}\n\nfunc (s *TLSServer) Shutdown() {\n\tclose(s.Done)\n}\n\nfunc (s *TLSServer) Accept(conn net.Conn) {\n\ttlsConn := conn.(*tls.Conn)\n\terr := tlsConn.Handshake()\n\tif err != nil {\n\t\ts.Error <- err\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\t// Process domain-specific data\n\tdomainData := DomainData{\n\t\tDomain: \"example.com\",\n\t\tData:   []byte(\"test data\"),\n\t}\n\ts.DomainData <- domainData\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Implement an HTTP transport struct for sending tracing spans to a collector using Thrift serialization and HTTP protocol.\n\nStruct Description: HTTPTransport is a struct that handles batching and sending tracing spans to a remote collector via HTTP. It supports basic authentication and custom HTTP client configuration.\n\nFields:\n- logger: jaeger.Logger - Logger for reporting errors and debug information\n- url: string - The collector endpoint URL\n- client: *http.Client - Custom HTTP client for making requests\n- batchSize: int - Maximum number of spans to batch before flushing\n- batch: []*zipkincore.Span - Current batch of spans waiting to be sent\n- httpCredentials: *HTTPBasicAuthCredentials - Optional basic auth credentials\n\nMethods:\n- NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) - Constructor that creates a new HTTPTransport with default values and applies options\n- Append(span *jaeger.Span) (int, error) - Adds a span to the current batch, flushes if batch size is reached\n- Flush() (int, error) - Sends all batched spans to the collector and resets the batch\n- Close() error - Cleanup method (currently no-op)\n- send(spans []*zipkincore.Span) error - Internal method that serializes and sends spans via HTTP POST\n- httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) - Helper method that serializes spans using Thrift protocol\n\nAdditional Struct:\n- HTTPBasicAuthCredentials: struct - Holds basic authentication credentials\n  Fields:\n  - username: string - Basic auth username\n  - password: string - Basic auth password",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/uber/jaeger-client-go\"\n\t\"github.com/uber/jaeger-client-go/log\"\n\t\"github.com/uber/jaeger-client-go/thrift\"\n\t\"github.com/uber/jaeger-client-go/thrift-gen/zipkincore\"\n)\n\ntype HTTPTransport struct {\n\tlogger          jaeger.Logger\n\turl             string\n\tclient          *http.Client\n\tbatchSize       int\n\tbatch           []*zipkincore.Span\n\thttpCredentials *HTTPBasicAuthCredentials\n}\n\ntype HTTPBasicAuthCredentials struct {\n\tusername string\n\tpassword string\n}\n\nfunc NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) {\n\tc := &HTTPTransport{\n\t\tlogger:    log.NullLogger,\n\t\turl:       url,\n\t\tclient:    &http.Client{Timeout: defaultHTTPTimeout},\n\t\tbatchSize: 100,\n\t\tbatch:     []*zipkincore.Span{},\n\t}\n\n\tfor _, option := range options {\n\t\toption(c)\n\t}\n\treturn c, nil\n}\n\nfunc (c *HTTPTransport) Append(span *jaeger.Span) (int, error) {\n\tzSpan := jaeger.BuildZipkinThrift(span)\n\tc.batch = append(c.batch, zSpan)\n\tif len(c.batch) >= c.batchSize {\n\t\treturn c.Flush()\n\t}\n\treturn 0, nil\n}\n\nfunc (c *HTTPTransport) Flush() (int, error) {\n\tcount := len(c.batch)\n\tif count == 0 {\n\t\treturn 0, nil\n\t}\n\terr := c.send(c.batch)\n\tc.batch = c.batch[:0]\n\treturn count, err\n}\n\nfunc (c *HTTPTransport) Close() error {\n\treturn nil\n}\n\nfunc (c *HTTPTransport) send(spans []*zipkincore.Span) error {\n\tbody, err := httpSerialize(spans)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq, err := http.NewRequest(\"POST\", c.url, body)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/x-thrift\")\n\n\tif c.httpCredentials != nil {\n\t\treq.SetBasicAuth(c.httpCredentials.username, c.httpCredentials.password)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\trespBytes, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"could not read response from collector: %s\", err)\n\t}\n\n\tif resp.StatusCode >= http.StatusBadRequest {\n\t\treturn fmt.Errorf(\"error from collector: code=%d body=%q\", resp.StatusCode, string(respBytes))\n\t}\n\n\treturn nil\n}\n\nfunc httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) {\n\tt := thrift.NewTMemoryBuffer()\n\tp := thrift.NewTBinaryProtocolTransport(t)\n\tctx := context.Background()\n\tif err := p.WriteListBegin(ctx, thrift.STRUCT, len(spans)); err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, s := range spans {\n\t\tif err := s.Write(ctx, p); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif err := p.WriteListEnd(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\treturn t.Buffer, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package jaegertransport\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/apache/thrift/lib/go/thrift\"\n\t\"github.com/jaegertracing/jaeger/model\"\n\t\"github.com/jaegertracing/jaeger/proto-gen/zipkincore\"\n\t\"github.com/jaegertracing/jaeger/storage/spanstore\"\n\t\"github.com/opentracing/basictracer-go\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"github.com/opentracing/opentracing-go/log\"\n)\n\ntype HTTPBasicAuthCredentials struct {\n\tUsername string\n\tPassword string\n}\n\ntype HTTPOption func(*HTTPTransport)\n\nfunc WithBatchSize(size int) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.batchSize = size\n\t}\n}\n\nfunc WithClient(client *http.Client) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.client = client\n\t}\n}\n\nfunc WithHTTPCredentials(credentials *HTTPBasicAuthCredentials) HTTPOption {\n\treturn func(t *HTTPTransport) {\n\t\tt.httpCredentials = credentials\n\t}\n}\n\ntype HTTPTransport struct {\n\tlogger           opentracing.Logger\n\turl              string\n\tclient           *http.Client\n\tbatchSize        int\n\tbatch            []*zipkincore.Span\n\thttpCredentials  *HTTPBasicAuthCredentials\n\tmu               sync.Mutex\n}\n\nfunc NewHTTPTransport(url string, options ...HTTPOption) (*HTTPTransport, error) {\n\tif url == \"\" {\n\t\treturn nil, errors.New(\"url is required\")\n\t}\n\n\tt := &HTTPTransport{\n\t\tlogger:    opentracing.GlobalLogger(),\n\t\turl:       url,\n\t\tbatchSize: 100,\n\t}\n\n\tfor _, option := range options {\n\t\toption(t)\n\t}\n\n\tif t.client == nil {\n\t\tt.client = &http.Client{\n\t\t\tTimeout: 10 * time.Second,\n\t\t}\n\t}\n\n\treturn t, nil\n}\n\nfunc (t *HTTPTransport) Append(span *jaeger.Span) (int, error) {\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\n\tif span == nil {\n\t\treturn 0, nil\n\t}\n\n\t// Convert jaeger.Span to zipkincore.Span\n\tzipSpan := &zipkincore.Span{}\n\tspan.CopyTo(zipSpan)\n\n\tt.batch = append(t.batch, zipSpan)\n\n\tif len(t.batch) >= t.batchSize {\n\t\treturn t.Flush()\n\t}\n\n\treturn len(t.batch), nil\n}\n\nfunc (t *HTTPTransport) Flush() (int, error) {\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\n\tif len(t.batch) == 0 {\n\t\treturn 0, nil\n\t}\n\n\tserialized, err := t.httpSerialize(t.batch)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\terr = t.send(serialized)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tt.batch = make([]*zipkincore.Span, 0)\n\treturn len(t.batch), nil\n}\n\nfunc (t *HTTPTransport) Close() error {\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\n\treturn t.Flush()\n}\n\nfunc (t *HTTPTransport) send(spans []*zipkincore.Span) error {\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\n\t// Prepare request\n\treq, err := http.NewRequest(\"POST\", t.url, bytes.NewBuffer(spans))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/x-thrift\")\n\n\tif t.httpCredentials != nil {\n\t\treq.SetBasicAuth(t.httpCredentials.Username, t.httpCredentials.Password)\n\t}\n\n\tresp, err := t.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\"HTTP request failed: %s %s\", resp.Status, body)\n\t}\n\n\treturn nil\n}\n\nfunc (t *HTTPTransport) httpSerialize(spans []*zipkincore.Span) (*bytes.Buffer, error) {\n\ttransport := thrift.NewTMemoryTransport(bytes.NewBuffer(nil), 1024*1024)\n\tprotocol := thrift.NewTBinaryProtocolTransport(transport)\n\tencoder := zipkincore.NewZipkinCoreEncoder(protocol)\n\n\tfor _, span := range spans {\n\t\tencoder.Encode(span)\n\t}\n\n\tif transport.Err() != nil {\n\t\treturn nil, transport.Err()\n\t}\n\n\treturn transport.GetUnderlyingBytes(), nil\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both query and write operations with configurable connection settings, authentication, and request parameters.\n\nStruct Description: The Client struct represents an InfluxDB client with configurable connection settings and methods for executing queries and writing data points.\n\nFields:\n\nurl: url.URL - Base URL of the InfluxDB server\nunixSocket: string - Path to Unix domain socket for connection (alternative to TCP)\nusername: string - Username for basic authentication\npassword: string - Password for basic authentication\nhttpClient: *http.Client - Custom HTTP client with configured transport and timeout\nuserAgent: string - User agent string for HTTP requests\nprecision: string - Default precision for timestamps in queries/writes\n\nMethods:\n\nNewClient: [Name](Config) -> (*Client, error) - Creates a new Client instance with the provided configuration, setting up TLS, proxy, and Unix socket options as needed.\n\nQueryContext: [Name](context.Context, Query) -> (*Response, error) - Executes a query against the InfluxDB server with context support, handling both regular and chunked responses.\n\nWrite: [Name](BatchPoints) -> (*Response, error) - Writes a batch of points to the InfluxDB server, handling serialization and request configuration.\n\nThe Client provides methods for both querying and writing data to InfluxDB with support for:\n- Custom HTTP client configuration (timeouts, TLS, proxies)\n- Unix socket connections\n- Basic authentication\n- Chunked query responses\n- Custom precision for timestamps\n- Context-aware operations\n- Error handling for HTTP and InfluxDB-specific errors",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"path\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tunixSocket string\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := new(tls.Config)\n\tif c.TLS != nil {\n\t\ttlsConfig = c.TLS.Clone()\n\t}\n\ttlsConfig.InsecureSkipVerify = c.UnsafeSsl\n\n\ttr := &http.Transport{\n\t\tProxy:           c.Proxy,\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tif c.UnixSocket != \"\" {\n\t\ttr.DisableCompression = true\n\t\ttr.DialContext = func(_ context.Context, _, _ string) (net.Conn, error) {\n\t\t\treturn net.Dial(\"unix\", c.UnixSocket)\n\t\t}\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tunixSocket: c.UnixSocket,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) QueryContext(ctx context.Context, q Query) (*Response, error) {\n\tu := c.url\n\tu.Path = path.Join(u.Path, \"query\")\n\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.RetentionPolicy != \"\" {\n\t\tvalues.Set(\"rp\", q.RetentionPolicy)\n\t}\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif q.NodeID > 0 {\n\t\tvalues.Set(\"node_id\", strconv.Itoa(q.NodeID))\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"POST\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\treq = req.WithContext(ctx)\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = path.Join(u.Path, \"write\")\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/influxdata/influxdb1-client/v2\"\n)\n\ntype Config struct {\n\tURL        string\n\tUnixSocket string\n\tUsername   string\n\tPassword   string\n\tUserAgent  string\n\tPrecision  string\n}\n\ntype Client struct {\n\turl         url.URL\n\tunixSocket  string\n\tusername    string\n\tpassword    string\n\thttpClient  *http.Client\n\tuserAgent   string\n\tprecision   string\n\tclient      *client.Client\n}\n\nfunc NewClient(cfg Config) (*Client, error) {\n\tvar client *client.Client\n\tvar err error\n\n\tif cfg.UnixSocket != \"\" {\n\t\tclient, err = client.NewClient(client.Config{\n\t\t\tURL:           \"unix://\" + cfg.UnixSocket,\n\t\t\tUsername:      cfg.Username,\n\t\t\tPassword:      cfg.Password,\n\t\t\tTimeout:       30 * time.Second,\n\t\t\tUserAgent:     cfg.UserAgent,\n\t\t\tPrecision:     cfg.Precision,\n\t\t})\n\t} else {\n\t\tclient, err = client.NewClient(client.Config{\n\t\t\tURL:           cfg.URL,\n\t\t\tUsername:      cfg.Username,\n\t\t\tPassword:      cfg.Password,\n\t\t\tTimeout:       30 * time.Second,\n\t\t\tUserAgent:     cfg.UserAgent,\n\t\t\tPrecision:     cfg.Precision,\n\t\t})\n\t}\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Client{\n\t\turl:         url.Parse(cfg.URL),\n\t\tunixSocket:  cfg.UnixSocket,\n\t\tusername:    cfg.Username,\n\t\tpassword:    cfg.Password,\n\t\thttpClient:  &http.Client{},\n\t\tuserAgent:   cfg.UserAgent,\n\t\tprecision:   cfg.Precision,\n\t\tclient:      client,\n\t}, nil\n}\n\nfunc (c *Client) QueryContext(ctx context.Context, q string) (*client.Response, error) {\n\tresponse, err := c.client.Query(context.Background(), q)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn response, nil\n}\n\nfunc (c *Client) Write(bp *client.BatchPoints) (*client.Response, error) {\n\tresponse, err := c.client.Write(bp)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn response, nil\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a TCP server in Go that handles multiple client connections concurrently, with configurable timeouts and graceful shutdown capabilities.\n\nStruct Description: The Server struct represents a TCP server with configurable network settings, timeouts, and connection management.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (e.g., \"tcp\", \"tcp4\", \"tcp6\")\nHandler: Handler - Interface for handling incoming requests\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nlock: sync.RWMutex - Protects concurrent access to server state\nstarted: bool - Indicates if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Active connections map\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nShutdownContext(context.Context) error - Gracefully shuts down the server with context support\nisStarted() bool - Helper method to check server status (internal use)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr    string\n\tNet     string\n\tHandler Handler\n\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tcp: rw, writer: w}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}\n\nfunc (srv *Server) ShutdownContext(ctx context.Context) error {\n\tsrv.lock.Lock()\n\tif !srv.started {\n\t\tsrv.lock.Unlock()\n\t\treturn &Error{err: \"server not started\"}\n\t}\n\n\tsrv.started = false\n\n\tif srv.Listener != nil {\n\t\tsrv.Listener.Close()\n\t}\n\n\tfor rw := range srv.conns {\n\t\trw.SetReadDeadline(aLongTimeAgo)\n\t}\n\n\tsrv.lock.Unlock()\n\n\tvar ctxErr error\n\tselect {\n\tcase <-srv.shutdown:\n\tcase <-ctx.Done():\n\t\tctxErr = ctx.Err()\n\t}\n\n\treturn ctxErr\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tServeTCP(conn net.Conn)\n}\n\ntype Server struct {\n\tAddr      string\n\tNet       string\n\tHandler   Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown   chan struct{}\n\tconns      map[net.Conn]struct{}\n}\n\nfunc (s *Server) ListenAndServe() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tif s.started {\n\t\treturn fmt.Errorf(\"server already started\")\n\t}\n\n\ts.started = true\n\ts.shutdown = make(chan struct{})\n\ts.conns = make(map[net.Conn]struct{})\n\n\tlistener, err := net.Listen(s.Net, s.Addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgo s.serveTCP(listener)\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(ln net.Listener) error {\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tif opErr, ok := err.(net.OpError); ok && opErr.Timeout() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\ts.lock.Lock()\n\t\ts.conns[conn] = struct{}{}\n\t\ts.lock.Unlock()\n\n\t\twg := &sync.WaitGroup{}\n\t\twg.Add(1)\n\t\tgo s.serveTCPConn(wg, conn)\n\t}\n\n\treturn nil\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer wg.Done()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\n\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\n\tidleTimeout := s.IdleTimeout()\n\tconn.SetReadDeadline(time.Now().Add(idleTimeout))\n\n\ts.Handler.ServeTCP(conn)\n}\n\nfunc (s *Server) ShutdownContext(ctx context.Context) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tif !s.started {\n\t\treturn nil\n\t}\n\n\tclose(s.shutdown)\n\ts.started = false\n\n\tfor conn := range s.conns {\n\t\tconn.Close()\n\t}\n\n\treturn nil\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Implement a TCP server in Go that can handle multiple client connections concurrently, with support for both plain TCP and TLS-secured connections. The server should manage connection timeouts, track active connections, and provide hooks for custom message handling.\n\nStruct Description: The Server struct represents a TCP server that can listen for incoming connections, handle them concurrently, and manage server lifecycle operations. It supports both plain TCP and TLS configurations.\n\nFields:\n\nAddr: string - The network address to listen on (e.g., \":8080\")\nNet: string - The network type (tcp, tcp4, tcp6, or their TLS variants)\nListener: net.Listener - The active network listener\nTLSConfig: *tls.Config - Configuration for TLS connections\nPacketConn: net.PacketConn - UDP connection handler (unused in TCP implementation)\nHandler: Handler - Interface for handling incoming messages\nReadTimeout: time.Duration - Maximum duration for reading a request\nWriteTimeout: time.Duration - Maximum duration for writing a response\nIdleTimeout: func() time.Duration - Function returning idle connection timeout\nMsgAcceptFunc: MsgAcceptFunc - Function to filter acceptable messages\nlock: sync.RWMutex - Mutex for protecting concurrent access to server state\nstarted: bool - Flag indicating if server is running\nshutdown: chan struct{} - Channel for shutdown signaling\nconns: map[net.Conn]struct{} - Map of active connections\nudpPool: sync.Pool - Pool for UDP resources (unused in TCP implementation)\n\nMethods:\n\nListenAndServe() error - Starts the server and begins accepting connections\nserveTCP(net.Listener) error - Internal method to handle TCP connections\nserveTCPConn(*sync.WaitGroup, net.Conn) - Handles an individual TCP connection\nisStarted() bool - Helper method to check server running state\ninit() - Initializes server internal structures\ngetReadTimeout() time.Duration - Gets the current read timeout value",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Server struct {\n\tAddr         string\n\tNet          string\n\tListener     net.Listener\n\tTLSConfig    *tls.Config\n\tPacketConn   net.PacketConn\n\tHandler      Handler\n\tReadTimeout  time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout  func() time.Duration\n\tMsgAcceptFunc MsgAcceptFunc\n\n\tlock     sync.RWMutex\n\tstarted  bool\n\tshutdown chan struct{}\n\tconns    map[net.Conn]struct{}\n\tudpPool  sync.Pool\n}\n\nfunc (srv *Server) ListenAndServe() error {\n\tunlock := unlockOnce(&srv.lock)\n\tsrv.lock.Lock()\n\tdefer unlock()\n\n\tif srv.started {\n\t\treturn &Error{err: \"server already started\"}\n\t}\n\n\taddr := srv.Addr\n\tif addr == \"\" {\n\t\taddr = \":domain\"\n\t}\n\n\tsrv.init()\n\n\tswitch srv.Net {\n\tcase \"tcp\", \"tcp4\", \"tcp6\":\n\t\tl, err := listenTCP(srv.Net, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\tcase \"tcp-tls\", \"tcp4-tls\", \"tcp6-tls\":\n\t\tif srv.TLSConfig == nil || (len(srv.TLSConfig.Certificates) == 0 && srv.TLSConfig.GetCertificate == nil) {\n\t\t\treturn errors.New(\"dns: neither Certificates nor GetCertificate set in Config\")\n\t\t}\n\t\tnetwork := strings.TrimSuffix(srv.Net, \"-tls\")\n\t\tl, err := listenTCP(network, addr, srv.ReusePort)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tl = tls.NewListener(l, srv.TLSConfig)\n\t\tsrv.Listener = l\n\t\tsrv.started = true\n\t\tunlock()\n\t\treturn srv.serveTCP(l)\n\t}\n\treturn &Error{err: \"bad network\"}\n}\n\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\tvar wg sync.WaitGroup\n\tdefer func() {\n\t\twg.Wait()\n\t\tclose(srv.shutdown)\n\t}()\n\n\tfor srv.isStarted() {\n\t\trw, err := l.Accept()\n\t\tif err != nil {\n\t\t\tif !srv.isStarted() {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tsrv.lock.Lock()\n\t\tsrv.conns[rw] = struct{}{}\n\t\tsrv.lock.Unlock()\n\t\twg.Add(1)\n\t\tgo srv.serveTCPConn(&wg, rw)\n\t}\n\n\treturn nil\n}\n\nfunc (srv *Server) serveTCPConn(wg *sync.WaitGroup, rw net.Conn) {\n\tw := &response{tsigSecret: srv.TsigSecret, tcp: rw}\n\tif srv.DecorateWriter != nil {\n\t\tw.writer = srv.DecorateWriter(w)\n\t} else {\n\t\tw.writer = w\n\t}\n\n\treader := Reader(defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\tidleTimeout := tcpIdleTimeout\n\tif srv.IdleTimeout != nil {\n\t\tidleTimeout = srv.IdleTimeout()\n\t}\n\n\ttimeout := srv.getReadTimeout()\n\n\tlimit := srv.MaxTCPQueries\n\tif limit == 0 {\n\t\tlimit = maxTCPQueries\n\t}\n\n\tfor q := 0; (q < limit || limit == -1) && srv.isStarted(); q++ {\n\t\tm, err := reader.ReadTCP(w.tcp, timeout)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tsrv.serveDNS(m, w)\n\t\tif w.closed {\n\t\t\tbreak\n\t\t}\n\t\tif w.hijacked {\n\t\t\tbreak\n\t\t}\n\t\ttimeout = idleTimeout\n\t}\n\n\tif !w.hijacked {\n\t\tw.Close()\n\t}\n\n\tsrv.lock.Lock()\n\tdelete(srv.conns, w.tcp)\n\tsrv.lock.Unlock()\n\n\twg.Done()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Handler interface {\n\tHandle(conn net.Conn)\n}\n\ntype MsgAcceptFunc func(conn net.Conn) bool\n\ntype Server struct {\n\tAddr        string\n\tNet         string\n\tListener    net.Listener\n\tTLSConfig   *tls.Config\n\tPacketConn  net.PacketConn\n\tHandler     Handler\n\tReadTimeout time.Duration\n\tWriteTimeout time.Duration\n\tIdleTimeout func() time.Duration\n\tMsgAcceptFunc MsgAcceptFunc\n\tlock        sync.RWMutex\n\tstarted     bool\n\tshutdown    chan struct{}\n\tconns       map[net.Conn]struct{}\n\tudpPool     sync.Pool\n}\n\nfunc (s *Server) ListenAndServe() error {\n\tif s.started {\n\t\treturn fmt.Errorf(\"server already started\")\n\t}\n\ts.started = true\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n\tgo s.serveTCP(s.Listener)\n\treturn nil\n}\n\nfunc (s *Server) serveTCP(listener net.Listener) error {\n\tfor {\n\t\tselect {\n\t\tcase <-s.shutdown:\n\t\t\tlistener.Close()\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tif ne, ok := err.(net.Error); ok && ne.Temporary() {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t\ts.lock.Lock()\n\t\t\tif s.MsgAcceptFunc != nil && !s.MsgAcceptFunc(conn) {\n\t\t\t\tconn.Close()\n\t\t\t\ts.lock.Unlock()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ts.conns[conn] = struct{}{}\n\t\t\ts.lock.Unlock()\n\t\t\tgo s.serveTCPConn(&sync.WaitGroup{}, conn)\n\t\t}\n\t}\n}\n\nfunc (s *Server) serveTCPConn(wg *sync.WaitGroup, conn net.Conn) {\n\tdefer wg.Done()\n\tdefer func() {\n\t\ts.lock.Lock()\n\t\tdelete(s.conns, conn)\n\t\ts.lock.Unlock()\n\t\tconn.Close()\n\t}()\n\tconn.SetReadDeadline(time.Now().Add(s.ReadTimeout))\n\tconn.SetWriteDeadline(time.Now().Add(s.WriteTimeout))\n\ts.Handler.Handle(conn)\n}\n\nfunc (s *Server) isStarted() bool {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\treturn s.started\n}\n\nfunc (s *Server) getReadTimeout() time.Duration {\n\treturn s.ReadTimeout\n}\n\nfunc (s *Server) init() {\n\ts.conns = make(map[net.Conn]struct{})\n\ts.shutdown = make(chan struct{})\n}"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a TCP server in Go that listens for incoming connections, sets specific IPv6 traffic class and hop limit for IPv6 connections, and sends an acknowledgment message to each client.\n\nFunction Description: The function establishes a TCP server on port 1024 that continuously accepts client connections. For each connection, it checks if the client is using IPv6 and configures specific network parameters (traffic class and hop limit) if so. It then sends a fixed acknowledgment message (\"HELLO-R-U-THERE-ACK\") to the client before closing the connection. Each client connection is handled in a separate goroutine.\n\nInput: None (The function takes no explicit parameters but binds to port 1024 by default)\n\nOutput: None (The function doesn't return any value but maintains persistent network operations and may log fatal errors)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc ExampleConn_markingTCP() {\n\tln, err := net.Listen(\"tcp\", \"[::]:1024\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ln.Close()\n\n\tfor {\n\t\tc, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tdefer c.Close()\n\t\t\tif c.RemoteAddr().(*net.TCPAddr).IP.To16() != nil && c.RemoteAddr().(*net.TCPAddr).IP.To4() == nil {\n\t\t\t\tp := ipv6.NewConn(c)\n\t\t\t\tif err := p.SetTrafficClass(0x28); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif err := p.SetHopLimit(128); err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Write([]byte(\"HELLO-R-U-THERE-ACK\")); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}(c)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 109,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"syscall\"\n\t\"time\"\n)\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\tif ipv6, ok := conn.RemoteAddr().(*net.IPAddr); ok && ipv6.IP.To4() == nil {\n\t\tfd, err := conn.File()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to get file descriptor: %v\\n\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer fd.Close()\n\t\tif err := syscall.SetsockoptInt(fd.Fd(), syscall.IPPROTO_IPV6, syscall.IPV6_TCLASS, 0x10); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to set traffic class: %v\\n\", err)\n\t\t}\n\t\tif err := syscall.SetsockoptInt(fd.Fd(), syscall.IPPROTO_IPV6, syscall.IPV6_HOPLIMIT, 255); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Failed to set hop limit: %v\\n\", err)\n\t\t}\n\t}\n\t_, _ = fmt.Fprintf(conn, \"HELLO-R-U-THERE-ACK\")\n}\n\nfunc main() {\n\tlistener, err := net.Listen(\"tcp6\", \"[::]:1024\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to listen: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer listener.Close()\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Accept error: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tgo handleConnection(conn)\n\t}\n}"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Create a gRPC client in Go that communicates with a Unix domain socket server for various deployment operations.\n\nStruct Description: The DeployClient struct represents a gRPC client that connects to a deployment agent server via Unix domain socket and provides methods for different deployment operations.\n\nFields:\nsocketPath: string - The filesystem path to the Unix domain socket for connecting to the gRPC server\n\nMethods:\nNewDeployClient: [Name](socketPath string) -> *DeployClient - Creates a new DeployClient instance with the specified socket path\nDeployGuestFs: [Name](ctx context.Context, in *deployapi.DeployParams, opts ...grpc.CallOption) -> (*deployapi.DeployGuestFsResponse, error) - Deploys guest filesystem\nResizeFs: [Name](ctx context.Context, in *deployapi.ResizeFsParams, opts ...grpc.CallOption) -> (*deployapi.Empty, error) - Resizes filesystem\nFormatFs: [Name](ctx context.Context, in *deployapi.FormatFsParams, opts ...grpc.CallOption) -> (*deployapi.Empty, error) - Formats filesystem\nSaveToGlance: [Name](ctx context.Context, in *deployapi.SaveToGlanceParams, opts ...grpc.CallOption) -> (*deployapi.SaveToGlanceResponse, error) - Saves image to Glance\nProbeImageInfo: [Name](ctx context.Context, in *deployapi.ProbeImageInfoPramas, opts ...grpc.CallOption) -> (*deployapi.ImageInfo, error) - Probes image information\nConnectEsxiDisks: [Name](ctx context.Context, in *deployapi.ConnectEsxiDisksParams, opts ...grpc.CallOption) -> (*deployapi.EsxiDisksConnectionInfo, error) - Connects ESXi disks\nDisconnectEsxiDisks: [Name](ctx context.Context, in *deployapi.EsxiDisksConnectionInfo, opts ...grpc.CallOption) -> (*deployapi.Empty, error) - Disconnects ESXi disks",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\tdeployapi \"yunion.io/x/onecloud/pkg/hostman/hostdeployer/apis\"\n)\n\ntype DeployClient struct {\n\tsocketPath string\n}\n\nfunc NewDeployClient(socketPath string) *DeployClient {\n\treturn &DeployClient{socketPath}\n}\n\nfunc grcpDialWithUnixSocket(ctx context.Context, socketPath string) (*grpc.ClientConn, error) {\n\treturn grpc.DialContext(ctx, socketPath, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(time.Second*3),\n\t\tgrpc.WithDialer(func(addr string, timeout time.Duration) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(\"unix\", addr, timeout)\n\t\t}),\n\t)\n}\n\nfunc (c *DeployClient) DeployGuestFs(ctx context.Context, in *deployapi.DeployParams, opts ...grpc.CallOption) (*deployapi.DeployGuestFsResponse, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\tret, err := client.DeployGuestFs(ctx, in, opts...)\n\treturn ret, err\n}\n\nfunc (c *DeployClient) ResizeFs(ctx context.Context, in *deployapi.ResizeFsParams, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.ResizeFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) FormatFs(ctx context.Context, in *deployapi.FormatFsParams, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.FormatFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) SaveToGlance(ctx context.Context, in *deployapi.SaveToGlanceParams, opts ...grpc.CallOption) (*deployapi.SaveToGlanceResponse, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.SaveToGlance(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ProbeImageInfo(ctx context.Context, in *deployapi.ProbeImageInfoPramas, opts ...grpc.CallOption) (*deployapi.ImageInfo, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.ProbeImageInfo(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ConnectEsxiDisks(\n\tctx context.Context, in *deployapi.ConnectEsxiDisksParams, opts ...grpc.CallOption,\n) (*deployapi.EsxiDisksConnectionInfo, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.ConnectEsxiDisks(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) DisconnectEsxiDisks(\n\tctx context.Context, in *deployapi.EsxiDisksConnectionInfo, opts ...grpc.CallOption,\n) (*deployapi.Empty, error) {\n\tconn, err := grcpDialWithUnixSocket(ctx, c.socketPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := deployapi.NewDeployAgentClient(conn)\n\treturn client.DisconnectEsxiDisks(ctx, in, opts...)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 120,
    "wrong_result": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\ntype DeployClient struct {\n\tconn *grpc.ClientConn\n}\n\nfunc NewDeployClient(socketPath string) (*DeployClient, error) {\n\taddr := fmt.Sprintf(\"unix://%s\", socketPath)\n\tconn, err := grpc.Dial(addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &DeployClient{conn: conn}, nil\n}\n\nfunc (c *DeployClient) DeployGuestFs(ctx context.Context, in *deployapi.DeployParams, opts ...grpc.CallOption) (*deployapi.DeployGuestFsResponse, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.DeployGuestFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ResizeFs(ctx context.Context, in *deployapi.ResizeFsParams, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.ResizeFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) FormatFs(ctx context.Context, in *deployapi.FormatFsParams, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.FormatFs(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) SaveToGlance(ctx context.Context, in *deployapi.SaveToGlanceParams, opts ...grpc.CallOption) (*deployapi.SaveToGlanceResponse, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.SaveToGlance(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ProbeImageInfo(ctx context.Context, in *deployapi.ProbeImageInfoPramas, opts ...grpc.CallOption) (*deployapi.ImageInfo, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.ProbeImageInfo(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) ConnectEsxiDisks(ctx context.Context, in *deployapi.ConnectEsxiDisksParams, opts ...grpc.CallOption) (*deployapi.EsxiDisksConnectionInfo, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.ConnectEsxiDisks(ctx, in, opts...)\n}\n\nfunc (c *DeployClient) DisconnectEsxiDisks(ctx context.Context, in *deployapi.EsxiDisksConnectionInfo, opts ...grpc.CallOption) (*deployapi.Empty, error) {\n\tclient := deployapi.NewDeploymentServiceClient(c.conn)\n\treturn client.DisconnectEsxiDisks(ctx, in, opts...)\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a Go client for interacting with Rancher metadata service, capable of making HTTP requests with custom headers and handling connection testing with exponential backoff.\n\nStruct Description: The Client struct represents a Rancher metadata client that manages HTTP connections to Rancher metadata service endpoints.\n\nFields:\nurl: string - The base URL for Rancher metadata service (default: \"http://rancher-metadata\")\nhttpClient: *http.Client - The HTTP client used for making requests\n\nMethods:\nNewRancherClient: (backendNodes []string) -> (*Client, error) - Creates a new Rancher client instance, optionally using the first backend node if provided, and tests the connection\nmakeMetaDataRequest: (path string) -> ([]byte, error) - Makes a GET request to the specified path with JSON accept header, returns response body\ntestConnection: () -> error - Tests the connection to the metadata service with exponential backoff retry logic (up to 20 seconds)",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\turl := \"http://rancher-metadata\"\n\n\tif len(backendNodes) > 0 {\n\t\turl = \"http://\" + backendNodes[0]\n\t}\n\n\tclient := &Client{\n\t\turl:        url,\n\t\thttpClient: &http.Client{},\n\t}\n\n\terr := client.testConnection()\n\treturn client, err\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\treq, _ := http.NewRequest(\"GET\", strings.Join([]string{c.url, path}, \"\"), nil)\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\treturn ioutil.ReadAll(resp.Body)\n}\n\nfunc (c *Client) testConnection() error {\n\tvar err error\n\tmaxTime := 20 * time.Second\n\n\tfor i := 1 * time.Second; i < maxTime; i *= time.Duration(2) {\n\t\tif _, err = c.makeMetaDataRequest(\"/\"); err != nil {\n\t\t\ttime.Sleep(i)\n\t\t} else {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl      string\n\thttpClient *http.Client\n}\n\nfunc NewRancherClient(backendNodes []string) (*Client, error) {\n\tclient := &Client{\n\t\turl: \"http://rancher-metadata\",\n\t}\n\tif len(backendNodes) > 0 {\n\t\tclient.url = fmt.Sprintf(\"http://%s\", backendNodes[0])\n\t}\n\tclient.httpClient = &http.Client{\n\t\tTimeout: 10 * time.Second,\n\t}\n\tif err := client.testConnection(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn client, nil\n}\n\nfunc (c *Client) makeMetaDataRequest(path string) ([]byte, error) {\n\turl := fmt.Sprintf(\"%s/%s\", c.url, path)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Accept\", \"application/json\")\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n\nfunc (c *Client) testConnection() error {\n\tconst maxRetries = 5\n\tconst initialDelay = 1 * time.Second\n\tfor i := 0; i < maxRetries; i++ {\n\t\t_, err := c.makeMetaDataRequest(\"v3/cluster\")\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\t\tdelay := initialDelay * time.Duration(1<<uint(i))\n\t\ttime.Sleep(delay)\n\t}\n\treturn errors.New(\"failed to connect to rancher metadata service after retries\")\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a Go function that makes a gRPC call to a test service's EmptyCall method, handling connection establishment and cleanup.\n\nFunction Description: The function invokes the EmptyCall RPC method on a gRPC test service. It establishes a connection to the server with timeout and blocking options, makes the RPC call, and properly closes the connection. The function handles both connection errors and RPC call errors.\n\nInput:\n- address: string - The server address to connect to\n- dialOptions: []grpc.DialOption - List of gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tdialOptions = append(dialOptions, grpc.WithBlock())\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewTestServiceClient(clientConn)\n\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func CallEmpty(address string, dialOptions []grpc.DialOption) (*testpb.Empty, error) {\n\tconn, err := grpc.Dial(address, append(dialOptions, grpc.WithBlock(), grpc.WithTimeout(5*time.Second))...)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := testpb.NewTestServiceClient(conn)\n\tresp, err := client.EmptyCall(context.Background(), &testpb.Empty{})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"RPC call failed: %v\", err)\n\t}\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a function that establishes a secure or insecure gRPC client connection to a server and returns a client instance for making RPC calls.\n\nFunction Description: The function `createGRPCClient` establishes a connection to a gRPC server using the provided server address and security options. It supports both TLS-secured connections (with optional certificate verification) and insecure connections. The function returns a client instance that can be used to make RPC calls to the server.\n\nInput:\n- `serverAddr` (string): The address of the gRPC server in \"host:port\" format\n- `useTLS` (bool): Flag indicating whether to use TLS for the connection\n- `caFile` (string, optional): Path to the CA certificate file for TLS verification (required if useTLS is true)\n- `serverHostOverride` (string, optional): Server name used for TLS hostname verification\n\nOutput:\n- `pb.RouteGuideClient`: A gRPC client instance for making RPC calls\n- `*grpc.ClientConn`: The established gRPC connection (should be closed by the caller when done)\n- `error`: Any error that occurred during connection establishment",
    "Canonical_solution": "import (\n\t\"golang.org/x/net/context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/route_guide/routeguide\"\n\t\"google.golang.org/grpc/grpclog\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tvar sn string\n\t\tif *serverHostOverride != \"\" {\n\t\t\tsn = *serverHostOverride\n\t\t}\n\t\tvar creds credentials.TransportAuthenticator\n\t\tif *caFile != \"\" {\n\t\t\tvar err error\n\t\t\tcreds, err = credentials.NewClientTLSFromFile(*caFile, sn)\n\t\t\tif err != nil {\n\t\t\t\tgrpclog.Fatalf(\"Failed to create TLS credentials %v\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tcreds = credentials.NewClientTLSFromCert(nil, sn)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\tconn, err := grpc.Dial(*serverAddr, opts...)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func createGRPCClient(serverAddr string, useTLS bool, caFile string, serverHostOverride string) (pb.RouteGuideClient, *grpc.ClientConn, error) {\n\tconn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(getTransportCredentials(useTLS, caFile, serverHostOverride)))\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\treturn pb.NewRouteGuideClient(conn), conn, nil\n}\n\nfunc getTransportCredentials(useTLS bool, caFile string, serverHostOverride string) grpc.TransportCredentials {\n\tif !useTLS {\n\t\treturn grpc.InsecureSkipVerifyCredentials()\n\t}\n\tcert, _ := os.ReadFile(caFile)\n\tpool := x509.NewCertPool()\n\tif !pool.AppendCertsFromPEM(cert) {\n\t\treturn grpc.InsecureSkipVerifyCredentials()\n\t}\n\treturn credentials.NewTLS(&tls.Config{\n\t\tRootCAs:            pool,\n\t\tServerName:         serverHostOverride,\n\t\tInsecureSkipVerify: false,\n\t})\n}"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a function to send synchronous HTTP requests with custom configurations including headers, authentication, and transport settings.\n\nFunction Description: The function SendWebRequestSync sends an HTTP request with customizable method, headers, body, and authentication. It handles the response, checks for success status codes, and properly manages resources. The function uses a pre-configured HTTP client with custom transport settings for timeout and TLS configuration.\n\nInput:\n- ctx (context.Context): Context for request cancellation and timeouts\n- webhook (*monitor.SendWebhookSync): Pointer to a struct containing request parameters including:\n  - HttpMethod (string): HTTP method (GET, POST, etc.)\n  - Url (string): Target URL\n  - Body (string): Request body content\n  - ContentType (string): Content-Type header value\n  - User (string): Username for basic auth\n  - Password (string): Password for basic auth\n  - HttpHeader (map[string]string): Additional HTTP headers\n\nOutput:\n- error: Returns nil on success (2xx status code), or an error describing the failure (non-2xx status code or transport error)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"golang.org/x/net/context/ctxhttp\"\n\t\"moul.io/http2curl/v2\"\n\n\t\"yunion.io/x/log\"\n\n\t\"yunion.io/x/onecloud/pkg/apis/monitor\"\n)\nvar netTransport = &http.Transport{\n\tTLSClientConfig: &tls.Config{\n\t\tRenegotiation: tls.RenegotiateFreelyAsClient,\n\t},\n\tProxy: http.ProxyFromEnvironment,\n\tDialContext: (&net.Dialer{\n\t\tTimeout: 30 * time.Second,\n\t}).DialContext,\n\tTLSHandshakeTimeout: 5 * time.Second,\n}\nvar netClient = &http.Client{\n\tTimeout:   time.Second * 30,\n\tTransport: netTransport,\n}\nfunc SendWebRequestSync(ctx context.Context, webhook *monitor.SendWebhookSync) error {\n\tif webhook.HttpMethod == \"\" {\n\t\twebhook.HttpMethod = http.MethodPost\n\t}\n\n\trequest, err := http.NewRequest(webhook.HttpMethod, webhook.Url, bytes.NewReader([]byte(webhook.Body)))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif webhook.ContentType == \"\" {\n\t\twebhook.ContentType = \"application/json\"\n\t}\n\n\trequest.Header.Add(\"Content-Type\", webhook.ContentType)\n\trequest.Header.Add(\"User-Agent\", \"OneCloud Monitor\")\n\n\tif webhook.User != \"\" && webhook.Password != \"\" {\n\t\trequest.Header.Add(\"Authorization\", GetBasicAuthHeader(webhook.User, webhook.Password))\n\t}\n\n\tfor k, v := range webhook.HttpHeader {\n\t\trequest.Header.Set(k, v)\n\t}\n\n\tcurlCmd, _ := http2curl.GetCurlCommand(request)\n\tlog.Debugf(\"webhook curl: %s\", curlCmd)\n\n\tresp, err := ctxhttp.Do(ctx, netClient, request)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode/100 == 2 {\n\t\tif _, err := io.Copy(ioutil.Discard, resp.Body); err != nil {\n\t\t\tlog.Errorf(\"Failed to copy resp.Body to ioutil.Discard: %v\", err)\n\t\t}\n\t\treturn nil\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlog.Errorf(\"Webhook failed statuscode: %s, body: %s\", resp.Status, string(body))\n\treturn fmt.Errorf(\"Webhook response status %v\", resp.Status)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n)\n\ntype SendWebhookSync struct {\n\tHttpMethod  string\n\tUrl         string\n\tBody        string\n\tContentType string\n\tUser        string\n\tPassword    string\n\tHttpHeader  map[string]string\n}\n\nfunc SendWebRequestSync(ctx context.Context, webhook *SendWebhookSync) error {\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\t\td := net.Dialer{\n\t\t\t\t\tTimeout: 10 * time.Second,\n\t\t\t\t}\n\t\t\t\treturn d.DialContext(ctx, network, addr)\n\t\t\t},\n\t\t\tTLSHandshakeTimeout: 10 * time.Second,\n\t\t\tMaxIdleConns:        100,\n\t\t\tMaxIdleConnsPerHost: 50,\n\t\t},\n\t\tTimeout: 30 * time.Second,\n\t}\n\n\treq, err := http.NewRequest(webhook.HttpMethod, webhook.Url, bytes.NewBufferString(webhook.Body))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to create request\")\n\t}\n\n\treq.Header.Set(\"Content-Type\", webhook.ContentType)\n\tif webhook.HttpHeader != nil {\n\t\tfor k, v := range webhook.HttpHeader {\n\t\t\treq.Header.Set(k, v)\n\t\t}\n\t}\n\n\tif webhook.User != \"\" && webhook.Password != \"\" {\n\t\tuserPass := fmt.Sprintf(\"%s:%s\", webhook.User, webhook.Password)\n\t\treq.Header.Set(\"Authorization\", \"Basic \"+base64.StdEncoding.EncodeToString([]byte(userPass)))\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"request failed\")\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"failed to read response body\")\n\t}\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn errors.Errorf(\"unexpected status code: %d - %s\", resp.StatusCode, body)\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a function that establishes a gRPC client connection to a server, with optional TLS security, and returns a client instance for a specified service.\n\nFunction Description: The function `createGRPCClient` initializes a gRPC client connection to a specified server address. It supports both secure (TLS) and insecure connections based on input parameters. After establishing the connection, it creates and returns a client instance for the RouteGuide service.\n\nInput: \n- `serverAddr` (string): The address of the gRPC server to connect to\n- `useTLS` (bool): Flag indicating whether to use TLS for the connection\n- `caFile` (string): Path to the CA certificate file (required if useTLS is true)\n- `serverHostOverride` (string): Server name used for TLS host verification\n\nOutput:\n- `pb.RouteGuideClient`: The generated gRPC client instance for the RouteGuide service\n- `error`: Any error that occurred during connection establishment",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"google.golang.org/grpc/examples/data\"\n\tpb \"google.golang.org/grpc/examples/route_guide/routeguide\"\n)\nfunc main() {\n\tflag.Parse()\n\tvar opts []grpc.DialOption\n\tif *tls {\n\t\tif *caFile == \"\" {\n\t\t\t*caFile = data.Path(\"x509/ca_cert.pem\")\n\t\t}\n\t\tcreds, err := credentials.NewClientTLSFromFile(*caFile, *serverHostOverride)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create TLS credentials: %v\", err)\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\tconn, err := grpc.NewClient(*serverAddr, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"fail to dial: %v\", err)\n\t}\n\tdefer conn.Close()\n\tclient := pb.NewRouteGuideClient(conn)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\tpb \"path/to/your/proto/package\"\n)\n\nfunc createGRPCClient(serverAddr string, useTLS bool, caFile string, serverHostOverride string) (pb.RouteGuideClient, error) {\n\tvar opts []grpc.DialOption\n\tif useTLS {\n\t\t// Load CA certificate\n\t\tcaCert, err := ioutil.ReadFile(caFile)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to read CA certificate: %v\", err)\n\t\t}\n\t\tcaPool := x509.NewCertPool()\n\t\tif !caPool.AppendCertsFromPEM(caCert) {\n\t\t\treturn nil, fmt.Errorf(\"failed to append CA certificate to pool\")\n\t\t}\n\n\t\t// Create TLS credentials\n\t\ttlsConfig := &tls.Config{\n\t\t\tRootCAs:            caPool,\n\t\t\tServerName:         serverHostOverride,\n\t\t\tInsecureSkipVerify: false,\n\t\t}\n\t\tcreds := credentials.NewTLS(tlsConfig)\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t}\n\n\t// Set up connection with timeout\n\tconn, err := grpc.Dial(\n\t\tserverAddr,\n\t\tappend(opts,\n\t\t\tgrpc.WithBlock(),\n\t\t\tgrpc.WithTimeout(10*time.Second),\n\t\t)...)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to connect to server: %v\", err)\n\t}\n\n\treturn pb.NewRouteGuideClient(conn), nil\n}"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Go function that establishes a gRPC connection to a server, invokes an empty call RPC method, and returns the response.\n\nFunction Description: The function `invokeEmptyCall` connects to a gRPC server at the specified address, creates a client for the EmptyService, makes an empty call RPC, and returns the response. It handles connection establishment and cleanup, including context timeout and connection closure.\n\nInput: \n- address: string - The address of the gRPC server to connect to\n- dialOptions: variadic grpc.DialOption - Optional gRPC dial options for connection configuration\n\nOutput:\n- *testpb.Empty - The response from the EmptyCall RPC\n- error - Any error that occurred during the connection or RPC call",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"testpb\"\n)\n\nfunc invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), testTimeout)\n\tdefer cancel()\n\tclientConn, err := grpc.DialContext(ctx, address, dialOptions...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer clientConn.Close()\n\n\tclient := testpb.NewEmptyServiceClient(clientConn)\n\tempty, err := client.EmptyCall(context.Background(), new(testpb.Empty))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn empty, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func invokeEmptyCall(address string, dialOptions ...grpc.DialOption) (*testpb.Empty, error) {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tconn, err := grpc.DialContext(ctx, address, append(dialOptions, grpc.WithBlock())...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\tclient := testpb.NewEmptyServiceClient(conn)\n\tresp, err := client.EmptyCall(ctx, &testpb.Empty{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp, nil\n}"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a Go function that demonstrates how to interact with a gRPC server using the official Go gRPC client package. The function should establish a connection, make multiple RPC calls with metadata, and handle the responses.\n\nFunction Description: The function tests a gRPC client implementation by connecting to a user service, sending login requests with metadata containing a UUID, and printing the received authentication tokens. It demonstrates proper connection handling, metadata usage, and error handling in gRPC communications.\n\nInput: \n- serviceAddress: string - The address of the gRPC server in \"host:port\" format\n- account: string - The username for login\n- password: string - The password for login\n- testCount: int - Number of test iterations to perform\n\nOutput: \n- None (prints tokens to stdout)\n- Returns error if connection or RPC fails\n\nNote: The function includes proper connection cleanup using defer and demonstrates metadata handling for request tracing.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\tuuid \"github.com/satori/go.uuid\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/utils\"\n\t\"github.com/hwholiday/learning_tools/go-kit/v9/user_agent/pb\"\n)\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(utils.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tfor i := 0; i < 20; i++ {\n\t\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\t\tAccount:  \"hwholiday\",\n\t\t\tPassword: \"123456\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(res.Token)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func TestGrpcClient(serviceAddress, account, password string, testCount int) error {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tclient := userservice.NewUserServiceClient(conn)\n\n\tfor i := 0; i < testCount; i++ {\n\t\tuuid := fmt.Sprintf(\"test-uuid-%d\", i)\n\t\tmd := metadata.Pairs(\"request-uuid\", uuid)\n\t\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\n\t\tresp, err := client.Login(ctx, &userservice.LoginRequest{\n\t\t\tAccount: account,\n\t\t\tPassword: password,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"Received token: %s\\n\", resp.Token)\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Implement a Go struct that interacts with the Pinecone vector database to upsert embeddings and retrieve similar vectors using HTTP requests with custom headers.\n\nStruct Description: The Pinecone struct represents a client for interacting with the Pinecone vector database API. It handles authentication, request construction, and response processing for vector operations.\n\nFields:\nEndpoint: string - The base URL of the Pinecone API endpoint\nApiKey: string - The API key used for authentication with Pinecone\n\nMethods:\nNew: [endpoint string, apiKey string] -> [*Pinecone, error] - Creates a new Pinecone client instance with the given endpoint and API key\n\nUpsertEmbeddings: [embeddings [][]float32, chunks []chunk.Chunk, uuid string] -> [error] - Upserts multiple embeddings into Pinecone in batches, with associated metadata from chunks, under the specified namespace UUID\n\nRetrieve: [questionEmbedding []float32, topK int, uuid string] -> [[]vectordb.QueryMatch, error] - Retrieves the topK most similar vectors to the questionEmbedding from the specified namespace UUID",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/pashpashpash/vault/chunk\"\n\t\"github.com/pashpashpash/vault/vectordb\"\n)\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint string, apiKey string) (*Pinecone, error) {\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []chunk.Chunk, uuid string) error {\n\turl := p.Endpoint + \"/vectors/upsert\"\n\n\tvectors := make([]PineconeVector, len(embeddings))\n\tfor i, embedding := range embeddings {\n\t\tchunk := chunks[i]\n\t\tvectors[i] = PineconeVector{\n\t\t\tID:     fmt.Sprintf(\"id-%d\", i),\n\t\t\tValues: embedding,\n\t\t\tMetadata: map[string]string{\n\t\t\t\t\"file_name\": chunk.Title,\n\t\t\t\t\"start\":     strconv.Itoa(chunk.Start),\n\t\t\t\t\"end\":       strconv.Itoa(chunk.End),\n\t\t\t\t\"title\":     chunk.Title,\n\t\t\t\t\"text\":      chunk.Text,\n\t\t\t},\n\t\t}\n\t}\n\n\tmaxVectorsPerRequest := 100\n\n\tfor i := 0; i < len(vectors); i += maxVectorsPerRequest {\n\t\tend := i + maxVectorsPerRequest\n\t\tif end > len(vectors) {\n\t\t\tend = len(vectors)\n\t\t}\n\n\t\trequestBody, err := json.Marshal(struct {\n\t\t\tVectors   []PineconeVector `json:\"vectors\"`\n\t\t\tNamespace string           `json:\"namespace\"`\n\t\t}{\n\t\t\tVectors:   vectors[i:end],\n\t\t\tNamespace: uuid,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(requestBody))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\t\treturn errors.New(string(body))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]vectordb.QueryMatch, error) {\n\trequestBody, _ := json.Marshal(PineconeQueryRequest{\n\t\tTopK:            topK,\n\t\tIncludeMetadata: true,\n\t\tNamespace:       uuid,\n\t\tQueries: []PineconeQueryItem{\n\t\t\t{\n\t\t\t\tValues: questionEmbedding,\n\t\t\t},\n\t\t},\n\t})\n\n\tpineconeIndexURL := p.Endpoint + \"/query\"\n\treq, _ := http.NewRequest(\"POST\", pineconeIndexURL, bytes.NewBuffer(requestBody))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Api-Key\", p.ApiKey)\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tvar pineconeQueryResponse PineconeQueryResponse\n\tjson.Unmarshal(body, &pineconeQueryResponse)\n\n\tif len(pineconeQueryResponse.Results) > 0 {\n\t\treturn pineconeQueryResponse.Results[0].Matches, nil\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package vectordb\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype chunk struct {\n\tID   string\n\tText string\n}\n\ntype QueryMatch struct {\n\tID      string\n\tScore   float32\n\tVector  []float32\n\tMetadata map[string]interface{}\n}\n\ntype Pinecone struct {\n\tEndpoint string\n\tApiKey   string\n}\n\nfunc New(endpoint string, apiKey string) (*Pinecone, error) {\n\tif endpoint == \"\" || apiKey == \"\" {\n\t\treturn nil, fmt.Errorf(\"endpoint and api key are required\")\n\t}\n\treturn &Pinecone{\n\t\tEndpoint: endpoint,\n\t\tApiKey:   apiKey,\n\t}, nil\n}\n\nfunc (p *Pinecone) UpsertEmbeddings(embeddings [][]float32, chunks []chunk.Chunk, uuid string) error {\n\tif len(embeddings) != len(chunks) {\n\t\treturn fmt.Errorf(\"embeddings and chunks must have the same length\")\n\t}\n\n\tbatchSize := 100\n\tfor i := 0; i < len(embeddings); i += batchSize {\n\t\tend := i + batchSize\n\t\tif end > len(embeddings) {\n\t\t\tend = len(embeddings)\n\t\t}\n\n\t\trequestBody := make([]map[string]interface{}, end-i)\n\t\tfor j := range requestBody {\n\t\t\trequestBody[j] = map[string]interface{}{\n\t\t\t\t\"values\": embeddings[i+j],\n\t\t\t\t\"metadata\": map[string]interface{}{\n\t\t\t\t\t\"id\":   chunks[i+j].ID,\n\t\t\t\t\t\"text\": chunks[i+j].Text,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\turl := fmt.Sprintf(\"%s/%s/upsert\", p.Endpoint, uuid)\n\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(JSONEncode(requestBody)))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", p.ApiKey))\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tbody, _ := io.ReadAll(resp.Body)\n\t\t\treturn fmt.Errorf(\"upsert failed with status code %d: %s\", resp.StatusCode, string(body))\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (p *Pinecone) Retrieve(questionEmbedding []float32, topK int, uuid string) ([]QueryMatch, error) {\n\tif topK <= 0 {\n\t\treturn nil, fmt.Errorf(\"topK must be a positive integer\")\n\t}\n\n\turl := fmt.Sprintf(\"%s/%s/query\", p.Endpoint, uuid)\n\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(JSONEncode(map[string]interface{}{\n\t\t\"queries\": []map[string]interface{}{\n\t\t\t{\"vector\": questionEmbedding},\n\t\t},\n\t\t\"topK\": topK,\n\t})))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", p.ApiKey))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn nil, fmt.Errorf(\"retrieve failed with status code %d: %s\", resp.StatusCode, string(body))\n\t}\n\n\tvar result map[string]interface{}\n\tif err := JSONDecode(resp.Body, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tmatches := result[\"matches\"].([]interface{})\n\tqueryMatches := make([]QueryMatch, len(matches))\n\tfor i := range matches {\n\t\tmatch := matches[i].(map[string]interface{})\n\t\tqueryMatches[i] = QueryMatch{\n\t\t\tID:      match[\"id\"].(string),\n\t\t\tScore:   float32(match[\"score\"].(float64)),\n\t\t\tVector:  match[\"values\"].([]float32),\n\t\t\tMetadata: map[string]interface{}{\n\t\t\t\t\"id\":   match[\"metadata\"].(map[string]interface{})[\"id\"].(string),\n\t\t\t\t\"text\": match[\"metadata\"].(map[string]interface{})[\"text\"].(string),\n\t\t\t},\n\t\t}\n\t}\n\n\treturn queryMatches, nil\n}\n\nfunc JSONEncode(v interface{}) []byte {\n\tb, _ := json.Marshal(v)\n\treturn b\n}\n\nfunc JSONDecode(r io.Reader, v interface{}) error {\n\td := json.NewDecoder(r)\n\treturn d.Decode(v)\n}"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: The task involves creating a gRPC client in Go that connects to a CloudSlack service, establishes a bidirectional stream, and handles incoming events while managing connection lifecycle and errors.\n\nFunction Description: The `start` function initializes a gRPC connection to a CloudSlack server, establishes a bidirectional stream for communication, sends a connection request, and continuously listens for incoming events. It handles connection errors, server closures, and context cancellations appropriately.\n\nInput: \n- `ctx context.Context`: The context for managing the lifecycle of the gRPC connection and handling cancellations.\n- The function also relies on the struct's fields (`log`, `cfg`, `client`, `commGroupMetadata`, `clusterName`, and `botID`) for configuration and logging.\n\nOutput: \n- `error`: Returns an error if any step in the connection or communication process fails, including gRPC connection errors, credential errors, or stream errors. Returns nil if the context is canceled gracefully.\n\nNote: The function uses deferred calls to ensure proper cleanup of resources (closing the gRPC connection and stream) and includes detailed error handling for various gRPC-specific scenarios.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\tpb \"github.com/kubeshop/botkube/pkg/api/cloudslack\"\n\t\"github.com/kubeshop/botkube/pkg/grpcx\"\n\t\"github.com/kubeshop/botkube/pkg/config\"\n\t\"github.com/kubeshop/botkube/pkg/api/cloudplatform\"\n\t\"github.com/kubeshop/botkube/internal/config/remote\"\n)\n\ntype CloudSlack struct {\n\tlog               logrus.FieldLogger\n\tcfg               config.CloudSlack\n\tclient            *slack.Client\n\tcommGroupMetadata CommGroupMetadata\n\tclusterName       string\n}\n\nfunc (b *CloudSlack) start(ctx context.Context) error {\n\tremoteConfig, ok := remote.GetConfig()\n\tif !ok {\n\t\treturn fmt.Errorf(\"while getting remote config for %s\", config.CloudSlackCommPlatformIntegration)\n\t}\n\n\tcreds, err := grpcx.ClientTransportCredentials(b.log, b.cfg.Server)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC credentials: %w\", err)\n\t}\n\n\topts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(creds),\n\t\tgrpc.WithStreamInterceptor(cloudplatform.AddStreamingClientCredentials(remoteConfig)),\n\t\tgrpc.WithUnaryInterceptor(cloudplatform.AddUnaryClientCredentials(remoteConfig)),\n\t}\n\n\tconn, err := grpc.Dial(b.cfg.Server.URL, opts...)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while creating gRPC connection: %w\", err)\n\t}\n\tdefer conn.Close()\n\n\treq := &pb.ConnectRequest{\n\t\tInstanceId: remoteConfig.Identifier,\n\t\tBotId:      b.botID,\n\t}\n\tc, err := pb.NewCloudSlackClient(conn).Connect(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while initializing gRPC cloud client: %w\", err)\n\t}\n\tdefer func(c pb.CloudSlack_ConnectClient) {\n\t\terr := c.CloseSend()\n\t\tif err != nil {\n\t\t\tb.log.Errorf(\"while closing connection: %s\", err.Error())\n\t\t}\n\t}(c)\n\n\terr = c.Send(req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"while sending gRPC connection request. %w\", err)\n\t}\n\n\tfor {\n\t\tdata, err := c.Recv()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tb.log.Warn(\"gRPC connection was closed by server\")\n\t\t\t\treturn errors.New(\"gRPC connection closed\")\n\t\t\t}\n\t\t\terrStatus, ok := status.FromError(err)\n\t\t\tif ok && errStatus.Code() == codes.Canceled && errStatus.Message() == context.Canceled.Error() {\n\t\t\t\tb.log.Debugf(\"Context was cancelled. Skipping returning error...\")\n\t\t\t\treturn fmt.Errorf(\"while resolving error from gRPC response %s\", errStatus.Err())\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"while receiving cloud slack events: %w\", err)\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func (c *CloudSlack) start(ctx context.Context) error {\n\tif c.client == nil {\n\t\tconn, err := grpc.DialContext(ctx, c.cfg.Addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\t\tif err != nil {\n\t\t\tc.log.Errorf(\"failed to dial gRPC server: %v\", err)\n\t\t\treturn err\n\t\t}\n\t\tc.client = NewCloudSlackClient(conn)\n\t\tdefer conn.Close()\n\t}\n\n\tstream, err := c.client.Subscribe(ctx)\n\tif err != nil {\n\t\tc.log.Errorf(\"failed to create stream: %v\", err)\n\t\treturn err\n\t}\n\n\tdefer stream.CloseSend()\n\n\treq := &SubscribeRequest{\n\t\tClusterName: c.clusterName,\n\t\tBotId:       c.botID,\n\t}\n\n\tif err := stream.Send(req); err != nil {\n\t\tc.log.Errorf(\"failed to send subscribe request: %v\", err)\n\t\treturn err\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tc.log.Info(\"context canceled, stopping stream\")\n\t\t\t\treturn\n\t\t\tdefault:\n\t\t\t\tresp, err := stream.Recv()\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\tc.log.Info(\"stream closed by server\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err != nil {\n\t\t\t\t\tc.log.Errorf(\"failed to receive event: %v\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tc.handleEvent(resp)\n\t\t\t}\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\treturn nil\n}"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a function that demonstrates how to establish a gRPC client connection, make a login request to a user service, and handle the response.\n\nFunction Description: The function connects to a gRPC server at a specified address, creates a client for the User service, sends a login request with account credentials, and returns the authentication token. It includes error handling and connection cleanup.\n\nInput: \n- serviceAddress (string): The address of the gRPC server in \"host:port\" format\n- account (string): The user's account name for login\n- password (string): The user's password for login\n\nOutput:\n- token (string): The authentication token returned by the server upon successful login\n- error: Any error that occurs during the connection or RPC call\n\nNote: The function assumes the existence of generated gRPC client code from a protobuf definition that includes a User service with RpcUserLogin method.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/hwholiday/learning_tools/go-kit/v5/v5_user/pb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n)\n\nfunc TestGrpc(t *testing.T) {\n\tserviceAddress := \"127.0.0.1:8881\"\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\tpanic(\"connect error\")\n\t}\n\tdefer conn.Close()\n\tuserClient := pb.NewUserClient(conn)\n\tUUID := uuid.NewV5(uuid.NewV4(), \"req_uuid\").String()\n\tmd := metadata.Pairs(v5_service.ContextReqUUid, UUID)\n\tctx := metadata.NewOutgoingContext(context.Background(), md)\n\tres, err := userClient.RpcUserLogin(ctx, &pb.Login{\n\t\tAccount:  \"hw\",\n\t\tPassword: \"123\",\n\t})\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tt.Log(res.Token)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 120,
    "wrong_result": "func grpcLogin(serviceAddress, account, password string) (string, error) {\n\tconn, err := grpc.Dial(serviceAddress, grpc.WithInsecure())\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer conn.Close()\n\n\tclient := newUserClient(conn)\n\trequest := &loginRequest{\n\t\tAccount: account,\n\t\tPassword: password,\n\t}\n\n\tresponse, err := client.RpcUserLogin(context.Background(), request)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn response.Token, nil\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Implement an HTTP probe function that checks the availability and correctness of a remote HTTP service by making a GET request with custom headers and verifying the response.\n\nFunction Description: The function performs an HTTP probe to a specified URL with custom configuration including timeout, headers, and TLS settings. It verifies the response status code and optionally checks for a success flag in the response body. The function logs the probe results and returns a success/failure status.\n\nInput:\n- protocol: string - The protocol to use (http/https)\n- address: string - The target server address\n- path: string - The request path\n- port: int - The target port number\n- headerList: []*types.HTTPHeader - List of custom HTTP headers to include\n- timeout: time.Duration - Request timeout duration\n- responseSuccessFlag: string - Optional string to check in response body for success\n- log: *zap.SugaredLogger - Logger for recording probe results\n\nOutput:\n- string - Probe result status (Success/Failure)\n- error - Error details if probe fails",
    "Canonical_solution": "import (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/koderover/zadig/v2/pkg/types\"\n\t\"go.uber.org/zap\"\n)\nfunc doHTTPProbe(protocol, address, path string, port int, headerList []*types.HTTPHeader, timeout time.Duration, responseSuccessFlag string, log *zap.SugaredLogger) (string, error) {\n\ttlsConfig := &tls.Config{InsecureSkipVerify: true}\n\ttransport := &http.Transport{\n\t\tTLSClientConfig:   tlsConfig,\n\t\tDisableKeepAlives: true,\n\t\tProxy:             http.ProxyURL(nil),\n\t}\n\tclient := &http.Client{\n\t\tTimeout:       timeout,\n\t\tTransport:     transport,\n\t\tCheckRedirect: redirectChecker(false),\n\t}\n\turl, err := formatURL(protocol, address, path, port)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\theaders := buildHeader(headerList)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\treq.Header = headers\n\treq.Host = headers.Get(\"Host\")\n\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn Failure, err\n\t}\n\n\tif res.StatusCode >= http.StatusOK && res.StatusCode < http.StatusBadRequest {\n\t\tif responseSuccessFlag != \"\" && !strings.Contains(string(body), responseSuccessFlag) {\n\t\t\treturn Failure, fmt.Errorf(\"HTTP probe failed with response success flag: %s\", responseSuccessFlag)\n\t\t}\n\t\tlog.Infof(\"Probe succeeded for %s, Response: %v\", url, *res)\n\t\treturn Success, nil\n\t}\n\tlog.Warnf(\"Probe failed for %s, response body: %v\", url, string(body))\n\treturn Failure, fmt.Errorf(\"HTTP probe failed with statuscode: %d\", res.StatusCode)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func probeHTTPService(protocol, address, path string, port int, headerList []*types.HTTPHeader, timeout time.Duration, responseSuccessFlag string, log *zap.SugaredLogger) (string, error) {\n    url := fmt.Sprintf(\"%s://%s:%d%s\", protocol, address, port, path)\n    client := &http.Client{\n        Timeout: timeout,\n        Transport: &http.Transport{\n            TLSClientConfig: &tls.Config{\n                InsecureSkipVerify: true,\n            },\n        },\n    }\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        log.Errorw(\"Failed to create request\", \"error\", err)\n        return \"Failure\", err\n    }\n\n    for _, header := range headerList {\n        req.Header.Set(header.Name, header.Value)\n    }\n\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Errorw(\"HTTP request failed\", \"error\", err)\n        return \"Failure\", err\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        log.Errorw(\"Failed to read response body\", \"error\", err)\n        return \"Failure\", err\n    }\n\n    if resp.StatusCode != http.StatusOK {\n        log.Warnf(\"Unexpected status code: %d\", resp.StatusCode)\n        return \"Failure\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n    }\n\n    if responseSuccessFlag != \"\" {\n        if !strings.Contains(string(body), responseSuccessFlag) {\n            log.Warnf(\"Response body does not contain success flag: %s\", responseSuccessFlag)\n            return \"Failure\", fmt.Errorf(\"response body missing success flag\")\n        }\n    }\n\n    log.Infow(\"HTTP probe successful\", \"url\", url)\n    return \"Success\", nil\n}"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC management server for Envoy's xDS (Discovery Service) protocol, supporting dynamic configuration updates and load reporting.\n\nStruct Description: The ManagementServer struct represents a gRPC server that implements Envoy's xDS protocol, including Aggregated Discovery Service (ADS) and optionally Load Reporting Service (LRS). It maintains a snapshot cache of resources and handles gRPC connections.\n\nFields:\n- Address: string - The network address the server is listening on\n- LRSServer: *fakeserver.Server - Optional fake LRS server instance\n- cancel: context.CancelFunc - Function to cancel the server's context\n- xs: v3server.Server - xDS server implementation\n- gs: *grpc.Server - gRPC server instance\n- cache: v3cache.SnapshotCache - Cache for storing configuration snapshots\n- version: int - Current version of the configuration\n- logger: interface{ Logf(format string, args ...any) } - Logger interface for output\n\nMethods:\n- StartManagementServer(*testing.T, ManagementServerOptions) *ManagementServer - Creates and starts a new management server instance. Takes testing context and options, returns initialized server.\n- Update(context.Context, UpdateOptions) error - Updates the server's configuration snapshot with new resources. Takes context and update options, returns error if update fails.\n- Stop() - Stops the server and cleans up resources. No parameters or return values.\n\nThe struct provides dynamic configuration management for Envoy proxies through the xDS protocol, with support for listeners, routes, clusters, and endpoints configuration.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"github.com/envoyproxy/go-control-plane/pkg/cache/types\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils/xds/fakeserver\"\n\n\tv3clusterpb \"github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3\"\n\tv3endpointpb \"github.com/envoyproxy/go-control-plane/envoy/config/endpoint/v3\"\n\tv3listenerpb \"github.com/envoyproxy/go-control-plane/envoy/config/listener/v3\"\n\tv3routepb \"github.com/envoyproxy/go-control-plane/envoy/config/route/v3\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3cache \"github.com/envoyproxy/go-control-plane/pkg/cache/v3\"\n\tv3resource \"github.com/envoyproxy/go-control-plane/pkg/resource/v3\"\n\tv3server \"github.com/envoyproxy/go-control-plane/pkg/server/v3\"\n)\n\ntype ManagementServer struct {\n\tAddress   string\n\tLRSServer *fakeserver.Server\n\n\tcancel  context.CancelFunc\n\txs      v3server.Server\n\tgs      *grpc.Server\n\tcache   v3cache.SnapshotCache\n\tversion int\n\n\tlogger interface {\n\t\tLogf(format string, args ...any)\n\t}\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\twait := !opts.AllowResourceSubset\n\tcache := v3cache.NewSnapshotCache(wait, v3cache.IDHash{}, serverLogger{t})\n\n\tlis := opts.Listener\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to listen on localhost:0: %v\", err)\n\t\t}\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tcallbacks := v3server.CallbackFuncs{\n\t\tStreamOpenFunc:     opts.OnStreamOpen,\n\t\tStreamClosedFunc:   opts.OnStreamClosed,\n\t\tStreamRequestFunc:  opts.OnStreamRequest,\n\t\tStreamResponseFunc: opts.OnStreamResponse,\n\t}\n\n\txs := v3server.NewServer(ctx, cache, callbacks)\n\tgs := grpc.NewServer()\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(gs, xs)\n\n\tmgmtServer := &ManagementServer{\n\t\tAddress: lis.Addr().String(),\n\t\tcancel:  cancel,\n\t\tversion: 0,\n\t\tgs:      gs,\n\t\txs:      xs,\n\t\tcache:   cache,\n\t\tlogger:  t,\n\t}\n\tif opts.SupportLoadReportingService {\n\t\tlrs := fakeserver.NewServer(lis.Addr().String())\n\t\tv3lrsgrpc.RegisterLoadReportingServiceServer(gs, lrs)\n\t\tmgmtServer.LRSServer = lrs\n\t}\n\n\tgo gs.Serve(lis)\n\tt.Cleanup(mgmtServer.Stop)\n\treturn mgmtServer\n}\n\nfunc (s *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\ts.version++\n\n\tresources := map[v3resource.Type][]types.Resource{\n\t\tv3resource.ListenerType: resourceSlice(opts.Listeners),\n\t\tv3resource.RouteType:    resourceSlice(opts.Routes),\n\t\tv3resource.ClusterType:  resourceSlice(opts.Clusters),\n\t\tv3resource.EndpointType: resourceSlice(opts.Endpoints),\n\t}\n\tsnapshot, err := v3cache.NewSnapshot(strconv.Itoa(s.version), resources)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create new snapshot cache: %v\", err)\n\t}\n\tif !opts.SkipValidation {\n\t\tif err := snapshot.Consistent(); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to create new resource snapshot: %v\", err)\n\t\t}\n\t}\n\n\tif err := s.cache.SetSnapshot(ctx, opts.NodeID, snapshot); err != nil {\n\t\treturn fmt.Errorf(\"failed to update resource snapshot in management server: %v\", err)\n\t}\n\treturn nil\n}\n\nfunc (s *ManagementServer) Stop() {\n\tif s.cancel != nil {\n\t\ts.cancel()\n\t}\n\ts.gs.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "type ManagementServer struct {\n\tAddress    string\n\tLRSServer  *fakeserver.Server\n\tcancel     context.CancelFunc\n\txs         v3server.Server\n\tgs         *grpc.Server\n\tcache      v3cache.SnapshotCache\n\tversion    int\n\tlogger     interface{ Logf(format string, args ...any) }\n}\n\nfunc StartManagementServer(t *testing.T, opts ManagementServerOptions) *ManagementServer {\n\tctx, cancel := context.WithCancel(context.Background())\n\tserver := &ManagementServer{\n\t\tAddress:   opts.Address,\n\t\tcancel:    cancel,\n\t\tlogger:    opts.Logger,\n\t}\n\t\n\tif opts.LRSOptions != nil {\n\t\tserver.LRSServer = fakeserver.NewServer(opts.LRSOptions)\n\t}\n\t\n\tserver.gs = grpc.NewServer()\n\tserver.xs = v3server.NewServer(server.gs, server.cache, server.version, server.logger)\n\t\n\tlistener, err := net.Listen(\"tcp\", server.Address)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to listen: %v\", err)\n\t}\n\t\n\tgo func() {\n\t\tif err := server.gs.Serve(listener); err != nil {\n\t\t\tt.Logf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n\t\n\treturn server\n}\n\nfunc (s *ManagementServer) Update(ctx context.Context, opts UpdateOptions) error {\n\ts.version++\n\ts.cache.SetSnapshot(v3cache.NewSnapshot(s.version, opts.Resources))\n\treturn nil\n}\n\nfunc (s *ManagementServer) Stop() {\n\ts.cancel()\n\ts.gs.Stop()\n}"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles plugin registration and message streaming between clients and middleware components.\n\nStruct Description: The pluginServer struct implements a gRPC service for plugin registration and message handling, managing concurrent access with synchronization and supporting both middleware and non-middleware listeners.\n\nFields:\n- UnimplementedPluginServer: pb.UnimplementedPluginServer - Embedded type for forward compatibility\n- lock: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n- RegisterListener: (stream pb.Plugin_RegisterListenerServer) -> error - Handles client registration and message streaming\n  - Input: gRPC bidirectional stream of pb.Plugin_RegisterListenerServer\n  - Output: error indicating operation status\n  - Description: Registers listeners, processes incoming messages, matches against regex patterns, handles middleware responses, and manages one-time listeners\n\n- rpcInit: () -> () - Initializes and starts the gRPC server\n  - Input: None (uses package-level Integrations.RPC configuration)\n  - Output: None (runs as goroutine)\n  - Description: Creates TCP listener, configures gRPC server with interceptors and keepalive, registers service, and starts serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlock sync.Mutex\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\ts.lock.Lock()\n\tinitialData, err := stream.Recv()\n\tif err == io.EOF {\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tlistener := initialData.GetListener()\n\tif listener == nil {\n\t\treturn status.Error(codes.InvalidArgument, \"First message must be a listener\")\n\t}\n\n\tisMiddleware := listener.Middleware != nil && *listener.Middleware\n\tisOnce := listener.Once != nil && *listener.Once\n\n\tvar regex *regexp.Regexp\n\tif listener.Regex != nil {\n\t\tregex, err = regexp.Compile(*listener.Regex)\n\t\tif err != nil {\n\t\t\treturn status.Error(codes.InvalidArgument, \"Invalid regex\")\n\t\t}\n\t}\n\n\tvar listenerList *[]chan pb.MiddlewareChannelMessage\n\n\tif isMiddleware {\n\t\tlistenerList = &ListenersMiddleware\n\t} else {\n\t\tlistenerList = &ListenersNonMiddleware\n\t}\n\n\tc := make(chan pb.MiddlewareChannelMessage)\n\t*listenerList = append(*listenerList, c)\n\n\ts.lock.Unlock()\n\tdefer func() {\n\t\tfor i := range *listenerList {\n\t\t\tif (*listenerList)[i] == c {\n\t\t\t\t*listenerList = append((*listenerList)[:i], (*listenerList)[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tmessage := <-c\n\n\t\tsendNilResponse := func() {\n\t\t\tc <- &pb.ListenerClientData_Response{\n\t\t\t\tResponse: &pb.MiddlewareResponse{\n\t\t\t\t\tMsg: nil,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\tif listener.Regex != nil && !regex.MatchString(message.(*pb.Event).Msg) {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\terr = stream.Send(message.(*pb.Event))\n\t\tif err != nil {\n\t\t\tif isMiddleware {\n\t\t\t\tsendNilResponse()\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif isMiddleware {\n\t\t\tmwRes, err := stream.Recv()\n\t\t\tif err != nil {\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tswitch data := mwRes.Data.(type) {\n\t\t\tcase *pb.ListenerClientData_Listener:\n\t\t\t\tsendNilResponse()\n\t\t\t\treturn status.Error(codes.InvalidArgument, \"Middleware returned a listener instead of a response\")\n\t\t\tcase *pb.ListenerClientData_Response:\n\t\t\t\tc <- data\n\t\t\t}\n\t\t}\n\n\t\tif isOnce {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc rpcInit() {\n\tif Integrations.RPC == nil {\n\t\treturn\n\t}\n\tgo func() {\n\t\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", Integrations.RPC.Port))\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tgrpcServer := grpc.NewServer(\n\t\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\t\tif err := authorize(ctx); err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn handler(ctx, req)\n\t\t\t}),\n\t\t\tgrpc.StreamInterceptor(func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\t\tif err := authorize(stream.Context()); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\treturn handler(srv, stream)\n\t\t\t}),\n\t\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{Time: time.Second * 10}),\n\t\t)\n\t\tpb.RegisterPluginServer(grpcServer, &pluginServer{})\n\t\tgrpcServer.Serve(lis)\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"sync\"\n)\n\ntype pluginServer struct {\n\tpb.UnimplementedPluginServer\n\tlisteners map[string]*listener\n\tlock      sync.Mutex\n}\n\ntype listener struct {\n\tstream pb.Plugin_RegisterListenerServer\n\tpattern string\n\tmiddleware bool\n}\n\nfunc (s *pluginServer) RegisterListener(stream pb.Plugin_RegisterListenerServer) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\treq, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpattern := req.Pattern\n\tmiddleware := req.Middleware\n\n\tl := &listener{\n\t\tstream:    stream,\n\t\tpattern:   pattern,\n\t\tmiddleware: middleware,\n\t}\n\n\ts.listeners[pattern] = l\n\n\tfor {\n\t\tmsg, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif err == grpc.ErrClientConnClosed {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif !s.matchPattern(msg.Message, pattern) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif middleware {\n\t\t\tresp := &pb.Response{\n\t\t\t\tMessage: msg.Message,\n\t\t\t}\n\t\t\tif err := stream.Send(resp); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\tfor _, l := range s.listeners {\n\t\t\t\tif l.middleware {\n\t\t\t\t\tresp := &pb.Response{\n\t\t\t\t\t\tMessage: msg.Message,\n\t\t\t\t\t}\n\t\t\t\t\tif err := l.stream.Send(resp); err != nil {\n\t\t\t\t\t\treturn err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete(s.listeners, pattern)\n\treturn nil\n}\n\nfunc (s *pluginServer) matchPattern(msg string, pattern string) bool {\n\t// Implement regex matching logic here\n\treturn true\n}\n\nfunc (s *pluginServer) rpcInit() {\n\tserver := grpc.NewServer(\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tTime:    60,\n\t\t\tTimeout: 30,\n\t\t}),\n\t)\n\n\tpb.RegisterPluginServer(server, s)\n\n\tlistener, err := net.Listen(\"tcp\", Integrations.RPC.Addr)\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to listen: %v\\n\", err)\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tif err := server.Serve(listener); err != nil {\n\t\t\tfmt.Printf(\"gRPC server exited with error: %v\\n\", err)\n\t\t}\n\t}()\n}\n\nvar (\n\tpb  = &plugin_proto.Plugin{}\n\tsrv *pluginServer\n)\n\nfunc init() {\n\tsrv = &pluginServer{\n\t\tlisteners: make(map[string]*listener),\n\t}\n}"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles them using the gRPC framework. The server should be able to gracefully shut down when the context is canceled.\n\nFunction Description: The MainExt function initializes and starts a gRPC server. It sets up a network listener, creates a gRPC server instance, registers the service implementation, and starts the server in a goroutine. The function waits for the context to be canceled before gracefully shutting down the server.\n\nInput:\n- ctx [context.Context]: The context used to control the lifecycle of the gRPC server. Canceling this context will trigger a graceful shutdown.\n- cfg [Config]: A configuration object containing the port number on which the server should listen.\n\nOutput: None (The function runs indefinitely until the context is canceled or an error occurs.)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\ttriggerpb \"github.com/vanus-labs/vanus/api/trigger\"\n)\n\ntype TriggerServer struct {\n\tcfg Config\n}\n\nfunc NewTriggerServer(cfg Config) *TriggerServer {\n\treturn &TriggerServer{\n\t\tcfg: cfg,\n\t}\n}\n\nfunc MainExt(ctx context.Context, cfg Config) {\n\tlisten, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", cfg.Port))\n\tif err != nil {\n\t\tlog.Error().Msg(\"failed to listen\")\n\t\tos.Exit(-1)\n\t}\n\n\tsrv := NewTriggerServer(cfg)\n\n\tvar opts []grpc.ServerOption\n\tgrpcServer := grpc.NewServer(opts...)\n\ttriggerpb.RegisterTriggerWorkerServer(grpcServer, srv)\n\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tlog.Info(ctx).Msg(\"the grpc server ready to work\")\n\t\terr = grpcServer.Serve(listen)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx).Err(err).Msg(\"grpc server occurred an error\")\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\tgrpcServer.GracefulStop()\n\twg.Wait()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func MainExt(ctx context.Context, cfg Config) {\n\tlis, err := net.Listen(\"tcp\", \":\"+cfg.Port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tRegisterServiceServer(s, &serviceImpl{})\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n\tselect {\n\tcase <-ctx.Done():\n\t\ts.GracefulStop()\n\t}\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a function that retrieves metadata from a Google Cloud instance using a custom HTTP client with specific headers and returns both the metadata value and its ETag.\n\nFunction Description: The function `getETag` makes an HTTP GET request to the Google Cloud metadata server to fetch instance metadata. It uses a custom HTTP client with timeout configurations and sets required headers (\"Metadata-Flavor\" and \"User-Agent\"). The function handles various response scenarios including errors and not-found statuses, and returns the metadata value along with its ETag if successful.\n\nInput:\n- `client` (*http.Client): A custom HTTP client configured with specific timeout settings\n- `suffix` (string): The metadata path suffix to append to the base metadata URL\n\nOutput:\n- `value` (string): The retrieved metadata value\n- `etag` (string): The ETag header value from the response\n- `err` (error): Any error encountered during the request or processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\n\nvar (\n\tmetaClient = &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDial: (&net.Dialer{\n\t\t\t\tTimeout:   2 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).Dial,\n\t\t\tResponseHeaderTimeout: 2 * time.Second,\n\t\t},\n\t}\n)\n\nfunc getETag(client *http.Client, suffix string) (value, etag string, err error) {\n\thost := os.Getenv(metadataHostEnv)\n\tif host == \"\" {\n\t\thost = metadataIP\n\t}\n\turl := \"http://\" + host + \"/computeMetadata/v1/\" + suffix\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", userAgent)\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer res.Body.Close()\n\tif res.StatusCode == http.StatusNotFound {\n\t\treturn \"\", \"\", NotDefinedError(suffix)\n\t}\n\tif res.StatusCode != 200 {\n\t\treturn \"\", \"\", fmt.Errorf(\"status code %d trying to fetch %s\", res.StatusCode, url)\n\t}\n\tall, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treturn string(all), res.Header.Get(\"Etag\"), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func getETag(client *http.Client, suffix string) (string, string, error) {\n\turl := \"http://metadata.google.internal/computeMetadata/v1/instance/\" + suffix\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\treq.Header.Set(\"User-Agent\", \"CustomClient/1.0\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tvalue := string(body)\n\tetag := resp.Header.Get(\"ETag\")\n\treturn value, etag, nil\n}"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls with ORCA (Open Request Cost Aggregation) metrics recording capabilities.\n\nStruct Description: The server struct implements the gRPC service interface (generated from the protobuf definition) and includes ORCA metrics recording functionality.\n\nFields:\n- UnimplementedEchoServer: [pb.UnimplementedEchoServer] - Embedded type to satisfy the gRPC service interface requirements\n\nMethods:\n- UnaryEcho: [Name](ctx context.Context, in *pb.EchoRequest) -> (*pb.EchoResponse, error) - Handles unary RPC calls, records request costs using ORCA metrics, and returns an echo response\n- main: [Name]() -> None - Sets up the gRPC server, registers the service, configures ORCA metrics reporting, and starts the server\n\nInput Parameters for UnaryEcho:\n- ctx: [context.Context] - Context containing call information and ORCA metrics recorder\n- in: [*pb.EchoRequest] - Incoming request message containing the message to echo\n\nOutput for UnaryEcho:\n- [*pb.EchoResponse] - Response message containing the echoed message\n- [error] - Potential error during processing\n\nNote: The main function doesn't have explicit input/output but performs server setup and execution.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/orca\"\n\t\"google.golang.org/grpc/internal\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype server struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *server) UnaryEcho(ctx context.Context, in *pb.EchoRequest) (*pb.EchoResponse, error) {\n\tcmr := orca.CallMetricsRecorderFromContext(ctx)\n\tif cmr == nil {\n\t\treturn nil, status.Errorf(codes.Internal, \"unable to retrieve call metrics recorder (missing ORCA ServerOption?)\")\n\t}\n\tcmr.SetRequestCost(\"db_queries\", 10)\n\n\treturn &pb.EchoResponse{Message: in.Message}, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\"localhost:%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(orca.CallMetricsServerOption(nil))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tsmr := orca.NewServerMetricsRecorder()\n\topts := orca.ServiceOptions{\n\t\tMinReportingInterval:  3 * time.Second,\n\t\tServerMetricsProvider: smr,\n\t}\n\tinternal.ORCAAllowAnyMinReportingInterval.(func(so *orca.ServiceOptions))(&opts)\n\tif err := orca.Register(s, opts); err != nil {\n\t\tlog.Fatalf(\"Failed to register ORCA service: %v\", err)\n\t}\n\n\ts.Serve(lis)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\tpb \"github.com/yourusername/echo-service/proto\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"github.com/open-telemetry/opentelemetry-go/exporter/otlp\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/controller/basic\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/reader/basic\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/selector\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/summarizer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/simple\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/queued\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open-telemetry/opentelemetry-go/sdk/metric/processor/transformer/transform/transformer\"\n\t\"github.com/open"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles both xDS (Discovery Service) and LRS (Load Reporting Service) protocols, with proper request/response channels and connection monitoring capabilities.\n\nStruct Description: The Server struct represents a gRPC server that implements both xDS v3 and LRS v3 services. It manages communication channels for requests/responses and tracks connection state.\n\nFields:\n\nXDSRequestChan: *testutils.Channel - Channel for receiving xDS requests\nXDSResponseChan: chan *Response - Channel for sending xDS responses\nLRSRequestChan: *testutils.Channel - Channel for receiving LRS requests\nLRSResponseChan: chan *Response - Channel for sending LRS responses\nLRSStreamOpenChan: *testutils.Channel - Channel for tracking LRS stream openings\nLRSStreamCloseChan: *testutils.Channel - Channel for tracking LRS stream closings\nNewConnChan: *testutils.Channel - Channel for tracking new connections\nAddress: string - Server's listening address\nxdsServerV3: *xdsServerV3 - xDS v3 server implementation\nlrsServerV3: *lrsServerV3 - LRS v3 server implementation\n\nMethods:\n\nNewServer: (addr string) -> *Server - Creates a new Server instance with initialized channels\nStartServer: (lis net.Listener) -> (*Server, func(), error) - Starts the gRPC server on given listener and returns cleanup function\nStreamAggregatedResources: (s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) -> error - Handles xDS v3 streaming RPC\nStreamLoadStats: (s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) -> error - Handles LRS v3 streaming RPC",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/internal/testutils\"\n\t\"google.golang.org/protobuf/proto\"\n\tv3discoverygrpc \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3discoverypb \"github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3\"\n\tv3lrsgrpc \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n\tv3lrspb \"github.com/envoyproxy/go-control-plane/envoy/service/load_stats/v3\"\n)\n\ntype Server struct {\n\tXDSRequestChan *testutils.Channel\n\tXDSResponseChan chan *Response\n\tLRSRequestChan *testutils.Channel\n\tLRSResponseChan chan *Response\n\tLRSStreamOpenChan *testutils.Channel\n\tLRSStreamCloseChan *testutils.Channel\n\tNewConnChan *testutils.Channel\n\tAddress string\n\t*xdsServerV3\n\t*lrsServerV3\n}\n\ntype wrappedListener struct {\n\tnet.Listener\n\tserver *Server\n}\n\nfunc (wl *wrappedListener) Accept() (net.Conn, error) {\n\tc, err := wl.Listener.Accept()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\twl.server.NewConnChan.Send(struct{}{})\n\treturn c, err\n}\n\nfunc StartServer(lis net.Listener) (*Server, func(), error) {\n\tif lis == nil {\n\t\tvar err error\n\t\tlis, err = net.Listen(\"tcp\", \"localhost:0\")\n\t\tif err != nil {\n\t\t\treturn nil, func() {}, fmt.Errorf(\"net.Listen() failed: %v\", err)\n\t\t}\n\t}\n\n\ts := NewServer(lis.Addr().String())\n\twp := &wrappedListener{\n\t\tListener: lis,\n\t\tserver:   s,\n\t}\n\n\tserver := grpc.NewServer()\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(server, s)\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(server, s)\n\tgo server.Serve(wp)\n\n\treturn s, func() { server.Stop() }, nil\n}\n\nfunc NewServer(addr string) *Server {\n\ts := &Server{\n\t\tXDSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSRequestChan:     testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tNewConnChan:        testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tXDSResponseChan:    make(chan *Response, defaultChannelBufferSize),\n\t\tLRSResponseChan:    make(chan *Response, 1),\n\t\tLRSStreamOpenChan:  testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tLRSStreamCloseChan: testutils.NewChannelWithSize(defaultChannelBufferSize),\n\t\tAddress:            addr,\n\t}\n\ts.xdsServerV3 = &xdsServerV3{reqChan: s.XDSRequestChan, respChan: s.XDSResponseChan}\n\ts.lrsServerV3 = &lrsServerV3{reqChan: s.LRSRequestChan, respChan: s.LRSResponseChan, streamOpenChan: s.LRSStreamOpenChan, streamCloseChan: s.LRSStreamCloseChan}\n\treturn s\n}\n\ntype xdsServerV3 struct {\n\treqChan  *testutils.Channel\n\trespChan chan *Response\n}\n\nfunc (xdsS *xdsServerV3) StreamAggregatedResources(s v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\terrCh := make(chan error, 2)\n\tgo func() {\n\t\tfor {\n\t\t\treq, err := s.Recv()\n\t\t\tif err != nil {\n\t\t\t\terrCh <- err\n\t\t\t\treturn\n\t\t\t}\n\t\t\txdsS.reqChan.Send(&Request{req, err})\n\t\t}\n\t}()\n\tgo func() {\n\t\tvar retErr error\n\t\tdefer func() {\n\t\t\terrCh <- retErr\n\t\t}()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase r := <-xdsS.respChan:\n\t\t\t\tif r.Err != nil {\n\t\t\t\t\tretErr = r.Err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := s.Send(r.Resp.(*v3discoverypb.DiscoveryResponse)); err != nil {\n\t\t\t\t\tretErr = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-s.Context().Done():\n\t\t\t\tretErr = s.Context().Err()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tif err := <-errCh; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\ntype lrsServerV3 struct {\n\treqChan         *testutils.Channel\n\trespChan        chan *Response\n\tstreamOpenChan  *testutils.Channel\n\tstreamCloseChan *testutils.Channel\n}\n\nfunc (lrsS *lrsServerV3) StreamLoadStats(s v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\tlrsS.streamOpenChan.Send(nil)\n\tdefer lrsS.streamCloseChan.Send(nil)\n\n\treq, err := s.Recv()\n\tlrsS.reqChan.Send(&Request{req, err})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tselect {\n\tcase r := <-lrsS.respChan:\n\t\tif r.Err != nil {\n\t\t\treturn r.Err\n\t\t}\n\t\tif err := s.Send(r.Resp.(*v3lrspb.LoadStatsResponse)); err != nil {\n\t\t\treturn err\n\t\t}\n\tcase <-s.Context().Done():\n\t\treturn s.Context().Err()\n\t}\n\n\tfor {\n\t\treq, err := s.Recv()\n\t\tlrsS.reqChan.Send(&Request{req, err})\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "func NewServer(addr string) *Server {\n\treturn &Server{\n\t\tXDSRequestChan:      testutils.NewChannel(),\n\t\tXDSResponseChan:     make(chan *Response),\n\t\tLRSRequestChan:      testutils.NewChannel(),\n\t\tLRSResponseChan:     make(chan *Response),\n\t\tLRSStreamOpenChan:   testutils.NewChannel(),\n\t\tLRSStreamCloseChan:  testutils.NewChannel(),\n\t\tNewConnChan:         testutils.NewChannel(),\n\t\tAddress:             addr,\n\t\txdsServerV3:         &xdsServerV3{},\n\t\tlrsServerV3:         &lrsServerV3{},\n\t}\n}\n\nfunc (s *Server) StartServer(lis net.Listener) (*Server, func(), error) {\n\tsrv := grpc.NewServer()\n\tv3discoverygrpc.RegisterAggregatedDiscoveryServiceServer(srv, s)\n\tv3lrsgrpc.RegisterLoadReportingServiceServer(srv, s)\n\n\tgo func() {\n\t\tif err := srv.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\tcleanup := func() {\n\t\tsrv.Stop()\n\t}\n\n\treturn s, cleanup, nil\n}\n\nfunc (s *Server) StreamAggregatedResources(stream v3discoverygrpc.AggregatedDiscoveryService_StreamAggregatedResourcesServer) error {\n\ts.LRSStreamOpenChan.Send(true)\n\tdefer s.LRSStreamCloseChan.Send(true)\n\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.XDSRequestChan.Send(req)\n\t\tresp := <-s.XDSResponseChan\n\t\tif err := stream.Send(resp); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *Server) StreamLoadStats(stream v3lrsgrpc.LoadReportingService_StreamLoadStatsServer) error {\n\ts.LRSStreamOpenChan.Send(true)\n\tdefer s.LRSStreamCloseChan.Send(true)\n\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err == io.EOF {\n\t\t\treturn nil\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.LRSRequestChan.Send(req)\n\t\tresp := <-s.LRSResponseChan\n\t\tif err := stream.Send(resp); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests on a specified TCP port and registers a service to handle those requests.\n\nFunction Description: The function sets up a gRPC server that listens on a given TCP port, creates a new gRPC server instance, registers a service to handle incoming requests, and starts the server in a goroutine. The server runs until it is stopped or encounters an error.\n\nInput: None (The port is hardcoded as \":50052\" in the example, but could be parameterized)\n\nOutput: None (The function runs indefinitely until stopped or an error occurs, with side effects of starting the gRPC server)\n\nNote: The actual service implementation (ChannelzService) would need to be defined elsewhere and imported. The example shows the server setup pattern but assumes the service is already implemented.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"log\"\n\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \":50052\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tdefer lis.Close()\n\ts := grpc.NewServer()\n\tservice.RegisterChannelzServiceToServer(s)\n\tgo s.Serve(lis)\n\tdefer s.Stop()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func StartGRPCServer() {\n\ts := grpc.NewServer()\n\tlis, _ := net.Listen(\"tcp\", \":50052\")\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown upon receiving termination signals.\n\nFunction Description: The function `Run` initializes and starts a gRPC server with the provided network options. It sets up a network listener, creates a gRPC server instance, registers a key service, and handles graceful shutdown upon receiving interrupt or termination signals.\n\nInput: \n- `opts` [struct] - Configuration options for the server, containing:\n  - `Network` [string] - The network type (e.g., \"tcp\")\n  - `Address` [string] - The address to listen on (e.g., \":50051\")\n  - `Prompt` [interface{}] - Optional prompt for the key service\n\nOutput: \n- `error` - Returns an error if the server fails to start or encounters issues during execution",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/getsops/sops/v3/keyservice\"\n\t\"google.golang.org/grpc\"\n)\nfunc Run(opts Opts) error {\n\tlis, err := net.Listen(opts.Network, opts.Address)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer lis.Close()\n\tgrpcServer := grpc.NewServer()\n\tkeyservice.RegisterKeyServiceServer(grpcServer, keyservice.Server{\n\t\tPrompt: opts.Prompt,\n\t})\n\n\tsigc := make(chan os.Signal, 1)\n\tsignal.Notify(sigc, os.Interrupt, os.Kill, syscall.SIGTERM)\n\tgo func(c chan os.Signal) {\n\t\tsig := <-c\n\t\tlis.Close()\n\t\tos.Exit(0)\n\t}(sigc)\n\treturn grpcServer.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func Run(opts *options) error {\n    listener, err := net.Listen(opts.Network, opts.Address)\n    if err != nil {\n        return err\n    }\n\n    s := grpc.NewServer()\n    keyService := &keyService{prompt: opts.Prompt}\n    pb.RegisterKeyServiceServer(s, keyService)\n\n    quit := make(chan os.Signal, 1)\n    signal.Notify(quit, os.Interrupt, syscall.SIGTERM)\n\n    go func() {\n        <-quit\n        log.Println(\"Shutting down gRPC server...\")\n        s.GracefulStop()\n    }()\n\n    log.Printf(\"Starting gRPC server on %s\", opts.Address)\n    if err := s.Serve(listener); err != nil {\n        return err\n    }\n\n    return nil\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a function that sends a multipart/form-data POST request to a specified URL with file upload capabilities and custom headers.\n\nFunction Description: The function performs an HTTP POST request with multipart form data, including file upload functionality. It constructs the request with custom headers, sends it using a custom HTTP client, and returns the response body as a string. The function handles file operations and request/response lifecycle properly with appropriate error handling.\n\nInput:\n- url (string): The target URL for the POST request\n- method (string): HTTP method (typically \"POST\")\n- filePath (string): Path to the file to be uploaded\n- formFields (map[string]string): Key-value pairs for form fields\n- headers (map[string]string): Custom headers to include in the request\n\nOutput:\n- (string): The response body from the server\n- (error): Any error that occurred during the process (nil if successful)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/image/ad/\"\n\tmethod := \"POST\"\n\n\tpayload := &bytes.Buffer{}\n\twriter := multipart.NewWriter(payload)\n\t_ = writer.WriteField(\"advertiser_id\", \"1760312309087432\")\n\t_ = writer.WriteField(\"upload_type\", \"UPLOAD_BY_FILE\")\n\t_ = writer.WriteField(\"image_signature\", \"1faaf9020e0df18fdf0429e0db211f37\")\n\tfile, errFile4 := os.Open(\"/Users/betta/Desktop/\u5e38\u7528/1faaf9020e0df18fdf0429e0db211f37.png\")\n\tdefer file.Close()\n\tpart4,\n\t\terrFile4 := writer.CreateFormFile(\"image_file\", filepath.Base(\"/Users/betta/Desktop/\u5e38\u7528/1faaf9020e0df18fdf0429e0db211f37.png\"))\n\t_, errFile4 = io.Copy(part4, file)\n\tif errFile4 != nil {\n\t\tfmt.Println(errFile4)\n\t\treturn\n\t}\n\t_ = writer.WriteField(\"filename\", \"auto4_huchao.1faaf9020e0df18fdf0429e0db211f37_test\u73af\u5883slicess_\u5361\u901a_P_HC_HC_en_1X1_0s\")\n\terr := writer.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treq.Header.Add(\"Content-Type\", \"multipart/form-data\")\n\treq.Header.Add(\"Access-Token\", \"e88f206ab28a97ef494b853982d81739b81a1e37\")\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc sendMultipartRequest(url string, method string, filePath string, formFields map[string]string, headers map[string]string) (string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\n\tfor key, value := range formFields {\n\t\t_ = writer.WriteField(key, value)\n\t}\n\n\tpart, err := writer.CreateFormFile(\"file\", filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t_, err = io.Copy(part, file)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\terr = writer.Close()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treq, err := http.NewRequest(method, url, body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tfor key, value := range headers {\n\t\treq.Header.Set(key, value)\n\t}\n\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tresult, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(result), nil\n}"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Create a mock CSI (Container Storage Interface) provider server in Go that implements the gRPC interface for a secrets store CSI driver. This server should be able to simulate both successful and error responses for testing purposes.\n\nStruct Description: The MockCSIProviderServer struct represents a mock implementation of a CSI provider server that communicates via gRPC over a Unix domain socket. It allows configuration of mock responses and error conditions for testing the CSI driver integration.\n\nFields:\n- grpcServer: *grpc.Server - The gRPC server instance\n- listener: net.Listener - The network listener for the gRPC server\n- socketPath: string - The filesystem path for the Unix domain socket\n- returnErr: error - An error to return for simulated error conditions\n- errorCode: string - The error code to include in responses\n- objects: []*v1alpha1.ObjectVersion - Mock object versions to return\n- files: []*v1alpha1.File - Mock files to return\n\nMethods:\n- NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) - Creates a new mock server instance with the given socket path\n- SetReturnError(err error) - Sets an error to be returned by the mock server\n- SetObjects(objects map[string]string) - Configures mock object versions to return\n- SetFiles(files []*v1alpha1.File) - Configures mock files to return\n- SetProviderErrorCode(errorCode string) - Sets the error code for responses\n- Start() error - Starts the gRPC server listening on the configured socket\n- Stop() - Gracefully stops the gRPC server\n- Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) - Implements the Mount gRPC method\n- Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) - Implements the Version gRPC method",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\n\t\"sigs.k8s.io/secrets-store-csi-driver/provider/v1alpha1\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer *grpc.Server\n\tlistener   net.Listener\n\tsocketPath string\n\treturnErr  error\n\terrorCode  string\n\tobjects    []*v1alpha1.ObjectVersion\n\tfiles      []*v1alpha1.File\n}\n\nfunc NewMocKCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tserver := grpc.NewServer()\n\ts := &MockCSIProviderServer{\n\t\tgrpcServer: server,\n\t\tsocketPath: socketPath,\n\t}\n\tv1alpha1.RegisterCSIDriverProviderServer(server, s)\n\treturn s, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tvar ov []*v1alpha1.ObjectVersion\n\tfor k, v := range objects {\n\t\tov = append(ov, &v1alpha1.ObjectVersion{Id: k, Version: v})\n\t}\n\tm.objects = ov\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tvar ov []*v1alpha1.File\n\tfor _, v := range files {\n\t\tov = append(ov, &v1alpha1.File{\n\t\t\tPath:     v.Path,\n\t\t\tMode:     v.Mode,\n\t\t\tContents: v.Contents,\n\t\t})\n\t}\n\tm.files = ov\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\tvar err error\n\tm.listener, err = net.Listen(\"unix\", m.socketPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tgo func() {\n\t\tif err = m.grpcServer.Serve(m.listener); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.GracefulStop()\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tvar attrib, secret map[string]string\n\tvar filePermission os.FileMode\n\tvar err error\n\n\tif m.returnErr != nil {\n\t\treturn &v1alpha1.MountResponse{}, m.returnErr\n\t}\n\tif err = json.Unmarshal([]byte(req.GetAttributes()), &attrib); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal attributes, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetSecrets()), &secret); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal secrets, error: %w\", err)\n\t}\n\tif err = json.Unmarshal([]byte(req.GetPermission()), &filePermission); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal file permission, error: %w\", err)\n\t}\n\treturn &v1alpha1.MountResponse{\n\t\tObjectVersion: m.objects,\n\t\tError: &v1alpha1.Error{\n\t\t\tCode: m.errorCode,\n\t\t},\n\t\tFiles: m.files,\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion:        \"v1alpha1\",\n\t\tRuntimeName:    \"fakeprovider\",\n\t\tRuntimeVersion: \"0.0.10\",\n\t}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n\t\"github.com/container-storage-interface/spec/lib/go/csi\"\n\t\"github.com/container-storage-interface/spec/lib/go/csi/v1alpha1\"\n)\n\ntype MockCSIProviderServer struct {\n\tgrpcServer *grpc.Server\n\tlistener   net.Listener\n\tsocketPath string\n\treturnErr  error\n\terrorCode  string\n\tobjects    map[string]string\n\tfiles      []*v1alpha1.File\n\tmu         sync.Mutex\n}\n\nfunc NewMockCSIProviderServer(socketPath string) (*MockCSIProviderServer, error) {\n\tif err := os.RemoveAll(socketPath); err != nil && !os.IsNotExist(err) {\n\t\treturn nil, err\n\t}\n\treturn &MockCSIProviderServer{\n\t\tsocketPath: socketPath,\n\t\tobjects:    make(map[string]string),\n\t}, nil\n}\n\nfunc (m *MockCSIProviderServer) SetReturnError(err error) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.returnErr = err\n}\n\nfunc (m *MockCSIProviderServer) SetObjects(objects map[string]string) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.objects = objects\n}\n\nfunc (m *MockCSIProviderServer) SetFiles(files []*v1alpha1.File) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.files = files\n}\n\nfunc (m *MockCSIProviderServer) SetProviderErrorCode(errorCode string) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.errorCode = errorCode\n}\n\nfunc (m *MockCSIProviderServer) Start() error {\n\tvar err error\n\tm.listener, err = net.Listen(\"unix\", m.socketPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcsi.RegisterNodeServiceServer(m.grpcServer, m)\n\tcsi.RegisterControllerServiceServer(m.grpcServer, m)\n\n\tgo func() {\n\t\tif err := m.grpcServer.Serve(m.listener); err != nil {\n\t\t\tfmt.Printf(\"gRPC server exited with error: %v\\n\", err)\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (m *MockCSIProviderServer) Stop() {\n\tm.grpcServer.Stop()\n\tos.Remove(m.socketPath)\n}\n\nfunc (m *MockCSIProviderServer) Mount(ctx context.Context, req *v1alpha1.MountRequest) (*v1alpha1.MountResponse, error) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tif m.returnErr != nil {\n\t\treturn nil, m.returnErr\n\t}\n\n\tresp := &v1alpha1.MountResponse{}\n\tresp.TargetPath = req.TargetPath\n\tresp.Secrets = req.Secrets\n\tresp.Files = m.files\n\tresp.Objects = m.objects\n\tresp.ErrorCode = m.errorCode\n\n\treturn resp, nil\n}\n\nfunc (m *MockCSIProviderServer) Version(ctx context.Context, req *v1alpha1.VersionRequest) (*v1alpha1.VersionResponse, error) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tif m.returnErr != nil {\n\t\treturn nil, m.returnErr\n\t}\n\n\treturn &v1alpha1.VersionResponse{\n\t\tVersion: \"1.0.0\",\n\t}, nil\n}"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles DNS queries and watch functionality, supporting TLS encryption and OpenTracing for distributed tracing.\n\nStruct Description: ServergRPC is a gRPC server implementation that processes DNS queries and provides watch capabilities. It manages server lifecycle, handles TLS configuration, and integrates with tracing systems.\n\nFields:\n\nServer: [*Server] - Embedded DNS server instance that handles core DNS functionality\ngrpcServer: [*grpc.Server] - The gRPC server instance\nlistenAddr: [net.Addr] - Network address the server is listening on\ntlsConfig: [*tls.Config] - TLS configuration for secure connections\nwatch: [watch.Watcher] - Watcher instance for handling watch requests\n\nMethods:\n\nNewServergRPC: [func(addr string, group []*Config) (*ServergRPC, error)] -> Creates a new ServergRPC instance with the given address and configuration group\nServe: [func(l net.Listener) error] -> Starts the gRPC server on the provided listener\nQuery: [func(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error)] -> Handles incoming DNS query requests\nWatch: [func(stream pb.DnsService_WatchServer) error] -> Handles watch stream requests\nStop: [func() error] -> Gracefully stops the server and watcher\nShutdown: [func() error] -> Immediately stops the server without waiting for connections to close",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\n\t\"github.com/coredns/coredns/pb\"\n\t\"github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc\"\n\t\"github.com/miekg/dns\"\n\t\"github.com/opentracing/opentracing-go\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/peer\"\n)\n\ntype ServergRPC struct {\n\t*Server\n\tgrpcServer *grpc.Server\n\tlistenAddr net.Addr\n\ttlsConfig  *tls.Config\n\twatch      watch.Watcher\n}\n\nfunc NewServergRPC(addr string, group []*Config) (*ServergRPC, error) {\n\ts, err := NewServer(addr, group)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar tlsConfig *tls.Config\n\tfor _, conf := range s.zones {\n\t\ttlsConfig = conf.TLSConfig\n\t}\n\treturn &ServergRPC{Server: s, tlsConfig: tlsConfig, watch: watch.NewWatcher(watchables(s.zones))}, nil\n}\n\nfunc (s *ServergRPC) Serve(l net.Listener) error {\n\ts.m.Lock()\n\ts.listenAddr = l.Addr()\n\ts.m.Unlock()\n\n\tif s.Tracer() != nil {\n\t\tonlyIfParent := func(parentSpanCtx opentracing.SpanContext, method string, req, resp interface{}) bool {\n\t\t\treturn parentSpanCtx != nil\n\t\t}\n\t\tintercept := otgrpc.OpenTracingServerInterceptor(s.Tracer(), otgrpc.IncludingSpans(onlyIfParent))\n\t\ts.grpcServer = grpc.NewServer(grpc.UnaryInterceptor(intercept))\n\t} else {\n\t\ts.grpcServer = grpc.NewServer()\n\t}\n\n\tpb.RegisterDnsServiceServer(s.grpcServer, s)\n\n\tif s.tlsConfig != nil {\n\t\tl = tls.NewListener(l, s.tlsConfig)\n\t}\n\treturn s.grpcServer.Serve(l)\n}\n\nfunc (s *ServergRPC) Query(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error) {\n\tmsg := new(dns.Msg)\n\terr := msg.Unpack(in.Msg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tp, ok := peer.FromContext(ctx)\n\tif !ok {\n\t\treturn nil, errors.New(\"no peer in gRPC context\")\n\t}\n\n\ta, ok := p.Addr.(*net.TCPAddr)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"no TCP peer in gRPC context: %v\", p.Addr)\n\t}\n\n\tw := &gRPCresponse{localAddr: s.listenAddr, remoteAddr: a, Msg: msg}\n\n\ts.ServeDNS(ctx, w, msg)\n\n\tpacked, err := w.Msg.Pack()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &pb.DnsPacket{Msg: packed}, nil\n}\n\nfunc (s *ServergRPC) Watch(stream pb.DnsService_WatchServer) error {\n\treturn s.watch.Watch(stream)\n}\n\nfunc (s *ServergRPC) Stop() (err error) {\n\ts.m.Lock()\n\tdefer s.m.Unlock()\n\tif s.watch != nil {\n\t\ts.watch.Stop()\n\t}\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.GracefulStop()\n\t}\n\treturn\n}\n\nfunc (s *ServergRPC) Shutdown() error {\n\tif s.grpcServer != nil {\n\t\ts.grpcServer.Stop()\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\n\t\"github.com/golang/protobuf/proto\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/tls_credentials\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/peer\"\n\t\"opentracing-go\"\n\t\"opentracing-go/ext\"\n\t\"opentracing-go/log\"\n)\n\ntype ServergRPC struct {\n\tServer     *Server\n\tgrpcServer *grpc.Server\n\tlistenAddr net.Addr\n\ttlsConfig  *tls.Config\n\twatch      *watch.Watcher\n}\n\ntype Server struct {\n\tmu       sync.Mutex\n\tqueries  map[string]string\n\tentries  map[string]*Entry\n\tentriesL sync.RWMutex\n}\n\ntype Entry struct {\n\tValue string\n\tTS    int64\n}\n\ntype Config struct {\n\tName  string\n\tValue string\n}\n\nfunc NewServergRPC(addr string, group []*Config) (*ServergRPC, error) {\n\tserver := &Server{\n\t\tqueries: make(map[string]string),\n\t\tentries: make(map[string]*Entry),\n\t}\n\tfor _, c := range group {\n\t\tserver.entries[c.Name] = &Entry{Value: c.Value, TS: time.Now().UnixNano()}\n\t}\n\ttlsConfig, err := createTLSConfig()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tgrpcServer := grpc.NewServer(\n\t\tgrpc.Creds(tls_credentials.NewServerCredentials(tlsConfig)),\n\t\tgrpc.UnaryInterceptor(tracingUnaryInterceptor),\n\t\tgrpc.StreamInterceptor(tracingStreamInterceptor),\n\t)\n\tsrv := &ServergRPC{\n\t\tServer:     server,\n\t\tgrpcServer: grpcServer,\n\t\tlistenAddr: &net.TCPAddr{IP: net.ParseIP(\"127.0.0.1\"), Port: 50051},\n\t\ttlsConfig:  tlsConfig,\n\t\twatch:      &watch.Watcher{},\n\t}\n\tpb.RegisterDnsServiceServer(grpcServer, srv)\n\treturn srv, nil\n}\n\nfunc (s *ServergRPC) Serve(l net.Listener) error {\n\tfmt.Printf(\"Starting gRPC server on %v\\n\", s.listenAddr)\n\treturn s.grpcServer.Serve(l)\n}\n\nfunc (s *ServergRPC) Query(ctx context.Context, in *pb.DnsPacket) (*pb.DnsPacket, error) {\n\tspan, _ := opentracing.StartSpanFromContext(ctx, \"Query\")\n\tdefer span.Finish()\n\tspan.SetTag(\"operation\", \"Query\")\n\tspan.LogFields(log.String(\"query\", in.Query))\n\t\n\tvar response *pb.DnsPacket\n\tif val, ok := s.Server.queries[in.Query]; ok {\n\t\tresponse = &pb.DnsPacket{\n\t\t\tQuery: in.Query,\n\t\t\tValue: val,\n\t\t}\n\t} else {\n\t\tresponse = &pb.DnsPacket{\n\t\t\tQuery: in.Query,\n\t\t\tValue: \"Not found\",\n\t\t}\n\t}\n\t\n\tspan.LogFields(log.String(\"response\", response.Value))\n\treturn response, nil\n}\n\nfunc (s *ServergRPC) Watch(stream pb.DnsService_WatchServer) error {\n\tspan, _ := opentracing.StartSpan(\"Watch\")\n\tdefer span.Finish()\n\tspan.SetTag(\"operation\", \"Watch\")\n\t\n\tfor {\n\t\tin, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t\n\t\tspan.LogFields(log.String(\"request\", in.Query))\n\t\tspan.SetTag(\"query\", in.Query)\n\t\t\n\t\tif val, ok := s.Server.queries[in.Query]; ok {\n\t\t\tif err := stream.Send(&pb.DnsPacket{\n\t\t\t\tQuery: in.Query,\n\t\t\t\tValue: val,\n\t\t\t}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (s *ServergRPC) Stop() error {\n\ts.watch.Stop()\n\treturn nil\n}\n\nfunc (s *ServergRPC) Shutdown() error {\n\ts.grpcServer.Stop()\n\treturn nil\n}\n\nfunc tracingUnaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\tspan, _ := opentracing.GlobalTracer().StartSpan(info.FullMethod)\n\tdefer span.Finish()\n\t\n\tspan.SetTag(\"operation\", info.FullMethod)\n\t\n\t// Extract peer information\n\tpeerInfo, ok := peer.FromContext(ctx)\n\tif ok {\n\t\tspan.SetTag(\"peer.address\", peerInfo.Addr)\n\t}\n\t\n\t// Extract metadata\n\tmd, ok := metadata.FromContext(ctx)\n\tif ok {\n\t\tfor k, v := range md {\n\t\t\tspan.SetTag(k, v)\n\t\t}\n\t}\n\t\n\t// Log request\n\tspan.LogFields(log.Object(\"request\", proto.Marshal(req)))\n\t\n\tresp, err := handler(ctx, req)\n\tif err != nil {\n\t\tspan.LogFields(log.String(\"error\", err.Error()))\n\t\tspan.SetTag(\"error\", true)\n\t}\n\t\n\t// Log response\n\tspan.LogFields(log.Object(\"response\", resp))\n\t\n\treturn resp, err\n}\n\nfunc tracingStreamInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\tspan, _ := opentracing.GlobalTracer().StartSpan(info.FullMethod)\n\tdefer span.Finish()\n\t\n\tspan.SetTag(\"operation\", info.FullMethod)\n\t\n\t// Extract peer information\n\tpeerInfo, ok := peer.FromContext(ss.Context())\n\tif ok {\n\t\tspan.SetTag(\"peer.address\", peerInfo.Addr)\n\t}\n\t\n\t// Extract metadata\n\tmd, ok := metadata.FromContext(ss.Context())\n\tif ok {\n\t\tfor k, v := range md {\n\t\t\tspan.SetTag(k, v)\n\t\t}\n\t}\n\t\n\treturn handler(srv, ss)\n}\n\nfunc createTLSConfig() (*tls.Config, error) {\n\tcert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn &tls.Config{\n\t\tCertificates: []tls.Certificate{cert},\n\t\tMinVersion:   tls.VersionTLS12,\n\t}, nil\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a function to push metrics to a Prometheus push gateway using HTTP requests with custom headers and client configuration.\n\nFunction Description: The function `doPush` sends collected metrics to a Prometheus push gateway. It validates the job name and grouping labels, constructs the appropriate URL, encodes the metrics in Protocol Buffer format, and makes an HTTP request with custom headers. It handles errors during the process and checks the response status.\n\nInput:\n- `job` (string): The job name to associate with the pushed metrics\n- `grouping` (map[string]string): Key-value pairs for metric grouping\n- `pushURL` (string): The base URL of the Prometheus push gateway\n- `g` (prometheus.Gatherer): Interface to gather metrics\n- `method` (string): HTTP method to use for the request (e.g., \"POST\")\n\nOutput:\n- `error`: Returns nil on success, or an error describing any failure during the push operation",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/common/expfmt\"\n\t\"github.com/prometheus/common/model\"\n)\n\nconst contentTypeHeader = \"Content-Type\"\n\nvar (\n\tclient         = &http.Client{}\n\tdefaultTimeout = time.Second * 15\n)\n\nfunc doPush(job string, grouping map[string]string, pushURL string, g prometheus.Gatherer, method string) error {\n\tif !strings.Contains(pushURL, \"://\") {\n\t\tpushURL = \"http://\" + pushURL\n\t}\n\tif strings.HasSuffix(pushURL, \"/\") {\n\t\tpushURL = pushURL[:len(pushURL)-1]\n\t}\n\n\tif strings.Contains(job, \"/\") {\n\t\treturn fmt.Errorf(\"job contains '/': %s\", job)\n\t}\n\turlComponents := []string{url.QueryEscape(job)}\n\tfor ln, lv := range grouping {\n\t\tif !model.LabelName(ln).IsValid() {\n\t\t\treturn fmt.Errorf(\"grouping label has invalid name: %s\", ln)\n\t\t}\n\t\tif strings.Contains(lv, \"/\") {\n\t\t\treturn fmt.Errorf(\"value of grouping label %s contains '/': %s\", ln, lv)\n\t\t}\n\t\turlComponents = append(urlComponents, ln, lv)\n\t}\n\tpushURL = fmt.Sprintf(\"%s/metrics/job/%s\", pushURL, strings.Join(urlComponents, \"/\"))\n\n\tmfs, err := g.Gather()\n\tif err != nil {\n\t\treturn err\n\t}\n\tbuf := &bytes.Buffer{}\n\tenc := expfmt.NewEncoder(buf, expfmt.FmtProtoDelim)\n\tfor _, mf := range mfs {\n\t\tfor _, m := range mf.GetMetric() {\n\t\t\tfor _, l := range m.GetLabel() {\n\t\t\t\tif l.GetName() == \"job\" {\n\t\t\t\t\treturn fmt.Errorf(\"pushed metric %s (%s) already contains a job label\", mf.GetName(), m)\n\t\t\t\t}\n\t\t\t\tif _, ok := grouping[l.GetName()]; ok {\n\t\t\t\t\treturn fmt.Errorf(\n\t\t\t\t\t\t\"pushed metric %s (%s) already contains grouping label %s\",\n\t\t\t\t\t\tmf.GetName(), m, l.GetName(),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tenc.Encode(mf)\n\t}\n\treq, err := http.NewRequest(method, pushURL, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(contentTypeHeader, string(expfmt.FmtProtoDelim))\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 202 {\n\t\tbody, _ := ioutil.ReadAll(resp.Body)\n\t\treturn fmt.Errorf(\"unexpected status code %d while pushing to %s: %s\", resp.StatusCode, pushURL, body)\n\t}\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func doPush(job string, grouping map[string]string, pushURL string, g prometheus.Gatherer, method string) error {\n\tif job == \"\" {\n\t\treturn fmt.Errorf(\"job name is required\")\n\t}\n\tmetricFamilies, err := g.Gather()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlabels := make(prometheus.Labels)\n\tfor k, v := range grouping {\n\t\tlabels[k] = v\n\t}\n\tvar buf bytes.Buffer\n\tencoder := encoding.NewEncoder(&buf)\n\tfor _, family := range metricFamilies {\n\t\tif err := encoder.EncodeFamily(family); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\turl := pushURL + \"/metrics/job/\" + url.PathEscape(job)\n\tif len(labels) > 0 {\n\t\tfor k, v := range labels {\n\t\t\turl += \"/label/\" + url.PathEscape(k) + \"/\" + url.PathEscape(v)\n\t\t}\n\t}\n\treq, err := http.NewRequest(method, url, &buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/vnd.google_protobuf; proto=io.prometheus.client.MetricFamily\")\n\treq.Header.Set(\"User-Agent\", \"myapp/1.0\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn fmt.Errorf(\"unexpected HTTP status code: %d\", resp.StatusCode)\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Implement a gRPC server in Go that listens for incoming requests and handles graceful shutdown.\n\nStruct Description: The Plumber struct represents a gRPC server instance with configuration options, logging, and shutdown capabilities.\n\nFields:\n- Config: *options.Config - Configuration settings for the server\n- CLIOptions: *options.CLIOptions - Command line interface options\n- PersistentConfig: *options.PersistentConfig - Persistent configuration settings\n- Actions: *actions.Actions - Server actions and operations\n- Bus: bus.IBus - Message bus interface\n- ServiceShutdownCtx: context.Context - Context for shutdown signaling\n- log: *logrus.Entry - Logger instance\n\nMethods:\n- startGRPCServer: () -> error - Starts the gRPC server and listens for incoming requests\n- watchServiceShutdown: (*grpc.Server) -> () - Monitors for shutdown signals and stops the gRPC server gracefully",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/batchcorp/plumber-schemas/build/go/protos\"\n\t\"github.com/streamdal/plumber/server\"\n)\n\ntype Plumber struct {\n\tConfig               *options.Config\n\tCLIOptions           *options.CLIOptions\n\tPersistentConfig     *options.PersistentConfig\n\tActions              *actions.Actions\n\tBus                  bus.IBus\n\tServiceShutdownCtx   context.Context\n\tlog                  *logrus.Entry\n}\n\nfunc (p *Plumber) startGRPCServer() error {\n\tlis, err := net.Listen(\"tcp\", p.CLIOptions.Server.GrpcListenAddress)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to listen on '%s': %s\", p.CLIOptions.Server.GrpcListenAddress, err)\n\t}\n\n\tvar opts []grpc.ServerOption\n\n\tgrpcServer := grpc.NewServer(opts...)\n\n\tp.PersistentConfig.ClusterID = p.CLIOptions.Server.ClusterId\n\n\tplumberServer := &server.Server{\n\t\tActions:          p.Actions,\n\t\tPersistentConfig: p.PersistentConfig,\n\t\tAuthToken:        p.CLIOptions.Server.AuthToken,\n\t\tBus:              p.Bus,\n\t\tLog:              logrus.WithField(\"pkg\", \"plumber/cli_server.go\"),\n\t\tCLIOptions:       p.CLIOptions,\n\t}\n\n\tprotos.RegisterPlumberServerServer(grpcServer, plumberServer)\n\n\tgo p.watchServiceShutdown(grpcServer)\n\n\tp.log.Debugf(\"starting gRPC server on %s\", p.CLIOptions.Server.GrpcListenAddress)\n\n\terrCh := make(chan error, 1)\n\n\tgo func() {\n\t\tif err := grpcServer.Serve(lis); err != nil {\n\t\t\terrCh <- errors.Wrap(err, \"unable to start gRPC server\")\n\t\t}\n\t}()\n\n\tafterCh := time.After(5 * time.Second)\n\n\tselect {\n\tcase <-afterCh:\n\t\treturn nil\n\tcase err := <-errCh:\n\t\treturn err\n\t}\n}\n\nfunc (p *Plumber) watchServiceShutdown(grpcServer *grpc.Server) {\n\t<-p.ServiceShutdownCtx.Done()\n\n\tp.log.Debug(\"received shutdown request in gRPC server via ServiceShutdownCtx\")\n\n\ttime.Sleep(5 * time.Second)\n\n\tgrpcServer.Stop()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "func (p *Plumber) startGRPCServer() error {\n\ts := grpc.NewServer(p.Config.GRPCOptions...)\n\tif err := p.Actions.RegisterServices(s); err != nil {\n\t\treturn err\n\t}\n\tlistener, err := net.Listen(p.Config.GRPCNetwork, p.Config.GRPCAddress)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.ServiceShutdownCtx = context.Background()\n\tgo p.watchServiceShutdown(s)\n\treturn s.Serve(listener)\n}\n\nfunc (p *Plumber) watchServiceShutdown(s *grpc.Server) {\n\tshutdownChan := make(chan struct{})\n\tgo func() {\n\t\t<-p.ServiceShutdownCtx.Done()\n\t\tshutdownChan <- struct{}{}\n\t}()\n\t<-shutdownChan\n\ts.GracefulStop()\n}"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests using ALTS (Application Layer Transport Security) for authentication.\n\nFunction Description: The main function sets up a gRPC server with ALTS credentials, registers an Echo service implementation, and starts listening on a specified TCP port.\n\nInput:\n- port (int): The TCP port number on which the server should listen (passed via command-line flag)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)\n\nMethods:\n- None (this is a function-level implementation, not a struct)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/alts\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\taltsTC := alts.NewServerCreds(alts.DefaultServerOptions())\n\n\ts := grpc.NewServer(grpc.Creds(altsTC))\n\n\tpb.RegisterEchoServer(s, &ecServer{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func main() {\n\tflag.IntVar(&port, \"port\", 50051, \"TCP port to listen on\")\n\tflag.Parse()\n\n\tcreds, err := alts.NewServerCredentials(alts.WithTokenExchange(false))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create ALTS credentials: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.Creds(creds))\n\treflection.Register(s)\n\n\techo.RegisterEchoServer(s, &echoServer{})\n\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tlog.Printf(\"Server is listening on port %d\", port)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a gRPC server in Go that handles metric forwarding operations, including server initialization, startup, and metric processing.\n\nStruct Description: The Server struct represents a gRPC server for forwarding metrics. It manages server lifecycle, handles incoming metric data, and provides logging capabilities.\n\nFields:\n\nserver: *grpc.Server - The gRPC server instance\naddress: string - Network address to bind the server to\ningest: sources.Ingest - Interface for processing incoming metrics\nlistener: net.Listener - Network listener for incoming connections\nlogger: *logrus.Entry - Logger for server operations\nopts: *options - Configuration options for the server\nreadyChannel: chan struct{} - Channel to signal when server is ready\n\nMethods:\n\nNew: (address string, logger *logrus.Entry, opts ...Option) -> *Server - Creates a new Server instance with specified address, logger, and optional configurations. Initializes gRPC server and registers services.\n\nStart: (ingest sources.Ingest) -> error - Starts the gRPC server, binds to the specified address, and begins listening for incoming connections. Takes a metric ingestion interface as input. Returns any error that occurs during startup or operation.\n\nSendMetricsV2: (server forwardrpc.Forward_SendMetricsV2Server) -> error - Handles incoming metric streams from clients. Processes each metric received and sends back an empty response when done. Returns any error that occurs during stream processing.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n\n\t\"context\"\n\n\t\"github.com/golang/protobuf/ptypes/empty\"\n\t\"github.com/sirupsen/logrus\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n\n\t\"github.com/stripe/veneur/v14/forwardrpc\"\n\t\"github.com/stripe/veneur/v14/sources\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype Server struct {\n\tserver       *grpc.Server\n\taddress      string\n\tingest       sources.Ingest\n\tlistener     net.Listener\n\tlogger       *logrus.Entry\n\topts         *options\n\treadyChannel chan struct{}\n}\n\nfunc New(address string, logger *logrus.Entry, opts ...Option) *Server {\n\tres := &Server{\n\t\taddress:      address,\n\t\tlogger:       logger,\n\t\topts:         &options{},\n\t\tserver:       grpc.NewServer(),\n\t\treadyChannel: make(chan struct{}),\n\t}\n\n\tfor _, opt := range opts {\n\t\topt(res.opts)\n\t}\n\n\tif res.opts.traceClient == nil {\n\t\tres.opts.traceClient = trace.DefaultClient\n\t}\n\n\tforwardrpc.RegisterForwardServer(res.server, res)\n\n\treturn res\n}\n\nfunc (s *Server) Start(ingest sources.Ingest) error {\n\ts.ingest = ingest\n\n\tvar err error\n\ts.listener, err = net.Listen(\"tcp\", s.address)\n\tif err != nil {\n\t\ts.logger.WithError(err).WithField(\"address\", s.address).\n\t\t\tErrorf(\"failed to bind import server\")\n\t\treturn err\n\t}\n\n\tlogger := s.logger.WithFields(logrus.Fields{\"address\": s.listener.Addr()})\n\tlogger.Info(\"Starting gRPC server\")\n\n\tclose(s.readyChannel)\n\terr = s.server.Serve(s.listener)\n\tif err != nil {\n\t\tlogger.WithError(err).Error(\"gRPC server was not shut down cleanly\")\n\t}\n\tlogger.Info(\"Stopped gRPC server\")\n\treturn err\n}\n\nfunc (s *Server) SendMetricsV2(\n\tserver forwardrpc.Forward_SendMetricsV2Server,\n) error {\n\tfor {\n\t\tmetric, err := server.Recv()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t} else if err != nil {\n\t\t\ts.logger.WithError(err).Error(\"error recieving metrics\")\n\t\t\treturn err\n\t\t}\n\t\ts.ingest.IngestMetricProto(metric)\n\t}\n\terr := server.SendAndClose(&emptypb.Empty{})\n\tif err != nil {\n\t\ts.logger.WithError(err).Error(\"error closing stream\")\n\t}\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/metadata\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/validator\"\n\t\"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/auth\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/timeout\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/chain\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/circuitbreaker\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/retry\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/trace\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/authorization\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/observability\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/healthcheck\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/metrics\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/telemetry\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/tracing\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/validation\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapper\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfunc\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrappers\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/wrapperfuncset\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests, optionally with TLS security, and registers a test service for handling RPC calls.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified port, configures TLS if enabled, creates a new gRPC server instance, registers a test service, and starts serving incoming requests.\n\nInput:\n- port (int): The port number on which the server should listen\n- useTLS (bool): Flag indicating whether to use TLS security\n- certFile (string): Path to the TLS certificate file (required if useTLS is true)\n- keyFile (string): Path to the TLS private key file (required if useTLS is true)\n\nOutput:\n- None (the function runs indefinitely to serve requests or exits on error)",
    "Canonical_solution": "import (\n\t\"flag\"\n\t\"net\"\n\t\"strconv\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/grpclog\"\n\t\"google.golang.org/grpc/interop\"\n\ttestpb \"google.golang.org/grpc/interop/grpc_testing\"\n)\nfunc main() {\n\tflag.Parse()\n\tp := strconv.Itoa(*port)\n\tlis, err := net.Listen(\"tcp\", \":\"+p)\n\tif err != nil {\n\t\tgrpclog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tvar opts []grpc.ServerOption\n\tif *useTLS {\n\t\tcreds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)\n\t\tif err != nil {\n\t\t\tgrpclog.Fatalf(\"Failed to generate credentials %v\", err)\n\t\t}\n\t\topts = []grpc.ServerOption{grpc.Creds(creds)}\n\t}\n\tserver := grpc.NewServer(opts...)\n\ttestpb.RegisterTestServiceServer(server, interop.NewTestServer())\n\tserver.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func main() {\n\tif len(os.Args) < 2 {\n\t\tlog.Fatalf(\"Usage: %s <port>\", os.Args[0])\n\t}\n\tport := os.Args[1]\n\tuseTLS := false\n\tcertFile := \"\"\n\tkeyFile := \"\"\n\n\tif len(os.Args) > 2 {\n\t\tuseTLS = true\n\t\tcertFile = os.Args[2]\n\t\tkeyFile = os.Args[3]\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \":\"+port)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\topts := []grpc.ServerOption{}\n\tif useTLS {\n\t\tcert, err := tls.LoadX509KeyPair(certFile, keyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to load TLS certificate: %v\", err)\n\t\t}\n\t\tconfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{cert},\n\t\t}\n\t\tcreds := grpc.NewTLSChannelCredentials(config)\n\t\topts = append(opts, grpc.Creds(creds))\n\t\tlis = tls.NewListener(lis, config)\n\t}\n\n\tserver := grpc.NewServer(opts...)\n\ttestService := &testService{}\n\tRegisterTestServiceServer(server, testService)\n\n\tlog.Printf(\"Server is listening on port %s\", port)\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"Failed to serve: %v\", err)\n\t}\n}\n\ntype TestServiceServer interface {\n\tTest(ctx context.Context, req *TestRequest) (*TestResponse, error)\n}\n\ntype testService struct{}\n\nfunc (t *testService) Test(ctx context.Context, req *TestRequest) (*TestResponse, error) {\n\treturn &TestResponse{Message: \"Hello from gRPC server\"}, nil\n}\n\nvar _ TestServiceServer = (*testService)(nil)\n\nfunc RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {\n\tgrpc.RegisterService(&TestService_ServiceDesc, srv)\n}\n\ntype TestRequest struct {\n\tMessage string `json:\"message\"`\n}\n\ntype TestResponse struct {\n\tMessage string `json:\"message\"`\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a comprehensive HTTP client in Go that can handle various API requests with custom configurations, including base URLs, request headers, and rate limiting. The client should support multiple API services and provide methods for creating and executing HTTP requests.\n\nStruct Description: The Client struct represents an HTTP client with configuration for making API requests. It includes base URLs, user agent, rate limiting capabilities, and various service clients for different API endpoints.\n\nFields:\n\nclientMu: sync.Mutex - Mutex for thread-safe access to the HTTP client\nclient: *http.Client - The underlying HTTP client used for requests\nBaseURL: *url.URL - Base URL for API requests\nUploadURL: *url.URL - Base URL for upload requests\nUserAgent: string - User agent string for requests\nrateMu: sync.Mutex - Mutex for thread-safe rate limiting\nrateLimits: [categories]Rate - Rate limit tracking for different categories\ncommon: service - Shared service implementation\n\nMethods:\n\nNewClient: (*http.Client) -> *Client - Creates a new Client instance with optional custom HTTP client\nNewRequest: (method string, urlStr string, body interface{}) -> (*http.Request, error) - Creates a new HTTP request with proper headers and body encoding\nDo: (ctx context.Context, req *http.Request, v interface{}) -> (*Response, error) - Executes an HTTP request with context support and handles response decoding",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tclientMu sync.Mutex\n\tclient   *http.Client\n\n\tBaseURL   *url.URL\n\tUploadURL *url.URL\n\tUserAgent string\n\n\trateMu     sync.Mutex\n\trateLimits [categories]Rate\n\n\tcommon service\n\n\tActions        *ActionsService\n\tActivity       *ActivityService\n\tAdmin          *AdminService\n\tApps           *AppsService\n\tAuthorizations *AuthorizationsService\n\tChecks         *ChecksService\n\tGists          *GistsService\n\tGit            *GitService\n\tGitignores     *GitignoresService\n\tInteractions   *InteractionsService\n\tIssues         *IssuesService\n\tLicenses       *LicensesService\n\tMarketplace    *MarketplaceService\n\tMigrations     *MigrationService\n\tOrganizations  *OrganizationsService\n\tProjects       *ProjectsService\n\tPullRequests   *PullRequestsService\n\tReactions      *ReactionsService\n\tRepositories   *RepositoriesService\n\tSearch         *SearchService\n\tTeams          *TeamsService\n\tUsers          *UsersService\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{}\n\t}\n\tbaseURL, _ := url.Parse(defaultBaseURL)\n\tuploadURL, _ := url.Parse(uploadBaseURL)\n\n\tc := &Client{client: httpClient, BaseURL: baseURL, UserAgent: userAgent, UploadURL: uploadURL}\n\tc.common.client = c\n\tc.Actions = (*ActionsService)(&c.common)\n\tc.Activity = (*ActivityService)(&c.common)\n\tc.Admin = (*AdminService)(&c.common)\n\tc.Apps = (*AppsService)(&c.common)\n\tc.Authorizations = (*AuthorizationsService)(&c.common)\n\tc.Checks = (*ChecksService)(&c.common)\n\tc.Gists = (*GistsService)(&c.common)\n\tc.Git = (*GitService)(&c.common)\n\tc.Gitignores = (*GitignoresService)(&c.common)\n\tc.Interactions = (*InteractionsService)(&c.common)\n\tc.Issues = (*IssuesService)(&c.common)\n\tc.Licenses = (*LicensesService)(&c.common)\n\tc.Marketplace = &MarketplaceService{client: c}\n\tc.Migrations = (*MigrationService)(&c.common)\n\tc.Organizations = (*OrganizationsService)(&c.common)\n\tc.Projects = (*ProjectsService)(&c.common)\n\tc.PullRequests = (*PullRequestsService)(&c.common)\n\tc.Reactions = (*ReactionsService)(&c.common)\n\tc.Repositories = (*RepositoriesService)(&c.common)\n\tc.Search = (*SearchService)(&c.common)\n\tc.Teams = (*TeamsService)(&c.common)\n\tc.Users = (*UsersService)(&c.common)\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tif !strings.HasSuffix(c.BaseURL.Path, \"/\") {\n\t\treturn nil, fmt.Errorf(\"BaseURL must have a trailing slash, but %q does not\", c.BaseURL)\n\t}\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf io.ReadWriter\n\tif body != nil {\n\t\tbuf = &bytes.Buffer{}\n\t\tenc := json.NewEncoder(buf)\n\t\tenc.SetEscapeHTML(false)\n\t\terr := enc.Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treq.Header.Set(\"Accept\", mediaTypeV3)\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx == nil {\n\t\treturn nil, errors.New(\"context must be non-nil\")\n\t}\n\treq = withContext(ctx, req)\n\n\trateLimitCategory := category(req.URL.Path)\n\n\tif err := c.checkRateLimitBeforeDo(req, rateLimitCategory); err != nil {\n\t\treturn &Response{\n\t\t\tResponse: err.Response,\n\t\t\tRate:     err.Rate,\n\t\t}, err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif e, ok := err.(*url.Error); ok {\n\t\t\tif url, err := url.Parse(e.URL); err == nil {\n\t\t\t\te.URL = sanitizeURL(url).String()\n\t\t\t\treturn nil, e\n\t\t\t}\n\t\t}\n\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponse := newResponse(resp)\n\n\tc.rateMu.Lock()\n\tc.rateLimits[rateLimitCategory] = response.Rate\n\tc.rateMu.Unlock()\n\n\terr = CheckResponse(resp)\n\tif err != nil {\n\t\taerr, ok := err.(*AcceptedError)\n\t\tif ok {\n\t\t\tb, readErr := ioutil.ReadAll(resp.Body)\n\t\t\tif readErr != nil {\n\t\t\t\treturn response, readErr\n\t\t\t}\n\n\t\t\taerr.Raw = b\n\t\t\treturn response, aerr\n\t\t}\n\n\t\treturn response, err\n\t}\n\n\tif v != nil {\n\t\tif w, ok := v.(io.Writer); ok {\n\t\t\tio.Copy(w, resp.Body)\n\t\t} else {\n\t\t\tdecErr := json.NewDecoder(resp.Body).Decode(v)\n\t\t\tif decErr == io.EOF {\n\t\t\t\tdecErr = nil\n\t\t\t}\n\t\t\tif decErr != nil {\n\t\t\t\terr = decErr\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Rate struct {\n\tLimit  int\n\tRemaining int\n\tReset  time.Time\n}\n\ntype Client struct {\n\tclientMu    sync.Mutex\n\tclient      *http.Client\n\tBaseURL     *url.URL\n\tUploadURL   *url.URL\n\tUserAgent   string\n\trateMu      sync.Mutex\n\trateLimits  map[string]Rate\n\tcommon      *service\n}\n\ntype service struct{}\n\ntype Response struct {\n\tStatusCode int\n\tBody       []byte\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{\n\t\t\tTimeout: 30 * time.Second,\n\t\t}\n\t}\n\treturn &Client{\n\t\tclient:     httpClient,\n\t\tBaseURL:    &url.URL{},\n\t\tUploadURL:  &url.URL{},\n\t\tUserAgent:  \"MyApp/1.0\",\n\t\trateLimits: make(map[string]Rate),\n\t\tcommon:     &service{},\n\t}\n}\n\nfunc (c *Client) NewRequest(method string, urlStr string, body interface{}) (*http.Request, error) {\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq, err := http.NewRequest(method, u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\tif body != nil {\n\t\tswitch v := body.(type) {\n\t\tcase string:\n\t\t\treq.Body = http.NoBody\n\t\t\treq.ContentLength = 0\n\t\tcase []byte:\n\t\t\treq.Body = http.NewReader(v)\n\t\t\treq.ContentLength = int64(len(v))\n\t\tdefault:\n\t\t\tjsonBody, err := json.Marshal(body)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treq.Body = http.NewReader(jsonBody)\n\t\t\treq.ContentLength = int64(len(jsonBody))\n\t\t}\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tc.clientMu.Lock()\n\tdefer c.clientMu.Unlock()\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresponse := &Response{\n\t\tStatusCode: resp.StatusCode,\n\t\tBody:       body,\n\t}\n\n\tif v != nil {\n\t\terr = json.Unmarshal(body, v)\n\t\tif err != nil {\n\t\t\treturn response, err\n\t\t}\n\t}\n\n\treturn response, nil\n}"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles log streaming and processing, including batch processing of log events.\n\nStruct Description: The Source struct represents a gRPC server that receives log streams, processes them in batches, and manages the server lifecycle.\n\nFields:\n- name: string - The name identifier for the source\n- eventPool: *event.Pool - Pool for managing event objects\n- config: *Config - Configuration for the source (bind address, port, etc.)\n- grpcServer: *grpc.Server - The gRPC server instance\n- bc: *batchChain - Batch processing chain for handling log events\n\nMethods:\n- ProductLoop: (productFunc api.ProductFunc) -> None - Starts the main processing loop and gRPC server\n  Input: productFunc - Function for processing produced events\n  Output: None (runs indefinitely as goroutine)\n\n- LogStream: (ls pb.LogService_LogStreamServer) -> error - Handles incoming log streams\n  Input: ls - gRPC stream server interface for log messages\n  Output: error - Any error that occurs during stream processing",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/loggie-io/loggie/pkg/core/api\"\n\t\"github.com/loggie-io/loggie/pkg/core/event\"\n\t\"github.com/loggie-io/loggie/pkg/core/log\"\n\t\"github.com/loggie-io/loggie/pkg/pipeline\"\n\tpb \"github.com/loggie-io/loggie/pkg/sink/grpc/pb\"\n\t\"github.com/loggie-io/loggie/pkg/util/json\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Source struct {\n\tpb.UnimplementedLogServiceServer\n\tname       string\n\teventPool  *event.Pool\n\tconfig     *Config\n\tgrpcServer *grpc.Server\n\tbc         *batchChain\n}\n\nfunc (s *Source) ProductLoop(productFunc api.ProductFunc) {\n\tlog.Info(\"%s start product loop\", s.String())\n\ts.bc = newBatchChain(productFunc, s.config.MaintenanceInterval)\n\tgo s.bc.run()\n\tip := fmt.Sprintf(\"%s:%s\", s.config.Bind, s.config.Port)\n\tlistener, err := net.Listen(s.config.Network, ip)\n\tif err != nil {\n\t\tlog.Panic(\"grpc server listen ip(%s) err: %v\", ip, err)\n\t}\n\tgrpcServer := grpc.NewServer()\n\tpb.RegisterLogServiceServer(grpcServer, s)\n\tgo grpcServer.Serve(listener)\n\ts.grpcServer = grpcServer\n\tlog.Info(\"grpc server start listing: %s\", ip)\n}\n\nfunc (s *Source) LogStream(ls pb.LogService_LogStreamServer) error {\n\tb := newBatch(s.config.Timeout)\n\tfor {\n\t\tlogMsg, err := ls.Recv()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tsendErr := ls.SendAndClose(&pb.LogResp{\n\t\t\t\tSuccess:  false,\n\t\t\t\tCount:    0,\n\t\t\t\tErrorMsg: err.Error(),\n\t\t\t})\n\t\t\tif sendErr != nil {\n\t\t\t\tlog.Warn(\"send response fail: %s\", sendErr)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\theader := make(map[string]interface{})\n\t\trawHeader := logMsg.GetHeader()\n\t\tif len(rawHeader) > 0 {\n\t\t\tfor k, v := range rawHeader {\n\t\t\t\theader[k] = string(v)\n\t\t\t}\n\t\t}\n\t\tpackedHeader := logMsg.PackedHeader\n\t\tif len(packedHeader) > 0 {\n\t\t\terr = json.Unmarshal(packedHeader, &header)\n\t\t\tif err != nil {\n\t\t\t\tlog.Warn(\"Unmarshal packedHeader error: %s\", err)\n\t\t\t}\n\t\t}\n\t\te := s.eventPool.Get()\n\t\te.Fill(e.Meta(), header, logMsg.GetRawLog())\n\t\tb.append(e)\n\t}\n\tif b.size() > 0 {\n\t\ts.bc.append(b)\n\t\tlogResp := b.wait()\n\t\terr := ls.SendAndClose(logResp)\n\t\tif err != nil {\n\t\t\tlog.Error(\"send response fail: %s\", err)\n\t\t}\n\t\treturn err\n\t}\n\treturn ls.SendAndClose(&pb.LogResp{\n\t\tSuccess: true,\n\t\tCount:   0,\n\t})\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "func (s *Source) ProductLoop(productFunc api.ProductFunc) {\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase event := <-s.eventPool.EventChan:\n\t\t\t\tif productFunc != nil {\n\t\t\t\t\tproductFunc(event)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\ts.grpcServer.Serve(s.config.BindAddress)\n}\n\nfunc (s *Source) LogStream(ls pb.LogService_LogStreamServer) error {\n\tstream, err := ls.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor {\n\t\tif stream == nil {\n\t\t\tbreak\n\t\t}\n\t\tevent := &pb.LogEvent{\n\t\t\tMessage: stream.Message,\n\t\t\tTimestamp: stream.Timestamp,\n\t\t}\n\t\ts.eventPool.Put(event)\n\t\tstream, err = ls.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with basic lifecycle management capabilities, including initialization, startup, and shutdown.\n\nStruct Description: The Server struct represents a gRPC server instance with network listening capabilities. It manages the server lifecycle and provides methods to start and stop the server gracefully.\n\nFields:\nAddr: [string] - The network address (IP:port) where the server is listening\nPort: [int] - The port number on which the server is listening\nl: [net.Listener] - The network listener for incoming connections\nGsrv: [*grpc.Server] - The gRPC server instance\n\nMethods:\nNewServer: [func(opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance with default settings (random available port)\nNewServerWithPort: [func(port int, opts ...grpc.ServerOption) (*Server, error)] -> [*Server, error] - Creates a new Server instance on the specified port\nStart: [func()] -> [] - Starts the gRPC server in a goroutine to handle incoming requests\nClose: [func()] -> [] - Gracefully stops the gRPC server and closes the network listener",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\treturn NewServerWithPort(0, opts...)\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"127.0.0.1:%d\", port))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tAddr: l.Addr().String(),\n\t\tPort: parsePort(l.Addr().String()),\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) Start() {\n\tgo func() {\n\t\tif err := s.Gsrv.Serve(s.l); err != nil {\n\t\t\tlog.Printf(\"testutil.Server.Start: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Close() {\n\ts.Gsrv.Stop()\n\ts.l.Close()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "type Server struct {\n\tAddr string\n\tPort int\n\tl    net.Listener\n\tGsrv *grpc.Server\n}\n\nfunc NewServer(opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tport := l.Addr().(*net.TCPAddr).Port\n\tsrv := &Server{\n\t\tAddr: fmt.Sprintf(\":%d\", port),\n\t\tPort: port,\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn srv, nil\n}\n\nfunc NewServerWithPort(port int, opts ...grpc.ServerOption) (*Server, error) {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tsrv := &Server{\n\t\tAddr: fmt.Sprintf(\":%d\", port),\n\t\tPort: port,\n\t\tl:    l,\n\t\tGsrv: grpc.NewServer(opts...),\n\t}\n\treturn srv, nil\n}\n\nfunc (s *Server) Start() {\n\tgo func() {\n\t\tif err := s.Gsrv.Serve(s.l); err != nil {\n\t\t\tlog.Fatalf(\"gRPC server failed to start: %v\", err)\n\t\t}\n\t}()\n}\n\nfunc (s *Server) Close() {\n\tif s.Gsrv != nil {\n\t\ts.Gsrv.Stop()\n\t}\n\tif s.l != nil {\n\t\ts.l.Close()\n\t}\n}"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Implement a gRPC server in Go that handles unary RPC calls for an Echo service, including secure communication with transport credentials.\n\nFunction Description: The `startGRPCServer` function initializes and starts a gRPC server with the provided listener and transport credentials. It registers an Echo service implementation and begins serving incoming requests.\n\nInput:\n- `lis` [net.Listener] - A network listener that specifies the address and port to listen on\n- `creds` [credentials.TransportCredentials] - Transport credentials for secure communication (TLS)\n\nOutput:\n- `error` - Returns an error if the server fails to start or encounters a fatal error during operation, otherwise runs indefinitely serving requests",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\n\ntype ecServer struct {\n\tpb.UnimplementedEchoServer\n}\n\nfunc (s *ecServer) UnaryEcho(_ context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{Message: req.Message}, nil\n}\n\nfunc newServer() *ecServer {\n\treturn &ecServer{}\n}\n\nfunc startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\ts := grpc.NewServer(grpc.Creds(creds))\n\tpb.RegisterEchoServer(s, newServer())\n\treturn s.Serve(lis)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func startGRPCServer(lis net.Listener, creds credentials.TransportCredentials) error {\n\ts := grpc.NewServer(grpc.Creds(creds))\n\techoservice.RegisterEchoServer(s, &echoServer{})\n\tif err := s.Serve(lis); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Implement a gRPC server in Go for a log service that supports append, read, discard, and info operations with concurrent access control and log entry management.\n\nStruct Description: The Server struct represents a gRPC server implementation for a log service that maintains an ordered sequence of log entries with configurable size limits and provides thread-safe operations.\n\nFields:\n- ctx: context.Context - Context for managing server lifecycle\n- options: *Options - Configuration options for the server\n- hardLimit: int - Maximum number of entries before truncation\n- lock: sync.Mutex - Mutex for thread-safe operations\n- locked: struct - Protected data structure containing:\n  - startIndex: Index - First available index in the log\n  - entries: []*logspec.Entry - Slice of log entries\n  - changed: chan struct{} - Channel to notify about log changes\n\nMethods:\n- NewServer: [Name](ctx context.Context, options *Options) -> (*Server, error) - Creates and starts a new Server instance\n- Append: [Name](stream logspec.Log_AppendServer) -> error - Handles append requests via gRPC stream\n- append: [Name](proposals [][]byte) -> []Index - Internal method to append entries to the log\n- lastIndexLocked: [Name]() -> Index - Helper method to get last index (requires lock)\n- Discard: [Name](ctx context.Context, req *logspec.DiscardRequest) -> (*logspec.DiscardReply, error) - Handles discard requests\n- discard: [Name](firstIndex Index) -> - Internal method to discard entries\n- Read: [Name](req *logspec.ReadRequest, stream logspec.Log_ReadServer) -> error - Handles read requests via gRPC stream\n- Info: [Name](ctx context.Context, req *logspec.InfoRequest) -> (*logspec.InfoReply, error) - Returns current log info\n- info: [Name]() -> (*logspec.InfoReply, chan struct{}) - Internal method to get log info\n- InfoStream: [Name](req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) -> error - Streams log info updates",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\n\t\"github.com/ebay/akutan/logspec\"\n\t\"google.golang.org/grpc\"\n)\n\ntype Server struct {\n\tctx       context.Context\n\toptions   *Options\n\thardLimit int\n\tlock      sync.Mutex\n\tlocked    struct {\n\t\tstartIndex Index\n\t\tentries    []*logspec.Entry\n\t\tchanged    chan struct{}\n\t}\n}\n\ntype Options struct {\n\tAddress string\n\tLimit   int\n}\n\ntype Index = uint64\n\nfunc NewServer(ctx context.Context, options *Options) (*Server, error) {\n\tserver := &Server{\n\t\tctx:       ctx,\n\t\toptions:   options,\n\t\thardLimit: options.Limit * 3 / 2,\n\t}\n\tserver.locked.startIndex = 1\n\tserver.locked.changed = make(chan struct{})\n\tlistener, err := net.Listen(\"tcp\", options.Address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconst maxMsgSize = 1024 * 1024 * 1024\n\tservice := grpc.NewServer(\n\t\tgrpc.MaxRecvMsgSize(maxMsgSize),\n\t\tgrpc.MaxSendMsgSize(maxMsgSize))\n\tlogspec.RegisterLogServer(service, server)\n\tgo service.Serve(listener)\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tlistener.Close()\n\t\tservice.Stop()\n\t}()\n\treturn server, nil\n}\n\nfunc (server *Server) Append(streams logspec.Log_AppendServer) error {\n\tseq := uint64(0)\n\tfor {\n\t\tseq++\n\t\treq, err := streams.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif req.Sequence != seq {\n\t\t\treturn errors.New(\"out of sequence\")\n\t\t}\n\t\tindexes := server.append(req.Proposals)\n\t\tres := logspec.AppendReply{\n\t\t\tReply: &logspec.AppendReply_Ok{\n\t\t\t\tOk: &logspec.AppendReply_OK{\n\t\t\t\t\tSequence: seq,\n\t\t\t\t\tIndexes:  indexes,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\terr = streams.Send(&res)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (server *Server) append(proposals [][]byte) []Index {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\tprevLastIndex := server.lastIndexLocked()\n\tnextIndex := prevLastIndex + 1\n\tindexes := make([]Index, len(proposals))\n\tfor i := range proposals {\n\t\tindexes[i] = nextIndex\n\t\tnextIndex++\n\t\tserver.locked.entries = append(server.locked.entries, &logspec.Entry{\n\t\t\tIndex: indexes[i],\n\t\t\tData:  proposals[i],\n\t\t\tSkip:  false,\n\t\t})\n\t}\n\n\tif server.hardLimit > 0 && len(server.locked.entries) >= server.hardLimit {\n\t\tfirstIndex := nextIndex - uint64(server.options.Limit)\n\t\tdiff := firstIndex - server.locked.startIndex\n\t\tserver.locked.entries = append([]*logspec.Entry(nil),\n\t\t\tserver.locked.entries[diff:]...)\n\t\tserver.locked.startIndex = firstIndex\n\t}\n\n\tclose(server.locked.changed)\n\tserver.locked.changed = make(chan struct{})\n\treturn indexes\n}\n\nfunc (server *Server) lastIndexLocked() Index {\n\treturn server.locked.startIndex + uint64(len(server.locked.entries)) - 1\n}\n\nfunc (server *Server) Discard(ctx context.Context, req *logspec.DiscardRequest) (*logspec.DiscardReply, error) {\n\tserver.discard(req.FirstIndex)\n\treturn &logspec.DiscardReply{\n\t\tReply: &logspec.DiscardReply_Ok{\n\t\t\tOk: &logspec.DiscardReply_OK{},\n\t\t},\n\t}, nil\n}\n\nfunc (server *Server) discard(firstIndex Index) {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\tif firstIndex <= server.locked.startIndex {\n\t\treturn\n\t}\n\tdiff := firstIndex - server.locked.startIndex\n\tif uint64(len(server.locked.entries)) < diff {\n\t\tserver.locked.entries = nil\n\t} else {\n\t\tserver.locked.entries = append([]*logspec.Entry(nil),\n\t\t\tserver.locked.entries[diff:]...)\n\t}\n\tserver.locked.startIndex = firstIndex\n\tclose(server.locked.changed)\n\tserver.locked.changed = make(chan struct{})\n}\n\nfunc (server *Server) Read(req *logspec.ReadRequest, stream logspec.Log_ReadServer) error {\n\tctx := stream.Context()\n\tnextIndex := req.NextIndex\n\tfor {\n\t\tserver.lock.Lock()\n\t\tstartIndex := server.locked.startIndex\n\t\tlastIndex := server.lastIndexLocked()\n\t\tentries := server.locked.entries\n\t\tchangedCh := server.locked.changed\n\t\tserver.lock.Unlock()\n\n\t\tif nextIndex < startIndex {\n\t\t\treturn stream.Send(&logspec.ReadReply{\n\t\t\t\tReply: &logspec.ReadReply_Truncated{\n\t\t\t\t\tTruncated: true,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\n\t\tif nextIndex > lastIndex {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn ctx.Err()\n\t\t\tcase <-server.ctx.Done():\n\t\t\t\treturn server.ctx.Err()\n\t\t\tcase <-changedCh:\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tentries = entries[nextIndex-startIndex:]\n\t\tif len(entries) > 10 {\n\t\t\tentries = entries[:10]\n\t\t}\n\t\terr := stream.Send(&logspec.ReadReply{\n\t\t\tReply: &logspec.ReadReply_Ok{\n\t\t\t\tOk: &logspec.ReadReply_OK{\n\t\t\t\t\tEntries: entries,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnextIndex += uint64(len(entries))\n\t}\n}\n\nfunc (server *Server) Info(context.Context, *logspec.InfoRequest) (*logspec.InfoReply, error) {\n\tres, _ := server.info()\n\treturn res, nil\n}\n\nfunc (server *Server) info() (*logspec.InfoReply, chan struct{}) {\n\tserver.lock.Lock()\n\tdefer server.lock.Unlock()\n\treturn &logspec.InfoReply{\n\t\tReply: &logspec.InfoReply_Ok{\n\t\t\tOk: &logspec.InfoReply_OK{\n\t\t\t\tFirstIndex: server.locked.startIndex,\n\t\t\t\tLastIndex:  server.lastIndexLocked(),\n\t\t\t},\n\t\t},\n\t}, server.locked.changed\n}\n\nfunc (server *Server) InfoStream(req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) error {\n\tfor {\n\t\tres, changedCh := server.info()\n\t\terr := stream.Send(res)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tselect {\n\t\tcase <-stream.Context().Done():\n\t\t\treturn stream.Context().Err()\n\t\tcase <-server.ctx.Done():\n\t\t\treturn server.ctx.Err()\n\t\tcase <-changedCh:\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "package logspec\n\nimport (\n\t\"context\"\n\t\"sync\"\n\n\t\"google.golang.org/grpc\"\n)\n\ntype Entry struct {\n\tIndex    Index\n\tTerm     uint64\n\tCommand  []byte\n\tIsCommitted bool\n}\n\ntype Server struct {\n\tctx       context.Context\n\toptions   *Options\n\thardLimit int\n\tlock      sync.Mutex\n\tlocked    struct {\n\t\tstartIndex Index\n\t\tentries    []*Entry\n\t\tchanged    chan struct{}\n\t}\n}\n\ntype Options struct {\n\tHardLimit int\n}\n\nfunc NewServer(ctx context.Context, options *Options) (*Server, error) {\n\tif options == nil {\n\t\toptions = &Options{HardLimit: 1000}\n\t}\n\tserver := &Server{\n\t\tctx:       ctx,\n\t\toptions:   options,\n\t\thardLimit: options.HardLimit,\n\t\tlocked: struct {\n\t\t\tstartIndex Index\n\t\t\tentries    []*Entry\n\t\t\tchanged    chan struct{}\n\t\t}{\n\t\t\tstartIndex: 0,\n\t\t\tentries:    make([]*Entry, 0),\n\t\t\tchanged:    make(chan struct{}),\n\t\t},\n\t}\n\treturn server, nil\n}\n\nfunc (s *Server) Append(stream logspec.Log_AppendServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tentries := make([]*Entry, len(req.Entries))\n\t\tfor i, entry := range req.Entries {\n\t\t\tentries[i] = &Entry{\n\t\t\t\tIndex:    entry.Index,\n\t\t\t\tTerm:     entry.Term,\n\t\t\t\tCommand:  entry.Command,\n\t\t\t\tIsCommitted: entry.IsCommitted,\n\t\t\t}\n\t\t}\n\t\tif _, err := s.append(entries); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := stream.Send(&logspec.AppendReply{}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *Server) append(proposals [][]byte) ([]Index, error) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tlastIndex := s.lastIndexLocked()\n\tnextIndex := lastIndex + 1\n\tproposedEntries := make([]*Entry, len(proposals))\n\tfor i, proposal := range proposals {\n\t\tproposedEntries[i] = &Entry{\n\t\t\tIndex: nextIndex + int64(i),\n\t\t\tCommand: proposal,\n\t\t}\n\t}\n\n\t// Check for size limit\n\tif len(s.locked.entries)+len(proposedEntries) > s.hardLimit {\n\t\treturn nil, &logspec.ErrLogFull{}\n\t}\n\n\t// Append entries\n\ts.locked.entries = append(s.locked.entries, proposedEntries...)\n\ts.locked.changed = make(chan struct{})\n\tclose(s.locked.changed)\n\n\treturn make([]Index, len(proposedEntries)), nil\n}\n\nfunc (s *Server) lastIndexLocked() Index {\n\tif len(s.locked.entries) == 0 {\n\t\treturn 0\n\t}\n\treturn s.locked.entries[len(s.locked.entries)-1].Index\n}\n\nfunc (s *Server) Discard(ctx context.Context, req *logspec.DiscardRequest) (*logspec.DiscardReply, error) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tfirstIndex := req.FirstIndex\n\tif firstIndex < s.locked.startIndex {\n\t\treturn &logspec.DiscardReply{}, nil\n\t}\n\n\t// Truncate the log\n\ts.locked.entries = s.locked.entries[firstIndex:]\n\ts.locked.startIndex = firstIndex\n\ts.locked.changed = make(chan struct{})\n\tclose(s.locked.changed)\n\n\treturn &logspec.DiscardReply{}, nil\n}\n\nfunc (s *Server) Read(req *logspec.ReadRequest, stream logspec.Log_ReadServer) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tstartIndex := req.StartIndex\n\tendIndex := req.EndIndex\n\tif endIndex == 0 {\n\t\tendIndex = s.lastIndexLocked()\n\t}\n\n\tif startIndex > endIndex {\n\t\treturn &logspec.ErrInvalidRange{}\n\t}\n\n\tfor i := startIndex; i <= endIndex; i++ {\n\t\tif i >= len(s.locked.entries) {\n\t\t\tcontinue\n\t\t}\n\t\tentry := s.locked.entries[i]\n\t\tif err := stream.Send(&logspec.EntryResponse{\n\t\t\tIndex:    entry.Index,\n\t\t\tTerm:     entry.Term,\n\t\t\tCommand:  entry.Command,\n\t\t\tIsCommitted: entry.IsCommitted,\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *Server) Info(ctx context.Context, req *logspec.InfoRequest) (*logspec.InfoReply, error) {\n\treply, _ := s.info()\n\treturn reply, nil\n}\n\nfunc (s *Server) info() (*logspec.InfoReply, chan struct{}) {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tlastIndex := s.lastIndexLocked()\n\ttotalEntries := len(s.locked.entries)\n\tchanged := s.locked.changed\n\n\treturn &logspec.InfoReply{\n\t\tLastIndex: lastIndex,\n\t\tTotalEntries: totalEntries,\n\t}, changed\n}\n\nfunc (s *Server) InfoStream(req *logspec.InfoRequest, stream logspec.Log_InfoStreamServer) error {\n\t_, changed := s.info()\n\tfor {\n\t\tselect {\n\t\tcase <-s.ctx.Done():\n\t\t\treturn s.ctx.Err()\n\t\tcase <-changed:\n\t\t\treply, _ := s.info()\n\t\t\tif err := stream.Send(reply); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Create a gRPC server in Go that listens for incoming requests and handles them using the specified gRPC service.\n\nFunction Description: The main function sets up a gRPC server that listens on a specified TCP port, configures keepalive policies, registers the Echo service, and starts serving requests. It handles any errors that occur during setup or serving.\n\nInput: \n- port (string): The port number on which the server should listen, formatted as a string (e.g., \":50051\").\n- kaep (keepalive.EnforcementPolicy): The keepalive enforcement policy for the server.\n- kasp (keepalive.ServerParameters): The keepalive server parameters.\n\nOutput: \n- None (the function runs indefinitely until an error occurs or the server is stopped).\n- Errors during setup or serving are logged and the program exits.\n\nNote: The function assumes the existence of a pre-defined `server` struct that implements the `EchoServer` interface from the generated protobuf code.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n)\nfunc main() {\n\tflag.Parse()\n\n\taddress := fmt.Sprintf(\":%v\", *port)\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tpb.RegisterEchoServer(s, &server{})\n\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func main() {\n\tif len(os.Args) < 2 {\n\t\tlog.Fatalf(\"Usage: %s <port>\", os.Args[0])\n\t}\n\tport := os.Args[1]\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer(\n\t\tgrpc.KeepaliveParams(kasp),\n\t\tgrpc.KeepaliveEnforcementPolicy(kaep),\n\t)\n\techo.RegisterEchoServer(s, &server)\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Create a function to start a gRPC server for signal exchange, including setting up a network listener and registering the server with gRPC.\n\nFunction Description: The function `startSignal` initializes and starts a gRPC server for signal exchange. It creates a TCP listener on an available port, initializes a new gRPC server instance, registers the signal exchange service, and starts the server in a goroutine. The function is designed for testing purposes and includes error handling.\n\nInput: \n- `t *testing.T`: A testing context for error reporting and test helpers.\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance.\n- `net.Listener`: The network listener used by the gRPC server.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tsigProto \"github.com/netbirdio/netbird/signal/proto\"\n\tsig \"github.com/netbirdio/netbird/signal/server\"\n)\n\nfunc startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ts := grpc.NewServer()\n\tsrv, err := sig.NewServer(context.Background(), otel.Meter(\"\"))\n\trequire.NoError(t, err)\n\n\tsigProto.RegisterSignalExchangeServer(s, srv)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\treturn s, lis\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func startSignal(t *testing.T) (*grpc.Server, net.Listener) {\n\taddr := \"localhost:0\"\n\tl, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tRegisterSignalServiceServer(s, &signalServer{})\n\tgo func() {\n\t\tif err := s.Serve(l); err != nil {\n\t\t\tt.Errorf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\treturn s, l\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Create a Go HTTP client struct for interacting with an Okta API, handling authentication, session management, and user data retrieval.\n\nStruct Description: The Client struct represents an HTTP client configured to communicate with Okta's API. It maintains client configuration, organization details, and authentication state, providing methods for various API operations.\n\nFields:\n- client: *http.Client - The underlying HTTP client used for requests\n- org: string - The Okta organization domain\n- Url: string - The base Okta URL (defaults to \"okta.com\")\n- ApiToken: string - The API token for authenticated requests\n\nMethods:\n- NewClient(org string) -> *Client - Constructor that initializes a new Client with the specified organization\n- Authenticate(username string, password string) -> (*AuthnResponse, error) - Performs user authentication with username/password\n- Session(sessionToken string) -> (*SessionResponse, error) - Creates a session using a session token\n- User(userID string) -> (*User, error) - Retrieves user details by ID\n- Groups(userID string) -> (*Groups, error) - Gets groups associated with a user\n- call(endpoint string, method string, request interface{}, response interface{}) -> error - Internal method handling the HTTP request/response cycle",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\ntype Client struct {\n\tclient   *http.Client\n\torg      string\n\tUrl      string\n\tApiToken string\n}\n\nfunc NewClient(org string) *Client {\n\tclient := Client{\n\t\tclient: &http.Client{},\n\t\torg:    org,\n\t\tUrl:    \"okta.com\",\n\t}\n\n\treturn &client\n}\n\nfunc (c *Client) Authenticate(username, password string) (*AuthnResponse, error) {\n\tvar request = &AuthnRequest{\n\t\tUsername: username,\n\t\tPassword: password,\n\t}\n\n\tvar response = &AuthnResponse{}\n\terr := c.call(\"authn\", \"POST\", request, response)\n\treturn response, err\n}\n\nfunc (c *Client) Session(sessionToken string) (*SessionResponse, error) {\n\tvar request = &SessionRequest{\n\t\tSessionToken: sessionToken,\n\t}\n\n\tvar response = &SessionResponse{}\n\terr := c.call(\"sessions\", \"POST\", request, response)\n\treturn response, err\n}\n\nfunc (c *Client) User(userID string) (*User, error) {\n\tvar response = &User{}\n\terr := c.call(\"users/\"+userID, \"GET\", nil, response)\n\treturn response, err\n}\n\nfunc (c *Client) Groups(userID string) (*Groups, error) {\n\tvar response = &Groups{}\n\terr := c.call(\"users/\"+userID+\"/groups\", \"GET\", nil, response)\n\treturn response, err\n}\n\nfunc (c *Client) call(endpoint, method string, request, response interface{}) error {\n\tdata, _ := json.Marshal(request)\n\n\tvar url = \"https://\" + c.org + \".\" + c.Url + \"/api/v1/\" + endpoint\n\treq, err := http.NewRequest(method, url, bytes.NewBuffer(data))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treq.Header.Add(\"Accept\", `application/json`)\n\treq.Header.Add(\"Content-Type\", `application/json`)\n\tif c.ApiToken != \"\" {\n\t\treq.Header.Add(\"Authorization\", \"SSWS \"+c.ApiToken)\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif resp.StatusCode == http.StatusOK {\n\t\terr := json.Unmarshal(body, &response)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tvar errors ErrorResponse\n\t\terr = json.Unmarshal(body, &errors)\n\n\t\treturn &errorResponse{\n\t\t\tHTTPCode: resp.StatusCode,\n\t\t\tResponse: errors,\n\t\t\tEndpoint: url,\n\t\t}\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\ntype AuthnResponse struct {\n\tToken string `json:\"token\"`\n}\n\ntype SessionResponse struct {\n\tSessionToken string `json:\"sessionToken\"`\n}\n\ntype User struct {\n\tID       string `json:\"id\"`\n\tUsername string `json:\"username\"`\n}\n\ntype Groups struct {\n\tGroups []string `json:\"groups\"`\n}\n\ntype Client struct {\n\tclient *http.Client\n\torg    string\n\turl    string\n\tapiToken string\n}\n\nfunc NewClient(org string) *Client {\n\treturn &Client{\n\t\tclient: &http.Client{},\n\t\torg:    org,\n\t\turl:    \"okta.com\",\n\t}\n}\n\nfunc (c *Client) Authenticate(username, password string) (*AuthnResponse, error) {\n\tendpoint := fmt.Sprintf(\"https://%s/api/v1/authn\", c.org)\n\tbody := url.Values{}\n\tbody.Set(\"username\", username)\n\tbody.Set(\"password\", password)\n\treq, _ := http.NewRequest(\"POST\", endpoint, bytes.NewBufferString(body.Encode()))\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tvar authResp AuthnResponse\n\tif err := json.NewDecoder(resp.Body).Decode(&authResp); err != nil {\n\t\treturn nil, err\n\t}\n\tc.apiToken = authResp.Token\n\treturn &authResp, nil\n}\n\nfunc (c *Client) Session(sessionToken string) (*SessionResponse, error) {\n\tendpoint := fmt.Sprintf(\"https://%s/api/v1/session\", c.org)\n\treq, _ := http.NewRequest(\"POST\", endpoint, nil)\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"SSWS %s\", sessionToken))\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tvar sessionResp SessionResponse\n\tif err := json.NewDecoder(resp.Body).Decode(&sessionResp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &sessionResp, nil\n}\n\nfunc (c *Client) User(userID string) (*User, error) {\n\tendpoint := fmt.Sprintf(\"https://%s/api/v1/users/%s\", c.org, userID)\n\treq, _ := http.NewRequest(\"GET\", endpoint, nil)\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"SSWS %s\", c.apiToken))\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tvar user User\n\tif err := json.NewDecoder(resp.Body).Decode(&user); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &user, nil\n}\n\nfunc (c *Client) Groups(userID string) (*Groups, error) {\n\tendpoint := fmt.Sprintf(\"https://%s/api/v1/users/%s/groups\", c.org, userID)\n\treq, _ := http.NewRequest(\"GET\", endpoint, nil)\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"SSWS %s\", c.apiToken))\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tvar groups Groups\n\tif err := json.NewDecoder(resp.Body).Decode(&groups); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &groups, nil\n}\n\nfunc (c *Client) call(endpoint string, method string, request interface{}, response interface{}) error {\n\tjsonData, _ := json.Marshal(request)\n\treq, _ := http.NewRequest(method, endpoint, bytes.NewBuffer(jsonData))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"SSWS %s\", c.apiToken))\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif err := json.NewDecoder(resp.Body).Decode(response); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 291,
    "Instruction": "The provided reference code is at the function level, so I'll provide instructions in the function-level format:\n\nTask Description: Implement a gRPC server setup in Go that handles both Unix domain sockets and TCP connections with TLS support and keepalive configurations.\n\nFunction Description: The code consists of two main functions for setting up a gRPC server: `createListener` creates a network listener for the server, and `grpcServer` configures and creates a gRPC server instance with optional TLS and keepalive settings.\n\nInput:\n1. For `createListener` function:\n   - config [Config] - Configuration object containing listener address and other settings\n\n2. For `grpcServer` function:\n   - config [Config] - Configuration object containing gRPC server settings and TLS configuration\n\nOutput:\n1. For `createListener` function:\n   - [net.Listener] - Network listener ready for gRPC server\n   - [error] - Error if listener creation fails\n\n2. For `grpcServer` function:\n   - [*grpc.Server] - Configured gRPC server instance\n   - [error] - Error if server creation fails\n\nThe Config struct used as input is defined as:\n- GRPCServer [*grpc.Server] - Optional pre-configured gRPC server instance\n- Listener [string] - Network address to listen on (e.g., \"unix:///path/to/socket\" or \"tcp://:port\")\n- Endpoint [string] - Server endpoint\n- ServerTLSConfig [tls.Config] - TLS configuration for secure connections",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/k3s-io/kine/pkg/util\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n\t\"go.etcd.io/etcd/server/v3/embed\"\n)\n\ntype Config struct {\n\tGRPCServer           *grpc.Server\n\tListener             string\n\tEndpoint             string\n\tServerTLSConfig      tls.Config\n}\n\nfunc createListener(config Config) (ret net.Listener, rerr error) {\n\tif config.Listener == \"\" {\n\t\tconfig.Listener = KineSocket\n\t}\n\tscheme, address := util.SchemeAndAddress(config.Listener)\n\n\tif scheme == \"unix\" {\n\t\tif err := os.Remove(address); err != nil && !os.IsNotExist(err) {\n\t\t\tlogrus.Warnf(\"failed to remove socket %s: %v\", address, err)\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := os.Chmod(address, 0600); err != nil {\n\t\t\t\trerr = err\n\t\t\t}\n\t\t}()\n\t} else {\n\t\tscheme = \"tcp\"\n\t}\n\n\treturn net.Listen(scheme, address)\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tif config.GRPCServer != nil {\n\t\treturn config.GRPCServer, nil\n\t}\n\n\tgopts := []grpc.ServerOption{\n\t\tgrpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\t\tMinTime:             embed.DefaultGRPCKeepAliveMinTime,\n\t\t\tPermitWithoutStream: false,\n\t\t}),\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tTime:    embed.DefaultGRPCKeepAliveInterval,\n\t\t\tTimeout: embed.DefaultGRPCKeepAliveTimeout,\n\t\t}),\n\t}\n\n\tif config.ServerTLSConfig.CertFile != \"\" && config.ServerTLSConfig.KeyFile != \"\" {\n\t\tcreds, err := credentials.NewServerTLSFromFile(config.ServerTLSConfig.CertFile, config.ServerTLSConfig.KeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tgopts = append(gopts, grpc.Creds(creds))\n\t}\n\n\treturn grpc.NewServer(gopts...), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func createListener(config Config) (net.Listener, error) {\n\taddr := config.Listener\n\t// Parse the address to determine the network type\n\tparsedAddr, err := net.ResolveListener(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Check if it's a Unix domain socket\n\tif strings.HasPrefix(addr, \"unix://\") {\n\t\t// Create a Unix listener\n\t\tlistener, err := net.Listen(\"unix\", parsedAddr.Addr().String())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// Remove existing socket file if it exists\n\t\tos.Remove(parsedAddr.Addr().String())\n\t\treturn listener, nil\n\t} else {\n\t\t// For TCP, use the resolved listener\n\t\treturn parsedAddr, nil\n\t}\n}\n\nfunc grpcServer(config Config) (*grpc.Server, error) {\n\tvar opts []grpc.ServerOption\n\t// Set up keepalive options\n\tkeepaliveServerOptions := grpc.KeepaliveParams(keepalive.ServerParameters{\n\t\tMaxConnectionIdle:             15 * time.Minute,\n\t\tMaxConnectionAge:             30 * time.Minute,\n\t\tMaxConnectionAgeGrace:        5 * time.Minute,\n\t\tMinTimeBetweenPings:          5 * time.Second,\n\t\tTimeBetweenPings:             2 * time.Second,\n\t})\n\topts = append(opts, keepaliveServerOptions)\n\t// If TLS is configured, set up secure server options\n\tif config.ServerTLSConfig != nil {\n\t\ttlsConfig := config.ServerTLSConfig\n\t\topts = append(opts, grpc.Creds(credentials.NewTLS(tlsConfig)))\n\t}\n\t// Create the gRPC server\n\tserver := grpc.NewServer(opts...)\n\t// If a pre-configured server is provided, use it\n\tif config.GRPCServer != nil {\n\t\tserver = config.GRPCServer\n\t}\n\treturn server, nil\n}"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a function that initializes and starts a gRPC server for management services, including setting up necessary dependencies and configurations.\n\nFunction Description: The function `startManagement` initializes and starts a gRPC server with management services. It sets up a temporary directory for data storage, configures the server with keepalive policies, initializes various managers and stores, and registers the management service. The server listens on a dynamically assigned port and runs in a goroutine.\n\nInput:\n- `t *testing.T`: Testing context for temporary directory creation and cleanup\n- `signalAddr string`: Address of the signal service\n- `counter *int`: Pointer to a counter for tracking server operations (used in mock implementation)\n\nOutput:\n- `*grpc.Server`: The created gRPC server instance\n- `string`: The address the server is listening on\n- `error`: Any error that occurred during initialization",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/keepalive\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server\"\n\t\"github.com/netbirdio/netbird/management/server/activity\"\n\t\"github.com/netbirdio/netbird/management/server/settings\"\n\t\"github.com/netbirdio/netbird/management/server/store\"\n\t\"github.com/netbirdio/netbird/management/server/telemetry\"\n)\n\nvar (\n\tkaep = keepalive.EnforcementPolicy{\n\t\tMinTime:             15 * time.Second,\n\t\tPermitWithoutStream: true,\n\t}\n\n\tkasp = keepalive.ServerParameters{\n\t\tMaxConnectionIdle:     15 * time.Second,\n\t\tMaxConnectionAgeGrace: 5 * time.Second,\n\t\tTime:                  5 * time.Second,\n\t\tTimeout:               2 * time.Second,\n\t}\n)\n\nfunc startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\tt.Helper()\n\tdataDir := t.TempDir()\n\n\tconfig := &server.Config{\n\t\tStuns:      []*server.Host{},\n\t\tTURNConfig: &server.TURNConfig{},\n\t\tSignal: &server.Host{\n\t\t\tProto: \"http\",\n\t\t\tURI:   signalAddr,\n\t\t},\n\t\tDatadir:    dataDir,\n\t\tHttpConfig: nil,\n\t}\n\n\tlis, err := net.Listen(\"tcp\", \"localhost:0\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\ts := grpc.NewServer(grpc.KeepaliveEnforcementPolicy(kaep), grpc.KeepaliveParams(kasp))\n\tstore, cleanUp, err := store.NewTestStoreFromSQL(context.Background(), \"\", config.Datadir)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tt.Cleanup(cleanUp)\n\n\tpeersUpdateManager := server.NewPeersUpdateManager(nil)\n\teventStore := &activity.InMemoryEventStore{}\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tia, _ := integrations.NewIntegratedValidator(context.Background(), eventStore)\n\n\tmetrics, err := telemetry.NewDefaultAppMetrics(context.Background())\n\trequire.NoError(t, err)\n\n\taccountManager, err := server.BuildManager(context.Background(), store, peersUpdateManager, nil, \"\", \"netbird.selfhosted\", eventStore, nil, false, ia, metrics)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\tsecretsManager := server.NewTimeBasedAuthSecretsManager(peersUpdateManager, config.TURNConfig, config.Relay)\n\tmgmtServer, err := server.NewServer(context.Background(), config, accountManager, settings.NewManager(store), peersUpdateManager, secretsManager, nil, nil)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tmock := &mockServer{\n\t\tManagementServiceServer: mgmtServer,\n\t\tcounter:                 counter,\n\t}\n\tmgmtProto.RegisterManagementServiceServer(s, mock)\n\tgo func() {\n\t\tif err = s.Serve(lis); err != nil {\n\t\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn s, lis.Addr().String(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func startManagement(t *testing.T, signalAddr string, counter *int) (*grpc.Server, string, error) {\n\t// Create temporary directory for data storage\n\ttempDir, err := ioutil.TempDir(\"\", \"management-test\")\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tdefer os.RemoveAll(tempDir)\n\n\t// Set up server configuration with keepalive policies\n\tkeepaliveServerOptions := []grpc.ServerOption{\n\t\tgrpc.KeepaliveParams(keepalive.ServerParameters{\n\t\t\tMaxConnectionIdle:             15 * time.Minute,\n\t\t\tMaxConnectionAge:             30 * time.Minute,\n\t\t\tMaxConnectionAgeGrace:        5 * time.Minute,\n\t\t\tTimeUntilNonZeroWindow:       10 * time.Minute,\n\t\t\tMaxReceiveMessageSize:        1024 * 1024 * 10, // 10MB\n\t\t\tMaxSendMessageSize:           1024 * 1024 * 10, // 10MB\n\t\t\tAllowNotifyOnConnectionClose: true,\n\t\t}),\n\t\tgrpc.KeepaliveEnforcementPolicy(keepalive.EnforcementPolicy{\n\t\t\tMinTime:             5 * time.Minute,\n\t\t\tPermitWithoutStream: true,\n\t\t}),\n\t}\n\n\t// Initialize managers and stores\n\tmanager := &manager.Manager{\n\t\tStore: &store.Store{\n\t\t\tPath: tempDir,\n\t\t},\n\t}\n\n\t// Create gRPC server\n\tserver := grpc.NewServer(append(keepaliveServerOptions, grpc.MaxRecvMsgSize(1024*1024*10))...)\n\tdefer server.Stop()\n\n\t// Register management service\n\tmanagement.RegisterManagementServiceServer(server, &service.ManagementService{\n\t\tManager: manager,\n\t})\n\n\t// Determine a dynamically assigned port\n\tlistenAddr := fmt.Sprintf(\":%d\", 9090)\n\tlistener, err := net.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\n\t// Start the server in a goroutine\n\tgo func() {\n\t\tif err := server.Serve(listener); err != nil {\n\t\t\tt.Logf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n\n\t// Increment counter if provided\n\tif counter != nil {\n\t\t*counter++\n\t}\n\n\treturn server, listener.Addr().String(), nil\n}"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: Create a Go struct that implements a gRPC server with configurable network settings, TLS security, and keepalive parameters.\n\nStruct Description: The Server struct represents a gRPC server instance with network listener capabilities. It provides methods to start and stop the server, and handles configuration of security and connection parameters.\n\nFields:\nListener: [net.Listener] - The network listener for incoming connections\nServer: [*grpc.Server] - The gRPC server instance\n\nMethods:\nStart: [Name]() -> [error] - Starts the gRPC server and begins listening for incoming requests. Returns an error if the listener or server is not initialized.\nStop: [Name]() -> [void] - Gracefully stops the gRPC server if it's running.\nNewServer: [Name](address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) -> (*Server, error) - Creates a new Server instance with the specified address, TLS configuration, and keepalive parameters. Sets up default values for message sizes, connection timeout, and enforcement policy if not provided. Returns the server instance or an error if initialization fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\t\"google.golang.org/grpc/keepalive\"\n)\n\ntype Server struct {\n\tListener net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil {\n\t\treturn errors.New(\"nil listener\")\n\t}\n\n\tif s.Server == nil {\n\t\treturn errors.New(\"nil server\")\n\t}\n\n\treturn s.Server.Serve(s.Listener)\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.Stop()\n\t}\n}\n\nfunc NewServer(\n\taddress string,\n\ttlsConf *tls.Config,\n\tsrvKaOpts *keepalive.ServerParameters,\n) (*Server, error) {\n\tif address == \"\" {\n\t\treturn nil, errors.New(\"server listen address not provided\")\n\t}\n\n\tlistener, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar serverOpts []grpc.ServerOption\n\n\tif srvKaOpts != nil {\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(*srvKaOpts))\n\t} else {\n\t\tserverKeepAliveParameters := keepalive.ServerParameters{\n\t\t\tTime:    1 * time.Minute,\n\t\t\tTimeout: 20 * time.Second,\n\t\t}\n\t\tserverOpts = append(serverOpts, grpc.KeepaliveParams(serverKeepAliveParameters))\n\t}\n\n\tif tlsConf != nil {\n\t\tserverOpts = append(serverOpts, grpc.Creds(credentials.NewTLS(tlsConf)))\n\t}\n\n\tserverOpts = append(serverOpts, grpc.MaxSendMsgSize(maxSendMessageSize))\n\tserverOpts = append(serverOpts, grpc.MaxRecvMsgSize(maxRecvMessageSize))\n\n\tkep := keepalive.EnforcementPolicy{\n\t\tMinTime:             serverMinInterval,\n\t\tPermitWithoutStream: true,\n\t}\n\tserverOpts = append(serverOpts, grpc.KeepaliveEnforcementPolicy(kep))\n\n\tserverOpts = append(serverOpts, grpc.ConnectionTimeout(connectionTimeout))\n\n\tserver := grpc.NewServer(serverOpts...)\n\n\treturn &Server{Listener: listener, Server: server}, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 119,
    "wrong_result": "type Server struct {\n\tListener *net.Listener\n\tServer   *grpc.Server\n}\n\nfunc (s *Server) Start() error {\n\tif s.Listener == nil || s.Server == nil {\n\t\treturn errors.New(\"server or listener not initialized\")\n\t}\n\tgo func() {\n\t\tif err := s.Server.Serve(*s.Listener); err != nil {\n\t\t\tlog.Fatalf(\"gRPC server failed: %v\", err)\n\t\t}\n\t}()\n\treturn nil\n}\n\nfunc (s *Server) Stop() {\n\tif s.Server != nil {\n\t\ts.Server.Stop()\n\t}\n}\n\nfunc NewServer(address string, tlsConf *tls.Config, srvKaOpts *keepalive.ServerParameters) (*Server, error) {\n\tvar opts []grpc.ServerOption\n\tif tlsConf != nil {\n\t\tcreds := credentials.NewTLS(tlsConf)\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\tif srvKaOpts != nil {\n\t\topts = append(opts, grpc.KeepaliveParams(*srvKaOpts))\n\t}\n\tserver := grpc.NewServer(opts...)\n\tlistener, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Server{\n\t\tListener: &listener,\n\t\tServer:   server,\n\t}, nil\n}"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that sets up and starts a mock gRPC server for management service testing, including generating a WireGuard key for authentication purposes.\n\nFunction Description: The function `startMockManagement` initializes and starts a mock gRPC server that implements a management service interface. It creates a TCP listener on an available port, generates a WireGuard key pair for server authentication, and registers mock implementations of the management service methods. The server runs in a goroutine to handle incoming requests asynchronously.\n\nInput: \n- t *testing.T: Testing context for error reporting and test helpers\n\nOutput:\n- *grpc.Server: The created gRPC server instance\n- net.Listener: The network listener for the server\n- *mock_server.ManagementServiceServerMock: The mock implementation of the management service\n- wgtypes.Key: The generated WireGuard private key for the server",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"net\"\n\t\"testing\"\n\n\t\"google.golang.org/grpc\"\n\n\tmgmtProto \"github.com/netbirdio/netbird/management/proto\"\n\t\"github.com/netbirdio/netbird/management/server/mock_server\"\n\t\"golang.zx2c4.com/wireguard/wgctrl/wgtypes\"\n)\n\nfunc startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tt.Helper()\n\tlis, err := net.Listen(\"tcp\", \":0\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\ts := grpc.NewServer()\n\n\tserverKey, err := wgtypes.GenerateKey()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmgmtMockServer := &mock_server.ManagementServiceServerMock{\n\t\tGetServerKeyFunc: func(context.Context, *mgmtProto.Empty) (*mgmtProto.ServerKeyResponse, error) {\n\t\t\tresponse := &mgmtProto.ServerKeyResponse{\n\t\t\t\tKey: serverKey.PublicKey().String(),\n\t\t\t}\n\t\t\treturn response, nil\n\t\t},\n\t}\n\n\tmgmtProto.RegisterManagementServiceServer(s, mgmtMockServer)\n\tgo func() {\n\t\tif err := s.Serve(lis); err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t}()\n\n\treturn s, lis, mgmtMockServer, serverKey\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 119,
    "wrong_result": "func startMockManagement(t *testing.T) (*grpc.Server, net.Listener, *mock_server.ManagementServiceServerMock, wgtypes.Key) {\n\tvar lis net.Listener\n\tvar err error\n\tvar port string\n\n\tfor i := 0; i < 10; i++ {\n\t\tport = \"50051\" + strconv.Itoa(i)\n\t\tlis, err = net.Listen(\"tcp\", \":\"+port)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif err != nil {\n\t\tt.Fatalf(\"failed to listen: %v\", err)\n\t}\n\n\tserver := grpc.NewServer()\n\tmockServer := &mock_server.ManagementServiceServerMock{}\n\twgKey, _ := wgtypes.GenerateKey()\n\n\tmanagement.RegisterManagementServiceServer(server, mockServer)\n\n\tgo func() {\n\t\tif err := server.Serve(lis); err != nil {\n\t\t\tt.Errorf(\"failed to serve: %v\", err)\n\t\t}\n\t}()\n\n\treturn server, lis, mockServer, wgKey\n}"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Implement a Redis-based session management system in Go that allows storing, retrieving, and managing HTTP session data using Redis as the backend storage.\n\nStruct Description: The implementation consists of two main structs - `SessionStore` for handling individual session operations and `Provider` for managing the Redis connection pool and session lifecycle.\n\nFields:\n\nSessionStore:\n- p: *redis.Pool - Redis connection pool\n- sid: string - Session ID\n- lock: sync.RWMutex - Read-write lock for thread safety\n- values: map[interface{}]interface{} - Key-value pairs storing session data\n- maxlifetime: int64 - Session expiration time in seconds\n\nProvider:\n- maxlifetime: int64 - Default session expiration time\n- savePath: string - Redis server address\n- poolsize: int - Connection pool size\n- password: string - Redis authentication password\n- dbNum: int - Redis database number\n- poollist: *redis.Pool - Redis connection pool instance\n\nMethods:\n\nSessionStore:\n- Set(key, value interface{}) error - Stores a key-value pair in the session\n- Get(key interface{}) interface{} - Retrieves a value by key from the session\n- Delete(key interface{}) error - Removes a key-value pair from the session\n- Flush() error - Clears all session data\n- SessionID() string - Returns the session ID\n- SessionRelease(w http.ResponseWriter) - Persists session data to Redis before closing\n\nProvider:\n- SessionInit(maxlifetime int64, savePath string) error - Initializes the Redis connection pool with configuration\n- SessionRead(sid string) (session.Store, error) - Retrieves session data from Redis\n- SessionExist(sid string) bool - Checks if a session exists in Redis\n- SessionRegenerate(oldsid, sid string) (session.Store, error) - Creates a new session ID while preserving data\n- SessionDestroy(sid string) error - Removes session data from Redis",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/astaxie/beego/session\"\n\t\"github.com/garyburd/redigo/redis\"\n)\n\nvar redispder = &Provider{}\nvar MaxPoolSize = 100\n\ntype SessionStore struct {\n\tp           *redis.Pool\n\tsid         string\n\tlock        sync.RWMutex\n\tvalues      map[interface{}]interface{}\n\tmaxlifetime int64\n}\n\nfunc (rs *SessionStore) Set(key, value interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values[key] = value\n\treturn nil\n}\n\nfunc (rs *SessionStore) Get(key interface{}) interface{} {\n\trs.lock.RLock()\n\tdefer rs.lock.RUnlock()\n\tif v, ok := rs.values[key]; ok {\n\t\treturn v\n\t}\n\treturn nil\n}\n\nfunc (rs *SessionStore) Delete(key interface{}) error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\tdelete(rs.values, key)\n\treturn nil\n}\n\nfunc (rs *SessionStore) Flush() error {\n\trs.lock.Lock()\n\tdefer rs.lock.Unlock()\n\trs.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (rs *SessionStore) SessionID() string {\n\treturn rs.sid\n}\n\nfunc (rs *SessionStore) SessionRelease(w http.ResponseWriter) {\n\tb, err := session.EncodeGob(rs.values)\n\tif err != nil {\n\t\treturn\n\t}\n\tc := rs.p.Get()\n\tdefer c.Close()\n\tc.Do(\"SETEX\", rs.sid, rs.maxlifetime, string(b))\n}\n\ntype Provider struct {\n\tmaxlifetime int64\n\tsavePath    string\n\tpoolsize    int\n\tpassword    string\n\tdbNum       int\n\tpoollist    *redis.Pool\n}\n\nfunc (rp *Provider) SessionInit(maxlifetime int64, savePath string) error {\n\trp.maxlifetime = maxlifetime\n\tconfigs := strings.Split(savePath, \",\")\n\tif len(configs) > 0 {\n\t\trp.savePath = configs[0]\n\t}\n\tif len(configs) > 1 {\n\t\tpoolsize, err := strconv.Atoi(configs[1])\n\t\tif err != nil || poolsize <= 0 {\n\t\t\trp.poolsize = MaxPoolSize\n\t\t} else {\n\t\t\trp.poolsize = poolsize\n\t\t}\n\t} else {\n\t\trp.poolsize = MaxPoolSize\n\t}\n\tif len(configs) > 2 {\n\t\trp.password = configs[2]\n\t}\n\tif len(configs) > 3 {\n\t\tdbnum, err := strconv.Atoi(configs[3])\n\t\tif err != nil || dbnum < 0 {\n\t\t\trp.dbNum = 0\n\t\t} else {\n\t\t\trp.dbNum = dbnum\n\t\t}\n\t} else {\n\t\trp.dbNum = 0\n\t}\n\trp.poollist = redis.NewPool(func() (redis.Conn, error) {\n\t\tc, err := redis.Dial(\"tcp\", rp.savePath)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif rp.password != \"\" {\n\t\t\tif _, err := c.Do(\"AUTH\", rp.password); err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\t_, err = c.Do(\"SELECT\", rp.dbNum)\n\t\tif err != nil {\n\t\t\tc.Close()\n\t\t\treturn nil, err\n\t\t}\n\t\treturn c, err\n\t}, rp.poolsize)\n\n\treturn rp.poollist.Get().Err()\n}\n\nfunc (rp *Provider) SessionRead(sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionExist(sid string) bool {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, err := redis.Int(c.Do(\"EXISTS\", sid)); err != nil || existed == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc (rp *Provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tif existed, _ := redis.Int(c.Do(\"EXISTS\", oldsid)); existed == 0 {\n\t\tc.Do(\"SET\", sid, \"\", \"EX\", rp.maxlifetime)\n\t} else {\n\t\tc.Do(\"RENAME\", oldsid, sid)\n\t\tc.Do(\"EXPIRE\", sid, rp.maxlifetime)\n\t}\n\n\tkvs, err := redis.String(c.Do(\"GET\", sid))\n\tvar kv map[interface{}]interface{}\n\tif len(kvs) == 0 {\n\t\tkv = make(map[interface{}]interface{})\n\t} else {\n\t\tkv, err = session.DecodeGob([]byte(kvs))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\trs := &SessionStore{p: rp.poollist, sid: sid, values: kv, maxlifetime: rp.maxlifetime}\n\treturn rs, nil\n}\n\nfunc (rp *Provider) SessionDestroy(sid string) error {\n\tc := rp.poollist.Get()\n\tdefer c.Close()\n\n\tc.Do(\"DEL\", sid)\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gomodule/redigo/redis\"\n)\n\ntype sessionStore struct {\n\tp      *redis.Pool\n\tsid    string\n\tlock   sync.RWMutex\n\tvalues map[interface{}]interface{}\n\tmaxlife int64\n}\n\nfunc (s *sessionStore) Set(key, value interface{}) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\ts.values[key] = value\n\treturn nil\n}\n\nfunc (s *sessionStore) Get(key interface{}) interface{} {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\n\treturn s.values[key]\n}\n\nfunc (s *sessionStore) Delete(key interface{}) error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\tdelete(s.values, key)\n\treturn nil\n}\n\nfunc (s *sessionStore) Flush() error {\n\ts.lock.Lock()\n\tdefer s.lock.Unlock()\n\n\ts.values = make(map[interface{}]interface{})\n\treturn nil\n}\n\nfunc (s *sessionStore) SessionID() string {\n\treturn s.sid\n}\n\nfunc (s *sessionStore) SessionRelease(w http.ResponseWriter) {\n\ts.lock.RLock()\n\tdefer s.lock.RUnlock()\n\n\tconn := s.p.Get()\n\tdefer conn.Close()\n\n\tif s.maxlife > 0 {\n\t\texpire := time.Now().Add(time.Second * time.Duration(s.maxlife)).Unix()\n\t\t_, err := conn.Do(\"SETEX\", s.sid, expire, s.values)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error saving session:\", err)\n\t\t}\n\t} else {\n\t\t_, err := conn.Do(\"SET\", s.sid, s.values)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error saving session:\", err)\n\t\t}\n\t}\n}\n\ntype provider struct {\n\tmaxlife   int64\n\tsavePath  string\n\tpoolsize  int\n\tpassword  string\n\tdbNum     int\n\tpoollist  *redis.Pool\n}\n\nfunc (p *provider) SessionInit(maxlifetime int64, savePath string) error {\n\tp.maxlife = maxlifetime\n\tp.savePath = savePath\n\tp.poolsize = 10\n\tp.password = \"\"\n\tp.dbNum = 0\n\n\tp.poollist = &redis.Pool{\n\t\tMaxIdle: p.poolsize,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", p.savePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif p.password != \"\" {\n\t\t\t\tif _, err := c.Do(\"AUTH\", p.password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\tif _, err := c.Do(\"SELECT\", p.dbNum); err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn c, nil\n\t\t},\n\t}\n\n\treturn nil\n}\n\nfunc (p *provider) SessionRead(sid string) (session.Store, error) {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\tval, err := redis.Bytes(conn.Do(\"GET\", sid))\n\tif err != nil {\n\t\tif err == redis.ErrNil {\n\t\t\treturn nil, errors.New(\"session not found\")\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tstore := &sessionStore{\n\t\tp:       p.poollist,\n\t\tsid:     sid,\n\t\tvalues:  make(map[interface{}]interface{}),\n\t\tmaxlife: p.maxlife,\n\t}\n\n\tfor k, v := range val {\n\t\tstore.values[k] = v\n\t}\n\n\treturn store, nil\n}\n\nfunc (p *provider) SessionExist(sid string) bool {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\texists, _ := redis.Bool(conn.Do(\"EXISTS\", sid))\n\treturn exists\n}\n\nfunc (p *provider) SessionRegenerate(oldsid, sid string) (session.Store, error) {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\t// Copy data from old session to new session\n\toldData, err := redis.Bytes(conn.Do(\"GET\", oldsid))\n\tif err != nil && err != redis.ErrNil {\n\t\treturn nil, err\n\t}\n\n\tnewStore := &sessionStore{\n\t\tp:       p.poollist,\n\t\tsid:     sid,\n\t\tvalues:  make(map[interface{}]interface{}),\n\t\tmaxlife: p.maxlife,\n\t}\n\n\tfor k, v := range oldData {\n\t\tnewStore.values[k] = v\n\t}\n\n\t// Delete old session\n\t_, err = conn.Do(\"DEL\", oldsid)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn newStore, nil\n}\n\nfunc (p *provider) SessionDestroy(sid string) error {\n\tconn := p.poollist.Get()\n\tdefer conn.Close()\n\n\t_, err := conn.Do(\"DEL\", sid)\n\treturn err\n}"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool and methods for interacting with Redis, including setting, getting, deleting keys, and flushing the database.\n\nStruct Description: RedisStore is a struct that manages a connection pool to Redis and provides methods for common Redis operations with support for expiration times.\n\nFields:\n- pool: *redis.Pool - A connection pool to Redis for efficient connection reuse\n- defaultExpiration: time.Duration - The default expiration time for keys when not explicitly specified\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method for executing Redis commands with serialization and expiration handling",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"time\"\n\t\"github.com/go-redis/redis/v8\"\n)\n\ntype RedisStore struct {\n\tpool           *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tpool := &redis.Pool{\n\t\tMaxIdle:     10,\n\t\tMaxActive:   100,\n\t\tIdleTimeout: 300 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\tc.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn c, nil\n\t\t},\n\t}\n\treturn &RedisStore{\n\t\tpool:           pool,\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (r *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\n\texpires = expires.Seconds()\n\tif expires == 0 {\n\t\texpires = r.defaultExpiration.Seconds()\n\t}\n\tif expires > 0 {\n\t\texpires = expires * 1000000000\n\t}\n\tval, err := redis.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = conn.Do(\"SET\", key, val, \"EX\", int64(expires))\n\treturn err\n}\n\nfunc (r *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\n\tval, err := conn.Do(\"GET\", key)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif val == nil {\n\t\treturn nil\n\t}\n\tdata, ok := val.([]byte)\n\tif !ok {\n\t\treturn nil\n\t}\n\terr = redis.Unmarshal(data, ptrValue)\n\treturn err\n}\n\nfunc (r *RedisStore) Delete(key string) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (r *RedisStore) Flush() error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (r *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\targs := []interface{}{key, value}\n\tif expires > 0 {\n\t\targs = append(args, \"EX\", int64(expires.Seconds()))\n\t}\n\tresult, err := f(key, args...)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Redis client struct in Go that manages connections to Redis servers and provides common Redis operations. The implementation should use connection pooling and support thread-safe access to multiple Redis instances.\n\nStruct Description: RedisClient is a struct that encapsulates Redis connection pooling and provides methods for common Redis operations. It maintains a thread-safe map of Redis clients for different server addresses.\n\nFields:\n\npool: *redis.Pool - The connection pool for Redis operations\nAddress: string - The Redis server address (URL)\n\nMethods:\n\nGetRedisClient: (address string, maxIdle int, maxActive int) -> *RedisClient - Retrieves or creates a Redis client for the given address with specified pool settings\nGet: (key string) -> (string, error) - Retrieves the value for a given key from Redis\nSet: (key string, val interface{}) -> (interface{}, error) - Sets the value for a given key in Redis\nLPush: (key string, value ...interface{}) -> (int, error) - Pushes values to the left of a Redis list\nLPop: (key string) -> (string, error) - Pops a value from the left of a Redis list\nHSet: (hashID string, field string, val string) -> error - Sets a field in a Redis hash\nHGet: (hashID string, field string) -> (string, error) - Gets a field from a Redis hash",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool    *redis.Pool\n\tAddress string\n}\n\nvar (\n\tredisMap map[string]*RedisClient\n\tmapMutex *sync.RWMutex\n)\n\nconst (\n\tdefaultMaxIdle   = 10\n\tdefaultMaxActive = 50\n)\n\nfunc init() {\n\tredisMap = make(map[string]*RedisClient)\n\tmapMutex = new(sync.RWMutex)\n}\n\nfunc newPool(redisURL string, maxIdle, maxActive int) *redis.Pool {\n\treturn &redis.Pool{\n\t\tMaxIdle:   maxIdle,\n\t\tMaxActive: maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.DialURL(redisURL)\n\t\t\treturn c, err\n\t\t},\n\t}\n}\n\nfunc GetRedisClient(address string, maxIdle, maxActive int) *RedisClient {\n\tif maxIdle <= 0 {\n\t\tmaxIdle = defaultMaxIdle\n\t}\n\tif maxActive <= 0 {\n\t\tmaxActive = defaultMaxActive\n\t}\n\tvar redis *RedisClient\n\tvar mok bool\n\tmapMutex.RLock()\n\tredis, mok = redisMap[address]\n\tmapMutex.RUnlock()\n\tif !mok {\n\t\tredis = &RedisClient{Address: address, pool: newPool(address, maxIdle, maxActive)}\n\t\tmapMutex.Lock()\n\t\tredisMap[address] = redis\n\t\tmapMutex.Unlock()\n\t}\n\treturn redis\n}\n\nfunc (rc *RedisClient) Get(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"GET\", key)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}\n\nfunc (rc *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"SET\", key, val))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tret, err := redis.Int(conn.Do(\"LPUSH\", key, value))\n\treturn ret, err\n}\n\nfunc (rc *RedisClient) LPop(key string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"LPOP\", key))\n\treturn val, err\n}\n\nfunc (rc *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\treturn err\n}\n\nfunc (rc *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := rc.pool.Get()\n\tdefer conn.Close()\n\treply, errDo := conn.Do(\"HGET\", hashID, field)\n\tval, err := redis.String(reply, errDo)\n\treturn val, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v8\"\n\t\"sync\"\n)\n\ntype RedisClient struct {\n\tpool   *redis.Pool\n\taddr   string\n}\n\nvar redisClients = make(map[string]*RedisClient)\nvar mutex sync.RWMutex\n\nfunc GetRedisClient(address string, maxIdle int, maxActive int) *RedisClient {\n\tmutex.Lock()\n\tdefer mutex.Unlock()\n\n\tif client, exists := redisClients[address]; exists {\n\t\treturn client\n\t}\n\n\tpool := &redis.Pool{\n\t\tMaxIdle:          maxIdle,\n\t\tMaxActive:        maxActive,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tconn, err := redis.Dial(\"tcp\", address)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t}\n\t\t\treturn conn, nil\n\t\t},\n\t}\n\n\tclient := &RedisClient{\n\t\tpool: pool,\n\t\taddr: address,\n\t}\n\n\tredisClients[address] = client\n\treturn client\n}\n\nfunc (r *RedisClient) Get(key string) (string, error) {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"GET\", key))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn val, nil\n}\n\nfunc (r *RedisClient) Set(key string, val interface{}) (interface{}, error) {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tresult, err := conn.Do(\"SET\", key, val)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result, nil\n}\n\nfunc (r *RedisClient) LPush(key string, value ...interface{}) (int, error) {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tresult, err := conn.Do(\"LPUSH\", key, value...)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn redis.Int(result, err), nil\n}\n\nfunc (r *RedisClient) LPop(key string) (string, error) {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"LPOP\", key))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn val, nil\n}\n\nfunc (r *RedisClient) HSet(hashID string, field string, val string) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"HSET\", hashID, field, val)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *RedisClient) HGet(hashID string, field string) (string, error) {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tval, err := redis.String(conn.Do(\"HGET\", hashID, field))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn val, nil\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a Go client for interacting with an InfluxDB server, supporting both querying and writing data with configurable settings like authentication, timeout, and TLS.\n\nStruct Description: The Client struct represents an InfluxDB client with configuration for server connection, authentication, and HTTP transport settings.\n\nFields:\n- url: url.URL - The base URL of the InfluxDB server\n- username: string - Username for basic authentication\n- password: string - Password for basic authentication\n- httpClient: *http.Client - Custom HTTP client with timeout and transport settings\n- userAgent: string - User agent string for HTTP requests\n- precision: string - Precision for timestamps in queries and writes\n\nMethods:\n- NewClient: [Name](Config) -> (*Client, error) - Creates a new InfluxDB client with the given configuration\n- Query: [Name](Query) -> (*Response, error) - Executes a query against the InfluxDB server and returns the response\n- Write: [Name](BatchPoints) -> (*Response, error) - Writes batch points to the InfluxDB server and returns the response",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl        url.URL\n\tusername   string\n\tpassword   string\n\thttpClient *http.Client\n\tuserAgent  string\n\tprecision  string\n}\n\nfunc NewClient(c Config) (*Client, error) {\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: c.UnsafeSsl,\n\t}\n\n\ttr := &http.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t}\n\n\tclient := Client{\n\t\turl:        c.URL,\n\t\tusername:   c.Username,\n\t\tpassword:   c.Password,\n\t\thttpClient: &http.Client{Timeout: c.Timeout, Transport: tr},\n\t\tuserAgent:  c.UserAgent,\n\t\tprecision:  c.Precision,\n\t}\n\tif client.userAgent == \"\" {\n\t\tclient.userAgent = \"InfluxDBClient\"\n\t}\n\treturn &client, nil\n}\n\nfunc (c *Client) Query(q Query) (*Response, error) {\n\tu := c.url\n\n\tu.Path = \"query\"\n\tvalues := u.Query()\n\tvalues.Set(\"q\", q.Command)\n\tvalues.Set(\"db\", q.Database)\n\tif q.Chunked {\n\t\tvalues.Set(\"chunked\", \"true\")\n\t\tif q.ChunkSize > 0 {\n\t\t\tvalues.Set(\"chunk_size\", strconv.Itoa(q.ChunkSize))\n\t\t}\n\t}\n\tif c.precision != \"\" {\n\t\tvalues.Set(\"epoch\", c.precision)\n\t}\n\tu.RawQuery = values.Encode()\n\n\treq, err := http.NewRequest(\"GET\", u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tif q.Chunked {\n\t\tcr := NewChunkedResponse(resp.Body)\n\t\tfor {\n\t\t\tr, err := cr.NextResponse()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tif r == nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tresponse.Results = append(response.Results, r.Results...)\n\t\t\tif r.Err != nil {\n\t\t\t\tresponse.Err = r.Err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdec := json.NewDecoder(resp.Body)\n\t\tdec.UseNumber()\n\t\tif err := dec.Decode(&response); err != nil {\n\t\t\tif !(err == io.EOF && resp.StatusCode != http.StatusOK) {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\n\tif resp.StatusCode != http.StatusOK && response.Error() == nil {\n\t\treturn &response, fmt.Errorf(\"received status code %d from server\", resp.StatusCode)\n\t}\n\treturn &response, nil\n}\n\nfunc (c *Client) Write(bp BatchPoints) (*Response, error) {\n\tu := c.url\n\tu.Path = \"write\"\n\n\tvar b bytes.Buffer\n\tfor _, p := range bp.Points {\n\t\terr := checkPointTypes(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif p.Raw != \"\" {\n\t\t\tif _, err := b.WriteString(p.Raw); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t} else {\n\t\t\tfor k, v := range bp.Tags {\n\t\t\t\tif p.Tags == nil {\n\t\t\t\t\tp.Tags = make(map[string]string, len(bp.Tags))\n\t\t\t\t}\n\t\t\t\tp.Tags[k] = v\n\t\t\t}\n\n\t\t\tif _, err := b.WriteString(p.MarshalString()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tif err := b.WriteByte('\\n'); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", u.String(), &b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Content-Type\", \"\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\tif c.username != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tprecision := bp.Precision\n\tif precision == \"\" {\n\t\tprecision = c.precision\n\t}\n\n\tparams := req.URL.Query()\n\tparams.Set(\"db\", bp.Database)\n\tparams.Set(\"rp\", bp.RetentionPolicy)\n\tparams.Set(\"precision\", precision)\n\tparams.Set(\"consistency\", bp.WriteConsistency)\n\treq.URL.RawQuery = params.Encode()\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tvar response Response\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusNoContent && resp.StatusCode != http.StatusOK {\n\t\tvar err = fmt.Errorf(string(body))\n\t\tresponse.Err = err\n\t\treturn &response, err\n\t}\n\n\treturn nil, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package influxdb\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\n\ntype Client struct {\n\turl      url.URL\n\tusername string\n\tpassword string\n\thttpClient *http.Client\n\tuserAgent string\n\tprecision string\n}\n\ntype Config struct {\n\tURL      string\n\tUsername string\n\tPassword string\n\tTimeout  time.Duration\n\tTLS      bool\n\tUserAgent string\n\tPrecision string\n}\n\nfunc NewClient(config Config) (*Client, error) {\n\tif config.URL == \"\" {\n\t\treturn nil, fmt.Errorf(\"URL is required\")\n\t}\n\tu, err := url.Parse(config.URL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttransport := &http.Transport{}\n\tif config.TLS {\n\t\ttransport.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   config.Timeout,\n\t}\n\n\treturn &Client{\n\t\turl:      *u,\n\t\tusername: config.Username,\n\t\tpassword: config.Password,\n\t\thttpClient: client,\n\t\tuserAgent: config.UserAgent,\n\t\tprecision: config.Precision,\n\t}, nil\n}\n\ntype Query struct {\n\tCommand string\n}\n\ntype Response struct {\n\tResults []struct {\n\t\tSeries []struct {\n\t\t\tName    string\n\t\t\tColumns []string\n\t\t\tValues  [][]interface{}\n\t\t}\n\t}\n}\n\nfunc (c *Client) Query(query Query) (*Response, error) {\n\treq, err := http.NewRequest(\"POST\", c.url.ResolveReference(&url.URL{Path: \"/query\"}).String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tq := req.URL.Query()\n\tq.Add(\"q\", query.Command)\n\treq.URL.RawQuery = q.Encode()\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tif c.username != \"\" && c.password != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar result Response\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &result, nil\n}\n\ntype BatchPoints struct {\n\tPoints []Point\n}\n\ntype Point struct {\n\tMeasurement string\n\tTags        map[string]string\n\tFields      map[string]interface{}\n\tTimestamp   time.Time\n}\n\nfunc (c *Client) Write(batch BatchPoints) (*Response, error) {\n\tjsonBody, err := json.Marshal(batch)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq, err := http.NewRequest(\"POST\", c.url.ResolveReference(&url.URL{Path: \"/write\"}).String(), bytes.NewBuffer(jsonBody))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"User-Agent\", c.userAgent)\n\n\tif c.username != \"\" && c.password != \"\" {\n\t\treq.SetBasicAuth(c.username, c.password)\n\t}\n\n\tresp, err := c.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar result Response\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &result, nil\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function to fetch video materials from an advertising API using HTTP requests with custom headers and process the response.\n\nFunction Description: The function `getVideo` makes a GET request to a specified API endpoint to retrieve video materials for a given advertiser. It handles request creation, header addition, response processing, and error handling. The response is parsed to extract video information and store it in a global map while returning pagination information.\n\nInput:\n- advertiserId: string - The ID of the advertiser whose videos are being requested\n- page: int - The page number for paginated results\n\nOutput:\n- int - Total number of pages available (for pagination)\n- error - Any error encountered during the HTTP request or response processing",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nvar videoImageIdMaterialIdMap = map[string]int64{}\n\nfunc getVideo(advertiserId string, page int) (int, error) {\n\turl := \"https://ad.oceanengine.com/open_api/2/file/video/get/\"\n\tmethod := \"GET\"\n\tpayload := strings.NewReader(fmt.Sprintf(`{\n    \t\t\t\"advertiser_id\": %s,\n   \t\t\t\t \"page\":%d,\n   \t\t\t\t \"page_size\":100}`, advertiserId, page))\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(method, url, payload)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq.Header.Add(\"Access-Token\", \"c0bfed085c0dbc19bb2e41920ecd6d2a6d398b32\")\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tvar getVideoMaterialResp GetVideoMaterialResp\n\terr = json.Unmarshal(body, &getVideoMaterialResp)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tif getVideoMaterialResp.Code != 0 {\n\t\treturn 0, err\n\t}\n\tfor _, s := range getVideoMaterialResp.Data.List {\n\t\tvideoImageIdMaterialIdMap[s.Id] = s.MaterialId\n\t}\n\treturn getVideoMaterialResp.Data.PageInfo.TotalPage, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nvar videoMap map[string]map[string]string = make(map[string]map[string]string)\n\nfunc getVideo(advertiserId string, page int) (int, error) {\n\turl := fmt.Sprintf(\"https://api.advertising.com/videos?advertiserId=%s&page=%d\", advertiserId, page)\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treq.Header.Set(\"Authorization\", \"Bearer your_token_here\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tvar result struct {\n\t\tTotalPages int         `json:\"total_pages\"`\n\t\tVideos     []map[string]string `json:\"videos\"`\n\t}\n\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\treturn 0, err\n\t}\n\n\tfor _, video := range result.Videos {\n\t\tvideoMap[video[\"id\"]] = video\n\t}\n\n\treturn result.TotalPages, nil\n}"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Implement a RedisStore struct in Go that provides a connection pool to interact with a Redis server, supporting common operations like Set, Get, Delete, and Flush with configurable expiration times.\n\nStruct Description: RedisStore is a struct that manages a pool of Redis connections and provides methods to interact with Redis, including setting, getting, deleting keys, and flushing the database. It supports configurable expiration times for cached items.\n\nFields:\n- pool: *redis.Pool - A connection pool to manage Redis connections efficiently\n- defaultExpiration: time.Duration - The default expiration time for cached items\n\nMethods:\n- NewRedisCache: (host string, password string, defaultExpiration time.Duration) -> *RedisStore - Creates a new RedisStore instance with connection pool and default expiration\n- Set: (key string, value interface{}, expires time.Duration) -> error - Sets a key-value pair in Redis with optional expiration\n- Get: (key string, ptrValue interface{}) -> error - Retrieves a value from Redis and deserializes it into ptrValue\n- Delete: (key string) -> error - Deletes a key from Redis\n- Flush: () -> error - Flushes all keys from the Redis database\n- invoke: (f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) -> error - Internal method to handle Redis operations with expiration logic",
    "Canonical_solution": "import (\n\t\"github.com/garyburd/redigo/redis\"\n\t\"time\"\n)\n\ntype RedisStore struct {\n\tpool              *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\tvar pool = &redis.Pool{\n\t\tMaxIdle:     5,\n\t\tIdleTimeout: 240 * time.Second,\n\t\tDial: func() (redis.Conn, error) {\n\t\t\tc, err := redis.Dial(\"tcp\", host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif len(password) > 0 {\n\t\t\t\tif _, err := c.Do(\"AUTH\", password); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\t\tc.Close()\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c, err\n\t\t},\n\t\tTestOnBorrow: func(c redis.Conn, t time.Time) error {\n\t\t\tif _, err := c.Do(\"PING\"); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn &RedisStore{pool, defaultExpiration}\n}\n\nfunc (c *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\treturn c.invoke(c.pool.Get().Do, key, value, expires)\n}\n\nfunc (c *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\traw, err := conn.Do(\"GET\", key)\n\tif raw == nil {\n\t\treturn ErrCacheMiss\n\t}\n\titem, err := redis.Bytes(raw, err)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn deserialize(item, ptrValue)\n}\n\nfunc (c *RedisStore) Delete(key string) error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif !exists(conn, key) {\n\t\treturn ErrCacheMiss\n\t}\n\t_, err := conn.Do(\"DEL\", key)\n\treturn err\n}\n\nfunc (c *RedisStore) Flush() error {\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\t_, err := conn.Do(\"FLUSHALL\")\n\treturn err\n}\n\nfunc (c *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error),\n\tkey string, value interface{}, expires time.Duration) error {\n\n\tswitch expires {\n\tcase DEFAULT:\n\t\texpires = c.defaultExpiration\n\tcase FOREVER:\n\t\texpires = time.Duration(0)\n\t}\n\n\tb, err := serialize(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn := c.pool.Get()\n\tdefer conn.Close()\n\tif expires > 0 {\n\t\t_, err := f(\"SETEX\", key, int32(expires/time.Second), b)\n\t\treturn err\n\t} else {\n\t\t_, err := f(\"SET\", key, b)\n\t\treturn err\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 126,
    "wrong_result": "package main\n\nimport (\n\t\"time\"\n\t\"github.com/go-redis/redis/v8\"\n)\n\ntype RedisStore struct {\n\tpool           *redis.Pool\n\tdefaultExpiration time.Duration\n}\n\nfunc NewRedisCache(host string, password string, defaultExpiration time.Duration) *RedisStore {\n\topt := &redis.Options{\n\t\tAddr:     host,\n\t\tPassword: password,\n\t\tDB:       0,\n\t}\n\tpool := redis.NewPool(opt, 10)\n\treturn &RedisStore{\n\t\tpool:           pool,\n\t\tdefaultExpiration: defaultExpiration,\n\t}\n}\n\nfunc (r *RedisStore) Set(key string, value interface{}, expires time.Duration) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tif expires == 0 {\n\t\texpires = r.defaultExpiration\n\t}\n\tval, err := redis.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif _, err := conn.Do(\"SET\", key, val, \"EX\", int64(expires.Seconds())); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *RedisStore) Get(key string, ptrValue interface{}) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tval, err := conn.Do(\"GET\", key)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif val == nil {\n\t\treturn nil\n\t}\n\tif err := redis.Unmarshal(val.([]byte), ptrValue); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *RedisStore) Delete(key string) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tif _, err := conn.Do(\"DEL\", key); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *RedisStore) Flush() error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tif _, err := conn.Do(\"FLUSHALL\"); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *RedisStore) invoke(f func(string, ...interface{}) (interface{}, error), key string, value interface{}, expires time.Duration) error {\n\tconn := r.pool.Get()\n\tdefer conn.Close()\n\tif expires == 0 {\n\t\texpires = r.defaultExpiration\n\t}\n\tval, err := redis.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif _, err := f(key, val, \"EX\", int64(expires.Seconds())); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Create a Go struct that implements a RocketMQ push consumer with configurable options, message handling, and tracing capabilities.\n\nStruct Description: The PushConsumer struct encapsulates a RocketMQ push consumer with additional features like rate limiting, tracing, and message processing. It manages consumer lifecycle and message subscription.\n\nFields:\n\nname: string - Name identifier for the consumer  \nPushConsumer: rocketmq.PushConsumer - Embedded RocketMQ push consumer instance  \nPushConsumerConfig: PushConsumerConfig - Configuration for the consumer  \nsubscribers: map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error) - Map of topic to message handler functions  \ninterceptors: []primitive.Interceptor - List of interceptors for message processing  \nbucket: *ratelimit.Bucket - Rate limiter bucket for controlling consumption rate  \nstarted: bool - Flag indicating if consumer is running  \n\nMethods:\n\nRegisterSingleMessage: (f func(context.Context, *primitive.MessageExt) error) -> *PushConsumer - Registers a single message handler function with tracing and panic recovery  \nStart: () -> error - Initializes and starts the RocketMQ consumer with configured options",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"runtime/debug\"\n\n\t\"github.com/apache/rocketmq-client-go/v2\"\n\t\"github.com/apache/rocketmq-client-go/v2/consumer\"\n\t\"github.com/apache/rocketmq-client-go/v2/primitive\"\n\t\"github.com/juju/ratelimit\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.12.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype PushConsumer struct {\n\trocketmq.PushConsumer\n\tname string\n\tPushConsumerConfig\n\n\tsubscribers  map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors []primitive.Interceptor\n\tbucket       *ratelimit.Bucket\n\tstarted      bool\n}\n\nfunc (cc *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\ttracer := xtrace.NewTracer(trace.SpanKindConsumer)\n\tattrs := []attribute.KeyValue{\n\t\tsemconv.MessagingSystemKey.String(\"rocketmq\"),\n\t\tsemconv.MessagingRocketmqClientGroupKey.String(cc.Group),\n\t\tsemconv.MessagingRocketmqClientIDKey.String(cc.InstanceName),\n\t\tsemconv.MessagingRocketmqConsumptionModelKey.String(cc.MessageModel),\n\t}\n\n\tfn := func(ctx context.Context, msgs ...*primitive.MessageExt) (result consumer.ConsumeResult, err error) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tresult, err = consumer.ConsumeRetryLater, errors.New(\"consumer message panic\")\n\t\t\t}\n\t\t}()\n\t\tfor _, msg := range msgs {\n\t\t\tvar (\n\t\t\t\tspan trace.Span\n\t\t\t)\n\n\t\t\tif cc.EnableTrace {\n\t\t\t\tcarrier := propagation.MapCarrier{}\n\t\t\t\tfor key, value := range msg.GetProperties() {\n\t\t\t\t\tcarrier[key] = value\n\t\t\t\t}\n\t\t\t\tctx, span = tracer.Start(ctx, msg.Topic, carrier, trace.WithAttributes(attrs...))\n\t\t\t\tspan.SetAttributes(\n\t\t\t\t\tsemconv.MessagingRocketmqNamespaceKey.String(msg.Topic),\n\t\t\t\t\tsemconv.MessagingRocketmqMessageTagKey.String(msg.GetTags()),\n\t\t\t\t)\n\t\t\t\tdefer span.End()\n\t\t\t}\n\n\t\t\tif cc.bucket != nil {\n\t\t\t\tif ok := cc.bucket.WaitMaxDuration(1, cc.WaitMaxDuration); !ok {\n\t\t\t\t\treturn consumer.ConsumeRetryLater, nil\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif err := f(ctx, msg); err != nil {\n\t\t\t\tif cc.EnableTrace && span != nil {\n\t\t\t\t\tspan.RecordError(err)\n\t\t\t\t}\n\t\t\t\treturn consumer.ConsumeRetryLater, err\n\t\t\t}\n\t\t}\n\t\treturn consumer.ConsumeSuccess, nil\n\t}\n\tcc.subscribers[cc.Topic] = fn\n\treturn cc\n}\n\nfunc (cc *PushConsumer) Start() error {\n\tif cc.started {\n\t\treturn nil\n\t}\n\n\tvar opts = []consumer.Option{\n\t\tconsumer.WithGroupName(cc.Group),\n\t\tconsumer.WithInstance(cc.InstanceName),\n\t\tconsumer.WithNameServer(cc.Addr),\n\t\tconsumer.WithMaxReconsumeTimes(cc.Reconsume),\n\t\tconsumer.WithInterceptor(cc.interceptors...),\n\t\tconsumer.WithConsumeMessageBatchMaxSize(cc.ConsumeMessageBatchMaxSize),\n\t\tconsumer.WithPullBatchSize(cc.PullBatchSize),\n\t\tconsumer.WithConsumeGoroutineNums(cc.ConsumeGoroutineNums),\n\t\tconsumer.WithCredentials(primitive.Credentials{\n\t\t\tAccessKey: cc.AccessKey,\n\t\t\tSecretKey: cc.SecretKey,\n\t\t}),\n\t}\n\tif cc.PushConsumerConfig.MessageModel == \"BroadCasting\" {\n\t\topts = append(opts, consumer.WithConsumerModel(consumer.BroadCasting))\n\t}\n\n\tclient, err := rocketmq.NewPushConsumer(opts...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcc.PushConsumer = client\n\n\tselector := consumer.MessageSelector{\n\t\tType:       consumer.TAG,\n\t\tExpression: \"\",\n\t}\n\tif cc.PushConsumerConfig.SubExpression != \"*\" {\n\t\tselector.Expression = cc.PushConsumerConfig.SubExpression\n\t}\n\n\tfor topic, fn := range cc.subscribers {\n\t\tif err := cc.PushConsumer.Subscribe(topic, selector, fn); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif cc.Enable {\n\t\tif err := client.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tcc.started = true\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 128,
    "wrong_result": "type PushConsumer struct {\n\tname           string\n\tPushConsumer   rocketmq.PushConsumer\n\tPushConsumerConfig PushConsumerConfig\n\tsubscribers    map[string]func(context.Context, ...*primitive.MessageExt) (consumer.ConsumeResult, error)\n\tinterceptors   []primitive.Interceptor\n\tbucket         *ratelimit.Bucket\n\tstarted        bool\n}\n\nfunc (c *PushConsumer) RegisterSingleMessage(f func(context.Context, *primitive.MessageExt) error) *PushConsumer {\n\tc.subscribers[\"default\"] = func(ctx context.Context, msgs ...*primitive.MessageExt) (consumer.ConsumeResult, error) {\n\t\tif len(msgs) == 0 {\n\t\t\treturn consumer.ConsumeSuccess, nil\n\t\t}\n\t\tmsg := msgs[0]\n\t\tctx = trace.Inject(ctx, msg.Properties)\n\t\tresult, err := trace.RunWithTrace(ctx, \"rocketmq-consumer\", func(ctx context.Context) (interface{}, error) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tlog.Printf(\"Recovered from panic: %v\", r)\n\t\t\t\t}\n\t\t\t}()\n\t\t\terr := f(ctx, msg)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn nil, nil\n\t\t})\n\t\tif result != nil {\n\t\t\treturn consumer.ConsumeSuccess, nil\n\t\t}\n\t\treturn consumer.ConsumeFailed, nil\n\t}\n\treturn c\n}\n\nfunc (c *PushConsumer) Start() error {\n\tif c.started {\n\t\treturn nil\n\t}\n\tif c.PushConsumer == nil {\n\t\treturn errors.New(\"consumer instance is not initialized\")\n\t}\n\tif c.PushConsumerConfig == nil {\n\t\treturn errors.New(\"consumer config is not set\")\n\t}\n\tif c.bucket == nil {\n\t\treturn errors.New(\"rate limiter bucket is not set\")\n\t}\n\tif err := c.PushConsumer.Subscribe(c.PushConsumerConfig.Topic, c.subscribers[\"default\"]); err != nil {\n\t\treturn err\n\t}\n\tfor _, interceptor := range c.interceptors {\n\t\tif err := c.PushConsumer.RegisterMessageInterceptor(interceptor); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := c.PushConsumer.Start(); err != nil {\n\t\treturn err\n\t}\n\tc.started = true\n\treturn nil\n}"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The function handles error cases including failed requests and non-200 status codes. When caching is enabled, subsequent requests for the same URL will return the cached content.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput:\n- `[]byte` - The content of the fetched file as a byte slice\n- `error` - An error object if any step fails (network error, non-200 status, etc.)\n\nNote: The function relies on package-level variables `fileCache` (a map for caching), `fileCacheMutex` (for thread safety), `fileCacheEnable` (boolean to toggle caching), and `verboseReader` (boolean for logging). These should be properly initialized before use.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar fileCache = make(map[string][]byte)\nvar fileCacheMutex = &sync.Mutex{}\nvar fileCacheEnable = true\nvar verboseReader = false\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tif fileCacheEnable {\n\t\tfileCacheMutex.Lock()\n\t\tdefer fileCacheMutex.Unlock()\n\t\tif cached, exists := fileCache[fileurl]; exists {\n\t\t\tif verboseReader {\n\t\t\t\tfmt.Printf(\"Serving from cache: %s\\n\", fileurl)\n\t\t\t}\n\t\t\treturn cached, nil\n\t\t}\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to fetch file: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"received non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read response body: %v\", err)\n\t}\n\n\tif fileCacheEnable {\n\t\tfileCacheMutex.Lock()\n\t\tdefer fileCacheMutex.Unlock()\n\t\tfileCache[fileurl] = content\n\t\tif verboseReader {\n\t\t\tfmt.Printf(\"Cached file: %s\\n\", fileurl)\n\t\t}\n\t}\n\n\treturn content, nil\n}"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a function to download a file from a given URL, apply an optional filter to the content, and save it to specified directories.\n\nFunction Description: The function `dl` downloads a file from a provided URL, reads its content, applies an optional filter (if provided), and writes the content to one or more specified directories. It handles errors during the HTTP request, reading the response, and file writing, and provides status feedback via console output.\n\nInput:  \n- `f` (type `dlFile`): A struct containing the following fields:  \n  - `name` (string): The name of the file to be saved.  \n  - `url` (string): The URL from which the file will be downloaded.  \n  - `filt` (func([]byte) []byte): An optional function to filter/modify the downloaded content. Can be `nil` if no filtering is needed.  \n  - `dirs` ([]string): A slice of directory paths where the file will be saved.  \n\nOutput:  \n- None (void): The function does not return any value but prints status messages to the console (e.g., \"Sync [filename]: ok\" on success or error messages on failure).  \n\nNote: The function handles errors for HTTP requests, reading response bodies, and file writing, and ensures the response body is closed properly to prevent resource leaks.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"path/filepath\"\n)\n\nfunc dl(f dlFile) {\n\tfmt.Printf(\"Sync %s: \", f.name)\n\n\tresp, err := http.Get(f.url)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tif f.filt != nil {\n\t\tcontent = f.filt(content)\n\t}\n\n\tfor _, dir := range f.dirs {\n\t\tioutil.WriteFile(filepath.Join(dir, f.name), content, 0644)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tfmt.Println(\"ok\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\ntype dlFile struct {\n\tname string\n\turl  string\n\tfilt func([]byte) []byte\n\tdirs []string\n}\n\nfunc dl(f dlFile) {\n\tresp, err := http.Get(f.url)\n\tif err != nil {\n\t\tfmt.Printf(\"Sync %s: error - failed to get URL\\n\", f.name)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tfmt.Printf(\"Sync %s: error - HTTP status code %d\\n\", f.name, resp.StatusCode)\n\t\treturn\n\t}\n\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Sync %s: error - failed to read response body\\n\", f.name)\n\t\treturn\n\t}\n\n\tif f.filt != nil {\n\t\tcontent = f.filt(content)\n\t}\n\n\tfor _, dir := range f.dirs {\n\t\tdirPath := filepath.Join(dir, f.name)\n\t\tif err := os.MkdirAll(filepath.Dir(dirPath), os.ModePerm); err != nil {\n\t\t\tfmt.Printf(\"Sync %s: error - failed to create directory structure\\n\", f.name)\n\t\t\tcontinue\n\t\t}\n\n\t\tfile, err := os.Create(dirPath)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Sync %s: error - failed to create file in %s\\n\", f.name, dir)\n\t\t\tcontinue\n\t\t}\n\t\tdefer file.Close()\n\n\t\tif _, err := file.Write(content); err != nil {\n\t\t\tfmt.Printf(\"Sync %s: error - failed to write file in %s\\n\", f.name, dir)\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Sync %s: ok\\n\", f.name)\n\t}\n}"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: Implement a function to fetch and process Google Font CSS data for embedding in SVG documents.\n\nFunction Description: The function `googlefont` retrieves CSS data from Google Fonts API for a specified font family, embeds it in SVG-compatible format, and returns available font variants. It handles HTTP requests, response processing, and error cases gracefully.\n\nInput: \n- `f` [string] - The font family name to query (e.g., \"Roboto\" or \"Open Sans\")\n\nOutput:\n- `[]string` - A slice of strings representing available font variants (split by \"|\"), or an empty slice if the request fails or returns non-200 status",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nvar (\n\tcanvas = svg.New(os.Stdout)\n)\n\nconst (\n\tgwfURI  = \"http://fonts.googleapis.com/css?family=\"\n\tfontfmt = \"<style type=\\\"text/css\\\">\\n<![CDATA[\\n%s]]>\\n</style>\\n\"\n)\n\nfunc googlefont(f string) []string {\n\tempty := []string{}\n\tr, err := http.Get(gwfURI + url.QueryEscape(f))\n\tif err != nil {\n\t\treturn empty\n\t}\n\tdefer r.Body.Close()\n\tb, rerr := ioutil.ReadAll(r.Body)\n\tif rerr != nil || r.StatusCode != http.StatusOK {\n\t\treturn empty\n\t}\n\tcanvas.Def()\n\tfmt.Fprintf(canvas.Writer, fontfmt, b)\n\tcanvas.DefEnd()\n\treturn strings.Split(fontlist, \"|\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func googlefont(f string) []string {\n\tvar variants []string\n\tresp, err := http.Get(\"https://fonts.googleapis.com/css2?family=\" + url.QueryEscape(f) + \"&display=swap\")\n\tif err != nil {\n\t\treturn []string{}\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn []string{}\n\t}\n\tbody, _ := io.ReadAll(resp.Body)\n\tlines := strings.Split(string(body), \"\\n\")\n\tfor _, line := range lines {\n\t\tif strings.HasPrefix(line, \"/*\") {\n\t\t\tcontinue\n\t\t}\n\t\tif strings.Contains(line, \"font-family:\") {\n\t\t\tparts := strings.Split(line, \":\")\n\t\t\tif len(parts) > 1 {\n\t\t\t\tvariant := strings.TrimSpace(strings.TrimPrefix(parts[1], \" \"))\n\t\t\t\tif strings.Contains(variant, \"italic\") || strings.Contains(variant, \"normal\") {\n\t\t\t\t\tvariants = append(variants, variant)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tresult := make([]string, 0, len(variants))\n\tfor _, v := range variants {\n\t\tif strings.Contains(v, \"italic\") {\n\t\t\tresult = append(result, strings.TrimSuffix(v, \"italic\"))\n\t\t} else {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\tsort.Strings(result)\n\treturn result\n}"
  },
  {
    "Task_id": 308,
    "Instruction": "Task Description: Create a function that fetches memory statistics from a specified URL using HTTP GET request and returns the response body.\n\nFunction Description: The function `defaultMemstatsClient` makes an HTTP GET request to the provided URL to fetch memory statistics. It handles the response by reading the body and ensures proper resource cleanup by deferring the closure of the response body. Errors during the request or response handling are returned to the caller.\n\nInput: \n- `url` (string): The URL from which to fetch the memory statistics.\n\nOutput: \n- `[]byte`: The response body containing the memory statistics.\n- `error`: An error object if the HTTP request or response reading fails; otherwise, `nil`.",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc defaultMemstatsClient(url string) ([]byte, error) {\n\tutil.Debug(\"Fetching memstats from %s\", url)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func defaultMemstatsClient(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
  },
  {
    "Task_id": 309,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL with optional custom headers and client configuration, while implementing safety measures like response size limiting and proper resource cleanup.\n\nFunction Description: The function `ReadURL` makes an HTTP GET request to the specified URL using a provided HTTP client and optional headers. It ensures proper resource cleanup, checks for successful response status, limits the maximum readable response size, and returns the response body or an error if any step fails.\n\nInput:\n- `url` [string] - The URL to send the GET request to\n- `client` [*http.Client] - The HTTP client to use for the request (can be nil to use http.DefaultClient)\n- `header` [*http.Header] - Optional headers to include in the request (can be nil)\n\nOutput:\n- `body` [[]byte] - The response body if the request is successful\n- `err` [error] - An error object if any step fails, including:\n  - Request creation failure\n  - Network errors\n  - Non-200 status codes (wrapped in HTTPError)\n  - Read errors\n  - Response size exceeding limit",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nconst (\n\tmaxReadLength = 10 * 1 << 20\n)\n\nfunc ReadURL(url string, client *http.Client, header *http.Header) (body []byte, err error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif header != nil {\n\t\treq.Header = *header\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, &HTTPError{\n\t\t\tStatusCode: resp.StatusCode,\n\t\t\tURL:        url,\n\t\t}\n\t}\n\n\tlimitedReader := &io.LimitedReader{R: resp.Body, N: maxReadLength}\n\tcontents, err := ioutil.ReadAll(limitedReader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif limitedReader.N <= 0 {\n\t\treturn nil, errors.New(\"the read limit is reached\")\n\t}\n\n\treturn contents, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func ReadURL(url string, client *http.Client, header *http.Header) ([]byte, error) {\n\tif client == nil {\n\t\tclient = http.DefaultClient\n\t}\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif header != nil {\n\t\treq.Header = *header\n\t}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, &HTTPError{Code: resp.StatusCode, Message: resp.Status}\n\t}\n\tconst maxBodySize = 10 << 20 // 10 MB\n\tif resp.ContentLength > int64(maxBodySize) {\n\t\treturn nil, &HTTPError{Code: 413, Message: \"Response size exceeds limit\"}\n\t}\n\tbody, err := io.ReadAll(io.LimitReader(resp.Body, int64(maxBodySize)))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}\n\ntype HTTPError struct {\n\tCode    int\n\tMessage string\n}\n\nfunc (e *HTTPError) Error() string {\n\treturn e.Message\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: The task involves creating a struct and associated method to handle chunked file uploads to a remote server using HTTP PUT requests with proper content range headers.\n\nStruct Description: The UploadSession struct represents an ongoing file upload session, tracking upload state, metadata, and providing methods for chunked upload operations.\n\nFields:\n\nID: string - Unique identifier for the upload session\nOldID: string - Previous session ID (if applicable)\nParentID: string - ID of parent directory\nNodeID: uint64 - Filesystem node identifier\nName: string - Name of the file being uploaded\nExpirationDateTime: time.Time - When the upload session expires\nSize: uint64 - Total size of the file in bytes\nData: []byte - File content data being uploaded\nQuickXORHash: string - File content hash\nModTime: time.Time - File modification time\nretries: int - Number of upload retry attempts\nUploadURL: string - Server endpoint for chunk uploads\nETag: string - Entity tag from server response\nstate: int - Current upload state\nerror: error - Last encountered error\nsync.Mutex: - Mutex for thread-safe operations\n\nMethods:\n\nuploadChunk: (auth *graph.Auth, offset uint64) -> ([]byte, int, error) - Uploads a file chunk starting at specified offset. Returns response body, HTTP status code, and error if any. Handles authentication refresh and proper Content-Range headers.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/jstaf/onedriver/fs/graph\"\n\t\"github.com/rs/zerolog/log\"\n)\n\ntype UploadSession struct {\n\tID                 string    `json:\"id\"`\n\tOldID              string    `json:\"oldID\"`\n\tParentID           string    `json:\"parentID\"`\n\tNodeID             uint64    `json:\"nodeID\"`\n\tName               string    `json:\"name\"`\n\tExpirationDateTime time.Time `json:\"expirationDateTime\"`\n\tSize               uint64    `json:\"size,omitempty\"`\n\tData               []byte    `json:\"data,omitempty\"`\n\tQuickXORHash       string    `json:\"quickxorhash,omitempty\"`\n\tModTime            time.Time `json:\"modTime,omitempty\"`\n\tretries            int\n\n\tsync.Mutex\n\tUploadURL string `json:\"uploadUrl\"`\n\tETag      string `json:\"eTag,omitempty\"`\n\tstate     int\n\terror\n}\n\nfunc (u *UploadSession) uploadChunk(auth *graph.Auth, offset uint64) ([]byte, int, error) {\n\tu.Lock()\n\turl := u.UploadURL\n\tif url == \"\" {\n\t\tu.Unlock()\n\t\treturn nil, -1, errors.New(\"UploadSession UploadURL cannot be empty\")\n\t}\n\tu.Unlock()\n\n\tend := offset + uploadChunkSize\n\tvar reqChunkSize uint64\n\tif end > u.Size {\n\t\tend = u.Size\n\t\treqChunkSize = end - offset + 1\n\t}\n\tif offset > u.Size {\n\t\treturn nil, -1, errors.New(\"offset cannot be larger than DriveItem size\")\n\t}\n\n\tauth.Refresh()\n\n\tclient := &http.Client{}\n\trequest, _ := http.NewRequest(\n\t\t\"PUT\",\n\t\turl,\n\t\tbytes.NewReader((u.Data)[offset:end]),\n\t)\n\trequest.Header.Add(\"Content-Length\", strconv.Itoa(int(reqChunkSize)))\n\tfrags := fmt.Sprintf(\"bytes %d-%d/%d\", offset, end-1, u.Size)\n\tlog.Info().Str(\"id\", u.ID).Msg(\"Uploading \" + frags)\n\trequest.Header.Add(\"Content-Range\", frags)\n\n\tresp, err := client.Do(request)\n\tif err != nil {\n\t\treturn nil, -1, err\n\t}\n\tdefer resp.Body.Close()\n\tresponse, _ := ioutil.ReadAll(resp.Body)\n\treturn response, resp.StatusCode, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype UploadSession struct {\n\tID              string\n\tOldID           string\n\tParentID        string\n\tNodeID          uint64\n\tName            string\n\tExpirationDateTime time.Time\n\tSize            uint64\n\tData            []byte\n\tQuickXORHash    string\n\tModTime         time.Time\n\tretries         int\n\tUploadURL       string\n\tETag            string\n\tstate           int\n\terror           error\n\tmu              sync.Mutex\n}\n\nfunc (s *UploadSession) uploadChunk(auth *graph.Auth, offset uint64) ([]byte, int, error) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\n\tif s.error != nil {\n\t\treturn nil, 0, s.error\n\t}\n\n\tchunkSize := 1024 * 1024 // 1MB chunk size\n\tend := offset + chunkSize\n\tif end > s.Size {\n\t\tend = s.Size\n\t}\n\n\tchunkData := s.Data[offset:end]\n\tbody := bytes.NewBuffer(chunkData)\n\n\treq, err := http.NewRequest(\"PUT\", s.UploadURL, body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\treq.Header.Set(\"Content-Type\", \"application/octet-stream\")\n\treq.Header.Set(\"Content-Range\", fmt.Sprintf(\"bytes %d-%d/%d\", offset, end-1, s.Size))\n\treq.Header.Set(\"Authorization\", auth.Token)\n\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t},\n\t\tTimeout: 30 * time.Second,\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbodyResp, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tif resp.StatusCode >= 200 && resp.StatusCode < 300 {\n\t\treturn bodyResp, resp.StatusCode, nil\n\t} else if resp.StatusCode == 416 {\n\t\treturn bodyResp, resp.StatusCode, fmt.Errorf(\"range not satisfiable\")\n\t} else {\n\t\treturn bodyResp, resp.StatusCode, fmt.Errorf(\"upload failed with status code %d\", resp.StatusCode)\n\t}\n}"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET. It supports caching of downloaded files to avoid redundant network requests. The function handles HTTP errors, manages resource cleanup, and provides verbose logging options.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput:\n- `[]byte` - The contents of the file as a byte slice\n- `error` - Any error encountered during the fetch operation (nil if successful)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func fetchFile(fileurl string, cacheDir string, verbose bool) ([]byte, error) {\n\tif cacheDir != \"\" {\n\t\tcacheFilePath := filepath.Join(cacheDir, filepath.Base(fileurl))\n\t\tif _, err := os.Stat(cacheFilePath); err == nil {\n\t\t\tif verbose {\n\t\t\t\tfmt.Printf(\"Fetching from cache: %s\\n\", cacheFilePath)\n\t\t\t}\n\t\t\tcontent, err := os.ReadFile(cacheFilePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn content, nil\n\t\t}\n\t}\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 400 {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %d %s\", resp.StatusCode, resp.Status)\n\t}\n\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif cacheDir != \"\" {\n\t\tcacheFilePath := filepath.Join(cacheDir, filepath.Base(fileurl))\n\t\tif err := os.WriteFile(cacheFilePath, content, 0644); err != nil {\n\t\t\tif verbose {\n\t\t\t\tfmt.Printf(\"Failed to cache file: %s\\n\", cacheFilePath)\n\t\t\t}\n\t\t} else {\n\t\t\tif verbose {\n\t\t\t\tfmt.Printf(\"Cached file: %s\\n\", cacheFilePath)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn content, nil\n}"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a file fetcher with caching capability that retrieves files from a given URL using HTTP GET requests and caches the results to avoid redundant network calls.\n\nFunction Description: The FetchFile function checks a cache for the requested file URL. If not found in cache, it makes an HTTP GET request to fetch the file, stores the result in cache, and returns the file content. It handles errors during the fetch operation and returns appropriate status codes.\n\nInput: \n- fileurl [string]: The URL of the file to fetch\n\nOutput:\n- []byte: The content of the fetched file\n- error: Any error encountered during the fetch operation (network error, non-200 status code, or read error)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tinitializeFileCache()\n\tbytes, ok := fileCache[fileurl]\n\tif ok {\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t}\n\t\treturn bytes, nil\n\t}\n\tif verboseReader {\n\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tdefer response.Body.Close()\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"time\"\n)\n\nconst cacheDir = \"file_cache\"\n\nfunc init() {\n\tif _, err := os.Stat(cacheDir); os.IsNotExist(err) {\n\t\tos.Mkdir(cacheDir, 0755)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tcacheFilePath := path.Join(cacheDir, fmt.Sprintf(\"%x\", fileurl))\n\t\n\t// Check cache\n\tif cachedData, err := os.ReadFile(cacheFilePath); err == nil {\n\t\treturn cachedData, nil\n\t}\n\n\t// Fetch from URL\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, errors.New(\"non-200 status code: \" + resp.Status)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Write to cache\n\terr = os.WriteFile(cacheFilePath, body, 0644)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response body as a byte slice or an error if the request fails.\n\nFunction Description: The function makes an HTTP GET request to the provided URL, reads the response body, and returns it as a byte slice. It handles errors during the request or reading process and ensures the response body is properly closed to prevent resource leaks.\n\nInput: \n- url (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- ([]byte, error): A byte slice containing the response body if the request is successful, or an error if the request fails or the response body cannot be read.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresp, err := http.Get(\"https://api.github.com/repos/zyedidia/micro/releases\")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func getResponseBody(url string) ([]byte, error) {\n    resp, err := http.Get(url)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return nil, err\n    }\n    return body, nil\n}"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Write a Go function that retrieves the private IPv4 address of an Amazon EC2 instance by querying the instance metadata service.\n\nFunction Description: The function should make an HTTP GET request to the EC2 instance metadata service at the well-known endpoint (169.254.169.254) to fetch the local IPv4 address. It should handle potential errors during the request, response reading, and IP parsing, and return the IPv4 address in net.IP format.\n\nInput: None (the function takes no parameters)\n\nOutput: \n- On success: Returns the private IPv4 address as a net.IP object (IPv4 format)\n- On failure: Returns nil and an error describing what went wrong (failed request, invalid response, or invalid IP address)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc amazonEC2PrivateIPv4() (net.IP, error) {\n\tres, err := http.Get(\"http://169.254.169.254/latest/meta-data/local-ipv4\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer res.Body.Close()\n\n\tbody, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tip := net.ParseIP(string(body))\n\tif ip == nil {\n\t\treturn nil, errors.New(\"invalid ip address\")\n\t}\n\treturn ip.To4(), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"errors\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc getPrivateIPv4() (net.IP, error) {\n\turl := \"http://169.254.169.254/latest/meta-data/local-ipv4\"\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, errors.New(\"failed to fetch metadata: \" + resp.Status)\n\t}\n\n\tbody, err := net.http.ReadBody(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tipStr := strings.TrimSpace(string(body))\n\tip := net.ParseIP(ipStr)\n\tif ip == nil || !ip.IsIPv4() {\n\t\treturn nil, errors.New(\"invalid IP address received\")\n\t}\n\n\treturn ip, nil\n}"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `fetchFile` retrieves the contents of a file from a specified URL using HTTP GET. It supports caching of downloaded files to avoid redundant network requests. The function handles HTTP errors, manages resource cleanup, and provides verbose logging options.\n\nInput: \n- `fileurl` [string]: The URL of the file to be fetched\n\nOutput: \n- `[]byte`: The contents of the file as a byte slice if successful\n- `error`: An error object if any step fails (network error, HTTP error, etc.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n)\n\nconst cacheDir = \"file_cache\"\n\nfunc fetchFile(fileurl string, verbose bool, cacheDuration time.Duration) ([]byte, error) {\n\t// Create cache directory if it doesn't exist\n\tif err := os.MkdirAll(cacheDir, 0755); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Generate cache file path\n\tcacheFilePath := filepath.Join(cacheDir, filepath.Base(fileurl))\n\t\n\t// Check if cached file exists and is not expired\n\tif _, err := os.Stat(cacheFilePath); err == nil {\n\t\tfileInfo, _ := os.Stat(cacheFilePath)\n\t\tif time.Since(fileInfo.ModTime()) < cacheDuration {\n\t\t\tif verbose {\n\t\t\t\tprintln(\"Serving from cache:\", cacheFilePath)\n\t\t\t}\n\t\t\tcontent, err := os.ReadFile(cacheFilePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn content, nil\n\t\t}\n\t}\n\n\t// Fetch from URL\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\t// Check HTTP status\n\tif resp.StatusCode < 200 || resp.StatusCode >= 400 {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %s\", resp.Status)\n\t}\n\n\t// Read response body\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Write to cache\n\tif err := os.WriteFile(cacheFilePath, content, 0644); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif verbose {\n\t\tprintln(\"Fetched and cached:\", fileurl)\n\t}\n\n\treturn content, nil\n}"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Create a function that retrieves the version information from an etcd server using a simple HTTP GET request.\n\nFunction Description: The function `GetEtcdVersion` makes an HTTP GET request to the specified etcd server's `/version` endpoint, reads the response, and returns the version information as a string. It handles errors for connection issues, unsuccessful HTTP responses, and response body reading failures.\n\nInput: \n- `host` (string): The base URL of the etcd server (e.g., \"http://localhost:2379\")\n\nOutput: \n- (string): The version information returned by the etcd server\n- (error): An error object if any step fails (connection, non-200 response, or body reading error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\nfunc GetEtcdVersion(host string) (string, error) {\n\tresponse, err := http.Get(host + \"/version\")\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unsuccessful response from etcd server %q: %v\", host, err)\n\t}\n\tversionBytes, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(versionBytes), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func GetEtcdVersion(host string) (string, error) {\n    url := host + \"/version\"\n    resp, err := http.Get(url)\n    if err != nil {\n        return \"\", err\n    }\n    defer resp.Body.Close()\n    if resp.StatusCode != http.StatusOK {\n        return \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n    }\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return \"\", err\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Create a function that performs a simple HTTP GET request to a remote URL and returns the response body as a string.\n\nFunction Description: The function `remote_get` makes an HTTP GET request to the specified remote URL. It handles the response by checking the status code, reading the response body, and returning it as a string. If any errors occur during the request or response processing, they are returned as part of the error output.\n\nInput: \n- `remote` (string): The URL to which the HTTP GET request will be sent.\n\nOutput: \n- (string, error): A tuple containing the response body as a string and an error. If the request is successful, the error will be nil. If an error occurs, the string will be empty, and the error will contain the relevant error message.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"remote_get: wrong status code %d\", resp.StatusCode))\n\t}\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc remote_get(remote string) (string, error) {\n\tresp, err := http.Get(remote)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to make request: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to read response body: %w\", err)\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a function to retrieve node information by making an HTTP GET request to a local server. The function should handle server setup, request execution, and response processing.\n\nFunction Description: The function `getNode` initiates an HTTP server locally, sends a GET request to retrieve node information based on the provided ID, and returns the response body as a string. It handles server lifecycle management and ensures proper resource cleanup.\n\nInput: \n- `id` [string] - The identifier of the node to retrieve\n\nOutput: \n- [string] - The response body containing the node information",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc getNode(id string) string {\n\tlchan := make(chan net.Listener)\n\thttpServe = func(l net.Listener, h http.Handler) error {\n\t\tlchan <- l\n\t\thttp.Serve(l, h)\n\t\treturn nil\n\t}\n\n\tgo func() { run(&http.ServeMux{}, 0, false, \"nbs:\"+dir) }()\n\tl := <-lchan\n\tdefer l.Close()\n\n\tr, err := http.Get(fmt.Sprintf(\"http://%s/getNode?id=%s\", l.Addr().String(), id))\n\tassert.NoError(err)\n\tdefer r.Body.Close()\n\tbody, err := ioutil.ReadAll(r.Body)\n\treturn string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func getNode(id string) (string, error) {\n    var mu sync.Mutex\n    var result string\n    done := make(chan struct{})\n    serverStarted := false\n\n    go func() {\n        defer close(done)\n        ln, err := net.Listen(\"tcp\", \":8080\")\n        if err != nil {\n            log.Fatal(err)\n        }\n        serverStarted = true\n        http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n            if r.URL.Path != \"/\"+id {\n                w.WriteHeader(http.StatusNotFound)\n                return\n            }\n            w.Header().Set(\"Content-Type\", \"application/json\")\n            w.Write([]byte(`{\"id\": \"` + id + `\", \"name\": \"Node Info\"}`))\n        })\n        http.Serve(ln, nil)\n    }()\n\n    select {\n    case <-done:\n        if !serverStarted {\n            return \"\", errors.New(\"server failed to start\")\n        }\n    case <-time.After(2 * time.Second):\n        return \"\", errors.New(\"timeout waiting for server to start\")\n    }\n\n    client := &http.Client{\n        Timeout: 2 * time.Second,\n    }\n    resp, err := client.Get(\"http://localhost:8080/\" + id)\n    if err != nil {\n        return \"\", err\n    }\n    defer resp.Body.Close()\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return \"\", err\n    }\n    return string(body), nil\n}"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to retrieve configuration data from a local admin API endpoint and returns the response body as a string.\n\nFunction Description: The function `getEffectiveConfig` makes an HTTP GET request to a specified local port's admin API endpoint (/api/v1/config_dump). It handles the response by checking the status code, reading the response body, and returning it as a string. It includes proper error handling for failed requests or non-200 status codes.\n\nInput: \n- port [uint32] - The local port number where the admin API is running\n\nOutput:\n- [string] - The response body as a string if the request is successful\n- [error] - An error object describing any issues that occurred during the request (connection error, non-200 status code, or body read error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\nfunc getEffectiveConfig(port uint32) (string, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tb, err := ioutil.ReadAll(resp.Body)\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", errors.New(fmt.Sprintf(\"call admin api failed response status: %d, %s\", resp.StatusCode, string(b)))\n\t}\n\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(b), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc getEffectiveConfig(port uint32) (string, error) {\n\turl := fmt.Sprintf(\"http://localhost:%d/api/v1/config_dump\", port)\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn string(body), nil\n}"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a function to retrieve a proxy address from a specified HTTP endpoint and return it in a formatted string.\n\nFunction Description: The function `getOneProxy` makes an HTTP GET request to a predefined proxy server endpoint, reads the response body to obtain the proxy address, formats it with an \"http://\" prefix, and returns both the formatted and raw proxy strings. It includes basic error handling for the response reading process.\n\nInput: None (The function takes no input parameters)\n\nOutput: \n1. A string representing the formatted proxy address with \"http://\" prefix\n2. A string representing the raw proxy address from the response body",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, _ := http.Get(\"http://45.78.45.70:5015/get/\")\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t}\n\tproxy := \"http://\" + string(body)\n\tfmt.Println(\"\u4f7f\u7528\u9ed8\u8ba4\u4ee3\u7406\uff1a\" + proxy)\n\treturn proxy, string(body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getOneProxy() (string, string) {\n\tresp, err := http.Get(\"http://proxy-server-endpoint\")\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", \"\"\n\t}\n\n\trawProxy := string(body)\n\tformattedProxy := \"http://\" + rawProxy\n\treturn formattedProxy, rawProxy\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: The task involves creating a Go struct that encapsulates functionality for sending push notifications through a push service, handling HTTP communication, and processing responses. The struct should manage HTTP client configuration, request construction, and response handling for push notification delivery.\n\nStruct Description: PushServiceBase is a struct that provides base functionality for push notification services. It manages HTTP client configuration, constructs requests to a push service endpoint, handles authentication, processes responses, and manages delivery results. The struct is designed to be extended by specific push service implementations.\n\nFields:\n\nclient: [*http.Client] - Custom HTTP client configured with TLS settings and timeouts\ninitialism: [string] - Short identifier for the push service\nrawPayloadKey: [string] - Key for raw payload in notification data\nrawNotificationKey: [string] - Key for raw notification in notification data\nserviceURL: [string] - Base URL for the push service endpoint\npushServiceName: [string] - Name of the push service\n\nMethods:\n\nMakePushServiceBase: [func(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase] - Constructor that initializes the PushServiceBase with configuration and creates a custom HTTP client\n\nmulticast: [func(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification)] - Sends push notifications to multiple devices, handles HTTP communication, and processes responses. Takes push service provider, delivery points, result channel, and notification as input, and writes results to the channel\n\nToCMPayload: [func(notif *push.Notification, regIds []string) ([]byte, error)] - Converts notification to payload format (implementation not shown in reference code)\n\nhandleCMMulticastResults: [func(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification, results []CMResult)] - Processes multicast results from push service (implementation not shown in reference code)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/uniqush/uniqush-push/push\"\n\t\"github.com/uniqush/uniqush-push/util\"\n)\n\ntype PushServiceBase struct {\n\tclient             HTTPClient\n\tinitialism         string\n\trawPayloadKey      string\n\trawNotificationKey string\n\tserviceURL         string\n\tpushServiceName    string\n}\n\nfunc MakePushServiceBase(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase {\n\tconf := &tls.Config{InsecureSkipVerify: false}\n\ttr := &http.Transport{\n\t\tTLSClientConfig:     conf,\n\t\tTLSHandshakeTimeout: time.Second * 5,\n\t\tMaxIdleConnsPerHost: 500,\n\t}\n\tclient := &http.Client{\n\t\tTransport: tr,\n\t\tTimeout:   time.Second * 10,\n\t}\n\treturn PushServiceBase{\n\t\tclient:             client,\n\t\tinitialism:         initialism,\n\t\trawPayloadKey:      rawPayloadKey,\n\t\trawNotificationKey: rawNotificationKey,\n\t\tserviceURL:         serviceURL,\n\t\tpushServiceName:    pushServiceName,\n\t}\n}\n\nfunc (psb *PushServiceBase) multicast(psp *push.PushServiceProvider, dpList []*push.DeliveryPoint, resQueue chan<- *push.Result, notif *push.Notification) {\n\tif len(dpList) == 0 {\n\t\treturn\n\t}\n\tregIds := extractRegIds(dpList)\n\n\tjpayload, e0 := psb.ToCMPayload(notif, regIds)\n\n\tif e0 != nil {\n\t\tsendErrToEachDP(psp, dpList, resQueue, notif, e0)\n\t\treturn\n\t}\n\n\treq, e1 := http.NewRequest(\"POST\", psb.serviceURL, bytes.NewReader(jpayload))\n\tif req != nil {\n\t\tdefer req.Body.Close()\n\t}\n\tif e1 != nil {\n\t\thttpErr := push.NewErrorf(\"Error constructing HTTP request: %v\", e1)\n\t\tsendErrToEachDP(psp, dpList, resQueue, notif, httpErr)\n\t\treturn\n\t}\n\n\tapikey := psp.VolatileData[\"apikey\"]\n\n\treq.Header.Set(\"Authorization\", \"key=\"+apikey)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tr, e2 := psb.client.Do(req)\n\tif r != nil {\n\t\tdefer r.Body.Close()\n\t}\n\tif e2 != nil {\n\t\tfor _, dp := range dpList {\n\t\t\tres := new(push.Result)\n\t\t\tres.Provider = psp\n\t\t\tres.Content = notif\n\n\t\t\tres.Destination = dp\n\t\t\tif err, ok := e2.(net.Error); ok {\n\t\t\t\tif err.Temporary() {\n\t\t\t\t\tafter := 3 * time.Second\n\t\t\t\t\tres.Err = push.NewRetryErrorWithReason(psp, dp, notif, after, err)\n\t\t\t\t}\n\t\t\t} else if err, ok := e2.(*net.DNSError); ok {\n\t\t\t\tafter := 3 * time.Second\n\t\t\t\tres.Err = push.NewRetryErrorWithReason(psp, dp, notif, after, err)\n\t\t\t} else {\n\t\t\t\tres.Err = push.NewErrorf(\"Unrecoverable HTTP error sending to %s: %v\", psb.pushServiceName, e2)\n\t\t\t}\n\t\t\tresQueue <- res\n\t\t}\n\t\treturn\n\t}\n\n\tnewAuthToken := r.Header.Get(\"Update-Client-Auth\")\n\tif newAuthToken != \"\" && apikey != newAuthToken {\n\t\tpsp.VolatileData[\"apikey\"] = newAuthToken\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewPushServiceProviderUpdate(psp)\n\t\tresQueue <- res\n\t}\n\n\tswitch r.StatusCode {\n\tcase 500, 503:\n\t\tafter := 0 * time.Second\n\t\tfor _, dp := range dpList {\n\t\t\tres := new(push.Result)\n\t\t\tres.Provider = psp\n\t\t\tres.Content = notif\n\t\t\tres.Destination = dp\n\t\t\terr := push.NewRetryError(psp, dp, notif, after)\n\t\t\tres.Err = err\n\t\t\tresQueue <- res\n\t\t}\n\t\treturn\n\tcase 401:\n\t\terr := push.NewBadPushServiceProviderWithDetails(psp, fmt.Sprintf(\"push service credentials rejected by %s\", psb.initialism))\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = err\n\t\tresQueue <- res\n\t\treturn\n\tcase 400:\n\t\terr := push.NewBadNotificationWithDetails(fmt.Sprintf(\"push notification payload rejected by %s\", psb.initialism))\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = err\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tcontents, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewErrorf(\"Failed to read %s response: %v\", psb.initialism, err)\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tvar result CMResult\n\terr = json.Unmarshal(contents, &result)\n\n\tif err != nil {\n\t\tres := new(push.Result)\n\t\tres.Provider = psp\n\t\tres.Content = notif\n\t\tres.Err = push.NewErrorf(\"Failed to decode %s response: %v\", psb.initialism, err)\n\t\tresQueue <- res\n\t\treturn\n\t}\n\n\tpsb.handleCMMulticastResults(psp, dpList, resQueue, notif, result.Results)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package push\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype PushServiceBase struct {\n\tclient             *http.Client\n\tinitialism         string\n\trawPayloadKey      string\n\trawNotificationKey string\n\tserviceURL         string\n\tpushServiceName    string\n}\n\nfunc MakePushServiceBase(initialism string, rawPayloadKey string, rawNotificationKey string, serviceURL string, pushServiceName string) PushServiceBase {\n\tclient := &http.Client{\n\t\tTimeout: 10 * 60 * time.Second,\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\tInsecureSkipVerify: true,\n\t\t\t},\n\t\t},\n\t}\n\treturn PushServiceBase{\n\t\tclient:             client,\n\t\tinitialism:         initialism,\n\t\trawPayloadKey:      rawPayloadKey,\n\t\trawNotificationKey: rawNotificationKey,\n\t\tserviceURL:         serviceURL,\n\t\tpushServiceName:    pushServiceName,\n\t}\n}\n\nfunc (psb *PushServiceBase) multicast(psp *PushServiceProvider, dpList []*DeliveryPoint, resQueue chan<- *Result, notif *Notification) {\n\tvar wg sync.WaitGroup\n\tfor _, dp := range dpList {\n\t\twg.Add(1)\n\t\tgo func(dp *DeliveryPoint, notif *Notification) {\n\t\t\tdefer wg.Done()\n\t\t\tpayload, err := psb.ToCMPayload(notif, dp.RegIds)\n\t\t\tif err != nil {\n\t\t\t\tresQueue <- &Result{\n\t\t\t\t\tDeliveryPointID: dp.ID,\n\t\t\t\t\tError:           fmt.Sprintf(\"Failed to create payload: %v\", err),\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresp, err := psb.client.Post(psb.serviceURL, \"application/json\", bytes.NewBuffer(payload))\n\t\t\tif err != nil {\n\t\t\t\tresQueue <- &Result{\n\t\t\t\t\tDeliveryPointID: dp.ID,\n\t\t\t\t\tError:           fmt.Sprintf(\"HTTP request failed: %v\", err),\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\t\t\tvar results []CMResult\n\t\t\tif err := json.NewDecoder(resp.Body).Decode(&results); err != nil {\n\t\t\t\tresQueue <- &Result{\n\t\t\t\t\tDeliveryPointID: dp.ID,\n\t\t\t\t\tError:           fmt.Sprintf(\"Failed to decode response: %v\", err),\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpsb.handleCMMulticastResults(psp, dpList, resQueue, notif, results)\n\t\t}(dp, notif)\n\t}\n\twg.Wait()\n}\n\nfunc (psb *PushServiceBase) ToCMPayload(notif *Notification, regIds []string) ([]byte, error) {\n\tpayload := map[string]interface{}{\n\t\tpsb.rawPayloadKey: notif.Payload,\n\t\tpsb.rawNotificationKey: map[string]interface{}{\n\t\t\t\"to\":       regIds,\n\t\t\t\"priority\": \"high\",\n\t\t},\n\t}\n\treturn json.Marshal(payload)\n}\n\nfunc (psb *PushServiceBase) handleCMMulticastResults(psp *PushServiceProvider, dpList []*DeliveryPoint, resQueue chan<- *Result, notif *Notification, results []CMResult) {\n\tfor _, result := range results {\n\t\tfor _, dp := range dpList {\n\t\t\tif dp.ID == result.RegistrationID {\n\t\t\t\tresQueue <- &Result{\n\t\t\t\t\tDeliveryPointID: dp.ID,\n\t\t\t\t\tMessageID:       notif.MessageID,\n\t\t\t\t\tSuccess:         result.Success,\n\t\t\t\t\tError:           result.Error,\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of fetched files to avoid redundant network requests when the same URL is requested multiple times. The function includes error handling for network issues and invalid HTTP responses.\n\nInput: \n- `fileurl` (string): The URL of the file to be fetched.\n\nOutput: \n- `[]byte`: The content of the file as a byte slice if successful.\n- `error`: An error object describing any issues encountered during the fetch operation (network errors, non-200 status codes, etc.). Returns nil if no error occurs.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar verboseReader = false\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n)\n\nconst cacheDir = \"file_cache\"\nconst cacheDuration = 1 * time.Hour\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\t// Ensure cache directory exists\n\tif err := os.MkdirAll(cacheDir, 0755); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create cache directory: %w\", err)\n\t}\n\n\t// Generate cache file path\n\tcacheFilePath := filepath.Join(cacheDir, filepath.Base(fileurl))\n\n\t// Check if cached file exists and is not expired\n\tif _, err := os.Stat(cacheFilePath); err == nil {\n\t\tfileInfo, _ := os.Stat(cacheFilePath)\n\t\tif time.Since(fileInfo.ModTime()) < cacheDuration {\n\t\t\tcontent, err := os.ReadFile(cacheFilePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"failed to read cached file: %w\", err)\n\t\t\t}\n\t\t\treturn content, nil\n\t\t}\n\t}\n\n\t// Fetch from URL\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to fetch file: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"received non-200 status code: %d\", resp.StatusCode)\n\t}\n\n\t// Read response body\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read response body: %w\", err)\n\t}\n\n\t// Write to cache\n\tif err := os.WriteFile(cacheFilePath, content, 0644); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to write to cache: %w\", err)\n\t}\n\n\treturn content, nil\n}"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Implement a function to fetch a long-lived user access token from Facebook's Graph API using HTTP GET request.\n\nFunction Description: The function makes an HTTP GET request to Facebook's OAuth endpoint to exchange a short-lived access token for a long-lived one. It handles the request, response reading, and JSON parsing, returning the long-lived token or an error if any step fails.\n\nInput: \n- The function is a method on a struct (FacebookBee) that contains the following fields:\n  - clientID (string): Facebook app client ID\n  - clientSecret (string): Facebook app client secret\n  - accessToken (string): Short-lived user access token to exchange\n\nOutput:\n- string: The long-lived access token if successful\n- error: Descriptive error if any step fails (request, reading response, or parsing JSON)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc (mod *FacebookBee) fetchLongLivedUserAccessToken() (string, error) {\n\tbaseURL := \"https://graph.facebook.com/oauth/access_token\"\n\tv := url.Values{}\n\tv.Set(\"grant_type\", \"fb_exchange_token\")\n\tv.Set(\"client_id\", mod.clientID)\n\tv.Set(\"client_secret\", mod.clientSecret)\n\tv.Set(\"fb_exchange_token\", mod.accessToken)\n\tgraphUrl := baseURL + \"?\" + v.Encode()\n\n\tres, err := http.Get(graphUrl)\n\n\tif err != nil || res == nil {\n\t\treturn \"\", fmt.Errorf(\"fetching long lived user access token failed: %w\", err)\n\t}\n\n\tdefer res.Body.Close()\n\tbody, err := ioutil.ReadAll(res.Body)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"reading content while fetching long lived user access token failed: %w\", err)\n\t}\n\n\ttype RequestResult struct {\n\t\tAccessToken string `json:\"access_token\"`\n\t}\n\n\tvar tokenRes RequestResult\n\terr = json.Unmarshal(body, &tokenRes)\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"parsing result while fetching long lived user access token failed: %w\", err)\n\t}\n\n\treturn tokenRes.AccessToken, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func (fb *FacebookBee) GetLongLivedToken() (string, error) {\n\turl := \"https://graph.facebook.com/oauth/access_token\"\n\tparams := fmt.Sprintf(\"grant_type=fb_exchange_token&client_id=%s&client_secret=%s&fb_exchange_token=%s\", fb.clientID, fb.clientSecret, fb.accessToken)\n\tresp, err := http.Get(url + \"?\" + params)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\"non-200 status code: %d, body: %s\", resp.StatusCode, body)\n\t}\n\tvar result map[string]string\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\treturn \"\", err\n\t}\n\ttoken, ok := result[\"access_token\"]\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"missing access_token in response: %s\", body)\n\t}\n\treturn token, nil\n}"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Implement a function to retrieve metadata from a metadata server using HTTP GET requests with custom headers.\n\nFunction Description: The function `getMetadata` sends an HTTP GET request to a metadata server with specific headers and retrieves the response. It handles the request creation, response validation, and resource cleanup. The function is designed to work with metadata services like Google Cloud's metadata server.\n\nInput:  \n- `key` (string): The metadata key to retrieve from the metadata server. This is appended to the base metadata path.\n\nOutput:  \n- `[]byte`: The raw response body from the metadata server if the request is successful.  \n- `error`: An error object if the request fails or if the server returns a non-200 status code.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar (\n\tmetadataRequestHeaders = http.Header{\n\t\t\"Metadata-Flavor\": []string{\"Google\"},\n\t}\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\treq := &http.Request{\n\t\tMethod: \"GET\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   metadataHost,\n\t\t\tPath:   metadataPath + key,\n\t\t},\n\t\tHeader: metadataRequestHeaders,\n\t\tHost:   metadataHost,\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"metadata server returned HTTP %d\", resp.StatusCode)\n\t}\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\turl := fmt.Sprintf(\"http://169.254.169.254/computeMetadata/v1/instance/%s\", key)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Metadata-Flavor\", \"Google\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
  },
  {
    "Task_id": 323,
    "Instruction": "Task Description: Implement a function to fetch the contents of a file from a given URL and return it as an io.Reader for further processing.  \n\nFunction Description: The function `fetchFile` takes a URL as input, sends an HTTP GET request to fetch the file, reads the response body, and returns it as an `io.Reader`. It handles errors during the HTTP request and response reading.  \n\nInput:  \n- `URL` (string) - The URL of the file to be fetched.  \n\nOutput:  \n- `io.Reader` - A reader containing the contents of the fetched file.  \n\n(Note: The `checkErr` function is assumed to handle errors by panicking or logging.)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc fetchFile(URL string) io.Reader {\n\tresp, err := http.Get(URL)\n\tcheckErr(err)\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tcheckErr(err)\n\treturn strings.NewReader(string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func fetchFile(url string) io.Reader {\n\tresp, err := http.Get(url)\n\tcheckErr(err)\n\tdefer resp.Body.Close()\n\treturn resp.Body\n}"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a function that fetches properties from a given URL, handles HTTP responses appropriately, and processes the content based on its encoding type.\n\nFunction Description: The function LoadURL makes an HTTP GET request to the specified URL, checks the response status code, reads the response body, and determines the content encoding based on the Content-Type header. It then processes the content and returns the parsed properties or an error if any step fails.\n\nInput: \n- url (string): The URL from which to fetch the properties.\n\nOutput: \n- (*Properties, error): A pointer to a Properties struct containing the parsed data and nil error on success, or nil and an error describing the failure.\n\nNote: The function handles special cases like 404 errors (when IgnoreMissing is true) and validates the Content-Type header before processing. It also ensures proper resource cleanup by deferring the closing of the response body.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc (l *Loader) LoadURL(url string) (*Properties, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"properties: error fetching %q. %s\", url, err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == 404 && l.IgnoreMissing {\n\t\tLogPrintf(\"properties: %s returned %d. skipping\", url, resp.StatusCode)\n\t\treturn NewProperties(), nil\n\t}\n\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"properties: %s returned %d\", url, resp.StatusCode)\n\t}\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"properties: %s error reading response. %s\", url, err)\n\t}\n\n\tct := resp.Header.Get(\"Content-Type\")\n\tct = strings.Join(strings.Fields(ct), \"\")\n\tvar enc Encoding\n\tswitch strings.ToLower(ct) {\n\tcase \"text/plain\", \"text/plain;charset=iso-8859-1\", \"text/plain;charset=latin1\":\n\t\tenc = ISO_8859_1\n\tcase \"\", \"text/plain;charset=utf-8\":\n\t\tenc = UTF8\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"properties: invalid content type %s\", ct)\n\t}\n\n\treturn l.loadBytes(body, enc)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n)\n\ntype Properties struct {\n\tData map[string]string\n}\n\nfunc LoadURL(url string, ignoreMissing bool) (*Properties, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode == http.StatusNotFound && ignoreMissing {\n\t\treturn nil, nil\n\t}\n\n\tif resp.StatusCode >= http.StatusBadRequest {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %s\", resp.Status)\n\t}\n\n\tcontentType := resp.Header.Get(\"Content-Type\")\n\tif !strings.HasPrefix(contentType, \"text/plain\") {\n\t\treturn nil, errors.New(\"unsupported content type\")\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tprops := &Properties{\n\t\tData: make(map[string]string),\n\t}\n\n\tlines := strings.Split(string(body), \"\\n\")\n\tfor _, line := range lines {\n\t\tif idx := strings.Index(line, \"=\"); idx != -1 {\n\t\t\tkey := strings.TrimSpace(line[:idx])\n\t\t\tvalue := strings.TrimSpace(line[idx+1:])\n\t\t\tprops.Data[key] = value\n\t\t}\n\t}\n\n\treturn props, nil\n}\n```"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a function that reads data from a given location, supporting HTTP/HTTPS protocols. The function should handle URL parsing, make HTTP requests, and return the response body or appropriate errors.\n\nFunction Description: The function `ReadLocation` takes a location string (URL) as input, parses it to determine the protocol, and if it's HTTP/HTTPS, makes a GET request to fetch the data. It handles response status checks, reads the response body, and ensures proper resource cleanup.\n\nInput: \n- `loc` (string): A URL string specifying the location to read from (e.g., \"http://example.com/data\")\n\nOutput: \n- `[]byte`: The response body as a byte slice if successful\n- `error`: An error object describing any issues encountered during URL parsing, HTTP request, or response handling",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc ReadLocation(loc string) ([]byte, error) {\n\tu, err := url.Parse(loc)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch u.Scheme {\n\tcase \"http\", \"https\":\n\t\tres, err := http.Get(loc)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer res.Body.Close()\n\t\tif res.StatusCode != http.StatusOK {\n\t\t\treturn nil, fmt.Errorf(\"%s\", res.Status)\n\t\t}\n\t\tb, err := ioutil.ReadAll(res.Body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn b, nil\n\t}\n\treturn nil, fmt.Errorf(\"Unsupported location to load: %s\", loc)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nfunc ReadLocation(loc string) ([]byte, error) {\n\tparsedURL, err := url.Parse(loc)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid URL: %w\", err)\n\t}\n\n\tif parsedURL.Scheme != \"http\" && parsedURL.Scheme != \"https\" {\n\t\treturn nil, fmt.Errorf(\"unsupported protocol: %s\", parsedURL.Scheme)\n\t}\n\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(\"GET\", loc, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create request: %w\", err)\n\t}\n\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"request failed: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 400 {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read response body: %w\", err)\n\t}\n\n\treturn body, nil\n}"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Implement a GIF search functionality using the Giphy API in Go, handling HTTP requests, response parsing, and error management.\n\nStruct Description: The Gifs struct represents a service for searching GIFs using the Giphy API. It maintains configuration and provides methods to interact with the API.\n\nFields:\n- conf: [conf] - Configuration containing the Giphy API key\n\nMethods:\n- New: [func() *Gifs] - Initializes a new Gifs instance by loading configuration\n- Search: [func(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error] - Searches for GIFs using the Giphy API with the provided query and parameters\n\nInput:\n- ctx: [context.Context] - Context for request cancellation and timeouts\n- request: [*gifs.SearchRequest] - Contains search parameters (query, limit, offset, rating, language)\n- response: [*gifs.SearchResponse] - Will be populated with search results\n\nOutput:\n- error: Returns nil on success or an appropriate error on failure",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\n\t\"github.com/micro/micro/v5/service/config\"\n\t\"github.com/micro/micro/v5/service/errors\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tgifs \"github.com/micro/services/gifs/proto\"\n)\n\ntype conf struct {\n\tAPIKey string `json:\"api_key\"`\n}\n\ntype Gifs struct {\n\tconf conf\n}\n\nfunc New() *Gifs {\n\tv, err := config.Get(\"micro.gifs\")\n\tif err != nil {\n\t\tlogger.Fatalf(\"Failed to load config %s\", err)\n\t}\n\tvar c conf\n\tif err := v.Scan(&c); err != nil {\n\t\tlogger.Fatalf(\"Failed to load config %s\", err)\n\t}\n\n\treturn &Gifs{conf: c}\n}\n\nfunc (g *Gifs) Search(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error {\n\tif len(request.Query) == 0 {\n\t\treturn errors.BadRequest(\"gifs.Search\", \"Missing query field\")\n\t}\n\tlimit := defaultLimit\n\tif request.Limit > 0 {\n\t\tlimit = request.Limit\n\t}\n\toffset := defaultOffset\n\tif request.Offset > 0 {\n\t\toffset = request.Offset\n\t}\n\n\trating := defaultRating\n\tif len(request.Rating) > 0 {\n\t\trating = request.Rating\n\t}\n\tlan := defaultLang\n\tif len(request.Lang) > 0 {\n\t\tlan = request.Lang\n\t}\n\trsp, err := http.Get(fmt.Sprintf(giphySearch, g.conf.APIKey, request.Query, limit, offset, rating, lan))\n\tif err != nil {\n\t\tlogger.Errorf(\"Error querying giphy %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tdefer rsp.Body.Close()\n\tb, err := ioutil.ReadAll(rsp.Body)\n\tif err != nil {\n\t\tlogger.Errorf(\"Error marshalling giphy response %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tvar gRsp searchResponse\n\tif err := json.Unmarshal(b, &gRsp); err != nil {\n\t\tlogger.Errorf(\"Error marshalling giphy response %s\", err)\n\t\treturn errors.InternalServerError(\"gifs.Search\", \"Error querying for gifs\")\n\t}\n\tresponse.Data = marshalGifs(gRsp.Data)\n\tresponse.Pagination = &gifs.Pagination{\n\t\tOffset:     gRsp.Pagination.Offset,\n\t\tTotalCount: gRsp.Pagination.TotalCount,\n\t\tCount:      gRsp.Pagination.Count,\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/giphy/giphy-go/v2\"\n)\n\ntype Gifs struct {\n\tconf *conf\n}\n\nfunc New() *Gifs {\n\treturn &Gifs{\n\t\tconf: loadConfig(),\n\t}\n}\n\nfunc (g *Gifs) Search(ctx context.Context, request *gifs.SearchRequest, response *gifs.SearchResponse) error {\n\tclient := giphy.NewClient(g.conf.APIKey)\n\t\n\t// Set timeout for the request\n\ttimeout := 10 * time.Second\n\tclient.HTTPClient = &http.Client{\n\t\tTimeout: timeout,\n\t}\n\n\t// Prepare search parameters\n\tparams := &giphy.SearchParams{\n\t\tQuery:     request.Query,\n\t\tLimit:     request.Limit,\n\t\tOffset:    request.Offset,\n\t\tRating:    request.Rating,\n\t\tLanguage:  request.Language,\n\t}\n\n\t// Perform the search\n\tresult, err := client.Search(ctx, params)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to search GIFs: %w\", err)\n\t}\n\n\t// Convert result to SearchResponse\n\tresponse.Data = make([]map[string]interface{}, len(result.Data))\n\tfor i, item := range result.Data {\n\t\tdata, _ := json.Marshal(item)\n\t\tjson.Unmarshal(data, &response.Data[i])\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Implement a function that sets up a cron job to make periodic HTTP GET requests to a specified callback URL and logs the results.\n\nFunction Description: The function `Setup` initializes a new cron scheduler, adds a job that makes HTTP GET requests to a specified callback URL at a given interval, and logs the success or failure of each request. The function starts the cron scheduler and returns it for further management.\n\nInput: \n- `job` [*pb.Job] - A protobuf message containing the job details, including:\n  - `Id` [string] - Unique identifier for the job\n  - `Interval` [string] - Cron-formatted interval at which the job should run\n  - `Callback` [string] - URL to which the HTTP GET request will be made\n\nOutput: \n- [*cron.Cron] - A pointer to the started cron scheduler instance, which can be used to stop or manage the scheduled job.",
    "Canonical_solution": "import (\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"github.com/micro/micro/v5/service/logger\"\n\tpb \"github.com/micro/services/cron/proto\"\n\t\"github.com/robfig/cron/v3\"\n)\nfunc (c *Cron) Setup(job *pb.Job) *cron.Cron {\n\tlogger.Infof(\"Setting up job id: %s\", job.Id)\n\tcr := cron.New()\n\tcr.AddFunc(job.Interval, func() {\n\t\tlogger.Infof(\"Running job id: %s\", job.Id)\n\t\trsp, err := http.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlogger.Errorf(\"Failed job id: %s error: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer rsp.Body.Close()\n\t\tb, _ := ioutil.ReadAll(rsp.Body)\n\t\tif rsp.StatusCode != 200 {\n\t\t\tlogger.Errorf(\"Non 200 job id: %s error: %s\", job.Id, string(b))\n\t\t\treturn\n\t\t}\n\t\tlogger.Infof(\"Successful job id: %s\", job.Id)\n\t})\n\tcr.Start()\n\treturn cr\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/robfig/cron/v3\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype Job struct {\n\tId       string\n\tInterval string\n\tCallback string\n}\n\nfunc Setup(job *Job) *cron.Cron {\n\tc := cron.New(cron.WithLocation(time.UTC))\n\t\n\tspec, err := cron.ParseStandard(job.Interval)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse cron interval: %v\", err)\n\t}\n\t\n\tjobFunc := func() {\n\t\tclient := &http.Client{}\n\t\tresp, err := client.Get(job.Callback)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Job %s failed: %v\", job.Id, err)\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\t\n\t\tif resp.StatusCode >= 200 && resp.StatusCode < 400 {\n\t\t\tlog.Printf(\"Job %s succeeded: Status code %d\", job.Id, resp.StatusCode)\n\t\t} else {\n\t\t\tlog.Printf(\"Job %s failed with status code %d\", job.Id, resp.StatusCode)\n\t\t}\n\t}\n\t\n\tid := fmt.Sprintf(\"job-%s\", job.Id)\n\tc.AddJob(id, cron.NewChain(\n\t\tcron.SkipIfRunning(true),\n\t\tcron.DelayUntilNext(spec),\n\t\tcron.Timeout(5*time.Second),\n\t).Build())\n\t\n\tc.Start()\n\t\n\treturn c\n}"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified address with JSON payload and room parameters, then processes the response.\n\nFunction Description: The function sends a POST request to a server endpoint with room information and a JSON payload containing a test value. It handles the response by reading the body and printing the result along with a timestamp.\n\nInput:\n- addr (string): The server address to which the POST request will be sent.\n- i (int64): A numeric value that will be included in the JSON payload.\n\nOutput: None (prints response details to stdout, returns nothing)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc post(addr string, i int64) {\n\tresp, err := http.Post(\"http://\"+addr+\"/goim/push/room?operation=1000&type=test&room=\"+os.Args[1], \"application/json\", bytes.NewBufferString(fmt.Sprintf(\"{\\\"test\\\":%d}\", i)))\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: http.post() error(%v)\\n\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"%s postId:%d, response:%s\\n\", time.Now().Format(\"2006-01-02 15:04:05\"), i, string(body))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc sendRequest(addr string, i int64) {\n\tjsonData := []byte(fmt.Sprintf(`{\"test\": %d}`, i))\n\treq, _ := http.NewRequest(\"POST\", addr, bytes.NewBuffer(jsonData))\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error making request: %v\\n\", err)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, _ := io.ReadAll(resp.Body)\n\ttimestamp := time.Now().Format(time.RFC3339)\n\tfmt.Printf(\"[%s] Response: %s\\n\", timestamp, body)\n}"
  },
  {
    "Task_id": 329,
    "Instruction": "Task Description: Implement a function to retrieve metadata from a metadata server using HTTP GET requests with custom headers.\n\nFunction Description: The function `getMetadata` sends an HTTP GET request to a metadata server with specific headers and retrieves the response. It handles the request creation, response processing, and error checking. The function ensures proper resource cleanup by deferring the closing of the response body.\n\nInput:  \n- `key` (string): The metadata key to be appended to the metadata server's base path.  \n\nOutput:  \n- `[]byte`: The raw response body from the metadata server if the request is successful.  \n- `error`: An error object if the request fails or if the server returns a non-200 status code.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n)\n\nvar (\n\tmetadataRequestHeaders = http.Header{\n\t\t\"Metadata-Flavor\": []string{\"Google\"},\n\t}\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\treq := &http.Request{\n\t\tMethod: \"GET\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   metadataHost,\n\t\t\tPath:   metadataPath + key,\n\t\t},\n\t\tHeader: metadataRequestHeaders,\n\t\tHost:   metadataHost,\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"metadata server returned HTTP %d\", resp.StatusCode)\n\t}\n\treturn ioutil.ReadAll(resp.Body)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc getMetadata(key string) ([]byte, error) {\n\turl := fmt.Sprintf(\"http://metadata.server/path/%s\", key)\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Header.Set(\"Custom-Header\", \"Value\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn body, nil\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a Proxy struct that manages different types of servers (UDS, mTLS, admin, and health) for handling proxy connections with various protocols (HTTP and gRPC).\n\nStruct Description: The Proxy struct provides methods to run different server types with configurable options, including Unix Domain Socket (UDS) servers, mTLS-secured servers, admin servers for metrics and profiling, and health servers for liveness/readiness checks.\n\nMethods:\n\nMethod1: runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a master server using Unix Domain Socket (UDS) for communication. Supports both gRPC and HTTP modes based on configuration. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod2: runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) -> (StopFunc, error) - Starts a mTLS-secured master server listening on a TCP port. Supports both gRPC and HTTP modes. Returns a stop function for graceful shutdown and any error encountered.\n\nMethod3: runAdminServer(o *options.ProxyRunOptions) -> void - Starts an admin server for metrics and optional profiling endpoints. Runs on a localhost port specified in options.\n\nMethod4: runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) -> void - Starts a health server providing liveness (/healthz) and readiness (/ready) endpoints. Runs on a port specified in options.\n\nNote: StopFunc is a function type defined as: type StopFunc func()",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\t\"syscall\"\n)\n\ntype Proxy struct {\n}\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tif o.DeleteUDSFile {\n\t\tif err := os.Remove(o.UdsName); err != nil && !os.IsNotExist(err) {\n\t\t\tklog.ErrorS(err, \"failed to delete file\", \"file\", o.UdsName)\n\t\t}\n\t}\n\tvar stop StopFunc\n\tif o.Mode == \"grpc\" {\n\t\tgrpcServer := grpc.NewServer()\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := getUDSListener(ctx, o.UdsName)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to get uds listener: %v\", err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\tserver := &http.Server{\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tklog.ErrorS(err, \"error shutting down server\")\n\t\t}\n\t\tgo func() {\n\t\t\tudsListener, err := getUDSListener(ctx, o.UdsName)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to get uds listener\")\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\terr := udsListener.Close()\n\t\t\t\tklog.ErrorS(err, \"failed to close uds listener\")\n\t\t\t}()\n\t\t\terr = server.Serve(udsListener)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to serve uds requests\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\tvar stop StopFunc\n\n\tvar tlsConfig *tls.Config\n\tvar err error\n\tif tlsConfig, err = p.getTLSConfig(o.ServerCaCert, o.ServerCert, o.ServerKey); err != nil {\n\t\treturn nil, err\n\t}\n\n\taddr := fmt.Sprintf(\":%d\", o.ServerPort)\n\n\tif o.Mode == grpcMode {\n\t\tserverOption := grpc.Creds(credentials.NewTLS(tlsConfig))\n\t\tgrpcServer := grpc.NewServer(serverOption)\n\t\tclient.RegisterProxyServiceServer(grpcServer, s)\n\t\tlis, err := net.Listen(\"tcp\", addr)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to listen on %s: %v\", addr, err)\n\t\t}\n\t\tgo grpcServer.Serve(lis)\n\t\tstop = grpcServer.GracefulStop\n\t} else {\n\t\thttpServer := &http.Server{\n\t\t\tAddr: \":8088\",\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t}\n\t\tserver := &http.Server{\n\t\t\tAddr:      addr,\n\t\t\tTLSConfig: tlsConfig,\n\t\t\tHandler: &server.Tunnel{\n\t\t\t\tServer: s,\n\t\t\t},\n\t\t\tTLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler)),\n\t\t}\n\n\t\tstop = func() {\n\t\t\terr := server.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown server\")\n\t\t\t}\n\t\t\terr = httpServer.Shutdown(ctx)\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to shutdown httpServer\")\n\t\t\t}\n\t\t}\n\t\tgo func() {\n\t\t\terr := server.ListenAndServeTLS(\"\", \"\")\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on master port\")\n\t\t\t}\n\t\t}()\n\t\tgo func() {\n\t\t\terr := httpServer.ListenAndServe()\n\t\t\tif err != nil {\n\t\t\t\tklog.ErrorS(err, \"failed to listen on http master port\")\n\t\t\t}\n\t\t}()\n\t}\n\n\treturn stop, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.Handle(\"/metrics\", promhttp.Handler())\n\tif o.EnableProfiling {\n\t\tmuxHandler.HandleFunc(\"/debug/pprof\", util.RedirectTo(\"/debug/pprof/\"))\n\t\tmuxHandler.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\tif o.EnableContentionProfiling {\n\t\t\truntime.SetBlockProfileRate(1)\n\t\t}\n\t}\n\tadminServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\"127.0.0.1:%d\", o.AdminPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := adminServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"admin server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Admin server stopped listening\")\n\t}()\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\tlivenessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"ok\")\n\t})\n\treadinessHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tready, msg := server.Readiness.Ready()\n\t\tif ready {\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\tfmt.Fprintf(w, \"ok\")\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, msg)\n\t})\n\n\tmuxHandler := http.NewServeMux()\n\tmuxHandler.HandleFunc(\"/healthz\", livenessHandler)\n\tmuxHandler.HandleFunc(\"/ready\", readinessHandler)\n\thealthServer := &http.Server{\n\t\tAddr:           fmt.Sprintf(\":%d\", o.HealthPort),\n\t\tHandler:        muxHandler,\n\t\tMaxHeaderBytes: 1 << 20,\n\t}\n\n\tgo func() {\n\t\terr := healthServer.ListenAndServe()\n\t\tif err != nil {\n\t\t\tklog.ErrorS(err, \"health server could not listen\")\n\t\t}\n\t\tklog.V(1).Infoln(\"Health server stopped listening\")\n\t}()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "wrong_result": "type Proxy struct{}\n\ntype StopFunc func()\n\nfunc (p *Proxy) runUDSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\taddr := o.UDSAddress\n\tif addr == \"\" {\n\t\taddr = \"unix://\"+o.UDSPath\n\t}\n\tvar ln net.Listener\n\tvar err error\n\tif o.UDSPath != \"\" {\n\t\tln, err = net.Listen(\"unix\", o.UDSPath)\n\t} else {\n\t\tln, err = net.Listen(\"tcp\", addr)\n\t}\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer ln.Close()\n\tif o.UDSPath != \"\" {\n\t\tos.Remove(o.UDSPath)\n\t}\n\tif err := os.MkdirAll(filepath.Dir(o.UDSPath), 0755); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := os.Chmod(o.UDSPath, 0666); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := syscall.Unlink(o.UDSPath); err != nil && !os.IsNotExist(err) {\n\t\treturn nil, err\n\t}\n\tif err := syscall.Unlinkat(syscall.AT_FDCWD, o.UDSPath, syscall.AT_REMOVEDIR); err != nil && !os.IsNotExist(err) {\n\t\treturn nil, err\n\t}\n\tif err := syscall.Mkfifo(o.UDSPath, 0666); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := syscall.Chmod(o.UDSPath, 0666); err != nil {\n\t\treturn nil, err\n\t}\n\tif o.HTTPMode {\n\t\tgo http.Serve(ln, s.HTTPHandler())\n\t} else {\n\t\tgo grpcServer.Serve(ln, s.GRPCServer())\n\t}\n\treturn func() {\n\t\tgrpcServer.Stop()\n\t}, nil\n}\n\nfunc (p *Proxy) runMTLSMasterServer(ctx context.Context, o *options.ProxyRunOptions, s *server.ProxyServer) (StopFunc, error) {\n\taddr := o.TCPAddress\n\tif addr == \"\" {\n\t\taddr = \"localhost:\" + o.TCPPort\n\t}\n\tln, err := net.Listen(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer ln.Close()\n\ttlsConfig := &tls.Config{\n\t\tMinVersion:   tls.VersionTLS12,\n\t\tCurvePreferences: []tls.CurveID{tls.CurveP256, tls.CurveP384, tls.CurveP521},\n\t}\n\tif o.TLSCertFile != \"\" && o.TLSKeyFile != \"\" {\n\t\tcert, err := tls.LoadX509KeyPair(o.TLSCertFile, o.TLSKeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttlsConfig.Certificates = append(tlsConfig.Certificates, cert)\n\t}\n\tif o.ClientAuth == \"require\" {\n\t\ttlsConfig.ClientAuth = tls.RequireAndVerifyClientCert\n\t}\n\tif o.ClientCertFile != \"\" && o.ClientKeyFile != \"\" {\n\t\tclientCert, err := tls.LoadX509KeyPair(o.ClientCertFile, o.ClientKeyFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttlsConfig.ClientCAs = x509.NewCertPool()\n\t\tif cert, err := os.ReadFile(o.ClientCertFile); err == nil {\n\t\t\ttlsConfig.ClientCAs.AppendCertsFromPEM(cert)\n\t\t}\n\t}\n\tln = tls.NewListener(ln, tlsConfig)\n\tif o.HTTPMode {\n\t\tgo http.Serve(ln, s.HTTPHandler())\n\t} else {\n\t\tgo grpcServer.Serve(ln, s.GRPCServer())\n\t}\n\treturn func() {\n\t\tgrpcServer.Stop()\n\t}, nil\n}\n\nfunc (p *Proxy) runAdminServer(o *options.ProxyRunOptions) {\n\taddr := o.AdminAddress\n\tif addr == \"\" {\n\t\taddr = \"localhost:\" + o.AdminPort\n\t}\n\thttp.HandleFunc(\"/metrics\", prometheus.Handler)\n\tif o.Profile {\n\t\thttp.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t\thttp.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n\t\thttp.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\t\thttp.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\t\thttp.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\t}\n\tgo http.ListenAndServe(addr, nil)\n}\n\nfunc (p *Proxy) runHealthServer(o *options.ProxyRunOptions, server *server.ProxyServer) {\n\taddr := o.HealthAddress\n\tif addr == \"\" {\n\t\taddr = \"localhost:\" + o.HealthPort\n\t}\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\thttp.HandleFunc(\"/ready\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\tgo http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 330,
    "Instruction": "Task Description: Implement a function to fetch and update search configuration from a remote URL, comparing it with the current configuration and updating if different.\n\nFunction Description: The function fetchSearchConfig retrieves search configuration from a predefined URL, normalizes it, compares it with the current configuration, and updates the system state if the new configuration is different. It handles HTTP requests, response reading, and configuration normalization.\n\nInput: None (uses predefined searchConfigURL and relies on the Server's state)\n\nOutput: error - Returns an error if any step fails (HTTP request, reading response, normalization, or configuration loading), or nil if successful (whether updated or no change needed)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nvar currentConfig, _ = normalize(defaultSearchConfig)\n\nfunc (s *Server) fetchSearchConfig() error {\n\tresp, err := http.Get(searchConfigURL)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tnewConfig, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tnewConfig, err = normalize(newConfig)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif bytes.Equal(currentConfig, newConfig) {\n\t\treturn nil\n\t}\n\tif err := s.scraper.LoadConfig(newConfig); err != nil {\n\t\treturn err\n\t}\n\ts.state.SearchProviders = s.scraper.Config\n\ts.state.Push()\n\tcurrentConfig = newConfig\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "func fetchSearchConfig() error {\n    client := &http.Client{}\n    req, err := http.NewRequest(\"GET\", searchConfigURL, nil)\n    if err != nil {\n        return err\n    }\n    resp, err := client.Do(req)\n    if err != nil {\n        return err\n    }\n    defer resp.Body.Close()\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return err\n    }\n    var newConfig map[string]interface{}\n    if err := json.Unmarshal(body, &newConfig); err != nil {\n        return err\n    }\n    normalizedNewConfig, err := normalizeConfig(newConfig)\n    if err != nil {\n        return err\n    }\n    currentConfig := getCurrentConfig()\n    if reflect.DeepEqual(normalizedNewConfig, currentConfig) {\n        return nil\n    }\n    if err := updateSystemState(normalizedNewConfig); err != nil {\n        return err\n    }\n    return nil\n}"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a function to fetch file content from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The function `FetchFile` retrieves the content of a file from a specified URL using HTTP GET request. It supports caching of downloaded files to avoid redundant network requests. The cache can be enabled/disabled globally, and cache hits/misses are logged when verbose mode is active. The function handles HTTP errors and returns the file content as a byte array.\n\nInput: \n- `fileurl` [string] - The URL of the file to be fetched\n\nOutput: \n- `[]byte` - The content of the file as a byte array\n- `error` - Any error encountered during the fetch operation (network error, HTTP status error, etc.)",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheEnable = true\n\nfunc initializeFileCache() {\n\tif fileCache == nil {\n\t\tfileCache = make(map[string][]byte, 0)\n\t}\n}\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, errors.New(fmt.Sprintf(\"Error downloading %s: %s\", fileurl, response.Status))\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n)\n\nvar cacheEnabled = true\nvar verbose = false\n\nfunc FetchFile(fileurl string) ([]byte, error) {\n\tif verbose {\n\t\tfmt.Printf(\"Fetching file from URL: %s\\n\", fileurl)\n\t}\n\n\t// Check cache\n\tif cacheEnabled {\n\t\tcachePath := getCacheFilePath(fileurl)\n\t\tif _, err := os.Stat(cachePath); err == nil {\n\t\t\tif verbose {\n\t\t\t\tfmt.Println(\"Cache hit\")\n\t\t\t}\n\t\t\tcontent, err := os.ReadFile(cachePath)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn content, nil\n\t\t}\n\t}\n\n\t// Fetch from URL\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to fetch file: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode < 200 || resp.StatusCode >= 400 {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %d %s\", resp.StatusCode, resp.Status)\n\t}\n\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read response body: %v\", err)\n\t}\n\n\t// Cache the content\n\tif cacheEnabled {\n\t\tcachePath := getCacheFilePath(fileurl)\n\t\tif err := os.WriteFile(cachePath, content, 0644); err != nil {\n\t\t\tfmt.Printf(\"Failed to cache file: %v\\n\", err)\n\t\t} else {\n\t\t\tif verbose {\n\t\t\t\tfmt.Println(\"Cached file\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn content, nil\n}\n\nfunc getCacheFilePath(url string) string {\n\t// Normalize URL and replace invalid characters\n\tnormalizedURL := filepath.Clean(url)\n\tnormalizedURL = filepath.ToSlash(normalizedURL)\n\tnormalizedURL = filepath.Base(normalizedURL)\n\n\t// Replace slashes and colons with underscores\n\tcacheDir := \"cache\"\n\tif _, err := os.Stat(cacheDir); os.IsNotExist(err) {\n\t\tos.Mkdir(cacheDir, 0755)\n\t}\n\n\ttimestamp := time.Now().Format(\"20060102150405\")\n\tcacheFileName := fmt.Sprintf(\"%s_%s.txt\", normalizedURL, timestamp)\n\treturn filepath.Join(cacheDir, cacheFileName)\n}"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Implement a function to fetch file contents from a given URL with optional caching capabilities to improve performance on repeated requests.\n\nFunction Description: The `fetchFile` function retrieves the contents of a file from a specified URL using HTTP GET. It supports optional caching of file contents to avoid redundant network requests for the same URL. The function handles HTTP errors and returns the file contents as a byte array if successful.\n\nInput: \n- `fileurl` [string] - The URL of the file to fetch\n\nOutput: \n- `[]byte` - The contents of the file as a byte array\n- `error` - An error object if the fetch operation fails (either network error or non-200 HTTP status)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar fileCache map[string][]byte\nvar fileCacheMutex sync.Mutex\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tvar bytes []byte\n\tinitializeFileCache()\n\tif fileCacheEnable {\n\t\tbytes, ok := fileCache[fileurl]\n\t\tif ok {\n\t\t\tif verboseReader {\n\t\t\t\tlog.Printf(\"Cache hit %s\", fileurl)\n\t\t\t}\n\t\t\treturn bytes, nil\n\t\t}\n\t\tif verboseReader {\n\t\t\tlog.Printf(\"Fetching %s\", fileurl)\n\t\t}\n\t}\n\tresponse, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != 200 {\n\t\treturn nil, fmt.Errorf(\"Error downloading %s: %s\", fileurl, response.Status)\n\t}\n\tbytes, err = ioutil.ReadAll(response.Body)\n\tif fileCacheEnable && err == nil {\n\t\tfileCache[fileurl] = bytes\n\t}\n\treturn bytes, err\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 101,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"net/http\"\n\t\"sync\"\n)\n\nvar cache map[string][]byte\nvar mu sync.Mutex\n\nfunc init() {\n\tcache = make(map[string][]byte)\n}\n\nfunc fetchFile(fileurl string) ([]byte, error) {\n\tmu.Lock()\n\tif cached, exists := cache[fileurl]; exists {\n\t\tmu.Unlock()\n\t\treturn cached, nil\n\t}\n\tmu.Unlock()\n\n\tresp, err := http.Get(fileurl)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn nil, &httpError{resp.StatusCode, \"HTTP request failed\"}\n\t}\n\n\tcontent, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmu.Lock()\n\tcache[fileurl] = content\n\tmu.Unlock()\n\n\treturn content, nil\n}\n\ntype httpError struct {\n\tcode   int\n\tmsg    string\n}\n\nfunc (e *httpError) Error() string {\n\treturn e.msg\n}"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Implement a thread-safe RabbitMQ producer in Go that handles connection management, queue/exchange declaration, and message publishing.\n\nStruct Description: AMQPConn represents a RabbitMQ connection with built-in connection pooling and thread safety. It manages the AMQP connection, channel, and provides message sending capability.\n\nFields:\n\nmu: [sync.Mutex] - Mutex for thread-safe operations\nep: [Endpoint] - Configuration endpoint containing AMQP settings\nconn: [*amqp.Connection] - Underlying AMQP connection\nchannel: [*amqp.Channel] - AMQP channel for message operations\nex: [bool] - Flag indicating if connection is expired\nt: [time.Time] - Timestamp of last operation\n\nMethods:\n\nSend: [Name](msg string) -> [error] - Publishes a message to RabbitMQ. Handles connection establishment, channel creation, and queue/exchange declaration if not already done. Returns error if operation fails.\n[Input Parameters]:\n- msg: string - The message to be published\n[Return Type]:\n- error - Returns nil on success, error on failure",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype AMQPConn struct {\n\tmu      sync.Mutex\n\tep      Endpoint\n\tconn    *amqp.Connection\n\tchannel *amqp.Channel\n\tex      bool\n\tt       time.Time\n}\n\nfunc (conn *AMQPConn) Send(msg string) error {\n\tconn.mu.Lock()\n\tdefer conn.mu.Unlock()\n\n\tif conn.ex {\n\t\treturn errExpired\n\t}\n\tconn.t = time.Now()\n\n\tif conn.conn == nil {\n\t\tprefix := \"amqp://\"\n\t\tif conn.ep.AMQP.SSL {\n\t\t\tprefix = \"amqps://\"\n\t\t}\n\n\t\tvar cfg amqp.Config\n\t\tcfg.Dial = func(network, addr string) (net.Conn, error) {\n\t\t\treturn net.DialTimeout(network, addr, time.Second)\n\t\t}\n\t\tc, err := amqp.DialConfig(fmt.Sprintf(\"%s%s\", prefix, conn.ep.AMQP.URI), cfg)\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tchannel, err := c.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err := channel.ExchangeDeclare(\n\t\t\tconn.ep.AMQP.QueueName,\n\t\t\tconn.ep.AMQP.Type,\n\t\t\tconn.ep.AMQP.Durable,\n\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\tconn.ep.AMQP.Internal,\n\t\t\tconn.ep.AMQP.NoWait,\n\t\t\tnil,\n\t\t); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif conn.ep.AMQP.Type != \"topic\" {\n\t\t\tif _, err := channel.QueueDeclare(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.Durable,\n\t\t\t\tconn.ep.AMQP.AutoDelete,\n\t\t\t\tfalse,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err := channel.QueueBind(\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.RouteKey,\n\t\t\t\tconn.ep.AMQP.QueueName,\n\t\t\t\tconn.ep.AMQP.NoWait,\n\t\t\t\tnil,\n\t\t\t); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tconn.conn = c\n\t\tconn.channel = channel\n\t}\n\n\treturn conn.channel.Publish(\n\t\tconn.ep.AMQP.QueueName,\n\t\tconn.ep.AMQP.RouteKey,\n\t\tconn.ep.AMQP.Mandatory,\n\t\tconn.ep.AMQP.Immediate,\n\t\tamqp.Publishing{\n\t\t\tHeaders:         amqp.Table{},\n\t\t\tContentType:     \"application/json\",\n\t\t\tContentEncoding: \"\",\n\t\t\tBody:            []byte(msg),\n\t\t\tDeliveryMode:    conn.ep.AMQP.DeliveryMode,\n\t\t\tPriority:        conn.ep.AMQP.Priority,\n\t\t},\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 121,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/streadway/amqp\"\n)\n\ntype Endpoint struct {\n\tHost string\n\tPort int\n\tUser string\n\tPassword string\n\tVhost string\n}\n\ntype AMQPConn struct {\n\tmu    sync.Mutex\n\tep    Endpoint\n\tconn  *amqp.Connection\n\tch    *amqp.Channel\n\tex    bool\n\tt     time.Time\n}\n\nfunc (a *AMQPConn) Send(msg string) error {\n\ta.mu.Lock()\n\tdefer a.mu.Unlock()\n\n\tif a.ex {\n\t\treturn fmt.Errorf(\"connection expired\")\n\t}\n\n\tif a.conn == nil || a.ch == nil {\n\t\tvar err error\n\t\ta.conn, err = amqp.Dial(fmt.Sprintf(\"amqp://%s:%s@%s:%d/%s\", a.ep.User, a.ep.Password, a.ep.Host, a.ep.Port, a.ep.Vhost))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ta.ch, err = a.conn.Channel()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\terr := a.ch.Publish(\n\t\t\"\",\n\t\t\"task_queue\",\n\t\tfalse,\n\t\tfalse,\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        []byte(msg),\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ta.t = time.Now()\n\treturn nil\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a PKCE (Proof Key for Code Exchange) authorization flow in Go that handles OAuth2 token retrieval through a temporary HTTP server.\n\nStruct Description: PKCEAuthorizationFlow represents an OAuth2 authorization flow using PKCE (Proof Key for Code Exchange) mechanism. It manages the state, code verifier, and OAuth configuration needed for the flow, and provides methods to wait for and handle tokens.\n\nFields:\nproviderConfig: [internal.PKCEAuthProviderConfig] - Configuration for the PKCE auth provider\nstate: [string] - CSRF protection state value\ncodeVerifier: [string] - PKCE code verifier string\noAuthConfig: [*oauth2.Config] - OAuth2 configuration including client ID, secret, and endpoints\n\nMethods:\nWaitToken: [Name](ctx context.Context, _ AuthFlowInfo) -> (TokenInfo, error) - Main method that waits for token retrieval by starting a temporary HTTP server and handling the OAuth callback\nstartServer: [Name](server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) - Starts an HTTP server to handle OAuth callback and sends results through channels\nhandleRequest: [Name](req *http.Request) -> (*oauth2.Token, error) - Handles incoming OAuth callback request, validates state, and exchanges code for token",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/subtle\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"golang.org/x/oauth2\"\n)\n\ntype PKCEAuthorizationFlow struct {\n\tproviderConfig internal.PKCEAuthProviderConfig\n\tstate          string\n\tcodeVerifier   string\n\toAuthConfig    *oauth2.Config\n}\n\nfunc (p *PKCEAuthorizationFlow) WaitToken(ctx context.Context, _ AuthFlowInfo) (TokenInfo, error) {\n\ttokenChan := make(chan *oauth2.Token, 1)\n\terrChan := make(chan error, 1)\n\n\tparsedURL, err := url.Parse(p.oAuthConfig.RedirectURL)\n\tif err != nil {\n\t\treturn TokenInfo{}, fmt.Errorf(\"failed to parse redirect URL: %v\", err)\n\t}\n\n\tserver := &http.Server{Addr: fmt.Sprintf(\":%s\", parsedURL.Port())}\n\tdefer func() {\n\t\tshutdownCtx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\t\tdefer cancel()\n\n\t\tif err := server.Shutdown(shutdownCtx); err != nil {\n\t\t\tlog.Errorf(\"failed to close the server: %v\", err)\n\t\t}\n\t}()\n\n\tgo p.startServer(server, tokenChan, errChan)\n\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn TokenInfo{}, ctx.Err()\n\tcase token := <-tokenChan:\n\t\treturn p.parseOAuthToken(token)\n\tcase err := <-errChan:\n\t\treturn TokenInfo{}, err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) startServer(server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tcert := p.providerConfig.ClientCertPair\n\t\tif cert != nil {\n\t\t\ttr := &http.Transport{\n\t\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\t\tCertificates: []tls.Certificate{*cert},\n\t\t\t\t},\n\t\t\t}\n\t\t\tsslClient := &http.Client{Transport: tr}\n\t\t\tctx := context.WithValue(req.Context(), oauth2.HTTPClient, sslClient)\n\t\t\treq = req.WithContext(ctx)\n\t\t}\n\n\t\ttoken, err := p.handleRequest(req)\n\t\tif err != nil {\n\t\t\trenderPKCEFlowTmpl(w, err)\n\t\t\terrChan <- fmt.Errorf(\"PKCE authorization flow failed: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\trenderPKCEFlowTmpl(w, nil)\n\t\ttokenChan <- token\n\t})\n\n\tserver.Handler = mux\n\tif err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {\n\t\terrChan <- err\n\t}\n}\n\nfunc (p *PKCEAuthorizationFlow) handleRequest(req *http.Request) (*oauth2.Token, error) {\n\tquery := req.URL.Query()\n\n\tif authError := query.Get(queryError); authError != \"\" {\n\t\tauthErrorDesc := query.Get(queryErrorDesc)\n\t\treturn nil, fmt.Errorf(\"%s.%s\", authError, authErrorDesc)\n\t}\n\n\tif state := query.Get(queryState); subtle.ConstantTimeCompare([]byte(p.state), []byte(state)) == 0 {\n\t\treturn nil, fmt.Errorf(\"invalid state\")\n\t}\n\n\tcode := query.Get(queryCode)\n\tif code == \"\" {\n\t\treturn nil, fmt.Errorf(\"missing code\")\n\t}\n\n\treturn p.oAuthConfig.Exchange(\n\t\treq.Context(),\n\t\tcode,\n\t\toauth2.SetAuthURLParam(\"code_verifier\", p.codeVerifier),\n\t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 104,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"golang.org/x/oauth2\"\n)\n\ntype PKCEAuthorizationFlow struct {\n\tproviderConfig *PKCEAuthProviderConfig\n\tstate          string\n\tcodeVerifier   string\n\toAuthConfig    *oauth2.Config\n}\n\ntype PKCEAuthProviderConfig struct {\n\tAuthURL     string\n\tTokenURL    string\n\tClientID    string\n\tClientSecret string\n\tRedirectURI string\n}\n\nfunc (f *PKCEAuthorizationFlow) WaitToken(ctx context.Context, _ AuthFlowInfo) (TokenInfo, error) {\n\tcodeChallenge := generateCodeChallenge(f.codeVerifier)\n\tauthURL := f.providerConfig.AuthURL + \"?client_id=\" + f.providerConfig.ClientID +\n\t\t\"&redirect_uri=\" + url.QueryEscape(f.providerConfig.RedirectURI) +\n\t\t\"&response_type=code\" +\n\t\t\"&scope=openid\" +\n\t\t\"&state=\" + f.state +\n\t\t\"&code_challenge=\" + codeChallenge +\n\t\t\"&code_challenge_method=S256\"\n\n\tif err := openBrowser(authURL); err != nil {\n\t\treturn TokenInfo{}, err\n\t}\n\n\tserver := &http.Server{\n\t\tAddr: \":0\",\n\t}\n\ttokenChan := make(chan *oauth2.Token)\n\terrChan := make(chan error)\n\n\tgo f.startServer(server, tokenChan, errChan)\n\n\tselect {\n\tcase token := <-tokenChan:\n\t\treturn TokenInfo{AccessToken: token.AccessToken}, nil\n\tcase err := <-errChan:\n\t\treturn TokenInfo{}, err\n\tcase <-ctx.Done():\n\t\tserver.Close()\n\t\treturn TokenInfo{}, ctx.Err()\n\t}\n}\n\nfunc (f *PKCEAuthorizationFlow) startServer(server *http.Server, tokenChan chan<- *oauth2.Token, errChan chan<- error) {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.URL.Path != \"/\" || r.Method != \"GET\" {\n\t\t\thttp.Error(w, \"Invalid request\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\n\t\tif r.FormValue(\"state\") != f.state {\n\t\t\terrChan <- fmt.Errorf(\"invalid state parameter\")\n\t\t\treturn\n\t\t}\n\n\t\tcode := r.FormValue(\"code\")\n\t\tif code == \"\" {\n\t\t\terrChan <- fmt.Errorf(\"missing authorization code\")\n\t\t\treturn\n\t\t}\n\n\t\ttoken, err := f.oAuthConfig.Exchange(context.Background(), code)\n\t\tif err != nil {\n\t\t\terrChan <- err\n\t\t\treturn\n\t\t}\n\n\t\ttokenChan <- token\n\t\tserver.Close()\n\t})\n\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\terrChan <- err\n\t\t}\n\t}()\n}\n\nfunc (f *PKCEAuthorizationFlow) handleRequest(req *http.Request) (*oauth2.Token, error) {\n\tif req.URL.Path != \"/\" || req.Method != \"GET\" {\n\t\treturn nil, fmt.Errorf(\"invalid request\")\n\t}\n\n\tif req.FormValue(\"state\") != f.state {\n\t\treturn nil, fmt.Errorf(\"invalid state parameter\")\n\t}\n\n\tcode := req.FormValue(\"code\")\n\tif code == \"\" {\n\t\treturn nil, fmt.Errorf(\"missing authorization code\")\n\t}\n\n\treturn f.oAuthConfig.Exchange(context.Background(), code)\n}\n\nfunc generateCodeChallenge(verifier string) string {\n\thasher := sha256.New()\n\thasher.Write([]byte(verifier))\n\tchallenge := base64.RawURLEncoding.EncodeToString(hasher.Sum(nil))\n\treturn challenge\n}\n\nfunc openBrowser(url string) error {\n\tvar err error\n\tswitch runtime.GOOS {\n\tcase \"linux\":\n\t\terr = exec.Command(\"xdg-open\", url).Start()\n\tcase \"windows\":\n\t\terr = exec.Command(\"rundll32\", \"url.dll,FileProtocolHandler\", url).Start()\n\tcase \"darwin\":\n\t\terr = exec.Command(\"open\", url).Start()\n\tdefault:\n\t\terr = fmt.Errorf(\"unsupported platform\")\n\t}\n\treturn err\n}"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a WebSocket client in Go that can establish a connection to a server, handle bidirectional communication (sending and receiving messages), and properly manage connection lifecycle.\n\nStruct Description: The Listener struct represents a WebSocket client that connects to a specified URL, handles message processing with optional schema transformation, and manages concurrent read/write operations.\n\nFields:\n- URL: *url.URL - The WebSocket server URL to connect to\n- Token: string - Authentication token to be included in the connection URL\n- SchemaFunc: func([]byte) (io.Reader, error) - Optional function to transform incoming messages\n- Out: io.Writer - Output writer for received messages\n- InCh: <-chan []byte - Input channel for sending messages to the server\n\nMethods:\n- NewListener: (url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) -> *Listener - Creates a new Listener instance with the specified configuration\n- Listen: (ctx context.Context) -> error - Establishes WebSocket connection, handles concurrent message reading/writing, and manages connection lifecycle until context cancellation or normal closure",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/url\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\ntype Listener struct {\n\tURL        *url.URL\n\tToken      string\n\tSchemaFunc func([]byte) (io.Reader, error)\n\tOut        io.Writer\n\tInCh       <-chan []byte\n}\n\nfunc NewListener(url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) *Listener {\n\treturn &Listener{\n\t\tURL:        url,\n\t\tToken:      token,\n\t\tSchemaFunc: schemaFunc,\n\t\tOut:        out,\n\t\tInCh:       inCh,\n\t}\n}\n\nfunc (l *Listener) Listen(ctx context.Context) error {\n\tif l.Token != \"\" {\n\t\tparams := l.URL.Query()\n\t\tparams.Set(\"token\", l.Token)\n\t\tl.URL.RawQuery = params.Encode()\n\t}\n\n\tc, _, err := websocket.DefaultDialer.Dial(l.URL.String(), nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating websocket connection: %w\", err)\n\t}\n\tdefer c.Close()\n\n\tdone := make(chan struct{})\n\tgrp, ctx := errgroup.WithContext(ctx)\n\tgrp.Go(func() error {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tif websocket.IsCloseError(err, websocket.CloseNormalClosure) {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t\treturn fmt.Errorf(\"error reading from websocket: %w\", err)\n\t\t\t}\n\n\t\t\tvar r io.Reader\n\t\t\tif l.SchemaFunc != nil {\n\t\t\t\tr, err = l.SchemaFunc(message)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr = bytes.NewReader(message)\n\t\t\t}\n\n\t\t\tio.Copy(l.Out, r)\n\t\t}\n\t})\n\n\tgrp.Go(func() error {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase data := <-l.InCh:\n\t\t\t\tif err := c.WriteMessage(websocket.TextMessage, data); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"error writing to websocket: %w\", err)\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t\tif err := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\")); err != nil {\n\t\t\t\t\treturn fmt.Errorf(\"error writing close message: %w\", err)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\tcase <-done:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t})\n\tif err := grp.Wait(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/url\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Listener struct {\n\tURL        *url.URL\n\tToken      string\n\tSchemaFunc func([]byte) (io.Reader, error)\n\tOut        io.Writer\n\tInCh       <-chan []byte\n\tconn       *websocket.Conn\n\tmu         sync.Mutex\n}\n\nfunc NewListener(url *url.URL, token string, schemaFunc func([]byte) (io.Reader, error), out io.Writer, inCh <-chan []byte) *Listener {\n\tu := *url\n\tif token != \"\" {\n\t\tu.RawQuery = fmt.Sprintf(\"token=%s\", token)\n\t}\n\treturn &Listener{\n\t\tURL:        &u,\n\t\tToken:      token,\n\t\tSchemaFunc: schemaFunc,\n\t\tOut:        out,\n\t\tInCh:       inCh,\n\t}\n}\n\nfunc (l *Listener) Listen(ctx context.Context) error {\n\tdialer := websocket.Dialer{}\n\tconn, _, err := dialer.Dial(l.URL.String(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tl.conn = conn\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t_, message, err := l.conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read error:\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif l.SchemaFunc != nil {\n\t\t\t\treader, err := l.SchemaFunc(message)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"schema transformation error:\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\t_, err = io.Copy(l.Out, reader)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"write error:\", err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_, err = l.Out.Write(message)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"write error:\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor msg := range l.InCh {\n\t\t\terr := l.conn.WriteMessage(websocket.TextMessage, msg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write error:\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\n\t<-ctx.Done()\n\tl.mu.Lock()\n\tdefer l.mu.Unlock()\n\tif l.conn != nil {\n\t\tl.conn.Close()\n\t}\n\twg.Wait()\n\treturn nil\n}"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Implement a WebSocket client in Go that connects to a server, handles incoming messages, and manages connection lifecycle including reconnection logic and graceful shutdown.\n\nFunction Description: The function establishes a WebSocket connection to a specified server endpoint, listens for incoming messages, and prints them to stdout/stderr based on message content. It handles connection errors by implementing automatic reconnection logic and supports graceful shutdown upon receiving an interrupt signal.\n\nInput: None (uses package-level configuration variables for connection details)\n\nOutput: None (writes directly to stdout/stderr, logs to console)\n\nNote: The function relies on several external configuration variables:\n- config.Config.Tap.Proxy.Host (string) - Server hostname\n- config.Config.Tap.Proxy.Front.Port (int) - Server port\n- config.Config.License (string) - License key for authentication\n- kubernetes.GetHubUrl() (string) - Function to get hub URL for health checks",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/kubeshark/kubeshark/config\"\n\t\"github.com/kubeshark/kubeshark/utils\"\n\t\"github.com/rs/zerolog/log\"\n)\n\nfunc runConsoleWithoutProxy() {\n\tlog.Info().Msg(\"Starting scripting console ...\")\n\ttime.Sleep(5 * time.Second)\n\thubUrl := kubernetes.GetHubUrl()\n\tfor {\n\t\tresponse, err := http.Get(fmt.Sprintf(\"%s/echo\", hubUrl))\n\t\tif err != nil || response.StatusCode != 200 {\n\t\t\tlog.Info().Msg(fmt.Sprintf(utils.Yellow, \"Couldn't connect to Hub.\"))\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\n\t\tinterrupt := make(chan os.Signal, 1)\n\t\tsignal.Notify(interrupt, os.Interrupt)\n\n\t\tlog.Info().Str(\"host\", config.Config.Tap.Proxy.Host).Str(\"url\", hubUrl).Msg(\"Connecting to:\")\n\t\tu := url.URL{\n\t\t\tScheme: \"ws\",\n\t\t\tHost:   fmt.Sprintf(\"%s:%d\", config.Config.Tap.Proxy.Host, config.Config.Tap.Proxy.Front.Port),\n\t\t\tPath:   \"/api/scripts/logs\",\n\t\t}\n\t\theaders := http.Header{}\n\t\theaders.Set(utils.X_KUBESHARK_CAPTURE_HEADER_KEY, utils.X_KUBESHARK_CAPTURE_HEADER_IGNORE_VALUE)\n\t\theaders.Set(\"License-Key\", config.Config.License)\n\n\t\tc, _, err := websocket.DefaultDialer.Dial(u.String(), headers)\n\t\tif err != nil {\n\t\t\tlog.Error().Err(err).Msg(\"Websocket dial error, retrying in 5 seconds...\")\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tdefer c.Close()\n\n\t\tdone := make(chan struct{})\n\n\t\tgo func() {\n\t\t\tdefer close(done)\n\t\t\tfor {\n\t\t\t\t_, message, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Error().Err(err).Msg(\"Error reading websocket message, reconnecting...\")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tmsg := string(message)\n\t\t\t\tif strings.Contains(msg, \":ERROR]\") {\n\t\t\t\t\tmsg = fmt.Sprintf(utils.Red, msg)\n\t\t\t\t\tfmt.Fprintln(os.Stderr, msg)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Fprintln(os.Stdout, msg)\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\n\t\tticker := time.NewTicker(time.Second)\n\t\tdefer ticker.Stop()\n\n\t\tselect {\n\t\tcase <-done:\n\t\t\tlog.Warn().Msg(fmt.Sprintf(utils.Yellow, \"Connection closed, reconnecting...\"))\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t\tcontinue\n\t\tcase <-interrupt:\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Error().Err(err).Send()\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 115,
    "wrong_result": "package main\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\nvar (\n\t// Configuration variables\n\tserverHost = config.Config.Tap.Proxy.Host\n\tserverPort = config.Config.Tap.Proxy.Front.Port\n\tlicense    = config.Config.License\n\thubURL     = kubernetes.GetHubUrl()\n)\n\nconst (\n\tmaxReconnectAttempts = 5\n\treconnectDelay       = 5 * time.Second\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\tvar g errgroup.Group\n\n\t// Handle interrupt signal for graceful shutdown\n\tinterruptChan := make(chan os.Signal, 1)\n\tgo func() {\n\t\t<-interruptChan\n\t\tcancel()\n\t}()\n\n\t// Start WebSocket client\n\tg.Go(func() error {\n\t\tfor {\n\t\t\tconn, _, err := connectWebSocket(ctx, serverHost, serverPort, license)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Failed to connect: %v\", err)\n\t\t\t\ttime.Sleep(reconnectDelay)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// Start message handling\n\t\t\tif err := handleWebSocket(conn, ctx); err != nil {\n\t\t\t\tlog.Printf(\"WebSocket connection closed: %v\", err)\n\t\t\t\tconn.Close()\n\t\t\t\ttime.Sleep(reconnectDelay)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\n\t// Start health check\n\tg.Go(func() error {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn nil\n\t\t\tdefault:\n\t\t\t\tif err := checkHealth(hubURL); err != nil {\n\t\t\t\t\tlog.Printf(\"Health check failed: %v\", err)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Println(\"Health check passed\")\n\t\t\t\t}\n\t\t\t\ttime.Sleep(30 * time.Second)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\n\tif err := g.Wait(); err != nil {\n\t\tlog.Fatalf(\"Error in goroutines: %v\", err)\n\t}\n}\n\nfunc connectWebSocket(ctx context.Context, host string, port int, license string) (*websocket.Conn, error) {\n\turl := fmt.Sprintf(\"ws://%s:%d\", host, port)\n\tdialer := &websocket.Dialer{\n\t\tHandshakeTimeout: 10 * time.Second,\n\t}\n\n\theader := http.Header{}\n\theader.Set(\"Authorization\", \"Bearer \"+license)\n\n\tconn, _, err := dialer.DialContext(ctx, url, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn conn, nil\n}\n\nfunc handleWebSocket(conn *websocket.Conn, ctx context.Context) error {\n\treader := bufio.NewReader(conn)\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tdefault:\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// Process message\n\t\t\tif strings.HasPrefix(string(message), \"LOG:\") {\n\t\t\t\tfmt.Println(string(message))\n\t\t\t} else if strings.HasPrefix(string(message), \"ERROR:\") {\n\t\t\t\tlog.Print(string(message))\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Received: %s\\n\", string(message))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc checkHealth(url string) error {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn fmt.Errorf(\"health check failed with status code: %d\", resp.StatusCode)\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Create a function that handles WebSocket connections by upgrading HTTP connections, reading incoming messages, and forwarding them to a channel for further processing.\n\nFunction Description: The function `makeUpgradeOnConnect` generates and returns an HTTP handler function that upgrades incoming HTTP connections to WebSocket connections. It reads messages from the WebSocket connection and sends them to a provided channel. The WebSocket connection is properly closed when processing is complete.\n\nInput: \n- `ch chan string`: A channel of strings used to forward incoming WebSocket messages for further processing.\n\nOutput: \n- Returns a function of type `func(http.ResponseWriter, *http.Request)` that serves as an HTTP handler for WebSocket connections.\n\nNote: The returned HTTP handler function does not explicitly return any value but handles WebSocket communication and message forwarding internally.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc makeUpgradeOnConnect(ch chan string) func(http.ResponseWriter, *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tc, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer c.Close()\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tgo func() {\n\t\t\t\tch <- string(message)\n\t\t\t}()\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "func makeUpgradeOnConnect(ch chan string) func(http.ResponseWriter, *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tupgrader := websocket.Upgrader{\n\t\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\t\treturn true\n\t\t\t},\n\t\t}\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tch <- string(message)\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 347,
    "Instruction": "Task Description: Implement a WebSocket handler for shell communication that manages bidirectional data transfer between local and remote connections, including connection upgrading, message forwarding, and proper connection cleanup.\n\nStruct Description: The Shell struct represents a shell session manager that maintains active connections and handles WebSocket communication for shell data transfer.\n\nFields:\n- Name: string - Identifier for the shell session\n- links: map[string]*Link - Map of active connections indexed by connection ID\n- RWMutex: sync.RWMutex - Synchronization primitive for thread-safe access to the links map\n\nMethods:\n- WS: (conn *conn.Conn, w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket upgrade and manages bidirectional data forwarding between local and remote connections\n- localForward: (id string, local *websocket.Conn) -> None - Reads data from local WebSocket connection and forwards to remote\n- remoteForward: (id string, local *websocket.Conn) -> None - Reads data from remote connection and forwards to local WebSocket",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/conn\"\n\t\"github.com/lwch/natpass/code/network\"\n\t\"github.com/lwch/natpass/code/utils\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\ntype Shell struct {\n\tName string\n\tlinks map[string]*Link\n\tsync.RWMutex\n}\n\nfunc (shell *Shell) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := strings.TrimPrefix(r.URL.Path, \"/ws/\")\n\n\tlocal, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlogging.Error(\"upgrade websocket failed: %s, err=%v\", shell.Name, err)\n\t\thttp.Error(w, err.Error(), http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tdefer local.Close()\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tshell.localForward(id, local)\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tshell.remoteForward(id, local)\n\t}()\n\twg.Wait()\n}\n\nfunc (shell *Shell) localForward(id string, local *websocket.Conn) {\n\tdefer utils.Recover(\"localForward\")\n\tdefer local.Close()\n\tshell.RLock()\n\tlink := shell.links[id]\n\tshell.RUnlock()\n\tdefer link.Close(true)\n\tfor {\n\t\t_, data, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tlogging.Error(\"read local data for %s failed: %v\", shell.Name, err)\n\t\t\treturn\n\t\t}\n\t\tlink.SendData(data)\n\t\tlogging.Debug(\"local read %d bytes: name=%s, id=%s\", len(data), shell.Name, id)\n\t}\n}\n\nfunc (shell *Shell) remoteForward(id string, local *websocket.Conn) {\n\tdefer utils.Recover(\"remoteForward\")\n\tdefer local.Close()\n\tshell.RLock()\n\tlink := shell.links[id]\n\tshell.RUnlock()\n\tch := link.remote.ChanRead(id)\n\tdefer link.Close(true)\n\tfor {\n\t\tmsg := <-ch\n\t\tif msg == nil {\n\t\t\treturn\n\t\t}\n\t\tdata, _ := proto.Marshal(msg)\n\t\tlink.recvBytes += uint64(len(data))\n\t\tlink.recvPacket++\n\t\tswitch msg.GetXType() {\n\t\tcase network.Msg_shell_data:\n\t\t\terr := local.WriteMessage(websocket.TextMessage, msg.GetSdata().GetData())\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"write data for %s failed: %v\", shell.Name, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlogging.Debug(\"remote read %d bytes: name=%s, id=%s\",\n\t\t\t\tlen(msg.GetSdata().GetData()), shell.Name, id)\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype conn struct {\n\tConn *websocket.Conn\n}\n\ntype Link struct {\n\tLocal *websocket.Conn\n\tRemote *websocket.Conn\n}\n\ntype Shell struct {\n\tName    string\n\tlinks   map[string]*Link\n\tRWMutex sync.RWMutex\n}\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc (s *Shell) WS(conn *conn.Conn, w http.ResponseWriter, r *http.Request) {\n\tid := fmt.Sprintf(\"%d\", len(s.links)+1)\n\ts.RWMutex.Lock()\n\ts.links[id] = &Link{\n\t\tLocal:  conn.Conn,\n\t\tRemote: nil,\n\t}\n\ts.RWMutex.Unlock()\n\n\tgo s.localForward(id, conn.Conn)\n\tgo s.remoteForward(id, conn.Conn)\n}\n\nfunc (s *Shell) localForward(id string, local *websocket.Conn) {\n\tfor {\n\t\t_, message, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\ts.RWMutex.RLock()\n\t\tlink, exists := s.links[id]\n\t\ts.RWMutex.RUnlock()\n\t\tif exists {\n\t\t\terr := link.Remote.WriteMessage(websocket.TextMessage, message)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\ts.RWMutex.Lock()\n\tdelete(s.links, id)\n\ts.RWMutex.Unlock()\n}\n\nfunc (s *Shell) remoteForward(id string, local *websocket.Conn) {\n\tfor {\n\t\t_, message, err := local.ReadMessage()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\ts.RWMutex.RLock()\n\t\tlink, exists := s.links[id]\n\t\ts.RWMutex.RUnlock()\n\t\tif exists {\n\t\t\terr := link.Local.WriteMessage(websocket.TextMessage, message)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\ts.RWMutex.Lock()\n\tdelete(s.links, id)\n\ts.RWMutex.Unlock()\n}"
  },
  {
    "Task_id": 348,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that manages WebSocket connections, including upgrading HTTP connections, reading incoming messages, writing periodic messages, and properly closing the connection.\n\nFunction Description: The `wsHandler` function creates an HTTP handler that upgrades incoming HTTP requests to WebSocket connections. It continuously writes numbered messages to the client while concurrently reading any incoming messages from the client. The function stops after sending a specified number of messages and closes the connection gracefully.\n\nInput:\n- `t *testing.T`: Testing context for error reporting\n- `recvBuffer *bytes.Buffer`: Buffer to store received messages from the WebSocket client\n\nOutput:\n- Returns an `http.HandlerFunc` that implements the WebSocket handling logic\n\nNote: The function doesn't directly return values but rather creates a handler function that manages WebSocket communication through the provided buffer and testing context.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar (\n\tupgrader = websocket.Upgrader{}\n)\n\nfunc wsHandler(t *testing.T, recvBuffer *bytes.Buffer) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tc, err := upgrader.Upgrade(w, r, nil)\n\t\trequire.NoError(t, err)\n\t\tdefer c.Close()\n\t\ti := 0\n\t\tfinish := 5\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\t_, message, err := c.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\trecvBuffer.Write(message)\n\t\t\t}\n\t\t}()\n\t\tfor {\n\t\t\ttime.Sleep(time.Millisecond * 10)\n\n\t\t\ti++\n\t\t\tdata := struct {\n\t\t\t\tMessage string `json:\"message\"`\n\t\t\t}{\n\t\t\t\tMessage: fmt.Sprintf(\"%d\\n\", i),\n\t\t\t}\n\t\t\tbuf := new(bytes.Buffer)\n\t\t\terr := json.NewEncoder(buf).Encode(data)\n\t\t\trequire.NoError(t, err)\n\n\t\t\terr = c.WriteMessage(websocket.TextMessage, buf.Bytes())\n\t\t\trequire.NoError(t, err)\n\n\t\t\tif i == finish {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\terr = c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\trequire.NoError(t, err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "func wsHandler(t *testing.T, recvBuffer *bytes.Buffer) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"upgrade error: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\n\t\tdone := make(chan struct{})\n\t\tvar msgCount int\n\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\t_, message, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Logf(\"read error: %v\", err)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif _, err := recvBuffer.Write(message); err != nil {\n\t\t\t\t\tt.Errorf(\"write to buffer error: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tclose(done)\n\t\t}()\n\n\t\tfor msgCount < 10 {\n\t\t\tmsgCount++\n\t\t\tif err := conn.WriteMessage(websocket.TextMessage, []byte(fmt.Sprintf(\"Message %d\", msgCount))); err != nil {\n\t\t\t\tt.Logf(\"write error: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\n\t\t<-done\n\t}\n}"
  },
  {
    "Task_id": 349,
    "Instruction": "Task Description: Implement a WebSocket handler for processing VNC-related messages, including image capture data and clipboard events, using gorilla WebSocket library in Go.\n\nStruct Description: The Process struct manages WebSocket connections for VNC operations, handling message passing between the WebSocket connection and internal channels.\n\nFields:\n- srv: *http.Server - HTTP server instance\n- chWrite: chan *vncnetwork.VncMsg - Channel for outgoing VNC messages\n- chImage: chan *vncnetwork.ImageData - Channel for incoming image data\n- chClipboard: chan *vncnetwork.ClipboardData - Channel for incoming clipboard data\n\nMethods:\n- ws: (w http.ResponseWriter, r *http.Request) -> None - Handles WebSocket connections, upgrades HTTP to WebSocket, and manages message reading/writing\n- Close: () -> None - Closes the WebSocket connection and cleans up resources (implied by defer p.Close() in ws method)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lwch/logging\"\n\t\"github.com/lwch/natpass/code/client/rule/vnc/vncnetwork\"\n\t\"github.com/lwch/natpass/code/utils\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\ntype Process struct {\n\tsrv         *http.Server\n\tchWrite     chan *vncnetwork.VncMsg\n\tchImage     chan *vncnetwork.ImageData\n\tchClipboard chan *vncnetwork.ClipboardData\n}\n\nvar upgrader = websocket.Upgrader{EnableCompression: true}\n\nfunc (p *Process) ws(w http.ResponseWriter, r *http.Request) {\n\tlogging.Info(\"child process connected\")\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tdefer p.Close()\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tdefer utils.Recover(\"ws read\")\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t_, data, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"read message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar msg vncnetwork.VncMsg\n\t\t\terr = proto.Unmarshal(data, &msg)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tswitch msg.GetXType() {\n\t\t\tcase vncnetwork.VncMsg_capture_data:\n\t\t\t\tp.chImage <- msg.GetData()\n\t\t\tcase vncnetwork.VncMsg_clipboard_event:\n\t\t\t\tp.chClipboard <- msg.GetClipboard()\n\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer utils.Recover(\"ws write\")\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tmsg := <-p.chWrite\n\t\t\tdata, err := proto.Marshal(msg)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\terr = conn.WriteMessage(websocket.BinaryMessage, data)\n\t\t\tif err != nil {\n\t\t\t\tlogging.Error(\"write message: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\twg.Wait()\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gorilla/websocket\"\n\t\"net/http\"\n\t\"sync\"\n)\n\ntype Process struct {\n\tsrv      *http.Server\n\tchWrite  chan *vncnetwork.VncMsg\n\tchImage  chan *vncnetwork.ImageData\n\tchClipboard chan *vncnetwork.ClipboardData\n\tupgrader websocket.Upgrader\n\tmu       sync.Mutex\n\tconn     *websocket.Conn\n}\n\nfunc (p *Process) ws(w http.ResponseWriter, r *http.Request) {\n\tp.mu.Lock()\n\tdefer p.mu.Unlock()\n\n\tconn, err := p.upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tp.conn = conn\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, msg, err := p.conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tvar vncMsg vncnetwork.VncMsg\n\t\t\terr = json.Unmarshal(msg, &vncMsg)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tswitch vncMsg.Type {\n\t\t\tcase \"image\":\n\t\t\t\tp.chImage <- &vncnetwork.ImageData{\n\t\t\t\t\tData: vncMsg.Data,\n\t\t\t\t}\n\t\t\tcase \"clipboard\":\n\t\t\t\tp.chClipboard <- &vncnetwork.ClipboardData{\n\t\t\t\t\tData: vncMsg.Data,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tp.conn.Close()\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase msg := <-p.chWrite:\n\t\t\tp.mu.Lock()\n\t\t\terr := p.conn.WriteJSON(msg)\n\t\t\tp.mu.Unlock()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (p *Process) Close() {\n\tif p.conn != nil {\n\t\tp.conn.Close()\n\t}\n}"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a WebSocket proxy struct in Go that can handle WebSocket connections by forwarding messages between a client and a backend server.\n\nStruct Description: The `WebsocketProxy` struct is a reverse proxy for WebSocket connections. It upgrades incoming HTTP connections to WebSocket, connects to a backend WebSocket server, and forwards messages bidirectionally between the client and backend.\n\nFields:\n- Director: `func(incoming *http.Request, out http.Header)` - Optional function to modify the request headers before connecting to the backend.\n- Backend: `func(*http.Request) *url.URL` - Required function that returns the backend URL to connect to.\n- Upgrader: `*websocket.Upgrader` - Optional WebSocket upgrader configuration for client connections.\n- Dialer: `*websocket.Dialer` - Optional WebSocket dialer configuration for backend connections.\n\nMethods:\n- ServeHTTP: `(rw http.ResponseWriter, req *http.Request)` -> `None` - Main handler method that implements the http.Handler interface. It upgrades the client connection, connects to the backend, and sets up bidirectional message forwarding.\n  - Input Parameters:\n    - rw: `http.ResponseWriter` - The HTTP response writer\n    - req: `*http.Request` - The HTTP request\n  - Description: Handles the WebSocket proxy logic including connection upgrading, backend dialing, and message replication between client and backend.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer *websocket.Dialer\n}\n\nfunc (w *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif w.Backend == nil {\n\t\tlog.Println(\"websocketproxy: backend function is not defined\")\n\t\thttp.Error(rw, \"internal server error (code: 1)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := w.Backend(req)\n\tif backendURL == nil {\n\t\tlog.Println(\"websocketproxy: backend URL is nil\")\n\t\thttp.Error(rw, \"internal server error (code: 2)\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := w.Dialer\n\tif w.Dialer == nil {\n\t\tdialer = websocket.DefaultDialer\n\t}\n\n\trequestHeader := http.Header{}\n\tif origin := req.Header.Get(\"Origin\"); origin != \"\" {\n\t\trequestHeader.Add(\"Origin\", origin)\n\t}\n\tfor _, prot := range req.Header[http.CanonicalHeaderKey(\"Sec-WebSocket-Protocol\")] {\n\t\trequestHeader.Add(\"Sec-WebSocket-Protocol\", prot)\n\t}\n\tfor _, cookie := range req.Header[http.CanonicalHeaderKey(\"Cookie\")] {\n\t\trequestHeader.Add(\"Cookie\", cookie)\n\t}\n\tif req.Host != \"\" {\n\t\trequestHeader.Set(\"Host\", req.Host)\n\t}\n\n\tif clientIP, _, err := net.SplitHostPort(req.RemoteAddr); err == nil {\n\t\tif prior, ok := req.Header[\"X-Forwarded-For\"]; ok {\n\t\t\tclientIP = strings.Join(prior, \", \") + \", \" + clientIP\n\t\t}\n\t\trequestHeader.Set(\"X-Forwarded-For\", clientIP)\n\t}\n\n\trequestHeader.Set(\"X-Forwarded-Proto\", \"http\")\n\tif req.TLS != nil {\n\t\trequestHeader.Set(\"X-Forwarded-Proto\", \"https\")\n\t}\n\n\tif w.Director != nil {\n\t\tw.Director(req, requestHeader)\n\t}\n\n\tconnBackend, resp, err := dialer.Dial(backendURL.String(), requestHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't dial to remote backend url %s\", err)\n\t\tif resp != nil {\n\t\t\tif err := copyResponse(rw, resp); err != nil {\n\t\t\t\tlog.Printf(\"websocketproxy: couldn't write response after failed remote backend handshake: %s\", err)\n\t\t\t}\n\t\t} else {\n\t\t\thttp.Error(rw, http.StatusText(http.StatusServiceUnavailable), http.StatusServiceUnavailable)\n\t\t}\n\t\treturn\n\t}\n\tdefer connBackend.Close()\n\n\tupgrader := w.Upgrader\n\tif w.Upgrader == nil {\n\t\tupgrader = &websocket.Upgrader{\n\t\t\tReadBufferSize:  1024,\n\t\t\tWriteBufferSize: 1024,\n\t\t}\n\t}\n\n\tupgradeHeader := http.Header{}\n\tif hdr := resp.Header.Get(\"Sec-Websocket-Protocol\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Sec-Websocket-Protocol\", hdr)\n\t}\n\tif hdr := resp.Header.Get(\"Set-Cookie\"); hdr != \"\" {\n\t\tupgradeHeader.Set(\"Set-Cookie\", hdr)\n\t}\n\n\tconnPub, err := upgrader.Upgrade(rw, req, upgradeHeader)\n\tif err != nil {\n\t\tlog.Printf(\"websocketproxy: couldn't upgrade %s\", err)\n\t\treturn\n\t}\n\tdefer connPub.Close()\n\n\terrClient := make(chan error, 1)\n\terrBackend := make(chan error, 1)\n\treplicateWebsocketConn := func(dst, src *websocket.Conn, errc chan error) {\n\t\tfor {\n\t\t\tmsgType, msg, err := src.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tm := websocket.FormatCloseMessage(websocket.CloseNormalClosure, fmt.Sprintf(\"%v\", err))\n\t\t\t\tif e, ok := err.(*websocket.CloseError); ok {\n\t\t\t\t\tif e.Code != websocket.CloseNoStatusReceived {\n\t\t\t\t\t\tm = websocket.FormatCloseMessage(e.Code, e.Text)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\terrc <- err\n\t\t\t\tdst.WriteMessage(websocket.CloseMessage, m)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = dst.WriteMessage(msgType, msg)\n\t\t\tif err != nil {\n\t\t\t\terrc <- err\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tgo replicateWebsocketConn(connPub, connBackend, errClient)\n\tgo replicateWebsocketConn(connBackend, connPub, errBackend)\n\n\tvar message string\n\tselect {\n\tcase err = <-errClient:\n\t\tmessage = \"websocketproxy: Error when copying from backend to client: %v\"\n\tcase err = <-errBackend:\n\t\tmessage = \"websocketproxy: Error when copying from client to backend: %v\"\n\t}\n\tif e, ok := err.(*websocket.CloseError); !ok || e.Code == websocket.CloseAbnormalClosure {\n\t\tlog.Printf(message, err)\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"github.com/gorilla/websocket\"\n)\n\ntype WebsocketProxy struct {\n\tDirector func(incoming *http.Request, out http.Header)\n\tBackend  func(*http.Request) *url.URL\n\tUpgrader *websocket.Upgrader\n\tDialer   *websocket.Dialer\n}\n\nfunc (p *WebsocketProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tif p.Backend == nil {\n\t\thttp.Error(rw, \"Backend URL required\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tbackendURL := p.Backend(req)\n\tif backendURL == nil {\n\t\thttp.Error(rw, \"Backend URL not provided\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tif p.Director != nil {\n\t\tp.Director(req, http.Header{})\n\t}\n\n\tconn, err := websocket.Upgrader{Upgrader: p.Upgrader}.Upgrade(rw, req, nil)\n\tif err != nil {\n\t\thttp.Error(rw, \"Failed to upgrade connection\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tdialer := p.Dialer\n\tif dialer == nil {\n\t\tdialer = &websocket.Dialer{}\n\t}\n\n\tbackendConn, _, err := dialer.Dial(backendURL.String(), http.Header{})\n\tif err != nil {\n\t\thttp.Error(rw, \"Failed to connect to backend\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif err := backendConn.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tconn.Close()\n\t\tbackendConn.Close()\n\t}()\n\n\tfor {\n\t\t_, message, err := backendConn.ReadMessage()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tif err := conn.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 352,
    "Instruction": "Task Description: Create a test WebSocket server that echoes received messages back to the client while notifying a channel for each received message.\n\nFunction Description: The function creates an HTTP test server with WebSocket support. It upgrades incoming HTTP connections to WebSocket, reads incoming messages, notifies a channel when a message is received, and echoes the message back to the client. The server runs until the connection is closed.\n\nInput:\n- t *testing.T: Testing context for error reporting\n- received chan struct{}: Channel to notify when a message is received\n\nOutput:\n- *httptest.Server: Pointer to the created HTTP test server instance",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\n\tgorillawebsocket \"github.com/gorilla/websocket\"\n)\n\nfunc testService(t *testing.T, received chan struct{}) *httptest.Server {\n\tvar httpHandler http.HandlerFunc = func(w http.ResponseWriter, r *http.Request) {\n\t\tvar upgrader gorillawebsocket.Upgrader\n\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tt.Fatal(\"error upgrading websocket:\", err)\n\t\t}\n\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\tt, b, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treceived <- struct{}{}\n\n\t\t\tconn.WriteMessage(t, b)\n\t\t}\n\t}\n\n\treturn httptest.NewServer(httpHandler)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "func createEchoWebSocketServer(t *testing.T, received chan struct{}) *httptest.Server {\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tupgrader := websocket.Upgrader{\n\t\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\t\treturn true\n\t\t\t},\n\t\t}\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\tt.Errorf(\"failed to upgrade connection: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tdefer conn.Close()\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tt.Logf(\"error reading message: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treceived <- struct{}{}\n\t\t\tif err := conn.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\t\tt.Logf(\"error writing message: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}))\n\treturn server\n}"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Implement a WebSocket server function in Go that handles client connections, manages online users, and periodically sends server statistics to connected clients.\n\nFunction Description: The `serverStream` function establishes a WebSocket connection with a client, registers the user in an online user tracking system, and continuously sends server statistics at regular intervals. It handles connection upgrades, user authentication, and graceful connection closure.\n\nInput:\n- `c *gin.Context`: Gin framework context object containing HTTP request information and writer for response\n\nOutput:\n- `any`: Placeholder return value (always nil in this implementation)\n- `error`: Error object indicating connection termination reason (wrapped in custom WsError type)\n\nThe function performs the following operations:\n1. Generates a unique connection ID\n2. Upgrades HTTP connection to WebSocket\n3. Extracts user IP and authentication info\n4. Registers user in online tracking system\n5. Periodically sends server statistics\n6. Handles connection cleanup on exit",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"net/url\"\n\t\"unicode/utf8\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/hashicorp/go-uuid\"\n\n\t\"github.com/nezhahq/nezha/model\"\n\t\"github.com/nezhahq/nezha/service/singleton\"\n)\n\nvar upgrader *websocket.Upgrader\n\nfunc serverStream(c *gin.Context) (any, error) {\n\tconnId, err := uuid.GenerateUUID()\n\tif err != nil {\n\t\treturn nil, newWsError(\"%v\", err)\n\t}\n\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\treturn nil, newWsError(\"%v\", err)\n\t}\n\tdefer conn.Close()\n\n\tuserIp := c.GetString(model.CtxKeyRealIPStr)\n\tif userIp == \"\" {\n\t\tuserIp = c.RemoteIP()\n\t}\n\n\tu, isMember := c.Get(model.CtxKeyAuthorizedUser)\n\tvar userId uint64\n\tif isMember {\n\t\tuserId = u.(*model.User).ID\n\t}\n\n\tsingleton.AddOnlineUser(connId, &model.OnlineUser{\n\t\tUserID:      userId,\n\t\tIP:          userIp,\n\t\tConnectedAt: time.Now(),\n\t\tConn:        conn,\n\t})\n\tdefer singleton.RemoveOnlineUser(connId)\n\n\tcount := 0\n\tfor {\n\t\tstat, err := getServerStat(count == 0, isMember)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif err := conn.WriteMessage(websocket.TextMessage, stat); err != nil {\n\t\t\tbreak\n\t\t}\n\t\tcount += 1\n\t\tif count%4 == 0 {\n\t\t\terr = conn.WriteMessage(websocket.PingMessage, []byte{})\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ttime.Sleep(time.Second * 2)\n\t}\n\treturn nil, newWsError(\"\")\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "func serverStream(c *gin.Context) (any, error) {\n\t// Generate unique connection ID\n\tconnID := uuid.New().String()\n\n\t// Upgrade HTTP connection to WebSocket\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\treturn nil, &WsError{Message: \"failed to upgrade connection\", Err: err}\n\t}\n\n\t// Extract user IP and authentication info\n\tuserIP := c.ClientIP()\n\tauthInfo := c.GetHeader(\"Authorization\")\n\n\t// Register user in online tracking system\n\tonlineUsers.Store(connID, &OnlineUser{\n\t\tID:      connID,\n\t\tIP:      userIP,\n\t\tAuth:    authInfo,\n\t\tConn:    conn,\n\t\tLastPing: time.Now(),\n\t})\n\n\t// Start periodic sending of server statistics\n\tticker := time.NewTicker(10 * time.Second)\n\tdefer ticker.Stop()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tstats := getServerStats()\n\t\t\t\terr := conn.WriteJSON(stats)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// Handle write error, possibly disconnect user\n\t\t\t\t\tlog.Printf(\"Error sending stats: %v\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Handle connection closure\n\tdefer func() {\n\t\tonlineUsers.Delete(connID)\n\t\tconn.Close()\n\t}()\n\n\t// Wait for connection closure\n\t<-conn.CloseRead()\n\treturn nil, nil\n}"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a WebSocket handler function in Go that upgrades an HTTP connection to a WebSocket connection, manages WebSocket connections, and handles message reading.\n\nFunction Description: The function `NotifyWS` handles WebSocket connections by upgrading an HTTP request to a WebSocket connection using the Gorilla WebSocket upgrader. It adds the new WebSocket connection to a global list of connections and ensures a message-sending service is running. The function then continuously reads messages from the WebSocket connection until it is closed.\n\nInput: \n- `ctx echo.Context`: An Echo framework context object representing the HTTP request and response. This is used to access the underlying HTTP connection for WebSocket upgrade.\n\nOutput: \n- `error`: Returns an error if the WebSocket upgrade fails, otherwise returns `nil` after the WebSocket connection is closed.\n\nNote: The function does not explicitly return any output other than potential errors, but it interacts with global state (`service.WebSocketConns` and `service.SocketRun`) and performs I/O operations on the WebSocket connection.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/IceWhaleTech/CasaOS/service\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nvar upGrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc NotifyWS(ctx echo.Context) error {\n\tws, err := upGrader.Upgrade(ctx.Response().Writer, ctx.Request(), nil)\n\tif err != nil {\n\t\treturn nil\n\t}\n\tdefer ws.Close()\n\tservice.WebSocketConns = append(service.WebSocketConns, ws)\n\n\tif !service.SocketRun {\n\t\tservice.SocketRun = true\n\t\tservice.SendMeg()\n\t}\n\tfor {\n\t\tmt, message, err := ws.ReadMessage()\n\t\tfmt.Println(mt, message, err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/labstack/echo/v4\"\n\t\"sync\"\n)\n\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\ntype WebSocketConnection struct {\n\tconn *websocket.Conn\n\tmu   sync.Mutex\n}\n\nfunc NotifyWS(ctx echo.Context) error {\n\tconn, err := upgrader.Upgrade(ctx.Response(), ctx.Request(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\t\n\tservice.WebSocketConns.Lock()\n\tservice.WebSocketConns.conns = append(service.WebSocketConns.conns, &WebSocketConnection{conn: conn})\n\tservice.WebSocketConns.Unlock()\n\t\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Handle message\n\t\t}\n\t\tservice.WebSocketConns.Lock()\n\t\tfor i, c := range service.WebSocketConns.conns {\n\t\t\tif c.conn == conn {\n\t\t\t\tservice.WebSocketConns.conns = append(service.WebSocketConns.conns[:i], service.WebSocketConns.conns[i+1:]...)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tservice.WebSocketConns.Unlock()\n\t}()\n\t\n\treturn nil\n}"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Create a WebSocket handler function that establishes an SSH connection through a WebSocket interface, allowing for terminal-like interaction with a remote host.\n\nFunction Description: The function `ConnectSshPmExec` handles WebSocket connections to facilitate SSH terminal sessions. It upgrades an HTTP connection to WebSocket, validates host credentials, establishes an SSH connection, and manages bidirectional communication between the WebSocket client and SSH server. The function includes error handling and resource cleanup.\n\nInput:\n- `c` (gin.Context) - Gin framework context for HTTP request handling\n- `username` (string) - Username for authentication (unused in current implementation)\n- `envName` (string) - Environment name (unused in current implementation)\n- `productName` (string) - Product name (unused in current implementation)\n- `ip` (string) - IP address of the target host\n- `hostId` (string) - Identifier for the host's private key\n- `cols` (int) - Terminal column size\n- `rows` (int) - Terminal row size\n- `log` (*zap.SugaredLogger) - Logger for error reporting\n\nOutput:\n- `error` - Returns nil on success, or an error object if any step fails",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n\t\"go.uber.org/zap\"\n\t\"golang.org/x/crypto/ssh\"\n\n\tcommonrepo \"github.com/koderover/zadig/v2/pkg/microservice/aslan/core/common/repository/mongodb\"\n\t\"github.com/koderover/zadig/v2/pkg/setting\"\n\te \"github.com/koderover/zadig/v2/pkg/tool/errors\"\n\ttoolssh \"github.com/koderover/zadig/v2/pkg/tool/ssh\"\n\t\"github.com/koderover/zadig/v2/pkg/tool/wsconn\"\n\t\"github.com/koderover/zadig/v2/pkg/util\"\n)\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\nfunc ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tws, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorf(\"ws upgrade err:%s\", err)\n\t\treturn e.ErrLoginPm.AddErr(err)\n\t}\n\n\tdefer ws.Close()\n\tresp, err := commonrepo.NewPrivateKeyColl().Find(commonrepo.FindPrivateKeyOption{\n\t\tID: hostId,\n\t})\n\tif err != nil {\n\t\tlog.Errorf(\"PrivateKey.Find ip %s id %s error: %s\", ip, hostId, err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrGetPrivateKey.Error()))\n\t\treturn e.ErrGetPrivateKey\n\n\t}\n\tif resp.Status != setting.PMHostStatusNormal {\n\t\tlog.Errorf(\"host %s status %s, is not normal\", ip, resp.Status)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s status %s,is not normal\", ip, resp.Status))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.ScheduleWorkflow {\n\t\tlog.Errorf(\"host %s is not enable login\", ip)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"host %s is not enable ssh\", ip))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tif resp.Port == 0 {\n\t\tresp.Port = setting.PMHostDefaultPort\n\t}\n\n\tsDec, err := base64.StdEncoding.DecodeString(resp.PrivateKey)\n\tif err != nil {\n\t\tlog.Errorf(\"base64 decode failed ip:%s, error:%s\", ip, err)\n\t\te.ErrLoginPm.AddDesc(fmt.Sprintf(\"base64 decode failed ip:%s, error:%s\", ip, err))\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\n\tsshCli, err := toolssh.NewSshCli(sDec, resp.UserName, resp.IP, resp.Port)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshCli err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshCli.Close()\n\n\tsshConn, err := wsconn.NewSshConn(cols, rows, sshCli)\n\tif err != nil {\n\t\tlog.Errorf(\"NewSshConn err:%s\", err)\n\t\te.ErrLoginPm.AddErr(err)\n\t\tws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseInternalServerErr, e.ErrLoginPm.Error()))\n\t\treturn e.ErrLoginPm\n\t}\n\tdefer sshConn.Close()\n\n\tstopChan := make(chan bool, 3)\n\tgo sshConn.ReadWsMessage(ws, stopChan)\n\tgo sshConn.SendWsWriteMessage(ws, stopChan)\n\tgo sshConn.SessionWait(stopChan)\n\n\t<-stopChan\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "func ConnectSshPmExec(c *gin.Context, username, envName, productName, ip, hostId string, cols, rows int, log *zap.SugaredLogger) error {\n\tif c.Request.Header.Get(\"Upgrade\") != \"websocket\" {\n\t\treturn errors.New(\"websocket upgrade required\")\n\t}\n\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\n\tconn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tlog.Errorw(\"failed to upgrade connection\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer conn.Close()\n\n\tprivateKeyPath := fmt.Sprintf(\"/etc/ssh/keys/%s\", hostId)\n\tprivateKey, err := ioutil.ReadFile(privateKeyPath)\n\tif err != nil {\n\t\tlog.Errorw(\"failed to read private key\", \"error\", err)\n\t\treturn err\n\t}\n\n\tsigner, err := ssh.ParsePrivateKey(privateKey)\n\tif err != nil {\n\t\tlog.Errorw(\"failed to parse private key\", \"error\", err)\n\t\treturn err\n\t}\n\n\tconfig := &ssh.ClientConfig{\n\t\tUser: username,\n\t\tAuth: []ssh.AuthMethod{\n\t\t\tssh.PublicKeys(signer),\n\t\t},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t}\n\n\tclient, err := ssh.Dial(\"tcp\", fmt.Sprintf(\"%s:22\", ip), config)\n\tif err != nil {\n\t\tlog.Errorw(\"failed to dial ssh\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\tsession, err := client.NewSession()\n\tif err != nil {\n\t\tlog.Errorw(\"failed to create session\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer session.Close()\n\n\tmodes := ssh.TerminalModes{\n\t\tssh.ECHO:          0,\n\t\tssh.TTY_OP_ISPEED: 14400,\n\t\tssh.TTY_OP_OSPEED: 14400,\n\t}\n\n\tif err := session.RequestPty(\"xterm\", rows, cols, modes); err != nil {\n\t\tlog.Errorw(\"failed to request pty\", \"error\", err)\n\t\treturn err\n\t}\n\n\tstdin, err := session.StdinPipe()\n\tif err != nil {\n\t\tlog.Errorw(\"failed to get stdin pipe\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer stdin.Close()\n\n\tstdout, err := session.StdoutPipe()\n\tif err != nil {\n\t\tlog.Errorw(\"failed to get stdout pipe\", \"error\", err)\n\t\treturn err\n\t}\n\tdefer stdout.Close()\n\n\tdone := make(chan bool)\n\n\tgo func() {\n\t\tbuf := make([]byte, 1024)\n\t\tfor {\n\t\t\tn, err := stdout.Read(buf)\n\t\t\tif n > 0 {\n\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, buf[:n]); err != nil {\n\t\t\t\t\tlog.Errorw(\"failed to write to websocket\", \"error\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif err != nil {\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tlog.Errorw(\"failed to read from stdout\", \"error\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tdone <- true\n\t}()\n\n\tgo func() {\n\t\tfor {\n\t\t\t_, message, err := conn.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorw(\"failed to read from websocket\", \"error\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif _, err := stdin.Write(message); err != nil {\n\t\t\t\tlog.Errorw(\"failed to write to stdin\", \"error\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\t<-done\n\treturn nil\n}"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Implement a WebSocket echo server function in Go that handles WebSocket connections, reads incoming messages, and echoes them back to the client.\n\nFunction Description: The `echo` function upgrades an HTTP connection to a WebSocket connection, continuously reads messages from the client, and echoes them back. It handles connection errors and ensures proper cleanup by closing the connection when done.\n\nInput: \n- `ctx *gin.Context`: A Gin context object containing the HTTP request and response writer needed for WebSocket upgrade.\n\nOutput: \n- None (void function), but it performs the following operations:\n  - Upgrades the HTTP connection to WebSocket\n  - Reads and echoes messages until connection is closed\n  - Handles and logs errors\n  - Closes the WebSocket connection when done",
    "Canonical_solution": "import (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gorilla/websocket\"\n)\n\nvar upgrader = websocket.Upgrader{}\n\nfunc echo(ctx *gin.Context) {\n\tw,r := ctx.Writer, ctx.Request\n\tc, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Println(\"upgrade:\", err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\tfor {\n\t\tmt, message, err := c.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"read:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"recv:%s\", message)\n\t\terr = c.WriteMessage(mt, message)\n\t\tif err != nil {\n\t\t\tlog.Println(\"write:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 114,
    "wrong_result": "func echo(ctx *gin.Context) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\tconn, err := upgrader.Upgrade(ctx.Writer, ctx.Request, nil)\n\tif err != nil {\n\t\tctx.AbortWithStatus(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tfor {\n\t\tmt, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error reading message: %v\", err)\n\t\t\tbreak\n\t\t}\n\t\tif mt == websocket.TextMessage {\n\t\t\tif err := conn.WriteMessage(websocket.TextMessage, message); err != nil {\n\t\t\t\tlog.Printf(\"error writing message: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Implement a UDP client in Go that can send data to a KDC (Key Distribution Center) server and receive responses, with error handling and connection management.\n\nStruct Description: The Client struct represents a UDP client for communicating with KDC servers. It maintains configuration and provides methods for sending data over UDP.\n\nFields:\n\nConfig: [*Config] - Configuration object containing KDC server information and settings\n\nMethods:\n\nsendKDCUDP: [func(realm string, b []byte) -> ([]byte, error)] - Sends data to a KDC server over UDP for a specific realm. Returns the response or error.\ndialKDCUDP: [func(count int, kdcs map[int]string) -> (*net.UDPConn, error)] - Internal method to establish UDP connection to a KDC server from a list of addresses. Returns the connection or error.\nsendUDP: [func(conn *net.UDPConn, b []byte) -> ([]byte, error)] - Internal method to send data over an established UDP connection and read the response. Returns the response data or error.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (cl *Client) sendKDCUDP(realm string, b []byte) ([]byte, error) {\n\tvar r []byte\n\tcount, kdcs, err := cl.Config.GetKDCs(realm, false)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tconn, err := dialKDCUDP(count, kdcs)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\tr, err = cl.sendUDP(conn, b)\n\tif err != nil {\n\t\treturn r, err\n\t}\n\treturn checkForKRBError(r)\n}\n\nfunc dialKDCUDP(count int, kdcs map[int]string) (conn *net.UDPConn, err error) {\n\ti := 1\n\tfor i <= count {\n\t\tudpAddr, e := net.ResolveUDPAddr(\"udp\", kdcs[i])\n\t\tif e != nil {\n\t\t\terr = fmt.Errorf(\"error resolving KDC address: %v\", e)\n\t\t\treturn\n\t\t}\n\t\tconn, err = net.DialUDP(\"udp\", nil, udpAddr)\n\t\tif err == nil {\n\t\t\terr = conn.SetDeadline(time.Now().Add(5 * time.Second))\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\ti++\n\t}\n\terr = errors.New(\"error in getting a UDP connection to any of the KDCs\")\n\treturn\n}\n\nfunc (cl *Client) sendUDP(conn *net.UDPConn, b []byte) ([]byte, error) {\n\tvar r []byte\n\tdefer conn.Close()\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"error sending to (%s): %v\", conn.RemoteAddr().String(), err)\n\t}\n\tudpbuf := make([]byte, 4096)\n\tn, _, err := conn.ReadFrom(udpbuf)\n\tr = udpbuf[:n]\n\tif err != nil {\n\t\treturn r, fmt.Errorf(\"sending over UDP failed to %s: %v\", conn.RemoteAddr().String(), err)\n\t}\n\tif len(r) < 1 {\n\t\treturn r, fmt.Errorf(\"no response data from %s\", conn.RemoteAddr().String())\n\t}\n\treturn r, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 113,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n)\n\ntype Config struct {\n\tKDCAddresses map[int]string\n}\n\ntype Client struct {\n\tConfig *Config\n}\n\nfunc (c *Client) sendKDCUDP(realm string, b []byte) ([]byte, error) {\n\tconn, err := c.dialKDCUDP(1, c.Config.KDCAddresses)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer conn.Close()\n\t\n\tresponse, err := c.sendUDP(conn, b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn response, nil\n}\n\nfunc (c *Client) dialKDCUDP(count int, kdcs map[int]string) (*net.UDPConn, error) {\n\tif len(kdcs) == 0 {\n\t\treturn nil, errors.New(\"no KDC addresses provided\")\n\t}\n\t\n\tfor i := 0; i < count && i < len(kdcs); i++ {\n\t\taddr := kdcs[i]\n\t\tudpAddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tconn, err := net.DialUDP(\"udp\", nil, udpAddr)\n\t\tif err == nil {\n\t\t\treturn conn, nil\n\t\t}\n\t}\n\t\n\treturn nil, errors.New(\"failed to connect to any KDC server\")\n}\n\nfunc (c *Client) sendUDP(conn *net.UDPConn, b []byte) ([]byte, error) {\n\t_, err := conn.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tbuffer := make([]byte, 1024)\n\tn, err := conn.Read(buffer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\treturn buffer[:n], nil\n}"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Write a Go function that tests UDP communication between a client and server. The function should create a UDP server, establish a client connection, send a test message, and verify the server's response.\n\nFunction Description: The function `TestUDPTransport` tests UDP transport functionality by creating a UDP server, sending a message from a client to the server, and verifying that the server receives the correct message. It uses goroutines for asynchronous server handling and channels for communication between the server and test function.\n\nInput: \n- `t *testing.T`: A testing context provided by the Go testing framework for assertions and logging.\n\nOutput: \n- None (This is a test function, so it reports failures via the testing framework rather than returning values). \n\nNote: The function relies on an external `NewTUDPServerTransport` function (not shown in the reference) to create the server transport and a `serveOnce` helper function (also not shown) to handle the server-side receive operation.",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\nfunc TestUDPTransport(t *testing.T) {\n\tserver, err := NewTUDPServerTransport(\"127.0.0.1:0\")\n\trequire.NoError(t, err)\n\tdefer server.Close()\n\n\tassert.NoError(t, server.Open())\n\tassert.True(t, server.IsOpen())\n\tassert.NotNil(t, server.Conn())\n\n\tc := make(chan []byte)\n\tdefer close(c)\n\n\tgo serveOnce(t, server, c)\n\n\tdestAddr, err := net.ResolveUDPAddr(\"udp\", server.Addr().String())\n\trequire.NoError(t, err)\n\n\tconnUDP, err := net.DialUDP(destAddr.Network(), nil, destAddr)\n\trequire.NoError(t, err)\n\tdefer connUDP.Close()\n\n\tn, err := connUDP.Write([]byte(\"test\"))\n\tassert.NoError(t, err)\n\tassert.Equal(t, 4, n)\n\n\tselect {\n\tcase data := <-c:\n\t\tassert.Equal(t, \"test\", string(data))\n\tcase <-time.After(time.Second * 1):\n\t\tt.Error(\"Server did not respond in time\")\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "func TestUDPTransport(t *testing.T) {\n    serverChan := make(chan string)\n    doneChan := make(chan struct{})\n    \n    go func() {\n        serveOnce(func(conn *net.UDPConn) {\n            buf := make([]byte, 1024)\n            n, addr := conn.ReadFromUDP(buf)\n            msg := string(buf[:n])\n            if msg != \"test message\" {\n                t.Errorf(\"server received unexpected message: %s\", msg)\n            }\n            serverChan <- msg\n            close(doneChan)\n        })\n    }()\n    \n    serverTransport, err := NewTUDPServerTransport(\":8080\")\n    if err != nil {\n        t.Fatalf(\"failed to create server transport: %v\", err)\n    }\n    \n    clientConn, err := net.Dial(\"udp\", \"localhost:8080\")\n    if err != nil {\n        t.Fatalf(\"failed to connect to server: %v\", err)\n    }\n    \n    _, err = clientConn.Write([]byte(\"test message\"))\n    if err != nil {\n        t.Fatalf(\"failed to send message: %v\", err)\n    }\n    \n    select {\n    case msg := <-serverChan:\n        if msg != \"test message\" {\n            t.Errorf(\"server received unexpected message: %s\", msg)\n        }\n    case <-doneChan:\n        // Server processed the message\n    }\n}"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Implement a function that establishes UDP connections between two remote endpoints, optionally encrypts the initial handshake packets, and forwards traffic between them.\n\nFunction Description: The function `remote2remoteUDP` creates two UDP connections to specified remote endpoints, handles optional encryption of initialization packets, and sets up bidirectional forwarding between the connections. It uses custom networking and crypto utilities for connection management and encryption.\n\nInput:\n- remoteA: string - First remote endpoint address in \"host:port\" format\n- remoteB: string - Second remote endpoint address in \"host:port\" format\n- raenc: bool - Flag to enable encryption for first remote endpoint\n- rbenc: bool - Flag to enable encryption for second remote endpoint\n\nOutput: None (The function runs indefinitely forwarding traffic or returns on error)",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"iox/netio\"\n\t\"iox/crypto\"\n)\n\nfunc remote2remoteUDP(remoteA string, remoteB string, raenc bool, rbenc bool) {\n\tremoteAddrA, err := net.ResolveUDPAddr(\"udp\", remoteA)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteConnA, err := net.DialUDP(\"udp\", nil, remoteAddrA)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer remoteConnA.Close()\n\n\tremoteAddrB, err := net.ResolveUDPAddr(\"udp\", remoteB)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteConnB, err := net.DialUDP(\"udp\", nil, remoteAddrB)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer remoteConnB.Close()\n\n\tremoteCtxA, err := netio.NewUDPCtx(remoteConnA, raenc, true)\n\tif err != nil {\n\t\treturn\n\t}\n\tremoteCtxB, err := netio.NewUDPCtx(remoteConnB, rbenc, true)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif raenc {\n\t\tiv, err := crypto.RandomNonce()\n\t\tcipher, err := crypto.NewCipher(iv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tb := make([]byte, 4, 20)\n\t\tcopy(b, netio.UDP_INIT_PACKET)\n\n\t\tcipher.StreamXOR(b, b)\n\t\tb = append(b, iv...)\n\t\tremoteCtxA.Write(b)\n\t} else {\n\t\tremoteCtxA.Write(netio.UDP_INIT_PACKET)\n\t}\n\tif rbenc {\n\t\tiv, err := crypto.RandomNonce()\n\t\tcipher, err := crypto.NewCipher(iv)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tb := make([]byte, 4, 20)\n\t\tcopy(b, netio.UDP_INIT_PACKET)\n\n\t\tcipher.StreamXOR(b, b)\n\t\tb = append(b, iv...)\n\t\tremoteCtxB.Write(b)\n\t} else {\n\t\tremoteCtxB.Write(netio.UDP_INIT_PACKET)\n\t}\n\n\tnetio.ForwardUDP(remoteCtxA, remoteCtxB)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\ntype EncryptedConn struct {\n\tconn net.Conn\n\tkey  []byte\n}\n\nfunc (ec *EncryptedConn) Write(p []byte) (n int, err error) {\n\t// Encrypt and send data\n\treturn ec.conn.Write(p)\n}\n\nfunc (ec *EncryptedConn) Read(p []byte) (n int, err error) {\n\t// Decrypt and read data\n\treturn ec.conn.Read(p)\n}\n\nfunc remote2remoteUDP(remoteA, remoteB string, raenc, rbenc bool) {\n\tconnA, err := net.Dial(\"udp\", remoteA)\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to remoteA:\", err)\n\t\treturn\n\t}\n\tdefer connA.Close()\n\n\tconnB, err := net.Dial(\"udp\", remoteB)\n\tif err != nil {\n\t\tfmt.Println(\"Error connecting to remoteB:\", err)\n\t\treturn\n\t}\n\tdefer connB.Close()\n\n\tif raenc {\n\t\tconnA = &EncryptedConn{conn: connA, key: []byte(\"secretkey123\")}\n\t}\n\tif rbenc {\n\t\tconnB = &EncryptedConn{conn: connB, key: []byte(\"secretkey456\")}\n\t}\n\n\tgo func() {\n\t\tbuffer := make([]byte, 65507)\n\t\tfor {\n\t\t\tn, err := connA.Read(buffer)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error reading from remoteA:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = connB.Write(buffer[:n])\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error writing to remoteB:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tbuffer := make([]byte, 65507)\n\t\tfor {\n\t\t\tn, err := connB.Read(buffer)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error reading from remoteB:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t_, err = connA.Write(buffer[:n])\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error writing to remoteA:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\tselect {}\n}"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a function that sends a predefined stop marker to a destination address over UDP protocol.\n\nFunction Description: The function `sendStopMarker` establishes a UDP connection between a source address and a destination address, then sends a fixed byte sequence (stop marker) to indicate a stopping condition. It handles basic error logging if the connection fails.\n\nInput: \n- `src` [string]: The source IP address or hostname (without port)\n- `dst` [string]: The destination IP address or hostname (without port)\n\nOutput: None (void function). The function writes the stop marker to the UDP connection but doesn't return any value. Errors are logged if they occur.",
    "Canonical_solution": "import (\n\t\"log\"\n\t\"net\"\n)\n\nvar stopMarker = []byte{2, 2, 2, 2, 2, 2, 2, 2}\n\nfunc sendStopMarker(src, dst string) {\n\tl, _ := net.ResolveUDPAddr(\"udp\", src+\":2222\")\n\tr, _ := net.ResolveUDPAddr(\"udp\", dst+\":2222\")\n\tconn, err := net.DialUDP(\"udp\", l, r)\n\tif err != nil {\n\t\tlog.Printf(\"fail to send stopmarker: %s\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\tconn.Write(stopMarker)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 113,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc sendStopMarker(src, dst string) {\n\tconn, err := net.Dial(\"udp\", fmt.Sprintf(\"%s:0\", src))\n\tif err != nil {\n\t\tlog.Printf(\"Failed to dial source: %v\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\tstopMarker := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\n\tdstAddr, err := net.ResolveUDPAddr(\"udp\", fmt.Sprintf(\"%s:0\", dst))\n\tif err != nil {\n\t\tlog.Printf(\"Failed to resolve destination: %v\", err)\n\t\treturn\n\t}\n\n\t_, err = conn.WriteTo(stopMarker, dstAddr)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to send stop marker: %v\", err)\n\t\treturn\n\t}\n}"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a basic HTTP server in Go that serves a health check endpoint and starts listening on a specified host and port.\n\nFunction Description: The function `startHTTPServer` initializes and starts an HTTP server with a single `/healthz` endpoint that returns a 200 OK status and \"ok\" response. The server listens on the IP address and port specified by the input parameters.\n\nInput: \n- `argHealthzIP` (string pointer): The IP address on which the server should listen.\n- `argHealthzPort` (int pointer): The port number on which the server should listen.\n\nOutput: \n- None (the function runs indefinitely or until an error occurs, in which case it logs the error and exits).",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc startHTTPServer() {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(200)\n\t\tw.Write([]byte(\"ok\"))\n\t})\n\n\tklog.Info(\"Starting eventer http service\")\n\tklog.Fatal(http.ListenAndServe(net.JoinHostPort(*argHealthzIP, strconv.Itoa(int(*argHealthzPort))), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"syscall\"\n)\n\nfunc startHTTPServer(argHealthzIP *string, argHealthzPort *int) {\n\tip := *argHealthzIP\n\tport := *argHealthzPort\n\taddr := fmt.Sprintf(\"%s:%d\", ip, port)\n\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tfmt.Fprintf(w, \"ok\")\n\t})\n\n\tserver := &http.Server{Addr: addr}\n\tgo func() {\n\t\tif err := server.ListenAndServe(); err != nil {\n\t\t\tif err != http.ErrServerClosed {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"Error starting server: %v\\n\", err)\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t}\n\t}()\n\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)\n\t<-sigChan\n\tfmt.Println(\"Shutting down server...\")\n\tif err := server.Shutdown(nil); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error shutting down server: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Implement a UDP server in Go that listens for incoming packets, manages client sessions, and proxies the traffic to a remote destination using a provided proxy dialer.\n\nStruct Description: The UDP struct represents a UDP server that handles incoming connections, manages sessions, and proxies traffic. It maintains session state and coordinates communication between clients and the proxy server.\n\nFields:\n- addr: string - The local address to listen on\n- uaddr: *net.UDPAddr - The resolved UDP address\n- dialer: proxy.Dialer - The dialer used to establish connections\n- proxy: proxy.Proxy - The proxy implementation for forwarding traffic\n\nMethods:\n- NewUDP: (s string, d proxy.Dialer, p proxy.Proxy) -> (*UDP, error) - Creates a new UDP instance by parsing the URL and resolving the address\n- ListenAndServe: () -> () - Starts listening on the UDP port and handles incoming packets\n- serveSession: (session *session) -> () - Handles an individual client session and proxies its traffic\n- DialUDP: (network string, addr string) -> (net.PacketConn, error) - Creates a new packet connection for outbound traffic\n\nAdditional Structs:\n- session: Represents a client session with its communication channels\n  Fields:\n    - key: string - Session identifier\n    - src: *net.UDPAddr - Client address\n    - PacketConn: net.PacketConn - Underlying connection\n    - msgCh: chan []byte - Channel for incoming messages\n    - finCh: chan struct{} - Channel for session termination\n\n- PktConn: Wraps a net.PacketConn with a predefined destination address\n  Fields:\n    - PacketConn: net.PacketConn - Underlying connection\n    - uaddr: *net.UDPAddr - Destination address\n  Methods:\n    - WriteTo: (b []byte, addr net.Addr) -> (int, error) - Writes data to the predefined address",
    "Canonical_solution": "import (\n\t\"net\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/nadoo/glider/pkg/log\"\n\t\"github.com/nadoo/glider/pkg/pool\"\n\t\"github.com/nadoo/glider/proxy\"\n)\n\nvar nm sync.Map\n\ntype UDP struct {\n\taddr   string\n\tuaddr  *net.UDPAddr\n\tdialer proxy.Dialer\n\tproxy  proxy.Proxy\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\tlog.F(\"[udp] parse url err: %s\", err)\n\t\treturn nil, err\n\t}\n\n\tt := &UDP{\n\t\tdialer: d,\n\t\tproxy:  p,\n\t\taddr:   u.Host,\n\t}\n\n\tt.uaddr, err = net.ResolveUDPAddr(\"udp\", t.addr)\n\treturn t, err\n}\n\nfunc (s *UDP) ListenAndServe() {\n\tc, err := net.ListenPacket(\"udp\", s.addr)\n\tif err != nil {\n\t\tlog.Fatalf(\"[udp] failed to listen on UDP %s: %v\", s.addr, err)\n\t\treturn\n\t}\n\tdefer c.Close()\n\n\tlog.F(\"[udp] listening UDP on %s\", s.addr)\n\n\tfor {\n\t\tbuf := pool.GetBuffer(proxy.UDPBufSize)\n\t\tn, srcAddr, err := c.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\tlog.F(\"[udp] read error: %v\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tvar sess *session\n\t\tsessKey := srcAddr.String()\n\n\t\tv, ok := nm.Load(sessKey)\n\t\tif !ok || v == nil {\n\t\t\tsess = newSession(sessKey, srcAddr, c)\n\t\t\tnm.Store(sessKey, sess)\n\t\t\tgo s.serveSession(sess)\n\t\t} else {\n\t\t\tsess = v.(*session)\n\t\t}\n\n\t\tsess.msgCh <- buf[:n]\n\t}\n}\n\nfunc (s *UDP) serveSession(session *session) {\n\tdstPC, dialer, err := s.proxy.DialUDP(\"udp\", session.src.String())\n\tif err != nil {\n\t\tlog.F(\"[udp] remote dial error: %v\", err)\n\t\tnm.Delete(session.key)\n\t\treturn\n\t}\n\tdefer dstPC.Close()\n\n\tgo func() {\n\t\tproxy.CopyUDP(session, session.src, dstPC, 2*time.Minute, 5*time.Second)\n\t\tnm.Delete(session.key)\n\t\tclose(session.finCh)\n\t}()\n\n\tlog.F(\"[udp] %s <-> %s\", session.src, dialer.Addr())\n\n\tfor {\n\t\tselect {\n\t\tcase p := <-session.msgCh:\n\t\t\t_, err = dstPC.WriteTo(p, nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.F(\"[udp] writeTo error: %v\", err)\n\t\t\t}\n\t\t\tpool.PutBuffer(p)\n\t\tcase <-session.finCh:\n\t\t\treturn\n\t\t}\n\t}\n}\n\ntype session struct {\n\tkey string\n\tsrc *net.UDPAddr\n\tnet.PacketConn\n\tmsgCh chan []byte\n\tfinCh chan struct{}\n}\n\nfunc newSession(key string, src net.Addr, srcPC net.PacketConn) *session {\n\tsrcAddr, _ := net.ResolveUDPAddr(\"udp\", src.String())\n\treturn &session{key, srcAddr, srcPC, make(chan []byte, 32), make(chan struct{})}\n}\n\nfunc (s *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tpc, err := s.dialer.DialUDP(network, s.addr)\n\treturn &PktConn{pc, s.uaddr}, err\n}\n\ntype PktConn struct {\n\tnet.PacketConn\n\tuaddr *net.UDPAddr\n}\n\nfunc (pc *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn pc.PacketConn.WriteTo(b, pc.uaddr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 111,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"sync\"\n)\n\ntype proxy struct {\n\tDialer func(network, address string) (net.PacketConn, error)\n\tProxy  func(conn net.PacketConn, remoteAddr *net.UDPAddr)\n}\n\ntype session struct {\n\tkey       string\n\tsrc       *net.UDPAddr\n\tPacketConn net.PacketConn\n\tmsgCh     chan []byte\n\tfinCh     chan struct{}\n}\n\ntype PktConn struct {\n\tPacketConn net.PacketConn\n\tuaddr      *net.UDPAddr\n}\n\nfunc (p *PktConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn p.PacketConn.WriteTo(b, p.uaddr)\n}\n\ntype UDP struct {\n\taddr    string\n\tuaddr   *net.UDPAddr\n\tdialer  proxy.Dialer\n\tproxy   proxy.Proxy\n\tsessions map[string]*session\n\tmu       sync.Mutex\n}\n\nfunc NewUDP(s string, d proxy.Dialer, p proxy.Proxy) (*UDP, error) {\n\tudp := &UDP{\n\t\taddr:    s,\n\t\tdialer:  d,\n\t\tproxy:   p,\n\t\tsessions: make(map[string]*session),\n\t}\n\tvar err error\n\tudp.uaddr, err = net.ResolveUDPAddr(\"udp\", s)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn udp, nil\n}\n\nfunc (u *UDP) ListenAndServe() {\n\tconn, err := net.ListenUDP(\"udp\", u.uaddr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\t\n\tfor {\n\t\tbuf := make([]byte, 65535)\n\t\tn, addr, err := conn.ReadFrom(buf)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\tsessionKey := addr.String()\n\t\tu.mu.Lock()\n\t\tif _, exists := u.sessions[sessionKey]; !exists {\n\t\t\tpconn, err := u.DialUDP(\"udp\", u.addr)\n\t\t\tif err != nil {\n\t\t\t\tu.mu.Unlock()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tsession := &session{\n\t\t\t\tkey:       sessionKey,\n\t\t\t\tsrc:       addr,\n\t\t\t\tPacketConn: pconn,\n\t\t\t\tmsgCh:     make(chan []byte, 10),\n\t\t\t\tfinCh:     make(chan struct{}),\n\t\t\t}\n\t\t\tu.sessions[sessionKey] = session\n\t\t\tgo u.serveSession(session)\n\t\t}\n\t\tu.mu.Unlock()\n\t\t\n\t\tselect {\n\t\tcase u.sessions[sessionKey].msgCh <- buf[:n]:\n\t\tdefault:\n\t\t}\n\t}\n}\n\nfunc (u *UDP) serveSession(session *session) {\n\tdefer func() {\n\t\tsession.mu.Lock()\n\t\tdelete(u.sessions, session.key)\n\t\tsession.mu.Unlock()\n\t}()\n\t\n\tfor {\n\t\tselect {\n\t\tcase msg := <-session.msgCh:\n\t\t\tif session.proxy.Proxy != nil {\n\t\t\t\tsession.proxy.Proxy(session.PacketConn, session.src)\n\t\t\t}\n\t\t\tif session.dialer != nil {\n\t\t\t\tpconn, err := session.dialer(\"udp\", session.uaddr.IP.String()+\":\"+session.uaddr.Port)\n\t\t\t\tif err == nil {\n\t\t\t\t\tsession.PacketConn = pconn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif session.PacketConn != nil {\n\t\t\t\t_, err := session.PacketConn.WriteTo(msg, session.uaddr)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\tcase <-session.finCh:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (u *UDP) DialUDP(network, addr string) (net.PacketConn, error) {\n\tif u.dialer != nil {\n\t\treturn u.dialer(network, addr)\n\t}\n\treturn nil, errors.New(\"dialer not set\")\n}"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Implement a UDP-based trap listener for SNMP (Simple Network Management Protocol) messages, capable of receiving and processing traps/informs, with support for SNMPv3 security features and proper resource cleanup.\n\nStruct Description: TrapListener is a struct that manages a UDP listener for SNMP traps, handling incoming messages, security validation, and response generation.\n\nFields:\n- done: chan bool - Channel to signal completion of listener shutdown\n- listening: chan bool - Channel to signal when listener is active\n- Mutex: sync.Mutex - Mutex for thread-safe operations\n- Params: *GoSNMP - Configuration parameters for SNMP handling\n- OnNewTrap: TrapHandlerFunc - Callback function for new trap processing\n- CloseTimeout: time.Duration - Timeout for graceful shutdown\n- conn: *net.UDPConn - UDP connection object\n- proto: string - Protocol type (typically \"udp\")\n- usmStatsUnknownEngineIDsCount: uint32 - Counter for unknown engine IDs (SNMPv3)\n- finish: int32 - Atomic flag for shutdown state\n\nMethods:\n- NewTrapListener() -> *TrapListener - Creates and initializes a new TrapListener instance\n- Close() - Gracefully shuts down the listener and cleans up resources\n- SendUDP(packet *SnmpPacket, addr *net.UDPAddr) -> error - Sends an SNMP packet via UDP\n- listenUDP(addr string) -> error - Main listening loop for incoming traps\n- reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) -> error - Handles SNMPv3 engine ID mismatch reporting",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"time\"\n)\n\ntype TrapListener struct {\n\tdone      chan bool\n\tlistening chan bool\n\tsync.Mutex\n\n\tParams *GoSNMP\n\n\tOnNewTrap TrapHandlerFunc\n\n\tCloseTimeout time.Duration\n\n\tconn  *net.UDPConn\n\tproto string\n\n\tusmStatsUnknownEngineIDsCount uint32\n\n\tfinish int32\n}\n\nfunc NewTrapListener() *TrapListener {\n\ttl := &TrapListener{\n\t\tfinish:       0,\n\t\tdone:         make(chan bool),\n\t\tlistening:    make(chan bool, 1),\n\t\tCloseTimeout: defaultCloseTimeout,\n\t}\n\n\treturn tl\n}\n\nfunc (t *TrapListener) Close() {\n\tif atomic.CompareAndSwapInt32(&t.finish, 0, 1) {\n\t\tt.Lock()\n\t\tdefer t.Unlock()\n\n\t\tif t.conn == nil {\n\t\t\treturn\n\t\t}\n\n\t\tif err := t.conn.Close(); err != nil {\n\t\t\tt.Params.Logger.Printf(\"failed to Close() the TrapListener socket: %s\", err)\n\t\t}\n\n\t\tselect {\n\t\tcase <-t.done:\n\t\tcase <-time.After(t.CloseTimeout):\n\t\t\tt.Params.Logger.Printf(\"timeout while awaiting done signal on TrapListener Close()\")\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) SendUDP(packet *SnmpPacket, addr *net.UDPAddr) error {\n\tob, err := packet.marshalMsg()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error marshaling SnmpPacket: %w\", err)\n\t}\n\n\tcount, err := t.conn.WriteTo(ob, addr)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error sending SnmpPacket: %w\", err)\n\t}\n\n\tif count != len(ob) {\n\t\tt.Params.Logger.Printf(\"Failed to send all bytes of SnmpPacket!\\n\")\n\t}\n\treturn nil\n}\n\nfunc (t *TrapListener) listenUDP(addr string) error {\n\tudpAddr, err := net.ResolveUDPAddr(t.proto, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tt.conn, err = net.ListenUDP(udp, udpAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer t.conn.Close()\n\n\tt.listening <- true\n\n\tfor {\n\t\tswitch {\n\t\tcase atomic.LoadInt32(&t.finish) == 1:\n\t\t\tt.done <- true\n\t\t\treturn nil\n\n\t\tdefault:\n\t\t\tvar buf [4096]byte\n\t\t\trlen, remote, err := t.conn.ReadFromUDP(buf[:])\n\t\t\tif err != nil {\n\t\t\t\tif atomic.LoadInt32(&t.finish) == 1 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tt.Params.Logger.Printf(\"TrapListener: error in read %s\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tmsg := buf[:rlen]\n\t\t\ttrap, err := t.Params.UnmarshalTrap(msg, false)\n\t\t\tif err != nil {\n\t\t\t\tt.Params.Logger.Printf(\"TrapListener: error in UnmarshalTrap %s\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif trap.Version == Version3 && trap.SecurityModel == UserSecurityModel && t.Params.SecurityModel == UserSecurityModel {\n\t\t\t\tsecurityParams, ok := t.Params.SecurityParameters.(*UsmSecurityParameters)\n\t\t\t\tif !ok {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: Invalid SecurityParameters types\")\n\t\t\t\t}\n\t\t\t\tpacketSecurityParams, ok := trap.SecurityParameters.(*UsmSecurityParameters)\n\t\t\t\tif !ok {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: Invalid SecurityParameters types\")\n\t\t\t\t}\n\t\t\t\tsnmpEngineID := securityParams.AuthoritativeEngineID\n\t\t\t\tmsgAuthoritativeEngineID := packetSecurityParams.AuthoritativeEngineID\n\t\t\t\tif msgAuthoritativeEngineID != snmpEngineID {\n\t\t\t\t\tif len(msgAuthoritativeEngineID) < 5 || len(msgAuthoritativeEngineID) > 32 {\n\t\t\t\t\t\tatomic.AddUint32(&t.usmStatsUnknownEngineIDsCount, 1)\n\t\t\t\t\t\terr := t.reportAuthoritativeEngineID(trap, snmpEngineID, remote)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: %s\\n\", err)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tt.OnNewTrap(trap, remote)\n\n\t\t\tif trap.PDUType == InformRequest {\n\t\t\t\ttrap.PDUType = GetResponse\n\t\t\t\ttrap.Error = NoError\n\t\t\t\ttrap.ErrorIndex = 0\n\t\t\t\terr := t.SendUDP(trap, remote)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Params.Logger.Printf(\"TrapListener: %s\\n\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) error {\n\tnewSecurityParams, ok := trap.SecurityParameters.Copy().(*UsmSecurityParameters)\n\tif !ok {\n\t\treturn errors.New(\"unable to cast SecurityParams to UsmSecurityParameters\")\n\t}\n\tnewSecurityParams.AuthoritativeEngineID = snmpEngineID\n\treportPacket := trap\n\treportPacket.PDUType = Report\n\treportPacket.MsgFlags &= AuthPriv\n\treportPacket.SecurityParameters = newSecurityParams\n\treportPacket.Variables = []SnmpPDU{\n\t\t{\n\t\t\tName:  usmStatsUnknownEngineIDs,\n\t\t\tValue: int(atomic.LoadUint32(&t.usmStatsUnknownEngineIDsCount)),\n\t\t\tType:  Integer,\n\t\t},\n\t}\n\treturn t.SendUDP(reportPacket, addr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype TrapHandlerFunc func(packet *SnmpPacket, addr *net.UDPAddr)\n\ntype SnmpPacket struct {\n\tVersion int\n\tPayload []byte\n}\n\ntype TrapListener struct {\n\tdone           chan bool\n\tlistening      chan bool\n\tmu             sync.Mutex\n\tparams         *GoSNMP\n\tonNewTrap      TrapHandlerFunc\n\tcloseTimeout   time.Duration\n\tconn           *net.UDPConn\n\tproto          string\n\tusmStatsUnknownEngineIDsCount uint32\n\tfinish         int32\n}\n\nfunc NewTrapListener() *TrapListener {\n\treturn &TrapListener{\n\t\tdone:           make(chan bool),\n\t\tlistening:      make(chan bool),\n\t\tparams:         &GoSNMP{},\n\t\tcloseTimeout:   5 * time.Second,\n\t\tproto:          \"udp\",\n\t}\n}\n\nfunc (t *TrapListener) Close() {\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\n\tif atomic.CompareAndSwapInt32(&t.finish, 0, 1) {\n\t\tclose(t.done)\n\t\tt.conn.Close()\n\t}\n}\n\nfunc (t *TrapListener) SendUDP(packet *SnmpPacket, addr *net.UDPAddr) error {\n\tif packet == nil || addr == nil {\n\t\treturn fmt.Errorf(\"invalid packet or address\")\n\t}\n\n\tdata, err := packet.Marshal()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = t.conn.WriteTo(data, addr)\n\treturn err\n}\n\nfunc (t *TrapListener) listenUDP(addr string) error {\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\n\tvar err error\n\tt.conn, err = net.ListenUDP(t.proto, &net.UDPAddr{IP: net.ParseIP(addr), Port: 0})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tt.listening <- true\n\tdefer close(t.listening)\n\n\tbuffer := make([]byte, 65507)\n\tfor {\n\t\tselect {\n\t\tcase <-t.done:\n\t\t\treturn nil\n\t\tdefault:\n\t\t\tn, remote, err := t.conn.ReadFrom(buffer)\n\t\t\tif err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tpacket := &SnmpPacket{}\n\t\t\tif err := packet.Unmarshal(buffer[:n]); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif t.onNewTrap != nil {\n\t\t\t\tt.onNewTrap(packet, remote)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (t *TrapListener) reportAuthoritativeEngineID(trap *SnmpPacket, snmpEngineID string, addr *net.UDPAddr) error {\n\t// Implementation for handling SNMPv3 engine ID mismatch reporting\n\treturn nil\n}"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Create a UDP server in Go that handles incoming UDP packets, processes them, and manages connections using a cache system for tracking active connections. The server should support multiple ports with different encryption keys and handle both connection establishment and data packet processing.\n\nStruct Description: The Server struct represents a UDP server instance with TCP and UDP capabilities, including connection caching and encryption support for multiple ports.\n\nFields:\n\nTCPAddr: *net.TCPAddr - TCP address information for the server\nUDPAddr: *net.UDPAddr - UDP address information for the server\nTCPListen: *net.TCPListener - TCP listener instance\nUDPConn: *net.UDPConn - UDP connection instance\nCache: *cache.Cache - Cache for storing active connections\nCkv: *crypto.KV - Default encryption key-value pair\nPortCkv: map[int64]*crypto.KV - Map of port numbers to their respective encryption key-value pairs\n\nMethods:\n\nNewServer: (addr string, password string, portPassword []string) -> (*Server, error) - Creates a new Server instance with the given address, default password, and port-specific passwords\nRunUDPServer: () -> error - Starts the UDP server and begins listening for incoming packets\nUDPHandle: (addr *net.UDPAddr, b []byte) -> error - Handles incoming UDP packets, either establishing new connections or forwarding data to existing connections",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/gogo/protobuf/proto\"\n\tcache \"github.com/patrickmn/go-cache\"\n\t\"github.com/txthinking/crypto\"\n)\n\ntype Server struct {\n\tTCPAddr   *net.TCPAddr\n\tUDPAddr   *net.UDPAddr\n\tTCPListen *net.TCPListener\n\tUDPConn   *net.UDPConn\n\tCache     *cache.Cache\n\tCkv       *crypto.KV\n\tPortCkv   map[int64]*crypto.KV\n}\n\nfunc NewServer(addr, password string, portPassword []string) (*Server, error) {\n\tpc := make(map[int64]*crypto.KV)\n\tfor _, v := range portPassword {\n\t\tl := strings.Split(v, \" \")\n\t\tif len(l) != 2 {\n\t\t\treturn nil, errors.New(\"Wrong format: \" + v)\n\t\t}\n\t\tport, err := strconv.ParseInt(l[0], 10, 64)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tckv := &crypto.KV{\n\t\t\tAESKey: []byte(l[1]),\n\t\t}\n\t\tpc[port] = ckv\n\t}\n\ttaddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ts := &Server{\n\t\tTCPAddr: taddr,\n\t\tUDPAddr: uaddr,\n\t\tCache:   cache.New(cache.NoExpiration, cache.NoExpiration),\n\t\tCkv: &crypto.KV{\n\t\t\tAESKey: []byte(password),\n\t\t},\n\t\tPortCkv: pc,\n\t}\n\treturn s, nil\n}\n\nfunc (s *Server) RunUDPServer() error {\n\tvar err error\n\ts.UDPConn, err = net.ListenUDP(\"udp\", s.UDPAddr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\tn, addr, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func(addr *net.UDPAddr, b []byte) {\n\t\t\tif err := s.UDPHandle(addr, b); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t}\n\t\t}(addr, b[0:n])\n\t}\n\treturn nil\n}\n\nfunc (s *Server) UDPHandle(addr *net.UDPAddr, b []byte) error {\n\tp := &UDPPacket{}\n\tif err := proto.Unmarshal(b, p); err != nil {\n\t\treturn nil\n\t}\n\tif p.Address == \"\" {\n\t\tu, err := NewUDPServer(s, p, addr)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.Cache.Set(\"u:\"+strconv.FormatInt(p.Port, 10), u, cache.DefaultExpiration)\n\t\tdefer s.Cache.Delete(\"u:\" + strconv.FormatInt(p.Port, 10))\n\t\tif err := u.ListenAndServe(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\ti, ok := s.Cache.Get(\"u:\" + strconv.FormatInt(p.Port, 10))\n\tif !ok {\n\t\treturn nil\n\t}\n\tc := i.(*UDPServer)\n\tif err := c.HandlePacket(p); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n\t\"sync\"\n)\n\ntype Server struct {\n\tTCPAddr   *net.TCPAddr\n\tUDPAddr   *net.UDPAddr\n\tTCPListen *net.TCPListener\n\tUDPConn   *net.UDPConn\n\tCache     *cache.Cache\n\tCkv       *crypto.KV\n\tPortCkv   map[int64]*crypto.KV\n\tmu        sync.RWMutex\n}\n\nfunc NewServer(addr string, password string, portPassword []string) (*Server, error) {\n\tserver := &Server{\n\t\tCache:  cache.New(),\n\t\tCkv:    crypto.NewKV(password),\n\t\tPortCkv: make(map[int64]*crypto.KV),\n\t}\n\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserver.TCPAddr = tcpAddr\n\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserver.UDPAddr = udpAddr\n\n\tfor _, p := range portPassword {\n\t\tparts := splitPortPassword(p)\n\t\tif len(parts) != 2 {\n\t\t\treturn nil, errors.New(\"invalid port password format\")\n\t\t}\n\t\tport, _ := strconv.Atoi(parts[0])\n\t\tkey := parts[1]\n\t\tserver.PortCkv[int64(port)] = crypto.NewKV(key)\n\t}\n\n\ttcpListener, err := net.ListenTCP(\"tcp\", tcpAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserver.TCPListen = tcpListener\n\n\tudpConn, err := net.ListenUDP(\"udp\", udpAddr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tserver.UDPConn = udpConn\n\n\treturn server, nil\n}\n\nfunc (s *Server) RunUDPServer() error {\n\tbuffer := make([]byte, 1024)\n\tfor {\n\t\tn, addr, err := s.UDPConn.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error reading from UDP:\", err)\n\t\t\tcontinue\n\t\t}\n\t\tif err := s.UDPHandle(addr, buffer[:n]); err != nil {\n\t\t\tfmt.Println(\"Error handling UDP packet:\", err)\n\t\t}\n\t}\n}\n\nfunc (s *Server) UDPHandle(addr *net.UDPAddr, b []byte) error {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\n\tport := int64(addr.Port)\n\tckv := s.Ckv\n\tif ckv, ok := s.PortCkv[port]; ok {\n\t\tckv.Decrypt(b)\n\t}\n\n\tconn, exists := s.Cache.Get(addr.String())\n\tif exists {\n\t\tif conn, ok := conn.(*net.UDPConn); ok {\n\t\t\t_, err := conn.Write(b)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.New(\"connection not valid\")\n\t}\n\n\t// Handle connection establishment\n\tconn, err := net.DialUDP(\"udp\", nil, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.Cache.Set(addr.String(), conn)\n\treturn nil\n}\n\nfunc splitPortPassword(s string) []string {\n\treturn strings.Split(s, \":\")\n}"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: Implement a UDP server for handling SOCKS5 proxy requests, including UDP association and data relay between clients and a Hysteria proxy client.\n\nStruct Description: The Server struct represents a SOCKS5 proxy server with UDP support, handling client connections and relaying UDP traffic through a Hysteria proxy.\n\nFields:\n\nHyClient: [client.Client] - The Hysteria client used for establishing proxy connections\nAuthFunc: [func(username, password string) bool] - Authentication function for SOCKS5 clients\nDisableUDP: [bool] - Flag to disable UDP functionality\nEventLogger: [EventLogger] - Interface for logging server events\n\nMethods:\n\nhandleUDP: [func(conn net.Conn, req *socks5.Request)] - none - Handles a new UDP association request from a SOCKS5 client\nudpServer: [func(udpConn *net.UDPConn, hyUDP client.HyUDPConn)] -> [error] - Manages the UDP relay between client and Hysteria proxy\nsendUDPReply: [func(conn net.Conn, addr *net.UDPAddr)] -> [error] - Sends a UDP association reply to the SOCKS5 client\n\nInterface Description:\n\nEventLogger: Interface for logging UDP-related events\nMethods:\nUDPRequest: [func(addr net.Addr)] - Logs incoming UDP requests\nUDPError: [func(addr net.Addr, err error)] - Logs UDP-related errors",
    "Canonical_solution": "import (\n\t\"encoding/binary\"\n\t\"io\"\n\t\"net\"\n\n\t\"github.com/txthinking/socks5\"\n\n\t\"github.com/apernet/hysteria/core/v2/client\"\n)\n\ntype Server struct {\n\tHyClient    client.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks5.Request) {\n\tdefer conn.Close()\n\n\tif s.EventLogger != nil {\n\t\ts.EventLogger.UDPRequest(conn.RemoteAddr())\n\t}\n\tvar closeErr error\n\tdefer func() {\n\t\tif s.EventLogger != nil {\n\t\t\ts.EventLogger.UDPError(conn.RemoteAddr(), closeErr)\n\t\t}\n\t}()\n\n\thost, _, err := net.SplitHostPort(conn.LocalAddr().String())\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpAddr, err := net.ResolveUDPAddr(\"udp\", net.JoinHostPort(host, \"0\"))\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tudpConn, err := net.ListenUDP(\"udp\", udpAddr)\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer udpConn.Close()\n\n\thyUDP, err := s.HyClient.UDP()\n\tif err != nil {\n\t\t_ = sendSimpleReply(conn, socks5.RepServerFailure)\n\t\tcloseErr = err\n\t\treturn\n\t}\n\tdefer hyUDP.Close()\n\n\t_ = sendUDPReply(conn, udpConn.LocalAddr().(*net.UDPAddr))\n\n\terrChan := make(chan error, 2)\n\tgo func() {\n\t\terr := s.udpServer(udpConn, hyUDP)\n\t\terrChan <- err\n\t}()\n\tgo func() {\n\t\t_, err := io.Copy(io.Discard, conn)\n\t\terrChan <- err\n\t}()\n\tcloseErr = <-errChan\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tvar clientAddr *net.UDPAddr\n\tbuf := make([]byte, udpBufferSize)\n\tfor {\n\t\tn, cAddr, err := udpConn.ReadFromUDP(buf)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\td, err := socks5.NewDatagramFromBytes(buf[:n])\n\t\tif err != nil || d.Frag != 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif clientAddr == nil {\n\t\t\tclientAddr = cAddr\n\t\t\tgo func() {\n\t\t\t\tfor {\n\t\t\t\t\tbs, from, err := hyUDP.Receive()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t_ = udpConn.Close()\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tatyp, addr, port, err := socks5.ParseAddress(from)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tif atyp == socks5.ATYPDomain {\n\t\t\t\t\t\taddr = addr[1:]\n\t\t\t\t\t}\n\t\t\t\t\td := socks5.NewDatagram(atyp, addr, port, bs)\n\t\t\t\t\t_, _ = udpConn.WriteToUDP(d.Bytes(), clientAddr)\n\t\t\t\t}\n\t\t\t}()\n\t\t} else if !clientAddr.IP.Equal(cAddr.IP) || clientAddr.Port != cAddr.Port {\n\t\t\tcontinue\n\t\t}\n\t\t_ = hyUDP.Send(d.Data, d.Address())\n\t}\n}\n\nfunc sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\tvar atyp byte\n\tvar bndAddr, bndPort []byte\n\tif ip4 := addr.IP.To4(); ip4 != nil {\n\t\tatyp = socks5.ATYPIPv4\n\t\tbndAddr = ip4\n\t} else {\n\t\tatyp = socks5.ATYPIPv6\n\t\tbndAddr = addr.IP\n\t}\n\tbndPort = make([]byte, 2)\n\tbinary.BigEndian.PutUint16(bndPort, uint16(addr.Port))\n\tp := socks5.NewReply(socks5.RepSuccess, atyp, bndAddr, bndPort)\n\t_, err := p.WriteTo(conn)\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/xtls/xray-core/common/net\"\n\t\"github.com/xtls/xray-core/common/session\"\n\t\"github.com/xtls/xray-core/proxy/hysteria2\"\n\t\"github.com/xtls/xray-core/proxy/socks\"\n)\n\ntype Server struct {\n\tHyClient    *hysteria2.Client\n\tAuthFunc    func(username, password string) bool\n\tDisableUDP  bool\n\tEventLogger EventLogger\n}\n\nfunc (s *Server) handleUDP(conn net.Conn, req *socks.Request) {\n\tif s.DisableUDP {\n\t\tconn.Close()\n\t\treturn\n\t}\n\ts.EventLogger.UDPRequest(conn.RemoteAddr())\n\t\n\tudpAddr := &net.UDPAddr{\n\t\tPort: int(req.DstPort),\n\t\tZone: \"\",\n\t}\n\t\n\thyUDP, err := s.HyClient.DialUDP(udpAddr)\n\tif err != nil {\n\t\ts.EventLogger.UDPError(conn.RemoteAddr(), err)\n\t\tconn.Close()\n\t\treturn\n\t}\n\t\n\tgo s.udpServer(conn, hyUDP)\n}\n\nfunc (s *Server) udpServer(udpConn *net.UDPConn, hyUDP client.HyUDPConn) error {\n\tbuffer := make([]byte, 65535)\n\tfor {\n\t\tn, addr, err := udpConn.ReadFrom(buffer)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t\n\t\tif err := hyUDP.WriteTo(buffer[:n], addr); err != nil {\n\t\t\ts.EventLogger.UDPError(udpConn.RemoteAddr(), err)\n\t\t}\n\t}\n}\n\nfunc (s *Server) sendUDPReply(conn net.Conn, addr *net.UDPAddr) error {\n\treply := socks.NewUDPAssociationReply()\n\tif _, err := conn.Write(reply); err != nil {\n\t\treturn err\n\t}\n\t\n\tudpConn, err := net.ListenUDP(\"udp\", &net.UDPAddr{\n\t\tPort: int(1080),\n\t\tZone: \"\",\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\t\n\tudpConn.SetReadBuffer(65535)\n\t\n\tgo func() {\n\t\tbuffer := make([]byte, 65535)\n\t\tfor {\n\t\t\tn, remote, err := udpConn.ReadFrom(buffer)\n\t\t\tif err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\tif err := conn.WriteTo(buffer[:n], remote); err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n\t\n\treturn nil\n}\n\ntype EventLogger interface {\n\tUDPRequest(addr net.Addr)\n\tUDPError(addr net.Addr, err error)\n}"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Implement a UDP server in Go that handles incoming UDP packets, performs authentication checks, and manages communication with clients through specified ports. The server should include functionality for initialization, packet handling, listening for incoming data, and graceful shutdown.\n\nStruct Description: The UDPServer struct represents a UDP server instance that manages UDP connections, handles authentication, and processes incoming/outgoing packets. It maintains connection state and integrates with a parent Server instance.\n\nFields:\n\nServer: [*Server] - Reference to the parent Server instance containing shared resources\nUDPConn: [*net.UDPConn] - Active UDP connection for the server\nAddr: [*net.UDPAddr] - Address information for the server's UDP endpoint\n\nMethods:\n\nNewUDPServer: [func(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error)] -> [*UDPServer, error] - Initializes a new UDP server instance with authentication checks and port validation. Returns the server instance or error if initialization fails.\n\nListenAndServe: [func(s *UDPServer) error] -> [error] - Starts listening for incoming UDP packets and handles them in a loop until an error occurs or the server is shut down. Automatically closes the connection when finished.\n\nShutdown: [func(s *UDPServer)] -> [void] - Gracefully shuts down the UDP server by closing the active connection.\n\nHandlePacket: [func(s *UDPServer, p *UDPPacket) error] -> [error] - Processes an incoming UDP packet, either forwarding data to the specified address or updating the connection deadline. Returns error if processing fails.",
    "Canonical_solution": "import (\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/gogo/protobuf/proto\"\n)\n\ntype UDPServer struct {\n\tServer  *Server\n\tUDPConn *net.UDPConn\n\tAddr    *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tbye := func(err error) {\n\t\tp := &UDPPacket{\n\t\t\tAddress: err.Error(),\n\t\t}\n\t\tb, err1 := proto.Marshal(p)\n\t\tif err1 != nil {\n\t\t\tlog.Println(err1)\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n\tif p.Port == 0 {\n\t\tbye(errors.New(\"Missed port\"))\n\t\treturn nil, errors.New(addr.String() + \" missed port\")\n\t}\n\tif len(s.PortCkv) == 0 {\n\t\ttmp, err := s.Ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tif len(s.PortCkv) != 0 {\n\t\tckv, ok := s.PortCkv[p.Port]\n\t\tif !ok {\n\t\t\tbye(errors.New(\"Not allowed port\"))\n\t\t\treturn nil, errors.New(addr.String() + \" try to open not allowed UDP port: \" + strconv.FormatInt(p.Port, 10))\n\t\t}\n\t\ttmp, err := ckv.Decrypt(p.Key, \"Mr.2\", 3*60)\n\t\tif err != nil || tmp != \"UDPPacket\" {\n\t\t\tbye(errors.New(\"Try another password\"))\n\t\t\treturn nil, errors.New(addr.String() + \" Hacking\")\n\t\t}\n\t}\n\tuaddr, err := net.ResolveUDPAddr(\"udp\", \":\"+strconv.FormatInt(p.Port, 10))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc1, err := net.ListenUDP(\"udp\", uaddr)\n\tif err != nil {\n\t\tbye(err)\n\t\treturn nil, err\n\t}\n\tif err := c1.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tp = &UDPPacket{\n\t\tAddress: \"0\",\n\t}\n\tb, err := proto.Marshal(p)\n\tif err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\tif _, err := s.UDPConn.WriteToUDP(b, addr); err != nil {\n\t\tc1.Close()\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: c1,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tdefer s.UDPConn.Close()\n\tfor {\n\t\tb := make([]byte, 65536)\n\t\ti, a, err := s.UDPConn.ReadFromUDP(b)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\tp := &UDPPacket{\n\t\t\tAddress: a.String(),\n\t\t\tData:    b[0:i],\n\t\t}\n\t\tb, err = proto.Marshal(p)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.Server.UDPConn.WriteToUDP(b, s.Addr); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *UDPServer) Shutdown() {\n\ts.UDPConn.Close()\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\tif p.Address != \"0\" {\n\t\tuaddr, err := net.ResolveUDPAddr(\"udp\", p.Address)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif _, err := s.UDPConn.WriteToUDP(p.Data, uaddr); err != nil {\n\t\t\treturn nil\n\t\t}\n\t}\n\tif err := s.UDPConn.SetDeadline(time.Now().Add(time.Duration(10) * time.Second)); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 112,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n)\n\ntype UDPPacket struct {\n\tData []byte\n\tAddr *net.UDPAddr\n}\n\ntype Server struct{}\n\ntype UDPServer struct {\n\tServer    *Server\n\tUDPConn   *net.UDPConn\n\tAddr      *net.UDPAddr\n}\n\nfunc NewUDPServer(s *Server, p *UDPPacket, addr *net.UDPAddr) (*UDPServer, error) {\n\tif addr == nil {\n\t\treturn nil, errors.New(\"address cannot be nil\")\n\t}\n\tconn, err := net.ListenUDP(\"udp\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &UDPServer{\n\t\tServer:  s,\n\t\tUDPConn: conn,\n\t\tAddr:    addr,\n\t}, nil\n}\n\nfunc (s *UDPServer) ListenAndServe() error {\n\tbuffer := make([]byte, 65535)\n\tfor {\n\t\tn, addr, err := s.UDPConn.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpacket := &UDPPacket{\n\t\t\tData: buffer[:n],\n\t\t\tAddr: addr,\n\t\t}\n\t\tif err := s.HandlePacket(packet); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n}\n\nfunc (s *UDPServer) Shutdown() {\n\ts.UDPConn.Close()\n}\n\nfunc (s *UDPServer) HandlePacket(p *UDPPacket) error {\n\t// Placeholder for authentication and packet handling logic\n\t// For example, check if the packet is from an authorized client\n\t// If not, return an error\n\t// If yes, process the data as needed\n\t// Optionally, set a deadline on the connection\n\ts.UDPConn.SetReadDeadline(time.Now().Add(5 * time.Second))\n\treturn nil\n}"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: The provided code demonstrates a WebSocket client implementation in Go for tracker communication in a peer-to-peer network, handling WebSocket connections, message exchange, and WebRTC offer/answer negotiation.\n\nStruct Description: TrackerClient represents a client for interacting with a WebSocket tracker server, managing WebSocket connections, peer connections, and message handling.\n\nFields:\n\nUrl: string - The WebSocket tracker server URL to connect to\nGetAnnounceRequest: func(_ tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error) - Function to generate announce requests\nPeerId: [20]byte - The client's peer identifier\nOnConn: onDataChannelOpen - Callback for when data channels open\nLogger: log.Logger - Logger for client operations\nDialer: *websocket.Dialer - WebSocket dialer configuration\nmu: sync.Mutex - Mutex for thread-safe operations\ncond: sync.Cond - Condition variable for connection state changes\noutboundOffers: map[string]outboundOfferValue - Track outbound WebRTC offers\nwsConn: *websocket.Conn - Active WebSocket connection\nclosed: bool - Connection closed flag\npingTicker: *time.Ticker - Timer for sending ping messages\nWebsocketTrackerHttpHeader: func() http.Header - Function to generate WebSocket headers\nICEServers: []webrtc.ICEServer - List of ICE servers for WebRTC\nrtcPeerConns: map[string]*wrappedPeerConnection - Active WebRTC peer connections\n\nMethods:\n\ndoWebsocket: () -> error - Establishes and maintains WebSocket connection to tracker\ntrackerReadLoop: (*websocket.Conn) -> error - Handles incoming WebSocket messages\nwriteMessage: ([]byte) -> error - Writes message to WebSocket connection\nhandleOffer: (offerContext, string) -> error - Processes incoming WebRTC offers\nhandleAnswer: (string, webrtc.SessionDescription) -> void - Processes incoming WebRTC answers",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/anacrolix/log\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/pion/webrtc/v4\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\ntype TrackerClient struct {\n\tUrl                string\n\tGetAnnounceRequest func(_ tracker.AnnounceEvent, infoHash [20]byte) (tracker.AnnounceRequest, error)\n\tPeerId             [20]byte\n\tOnConn             onDataChannelOpen\n\tLogger             log.Logger\n\tDialer             *websocket.Dialer\n\n\tmu             sync.Mutex\n\tcond           sync.Cond\n\toutboundOffers map[string]outboundOfferValue\n\twsConn         *websocket.Conn\n\tclosed         bool\n\tpingTicker     *time.Ticker\n\n\tWebsocketTrackerHttpHeader func() http.Header\n\tICEServers                 []webrtc.ICEServer\n\n\trtcPeerConns map[string]*wrappedPeerConnection\n}\n\nfunc (tc *TrackerClient) doWebsocket() error {\n\ttc.mu.Lock()\n\ttc.mu.Unlock()\n\n\tvar header http.Header\n\tif tc.WebsocketTrackerHttpHeader != nil {\n\t\theader = tc.WebsocketTrackerHttpHeader()\n\t}\n\n\tc, _, err := tc.Dialer.Dial(tc.Url, header)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"dialing tracker: %w\", err)\n\t}\n\tdefer c.Close()\n\ttc.Logger.WithDefaultLevel(log.Info).Printf(\"connected\")\n\ttc.mu.Lock()\n\ttc.wsConn = c\n\ttc.cond.Broadcast()\n\ttc.mu.Unlock()\n\tcloseChan := make(chan struct{})\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-tc.pingTicker.C:\n\t\t\t\ttc.mu.Lock()\n\t\t\t\terr := c.WriteMessage(websocket.PingMessage, []byte{})\n\t\t\t\ttc.mu.Unlock()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\tcase <-closeChan:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\terr = tc.trackerReadLoop(tc.wsConn)\n\tclose(closeChan)\n\ttc.mu.Lock()\n\tc.Close()\n\ttc.mu.Unlock()\n\treturn err\n}\n\nfunc (tc *TrackerClient) trackerReadLoop(tracker *websocket.Conn) error {\n\tfor {\n\t\t_, message, err := tracker.ReadMessage()\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"read message error: %w\", err)\n\t\t}\n\t\ttc.Logger.Levelf(log.Debug, \"received message: %q\", message)\n\n\t\tvar ar AnnounceResponse\n\t\tif err := json.Unmarshal(message, &ar); err != nil {\n\t\t\ttc.Logger.WithDefaultLevel(log.Warning).Printf(\"error unmarshalling announce response: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\tswitch {\n\t\tcase ar.Offer != nil:\n\t\t\tih, err := jsonStringToInfoHash(ar.InfoHash)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.WithDefaultLevel(log.Warning).Printf(\"error decoding info_hash in offer: %v\", err)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\terr = tc.handleOffer(offerContext{\n\t\t\t\tSessDesc: *ar.Offer,\n\t\t\t\tId:       ar.OfferID,\n\t\t\t\tInfoHash: ih,\n\t\t\t}, ar.PeerID)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.Levelf(log.Error, \"handling offer for infohash %x: %v\", ih, err)\n\t\t\t}\n\t\tcase ar.Answer != nil:\n\t\t\ttc.handleAnswer(ar.OfferID, *ar.Answer)\n\t\tdefault:\n\t\t\t_, err := jsonStringToInfoHash(ar.InfoHash)\n\t\t\tif err != nil {\n\t\t\t\ttc.Logger.Levelf(log.Warning, \"unexpected announce response %q\", message)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (tc *TrackerClient) writeMessage(data []byte) error {\n\tfor tc.wsConn == nil {\n\t\tif tc.closed {\n\t\t\treturn fmt.Errorf(\"%T closed\", tc)\n\t\t}\n\t\ttc.cond.Wait()\n\t}\n\treturn tc.wsConn.WriteMessage(websocket.TextMessage, data)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "func (c *TrackerClient) doWebsocket() error {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif c.closed {\n\t\treturn nil\n\t}\n\n\theader := c.WebsocketTrackerHttpHeader()\n\tconn, _, err := c.Dialer.DialContext(context.Background(), c.Url, header)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.wsConn = conn\n\tc.cond.Locker().Lock()\n\tc.cond.Broadcast()\n\tc.cond.Locker().Unlock()\n\n\tgo c.trackerReadLoop(conn)\n\n\tc.pingTicker = time.NewTicker(30 * time.Second)\n\tgo func() {\n\t\tfor range c.pingTicker.C {\n\t\t\tif err := c.writeMessage([]byte(\"ping\")); err != nil {\n\t\t\t\tc.Close()\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn nil\n}"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Go function that establishes a WebSocket connection to a specified URL, sends a protobuf message as a JSON payload, and returns the WebSocket connection for further communication.\n\nFunction Description: The function `openWebSocket` establishes a secure WebSocket connection (wss://) to a given URL with optional custom headers. It authenticates using admin macaroon if no custom headers are provided, sends a protobuf message as JSON, and returns the active WebSocket connection. The caller is responsible for closing the connection.\n\nInput:\n- `node` [*node.HarnessNode] - Node configuration containing REST address and authentication details\n- `url` [string] - The endpoint path for the WebSocket connection\n- `method` [string] - The method parameter to include in the query string\n- `req` [proto.Message] - The protobuf message to send as initial payload\n- `customHeader` [http.Header] - Optional custom HTTP headers for the request\n\nOutput:\n- [*websocket.Conn] - Established WebSocket connection for bidirectional communication\n- [error] - Error if any step in the connection process fails",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/lightningnetwork/lnd/lnrpc\"\n\t\"github.com/lightningnetwork/lnd/lntest/node\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nvar (\n\twebSocketDialer = &websocket.Dialer{\n\t\tHandshakeTimeout: time.Second,\n\t\tTLSClientConfig:  insecureTransport.TLSClientConfig,\n\t}\n\tcloseMsg = websocket.FormatCloseMessage(\n\t\twebsocket.CloseNormalClosure, \"done\",\n\t)\n)\n\nfunc openWebSocket(node *node.HarnessNode, url, method string,\n\treq proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\n\theader := customHeader\n\tif header == nil {\n\t\theader = make(http.Header)\n\t\tif err := addAdminMacaroon(node, header); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tfullURL := fmt.Sprintf(\n\t\t\"wss://%s%s?method=%s\", node.Cfg.RESTAddr(), url, method,\n\t)\n\tconn, resp, err := webSocketDialer.Dial(fullURL, header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() { _ = resp.Body.Close() }()\n\n\treqMsg, err := lnrpc.RESTJsonMarshalOpts.Marshal(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = conn.WriteMessage(websocket.TextMessage, reqMsg)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn conn, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 117,
    "wrong_result": "func openWebSocket(node *node.HarnessNode, url string, method string, req proto.Message, customHeader http.Header) (*websocket.Conn, error) {\n\tconn, _, err := websocket.DefaultDialer.Dial(\"wss://\"+node.RestAddress()+url+\"?method=\"+method, customHeader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif customHeader == nil {\n\t\tmacaroon := node.AdminMacaroon()\n\t\tif macaroon != \"\" {\n\t\t\tif err := sendMacaroon(conn, macaroon); err != nil {\n\t\t\t\tconn.Close()\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\tmsg, err := proto.Marshal(req)\n\tif err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\tif err := conn.WriteMessage(websocket.TextMessage, msg); err != nil {\n\t\tconn.Close()\n\t\treturn nil, err\n\t}\n\treturn conn, nil\n}"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: The task involves creating a WebSocket client in Go that can establish secure connections, handle protocol negotiation, and manage message transmission between client and server. The solution should support TLS configuration, proxy settings, and proper connection cleanup.\n\nStruct Description: The RoundTripper struct implements http.RoundTripper interface to handle WebSocket connections with additional capabilities for Kubernetes API server communication. It manages WebSocket connections with TLS support and proxy configuration.\n\nFields:\n- TLSConfig: *tls.Config - Configuration for TLS/SSL connections\n- Proxier: func(req *http.Request) (*url.URL, error) - Function to determine proxy for requests\n- Conn: *gwebsocket.Conn - Active WebSocket connection\n\nMethods:\n- Connection: () -> *gwebsocket.Conn - Returns the active WebSocket connection\n- DataBufferSize: () -> int - Returns the buffer size for data transmission (32KB by default)\n- TLSClientConfig: () -> *tls.Config - Returns the TLS configuration\n- RoundTrip: (*http.Request) -> (*http.Response, error) - Main method that establishes WebSocket connection, handles protocol negotiation, and returns the HTTP response\n\nAdditional Function:\n- RoundTripperFor: (*restclient.Config) -> (http.RoundTripper, ConnectionHolder, error) - Factory function that creates a configured RoundTripper instance with proper TLS and proxy settings from Kubernetes client configuration",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tgwebsocket \"github.com/gorilla/websocket\"\n\t\"k8s.io/apimachinery/pkg/util/httpstream\"\n\t\"k8s.io/apimachinery/pkg/util/httpstream/wsstream\"\n\tutilnet \"k8s.io/apimachinery/pkg/util/net\"\n\trestclient \"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/transport\"\n)\n\ntype RoundTripper struct {\n\tTLSConfig *tls.Config\n\tProxier   func(req *http.Request) (*url.URL, error)\n\tConn      *gwebsocket.Conn\n}\n\nfunc (rt *RoundTripper) Connection() *gwebsocket.Conn {\n\treturn rt.Conn\n}\n\nfunc (rt *RoundTripper) DataBufferSize() int {\n\treturn 32 * 1024\n}\n\nfunc (rt *RoundTripper) TLSClientConfig() *tls.Config {\n\treturn rt.TLSConfig\n}\n\nfunc (rt *RoundTripper) RoundTrip(request *http.Request) (retResp *http.Response, retErr error) {\n\tdefer func() {\n\t\tif request.Body != nil {\n\t\t\terr := request.Body.Close()\n\t\t\tif retErr == nil {\n\t\t\t\tretErr = err\n\t\t\t}\n\t\t}\n\t}()\n\n\tprotocolVersions := request.Header[wsstream.WebSocketProtocolHeader]\n\tdelete(request.Header, wsstream.WebSocketProtocolHeader)\n\n\tdialer := gwebsocket.Dialer{\n\t\tProxy:           rt.Proxier,\n\t\tTLSClientConfig: rt.TLSConfig,\n\t\tSubprotocols:    protocolVersions,\n\t\tReadBufferSize:  rt.DataBufferSize() + 1024,\n\t\tWriteBufferSize: rt.DataBufferSize() + 1024,\n\t}\n\tswitch request.URL.Scheme {\n\tcase \"https\":\n\t\trequest.URL.Scheme = \"wss\"\n\tcase \"http\":\n\t\trequest.URL.Scheme = \"ws\"\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown url scheme: %s\", request.URL.Scheme)\n\t}\n\twsConn, resp, err := dialer.DialContext(request.Context(), request.URL.String(), request.Header)\n\tif err != nil {\n\t\tif errors.Is(err, gwebsocket.ErrBadHandshake) {\n\t\t\tcause := err\n\t\t\tif resp != nil && len(resp.Status) > 0 {\n\t\t\t\tdefer resp.Body.Close()\n\t\t\t\tcause = fmt.Errorf(\"%w (%s)\", err, resp.Status)\n\t\t\t\tresponseErrorBytes, readErr := io.ReadAll(io.LimitReader(resp.Body, 64*1024))\n\t\t\t\tif readErr != nil {\n\t\t\t\t\tcause = fmt.Errorf(\"%w: unable to read error from server response\", cause)\n\t\t\t\t} else {\n\t\t\t\t\tresponseError := strings.TrimSpace(string(responseErrorBytes))\n\t\t\t\t\tif len(responseError) > 0 {\n\t\t\t\t\t\tif obj, _, decodeErr := statusCodecs.UniversalDecoder().Decode(responseErrorBytes, nil, &metav1.Status{}); decodeErr == nil {\n\t\t\t\t\t\t\tif status, ok := obj.(*metav1.Status); ok {\n\t\t\t\t\t\t\t\tcause = &apierrors.StatusError{ErrStatus: *status}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcause = fmt.Errorf(\"%w: %s\", cause, responseError)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil, &httpstream.UpgradeFailureError{Cause: cause}\n\t\t}\n\t\treturn nil, err\n\t}\n\n\tfoundProtocol := false\n\tfor _, protocolVersion := range protocolVersions {\n\t\tif protocolVersion == wsConn.Subprotocol() {\n\t\t\tfoundProtocol = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif !foundProtocol {\n\t\twsConn.Close()\n\t\treturn nil, &httpstream.UpgradeFailureError{Cause: fmt.Errorf(\"invalid protocol, expected one of %q, got %q\", protocolVersions, wsConn.Subprotocol())}\n\t}\n\n\trt.Conn = wsConn\n\n\treturn resp, nil\n}\n\nfunc RoundTripperFor(config *restclient.Config) (http.RoundTripper, ConnectionHolder, error) {\n\ttransportCfg, err := config.TransportConfig()\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\ttlsConfig, err := transport.TLSConfigFor(transportCfg)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tproxy := config.Proxy\n\tif proxy == nil {\n\t\tproxy = utilnet.NewProxierWithNoProxyCIDR(http.ProxyFromEnvironment)\n\t}\n\n\tupgradeRoundTripper := &RoundTripper{\n\t\tTLSConfig: tlsConfig,\n\t\tProxier:   proxy,\n\t}\n\twrapper, err := transport.HTTPWrappersForConfig(transportCfg, upgradeRoundTripper)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\treturn wrapper, upgradeRoundTripper, nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"k8s.io/client-go/rest\"\n)\n\ntype RoundTripper struct {\n\tTLSConfig *tls.Config\n\tProxier   func(req *http.Request) (*url.URL, error)\n\tConn      *websocket.Conn\n}\n\nfunc (r *RoundTripper) Connection() *websocket.Conn {\n\treturn r.Conn\n}\n\nfunc (r *RoundTripper) DataBufferSize() int {\n\treturn 32768\n}\n\nfunc (r *RoundTripper) TLSClientConfig() *tls.Config {\n\treturn r.TLSConfig\n}\n\nfunc (r *RoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n\tif req.Header.Get(\"Upgrade\") != \"WebSocket\" {\n\t\treturn nil, fmt.Errorf(\"upgrade header not present\")\n\t}\n\n\t// Determine proxy\n\tproxyURL, err := r.Proxier(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Dial through proxy if needed\n\tvar dialer websocket.Dialer\n\tif proxyURL != nil {\n\t\tdialer.Proxy = func(u *url.URL) (net.Conn, error) {\n\t\t\tconn, err := net.Dial(\"tcp\", proxyURL.Host)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn conn, nil\n\t\t}\n\t}\n\n\t// Establish WebSocket connection\n\tconn, _, err := dialer.Dial(req.URL.String(), req.Header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tr.Conn = conn\n\treturn &http.Response{\n\t\tStatusCode: http.StatusSwitchingProtocols,\n\t\tProto:      \"HTTP/1.1\",\n\t\tProtoMajor: 1,\n\t\tProtoMinor: 1,\n\t}, nil\n}\n\ntype ConnectionHolder struct {\n\tConn *websocket.Conn\n}\n\nfunc RoundTripperFor(config *restclient.Config) (http.RoundTripper, ConnectionHolder, error) {\n\ttlsConfig := &tls.Config{}\n\tif config.TLSClientConfig != nil {\n\t\t*tlsConfig = *config.TLSClientConfig\n\t}\n\n\tproxier := func(req *http.Request) (*url.URL, error) {\n\t\tif config.Proxy != nil {\n\t\t\treturn config.Proxy(req)\n\t\t}\n\t\treturn nil, nil\n\t}\n\n\trt := &RoundTripper{\n\t\tTLSConfig: tlsConfig,\n\t\tProxier:   proxier,\n\t}\n\n\treturn rt, ConnectionHolder{Conn: rt.Conn}, nil\n}"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Create a WebSocket client connection wrapper in Go that provides a simplified interface for reading and writing binary messages over a WebSocket connection, with proper error handling and connection management.\n\nStruct Description: The Conn struct wraps a WebSocket connection and provides io.Reader/io.Writer compatible methods for binary message communication, along with standard net.Conn interface methods.\n\nFields:\nwsConn: *websocket.Conn - The underlying WebSocket connection\nreader: io.Reader - Current message reader for streaming message content\n\nMethods:\nNew: (wsConn *websocket.Conn) -> *Conn - Creates a new Conn wrapper instance\nDial: (ctx context.Context, url string, opts ...DialOption) -> (*Conn, error) - Establishes a new WebSocket connection with optional configuration\nRead: (b []byte) -> (int, error) - Reads binary data from the WebSocket connection (implements io.Reader)\nWrite: (b []byte) -> (int, error) - Writes binary data to the WebSocket connection (implements io.Writer)\nClose: () -> error - Closes the WebSocket connection\nLocalAddr: () -> net.Addr - Returns local network address\nRemoteAddr: () -> net.Addr - Returns remote network address\nSetDeadline: (t time.Time) -> error - Sets both read and write deadlines\nSetReadDeadline: (t time.Time) -> error - Sets read deadline\nSetWriteDeadline: (t time.Time) -> error - Sets write deadline",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype Conn struct {\n\twsConn *websocket.Conn\n\treader io.Reader\n}\n\nfunc New(wsConn *websocket.Conn) *Conn {\n\treturn &Conn{\n\t\twsConn: wsConn,\n\t\treader: nil,\n\t}\n}\n\nfunc Dial(ctx context.Context, url string, opts ...DialOption) (*Conn, error) {\n\toptions := dialOptions{}\n\tfor _, o := range opts {\n\t\to.apply(&options)\n\t}\n\n\tdialer := &websocket.Dialer{\n\t\tHandshakeTimeout: 60 * time.Second,\n\t}\n\n\tif options.tlsConfig != nil {\n\t\tdialer.TLSClientConfig = options.tlsConfig\n\t}\n\n\theader := make(http.Header)\n\tif options.token != \"\" {\n\t\theader.Set(\"Authorization\", \"Bearer \"+options.token)\n\t}\n\n\twsConn, resp, err := dialer.DialContext(\n\t\tctx, url, header,\n\t)\n\tif err == nil {\n\t\treturn New(wsConn), nil\n\t}\n\tif resp == nil {\n\t\treturn nil, NewRetryableError(err)\n\t}\n\tdefer resp.Body.Close()\n\n\terr = fmt.Errorf(\"%d: %w\", resp.StatusCode, err)\n\tif _, ok := retryableStatusCodes[resp.StatusCode]; ok {\n\t\treturn nil, NewRetryableError(err)\n\t}\n\treturn nil, err\n}\n\nfunc (c *Conn) Read(b []byte) (int, error) {\n\tfor {\n\t\tif c.reader == nil {\n\t\t\tmt, r, err := c.wsConn.NextReader()\n\t\t\tif err != nil {\n\t\t\t\tvar closeErr *websocket.CloseError\n\t\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\t\treturn 0, net.ErrClosed\n\t\t\t\t}\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tif mt != websocket.BinaryMessage {\n\t\t\t\treturn 0, fmt.Errorf(\"unexpected message type: %d\", mt)\n\t\t\t}\n\t\t\tc.reader = r\n\t\t}\n\n\t\tn, err := c.reader.Read(b)\n\t\tif n > 0 {\n\t\t\tif err != nil {\n\t\t\t\tc.reader = nil\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\terr = nil\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n, err\n\t\t}\n\t\tif err != io.EOF {\n\t\t\tvar closeErr *websocket.CloseError\n\t\t\tif errors.As(err, &closeErr) {\n\t\t\t\treturn 0, net.ErrClosed\n\t\t\t}\n\t\t\treturn 0, err\n\t\t}\n\n\t\tc.reader = nil\n\t}\n}\n\nfunc (c *Conn) Write(b []byte) (int, error) {\n\tif err := c.wsConn.WriteMessage(websocket.BinaryMessage, b); err != nil {\n\t\tvar closeErr *websocket.CloseError\n\t\tif errors.As(err, &closeErr) {\n\t\t\treturn 0, net.ErrClosed\n\t\t}\n\t\treturn 0, err\n\t}\n\treturn len(b), nil\n}\n\nfunc (c *Conn) Close() error {\n\treturn c.wsConn.Close()\n}\n\nfunc (c *Conn) LocalAddr() net.Addr {\n\treturn c.wsConn.LocalAddr()\n}\n\nfunc (c *Conn) RemoteAddr() net.Addr {\n\treturn c.wsConn.RemoteAddr()\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\tif err := c.SetReadDeadline(t); err != nil {\n\t\treturn err\n\t}\n\treturn c.SetWriteDeadline(t)\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\treturn c.wsConn.SetReadDeadline(t)\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\treturn c.wsConn.SetWriteDeadline(t)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 117,
    "wrong_result": "package websocket\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"errors\"\n\t\"net\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\ntype DialOption func(*websocket.DialOptions)\n\nfunc WithSubprotocols(subprotocols []string) DialOption {\n\treturn func(d *websocket.DialOptions) {\n\t\td.Subprotocols = subprotocols\n\t}\n}\n\nfunc WithHeader(header http.Header) DialOption {\n\treturn func(d *websocket.DialOptions) {\n\t\td.Header = header\n\t}\n}\n\nfunc WithReadLimit(limit int64) DialOption {\n\treturn func(d *websocket.DialOptions) {\n\t\td.ReadLimit = limit\n\t}\n}\n\ntype Conn struct {\n\twsConn *websocket.Conn\n\treader *bufio.Reader\n}\n\nfunc New(wsConn *websocket.Conn) *Conn {\n\treturn &Conn{\n\t\twsConn: wsConn,\n\t\treader: bufio.NewReader(wsConn),\n\t}\n}\n\nfunc (c *Conn) Dial(ctx context.Context, url string, opts ...DialOption) (*Conn, error) {\n\tdialer := &websocket.Dialer{}\n\tfor _, opt := range opts {\n\t\topt(dialer)\n\t}\n\tconn, _, err := dialer.DialContext(ctx, url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn New(conn), nil\n}\n\nfunc (c *Conn) Read(b []byte) (int, error) {\n\tif c.wsConn == nil {\n\t\treturn 0, errors.New(\"connection closed\")\n\t}\n\t_, message, err := c.wsConn.ReadMessage()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tn, err := c.reader.Read(b)\n\tif err != nil {\n\t\treturn n, err\n\t}\n\treturn n, nil\n}\n\nfunc (c *Conn) Write(b []byte) (int, error) {\n\tif c.wsConn == nil {\n\t\treturn 0, errors.New(\"connection closed\")\n\t}\n\treturn c.wsConn.WriteMessage(websocket.BinaryMessage, b)\n}\n\nfunc (c *Conn) Close() error {\n\tif c.wsConn != nil {\n\t\treturn c.wsConn.Close()\n\t}\n\treturn nil\n}\n\nfunc (c *Conn) LocalAddr() net.Addr {\n\tif c.wsConn != nil {\n\t\treturn c.wsConn.LocalAddr()\n\t}\n\treturn nil\n}\n\nfunc (c *Conn) RemoteAddr() net.Addr {\n\tif c.wsConn != nil {\n\t\treturn c.wsConn.RemoteAddr()\n\t}\n\treturn nil\n}\n\nfunc (c *Conn) SetDeadline(t time.Time) error {\n\tif c.wsConn != nil {\n\t\treturn c.wsConn.SetDeadline(t)\n\t}\n\treturn nil\n}\n\nfunc (c *Conn) SetReadDeadline(t time.Time) error {\n\tif c.wsConn != nil {\n\t\treturn c.wsConn.SetReadDeadline(t)\n\t}\n\treturn nil\n}\n\nfunc (c *Conn) SetWriteDeadline(t time.Time) error {\n\tif c.wsConn != nil {\n\t\treturn c.wsConn.SetWriteDeadline(t)\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a WebSocket server handler for a DERP (Distributed Encrypted Relay for Packets) server using the nhooyr.io/websocket library in Go. The handler should upgrade HTTP connections to WebSocket, enforce protocol requirements, and establish the connection for DERP communication.\n\nStruct Description: The DERPServer struct represents a DERP server instance that handles WebSocket connections for relaying encrypted packets between Tailscale nodes.\n\nFields:\nkey: [key.NodePrivate] - The private key used for node authentication\ntailscaleDERP: [*derp.Server] - The underlying DERP server instance that manages relay connections\n\nMethods:\nserveWebsocket: [Name](writer http.ResponseWriter, req *http.Request) -> [void] - Handles incoming HTTP requests by upgrading them to WebSocket connections. Validates the subprotocol, creates a network connection wrapper around the WebSocket, and passes it to the DERP server for handling.\n\nInput:\n- writer: [http.ResponseWriter] - The HTTP response writer\n- req: [*http.Request] - The incoming HTTP request\n\nOutput:\n- None (handles connection directly, may write error responses to writer)",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/coder/websocket\"\n\t\"tailscale.com/derp\"\n\t\"tailscale.com/net/wsconn\"\n)\n\ntype DERPServer struct {\n\tkey           key.NodePrivate\n\ttailscaleDERP *derp.Server\n}\n\nfunc (d *DERPServer) serveWebsocket(writer http.ResponseWriter, req *http.Request) {\n\twebsocketConn, err := websocket.Accept(writer, req, &websocket.AcceptOptions{\n\t\tSubprotocols:   []string{\"derp\"},\n\t\tOriginPatterns: []string{\"*\"},\n\t\tCompressionMode: websocket.CompressionDisabled,\n\t})\n\tif err != nil {\n\t\twriter.Header().Set(\"Content-Type\", \"text/plain\")\n\t\twriter.WriteHeader(http.StatusInternalServerError)\n\t\t_, err = writer.Write([]byte(\"Failed to upgrade websocket request\"))\n\t\treturn\n\t}\n\tdefer websocketConn.Close(websocket.StatusInternalError, \"closing\")\n\tif websocketConn.Subprotocol() != \"derp\" {\n\t\twebsocketConn.Close(websocket.StatusPolicyViolation, \"client must speak the derp subprotocol\")\n\t\treturn\n\t}\n\n\twc := wsconn.NetConn(req.Context(), websocketConn, websocket.MessageBinary, req.RemoteAddr)\n\tbrw := bufio.NewReadWriter(bufio.NewReader(wc), bufio.NewWriter(wc))\n\td.tailscaleDERP.Accept(req.Context(), wc, brw, req.RemoteAddr)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "package derp\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/tailscale/derp\"\n\t\"nhooyr.io/websocket\"\n)\n\ntype DERPServer struct {\n\tkey           key.NodePrivate\n\ttailscaleDERP *derp.Server\n}\n\nfunc (s *DERPServer) serveWebsocket(writer http.ResponseWriter, req *http.Request) {\n\tif req.Method != \"GET\" {\n\t\thttp.Error(writer, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tupgrade := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\n\tconn, err := upgrade.Upgrade(writer, req, nil)\n\tif err != nil {\n\t\thttp.Error(writer, \"Failed to upgrade\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\t// Validate subprotocol\n\tsubprotocols := []string{\"derp\"}\n\tif len(req.Header.Get(\"Sec-WebSocket-Protocol\")) == 0 {\n\t\thttp.Error(writer, \"Missing subprotocol\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tproto := req.Header.Get(\"Sec-WebSocket-Protocol\")\n\tif !contains(subprotocols, proto) {\n\t\thttp.Error(writer, \"Invalid subprotocol\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\t// Create network connection wrapper\n\tnetworkConn := &websocketNetworkConn{\n\t\tconn: conn,\n\t}\n\n\t// Pass to DERP server\n\ts.tailscaleDERP.Handle(networkConn, s.key)\n}\n\nfunc contains(slice []string, item string) bool {\n\tfor _, s := range slice {\n\t\tif s == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\ntype websocketNetworkConn struct {\n\tconn *websocket.Conn\n}\n\nfunc (w *websocketNetworkConn) Read(b []byte) (n int, err error) {\n\t_, message, err := w.conn.ReadMessage()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tcopy(b, message)\n\treturn len(message), nil\n}\n\nfunc (w *websocketNetworkConn) Write(b []byte) (n int, err error) {\n\terr = w.conn.WriteMessage(websocket.BinaryMessage, b)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn len(b), nil\n}\n\nfunc (w *websocketNetworkConn) Close() error {\n\treturn w.conn.Close()\n}"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: The task involves creating a WebSocket handler in Go that upgrades HTTP connections to WebSocket connections, manages the connection lifecycle, and handles message exchange between client and server.\n\nStruct Description: The WsHandler struct is responsible for managing WebSocket connections, including upgrading HTTP connections, handling incoming messages, and managing connection state.\n\nFields:\n- svcCtx: *svc.ServiceContext - A reference to the service context containing dependencies and configuration\n\nMethods:\n- Upgrade: (ginCtx *gin.Context) -> void - Upgrades an HTTP connection to a WebSocket connection and manages the connection lifecycle\n  Input: ginCtx *gin.Context - The Gin context containing HTTP request and response objects\n  Output: None (handles connection directly)\n\n- onReceive: (ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) -> (pb.ResponseCode, error) - Handles incoming WebSocket messages\n  Input: \n    - ctx context.Context - Context for the operation\n    - connection *gatewayservicelogic.Connection - The WebSocket connection object\n    - typ websocket.MessageType - Type of the WebSocket message\n    - msg []byte - The message content\n  Output:\n    - pb.ResponseCode - Response code indicating processing result\n    - error - Any error that occurred during processing",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\tgatewayservicelogic \"github.com/cherish-chat/xxim-server/app/gateway/internal/logic/gatewayservice\"\n\t\"github.com/cherish-chat/xxim-server/common/pb\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\toteltrace \"go.opentelemetry.io/otel/trace\"\n\t\"google.golang.org/protobuf/proto\"\n\t\"io\"\n\t\"math\"\n\t\"nhooyr.io/websocket\"\n\t\"strings\"\n)\n\ntype WsHandler struct {\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc (h *WsHandler) Upgrade(ginCtx *gin.Context) {\n\tr := ginCtx.Request\n\tw := ginCtx.Writer\n\tlogger := logx.WithContext(r.Context())\n\theaders := make(map[string]string)\n\tfor k, v := range r.Header {\n\t\tif len(v) > 0 {\n\t\t\theaders[k] = v[0]\n\t\t}\n\t}\n\theader := &pb.RequestHeader{\n\t\tClientIp: utils.Http.GetClientIP(r),\n\t}\n\tcompressionMode := websocket.CompressionNoContextTakeover\n\tif strings.Contains(r.UserAgent(), \"Safari\") {\n\t\tcompressionMode = websocket.CompressionDisabled\n\t}\n\tc, err := websocket.Accept(w, r, &websocket.AcceptOptions{\n\t\tSubprotocols:         nil,\n\t\tInsecureSkipVerify:   true,\n\t\tOriginPatterns:       nil,\n\t\tCompressionMode:      compressionMode,\n\t\tCompressionThreshold: 0,\n\t})\n\tif err != nil {\n\t\tif r.URL.Path == \"/\" {\n\t\t\treturn\n\t\t}\n\t\tlogger.Errorf(\"failed to accept websocket connection: %v\", err)\n\t\treturn\n\t}\n\tc.SetReadLimit(math.MaxInt32)\n\tbeforeConnectResp, err := h.svcCtx.CallbackService.UserBeforeConnect(r.Context(), &pb.UserBeforeConnectReq{Header: header})\n\tif err != nil {\n\t\tlogger.Errorf(\"beforeConnect error: %v\", err)\n\t\tc.Close(websocket.StatusCode(pb.WebsocketCustomCloseCode_CloseCodeServerInternalError), err.Error())\n\t\treturn\n\t}\n\tif !beforeConnectResp.Success {\n\t\tc.Close(websocket.StatusCode(beforeConnectResp.CloseCode), beforeConnectResp.CloseReason)\n\t\treturn\n\t}\n\n\theader.UserId = beforeConnectResp.UserId\n\n\tdefer c.Close(websocket.StatusInternalError, \"\")\n\n\tctx, cancelFunc := context.WithCancel(r.Context())\n\tconnection := gatewayservicelogic.NewWebsocketConnect(ctx, header, c)\n\tdefer func() {\n\t\tgatewayservicelogic.ConnectionLogic.OnDisconnect(connection)\n\t}()\n\tgo func() {\n\t\tdefer cancelFunc()\n\t\tfor {\n\t\t\tlogger.Debugf(\"start read\")\n\t\t\ttyp, msg, err := c.Read(ctx)\n\t\t\tif err != nil {\n\t\t\t\tif errors.Is(err, io.EOF) {\n\t\t\t\t} else if websocket.CloseStatus(err) == websocket.StatusNormalClosure ||\n\t\t\t\t\twebsocket.CloseStatus(err) == websocket.StatusGoingAway {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else if strings.Contains(err.Error(), \"connection reset by peer\") {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else if strings.Contains(err.Error(), \"corrupt input\") {\n\t\t\t\t\tlogx.Infof(\"websocket closed: %v\", err)\n\t\t\t\t} else {\n\t\t\t\t\tlogx.Errorf(\"failed to read message: %v\", err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tgo func() {\n\t\t\t\t_, _ = h.onReceive(ctx, connection, typ, msg)\n\t\t\t}()\n\t\t}\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (h *WsHandler) onReceive(ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) (pb.ResponseCode, error) {\n\tvar aesKey []byte\n\tvar aesIv []byte\n\tvar isEncrypt bool\n\n\tconnection.PublicKeyLock.RLock()\n\t{\n\t\tif len(connection.SharedSecret) == 0 {\n\t\t\tisEncrypt = false\n\t\t} else {\n\t\t\tisEncrypt = true\n\t\t\taesKey = connection.SharedSecret[:]\n\t\t\taesIv = connection.SharedSecret[8:24]\n\t\t}\n\t}\n\tconnection.PublicKeyLock.RUnlock()\n\n\tif isEncrypt {\n\t\tvar err error\n\t\tmsg, err = utils.Aes.Decrypt(aesKey, aesIv, msg)\n\t\tif err != nil {\n\t\t\tlogx.Errorf(\"decrypt message error: %v\", err)\n\t\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", err)\n\t\t}\n\t}\n\n\tapiRequest := &pb.GatewayApiRequest{}\n\terr := proto.Unmarshal(msg, apiRequest)\n\tif err != nil {\n\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", err)\n\t}\n\tapiRequest.Header = connection.GetHeader()\n\troute, ok := universalRouteMap[apiRequest.Path]\n\ttracer := otel.Tracer(common.TraceName)\n\tpropagator := otel.GetTextMapPropagator()\n\tspanName := apiRequest.Path\n\tcarrier := propagation.MapCarrier{\n\t\t\"appId\":       apiRequest.Header.AppId,\n\t\t\"userId\":      apiRequest.Header.UserId,\n\t\t\"clientIp\":    apiRequest.Header.ClientIp,\n\t\t\"installId\":   apiRequest.Header.InstallId,\n\t\t\"platform\":    apiRequest.Header.Platform.String(),\n\t\t\"deviceModel\": apiRequest.Header.DeviceModel,\n\t\t\"osVersion\":   apiRequest.Header.OsVersion,\n\t\t\"appVersion\":  apiRequest.Header.AppVersion,\n\t\t\"connectTime\": connection.ConnectedTime.Format(\"2006-01-02 15:04:05\"),\n\t\t\"extra\":       apiRequest.Header.Extra,\n\t}\n\tspanCtx := propagator.Extract(ctx, carrier)\n\tspanCtx, span := tracer.Start(spanCtx, spanName,\n\t\toteltrace.WithSpanKind(oteltrace.SpanKindServer),\n\t)\n\tdefer span.End()\n\tpropagator.Inject(spanCtx, carrier)\n\tif !ok {\n\t\tlogx.Errorf(\"path 404 not found: %s\", apiRequest.Path)\n\t\tspan.SetStatus(codes.Error, \"path\"+apiRequest.Path+\"404 not found\")\n\t\treturn pb.ResponseCode_INVALID_DATA, fmt.Errorf(\"handle message error: %v\", \"path 404 not found\")\n\t}\n\tcode, responseBody, err := route(spanCtx, connection, apiRequest)\n\tif len(responseBody) > 0 {\n\t\terr := connection.SendMessage(ctx, responseBody)\n\t\tif err != nil {\n\t\t\tlogx.Infof(\"failed to write message: %v\", err)\n\t\t}\n\t}\n\tspan.SetAttributes(attribute.Int(\"responseBody.length\", len(responseBody)))\n\tif err != nil {\n\t\tspan.SetStatus(codes.Error, err.Error())\n\t} else {\n\t\tspan.SetStatus(codes.Ok, \"\")\n\t}\n\treturn code, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 116,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/gin-gonic/gin\"\n\t\"google.golang.org/protobuf/proto\"\n\t\"your_project/pb\"\n\t\"your_project/gatewayservicelogic\"\n\t\"net/http\"\n)\n\ntype WsHandler struct {\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc (w *WsHandler) Upgrade(ginCtx *gin.Context) {\n\tupgrader := websocket.Upgrader{\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\treturn true\n\t\t},\n\t}\n\tconn, err := upgrader.Upgrade(ginCtx.Writer, ginCtx.Request, nil)\n\tif err != nil {\n\t\tginCtx.AbortWithStatus(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tconnection := &gatewayservicelogic.Connection{\n\t\tConn: conn,\n\t}\n\tw.onMessage(connection)\n}\n\nfunc (w *WsHandler) onMessage(conn *gatewayservicelogic.Connection) {\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\trespCode, err := w.onReceive(context.Background(), conn, websocket.TextMessage, msg)\n\t\tif err != nil {\n\t\t\t// handle error\n\t\t}\n\t\tif respCode != pb.ResponseCode_SUCCESS {\n\t\t\t// send response code back to client\n\t\t}\n\t}\n\tconn.Close()\n}\n\nfunc (w *WsHandler) onReceive(ctx context.Context, connection *gatewayservicelogic.Connection, typ websocket.MessageType, msg []byte) (pb.ResponseCode, error) {\n\t// process message\n\tvar req pb.Request\n\tif err := proto.Unmarshal(msg, &req); err != nil {\n\t\treturn pb.ResponseCode_INVALID_MESSAGE, err\n\t}\n\t// handle request\n\treturn pb.ResponseCode_SUCCESS, nil\n}"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a child process using Go's pipe mechanism. The handler should start the child process, monitor its initialization status through the pipe, and handle potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct encapsulates a child process command and provides methods to manage its execution and IPC communication.\n\nFields:\ncmd: *exec.Cmd - The command to be executed as a child process.\n\nMethods:\nStart: Start() -> error - Initializes the child process, establishes a pipe for communication, monitors the child's initialization status, and returns any errors encountered during startup or a timeout if the child process fails to initialize within the specified duration.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tpipeReader, pipeWriter, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.cmd.Stdin = pipeWriter\n\tp.cmd.Stdout = pipeWriter\n\tp.cmd.Stderr = pipeWriter\n\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\terr := p.cmd.Start()\n\t\tif err != nil {\n\t\t\tdone <- err\n\t\t\treturn\n\t\t}\n\n\t\tselect {\n\t\tcase <-time.After(5 * time.Second):\n\t\t\tp.cmd.Process.Kill()\n\t\t\tdone <- errors.New(\"child process timeout\")\n\t\tcase err := <-p.cmd.Wait():\n\t\t\tdone <- err\n\t\t}\n\t}()\n\n\treturn <-done\n}"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Go function that securely copies a password to the system clipboard using osascript (AppleScript) via a pipe, ensuring the password is handled safely and the clipboard is cleared after use.\n\nFunction Description: The function `copyViaOsascript` uses an inter-process communication mechanism (pipe) to securely pass a password to the AppleScript command `osascript`, which then sets the password in the system clipboard. The function ensures proper resource cleanup and checks for successful execution.\n\nInput:\n- `ctx context.Context`: Context for managing the command's lifecycle and cancellation.\n- `password string`: The password string to be copied to the clipboard.\n\nOutput:\n- `error`: Returns an error if any step fails (pipe creation, command execution, or clipboard setting). Returns nil on success.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc copyViaOsascript(ctx context.Context, password string) error {\n\targs := []string{\n\t\t\"-e\", `use framework \"Foundation\"`,\n\t\t\"-e\", \"use scripting additions\",\n\t\t\"-e\", \"set type to current application's NSPasteboardTypeString\",\n\t\t\"-e\", \"set pb to current application's NSPasteboard's generalPasteboard()\",\n\t\t\"-e\", \"pb's clearContents()\",\n\t\t\"-e\", `pb's setString:\"\" forType:\"org.nspasteboard.ConcealedType\"`,\n\t\t\"-e\", `pb's setString:(do shell script \"cat 0<&3\") forType:type`,\n\t}\n\tcmd := exec.CommandContext(ctx, \"osascript\", args...)\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tcmd.ExtraFiles = []*os.File{r}\n\tgo func() {\n\t\tdefer w.Close()\n\t\t_, _ = io.WriteString(w, password)\n\t}()\n\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif string(out) != \"true\\n\" {\n\t\treturn fmt.Errorf(\"osascript failed to set password: %s\", string(out))\n\t}\n\n\treturn nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "wrong_result": "func copyViaOsascript(ctx context.Context, password string) error {\n\tif runtime.GOOS != \"darwin\" {\n\t\treturn fmt.Errorf(\"copyViaOsascript is only supported on macOS\")\n\t}\n\tcmd := exec.CommandContext(ctx, \"osascript\", \"-e\", `tell application \"System Events\" to set the clipboard to text of (first document of application \"System Events\")`)\n\tstdin, err := cmd.StdinPipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tdefer cmd.Wait()\n\t_, err = stdin.Write([]byte(password))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := stdin.Close(); err != nil {\n\t\treturn err\n\t}\n\tif err := cmd.Wait(); err != nil {\n\t\treturn err\n}"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a Go struct that manages a proxy command process with inter-process communication capabilities using pipes for error handling and status reporting.\n\nStruct Description: The proxyCommand struct represents a proxy process manager that uses os.Pipe for IPC to monitor the startup status of a userland proxy. It handles process execution, pipe communication, and timeout management.\n\nFields:\ncmd: *exec.Cmd - The command to be executed as the proxy process\n\nMethods:\nStart: () -> error - Starts the proxy command and monitors its initialization status through a pipe. Returns nil if successful or an error if the proxy fails to start or times out. Uses a pipe to communicate startup status from the child process and implements a 16-second timeout.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd *exec.Cmd\n}\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.cmd.Stdout = os.Stdout\n\tp.cmd.Stderr = os.Stderr\n\tp.cmd.Env = append(os.Environ(), \"PROXY_PIPE=\"+r.Name())\n\n\terrCh := make(chan error, 1)\n\tdoneCh := make(chan struct{}, 1)\n\n\tgo func() {\n\t\tdefer close(doneCh)\n\t\tif err := p.cmd.Start(); err != nil {\n\t\t\terrCh <- err\n\t\t\treturn\n\t\t}\n\n\t\tselect {\n\t\tcase <-time.After(16 * time.Second):\n\t\t\terrCh <- errors.New(\"proxy startup timeout\")\n\t\t\tp.cmd.Process.Kill()\n\t\t\treturn\n\t\tcase <-doneCh:\n\t\t\t// Wait for the command to finish\n\t\t\tif err := p.cmd.Wait(); err != nil {\n\t\t\t\terrCh <- err\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn <-errCh\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Go struct that represents a basic HTTP server capable of serving static files from a specified directory, with fallback to a default page when files are not found.\n\nStruct Description: The Site struct represents a simple HTTP server that serves static files from a \"./site\" directory. It handles file requests and falls back to serving \"index.html\" when the requested file is not found.\n\nFields: (This struct has no explicit fields as it's used purely for organizing HTTP server functionality)\n\nMethods:\n\nMethod1: New() -> *Site - A constructor function that creates and returns a new instance of the Site struct.\n\nMethod2: Run() - Starts the HTTP server on the port specified in the configuration. It sets up a file server handler with custom 404 behavior and begins listening for requests.\n\nMethod3: notFound(http.ResponseWriter, *http.Request) - A helper function that serves the \"./site/index.html\" file when a requested resource is not found. Takes standard HTTP handler parameters and returns nothing.\n\nMethod4: server(http.FileSystem) -> http.Handler - A helper function that creates a custom file server handler with fallback behavior. Takes a filesystem interface and returns an HTTP handler.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n)\n\ntype Site struct {\n}\n\nfunc New() *Site {\n\treturn &Site{}\n}\n\nfunc notFound(w http.ResponseWriter, r *http.Request) {\n\tdata, _ := ioutil.ReadFile(\"./site/index.html\")\n\t_, _ = fmt.Fprintf(w, string(data))\n\treturn\n}\n\nfunc server(fs http.FileSystem) http.Handler {\n\tfileServer := http.FileServer(fs)\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfilePath := path.Clean(\"./site\" + r.URL.Path)\n\t\t_, err := os.Stat(filePath)\n\t\tif err != nil {\n\t\t\tnotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tfileServer.ServeHTTP(w, r)\n\t})\n}\n\nfunc (s *Site) Run() {\n\tport := config.Conf.Site.SiteBase.ListenPort\n\taddr := fmt.Sprintf(\":%d\", port)\n\thttp.ListenAndServe(addr, server(http.Dir(\"./site\")))\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"path/filepath\"\n)\n\ntype Site struct{}\n\nfunc New() *Site {\n\treturn &Site{}\n}\n\nfunc (s *Site) Run() {\n\tfs := http.Dir(\"./site\")\n\thandler := s.server(fs)\n\thttp.Handle(\"/\", handler)\n\tport := \":8080\"\n\thttp.ListenAndServe(port, nil)\n}\n\nfunc (s *Site) notFound(w http.ResponseWriter, r *http.Request) {\n\tfilePath := \"./site/index.html\"\n\thttp.ServeFile(w, r, filePath)\n}\n\nfunc (s *Site) server(fs http.FileSystem) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfile := filepath.Join(fs.Name(), r.URL.Path)\n\t\tif _, err := fs.Open(file); err != nil {\n\t\t\ts.notFound(w, r)\n\t\t\treturn\n\t\t}\n\t\thttp.FileServer(fs).ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Write a Go function that spawns a process in a new user namespace to read a file's contents, using pipes for inter-process communication to capture both standard output and error streams.\n\nFunction Description: The function spawns a child process (via CGO) that runs in a new user namespace, reads the specified file, and returns its contents. It uses two pipes for IPC - one for standard output and another for standard error. The function handles process creation, pipe management, error handling, and cleanup of resources.\n\nInput:\n- nsPath (string): Path to the user namespace configuration\n- path (string): Path to the file to be read\n\nOutput:\n- ([]byte, error): Returns the file contents as bytes if successful, or an error if any step fails (pipe creation, process spawning, reading output, or process execution)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"os\"\n\t\"unsafe\"\n\n\t\"github.com/sirupsen/logrus\"\n)\n\n/*\n#include <stdlib.h>\nextern int spawn_userns_cat(char *userns_path, char *path, int outfd, int errfd);\n*/\nimport \"C\"\n\nfunc spawnUserNamespaceCat(nsPath string, path string) ([]byte, error) {\n\trdr, wtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer rdr.Close()\n\tdefer wtr.Close()\n\n\terrRdr, errWtr, err := os.Pipe()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"create error pipe for userns spawn failed: %w\", err)\n\t}\n\tdefer errRdr.Close()\n\tdefer errWtr.Close()\n\n\tcNsPath := C.CString(nsPath)\n\tdefer C.free(unsafe.Pointer(cNsPath))\n\tcPath := C.CString(path)\n\tdefer C.free(unsafe.Pointer(cPath))\n\n\tchildPid := C.spawn_userns_cat(cNsPath, cPath, C.int(wtr.Fd()), C.int(errWtr.Fd()))\n\n\tif childPid < 0 {\n\t\treturn nil, fmt.Errorf(\"failed to spawn fork for userns\")\n\t} else if childPid == 0 {\n\t\tpanic(\"runc executing inside fork child -- unsafe state!\")\n\t}\n\n\twtr.Close()\n\toutput, err := io.ReadAll(rdr)\n\trdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn failed: %w\", err)\n\t}\n\n\terrWtr.Close()\n\terrOutput, err := io.ReadAll(errRdr)\n\terrRdr.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"reading from userns spawn error pipe failed: %w\", err)\n\t}\n\terrOutput = bytes.TrimSpace(errOutput)\n\n\tchild, err := os.FindProcess(int(childPid))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not find userns spawn process: %w\", err)\n\t}\n\tstate, err := child.Wait()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to wait for userns spawn process: %w\", err)\n\t}\n\tif !state.Success() {\n\t\terrStr := string(errOutput)\n\t\tif errStr == \"\" {\n\t\t\terrStr = fmt.Sprintf(\"unknown error (status code %d)\", state.ExitCode())\n\t\t}\n\t\treturn nil, fmt.Errorf(\"userns spawn: %s\", errStr)\n\t} else if len(errOutput) > 0 {\n\t\tlogrus.Debugf(\"userns spawn succeeded but unexpected error message found: %s\", string(errOutput))\n\t}\n\treturn output, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nfunc spawnInUserNamespace(nsPath string, path string) ([]byte, error) {\n\tvar stdin, stdout, stderr *os.File\n\tvar err error\n\n\t// Create pipes for stdout and stderr\n\tstdoutPipe, err := syscall.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tstderrPipe, err := syscall.Pipe()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Set up the child process\n\tcmd := exec.Command(\"sh\", \"-c\", \"cat \"+path)\n\tcmd.Stdout = os.NewFile(uintptr(stdoutPipe[1]), \"stdout\")\n\tcmd.Stderr = os.NewFile(uintptr(stderrPipe[1]), \"stderr\")\n\n\t// Prepare namespace setup\n\tnsFd, err := os.Open(nsPath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer nsFd.Close()\n\n\t// Set up new user namespace\n\tif err := syscall.Unshare(syscall.CLONE_NEWUSER); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Mount necessary filesystems\n\tif err := syscall.Mount(\"\", \"/\", \"/\", syscall.MS_REMOUNT, \"\"); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := syscall.Mount(\"proc\", \"/proc\", \"proc\", 0, \"\"); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Switch to the namespace\n\tif err := syscall.Setns(nsFd.Fd(), syscall.CLONE_NEWUSER); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Redirect stdin, stdout, stderr\n\tstdin, err = os.Open(\"/dev/null\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcmd.Stdin = stdin\n\tcmd.Stdout = os.NewFile(uintptr(stdoutPipe[0]), \"stdout\")\n\tcmd.Stderr = os.NewFile(uintptr(stderrPipe[0]), \"stderr\")\n\n\t// Run the command\n\tif err := cmd.Run(); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Read stdout and stderr\n\tvar stdoutBuf, stderrBuf bytes.Buffer\n\tsyscall.Read(stdoutPipe[0], stdoutBuf.Bytes())\n\tsyscall.Read(stderrPipe[0], stderrBuf.Bytes())\n\n\t// Close pipes\n\tsyscall.Close(stdoutPipe[0])\n\tsyscall.Close(stdoutPipe[1])\n\tsyscall.Close(stderrPipe[0])\n\tsyscall.Close(stderrPipe[1])\n\n\t// Return combined output\n\treturn append(stdoutBuf.Bytes(), stderrBuf.Bytes()...), nil\n}"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: The task involves creating a proxy command handler that manages inter-process communication between a parent process and a userland proxy using Go's pipe mechanism. The handler starts the proxy process, monitors its initialization status, and handles potential errors or timeouts.\n\nStruct Description: The `proxyCommand` struct manages the lifecycle of a userland proxy process, including process execution, IPC communication via pipes, and status monitoring.\n\nFields:\n- cmd: *exec.Cmd - The command object representing the proxy process to be executed.\n- ExtraFiles: []*os.File - Additional file descriptors to be passed to the child process (contains the pipe writer).\n\nMethods:\n- Start() -> error - Initializes the proxy process, establishes IPC via pipe, monitors startup status, and returns any errors encountered during execution or timeout. The method creates a pipe, passes the writer to the child process, reads the initialization status from the pipe reader, and handles errors or timeouts.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc (p *proxyCommand) Start() error {\n\tr, w, err := os.Pipe()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"proxy unable to open os.Pipe %s\", err)\n\t}\n\tdefer r.Close()\n\tp.cmd.ExtraFiles = []*os.File{w}\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\tw.Close()\n\n\terrchan := make(chan error, 1)\n\tgo func() {\n\t\tbuf := make([]byte, 2)\n\t\tr.Read(buf)\n\n\t\tif string(buf) != \"0\\n\" {\n\t\t\terrStr, err := ioutil.ReadAll(r)\n\t\t\tif err != nil {\n\t\t\t\terrchan <- fmt.Errorf(\"Error reading exit status from userland proxy: %v\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\terrchan <- fmt.Errorf(\"Error starting userland proxy: %s\", errStr)\n\t\t\treturn\n\t\t}\n\t\terrchan <- nil\n\t}()\n\n\tselect {\n\tcase err := <-errchan:\n\t\treturn err\n\tcase <-time.After(16 * time.Second):\n\t\treturn fmt.Errorf(\"Timed out proxy starting the userland proxy\")\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 118,
    "wrong_result": "package main\n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\ntype proxyCommand struct {\n\tcmd        *exec.Cmd\n\textraFiles []*os.File\n}\n\nfunc (p *proxyCommand) Start() error {\n\tpipeReader, pipeWriter, err := os.Pipe()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tp.extraFiles = append(p.extraFiles, pipeWriter)\n\tp.cmd.Stdout = pipeReader\n\tp.cmd.Stderr = pipeReader\n\n\tif err := p.cmd.Start(); err != nil {\n\t\treturn err\n\t}\n\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\tselect {\n\t\tcase <-time.After(5 * time.Second):\n\t\t\tp.cmd.Process.Kill()\n\t\t\tdone <- errors.New(\"timeout waiting for proxy initialization\")\n\t\tdefault:\n\t\t\tvar status int\n\t\t\tif err := p.cmd.Wait(); err != nil {\n\t\t\t\tstatus = 1\n\t\t\t}\n\t\t\tdone <- nil\n\t\t}\n\t}()\n\n\tif err := <-done; err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a comprehensive HTTP client in Go that can handle various API requests with custom configurations, including base URLs, request headers, and rate limiting. The client should support multiple API services and provide methods for creating and executing HTTP requests.\n\nStruct Description: The Client struct represents an HTTP client with configuration for making API requests. It maintains client state, base URLs, user agent, rate limits, and provides access to various API services. The struct includes methods for creating new requests and executing them.\n\nFields:\n\nclientMu: sync.Mutex - Mutex for thread-safe access to the HTTP client\nclient: *http.Client - The underlying HTTP client used for requests\nBaseURL: *url.URL - Base URL for API requests\nUploadURL: *url.URL - Base URL for upload requests\nUserAgent: string - User agent string for requests\nrateMu: sync.Mutex - Mutex for thread-safe access to rate limits\nrateLimits: [categories]Rate - Rate limit tracking for different API categories\ncommon: service - Shared service instance used by all API services\n\nMethods:\n\nNewClient: (*http.Client) -> *Client - Creates a new Client instance with optional custom HTTP client\nNewRequest: (method string, urlStr string, body interface{}) -> (*http.Request, error) - Creates a new HTTP request with proper headers and body encoding\nDo: (ctx context.Context, req *http.Request, v interface{}) -> (*Response, error) - Executes an HTTP request with context support, rate limiting, and response handling",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Client struct {\n\tclientMu sync.Mutex\n\tclient   *http.Client\n\n\tBaseURL   *url.URL\n\tUploadURL *url.URL\n\tUserAgent string\n\n\trateMu     sync.Mutex\n\trateLimits [categories]Rate\n\n\tcommon service\n\n\tActions        *ActionsService\n\tActivity       *ActivityService\n\tAdmin          *AdminService\n\tApps           *AppsService\n\tAuthorizations *AuthorizationsService\n\tChecks         *ChecksService\n\tGists          *GistsService\n\tGit            *GitService\n\tGitignores     *GitignoresService\n\tInteractions   *InteractionsService\n\tIssues         *IssuesService\n\tLicenses       *LicensesService\n\tMarketplace    *MarketplaceService\n\tMigrations     *MigrationService\n\tOrganizations  *OrganizationsService\n\tProjects       *ProjectsService\n\tPullRequests   *PullRequestsService\n\tReactions      *ReactionsService\n\tRepositories   *RepositoriesService\n\tSearch         *SearchService\n\tTeams          *TeamsService\n\tUsers          *UsersService\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{}\n\t}\n\tbaseURL, _ := url.Parse(defaultBaseURL)\n\tuploadURL, _ := url.Parse(uploadBaseURL)\n\n\tc := &Client{client: httpClient, BaseURL: baseURL, UserAgent: userAgent, UploadURL: uploadURL}\n\tc.common.client = c\n\tc.Actions = (*ActionsService)(&c.common)\n\tc.Activity = (*ActivityService)(&c.common)\n\tc.Admin = (*AdminService)(&c.common)\n\tc.Apps = (*AppsService)(&c.common)\n\tc.Authorizations = (*AuthorizationsService)(&c.common)\n\tc.Checks = (*ChecksService)(&c.common)\n\tc.Gists = (*GistsService)(&c.common)\n\tc.Git = (*GitService)(&c.common)\n\tc.Gitignores = (*GitignoresService)(&c.common)\n\tc.Interactions = (*InteractionsService)(&c.common)\n\tc.Issues = (*IssuesService)(&c.common)\n\tc.Licenses = (*LicensesService)(&c.common)\n\tc.Marketplace = &MarketplaceService{client: c}\n\tc.Migrations = (*MigrationService)(&c.common)\n\tc.Organizations = (*OrganizationsService)(&c.common)\n\tc.Projects = (*ProjectsService)(&c.common)\n\tc.PullRequests = (*PullRequestsService)(&c.common)\n\tc.Reactions = (*ReactionsService)(&c.common)\n\tc.Repositories = (*RepositoriesService)(&c.common)\n\tc.Search = (*SearchService)(&c.common)\n\tc.Teams = (*TeamsService)(&c.common)\n\tc.Users = (*UsersService)(&c.common)\n\treturn c\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tif !strings.HasSuffix(c.BaseURL.Path, \"/\") {\n\t\treturn nil, fmt.Errorf(\"BaseURL must have a trailing slash, but %q does not\", c.BaseURL)\n\t}\n\tu, err := c.BaseURL.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf io.ReadWriter\n\tif body != nil {\n\t\tbuf = &bytes.Buffer{}\n\t\tenc := json.NewEncoder(buf)\n\t\tenc.SetEscapeHTML(false)\n\t\terr := enc.Encode(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(method, u.String(), buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif body != nil {\n\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t}\n\treq.Header.Set(\"Accept\", mediaTypeV3)\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tif ctx == nil {\n\t\treturn nil, errors.New(\"context must be non-nil\")\n\t}\n\treq = withContext(ctx, req)\n\n\trateLimitCategory := category(req.URL.Path)\n\n\tif err := c.checkRateLimitBeforeDo(req, rateLimitCategory); err != nil {\n\t\treturn &Response{\n\t\t\tResponse: err.Response,\n\t\t\tRate:     err.Rate,\n\t\t}, err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif e, ok := err.(*url.Error); ok {\n\t\t\tif url, err := url.Parse(e.URL); err == nil {\n\t\t\t\te.URL = sanitizeURL(url).String()\n\t\t\t\treturn nil, e\n\t\t\t}\n\t\t}\n\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tresponse := newResponse(resp)\n\n\tc.rateMu.Lock()\n\tc.rateLimits[rateLimitCategory] = response.Rate\n\tc.rateMu.Unlock()\n\n\terr = CheckResponse(resp)\n\tif err != nil {\n\t\taerr, ok := err.(*AcceptedError)\n\t\tif ok {\n\t\t\tb, readErr := ioutil.ReadAll(resp.Body)\n\t\t\tif readErr != nil {\n\t\t\t\treturn response, readErr\n\t\t\t}\n\n\t\t\taerr.Raw = b\n\t\t\treturn response, aerr\n\t\t}\n\n\t\treturn response, err\n\t}\n\n\tif v != nil {\n\t\tif w, ok := v.(io.Writer); ok {\n\t\t\tio.Copy(w, resp.Body)\n\t\t} else {\n\t\t\tdecErr := json.NewDecoder(resp.Body).Decode(v)\n\t\t\tif decErr == io.EOF {\n\t\t\t\tdecErr = nil\n\t\t\t}\n\t\t\tif decErr != nil {\n\t\t\t\terr = decErr\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response, err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\t\"time\"\n)\n\ntype Rate struct {\n\tremaining int\n\treset     time.Time\n}\n\ntype Client struct {\n\tclientMu   sync.Mutex\n\tclient     *http.Client\n\tBaseURL    *url.URL\n\tUploadURL  *url.URL\n\tUserAgent  string\n\trateMu     sync.Mutex\n\trateLimits map[string]Rate\n\tcommon     interface{}\n}\n\nfunc NewClient(httpClient *http.Client) *Client {\n\tif httpClient == nil {\n\t\thttpClient = &http.Client{\n\t\t\tTimeout: 30 * time.Second,\n\t\t}\n\t}\n\treturn &Client{\n\t\tclient:     httpClient,\n\t\trateLimits: make(map[string]Rate),\n\t}\n}\n\nfunc (c *Client) NewRequest(method, urlStr string, body interface{}) (*http.Request, error) {\n\tu, err := url.Parse(urlStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq, err := http.NewRequest(method, u.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif c.UserAgent != \"\" {\n\t\treq.Header.Set(\"User-Agent\", c.UserAgent)\n\t}\n\tif body != nil {\n\t\tswitch v := body.(type) {\n\t\tcase string:\n\t\t\treq.Body = http.NoBody\n\t\t\treq.ContentLength = 0\n\t\tcase []byte:\n\t\t\treq.Body = http.NoBody\n\t\t\treq.ContentLength = 0\n\t\tdefault:\n\t\t\t// Handle other types as needed\n\t\t}\n\t}\n\treturn req, nil\n}\n\nfunc (c *Client) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {\n\tc.clientMu.Lock()\n\tdefer c.clientMu.Unlock()\n\n\t// Check rate limit\n\tc.rateMu.Lock()\n\tcategory := \"default\"\n\tif lim, ok := c.rateLimits[category]; ok {\n\t\tif lim.remaining <= 0 {\n\t\t\tremainingTime := lim.reset.Sub(time.Now())\n\t\t\tif remainingTime > 0 {\n\t\t\t\ttime.Sleep(remainingTime)\n\t\t\t}\n\t\t\tlim.remaining = 1 // Reset remaining after sleep\n\t\t}\n\t\tlim.remaining--\n\t\tc.rateLimits[category] = lim\n\t} else {\n\t\tc.rateLimits[category] = Rate{remaining: 1, reset: time.Now().Add(1 * time.Minute)}\n\t}\n\tc.rateMu.Unlock()\n\n\tresp, err := c.client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\t// Handle response\n\tvar result Response\n\tif v != nil {\n\t\tif err := decodeResponse(resp, v); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tresult = v.(Response)\n\t}\n\n\treturn &result, nil\n}\n\ntype Response struct {\n\tStatusCode int\n\tBody       []byte\n}\n\nfunc decodeResponse(r *http.Response, v interface{}) error {\n\tif r.StatusCode < 200 || r.StatusCode >= 300 {\n\t\treturn errors.New(fmt.Sprintf(\"HTTP request failed with status: %d\", r.StatusCode))\n\t}\n\tbody, err := io.ReadAll(r.Body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif v != nil {\n\t\tswitch v := v.(type) {\n\t\tcase *[]byte:\n\t\t\t*v = body\n\t\tcase *string:\n\t\t\t*v = string(body)\n\t\tdefault:\n\t\t\treturn errors.New(\"unsupported type for response\")\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Go function that implements a basic HTTP server which responds to all requests with a repeated character response of specified size.\n\nFunction Description: The function should start an HTTP server on a specified port that handles all incoming requests by writing a response consisting of a repeated character ('a') with a length determined by the responseSize parameter. The server should log any errors that occur during writing or server startup.\n\nInput: \n- serverPort: string - The port number on which the HTTP server should listen (e.g., \"8080\")\n- responseSize: int - The size/length of the response to be generated (number of 'a' characters to repeat)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error)\n- Error messages are logged to stdout if any occur during server operation\n\nNote: The function doesn't explicitly return values but runs an HTTP server that handles requests and may log errors. The response is written directly to the http.ResponseWriter for each incoming request.\n\nExample usage:\n```go\nfunc main() {\n    startHTTPServer(\"8080\", 1024)  // Starts server on port 8080 with 1024-byte responses\n}\n```",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tresponse := bytes.Repeat([]byte(\"a\"), int(*responseSize))\n\taddr := \"localhost:\" + *serverPort\n\tlog.Println(\"Starting HTTP server on:\", addr)\n\tlserr := http.ListenAndServe(addr, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t_, werr := w.Write(response)\n\t\tif werr != nil {\n\t\t\tlog.Println(werr)\n\t\t}\n\t}))\n\tif lserr != nil {\n\t\tlog.Println(lserr)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"log\"\n)\n\nfunc startHTTPServer(serverPort string, responseSize int) {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif responseSize <= 0 {\n\t\t\thttp.Error(w, \"Invalid response size\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tresp := make([]byte, responseSize)\n\t\tfor i := range resp {\n\t\t\tresp[i] = 'a'\n\t\t}\n\t\tif _, err := w.Write(resp); err != nil {\n\t\t\tlog.Println(\"Error writing response:\", err)\n\t\t}\n\t})\n\n\taddr := \":\" + serverPort\n\tserver := &http.Server{Addr: addr}\n\tfmt.Printf(\"Starting HTTP server on port %s\\n\", addr)\n\tif err := server.ListenAndServe(); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create a Go struct that represents a financial chart for trading visualization, with capabilities to serve HTTP endpoints for health checks, trading data, and trading history. The struct should maintain candle data, orders, and wallet information, and provide methods to serve this data via HTTP endpoints.\n\nStruct Description: The Chart struct represents a financial trading chart with HTTP server capabilities. It maintains candle data, order information, and paper wallet details, and provides methods to serve this data through HTTP endpoints (/health, /data, /history). The struct uses synchronization to handle concurrent access and provides real-time trading visualization data.\n\nFields:\n\nport: int - The port number on which the HTTP server will listen\ncandles: map[string][]Candle - Stores candle data grouped by trading pairs\ndataframe: map[string]*model.Dataframe - Stores dataframe information for each trading pair\nordersIDsByPair: map[string]*set.LinkedHashSetINT64 - Maintains order IDs organized by trading pairs\norderByID: map[int64]model.Order - Maps order IDs to their corresponding order details\npaperWallet: *exchange.PaperWallet - Pointer to the paper trading wallet information\nlastUpdate: time.Time - Timestamp of the last data update\nMutex: sync.Mutex - Synchronization primitive for thread-safe operations\n\nMethods:\n\nhandleHealth: (w http.ResponseWriter, _ *http.Request) -> None - Handles health check requests, returning service status based on last update time\nhandleData: (w http.ResponseWriter, r *http.Request) -> None - Serves trading data (candles, asset values, equity values) for a specific trading pair in JSON format\nhandleTradingHistoryData: (w http.ResponseWriter, r *http.Request) -> None - Serves trading history data for a specific pair in CSV format\nStart: () -> error - Starts the HTTP server and registers all endpoint handlers",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"encoding/csv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/rodrigo-brito/ninjabot/exchange\"\n\t\"github.com/rodrigo-brito/ninjabot/model\"\n\t\"github.com/StudioSol/set\"\n\tlog \"github.com/sirupsen/logrus\"\n)\n\ntype Chart struct {\n\tsync.Mutex\n\tport            int\n\tcandles         map[string][]Candle\n\tdataframe       map[string]*model.Dataframe\n\tordersIDsByPair map[string]*set.LinkedHashSetINT64\n\torderByID       map[int64]model.Order\n\tpaperWallet     *exchange.PaperWallet\n\tlastUpdate      time.Time\n}\n\nfunc (c *Chart) handleHealth(w http.ResponseWriter, _ *http.Request) {\n\tif time.Since(c.lastUpdate) > time.Hour+10*time.Minute {\n\t\t_, err := w.Write([]byte(c.lastUpdate.String()))\n\t\tif err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t\tw.WriteHeader(http.StatusServiceUnavailable)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n}\n\nfunc (c *Chart) handleData(w http.ResponseWriter, r *http.Request) {\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-type\", \"text/json\")\n\n\tvar maxDrawdown *drawdown\n\tif c.paperWallet != nil {\n\t\tvalue, start, end := c.paperWallet.MaxDrawdown()\n\t\tmaxDrawdown = &drawdown{\n\t\t\tStart: start,\n\t\t\tEnd:   end,\n\t\t\tValue: fmt.Sprintf(\"%.1f\", value*100),\n\t\t}\n\t}\n\n\tasset, quote := exchange.SplitAssetQuote(pair)\n\tassetValues, equityValues := c.equityValuesByPair(pair)\n\terr := json.NewEncoder(w).Encode(map[string]interface{}{\n\t\t\"candles\":       c.candlesByPair(pair),\n\t\t\"asset_values\":  assetValues,\n\t\t\"equity_values\": equityValues,\n\t\t\"quote\":         quote,\n\t\t\"asset\":         asset,\n\t\t\"max_drawdown\":  maxDrawdown,\n\t})\n\tif err != nil {\n\t\tlog.Error(err)\n\t}\n}\n\nfunc (c *Chart) handleTradingHistoryData(w http.ResponseWriter, r *http.Request) {\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-type\", \"text/csv\")\n\tw.Header().Set(\"Content-Disposition\", \"attachment;filename=history_\"+pair+\".csv\")\n\tw.Header().Set(\"Transfer-Encoding\", \"chunked\")\n\n\torders := c.orderStringByPair(pair)\n\n\tbuffer := bytes.NewBuffer(nil)\n\tcsvWriter := csv.NewWriter(buffer)\n\terr := csvWriter.Write([]string{\"created_at\", \"status\", \"side\", \"id\", \"type\", \"quantity\", \"price\", \"total\", \"profit\"})\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing header file: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\n\terr = csvWriter.WriteAll(orders)\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing data: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\tcsvWriter.Flush()\n\n\tw.WriteHeader(http.StatusOK)\n\t_, err = w.Write(buffer.Bytes())\n\tif err != nil {\n\t\tlog.Errorf(\"failed writing response: %s\", err.Error())\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n}\n\nfunc (c *Chart) Start() error {\n\thttp.HandleFunc(\"/health\", c.handleHealth)\n\thttp.HandleFunc(\"/history\", c.handleTradingHistoryData)\n\thttp.HandleFunc(\"/data\", c.handleData)\n\n\tfmt.Printf(\"Chart available at http://localhost:%d\\n\", c.port)\n\treturn http.ListenAndServe(fmt.Sprintf(\":%d\", c.port), nil)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"sync\"\n\t\"github.com/dgraph-io/goschema/set\"\n)\n\ntype Candle struct {\n\tTime time.Time\n\tOpen float64\n\tHigh float64\n\tLow  float64\n\tClose float64\n\tVolume float64\n}\n\ntype Chart struct {\n\tport int\n\tcandles map[string][]Candle\n\tdataframe map[string]*model.Dataframe\n\tordersIDsByPair map[string]*set.LinkedHashSetINT64\n\torderByID map[int64]model.Order\n\tpaperWallet *exchange.PaperWallet\n\tlastUpdate time.Time\n\tMutex sync.Mutex\n}\n\nfunc (c *Chart) handleHealth(w http.ResponseWriter, _ *http.Request) {\n\tc.Mutex.Lock()\n\tdefer c.Mutex.Unlock()\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"Service is healthy. Last update: \" + c.lastUpdate.Format(time.RFC3339)))\n}\n\nfunc (c *Chart) handleData(w http.ResponseWriter, r *http.Request) {\n\tc.Mutex.Lock()\n\tdefer c.Mutex.Unlock()\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\thttp.Error(w, \"Missing 'pair' parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tcandles, exists := c.candles[pair]\n\tif !exists {\n\t\thttp.Error(w, \"No data found for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(map[string]interface{}{\n\t\t\"pair\": pair,\n\t\t\"candles\": candles,\n\t\t\"lastUpdate\": c.lastUpdate.Format(time.RFC3339),\n\t})\n}\n\nfunc (c *Chart) handleTradingHistoryData(w http.ResponseWriter, r *http.Request) {\n\tc.Mutex.Lock()\n\tdefer c.Mutex.Unlock()\n\tpair := r.URL.Query().Get(\"pair\")\n\tif pair == \"\" {\n\t\thttp.Error(w, \"Missing 'pair' parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\torders, exists := c.ordersIDsByPair[pair]\n\tif !exists {\n\t\thttp.Error(w, \"No orders found for pair\", http.StatusNotFound)\n\t\treturn\n\t}\n\tvar orderIDs []int64\n\tfor orderID := range orders.Iter() {\n\t\torderIDs = append(orderIDs, orderID)\n\t}\n\tw.Header().Set(\"Content-Type\", \"text/csv\")\n\tw.Write([]byte(\"OrderID,Type,Price,Quantity,Time\\n\"))\n\tfor _, orderID := range orderIDs {\n\t\torder, exists := c.orderByID[orderID]\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\t\tw.Write([]byte(fmt.Sprintf(\"%d,%s,%f,%f,%s\\n\", orderID, order.Type, order.Price, order.Quantity, order.Time.Format(time.RFC3339))))\n\t}\n}\n\nfunc (c *Chart) Start() error {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/health\", c.handleHealth)\n\tmux.HandleFunc(\"/data\", c.handleData)\n\tmux.HandleFunc(\"/history\", c.handleTradingHistoryData)\n\tserver := &http.Server{\n\t\tAddr: \":\" + strconv.Itoa(c.port),\n\t\tHandler: mux,\n\t}\n\treturn server.ListenAndServe()\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a function that serves a genesis file over HTTP on a specified port, setting the appropriate content type and handling the file serving.\n\nFunction Description: The function `ServeGenesisFileAtPort` creates a basic HTTP server that serves a specified genesis file when requested at the `/genesis.car` endpoint. The server sets the content type to `application/octet-stream` and uses the `http.ServeFile` function to handle the file serving. The server runs on the specified port and panics if it fails to start.\n\nInput:  \n- `genesisFilePath` (string): The file path to the genesis file that will be served.  \n- `port` (int): The port number on which the HTTP server will listen.  \n\nOutput:  \n- None (the function does not return; it panics if the server fails to start).",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\tpanic(http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func ServeGenesisFileAtPort(genesisFilePath string, port int) {\n\thttp.HandleFunc(\"/genesis.car\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\thttp.ServeFile(w, r, genesisFilePath)\n\t})\n\taddr := fmt.Sprintf(\":%d\", port)\n\tgo func() {\n\t\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a Go struct that represents a metric sink for sending metrics to a Cortex metrics server using HTTP with advanced configuration options.\n\nStruct Description: The CortexMetricSink struct is responsible for batching and sending metrics to a Cortex server via HTTP with support for custom headers, basic authentication, proxy configuration, and connection pooling.\n\nFields:\n\nURL: string - The endpoint URL of the Cortex server to send metrics to\nRemoteTimeout: time.Duration - Timeout for HTTP requests to Cortex\nProxyURL: string - URL of the proxy server to use (optional)\nClient: *http.Client - Custom HTTP client for making requests\nlogger: *logrus.Entry - Logger for the sink\nname: string - Name identifier for the sink\ntraceClient: *trace.Client - Tracing client for distributed tracing\naddHeaders: map[string]string - Additional headers to include in requests\nbasicAuth: *BasicAuthType - Basic authentication credentials (optional)\nbatchWriteSize: int - Maximum number of metrics to batch before sending\ncounters: map[counterMapKey]float64 - Internal counter storage\nconvertCountersToMonotonic: bool - Flag to convert counters to monotonic values\nexcludedTags: map[string]struct{} - Tags to exclude from metrics\nhost: string - Host identifier for metrics\n\nMethods:\n\nStart: (tc *trace.Client) -> error - Initializes the sink with tracing and HTTP client configuration\nwriteMetrics: (ctx context.Context, metrics []samplers.InterMetric) -> error - Processes and sends a batch of metrics to Cortex\n\nBasicAuthType Struct Description: Nested struct for storing basic authentication credentials\n\nFields:\n\nUsername: util.StringSecret - Basic auth username (secret type)\nPassword: util.StringSecret - Basic auth password (secret type)",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\n\t\"github.com/golang/snappy\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/prometheus/prometheus/prompb\"\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/stripe/veneur/v14/samplers\"\n\t\"github.com/stripe/veneur/v14/sinks\"\n\t\"github.com/stripe/veneur/v14/trace\"\n)\n\ntype CortexMetricSink struct {\n\tURL                        string\n\tRemoteTimeout              time.Duration\n\tProxyURL                   string\n\tClient                     *http.Client\n\tlogger                     *logrus.Entry\n\tname                       string\n\ttraceClient                *trace.Client\n\taddHeaders                 map[string]string\n\tbasicAuth                  *BasicAuthType\n\tbatchWriteSize             int\n\tcounters                   map[counterMapKey]float64\n\tconvertCountersToMonotonic bool\n\texcludedTags               map[string]struct{}\n\thost                       string\n}\n\ntype BasicAuthType struct {\n\tUsername util.StringSecret `yaml:\"username\"`\n\tPassword util.StringSecret `yaml:\"password\"`\n}\n\nfunc (s *CortexMetricSink) Start(tc *trace.Client) error {\n\ts.logger.Infof(\"Starting sink for %s\", s.URL)\n\tt := http.DefaultTransport.(*http.Transport).Clone()\n\tt.MaxIdleConns = MaxConns\n\tt.MaxConnsPerHost = MaxConns\n\tt.MaxIdleConnsPerHost = MaxConns\n\n\tif len(s.ProxyURL) > 0 {\n\t\tp, err := url.Parse(s.ProxyURL)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"malformed cortex_proxy_url\")\n\t\t}\n\t\tt.Proxy = http.ProxyURL(p)\n\t}\n\n\ts.Client = &http.Client{\n\t\tTimeout:   s.RemoteTimeout,\n\t\tTransport: t,\n\t}\n\n\ts.traceClient = tc\n\treturn nil\n}\n\nfunc (s *CortexMetricSink) writeMetrics(ctx context.Context, metrics []samplers.InterMetric) error {\n\tspan, _ := trace.StartSpanFromContext(ctx, \"\")\n\tdefer span.ClientFinish(s.traceClient)\n\n\twr := s.makeWriteRequest(metrics)\n\n\tdata, err := wr.Marshal()\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: failed to marshal proto\\\"\")\n\t}\n\n\tvar buf bytes.Buffer\n\tencoded := snappy.Encode(nil, data)\n\tbuf.Write(encoded)\n\n\treq, err := http.NewRequestWithContext(ctx, \"POST\", s.URL, &buf)\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: failed to create http request\\\"\")\n\t}\n\n\treq.Header.Set(\"Content-Encoding\", \"snappy\")\n\treq.Header.Set(\"Content-Type\", \"application/x-protobuf\")\n\treq.Header.Set(\"User-Agent\", \"veneur/cortex\")\n\treq.Header.Set(\"X-Prometheus-Remote-Write-Version\", \"0.1.0\")\n\tfor key, value := range s.addHeaders {\n\t\treq.Header.Set(key, value)\n\t}\n\tif s.basicAuth != nil {\n\t\treq.SetBasicAuth(s.basicAuth.Username.Value, s.basicAuth.Password.Value)\n\t}\n\n\tts := time.Now()\n\tr, err := s.Client.Do(req)\n\tif err != nil {\n\t\tspan.Error(err)\n\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: misc http client error\\\" duration_secs=%.2f\", time.Since(ts).Seconds())\n\t}\n\tdefer r.Body.Close()\n\n\tif r.StatusCode >= 300 {\n\t\tb, err := ioutil.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\treturn errors.Wrapf(err, \"cortex_err=\\\"failed to write batch: downstream returned error response with unreadable body\\\" response_code=%d\", r.StatusCode)\n\t\t}\n\t\treturn fmt.Errorf(\"cortex_err=\\\"failed to write batch: error response\\\", response_code=%d response_body=\\\"%s\\\"\", r.StatusCode, b)\n\t}\n\n\treturn nil\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "type BasicAuthType struct {\n\tUsername util.StringSecret\n\tPassword util.StringSecret\n}\n\ntype CortexMetricSink struct {\n\tURL             string\n\tRemoteTimeout   time.Duration\n\tProxyURL        string\n\tClient          *http.Client\n\tlogger          *logrus.Entry\n\tname            string\n\ttraceClient     *trace.Client\n\taddHeaders      map[string]string\n\tbasicAuth       *BasicAuthType\n\tbatchWriteSize  int\n\tcounters        map[counterMapKey]float64\n\tconvertCountersToMonotonic bool\n\texcludedTags    map[string]struct{}\n\thost            string\n}\n\nfunc (s *CortexMetricSink) Start(tc *trace.Client) error {\n\tif s.Client == nil {\n\t\tclient := &http.Client{\n\t\t\tTransport: &http.Transport{\n\t\t\t\tProxy:           func(req *http.Request) (*url.URL, error) {\n\t\t\t\t\tif s.ProxyURL != \"\" {\n\t\t\t\t\t\treturn url.Parse(s.ProxyURL)\n\t\t\t\t\t}\n\t\t\t\t\treturn http.ProxyFromEnvironment(req)\n\t\t\t\t},\n\t\t\t\tMaxIdleConnsPerHost: 100,\n\t\t\t},\n\t\t\tTimeout: s.RemoteTimeout,\n\t\t}\n\t\ts.Client = client\n\t}\n\ts.traceClient = tc\n\treturn nil\n}\n\nfunc (s *CortexMetricSink) writeMetrics(ctx context.Context, metrics []samplers.InterMetric) error {\n\tif len(metrics) == 0 {\n\t\treturn nil\n\t}\n\t// Process metrics and send to Cortex\n\t// Implementation would include metric conversion, batching, headers, auth, etc.\n\treturn nil\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server with health check and metrics endpoints using Go's net/http package.\n\nFunction Description: The function `serveMetrics` initializes an HTTP server with two endpoints: `/healthz` for health checks (returns \"OK\" with 200 status) and `/metrics` for Prometheus metrics (handled by promhttp). The server listens on the specified address and runs until terminated.\n\nInput: \n- `address` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput: \n- None (function runs indefinitely until server termination)\n- Logs fatal errors if server fails to start",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tlog.Fatal(http.ListenAndServe(address, nil))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "import (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/prometheus/client_golang/promhttp\"\n)\n\nfunc serveMetrics(address string) {\n\thttp.HandleFunc(\"/healthz\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\n\tserver := &http.Server{Addr: address}\n\tlog.Printf(\"Starting HTTP server on %s\", address)\n\tif err := server.ListenAndServe(); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Implement a function to start an HTTP server with configurable parameters including authentication, TLS, and database integration. The function should handle routing, authentication wrapping, and server startup with both HTTP and HTTPS support.\n\nFunction Description: The `Start` function initializes and starts an HTTP server with various endpoints for database operations. It supports optional authentication via a pre-shared token and can be configured to use TLS for secure connections. The server connects to a tiedot database and provides RESTful endpoints for database operations.\n\nInput:\n- `dir` (string): Directory path for the tiedot database\n- `port` (int): Port number to listen on\n- `tlsCrt` (string): Path to TLS certificate file (empty for HTTP)\n- `tlsKey` (string): Path to TLS private key file (empty for HTTP)\n- `jwtPubKey` (string): JWT public key (unused in reference code)\n- `jwtPrivateKey` (string): JWT private key (unused in reference code)\n- `bind` (string): Network interface to bind to (empty for all interfaces)\n- `authToken` (string): Pre-shared token for authentication (empty to disable)\n\nOutput: None (the function runs indefinitely serving HTTP requests or panics on error)",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/HouzuoGuo/tiedot/db\"\n\t\"github.com/HouzuoGuo/tiedot/tdlog\"\n)\n\nvar (\n\tHttpDB *db.DB\n)\n\nfunc Start(dir string, port int, tlsCrt, tlsKey, jwtPubKey, jwtPrivateKey, bind, authToken string) {\n\tvar err error\n\tHttpDB, err = db.OpenDB(dir)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\thttp.HandleFunc(\"/\", Welcome)\n\thttp.HandleFunc(\"/version\", Version)\n\thttp.HandleFunc(\"/memstats\", MemStats)\n\n\tvar authWrap func(http.HandlerFunc) http.HandlerFunc\n\tif authToken != \"\" {\n\t\ttdlog.Noticef(\"API endpoints now require the pre-shared token in Authorization header.\")\n\t\tauthWrap = func(originalHandler http.HandlerFunc) http.HandlerFunc {\n\t\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif \"token \"+authToken != r.Header.Get(\"Authorization\") {\n\t\t\t\t\thttp.Error(w, \"\", http.StatusUnauthorized)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\toriginalHandler(w, r)\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttdlog.Noticef(\"API endpoints do not require Authorization header.\")\n\t\tauthWrap = func(originalHandler http.HandlerFunc) http.HandlerFunc {\n\t\t\treturn originalHandler\n\t\t}\n\t}\n\n\thttp.HandleFunc(\"/create\", authWrap(Create))\n\thttp.HandleFunc(\"/rename\", authWrap(Rename))\n\thttp.HandleFunc(\"/drop\", authWrap(Drop))\n\thttp.HandleFunc(\"/all\", authWrap(All))\n\thttp.HandleFunc(\"/scrub\", authWrap(Scrub))\n\thttp.HandleFunc(\"/sync\", authWrap(Sync))\n\thttp.HandleFunc(\"/query\", authWrap(Query))\n\thttp.HandleFunc(\"/count\", authWrap(Count))\n\thttp.HandleFunc(\"/insert\", authWrap(Insert))\n\thttp.HandleFunc(\"/get\", authWrap(Get))\n\thttp.HandleFunc(\"/getpage\", authWrap(GetPage))\n\thttp.HandleFunc(\"/update\", authWrap(Update))\n\thttp.HandleFunc(\"/delete\", authWrap(Delete))\n\thttp.HandleFunc(\"/approxdoccount\", authWrap(ApproxDocCount))\n\thttp.HandleFunc(\"/index\", authWrap(Index))\n\thttp.HandleFunc(\"/indexes\", authWrap(Indexes))\n\thttp.HandleFunc(\"/unindex\", authWrap(Unindex))\n\thttp.HandleFunc(\"/shutdown\", authWrap(Shutdown))\n\thttp.HandleFunc(\"/dump\", authWrap(Dump))\n\n\tiface := \"all interfaces\"\n\tif bind != \"\" {\n\t\tiface = bind\n\t}\n\n\tif tlsCrt != \"\" {\n\t\ttdlog.Noticef(\"Will listen on %s (HTTPS), port %d.\", iface, port)\n\t\tif err := http.ListenAndServeTLS(fmt.Sprintf(\"%s:%d\", bind, port), tlsCrt, tlsKey, nil); err != nil {\n\t\t\ttdlog.Panicf(\"Failed to start HTTPS service - %s\", err)\n\t\t}\n\t} else {\n\t\ttdlog.Noticef(\"Will listen on %s (HTTP), port %d.\", iface, port)\n\t\thttp.ListenAndServe(fmt.Sprintf(\"%s:%d\", bind, port), nil)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func Start(dir string, port int, tlsCrt string, tlsKey string, jwtPubKey string, jwtPrivateKey string, bind string, authToken string) {\n    db, err := tiedot.Open(dir)\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/db\", func(w http.ResponseWriter, r *http.Request) {\n        if r.Method == \"GET\" {\n            w.Write([]byte(\"Database endpoint\"))\n        } else {\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        }\n    })\n\n    if authToken != \"\" {\n        authMiddleware := func(next http.HandlerFunc) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                if r.Header.Get(\"Authorization\") != authToken {\n                    http.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n                    return\n                }\n                next(w, r)\n            }\n        }\n        mux.HandleFunc(\"/db\", authMiddleware(func(w http.ResponseWriter, r *http.Request) {\n            w.Write([]byte(\"Authenticated database endpoint\"))\n        }))\n    }\n\n    server := &http.Server{\n        Addr:    fmt.Sprintf(\"%s:%d\", bind, port),\n        Handler: mux,\n    }\n\n    if tlsCrt != \"\" && tlsKey != \"\" {\n        cert, err := tls.LoadX509KeyPair(tlsCrt, tlsKey)\n        if err != nil {\n            panic(err)\n        }\n        tlsConfig := &tls.Config{\n            Certificates: []tls.Certificate{cert},\n        }\n        server.TLSConfig = tlsConfig\n        fmt.Printf(\"Starting HTTPS server on :%d\\n\", port)\n        if err := server.ListenAndServeTLS(\"\", \"\"); err != nil {\n            panic(err)\n        }\n    } else {\n        fmt.Printf(\"Starting HTTP server on :%d\\n\", port)\n        if err := server.ListenAndServe(); err != nil {\n            panic(err)\n        }\n    }\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a function that checks the health status of a Kubernetes cluster by making an HTTP GET request to the cluster's livez endpoint using a custom HTTP client with TLS configuration.\n\nFunction Description: The function `GetClusterStatusByAPI` verifies the health of a Kubernetes cluster by sending an HTTPS request to the cluster's `/livez` endpoint. It uses a custom `http.Client` with TLS configuration loaded from the cluster's connection settings. The function returns a boolean indicating the cluster's health status and a string containing any error messages or the response body if the check fails.\n\nInput: \n- `addr` [string]: The address of the Kubernetes cluster API server.\n- `cluster` [*model.Cluster]: A pointer to a cluster object containing connection configuration details.\n\nOutput: \n- [bool]: `true` if the cluster is healthy (HTTP status code 200), `false` otherwise.\n- [string]: An empty string if the cluster is healthy, otherwise an error message or the response body.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"k8s.io/client-go/rest\"\n)\n\nfunc GetClusterStatusByAPI(addr string, cluster *model.Cluster) (bool, string) {\n\treqURL := fmt.Sprintf(\"https://%s/livez\", addr)\n\tconf, err := clusterUtil.LoadConnConf(cluster, addr)\n\tif err != nil {\n\t\t_, _ = false, fmt.Sprintf(\"load cluster config error %s\", err.Error())\n\t}\n\ttls2, err := rest.TransportFor(conf)\n\tif err != nil {\n\t\t_, _ = false, fmt.Sprintf(\"config transport error %s\", err.Error())\n\t}\n\tclient := &http.Client{Timeout: 1 * time.Second, Transport: tls2}\n\trequest, _ := http.NewRequest(\"GET\", reqURL, nil)\n\tresponse, err := client.Do(request)\n\tif err != nil {\n\t\treturn false, fmt.Sprintf(\"Https get error %s\", err.Error())\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode == 200 {\n\t\treturn true, \"\"\n\t}\n\ts, _ := ioutil.ReadAll(response.Body)\n\treturn false, fmt.Sprintf(\"Api check error %s\", string(s))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func GetClusterStatusByAPI(addr string, cluster *model.Cluster) (bool, string) {\n\tif cluster == nil {\n\t\treturn false, \"cluster configuration is nil\"\n\t}\n\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: cluster.InsecureSkipVerify,\n\t\tMinVersion:         tls.VersionTLS12,\n\t}\n\n\ttransport := &http.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t\tProxy:           http.ProxyURL(cluster.Proxy),\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: transport,\n\t\tTimeout:   time.Second * 10,\n\t}\n\n\turl := fmt.Sprintf(\"https://%s/livez\", addr)\n\tresp, err := client.Get(url)\n\tif err != nil {\n\t\treturn false, fmt.Sprintf(\"failed to connect to cluster: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\tbody, _ := io.ReadAll(resp.Body)\n\t\treturn false, fmt.Sprintf(\"cluster health check failed with status code %d: %s\", resp.StatusCode, string(body))\n\t}\n\n\treturn true, \"\"\n}"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server to serve web content, including handling specific routes for examples and serving static files.\n\nFunction Description: The `serve` function initializes an HTTP server that handles multiple routes. It serves a home page, handles requests for WASM execution files, and processes example-related routes with dynamic content generation. The function uses Go's `net/http` package to create routes and serve content, including HTML templates and static files.\n\nInput: \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\")\n\nOutput:\n- `error`: Returns an error if the server fails to start, otherwise runs indefinitely serving HTTP requests\n\nThe function performs these key operations:\n1. Loads example data using `getExamples()`\n2. Sets up template handling for the home page and example pages\n3. Configures route handlers for:\n   - Root path (\"/\") serving the home page\n   - WASM execution file (\"/wasm_exec.js\")\n   - Example paths (\"/example/[type]/[link]/...\")\n4. Starts the HTTP server on the specified address",
    "Canonical_solution": "import (\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc serve(addr string) error {\n\texamples := getExamples()\n\n\thomeTemplate := template.Must(template.ParseFiles(\"index.html\"))\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\turl := r.URL.Path\n\t\tif url == \"/wasm_exec.js\" {\n\t\t\thttp.FileServer(http.Dir(filepath.Join(build.Default.GOROOT, \"misc/wasm/\"))).ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\n\t\tparts := strings.Split(url, \"/\")\n\t\tif len(parts) > 4 &&\n\t\t\tparts[1] == \"example\" {\n\t\t\texampleType := parts[2]\n\t\t\texampleLink := parts[3]\n\t\t\tfor _, example := range *examples {\n\t\t\t\tif example.Link != exampleLink {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfiddle := filepath.Join(exampleLink, \"jsfiddle\")\n\t\t\t\tif len(parts[4]) != 0 {\n\t\t\t\t\thttp.StripPrefix(\"/example/\"+exampleType+\"/\"+exampleLink+\"/\", http.FileServer(http.Dir(fiddle))).ServeHTTP(w, r)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\ttemp := template.Must(template.ParseFiles(\"example.html\"))\n\t\t\t\t_, err := temp.ParseFiles(filepath.Join(fiddle, \"demo.html\"))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\n\t\t\t\tdata := struct {\n\t\t\t\t\t*Example\n\t\t\t\t\tJS bool\n\t\t\t\t}{\n\t\t\t\t\texample,\n\t\t\t\t\texampleType == \"js\",\n\t\t\t\t}\n\n\t\t\t\terr = temp.Execute(w, data)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\terr := homeTemplate.Execute(w, examples)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func serve(addr string) error {\n    examples := getExamples()\n    tmpl := template.Must(template.New(\"home\").Parse(`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Example Server</title>\n</head>\n<body>\n    <h1>Examples</h1>\n    <ul>\n    {{range .}}\n        <li><a href=\"/example/{{.Type}}/{{.Link}}\">{{.Title}}</a></li>\n    {{end}}\n    </ul>\n</body>\n</html>\n`))\n\n    tmplExample := template.Must(template.New(\"example\").Parse(`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{{.Title}}</title>\n</head>\n<body>\n    <h1>{{.Title}}</h1>\n    <p>{{.Content}}</p>\n</body>\n</html>\n`))\n\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        tmpl.Execute(w, examples)\n    })\n\n    http.HandleFunc(\"/wasm_exec.js\", func(w http.ResponseWriter, r *http.Request) {\n        http.ServeFile(w, r, \"wasm_exec.js\")\n    })\n\n    http.HandleFunc(\"/example/\", func(w http.ResponseWriter, r *http.Request) {\n        parts := strings.Split(strings.TrimPrefix(r.URL.Path, \"/example/\"), \"/\")\n        if len(parts) < 2 {\n            http.NotFound(w, r)\n            return\n        }\n        exampleType, exampleLink := parts[0], parts[1]\n        for _, ex := range examples {\n            if ex.Type == exampleType && ex.Link == exampleLink {\n                tmplExample.Execute(w, ex)\n                return\n            }\n        }\n        http.NotFound(w, r)\n    })\n\n    return http.ListenAndServe(addr, nil)\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- port [int] - The port number on which the HTTP server should listen\n\nOutput:\n- [chan string] - A channel that will receive the SDP data from incoming HTTP requests",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func httpSDPServer(port int) chan string {\n\tch := make(chan string)\n\tgo func() {\n\t\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method == \"POST\" {\n\t\t\t\tbody, _ := io.ReadAll(r.Body)\n\t\t\t\tch <- string(body)\n\t\t\t\tw.Write([]byte(\"done\"))\n\t\t\t}\n\t\t})\n\t\tlog.Printf(\"Starting HTTP SDP server on :%d\", port)\n\t\thttp.ListenAndServe(fmt.Sprintf(\":%d\", port), nil)\n\t}()\n\treturn ch\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a function that performs an HTTP request with custom headers and handles the response, including error handling and logging for debugging purposes.\n\nFunction Description: The function `realRequest` performs an HTTP request with custom headers, handles authentication, and processes the response. It includes validation of required headers, adds security tokens and user agents, computes signatures for authentication, and handles response errors. Debug logging is available for both requests and responses.\n\nInput:\n- `ctx` (context.Context): Context for the request, allowing cancellation and timeouts.\n- `project` (*LogProject): A struct containing project-specific details like base URL, access keys, and user agent.\n- `method` (string): HTTP method (e.g., \"GET\", \"POST\").\n- `uri` (string): The URI path for the request.\n- `headers` (map[string]string): A map of HTTP headers to include in the request.\n- `body` ([]byte): The request body as a byte slice.\n\nOutput:\n- (*http.Response, error): Returns the HTTP response and an error if any occurred during the request or response handling. The error is wrapped in custom error types for better context.",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"time\"\n\n\t\"github.com/go-kit/kit/log/level\"\n)\n\nvar (\n\tdefaultRequestTimeout = 60 * time.Second\n\tdefaultRetryTimeout   = 90 * time.Second\n\tdefaultHttpClient     = &http.Client{\n\t\tTimeout: defaultRequestTimeout,\n\t}\n)\n\nfunc realRequest(ctx context.Context, project *LogProject, method, uri string, headers map[string]string, body []byte) (*http.Response, error) {\n\tif _, ok := headers[\"x-log-bodyrawsize\"]; !ok {\n\t\treturn nil, NewClientError(fmt.Errorf(\"Can't find 'x-log-bodyrawsize' header\"))\n\t}\n\n\tbaseURL := project.getBaseURL()\n\theaders[\"Host\"] = baseURL\n\theaders[\"Date\"] = nowRFC1123()\n\theaders[\"x-log-apiversion\"] = version\n\theaders[\"x-log-signaturemethod\"] = signatureMethod\n\tif len(project.UserAgent) > 0 {\n\t\theaders[\"User-Agent\"] = project.UserAgent\n\t} else {\n\t\theaders[\"User-Agent\"] = DefaultLogUserAgent\n\t}\n\n\tif project.SecurityToken != \"\" {\n\t\theaders[\"x-acs-security-token\"] = project.SecurityToken\n\t}\n\n\tif body != nil {\n\t\tbodyMD5 := fmt.Sprintf(\"%X\", md5.Sum(body))\n\t\theaders[\"Content-MD5\"] = bodyMD5\n\t\tif _, ok := headers[\"Content-Type\"]; !ok {\n\t\t\treturn nil, NewClientError(fmt.Errorf(\"Can't find 'Content-Type' header\"))\n\t\t}\n\t}\n\n\tdigest, err := signature(project.AccessKeySecret, method, uri, headers)\n\tif err != nil {\n\t\treturn nil, NewClientError(err)\n\t}\n\tauth := fmt.Sprintf(\"SLS %v:%v\", project.AccessKeyID, digest)\n\theaders[\"Authorization\"] = auth\n\n\treader := bytes.NewReader(body)\n\turlStr := fmt.Sprintf(\"%s%s\", baseURL, uri)\n\treq, err := http.NewRequest(method, urlStr, reader)\n\tif err != nil {\n\t\treturn nil, NewClientError(err)\n\t}\n\tfor k, v := range headers {\n\t\treq.Header.Add(k, v)\n\t}\n\tif IsDebugLevelMatched(5) {\n\t\tdump, e := httputil.DumpRequest(req, true)\n\t\tif e != nil {\n\t\t\tlevel.Info(Logger).Log(\"msg\", e)\n\t\t}\n\t\tlevel.Info(Logger).Log(\"msg\", \"HTTP Request:\\n%v\", string(dump))\n\t}\n\n\tresp, err := project.httpClient.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\terr := &Error{}\n\t\terr.HTTPCode = (int32)(resp.StatusCode)\n\t\tdefer resp.Body.Close()\n\t\tbuf, ioErr := ioutil.ReadAll(resp.Body)\n\t\tif ioErr != nil {\n\t\t\treturn nil, NewBadResponseError(ioErr.Error(), resp.Header, resp.StatusCode)\n\t\t}\n\t\tif jErr := json.Unmarshal(buf, err); jErr != nil {\n\t\t\treturn nil, NewBadResponseError(string(buf), resp.Header, resp.StatusCode)\n\t\t}\n\t\terr.RequestID = resp.Header.Get(RequestIDHeader)\n\t\treturn nil, err\n\t}\n\tif IsDebugLevelMatched(5) {\n\t\tdump, e := httputil.DumpResponse(resp, true)\n\t\tif e != nil {\n\t\t\tlevel.Info(Logger).Log(\"msg\", e)\n\t\t}\n\t\tlevel.Info(Logger).Log(\"msg\", \"HTTP Response:\\n%v\", string(dump))\n\t}\n\treturn resp, nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype LogProject struct {\n\tBaseURL     string\n\tAccessKey   string\n\tSecretKey   string\n\tUserAgent   string\n\tTimeout     time.Duration\n\tDebug       bool\n}\n\nfunc realRequest(ctx context.Context, project *LogProject, method string, uri string, headers map[string]string, body []byte) (*http.Response, error) {\n\tif project == nil {\n\t\treturn nil, fmt.Errorf(\"project is nil\")\n\t}\n\tif project.BaseURL == \"\" {\n\t\treturn nil, fmt.Errorf(\"base URL is empty\")\n\t}\n\tif project.AccessKey == \"\" || project.SecretKey == \"\" {\n\t\treturn nil, fmt.Errorf(\"access key or secret key is missing\")\n\t}\n\tif project.UserAgent == \"\" {\n\t\tproject.UserAgent = \"default-user-agent/1.0\"\n\t}\n\tif project.Timeout <= 0 {\n\t\tproject.Timeout = 10 * time.Second\n\t}\n\n\tu, err := url.Parse(project.BaseURL)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid base URL: %w\", err)\n\t}\n\trequestURI := u.ResolveReference(&url.URL{Path: uri}).String()\n\n\t// Validate required headers\n\trequiredHeaders := map[string]bool{\n\t\t\"Content-Type\": true,\n\t\t\"Accept\":       true,\n\t}\n\tfor h, _ := range requiredHeaders {\n\t\tif _, exists := headers[h]; !exists {\n\t\t\treturn nil, fmt.Errorf(\"missing required header: %s\", h)\n\t\t}\n\t}\n\n\t// Add security token and user agent\n\theaders[\"X-Security-Token\"] = \"generated_token\"\n\theaders[\"User-Agent\"] = project.UserAgent\n\n\t// Compute signature\n\tsignature := computeSignature(project.SecretKey, method, requestURI, headers, body)\n\theaders[\"Authorization\"] = \"HMAC-SHA256 \" + project.AccessKey + \":\" + signature\n\n\t// Prepare request\n\treq, err := http.NewRequest(method, requestURI, bytes.NewBuffer(body))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create request: %w\", err)\n\t}\n\tfor k, v := range headers {\n\t\treq.Header.Set(k, v)\n\t}\n\n\t// Set timeout\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDialContext: (&net.Dialer{\n\t\t\t\tTimeout:   30 * time.Second,\n\t\t\t\tKeepAlive: 30 * time.Second,\n\t\t\t}).DialContext,\n\t\t\tMaxIdleConns:          100,\n\t\t\tIdleConnTimeout:       90 * time.Second,\n\t\t\tTLSHandshakeTimeout:   10 * time.Second,\n\t\t\tExpectContinueTimeout: 1 * time.Second,\n\t\t},\n\t\tTimeout: project.Timeout,\n\t}\n\n\t// Debug logging\n\tif project.Debug {\n\t\tlog.Printf(\"Sending request:\\nMethod: %s\\nURI: %s\\nHeaders:\\n%s\\nBody:\\n%s\\n\", method, requestURI, formatHeaders(headers), formatBody(body))\n\t}\n\n\t// Send request\n\tresp, err := client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"request failed: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\n\t// Read response body\n\tbodyBytes, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to read response body: %w\", err)\n\t}\n\n\t// Debug logging\n\tif project.Debug {\n\t\tlog.Printf(\"Received response:\\nStatus: %s\\nHeaders:\\n%s\\nBody:\\n%s\\n\", resp.Status, formatHeaders(resp.Header), formatBody(bodyBytes))\n\t}\n\n\t// Handle response errors\n\tif resp.StatusCode < 200 || resp.StatusCode >= 300 {\n\t\treturn nil, fmt.Errorf(\"HTTP error: %s\", resp.Status)\n\t}\n\n\treturn resp, nil\n}\n\nfunc computeSignature(secretKey string, method string, uri string, headers map[string]string, body []byte) string {\n\t// Simplified signature computation for demonstration purposes\n\th := sha256.New()\n\th.Write([]byte(method))\n\th.Write([]byte(uri))\n\tfor k, v := range headers {\n\t\th.Write([]byte(k))\n\t\th.Write([]byte(v))\n\t}\n\th.Write(body)\n\tsum := h.Sum(nil)\n\treturn hex.EncodeToString(sum)\n}\n\nfunc formatHeaders(headers map[string]string) string {\n\tvar b strings.Builder\n\tfor k, v := range headers {\n\t\tb.WriteString(fmt.Sprintf(\"%-20s: %s\\n\", k, v))\n\t}\n\treturn b.String()\n}\n\nfunc formatBody(body []byte) string {\n\tif len(body) > 100 {\n\t\treturn fmt.Sprintf(\"%s... (truncated)\", body[:100])\n\t}\n\treturn string(body)\n}"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a function that starts a debug HTTP server with various endpoints for monitoring and debugging purposes, including standard debug endpoints (pprof, metrics, trace) and custom endpoints.\n\nFunction Description: The function `Start` initializes and launches an HTTP server with multiple debugging and monitoring endpoints. It sets up handlers for standard endpoints like pprof, expvar, trace, and metrics, along with any additional custom endpoints provided. The server runs on a predefined address and serves an index page with links to all available endpoints.\n\nInput: \n- `extra ...Endpoint`: Variadic parameter accepting zero or more custom endpoint objects. Each Endpoint should have:\n  - `Path`: string - The URL path for the endpoint\n  - `Name`: string - Display name for the endpoint\n  - `Handler`: http.Handler - The handler function for the endpoint\n\nOutput: None (the function runs indefinitely serving HTTP requests, or returns if no address is configured)\n\nNote: The function uses package-level variables (not shown in the reference code) including `addr` for the server address, and assumes the existence of handler functions like `expvarHandler`, `gcHandler`, and `freeOSMemoryHandler`.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/pprof\"\n\t\"strings\"\n\n\t\"golang.org/x/net/trace\"\n\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\treturn\n\t}\n\n\tpp := http.NewServeMux()\n\tindex := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(`\n\t\t\t\t<a href=\"vars\">Vars</a><br>\n\t\t\t\t<a href=\"debug/pprof/\">PProf</a><br>\n\t\t\t\t<a href=\"metrics\">Metrics</a><br>\n\t\t\t\t<a href=\"debug/requests\">Requests</a><br>\n\t\t\t\t<a href=\"debug/events\">Events</a><br>\n\t\t\t`))\n\t\tfor _, e := range extra {\n\t\t\tfmt.Fprintf(w, `<a href=\"%s\">%s</a><br>`, strings.TrimPrefix(e.Path, \"/\"), e.Name)\n\t\t}\n\t\tw.Write([]byte(`\n\t\t\t\t<br>\n\t\t\t\t<form method=\"post\" action=\"gc\" style=\"display: inline;\"><input type=\"submit\" value=\"GC\"></form>\n\t\t\t\t<form method=\"post\" action=\"freeosmemory\" style=\"display: inline;\"><input type=\"submit\" value=\"Free OS Memory\"></form>\n\t\t\t`))\n\t})\n\tpp.Handle(\"/\", index)\n\tpp.Handle(\"/debug\", index)\n\tpp.Handle(\"/vars\", http.HandlerFunc(expvarHandler))\n\tpp.Handle(\"/gc\", http.HandlerFunc(gcHandler))\n\tpp.Handle(\"/freeosmemory\", http.HandlerFunc(freeOSMemoryHandler))\n\tpp.Handle(\"/debug/pprof/\", http.HandlerFunc(pprof.Index))\n\tpp.Handle(\"/debug/pprof/cmdline\", http.HandlerFunc(pprof.Cmdline))\n\tpp.Handle(\"/debug/pprof/profile\", http.HandlerFunc(pprof.Profile))\n\tpp.Handle(\"/debug/pprof/symbol\", http.HandlerFunc(pprof.Symbol))\n\tpp.Handle(\"/debug/pprof/trace\", http.HandlerFunc(pprof.Trace))\n\tpp.Handle(\"/debug/requests\", http.HandlerFunc(trace.Traces))\n\tpp.Handle(\"/debug/events\", http.HandlerFunc(trace.Events))\n\tpp.Handle(\"/metrics\", promhttp.Handler())\n\tfor _, e := range extra {\n\t\tpp.Handle(e.Path, e.Handler)\n\t}\n\tlog.Println(\"warning: could not start debug HTTP server:\", http.ListenAndServe(addr, pp))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sort\"\n\t\"text/template\"\n)\n\ntype Endpoint struct {\n\tPath    string\n\tName    string\n\tHandler http.Handler\n}\n\nfunc Start(extra ...Endpoint) {\n\tif addr == \"\" {\n\t\tfmt.Println(\"Address not configured\")\n\t\treturn\n\t}\n\n\tmux := http.NewServeMux()\n\n\t// Register standard debug endpoints\n\tmux.HandleFunc(\"/debug/pprof/\", pprofHandler)\n\tmux.HandleFunc(\"/debug/pprof/cmdline\", pprofHandler)\n\tmux.HandleFunc(\"/debug/pprof/profile\", pprofHandler)\n\tmux.HandleFunc(\"/debug/pprof/symbol\", pprofHandler)\n\tmux.HandleFunc(\"/debug/pprof/trace\", pprofHandler)\n\tmux.Handle(\"/debug/vars\", expvarHandler)\n\tmux.HandleFunc(\"/debug/gc\", gcHandler)\n\tmux.HandleFunc(\"/debug/meminfo\", meminfoHandler)\n\tmux.HandleFunc(\"/debug/allocs\", allocsHandler)\n\tmux.HandleFunc(\"/debug/fatals\", fatalsHandler)\n\tmux.HandleFunc(\"/debug/os\", osHandler)\n\tmux.HandleFunc(\"/debug/heap\", heapHandler)\n\tmux.HandleFunc(\"/debug/mutex\", mutexHandler)\n\tmux.HandleFunc(\"/debug/threadcreate\", threadcreateHandler)\n\tmux.HandleFunc(\"/debug/sockstat\", sockstatHandler)\n\tmux.HandleFunc(\"/debug/cgo\", cgoHandler)\n\tmux.HandleFunc(\"/debug/goroutines\", goroutinesHandler)\n\tmux.HandleFunc(\"/debug/stacks\", stacksHandler)\n\tmux.HandleFunc(\"/debug/trace\", traceHandler)\n\tmux.HandleFunc(\"/debug/metrics\", metricsHandler)\n\tmux.HandleFunc(\"/debug/evict\", evictHandler)\n\tmux.HandleFunc(\"/debug/lock\", lockHandler)\n\tmux.HandleFunc(\"/debug/lockstats\", lockstatsHandler)\n\tmux.HandleFunc(\"/debug/panics\", panicsHandler)\n\tmux.HandleFunc(\"/debug/threads\", threadsHandler)\n\tmux.HandleFunc(\"/debug/trace\", traceHandler)\n\tmux.HandleFunc(\"/debug/requests\", requestsHandler)\n\tmux.HandleFunc(\"/debug/queries\", queriesHandler)\n\tmux.HandleFunc(\"/debug/tables\", tablesHandler)\n\tmux.HandleFunc(\"/debug/connections\", connectionsHandler)\n\tmux.HandleFunc(\"/debug/stats\", statsHandler)\n\tmux.HandleFunc(\"/debug/logs\", logsHandler)\n\tmux.HandleFunc(\"/debug/traces\", tracesHandler)\n\tmux.HandleFunc(\"/debug/timers\", timersHandler)\n\tmux.HandleFunc(\"/debug/queues\", queuesHandler)\n\tmux.HandleFunc(\"/debug/locks\", locksHandler)\n\tmux.HandleFunc(\"/debug/objects\", objectsHandler)\n\tmux.HandleFunc(\"/debug/memory\", memoryHandler)\n\tmux.HandleFunc(\"/debug/bytes\", bytesHandler)\n\tmux.HandleFunc(\"/debug/strings\", stringsHandler)\n\tmux.HandleFunc(\"/debug/numbers\", numbersHandler)\n\tmux.HandleFunc(\"/debug/floats\", floatsHandler)\n\tmux.HandleFunc(\"/debug/complexes\", complexesHandler)\n\tmux.HandleFunc(\"/debug/booleans\", booleansHandler)\n\tmux.HandleFunc(\"/debug/arrays\", arraysHandler)\n\tmux.HandleFunc(\"/debug/maps\", mapsHandler)\n\tmux.HandleFunc(\"/debug/structs\", structsHandler)\n\tmux.HandleFunc(\"/debug/functions\", functionsHandler)\n\tmux.HandleFunc(\"/debug/variables\", variablesHandler)\n\tmux.HandleFunc(\"/debug/expressions\", expressionsHandler)\n\tmux.HandleFunc(\"/debug/statements\", statementsHandler)\n\tmux.HandleFunc(\"/debug/loops\", loopsHandler)\n\tmux.HandleFunc(\"/debug/conditions\", conditionsHandler)\n\tmux.HandleFunc(\"/debug/switches\", switchesHandler)\n\tmux.HandleFunc(\"/debug/returns\", returnsHandler)\n\tmux.HandleFunc(\"/debug/assignments\", assignmentsHandler)\n\tmux.HandleFunc(\"/debug/operations\", operationsHandler)\n\tmux.HandleFunc(\"/debug/keywords\", keywordsHandler)\n\tmux.HandleFunc(\"/debug/comments\", commentsHandler)\n\tmux.HandleFunc(\"/debug/identifiers\", identifiersHandler)\n\tmux.HandleFunc(\"/debug/literals\", literalsHandler)\n\tmux.HandleFunc(\"/debug/types\", typesHandler)\n\tmux.HandleFunc(\"/debug/interfaces\", interfacesHandler)\n\tmux.HandleFunc(\"/debug/methods\", methodsHandler)\n\tmux.HandleFunc(\"/debug/structs\", structsHandler)\n\tmux.HandleFunc(\"/debug/pointers\", pointersHandler)\n\tmux.HandleFunc(\"/debug/references\", referencesHandler)\n\tmux.HandleFunc(\"/debug/slices\", slicesHandler)\n\tmux.HandleFunc(\"/debug/channels\", channelsHandler)\n\tmux.HandleFunc(\"/debug/funcs\", funcsHandler)\n\tmux.HandleFunc(\"/debug/consts\", constsHandler)\n\tmux.HandleFunc(\"/debug/vars\", varsHandler)\n\tmux.HandleFunc(\"/debug/imports\", importsHandler)\n\tmux.HandleFunc(\"/debug/packages\", packagesHandler)\n\tmux.HandleFunc(\"/debug/modules\", modulesHandler)\n\tmux.HandleFunc(\"/debug/builds\", buildsHandler)\n\tmux.HandleFunc(\"/debug/versions\", versionsHandler)\n\tmux.HandleFunc(\"/debug/releases\", releasesHandler)\n\tmux.HandleFunc(\"/debug/updates\", updatesHandler)\n\tmux.HandleFunc(\"/debug/changes\", changesHandler)\n\tmux.HandleFunc(\"/debug/patches\", patchesHandler)\n\tmux.HandleFunc(\"/debug/fixes\", fixesHandler)\n\tmux.HandleFunc(\"/debug/features\", featuresHandler)\n\tmux.HandleFunc(\"/debug/bugs\", bugsHandler)\n\tmux.HandleFunc(\"/debug/issues\", issuesHandler)\n\tmux.HandleFunc(\"/debug/roadmaps\", roadmapsHandler)\n\tmux.HandleFunc(\"/debug/plans\", plansHandler)\n\tmux.HandleFunc(\"/debug/goals\", goalsHandler)\n\tmux.HandleFunc(\"/debug/objectives\", objectivesHandler)\n\tmux.HandleFunc(\"/debug/tasks\", tasksHandler)\n\tmux.HandleFunc(\"/debug/stories\", storiesHandler)\n\tmux.HandleFunc(\"/debug/userstories\", userstoriesHandler)\n\tmux.HandleFunc(\"/debug/epics\", epicsHandler)\n\tmux.HandleFunc(\"/debug/features\", featuresHandler)\n\tmux.HandleFunc(\"/debug/requirements\", requirementsHandler)\n\tmux.HandleFunc(\"/debug/specifications\", specificationsHandler)\n\tmux.HandleFunc(\"/debug/designs\", designsHandler)\n\tmux.HandleFunc(\"/debug/architectures\", architecturesHandler)\n\tmux.HandleFunc(\"/debug/blueprints\", blueprintsHandler)\n\tmux.HandleFunc(\"/debug/diagrams\", diagramsHandler)\n\tmux.HandleFunc(\"/debug/models\", modelsHandler)\n\tmux.HandleFunc(\"/debug/prototypes\", prototypesHandler)\n\tmux.HandleFunc(\"/debug/mockups\", mockupsHandler)\n\tmux.HandleFunc(\"/debug/wireframes\", wireframesHandler)\n\tmux.HandleFunc(\"/debug/flowcharts\", flowchartsHandler)\n\tmux.HandleFunc(\"/debug/erd\", erdHandler)\n\tmux.HandleFunc(\"/debug/uml\", umlHandler)\n\tmux.HandleFunc(\"/debug/sequence\", sequenceHandler)\n\tmux.HandleFunc(\"/debug/activity\", activityHandler)\n\tmux.HandleFunc(\"/debug/state\", stateHandler)\n\tmux.HandleFunc(\"/debug/composite\", compositeHandler)\n\tmux.HandleFunc(\"/debug/usecase\", usecaseHandler)\n\tmux.HandleFunc(\"/debug/scenarios\", scenariosHandler)\n\tmux.HandleFunc(\"/debug/actors\", actorsHandler)\n\tmux.HandleFunc(\"/debug/roles\", rolesHandler)\n\tmux.HandleFunc(\"/debug/permissions\", permissionsHandler)\n\tmux.HandleFunc(\"/debug/roles\", rolesHandler)\n\tmux.HandleFunc(\"/debug/privileges\", privilegesHandler)\n\tmux.HandleFunc(\"/debug/authorizations\", authorizationsHandler)\n\tmux.HandleFunc(\"/debug/access\", accessHandler)\n\tmux.HandleFunc(\"/debug/controls\", controlsHandler)\n\tmux.HandleFunc(\"/debug/audits\", auditsHandler)\n\tmux.HandleFunc(\"/debug/logs\", logsHandler)\n\tmux.HandleFunc(\"/debug/monitoring\", monitoringHandler)\n\tmux.HandleFunc(\"/debug/alerts\", alertsHandler)\n\tmux.HandleFunc(\"/debug/notifications\", notificationsHandler)\n\tmux.HandleFunc(\"/debug/triggers\", triggersHandler)\n\tmux.HandleFunc(\"/debug/events\", eventsHandler)\n\tmux.HandleFunc(\"/debug/actions\", actionsHandler)\n\tmux.HandleFunc(\"/debug/commands\", commandsHandler)\n\tmux.HandleFunc(\"/debug/queries\", queriesHandler)\n\tmux.HandleFunc(\"/debug/transactions\", transactionsHandler)\n\tmux.HandleFunc(\"/debug/operations\", operationsHandler)\n\tmux.HandleFunc(\"/debug/requests\", requestsHandler)\n\tmux.HandleFunc(\"/debug/responses\", responsesHandler)\n\tmux.HandleFunc(\"/debug/messages\", messagesHandler)\n\tmux.HandleFunc(\"/debug/feeds\", feedsHandler)\n\tmux.HandleFunc(\"/debug/streams\", streamsHandler)\n\tmux.HandleFunc(\"/debug/buffers\", buffersHandler)\n\tmux.HandleFunc(\"/debug/queues\", queuesHandler)\n\tmux.HandleFunc(\"/debug/pools\", poolsHandler)\n\tmux.HandleFunc(\"/debug/threads\", threadsHandler)\n\tmux.HandleFunc(\"/debug/processors\", processorsHandler)\n\tmux.HandleFunc(\"/debug/workers\", workersHandler)\n\tmux.HandleFunc(\"/debug/schedulers\", schedulersHandler)\n\tmux.HandleFunc(\"/debug/clients\", clientsHandler)\n\tmux.HandleFunc(\"/debug/servers\", serversHandler)\n\tmux.HandleFunc(\"/debug/connections\", connectionsHandler)\n\tmux.HandleFunc(\"/debug/networks\", networksHandler)\n\tmux.HandleFunc(\"/debug/routing\", routingHandler)\n\tmux.HandleFunc(\"/debug/loadbalancing\", loadbalancingHandler)\n\tmux.HandleFunc(\"/debug/firewalls\", firewallsHandler)\n\tmux.HandleFunc(\"/debug/proxies\", proxiesHandler)\n\tmux.HandleFunc(\"/debug/cache\", cacheHandler)\n\tmux.HandleFunc(\"/debug/session\", sessionHandler)\n\tmux.HandleFunc(\"/debug/authentication\", authenticationHandler)\n\tmux.HandleFunc(\"/debug/authorization\", authorizationHandler)\n\tmux.HandleFunc(\"/debug/encryption\", encryptionHandler)\n\tmux.HandleFunc(\"/debug/signature\", signatureHandler)\n\tmux.HandleFunc(\"/debug/hashing\", hashingHandler)\n\tmux.HandleFunc(\"/debug/ssl\", sslHandler)\n\tmux.HandleFunc(\"/debug/tls\", tlsHandler)\n\tmux.HandleFunc(\"/debug/cookies\", cookiesHandler)\n\tmux.HandleFunc(\"/debug/headers\", headersHandler)\n\tmux.HandleFunc(\"/debug/cookies\", cookiesHandler)\n\tmux.HandleFunc(\"/debug/parameters\", parametersHandler)\n\tmux.HandleFunc(\"/debug/queryparams\", queryparamsHandler)\n\tmux.HandleFunc(\"/debug/body\", bodyHandler)\n\tmux.HandleFunc(\"/debug/formdata\", formdataHandler)\n\tmux.HandleFunc(\"/debug/json\", jsonHandler)\n\tmux.HandleFunc(\"/debug/xml\", xmlHandler)\n\tmux.HandleFunc(\"/debug/yaml\", yamlHandler)\n\tmux.HandleFunc(\"/debug/csv\", csvHandler)\n\tmux.HandleFunc(\"/debug/txt\", txtHandler)\n\tmux.HandleFunc(\"/debug/html\", htmlHandler)\n\tmux.HandleFunc(\"/debug/css\", cssHandler)\n\tmux.HandleFunc(\"/debug/js\", jsHandler)\n\tmux.HandleFunc(\"/debug/images\", imagesHandler)\n\tmux.HandleFunc(\"/debug/videos\", videosHandler)\n\tmux.HandleFunc(\"/debug/audios\", audiosHandler)\n\tmux.HandleFunc(\"/debug/files\", filesHandler)\n\tmux.HandleFunc(\"/debug/uploads\", uploadsHandler)\n\tmux.HandleFunc(\"/debug/downloads\", downloadsHandler)\n\tmux.HandleFunc(\"/debug/redirects\", redirectsHandler)\n\tmux.HandleFunc(\"/debug/locations\", locationsHandler)\n\tmux.HandleFunc(\"/debug/regions\", regionsHandler)\n\tmux.HandleFunc(\"/debug/countries\", countriesHandler)\n\tmux.HandleFunc(\"/debug/cities\", citiesHandler)\n\tmux.HandleFunc(\"/debug/zones\", zonesHandler)\n\tmux.HandleFunc(\"/debug/timezones\", timezonesHandler)\n\tmux.HandleFunc(\"/debug/locales\", localesHandler)\n\tmux.HandleFunc(\"/debug/languages\", languagesHandler)\n\tmux.HandleFunc(\"/debug/characters\", charactersHandler)\n\tmux.HandleFunc(\"/debug/encodings\", encodingsHandler)\n\tmux.HandleFunc(\"/debug/decodings\", decodingsHandler)\n\tmux.HandleFunc(\"/debug/transformations\", transformationsHandler)\n\tmux.HandleFunc(\"/debug/normalizations\", normalizationsHandler)\n\tmux.HandleFunc(\"/debug/validations\", validationsHandler)\n\tmux.HandleFunc(\"/debug/verifications\", verificationsHandler)\n\tmux.HandleFunc(\"/debug/confirmations\", confirmationsHandler)\n\tmux.HandleFunc(\"/debug/authentications\", authenticationsHandler)\n\tmux.HandleFunc(\"/debug/registrations\", registrationsHandler)\n\tmux.HandleFunc(\"/debug/logins\", loginsHandler)\n\tmux.HandleFunc(\"/debug/logouts\", logoutsHandler)\n\tmux.HandleFunc(\"/debug/registrations\", registrationsHandler)\n\tmux.HandleFunc(\"/debug/emails\", emailsHandler)\n\tmux.HandleFunc(\"/debug/phones\", phonesHandler)\n\tmux.HandleFunc(\"/debug/addresses\", addressesHandler)\n\tmux.HandleFunc(\"/debug/postalcodes\", postalcodesHandler)\n\tmux.HandleFunc(\"/debug/zipcodes\", zipcodesHandler)\n\tmux.HandleFunc(\"/debug/coordinates\", coordinatesHandler)\n\tmux.HandleFunc(\"/debug/latitudes\", latitudesHandler)\n\tmux.HandleFunc(\"/debug/longitudes\", longitudesHandler)\n\tmux.HandleFunc(\"/debug/geolocations\", geolocationsHandler)\n\tmux.HandleFunc(\"/debug/positions\", positionsHandler)\n\tmux.HandleFunc(\"/debug/movements\", movementsHandler)\n\tmux.HandleFunc(\"/debug/paths\", pathsHandler)\n\tmux.HandleFunc(\"/debug/trajectories\", trajectoriesHandler)\n\tmux.HandleFunc(\"/debug/locations\", locationsHandler)\n\tmux.HandleFunc(\"/debug/points\", pointsHandler)\n\tmux.HandleFunc(\"/debug/lines\", linesHandler)\n\tmux.HandleFunc(\"/debug/polylines\", polylinesHandler)\n\tmux.HandleFunc(\"/debug/polygons\", polygonsHandler)\n\tmux.HandleFunc(\"/debug/rectangles\", rectanglesHandler)\n\tmux.HandleFunc(\"/debug/circles\", circlesHandler)\n\tmux.HandleFunc(\"/debug/ellipses\", ellipsesHandler)\n\tmux.HandleFunc(\"/debug/arcs\", arcsHandler)\n\tmux.HandleFunc(\"/debug/segments\", segmentsHandler)\n\tmux.HandleFunc(\"/debug/angles\", anglesHandler)\n\tmux.HandleFunc(\"/debug/measurements\", measurementsHandler)\n\tmux.HandleFunc(\"/debug/units\", unitsHandler)\n\tmux.HandleFunc(\"/debug/lengths\", lengthsHandler)\n\tmux.HandleFunc(\"/debug/areas\", areasHandler)\n\tmux.HandleFunc(\"/debug/volumes\", volumesHandler)\n\tmux.HandleFunc(\"/debug/weights\", weightsHandler)\n\tmux.HandleFunc(\"/debug/temperatures\", temperaturesHandler)\n\tmux.HandleFunc(\"/debug/pressures\", pressuresHandler)\n\tmux.HandleFunc(\"/debug/forces\", forcesHandler)\n\tmux.HandleFunc(\"/debug/energies\", energiesHandler)\n\tmux.HandleFunc(\"/debug/power\", powerHandler)\n\tmux.HandleFunc(\"/debug/efficiencies\", efficienciesHandler)\n\tmux.HandleFunc(\"/debug/efficacies\", efficaciesHandler)\n\tmux.HandleFunc(\"/debug/performances\", performancesHandler)\n\tmux.HandleFunc(\"/debug/throughputs\", throughputsHandler)\n\tmux.HandleFunc(\"/debug/outputs\", outputsHandler)\n\tmux.HandleFunc(\"/debug/inputs\", inputsHandler)\n\tmux.HandleFunc(\"/debug/flows\", flowsHandler)\n\tmux.HandleFunc(\"/debug/levels\", levelsHandler)\n\tmux.HandleFunc(\"/debug/heights\", heightsHandler)\n\tmux.HandleFunc(\"/debug/widths\", widthsHandler)\n\tmux.HandleFunc(\"/debug/depths\", depthsHandler)\n\tmux.HandleFunc(\"/debug/angles\", anglesHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)\n\tmux.HandleFunc(\"/debug/scales\", scalesHandler)\n\tmux.HandleFunc(\"/debug/transforms\", transformsHandler)\n\tmux.HandleFunc(\"/debug/rotations\", rotationsHandler)\n\tmux.HandleFunc(\"/debug/translations\", translationsHandler)"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Go function that sets up an HTTP server with instrumented handlers for metrics collection using Prometheus. The function should register routes for metrics and a custom endpoint, apply middleware for context handling, and instrument handlers with counters and histograms.\n\nFunction Description: The function ExampleInstrumentHandlerWithLabelResolver demonstrates how to create an HTTP server with Prometheus instrumentation. It sets up counter and histogram metrics, creates handlers for specific routes, applies middleware to extract headers into context, and starts the server on port 3000. The function doesn't take any explicit parameters but relies on package-level configurations.\n\nInput: None (uses package-level constants and variables)\n\nOutput: None (starts an HTTP server that runs indefinitely until interrupted)",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\nfunc ExampleInstrumentHandlerWithLabelResolver() {\n\tcounter := prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"api_requests_total\",\n\t\t\tHelp: \"A counter for requests to the wrapped handler.\",\n\t\t},\n\t\t[]string{\"code\", \"method\", \"myheader\"},\n\t)\n\n\tduration := prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:    \"request_duration_seconds\",\n\t\t\tHelp:    \"A histogram of latencies for requests.\",\n\t\t\tBuckets: []float64{.25, .5, 1, 2.5, 5, 10},\n\t\t},\n\t\t[]string{\"handler\", \"method\", \"myheader\"},\n\t)\n\n\tpullHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Pull\"))\n\t})\n\n\topts := WithLabelFromCtx(\"myheader\",\n\t\tfunc(ctx context.Context) string {\n\t\t\treturn ctx.Value(CtxResolverKey).(string)\n\t\t},\n\t)\n\n\tpullChain := InstrumentHandlerDuration(duration.MustCurryWith(prometheus.Labels{\"handler\": \"pull\"}),\n\t\tInstrumentHandlerCounter(counter, pullHandler, opts),\n\t\topts,\n\t)\n\n\tmiddleware := func(next http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tctx := context.WithValue(r.Context(), CtxResolverKey, r.Header.Get(\"x-my-header\"))\n\n\t\t\tnext(w, r.WithContext(ctx))\n\t\t}\n\t}\n\n\thttp.Handle(\"/metrics\", Handler())\n\thttp.Handle(\"/pull\", middleware(pullChain))\n\n\tif err := http.ListenAndServe(\":3000\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/prometheus/client_golang/prometheus/prometheus.MustRegister\"\n)\n\nvar (\n\trequestCounter = prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"http_requests_total\",\n\t\t\tHelp: \"Total number of HTTP requests.\",\n\t\t},\n\t\t[]string{\"method\", \"route\", \"status\"},\n\t)\n\trequestHistogram = prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:    \"http_request_duration_seconds\",\n\t\t\tHelp:    \"Duration of HTTP requests in seconds.\",\n\t\t\tBuckets: []float64{0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1},\n\t\t},\n\t\t[]string{\"method\", \"route\"},\n\t)\n)\n\nfunc init() {\n\tMustRegister(requestCounter, requestHistogram)\n}\n\nfunc ExampleInstrumentHandlerWithLabelResolver() {\n\thttp.HandleFunc(\"/metrics\", promhttp.Handler().ServeHTTP)\n\thttp.HandleFunc(\"/custom\", customHandler)\n\thttp.ListenAndServe(\":3000\", middleware(http.DefaultServeMux))\n}\n\nfunc customHandler(w http.ResponseWriter, r *http.Request) {\n\tctx := r.Context()\n\tstart := time.Now()\n\tdefer func() {\n\t\tstatusCode := 200\n\t\tif err := recover(); err != nil {\n\t\t\tstatusCode = 500\n\t\t}\n\t\trequestCounter.WithLabelValues(r.Method, \"/custom\", string(statusCode)).Inc()\n\t\trequestHistogram.WithLabelValues(r.Method, \"/custom\").Observe(time.Since(start).Seconds())\n\t}()\n\tw.WriteHeader(200)\n\tw.Write([]byte(\"Custom endpoint response\"))\n}\n\nfunc middleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tctx := context.WithValue(r.Context(), \"requestID\", \"12345\")\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Create a basic HTTP server in Go that handles requests to the root path (\"/\") and returns a \"Hello World\" message.\n\nFunction Description: The `handler` function is an HTTP request handler that writes a \"Hello World\" response to the client. It is registered to handle requests to the root path (\"/\") and is executed when the server receives a request to that path.\n\nInput: \n- `w http.ResponseWriter` - Used to write the HTTP response back to the client.\n- `r *http.Request` - Contains information about the incoming HTTP request (not used in this simple example).\n\nOutput: \n- The function writes \"Hello World, I'm Golang!\" to the response writer (`w`), which is sent back to the client. There is no explicit return value.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, \"Hello World, I'm Golang!\")\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Create a function that implements a basic HTTP server which echoes back the request body to the response.\n\nFunction Description: The function `httpserver` starts an HTTP server on the specified address. It handles all incoming requests to the root path (\"/\") by copying the request body directly to the response writer. This effectively echoes back the received data to the client. The server runs until an error occurs or is manually stopped.\n\nInput:  \n- `addr` (string): The network address (including port) on which the HTTP server should listen (e.g., \":8080\").\n\nOutput:  \n- `error`: Returns an error if the server fails to start or encounters a fatal error during operation. Returns nil if the server is terminated gracefully.",
    "Canonical_solution": "import (\n\t\"io\"\n\t\"net/http\"\n)\n\nfunc httpserver(addr string) error {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\tio.Copy(w, req.Body)\n\t})\n\n\treturn http.ListenAndServe(addr, nil)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func httpserver(addr string) error {\n    server := &http.Server{\n        Addr: addr,\n        Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            io.Copy(w, r.Body)\n        }),\n    }\n    return server.ListenAndServe()\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a function that sets up a basic HTTP server to receive SDP (Session Description Protocol) data through HTTP POST requests and forward it through a channel.\n\nFunction Description: The function `httpSDPServer` creates an HTTP server that listens on a specified port. When a POST request is received at the root path (\"/\"), it reads the request body, sends the body content through a channel, and responds with \"done\". The server runs in a separate goroutine to avoid blocking.\n\nInput: \n- `port` [int] - The port number on which the HTTP server should listen.\n\nOutput:\n- `chan string` - A channel that will receive the SDP data from incoming HTTP requests.",
    "Canonical_solution": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc httpSDPServer(port int) chan string {\n\tsdpChan := make(chan string)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tfmt.Fprintf(w, \"done\")\n\t\tsdpChan <- string(body)\n\t})\n\n\tgo func() {\n\t\tpanic(http.ListenAndServe(\":\"+strconv.Itoa(port), nil))\n\t}()\n\n\treturn sdpChan\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 103,
    "wrong_result": "func httpSDPServer(port int) chan string {\n\tch := make(chan string)\n\tgo func() {\n\t\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tif r.Method == \"POST\" {\n\t\t\t\tbody, _ := io.ReadAll(r.Body)\n\t\t\t\tch <- string(body)\n\t\t\t\tw.Write([]byte(\"done\"))\n\t\t\t}\n\t\t})\n\t\tlog.Println(\"Starting HTTP SDP server on :\", port)\n\t\thttp.ListenAndServe(\":\"+strconv.Itoa(port), nil)\n\t}()\n\treturn ch\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement an HTTP worker struct that can process jobs by making HTTP requests with custom headers and handling the responses appropriately.\n\nStruct Description: HTTPWorker is a struct that handles HTTP job processing with configurable user agent and logging capabilities. It implements job execution by making POST requests to specified URLs with JSON payloads and processing the responses.\n\nFields:\nUserAgent: string - The User-Agent header value to be used in HTTP requests\nLogger: *zerolog.Logger - Logger instance for debug and error logging\n\nMethods:\nWork: (job jobqueue.Job) -> *jobqueue.Result - Processes a job by making an HTTP POST request to the job's URL with the job's payload as JSON. Handles request creation, execution, response reading, and result parsing. Returns a jobqueue.Result indicating the outcome of the job processing.\n\nInput Parameters:\n- job: jobqueue.Job - Contains the job details including URL, payload, and timeout\n\nOutput:\n- *jobqueue.Result - The result of the job processing, including status, code, and message",
    "Canonical_solution": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/fireworq/fireworq/jobqueue\"\n\t\"github.com/rs/zerolog\"\n)\n\ntype HTTPWorker struct {\n\tUserAgent string\n\tLogger    *zerolog.Logger\n}\n\nfunc (worker *HTTPWorker) Work(job jobqueue.Job) *jobqueue.Result {\n\tclient := &http.Client{\n\t\tTimeout: time.Duration(job.Timeout()) * time.Second,\n\t}\n\treq, err := http.NewRequest(\n\t\t\"POST\",\n\t\tjob.URL(),\n\t\tstrings.NewReader(job.Payload()),\n\t)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusInternalFailure,\n\t\t\tMessage: fmt.Sprintf(\"Cannot create http request: %v\", err),\n\t\t}\n\t}\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\n\tuserAgent := worker.UserAgent\n\tif userAgent == \"\" {\n\t\tuserAgent = defaultUserAgent\n\t}\n\treq.Header.Add(\"User-Agent\", userAgent)\n\n\tresp, err := client.Do(req)\n\n\tworker.Logger.Debug().\n\t\tStr(\"action\", \"dispatch\").\n\t\tStr(\"worker\", \"HTTPWorker\").\n\t\tStr(\"url\", job.URL()).\n\t\tStr(\"payload\", job.Payload()).\n\t\tMsg(\"Dispatched via HTTP\")\n\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusInternalFailure,\n\t\t\tMessage: fmt.Sprintf(\"Request failed: %v\", err),\n\t\t}\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusFailure,\n\t\t\tCode:    resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\"Cannot read body: %v\", err),\n\t\t}\n\t}\n\n\tvar rslt jobqueue.Result\n\terr = json.Unmarshal(body, &rslt)\n\tif err != nil {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus: jobqueue.ResultStatusFailure,\n\t\t\tCode:   resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\n\t\t\t\t\"Cannot parse body as JSON: %v\\nOriginal response body:\\n%s\",\n\t\t\t\terr,\n\t\t\t\tstring(body),\n\t\t\t),\n\t\t}\n\t}\n\n\tif !rslt.IsValid() {\n\t\treturn &jobqueue.Result{\n\t\t\tStatus:  jobqueue.ResultStatusFailure,\n\t\t\tCode:    resp.StatusCode,\n\t\t\tMessage: fmt.Sprintf(\"Invalid result status: %s\\nOriginal response body:\\n%s\", rslt.Status, string(body)),\n\t\t}\n\t}\n\n\trslt.Code = resp.StatusCode\n\treturn &rslt\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 102,
    "wrong_result": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cesbit/zerolog\"\n)\n\ntype JobQueueJob struct {\n\tURL      string\n\tPayload  map[string]interface{}\n\tTimeout  time.Duration\n}\n\ntype JobQueueResult struct {\n\tStatus  string\n\tCode    int\n\tMessage string\n}\n\ntype HTTPWorker struct {\n\tUserAgent string\n\tLogger    *zerolog.Logger\n}\n\nfunc (w *HTTPWorker) Work(job JobQueueJob) *JobQueueResult {\n\tctx, cancel := context.WithTimeout(context.Background(), job.Timeout)\n\tdefer cancel()\n\n\tjsonPayload, err := json.Marshal(job.Payload)\n\tif err != nil {\n\t\tw.Logger.Error().Msgf(\"Failed to marshal payload: %v\", err)\n\t\treturn &JobQueueResult{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Failed to marshal payload\",\n\t\t}\n\t}\n\n\treq, err := http.NewRequest(\"POST\", job.URL, bytes.NewBuffer(jsonPayload))\n\tif err != nil {\n\t\tw.Logger.Error().Msgf(\"Failed to create request: %v\", err)\n\t\treturn &JobQueueResult{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Failed to create request\",\n\t\t}\n\t}\n\n\treq.Header.Set(\"User-Agent\", w.UserAgent)\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tw.Logger.Error().Msgf(\"Request failed: %v\", err)\n\t\treturn &JobQueueResult{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Request failed\",\n\t\t}\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tw.Logger.Error().Msgf(\"Failed to read response body: %v\", err)\n\t\treturn &JobQueueResult{\n\t\t\tStatus:  \"error\",\n\t\t\tCode:    500,\n\t\t\tMessage: \"Failed to read response body\",\n\t\t}\n\t}\n\n\tresult := &JobQueueResult{\n\t\tStatus:  \"success\",\n\t\tCode:    resp.StatusCode,\n\t\tMessage: string(body),\n\t}\n\n\tw.Logger.Debug().Msgf(\"Job processed successfully. Status Code: %d, Response: %s\", result.Code, result.Message)\n\n\treturn result\n}"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a Go struct that represents local network services capable of running both a DNS server and an HTTP server concurrently. The DNS server should resolve a specific domain to a local IP address, while the HTTP server should serve predefined webpages.\n\nStruct Description: The `localNetworkServices` struct encapsulates functionality for running concurrent DNS and HTTP servers. The DNS server resolves a configured domain to a local IP address, and the HTTP server serves static web content mapped to specific paths.\n\nFields:\n- domain: string - The domain name that will be resolved by the DNS server\n- webpages: map[string]string - A map of URL paths to their corresponding webpage content\n- ipAddr: string - The local IP address that both servers will bind to\n\nMethods:\n- DNSServerIP() -> string - Returns the IP address of the DNS server\n- URL(subpath string) -> string - Constructs a full URL for a given subpath using the configured domain\n- Serve(ctx context.Context) -> error - Starts both DNS and HTTP servers concurrently using an errgroup, returns any error that occurs during execution\n\nAdditional Helper Struct:\n- dnsHandler: Implements the dns.Handler interface to handle DNS queries\n\nFields:\n- records: map[string]string - A map of domain names to their corresponding IP addresses\n\nMethods:\n- ServeDNS(w dns.ResponseWriter, r *dns.Msg) - Handles incoming DNS queries, responding with A records for configured domains",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"golang.org/x/sync/errgroup\"\n\t\"github.com/miekg/dns\"\n)\n\ntype localNetworkServices struct {\n\tdomain   string\n\twebpages map[string]string\n\tipAddr   string\n}\n\nfunc (l localNetworkServices) DNSServerIP() string {\n\treturn l.ipAddr\n}\n\nfunc (l localNetworkServices) URL(subpath string) string {\n\treturn fmt.Sprintf(\"http://%s/%s\", l.domain, subpath)\n}\n\nfunc (l localNetworkServices) Serve(ctx context.Context) error {\n\terrGroup, _ := errgroup.WithContext(ctx)\n\n\terrGroup.Go(func() error {\n\t\tdnsSrv := &dns.Server{\n\t\t\tAddr: l.ipAddr + \":53\",\n\t\t\tNet:  \"udp\",\n\t\t\tHandler: &dnsHandler{\n\t\t\t\trecords: map[string]string{\n\t\t\t\t\tl.domain + \".\": l.ipAddr,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\treturn dnsSrv.ListenAndServe()\n\t})\n\n\terrGroup.Go(func() error {\n\t\tfor path, contents := range l.webpages {\n\t\t\twebpage := contents\n\t\t\thttp.HandleFunc(\"/\"+path, func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tio.WriteString(w, webpage)\n\t\t\t})\n\t\t}\n\n\t\treturn http.ListenAndServe(l.ipAddr+\":80\", nil)\n\t})\n\n\treturn errGroup.Wait()\n}\n\ntype dnsHandler struct {\n\trecords map[string]string\n}\n\nfunc (h dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\n\tmsg := dns.Msg{}\n\tmsg.SetReply(r)\n\tif r.Question[0].Qtype == dns.TypeA {\n\t\tmsg.Authoritative = true\n\t\tdomain := msg.Question[0].Name\n\t\taddress, ok := h.records[domain]\n\t\tif ok {\n\t\t\tmsg.Answer = append(msg.Answer, &dns.A{\n\t\t\t\tHdr: dns.RR_Header{Name: domain, Rrtype: dns.TypeA, Class: dns.ClassINET, Ttl: 3600},\n\t\t\t\tA:   net.ParseIP(address),\n\t\t\t})\n\t\t} else {\n\t\t\tmsg.SetRcode(r, dns.RcodeNameError)\n\t\t}\n\t}\n\n\tw.WriteMsg(&msg)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 103,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/miekg/dns\"\n)\n\ntype localNetworkServices struct {\n\tdomain    string\n\twebpages  map[string]string\n\tipAddr    string\n\tdnsHandler\n}\n\ntype dnsHandler struct {\n\trecords map[string]string\n}\n\nfunc (d *dnsHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {\n\tm := new(dns.Msg)\n\tm.SetReply(r)\n\tfor _, q := range r.Question {\n\t\tif q.Name == d.records[q.Name] {\n\t\t\trr, _ := dns.NewRR(q.Name+\".\"+ \"+A 127.0.0.1\")\n\t\t\tm.Answer = append(m.Answer, rr)\n\t\t}\n\t}\n\tw.WriteMsg(m)\n}\n\nfunc (s *localNetworkServices) DNSServerIP() string {\n\treturn s.ipAddr\n}\n\nfunc (s *localNetworkServices) URL(subpath string) string {\n\treturn \"http://\" + s.domain + subpath\n}\n\nfunc (s *localNetworkServices) Serve(ctx context.Context) error {\n\tvar err error\n\tvar wg sync.WaitGroup\n\teg, _ := errgroup.WithContext(ctx)\n\n\ts.dnsHandler.records = map[string]string{s.domain: s.ipAddr}\n\n\tdnsServer := &dns.Server{\n\t\tAddr:     s.ipAddr + \":53\",\n\t\tNet:      \"udp\",\n\t\tHandler:  s,\n\t}\n\n\teg.Go(func() error {\n\t\tif err := dnsServer.ListenAndServe(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tpath := r.URL.Path\n\t\tcontent, ok := s.webpages[path]\n\t\tif !ok {\n\t\t\thttp.NotFound(w, r)\n\t\t\treturn\n\t\t}\n\t\tw.Write([]byte(content))\n\t})\n\n\thttpServer := &http.Server{\n\t\tAddr:    s.ipAddr + \":80\",\n\t\tHandler: http.DefaultServeMux,\n\t}\n\n\teg.Go(func() error {\n\t\tif err := httpServer.ListenAndServe(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\twg.Add(2)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tif err := eg.Wait(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\twg.Wait()\n\n\treturn nil\n}"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Implement a Certificate Authority (CA) service in Go using the Chi router for HTTP routing, supporting both secure and insecure servers, with background jobs and proper shutdown handling.\n\nStruct Description: The CA struct represents a Certificate Authority service that manages HTTP servers (secure and insecure), configuration, authentication, and background tasks.\n\nFields:\n\nauth: [*authority.Authority] - The authority component handling certificate operations  \nconfig: [*config.Config] - Configuration settings for the CA service  \nsrv: [*server.Server] - The main secure HTTP server  \ninsecureSrv: [*server.Server] - Optional insecure HTTP server for certain endpoints  \nmetricsSrv: [*server.Server] - Optional metrics server  \nopts: [*options] - Additional service options  \nrenewer: [*TLSRenewer] - Component handling TLS certificate renewal  \ncompactStop: [chan struct{}] - Channel for stopping the background compaction job  \n\nMethods:\n\nInit: [func(cfg *config.Config) (*CA, error)] - Initializes the CA service with configuration, sets up routers, and prepares servers  \nRun: [func() error] - Starts all servers and background jobs, handles graceful shutdown on errors  \nshouldServeInsecureServer: [func() bool] - (implied private method) Determines if insecure server should be started  \nrunCompactJob: [func()] - (implied private method) Runs background compaction task  \nStop: [func() error] - (implied method) Handles service shutdown and cleanup",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n)\n\ntype CA struct {\n\tauth        *authority.Authority\n\tconfig      *config.Config\n\tsrv         *server.Server\n\tinsecureSrv *server.Server\n\tmetricsSrv  *server.Server\n\topts        *options\n\trenewer     *TLSRenewer\n\tcompactStop chan struct{}\n}\n\nfunc (ca *CA) Init(cfg *config.Config) (*CA, error) {\n\tmux := chi.NewRouter()\n\thandler := http.Handler(mux)\n\n\tinsecureMux := chi.NewRouter()\n\tinsecureHandler := http.Handler(insecureMux)\n\n\tmux.Use(middleware.GetHead)\n\tinsecureMux.Use(middleware.GetHead)\n\n\tapi.Route(mux)\n\tmux.Route(\"/1.0\", func(r chi.Router) {\n\t\tapi.Route(r)\n\t})\n\n\tinsecureMux.Get(\"/crl\", api.CRL)\n\tinsecureMux.Get(\"/1.0/crl\", api.CRL)\n\n\tbaseContext := buildContext(auth, scepAuthority, acmeDB, acmeLinker)\n\n\tca.srv = server.New(cfg.Address, handler, tlsConfig)\n\tca.srv.BaseContext = func(net.Listener) context.Context {\n\t\treturn baseContext\n\t}\n\n\tif ca.shouldServeInsecureServer() {\n\t\tca.insecureSrv = server.New(cfg.InsecureAddress, insecureHandler, nil)\n\t\tca.insecureSrv.BaseContext = func(net.Listener) context.Context {\n\t\t\treturn baseContext\n\t\t}\n\t}\n\n\treturn ca, nil\n}\n\nfunc (ca *CA) Run() error {\n\tvar wg sync.WaitGroup\n\terrs := make(chan error, 1)\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tca.runCompactJob()\n\t}()\n\n\tif ca.insecureSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.insecureSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\tif ca.metricsSrv != nil {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\terrs <- ca.metricsSrv.ListenAndServe()\n\t\t}()\n\t}\n\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terrs <- ca.srv.ListenAndServe()\n\t}()\n\n\terr := <-errs\n\n\tif !errors.Is(err, http.ErrServerClosed) {\n\t\tlog.Println(\"shutting down due to startup error ...\")\n\t\tif stopErr := ca.Stop(); stopErr != nil {\n\t\t\terr = fmt.Errorf(\"failed stopping CA after error occurred: %w: %w\", err, stopErr)\n\t\t} else {\n\t\t\terr = fmt.Errorf(\"stopped CA after error occurred: %w\", err)\n\t\t}\n\t}\n\n\twg.Wait()\n\n\treturn err\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 108,
    "wrong_result": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\ntype Server struct {\n\tAddr string\n\tHTTP *http.Server\n}\n\ntype Authority struct{}\n\ntype Config struct {\n\tSecureAddr string\n\tInsecureAddr string\n\tMetricsAddr string\n}\n\ntype Options struct{}\n\ntype TLSRenewer struct{}\n\ntype CA struct {\n\tauth       *Authority\n\tconfig     *Config\n\tsrv        *Server\n\tinsecureSrv *Server\n\tmetricsSrv *Server\n\topts       *Options\n\trenewer    *TLSRenewer\n\tcompactStop chan struct{}\n}\n\nfunc (c *CA) Init(cfg *Config) (*CA, error) {\n\tc.config = cfg\n\tc.auth = &Authority{}\n\tc.renewer = &TLSRenewer{}\n\tc.compactStop = make(chan struct{})\n\t\n\tc.srv = &Server{\n\t\tAddr: c.config.SecureAddr,\n\t\tHTTP: &http.Server{\n\t\t\tAddr: c.config.SecureAddr,\n\t\t\tHandler: chi.NewRouter(),\n\t\t},\n\t}\n\t\n\tif c.config.InsecureAddr != \"\" {\n\t\tc.insecureSrv = &Server{\n\t\t\tAddr: c.config.InsecureAddr,\n\t\t\tHTTP: &http.Server{\n\t\t\t\tAddr: c.config.InsecureAddr,\n\t\t\t\tHandler: chi.NewRouter(),\n\t\t\t},\n\t\t}\n\t}\n\t\n\tif c.config.MetricsAddr != \"\" {\n\t\tc.metricsSrv = &Server{\n\t\t\tAddr: c.config.MetricsAddr,\n\t\t\tHTTP: &http.Server{\n\t\t\t\tAddr: c.config.MetricsAddr,\n\t\t\t\tHandler: promhttp.Handler(),\n\t\t\t},\n\t\t}\n\t}\n\t\n\treturn c, nil\n}\n\nfunc (c *CA) Run() error {\n\tgo c.runCompactJob()\n\t\n\tif c.srv.Addr != \"\" {\n\t\tgo func() {\n\t\t\tif err := c.srv.HTTP.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\tfmt.Printf(\"Secure server error: %v\\n\", err)\n\t\t\t}\n\t\t}()\n\t}\n\t\n\tif c.insecureSrv != nil && c.shouldServeInsecureServer() {\n\t\tgo func() {\n\t\t\tif err := c.insecureSrv.HTTP.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\tfmt.Printf(\"Insecure server error: %v\\n\", err)\n\t\t\t}\n\t\t}()\n\t}\n\t\n\tif c.metricsSrv != nil {\n\t\tgo func() {\n\t\t\tif err := c.metricsSrv.HTTP.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\t\tfmt.Printf(\"Metrics server error: %v\\n\", err)\n\t\t\t}\n\t\t}()\n\t}\n\t\n\tc.waitForShutdown()\n\t\n\treturn nil\n}\n\nfunc (c *CA) shouldServeInsecureServer() bool {\n\treturn c.config.InsecureAddr != \"\"\n}\n\nfunc (c *CA) runCompactJob() {\n\tticker := time.NewTicker(24 * time.Hour)\n\tdefer ticker.Stop()\n\t\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\t// Perform compaction logic here\n\t\tcase <-c.compactStop:\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (c *CA) Stop() error {\n\tvar errs []error\n\t\n\tif c.srv != nil {\n\t\tif err := c.srv.HTTP.Shutdown(context.Background()); err != nil {\n\t\t\terrs = append(errs, fmt.Errorf(\"secure server shutdown: %w\", err))\n\t\t}\n\t}\n\t\n\tif c.insecureSrv != nil {\n\t\tif err := c.insecureSrv.HTTP.Shutdown(context.Background()); err != nil {\n\t\t\terrs = append(errs, fmt.Errorf(\"insecure server shutdown: %w\", err))\n\t\t}\n\t}\n\t\n\tif c.metricsSrv != nil {\n\t\tif err := c.metricsSrv.HTTP.Shutdown(context.Background()); err != nil {\n\t\t\terrs = append(errs, fmt.Errorf(\"metrics server shutdown: %w\", err))\n\t\t}\n\t}\n\t\n\tclose(c.compactStop)\n\t\n\tif len(errs) > 0 {\n\t\treturn fmt.Errorf(\"shutdown errors: %v\", errs)\n\t}\n\t\n\treturn nil\n}\n\nfunc (c *CA) waitForShutdown() {\n\tstopChan := make(chan os.Signal, 1)\n\tsignal.Notify(stopChan, syscall.SIGINT, syscall.SIGTERM)\n\t\n\t<-stopChan\n\tc.Stop()\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that performs HTTP requests with customizable options including TLS configuration, request method, headers, and payload.\n\nFunction Description: The function DoRequest executes HTTP requests with various configurable options. It handles TLS configuration (including insecure mode), sets request headers, processes different HTTP methods, and manages response reading. The function is designed to be flexible for different API interaction scenarios while maintaining security and error handling.\n\nInput:\n- opt (EtcdRequestOption struct) - Configuration options for the HTTP request containing:\n  - Endpoint (string): Base URL for the request\n  - Api (string): API endpoint path\n  - PostData (string): Request payload data\n  - TlsConfig (*tls.Config): TLS configuration (nil for insecure)\n  - Method (string): HTTP method (GET, POST, etc.)\n  - Silent (bool): Unused in current implementation\n\nOutput:\n- (string) - Response body content as string\n- (error) - Error object if request fails, nil on success",
    "Canonical_solution": "import (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/cdk-team/CDK/pkg/errors\"\n)\n\ntype EtcdRequestOption struct {\n\tEndpoint  string\n\tApi       string\n\tPostData  string\n\tTlsConfig *tls.Config\n\tMethod    string\n\tSilent    bool\n}\n\nfunc DoRequest(opt EtcdRequestOption) (string, error) {\n\tif opt.TlsConfig == nil || len(opt.TlsConfig.Certificates) == 0 || opt.TlsConfig.RootCAs == nil {\n\t\topt.TlsConfig = &tls.Config{InsecureSkipVerify: true}\n\t}\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: opt.TlsConfig,\n\t\t},\n\t\tTimeout: time.Duration(5) * time.Second,\n\t}\n\n\trequest, err := http.NewRequest(opt.Method, opt.Endpoint+opt.Api, bytes.NewBuffer([]byte(opt.PostData)))\n\tif err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found while generate post request in net.http .\"}\n\t}\n\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := client.Do(request)\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t} else if err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found in post request.\"}\n\t}\n\n\tcontent, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", &errors.CDKRuntimeError{Err: err, CustomMsg: \"err found in post request.\"}\n\t}\n\n\treturn string(content), nil\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 102,
    "wrong_result": "func DoRequest(opt *EtcdRequestOption) (string, error) {\n    url := opt.Endpoint + opt.Api\n    req, err := http.NewRequest(opt.Method, url, strings.NewReader(opt.PostData))\n    if err != nil {\n        return \"\", err\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    if opt.TlsConfig != nil {\n        tr := &http.Transport{\n            TLSClientConfig: opt.TlsConfig,\n        }\n        client := &http.Client{Transport: tr}\n        resp, err := client.Do(req)\n        if err != nil {\n            return \"\", err\n        }\n        defer resp.Body.Close()\n        body, err := io.ReadAll(resp.Body)\n        if err != nil {\n            return \"\", err\n        }\n        return string(body), nil\n    } else {\n        client := &http.Client{}\n        resp, err := client.Do(req)\n        if err != nil {\n            return \"\", err\n        }\n        defer resp.Body.Close()\n        body, err := io.ReadAll(resp.Body)\n        if err != nil {\n            return \"\", err\n        }\n        return string(body), nil\n    }\n}"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server using the Echo framework in Go, with basic middleware and a simple route handler.\n\nFunction Description: The function `StartHTTPServer` initializes a new Echo instance, adds logger and recovery middleware, registers a GET route handler for the root path (\"/\"), and starts the HTTP server on the specified address.\n\nInput:  \n- `address` (string): The network address (e.g., \":8080\") on which the HTTP server should listen.\n\nOutput:  \n- `error`: Returns an error if the server fails to start; otherwise, it blocks until the server is stopped.",
    "Canonical_solution": "import (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n)\n\nfunc StartHTTPServer(address string) error {\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\n\treturn e.Start(address)\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "func StartHTTPServer(address string) error {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\treturn e.Start(address)\n}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create an HTTP server using the Echo framework in Go that handles various routes with authentication middleware and serves different endpoints for application management.\n\nFunction Description: The `serve` function initializes and starts an HTTP server using the Echo framework. It sets up route handlers for various endpoints related to application management, including upload, installation, renaming, and deletion of apps. The function also implements authentication middleware (BasicAuth and KeyAuth) to secure certain endpoints. The server runs on the specified host and port.\n\nInput: \n- `host` (string): The host address where the server will run (e.g., \"localhost\" or \"0.0.0.0\")\n- `port` (uint64): The port number on which the server will listen (e.g., 8080)\n\nOutput: \n- None (the function runs indefinitely until the server is stopped or encounters an error, at which point it logs the error and exits)",
    "Canonical_solution": "import (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\te.HideBanner = true\n\n\tforcedBasicAuth := middleware.BasicAuth(func(username string, password string, c echo.Context) (bool, error) {\n\t\treturn username == config.Current.BasicAuth.Username && password == config.Current.BasicAuth.Password, nil\n\t})\n\tbasicAuth := func(f echo.HandlerFunc) echo.HandlerFunc {\n\t\tif config.Current.BasicAuth.Enable {\n\t\t\treturn forcedBasicAuth(f)\n\t\t} else {\n\t\t\treturn f\n\t\t}\n\t}\n\tworkflowKeyAuth := middleware.KeyAuth(func(s string, c echo.Context) (bool, error) {\n\t\treturn s == config.Current.BuilderKey, nil\n\t})\n\n\te.GET(\"/\", renderIndex, basicAuth)\n\te.GET(\"/favicon.png\", getFavIcon, basicAuth)\n\te.POST(\"/apps\", uploadUnsignedApp, basicAuth)\n\te.GET(\"/apps/:id/install\", appResolver(renderInstall))\n\te.GET(\"/apps/:id/manifest\", appResolver(getManifest))\n\te.GET(\"/apps/:id/resign\", appResolver(resignApp), basicAuth)\n\te.GET(\"/apps/:id/delete\", appResolver(deleteApp), basicAuth)\n\te.GET(\"/apps/:id/rename\", appResolver(renderRenameApp), basicAuth)\n\te.POST(\"/apps/:id/rename\", appResolver(renameApp), basicAuth)\n\te.GET(\"/apps/:id/2fa\", appResolver(render2FAPage), basicAuth)\n\te.POST(\"/apps/:id/2fa\", appResolver(set2FA), basicAuth)\n\te.GET(\"/jobs\", getLastJob, workflowKeyAuth)\n\te.GET(\"/jobs/:id/2fa\", jobResolver(get2FA), workflowKeyAuth)\n\te.POST(\"/jobs/:id/signed\", jobResolver(uploadSignedApp), workflowKeyAuth)\n\n\tlog.Fatal().Err(e.Start(fmt.Sprintf(\"%s:%d\", host, port))).Send()\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 106,
    "wrong_result": "package main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"net/http\"\n)\n\nfunc serve(host string, port uint64) {\n\te := echo.New()\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Welcome to the Application Management API\")\n\t})\n\n\te.POST(\"/upload\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusCreated, \"App uploaded successfully\")\n\t})\n\n\te.POST(\"/install/:id\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" installed\")\n\t})\n\n\te.PUT(\"/rename/:id\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tnewName := c.FormValue(\"name\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" renamed to \"+newName)\n\t})\n\n\te.DELETE(\"/delete/:id\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" deleted\")\n\t})\n\n\te.GET(\"/apps\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"List of apps\")\n\t})\n\n\te.POST(\"/apps\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusCreated, \"New app created\")\n\t})\n\n\te.GET(\"/apps/:id\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App details for ID \"+id)\n\t})\n\n\te.PUT(\"/apps/:id\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" updated\")\n\t})\n\n\te.DELETE(\"/apps/:id\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"Logs for app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"Config updated for app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/status\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"Status of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/start\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" started\")\n\t})\n\n\te.POST(\"/apps/:id/stop\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" stopped\")\n\t})\n\n\te.POST(\"/apps/:id/restart\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" restarted\")\n\t})\n\n\te.POST(\"/apps/:id/backup\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"Backup created for app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/backup/:backupId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/backup/:backupId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/restore/:backupId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\treturn c.String(http.StatusOK, \"App with ID \"+id+\" cloned\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" for app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/clone/:cloneId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" for app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/restore\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" for app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" for app ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Logs for clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Config updated for clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/status\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Status of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/start\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" of app ID \"+id+\" started\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/stop\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" of app ID \"+id+\" stopped\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/restart\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId+\" of app ID \"+id+\" restarted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\treturn c.String(http.StatusOK, \"Backup created for clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/clone/:cloneId/backup/:backupId\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for clone \"+cloneId+\" of app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/restore\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for clone \"+cloneId+\" of app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" for clone \"+cloneId+\" of app ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Logs for backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Config updated for backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/status\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Status of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/start\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" started\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/stop\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" stopped\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/restart\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restarted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" cloned\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/restore\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Logs for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Config updated for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/status\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Status of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/start\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" started\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/stop\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" stopped\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/restart\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restarted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\treturn c.String(http.StatusOK, \"Backup created for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/restore\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" for clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Logs for backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Config updated for backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/status\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Status of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/start\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" started\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/stop\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" stopped\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/restart\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restarted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" cloned\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/restore\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Logs for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Config updated for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/status\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Status of clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/start\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" started\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/stop\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" stopped\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/restart\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restarted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\treturn c.String(http.StatusOK, \"Backup created for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup/:backupId3\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\tbackupId3 := c.Param(\"backupId3\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId3+\" for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.DELETE(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup/:backupId3\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\tbackupId3 := c.Param(\"backupId3\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId3+\" for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" deleted\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup/:backupId3/restore\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\tbackupId3 := c.Param(\"backupId3\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId3+\" for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" restored\")\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup/:backupId3/upgrade\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\tbackupId3 := c.Param(\"backupId3\")\n\t\treturn c.String(http.StatusOK, \"Backup \"+backupId3+\" for clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id+\" upgraded\")\n\t})\n\n\te.GET(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup/:backupId3/logs\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\tbackupId3 := c.Param(\"backupId3\")\n\t\treturn c.String(http.StatusOK, \"Logs for backup \"+backupId3+\" of clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backupId+\" of clone \"+cloneId+\" of app ID \"+id)\n\t})\n\n\te.POST(\"/apps/:id/clone/:cloneId/backup/:backupId/clone/:cloneId2/backup/:backupId2/clone/:cloneId3/backup/:backupId3/config\", func(c echo.Context) error {\n\t\tid := c.Param(\"id\")\n\t\tcloneId := c.Param(\"cloneId\")\n\t\tbackupId := c.Param(\"backupId\")\n\t\tcloneId2 := c.Param(\"cloneId2\")\n\t\tbackupId2 := c.Param(\"backupId2\")\n\t\tcloneId3 := c.Param(\"cloneId3\")\n\t\tbackupId3 := c.Param(\"backupId3\")\n\t\treturn c.String(http.StatusOK, \"Config updated for backup \"+backupId3+\" of clone \"+cloneId3+\" of backup \"+backupId2+\" of clone \"+cloneId2+\" of backup \"+backup"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a Go struct that implements an HTTP server using the Echo framework, supporting both HTTP/2 and HTTPS configurations, with customizable timeouts and root path handling.\n\nStruct Description: The Api struct represents an HTTP server configuration with support for TLS, HTTP/2, and customizable timeouts. It provides methods to start and stop the server gracefully.\n\nFields:\nport: int - The port number on which the server will listen\nbindIp: string - The IP address to bind the server to\ntlsCertFile: string - Path to TLS certificate file (empty for non-HTTPS)\ntlsKeyFile: string - Path to TLS private key file (empty for non-HTTPS)\ntimeout: time.Duration - Server timeout duration for read/write operations\nrootPath: string - The root path for the server's default route\nsrv: *echo.Echo - The Echo server instance\n\nMethods:\nStart: () -> error - Initializes and starts the HTTP server in a goroutine, supporting both TLS and HTTP/2 configurations. Returns nil on successful startup.\nStop: (ctx context.Context) -> error - Gracefully shuts down the server using the provided context. Returns any error that occurs during shutdown.",
    "Canonical_solution": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"golang.org/x/net/http2\"\n)\n\ntype Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.HideBanner = true\n\ta.srv.HidePort = true\n\ta.srv.Server.ReadTimeout = a.timeout\n\ta.srv.Server.IdleTimeout = a.timeout\n\ta.srv.Server.WriteTimeout = a.timeout + a.timeout\n\n\ta.srv.GET(\n\t\ta.rootPath,\n\t\tfunc(c echo.Context) error {\n\t\t\treturn c.HTML(http.StatusOK, `Hey, Gotenberg has no UI, it's an API. Head to the <a href=\"https://gotenberg.dev\">documentation</a> to learn how to interact with it \ud83d\ude80`)\n\t\t},\n\t)\n\n\tgo func() {\n\t\tvar err error\n\t\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\t\terr = a.srv.StartTLS(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), a.tlsCertFile, a.tlsKeyFile)\n\t\t} else {\n\t\t\tserver := &http2.Server{}\n\t\t\terr = a.srv.StartH2CServer(fmt.Sprintf(\"%s:%d\", a.bindIp, a.port), server)\n\t\t}\n\t\tif !errors.Is(err, http.ErrServerClosed) {\n\t\t\ta.logger.Fatal(err.Error())\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\treturn a.srv.Shutdown(ctx)\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 106,
    "wrong_result": "type Api struct {\n\tport        int\n\tbindIp      string\n\ttlsCertFile string\n\ttlsKeyFile  string\n\ttimeout     time.Duration\n\trootPath    string\n\tsrv         *echo.Echo\n}\n\nfunc (a *Api) Start() error {\n\ta.srv = echo.New()\n\ta.srv.HidePort = true\n\ta.srv.Use(middleware.Recover())\n\ta.srv.GET(a.rootPath, func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Server is running\")\n\t})\n\n\tserverConfig := &http.Server{\n\t\tAddr:    fmt.Sprintf(\"%s:%d\", a.bindIp, a.port),\n\t\tHandler: a.srv,\n\t\tReadTimeout:  a.timeout,\n\t\tWriteTimeout: a.timeout,\n\t}\n\n\tif a.tlsCertFile != \"\" && a.tlsKeyFile != \"\" {\n\t\tgo func() {\n\t\t\terr := serverConfig.ListenAndServeTLS(a.tlsCertFile, a.tlsKeyFile)\n\t\t\tif err != nil && err != http.ErrServerClosed {\n\t\t\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t\t\t}\n\t\t}()\n\t} else {\n\t\tgo func() {\n\t\t\terr := serverConfig.ListenAndServe()\n\t\t\tif err != nil && err != http.ErrServerClosed {\n\t\t\t\tlog.Fatalf(\"Server failed to start: %v\", err)\n\t\t\t}\n\t\t}()\n\t}\n\treturn nil\n}\n\nfunc (a *Api) Stop(ctx context.Context) error {\n\tif a.srv == nil {\n\t\treturn nil\n\t}\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n\n\treturn a.srv.Shutdown(ctx)\n}"
  }
]