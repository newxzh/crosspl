[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Trader {\n  constructor(config) {\n    this.key = config.key;\n    this.secret = config.secret;\n    this.currency = config.currency;\n    this.asset = config.asset;\n    this.pair = `${this.currency}${this.asset}`;\n    this.name = 'EXMO';\n    this.nonce = 0;\n  }\n\n  api_query(method, params, callback) {\n    this.nonce++;\n    const sortedParams = Object.keys(params).sort().reduce((acc, key) => {\n      acc[key] = params[key];\n      return acc;\n    }, {});\n    const dataToSign = `${method}${JSON.stringify(sortedParams)}${this.nonce}`;\n    const hmac = crypto.createHmac('sha512', this.secret);\n    const signature = hmac.update(dataToSign).digest('hex');\n    const url = `https://api.exmo.com/api/3/${method}`;\n    const headers = {\n      'Key': this.key,\n      'Sign': signature\n    };\n    fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(sortedParams)\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.error) {\n        callback(new Error(data.error), null);\n      } else {\n        callback(null, data);\n      }\n    })\n    .catch(error => {\n      callback(error, null);\n    });\n  }\n}"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a function that sets up an Express server with various route handlers for handling HTTP requests related to email functionality, including authentication, sending test emails, and managing email server configurations.\n\nFunction Description: The function `setupExpressServer` initializes an Express server with middleware for parsing request bodies and cookies. It defines several route handlers for different HTTP methods (GET, POST) that handle email-related operations such as authentication, sending test emails, and saving email server configurations. The server listens on a specified port.\n\nInput: None (The function uses module-level variables like `processInfo.port` for configuration)\n\nOutput: None (The function starts a server that listens on the specified port and handles incoming HTTP requests)\n\nNote: The function relies on several external modules and variables that should be available in the scope:\n- `express`: The Express framework\n- `connect`: Middleware for Express\n- `fs`: File system module\n- `nodemailer`: For sending emails\n- `lcrypto`: For encryption\n- `lutil`: For file operations\n- `auth`: A variable storing authentication details\n- `processInfo`: An object containing server configuration (like port number)\n- `locker`: An object containing base URL for locker service\n- `request`: For making HTTP requests",
    "Canonical_solution": "function setupExpressServer() {\n    var express = require('express');\n    var connect = require('connect');\n    var app = express.createServer(connect.bodyParser(), connect.cookieParser());\n    \n    app.set('views', __dirname);\n    \n    app.get('/', function(req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!auth || req.param(\"change\")) return res.end(fs.readFileSync(__dirname + '/auth.html'));\n        res.write(\"<p>Using \"+auth.host+\":\"+auth.port+\" \");\n        if(auth.ssl) res.write(\"(ssl)\");\n        if(auth.user) res.write(\"authenticating as \"+auth.user);\n        res.write(\"<br><a href='?change=1'>change</a> or <a href='javascript:window.location=\\\"test?to=\\\"+window.prompt(\\\"recipient email address\\\")'>send test message</a>\");\n        res.end();\n    });\n    \n    app.post('/save', function(req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!req.body || !req.body.host || !req.body.port) return res.end(\"missing minimum required host/port :(\");\n        nodemailer.SMTP = auth = {host:req.body.host, port:req.body.port, ssl:false};\n        if(req.body.ssl) auth.ssl = true;\n        if(req.body.user && req.body.pass) {\n            auth.use_authentication = true;\n            auth.user = req.body.user;\n            auth.pass = lcrypto.encrypt(req.body.pass);\n        }\n        lutil.atomicWriteFileSync(\"auth.json\", JSON.stringify(auth, null, 4));\n        if(auth.pass) auth.pass = req.body.pass;\n        res.end(\"saved! <a href='./'>continue</a>\");\n    });\n    \n    app.get('/state', function (req, res) {\n        var ready = (auth) ? 1 : 0;\n        res.send({ready:ready});\n    });\n    \n    app.get('/test', function (req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!req.param(\"to\") || req.param(\"to\").indexOf(\"@\") <= 0) return res.end(\"invalid recipient\")\n        var message = {\n            sender: 'Testificate <42@awesome.com>',\n            to: req.param(\"to\"),\n            subject: 'test message  \u2714',\n            body: 'Hello to you!',\n            html:'<p>it <b>WORKED</b></p>',\n            debug: true\n        };\n        request.post({url:locker.lockerBase + \"/Me/smtp/send\", json:message}, function(err, r, body){\n            if(err || !body) return res.end(\"failed \"+err);\n            return res.end(\"sent!\");\n        });\n    });\n    \n    app.post('/send', function (req, res) {\n        if(!auth) return res.send(false);\n        if (!req.body || !req.body.to) return res.send(false);\n        console.error(\"DEBUG SMTP: \"+JSON.stringify(req.body));\n        var sent = false;\n        nodemailer.send_mail(req.body, function(err, ok){\n            if(sent) return;\n            sent=true;\n            if(err || !ok){\n                console.error('Error occured: '+err);\n                return res.send(false);\n            }\n            res.send(true);\n        })\n    });\n    \n    app.listen(processInfo.port,function() {\n        var returnedInfo = {};\n        console.log(JSON.stringify(returnedInfo));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function setupExpressServer() {\n  const app = express();\n  app.use(connect.cookieParser());\n  app.use(connect.bodyParser());\n\n  app.post('/auth/login', (req, res) => {\n    if (req.body.username === auth.username && req.body.password === auth.password) {\n      res.send('Authentication successful');\n    } else {\n      res.status(401).send('Invalid credentials');\n    }\n  });\n\n  app.post('/email/test', (req, res) => {\n    const transporter = nodemailer.createTransport({\n      host: 'smtp.example.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: 'user@example.com',\n        pass: 'password'\n      }\n    });\n\n    transporter.sendMail({\n      from: 'test@example.com',\n      to: 'recipient@example.com',\n      subject: 'Test Email',\n      text: 'This is a test email.'\n    }, (error, info) => {\n      if (error) {\n        res.status(500).send(error.message);\n      } else {\n        res.send('Email sent successfully');\n      }\n    });\n  });\n\n  app.post('/email/config', (req, res) => {\n    const config = req.body;\n    const encryptedConfig = lcrypto.encrypt(config);\n    lutil.writeFile('email-config.json', encryptedConfig, (err) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        res.send('Configuration saved');\n      }\n    });\n  });\n\n  app.get('/email/config', (req, res) => {\n    lutil.readFile('email-config.json', (err, data) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        const decryptedData = lcrypto.decrypt(data);\n        res.send(decryptedData);\n      }\n    });\n  });\n\n  app.listen(processInfo.port, () => {\n    console.log(`Server is running on port ${processInfo.port}`);\n  });\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server with WebSocket support using Express and Socket.IO, implementing a particle simulation system with cluster and client event handling.\n\nFunction Description: The function `startServer` initializes an Express application, sets up static file serving, integrates Socket.IO for real-time communication, and configures a particle simulation system with collision detection and cluster management. It handles particle movement, boundary collisions, and client interactions through defined event handlers.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function starts a server listening on port 3000 but doesn't return any value)",
    "Canonical_solution": "function startServer() {\n    const express = require('express');\n    const app = express();\n    const server = require('http').Server(app);\n    const io = require('socket.io')(server);\n    const swip = require('../../../src/server/index.js');\n\n    app.use(express.static(__dirname + './../static'));\n\n    swip(io, {\n        cluster: {\n            events: {\n                update: (cluster) => {\n                    const blobs = cluster.data.blobs;\n                    const clients = cluster.clients;\n\n                    const updatedBlobs = blobs.map((blob) => {\n                        const boundaryOffset = blob.size;\n                        const client = clients.find((c) => isParticleInClient(blob, c));\n\n                        let nextPosX = blob.x + blob.speedX;\n                        let nextPosY = blob.y + blob.speedY;\n                        let nextSpeedX = blob.speedX;\n                        let nextSpeedY = blob.speedY;\n\n                        if (client) {\n                            if (((blob.speedX < 0) &&\n                                ((nextPosX - boundaryOffset) < client.transform.x)\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.left, nextPosY))) {\n                                nextPosX = client.transform.x + boundaryOffset;\n                                nextSpeedX = blob.speedX * -1;\n                            } else if (((blob.speedX > 0) &&\n                                ((nextPosX + boundaryOffset) > (client.transform.x + client.size.width))\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.right, nextPosY))) {\n                                nextPosX = client.transform.x + (client.size.width - boundaryOffset);\n                                nextSpeedX = blob.speedX * -1;\n                            }\n\n                            if (((blob.speedY < 0) &&\n                                ((nextPosY - boundaryOffset) < client.transform.y\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.top, nextPosX)))) {\n                                nextPosY = client.transform.y + boundaryOffset;\n                                nextSpeedY = blob.speedY * -1;\n                            } else if (((blob.speedY > 0) &&\n                                ((nextPosY + boundaryOffset) > (client.transform.y + client.size.height))\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.bottom, nextPosX))\n                            ) {\n                                nextPosY = client.transform.y + (client.size.height - boundaryOffset);\n                                nextSpeedY = blob.speedY * -1;\n                            }\n                        } else {\n                            const firstClient = clients[0];\n                            nextPosX = firstClient.transform.x + (firstClient.size.width / 2);\n                            nextPosY = firstClient.transform.y + (firstClient.size.height / 2);\n                            nextSpeedX = 0;\n                            nextSpeedY = 0;\n                        }\n\n                        blob.x = nextPosX;\n                        blob.y = nextPosY;\n                        blob.speedX = nextSpeedX;\n                        blob.speedY = nextSpeedY;\n\n                        return blob;\n                    });\n\n                    return {\n                        blobs: { $set: updatedBlobs },\n                    };\n                },\n                merge: (cluster1, cluster2, transform) => ({\n                    blobs: { $set: getNewParticleDist(cluster1, cluster2, transform) },\n                    backgroundColor: { $set: cluster1.data.backgroundColor },\n                }),\n            },\n            init: () => ({ blobs: [], backgroundColor: getRandomColor() }),\n        },\n\n        client: {\n            init: () => ({}),\n            events: {\n                addBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $push: blobs } },\n                        },\n                    };\n                },\n                updateBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $set: blobs } },\n                        },\n                    };\n                },\n            },\n        },\n    });\n\n    server.listen(3000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketIO = require('socket.io');\nconst cluster = require('cluster');\nconst os = require('os');\n\nfunction startServer() {\n  if (cluster.isMaster) {\n    const numCPUs = os.cpus().length;\n    console.log(`Master process running on ${numCPUs} CPUs`);\n    const app = express();\n    const server = http.createServer(app);\n    const io = socketIO(server);\n\n    app.use(express.static('public'));\n\n    io.on('connection', (socket) => {\n      console.log('Client connected');\n      socket.emit('particles', particles);\n      socket.on('startSimulation', () => {\n        // Handle start\n      });\n      socket.on('stopSimulation', () => {\n        // Handle stop\n      });\n      socket.on('resetParticles', () => {\n        // Handle reset\n      });\n      socket.on('disconnect', () => {\n        console.log('Client disconnected');\n      });\n    });\n\n    let particles = [];\n    for (let i = 0; i < 100; i++) {\n      particles.push({\n        x: Math.random() * 800,\n        y: Math.random() * 600,\n        dx: (Math.random() - 0.5) * 2,\n        dy: (Math.random() - 0.5) * 2\n      });\n    }\n\n    function updateParticles() {\n      for (let p of particles) {\n        p.x += p.dx;\n        p.y += p.dy;\n        if (p.x < 0 || p.x > 800) p.dx *= -1;\n        if (p.y < 0 || p.y > 600) p.dy *= -1;\n      }\n      io.emit('updateParticles', particles);\n    }\n\n    setInterval(updateParticles, 16);\n\n    server.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n\n    for (let i = 0; i < numCPUs; i++) {\n      cluster.fork();\n    }\n  } else {\n    cluster.worker.on('message', (message) => {\n      // Handle messages from master\n    });\n  }\n}\n\nstartServer();"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const http = require('http');\n\nclass URLExpander {\n  constructor() {\n    this.map = {\n      isgd: 'is.gd',\n      googl: 'goo.gl',\n      budurl: 'budurl.com',\n      snipurl: 'snipurl.com'\n    };\n    this.timeout = 5000;\n  }\n\n  expand(args, callback) {\n    const url = args.url;\n    const depth = args.depth || 0;\n    const seen = args.seen || {};\n\n    if (seen[url]) {\n      callback(null, { url, depth, seen });\n      return;\n    }\n\n    const service = this._getService(url);\n    if (service) {\n      this[service](args, (err, res) => {\n        if (err) {\n          callback(err, { url, depth, seen });\n        } else {\n          callback(null, { url: res.url, depth: depth + 1, seen: { ...seen, [res.url]: true } });\n        }\n      });\n    } else {\n      this.generic(args, (err, res) => {\n        if (err) {\n          callback(err, { url, depth, seen });\n        } else {\n          callback(null, { url: res.url, depth: depth + 1, seen: { ...seen, [res.url]: true } });\n        }\n      });\n    }\n  }\n\n  _getService(url) {\n    try {\n      const domain = new URL(url).hostname;\n      for (const service in this.map) {\n        if (domain.includes(this.map[service])) {\n          return service;\n        }\n      }\n    } catch (e) {\n      return null;\n    }\n    return null;\n  }\n\n  isgd(args, callback) {\n    callback(null, { url: 'http://example.com' });\n  }\n\n  googl(args, callback) {\n    callback(null, { url: 'http://example.com' });\n  }\n\n  budurl(args, callback) {\n    callback(null, { url: 'http://example.com' });\n  }\n\n  snipurl(args, callback) {\n    callback(null, { url: 'http://example.com' });\n  }\n\n  generic(args, callback) {\n    const url = args.url;\n    try {\n      const parsedUrl = new URL(url);\n      const options = {\n        hostname: parsedUrl.hostname,\n        path: parsedUrl.pathname,\n        method: 'HEAD',\n        timeout: this.timeout\n      };\n\n      const req = http.request(options, (res) => {\n        if (res.statusCode === 301 || res.statusCode === 302) {\n          const location = res.headers.location;\n          if (location) {\n            callback(null, { url: location });\n          } else {\n            callback(new Error('No redirect location found'), { url });\n          }\n        } else {\n          callback(null, { url });\n        }\n      });\n\n      req.on('error', (err) => {\n        callback(err, { url });\n      });\n\n      req.end();\n    } catch (e) {\n      callback(e, { url });\n    }\n  }\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function to set up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB as the session store. It integrates Next.js for server-side rendering and sets up a catch-all route handler. The server listens on a specified port and connects to MongoDB using environment variables for configuration.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that:\n- Listens on the specified port\n- Outputs the server URL to console when ready\n- Maintains persistent connections to MongoDB for session storage)",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  mongoose.connect(MONGO_URL);\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  const server = express();\n\n  const sessionOptions = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: mongoSessionStore.create({\n      mongoUrl: MONGO_URL,\n      ttl: 14 * 24 * 60 * 60,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      maxAge: 14 * 24 * 60 * 60 * 1000,\n      domain: 'localhost',\n    },\n  };\n\n  const sessionMiddleware = session(sessionOptions);\n  server.use(sessionMiddleware);\n\n  server.get('*', (req, res) => handle(req, res));\n\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on ${ROOT_URL}`);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "import express from 'express';\nimport next from 'next';\nimport session from 'express-session';\nimport MongoStore from 'connect-mongo';\nimport { MongoClient } from 'mongodb';\n\nconst app = next({ dev: process.env.NODE_ENV === 'development' });\nconst handle = app.getRequestHandler();\n\nconst server = express();\n\nserver.use(session({\n  name: process.env.SESSION_NAME,\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: true,\n  store: new MongoStore({\n    mongoUrl: process.env.MONGO_URL_TEST,\n  }),\n}));\n\nserver.get('*', (req, res) => {\n  return handle(req, res);\n});\n\nserver.listen(process.env.PORT || 8000, () => {\n  console.log(`Server ready at http://localhost:${process.env.PORT}`);\n});"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a JavaScript function that initializes and configures an Express server with middleware, route handling, and environment-specific settings, then starts the server on a specified port.\n\nFunction Description: The function `createAndConfigureServer` initializes an Express server, configures middleware for request processing, sets up view engines, defines route handlers, and applies environment-specific configurations. The function `startServer` takes the configured server instance and starts it on the specified port.\n\nInput: \n- `port` (Number) - The port number on which the server should listen.\n\nOutput: \n- `app` (Object) - The configured Express server instance (returned by `createAndConfigureServer`).\n- Server startup log message (output by `startServer`).\n\nMethods:\n- `createAndConfigureServer()` -> Object - Creates and configures an Express server with middleware, routes, and environment settings.\n- `startServer(app, port)` -> undefined - Starts the Express server on the specified port and logs the server status.",
    "Canonical_solution": "var express = require('express');\nvar routes = require('./routes');\n\nfunction createAndConfigureServer() {\n    var app = express.createServer();\n    \n    app.configure(function(){\n        app.set('views', __dirname + '/views');\n        app.set('view engine', 'jade');\n        app.use(express.bodyParser());\n        app.use(express.methodOverride());\n        app.use(app.router);\n        app.use(express.static(__dirname + '/public'));\n    });\n\n    app.configure('development', function(){\n        app.use(express.errorHandler({ dumpExceptions: true, showStack: true })); \n    });\n\n    app.configure('production', function(){\n        app.use(express.errorHandler()); \n    });\n\n    app.get('/', routes.index);\n    \n    return app;\n}\n\nfunction startServer(app, port) {\n    app.listen(port);\n    console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function createAndConfigureServer() {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  app.use(helmet());\n  app.set('view engine', 'ejs');\n  app.get('/', (req, res) => res.send('Hello World!'));\n  if (process.env.NODE_ENV === 'production') {\n    // Production-specific configurations\n  }\n  return app;\n}\n\nfunction startServer(app, port) {\n  app.listen(port, () => {\n    console.log(`Server is running on port ${port}`);\n  });\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a function to set up an Express.js server with middleware configuration, route handling, and database synchronization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with CORS support, request body parsing, and database synchronization. It configures middleware, defines basic routes, and starts the server on a specified port. The server integrates authentication and user management routes from external modules.\n\nInput: None (The function takes no parameters as it's self-contained for server setup)\n\nOutput: None (The function doesn't return anything but starts a server process that listens on the specified port)",
    "Canonical_solution": "function setupExpressServer() {\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n    const cors = require(\"cors\");\n\n    const app = express();\n\n    var corsOptions = {\n        origin: \"http://localhost:8081\"\n    };\n\n    app.use(cors(corsOptions));\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n\n    const db = require(\"./app/models\");\n    const Role = db.role;\n\n    db.sequelize.sync();\n\n    app.get(\"/\", (req, res) => {\n        res.json({ message: \"Welcome to bezkoder application.\" });\n    });\n\n    require('./app/routes/auth.routes')(app);\n    require('./app/routes/user.routes')(app);\n\n    const PORT = process.env.PORT || 8080;\n    app.listen(PORT, () => {\n        console.log(`Server is running on port ${PORT}.`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function setupExpressServer() {\n  const express = require('express');\n  const cors = require('cors');\n  const expressJson = require('express').json;\n  const authRoutes = require('./auth_routes');\n  const userRoutes = require('./user_routes');\n  const mongoose = require('mongoose');\n\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(expressJson());\n\n  // Routes\n  app.use('/auth', authRoutes);\n  app.use('/users', userRoutes);\n\n  // Database connection\n  mongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true })\n    .then(() => console.log('Database connected'))\n    .catch(err => console.error('Database connection error:', err));\n\n  // Start server\n  const PORT = 3000;\n  app.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n  });\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server using the Express framework in JavaScript, with middleware configurations for request processing and static file serving.\n\nFunction Description: The function `createServer` initializes an Express application, configures various middleware for logging, request parsing, and static file serving, and starts an HTTP server listening on a specified port. It also includes environment-specific error handling for development mode.\n\nInput: None (The function does not take any parameters; it uses environment variables like `process.env.PORT` for configuration.)\n\nOutput: None (The function does not return any value; it starts an HTTP server that listens on the specified port and logs a message upon successful startup.)",
    "Canonical_solution": "function createServer() {\n    var express = require('express');\n    var http = require('http');\n    var path = require('path');\n\n    var app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded());\n    app.use(express.methodOverride());\n    app.use(express.static(path.join(__dirname, '/public')));\n    app.use(express.static(path.join(__dirname, '/tests')));\n\n    if ('development' == app.get('env')) {\n        app.use(express.errorHandler());\n    }\n\n    http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express server listening on port ' + app.get('port'));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function createServer() {\n  const express = require('express');\n  const morgan = require('morgan');\n  const app = express();\n\n  app.use(morgan('dev'));\n  app.use(express.json());\n  app.use(express.static('public'));\n\n  app.use((err, req, res, next) => {\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error:', err);\n      res.status(500).send('Internal Server Error');\n    } else {\n      res.status(500).send('Internal Server Error');\n    }\n  });\n\n  const port = process.env.PORT || 3000;\n  app.listen(port, () => {\n    console.log(`Server is running on port ${port}`);\n  });\n}\n\ncreateServer();"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a function that sets up an Express server with middleware configuration, route handling, and server initialization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with essential middleware (CORS, static file serving, JSON body parsing), configures route handlers, and starts listening on a specified port. It handles both API routes and serves static HTML files.\n\nInput: None (The function uses imported modules and configuration from './src/config' and './src/routes')\n\nOutput: None (The function's side effect is starting an HTTP server that listens on the configured port)",
    "Canonical_solution": "function setupExpressServer() {\n    const bodyParser = require('body-parser');\n    const express = require('express');\n    const path = require('path');\n    const cors = require('cors');\n    const config = require('./src/config');\n    const routes = require('./src/routes');\n\n    const app = express();\n\n    app.enable('trust proxy');\n    app.use(cors());\n    app.use(express.static(path.join(__dirname, 'www')));\n    app.use(bodyParser.json());\n\n    app.get('/v2', (req, res) => res.sendFile(path.join(__dirname, 'www/index.html')));\n    app.use(routes);\n\n    app.listen(config.PORT, err => {\n        if (err) console.error(err);\n        console.log('Server started on ' + config.PORT);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "import express from 'express';\nimport config from './src/config';\nimport routes from './src/routes';\n\nfunction setupExpressServer() {\n  const app = express();\n  app.use(config.corsOptions);\n  app.use(express.static(config.staticDir));\n  app.use(express.json());\n  app.use(routes);\n  app.listen(config.port, () => {\n    console.log(`Server running on port ${config.port}`);\n  });\n}\n\nsetupExpressServer();"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a function that sets up a proxy server using Express and http-proxy-middleware to forward requests to a target API while modifying request and response headers.\n\nFunction Description: The function `createProxyServer` initializes an Express application that acts as a proxy server. It configures middleware to forward all incoming requests to a specified target API (https://api.openai.com in this case), removes certain headers from outgoing requests, and adds CORS headers to responses. The server listens on port 9000 by default.\n\nInput: None (The function takes no parameters as all configurations are hardcoded)\n\nOutput: None (The function doesn't return anything but starts a server process that continues running)",
    "Canonical_solution": "function createProxyServer() {\n    const express = require('express');\n    const { createProxyMiddleware } = require('http-proxy-middleware');\n    const app = express();\n    const port = 9000;\n\n    app.use('/', createProxyMiddleware({\n        target: 'https://api.openai.com',\n        changeOrigin: true,\n        onProxyReq: (proxyReq, req, res) => {\n            proxyReq.removeHeader('x-forwarded-for');\n            proxyReq.removeHeader('x-real-ip');\n        },\n        onProxyRes: function (proxyRes, req, res) {\n            proxyRes.headers['Access-Control-Allow-Origin'] = '*';\n        }\n    }));\n\n    app.listen(port, () => {\n        console.log(`Example app listening at http://localhost:${port}`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\nfunction createProxyServer() {\n  const app = express();\n\n  const proxyMiddleware = createProxyMiddleware({\n    target: 'https://api.openai.com',\n    changeOrigin: true,\n    onRequest: (req) => {\n      delete req.headers['x-forwarded-for'];\n      delete req.headers['connection'];\n    },\n    onResponse: (proxyRes, req, res) => {\n      proxyRes.headers['Access-Control-Allow-Origin'] = '*';\n      proxyRes.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS';\n      proxyRes.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization';\n    }\n  });\n\n  app.use(proxyMiddleware);\n  app.listen(9000, () => {\n    console.log('Proxy server is running on port 9000');\n  });\n}\n\ncreateProxyServer();"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TSClient {\n  constructor(query, cb) {\n    this.id = this.generateMD5(query);\n    this.search = this.loadState();\n    this.search.q = query;\n    this.search.since_id = this.search.since_id || 0;\n    this.search.rcount = this.search.rcount || 20;\n    this.new_since_id = null;\n    cb(this);\n  }\n\n  generateMD5(query) {\n    const crypto = require('crypto');\n    return crypto.createHash('md5').update(query).digest('hex');\n  }\n\n  loadState() {\n    const filename = `search_state_${this.id}.json`;\n    try {\n      const data = require('fs').readFileSync(filename, 'utf8');\n      return JSON.parse(data);\n    } catch (err) {\n      return {};\n    }\n  }\n\n  syncSearch(callback) {\n    this._walker({\n      ts: this,\n      search: this.search,\n      cb: callback,\n      page: 1,\n      results: [],\n      new_since_id: null\n    });\n  }\n\n  _walker(s) {\n    const nextPage = s.page + 1;\n    const currentPageResults = this.fetchPage(s.search, nextPage);\n    s.results = s.results.concat(currentPageResults);\n    s.new_since_id = currentPageResults.newest_id;\n    this.new_since_id = s.new_since_id;\n\n    if (nextPage < this.getMaxPages()) {\n      s.page = nextPage;\n      this._walker(s);\n    } else {\n      s.cb(s.results);\n    }\n  }\n\n  fetchPage(searchParams, page) {\n    return [\n      { id: `tweet_${page}_1`, text: `Tweet ${page} 1` },\n      { id: `tweet_${page}_2`, text: `Tweet ${page} 2` },\n      newest_id: `id_${page}`\n    ];\n  }\n\n  getMaxPages() {\n    return 5;\n  }\n\n  set(search) {\n    this.search = search;\n    this.saveState();\n  }\n\n  saveState() {\n    const filename = `search_state_${this.id}.json`;\n    require('fs').writeFileSync(filename, JSON.stringify(this.search), 'utf8');\n  }\n\n  get new_since_id() {\n    return this.new_since_id;\n  }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\nconst http = require('http');\n\nfunction createExpressServer() {\n  const app = express();\n  const port = process.env.PORT || 3000;\n\n  // Serve static files from parent directory\n  app.use(express.static(path.join(__dirname, '..')));\n\n  // Integrate additional route handlers from a separate module\n  const routes = require('./routes');\n  app.use(routes);\n\n  const server = http.createServer(app);\n  server.listen(port, () => {\n    console.log(`Server is running on port ${port}`);\n  });\n\n  return server;\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const url = 'https://example.com/api';\n  const headers = { 'Content-Type': 'application/json' };\n  const data = JSON.stringify({ key: 'value' });\n\n  request.post({\n    url,\n    headers,\n    body: data\n  }, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n    } else {\n      console.log('Response:', body);\n    }\n  });\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. For each connection, it creates a unique file to store the raw HTTP request data. The server handles regular requests by responding with connection information and provides an HTML upload form for the root path. The server tracks active connections and logs connection/disconnection events.\n\nInput: None (The function takes no parameters but uses environment variable `PORT` for configuration)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server that writes to files)\n\nNote: The function maintains internal state including:\n- A connection counter\n- An active HTTP server instance\n- File streams for each connection\n- Logging of connection events to console",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst process = require('process');\n\nfunction createServer() {\n  const server = http.createServer();\n  let connectionCounter = 0;\n  const connectionStreams = {};\n  \n  server.on('connection', (socket) => {\n    connectionCounter++;\n    console.log(`Connection established: ${connectionCounter}`);\n    const filename = `conn_${connectionCounter}.txt`;\n    const stream = fs.createWriteStream(filename);\n    connectionStreams[socket] = stream;\n    \n    socket.on('close', () => {\n      console.log(`Connection closed: ${connectionCounter}`);\n      delete connectionStreams[socket];\n    });\n  });\n  \n  server.on('request', (request, response) => {\n    const socket = request.socket;\n    const stream = connectionStreams[socket];\n    \n    let data = '';\n    request.on('data', (chunk) => {\n      data += chunk.toString();\n    });\n    \n    request.on('end', () => {\n      stream.write(data);\n      \n      if (request.url === '/') {\n        response.writeHead(200, { 'Content-Type': 'text/html' });\n        response.end('<form method=\"post\"><input type=\"file\" name=\"upload\"/><input type=\"submit\"/></form>');\n      } else {\n        response.writeHead(200, { 'Content-Type': 'text/plain' });\n        response.end(`Connection info: ${connectionCounter}`);\n      }\n    });\n  });\n  \n  const port = process.env.PORT || 3000;\n  server.listen(port, () => {\n    console.log(`Server listening on port ${port}`);\n  });\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to generate PDFs from HTML templates and serve them as streams.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens on port 8080. It serves PDF files generated from an HTML template, replacing placeholders with actual image paths, and streams the PDF output to the client. The server handles incoming requests, checks for favicon requests, and responds with either a 404 error or the generated PDF.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 8080 and logs the server address to the console.)",
    "Canonical_solution": "function createServer() {\n    const fs = require('fs');\n    const http = require('http');\n    const pdf = require('../../');\n    const tmpl = fs.readFileSync(require.resolve('../businesscard/businesscard.html'), 'utf8');\n\n    const server = http.createServer(function (req, res) {\n        if (req.url === '/favicon.ico') return res.end('404');\n        const html = tmpl.replace('{{image}}', `file://${require.resolve('../businesscard/image.png')}`);\n        pdf.create(html, {width: '50mm', height: '90mm'}).toStream((err, stream) => {\n            if (err) return res.end(err.stack);\n            res.setHeader('Content-type', 'application/pdf');\n            stream.pipe(res);\n        });\n    });\n\n    server.listen(8080, function (err) {\n        if (err) throw err;\n        console.log('Listening on http://localhost:%s', server.address().port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "function createServer() {\n  const express = require('express');\n  const puppeteer = require('puppeteer');\n  const app = express();\n  const port = 8080;\n\n  app.get('/pdf', async (req, res) => {\n    const html = `<html><body><h1>Sample Document</h1><img src=\"[image-path]\"></body></html>`;\n    const htmlWithReplace = html.replace('[image-path]', 'https://example.com/image.jpg');\n\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.setContent(htmlWithReplace);\n    const pdfBuffer = await page.pdf({ format: 'A4' });\n\n    res.setHeader('Content-Type', 'application/pdf');\n    res.setHeader('Content-Disposition', 'inline; filename=\"document.pdf\"');\n    res.write(pdfBuffer);\n    res.end();\n\n    await browser.close();\n  });\n\n  app.get('/favicon.ico', (req, res) => {\n    res.status(404).send('Not Found');\n  });\n\n  app.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}`);\n  });\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a JavaScript class that implements a server capable of handling HTTP requests and piping data to responses, with support for live reload functionality and error handling.\n\nClass Description: The `Server` class is designed to create an HTTP server that can handle incoming requests, pipe data to responses (particularly for live reload functionality), and manage server lifecycle events. It supports both standalone operation and integration with existing Express-like applications.\n\nAttributes:\n- options: [Object] - Configuration options for the server including livereload file path and port number.\n- clients: [Object] - Storage for connected clients (used for live reload functionality).\n- server: [http.Server] - The underlying HTTP server instance.\n- app: [Object] - Optional Express-like application instance for integration.\n- port: [Number] - The port number the server is listening on.\n\nMethods:\n- constructor(options) -> [Server] - Initializes the server with given options, setting defaults for livereload path and port.\n- configure(app) -> [Server] - Configures the server to work with an existing Express-like application.\n- handler(req, res, next) -> [Server] - Handles incoming HTTP requests, supporting both middleware and direct handling modes.\n- livereload(req, res) -> [void] - Pipes the livereload JavaScript file to the response.\n- listen(port, fn) -> [void] - Starts the server listening on the specified port.\n- close(req, res) -> [void] - Closes the server and optionally ends a response.\n- error(e) -> [void] - Handles and logs server errors.\n\nNote: The class demonstrates inter-process communication through HTTP and file system operations, particularly in the `livereload` method where it pipes file contents directly to HTTP responses.",
    "Canonical_solution": "var fs = require('fs');\nvar http = require('http');\n\nclass Server {\n  constructor(options) {\n    this.options = options || {};\n    this.options.livereload = this.options.livereload || path.join(__dirname, 'public/livereload.js');\n    this.options.port = parseInt(this.options.port || 35729, 10);\n    this.clients = {};\n    this.configure(this.options.app);\n  }\n\n  configure(app) {\n    if(!app) {\n      this.server = http.createServer(this.handler.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    var self = this;\n    this.app = app;\n\n    this.app.listen = function(port, done) {\n      done = done || function() {};\n      var srv = self.server = http.createServer(app);\n      srv.on('error', self.error.bind(self));\n      srv.on('close', self.close.bind(self));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler(req, res, next) {\n    var middleware = typeof next === 'function';\n    if(middleware) {\n      this.handle(req, res, next);\n      return this;\n    }\n\n    req\n      .on('end', this.handle.bind(this, req, res))\n      .on('data', function(chunk) {\n        req.data = req.data || '';\n        req.data += chunk;\n      });\n\n    return this;\n  }\n\n  livereload(req, res) {\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server.listen(port, fn);\n  }\n\n  close(req, res) {\n    if(res) res.end();\n    if(this.server._handle) this.server.close();\n  }\n\n  error(e) {\n    console.error('Error:', e.message);\n    console.error(e.stack);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "class Server {\n  constructor(options = {}) {\n    this.options = { ...options, livereload: options.livereload || 'livereload.js', port: options.port || 3000 };\n    this.clients = {};\n    this.server = http.createServer(this.handler.bind(this));\n    this.app = options.app || null;\n    this.port = this.options.port;\n    this.server.on('error', (e) => this.error(e));\n  }\n\n  configure(app) {\n    this.app = app;\n    return this;\n  }\n\n  handler(req, res, next) {\n    if (req.url === '/livereload') {\n      this.livereload(req, res);\n    } else {\n      if (this.app) {\n        this.app(req, res, next);\n      } else {\n        res.statusCode = 404;\n        res.end('Not Found');\n      }\n    }\n  }\n\n  livereload(req, res) {\n    const filePath = this.options.livereload;\n    fs.readFile(filePath, (err, data) => {\n      if (err) {\n        this.error(err);\n        return res.status(500).end('Error loading livereload script');\n      }\n      res.setHeader('Content-Type', 'application/javascript');\n      res.writeHead(200);\n      res.end(data);\n    });\n  }\n\n  listen(port, fn) {\n    if (port) {\n      this.port = port;\n    }\n    this.server.listen(this.port, () => {\n      if (fn) fn();\n    });\n  }\n\n  close(req, res) {\n    this.server.close(() => {\n      if (res) res.end();\n    });\n  }\n\n  error(e) {\n    console.error('Server error:', e.stack);\n  }\n}"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a JavaScript class that implements an HTTP server capable of serving files from a specified directory, with additional features like directory listing and error handling.\n\nClass Description: The `Server` class represents an HTTP server that serves files from a specified directory path. It handles file requests, directory listings, and various error scenarios. The server can be started and stopped programmatically, and it maintains active connections for proper cleanup.\n\nAttributes:\n\n- config: [Object] - Configuration object containing server settings like port and path\n- _http: [http.Server] - Internal HTTP server instance\n- sockets: [Array] - Array to keep track of active socket connections\n- path: [String] - Base path from which files are served\n\nMethods:\n\n- constructor(config) -> [Server instance] - Initializes the server with given configuration\n- updateServer() -> [void] - Sets up server options and request handling logic\n- start(callback) -> [void] - Starts the HTTP server on the configured port\n- stop(callback) -> [void] - Stops the HTTP server and closes all active connections\n\nThe server handles these special cases:\n1. Automatic directory listing when index.html is not found\n2. Proper redirection for directory requests\n3. Error handling for missing files or directories\n4. Connection management for clean shutdowns\n\nThe implementation uses Node.js core modules (http, fs, path) along with third-party modules (send, marked) for enhanced functionality.",
    "Canonical_solution": "const http = require('http');\nconst send = require('send');\nconst marked = require('marked');\nconst fs = require('fs');\nconst path = require('path');\n\nclass Server {\n  constructor(config) {\n    this.config = config || {};\n    this._http = null;\n    this.sockets = [];\n    this.path = this.config.path || '';\n    \n    this.updateServer();\n  }\n\n  updateServer() {\n    marked.setOptions({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: true,\n      smartLists: true,\n      smartypants: false\n    });\n\n    const html = fs.readFileSync(path.join('lib', 'public', 'directory.html'));\n\n    this._http = http.createServer((req, res) => {\n      function redirect() {\n        res.statusCode = 301;\n        res.setHeader('Location', req.url + '/');\n        res.end('Redirecting to ' + req.url + '/');\n      }\n\n      function procError(err) {\n        if (err.message.indexOf('ENOENT') >= 0) {\n          const p = path.dirname(err.message.match(/'(.*?)'/)[1]) || '';\n          const bn = path.basename(err.message.match(/'(.*?)'/)[1]) || '';\n          \n          if (bn === 'index.html') {\n            fs.readdir(p, (err, files) => {\n              if (err) {\n                res.statusCode = 500;\n                res.end();\n                return;\n              }\n              \n              const dirs = files.filter(el => fs.statSync(path.join(p, el)).isDirectory())\n                .map(el => {\n                  const stat = fs.statSync(path.join(p, el));\n                  return `<tr class='dir'>\n                    <td><a href=\"./${el}/\">${el}</a></td>\n                    <td>&lt;Directory&gt;</td>\n                    <td>&lt;Directory&gt;</td>\n                    <td>${stat.mtime}</td>\n                  </tr>`;\n                });\n                \n              const filesList = files.filter(el => !fs.statSync(path.join(p, el)).isDirectory())\n                .map(el => {\n                  const stat = fs.statSync(path.join(p, el));\n                  const ext = path.extname(el).substr(1);\n                  return `<tr class='file'>\n                    <td><a href=\"./${el}\">${el}</a></td>\n                    <td>${ext.toUpperCase()} File</td>\n                    <td>${(stat.size/1024).toFixed(2)} KB</td>\n                    <td>${stat.mtime}</td>\n                  </tr>`;\n                });\n                \n              res.statusCode = 200;\n              res.end(html.toString().replace('<!-- BODY -->', dirs.join('') + filesList.join('')));\n            });\n            return;\n          }\n        }\n        \n        res.statusCode = err.status || 500;\n        res.end(err.message);\n      }\n\n      try {\n        send(req, require('url').parse(req.url).pathname)\n          .from(this.path)\n          .on('error', procError)\n          .on('directory', redirect)\n          .pipe(res);\n      } catch (e) {\n        procError(e);\n      }\n    });\n\n    this._http.on('connection', (socket) => {\n      this.sockets.push(socket);\n      socket.setTimeout(4000);\n      socket.on('close', () => {\n        this.sockets.splice(this.sockets.indexOf(socket), 1);\n      });\n    });\n  }\n\n  start(callback) {\n    this._http.listen(this.config.port, () => {\n      callback && callback();\n    });\n  }\n\n  stop(callback) {\n    this.sockets.forEach(socket => socket.destroy());\n    this._http.close(() => {\n      callback && callback();\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst send = require('send');\nconst marked = require('marked');\n\nclass Server {\n  constructor(config) {\n    this.config = config;\n    this._http = http.createServer();\n    this.sockets = [];\n    this.path = config.path;\n    this.updateServer();\n  }\n\n  updateServer() {\n    this._http.on('request', this.handleRequest.bind(this));\n    this._http.on('error', (err) => {\n      console.error('Server error:', err);\n    });\n    this._http.on('connection', (socket) => {\n      this.sockets.push(socket);\n    });\n  }\n\n  start(callback) {\n    this._http.listen(this.config.port, () => {\n      if (callback) callback();\n    });\n  }\n\n  stop(callback) {\n    this.sockets.forEach(socket => socket.destroy());\n    this._http.close(() => {\n      if (callback) callback();\n    });\n  }\n\n  async handleRequest(request, response) {\n    const url = new URL(request.url, 'http://example.com');\n    const path = url.pathname;\n\n    const fullPath = path.join(this.path, path);\n\n    try {\n      const stats = await fs.promises.stat(fullPath);\n      if (stats.isDirectory()) {\n        const indexPath = path.join(fullPath, 'index.html');\n        try {\n          await fs.promises.access(indexPath, fs.constants.F_OK);\n          response.writeHead(301, { Location: `${path}/index.html` });\n          response.end();\n        } catch (err) {\n          this.listDirectory(fullPath, response);\n        }\n      } else {\n        send(response, path, { root: this.path });\n      }\n    } catch (err) {\n      this.handleError(err, response);\n    }\n  }\n\n  listDirectory(dirPath, response) {\n    fs.promises.readdir(dirPath).then(files => {\n      const html = `\n        <!DOCTYPE html>\n        <html>\n        <head><title>Directory Listing</title></head>\n        <body>\n          <h1>Directory Listing</h1>\n          <ul>\n            ${files.map(file => `<li><a href=\"${file}\">${file}</a></li>`).join('')}\n          </ul>\n        </body>\n        </html>\n      `;\n      response.writeHead(200, { 'Content-Type': 'text/html' });\n      response.end(html);\n    }).catch(err => {\n      this.handleError(err, response);\n    });\n  }\n\n  handleError(err, response) {\n    if (err.code === 'ENOENT') {\n      response.writeHead(404, { 'Content-Type': 'text/plain' });\n      response.end('404 Not Found');\n    } else {\n      response.writeHead(500, { 'Content-Type': 'text/plain' });\n      response.end('500 Internal Server Error');\n    }\n  }\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files and handle dynamic JavaScript file concatenation, with support for piping binary files.\n\nFunction Description: The `createServer` function initializes an HTTP server that serves static files from specified directories, handles dynamic concatenation of JavaScript files, and pipes binary files directly to the response. It supports virtual paths, content type detection, and redirection.\n\nInput: \n- Optional command line argument [string] - The port number to listen on (defaults to 90 if not provided)\n\nOutput: \n- None (directly creates and starts an HTTP server)\n- Console output indicating server startup and loaded files\n\nAttributes: (N/A - This is a function, not a class)\n\nMethods: (N/A - This is a function, not a class)\n\nAdditional Implementation Details:\n1. Reads and caches static files from '../src' and '../dist' directories at startup\n2. Handles binary files separately from text files\n3. Supports special handling for core JavaScript files and plugins\n4. Implements virtual path redirection\n5. Uses file extension to determine content type\n6. Provides fallback behavior for undefined routes\n7. Listens on localhost (127.0.0.1) only\n8. Outputs loaded file list to console at startup",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require(\"fs\");\n    var url = require(\"url\");\n\n    var BASE_URL=\"http://www.servicestack.net\", \n        VIRTUAL_PATH=\"/jqbuilder\"; \n\n    var getExt = function(path) {\n        return path.substring(path.lastIndexOf('.')+1);\n    };\n    String.prototype.startsWith = function (str){\n        return this.indexOf(str) === 0;\n    };\n\n    var contentTypes = { \"htm\": \"text/html\", \"js\": \"text/javascript\", \"gif\": \"image/gif\" };\n\n    var srcDir = '../src', targetDir = '../dist';\n    var webFiles = fs.readdirSync(targetDir);\n    var staticFiles = {}, binaryFiles = {};\n    fs.readdirSync(srcDir).forEach(function(file) { \n        var filePath = srcDir + '/' + file;\n        staticFiles[\"/\" + file] = fs.readFileSync(filePath).toString('utf-8');\n    });\n    fs.readdirSync(targetDir).forEach(function(file) { \n        var filePath = targetDir + '/' + file;\n        staticFiles[\"/\" + file] = fs.readFileSync(filePath).toString('utf-8');\n    });\n    fs.readdirSync(\"./\").forEach(function(file) {\n        var isText = (contentTypes[getExt(file)]||\"\").startsWith(\"text\");\n        if (isText)\n            staticFiles[\"/\" + file] = fs.readFileSync(file).toString('utf-8');\n        else \n            binaryFiles[\"/\" + file] = file;\n    });\n\n    staticFiles[\"/\"] = staticFiles[\"/default.htm\"];\n\n    console.log(\"loaded: \", Object.keys(staticFiles));\n\n    var isCore = { \"/jquip.js\": true, \"/jquip.min.js\": true };\n\n    var port = process.argv[2] || 90;\n\n    http.createServer(function (req, res) {\n        var reqUrl = url.parse(req.url), path = reqUrl.pathname.replace(VIRTUAL_PATH,'');\n        if (reqUrl.pathname == VIRTUAL_PATH){\n            res.writeHead(302,BASE_URL+VIRTUAL_PATH+\"/\");\n            res.end();\n            return;\n        }\n\n        var fileContents = staticFiles[path];\n\n        if (fileContents) {\n            var ext = path == \"/\" ? \"htm\" : getExt(path);\n            var contentType = contentTypes[ext];\n            res.writeHead(200, {'Content-Type': contentType });\n            var isPlugin = ext == \"js\" && path.startsWith(\"/jquip.\") && !isCore[path];\n            if (isPlugin) {\n                var coreJs = path.indexOf(\"min\") != -1 \n                    ? staticFiles[\"/jquip.min.js\"]\n                    : staticFiles[\"/jquip.js\"];\n                fileContents = coreJs + \";\" + fileContents;\n            }\n\n            res.end(fileContents);\n        }\n        else if (binaryFiles[path]) { \n            var filePath = binaryFiles[path]; \n            fs.createReadStream(filePath, {\n              'bufferSize': 4 * 1024\n            }).pipe(res);\n        }\n        else\n        {\n            var isDynamic = path.startsWith(\"/jquip.\");\n            if (isDynamic) {\n                var parts = path.substring(1).split('.');\n                var isMin = parts.indexOf(\"min\") >= 0;\n                var js = isMin ? staticFiles[\"/jquip.min.js\"] : staticFiles[\"/jquip.js\"];\t\t\t\n                parts.forEach(function(part){\n                    if (part == \"jquip\" || part == \"min\" || part == \"js\") return;\n                    var path = \"/jquip.\" + part + (isMin ? \".min.js\" : \".js\");\n                    var jsFile = staticFiles[path];\n                    if (jsFile)\n                        js += \";\" + jsFile;\n                });\n                res.writeHead(200, {'Content-Type': 'text/javascript' });\n                res.end(js);\t\t\n                return;\n            }\n\n            res.writeHead(200, {'Content-Type': 'text/plain'});\n            var sb = \"\";\n            for (var i in reqUrl) {\n                if (sb) sb += \"\\n\";\n                sb += i + \": \" + reqUrl[i];\n            }\n            res.end(\"Path not found:\\n\" + sb);\n        }\n    })\n    .listen(port, \"127.0.0.1\");\n    console.log('Server running at http://127.0.0.1:'+port+'/');\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer(port = 90) {\n  const staticFiles = {};\n  const dirs = ['../src', '../dist'];\n\n  dirs.forEach(dir => {\n    try {\n      const files = fs.readdirSync(dir);\n      files.forEach(file => {\n        const fullPath = path.join(dir, file);\n        const stat = fs.statSync(fullPath);\n        if (stat.isFile()) {\n          staticFiles[fullPath] = fs.readFileSync(fullPath);\n        }\n      });\n    } catch (err) {\n      console.error(`Error reading directory ${dir}:`, err);\n    }\n  });\n\n  console.log('Loaded files:', Object.keys(staticFiles).join(', '));\n\n  const server = http.createServer((req, res) => {\n    const url = req.url;\n    let filePath = url;\n\n    if (url.startsWith('/js/')) {\n      filePath = path.join('/src', url);\n    } else if (url.startsWith('/dist/')) {\n      filePath = path.join('/dist', url);\n    }\n\n    if (filePath in staticFiles) {\n      const content = staticFiles[filePath];\n      const ext = path.extname(filePath);\n      let contentType = 'text/plain';\n\n      if (ext === '.js') {\n        contentType = 'application/javascript';\n      } else if (ext === '.css') {\n        contentType = 'text/css';\n      } else if (ext === '.html') {\n        contentType = 'text/html';\n      } else if (ext === '.json') {\n        contentType = 'application/json';\n      }\n\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content);\n    } else {\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('404 Not Found');\n    }\n  });\n\n  server.listen(port, '127.0.0.1', () => {\n    console.log(`Server running at http://127.0.0.1:${port}/`);\n  });\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement an OAuth server class that handles GitHub OAuth authentication flow, including starting a server to receive the authorization code and exchanging it for an access token.\n\nClass Description: The OAuthServer class represents a server that facilitates GitHub OAuth authentication. It creates an Express server to handle the OAuth callback, exchanges the authorization code for an access token using GitHub's API, and provides methods to start and stop the server.\n\nAttributes:\n- options: [Object] - Configuration object containing client credentials and server settings\n- prompt: [Object] - Reference to an external prompt object used to signal completion of authentication\n- app: [Object] - Express application instance for handling HTTP requests\n- server: [Object] - HTTP server instance created by Express\n- token: [String|null] - Stores the obtained OAuth access token\n\nMethods:\n- constructor(options) -> [OAuthServer] - Initializes the OAuth server with configuration options and sets up the Express route for handling OAuth callbacks\n- start() -> [Promise] - Starts the HTTP server on the configured port and returns a promise that resolves when the server is ready or rejects on error\n- stop() -> [void] - Stops the HTTP server and cleans up resources",
    "Canonical_solution": "const express = require('express');\nconst axios = require('axios');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = this.options.prompt;\n    this.app = express();\n    this.app.get('/', (req, res) => {\n      const code = req.query.code;\n      axios\n        .post(\n          `https://github.com/login/oauth/access_token?client_secret=${\n            this.options.client_secret\n          }&client_id=${this.options.client_id}&code=${code}`,\n          {},\n          {\n            headers: {\n              Accept: 'application/json'\n            }\n          }\n        )\n        .then(response => {\n          const accessToken = response.data.access_token;\n          this.token = accessToken;\n          res.send('Enquirer: Github OAuth Server is up');\n          this.prompt.submit();\n        })\n        .catch(e => console.log('axios error', e));\n    });\n    this.token = null;\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.options.port, err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    this.server.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst request = require('request');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = options.prompt;\n    this.app = express();\n    this.server = http.createServer(this.app);\n    this.token = null;\n\n    this.app.get('/callback', async (req, res) => {\n      const code = req.query.code;\n      const { clientID, clientSecret, redirectURI } = this.options;\n      const response = await request.post('https://github.com/login/oauth/access_token', {\n        form: {\n          code,\n          client_id: clientID,\n          client_secret: clientSecret,\n          redirect_uri: redirectURI\n        }\n      });\n\n      const tokenData = JSON.parse(response.body);\n      this.token = tokenData.access_token;\n      this.prompt.done();\n      res.redirect('/');\n    });\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.options.port, () => {\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    this.server.close();\n  }\n}\n\nmodule.exports = OAuthServer;"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "function createFileServer() {\n  const http = require('http');\n  const fs = require('fs');\n  const path = require('path');\n\n  const mimeTypes = {\n    '.html': 'text/html',\n    '.css': 'text/css',\n    '.js': 'application/javascript',\n    '.jpg': 'image/jpeg',\n    '.jpeg': 'image/jpeg',\n    '.png': 'image/png',\n    '.gif': 'image/gif',\n    '.txt': 'text/plain'\n  };\n\n  const server = http.createServer((req, res) => {\n    const url = req.url;\n    const filePath = path.join(__dirname, 'static', url);\n\n    fs.access(filePath, fs.F_OK, (err) => {\n      if (err) {\n        res.statusCode = 404;\n        res.end('404 Not Found');\n        return;\n      }\n\n      const ext = path.extname(filePath);\n      const mimeType = mimeTypes[ext] || 'application/octet-stream';\n\n      fs.readFile(filePath, (err, data) => {\n        if (err) {\n          res.statusCode = 500;\n          res.end('Internal Server Error');\n          return;\n        }\n\n        res.setHeader('Content-Type', mimeType);\n        res.end(data);\n      });\n    });\n  });\n\n  server.listen(1338, () => {\n    console.log('Server running on port 1338');\n  });\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a TCP server using Node.js's built-in 'net' module to handle client connections and data exchange.\n\nFunction Description: The function creates and starts a TCP server that listens on a specified port. When a client connects, the server sends a greeting message (\"Hello.\") and logs any incoming data from the client to the console.\n\nInput: \n- port: [number] - The port number on which the TCP server should listen for incoming connections.\n\nOutput: \n- None (The function creates and starts a server but does not return any value).",
    "Canonical_solution": "const net = require(\"net\");\n\nfunction createTCPServer(port) {\n    const server = net.createServer(socket => {\n        socket.write(\"Hello.\");\n        socket.on(\"data\", data => {\n            console.log(data.toString());\n        });\n    });\n    server.listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "net.createServer((socket) => {\n  socket.write('Hello.');\n  socket.on('data', (data) => {\n    console.log(data.toString());\n  });\n}).listen(process.argv[2], () => {\n  console.log(`Server listening on port ${process.argv[2]}`);\n});"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a TCP server that handles client connections with authentication and provides a random quote service upon successful authentication.\n\nFunction Description: The function `createServer` establishes a TCP server that listens on a specified port. It uses the `dnode` library for remote procedure calls (RPC) and implements an authentication mechanism. Upon successful authentication, clients gain access to a `randomQuote` service. The server logs connection and disconnection events.\n\nInput:  \n- `port` (Number): The port number on which the TCP server should listen for incoming connections.\n\nOutput:  \n- None (The function creates and starts a server instance but doesn't return anything. Side effects include logging connection events to the console.)  \n\nNote: The function relies on an undefined `randomQuote` function which should be implemented elsewhere to provide quote generation functionality. The authentication hardcodes credentials (user: 'moo', pass: 'hax') for demonstration purposes.",
    "Canonical_solution": "var dnode = require('dnode');\nvar fs = require('fs');\nvar net = require('net');\n\nfunction createServer(port) {\n    var server = net.createServer(function (stream) {\n        var d = dnode({ auth : auth });\n        d.pipe(stream).pipe(d);\n        \n        function auth (user, pass, cb) {\n            if (typeof cb !== 'function') return;\n            \n            if (user === 'moo' && pass === 'hax') {\n                console.log('signed in: ' + user);\n                d.on('end', function () {\n                    console.log('disconnected: ' + user);\n                });\n                \n                cb(null, { quote : randomQuote });\n            }\n            else cb('ACCESS DENIED')\n        }\n    });\n    server.listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst dnode = require('dnode');\n\nfunction createServer(port) {\n  const server = net.createServer();\n\n  server.on('connect', () => {\n    console.log('Client connected');\n  });\n\n  server.on('close', () => {\n    console.log('Client disconnected');\n  });\n\n  const dnodeServer = new dnode({\n    login: function(user, pass) {\n      return user === 'moo' && pass === 'hax';\n    },\n    randomQuote: function() {\n      return \"Sample quote\";\n    }\n  });\n\n  server.on('connection', (socket) => {\n    dnodeServer.handle(socket);\n  });\n\n  server.listen(port, () => {\n    console.log(`Server listening on port ${port}`);\n  });\n}"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a TCP server class in JavaScript that can handle both regular and TLS-encrypted connections, manage client connections, and provide methods to start and destroy the server.\n\nClass Description: The MockServer class is a TCP server implementation that can be configured to use either regular TCP or TLS encryption. It manages server lifecycle, client connections, and provides methods to start and stop the server gracefully.\n\nAttributes:\n- host: [String] - The host address the server binds to\n- port: [Number] - The port number the server listens on\n- family: [String] - The IP address family (e.g., 'ipv4')\n- server: [Object] - The underlying TCP/TLS server instance\n- tlsEnabled: [Boolean] - Flag indicating if TLS is enabled\n- state: [String] - Current server state ('stopped', 'running', or 'destroyed')\n- connections: [Number] - Count of active client connections\n- sockets: [Array] - Array of active client sockets\n\nMethods:\n- constructor(port, host, options) -> [void] - Initializes the server with specified port, host, and options (including TLS configuration)\n- start() -> [Promise] - Starts the server and returns a promise that resolves when listening\n- destroy() -> [Promise] - Gracefully shuts down the server and returns a promise that resolves when complete",
    "Canonical_solution": "const net = require('net');\nconst tls = require('tls');\n\nclass MockServer {\n  constructor(port, host, options) {\n    // Save the settings\n    this.host = host;\n    this.port = port;\n    this.family = 'ipv4';\n\n    // Create a server socket\n    this.server = options.tls ? tls.createServer(options) : net.createServer(options);\n    this.tlsEnabled = !!options.tls;\n\n    // state\n    this.state = 'stopped';\n\n    // Number of connections\n    this.connections = 0;\n\n    // sockets\n    this.sockets = [];\n  }\n\n  /**\n   * Start the TCP server\n   */\n  start() {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self.server.on('error', err => {\n        reject(err);\n      });\n\n      const connectionEventName = self.tlsEnabled ? 'secureConnection' : 'connection';\n      self.server.on(connectionEventName, c => {\n        self.connections = self.connections + 1;\n        self.sockets.push(c);\n\n        c.on('error', e => {\n          console.warn('connection error: ', e);\n        });\n\n        c.on('close', () => {\n          self.connections = self.connections - 1;\n          const index = self.sockets.indexOf(c);\n          if (index !== -1) {\n            self.sockets.splice(index, 1);\n          }\n        });\n      });\n\n      self.server.listen(self.port, self.host, () => {\n        // update address information if necessary\n        self.host = self.server.address().address;\n        self.port = self.server.address().port;\n        self.family = self.server.address().family;\n\n        resolve(self);\n      });\n\n      self.state = 'running';\n    });\n  }\n\n  /**\n   * Destroy the TCP server\n   */\n  destroy() {\n    const self = this;\n    if (self.state === 'destroyed') {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      self.sockets.forEach(socket => socket.destroy());\n      self.server.close(err => {\n        if (err) return reject(err);\n        self.state = 'destroyed';\n        resolve();\n      });\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class MockServer {\n  constructor(port, host, options) {\n    this.port = port;\n    this.host = host;\n    this.family = options.family || 'ipv4';\n    this.tlsEnabled = options.tlsEnabled || false;\n    this.options = options;\n\n    if (this.tlsEnabled) {\n      this.server = tls.createServer(options, this.handleConnection.bind(this));\n    } else {\n      this.server = net.createServer(this.handleConnection.bind(this));\n    }\n\n    this.state = 'stopped';\n    this.connections = 0;\n    this.sockets = [];\n  }\n\n  async start() {\n    if (this.state !== 'stopped') return;\n    this.state = 'running';\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.port, this.host, (err) => {\n        if (err) return reject(err);\n        this.server.on('listening', () => resolve());\n        this.server.on('error', (err) => reject(err));\n      });\n    });\n  }\n\n  async destroy() {\n    if (this.state === 'destroyed') return;\n    if (this.state !== 'running') return;\n    this.state = 'destroying';\n    return new Promise((resolve, reject) => {\n      this.server.close((err) => {\n        if (err) return reject(err);\n        this.server.on('close', () => {\n          this.state = 'destroyed';\n          resolve();\n        });\n      });\n    });\n  }\n\n  handleConnection(socket) {\n    this.sockets.push(socket);\n    this.connections++;\n    socket.on('end', () => {\n      this.sockets = this.sockets.filter(s => s !== socket);\n      this.connections--;\n    });\n    socket.on('error', (err) => {\n      console.error('Socket error:', err);\n      this.sockets = this.sockets.filter(s => s !== socket);\n      this.connections--;\n    });\n  }\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n  constructor(did, finger, token, oaid) {\n    this.did = did;\n    this.finger = finger;\n    this.token = token;\n    this.oaid = oaid;\n  }\n\n  async taskRequest(method, url, body = '') {\n    const signature = this.did + this.finger + this.token + this.oaid + method + url;\n    const headers = new Headers();\n    headers.append('Authorization', `Signature=${signature}`);\n    headers.append('Content-Type', 'application/json');\n\n    const options = {\n      method: method,\n      headers: headers,\n      body: body\n    };\n\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n}"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a TCP server using Node.js's built-in 'net' module that listens on an available port and discards any incoming data.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that automatically binds to an available port. It discards any incoming data to ensure the server can terminate properly. The server's port is stored in the instance for later reference.\n\nInput: None\n\nOutput: None (The function modifies the instance properties, specifically setting `this.server` and `this.port`)",
    "Canonical_solution": "function createTCPServer() {\n  const net = require('net');\n  this.server = net.createServer((socket) => {\n    socket.on('data', () => {\n      // discard any buffered data or the server wont terminate\n    });\n  });\n  this.server.listen(() => {\n    this.port = this.server.address().port;\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "function createTCPServer() {\n  this.server = net.createServer((socket) => {\n    socket.on('data', () => {});\n    socket.end();\n  });\n\n  this.server.listen(0, () => {\n    this.port = this.server.address().port;\n  });\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data in batches, and forwards each batch to an external service for processing.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 5000. When a client connects, it sets up a bidirectional communication channel where incoming data from the client is collected in batches (separated by '.'). Each complete batch is then sent to an external 'uppercase' service via a REQ socket. The server handles data streaming and batch processing efficiently.\n\nInput: None (The function takes no parameters; configuration is hardcoded)\n\nOutput: None (The function creates a server instance that runs indefinitely, listening for connections)\n\n---\n\nIf you'd prefer the class format (though the reference code is function-based):\n\nTask Description: Implement a TCP server class in Node.js that manages client connections and batch processing of incoming data.\n\nClass Description: The `TCPServer` class encapsulates a TCP server that listens for client connections, collects incoming data in batches, and forwards complete batches to an external service.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- port: [number] - The port number the server listens on (default: 5000)\n\nMethods:\n- constructor([port: number]) -> void - Initializes the server with optional port configuration\n- start() -> void - Starts the server and begins listening for connections\n- handleConnection(conn: net.Socket) -> void - Internal method to manage client connections and data processing\n- processBatch(batch: string[]) -> void - Sends a complete batch to the external service",
    "Canonical_solution": "function createTCPServer() {\n    var server = require('net').createServer();\n    server.on('connection', function(conn) {\n        conn.setEncoding('utf8');\n        \n        var req = context.socket('REQ');\n        req.setEncoding('utf8');\n        req.pipe(conn);\n        req.connect('uppercase');\n        \n        var batch = [];\n        var ask = function (q) {\n            req.write(q, 'utf8');\n        }\n        function readBatch() {\n            var msg; while (msg = conn.read()) {\n                msg.split('\\n').forEach(function(item) {\n                    if (item == '.') {\n                        console.log('Sending batch %s', batch);\n                        batch.forEach(ask);\n                        batch = [];\n                    }\n                    else if (item != '') {\n                        batch.push(item);\n                    }\n                });\n            }\n        }\n        conn.on('readable', readBatch);\n        readBatch();\n    });\n    server.listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst zmq = require('zmq');\n\nfunction createTCPServer() {\n  const server = net.createServer((conn) => {\n    handleConnection(conn);\n  });\n\n  server.listen(5000, () => {\n    console.log('TCP server listening on port 5000');\n  });\n\n  const context = zmq.Context();\n  const reqSocket = context.socket(zmq.REQ);\n  reqSocket.connect('tcp://localhost:5001');\n\n  function handleConnection(conn) {\n    let buffer = '';\n    conn.on('data', (chunk) => {\n      buffer += chunk.toString();\n      const parts = buffer.split('.');\n      const newParts = parts.slice(0, -1);\n      buffer = parts[parts.length - 1];\n      newParts.forEach(batch => {\n        processBatch(batch);\n      });\n    });\n\n    conn.on('end', () => {\n      console.log('Client disconnected');\n    });\n\n    conn.on('error', (err) => {\n      console.error('Error with client connection:', err);\n    });\n  }\n\n  function processBatch(batch) {\n    reqSocket.send(batch);\n  }\n}"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a TCP server in Node.js that serves Flash cross-domain policy files to clients, handling connections, errors, and policy file generation dynamically.\n\nClass Description: The Server class implements a TCP server that listens for Flash policy file requests and responds with an appropriate cross-domain policy XML. It handles server lifecycle events, client connections, and dynamic policy configuration.\n\nAttributes:\n- origins: [Array] - List of allowed domains and ports in \"domain:port\" format\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [net.Server] - The TCP server instance\n- server: [Object] - Optional fallback HTTP server\n- buffer: [Buffer] - Compiled policy file in binary format\n\nMethods:\n- constructor(options, origins) -> [Server] - Initializes the server with configuration options and allowed origins\n- listen(port, server, cb) -> [Server] - Starts listening on specified port, with optional fallback server and callback\n- responder(socket) -> [void] - Responds to client connections with policy file\n- compile() -> [Server] - Generates the policy file XML and converts it to buffer\n- add() -> [Server] - Adds one or more allowed origins to the policy\n- remove(origin) -> [Server] - Removes a specific origin from the policy\n- close() -> [Server] - Closes the server and cleans up resources",
    "Canonical_solution": "var net = require('net');\n\nclass Server {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => {\n        this.responder.call(this, socket);\n      });\n      this.responder.call(this, socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges. ' +\n          (\n            this.server\n            ? 'The Flash Policy File requests will only be served inline over the supplied HTTP server. Inline serving is slower than a dedicated server instance.'\n            : 'No fallback server supplied, we will be unable to answer Flash Policy File requests.'\n          )\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n      if (this.server && this.server['@'] && this.server.online) {\n        this.server.removeListener('connection', this.server['@']);\n      }\n      delete this.server?.online;\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (\n            data &&\n            data[0] === 60 &&\n            data.toString() === '<policy-file-request/>\\0' &&\n            socket &&\n            (socket.readyState === 'open' || socket.readyState === 'writeOnly')\n          ) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    if (this.port >= 0) {\n      this.socket.listen(this.port, () => {\n        this.socket.online = true;\n        callback?.call(this);\n      });\n    }\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = Buffer.from(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class Server {\n  constructor(options, origins) {\n    this.options = options || {};\n    this.port = options.port || 843;\n    this.log = options.log || console.log;\n    this.origins = origins || [];\n    this.socket = net.createServer(this.responder.bind(this));\n    this.server = null;\n    this.buffer = null;\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    const serverPort = port || this.port;\n    this.socket.listen(serverPort, (err) => {\n      if (err) {\n        this.log('Error starting server:', err);\n        if (cb) cb(err);\n        return;\n      }\n      this.log(`Server started on port ${serverPort}`);\n      if (cb) cb(null);\n    });\n    if (server) {\n      this.server = server;\n    }\n    return this;\n  }\n\n  responder(socket) {\n    socket.on('data', (data) => {\n      const str = data.toString();\n      if (str.trim() === 'POLICYFILE') {\n        socket.write(this.buffer);\n        socket.end();\n      } else {\n        socket.destroy();\n      }\n    });\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<cross-domain-policy>',\n      ...this.origins.map(origin => `<allow-access from=\"${origin}\" />`),\n      '</cross-domain-policy>'\n    ].join('\\n');\n    this.buffer = Buffer.from(xml);\n    return this;\n  }\n\n  add(...origins) {\n    this.origins.push(...origins);\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const index = this.origins.indexOf(origin);\n    if (index !== -1) {\n      this.origins.splice(index, 1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close(() => {\n        this.log('Server closed');\n      });\n    }\n    if (this.server) {\n      this.server.close();\n    }\n    return this;\n  }\n}"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's built-in 'net' module that can handle both secure (TLS) and non-secure connections, manage client connections, and emit relevant events.\n\nClass Description: The Server class extends Node.js's EventEmitter to create a TCP server that can handle multiple client connections. It supports both secure (TLS) and non-secure (plain TCP) modes, manages connection lifecycle events, and maintains a list of active connections.\n\nAttributes:\n- socket: [Object] - The underlying TCP/TLS server instance\n- connections: [Array] - Array of active Connection objects\n\nMethods:\n- constructor(secure, options, callback) -> [Server Instance] - Initializes the server. 'secure' is a boolean indicating TLS usage, 'options' is an optional configuration object, and 'callback' is an optional function for 'connection' events\n- listen(port, host, callback) -> [Server Instance] - Starts the server listening on specified port and host. 'host' is optional, and 'callback' is an optional function for 'listening' events\n\nEvents:\n- connection: Emitted when a new client connects (passes Connection object)\n- close: Emitted when the server closes\n- error: Emitted when an error occurs (passes error object)\n- listening: Emitted when the server starts listening",
    "Canonical_solution": "var util = require('util'),\n    net = require('net'),\n    tls = require('tls'),\n    events = require('events'),\n    Connection = require('./Connection');\n\nfunction nop() {}\n\nclass Server extends events.EventEmitter {\n    constructor(secure, options, callback) {\n        super();\n        var that = this;\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = undefined;\n        }\n\n        var onConnection = function (socket) {\n            var conn = new Connection(socket, that, function () {\n                that.connections.push(conn);\n                conn.removeListener('error', nop);\n                that.emit('connection', conn);\n            });\n            conn.on('close', function () {\n                var pos = that.connections.indexOf(conn);\n                if (pos !== -1) {\n                    that.connections.splice(pos, 1);\n                }\n            });\n\n            // Ignore errors before the connection is established\n            conn.on('error', nop);\n        };\n\n        if (secure) {\n            this.socket = tls.createServer(options, onConnection);\n        } else {\n            this.socket = net.createServer(options, onConnection);\n        }\n\n        this.socket.on('close', function () {\n            that.emit('close');\n        });\n        this.socket.on('error', function (err) {\n            that.emit('error', err);\n        });\n        this.connections = [];\n\n        if (callback) {\n            this.on('connection', callback);\n        }\n    }\n\n    listen(port, host, callback) {\n        var that = this;\n\n        if (typeof host === 'function') {\n            callback = host;\n            host = undefined;\n        }\n\n        if (callback) {\n            this.on('listening', callback);\n        }\n\n        this.socket.listen(port, host, function () {\n            that.emit('listening');\n        });\n\n        return this;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class Server extends EventEmitter {\n  constructor(secure, options, callback) {\n    super();\n    this.secure = secure;\n    this.socket = secure ? tls.createServer(options) : net.createServer();\n    this.connections = [];\n\n    this.socket.on('connection', (socket) => {\n      const connection = socket;\n      this.connections.push(connection);\n      if (callback) callback(connection);\n      this.emit('connection', connection);\n      socket.on('end', () => {\n        const index = this.connections.indexOf(connection);\n        if (index !== -1) this.connections.splice(index, 1);\n      });\n    });\n\n    this.socket.on('close', () => {\n      this.connections = [];\n      this.emit('close');\n    });\n\n    this.socket.on('error', (err) => {\n      this.emit('error', err);\n    });\n\n    this.socket.on('listening', () => {\n      this.emit('listening');\n    });\n  }\n\n  listen(port, host, callback) {\n    this.socket.listen(port, host, (err) => {\n      if (err) {\n        this.emit('error', err);\n        return;\n      }\n      if (callback) callback();\n      this.emit('listening');\n    });\n  }\n}"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a TCP server using Node.js's `net` module to handle client connections and manage sessions with unique identifiers, while optionally supporting weak references for garbage collection.\n\nClass Description: The `DNodeServer` class is a TCP server implementation that manages client connections, assigns unique session IDs, and provides event-based interaction with connected clients. It supports optional weak reference handling for callbacks to prevent memory leaks.\n\nAttributes:\n- cons: [Function] - The constructor or function to be called for each new connection.\n- opts: [Object] - Configuration options for the server, including weak reference settings.\n- server: [net.Server] - The underlying TCP server instance.\n- server.sessions: [Object] - Dictionary of active sessions indexed by session IDs.\n\nMethods:\n- constructor(cons, opts) -> [DNodeServer] - Initializes the server with a connection handler and options. Sets up weak reference handling if enabled.\n- _handleConnection(stream) -> [void] - Handles new client connections, creates session with unique ID, and sets up data piping and event forwarding.\n- listen(port, host, callback) -> [net.Server] - Starts the server listening on specified port/host or UNIX socket path. Accepts optional callback for 'listening' event.\n- _randomId() -> [string] - Generates a random 16-character hexadecimal string for session identification.\n\nInput:\n- cons: [Function] - Required connection handler function\n- opts: [Object] - Optional configuration object (may contain 'weak' and 'proto' properties)\n- port: [number|string] - Port number or UNIX socket path to listen on\n- host: [string] - Optional hostname to bind to\n- callback: [Function] - Optional callback for listening event\n\nOutput:\n- Instance of DNodeServer when constructed\n- Instance of net.Server when calling listen()",
    "Canonical_solution": "var dnode = require('./lib/dnode');\nvar net = require('net');\nvar weak;\n\nclass DNodeServer {\n    constructor(cons, opts) {\n        if (!opts) opts = {};\n        \n        if (opts.weak !== false && !opts.proto) {\n            if (!weak) {\n                weak = require(\"weak\");\n            }\n            \n            opts.proto = {};\n            opts.proto.wrap = function (cb, id) {\n                var proto = this;\n                return weak(cb, function () {\n                    proto.cull(id);\n                });\n            };\n            opts.proto.unwrap = function (ref, id) {\n                var cb = weak.get(ref);\n                return cb || function () {};\n            };\n        }\n        \n        this.cons = cons;\n        this.opts = opts;\n        this.server = net.createServer(this._handleConnection.bind(this));\n        this.server.sessions = {};\n    }\n\n    _handleConnection(stream) {\n        var d = new dnode(this.cons, this.opts);\n        do { d.id = this._randomId(); }\n        while (this.server.sessions[d.id]);\n        \n        this.server.sessions[d.id] = d;\n        d.on('end', () => {\n            delete this.server.sessions[d.id];\n        });\n        \n        d.on('local', (ref) => {\n            this.server.emit('local', ref, d);\n        });\n        \n        d.on('remote', (remote) => {\n            this.server.emit('remote', remote, d);\n        });\n        \n        stream.on('error', (err) => {\n            if (err && err.code === 'EPIPE') return;\n            d.emit('error', err);\n        });\n        \n        d.stream = stream;\n        stream.pipe(d);\n        d.pipe(stream);\n    }\n\n    listen(port, host, callback) {\n        if (typeof port === 'number' && port >= 0) {\n            this.server.listen(port, host);\n        } else if (typeof port === 'string') {\n            this.server.listen(port);\n        } else {\n            throw new Error('no port or path provided');\n        }\n        \n        if (callback) {\n            this.server.on('listening', callback);\n        }\n        \n        return this.server;\n    }\n\n    _randomId() {\n        var s = '';\n        for (var i = 0; i < 4; i++) {\n            s += Math.random().toString(16).slice(2);\n        }\n        return s;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class DNodeServer {\n  constructor(cons, opts) {\n    this.cons = cons;\n    this.opts = opts || {};\n    this.server = net.createServer();\n    this.server.sessions = {};\n    this.weakCallbacks = this.opts.weak ? new WeakMap() : null;\n    this.server.on('connection', this._handleConnection.bind(this));\n  }\n\n  _handleConnection(stream) {\n    const sessionId = this._randomId();\n    const session = { stream, cons: this.cons };\n    this.server.sessions[sessionId] = session;\n\n    if (this.opts.weak) {\n      this.weakCallbacks.set(sessionId, session.cons);\n    }\n\n    stream.on('data', (data) => {\n      this.cons(data);\n    });\n\n    stream.on('end', () => {\n      delete this.server.sessions[sessionId];\n      if (this.opts.weak) {\n        this.weakCallbacks.delete(sessionId);\n      }\n    });\n  }\n\n  listen(port, host, callback) {\n    return this.server.listen(port, host, callback);\n  }\n\n  _randomId() {\n    return Math.random().toString(16).substring(2, 18);\n  }\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a TCP server class in JavaScript using Node.js's 'net' module to handle client connections, manage sockets, and provide event-driven communication.\n\nClass Description: The Socket class represents a TCP server that can bind to a specific port/host, manage client connections, handle socket errors, and emit events for various connection states. It extends EventEmitter for event handling capabilities.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- socks: [Array] - Array of connected client sockets\n- settings: [Object] - Configuration settings for the server\n- type: [String] - Indicates whether the instance is acting as a server or client\n\nMethods:\n- constructor() -> [void] - Initializes the socket instance with default settings\n- bind(port, host, fn) -> [Socket] - Binds the server to a specified port and host (supports both TCP and Unix sockets)\n- onconnect(sock) -> [void] - Handles new client connections\n- addSocket(sock) -> [void] - Adds a new socket to the connection pool and sets up message parsing\n- removeSocket(sock) -> [void] - Removes a socket from the connection pool\n- handleErrors(sock) -> [void] - Sets up error handling for a socket\n- closeServer(fn) -> [void] - Closes the server and all client connections",
    "Canonical_solution": "var Emitter = require('events').EventEmitter;\nvar net = require('net');\nvar debug = require('debug')('axon:sock');\n\nclass Socket {\n  constructor() {\n    this.server = null;\n    this.socks = [];\n    this.settings = {};\n    this.set('hwm', Infinity);\n    this.set('identity', String(process.pid));\n    this.set('retry timeout', 100);\n    this.set('retry max timeout', 5000);\n  }\n\n  bind(port, host, fn) {\n    var self = this;\n    if ('client' == this.type) throw new Error('cannot bind() after connect()');\n    if ('function' == typeof host) {\n      fn = host;\n      host = undefined;\n    }\n\n    var unixSocket = false;\n\n    if ('string' == typeof port) {\n      port = url.parse(port);\n\n      if ('unix:' == port.protocol) {\n        host = fn;\n        fn = undefined;\n        port = port.pathname;\n        unixSocket = true;\n      } else {\n        host = port.hostname || '0.0.0.0';\n        port = parseInt(port.port, 10);\n      }\n    } else {\n      host = host || '0.0.0.0';\n    }\n\n    this.type = 'server';\n\n    this.server = net.createServer(this.onconnect.bind(this));\n\n    debug('%s bind %s:%s', this.type, host, port);\n    this.server.on('listening', this.emit.bind(this, 'bind'));\n\n    if (unixSocket) {\n      this.server.on('error', function(e) {\n        if (e.code == 'EADDRINUSE') {\n          var clientSocket = new net.Socket();\n\n          clientSocket.on('error', function(e2) {\n            if (e2.code == 'ECONNREFUSED') {\n              fs.unlink(port);\n              self.server.listen(port, host, fn);\n            }\n          });\n\n          clientSocket.connect({path: port}, function() {\n            throw e;\n          });\n        }\n      });\n    }\n\n    this.server.listen(port, host, fn);\n    return this;\n  }\n\n  onconnect(sock) {\n    var self = this;\n    var addr = sock.remoteAddress + ':' + sock.remotePort;\n    debug('%s accept %s', self.type, addr);\n    this.addSocket(sock);\n    this.handleErrors(sock);\n    this.emit('connect', sock);\n    sock.on('close', function() {\n      debug('%s disconnect %s', self.type, addr);\n      self.emit('disconnect', sock);\n      self.removeSocket(sock);\n    });\n  }\n\n  addSocket(sock) {\n    var parser = new Parser;\n    var i = this.socks.push(sock) - 1;\n    debug('%s add socket %d', this.type, i);\n    sock.pipe(parser);\n    parser.on('data', this.onmessage(sock));\n  }\n\n  removeSocket(sock) {\n    var i = this.socks.indexOf(sock);\n    if (!~i) return;\n    debug('%s remove socket %d', this.type, i);\n    this.socks.splice(i, 1);\n  }\n\n  handleErrors(sock) {\n    var self = this;\n    sock.on('error', function(err) {\n      debug('%s error %s', self.type, err.code || err.message);\n      self.emit('socket error', err);\n      self.removeSocket(sock);\n      if (!~ignore.indexOf(err.code)) return self.emit('error', err);\n      debug('%s ignored %s', self.type, err.code);\n      self.emit('ignored error', err);\n    });\n  }\n\n  closeServer(fn) {\n    debug('%s closing server', this.type);\n    this.server.on('close', this.emit.bind(this, 'close'));\n    this.server.close();\n    fn && fn();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class Socket extends require('events').EventEmitter {\n  constructor() {\n    super();\n    this.server = require('net').createServer();\n    this.socks = [];\n    this.settings = { port: 8000, host: '127.0.0.1' };\n    this.type = 'server';\n  }\n\n  bind(port, host, fn) {\n    const finalPort = port || this.settings.port;\n    const finalHost = host || this.settings.host;\n    this.server.listen(finalPort, finalHost, () => {\n      if (fn) fn();\n    });\n    this.server.on('connection', (sock) => this.onconnect(sock));\n    return this;\n  }\n\n  onconnect(sock) {\n    this.addSocket(sock);\n  }\n\n  addSocket(sock) {\n    this.socks.push(sock);\n    sock.on('data', (data) => {\n      this.emit('message', data);\n    });\n    sock.on('error', (err) => this.handleErrors(sock));\n    sock.on('end', () => this.removeSocket(sock));\n    sock.on('close', () => this.removeSocket(sock));\n  }\n\n  removeSocket(sock) {\n    const index = this.socks.indexOf(sock);\n    if (index !== -1) {\n      this.socks.splice(index, 1);\n      sock.removeAllListeners();\n    }\n  }\n\n  handleErrors(sock) {\n    this.emit('error', sock);\n  }\n\n  closeServer(fn) {\n    this.server.close(() => {\n      this.socks.forEach((sock) => sock.destroy());\n      this.socks = [];\n      if (fn) fn();\n      this.emit('close');\n    });\n  }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    try {\n      let wallpaper;\n      if (unsplashClientId) {\n        const response = await fetch(`https://api.unsplash.com/photos/random?client_id=${unsplashClientId}&count=1`);\n        if (response.ok) {\n          const data = await response.json();\n          return { type: 'unsplash', data };\n        } else {\n          const bingResponse = await fetch('https://www.bing.com/hp.aspx?cp=0');\n          const bingData = await bingResponse.text();\n          return { type: 'bing', data: bingData };\n        }\n      } else {\n        const bingResponse = await fetch('https://www.bing.com/hp.aspx?cp=0');\n        const bingData = await bingResponse.text();\n        return { type: 'bing', data: bingData };\n      }\n    } catch (error) {\n      return { type: 'bing', data: { url: 'https://example.com/default-wallpaper.jpg' } };\n    }\n  }\n}"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a TCP-based P2P server class in JavaScript using Node.js's 'net' module and JsonSocket for message handling, capable of managing multiple client connections and processing structured JSON messages.\n\nClass Description: P2PServer is a TCP server implementation that handles peer-to-peer connections, manages client sockets, processes JSON-formatted messages with type-based routing, and provides lifecycle management for the server.\n\nAttributes:\n- tcpServer: [Object] - The underlying TCP server instance created using Node.js 'net' module\n- clients: [Array] - List of currently connected client sockets\n- send: [Function] - Callback function for sending messages (defaults to empty function)\n- messageHandlers: [Object] - Collection of registered message type handlers (implied by the code)\n\nMethods:\n- constructor([send: Function]) -> [P2PServer] - Initializes the TCP server with configuration, sets up connection handling, and prepares message processing infrastructure\n- listen(port: Number) -> [void] - Starts the server listening on the specified port and all network interfaces (0.0.0.0)\n- close() -> [Promise] - Gracefully shuts down the server, disconnects all clients, and returns a Promise that resolves when shutdown is complete\n- on(type: String, callback: Function) -> [void] - Registers a message handler function for a specific message type",
    "Canonical_solution": "const net = require('net');\nconst JsonSocket = require('json-socket');\n\nclass P2PServer {\n    constructor(send = () => {}) {\n        this.tcpServer = net.createServer();\n        this.tcpServer.maxConnections = config.p2pConnections * 2;\n        this.clients = [];\n        this.send = send;\n\n        this.tcpServer.on('connection', (socket) => {\n            if(!config.p2p) {\n                socket.destroy();\n                return;\n            }\n\n            this.tcpServer.getConnections((err, con) => {\n                logT('p2p', 'server connected', con, 'max', this.tcpServer.maxConnections);\n            });\n\n            socket = new JsonSocket(socket);\n            this.clients.push(socket);\n            \n            socket.on('close', () => {\n                this.clients.splice(this.clients.indexOf(socket), 1);\n            });\n            \n            socket.on('error', (err) => {});\n            \n            socket.on('message', (message) => {\n                if(message.type && this.messageHandlers[message.type]) {\n                    if(message.type != 'protocol' && !socket.rats) return;\n                    \n                    this.messageHandlers[message.type](message.data, (data) => {\n                        socket.sendMessage({\n                            id: message.id,\n                            data\n                        });\n                    }, socket, {\n                        version: message.version,\n                        info: message.info\n                    });\n                }\n            });\n            \n            socket.protocolTimeout = setTimeout(() => socket._socket.destroy(), 7000);\n        });\n    }\n\n    listen(port) {\n        this.tcpServer.listen(port, '0.0.0.0');\n    }\n\n    close() {\n        const promise = new Promise(resolve => this.tcpServer.close(resolve));\n        for (const client in this.clients) {\n            this.clients[client]._socket.destroy();\n        }\n        return promise;\n    }\n\n    on(type, callback) {\n        this.messageHandlers[type] = callback;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class P2PServer {\n  constructor(send = () => {}) {\n    this.tcpServer = net.createServer();\n    this.clients = [];\n    this.send = send;\n    this.messageHandlers = {};\n    this.tcpServer.on('connection', (socket) => {\n      this.clients.push(socket);\n      socket.on('data', (data) => {\n        try {\n          const message = JSON.parse(data.toString());\n          const handler = this.messageHandlers[message.type];\n          if (handler) {\n            handler(message);\n          }\n        } catch (e) {\n          // Handle parsing error\n        }\n      });\n      socket.on('end', () => {\n        const index = this.clients.indexOf(socket);\n        if (index !== -1) {\n          this.clients.splice(index, 1);\n        }\n      });\n    });\n  }\n\n  listen(port) {\n    this.tcpServer.listen(port, '0.0.0.0');\n  }\n\n  async close() {\n    return new Promise((resolve) => {\n      this.clients.forEach(client => {\n        client.end();\n      });\n      this.tcpServer.close(() => {\n        resolve();\n      });\n    });\n  }\n\n  on(type, callback) {\n    this.messageHandlers[type] = callback;\n  }\n}"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Create a TCP server implementation for handling IMAP (Internet Message Access Protocol) connections with optional TLS/SSL security support.\n\nClass Description: IMAPServer is a class that implements a TCP server for IMAP protocol connections. It supports both plain and TLS/SSL encrypted connections, handles client connections, and manages server lifecycle events.\n\nAttributes:\n- options: [Object] - Configuration options for the server including security settings\n- server: [net.Server] - The underlying TCP server instance\n- connections: [Set] - Active client connections\n- _closeTimeout: [Timeout] - Timer for server shutdown operations\n\nMethods:\n- constructor(options) -> [IMAPServer] - Initializes the server with configuration options and sets up event listeners\n- connect(socket, socketOptions) -> [void] - Creates a new IMAPConnection for a client socket\n- listen(...args) -> [void] - Starts the server listening on specified port/address\n- close(callback) -> [void] - Gracefully shuts down the server\n- _setListeners() -> [void] - Sets up server event listeners\n- _onListening() -> [void] - Handles server 'listening' event\n- _onClose() -> [void] - Handles server 'close' event\n- _onError(err) -> [void] - Handles server 'error' event\n- _handleProxy(socket, callback) -> [void] - Handles proxy protocol if needed\n- _upgrade(socket, callback) -> [void] - Upgrades a connection to TLS/SSL",
    "Canonical_solution": "const net = require('net');\nconst tls = require('tls');\n\nclass IMAPServer {\n    constructor(options) {\n        this.options = options || {};\n\n        if (this.options.secure && !this.options.needsUpgrade) {\n            this.server = net.createServer(this.options, socket => {\n                socket.setKeepAlive(true, 5 * 1000);\n                this._handleProxy(socket, (err, socketOptions) => {\n                    if (err) {\n                        // ignore, should not happen\n                    }\n                    if (this.options.secured) {\n                        return this.connect(socket, socketOptions);\n                    }\n                    this._upgrade(socket, (err, tlsSocket) => {\n                        if (err) {\n                            return this._onError(err);\n                        }\n                        this.connect(tlsSocket, socketOptions);\n                    });\n                });\n            });\n        } else {\n            this.server = net.createServer(this.options, socket =>\n                this._handleProxy(socket, (err, socketOptions) => {\n                    if (err) {\n                        // ignore, should not happen\n                    }\n                    socket.setKeepAlive(true, 5 * 1000);\n                    this.connect(socket, socketOptions);\n                })\n            );\n        }\n\n        this._setListeners();\n    }\n\n    connect(socket, socketOptions) {\n        let connection = new IMAPConnection(this, socket, socketOptions);\n        this.connections.add(connection);\n        connection.on('error', this._onError.bind(this));\n        connection.init();\n    }\n\n    listen(...args) {\n        this.server.listen(...args);\n    }\n\n    close(callback) {\n        this.server.close(() => {\n            clearTimeout(this._closeTimeout);\n            callback();\n        });\n    }\n\n    _setListeners() {\n        this.server.on('listening', this._onListening.bind(this));\n        this.server.on('close', this._onClose.bind(this));\n        this.server.on('error', this._onError.bind(this));\n    }\n\n    _onListening() {\n        let address = this.server.address();\n        this.emit('listening');\n    }\n\n    _onClose() {\n        this.emit('close');\n    }\n\n    _onError(err) {\n        this.emit('error', err);\n    }\n\n    _handleProxy(socket, callback) {\n        let socketOptions = {\n            id: base32.encode(crypto.randomBytes(10)).toLowerCase()\n        };\n        return setImmediate(() => callback(null, socketOptions));\n    }\n\n    _upgrade(socket, callback) {\n        let socketOptions = {\n            secureContext: this.secureContext.get('*'),\n            isServer: true,\n            server: this.server\n        };\n\n        let tlsSocket = new tls.TLSSocket(socket, socketOptions);\n        tlsSocket.on('secure', () => {\n            return callback(null, tlsSocket);\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class IMAPServer extends EventEmitter {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.server = this._createServer();\n    this.connections = new Set();\n    this._closeTimeout = null;\n    this._setListeners();\n  }\n\n  _createServer() {\n    if (this.options.tls) {\n      return tls.createServer(this.options.tls, this._onSecureConnection.bind(this));\n    } else {\n      return net.createServer(this._onConnection.bind(this));\n    }\n  }\n\n  _onConnection(socket) {\n    this.connect(socket, {});\n  }\n\n  _onSecureConnection(socket) {\n    this.connect(socket, { tls: true });\n  }\n\n  connect(socket, socketOptions) {\n    const connection = new IMAPConnection(socket, socketOptions);\n    this.connections.add(connection);\n    connection.on('end', () => {\n      this.connections.delete(connection);\n    });\n  }\n\n  listen(...args) {\n    this.server.listen(...args);\n  }\n\n  close(callback) {\n    if (this._closeTimeout) clearTimeout(this._closeTimeout);\n    this._closeTimeout = setTimeout(() => {\n      this.server.close(() => {\n        if (callback) callback();\n      });\n    }, 1000);\n  }\n\n  _setListeners() {\n    this.server.on('connection', this._onConnection.bind(this));\n    this.server.on('error', this._onError.bind(this));\n    this.server.on('close', this._onClose.bind(this));\n    this.server.on('listening', this._onListening.bind(this));\n  }\n\n  _onListening() {\n    console.log(`IMAP server listening on ${this.server.address().port}`);\n  }\n\n  _onClose() {\n    console.log('IMAP server closed');\n  }\n\n  _onError(err) {\n    console.error('IMAP server error:', err);\n  }\n\n  _handleProxy(socket, callback) {\n    const header = Buffer.alloc(14);\n    socket.read(header, 0, 14, 0, (err, bytesRead) => {\n      if (bytesRead === 14) {\n        const version = header[0];\n        const command = header[1];\n        const clientIP = socket.remoteAddress;\n        const clientPort = socket.remotePort;\n        callback(clientIP, clientPort);\n      } else {\n        callback(null, 0);\n      }\n    });\n  }\n\n  _upgrade(socket, callback) {\n    callback();\n  }\n}"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's built-in 'net' module to handle client connections, manage socket communication, and process incoming messages.\n\nClass Description: The TcpReader class is responsible for establishing a TCP server, managing client connections, handling socket events, and processing incoming messages through a custom parser. It provides methods to start/stop the server and manage connected clients.\n\nAttributes:\n- transporter: [Object] - The parent transporter object that handles incoming messages\n- opts: [Object] - Configuration options including the port to listen on\n- sockets: [Array] - Array of currently connected client sockets\n- logger: [Object] - Logger instance from the transporter for error logging\n- server: [Object] - The TCP server instance\n- connected: [Boolean] - Flag indicating if the server is currently listening\n\nMethods:\n- constructor(transporter, opts) -> [void] - Initializes the TcpReader with transporter and options\n- listen() -> [Promise] - Starts the TCP server and begins listening for connections\n- onTcpClientConnected(socket) -> [void] - Handles new client connections and sets up event listeners\n- closeSocket(socket, err) -> [void] - Closes and removes a specific socket from the connections\n- close() -> [void] - Stops the server and closes all connected sockets",
    "Canonical_solution": "const net = require(\"net\");\n\nclass TcpReader {\n    constructor(transporter, opts) {\n        this.transporter = transporter;\n        this.opts = opts;\n        this.sockets = [];\n        this.logger = transporter.logger;\n    }\n\n    listen() {\n        return new Promise((resolve, reject) => {\n            this.server = net.createServer(socket => {\n                this.onTcpClientConnected(socket);\n            });\n\n            this.server.on(\"error\", err => {\n                reject(err);\n            });\n\n            const listenOptions = process.versions.node.split(\".\")[0] >= 8 \n                ? { port: this.opts.port, exclusive: true }\n                : this.opts.port;\n\n            this.server.listen(listenOptions, () => {\n                this.opts.port = this.server.address().port;\n                this.connected = true;\n                resolve();\n            });\n        });\n    }\n\n    onTcpClientConnected(socket) {\n        socket.on(\"error\", err => {\n            this.closeSocket(socket, err);\n        });\n\n        socket.on(\"close\", () => {\n            this.closeSocket(socket);\n        });\n\n        socket.setNoDelay(true);\n\n        const parser = require(\"../../../../src/transporters/tcp/parser\")();\n        socket.pipe(parser);\n\n        parser.on(\"data\", (type, message) => {\n            this.transporter.onIncomingMessage(type, message, socket);\n        });\n\n        parser.on(\"error\", err => {\n            this.closeSocket(socket, err);\n        });\n\n        this.sockets.push(socket);\n    }\n\n    closeSocket(socket, err) {\n        if (err) {\n            this.logger.warn(`TCP socket error: ${err.message}`);\n        }\n\n        const index = this.sockets.indexOf(socket);\n        if (index !== -1) {\n            this.sockets.splice(index, 1);\n            socket.destroy();\n        }\n    }\n\n    close() {\n        if (this.server && this.server.listening) {\n            this.server.close();\n        }\n\n        this.sockets.forEach(socket => {\n            socket.destroy();\n        });\n        this.sockets = [];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class TcpReader {\n  constructor(transporter, opts) {\n    this.transporter = transporter;\n    this.opts = opts;\n    this.sockets = [];\n    this.logger = transporter.logger;\n    this.server = net.createServer();\n    this.connected = false;\n\n    this.server.on('connection', (socket) => this.onTcpClientConnected(socket));\n    this.server.on('error', (err) => this.logger.error(`Server error: ${err.message}`));\n  }\n\n  async listen() {\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.opts.port, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          this.connected = true;\n          resolve();\n        }\n      });\n    });\n  }\n\n  onTcpClientConnected(socket) {\n    this.sockets.push(socket);\n    socket.on('data', (data) => {\n      this.transporter.processMessage(data);\n    });\n    socket.on('end', () => this.closeSocket(socket));\n    socket.on('error', (err) => {\n      this.logger.error(`Socket error: ${err.message}`);\n      this.closeSocket(socket, err);\n    });\n  }\n\n  closeSocket(socket, err) {\n    if (err) {\n      this.logger.error(`Closing socket due to error: ${err.message}`);\n    }\n    socket.end();\n    const index = this.sockets.indexOf(socket);\n    if (index !== -1) {\n      this.sockets.splice(index, 1);\n    }\n  }\n\n  close() {\n    this.server.close(() => {\n      this.sockets.forEach((socket) => this.closeSocket(socket));\n      this.connected = false;\n    });\n  }\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP server class that intercepts Redis traffic, capable of operating in different modes (capture, test, or forward), with functionality to save, mock, or forward data between client and Redis server.\n\nClass Description: RedisInterceptor is a class that creates a TCP server to intercept Redis protocol traffic. It can operate in three modes: capture (save request/response pairs), test (respond with mocked data), or forward (pass through traffic unchanged). The class handles client connections, data forwarding, and response processing.\n\nAttributes:\n- Pythagora: [Object] - Reference to the parent Pythagora object for saving captured data\n- listenPort: [Number] - Port number on which the interceptor listens for client connections\n- targetPort: [Number] - Port number of the target Redis server (default: 6379)\n- intermediateData: [Array] - Array containing mocked request/response pairs for test mode\n- listenSocket: [Object] - Reference to the net.Server instance\n- targetSocket: [Object] - Reference to the net.Socket connection to Redis\n- mode: [String] - Current operation mode ('capture', 'test', or undefined for forward)\n\nMethods:\n- constructor(Pythagora, listenPort, targetPort, intermediateData) -> [RedisInterceptor] - Initializes the interceptor with configuration parameters\n- init() -> [Promise] - Asynchronously creates and starts the TCP server, resolving when listening\n- forwardData(connection, data, saveData) -> [undefined] - Forwards data to Redis server and handles response, optionally saving it\n- splitIntoChunks(str, chunkSize) -> [Array] - Helper method to split strings into chunks of specified size\n\nNote: The class assumes the existence of constants MODES (for operation modes) and CHUNK_SIZE (for response chunking) which should be defined elsewhere in the code.",
    "Canonical_solution": "const net = require('net');\n\nclass RedisInterceptor {\n    constructor(Pythagora, listenPort, targetPort, intermediateData) {\n        this.Pythagora = Pythagora;\n        this.listenPort = listenPort;\n        this.targetPort = targetPort || 6379;\n        this.intermediateData = intermediateData || [];\n    }\n\n    async init() {\n        await new Promise((resolve, reject) => {\n            this.listenSocket = net.createServer(connection => {\n                connection.on('data', data => {\n                    if (this.mode === MODES.capture) {\n                        this.forwardData(connection, data, true);\n                    } else if (this.mode === 'test') {\n                        let mockData = this.intermediateData.find(d => d.type === 'redis' && d.request === data.toString());\n                        if (mockData) {\n                            const chunks = this.splitIntoChunks(mockData.response, CHUNK_SIZE);\n                            chunks.forEach(chunk => connection.write(`+${chunk}\\r\\n`, 'utf8'));\n                        } else {\n                            this.forwardData(connection, data);\n                        }\n                    } else {\n                        this.forwardData(connection, data);\n                    }\n                });\n            });\n\n            this.listenSocket.listen(this.listenPort, () => {\n                resolve();\n            });\n        });\n    }\n\n    forwardData(connection, data, saveData) {\n        this.targetSocket = new net.Socket();\n        this.targetSocket.connect(this.targetPort, 'localhost', () => {\n            this.targetSocket.write(data);\n        });\n\n        this.targetSocket.on('data', response => {\n            if (saveData) Pythagora.saveRedisData(data.toString(), response.toString().replace(/^.*\\r\\n/, '').replace(/\\r\\n$/, ''));\n            connection.write(response);\n        });\n    }\n\n    splitIntoChunks(str, chunkSize) {\n        const chunks = [];\n        for (let i = 0; i < str.length; i += chunkSize) {\n            chunks.push(str.substring(i, i + chunkSize));\n        }\n        return chunks;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class RedisInterceptor {\n  constructor(Pythagora, listenPort, targetPort, intermediateData) {\n    this.Pythagora = Pythagora;\n    this.listenPort = listenPort;\n    this.targetPort = targetPort;\n    this.intermediateData = intermediateData;\n    this.listenSocket = null;\n    this.targetSocket = null;\n    this.mode = undefined;\n  }\n\n  async init() {\n    this.listenSocket = net.createServer((connection) => {\n      this.handleClientConnection(connection);\n    });\n\n    return new Promise((resolve, reject) => {\n      this.listenSocket.listen(this.listenPort, () => {\n        resolve();\n      });\n    });\n  }\n\n  handleClientConnection(connection) {\n    this.targetSocket = net.connect(this.targetPort, () => {\n      this.forwardData(connection, '', true);\n    });\n\n    this.targetSocket.on('error', (err) => {\n      console.error('Error connecting to target Redis:', err);\n    });\n\n    connection.on('data', (data) => {\n      this.forwardData(connection, data, true);\n    });\n\n    connection.on('end', () => {\n      this.targetSocket.end();\n    });\n\n    connection.on('error', (err) => {\n      console.error('Client error:', err);\n      this.targetSocket.end();\n    });\n  }\n\n  forwardData(connection, data, saveData) {\n    const chunks = this.splitIntoChunks(data, CHUNK_SIZE);\n    chunks.forEach(chunk => {\n      this.targetSocket.write(chunk);\n    });\n\n    let responseBuffer = '';\n    this.targetSocket.on('data', (chunk) => {\n      responseBuffer += chunk.toString();\n      this.processResponse(connection, data, responseBuffer, saveData);\n    });\n\n    this.targetSocket.on('end', () => {\n      this.processResponse(connection, data, responseBuffer, saveData);\n    });\n\n    this.targetSocket.on('error', (err) => {\n      console.error('Error on targetSocket:', err);\n      this.processResponse(connection, data, responseBuffer, saveData);\n    });\n  }\n\n  processResponse(connection, requestData, response, saveData) {\n    if (this.mode === 'capture' && saveData) {\n      this.saveCapturedData(requestData, response);\n    } else if (this.mode === 'test') {\n      const mockedResponse = this.getMockedResponse(requestData);\n      this.sendMockedResponse(connection, mockedResponse);\n    } else {\n      this.sendForwardResponse(connection, response);\n    }\n  }\n\n  saveCapturedData(request, response) {\n    this.Pythagora.saveRequestResponse(request, response);\n  }\n\n  getMockedResponse(request) {\n    const matched = this.intermediateData.find(item => item.request === request);\n    return matched ? matched.response : null;\n  }\n\n  sendMockedResponse(connection, response) {\n    if (response) {\n      connection.write(response);\n    }\n    connection.end();\n  }\n\n  sendForwardResponse(connection, response) {\n    if (response) {\n      connection.write(response);\n    }\n    connection.end();\n  }\n\n  splitIntoChunks(str, chunkSize) {\n    const chunks = [];\n    let remaining = str;\n    while (remaining.length > 0) {\n      chunks.push(remaining.slice(0, chunkSize));\n      remaining = remaining.slice(chunkSize);\n    }\n    return chunks;\n  }\n}"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Create a TCP server in Node.js that listens on a specified port and handles incoming client connections, data, and disconnections.\n\nFunction Description: The function `createTCPServer` initializes a TCP server using Node.js's built-in `net` module. It sets up event handlers for incoming data and client disconnections, and starts listening on the specified port. The server pipes incoming data to the provided data handler.\n\nInput:\n- `port` [Number] - The port number on which the TCP server should listen.\n- `dataHandler` [Function] - A callback function to handle incoming data from clients. It receives the data as its argument.\n- `endHandler` [Function] - A callback function to handle client disconnections. It is called when a client disconnects.\n\nOutput:\n- Returns the TCP server instance [Object] - The created TCP server object, which can be used to further control the server (e.g., close it).",
    "Canonical_solution": "var net = require('net');\n\nfunction createTCPServer(port, dataHandler, endHandler) {\n    var server = net.createServer(function(client) {\n        client.on('data', dataHandler);\n        client.on('end', endHandler);\n        client.pipe(dataHandler);\n    });\n    server.listen(port);\n    return server;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "function createTCPServer(port, dataHandler, endHandler) {\n  const server = net.createServer((socket) => {\n    socket.on('data', (data) => dataHandler(data));\n    socket.on('end', () => endHandler());\n  });\n  server.listen(port);\n  return server;\n}"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Node class that implements a TCP-based peer-to-peer communication system using Node.js's net module. The class should handle server creation, client connections, message passing, and peer management.\n\nClass Description: The Node class represents a network node that can both accept incoming connections and establish outgoing connections to other peers. It uses TCP sockets for communication and implements basic peer discovery and message broadcasting capabilities.\n\nAttributes:\n\nid_: [Number] - Unique identifier for this node\npeers_: [Object] - Dictionary mapping peer IDs to their socket connections\nPORT: [Number] - Base port number for node communication (actual port is PORT + id)\nserver_: [net.Server] - TCP server instance for accepting incoming connections\n\nMethods:\n\nconstructor(id) -> [void] - Initializes the node with given ID, sets up event emitter, and creates TCP server\nstart() -> [Promise] - Attempts to connect to random peers (up to 5) for network formation\non_data(data, socket) -> [void] - Handles incoming data from sockets, parses messages and emits events\nsend(socket, data) -> [void] - Sends data to a peer (either via socket object or peer ID)\nbroadcast(data) -> [void] - Sends data to all connected peers\nadd_peer(socket, remote_id) -> [void] - Adds a peer connection to the peers dictionary\nremove_peer(socket) -> [void] - Removes a peer connection from the peers dictionary\nlist_peers() -> [Array] - Returns an array of connected peer IDs",
    "Canonical_solution": "var net = require(\"net\");\nvar Msg = require(\"./message\");\nvar EventEmitter = require('events').EventEmitter;\nvar Promise = require(\"bluebird\");\n\nclass Node extends EventEmitter {\n    constructor(id) {\n        super();\n        this.id_ = id;\n        this.peers_ = {};\n        this.PORT = 8000;\n\n        let self = this;\n        this.server_ = net.createServer((socket) => {\n            socket.setEncoding('utf8');\n            socket.on('data', (data) => { self.on_data(data, socket); });\n            socket.on('end', () => { self.remove_peer(socket); });\n        });\n        this.server_.listen(this.PORT + id);\n    }\n\n    async start() {\n        for (var i = 0; i < 5; ++i) {\n            var remote_id = Math.floor(Math.random() * 20);\n            if (remote_id !== this.id_ && !this.peers_[remote_id]) {\n                let self = this;\n                var socket = net.createConnection({ port: (this.PORT + remote_id) });\n                await new Promise((resolve, reject) => {\n                    socket.on('connect', () => {\n                        resolve();\n                    });\n                    socket.on('error', function (e) {\n                        resolve();\n                    });\n                    socket.setEncoding('utf8');\n                    socket.on('data', (data) => { self.on_data(data, socket); });\n                });\n                let data = Msg.connection(self.id_);\n                self.send(socket, data);\n                self.add_peer(socket, remote_id);\n            }\n        }\n    }\n\n    on_data(data, socket) {\n        try {\n            var arr = data.split(\"\\r\\n\");\n            for (var i = 0; i < arr.length; ++i) {\n                if (arr[i] == '') continue;\n                let obj = JSON.parse(arr[i]);\n                if (obj.type == Msg.type.Connection) {\n                    let remote_id = obj.data;\n                    this.add_peer(socket, remote_id);\n                } else {\n                    this.emit(\"message\", obj);\n                }\n            }\n        } catch (err) {\n            console.log(\"=========================\");\n            console.log(`node: ${this.id_}\\t receive msg error`);\n            console.log(err);\n            console.log(err.message);\n            console.log(data);\n            console.log(arr.length);\n            console.log(\"=========================\");\n            throw new Error();\n        }\n    }\n\n    send(socket, data) {\n        if (typeof socket === 'number') {\n            socket = this.peers_[socket];\n        }\n        if (typeof data === 'object') {\n            data = JSON.stringify(data);\n        }\n        socket.write(data + \"\\r\\n\");\n    }\n\n    broadcast(data) {\n        for (var index in this.peers_) {\n            let socket = this.peers_[index];\n            this.send(socket, data);\n        }\n    }\n\n    add_peer(socket, remote_id) {\n        if (!this.peers_[remote_id]) {\n            this.peers_[remote_id] = socket;\n        }\n    }\n\n    remove_peer(socket) {\n        for (var index in this.peers_) {\n            if (this.peers_[index] == socket) {\n                delete this.peers_[index];\n                break;\n            }\n        }\n    }\n\n    list_peers() {\n        let peer_ids = [];\n        for (var index in this.peers_) {\n            peer_ids.push(index);\n        }\n        return peer_ids;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass Node extends EventEmitter {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.peers = {};\n    this.server = new net.Server();\n    this.server.on('connection', (socket) => {\n      const remoteId = this.getRemoteIdFromSocket(socket);\n      this.addPeer(socket, remoteId);\n      socket.on('data', (data) => {\n        this.onData(data, socket);\n      });\n    });\n    this.server.on('error', (err) => {\n      console.error('Server error:', err);\n    });\n    this.server.listen(this.getPort());\n  }\n\n  static get PORT() {\n    return 3000;\n  }\n\n  getPort() {\n    return Node.PORT + this.id;\n  }\n\n  async start() {\n    const targetIds = [1, 2, 3, 4, 5];\n    for (const id of targetIds) {\n      await this.connectToPeer(id);\n    }\n    return Promise.resolve();\n  }\n\n  connectToPeer(peerId) {\n    const port = this.getPort() + peerId;\n    const client = new net.Socket();\n    client.connect(port, () => {\n      console.log(`Connected to peer ${peerId}`);\n    });\n    client.on('data', (data) => {\n      console.log(`Received from peer ${peerId}: ${data}`);\n    });\n    client.on('error', (err) => {\n      console.error(`Error connecting to peer ${peerId}:`, err);\n    });\n    return new Promise((resolve) => {\n      setTimeout(resolve, 1000);\n    });\n  }\n\n  onData(data, socket) {\n    const message = JSON.parse(data.toString());\n    console.log(`Received message: ${JSON.stringify(message)}`);\n    this.emit('message', message, socket);\n  }\n\n  send(socketOrId, data) {\n    if (socketOrId instanceof net.Socket) {\n      socketOrId.write(data);\n    } else if (typeof socketOrId === 'string') {\n      const socket = this.peers[socketOrId];\n      if (socket) {\n        socket.write(data);\n      } else {\n        console.error(`Peer ${socketOrId} not found`);\n      }\n    } else {\n      throw new Error('Invalid socket or peer ID');\n    }\n  }\n\n  broadcast(data) {\n    for (const socket of Object.values(this.peers)) {\n      socket.write(data);\n    }\n  }\n\n  addPeer(socket, remoteId) {\n    this.peers[remoteId] = socket;\n  }\n\n  removePeer(socket) {\n    for (const id in this.peers) {\n      if (this.peers[id] === socket) {\n        delete this.peers[id];\n        break;\n      }\n    }\n  }\n\n  listPeers() {\n    return Object.keys(this.peers);\n  }\n\n  getRemoteIdFromSocket(socket) {\n    return Math.floor(Math.random() * 1000);\n  }\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Write a function that fetches version information and schema data from a remote API, caches the results locally, and handles errors appropriately.\n\nFunction Description: The function `fetchAndCacheVersions` retrieves version data from a specified API endpoint, then fetches schema data for each non-deprecated version. It caches all retrieved data in JSON files in a local directory. Errors during the process are caught and logged, with the process exiting on failure.\n\nInput: None (The function takes no parameters; all URLs and paths are hardcoded)\n\nOutput: \n- Success: Writes JSON files to the cache directory and logs success messages\n- Failure: Logs error messages and exits the process with status code 1",
    "Canonical_solution": "function fetchAndCacheVersions() {\n    const axios = require('axios');\n    const { writeJsonSync } = require('fs-extra');\n    const path = require('path');\n\n    axios\n        .get('https://exp.host/--/versions')\n        .then(async ({ data }) => {\n            writeJsonSync(path.join(__dirname, '../caches/versions.json'), data);\n\n            for (const version of Object.keys(data.sdkVersions)) {\n                if (data.sdkVersions[version].isDeprecated) {\n                    continue;\n                }\n                const {\n                    data: { data: schema },\n                } = await axios.get(`https://exp.host/--/api/v2/project/configuration/schema/${version}`);\n\n                const filePath = path.join(__dirname, `../caches/schema-${version}.json`);\n                console.log('Writing', filePath);\n                writeJsonSync(filePath, schema);\n            }\n        })\n        .then(() => console.log('Caches updated.'))\n        .catch(error => {\n            console.error(error);\n            console.error('Updating caches failed.');\n            process.exit(1);\n        });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const fs = require('fs');\nconst process = require('process');\n\nasync function fetchAndCacheVersions() {\n  try {\n    const versionsResponse = await fetch('https://api.example.com/versions');\n    const versions = await versionsResponse.json();\n\n    fs.mkdirSync('cache', { recursive: true });\n\n    fs.writeFileSync('cache/versions.json', JSON.stringify(versions, null, 2));\n\n    for (const version of versions) {\n      if (version.deprecated) continue;\n\n      const schemaUrl = `https://api.example.com/schemas/${version.version}`;\n      const schemaResponse = await fetch(schemaUrl);\n      const schema = await schemaResponse.json();\n\n      fs.writeFileSync(`cache/schema_${version.version}.json`, JSON.stringify(schema, null, 2));\n    }\n\n    console.log('All data cached successfully.');\n    process.exit(0);\n  } catch (error) {\n    console.error('Error fetching or caching data:', error.message);\n    process.exit(1);\n  }\n}\n\nfetchAndCacheVersions();"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a Flash Policy Server class in JavaScript using Node.js's net module to handle cross-domain policy requests for socket connections.\n\nClass Description: The FlashPolicyServer class creates a TCP server that responds to Flash socket policy requests. It manages allowed origins/ports, compiles the XML policy file, and handles server lifecycle events.\n\nAttributes:\n- origins: [Array] - List of allowed domain:port combinations\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [Object] - TCP server instance\n- buffer: [Buffer] - Compiled policy file in binary format\n- server: [Object] - Optional existing server instance to attach to\n\nMethods:\n- constructor(options, origins) -> [FlashPolicyServer] - Initializes the server with options and allowed origins\n- listen(port, server, cb) -> [FlashPolicyServer] - Starts listening on specified port, optionally attaching to existing server\n- responder(socket) -> [void] - Responds to policy requests on a socket connection\n- compile() -> [FlashPolicyServer] - Generates the XML policy buffer from allowed origins\n- add() -> [FlashPolicyServer] - Adds new allowed origins to the policy\n- remove(origin) -> [FlashPolicyServer] - Removes an origin from the allowed list\n- close() -> [FlashPolicyServer] - Stops the server and cleans up listeners",
    "Canonical_solution": "var net = require('net');\n\nclass FlashPolicyServer {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => this.responder(socket));\n      this.responder(socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges.'\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (data && data[0] === 60 && data.toString() === '<policy-file-request/>\\0' &&\n              socket && (socket.readyState === 'open' || socket.readyState === 'writeOnly')) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    this.port >= 0 && this.socket.listen(this.port, () => {\n      this.socket.online = true;\n      if (callback) {\n        callback.call(this);\n        callback = undefined;\n      }\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = new Buffer(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class FlashPolicyServer {\n  constructor(options, origins) {\n    this.options = options || {};\n    this.port = this.options.port || 843;\n    this.log = this.options.log || console.log;\n    this.origins = origins || [];\n    this.socket = null;\n    this.buffer = null;\n    this.server = this.options.server || null;\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    if (!server) {\n      this.server = net.createServer();\n      this.server.on('connection', (socket) => this.responder(socket));\n      this.server.listen(port, () => {\n        this.log(`Server listening on port ${port}`);\n        if (cb) cb();\n      });\n    } else {\n      server.on('connection', (socket) => this.responder(socket));\n      this.server = server;\n      if (cb) cb();\n    }\n  }\n\n  responder(socket) {\n    socket.write(this.buffer);\n    socket.end();\n  }\n\n  compile() {\n    const xml = ['<policy-file>'];\n    this.origins.sort().forEach(origin => {\n      const [domain, port] = origin.split(':');\n      xml.push(`<allow domain=\"${domain}\"${port ? ` port=\"${port}\"` : ''}/>`);\n    });\n    xml.push('</policy-file>');\n    this.buffer = Buffer.from(xml.join('\\n'));\n  }\n\n  add(origin) {\n    this.origins.push(origin);\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    this.origins = this.origins.filter(o => o !== origin);\n    this.compile();\n    return this;\n  }\n\n  close() {\n    if (this.server) {\n      this.server.close(() => {\n        this.log('Server closed');\n      });\n    }\n  }\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a UDP server using Node.js's dgram module to listen for incoming messages on a specified port.\n\nFunction Description: The function `createUDPServer` initializes a UDP server socket, binds it to a specified port, and listens for incoming messages. When a message is received, it logs the message content and the sender's address and port.\n\nInput: None\n\nOutput: None (The function does not return any value but logs incoming messages to the console.)",
    "Canonical_solution": "function createUDPServer() {\n    const dgram = require('dgram');\n    const socket = dgram.createSocket('udp4');\n\n    socket.on('message', (msg, rinfo) => {\n        console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n    });\n\n    socket.bind(8081);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 98,
    "wrong_result": "const dgram = require('dgram');\n\nfunction createUDPServer() {\n  const server = dgram.createSocket('udp4');\n  server.bind(12345);\n  server.on('message', (msg, rinfo) => {\n    console.log(`Received: ${msg} from ${rinfo.address}:${rinfo.port}`);\n  });\n}"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a function that sets up a UDP server to listen for incoming messages on a specified port and handles them using a provided callback function.\n\nFunction Description: The function `createUDPServer` initializes a UDP server using Node.js's `dgram` module. It creates a socket, sets up event handlers for errors, incoming messages, and listening status, and binds the socket to the specified port. The server processes incoming messages as UTF-8 strings and passes them to the provided callback function along with the remote address information.\n\nInput:\n- `port` (Number) - The port number on which the UDP server should listen.\n- `messageHandler` (Function) - A callback function that handles incoming messages. It receives two parameters: the message data (String) and the remote address information (Object).\n\nOutput:\n- Returns the created UDP server (dgram.Socket) instance.\n\nNote: The server will automatically start listening once created and will log its listening address to the console. Errors will be logged and will cause the server to close.",
    "Canonical_solution": "const dgram = require('dgram');\n\nfunction createUDPServer(port, messageHandler) {\n    const server = dgram.createSocket('udp4');\n\n    server.on('error', err => {\n        console.error(err);\n        server.close();\n    });\n\n    server.on('message', (msg, rinfo) => {\n        const data = msg.toString('utf8').trim();\n        if (messageHandler) {\n            messageHandler(data, rinfo);\n        }\n    });\n\n    server.on('listening', () => {\n        const address = server.address();\n        console.log(`server listening ${address.address}:${address.port}`);\n    });\n\n    server.bind(port);\n\n    return server;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 98,
    "wrong_result": "function createUDPServer(port, messageHandler) {\n  const socket = dgram.createSocket('udp4');\n  socket.on('error', (err) => {\n    console.error(`UDP server error: ${err.message}`);\n    socket.close();\n  });\n  socket.on('message', (msg, remote) => {\n    const data = msg.toString('utf8');\n    messageHandler(data, remote);\n  });\n  socket.on('listening', () => {\n    console.log(`UDP server listening on port ${port}`);\n  });\n  socket.bind(port);\n  return socket;\n}"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Create a UDP server that listens for incoming messages, processes them, and emits events to connected clients via WebSocket. The server should handle JSON-formatted messages, manage streams of data, and maintain a history of recent messages for each stream.\n\nFunction Description: The function `setupUDPServer` initializes a UDP server using Node.js's `dgram` module. It listens for incoming messages, parses them as JSON, and manages a collection of data streams. Each message is stored in its respective stream, with a limit of 100 messages per stream. The server also emits WebSocket events to notify clients of new messages and updates to the available streams.\n\nInput: \n- `argv.udpPort` [Number] - The port number on which the UDP server should listen.\n- `argv.udpHost` [String] - The host address on which the UDP server should bind (optional, defaults to all interfaces if not specified).\n- `io` [Object] - A WebSocket server instance (e.g., from `socket.io`) used to emit events to connected clients.\n- `debug` [Function] - A logging function used to output debug information.\n\nOutput: None (The function sets up the UDP server and binds it to the specified port and host, but does not return any value.)",
    "Canonical_solution": "function setupUDPServer() {\n    const dgram = require('dgram');\n    let streams = {};\n    let socket = dgram.createSocket('udp4');\n\n    socket.on('message', function (data, remote) {\n        try { data = JSON.parse(data); }\n        catch (err) { return debug('invalid data sent'); }\n\n        if (!streams[data.id]) {\n            streams[data.id] = [];\n            io.sockets.emit('streams', Object.keys(streams));\n        }\n\n        let message = {\n            timestamp: data.timestamp,\n            streamid: data.id,\n            host: remote.address,\n            port: remote.port,\n            content: data.content,\n            type: typeof data.content\n        };\n\n        streams[data.id].length >= 100 && streams[data.id].shift();\n        streams[data.id].push(message);\n\n        debug(JSON.stringify(message));\n        io.sockets.to(data.id).emit('line', message);\n    });\n\n    socket.bind(argv.udpPort, argv.udpHost);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 98,
    "wrong_result": "function setupUDPServer(argv, io, debug) {\n  const udpServer = dgram.createSocket('udp4');\n  const streams = new Map();\n\n  udpServer.on('message', (msg, rinfo) => {\n    try {\n      const message = JSON.parse(msg.toString());\n      const streamId = message.stream;\n\n      if (!streams.has(streamId)) {\n        streams.set(streamId, []);\n      }\n\n      const messages = streams.get(streamId);\n      messages.push(message);\n\n      if (messages.length > 100) {\n        messages.shift();\n      }\n\n      io.emit('newMessage', { streamId, message });\n      io.emit('streamUpdate', { streamId, messages });\n\n      debug(`Processed message for stream ${streamId}`);\n    } catch (err) {\n      debug(`Error parsing message: ${err.message}`);\n    }\n  });\n\n  udpServer.on('error', (err) => {\n    debug(`UDP server error: ${err.message}`);\n  });\n\n  udpServer.on('listening', () => {\n    debug(`UDP server listening on port ${argv.udpPort}`);\n  });\n\n  udpServer.bind(argv.udpPort, argv.udpHost);\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a UDP communication class in JavaScript using Node.js's dgram module for bidirectional message handling between processes.\n\nClass Description: The Udp class facilitates UDP-based communication with capabilities for both sending and receiving messages. It manages socket creation, port binding, message queuing, and event handling for network communication.\n\nAttributes:\n- stack: [Array] - Stores outgoing messages in a queue before sending\n- port: [Number|null] - The target port number for outgoing messages\n- socket: [dgram.Socket|null] - UDP socket instance for sending messages\n- listener: [dgram.Socket|null] - UDP socket instance for receiving messages\n- client: [Object] - Reference to the parent client object for message handling\n\nMethods:\n- constructor(client) -> [void] - Initializes the UDP instance with a client reference and creates socket objects\n- start() -> [void] - Begins UDP communication by setting up input and output sockets\n- clear() -> [void] - Clears the message queue\n- run() -> [void] - Processes all messages in the queue\n- push(msg) -> [void] - Adds a message to the outgoing queue (Input: msg [String] - Message to send)\n- play(data) -> [void] - Sends a single message via UDP (Input: data [String] - Message content)\n- selectOutput(port=49161) -> [void] - Configures the output port (Input: port [Number] - Target port number)\n- selectInput(port=49160) -> [void] - Configures and starts the input listener (Input: port [Number] - Listening port number)",
    "Canonical_solution": "const dgram = require('dgram');\n\nclass Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = dgram ? dgram.createSocket('udp4') : null;\n    this.listener = dgram ? dgram.createSocket('udp4') : null;\n    this.client = client;\n  }\n\n  start() {\n    if (!dgram || !this.socket || !this.listener) { \n      console.warn('UDP', 'Could not start.'); \n      return; \n    }\n    console.info('UDP', 'Starting..');\n\n    this.selectInput();\n    this.selectOutput();\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    for (const item of this.stack) {\n      this.play(item);\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (!this.socket) { return; }\n    this.socket.send(Buffer.from(`${data}`), this.port, this.client.io.ip, (err) => {\n      if (err) { console.warn(err); }\n    });\n  }\n\n  selectOutput(port = 49161) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (parseInt(port) === this.port) { console.warn('UDP', 'Already selected'); return; }\n    if (isNaN(port) || port < 1000) { console.warn('UDP', 'Unavailable port'); return; }\n\n    console.log('UDP', `Output: ${port}`);\n    this.port = parseInt(port);\n  }\n\n  selectInput(port = 49160) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (this.listener) { this.listener.close(); }\n\n    console.log('UDP', `Input: ${port}`);\n    this.listener = dgram.createSocket('udp4');\n\n    this.listener.on('message', (msg, rinfo) => {\n      this.client.commander.trigger(`${msg}`);\n    });\n\n    this.listener.on('listening', () => {\n      const address = this.listener.address();\n      console.info('UDP', `Started socket at ${address.address}:${address.port}`);\n    });\n\n    this.listener.on('error', (err) => {\n      console.warn('UDP', `Server error:\\n ${err.stack}`);\n      this.listener.close();\n    });\n\n    this.listener.bind(port);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "const dgram = require('dgram');\n\nclass Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = dgram.createSocket('udp');\n    this.listener = dgram.createSocket('udp');\n    this.client = client;\n  }\n\n  start() {\n    this.selectInput();\n    this.selectOutput();\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    while (this.stack.length > 0) {\n      const msg = this.stack.shift();\n      this.play(msg);\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (this.socket && this.port) {\n      this.socket.send(data, this.port, (err) => {\n        if (err) console.error(err);\n      });\n    }\n  }\n\n  selectOutput(port = 49161) {\n    this.port = port;\n    this.socket.bind(port, () => {});\n  }\n\n  selectInput(port = 49160) {\n    this.listener.bind(port, () => {\n      this.listener.on('message', (data, rinfo) => {\n        this.client.handleMessage(data, rinfo);\n      });\n    });\n  }\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a UDP-based server discovery system that allows servers to broadcast their presence and receive information about other nearby servers on the network.\n\nClass Description: The class provides functionality for UDP-based server discovery, including broadcasting server presence (heartbeats) and listening for broadcasts from other servers. It maintains a list of discovered servers and handles network communication errors.\n\nAttributes:\n- nearbyServers: [Object] - A dictionary storing information about discovered nearby servers, keyed by hostname.\n- lastDiscoveryBroadcast: [Number] - Timestamp of the last broadcast sent by this server.\n- broadcastIP: [String] - The broadcast IP address used for sending discovery messages.\n- discoveryListener: [Object] - The UDP socket instance used for listening to discovery messages.\n\nMethods:\n- setupDiscovery([callback: Function]) -> [void] - Initializes the UDP listener socket and binds it to the configured port. The optional callback is executed when binding is complete.\n- discoveryBroadcast([type: String, message: Object, callback: Function]) -> [void] - Creates a UDP client to broadcast a message of the specified type. The message should be an object that will be stringified to JSON. The optional callback is executed after the message is sent.\n- discoveryReceive([msg: Buffer, rinfo: Object]) -> [void] - Handles incoming UDP messages, parsing them as JSON and processing different message types (currently only 'heartbeat' is implemented). Updates the nearbyServers list when valid messages are received.\n- shutdownDiscovery() -> [void] - Closes the UDP listener socket if it exists, cleaning up network resources.\n- calcBroadcastIP() -> [String] - (Implied but not shown) Calculates the broadcast IP address based on network interfaces.",
    "Canonical_solution": "var dgram = require(\"dgram\");\nvar os = require('os');\nvar Netmask = require('netmask').Netmask;\n\nvar Class = require(\"pixl-class\");\nvar Tools = require(\"pixl-tools\");\n\nmodule.exports = Class.create({\n\t\n\tnearbyServers: null,\n\tlastDiscoveryBroadcast: 0,\n\t\n\tsetupDiscovery: function(callback) {\n\t\tvar self = this;\n\t\t\n\t\tthis.nearbyServers = {};\n\t\tthis.lastDiscoveryBroadcast = 0;\n\t\t\n\t\tif (!this.server.config.get('udp_broadcast_port')) {\n\t\t\tif (callback) callback();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.broadcastIP = this.server.config.get('broadcast_ip') || this.calcBroadcastIP();\n\t\t\n\t\tvar listener = this.discoveryListener = dgram.createSocket(\"udp4\");\n\t\t\n\t\tlistener.on(\"message\", function (msg, rinfo) {\n\t\t\tself.discoveryReceive( msg, rinfo );\n\t\t} );\n\t\t\n\t\tlistener.on(\"error\", function (err) {\n\t\t\tself.logError('udp', \"UDP socket listener error: \" + err);\n\t\t\tself.discoveryListener = null;\n\t\t} );\n\t\t\n\t\tlistener.bind( this.server.config.get('udp_broadcast_port'), function() {\n\t\t\tif (callback) callback();\n\t\t} );\n\t},\n\t\n\tdiscoveryBroadcast: function(type, message, callback) {\n\t\tvar self = this;\n\t\t\n\t\tmessage.action = type;\n\t\t\n\t\tvar client = dgram.createSocket('udp4');\n\t\tvar message = Buffer.from( JSON.stringify(message) + \"\\n\" );\n\t\tclient.bind( 0, function() {\n\t\t\tclient.setBroadcast( true );\t\t\t\n\t\t\tclient.send(message, 0, message.length, self.server.config.get('udp_broadcast_port'), self.broadcastIP, function(err) {\n\t\t\t\tif (err) self.logDebug(9, \"UDP broadcast failed: \" + err);\n\t\t\t\tclient.close();\n\t\t\t\tif (callback) callback();\n\t\t\t} );\n\t\t} );\n\t},\n\t\n\tdiscoveryReceive: function(msg, rinfo) {\n\t\tvar text = msg.toString();\n\t\tif (text.match(/^\\{/)) {\n\t\t\tvar json = null;\n\t\t\ttry { json = JSON.parse(text); }\n\t\t\tcatch (e) {\n\t\t\t\tthis.logError(9, \"Failed to parse UDP JSON message: \" + e);\n\t\t\t}\n\t\t\tif (json && json.action) {\n\t\t\t\tswitch (json.action) {\n\t\t\t\t\tcase 'heartbeat':\n\t\t\t\t\t\tif (json.hostname && (json.hostname != this.server.hostname)) {\n\t\t\t\t\t\t\tjson.now = Tools.timeNow();\n\t\t\t\t\t\t\tdelete json.action;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!this.nearbyServers[ json.hostname ]) {\n\t\t\t\t\t\t\t\tthis.nearbyServers[ json.hostname ] = json;\n\t\t\t\t\t\t\t\tif (this.multi.master) {\n\t\t\t\t\t\t\t\t\tthis.logDebug(6, \"Discovered nearby server: \" + json.hostname, json);\n\t\t\t\t\t\t\t\t\tthis.authSocketEmit( 'update', { nearby: this.nearbyServers } );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.nearbyServers[ json.hostname ] = json;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\tshutdownDiscovery: function() {\n\t\tif (this.discoveryListener) {\n\t\t\tthis.discoveryListener.close();\n\t\t}\n\t}\n});",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class ServerDiscovery {\n  constructor() {\n    this.nearbyServers = {};\n    this.lastDiscoveryBroadcast = Date.now();\n    this.broadcastIP = this.calcBroadcastIP();\n    this.discoveryListener = null;\n  }\n\n  setupDiscovery(callback) {\n    const socket = dgram.createSocket('udp4');\n    socket.bind(3000, () => {\n      this.discoveryListener = socket;\n      if (callback) callback();\n    });\n    socket.on('message', (msg, rinfo) => this.discoveryReceive(msg, rinfo));\n  }\n\n  discoveryBroadcast(type, message, callback) {\n    const socket = dgram.createSocket('udp4');\n    socket.setBroadcast(true);\n    const data = JSON.stringify(message);\n    socket.send(data, 0, data.length, this.broadcastIP, 3000, () => {\n      if (callback) callback();\n      socket.close();\n    });\n  }\n\n  discoveryReceive(msg, rinfo) {\n    try {\n      const parsed = JSON.parse(msg.toString());\n      if (parsed.type === 'heartbeat') {\n        this.nearbyServers[rinfo.address] = parsed.data;\n      }\n    } catch (e) {\n      // Handle error, maybe log\n    }\n  }\n\n  shutdownDiscovery() {\n    if (this.discoveryListener) {\n      this.discoveryListener.close();\n    }\n  }\n\n  calcBroadcastIP() {\n    // Placeholder, actual implementation would find the broadcast IP\n    return '255.255.255.255';\n  }\n}"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a UDP-based poller class in JavaScript that can send ping messages to a target UDP server and handle pong responses, with timeout functionality.\n\nClass Description: The UdpPoller class is designed to monitor UDP servers by sending periodic ping messages and listening for pong responses. It inherits from a base poller class and implements UDP communication using Node.js's dgram module.\n\nAttributes:\n- udpServer: [Object] - The UDP socket instance created using dgram module\n- target: [Object/String] - The target server address and port (parsed from input URL)\n- timeout: [Number] - The maximum time to wait for a response before timing out\n- callback: [Function] - The callback function to be executed when a response is received or an error occurs\n\nMethods:\n- constructor(target, timeout, callback) -> [void] - Initializes the poller with target, timeout, and callback\n- static get type() -> [String] - Returns the poller type ('udp')\n- static validateTarget(target) -> [Boolean] - Validates if the target URL matches UDP format\n- initialize() -> [void] - Sets up the UDP socket and parses the target address\n- poll() -> [void] - Sends a ping message to the target server and sets up response listener\n- onResponseCallback(message, sender) -> [void] - Handles incoming messages and processes pong responses\n- timeoutReached() -> [void] - Cleans up socket listeners when timeout occurs",
    "Canonical_solution": "var util = require('util');\nvar dgram = require('dgram');\nvar BasePoller = require('../basePoller');\n\nclass UdpPoller {\n  constructor(target, timeout, callback) {\n    UdpPoller.super_.call(this, target, timeout, callback);\n    this.udpServer = null;\n  }\n\n  static get type() {\n    return 'udp';\n  }\n\n  static validateTarget(target) {\n    var reg = new RegExp('udp:\\/\\/(.*):(\\\\d{1,5})');\n    return reg.test(target);\n  }\n\n  initialize() {\n    this.udpServer = dgram.createSocket('udp4');\n    this.udpServer.bind();\n    this.udpServer.on('error', function() {});\n    \n    var reg = new RegExp('udp:\\/\\/(.*):(\\\\d{1,5})');\n    if(!reg.test(this.target)) {\n      console.log(this.target + ' does not seems to be valid udp url');\n    }\n    var host = reg.exec(this.target);\n    this.target = {\n      'address': host[1],\n      'port': host[2]\n    };\n  }\n\n  poll() {\n    var ping = new Buffer(JSON.stringify({'command': 'ping'}));\n    this.udpServer.send(ping, 0, ping.length, this.target.port, this.target.address);\n    this.udpServer.on(\"message\", this.onResponseCallback.bind(this));\n  }\n\n  onResponseCallback(message, sender) {\n    var cmd;\n    try {\n      cmd = JSON.parse(message);\n    } catch (e) {\n      return this.onErrorCallback({ name: \"Unparsable answer\", message: \"server return answer \" + message.toString()});\n    }\n    if (cmd.command === 'pong') {\n      this.timer.stop();\n      this.callback(null, this.getTime(), cmd);\n    }\n  }\n\n  timeoutReached() {\n    this.udpServer.removeAllListeners();\n  }\n}\n\nutil.inherits(UdpPoller, BasePoller);",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class UdpPoller {\n  constructor(target, timeout, callback) {\n    this.target = target;\n    this.timeout = timeout;\n    this.callback = callback;\n    this.udpServer = null;\n    this.timer = null;\n    this.initialize();\n  }\n\n  static get type() {\n    return 'udp';\n  }\n\n  static validateTarget(target) {\n    if (typeof target === 'string') {\n      try {\n        const url = new URL(target);\n        return url.protocol === 'udp:';\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  initialize() {\n    this.udpServer = dgram.createSocket('udp4');\n    this.udpServer.bind(0);\n    this.parseTarget();\n  }\n\n  parseTarget() {\n    if (typeof this.target === 'string') {\n      const url = new URL(this.target);\n      this.host = url.hostname;\n      this.port = parseInt(url.port, 10);\n    } else if (this.target.host && this.target.port) {\n      this.host = this.target.host;\n      this.port = this.target.port;\n    }\n  }\n\n  poll() {\n    const message = Buffer.from('ping');\n    this.udpServer.send(message, this.port, this.host, (err) => {\n      if (err) {\n        this.callback(err);\n        return;\n      }\n    });\n\n    this.timer = setTimeout(() => {\n      this.timeoutReached();\n    }, this.timeout);\n\n    this.udpServer.on('message', (message, rinfo) => {\n      this.onResponseCallback(message, rinfo);\n      clearTimeout(this.timer);\n    });\n  }\n\n  onResponseCallback(message, sender) {\n    this.callback(null, message, sender);\n  }\n\n  timeoutReached() {\n    this.udpServer.close();\n    this.callback(new Error('Timeout reached'));\n  }\n}"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a class that implements inter-process communication (IPC) using UDP sockets in Node.js, allowing communication between a master process and worker processes.\n\nClass Description: The MasterIPC class facilitates communication between a master process and worker processes using UDP sockets. It handles socket creation, message parsing, method invocation, and event emission for worker connections and restarts.\n\nAttributes:\n- options: [Object] - Configuration options including socket port and address.\n- _sock: [dgram.Socket] - The UDP socket instance for communication.\n- children: [Array] - List of connected worker processes.\n- sock: [dgram.Socket] - Alternative socket reference used for sending messages.\n\nMethods:\n- IPCSocket() -> [dgram.Socket] - Creates and configures a UDP socket if not already created, setting up message event handling.\n- setupIPC() -> [void] - Binds the socket to the specified port and address, emits 'start' event when listening.\n- call(id, method, ...args) -> [void] - Sends a message to a worker process with the specified ID, method, and arguments.\n- invoke(method, args, worker) -> [void] - Invokes the specified method with given arguments and worker context if the method exists.\n- connect(worker) -> [void] - Emits a 'worker connected' event for the specified worker.\n- connectMaster(sig) -> [void] - Kills the parent process with the specified signal, either immediately or after the socket is listening.\n- masterKilled(data) -> [void] - Emits a 'restart' event with the provided data.",
    "Canonical_solution": "var dgram = require('dgram');\nvar net = require('net');\nvar utils = require('./utils');\n\nclass MasterIPC {\n  constructor(options) {\n    this.options = options;\n    this._sock = null;\n    this.children = [];\n  }\n\n  IPCSocket() {\n    var self = this;\n    if (this._sock) return this._sock;\n    \n    this._sock = dgram.createSocket('udp4');\n    this._sock.on('message', function(msg, info) {\n      try {\n        msg = JSON.parse(msg.toString('ascii'));\n        self.invoke(msg.method, msg.args, self.children[msg.id]);\n      } catch (err) {\n        console.error(err.stack || String(err));\n      }\n    });\n    return this._sock;\n  }\n\n  setupIPC() {\n    var self = this;\n    this.IPCSocket().on('listening', function() {\n      process.nextTick(function() {\n        self.emit('start');\n      });\n    });\n    this.IPCSocket().bind(\n      this.options['socket port'],\n      this.options['socket addr']\n    );\n  }\n\n  call(id, method) {\n    this.sock = this.sock || dgram.createSocket('udp4');\n    var msg = new Buffer(utils.frame({\n      args: utils.toArray(arguments, 2),\n      method: method,\n      id: id\n    }));\n    this.sock.send(\n      msg,\n      0,\n      msg.length,\n      this.options['socket port'],\n      this.options['socket addr']\n    );\n  }\n\n  invoke(method, args, worker) {\n    if (this[method]) {\n      this[method].apply(this, args.concat(worker));\n    }\n  }\n\n  connect(worker) {\n    this.emit('worker connected', worker);\n  }\n\n  connectMaster(sig) {\n    var self = this;\n    function kill() {\n      process.kill(self.ppid, sig);\n    }\n    if (this.listening) return kill();\n    this.on('listening', kill);\n  }\n\n  masterKilled(data) {\n    this.emit('restart', data);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "import * as dgram from 'dgram';\nimport { EventEmitter } from 'events';\n\nclass MasterIPC extends EventEmitter {\n  constructor(options) {\n    super();\n    this.options = options;\n    this._sock = null;\n    this.children = [];\n    this.sock = null;\n  }\n\n  IPCSocket() {\n    if (!this._sock) {\n      this._sock = dgram.createSocket('udp4');\n      this._sock.on('message', (msg, rinfo) => {\n        try {\n          const data = JSON.parse(msg.toString());\n          const worker = this.children.find(w => w.id === data.id);\n          if (worker && worker[data.method]) {\n            worker[data.method](data.args);\n          }\n        } catch (err) {\n          console.error('Error parsing message:', err);\n        }\n      });\n    }\n    return this._sock;\n  }\n\n  setupIPC() {\n    if (!this._sock) {\n      this._sock = dgram.createSocket('udp4');\n    }\n    this._sock.bind(this.options.port, this.options.address);\n    this.emit('start');\n  }\n\n  call(id, method, ...args) {\n    const message = Buffer.from(JSON.stringify({ id, method, args }));\n    this.sock = this.IPCSocket();\n    this.sock.send(message, this.options.address, this.options.port);\n  }\n\n  invoke(method, args, worker) {\n    if (worker[method]) {\n      worker[method](args);\n    }\n  }\n\n  connect(worker) {\n    this.children.push(worker);\n    this.emit('worker connected', worker);\n  }\n\n  connectMaster(sig) {\n    this.setupIPC();\n    process.kill(process.pid, sig);\n  }\n\n  masterKilled(data) {\n    this.emit('restart', data);\n  }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor(headers) {\n    this.headers = headers;\n  }\n\n  async get(url, params = {}) {\n    try {\n      const response = await axios.get(url, {\n        params,\n        headers: this.headers\n      });\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(`GET request failed: ${error.response.status} ${error.response.statusText}`);\n      } else {\n        throw new Error(\"GET request failed: Network error\");\n      }\n    }\n  }\n\n  async post(url, data = {}, params = {}) {\n    try {\n      const response = await axios.post(url, data, {\n        params,\n        headers: this.headers\n      });\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(`POST request failed: ${error.response.status} ${error.response.statusText}`);\n      } else {\n        throw new Error(\"POST request failed: Network error\");\n      }\n    }\n  }\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome DevTools Protocol, handling connection, message exchange, and disconnection events.\n\nClass Description: The Chrome class is an EventEmitter that establishes and manages a WebSocket connection to Chrome's DevTools Protocol. It handles message parsing, error handling, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The WebSocket instance\n- _notifier: [EventEmitter] - External event notifier\n- _callbacks: [Object] - Stores pending command callbacks\n- _nextCommandId: [Number] - Tracks the next command ID\n\nMethods:\n- constructor(options, notifier) -> [void] - Initializes the Chrome instance with connection options and notifier\n- _start() -> [Promise] - Internal method to initiate WebSocket connection\n- _connectToWebSocket() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleConnectionClose() -> [void] - Cleans up when connection closes\n- _handleMessage(message) -> [void] - Processes incoming WebSocket messages\n- send(method, params, sessionId, callback) -> [Promise|void] - Sends a command to Chrome DevTools Protocol\n- _enqueueCommand(method, params, sessionId, callback) -> [void] - Internal method to queue commands\n- close(callback) -> [Promise|void] - Closes the WebSocket connection cleanly",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this.webSocketUrl = undefined;\n        this._ws = null;\n        this._notifier = notifier;\n        this._start();\n    }\n\n    async _start() {\n        try {\n            await this._connectToWebSocket();\n            process.nextTick(() => {\n                this._notifier.emit('connect', this);\n            });\n        } catch (err) {\n            this._notifier.emit('error', err);\n        }\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleConnectionClose() {\n        this._callbacks = {};\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n\n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    close(callback) {\n        const closeWebSocket = (callback) => {\n            if (this._ws.readyState === 3) {\n                callback();\n            } else {\n                this._ws.removeAllListeners('close');\n                this._ws.once('close', () => {\n                    this._ws.removeAllListeners();\n                    this._handleConnectionClose();\n                    callback();\n                });\n                this._ws.close();\n            }\n        };\n        if (typeof callback === 'function') {\n            closeWebSocket(callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                closeWebSocket(fulfill);\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends require('events').EventEmitter {\n  constructor(options, notifier) {\n    super();\n    this.host = options?.host || 'localhost';\n    this.port = options?.port || 9222;\n    this.secure = options?.secure || false;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n    this.webSocketUrl = this._buildWebSocketUrl();\n    this._ws = null;\n  }\n\n  _buildWebSocketUrl() {\n    const protocol = this.secure ? 'wss' : 'ws';\n    return `${protocol}://${this.host}:${this.port}/devtools/browser`;\n  }\n\n  async _start() {\n    await this._connectToWebSocket();\n  }\n\n  async _connectToWebSocket() {\n    this._ws = new WebSocket(this.webSocketUrl);\n    this._ws.on('open', () => this._onOpen());\n    this._ws.on('message', (message) => this._handleMessage(message));\n    this._ws.on('close', () => this._handleConnectionClose());\n    this._ws.on('error', (err) => this._handleError(err));\n    return new Promise(resolve => {\n      this._ws.on('open', resolve);\n    });\n  }\n\n  _onOpen() {\n    this._notifier.emit('connected');\n  }\n\n  _handleConnectionClose() {\n    this._ws = null;\n    this._notifier.emit('disconnected');\n  }\n\n  _handleMessage(message) {\n    try {\n      const data = JSON.parse(message);\n      if (data.id) {\n        const callback = this._callbacks[data.id];\n        if (callback) {\n          delete this._callbacks[data.id];\n          callback(null, data.result);\n        }\n      } else {\n        this._notifier.emit(data.method, data.params);\n      }\n    } catch (e) {\n      console.error('Error parsing message:', e);\n    }\n  }\n\n  send(method, params, sessionId, callback) {\n    return new Promise((resolve, reject) => {\n      this._enqueueCommand(method, params, sessionId, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    this._callbacks[id] = callback;\n    const message = {\n      id,\n      method,\n      params: params || {},\n      session_id: sessionId\n    };\n    this._ws.send(JSON.stringify(message));\n  }\n\n  close(callback) {\n    return new Promise((resolve, reject) => {\n      if (this._ws) {\n        this._ws.close();\n        this._ws.on('close', () => {\n          this._notifier.emit('disconnected');\n          if (callback) {\n            callback();\n          }\n          resolve();\n        });\n      } else {\n        if (callback) {\n          callback();\n        }\n        resolve();\n      }\n    });\n  }\n\n  _handleError(err) {\n    this._notifier.emit('error', err);\n  }\n}"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Create a WebSocket client class in Node.js that manages connections, sends commands, and handles responses asynchronously.\n\nClass Description: The CustomEnvironment class provides a WebSocket client implementation that establishes and manages a connection to a WebSocket server. It handles command execution with unique IDs, callback management for responses, and connection lifecycle.\n\nAttributes:\n- callbacks: [Map] - Stores pending callbacks mapped by unique IDs for command responses\n- idSeq: [Number] - Sequence counter for generating unique command IDs\n- ws: [WebSocket] - The active WebSocket connection instance\n\nMethods:\n- initWs(): [Promise<void>] - Initializes WebSocket connection and sets up message handler. Resolves when connection is open.\n- runCommand(type: [String], data: [Any]): [Promise<Any>] - Sends a command to the server and returns a promise that resolves with response data or rejects with error\n- teardown(): [void] - Closes the WebSocket connection if it exists\n\nThe implementation should:\n1. Use the 'ws' library for WebSocket functionality\n2. Maintain connection state and automatically reconnect if needed\n3. Handle message parsing and callback execution\n4. Manage command IDs and response correlation\n5. Provide proper error handling for connection and command execution",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass CustomEnvironment {\n  constructor() {\n    this.callbacks = new Map();\n    this.idSeq = 1;\n  }\n\n  async initWs() {\n    this.ws = new WebSocket(\"ws://127.0.0.1:8080\");\n\n    await new Promise((resolve) => this.ws.on(\"open\", resolve));\n\n    this.ws.on(\"message\", (message) => {\n      const { id, data, error } = JSON.parse(message);\n      const cb = this.callbacks.get(id);\n      if (cb) {\n        this.callbacks.delete(id);\n        cb(error, data);\n      }\n    });\n  }\n\n  async runCommand(type, data) {\n    if (!this.ws) {\n      await this.initWs();\n    }\n\n    return new Promise((resolve, reject) => {\n      const id = String(this.idSeq++);\n\n      this.callbacks.set(id, (error, data) => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve(data);\n        }\n      });\n\n      this.ws.send(JSON.stringify({ id, type, data }));\n    });\n  }\n\n  async teardown() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "```javascript\nclass CustomEnvironment {\n  constructor() {\n    this.callbacks = new Map();\n    this.idSeq = 0;\n    this.ws = null;\n  }\n\n  async initWs() {\n    if (this.ws && this.ws.readyState === this.ws.OPEN) {\n      return;\n    }\n\n    while (true) {\n      try {\n        this.ws = new WebSocket('ws://example.com/socket'); // Replace with actual URL\n        this.ws.onopen = () => {\n          this.ws.onmessage = (event) => this.handleMessage(event);\n          this.ws.onerror = (err) => {\n            console.error('WebSocket error:', err);\n            setTimeout(() => this.initWs(), 5000);\n          };\n          this.ws.onclose = () => {\n            console.log('WebSocket closed, attempting to reconnect...');\n            setTimeout(() => this.initWs(), 5000);\n          };\n        };\n        return;\n      } catch (err) {\n        console.error('Failed to connect to WebSocket server:', err);\n        await new Promise(r => setTimeout(r, 5000));\n      }\n    }\n  }\n\n  async runCommand(type, data) {\n    const id = this.idSeq++;\n    const callback = (response) => {\n      if (response instanceof Error) {\n        this.callbacks.delete(id);\n        throw response;\n      }\n      this.callbacks.delete(id);\n      return response;\n    };\n\n    this.callbacks.set(id, callback);\n\n    const message = { type, data, id };\n    this.ws.send(JSON.stringify(message));\n\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        this.callbacks.delete(id);\n        reject(new Error('Timeout waiting for response'));\n      }, 5000);\n\n      const cb = (response) => {\n        clearTimeout(timeout);\n        if (response instanceof Error) {\n          reject(response);\n        } else {\n          resolve(response);\n        }\n      };\n\n      this.callbacks.set(id, cb);\n    });\n  }\n\n  teardown() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n\n  handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      if (data.type === 'response') {\n        const id = data.id;\n        const callback = this.callbacks.get(id);\n        if (callback) {\n          callback(data.data);\n          this.callbacks.delete(id);\n        }\n      } else if (data.type === 'error') {\n        const id = data.id;\n        const callback = this.callbacks.get(id);\n        if (callback) {\n          callback(new Error(data.message));\n          this.callbacks.delete(id);\n        }\n      }\n    } catch (err) {\n      console.error('Error parsing message:', err);\n    }\n  }\n}\n```"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that connects to a speech synthesis service, sends SSML requests, and handles the audio response streams.\n\nClass Description: WebSocketClient is a class that manages WebSocket connections to Microsoft's Bing Speech API for text-to-speech synthesis. It handles connection lifecycle, request/response mapping, and binary audio data streaming.\n\nAttributes:\n- ws: [WebSocket|null] - Active WebSocket connection instance\n- executorMap: [Map] - Stores promise resolvers/rejectors mapped by request IDs\n- bufferMap: [Map] - Accumulates binary audio data chunks mapped by request IDs\n- timer: [Timeout|null] - Connection timeout handler\n\nMethods:\n- connect() -> [Promise<WebSocket>] - Establishes WebSocket connection with proper headers and returns a promise that resolves when connected\n- sendRequest(ssml: [String], format: [String]) -> [Promise<Buffer>] - Sends SSML request with specified audio format and returns promise resolving to audio buffer\n\nInput:\n- For connect(): None\n- For sendRequest():\n  - ssml: [String] - SSML markup for speech synthesis\n  - format: [String] - Desired audio output format (e.g., \"audio-24khz-48kbitrate-mono-mp3\")\n\nOutput:\n- For connect(): Resolves with WebSocket instance or rejects with error\n- For sendRequest(): Resolves with audio buffer or rejects with error",
    "Canonical_solution": "const { WebSocket } = require(\"ws\");\nconst { randomBytes } = require(\"crypto\");\n\nclass WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.executorMap = new Map();\n    this.bufferMap = new Map();\n    this.timer = null;\n  }\n\n  async connect() {\n    const connectionId = randomBytes(16).toString(\"hex\").toLowerCase();\n    let url = `wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4&ConnectionId=${connectionId}`;\n    let ws = new WebSocket(url, {\n      host: \"speech.platform.bing.com\",\n      origin: \"chrome-extension://jdiccldimpdaibmpdkjnbmckianbfold\",\n      headers: {\n        \"User-Agent\":\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44\",\n      },\n    });\n    \n    return new Promise((resolve, reject) => {\n      ws.on(\"open\", () => {\n        resolve(ws);\n      });\n      \n      ws.on(\"close\", (code, reason) => {\n        this.ws = null;\n        if (this.timer) {\n          clearTimeout(this.timer);\n          this.timer = null;\n        }\n        for (let [key, value] of this.executorMap) {\n          value.reject(`\u8fde\u63a5\u5df2\u5173\u95ed: ${reason} ${code}`);\n        }\n        this.executorMap.clear();\n        this.bufferMap.clear();\n      });\n\n      ws.on(\"message\", (message, isBinary) => {\n        let pattern = /X-RequestId:(?<id>[a-z|0-9]*)/;\n        if (!isBinary) {\n          let data = message.toString();\n          if (data.includes(\"Path:turn.start\")) {\n            let matches = data.match(pattern);\n            let requestId = matches.groups.id;\n            this.bufferMap.set(requestId, Buffer.from([]));\n          } else if (data.includes(\"Path:turn.end\")) {\n            let matches = data.match(pattern);\n            let requestId = matches.groups.id;\n            let executor = this.executorMap.get(requestId);\n            if (executor) {\n              this.executorMap.delete(matches.groups.id);\n              let result = this.bufferMap.get(requestId);\n              executor.resolve(result);\n            }\n          }\n        } else if (isBinary) {\n          let separator = \"Path:audio\\r\\n\";\n          let data = message;\n          let contentIndex = data.indexOf(separator) + separator.length;\n          let headers = data.slice(2, contentIndex).toString();\n          let matches = headers.match(pattern);\n          let requestId = matches.groups.id;\n          let content = data.slice(contentIndex);\n          let buffer = this.bufferMap.get(requestId);\n          if (buffer) {\n            buffer = Buffer.concat([buffer, content], buffer.length+content.length);\n            this.bufferMap.set(requestId, buffer);\n          }\n        }\n      });\n      \n      ws.on(\"error\", (error) => {\n        reject(`\u8fde\u63a5\u5931\u8d25\uff1a ${error}`);\n      });\n    });\n  }\n\n  async sendRequest(ssml, format) {\n    if (this.ws == null || this.ws.readyState != WebSocket.OPEN) {\n      let connection = await this.connect();\n      this.ws = connection;\n    }\n    \n    const requestId = randomBytes(16).toString(\"hex\").toLowerCase();\n    let result = new Promise((resolve, reject) => {\n      this.executorMap.set(requestId, { resolve, reject });\n      \n      let configData = {\n        context: {\n          synthesis: {\n            audio: {\n              metadataoptions: {\n                sentenceBoundaryEnabled: \"false\",\n                wordBoundaryEnabled: \"false\",\n              },\n              outputFormat: format,\n            },\n          },\n        },\n      };\n      \n      let configMessage =\n        `X-Timestamp:${Date()}\\r\\n` +\n        \"Content-Type:application/json; charset=utf-8\\r\\n\" +\n        \"Path:speech.config\\r\\n\\r\\n\" +\n        JSON.stringify(configData);\n        \n      this.ws.send(configMessage, (configError) => {\n        if (configError) return;\n        \n        let ssmlMessage =\n          `X-Timestamp:${Date()}\\r\\n` +\n          `X-RequestId:${requestId}\\r\\n` +\n          `Content-Type:application/ssml+xml\\r\\n` +\n          `Path:ssml\\r\\n\\r\\n` +\n          ssml;\n        this.ws.send(ssmlMessage);\n      });\n    });\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    \n    this.timer = setTimeout(() => {\n      if (this.ws && this.ws.readyState == WebSocket.OPEN) {\n        this.ws.close(1000);\n        this.timer = null;\n      }\n    }, 10000);\n\n    return await Promise.race([\n      result,\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.executorMap.delete(requestId);\n          this.bufferMap.delete(requestId);\n          reject(\"\u8bf7\u6c42\u8d85\u65f6\");\n        }, 10000);\n      }),\n    ]);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.executorMap = new Map();\n    this.bufferMap = new Map();\n    this.timer = null;\n  }\n\n  async connect() {\n    const url = 'wss://api.cognitive.microsoft.com/speech/synthesis/v1.0/recognize?language=en-US';\n    this.ws = new WebSocket(url, { headers: this.getHeaders() });\n    this.ws.on('open', () => {\n      this.timer = setTimeout(() => {\n        this.ws.close();\n        throw new Error('Connection timeout');\n      }, 10000);\n    });\n    this.ws.on('error', (err) => {\n      throw err;\n    });\n    this.ws.on('close', (event) => {\n      if (event.code !== 1000) {\n        throw new Error('WebSocket closed unexpectedly');\n      }\n    });\n    return new Promise((resolve) => {\n      this.ws.on('open', () => resolve(this.ws));\n    });\n  }\n\n  getHeaders() {\n    return {\n      'Authorization': 'Bearer ' + this.getToken(),\n      'Content-Type': 'application/ssml+xml'\n    };\n  }\n\n  getToken() {\n    return 'your-subscription-key';\n  }\n\n  async sendRequest(ssml, format) {\n    const requestId = Date.now().toString();\n    const promise = new Promise((resolve, reject) => {\n      this.executorMap.set(requestId, { resolve, reject });\n    });\n    this.bufferMap.set(requestId, []);\n    const payload = { ssml, format };\n    this.ws.send(JSON.stringify(payload));\n    this.ws.on('message', (message) => {\n      if (message instanceof Buffer) {\n        const buffer = this.bufferMap.get(requestId);\n        buffer.push(message);\n      }\n    });\n    this.ws.on('close', () => {\n      const buffer = this.bufferMap.get(requestId);\n      const audioBuffer = Buffer.concat(buffer);\n      this.executorMap.get(requestId).resolve(audioBuffer);\n      this.executorMap.delete(requestId);\n      this.bufferMap.delete(requestId);\n    });\n    return promise;\n  }\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a WebSocket-based OrderBook class for managing real-time order book data from a cryptocurrency exchange, with connection management and state handling capabilities.\n\nClass Description: The OrderBook class maintains a real-time order book for a specified trading pair by connecting to a WebSocket feed. It handles connection states, processes incoming messages, and provides event-driven updates. The class inherits from EventEmitter to notify consumers of state changes and order book updates.\n\nAttributes:\n- productID: string - The trading pair identifier (e.g., 'BTC-USD')\n- websocketURI: string - The WebSocket endpoint URL for real-time data\n- restURI: string - The REST API endpoint URL for initial snapshot\n- state: string - Current connection/processing state (from STATES enum)\n- fail_count: number - Count of consecutive connection failures\n- timeProvider: any - Service for timestamp generation\n- socket: WebSocket - The active WebSocket connection instance\n- queue: Array - Buffer for messages received during synchronization\n- book: object - The current order book state with sequence, bids, and asks\n\nMethods:\n- constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) -> OrderBook - Initializes the order book with configuration and starts connection\n- clear_book() -> void - Resets the order book and message queue\n- connect() -> void - Establishes new WebSocket connection with event handlers\n- disconnect() -> void - Closes active WebSocket connection\n- changeState(stateName: string) -> void - Updates state machine and handles transitions (emits statechange event)\n- onOpen() -> void - Handles WebSocket open event (starts synchronization)\n- onClose() -> void - Handles WebSocket close event (updates state)\n- onMessage(datastr: string) -> void - Processes incoming WebSocket messages\n- sync() -> void - Sends subscription message and loads initial snapshot\n- processMessage(message: object, t: Date) -> void - Validates and processes order book updates (emits message-type events)",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nclass OrderBook {\n    constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) {\n        var self = this;\n        EventEmitter.call(self);\n\n        self.productID = productID || 'BTC-USD';\n        self.websocketURI = websocketURI || 'wss://ws-feed.exchange.coinbase.com';\n        self.restURI = restURI;\n        self.state = self.STATES.closed;\n        self.fail_count = 0;\n        self.timeProvider = timeProvider;\n        self.connect();\n    }\n\n    STATES = {\n        'closed': 'closed',\n        'open': 'open',\n        'syncing': 'syncing',\n        'processing': 'processing',\n        'error': 'error',\n    };\n\n    clear_book() {\n        var self = this;\n        self.queue = [];\n        self.book = {\n            'sequence': -1,\n            'bids': {},\n            'asks': {},\n        };\n    };\n\n    connect() {\n        var self = this;\n        if (self.socket) {\n            self.socket.close();\n        }\n        self.clear_book();\n        self.socket = new WebSocket(self.websocketURI);\n        self.socket.on('message', self.onMessage.bind(self));\n        self.socket.on('open', self.onOpen.bind(self));\n        self.socket.on('close', self.onClose.bind(self));\n    };\n\n    disconnect() {\n        var self = this;\n        if (!self.socket) {\n            throw \"Could not disconnect (not connected)\"\n        }\n        self.socket.close();\n        self.onClose();\n    };\n\n    changeState(stateName) {\n        var self = this;\n        var newState = self.STATES[stateName];\n        if (newState === undefined) {\n            throw \"Unrecognized state: \" + stateName;\n        }\n        var oldState = self.state;\n        self.state = newState;\n\n        if (self.fail_count > 3)\n            throw \"Tried to reconnect 4 times. Giving up.\";\n\n        if (self.state === self.STATES.error || self.state === self.STATES.closed) {\n            self.fail_count += 1;\n            self.socket.close();\n            setTimeout(() => self.connect(), 5000);\n        }\n        else if (self.state === self.STATES.processing) {\n            self.fail_count = 0;\n        }\n\n        self.emit('statechange', { 'old': oldState, 'new': newState });\n    };\n\n    onOpen() {\n        var self = this;\n        self.changeState(self.STATES.open);\n        self.sync();\n    };\n\n    onClose() {\n        var self = this;\n        self.changeState(self.STATES.closed);\n    };\n\n    onMessage(datastr: string) {\n        var self = this;\n        var t = self.timeProvider.utcNow();\n        var data = JSON.parse(datastr);\n        if (self.state !== self.STATES.processing) {\n            self.queue.push(data);\n        } else {\n            self.processMessage(data, t);\n        }\n    };\n\n    sync() {\n        var self = this;\n        self.changeState(self.STATES.syncing);\n        var subscribeMessage = {\n            'type': 'subscribe',\n            'product_id': self.productID,\n        };\n        self.socket.send(JSON.stringify(subscribeMessage));\n        self.loadSnapshot();\n    };\n\n    processMessage(message, t: Date) {\n        var self = this;\n        if (message.sequence <= self.book.sequence) {\n            self.emit('ignored', message);\n            return;\n        }\n        if (message.sequence != self.book.sequence + 1) {\n            self.changeState(self.STATES.error);\n        }\n        self.book.sequence = message.sequence;\n\n        self.emit(message.type, new Models.Timestamped(message, t));\n    };\n}\n\nutil.inherits(OrderBook, EventEmitter);",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class OrderBook extends require('events').EventEmitter {\n  constructor(productID, websocketURI, restURI, timeProvider) {\n    super();\n    this.productID = productID;\n    this.websocketURI = websocketURI;\n    this.restURI = restURI;\n    this.state = 'disconnected';\n    this.fail_count = 0;\n    this.timeProvider = timeProvider;\n    this.socket = null;\n    this.queue = [];\n    this.book = { sequence: 0, bids: [], asks: [] };\n    this.connect();\n  }\n\n  clear_book() {\n    this.book = { sequence: 0, bids: [], asks: [] };\n    this.queue = [];\n  }\n\n  connect() {\n    this.socket = new WebSocket(this.websocketURI);\n    this.socket.onopen = () => this.onOpen();\n    this.socket.onclose = () => this.onClose();\n    this.socket.onmessage = (event) => this.onMessage(event.data);\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.changeState('disconnected');\n    }\n  }\n\n  changeState(stateName) {\n    if (this.state !== stateName) {\n      this.state = stateName;\n      this.emit('statechange', this.state);\n    }\n  }\n\n  onOpen() {\n    this.changeState('connecting');\n    this.processQueue();\n    this.sync();\n  }\n\n  onClose() {\n    this.changeState('disconnected');\n    this.fail_count++;\n  }\n\n  onMessage(datastr) {\n    try {\n      const data = JSON.parse(datastr);\n      if (this.socket.readyState === WebSocket.OPEN) {\n        this.processMessage(data, this.timeProvider.now());\n      } else {\n        this.queue.push(data);\n      }\n    } catch (e) {\n      console.error('Invalid message:', e);\n    }\n  }\n\n  processQueue() {\n    while (this.queue.length > 0) {\n      const message = this.queue.shift();\n      this.processMessage(message, this.timeProvider.now());\n    }\n  }\n\n  sync() {\n    this.socket.send(JSON.stringify({ type: 'subscribe', productID: this.productID }));\n    fetch(this.restURI)\n      .then(response => response.json())\n      .then(data => {\n        this.processMessage(data, this.timeProvider.now());\n      })\n      .catch(error => {\n        console.error('Error fetching snapshot:', error);\n        this.changeState('failed');\n      });\n  }\n\n  processMessage(message, t) {\n    if (message.type === 'snapshot') {\n      this.book = message.data;\n      this.emit('message-type', 'snapshot');\n    } else if (message.type === 'update') {\n      this.book.sequence = message.sequence;\n      this.book.bids = message.bids;\n      this.book.asks = message.asks;\n      this.emit('message-type', 'update');\n    }\n  }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._onMessage.bind(this);\n    ws.addEventListener('message', this._messageListener);\n  }\n\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.close();\n    }\n  }\n\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    if (this._ws && this._ws.removeEventListener) {\n      this._ws.removeEventListener('message', this._messageListener);\n    }\n  }\n\n  _onMessage(event) {\n    if (this._handler) {\n      this._handler.onMessage(event.data);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._frontend = frontend;\n    this._connected = new Set();\n    this._pipe = 'path/to/named/pipe';\n    this._disconnectPromise = new Promise((resolve) => {\n      this._onDisconnect = () => resolve();\n    });\n  }\n\n  _startSession(info, frontend) {\n    return new Promise((resolve) => {\n      const ws = new WebSocket(info.inspectorUrl);\n      const channel = new Channel(ws);\n      \n      channel.listen({\n        onMessage: (message) => {\n          this._frontend.onMessage(message);\n        }\n      });\n\n      ws.addEventListener('close', () => {\n        this._connected.delete(info.id);\n        this._frontend.onSessionClosed(info.id);\n      });\n\n      ws.addEventListener('error', (err) => {\n        this._frontend.onError(info.id, err);\n      });\n\n      const cleanup = () => {\n        channel.dispose();\n        ws.close();\n      };\n\n      this._connected.add(info.id);\n      this._frontend.onSessionStarted(info.id);\n\n      resolve(cleanup);\n    });\n  }\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome's DevTools Protocol, handling connection, message exchange, and event emission.\n\nClass Description: The Chrome class extends EventEmitter to create a WebSocket client that connects to Chrome's DevTools Protocol. It manages WebSocket connections, handles message parsing, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- _notifier: [Object] - External notification handler\n- _callbacks: [Object] - Map of pending command callbacks\n- _nextCommandId: [Number] - Counter for generating command IDs\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The active WebSocket connection instance\n\nMethods:\n- constructor: [constructor](options: Object, notifier: Object) -> [Chrome] - Initializes the Chrome instance with connection options and notifier\n- _connectToWebSocket: [_connectToWebSocket]() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleMessage: [_handleMessage](message: Object) -> [void] - Processes incoming WebSocket messages (responses and events)\n- _enqueueCommand: [_enqueueCommand](method: String, params: Object, sessionId: String, callback: Function) -> [void] - Sends a command through WebSocket and tracks its callback\n- send: [send](method: String, ...args: Any) -> [Promise|undefined] - Public method to send commands, supporting both callback and Promise patterns",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this._notifier = notifier;\n        this._callbacks = {};\n        this._nextCommandId = 1;\n        this.webSocketUrl = undefined;\n        this._start();\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n        \n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends require('events').EventEmitter {\n  constructor(options = {}, notifier = {}) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n    this.webSocketUrl = this.secure ? `wss://${this.host}:${this.port}` : `ws://${this.host}:${this.port}`;\n    this._ws = null;\n  }\n\n  async _connectToWebSocket() {\n    this._ws = new WebSocket(this.webSocketUrl);\n    this._ws.onopen = () => {\n      this.emit('connected');\n    };\n    this._ws.onmessage = (event) => this._handleMessage(event.data);\n    this._ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.emit('error', error);\n    };\n    this._ws.onclose = () => {\n      this.emit('closed');\n    };\n    return new Promise((resolve) => {\n      this._ws.onopen = () => resolve();\n    });\n  }\n\n  _handleMessage(message) {\n    try {\n      const data = JSON.parse(message);\n      if (data.id) {\n        const callback = this._callbacks[data.id];\n        if (callback) {\n          delete this._callbacks[data.id];\n          callback(data.result);\n        }\n      } else {\n        this.emit(data.method, data.params);\n        if (this._notifier) this._notifier(data);\n      }\n    } catch (e) {\n      console.error('Message parsing error:', e);\n    }\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    this._callbacks[id] = callback;\n    const payload = {\n      id,\n      method,\n      params: params || {},\n      session: sessionId || 'default'\n    };\n    this._ws.send(JSON.stringify(payload));\n  }\n\n  send(method, ...args) {\n    const callback = args.pop();\n    if (callback) {\n      this._enqueueCommand(method, args, undefined, callback);\n      return undefined;\n    } else {\n      return new Promise((resolve, reject) => {\n        this._enqueueCommand(method, args, undefined, (result) => {\n          if (result.error) reject(result.error);\n          else resolve(result.result);\n        });\n      });\n    }\n  }\n}"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that handles WebSocket connections, message transmission, and connection lifecycle events.\n\nClass Description: WebSocketImpl is a WebSocket client implementation that manages WebSocket connections, including establishing connections, handling incoming messages, managing connection states, and sending messages. It wraps the 'ws' library functionality with additional state management and event handling.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document associated with the WebSocket\n- _urlRecord: [Object|null] - URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL\n- extensions: [String] - Supported WebSocket extensions\n- binaryType: [String] - Type of binary data handling (\"blob\" or \"arraybuffer\")\n- _ws: [Object|null] - The underlying WebSocket instance\n- _readyState: [Number] - Current connection state (0=CONNECTING, 1=OPEN, 2=CLOSING, 3=CLOSED)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Number of bytes of queued data\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n- _dequeueScheduled: [Boolean] - Flag for send queue scheduling\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket client with configuration and establishes connection\n- _onConnectionEstablished() -> [void] - Handles successful connection establishment\n- _onMessageReceived(data, isBinary) -> [void] - Processes incoming WebSocket messages\n- _onConnectionClosed(code, reason) -> [void] - Handles connection closure\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Queues data for sending through the WebSocket\n- _actuallySend() -> [void] - Internal method that sends queued messages\n- _scheduleSend() -> [void] - Schedules message sending on the next event loop tick",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.document;\n    this._urlRecord = null;\n    this.url = \"\";\n    this.extensions = \"\";\n    this.binaryType = \"blob\";\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const url = args[0];\n    let protocols = args[1] !== undefined ? args[1] : [];\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    if (this._ws.extensions !== null) {\n      this.extensions = Object.keys(this._ws.extensions).join(\", \");\n    }\n    // fire open event\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    // process message data and fire message event\n  }\n\n  _onConnectionClosed(code, reason) {\n    // fire close event\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this.readyState === 0) { // CONNECTING\n      this._requiredToFail = true;\n      if (this._ws !== null) {\n        this._ws.terminate();\n      } else {\n        this._readyState = 2; // CLOSING\n      }\n    } else if (this.readyState === 1) { // OPEN\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this.readyState === 0) { // CONNECTING\n      throw new Error(\"Still in CONNECTING state.\");\n    }\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    let length;\n    if (typeof data === \"string\") {\n      length = Buffer.byteLength(data, \"utf8\");\n    } else {\n      length = data.byteLength;\n    }\n    this.bufferedAmount += length;\n    this._sendQueue.push([data, length]);\n    this._scheduleSend();\n  }\n\n  _actuallySend() {\n    for (const [data, length] of this._sendQueue.splice(0)) {\n      this._ws.send(data, { binary: typeof data !== \"string\" }, () => {\n        this.bufferedAmount -= length;\n      });\n    }\n  }\n\n  _scheduleSend() {\n    if (this._dequeueScheduled) {\n      return;\n    }\n    this._dequeueScheduled = true;\n    process.nextTick(() => {\n      this._dequeueScheduled = false;\n      this._actuallySend();\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n    this._urlRecord = privateData.urlRecord;\n    this.url = args.url;\n    this.extensions = args.extensions || '';\n    this.binaryType = args.binaryType || 'arraybuffer';\n    this._ws = new WebSocket(this.url, this.extensions);\n    this._readyState = 0;\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n    this._dequeueScheduled = false;\n\n    this._ws.on('open', () => this._onConnectionEstablished());\n    this._ws.on('message', (data, isBinary) => this._onMessageReceived(data, isBinary));\n    this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n    this._ws.on('error', (err) => {\n      if (!this._requiredToFail) {\n        console.error('WebSocket error:', err);\n      }\n    });\n  }\n\n  _onConnectionEstablished() {\n    this._readyState = 1;\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (isBinary) {\n      this._onMessageReceivedAsBinary(data);\n    } else {\n      this._onMessageReceivedAsString(data);\n    }\n  }\n\n  _onMessageReceivedAsString(data) {\n    // Handle text message\n  }\n\n  _onMessageReceivedAsBinary(data) {\n    // Handle binary message\n  }\n\n  _onConnectionClosed(code, reason) {\n    this._readyState = 3;\n  }\n\n  close(code, reason) {\n    if (this._readyState === 1) {\n      this._ws.close(code, reason);\n      this._readyState = 2;\n    }\n  }\n\n  send(data) {\n    if (this._readyState === 1) {\n      this._sendQueue.push(data);\n      if (!this._dequeueScheduled) {\n        this._scheduleSend();\n      }\n    }\n  }\n\n  _actuallySend() {\n    while (this._sendQueue.length > 0) {\n      const message = this._sendQueue.shift();\n      this._ws.send(message);\n      this.bufferedAmount -= message.byteLength;\n    }\n    this._dequeueScheduled = false;\n  }\n\n  _scheduleSend() {\n    this._dequeueScheduled = true;\n    process.nextTick(() => this._actuallySend());\n  }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a JavaScript class for interacting with the Cryptsy cryptocurrency exchange API, handling both public and private endpoints with proper authentication and request management.\n\nClass Description: The Cryptsy class provides a wrapper for the Cryptsy API, enabling users to make authenticated requests to private endpoints and public data requests. It handles API authentication, request signing, and response processing.\n\nAttributes:\n- key: string - API key for authentication\n- secret: string - API secret for request signing\n- PUBLIC_API_URL: string - Base URL for public API endpoints (default: 'http://pubapi.cryptsy.com/api.php')\n- PRIVATE_API_URL: string - Base URL for private API endpoints (default: 'https://api.cryptsy.com/api')\n- USER_AGENT: string - User agent string for requests (default: 'nomp/node-open-mining-portal')\n- STRICT_SSL: boolean - Static flag for SSL verification (default: true)\n\nMethods:\n- constructor(key, secret) -> Cryptsy - Initializes the API client with credentials\n- _getPrivateHeaders(parameters: object) -> object - Generates authentication headers for private requests\n- _request(options: object, callback: function) -> Cryptsy - Base request method with common configuration\n- _public(parameters: object, callback: function) -> Cryptsy - Makes public API requests\n- _private(parameters: object, callback: function) -> Cryptsy - Makes authenticated private API requests\n- getTicker(callback: function) -> Cryptsy - Gets market ticker data\n- getOrderBook(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets order book for a currency pair\n- getTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets public trade history\n- myBalances(callback: function) -> Cryptsy - Gets user's account balances\n- myOpenOrders(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's open orders\n- myTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's trade history\n- buy(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a buy order\n- sell(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a sell order\n- cancelOrder(currencyA: string, currencyB: string, orderNumber: string, callback: function) -> Cryptsy - Cancels an order\n- withdraw(currency: string, amount: number, address: string, callback: function) -> Cryptsy - Withdraws funds\n- _joinCurrencies(currencyA: string, currencyB: string) -> string - Helper to format currency pairs",
    "Canonical_solution": "var request = require('request');\nvar nonce = require('nonce');\nvar crypto = require('crypto');\n\nclass Cryptsy {\n    constructor(key, secret) {\n        this.key = key;\n        this.secret = secret;\n        this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n        this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n        this.USER_AGENT = 'nomp/node-open-mining-portal';\n    }\n\n    static STRICT_SSL = true;\n\n    _getPrivateHeaders(parameters) {\n        if (!this.key || !this.secret) {\n            throw 'Cryptsy: Error. API key and secret required';\n        }\n\n        let paramString = Object.keys(parameters).sort().map(function(param) {\n            return encodeURIComponent(param) + '=' + encodeURIComponent(parameters[param]);\n        }).join('&');\n\n        let signature = crypto.createHmac('sha512', this.secret).update(paramString).digest('hex');\n\n        return {\n            Key: this.key,\n            Sign: signature\n        };\n    }\n\n    _request(options, callback) {\n        if (!('headers' in options)) {\n            options.headers = {};\n        }\n\n        options.headers['User-Agent'] = this.USER_AGENT;\n        options.json = true;\n        options.strictSSL = Cryptsy.STRICT_SSL;\n\n        request(options, function(err, response, body) {\n            callback(err, body);\n        });\n\n        return this;\n    }\n\n    _public(parameters, callback) {\n        let options = {\n            method: 'GET',\n            url: this.PUBLIC_API_URL,\n            qs: parameters\n        };\n\n        return this._request(options, callback);\n    }\n\n    _private(parameters, callback) {\n        parameters.nonce = nonce();\n        let options = {\n            method: 'POST',\n            url: this.PRIVATE_API_URL,\n            form: parameters,\n            headers: this._getPrivateHeaders(parameters)\n        };\n\n        return this._request(options, callback);\n    }\n\n    getTicker(callback) {\n        let parameters = {\n            method: 'marketdatav2'\n        };\n        return this._public(parameters, callback);\n    }\n\n    getOrderBook(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOrderBook',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    getTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    myBalances(callback) {\n        let parameters = {\n            command: 'returnBalances'\n        };\n        return this._private(parameters, callback);\n    }\n\n    myOpenOrders(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOpenOrders',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    myTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    buy(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'buy',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    sell(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'sell',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    cancelOrder(currencyA, currencyB, orderNumber, callback) {\n        let parameters = {\n            command: 'cancelOrder',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            orderNumber: orderNumber\n        };\n        return this._private(parameters, callback);\n    }\n\n    withdraw(currency, amount, address, callback) {\n        let parameters = {\n            command: 'withdraw',\n            currency: currency,\n            amount: amount,\n            address: address\n        };\n        return this._private(parameters, callback);\n    }\n\n    _joinCurrencies(currencyA, currencyB) {\n        return currencyA + '_' + currencyB;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Cryptsy {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n    this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n    this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n    this.USER_AGENT = 'nomp/node-open-mining-portal';\n    this.STRICT_SSL = true;\n  }\n\n  _getPrivateHeaders(parameters) {\n    const sortedParams = Object.keys(parameters).sort().reduce((acc, key) => {\n      acc[key] = parameters[key];\n      return acc;\n    }, {});\n    \n    const queryString = Object.entries(sortedParams)\n      .map(([k, v]) => `${k}=${v}`)\n      .join('&');\n    \n    const hmac = crypto.createHmac('sha512', this.secret);\n    const signature = hmac.update(queryString).digest('hex');\n    \n    return {\n      'Key': this.key,\n      'Signature': signature,\n      'User-Agent': this.USER_AGENT\n    };\n  }\n\n  _request(options, callback) {\n    const { url, method, headers, body } = options;\n    const reqOptions = {\n      hostname: new URL(url).hostname,\n      path: new URL(url).pathname + (url.includes('?') ? url.split('?')[1] : ''),\n      method: method || 'GET',\n      headers: headers || {}\n    };\n\n    if (this.STRICT_SSL) {\n      reqOptions.rejectUnauthorized = true;\n    } else {\n      reqOptions.rejectUnauthorized = false;\n    }\n\n    const req = https.request(reqOptions, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const parsed = JSON.parse(data);\n          callback(null, parsed);\n        } catch (e) {\n          callback(e, null);\n        }\n      });\n    });\n\n    if (method === 'POST') {\n      req.write(body);\n    }\n    req.end();\n  }\n\n  _public(parameters, callback) {\n    const queryString = new URLSearchParams(parameters).toString();\n    const fullUrl = this.PUBLIC_API_URL + (queryString ? '?' + queryString : '');\n    const options = {\n      url: fullUrl,\n      method: 'GET',\n      headers: {\n        'User-Agent': this.USER_AGENT\n      }\n    };\n    this._request(options, callback);\n  }\n\n  _private(parameters, callback) {\n    const headers = this._getPrivateHeaders(parameters);\n    const body = new URLSearchParams(parameters).toString();\n    const options = {\n      url: this.PRIVATE_API_URL,\n      method: 'POST',\n      headers: headers,\n      body: body\n    };\n    this._request(options, callback);\n  }\n\n  getTicker(callback) {\n    this._public({ method: 'getticker' }, callback);\n  }\n\n  getOrderBook(currencyA, currencyB, callback) {\n    this._public({ method: 'getorderbook', currencyA, currencyB }, callback);\n  }\n\n  getTradeHistory(currencyA, currencyB, callback) {\n    this._public({ method: 'gettradehistory', currencyA, currencyB }, callback);\n  }\n\n  myBalances(callback) {\n    this._private({ method: 'getmybalances' }, callback);\n  }\n\n  myOpenOrders(currencyA, currencyB, callback) {\n    this._private({ method: 'getmyopenorders', currencyA, currencyB }, callback);\n  }\n\n  myTradeHistory(currencyA, currencyB, callback) {\n    this._private({ method: 'getmytrades', currencyA, currencyB }, callback);\n  }\n\n  buy(currencyA, currencyB, rate, amount, callback) {\n    this._private({\n      method: 'buy',\n      currencyA,\n      currencyB,\n      rate,\n      amount\n    }, callback);\n  }\n\n  sell(currencyA, currencyB, rate, amount, callback) {\n    this._private({\n      method: 'sell',\n      currencyA,\n      currencyB,\n      rate,\n      amount\n    }, callback);\n  }\n\n  cancelOrder(currencyA, currencyB, orderNumber, callback) {\n    this._private({\n      method: 'cancelorder',\n      currencyA,\n      currencyB,\n      orderNumber\n    }, callback);\n  }\n\n  withdraw(currency, amount, address, callback) {\n    this._private({\n      method: 'withdraw',\n      currency,\n      amount,\n      address\n    }, callback);\n  }\n\n  _joinCurrencies(currencyA, currencyB) {\n    return `${currencyA}${currencyB}`;\n  }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst path = require('path');\nconst fs = require('fs').promises;\nconst extractZip = require('extract-zip');\n\nclass Binary {\n  constructor(url, data) {\n    this.url = url;\n    this.name = data?.name ?? '-1';\n    this.installDirectory = data?.installDirectory ?? path.join(process.cwd(), 'bin');\n    this.binaryDirectory = '-1';\n    this.binaryPath = '-1';\n  }\n\n  _getInstallDirectory() {\n    const dir = this.installDirectory;\n    if (this.name !== '-1') {\n      return path.join(dir, this.name);\n    }\n    return dir;\n  }\n\n  async install() {\n    try {\n      await fs.mkdir(this._getInstallDirectory(), { recursive: true });\n      const response = await fetch(this.url);\n      if (!response.ok) throw new Error(`Download failed: ${response.status}`);\n      const buffer = await response.arrayBuffer();\n      const filePath = path.join(this._getInstallDirectory(), 'binary.zip');\n      await fs.writeFile(filePath, Buffer.from(buffer));\n      await extractZip(filePath, { dir: this._getInstallDirectory() });\n      this.binaryDirectory = this._getInstallDirectory();\n      this.binaryPath = path.join(this.binaryDirectory, 'extracted-binary');\n      return true;\n    } catch (error) {\n      console.error('Error during installation:', error.message);\n      throw error;\n    }\n  }\n}\n```"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n  const url = 'wss://' + wssUrl;\n  const ws = new WebSocket(url);\n\n  ws.onopen = () => {\n    console.log('WebSocket connection opened');\n    ws.send(JSON.stringify({ type: 'connect', data: 'Initial message' }));\n  };\n\n  ws.onerror = (event) => {\n    console.error('WebSocket error:', event);\n  };\n\n  ws.onclose = (event) => {\n    console.log('WebSocket connection closed', event);\n  };\n\n  ws.onmessage = (event) => {\n    try {\n      const data = JSON.parse(event.data);\n      console.log('Received message:', data);\n    } catch (e) {\n      console.error('Error parsing JSON message:', e);\n    }\n  };\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript using Node.js that establishes a connection to a WebSocket server, handles incoming messages, and manages connection events.\n\nClass Description: The WebSocketImpl class provides a wrapper around the Node.js 'ws' library to create and manage WebSocket connections. It handles connection establishment, message reception, error handling, and connection closure events. The class also provides methods for sending data and closing the connection.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document object associated with the WebSocket\n- _urlRecord: [Object] - Parsed URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL as a string\n- _ws: [WebSocket|null] - The underlying WebSocket instance or null if not connected\n- _readyState: [Number] - Current connection state (0 = CONNECTING)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Amount of buffered data in bytes\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket connection with the given parameters and sets up event handlers\n- _onConnectionEstablished() -> [void] - Internal method called when the WebSocket connection is successfully established\n- _onMessageReceived(data, isBinary) -> [void] - Internal method called when a message is received from the server\n- _onConnectionClosed(code, reason) -> [void] - Internal method called when the WebSocket connection is closed\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Sends data through the WebSocket connection (supports strings and Blob objects)\n- get readyState() -> [Number] - Returns the current ready state of the WebSocket connection",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = idlUtils.implForWrapper(globalObject._document);\n    this._urlRecord = parseURL(args[0]);\n    this.url = serializeURL(this._urlRecord);\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const protocols = typeof args[1] === \"string\" ? [args[1]] : (args[1] || []);\n    const nodeParsedURL = nodeURL.parse(this.url);\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    fireAnEvent(\"open\", this);\n  }\n\n  _onMessageReceived(data, isBinary) {\n    let dataForEvent;\n    if (!isBinary) {\n      dataForEvent = data.toString();\n    } else if (this.binaryType === \"arraybuffer\") {\n      dataForEvent = copyToArrayBufferInNewRealm(data, this._globalObject);\n    } else {\n      dataForEvent = Blob.create(this._globalObject, [[data], { type: \"\" }]);\n    }\n    fireAnEvent(\"message\", this, MessageEvent, {\n      data: dataForEvent,\n      origin: serializeURLOrigin(this._urlRecord)\n    });\n  }\n\n  _onConnectionClosed(code, reason) {\n    fireAnEvent(\"close\", this, CloseEvent, {\n      wasClean: !this._requiredToFail,\n      code,\n      reason: reason.toString()\n    });\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this._ws) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n      if (Blob.isImpl(data)) {\n        data = data._buffer;\n      }\n      this._ws.send(data, { binary: typeof data !== \"string\" });\n    }\n  }\n\n  get readyState() {\n    return this._ws ? this._ws.readyState : this._readyState;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument || {};\n    this._urlRecord = this.parseURL(args.url);\n    this.url = args.url;\n    this._ws = new WebSocket(args.url);\n    this._readyState = 0;\n    this._requiredToFail = args.requiredToFail || false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    if (this._requiredToFail) {\n      this._ws.close();\n    }\n\n    this._ws.on('open', () => this._onConnectionEstablished());\n    this._ws.on('message', (data, isBinary) => this._onMessageReceived(data, isBinary));\n    this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n    this._ws.on('error', (err) => {\n      console.error('WebSocket error:', err);\n      this._onConnectionClosed(4000, 'Internal Error');\n    });\n  }\n\n  _onConnectionEstablished() {\n    this._readyState = 1;\n    while (this._sendQueue.length > 0) {\n      const message = this._sendQueue.shift();\n      if (message instanceof Blob) {\n        message.arrayBuffer().then(buffer => {\n          this._ws.send(buffer);\n        });\n      } else {\n        this._ws.send(message);\n      }\n    }\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (this._globalObject && this._globalObject.onmessage) {\n      this._globalObject.onmessage({ data, isBinary });\n    }\n  }\n\n  _onConnectionClosed(code, reason) {\n    this._readyState = 2;\n    this._sendQueue = [];\n    if (this._globalObject && this._globalObject.onclose) {\n      this._globalObject.onclose({ code, reason });\n    }\n  }\n\n  close(code, reason) {\n    this._ws.close(code, reason);\n    this._onConnectionClosed(code, reason);\n  }\n\n  send(data) {\n    if (data instanceof Blob) {\n      data.arrayBuffer().then(buffer => {\n        this._ws.send(buffer);\n      });\n    } else {\n      this._ws.send(data);\n    }\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  parseURL(url) {\n    const protocol = url.split(':')[0];\n    const rest = url.slice(protocol.length + 1);\n    const hostPort = rest.split('//')[1];\n    const path = hostPort ? hostPort.split('/')[1] || '' : '';\n    return {\n      protocol,\n      host: hostPort.split(':')[0],\n      port: hostPort.split(':')[1] || '',\n      path\n    };\n  }\n}"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Implement a WebSocket transport class for establishing and managing WebSocket connections in a browser or Node.js environment, supporting both binary and text data transmission with configurable options.\n\nClass Description: The WS class extends a base Transport class to provide WebSocket-specific functionality. It handles connection establishment, message transmission, error handling, and connection cleanup, with support for various WebSocket options like binary data, compression, and security settings.\n\nAttributes:\n- supportsBinary: Boolean - Indicates whether the connection supports binary data transmission\n- perMessageDeflate: Object - Configuration for message compression\n- ws: WebSocket - The underlying WebSocket connection instance\n- writable: Boolean - Indicates if the connection is ready to send data\n\nMethods:\n- constructor(opts: Object) -> void - Initializes the WebSocket transport with configuration options\n- doOpen() -> void - Establishes the WebSocket connection and sets up event listeners\n- addEventListeners() -> void - Attaches event handlers for connection events (open, close, message, error)\n- write(packets: Array) -> void - Encodes and sends multiple packets through the WebSocket connection\n- onClose() -> void - Handles connection closure and cleans up resources\n- doClose() -> void - Explicitly closes the WebSocket connection\n- uri() -> String - Generates the WebSocket connection URI with query parameters\n- check() -> Boolean - Verifies WebSocket availability and compatibility\n\nInput:\n- opts: Object - Configuration options including:\n  - forceBase64: Boolean - Forces base64 encoding if binary not supported\n  - perMessageDeflate: Object - Compression settings\n  - agent: Object - Custom HTTP agent\n  - pfx: String - SSL PFX certificate\n  - key: String - SSL key\n  - passphrase: String - SSL passphrase\n  - cert: String - SSL certificate\n  - ca: Array - SSL certificate authorities\n  - ciphers: String - SSL cipher suite\n  - rejectUnauthorized: Boolean - SSL verification setting\n  - extraHeaders: Object - Additional HTTP headers\n  - secure: Boolean - Use secure protocol (wss)\n  - port: Number - Custom port number\n  - timestampRequests: Boolean - Add timestamp to requests\n  - timestampParam: String - Parameter name for timestamp\n  - hostname: String - Server hostname\n  - path: String - WebSocket endpoint path\n  - query: Object - Additional query parameters\n\nOutput:\n- Instance of WS class with established WebSocket connection and configured event handlers",
    "Canonical_solution": "var Transport = require('../transport');\nvar parser = require('engine.io-parser');\nvar parseqs = require('parseqs');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:websocket');\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\n\nvar WebSocket = BrowserWebSocket;\nif (!WebSocket && typeof window === 'undefined') {\n  try {\n    WebSocket = require('ws');\n  } catch (e) { }\n}\n\nfunction WS(opts){\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  Transport.call(this, opts);\n}\n\ninherit(WS, Transport);\n\nWS.prototype.name = 'websocket';\nWS.prototype.supportsBinary = true;\n\nWS.prototype.doOpen = function(){\n  if (!this.check()) {\n    return;\n  }\n\n  var self = this;\n  var uri = this.uri();\n  var protocols = void(0);\n  var opts = {\n    agent: this.agent,\n    perMessageDeflate: this.perMessageDeflate\n  };\n\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n\n  this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'buffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\nWS.prototype.addEventListeners = function(){\n  var self = this;\n\n  this.ws.onopen = function(){\n    self.onOpen();\n  };\n  this.ws.onclose = function(){\n    self.onClose();\n  };\n  this.ws.onmessage = function(ev){\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function(e){\n    self.onError('websocket error', e);\n  };\n};\n\nWS.prototype.write = function(packets){\n  var self = this;\n  this.writable = false;\n\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function(packet) {\n      parser.encodePacket(packet, self.supportsBinary, function(data) {\n        if (!BrowserWebSocket) {\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        try {\n          if (BrowserWebSocket) {\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e){\n          debug('websocket closed before onclose event');\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done(){\n    self.emit('flush');\n    setTimeout(function(){\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\nWS.prototype.onClose = function(){\n  Transport.prototype.onClose.call(this);\n};\n\nWS.prototype.doClose = function(){\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\nWS.prototype.uri = function(){\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  if (this.port && (('wss' == schema && this.port != 443)\n    || ('ws' == schema && this.port != 80))) {\n    port = ':' + this.port;\n  }\n\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\nWS.prototype.check = function(){\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WS {\n  constructor(opts) {\n    this.supportsBinary = opts.binary || false;\n    this.perMessageDeflate = opts.perMessageDeflate || {};\n    this.ws = null;\n    this.writable = false;\n    this.secure = opts.secure || false;\n    this.hostname = opts.hostname || 'localhost';\n    this.port = opts.port || (this.secure ? 443 : 80);\n    this.path = opts.path || '/';\n    this.query = opts.query || {};\n    this.pfx = opts.pfx || null;\n    this.key = opts.key || null;\n    this.passphrase = opts.passphrase || null;\n    this.cert = opts.cert || null;\n    this.ca = opts.ca || [];\n    this.ciphers = opts.ciphers || null;\n    this.rejectUnauthorized = opts.rejectUnauthorized || false;\n    this.extraHeaders = opts.extraHeaders || {};\n    this.forceBase64 = opts.forceBase64 || false;\n    this.timestampRequests = opts.timestampRequests || false;\n    this.timestampParam = opts.timestampParam || 't';\n    this.doOpen();\n  }\n\n  doOpen() {\n    const uri = this.uri();\n    const options = {\n      perMessageDeflate: this.perMessageDeflate,\n      pfx: this.pfx,\n      key: this.key,\n      passphrase: this.passphrase,\n      cert: this.cert,\n      ca: this.ca,\n      ciphers: this.ciphers,\n      rejectUnauthorized: this.rejectUnauthorized,\n      extraHeaders: this.extraHeaders\n    };\n    this.ws = new WebSocket(uri, options);\n    this.addEventListeners();\n  }\n\n  addEventListeners() {\n    this.ws.addEventListener('open', this.onOpen.bind(this));\n    this.ws.addEventListener('close', this.onClose.bind(this));\n    this.ws.addEventListener('message', this.onMessage.bind(this));\n    this.ws.addEventListener('error', this.onError.bind(this));\n  }\n\n  onOpen() {\n    this.writable = true;\n  }\n\n  onClose() {\n    this.doClose();\n    this.writable = false;\n  }\n\n  onMessage(event) {\n    console.log('Received message:', event.data);\n  }\n\n  onError(error) {\n    console.error('WebSocket error:', error);\n    this.onClose();\n  }\n\n  write(packets) {\n    for (const packet of packets) {\n      if (Buffer.isBuffer(packet)) {\n        if (this.supportsBinary) {\n          this.ws.send(packet);\n        } else {\n          this.ws.send(packet.toString('base64'));\n        }\n      } else {\n        this.ws.send(packet);\n      }\n    }\n  }\n\n  doClose() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.close();\n    }\n  }\n\n  uri() {\n    let protocol = this.secure ? 'wss' : 'ws';\n    let host = `${this.hostname}:${this.port}`;\n    let path = this.path;\n    let query = new URLSearchParams(this.query).toString();\n    return `${protocol}://${host}${path}?${query}`;\n  }\n\n  check() {\n    return this.ws && this.ws.readyState === WebSocket.OPEN;\n  }\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendWebhook(data) {\n  const url = 'https://example.com/webhook';\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.error('Error sending webhook:', error.message);\n  }\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that handles WebSocket connections, message processing, and connection lifecycle events. The class should support sending and receiving JSON messages, handling different commands, and managing connection states.\n\nClass Description: The `Client` class represents a WebSocket client that connects to a server, processes incoming messages, and sends commands. It handles connection events, message parsing, and provides methods for common operations like sending hello messages and triggering reloads.\n\nAttributes:\n- `ws`: [WebSocket] - The WebSocket connection instance.\n- `options`: [Object] - Configuration options for the client.\n- `id`: [String] - Unique identifier for the client instance.\n- `plugins`: [Array] - List of plugins received from the server.\n- `url`: [String] - URL received from the server.\n\nMethods:\n- `constructor(req, socket, head, options)` -> [Client] - Initializes a new WebSocket client instance with the given request, socket, head, and options.\n- `message(event)` -> [void] - Handles incoming WebSocket messages, parses them, and routes to appropriate command handlers.\n- `close(event)` -> [void] - Closes the WebSocket connection and emits an 'end' event.\n- `hello()` -> [void] - Sends a 'hello' command to the server with supported protocols and server name.\n- `info(data)` -> [void] - Processes 'info' command data from the server, storing plugins and URL.\n- `reload(files)` -> [void] - Sends 'reload' commands for each file in the provided list, with live reload options.\n- `_data(event)` -> [Object] - Parses incoming message data from JSON string to object.\n- `send(data)` -> [void] - Sends data as a JSON string over the WebSocket connection.\n- `uniqueId(prefix)` -> [String] - Generates a unique ID with an optional prefix.",
    "Canonical_solution": "var WebSocket = require('faye-websocket');\n\nclass Client {\n  constructor(req, socket, head, options) {\n    options = this.options = options || {};\n    this.ws = new WebSocket(req, socket, head);\n    this.ws.onmessage = this.message.bind(this);\n    this.ws.onclose = this.close.bind(this);\n    this.id = this.uniqueId('ws');\n  }\n\n  message(event) {\n    var data = this.data(event);\n    if(this[data.command]) return this[data.command](data);\n  }\n\n  close(event) {\n    if(this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.emit('end', event);\n  }\n\n  hello() {\n    this.send({\n      command: 'hello',\n      protocols: [\n        'http://livereload.com/protocols/official-7'\n      ],\n      serverName: 'tiny-lr'\n    });\n  }\n\n  info(data) {\n    this.plugins = data.plugins;\n    this.url = data.url;\n  }\n\n  reload(files) {\n    files.forEach(function(file) {\n      this.send({\n        command: 'reload',\n        path: file,\n        liveCss: this.options.liveCss !== false,\n        liveJs: this.options.liveJs !== false,\n        liveImg: this.options.liveImg !== false\n      });\n    }, this);\n  }\n\n  _data(event) {\n    var data = {};\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {}\n    return data;\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  }\n}\n\nvar idCounter = 0;",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "const { EventEmitter } = require('events');\n\nclass Client extends EventEmitter {\n  constructor(req, socket, head, options) {\n    super();\n    this.ws = new WebSocket(socket);\n    this.options = options;\n    this.id = this.uniqueId('client');\n    this.plugins = [];\n    this.url = '';\n  }\n\n  message(event) {\n    const data = this._data(event);\n    if (data.cmd === 'info') {\n      this.info(data.data);\n    } else if (data.cmd === 'reload') {\n      this.reload(data.data.files);\n    }\n  }\n\n  close(event) {\n    this.ws.close();\n    this.emit('end');\n  }\n\n  hello() {\n    const data = {\n      cmd: 'hello',\n      protocols: this.options.protocols,\n      serverName: this.options.serverName\n    };\n    this.send(data);\n  }\n\n  info(data) {\n    this.plugins = data.plugins || [];\n    this.url = data.url;\n  }\n\n  reload(files) {\n    files.forEach(file => {\n      this.send({ cmd: 'reload', file });\n    });\n  }\n\n  _data(event) {\n    try {\n      return JSON.parse(event.data);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId(prefix) {\n    return prefix ? prefix + Math.random().toString(36).substr(2, 9) : Math.random().toString(36).substr(2, 9);\n  }\n}"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes a connection to a WebSocket server, handles communication events (open, message, close, error), and provides methods to send messages and close the connection. The class should integrate with a listener interface to notify about connection events and received messages.\n\nClass Description: The WebSocketClient class is an implementation of the AiClient interface that manages WebSocket connections in a browser environment. It handles the WebSocket lifecycle, including connection establishment, message exchange, and error handling, while notifying a listener about these events.\n\nAttributes:\n- isStop: boolean - Indicates whether the connection has been stopped.\n- url: string - The WebSocket server URL to connect to.\n- webSocket: WebSocket | undefined - The WebSocket instance.\n- isOpen: boolean - Indicates whether the WebSocket connection is open.\n- payload: string | undefined - The initial message payload to send after connection.\n- listener: AiClientListener - The listener interface for event notifications.\n\nMethods:\n- constructor(url: string, listener: AiClientListener) -> void - Initializes the WebSocketClient with the server URL and a listener.\n- start(payload: string) -> void - Starts the WebSocket connection and sets up event handlers. Sends the initial payload once connected.\n- stop() -> void - Closes the WebSocket connection and notifies the listener.\n- send(message: string) -> void - Sends a message through the WebSocket if the connection is open.\n- onOpen(_: Event) -> void - Handles the WebSocket 'open' event, sets the connection state, and sends the initial payload.\n- onMessage(event: MessageEvent) -> void - Handles incoming messages and notifies the listener.\n- onClose(_: CloseEvent) -> void - Handles the WebSocket 'close' event, updates the connection state, and notifies the listener.\n- onError(_: Event) -> void - Handles WebSocket errors, updates the connection state, and notifies the listener.",
    "Canonical_solution": "import {AiClientListener} from \"../../AiClientListener.ts\";\nimport {AiClient} from \"../../AiClient.ts\";\n\nexport class WebSocketClient implements AiClient {\n    isStop: boolean = false\n    url: string;\n    webSocket?: WebSocket;\n    isOpen: boolean = false;\n    payload?: string;\n    listener: AiClientListener;\n\n    constructor(url: string, listener: AiClientListener) {\n        this.url = url;\n        this.listener = listener;\n    }\n\n    start(payload: string) {\n        this.listener.onStart(this);\n        this.payload = payload;\n        this.webSocket = new WebSocket(this.url);\n        this.webSocket.onopen = (e) => this.onOpen(e)\n        this.webSocket.onmessage = (e) => this.onMessage(e)\n        this.webSocket.onclose = (e) => this.onClose(e)\n        this.webSocket.onerror = (e) => this.onError(e)\n    }\n\n    stop() {\n        if (this.webSocket) {\n            this.webSocket.close();\n            this.webSocket = void 0;\n\n            if (!this.isStop) {\n                this.listener.onStop();\n                this.isStop = true;\n            }\n        }\n    }\n\n    send(message: string) {\n        if (this.webSocket && this.isOpen) {\n            this.webSocket.send(message);\n        }\n    }\n\n    protected onOpen(_: Event) {\n        this.isOpen = true;\n        this.send(this.payload!);\n    }\n\n    protected onMessage(event: MessageEvent) {\n        this.listener.onMessage(event.data)\n    }\n\n    protected onClose(_: CloseEvent) {\n        this.isOpen = false;\n        if (!this.isStop) {\n            this.listener.onStop();\n            this.isStop = true;\n        }\n    }\n\n    protected onError(_: Event) {\n        this.isOpen = false;\n        if (!this.isStop) {\n            this.listener.onStop();\n            this.isStop = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WebSocketClient {\n  constructor(url, listener) {\n    this.url = url;\n    this.listener = listener;\n    this.isStop = false;\n    this.isOpen = false;\n    this.payload = undefined;\n    this.webSocket = undefined;\n  }\n\n  start(payload) {\n    this.payload = payload;\n    this.webSocket = new WebSocket(this.url);\n    this.webSocket.addEventListener('open', this.onOpen.bind(this));\n    this.webSocket.addEventListener('message', this.onMessage.bind(this));\n    this.webSocket.addEventListener('close', this.onClose.bind(this));\n    this.webSocket.addEventListener('error', this.onError.bind(this));\n  }\n\n  stop() {\n    if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\n      this.webSocket.close();\n    }\n    this.isStop = true;\n    this.listener.onStop();\n  }\n\n  send(message) {\n    if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\n      this.webSocket.send(message);\n    }\n  }\n\n  onOpen(event) {\n    this.isOpen = true;\n    this.listener.onOpen(event);\n    if (this.payload) {\n      this.send(this.payload);\n    }\n  }\n\n  onMessage(event) {\n    this.listener.onMessage(event.data);\n  }\n\n  onClose(event) {\n    this.isOpen = false;\n    this.listener.onClose(event);\n  }\n\n  onError(event) {\n    this.isOpen = false;\n    this.listener.onError(event);\n  }\n}"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a client for interacting with Quqi.com's API to perform daily tasks, manage group operations, and track rewards.\n\nClass Description: The QuqiClient class provides methods to interact with Quqi.com's web services including task management, group operations, file uploads, and reward collection. It handles HTTP requests using Axios with proper headers and error handling.\n\nAttributes:\n- headers: [Object] - Contains HTTP headers including cookies and referer for API authentication\n- config: [Object] - Configuration object containing user credentials and settings\n\nMethods:\n- constructor(config) -> [void] - Initializes the client with configuration including authentication cookies\n- _sleep(ms) -> [Promise] - Utility method for delaying execution\n- getDailyTask() -> [Promise<Array|null>] - Retrieves list of incomplete daily tasks\n- getReward(id) -> [Promise<void>] - Claims reward for a specific task ID\n- visit(id) -> [Promise<void>] - Visits a specified group to complete visit tasks\n- getQuqiId() -> [Promise<Object|null>] - Gets group information and handles group joining if needed\n- uploadImg(id) -> [Promise<void>] - Uploads and deletes a dummy image to complete upload tasks\n- executeTasks() -> [Promise<String>] - Executes all available tasks and returns wallet information",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass QuqiClient {\n    constructor(config) {\n        this.headers = {\n            cookie: config.quqi.cookie,\n            referer: \"https://quqi.com/\"\n        };\n    }\n\n    async _sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async getDailyTask() {\n        try {\n            let res = await axios.get(`https://exp.quqi.com/v1/dailyTask/state?_=1${Date.now()}`, {headers: this.headers});\n            if(res.data.err == 0) {\n                let list = res.data.data.filter(x => x.status != 2);\n                console.log(`\u5269\u4f59${list.length}\u4efb\u52a1\u672a\u5b8c\u6210`);\n                return list;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return null;\n    }\n\n    async getReward(id) {\n        try {\n            let res = await axios.get(`https://exp.quqi.com/v1/dailyTask/sendAward/${id}`, {headers: this.headers});\n            console.log(\"\u9886\u53d6\u5956\u52b1\uff1a\" + res.data.msg);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async visit(id) {\n        try {\n            this.headers[\"User-Agent\"] = \"Mozilla/5.0 (Linux; Android 11; Redmi K30) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36\";\n            let res = await axios.post(`https://quqi.com/api/dir/ls?quqi_id=${id}`, `quqi_id=${id}&tree_id=1&node_id=0`, {headers: this.headers});\n            let res1 = await axios.post(`https://quqi.com/auth/updateVisit?quqi_id=${id}`, `quqi_id=${id}`, {headers: this.headers});\n            console.log(\"\u6d4f\u89c8\u591a\u4eba\u7fa4\u7ec4\uff1a\" + res1.data.msg);\n            await this._sleep(1000);\n            await this.getReward(14);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async getQuqiId() {\n        try {\n            let res = await axios.get(\"https://group.quqi.com/v1/group/list\", {headers: this.headers});\n            if (res.data.msg == \"success\") {\n                let gplist = res.data.data.filter(x => x.type == 14);\n                let quqid = gplist.length == 0 ? res.data.data[0].quqi_id : gplist[0].quqi_id;\n                let gtype = gplist.length == 0 ? 1 : 2;\n                if (gtype == 1) {\n                    console.log(\"\ud83c\ude1a\ufe0f\u591a\u4eba\u7fa4\u7ec4,\u8bf7\u81ea\u884c\u521b\u5efa\u4e00\u4e2a\u591a\u4eba\u7fa4\u7ec4,\u6216\u8005\u7533\u8bf7\u52a0\u5165https://quqi.avyeld.com/join/company/team.html?jointarget=ed521eef-7ed1-486f-a903-2457ebe5704f\");\n                    let sqres = await axios.post(\"https://group.quqi.com/v1/application\", \"credential=ed521eef-7ed1-486f-a903-2457ebe5704f\", {headers: this.headers});\n                    console.log(\"\u7533\u8bf7\u52a0\u5165\u591a\u4eba\u7fa4\u7ec4\uff1a\" + sqres.data.msg);\n                }\n                return {\n                    qid: quqid,\n                    gtype: gtype\n                };\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return null;\n    }\n\n    async uploadImg(id) {\n        try {\n            let name = `\u6bcf\u65e5\u7b7e\u5230${Date.now()}`;\n            this.headers[\"User-Agent\"] = \"Mozilla/5.0 (Linux; Android 11; Redmi K30) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36\";\n            let res = await axios.post(`https://quqi.com/api/upload/v1/file/init?quqi_id=${id}`, `file_name=${name}.jpg&is_slice=false&md5=507cf982c5db90bc35f9c6c8179c292f&parent_id=0&quqi_id=${id}&sha=4b4afc24113d86d0afd9be21b6841d9c627cdabf01317e3e760308b05f8bdd81&sign=617db783e0ba01343338ee9887dfdb18&size=331665&tree_id=1`, {headers: this.headers});\n            if (res.data.msg == \"ok\") {\n                console.log(`\u4e0a\u4f20\u56fe\u7247 ${name} \u6210\u529f`);\n                let nid = res.data.data.node_id;\n                if (nid) await axios.post(`https://quqi.com/api/node/batchDel?quqi_id=${id}`, `quqi_id=${id}&tree_id=1&node_ids=${nid}`, {headers: this.headers});\n                await this._sleep(1000);\n                await this.getReward(15);\n            } else {\n                console.log(\"\u4e0a\u4f20\u5931\u8d25\uff1a\" + res.data.msg);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async executeTasks() {\n        let quqinfo = \"\";\n        let dailyTaskList = await this.getDailyTask();\n        let qgp = await this.getQuqiId();\n        \n        if (dailyTaskList) {\n            for (let task of dailyTaskList) {\n                console.log(task.task_decreption);\n                if (task.status == 1) {\n                    await this.getReward(task.task_type);\n                } else if (task.task_type == 14 && task.status == 0 && qgp.gtype == 2) {\n                    await this.visit(qgp.qid);\n                } else if (task.task_type == 15 && task.status == 0) {\n                    await this.uploadImg(qgp.qid);\n                }\n            }\n        }\n        \n        let ires = await axios.get(\"https://api.quqi.com/vipWallet/v1/vipAndWallet\", {headers: this.headers});\n        if (ires.data.msg == \"success\") {\n            quqinfo = `\u66f2\u5947\u997c\uff1a${ires.data.data.wallet_info.cookie}  \u66f2\u5947\u8c46\uff1a${ires.data.data.wallet_info.bean}`;\n        } else {\n            quqinfo = ires.data.msg;\n        }\n        console.log(quqinfo);\n        return \"\u3010\u66f2\u5947\u7f51\u76d8\u3011\uff1a\" + quqinfo;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class QuqiClient {\n  constructor(config) {\n    this.headers = config.headers;\n    this.config = config;\n    this.axios = axios.create({\n      baseURL: 'https://api.quqi.com',\n      headers: this.headers\n    });\n  }\n\n  _sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async getDailyTask() {\n    try {\n      const res = await this.axios.get('/api/tasks');\n      return res.data.tasks || null;\n    } catch (error) {\n      console.error('Error fetching daily tasks:', error);\n      return null;\n    }\n  }\n\n  async getReward(id) {\n    try {\n      await this.axios.post('/api/reward', { taskId: id });\n    } catch (error) {\n      console.error('Error claiming reward:', error);\n    }\n  }\n\n  async visit(id) {\n    try {\n      await this.axios.post('/api/visit', { groupId: id });\n    } catch (error) {\n      console.error('Error visiting group:', error);\n    }\n  }\n\n  async getQuqiId() {\n    try {\n      const res = await this.axios.get('/api/group');\n      const group = res.data.group;\n      if (!group.isMember) {\n        await this.axios.post('/api/join-group', { groupId: group.id });\n      }\n      return group;\n    } catch (error) {\n      console.error('Error getting group info:', error);\n      return null;\n    }\n  }\n\n  async uploadImg(id) {\n    try {\n      const res = await this.axios.post('/api/upload', { taskId: id });\n      const fileId = res.data.fileId;\n      await this.axios.delete(`/api/delete-file/${fileId}`);\n    } catch (error) {\n      console.error('Error uploading image:', error);\n    }\n  }\n\n  async executeTasks() {\n    try {\n      const tasks = await this.getDailyTask();\n      if (!tasks || tasks.length === 0) return 'No tasks to execute';\n\n      for (const task of tasks) {\n        if (task.type === 'reward') {\n          await this.getReward(task.id);\n        } else if (task.type === 'visit') {\n          await this.visit(task.id);\n        } else if (task.type === 'upload') {\n          await this.uploadImg(task.id);\n        }\n      }\n\n      const wallet = await this.getQuqiId();\n      return `Wallet info: ${JSON.stringify(wallet)}`;\n    } catch (error) {\n      console.error('Error executing tasks:', error);\n      return 'Failed to execute tasks';\n    }\n  }\n}"
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that handles WebSocket connections, message transmission, and error handling.\n\nClass Description: The WS class provides a WebSocket client implementation with configurable connection parameters, event handling, and message transmission capabilities. It supports both secure (wss) and non-secure (ws) connections, binary data transmission, and connection lifecycle management.\n\nAttributes:\n- secure: [Boolean] - Indicates whether to use a secure WebSocket connection (wss)\n- hostname: [String] - The hostname to connect to\n- port: [Number] - The port number for the connection\n- path: [String] - The path for the WebSocket endpoint\n- query: [Object] - Additional query parameters for the connection\n- timestampParam: [String] - Parameter name for timestamp in requests\n- timestampRequests: [Boolean] - Whether to include timestamps in requests\n- readyState: [String] - Current state of the WebSocket connection\n- ws: [WebSocket] - The underlying WebSocket instance\n- binaryType: [String] - Type of binary data to use ('buffer' or 'arraybuffer')\n- perMessageDeflate: [Object|Boolean] - Configuration for per-message deflate extension\n\nMethods:\n- constructor(opts): [Object] -> [void] - Initializes the WebSocket client with configuration options\n- doOpen(): [void] -> [void] - Establishes the WebSocket connection\n- addEventListeners(): [void] -> [void] - Sets up event handlers for the WebSocket\n- write(packets): [Array] -> [void] - Sends multiple packets through the WebSocket\n- doClose(): [void] -> [void] - Closes the WebSocket connection\n- uri(): [void] -> [String] - Generates the WebSocket connection URI\n- check(): [void] -> [Boolean] - Verifies WebSocket availability and initialization status",
    "Canonical_solution": "var WebSocket = global.WebSocket || global.MozWebSocket;\n\nclass WS {\n  constructor(opts) {\n    this.secure = null != opts.secure ? opts.secure : (global.location && 'https:' == location.protocol);\n    this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');\n    this.port = opts.port || (global.location && location.port ? location.port : (this.secure ? 443 : 80));\n    this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n    this.query = opts.query || {};\n    this.timestampParam = opts.timestampParam || 't';\n    this.timestampRequests = opts.timestampRequests;\n    this.readyState = '';\n    this.ws = null;\n    this.binaryType = null;\n    this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;\n  }\n\n  doOpen() {\n    if (!this.check()) return;\n\n    var uri = this.uri();\n    var protocols = void(0);\n    var opts = {\n      agent: this.agent,\n      perMessageDeflate: this.perMessageDeflate\n    };\n\n    this.ws = new WebSocket(uri, protocols, opts);\n\n    if (this.ws.binaryType === undefined) {\n      this.supportsBinary = false;\n    }\n\n    if (this.ws.supports && this.ws.supports.binary) {\n      this.supportsBinary = true;\n      this.ws.binaryType = 'buffer';\n    } else {\n      this.ws.binaryType = 'arraybuffer';\n    }\n\n    this.addEventListeners();\n  }\n\n  addEventListeners() {\n    var self = this;\n\n    this.ws.onopen = function() {\n      self.onOpen();\n    };\n    this.ws.onclose = function() {\n      self.onClose();\n    };\n    this.ws.onmessage = function(ev) {\n      self.onData(ev.data);\n    };\n    this.ws.onerror = function(e) {\n      self.onError('websocket error', e);\n    };\n  }\n\n  write(packets) {\n    var self = this;\n    this.writable = false;\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      (function(packet) {\n        parser.encodePacket(packet, self.supportsBinary, function(data) {\n          try {\n            self.ws.send(data);\n          } catch(e) {\n            debug('websocket closed before onclose event');\n          }\n        });\n      })(packets[i]);\n    }\n\n    setTimeout(function() {\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n\n  doClose() {\n    if (typeof this.ws !== 'undefined') {\n      this.ws.close();\n    }\n  }\n\n  uri() {\n    var query = this.query || {};\n    var schema = this.secure ? 'wss' : 'ws';\n    var port = '';\n\n    if (this.port && (('wss' == schema && this.port != 443) || ('ws' == schema && this.port != 80))) {\n      port = ':' + this.port;\n    }\n\n    if (this.timestampRequests) {\n      query[this.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    if (query.length) {\n      query = '?' + query;\n    }\n\n    var ipv6 = this.hostname.indexOf(':') !== -1;\n    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n  }\n\n  check() {\n    return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WS {\n  constructor(opts) {\n    this.secure = opts.secure;\n    this.hostname = opts.hostname;\n    this.port = opts.port;\n    this.path = opts.path || '/';\n    this.query = opts.query || {};\n    this.timestampParam = opts.timestampParam || 'timestamp';\n    this.timestampRequests = opts.timestampRequests || false;\n    this.readyState = 'closed';\n    this.ws = null;\n    this.binaryType = opts.binaryType || 'arraybuffer';\n    this.perMessageDeflate = opts.perMessageDeflate || false;\n  }\n\n  doOpen() {\n    if (this.ws) {\n      this.doClose();\n    }\n    const uri = this.uri();\n    this.ws = new WebSocket(uri, this.perMessageDeflate);\n    this.addEventListeners();\n    this.readyState = 'opening';\n  }\n\n  addEventListeners() {\n    this.ws.addEventListener('open', () => {\n      this.readyState = 'open';\n    });\n\n    this.ws.addEventListener('close', (event) => {\n      this.readyState = 'closed';\n    });\n\n    this.ws.addEventListener('error', (event) => {\n      this.readyState = 'error';\n    });\n\n    this.ws.addEventListener('message', (event) => {\n      console.log('Received message:', event.data);\n    });\n  }\n\n  write(packets) {\n    for (const packet of packets) {\n      this.ws.send(packet);\n    }\n  }\n\n  doClose() {\n    if (this.ws) {\n      this.ws.close();\n      this.readyState = 'closed';\n    }\n  }\n\n  uri() {\n    const protocol = this.secure ? 'wss' : 'ws';\n    let uri = `${protocol}://${this.hostname}`;\n    if (this.port) {\n      uri += `:${this.port}`;\n    }\n    if (this.path) {\n      uri += this.path;\n    }\n    if (Object.keys(this.query).length > 0) {\n      const query = new URLSearchParams(this.query);\n      uri += `?${query.toString()}`;\n    }\n    return uri;\n  }\n\n  check() {\n    return this.ws && this.readyState !== 'closed';\n  }\n}"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Implement a LiveQueryClient class that manages WebSocket connections for real-time data updates in a Parse server environment, handling connection lifecycle, subscriptions, and error recovery.\n\nClass Description: The LiveQueryClient class establishes and maintains a WebSocket connection to a Parse LiveQuery server, manages subscriptions to queries, handles connection events (open, message, error, close), and implements automatic reconnection logic.\n\nAttributes:\n- attempts: number - Tracks reconnection attempts for exponential backoff\n- id: number - Unique client identifier assigned by server\n- requestId: number - Counter for subscription requests\n- applicationId: string - Parse application ID for authentication\n- serverURL: string - WebSocket server URL (must start with 'ws' or 'wss')\n- javascriptKey: string (optional) - JavaScript key for authentication\n- masterKey: string (optional) - Master key for authentication\n- sessionToken: string (optional) - User session token\n- installationId: string (optional) - Device installation identifier\n- additionalProperties: boolean - Flag to include additional properties in requests\n- connectPromise: Promise - Promise resolved when connection is established\n- subscriptions: Map<number, LiveQuerySubscription> - Active subscriptions\n- socket: WebSocketController - WebSocket connection controller\n- state: string - Current connection state (INITIALIZED, CONNECTING, CONNECTED, etc.)\n- reconnectHandle: any - Timeout handle for reconnection attempts\n- emitter: EventEmitter - Event emitter for connection events\n- on: function - Shortcut to emitter.on\n- emit: function - Shortcut to emitter.emit\n\nMethods:\n- constructor({applicationId, serverURL, javascriptKey, masterKey, sessionToken, installationId}) -> void - Initializes the client with connection parameters and validates serverURL\n- open() -> void - Establishes WebSocket connection and sets up event handlers\n- _handleWebSocketOpen() -> void - Sends connection request to server after WebSocket opens\n- _handleWebSocketMessage(event: any) -> void - Processes incoming messages from server and handles connection confirmation\n- _handleWebSocketClose() -> void - Handles connection closure and triggers reconnection\n- _handleWebSocketError(error: any) -> void - Handles WebSocket errors and triggers reconnection\n- _handleReconnect() -> void - Implements exponential backoff reconnection logic",
    "Canonical_solution": "import CoreManager, { WebSocketController } from './CoreManager';\nimport ParseObject from './ParseObject';\nimport LiveQuerySubscription from './LiveQuerySubscription';\nimport { resolvingPromise } from './promiseUtils';\nimport ParseError from './ParseError';\nimport type ParseQuery from './ParseQuery';\n\nclass LiveQueryClient {\n  attempts: number;\n  id: number;\n  requestId: number;\n  applicationId: string;\n  serverURL: string;\n  javascriptKey?: string;\n  masterKey?: string;\n  sessionToken?: string;\n  installationId?: string;\n  additionalProperties: boolean;\n  connectPromise: any;\n  subscriptions: Map<number, LiveQuerySubscription>;\n  socket: WebSocketController & { closingPromise?: any };\n  state: string;\n  reconnectHandle: any;\n  emitter: any;\n  on: any;\n  emit: any;\n\n  constructor({\n    applicationId,\n    serverURL,\n    javascriptKey,\n    masterKey,\n    sessionToken,\n    installationId,\n  }) {\n    if (!serverURL || serverURL.indexOf('ws') !== 0) {\n      throw new Error(\n        'You need to set a proper Parse LiveQuery server url before using LiveQueryClient'\n      );\n    }\n\n    this.reconnectHandle = null;\n    this.attempts = 1;\n    this.id = 0;\n    this.requestId = 1;\n    this.serverURL = serverURL;\n    this.applicationId = applicationId;\n    this.javascriptKey = javascriptKey || undefined;\n    this.masterKey = masterKey || undefined;\n    this.sessionToken = sessionToken || undefined;\n    this.installationId = installationId || undefined;\n    this.additionalProperties = true;\n    this.connectPromise = resolvingPromise();\n    this.subscriptions = new Map();\n    this.state = CLIENT_STATE.INITIALIZED;\n    const EventEmitter = CoreManager.getEventEmitter();\n    this.emitter = new EventEmitter();\n\n    this.on = (eventName, listener) => this.emitter.on(eventName, listener);\n    this.emit = (eventName, ...args) => this.emitter.emit(eventName, ...args);\n    this.on('error', () => {});\n  }\n\n  open() {\n    const WebSocketImplementation = CoreManager.getWebSocketController();\n    if (!WebSocketImplementation) {\n      this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');\n      return;\n    }\n\n    if (this.state !== CLIENT_STATE.RECONNECTING) {\n      this.state = CLIENT_STATE.CONNECTING;\n    }\n\n    this.socket = new WebSocketImplementation(this.serverURL);\n    this.socket.closingPromise = resolvingPromise();\n\n    this.socket.onopen = () => {\n      this._handleWebSocketOpen();\n    };\n\n    this.socket.onmessage = event => {\n      this._handleWebSocketMessage(event);\n    };\n\n    this.socket.onclose = event => {\n      this.socket.closingPromise?.resolve(event);\n      this._handleWebSocketClose();\n    };\n\n    this.socket.onerror = error => {\n      this._handleWebSocketError(error);\n    };\n  }\n\n  _handleWebSocketOpen() {\n    const connectRequest = {\n      op: OP_TYPES.CONNECT,\n      applicationId: this.applicationId,\n      javascriptKey: this.javascriptKey,\n      masterKey: this.masterKey,\n      sessionToken: this.sessionToken,\n      installationId: undefined as string | undefined,\n    };\n    if (this.additionalProperties) {\n      connectRequest.installationId = this.installationId;\n    }\n    this.socket.send(JSON.stringify(connectRequest));\n  }\n\n  _handleWebSocketMessage(event: any) {\n    let data = event.data;\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    let subscription: null | LiveQuerySubscription = null;\n    if (data.requestId) {\n      subscription = this.subscriptions.get(data.requestId) || null;\n    }\n    const response = {\n      clientId: data.clientId,\n      installationId: data.installationId,\n    };\n    switch (data.op) {\n    case OP_EVENTS.CONNECTED:\n      if (this.state === CLIENT_STATE.RECONNECTING) {\n        this.resubscribe();\n      }\n      this.emit(CLIENT_EMMITER_TYPES.OPEN);\n      this.id = data.clientId;\n      this.connectPromise.resolve();\n      this.state = CLIENT_STATE.CONNECTED;\n      break;\n    }\n  }\n\n  _handleWebSocketClose() {\n    if (this.state === CLIENT_STATE.DISCONNECTED) {\n      return;\n    }\n    this.state = CLIENT_STATE.CLOSED;\n    this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n    for (const subscription of this.subscriptions.values()) {\n      subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n    }\n    this._handleReconnect();\n  }\n\n  _handleWebSocketError(error: any) {\n    this.emit(CLIENT_EMMITER_TYPES.ERROR, error);\n    for (const subscription of this.subscriptions.values()) {\n      subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);\n    }\n    this._handleReconnect();\n  }\n\n  _handleReconnect() {\n    if (this.state === CLIENT_STATE.DISCONNECTED) {\n      return;\n    }\n    this.state = CLIENT_STATE.RECONNECTING;\n    const time = generateInterval(this.attempts);\n\n    if (this.reconnectHandle) {\n      clearTimeout(this.reconnectHandle);\n    }\n    this.reconnectHandle = setTimeout(\n      (() => {\n        this.attempts++;\n        this.connectPromise = resolvingPromise();\n        this.open();\n      }).bind(this),\n      time\n    );\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class LiveQueryClient {\n  constructor({applicationId, serverURL, javascriptKey, masterKey, sessionToken, installationId}) {\n    this.attempts = 0;\n    this.id = null;\n    this.requestId = 0;\n    this.applicationId = applicationId;\n    this.serverURL = serverURL;\n    this.javascriptKey = javascriptKey;\n    this.masterKey = masterKey;\n    this.sessionToken = sessionToken;\n    this.installationId = installationId;\n    this.additionalProperties = false;\n    this.connectPromise = new Promise(resolve => this.resolveConnect = resolve);\n    this.subscriptions = new Map();\n    this.socket = new WebSocketController(this.serverURL);\n    this.state = 'INITIALIZED';\n    this.reconnectHandle = null;\n    this.emitter = new EventEmitter();\n    this.on = this.emitter.on.bind(this.emitter);\n    this.emit = this.emitter.emit.bind(this.emitter);\n  }\n\n  async open() {\n    this.state = 'CONNECTING';\n    try {\n      await this.socket.connect();\n      this.socket.on('open', () => this._handleWebSocketOpen());\n      this.socket.on('message', (event) => this._handleWebSocketMessage(event));\n      this.socket.on('error', (error) => this._handleWebSocketError(error));\n      this.socket.on('close', () => this._handleWebSocketClose());\n    } catch (error) {\n      this._handleWebSocketError(error);\n    }\n  }\n\n  _handleWebSocketOpen() {\n    const payload = {\n      applicationId: this.applicationId,\n      javascriptKey: this.javascriptKey,\n      masterKey: this.masterKey,\n      sessionToken: this.sessionToken,\n      installationId: this.installationId,\n      additionalProperties: this.additionalProperties\n    };\n    this.socket.send(JSON.stringify(payload));\n  }\n\n  _handleWebSocketMessage(event) {\n    const data = JSON.parse(event.data);\n    if (data.type === 'connected') {\n      this.id = data.id;\n      this.state = 'CONNECTED';\n      this.emit('open');\n      this.connectPromise.resolve();\n    } else if (data.type === 'error') {\n      this._handleWebSocketError(new Error(data.message));\n    }\n  }\n\n  _handleWebSocketClose() {\n    this.state = 'CLOSED';\n    this.emit('close');\n    this._handleReconnect();\n  }\n\n  _handleWebSocketError(error) {\n    this.state = 'ERROR';\n    this.emit('error', error);\n    this._handleReconnect();\n  }\n\n  _handleReconnect() {\n    if (this.attempts >= 5) return;\n    this.attempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.attempts), 30000);\n    this.reconnectHandle = setTimeout(() => {\n      this.socket = new WebSocketController(this.serverURL);\n      this.open();\n    }, delay);\n  }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function speechApi(ssml) {\n  const subscriptionKey = 'your-subscription-key';\n  const url = 'https://api.cognitive.microsoft.com/speech/v1/speechsynthesis';\n  const headers = {\n    'Content-Type': 'application/ssml+xml',\n    'Ocp-Apim-Subscription-Key': subscriptionKey,\n    'X-Microsoft-OutputFormat': 'audio-mp3'\n  };\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: headers,\n    body: ssml\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  const arrayBuffer = await response.arrayBuffer();\n  return arrayBuffer;\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a class that serves as an HTTP client for interacting with a build service API, handling different types of package-related operations with proper error handling.\n\nClass Description: The BuildService class provides methods to fetch package build statistics, exports, and export sizes from a remote build service. It uses Axios for HTTP requests and implements centralized error handling.\n\nAttributes:\n- operations: [Array] - A predefined list of available API operations, each specifying the operation type, endpoint, and corresponding method name\n\nMethods:\n- _makeHttpRequest: [Name](operation: Object, packageString: String) -> Promise<Object> - Makes an HTTP GET request to the build service with the specified operation and package string, handles the response and errors\n- _handleError: [Name](error: Error, operationType: String) -> Throws CustomError - Centralized error handling that processes different types of errors (response errors, request errors, and other errors) and throws appropriate custom errors\n- getPackageBuildStats: [Name](packageString: String) -> Promise<Object> - Retrieves build statistics for the specified package\n- getPackageExports: [Name](packageString: String) -> Promise<Object> - Retrieves all exports for the specified package\n- getPackageExportSizes: [Name](packageString: String) -> Promise<Object> - Retrieves size information for all exports of the specified package",
    "Canonical_solution": "const axios = require('axios');\nconst CustomError = require('../CustomError');\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        type: 'PACKAGE_BUILD_STATS',\n        endpoint: '/size',\n        methodName: 'getPackageStats',\n      },\n      {\n        type: 'PACKAGE_EXPORTS',\n        endpoint: '/exports',\n        methodName: 'getAllPackageExports',\n      },\n      {\n        type: 'PACKAGE_EXPORTS_SIZES',\n        endpoint: '/exports-sizes',\n        methodName: 'getPackageExportSizes',\n      },\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(\n        `${process.env.BUILD_SERVICE_ENDPOINT}${operation.endpoint}?p=${encodeURIComponent(packageString)}`\n      );\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const contents = error.response.data;\n      throw new CustomError(\n        contents.name || 'BuildError',\n        contents.originalError,\n        contents.extra\n      );\n    } else if (error.request) {\n      throw new CustomError('BuildError', {\n        operation: operationType,\n        reason: 'BUILD_SERVICE_UNREACHABLE',\n        url: error.request._currentUrl,\n      });\n    } else {\n      throw new CustomError('BuildError', error.message, {\n        operation: operationType,\n      });\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_BUILD_STATS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS_SIZES');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass CustomError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CustomError';\n  }\n}\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        operationType: 'getBuildStats',\n        endpoint: '/builds/{package}/stats',\n        methodName: 'getPackageBuildStats'\n      },\n      {\n        operationType: 'getExports',\n        endpoint: '/builds/{package}/exports',\n        methodName: 'getPackageExports'\n      },\n      {\n        operationType: 'getExportSizes',\n        endpoint: '/builds/{package}/export-sizes',\n        methodName: 'getPackageExportSizes'\n      }\n    ];\n  }\n\n  _makeHttpRequest(operation, packageString) {\n    const url = operation.endpoint.replace('{package}', packageString);\n    return axios.get(url)\n      .then(response => response.data)\n      .catch(error => {\n        this._handleError(error, operation.operationType);\n      });\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const statusCode = error.response.status;\n      const errorMessage = `Server error ${statusCode}: ${error.response.statusText}`;\n      throw new CustomError(errorMessage);\n    } else if (error.request) {\n      throw new CustomError('No response received from server');\n    } else {\n      throw new CustomError(`Request error: ${error.message}`);\n    }\n  }\n\n  getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageBuildStats');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageExports');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageExportSizes');\n    return this._makeHttpRequest(operation, packageString);\n  }\n}"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Implement a WebSocket client class for streaming timeline data from a server, handling connection events, message parsing, and connection cleanup.\n\nClass Description: The TimelineStream class establishes and manages a WebSocket connection to stream timeline data from a specified API endpoint. It handles connection setup, message reception, error handling, and proper connection closure.\n\nAttributes:\n- _streamingApi: [String] - The base URL of the streaming API server\n- _accessToken: [String] - Authentication token for the API connection\n- _timeline: [String] - Identifier for the specific timeline stream\n- _ws: [WebSocketClient] - Instance of the WebSocket connection\n- _opened: [Boolean] - Flag indicating if the connection is established\n\nMethods:\n- constructor(streamingApi, accessToken, timeline) -> [TimelineStream] - Initializes a new TimelineStream instance with API details and sets up the WebSocket connection\n- _setupWebSocket() -> [void] - Creates a new WebSocket connection, configures event handlers for open, message, and close events\n- _closeWebSocket() -> [void] - Properly closes the WebSocket connection and cleans up event handlers\n- sendMessage(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Public method to close the WebSocket connection",
    "Canonical_solution": "import { WebSocketClient } from '../../_thirdparty/websocket/websocket.js'\nimport { getStreamUrl } from './getStreamUrl.js'\nimport { safeParse } from '../../_utils/safeParse.js'\n\nclass TimelineStream {\n  constructor (streamingApi, accessToken, timeline) {\n    this._streamingApi = streamingApi\n    this._accessToken = accessToken\n    this._timeline = timeline\n    this._setupWebSocket()\n  }\n\n  _setupWebSocket () {\n    const url = getStreamUrl(this._streamingApi, this._accessToken, this._timeline)\n    const ws = new WebSocketClient(url)\n\n    ws.onopen = () => {\n      if (!this._opened) {\n        this._opened = true\n      }\n    }\n    ws.onmessage = (e) => safeParse(e.data)\n    ws.onclose = () => {}\n\n    this._ws = ws\n  }\n\n  _closeWebSocket () {\n    if (this._ws) {\n      this._ws.onopen = null\n      this._ws.onmessage = null\n      this._ws.onclose = null\n      this._ws.close()\n      this._ws = null\n    }\n  }\n\n  sendMessage (message) {\n    if (this._ws && this._ws.readyState === WebSocketClient.OPEN) {\n      this._ws.send(message)\n    }\n  }\n\n  close () {\n    this._closeWebSocket()\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class TimelineStream {\n  constructor(streamingApi, accessToken, timeline) {\n    this._streamingApi = streamingApi;\n    this._accessToken = accessToken;\n    this._timeline = timeline;\n    this._ws = null;\n    this._opened = false;\n    this._setupWebSocket();\n  }\n\n  _setupWebSocket() {\n    const url = `${this._streamingApi}/timeline/${this._timeline}?access_token=${this._accessToken}`;\n    this._ws = new WebSocket(url);\n    this._ws.addEventListener('open', () => {\n      this._opened = true;\n    });\n    this._ws.addEventListener('message', (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        // Handle parsed data\n      } catch (e) {\n        console.error('Error parsing message:', e);\n      }\n    });\n    this._ws.addEventListener('close', () => {\n      this._opened = false;\n    });\n  }\n\n  _closeWebSocket() {\n    if (this._ws) {\n      this._ws.close();\n      this._ws = null;\n      this._opened = false;\n    }\n  }\n\n  sendMessage(message) {\n    if (this._opened) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._closeWebSocket();\n  }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  try {\n    const response = await fetch('https://api.example.com/channels');\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!Array.isArray(data)) {\n      throw new Error('Expected an array of channels');\n    }\n    return data.map(channel => ({\n      lang: channel.lang,\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    console.error('Error fetching or processing channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that manages WebSocket connections, handles message queuing, automatic reconnection, and provides event callbacks for connection status changes and incoming messages.\n\nClass Description: The WebSocketClient class provides a robust WebSocket client implementation with connection management, message queuing, automatic reconnection capabilities, and event callbacks. It maintains connection state and handles various WebSocket events while providing methods for sending messages and checking connection status.\n\nAttributes:\n- wsClient: [WebSocket] - The underlying WebSocket connection instance\n- sendQueue: [Array] - Queue of messages to be sent when connection is available\n- pendingReconnect: [Timeout] - Timer handle for pending reconnection attempts\n\nMethods:\n- constructor() -> [void] - Initializes a new WebSocketClient instance\n- fireSendQueue() -> [void] - Sends all queued messages when connection is open\n- clearSendQueue() -> [void] - Clears all queued messages and rejects their promises\n- planToReconnect(rpcUrl: String, options: Object) -> [void] - Schedules a reconnection attempt\n- init() -> [void] - Cleans up existing connection and message queue\n- connect(rpcUrl: String, options: Object, onOpenCallback: Function, onCloseCallback: Function, onMessageCallback: Function) -> [void] - Establishes new WebSocket connection with event handlers\n- reconnect(rpcUrl: String, options: Object) -> [void] - Re-establishes connection using existing callbacks\n- send(requestContext: Object) -> [Promise] - Queues a message for sending and returns a promise\n- getReadyState() -> [Number|null] - Returns current WebSocket readyState or null if no connection",
    "Canonical_solution": "const WebSocket = require('ws');\nconst ipcRender = require('../ipc/render-proecss');\n\nclass WebSocketClient {\n    constructor() {\n        this.wsClient = null;\n        this.sendQueue = [];\n        this.pendingReconnect = null;\n    }\n\n    fireSendQueue() {\n        while (this.sendQueue.length && this.wsClient && this.wsClient.readyState === WebSocket.OPEN) {\n            const request = this.sendQueue.shift();\n            this.wsClient.send(request.data);\n            request.deferred.resolve();\n        }\n    }\n\n    clearSendQueue() {\n        for (let i = this.sendQueue.length - 1; i >= 0; i--) {\n            this.sendQueue[i].deferred.reject();\n            this.sendQueue.splice(i, 1);\n        }\n    }\n\n    planToReconnect(rpcUrl, options) {\n        if (this.pendingReconnect) {\n            ipcRender.notifyRenderProcessLogWarn('[lib/websocket.planToReconnect] another reconnection is pending');\n            return;\n        }\n\n        this.pendingReconnect = setTimeout(() => {\n            if (this.wsClient == null) {\n                ipcRender.notifyRenderProcessLogWarn('[lib/websocket.planToReconnect] websocket is null');\n                this.pendingReconnect = null;\n                return;\n            }\n\n            if (this.wsClient.readyState === WebSocket.CONNECTING || this.wsClient.readyState === WebSocket.OPEN) {\n                ipcRender.notifyRenderProcessLogWarn('[lib/websocket.planToReconnect] websocket current state is already ' + this.wsClient.readyState);\n                this.pendingReconnect = null;\n                return;\n            }\n\n            this.reconnect(rpcUrl, options);\n            this.pendingReconnect = null;\n        }, options.reconnectInterval);\n\n        ipcRender.notifyRenderProcessLogDebug('[lib/websocket.planToReconnect] next reconnection is pending in ' + options.reconnectInterval + \"ms\");\n    }\n\n    init() {\n        if (this.sendQueue.length) {\n            this.clearSendQueue();\n        }\n\n        if (this.wsClient) {\n            this.wsClient.onopen = null;\n            this.wsClient.onclose = null;\n            this.wsClient.onmessage = null;\n            this.wsClient.terminate();\n            this.wsClient = null;\n        }\n    }\n\n    connect(rpcUrl, options, onOpenCallback, onCloseCallback, onMessageCallback) {\n        this.init();\n\n        this.wsClient = new WebSocket(rpcUrl);\n\n        this.wsClient.onopen = () => {\n            onOpenCallback({\n                client: this.wsClient,\n                url: rpcUrl\n            });\n            this.fireSendQueue();\n        };\n\n        this.wsClient.onclose = () => {\n            let autoReconnect = false;\n\n            if (options.reconnectInterval > 0) {\n                autoReconnect = true;\n                this.planToReconnect(rpcUrl, options);\n            }\n\n            onCloseCallback({\n                client: this.wsClient,\n                url: rpcUrl,\n                autoReconnect: autoReconnect\n            });\n        };\n\n        this.wsClient.onmessage = (event) => {\n            let message = null;\n\n            if (event) {\n                message = event.data;\n            }\n\n            onMessageCallback({\n                client: this.wsClient,\n                url: rpcUrl,\n                success: true,\n                message: message\n            });\n        };\n\n        this.wsClient.onerror = (event) => {\n            // Do Nothing\n        };\n    }\n\n    reconnect(rpcUrl, options) {\n        if (!this.wsClient) {\n            return;\n        }\n\n        const onOpenFn = this.wsClient.onopen;\n        const onCloseFn = this.wsClient.onclose;\n        const onMessageFn = this.wsClient.onmessage;\n        const onErrorFn = this.wsClient.onerror;\n\n        this.init();\n\n        this.wsClient = new WebSocket(rpcUrl);\n        this.wsClient.onopen = onOpenFn;\n        this.wsClient.onclose = onCloseFn;\n        this.wsClient.onmessage = onMessageFn;\n        this.wsClient.onerror = onErrorFn;\n    }\n\n    send(requestContext) {\n        const deferred = {};\n        deferred.promise = new Promise((resolve, reject) => {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n\n        this.sendQueue.push({\n            url: requestContext.url,\n            data: requestContext.data,\n            deferred: deferred\n        });\n\n        if (this.wsClient && this.wsClient.readyState === WebSocket.OPEN) {\n            this.fireSendQueue();\n        }\n\n        return deferred.promise;\n    }\n\n    getReadyState() {\n        if (!this.wsClient) {\n            return null;\n        }\n\n        return this.wsClient.readyState;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WebSocketClient {\n  constructor() {\n    this.wsClient = null;\n    this.sendQueue = [];\n    this.pendingReconnect = null;\n    this.rpcUrl = null;\n    this.options = null;\n    this.onOpenCallback = null;\n    this.onCloseCallback = null;\n    this.onMessageCallback = null;\n  }\n\n  fireSendQueue() {\n    if (this.wsClient && this.wsClient.readyState === WebSocket.OPEN) {\n      for (const msg of this.sendQueue) {\n        this.wsClient.send(JSON.stringify(msg.context));\n        msg.resolve();\n      }\n      this.sendQueue = [];\n    }\n  }\n\n  clearSendQueue() {\n    for (const msg of this.sendQueue) {\n      msg.reject();\n    }\n    this.sendQueue = [];\n  }\n\n  planToReconnect(rpcUrl, options) {\n    clearTimeout(this.pendingReconnect);\n    this.pendingReconnect = setTimeout(() => {\n      this.reconnect(rpcUrl, options);\n    }, 5000);\n  }\n\n  init() {\n    if (this.wsClient) {\n      this.wsClient.close();\n      this.wsClient = null;\n    }\n    this.sendQueue = [];\n    clearTimeout(this.pendingReconnect);\n    this.pendingReconnect = null;\n  }\n\n  connect(rpcUrl, options, onOpenCallback, onCloseCallback, onMessageCallback) {\n    this.rpcUrl = rpcUrl;\n    this.options = options;\n    this.onOpenCallback = onOpenCallback;\n    this.onCloseCallback = onCloseCallback;\n    this.onMessageCallback = onMessageCallback;\n\n    this.init();\n\n    this.wsClient = new WebSocket(rpcUrl, options);\n\n    this.wsClient.addEventListener('open', () => {\n      this.fireSendQueue();\n      if (this.onOpenCallback) this.onOpenCallback();\n    });\n\n    this.wsClient.addEventListener('error', (event) => {\n      console.error('WebSocket error:', event);\n      if (this.onCloseCallback) this.onCloseCallback();\n    });\n\n    this.wsClient.addEventListener('close', (event) => {\n      console.log('WebSocket closed:', event);\n      this.planToReconnect(this.rpcUrl, this.options);\n      if (this.onCloseCallback) this.onCloseCallback();\n    });\n\n    this.wsClient.addEventListener('message', (event) => {\n      if (this.onMessageCallback) this.onMessageCallback(event.data);\n    });\n  }\n\n  reconnect(rpcUrl, options) {\n    this.init();\n    this.connect(rpcUrl, options, this.onOpenCallback, this.onCloseCallback, this.onMessageCallback);\n  }\n\n  send(requestContext) {\n    return new Promise((resolve, reject) => {\n      const msg = { context: requestContext, resolve, reject };\n      if (this.wsClient && this.wsClient.readyState === WebSocket.OPEN) {\n        this.wsClient.send(JSON.stringify(msg.context));\n        resolve();\n      } else {\n        this.sendQueue.push(msg);\n      }\n    });\n  }\n\n  getReadyState() {\n    return this.wsClient ? this.wsClient.readyState : null;\n  }\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes and manages a WebSocket connection, handles events (open, message, error, close), and provides methods for sending data and disconnecting.\n\nClass Description: The WsProvider class encapsulates WebSocket functionality, providing a clean interface for WebSocket communication. It handles connection lifecycle events and ensures proper cleanup when disconnecting.\n\nAttributes:\n#websocket: WebSocket | null - Private field storing the active WebSocket connection instance\n\nMethods:\nconstructor(endpoint: string) -> void - Initializes the WebSocket connection to the specified endpoint\n#connect(endpoint: string) -> void - Private method that establishes the WebSocket connection and sets up event handlers\n#onSocketClose(event: CloseEvent) -> void - Private method handling WebSocket close events\n#onSocketError(error: Event) -> void - Private method handling WebSocket error events\n#onSocketMessage(message: MessageEvent<string>) -> void - Private method handling incoming WebSocket messages\n#onSocketOpen() -> boolean - Private method handling WebSocket open events\nsend(body: string) -> void - Public method for sending data through the WebSocket connection\ndisconnect() -> void - Public method for properly closing the WebSocket connection",
    "Canonical_solution": "import type { Class } from '@polkadot/util/types';\nimport type { JsonRpcResponse, ProviderInterfaceCallback } from '../types.js';\nimport { EventEmitter } from 'eventemitter3';\nimport { isChildClass, isNull, isUndefined } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\n\nclass WsProvider {\n  #websocket: WebSocket | null;\n\n  constructor(endpoint: string) {\n    this.#websocket = null;\n    this.#connect(endpoint);\n  }\n\n  #connect(endpoint: string): void {\n    try {\n      this.#websocket = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket as unknown as Class<WebSocket>, WebSocket)\n        ? new WebSocket(endpoint)\n        : new WebSocket(endpoint, undefined, {});\n\n      if (this.#websocket) {\n        this.#websocket.onclose = this.#onSocketClose;\n        this.#websocket.onerror = this.#onSocketError;\n        this.#websocket.onmessage = this.#onSocketMessage;\n        this.#websocket.onopen = this.#onSocketOpen;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  #onSocketClose(event: CloseEvent): void {\n    this.#websocket = null;\n  }\n\n  #onSocketError(error: Event): void {\n    // Handle error\n  }\n\n  #onSocketMessage(message: MessageEvent<string>): void {\n    const response = JSON.parse(message.data) as JsonRpcResponse<string>;\n    // Process message\n  }\n\n  #onSocketOpen(): boolean {\n    return true;\n  }\n\n  public send(body: string): void {\n    if (!this.#websocket) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.#websocket.send(body);\n  }\n\n  public disconnect(): void {\n    if (this.#websocket) {\n      this.#websocket.close(1000);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WsProvider {\n  constructor(endpoint) {\n    this.connect(endpoint);\n  }\n\n  #connect(endpoint) {\n    this.websocket = new WebSocket(endpoint);\n    this.websocket.addEventListener('open', this.onSocketOpen.bind(this));\n    this.websocket.addEventListener('message', this.onSocketMessage.bind(this));\n    this.websocket.addEventListener('error', this.onSocketError.bind(this));\n    this.websocket.addEventListener('close', this.onSocketClose.bind(this));\n  }\n\n  #onSocketClose(event) {\n    console.log('WebSocket closed:', event);\n  }\n\n  #onSocketError(error) {\n    console.error('WebSocket error:', error);\n  }\n\n  #onSocketMessage(message) {\n    console.log('Received message:', message.data);\n  }\n\n  #onSocketOpen() {\n    return true;\n  }\n\n  send(body) {\n    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n      this.websocket.send(body);\n    }\n  }\n\n  disconnect() {\n    if (this.websocket) {\n      this.websocket.removeEventListener('open', this.onSocketOpen);\n      this.websocket.removeEventListener('message', this.onSocketMessage);\n      this.websocket.removeEventListener('error', this.onSocketError);\n      this.websocket.removeEventListener('close', this.onSocketClose);\n      this.websocket.close();\n      this.websocket = null;\n    }\n  }\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a WebSocket server class for peer-to-peer communication that handles connections, messages, and room management.\n\nClass Description: The SnapdropServer class represents a WebSocket server that facilitates peer-to-peer communication. It manages WebSocket connections, handles incoming messages, and maintains rooms for peer grouping. The server also handles connection headers and keeps connections alive.\n\nAttributes:\n- _wss: [WebSocket.Server] - The WebSocket server instance\n- _rooms: [Object] - A dictionary tracking peers grouped by their IP addresses (rooms)\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers\n- _onConnection(peer: Peer) -> void - Handles new WebSocket connections, sets up message handlers, and joins the peer to a room\n- _onHeaders(headers: Array, response: Object) -> void - Processes HTTP headers during WebSocket handshake, setting cookies if needed\n- _onMessage(sender: Peer, message: string) -> void - Handles incoming messages from peers, routing them to appropriate recipients\n- _send(peer: Peer, message: Object) -> void - Sends a message to a specific peer over WebSocket connection\n- _joinRoom(peer: Peer) -> void - Adds a peer to their respective room (Not shown in reference but implied)\n- _leaveRoom(peer: Peer) -> void - Removes a peer from their room (Not shown in reference but implied)\n- _keepAlive(peer: Peer) -> void - Maintains connection with periodic pings (Not shown in reference but implied)",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass SnapdropServer {\n    constructor(port) {\n        this._wss = new WebSocket.Server({ port: port });\n        this._wss.on('connection', (socket, request) => this._onConnection(new Peer(socket, request)));\n        this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n\n        this._rooms = {};\n    }\n\n    _onConnection(peer) {\n        this._joinRoom(peer);\n        peer.socket.on('message', message => this._onMessage(peer, message));\n        peer.socket.on('error', console.error);\n        this._keepAlive(peer);\n\n        this._send(peer, {\n            type: 'display-name',\n            message: {\n                displayName: peer.name.displayName,\n                deviceName: peer.name.deviceName\n            }\n        });\n    }\n\n    _onHeaders(headers, response) {\n        if (response.headers.cookie && response.headers.cookie.indexOf('peerid=') > -1) return;\n        response.peerId = Peer.uuid();\n        headers.push('Set-Cookie: peerid=' + response.peerId + \"; SameSite=Strict; Secure\");\n    }\n\n    _onMessage(sender, message) {\n        try {\n            message = JSON.parse(message);\n        } catch (e) {\n            return;\n        }\n\n        switch (message.type) {\n            case 'disconnect':\n                this._leaveRoom(sender);\n                break;\n            case 'pong':\n                sender.lastBeat = Date.now();\n                break;\n        }\n\n        if (message.to && this._rooms[sender.ip]) {\n            const recipientId = message.to;\n            const recipient = this._rooms[sender.ip][recipientId];\n            delete message.to;\n            message.sender = sender.id;\n            this._send(recipient, message);\n            return;\n        }\n    }\n\n    _send(peer, message) {\n        if (!peer) return;\n        if (this._wss.readyState !== this._wss.OPEN) return;\n        message = JSON.stringify(message);\n        peer.socket.send(message, error => '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class SnapdropServer {\n  constructor(port) {\n    this._wss = new WebSocket.Server({ port });\n    this._rooms = {};\n    this._wss.on('connection', (socket) => {\n      const peer = new Peer(socket);\n      this._onConnection(peer);\n    });\n    this._wss.on('headers', (headers, response) => {\n      this._onHeaders(headers, response);\n    });\n  }\n\n  _onConnection(peer) {\n    peer.socket.on('message', (message) => {\n      this._onMessage(peer, message.toString());\n    });\n    peer.socket.on('close', () => {\n      this._leaveRoom(peer);\n    });\n    this._joinRoom(peer);\n    this._keepAlive(peer);\n  }\n\n  _onHeaders(headers, response) {\n    // Process headers, set cookies if needed\n    // Example: response.setHeader('Set-Cookie', 'session=123; Path=/');\n  }\n\n  _onMessage(sender, message) {\n    const room = this._rooms[sender.ip];\n    if (room) {\n      room.forEach((peer) => {\n        if (peer !== sender) {\n          this._send(peer, message);\n        }\n      });\n    }\n  }\n\n  _send(peer, message) {\n    peer.socket.send(message);\n  }\n\n  _joinRoom(peer) {\n    const ip = peer.ip;\n    if (!this._rooms[ip]) {\n      this._rooms[ip] = [];\n    }\n    this._rooms[ip].push(peer);\n  }\n\n  _leaveRoom(peer) {\n    const ip = peer.ip;\n    if (this._rooms[ip]) {\n      const index = this._rooms[ip].indexOf(peer);\n      if (index !== -1) {\n        this._rooms[ip].splice(index, 1);\n      }\n    }\n  }\n\n  _keepAlive(peer) {\n    setInterval(() => {\n      peer.socket.ping();\n    }, 30000);\n  }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a function to fetch and process subscribed TV channels from a streaming service API, including authentication and data extraction.\n\nFunction Description: This asynchronous function retrieves subscribed TV channel information from a streaming service by:\n1. Scraping initial configuration data from a webpage\n2. Authenticating with the service using extracted credentials\n3. Fetching subscribed channel packages\n4. Processing and deduplicating channel information\n5. Returning formatted channel data\n\nInput: \n- lang: [String] (optional, default='id') - Language code for the returned channel data\n\nOutput: \n- Returns: [Array<Object>] - An array of channel objects containing:\n  - lang: [String] - The language code\n  - site_id: [String] - The channel ID\n  - name: [String] - The channel name\n- Throws: [Error] - If any HTTP request fails or data parsing fails",
    "Canonical_solution": "function async channels({ lang = 'id' }) {\n    const axios = require('axios')\n    const cheerio = require('cheerio')\n    const result = await axios\n      .get('https://cubmu.com/live-tv')\n      .then(response => response.data)\n      .catch(console.error)\n\n    const $ = cheerio.load(result)\n\n    const config = JSON.parse($('#__NEXT_DATA__').text()).runtimeConfig || {}\n\n    const options = {\n      headers: {\n        Origin: 'https://cubmu.com',\n        Referer: 'https://cubmu.com/live-tv'\n      }\n    }\n    await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/login/external?email=${config.email}&password=${config.password}&deviceId=${config.deviceId}&deviceType=${config.deviceType}&deviceModel=${config.deviceModel}&deviceToken=&serial=&platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n    const subscribedChannels = await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/subscribe_product/list?platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n\n    const channels = []\n    const included = []\n    if (Array.isArray(subscribedChannels.channelPackageList)) {\n      subscribedChannels.channelPackageList.forEach(pkg => {\n        pkg.channelList.forEach(channel => {\n          if (included.indexOf(channel.id) < 0) {\n            included.push(channel.id)\n            channels.push({\n              lang,\n              site_id: channel.id,\n              name: channel.name\n            })\n          }\n        })\n      })\n    }\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getSubscribedChannels(lang = 'id') {\n  try {\n    const configResponse = await fetch('https://example.com/config');\n    if (!configResponse.ok) throw new Error(`Config fetch failed: ${configResponse.status}`);\n    const configData = await configResponse.json();\n    \n    const loginResponse = await fetch('https://example.com/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username: configData.username, password: configData.password })\n    });\n    if (!loginResponse.ok) throw new Error(`Login failed: ${loginResponse.status}`);\n    const loginData = await loginResponse.json();\n    \n    const channelsResponse = await fetch('https://example.com/api/channels', {\n      headers: { 'Authorization': `Bearer ${loginData.token}` }\n    });\n    if (!channelsResponse.ok) throw new Error(`Channels fetch failed: ${channelsResponse.status}`);\n    const channelsData = await channelsResponse.json();\n    \n    const uniqueChannels = [...new Map(channelsData.channels.map(c => [c.site_id, c])).values()];\n    \n    return uniqueChannels.map(channel => ({\n      lang,\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    throw new Error(`Failed to fetch or process channels: ${error.message}`);\n  }\n}"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a WebSocket server in Node.js that handles client connections, tracks connection counts, and provides broadcast functionality to all connected clients.\n\nFunction Description: The function creates and configures a WebSocket server instance. It maintains a count of active connections, logs connection/disconnection events, and provides a broadcast method to send data to all connected clients. The server handles WebSocket connections on the specified port.\n\nInput: \n- port: [Number] - The port number on which the WebSocket server should listen for connections\n\nOutput:\n- Returns: [WebSocket.Server] - An instance of WebSocket server with additional connection tracking and broadcast functionality\n\nAttributes:\n- connectionCount: [Number] - Tracks the number of active WebSocket connections\n\nMethods:\n- broadcast: [Name](data) -> [void] - Sends the provided data to all connected clients that are in OPEN state\n- on: [Name](event, callback) -> [void] - Inherited from WebSocket.Server to handle server events ('connection', 'error', etc.)",
    "Canonical_solution": "function createWebSocketServer(port) {\n    var WebSocket = require('ws');\n    var socketServer = new WebSocket.Server({port: port, perMessageDeflate: false});\n    socketServer.connectionCount = 0;\n    socketServer.on('connection', function(socket, upgradeReq) {\n        socketServer.connectionCount++;\n        console.log(\n            'New WebSocket Connection: ',\n            (upgradeReq || socket.upgradeReq).socket.remoteAddress,\n            (upgradeReq || socket.upgradeReq).headers['user-agent'],\n            '('+socketServer.connectionCount+' total)'\n        );\n        socket.on('close', function(code, message){\n            socketServer.connectionCount--;\n            console.log(\n                'Disconnected WebSocket ('+socketServer.connectionCount+' total)'\n            );\n        });\n    });\n    socketServer.broadcast = function(data) {\n        socketServer.clients.forEach(function each(client) {\n            if (client.readyState === WebSocket.OPEN) {\n                client.send(data);\n            }\n        });\n    };\n    return socketServer;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 90,
    "wrong_result": "const WebSocket = require('ws');\n\nfunction createWebSocketServer(port) {\n  class MyWebSocketServer extends WebSocket.Server {\n    constructor(port) {\n      super({ port });\n      this.connectionCount = 0;\n      this.clients = [];\n      this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n      this.on('connection', (client) => {\n        this.clients.push(client);\n        this.connectionCount++;\n        console.log(`Client connected. Total connections: ${this.connectionCount}`);\n        client.on('close', () => {\n          this.clients = this.clients.filter(c => c !== client);\n          this.connectionCount--;\n          console.log(`Client disconnected. Total connections: ${this.connectionCount}`);\n        });\n      });\n    }\n\n    broadcast(data) {\n      this.clients.forEach(client => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(data);\n        }\n      });\n    }\n\n    on(event, callback) {\n      super.on(event, callback);\n    }\n  }\n\n  return new MyWebSocketServer(port);\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Implement a WebSocket server class in Node.js that can handle client connections, messages, errors, and disconnections.\n\nClass Description: The WebSocketServer class creates and manages a WebSocket server instance, setting up event handlers for various WebSocket events. It provides methods to handle incoming messages, connection closures, and errors.\n\nAttributes:\n- wss: [WebSocket.Server] - The WebSocket server instance created with the specified port.\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers.\n- setupEventHandlers() -> void - Configures event listeners for connection, message, close, and error events.\n- handleMessage(ws: WebSocket, message: string) -> void - Placeholder for message handling logic (to be implemented by the user).\n- handleClose(ws: WebSocket, code: number, reason: string) -> void - Placeholder for connection close handling logic (to be implemented by the user).\n- handleError(ws: WebSocket, error: Error) -> void - Placeholder for error handling logic (to be implemented by the user).",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass WebSocketServer {\n  constructor(port) {\n    this.wss = new WebSocket.Server({ port: port });\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.wss.on('connection', (ws) => {\n      ws.on('message', (message) => {\n        this.handleMessage(ws, message);\n      });\n\n      ws.on('close', (code, reason) => {\n        this.handleClose(ws, code, reason);\n      });\n\n      ws.on('error', (error) => {\n        this.handleError(ws, error);\n      });\n    });\n  }\n\n  handleMessage(ws, message) {\n    // Message handling logic would be implemented here\n  }\n\n  handleClose(ws, code, reason) {\n    // Connection close handling logic would be implemented here\n  }\n\n  handleError(ws, error) {\n    // Error handling logic would be implemented here\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "import { WebSocketServer } from 'ws';\n\nclass WebSocketServer {\n  wss: WebSocketServer;\n\n  constructor(port: number) {\n    this.wss = new WebSocketServer({ port });\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.wss.on('connection', (ws) => {\n      ws.on('message', (message) => {\n        this.handleMessage(ws, message.toString());\n      });\n      ws.on('close', (code, reason) => {\n        this.handleClose(ws, code, reason);\n      });\n      ws.on('error', (error) => {\n        this.handleError(ws, error);\n      });\n    });\n\n    this.wss.on('error', (error) => {\n      this.handleError(null, error);\n    });\n  }\n\n  handleMessage(ws: WebSocket, message: string) {\n    // Placeholder for message handling logic\n  }\n\n  handleClose(ws: WebSocket, code: number, reason: string) {\n    // Placeholder for connection close handling logic\n  }\n\n  handleError(ws: WebSocket, error: Error) {\n    // Placeholder for error handling logic\n  }\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles incoming connections, manages sessions, and processes messages with customizable handlers.\n\nClass Description: The XVIZServer class is a WebSocket server implementation that manages WebSocket connections, delegates session handling to provided handlers, and provides logging capabilities. It wraps the 'ws' library functionality with additional session management features.\n\nAttributes:\n- _server: [WebSocket.Server] - The underlying WebSocket server instance\n- handlers: [Array] - Array of handler objects responsible for managing sessions\n- options: [Object] - Configuration options for the server, merged with defaults\n\nMethods:\n- constructor(handlers, options, callback) -> [XVIZServer] - Initializes the WebSocket server with message handlers, options, and an optional callback. Throws an error if no handlers are provided.\n- get server() -> [WebSocket.Server] - Getter for the underlying WebSocket server instance\n- close(cb) -> [void] - Closes the WebSocket server, accepting an optional callback\n- handleSession(socket, request) -> [Promise<void>] - Handles new WebSocket connections, delegates to handlers for session creation, and closes the connection if no handler accepts it\n- log(...msg) -> [void] - Logs messages using the configured logger if available",
    "Canonical_solution": "const WebSocket = require('ws');\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class XVIZServer {\n  constructor(handlers, options, callback) {\n    const defaultOptions = { port: 8080, host: 'localhost' };\n    this.options = { ...defaultOptions, ...options };\n    if (!handlers || handlers.length === 0) {\n      throw new Error('No handlers provided');\n    }\n    this.handlers = handlers;\n    this._server = new WebSocket.Server({\n      port: this.options.port,\n      host: this.options.host\n    });\n    this._server.on('connection', (socket, request) => {\n      this.handleSession(socket, request);\n    });\n    if (callback) callback();\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    for (const handler of this.handlers) {\n      const result = await handler.handle(socket, request);\n      if (result) {\n        return;\n      }\n    }\n    socket.close();\n  }\n\n  log(...msg) {\n    if (this.options.logger) {\n      this.options.logger(...msg);\n    } else {\n      console.log(...msg);\n    }\n  }\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass HTTPClient {\n  constructor() {\n    this.requestModule = 'axios';\n  }\n\n  async httpRequest(options) {\n    const config = {\n      method: options.method,\n      url: options.url,\n      headers: { ...options.headers },\n      params: options.params ? this.queryStr(options.params) : undefined,\n    };\n\n    if (options.method === 'POST') {\n      if (this.isJson(options.body)) {\n        config.data = JSON.stringify(options.body);\n        config.headers['Content-Type'] = 'application/json';\n      } else if (this.isJSONString(options.body)) {\n        config.data = options.body;\n      } else {\n        config.data = options.body;\n      }\n    }\n\n    const response = await axios(config);\n    return {\n      data: response.data,\n      status: response.status,\n      headers: response.headers,\n    };\n  }\n\n  queryStr(options) {\n    if (!options) return '';\n    const params = new URLSearchParams();\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        params.append(key, options[key]);\n      }\n    }\n    return params.toString();\n  }\n\n  isJSONString(str) {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  isJson(obj) {\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj) && !(obj instanceof Date);\n  }\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript to handle real-time bidirectional communication between clients and the server.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io. It sets up event listeners for client connections, messages, and disconnections. The server broadcasts received messages to all connected clients.\n\nInput:\n- `port` (Number): The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:\n- Returns the `socketServer` instance (Object) which can be used to further configure or interact with the WebSocket server.\n\nNote: The function internally uses the `http` module to create an HTTP server and binds socket.io to it for WebSocket communication. The server logs connection, message, and disconnection events to the console.",
    "Canonical_solution": "const http = require(\"http\");\nconst socketIo = require(\"socket.io\");\n\nfunction setupWebSocketServer(port) {\n    const app = express();\n    const webServer = http.createServer(app);\n    const socketServer = socketIo(webServer, {\"log level\": 1});\n\n    socketServer.on(\"connection\", (socket) => {\n        console.log(\"New client connected\");\n\n        socket.on(\"message\", (data) => {\n            console.log(\"Message received: \", data);\n            socketServer.emit(\"message\", data);\n        });\n\n        socket.on(\"disconnect\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    webServer.listen(port, () => {\n        console.log(\"WebSocket server listening on port: \" + port);\n    });\n\n    return socketServer;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "const http = require('http');\nconst socketIO = require('socket.io');\n\nfunction setupWebSocketServer(port) {\n  const httpServer = http.createServer();\n  const socketServer = socketIO(httpServer);\n\n  socketServer.on('connection', (socket) => {\n    console.log('Client connected');\n    socket.on('message', (msg) => {\n      console.log('Received message:', msg);\n      socket.broadcast.emit('message', msg);\n    });\n    socket.on('disconnect', () => {\n      console.log('Client disconnected');\n    });\n  });\n\n  httpServer.listen(port, () => {\n    console.log(`WebSocket server listening on port ${port}`);\n  });\n\n  return socketServer;\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Write a function that scrapes TV channel information from a webpage, processes the data, and returns a list of channel objects with their details.\n\nFunction Description: The function `getChannels` asynchronously fetches HTML content from a URL, parses it to extract TV channel information, and returns an array of channel objects. Each channel object contains language, site ID, and name. The function uses Axios for HTTP requests and Cheerio for HTML parsing.\n\nInput: None (The function uses an implicit `this.url()` method to generate the target URL)\n\nOutput: Array<Object> - Returns an array of channel objects with the following structure:\n[\n  {\n    lang: string,      // Language code of the channel (e.g., 'tr')\n    site_id: string,   // Unique identifier for the channel\n    name: string       // Name of the channel\n  },\n  ...\n]",
    "Canonical_solution": "async function getChannels() {\n    const channels = {};\n    const axios = require('axios');\n    const data = await axios\n        .get(this.url({ date: dayjs() }))\n        .then(r => r.data)\n        .catch(console.error);\n\n    const $ = cheerio.load(data);\n    $('.channelContent').toArray()\n        .forEach(el => {\n            const item = $(el);\n            const channelId = item.find('.channelDetail .tvGuideResult-box-wholeDates-title')\n                .first()\n                .attr('onclick');\n            if (channelId) {\n                const site_id = channelId.match(/\\s(\\d+)\\)/)[1];\n                if (channels[site_id] === undefined) {\n                    channels[site_id] = {\n                        lang: 'tr',\n                        site_id,\n                        name: item.find('#channelID').val()\n                    };\n                }\n            }\n        });\n\n    return Object.values(channels);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\nimport cheerio from 'cheerio';\n\nasync function getChannels() {\n  const url = this.url();\n  const response = await axios.get(url);\n  const $ = cheerio.load(response.data);\n  const channels = [];\n  $('.channels .channel').each((i, el) => {\n    const name = $(el).find('span.name').text();\n    const lang = $(el).attr('data-lang');\n    const siteId = $(el).attr('data-site-id');\n    channels.push({ lang, site_id: siteId, name });\n  });\n  return channels;\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function installTelemetry() {\n  const telemetryEnabled = process.env.TUNNELMOLE_TELEMETRY === 'true';\n  if (!telemetryEnabled) return;\n\n  const nodeVersion = process.versions.node;\n  const platform = process.platform;\n\n  const telemetryData = { nodeVersion, platform };\n\n  try {\n    await fetch('https://telemetry.example.com/api', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(telemetryData)\n    });\n  } catch (error) {\n    // Handle error silently\n  }\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class SauceLabsClient {\n  constructor() {\n    this.auth = {};\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.username = saucelabsUsername;\n    this.auth.access_token = saucelabsToken;\n  }\n\n  get(path, callback) {\n    const url = `https://api.saucelabs.com/rest/v1/${path}`;\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${this.auth.access_token}`\n      }\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Request failed');\n      }\n      return response.json();\n    })\n    .then(data => callback(null, data))\n    .catch(error => callback(error, null));\n  }\n\n  post(path, data, callback) {\n    const url = `https://api.saucelabs.com/rest/v1/${path}`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.auth.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Request failed');\n      }\n      return response.json();\n    })\n    .then(data => callback(null, data))\n    .catch(error => callback(error, null));\n  }\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using an HTTP POST request and triggers a callback function upon completion or failure.\n\nFunction Description: The function uses Axios to send an HTTP POST request to a specified webhook URL with event and data payload. It triggers a callback function (triggerActivity) when the request succeeds or fails. The request includes custom headers for identification.\n\nInput:\n- url: [String] - The webhook URL to which the POST request will be sent\n- event: [String/Object] - The event information to be sent in the request payload\n- data: [Object] - The data payload to be sent in the request\n- triggerActivity: [Function] - Callback function to be triggered after request completion (takes an optional error parameter)\n\nOutput: [None] - The function doesn't return anything but triggers the callback function",
    "Canonical_solution": "const axios = require(\"axios\");\n\nfunction postWebhook(url, event, data, triggerActivity) {\n    axios.post(url, {event, data}, {headers: {\"user-agent\": \"MySpeed/WebhookAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nasync function sendWebhook(url, event, data, triggerActivity) {\n  try {\n    const response = await axios.post(url, { event, data }, {\n      headers: {\n        'X-Event': 'event-id',\n        'X-Data': 'data-id'\n      }\n    });\n    triggerActivity(null);\n  } catch (error) {\n    triggerActivity(error);\n  }\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Write a function that retrieves TV channel information from multiple regions, processes the data, and returns a unique list of channels based on their site IDs.\n\nFunction Description: The function `channels` makes HTTP GET requests to a TV channel API for multiple regions, collects channel data from all available pages for each region, and returns a deduplicated list of channels. It uses axios for HTTP requests and lodash for data processing.\n\nInput: None (The function uses hardcoded region IDs internally)\n\nOutput: An array of objects representing unique TV channels, where each object contains:\n- lang: string - Language code ('ru' for Russian)\n- name: string - Name of the TV channel\n- site_id: string/number - Unique identifier for the channel on the site\n\nThe output is deduplicated based on the site_id field using lodash's uniqBy function.",
    "Canonical_solution": "async function channels() {\n    const _ = require('lodash')\n    const axios = require('axios')\n\n    const regions = [5506, 1096, 1125, 285]\n    let channels = []\n    for (let region of regions) {\n        const totalPages = await getTotalPageCount(region)\n        const pages = Array.from(Array(totalPages).keys())\n        for (let page of pages) {\n            const data = await axios\n                .get('https://tv.mail.ru/ajax/channel/list/', {\n                    params: { page },\n                    headers: {\n                        cookie: `s=fver=0|geo=${region};`\n                    }\n                })\n                .then(r => r.data)\n                .catch(console.log)\n\n            data.channels.forEach(item => {\n                channels.push({\n                    lang: 'ru',\n                    name: item.name,\n                    site_id: item.id\n                })\n            })\n        }\n    }\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\nimport _ from 'lodash';\n\nasync function channels() {\n  const regions = ['RU', 'US', 'UK'];\n  const allChannels = [];\n\n  for (const region of regions) {\n    let page = 1;\n    while (true) {\n      try {\n        const response = await axios.get(`https://api.example.com/channels?region=${region}&page=${page}`);\n        const channelsData = response.data;\n        if (!channelsData || channelsData.length === 0) break;\n        allChannels.push(...channelsData);\n        page++;\n      } catch (error) {\n        console.error(`Error fetching page ${page} for region ${region}:`, error);\n        break;\n      }\n    }\n  }\n\n  return _.uniqBy(allChannels, 'site_id');\n}\n\nexport default channels;"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n  constructor(repo, token, sha) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = null;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = this.repo && this.token;\n  }\n\n  get() {\n    if (!this.enabled) {\n      console.error('API is disabled');\n      return Promise.resolve({});\n    }\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    const url = `${this.url}/${sanitizedRepo}?token=${this.token}&sha=${this.sha}`;\n    return fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .catch(error => {\n        console.error('Error getting sizes:', error);\n        return Promise.resolve({});\n      });\n  }\n\n  set(values) {\n    if (!this.enabled) {\n      console.error('API is disabled');\n      return Promise.resolve();\n    }\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    const payload = {\n      repo: sanitizedRepo,\n      sha: this.sha,\n      values: values\n    };\n    const url = this.url;\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n      })\n      .catch(error => {\n        console.error('Error setting sizes:', error);\n        return Promise.resolve();\n      });\n  }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchData() {\n  const url = 'https://api.health.gov.il/covid/data';\n  const body = JSON.stringify({ datasets: ['updates', 'patient_stats', 'test_results', 'demographics'] });\n  const headers = new Headers({ 'Content-Type': 'application/json' });\n\n  try {\n    const response = await fetch(url, { method: 'POST', headers, body });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a function to send emails using different email service providers (Mailgun and Sendgrid) through HTTP requests, with error handling and promise-based asynchronous operation.\n\nFunction Description: The function `sendMail` sends an email using a configured transporter (either Mailgun or Sendgrid). It wraps the transporter's send operation in a Promise for better async handling. The transporter is configured to make HTTP requests to the respective email service API.\n\nInput:\n- `to`: [String] - Recipient email address\n- `subject`: [String] - Email subject\n- `text`: [String] - Email body content\n- `options`: [Object] (optional) - Additional email options (defaults to empty object)\n\nOutput:\n- [Promise] - Resolves with email sending success info, or rejects with an error if sending fails.\n\n---\n\nClass Description: (Not applicable, as the reference code is at the function level)",
    "Canonical_solution": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    transporter.sendMail({\n      from: `\"${ config.plugins.email.name || '' }\" <${ config.plugins.email.email || config.plugins.email.username }>`,\n      to,\n      subject,\n      text,\n    }, (error, info) => {\n      if(error) {\n        return reject(error);\n      }\n      return resolve(info);\n    });\n  });\n}\n\n// External libraries and global variables used:\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst config = appRequire('services/config').all();\nlet transporter;\n\n// Mailgun implementation\ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  const form = new FormData();\n  form.append('from', options.from);\n  form.append('to', options.to);\n  form.append('subject', options.subject);\n  form.append('text', options.text);\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: form.getHeaders(),\n    data: form,\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};\n\n// Sendgrid implementation  \ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${ emailConfig.apiKey }`,\n    },\n    data: {\n      personalizations: [{\n        to: [{ email: options.to }]\n      }],\n      from: { email: options.from },\n      subject: options.subject,\n      content: [{\n        type: 'text/plain',\n        value: options.text,\n      }]\n    },\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendMail(to, subject, text, options = {}) {  \n  const message = { to, subject, text, ...options };  \n  const transporter = options.transporter;  \n  return new Promise((resolve, reject) => {  \n    transporter.sendMail(message, (error, info) => {  \n      if (error) {  \n        reject(error);  \n      } else {  \n        resolve(info);  \n      }  \n    });  \n  });  \n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create an asynchronous function that fetches TV channel data from a specified API endpoint and processes it into a standardized format.\n\nFunction Description: The function makes an HTTP GET request to retrieve TV channel information from a remote API. It processes the response to extract relevant channel details (language, site ID, and name) and returns them in a structured array format. The function includes error handling to log any request failures.\n\nInput: None (The function uses a hardcoded API URL and parameters)\n\nOutput: An array of objects where each object represents a TV channel with the following properties:\n- lang: String - The language code for the channel (hardcoded as 'sq' in this case)\n- site_id: String - The unique identifier for the channel from the API\n- name: String - The display name of the channel",
    "Canonical_solution": "async function channels() {\n    const axios = require('axios')\n    const data = await axios\n        .get('https://www.tvim.tv/script/epg/category_channels?category=all&filter=playable')\n        .then(r => r.data)\n        .catch(console.log)\n\n    let channels = []\n    data.data.forEach(item => {\n        channels.push({\n            lang: 'sq',\n            site_id: item.epg_id,\n            name: item.name\n        })\n    })\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getTVChannels() {\n  try {\n    const response = await fetch('https://api.example.com/channels');\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status}`);\n    }\n    const data = await response.json();\n    const channels = data.map(channel => ({\n      lang: 'sq',\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n    return channels;\n  } catch (error) {\n    console.error('Error fetching TV channels:', error);\n    throw error;\n  }\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function downloadVideo(url, desc) {\n  if (!url) return;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error('Network response was not ok');\n    const blob = await response.blob();\n    const blobUrl = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.download = desc;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(blobUrl);\n  } catch (error) {\n    console.error('Error downloading video:', error);\n  }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nclass Tool {\n  constructor() {\n    this._node = null;\n    this._isSurge = false;\n    this._isQuanX = false;\n    this.isSurge = false;\n    this.isQuanX = false;\n    this.isResponse = false;\n\n    if (typeof require === 'function') {\n      this._node = {\n        http: require('http'),\n        https: require('https'),\n        fs: require('fs')\n      };\n      this._isSurge = false;\n      this._isQuanX = false;\n      this.isSurge = false;\n      this.isQuanX = false;\n      this.isResponse = false;\n    } else if (typeof $response !== 'undefined') {\n      this._isSurge = true;\n      this._isQuanX = false;\n      this.isSurge = true;\n      this.isQuanX = false;\n      this.isResponse = true;\n    } else if (typeof $request !== 'undefined') {\n      this._isSurge = false;\n      this._isQuanX = true;\n      this.isSurge = false;\n      this.isQuanX = true;\n      this.isResponse = true;\n    }\n  }\n\n  notify(title, subtitle, message, option) {\n    if (this.isSurge) {\n      $notify(title, subtitle, message, option);\n    } else if (this.isQuanX) {\n      $notification.post(title, subtitle, message, option);\n    }\n  }\n\n  write(value, key) {\n    if (this._node) {\n      this._node.fs.writeFileSync(key, value);\n      return true;\n    } else if (this.isSurge) {\n      $persistentStore.write(key, value);\n      return true;\n    } else if (this.isQuanX) {\n      $prefs.set(key, value);\n      return true;\n    }\n    return false;\n  }\n\n  read(key) {\n    if (this._node) {\n      try {\n        return this._node.fs.readFileSync(key, 'utf8');\n      } catch (e) {\n        return '';\n      }\n    } else if (this.isSurge) {\n      return $persistentStore.read(key);\n    } else if (this.isQuanX) {\n      return $prefs.get(key);\n    }\n    return '';\n  }\n\n  get(options, callback) {\n    if (this._node) {\n      const req = this._node.http.request(options, res => {\n        let data = '';\n        res.on('data', chunk => data += chunk);\n        res.on('end', () => {\n          callback(this._status(res), data);\n        });\n      });\n      req.end();\n    } else if (this.isSurge || this.isQuanX) {\n      $request.get(options, res => {\n        let data = '';\n        res.on('data', chunk => data += chunk);\n        res.on('end', () => {\n          callback(this._status(res), data);\n        });\n      });\n    }\n  }\n\n  post(options, callback) {\n    if (this._node) {\n      const req = this._node.https.request(options, res => {\n        let data = '';\n        res.on('data', chunk => data += chunk);\n        res.on('end', () => {\n          callback(this._status(res), data);\n        });\n      });\n      req.end();\n    } else if (this.isSurge || this.isQuanX) {\n      $request.post(options, res => {\n        let data = '';\n        res.on('data', chunk => data += chunk);\n        res.on('end', () => {\n          callback(this._status(res), data);\n        });\n      });\n    }\n  }\n\n  _status(response) {\n    return {\n      statusCode: response.statusCode,\n      ok: response.statusCode >= 200 && response.statusCode < 300\n    };\n  }\n}\n```"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Implement an asynchronous function that makes an HTTP request using XMLHttpRequest with timeout handling, customizable request options, and proper error management.\n\nFunction Description: The function `_xhrRequestWithTimeout` performs an HTTP request using XMLHttpRequest with configurable method, URL, and request options. It includes timeout handling, response type configuration, custom headers, and proper cleanup of resources. The function returns a Promise that resolves with the XMLHttpRequest object on success or rejects with an error or timeout message.\n\nInput:\n- `method` (string): The HTTP method to use for the request (e.g., 'GET', 'POST').\n- `url` (string): The URL to which the request is sent.\n- `options` (RequestOptions): An object containing additional request configurations:\n  - `responseType` (optional, string): The expected response type (e.g., 'json', 'arraybuffer').\n  - `headers` (optional, object): Key-value pairs representing request headers.\n  - `body` (optional, any): The request payload to send.\n\nOutput:\n- Returns a Promise that:\n  - Resolves with the XMLHttpRequest object if the request succeeds.\n  - Rejects with an error object if the request fails.\n  - Rejects with the string 'timeout' if the request times out.",
    "Canonical_solution": "async function _xhrRequestWithTimeout(method: string, url: string, options: RequestOptions): Promise<XMLHttpRequest> {\n    return new Promise((resolve, reject) => {\n        log('[requests XHR]', method, url);\n        let timedOut = false;\n        const timer = setTimeout(() => {\n            timedOut = true;\n            reject('timeout');\n        }, config.requestTimeout);\n        const xhr = new XMLHttpRequest();\n        xhr.open(method, url, true);\n        if (options.responseType) {\n            xhr.responseType = options.responseType;\n        }\n        if (options.headers) {\n            for (const key in options.headers) {\n                xhr.setRequestHeader(key, options.headers[key]);\n            }\n        }\n        xhr.onload = (): void => {\n            if (timedOut) {\n                return;\n            }\n            clearTimeout(timer);\n            resolve(xhr);\n        };\n        xhr.onerror = (error): void => {\n            if (timedOut) {\n                return;\n            }\n            clearTimeout(timer);\n            reject(error);\n        };\n        let body = options.body;\n        if (typeof (body) === 'object' && !isArrayBufferView(body) && body instanceof ArrayBuffer) {\n            body = new Uint8Array(body);\n        }\n        xhr.send(body);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function _xhrRequestWithTimeout(method, url, options) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    if (options && options.headers) {\n      for (const key in options.headers) {\n        xhr.setRequestHeader(key, options.headers[key]);\n      }\n    }\n    if (options && options.responseType) {\n      xhr.responseType = options.responseType;\n    }\n    if (options && options.body) {\n      xhr.send(options.body);\n    } else {\n      xhr.send();\n    }\n    xhr.timeout = 5000;\n    xhr.addEventListener('load', () => resolve(xhr));\n    xhr.addEventListener('error', (e) => {\n      reject(new Error(`Request failed: ${e.target.status}`));\n    });\n    xhr.addEventListener('timeout', () => {\n      reject('timeout');\n    });\n  });\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a function that handles HTTP requests using XMLHttpRequest in JavaScript, including request configuration, progress tracking, and response handling.\n\nFunction Description: The function `makeRequest` initiates and manages an HTTP request using XMLHttpRequest. It configures the request with provided settings, tracks upload/download progress, handles timeouts, and processes the response. The function supports both successful and error responses, with appropriate callbacks for each scenario.\n\nInput:\n- `resolve`: [Function] - A callback function to handle the final resolution of the request (either success or error).\n- `config`: [Object] - Configuration object containing properties to set on the XMLHttpRequest instance.\n- `method`: [String] - HTTP method for the request (e.g., 'GET', 'POST').\n- `fullUrl`: [String] - The complete URL for the request.\n- `headers`: [Object] - Key-value pairs representing HTTP headers to set on the request.\n- `payload`: [Any] - Data to send with the request (for POST/PUT requests).\n- `defaultTimeout`: [Number] - Timeout duration in milliseconds for the request.\n- `xhrExtra`: [Any] - Additional data to pass to error/timeout handlers.\n- Event handlers:\n  - `onRequestProgress`: [Function] - Callback for upload progress events.\n  - `onRequestStart`: [Function] - Callback when the request starts.\n  - `onRequestEnd`: [Function] - Callback when the request ends.\n  - `onResponseStart`: [Function] - Callback when the response starts.\n  - `onResponseProgress`: [Function] - Callback for download progress events.\n  - `onResponseEnd`: [Function] - Callback when the response ends.\n  - `onTimeoutError`: [Function] - Callback for timeout errors.\n  - `onSuccess`: [Function] - Callback for successful responses.\n  - `onError`: [Function] - Callback for error responses.\n  - `onBeforeRequest`: [Function] - Callback before sending the request.\n  - `createAbortListener`: [Function] - Creates a listener for abort events.\n  - `parseResponse`: [Function] - Parses successful response data.\n  - `parseErrorResponse`: [Function] - Parses error response data.\n  - `getResponseHeaders`: [Function] - Parses raw response headers.\n\nOutput: None (The function uses callbacks to handle results asynchronously).",
    "Canonical_solution": "function makeRequest(resolve) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = defaultTimeout;\n\n    const abort = () => xhr.abort();\n\n    Object.entries(config).forEach(([name, value]) => {\n        xhr[name] = value;\n    });\n\n    xhr.open(method, fullUrl, true);\n\n    Object.entries(headers).forEach(([name, value]) => xhr.setRequestHeader(name, value as string));\n\n    const unmountListener = createAbortListener(0, xhrExtra, abort, resolve);\n\n    xhr.upload.onprogress = onRequestProgress;\n\n    xhr.onloadstart = (): void => {\n        onRequestEnd();\n        onResponseStart();\n    };\n\n    xhr.onprogress = onResponseProgress;\n\n    xhr.onloadend = () => {\n        onResponseEnd();\n        unmountListener();\n    };\n\n    xhr.ontimeout = () => onTimeoutError(0, xhrExtra, resolve);\n\n    xhr.onreadystatechange = (e: Event) => {\n        const event = e as unknown as ProgressEvent<XMLHttpRequest>;\n        const finishedState = 4;\n\n        if (event.target && event.target.readyState === finishedState) {\n            const { status } = event.target;\n            const success = String(status).startsWith(\"2\") || String(status).startsWith(\"3\");\n            const responseHeaders = getResponseHeaders(xhr.getAllResponseHeaders());\n\n            if (success) {\n                const data = parseResponse(event.target.response);\n                onSuccess(data, status, { headers: responseHeaders }, resolve);\n            } else {\n                const data = parseErrorResponse(event.target.response);\n                onError(data, status, { headers: responseHeaders }, resolve);\n            }\n        }\n    };\n\n    onBeforeRequest();\n    onRequestStart();\n\n    xhr.send(payload);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function makeRequest(resolve, config, method, fullUrl, headers, payload, defaultTimeout, xhrExtra, \n  onRequestProgress, onRequestStart, onRequestEnd, onResponseStart, onResponseProgress, onResponseEnd, \n  onTimeoutError, onSuccess, onError, onBeforeRequest, createAbortListener, parseResponse, parseErrorResponse, getResponseHeaders) {\n  const xhr = new XMLHttpRequest();\n  for (let key in config) xhr[key] = config[key];\n  xhr.open(method, fullUrl);\n  for (let key in headers) xhr.setRequestHeader(key, headers[key]);\n  xhr.timeout = defaultTimeout;\n  xhr.addEventListener('load', () => {\n    onSuccess();\n    const response = parseResponse(xhr.responseText, xhr.responseType, xhrExtra);\n    resolve(response);\n  });\n  xhr.addEventListener('error', () => {\n    onError();\n    const error = parseErrorResponse(xhr.statusText, xhr.status, xhrExtra);\n    resolve(error);\n  });\n  xhr.addEventListener('timeout', () => {\n    onTimeoutError(xhrExtra);\n    resolve({ error: 'Timeout' });\n  });\n  xhr.addEventListener('abort', (event) => {\n    const error = createAbortListener(xhrExtra)(event);\n    resolve(error);\n  });\n  xhr.addEventListener('progress', (event) => {\n    if (event.loaded > 0) {\n      if (event.target.upload && event.target.upload.loaded > 0) {\n        onRequestProgress(event.target.upload.loaded, event.target.upload.total);\n      } else {\n        onResponseProgress(event.loaded, event.total);\n      }\n    }\n  });\n  xhr.addEventListener('loadstart', () => onRequestStart());\n  xhr.addEventListener('loadend', () => onRequestEnd());\n  xhr.addEventListener('readystatechange', () => {\n    if (xhr.readyState === 2) onResponseStart();\n    else if (xhr.readyState === 4) onResponseEnd();\n  });\n  onBeforeRequest();\n  xhr.send(payload);\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class DataManURL {\n  constructor(url, type, options) {\n    this.url = url;\n    this._type = type || null;\n    this.urlOpts = options || {};\n    this._size = undefined;\n  }\n\n  getBuffer(callback) {\n    const protocol = this.url.startsWith('https:') ? 'https' : 'http';\n    const parsedUrl = new URL(this.url);\n    const options = {\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port || (protocol === 'http' ? 80 : 443),\n      path: parsedUrl.pathname + parsedUrl.search + parsedUrl.hash,\n      headers: {\n        ...this.urlOpts.headers,\n        Authorization: this.urlOpts.auth ? 'Basic ' + Buffer.from(this.urlOpts.auth).toString('base64') : undefined\n      }\n    };\n\n    const req = protocol === 'https' ? https.request(options, res => {\n      if (res.statusCode >= 400) {\n        callback(new Error(`HTTP error ${res.statusCode}`));\n        return;\n      }\n\n      let buffer = [];\n      res.on('data', chunk => {\n        buffer.push(chunk);\n      });\n\n      res.on('end', () => {\n        const data = Buffer.concat(buffer);\n        this._type = res.headers['content-type'] || this._type;\n        this._size = data.length;\n        callback(null, data);\n      });\n\n    }).on('error', err => {\n      callback(err);\n    });\n\n    req.end();\n  }\n\n  getDataUri(callback) {\n    this.getBuffer((err, buffer) => {\n      if (err) return callback(err);\n      const base64 = buffer.toString('base64');\n      const contentType = this.type();\n      callback(null, `data:${contentType};base64,${base64}`);\n    });\n  }\n\n  createReadStream() {\n    const protocol = this.url.startsWith('https:') ? 'https' : 'http';\n    const parsedUrl = new URL(this.url);\n    const options = {\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port || (protocol === 'http' ? 80 : 443),\n      path: parsedUrl.pathname + parsedUrl.search + parsedUrl.hash,\n      headers: {\n        ...this.urlOpts.headers,\n        Authorization: this.urlOpts.auth ? 'Basic ' + Buffer.from(this.urlOpts.auth).toString('base64') : undefined\n      }\n    };\n\n    const req = protocol === 'https' ? https.request(options) : http.request(options);\n    return req;\n  }\n\n  size(callback) {\n    if (this._size !== undefined) {\n      return callback(null, this._size);\n    }\n\n    this.getBuffer((err, buffer) => {\n      if (err) return callback(err);\n      this._size = buffer.length;\n      callback(null, this._size);\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a function to handle form submission asynchronously using XMLHttpRequest in JavaScript. The function should prevent default form submission, process form data, send it to a server via POST request, and handle the server's response to display a thank-you message upon successful submission.\n\nFunction Description: The function `handleFormSubmit` intercepts form submission events, validates the form data (checking for honeypot fields), disables all buttons during submission, sends the form data to a specified URL via POST request, and processes the server's response to update the UI accordingly.\n\nInput: \n- `event`: [Event Object] - The form submission event that triggers this function. The event object contains the target form element and allows prevention of default submission behavior.\n\nOutput: \n- None (void) - The function does not return any value but performs side effects including:\n  - Preventing default form submission\n  - Disabling form buttons during submission\n  - Sending form data to the server\n  - Updating the UI based on server response (resetting form and showing thank-you message)",
    "Canonical_solution": "function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n\n    if (formData.honeypot) {\n        return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            form.reset();\n            var formElements = form.querySelector(\".form-elements\")\n            if (formElements) {\n                formElements.style.display = \"none\";\n            }\n            var thankYouMessage = form.querySelector(\".thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n        }\n    };\n    var encoded = Object.keys(data).map(function(k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n    }).join('&');\n    xhr.send(encoded);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function handleFormSubmit(event) {\n  event.preventDefault();\n\n  const honeypot = event.target.querySelector('input[name=\"honeypot\"]');\n  if (honeypot && honeypot.value.trim() !== '') {\n    return;\n  }\n\n  const buttons = event.target.querySelectorAll('button');\n  buttons.forEach(button => button.disabled = true);\n\n  const form = event.target;\n  const url = form.action;\n\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', url, true);\n\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      const thankYouMessage = document.getElementById('thank-you-message');\n      if (thankYouMessage) {\n        thankYouMessage.style.display = 'block';\n      }\n      form.reset();\n      buttons.forEach(button => button.disabled = false);\n    } else {\n      console.error('Server error:', xhr.status);\n    }\n  };\n\n  const formData = new FormData(form);\n  xhr.send(formData);\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function sendPostRequest() {\n  const url = 'https://example.com/endpoint';\n  const data = { username: 'user', password: 'pass' };\n\n  const formData = new URLSearchParams(data);\n\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      credentials: 'include'\n    },\n    body: formData\n  })\n  .then(response => response.text())\n  .then(text => console.log('Server response:', text))\n  .catch(error => console.error('Fetch error:', error));\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a function that toggles the featured status of a project by sending an asynchronous HTTP POST request to a server and updates the UI accordingly.\n\nFunction Description: The function `setFeatured` sends a POST request to a server endpoint to toggle the featured status of a specified project. It handles the response asynchronously and updates the UI to reflect the new featured status. The function uses XMLHttpRequest for the HTTP communication and expects a JSON response from the server.\n\nInput: \n- `projectId` [String/Number] - The unique identifier of the project whose featured status is to be toggled.\n- `featured` [Boolean] - The current featured status of the project (true if featured, false otherwise).\n\nOutput: \n- None (void) - The function does not return a value but updates the UI element (div) to display a star (\u2605) if the project is featured or an empty star (\u2606) if it is not. The actual toggling is handled by the server response.",
    "Canonical_solution": "function setFeatured(projectId, featured) {\n    let session = getSessionInfo();\n    var xhr = new XMLHttpRequest()\n    xhr.open(\"POST\", 'featured/' + projectId, true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n    xhr.onreadystatechange = function() {\n        if (this.readyState == 4 && this.status == 200) {\n            featured = JSON.parse(this.responseText);\n            div.innerHTML = featured? '\u2605':'\u2606';\n        }\n    };\n\n    let request = {\n        userId: session.userId,\n        sessionId: session.sessionId,\n        featured: !featured\n    };\n    xhr.send(JSON.stringify(request));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function setFeatured(projectId, featured) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', '/toggle-featured', true);\n  xhr.setRequestHeader('Content-Type', 'application/json');\n  const payload = JSON.stringify({ projectId, featured });\n  xhr.send(payload);\n\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      const response = JSON.parse(xhr.responseText);\n      const newFeatured = response.featured;\n      const starElement = document.getElementById('project-star-' + projectId);\n      starElement.innerHTML = newFeatured ? '\u2605' : '\u2606';\n    }\n  };\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    try {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', 'https://example.com/data', true);\n      xhr.onload = function() {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          sender.postMessage(xhr.responseText);\n        } else {\n          sender.postMessage(`XHR error: ${xhr.status}`);\n        }\n      };\n      xhr.onerror = function() {\n        sender.postMessage('XHR error');\n      };\n      xhr.send();\n    } catch (e) {\n      sender.postMessage(`XHR error: ${e.message}`);\n    }\n  } else if (data === 'fetch') {\n    fetch('https://example.com/data')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Fetch error: ${response.status}`);\n        }\n        return response.text();\n      })\n      .then(text => sender.postMessage(text))\n      .catch(error => sender.postMessage(`Fetch error: ${error.message}`));\n  } else if (data === 'importScripts') {\n    try {\n      importScripts('script.js');\n      sender.postMessage('Script imported successfully');\n    } catch (e) {\n      sender.postMessage(`Error importing script: ${e.message}`);\n    }\n  } else {\n    sender.postMessage('Unexpected message');\n  }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function loadYamlUrl(url, callback) {\n  fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('HTTP error ' + response.status);\n      }\n      return response.text();\n    })\n    .then(text => {\n      callback(text);\n      console.log(text);\n    })\n    .catch(error => {\n      console.error('Error fetching YAML:', error);\n    });\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      isgd: 'is.gd',\n      google: 'goo.gl',\n      budurl: 'budurl.com',\n      snipurl: 'snipurl.com'\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      isgd: async (shortUrl) => {\n        const timeoutPromise = new Promise((resolve, reject) => {\n          setTimeout(() => reject(new Error('Timeout')), this.timeout);\n        });\n        const res = await Promise.race([\n          fetch(`https://is.gd/api/v1/expand?short_url=${shortUrl}`),\n          timeoutPromise\n        ]);\n        if (!res.ok) throw new Error('Failed to expand');\n        const data = await res.json();\n        return data.expanded_url;\n      },\n      google: async (shortUrl) => {\n        const timeoutPromise = new Promise((resolve, reject) => {\n          setTimeout(() => reject(new Error('Timeout')), this.timeout);\n        });\n        const res = await Promise.race([\n          fetch(`https://www.googleapis.com/urlshortener/v1/url?key=YOUR_API_KEY`, {\n            method: 'POST',\n            body: JSON.stringify({ longUrl: shortUrl }),\n            headers: { 'Content-Type': 'application/json' }\n          }),\n          timeoutPromise\n        ]);\n        if (!res.ok) throw new Error('Failed to expand');\n        const data = await res.json();\n        return data.longUrl;\n      },\n      budurl: async (shortUrl) => {\n        const timeoutPromise = new Promise((resolve, reject) => {\n          setTimeout(() => reject(new Error('Timeout')), this.timeout);\n        });\n        const res = await Promise.race([\n          fetch(`https://budurl.com/api/expand?short_url=${shortUrl}`),\n          timeoutPromise\n        ]);\n        if (!res.ok) throw new Error('Failed to expand');\n        const data = await res.json();\n        return data.url;\n      },\n      snipurl: async (shortUrl) => {\n        const timeoutPromise = new Promise((resolve, reject) => {\n          setTimeout(() => reject(new Error('Timeout')), this.timeout);\n        });\n        const res = await Promise.race([\n          fetch(`https://snipurl.com/api/expand?short_url=${shortUrl}`),\n          timeoutPromise\n        ]);\n        if (!res.ok) throw new Error('Failed to expand');\n        const data = await res.json();\n        return data.url;\n      }\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (seen[url]) {\n      callback(new Error('Cycle detected'));\n      return;\n    }\n    seen[url] = true;\n\n    let service = null;\n    for (const key in this.map) {\n      const domain = this.map[key];\n      try {\n        const parsed = new URL(url);\n        if (parsed.hostname === domain) {\n          service = key;\n          break;\n        }\n      } catch (e) {\n        // Invalid URL, skip\n      }\n    }\n\n    if (service) {\n      try {\n        const expandedUrl = await this.APIs[service](url);\n        const expandedParsed = new URL(expandedUrl);\n        const expandedService = this.findService(expandedParsed.hostname);\n        if (expandedService) {\n          this.expand({ url: expandedUrl, depth: depth + 1, seen }, callback);\n        } else {\n          callback(null, { url: expandedUrl, depth, seen, headers: {}, urlp: {} });\n        }\n      } catch (err) {\n        callback(err);\n      }\n    } else {\n      try {\n        const response = await fetch(url, { method: 'HEAD', mode: 'no-cors' });\n        if (response.status >= 300 && response.status < 400) {\n          const location = response.headers.get('Location');\n          if (location) {\n            this.expand({ url: location, depth: depth + 1, seen }, callback);\n          } else {\n            callback(null, { url, depth, seen, headers: response.headers });\n          }\n        } else {\n          callback(null, { url, depth, seen, headers: {} });\n        }\n      } catch (err) {\n        callback(err);\n      }\n    }\n  }\n\n  findService(domain) {\n    for (const key in this.map) {\n      if (this.map[key] === domain) {\n        return key;\n      }\n    }\n    return null;\n  }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst fileUpload = require('express-fileupload');\n\nclass HTTPServer {\n  constructor(port) {\n    this.app = express();\n    this.port = port;\n    this.server = null;\n    this.app.use(fileUpload());\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = http.createServer(this.app);\n      this.server.listen(this.port, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close(() => {\n        this.server = null;\n      });\n    }\n  }\n\n  addRoute(method, path, handler) {\n    this.app[method](path, handler);\n  }\n\n  get(path, handler) {\n    this.addRoute('GET', path, handler);\n  }\n\n  post(path, handler) {\n    this.addRoute('POST', path, handler);\n  }\n\n  put(path, handler) {\n    this.addRoute('PUT', path, handler);\n  }\n\n  delete(path, handler) {\n    this.addRoute('DELETE', path, handler);\n  }\n\n  patch(path, handler) {\n    this.addRoute('PATCH', path, handler);\n  }\n\n  options(path, handler) {\n    this.addRoute('OPTIONS', path, handler);\n  }\n\n  trace(path, handler) {\n    this.addRoute('TRACE', path, handler);\n  }\n\n  head(path, handler) {\n    this.addRoute('HEAD', path, handler);\n  }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Implement a Twitter HTTP client class in JavaScript that handles API requests to Twitter, including request construction, execution, and response processing with error handling and clock synchronization.\n\nClass Description: The TwitterHTTPClient class provides methods to interact with Twitter's REST API. It handles HTTP requests (GET/POST), manages authentication, processes responses, and maintains clock synchronization with Twitter's servers.\n\nAttributes:\n- config: [Object] - Configuration object containing API credentials and settings\n- _twitter_time_minus_local_time_ms: [Number] - Time difference between Twitter's server time and local time in milliseconds\n\nMethods:\n- constructor(config) -> [TwitterHTTPClient] - Initializes the client with configuration\n- request(method, path, params, callback) -> [Promise] - Makes HTTP requests to Twitter API\n- _doRestApiRequest(reqOpts, twitOptions, method, callback) -> [void] - Executes the actual HTTP request\n- _updateClockOffsetFromResponse(resp) -> [void] - Updates the clock offset based on Twitter's server time\n\nMethod Details:\n1. request(method, path, params, callback)\n   - Input:\n     - method: [String] - HTTP method ('GET' or 'POST')\n     - path: [String] - API endpoint path\n     - params: [Object] - Request parameters\n     - callback: [Function] - Callback function for handling response\n   - Output: [Promise] - Resolves with response data or rejects with error\n\n2. _doRestApiRequest(reqOpts, twitOptions, method, callback)\n   - Input:\n     - reqOpts: [Object] - Request options including URL and headers\n     - twitOptions: [Object] - Twitter-specific options\n     - method: [String] - HTTP method\n     - callback: [Function] - Callback for handling response\n   - Output: [void] - Calls callback with response data or error\n\n3. _updateClockOffsetFromResponse(resp)\n   - Input:\n     - resp: [Object] - HTTP response object\n   - Output: [void] - Updates internal clock offset value",
    "Canonical_solution": "var request = require('request');\nvar helpers = require('./helpers');\n\nclass TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params, callback) {\n    var self = this;\n    assert(method == 'GET' || method == 'POST');\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      var _returnErrorToUser = function (err) {\n        if (callback && typeof callback === 'function') {\n          callback(err, null, null);\n        }\n        reject(err);\n      }\n\n      self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n        if (err) {\n          _returnErrorToUser(err);\n          return;\n        }\n\n        var twitOptions = (params && params.twit_options) || {};\n\n        process.nextTick(function () {\n          self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n            self._updateClockOffsetFromResponse(resp);\n\n            if (self.config.trusted_cert_fingerprints) {\n              if (!resp.socket.authorized) {\n                var authErrMsg = resp.socket.authorizationError.toString();\n                var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n              var fingerprint = resp.socket.getPeerCertificate().fingerprint;\n              var trustedFingerprints = self.config.trusted_cert_fingerprints;\n              if (trustedFingerprints.indexOf(fingerprint) === -1) {\n                var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.',\n                                         trustedFingerprints.join(','), fingerprint);\n                var err = new Error(errMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n            }\n\n            if (callback && typeof callback === 'function') {\n              callback(err, parsedBody, resp);\n            }\n\n            resolve({ data: parsedBody, resp: resp });\n            return;\n          });\n        });\n      });\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    var request_method = request[method.toLowerCase()];\n    var req = request_method(reqOpts);\n\n    var body = '';\n    var response = null;\n\n    var onRequestComplete = function () {\n      if (body !== '') {\n        try {\n          body = JSON.parse(body);\n        } catch (jsonDecodeError) {\n          var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n          err.statusCode = response ? response.statusCode: null;\n          err.allErrors.concat({error: jsonDecodeError.toString()});\n          callback(err, body, response);\n          return;\n        }\n      }\n\n      if (typeof body === 'object' && (body.error || body.errors)) {\n        var err = helpers.makeTwitError('Twitter API Error');\n        err.statusCode = response ? response.statusCode: null;\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n\n      callback(err, body, response);\n    }\n\n    req.on('response', function (res) {\n      response = res;\n      req.on('data', function (chunk) {\n        body += chunk.toString('utf8');\n      });\n      req.on('end', function () {\n        onRequestComplete();\n      });\n    });\n\n    req.on('error', function (err) {\n      if (twitOptions.retry &&\n          STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1\n      ) {\n        self.request(method, path, params, callback);\n        return;\n      } else {\n        err.statusCode = null;\n        err.code = null;\n        err.allErrors = [];\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n    });\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    var self = this;\n    if (resp && resp.headers && resp.headers.date &&\n        new Date(resp.headers.date).toString() !== 'Invalid Date'\n    ) {\n      var twitterTimeMs = new Date(resp.headers.date).getTime();\n      self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params) {\n    return new Promise((resolve, reject) => {\n      const reqOpts = {\n        url: `https://api.twitter.com/${path}`,\n        headers: {\n          'Authorization': `Bearer ${this.config.accessToken}`\n        }\n      };\n\n      if (method === 'GET') {\n        reqOpts.url += `?${new URLSearchParams(params)}`;\n      } else if (method === 'POST') {\n        reqOpts.body = JSON.stringify(params);\n      }\n\n      this._doRestApiRequest(reqOpts, {}, method, (err, resp) => {\n        if (err) {\n          reject(err);\n        } else {\n          this._updateClockOffsetFromResponse(resp);\n          resolve(resp);\n        }\n      });\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    fetch(reqOpts.url, {\n      method: method,\n      headers: reqOpts.headers,\n      body: reqOpts.body\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then(data => {\n      callback(null, data);\n    })\n    .catch(error => {\n      callback(error, null);\n    });\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    const serverTime = resp.server_time;\n    const localTime = new Date().getTime();\n    const offset = serverTime - localTime;\n    this._twitter_time_minus_local_time_ms = offset;\n  }\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a function to start an Express server that serves static files and handles client requests.\n\nFunction Description: The function `startServer` initializes an Express application, configures middleware for compression and static file serving, sets up a catch-all route to serve the main HTML file, and starts the server on a specified port.\n\nInput: None\n\nOutput: None (The function starts a server that listens on the specified port and logs the server status to the console.)",
    "Canonical_solution": "function startServer() {\n    var express = require('express');\n    var path = require('path');\n    var compression = require('compression');\n\n    var app = express();\n\n    app.use(compression());\n    app.use(express.static(path.join(__dirname, 'public')));\n\n    app.get('*', function (req, res) {\n        res.sendFile(path.join(__dirname, 'public', 'index.html'));\n    });\n\n    var PORT = process.env.PORT || 8080;\n    app.listen(PORT, function() {\n        console.log('Production Express server running at localhost:' + PORT);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\nconst compression = require('compression');\n\nfunction startServer() {\n  const app = express();\n  app.use(compression());\n  app.use(express.static('public'));\n  app.all('*', (req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n  });\n  const PORT = 3000;\n  app.listen(PORT, () => {\n    console.log(`Server running on http://localhost:${PORT}`);\n  });\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by detecting the shortening service and using the appropriate API or HTTP HEAD request to follow redirects. It handles recursive expansion with depth limiting and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening service names to their associated domains\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration including known URL shortening services and timeout\n- expand(args: [Object], callback: [Function]) -> [void] - The main method that initiates URL expansion\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to be called with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - err: [Error] - Any error encountered (optional)\n      - headers: [Object] - Response headers (optional)\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n\nThe class includes several internal API methods (isgd, googl, budurl, snipurl, generic) that handle specific URL shortening services or generic URL expansion through HTTP HEAD requests. These methods are not meant to be called directly but are used internally by the expand method.",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      isgd: 'is.gd',\n      googl: 'goo.gl',\n      budurl: 'budurl.com',\n      snipurl: 'snipurl.com',\n      generic: 'generic'\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      isgd: this.isgd.bind(this),\n      googl: this.googl.bind(this),\n      budurl: this.budurl.bind(this),\n      snipurl: this.snipurl.bind(this),\n      generic: this.generic.bind(this)\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (seen[url]) {\n      callback(null, { ...args, err: new Error('Cycle detected') });\n      return;\n    }\n    seen[url] = true;\n\n    let service = 'generic';\n    for (const key in this.map) {\n      if (url.includes(this.map[key])) {\n        service = key;\n        break;\n      }\n    }\n\n    this.APIs[service](url, depth, seen, (err, res) => {\n      if (err) {\n        callback(err, { ...args, err });\n        return;\n      }\n\n      if (res.url) {\n        this.expand({ url: res.url, depth: depth + 1, seen }, (err, expandedArgs) => {\n          if (err) {\n            callback(err, { ...args, err });\n          } else {\n            callback(null, { ...expandedArgs, depth: expandedArgs.depth, seen });\n          }\n        });\n      } else {\n        callback(null, { ...args, url, depth, seen });\n      }\n    });\n  }\n\n  isgd(url, depth, seen, callback) {\n    const options = {\n      hostname: 'is.gd',\n      path: '/api/v1/shorten',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'URLExpander/1.0'\n      }\n    };\n\n    const req = require('https').request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.expanded_url) {\n            callback(null, { url: json.expanded_url });\n          } else {\n            callback(new Error('Failed to expand URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response'), null);\n        }\n      });\n    });\n\n    req.on('error', (e) => {\n      callback(e, null);\n    });\n\n    req.write(JSON.stringify({ short_url: url }));\n    req.end();\n  }\n\n  googl(url, depth, seen, callback) {\n    const options = {\n      hostname: 'goo.gl',\n      path: '/shorten',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'URLExpander/1.0'\n      }\n    };\n\n    const req = require('https').request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.long_url) {\n            callback(null, { url: json.long_url });\n          } else {\n            callback(new Error('Failed to expand URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response'), null);\n        }\n      });\n    });\n\n    req.on('error', (e) => {\n      callback(e, null);\n    });\n\n    req.write(JSON.stringify({ short_url: url }));\n    req.end();\n  }\n\n  budurl(url, depth, seen, callback) {\n    const options = {\n      hostname: 'budurl.com',\n      path: '/api/v1/shorten',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'URLExpander/1.0'\n      }\n    };\n\n    const req = require('https').request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.expanded_url) {\n            callback(null, { url: json.expanded_url });\n          } else {\n            callback(new Error('Failed to expand URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response'), null);\n        }\n      });\n    });\n\n    req.on('error', (e) => {\n      callback(e, null);\n    });\n\n    req.write(JSON.stringify({ short_url: url }));\n    req.end();\n  }\n\n  snipurl(url, depth, seen, callback) {\n    const options = {\n      hostname: 'snipurl.com',\n      path: '/api/v1/shorten',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'URLExpander/1.0'\n      }\n    };\n\n    const req = require('https').request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.expanded_url) {\n            callback(null, { url: json.expanded_url });\n          } else {\n            callback(new Error('Failed to expand URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response'), null);\n        }\n      });\n    });\n\n    req.on('error', (e) => {\n      callback(e, null);\n    });\n\n    req.write(JSON.stringify({ short_url: url }));\n    req.end();\n  }\n\n  generic(url, depth, seen, callback) {\n    const options = {\n      hostname: 'localhost',\n      path: '/',\n      method: 'HEAD',\n      headers: {\n        'User-Agent': 'URLExpander/1.0'\n      }\n    };\n\n    const req = require('https').get(options, (res) => {\n      let headers = {};\n      res.on('headers', (h) => {\n        for (const key in h) {\n          headers[key] = h[key];\n        }\n      });\n\n      if (res.statusCode === 301 || res.statusCode === 302) {\n        const location = res.headers.location;\n        if (location) {\n          callback(null, { url: location });\n        } else {\n          callback(new Error('No redirect location found'), null);\n        }\n      } else {\n        callback(null, { url, headers });\n      }\n    });\n\n    req.on('error', (e) => {\n      callback(e, null);\n    });\n\n    req.end();\n  }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const url = 'https://api.example.com/data';\n  const headers = { 'User-Agent': 'MyApp/1.0', 'Authorization': 'Bearer token123' };\n\n  request.get({ url, headers }, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n      return;\n    }\n    if (response.statusCode === 200) {\n      console.log('Response Body:', body);\n    } else {\n      console.error('Request failed with status code:', response.statusCode);\n    }\n  });\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a function to set up an Express server with session management using MongoDB as the session store, and integrate it with Next.js for server-side rendering.\n\nFunction Description: The function `setupServer` initializes an Express server with session management configured to use MongoDB for session storage. It integrates with Next.js for handling server-side rendering and routes all requests to the Next.js request handler. The server listens on a specified port and logs the root URL when ready.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Port number to listen on (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that listens on the specified port and handles requests. It logs the root URL to the console when the server is ready.)",
    "Canonical_solution": "function setupServer() {\n    const express = require('express');\n    const session = require('express-session');\n    const mongoSessionStore = require('connect-mongo');\n    const next = require('next');\n    const mongoose = require('mongoose');\n\n    const dev = process.env.NODE_ENV !== 'production';\n    const MONGO_URL = process.env.MONGO_URL_TEST;\n    const port = process.env.PORT || 8000;\n    const ROOT_URL = `http://localhost:${port}`;\n\n    const app = next({ dev });\n    const handle = app.getRequestHandler();\n\n    const server = express();\n\n    const sessionOptions = {\n        name: process.env.SESSION_NAME,\n        secret: process.env.SESSION_SECRET,\n        store: mongoSessionStore.create({\n            mongoUrl: MONGO_URL,\n            ttl: 14 * 24 * 60 * 60,\n        }),\n        resave: false,\n        saveUninitialized: false,\n        cookie: {\n            httpOnly: true,\n            maxAge: 14 * 24 * 60 * 60 * 1000,\n            domain: 'localhost',\n        },\n    };\n\n    const sessionMiddleware = session(sessionOptions);\n    server.use(sessionMiddleware);\n\n    server.get('*', (req, res) => handle(req, res));\n\n    server.listen(port, (err) => {\n        if (err) throw err;\n        console.log(`> Ready on ${ROOT_URL}`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst next = require('next');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\nconst mongoose = require('mongoose');\n\nfunction setupServer() {\n  const app = express();\n  const nextApp = next({ dev: process.env.NODE_ENV === 'development' });\n  const handle = nextApp.getRequestHandler();\n\n  app.use(session({\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: true,\n    name: process.env.SESSION_NAME,\n    store: new MongoStore({\n      mongoUrl: process.env.MONGO_URL_TEST,\n      collection: 'sessions'\n    }),\n    cookie: { maxAge: 60 * 60 * 1000 }\n  }));\n\n  nextApp.prepare().then(() => {\n    app.all('*', (req, res) => {\n      return handle(req, res);\n    });\n\n    const port = process.env.PORT || 8000;\n    app.listen(port, () => {\n      console.log(`Server ready at http://localhost:${port}/`);\n    });\n  });\n}\n\nmodule.exports = setupServer;"
  }
]