[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Trader {\n  constructor(config) {\n    this.key = config.key;\n    this.secret = config.secret;\n    this.currency = config.currency;\n    this.asset = config.asset;\n    this.pair = `${this.asset}_${this.currency}`;\n    this.name = 'EXMO';\n    this.nonce = 0;\n  }\n\n  api_query(method, params, callback) {\n    const timestamp = new Date().getTime();\n    const nonce = this.nonce++;\n    const payload = {\n      method,\n      params,\n      id: nonce,\n      timestamp,\n      name: this.name\n    };\n\n    const sortedParams = Object.keys(payload).sort().reduce((acc, key) => {\n      acc[key] = payload[key];\n      return acc;\n    }, {});\n\n    const signature = this._sign(sortedParams);\n    const auth = `key=${this.key}&signature=${signature}`;\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': auth\n      },\n      body: JSON.stringify(payload)\n    };\n\n    fetch('https://api.exmo.com/api/2/public/trade', options)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        callback(null, data);\n      })\n      .catch(error => {\n        callback(error, null);\n      });\n  }\n\n  _sign(params) {\n    const sortedKeys = Object.keys(params).sort();\n    let stringToSign = '';\n    for (let i = 0; i < sortedKeys.length; i++) {\n      stringToSign += sortedKeys[i] + '=' + params[sortedKeys[i]];\n      if (i < sortedKeys.length - 1) {\n        stringToSign += '&';\n      }\n    }\n\n    const hmac = crypto.createHmac('sha512', this.secret);\n    hmac.update(stringToSign);\n    return hmac.digest('hex');\n  }\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a class that implements an Express HTTP server with middleware configuration, route definitions, and server startup functionality.\n\nClass Description: The ExpressServer class encapsulates the creation and management of an Express.js web server. It handles server configuration, middleware setup, route definitions, and server startup. The class is designed to be modular, allowing for easy extension of middleware and routes.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number on which the server will listen, either from environment variables or defaulting to 3000\n\nMethods:\n- constructor() -> [void] - Initializes the Express application and sets the default port\n- configureMiddleware() -> [void] - Configures essential middleware including static file serving and body parsing\n- defineRoutes() -> [void] - Defines route handlers for various HTTP methods and paths including GET and POST requests\n- startServer() -> [void] - Starts the HTTP server and begins listening on the specified port\n\nMethods Details:\n- configureMiddleware(): \n  - Adds express.static middleware to serve static files from the 'public' directory\n  - Adds body-parser middleware for parsing request bodies\n  - No input parameters\n  - No return value\n\n- defineRoutes():\n  - Defines a GET route for the home page ('/')\n  - Defines a GET route for the about page ('/about') with dynamic content\n  - Defines a POST route for newsletter signup ('/newsletter') with validation logic\n  - No input parameters\n  - No return value\n\n- startServer():\n  - Starts the server listening on the configured port\n  - Logs server startup information to the console\n  - No input parameters\n  - No return value",
    "Canonical_solution": "var express = require('express');\n\nclass ExpressServer {\n    constructor() {\n        this.app = express();\n        this.port = process.env.PORT || 3000;\n    }\n\n    configureMiddleware() {\n        this.app.use(express.static(__dirname + '/public'));\n        this.app.use(require('body-parser')());\n    }\n\n    defineRoutes() {\n        this.app.get('/', function(req, res) {\n            res.render('home');\n        });\n        \n        this.app.get('/about', function(req,res){\n            res.render('about', { \n                fortune: fortune.getFortune(),\n                pageTestScript: '/qa/tests-about.js' \n            });\n        });\n\n        this.app.post('/newsletter', function(req, res){\n            var name = req.body.name || '', email = req.body.email || '';\n            if(!email.match(VALID_EMAIL_REGEX)) {\n                if(req.xhr) return res.json({ error: 'Invalid name email address.' });\n                req.session.flash = {\n                    type: 'danger',\n                    intro: 'Validation error!',\n                    message: 'The email address you entered was  not valid.',\n                };\n                return res.redirect(303, '/newsletter/archive');\n            }\n            new NewsletterSignup({ name: name, email: email }).save(function(err){\n                if(err) {\n                    if(req.xhr) return res.json({ error: 'Database error.' });\n                    req.session.flash = {\n                        type: 'danger',\n                        intro: 'Database error!',\n                        message: 'There was a database error; please try again later.',\n                    };\n                    return res.redirect(303, '/newsletter/archive');\n                }\n                if(req.xhr) return res.json({ success: true });\n                req.session.flash = {\n                    type: 'success',\n                    intro: 'Thank you!',\n                    message: 'You have now been signed up for the newsletter.',\n                };\n                return res.redirect(303, '/newsletter/archive');\n            });\n        });\n    }\n\n    startServer() {\n        this.app.listen(this.port, function(){\n            console.log('Express started on http://localhost:' + this.port + '; press Ctrl-C to terminate.');\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "class ExpressServer {\n  constructor() {\n    this.app = express();\n    this.port = process.env.PORT || 3000;\n  }\n\n  configureMiddleware() {\n    this.app.use(express.static('public'));\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  defineRoutes() {\n    this.app.get('/', (req, res) => {\n      res.send('Welcome to the home page!');\n    });\n\n    this.app.get('/about', (req, res) => {\n      res.send('This is the about page with dynamic content.');\n    });\n\n    this.app.post('/newsletter', (req, res) => {\n      const { name, email } = req.body;\n      if (!name || !email) {\n        return res.status(400).send('Name and email are required.');\n      }\n      res.send(`Thank you, ${name}, for subscribing with email: ${email}`);\n    });\n  }\n\n  startServer() {\n    this.app.listen(this.port, () => {\n      console.log(`Server is running on http://localhost:${this.port}`);\n    });\n  }\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      'is.gd': this.isgd.bind(this),\n      'goo.gl': this.googl.bind(this),\n      'budurl.com': this.budurl.bind(this),\n      'snipurl.com': this.snipurl.bind(this)\n    };\n    this.timeout = 5000;\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (seen[url]) {\n      callback({ error: 'Infinite loop detected' });\n      return;\n    }\n    seen[url] = true;\n\n    const service = this._getServiceFromUrl(url);\n    if (service && this.map[service]) {\n      this.map[service](args, (err, result) => {\n        if (err) {\n          callback({ error: err.message });\n          return;\n        }\n        if (result.url) {\n          if (depth < 5) {\n            this.expand({ url: result.url, depth: depth + 1, seen }, callback);\n          } else {\n            callback(result);\n          }\n        } else {\n          callback(result);\n        }\n      });\n    } else {\n      this.generic(args, callback);\n    }\n  }\n\n  _getServiceFromUrl(url) {\n    const domains = Object.keys(this.map);\n    for (let i = 0; i < domains.length; i++) {\n      if (url.includes(domains[i])) {\n        return domains[i];\n      }\n    }\n    return null;\n  }\n\n  isgd(args, callback) {\n    const { url, depth, seen } = args;\n    const options = {\n      hostname: 'is.gd',\n      path: `/expand/${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const req = require('http').request(options, res => {\n      if (res.statusCode >= 400) {\n        callback({ error: `Error expanding ${url}: ${res.statusMessage}` });\n        return;\n      }\n\n      let body = '';\n      res.on('data', chunk => {\n        body += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const response = JSON.parse(body);\n          callback({ url: response.url });\n        } catch (e) {\n          callback({ error: `Invalid response from is.gd: ${body}` });\n        }\n      });\n    });\n\n    req.on('error', err => {\n      callback({ error: `Error expanding ${url}: ${err.message}` });\n    });\n\n    req.end();\n  }\n\n  googl(args, callback) {\n    const { url, depth, seen } = args;\n    const options = {\n      hostname: 'goo.gl',\n      path: `/shorten?url=${encodeURIComponent(url)}`,\n      method: 'POST',\n      timeout: this.timeout\n    };\n\n    const req = require('http').request(options, res => {\n      if (res.statusCode >= 400) {\n        callback({ error: `Error expanding ${url}: ${res.statusMessage}` });\n        return;\n      }\n\n      let body = '';\n      res.on('data', chunk => {\n        body += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const response = JSON.parse(body);\n          callback({ url: response.short_url });\n        } catch (e) {\n          callback({ error: `Invalid response from goo.gl: ${body}` });\n        }\n      });\n    });\n\n    req.on('error', err => {\n      callback({ error: `Error expanding ${url}: ${err.message}` });\n    });\n\n    req.end();\n  }\n\n  budurl(args, callback) {\n    const { url, depth, seen } = args;\n    const options = {\n      hostname: 'budurl.com',\n      path: `/expand?u=${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const req = require('http').request(options, res => {\n      if (res.statusCode >= 400) {\n        callback({ error: `Error expanding ${url}: ${res.statusMessage}` });\n        return;\n      }\n\n      let body = '';\n      res.on('data', chunk => {\n        body += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const response = JSON.parse(body);\n          callback({ url: response.url });\n        } catch (e) {\n          callback({ error: `Invalid response from budurl.com: ${body}` });\n        }\n      });\n    });\n\n    req.on('error', err => {\n      callback({ error: `Error expanding ${url}: ${err.message}` });\n    });\n\n    req.end();\n  }\n\n  snipurl(args, callback) {\n    const { url, depth, seen } = args;\n    const options = {\n      hostname: 'snipurl.com',\n      path: `/expand?url=${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const req = require('http').request(options, res => {\n      if (res.statusCode >= 400) {\n        callback({ error: `Error expanding ${url}: ${res.statusMessage}` });\n        return;\n      }\n\n      let body = '';\n      res.on('data', chunk => {\n        body += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const response = JSON.parse(body);\n          callback({ url: response.url });\n        } catch (e) {\n          callback({ error: `Invalid response from snipurl.com: ${body}` });\n        }\n      });\n    });\n\n    req.on('error', err => {\n      callback({ error: `Error expanding ${url}: ${err.message}` });\n    });\n\n    req.end();\n  }\n\n  generic(args, callback) {\n    const { url, depth, seen } = args;\n    const options = {\n      hostname: new URL(url).hostname,\n      path: new URL(url).pathname,\n      method: 'HEAD',\n      timeout: this.timeout\n    };\n\n    const req = require('http').request(options, res => {\n      if (res.statusCode >= 400) {\n        callback({ error: `Error expanding ${url}: ${res.statusMessage}` });\n        return;\n      }\n\n      let location = res.headers.location;\n      if (location) {\n        if (depth < 5) {\n          this.expand({ url: location, depth: depth + 1, seen }, callback);\n        } else {\n          callback({ url: location });\n        }\n      } else {\n        callback({ url });\n      }\n    });\n\n    req.on('error', err => {\n      callback({ error: `Error expanding ${url}: ${err.message}` });\n    });\n\n    req.end();\n  }\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server using the Express framework in JavaScript, with middleware configurations for request processing and static file serving.\n\nFunction Description: The function `createServer` initializes an Express application, configures various middleware for logging, request parsing, and static file serving, and starts an HTTP server listening on a specified port. It also includes environment-specific error handling for development mode.\n\nInput: None (The function does not take any parameters; it uses environment variables like `process.env.PORT` for configuration.)\n\nOutput: None (The function does not return any value; it starts an HTTP server that listens on the specified port and logs a message upon successful startup.)",
    "Canonical_solution": "function createServer() {\n    var express = require('express');\n    var http = require('http');\n    var path = require('path');\n\n    var app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded());\n    app.use(express.methodOverride());\n    app.use(express.static(path.join(__dirname, '/public')));\n    app.use(express.static(path.join(__dirname, '/tests')));\n\n    if ('development' == app.get('env')) {\n        app.use(express.errorHandler());\n    }\n\n    http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express server listening on port ' + app.get('port'));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "```javascript\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware for logging requests\napp.use((req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\n  next();\n});\n\n// Middleware for parsing JSON request bodies\napp.use(express.json());\n\n// Middleware for static file serving\napp.use(express.static('public'));\n\n// Error handling middleware for development\nif (process.env.NODE_ENV === 'development') {\n  app.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something went wrong in development mode');\n  });\n}\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a function that sets up an Express server with middleware configuration, route handling, and server initialization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with essential middleware (CORS, static file serving, JSON body parsing), configures route handlers, and starts listening on a specified port. It handles both API routes and serves static HTML files.\n\nInput: None (The function uses imported modules and configuration from './src/config' and './src/routes')\n\nOutput: None (The function's side effect is starting an HTTP server that listens on the configured port)",
    "Canonical_solution": "function setupExpressServer() {\n    const bodyParser = require('body-parser');\n    const express = require('express');\n    const path = require('path');\n    const cors = require('cors');\n    const config = require('./src/config');\n    const routes = require('./src/routes');\n\n    const app = express();\n\n    app.enable('trust proxy');\n    app.use(cors());\n    app.use(express.static(path.join(__dirname, 'www')));\n    app.use(bodyParser.json());\n\n    app.get('/v2', (req, res) => res.sendFile(path.join(__dirname, 'www/index.html')));\n    app.use(routes);\n\n    app.listen(config.PORT, err => {\n        if (err) console.error(err);\n        console.log('Server started on ' + config.PORT);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nconst app = express();\n\nconst config = require('./src/config');\nconst routes = require('./src/routes');\n\napp.use(cors());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.json());\n\napp.use('/api', routes.api);\napp.use('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\n});\n\napp.listen(config.PORT, () => {\n  console.log(`Server is running on port ${config.PORT}`);\n});"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TSClient {\n  constructor(query, cb) {\n    this.search = {\n      q: query,\n      since_id: null,\n      rcount: 100,\n      id: this._generateId(query)\n    };\n    this.id = this._generateId(query);\n    this.new_since_id = null;\n    cb(this);\n  }\n\n  syncSearch(callback) {\n    this._walker({\n      ts: this,\n      search: this.search,\n      cb: callback,\n      page: 1,\n      results: [],\n      new_since_id: this.new_since_id\n    });\n  }\n\n  set(search) {\n    this.search = search;\n    this._saveState();\n  }\n\n  _walker(s) {\n    const { ts, search, cb, page, results, new_since_id } = s;\n    const params = {\n      q: search.q,\n      since_id: search.since_id,\n      count: search.rcount,\n      page: page\n    };\n    // Simulate API call to Twitter\n    setTimeout(() => {\n      const mockResults = this._generateMockResults(params);\n      const updatedSinceId = new_since_id || mockResults[0].id_str;\n      const nextSinceId = mockResults[mockResults.length - 1].id_str;\n      const updatedSearch = {\n        ...search,\n        since_id: updatedSinceId,\n        page: page + 1\n      };\n      ts.set(updatedSearch);\n      results.push(...mockResults);\n      if (page < 10) {\n        s.page = page + 1;\n        s.results = results;\n        s.new_since_id = nextSinceId;\n        ts._walker(s);\n      } else {\n        cb(results);\n      }\n    }, 500);\n  }\n\n  _generateId(query) {\n    return require('crypto').createHash('md5').update(query).digest('hex');\n  }\n\n  _saveState() {\n    require('fs').writeFileSync(`search-${this.id}.json`, JSON.stringify(this.search));\n  }\n\n  _generateMockResults(params) {\n    const results = [];\n    for (let i = 0; i < params.count; i++) {\n      results.push({\n        id_str: `tweet-${Date.now() + i}`,\n        text: `Mock tweet ${i} for search \"${params.q}\"`,\n        user: {\n          screen_name: `user${i}`\n        }\n      });\n    }\n    return results;\n  }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\nconst https = require('https');\nconst fs = require('fs');\n\nconst app = express();\n\n// Serve static files from the parent directory\nconst parentDir = path.join(__dirname, '..');\napp.use(express.static(parentDir));\n\n// Additional route handlers from a separate module\nconst routes = require('./routes');\napp.use(routes);\n\n// Get port from environment variable or default to 3000\nconst port = process.env.PORT || 3000;\n\n// Start the server\nconst server = app.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n\n// Handle SSL if needed (example with HTTPS)\n// const options = {\n//   key: fs.readFileSync(path.join(__dirname, 'key.pem')),\n//   cert: fs.readFileSync(path.join(__dirname, 'cert.pem'))\n// };\n// const server = https.createServer(options, app);\n// server.listen(port, () => {\n//   console.log(`Server is running on port ${port} with HTTPS`);\n// });\n\nmodule.exports = server;"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to handle incoming requests, pipe the request data to individual files, and manage client connections. The server should record each connection's data to a separate file and provide a simple HTML upload form for root requests.\n\nFunction Description: The `createServer` function initializes an HTTP server that listens for incoming connections. Each connection's request data is piped to a uniquely named file. For non-root requests, it returns request metadata in JSON format. For root requests (`/`), it serves an HTML upload form. The function tracks connection counts and logs connection/disconnection events.\n\nInput: None (The function takes no parameters but uses `process.env.PORT` environment variable as a fallback port)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server that persists until stopped)",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "```javascript\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n  const port = process.env.PORT || 3000;\n  let connectionCount = 0;\n\n  const server = http.createServer((req, res) => {\n    if (req.url === '/') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n        <html>\n          <body>\n            <h1>Upload Form</h1>\n            <form method=\"post\" enctype=\"multipart/form-data\">\n              <input type=\"file\" name=\"file\" />\n              <input type=\"submit\" value=\"Upload\" />\n            </form>\n          </body>\n        </html>\n      `);\n    } else {\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({\n        method: req.method,\n        url: req.url,\n        headers: req.headers\n      }));\n    }\n  });\n\n  server.on('connection', (socket) => {\n    connectionCount++;\n    console.log(`Connection established - Total connections: ${connectionCount}`);\n  });\n\n  server.on('close', () => {\n    console.log(`Connection closed - Total connections: ${connectionCount}`);\n  });\n\n  server.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}`);\n  });\n\n  return server;\n}\n\ncreateServer();\n```"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const url = 'https://example.com/api';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer your_token_here'\n  };\n  const data = JSON.stringify({ key: 'value' });\n\n  request({\n    url: url,\n    method: 'POST',\n    headers: headers,\n    body: data\n  }, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n    } else if (response.statusCode === 200) {\n      console.log('Response:', body);\n    } else {\n      console.error('Request failed with status code:', response.statusCode);\n    }\n  });\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. For each connection, it creates a unique file to store the raw HTTP request data. The server handles regular requests by responding with connection information and provides an HTML upload form for the root path. The server tracks active connections and logs connection/disconnection events.\n\nInput: None (The function takes no parameters but uses environment variable `PORT` for configuration)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server that writes to files)\n\nNote: The function maintains internal state including:\n- A connection counter\n- An active HTTP server instance\n- File streams for each connection\n- Logging of connection events to console",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "```javascript\nfunction createServer() {\n  const http = require('http');\n  const fs = require('fs');\n  const path = require('path');\n  const os = require('os');\n\n  const PORT = process.env.PORT || 3000;\n  let connectionCounter = 0;\n  const activeConnections = [];\n\n  const server = http.createServer((req, res) => {\n    if (req.url === '/') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n        <html>\n          <body>\n            <h1>Upload File</h1>\n            <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n              <input type=\"file\" name=\"file\" required />\n              <input type=\"submit\" value=\"Upload\" />\n            </form>\n          </body>\n        </html>\n      `);\n      return;\n    }\n\n    if (req.url.startsWith('/upload')) {\n      let formData = '';\n      req.on('data', chunk => {\n        formData += chunk;\n      });\n\n      req.on('end', () => {\n        const parsedData = new URLSearchParams(formData);\n        const fileName = parsedData.get('file');\n        const filePath = path.join(os.tmpdir(), fileName);\n\n        fs.writeFile(filePath, '', (err) => {\n          if (err) {\n            res.writeHead(500, { 'Content-Type': 'text/plain' });\n            res.end('Error writing file');\n            return;\n          }\n          res.writeHead(200, { 'Content-Type': 'text/plain' });\n          res.end('File uploaded successfully');\n        });\n      });\n      return;\n    }\n\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end(`Connection ID: ${connectionCounter}\\nRequest URL: ${req.url}`);\n  });\n\n  server.on('connection', (socket) => {\n    console.log(`Connection established`);\n    connectionCounter++;\n    const filePath = path.join(os.tmpdir(), `connection-${connectionCounter}.log`);\n    const fileStream = fs.createWriteStream(filePath, { flags: 'a' });\n    activeConnections.push({ id: connectionCounter, stream: fileStream });\n  });\n\n  server.on('close', () => {\n    console.log(`Connection closed`);\n    activeConnections.forEach(conn => {\n      conn.stream.end();\n    });\n  });\n\n  server.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n  });\n}\n\ncreateServer();\n```"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a JavaScript class that implements a server capable of handling HTTP requests and piping data to responses, with support for live reload functionality and error handling.\n\nClass Description: The `Server` class is designed to create an HTTP server that can handle incoming requests, pipe data to responses (particularly for live reload functionality), and manage server lifecycle events. It supports both standalone operation and integration with existing Express-like applications.\n\nAttributes:\n- options: [Object] - Configuration options for the server including livereload file path and port number.\n- clients: [Object] - Storage for connected clients (used for live reload functionality).\n- server: [http.Server] - The underlying HTTP server instance.\n- app: [Object] - Optional Express-like application instance for integration.\n- port: [Number] - The port number the server is listening on.\n\nMethods:\n- constructor(options) -> [Server] - Initializes the server with given options, setting defaults for livereload path and port.\n- configure(app) -> [Server] - Configures the server to work with an existing Express-like application.\n- handler(req, res, next) -> [Server] - Handles incoming HTTP requests, supporting both middleware and direct handling modes.\n- livereload(req, res) -> [void] - Pipes the livereload JavaScript file to the response.\n- listen(port, fn) -> [void] - Starts the server listening on the specified port.\n- close(req, res) -> [void] - Closes the server and optionally ends a response.\n- error(e) -> [void] - Handles and logs server errors.\n\nNote: The class demonstrates inter-process communication through HTTP and file system operations, particularly in the `livereload` method where it pipes file contents directly to HTTP responses.",
    "Canonical_solution": "var fs = require('fs');\nvar http = require('http');\n\nclass Server {\n  constructor(options) {\n    this.options = options || {};\n    this.options.livereload = this.options.livereload || path.join(__dirname, 'public/livereload.js');\n    this.options.port = parseInt(this.options.port || 35729, 10);\n    this.clients = {};\n    this.configure(this.options.app);\n  }\n\n  configure(app) {\n    if(!app) {\n      this.server = http.createServer(this.handler.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    var self = this;\n    this.app = app;\n\n    this.app.listen = function(port, done) {\n      done = done || function() {};\n      var srv = self.server = http.createServer(app);\n      srv.on('error', self.error.bind(self));\n      srv.on('close', self.close.bind(self));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler(req, res, next) {\n    var middleware = typeof next === 'function';\n    if(middleware) {\n      this.handle(req, res, next);\n      return this;\n    }\n\n    req\n      .on('end', this.handle.bind(this, req, res))\n      .on('data', function(chunk) {\n        req.data = req.data || '';\n        req.data += chunk;\n      });\n\n    return this;\n  }\n\n  livereload(req, res) {\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server.listen(port, fn);\n  }\n\n  close(req, res) {\n    if(res) res.end();\n    if(this.server._handle) this.server.close();\n  }\n\n  error(e) {\n    console.error('Error:', e.message);\n    console.error(e.stack);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "class Server {\n  constructor(options) {\n    this.options = { ...options, livereload: options.livereload || '/livereload.js', port: options.port || 3000 };\n    this.clients = {};\n    this.server = null;\n    this.app = null;\n    this.port = this.options.port;\n  }\n\n  configure(app) {\n    this.app = app;\n    return this;\n  }\n\n  handler(req, res, next) {\n    if (this.app) {\n      this.app(req, res, next);\n    } else {\n      next();\n    }\n  }\n\n  livereload(req, res) {\n    const path = this.options.livereload;\n    if (req.url === path) {\n      res.setHeader('Content-Type', 'application/javascript');\n      res.write(`(function() { var c = document.createElement('script'); c.src = '${path}'; document.head.appendChild(c); })();`);\n      res.end();\n    }\n  }\n\n  listen(port, fn) {\n    this.port = port || this.options.port;\n    this.server = require('http').createServer(this.handler.bind(this));\n    this.server.on('request', (req, res) => {\n      if (req.url === this.options.livereload) {\n        this.livereload(req, res);\n      } else {\n        this.handler(req, res);\n      }\n    });\n    this.server.on('error', this.error.bind(this));\n    this.server.listen(this.port, () => {\n      if (fn) fn();\n    });\n  }\n\n  close(req, res) {\n    if (res) {\n      res.end();\n    }\n    if (this.server) {\n      this.server.close();\n    }\n  }\n\n  error(e) {\n    console.error('Server error:', e);\n  }\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. Each connection's request data is piped to a unique file. The server handles different request types, including file uploads via a simple HTML form, and returns appropriate responses. The server also logs connection activities.\n\nInput: None (The function uses environment variables or defaults for configuration, specifically the `PORT` environment variable or defaults to 8080.)\n\nOutput: None (The function creates and starts an HTTP server that runs indefinitely, logging activities to the console and writing request data to files.)\n\nNote: The function does not explicitly return any value but has side effects of creating a running server and writing files to the filesystem.",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "```javascript\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n  const port = process.env.PORT || 8080;\n\n  http.createServer((req, res) => {\n    const logFilePath = path.join(__dirname, 'logs', `${Date.now()}.log`);\n    const logFile = fs.createWriteStream(logFilePath, { flags: 'a' });\n\n    logFile.write(`[${new Date().toISOString()}] ${req.method} ${req.url}\\n`);\n\n    req.on('data', (chunk) => {\n      logFile.write(`Request data: ${chunk.toString()}\\n`);\n    });\n\n    req.on('end', () => {\n      logFile.end();\n    });\n\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, world!\\n');\n  }).listen(port, () => {\n    console.log(`Server running at http://localhost:${port}/`);\n  });\n}\n\ncreateServer();\n```"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files with specific Content Security Policy (CSP) rules, using pipe to stream file contents to the response.\n\nFunction Description: The function `createServer` creates and returns an HTTP server instance that serves static files from the root directory. It handles incoming requests by resolving the file path, applying CSP headers for security, and piping the file content to the response. If the request URL is '/', it defaults to serving 'index.html'.\n\nInput: None\n\nOutput: Returns an instance of `http.Server` configured to serve static files with CSP headers.",
    "Canonical_solution": "function createServer() {\n  const http = require('http');\n  const send = require('send');\n  const path = require('path');\n  const root = require('rootrequire');\n\n  return http.createServer(function (req, res) {\n    const url = req.url === '/' ? '/index.html' : req.url;\n    const file = path.resolve(root, url.slice(1));\n\n    const cspRules = [\n      `default-src 'self' https://cdnjs.cloudflare.com`,\n      `img-src * data: blob:`,\n      `media-src * data: blob:`,\n      `font-src https://fonts.googleapis.com https://fonts.gstatic.com`,\n      `style-src 'self' 'unsafe-inline' https://fonts.googleapis.com`,\n      `script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com`,\n      `worker-src 'self' blob:`\n    ];\n\n    res.setHeader('content-security-policy', cspRules.join('; '));\n\n    send(req, file).pipe(res);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n  return http.createServer((req, res) => {\n    let filePath = req.url === '/' ? 'index.html' : req.url;\n    filePath = path.join(__dirname, filePath);\n\n    fs.readFile(filePath, (err, data) => {\n      if (err) {\n        res.writeHead(404);\n        res.end('File not found');\n        return;\n      }\n\n      res.setHeader('Content-Security-Policy', \"default-src 'self'; script-src 'self' https://example.com; style-src 'self' https://example.com;\");\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(data);\n    });\n  });\n}\n\nmodule.exports = createServer;"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files, using Node.js's built-in `http` and `fs` modules. The server should handle different MIME types and pipe file contents to the response stream.\n\nFunction Description: The `createServer` function initializes an HTTP server that listens on port 5000. It serves static files from the local file system, automatically determining the appropriate MIME type based on the file extension. If a requested file doesn't exist, it logs a warning. The function uses streaming to efficiently pipe file contents to the HTTP response.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server)",
    "Canonical_solution": "function createServer() {\n  var http = require('http'), fs = require('fs'), mimeTypes = {\n    'html': 'text/html',\n    'css': 'text/css',\n    'js': 'text/javascript',\n    'json': 'application/json',\n    'png': 'image/png',\n    'jpg': 'image/jpg'\n  };\n\n  http.createServer(function (req, res) {\n    var file = (req.url === '/') ? 'index.html' : \".\" + req.url;\n    var ext = require('path').extname(file),\n      type = (mimeTypes[ext] ? mimeTypes[ext] : '');\n\n    fs.exists(file, function (exists) {\n      if (exists) {\n        res.writeHead(200, {'Content-Type': type});\n        fs.createReadStream(file).pipe(res);\n      } else {\n        console.warn(file, ' does not exit');\n      }\n    });\n  }).listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n  const server = http.createServer((req, res) => {\n    if (req.method === 'GET') {\n      const filePath = path.join(__dirname, 'public', req.url === '/' ? 'index.html' : req.url);\n      fs.readFile(filePath, (err, data) => {\n        if (err) {\n          console.warn(`File not found: ${filePath}`);\n          res.writeHead(404);\n          res.end('File not found');\n          return;\n        }\n        const mimeType = getMimeTypes(filePath);\n        res.setHeader('Content-Type', mimeType);\n        res.end(data);\n      });\n    } else {\n      res.writeHead(405);\n      res.end('Method Not Allowed');\n    }\n  });\n\n  server.listen(5000, () => {\n    console.log('Server running on port 5000');\n  });\n}\n\nfunction getMimeTypes(filePath) {\n  const ext = path.extname(filePath);\n  const mimeTypes = {\n    '.html': 'text/html',\n    '.css': 'text/css',\n    '.js': 'application/javascript',\n    '.json': 'application/json',\n    '.png': 'image/png',\n    '.jpg': 'image/jpeg',\n    '.jpeg': 'image/jpeg',\n    '.gif': 'image/gif',\n    '.txt': 'text/plain'\n  };\n  return mimeTypes[ext] || 'application/octet-stream';\n}\n\ncreateServer();"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a JavaScript class that implements an HTTP server capable of serving files from a specified directory, with additional features like directory listing and error handling.\n\nClass Description: The `Server` class represents an HTTP server that serves files from a specified directory path. It handles file requests, directory listings, and various error scenarios. The server can be started and stopped programmatically, and it maintains active connections for proper cleanup.\n\nAttributes:\n\n- config: [Object] - Configuration object containing server settings like port and path\n- _http: [http.Server] - Internal HTTP server instance\n- sockets: [Array] - Array to keep track of active socket connections\n- path: [String] - Base path from which files are served\n\nMethods:\n\n- constructor(config) -> [Server instance] - Initializes the server with given configuration\n- updateServer() -> [void] - Sets up server options and request handling logic\n- start(callback) -> [void] - Starts the HTTP server on the configured port\n- stop(callback) -> [void] - Stops the HTTP server and closes all active connections\n\nThe server handles these special cases:\n1. Automatic directory listing when index.html is not found\n2. Proper redirection for directory requests\n3. Error handling for missing files or directories\n4. Connection management for clean shutdowns\n\nThe implementation uses Node.js core modules (http, fs, path) along with third-party modules (send, marked) for enhanced functionality.",
    "Canonical_solution": "const http = require('http');\nconst send = require('send');\nconst marked = require('marked');\nconst fs = require('fs');\nconst path = require('path');\n\nclass Server {\n  constructor(config) {\n    this.config = config || {};\n    this._http = null;\n    this.sockets = [];\n    this.path = this.config.path || '';\n    \n    this.updateServer();\n  }\n\n  updateServer() {\n    marked.setOptions({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: true,\n      smartLists: true,\n      smartypants: false\n    });\n\n    const html = fs.readFileSync(path.join('lib', 'public', 'directory.html'));\n\n    this._http = http.createServer((req, res) => {\n      function redirect() {\n        res.statusCode = 301;\n        res.setHeader('Location', req.url + '/');\n        res.end('Redirecting to ' + req.url + '/');\n      }\n\n      function procError(err) {\n        if (err.message.indexOf('ENOENT') >= 0) {\n          const p = path.dirname(err.message.match(/'(.*?)'/)[1]) || '';\n          const bn = path.basename(err.message.match(/'(.*?)'/)[1]) || '';\n          \n          if (bn === 'index.html') {\n            fs.readdir(p, (err, files) => {\n              if (err) {\n                res.statusCode = 500;\n                res.end();\n                return;\n              }\n              \n              const dirs = files.filter(el => fs.statSync(path.join(p, el)).isDirectory())\n                .map(el => {\n                  const stat = fs.statSync(path.join(p, el));\n                  return `<tr class='dir'>\n                    <td><a href=\"./${el}/\">${el}</a></td>\n                    <td>&lt;Directory&gt;</td>\n                    <td>&lt;Directory&gt;</td>\n                    <td>${stat.mtime}</td>\n                  </tr>`;\n                });\n                \n              const filesList = files.filter(el => !fs.statSync(path.join(p, el)).isDirectory())\n                .map(el => {\n                  const stat = fs.statSync(path.join(p, el));\n                  const ext = path.extname(el).substr(1);\n                  return `<tr class='file'>\n                    <td><a href=\"./${el}\">${el}</a></td>\n                    <td>${ext.toUpperCase()} File</td>\n                    <td>${(stat.size/1024).toFixed(2)} KB</td>\n                    <td>${stat.mtime}</td>\n                  </tr>`;\n                });\n                \n              res.statusCode = 200;\n              res.end(html.toString().replace('<!-- BODY -->', dirs.join('') + filesList.join('')));\n            });\n            return;\n          }\n        }\n        \n        res.statusCode = err.status || 500;\n        res.end(err.message);\n      }\n\n      try {\n        send(req, require('url').parse(req.url).pathname)\n          .from(this.path)\n          .on('error', procError)\n          .on('directory', redirect)\n          .pipe(res);\n      } catch (e) {\n        procError(e);\n      }\n    });\n\n    this._http.on('connection', (socket) => {\n      this.sockets.push(socket);\n      socket.setTimeout(4000);\n      socket.on('close', () => {\n        this.sockets.splice(this.sockets.indexOf(socket), 1);\n      });\n    });\n  }\n\n  start(callback) {\n    this._http.listen(this.config.port, () => {\n      callback && callback();\n    });\n  }\n\n  stop(callback) {\n    this.sockets.forEach(socket => socket.destroy());\n    this._http.close(() => {\n      callback && callback();\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "class Server {\n  constructor(config) {\n    this.config = config;\n    this._http = null;\n    this.sockets = [];\n    this.path = config.path || '.';\n  }\n\n  updateServer() {\n    const { port } = this.config;\n    this._http = http.createServer((req, res) => {\n      this.handleRequest(req, res);\n    });\n\n    this._http.on('connection', (socket) => {\n      this.sockets.push(socket);\n    });\n\n    this._http.on('error', (err) => {\n      console.error('Server error:', err);\n    });\n  }\n\n  start(callback) {\n    if (!this._http) {\n      this.updateServer();\n    }\n\n    this._http.listen(this.config.port, () => {\n      if (callback) callback(null, this._http);\n    });\n  }\n\n  stop(callback) {\n    if (this._http) {\n      this._http.close(() => {\n        this.sockets.forEach(socket => socket.end());\n        if (callback) callback(null, this._http);\n      });\n    } else {\n      if (callback) callback(null, this._http);\n    }\n  }\n\n  handleRequest(req, res) {\n    const filePath = path.join(this.path, req.url);\n    const fileSystemPath = path.resolve(filePath);\n\n    fs.access(fileSystemPath, fs.F_OK, (err) => {\n      if (err) {\n        this.handleError(res, 404, 'File not found');\n        return;\n      }\n\n      if (fs.statSync(fileSystemPath).isDirectory()) {\n        this.handleDirectory(req, res, filePath);\n        return;\n      }\n\n      const send = require('send');\n      send(req, filePath, { root: this.path }).pipe(res);\n    });\n  }\n\n  handleDirectory(req, res, dirPath) {\n    if (req.method !== 'GET') {\n      this.handleError(res, 405, 'Method not allowed');\n      return;\n    }\n\n    const indexHtml = path.join(dirPath, 'index.html');\n    fs.access(indexHtml, fs.F_OK, (err) => {\n      if (!err) {\n        res.writeHead(301, { Location: `${req.headers.host}/${dirPath}` });\n        res.end();\n        return;\n      }\n\n      const files = fs.readdirSync(dirPath);\n      const html = `\n        <html>\n          <head><title>Directory Listing</title></head>\n          <body>\n            <h1>Directory Listing for ${dirPath}</h1>\n            <ul>\n              ${files.map(file => `<li><a href=\"${encodeURIComponent(file)}\">${file}</a></li>`).join('\\n')}\n            </ul>\n          </body>\n        </html>\n      `;\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(html);\n    });\n  }\n\n  handleError(res, code, message) {\n    res.writeHead(code, { 'Content-Type': 'text/plain' });\n    res.end(message);\n  }\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement an OAuth server class that handles GitHub OAuth authentication flow, including starting a server to receive the authorization code and exchanging it for an access token.\n\nClass Description: The OAuthServer class represents a server that facilitates GitHub OAuth authentication. It creates an Express server to handle the OAuth callback, exchanges the authorization code for an access token using GitHub's API, and provides methods to start and stop the server.\n\nAttributes:\n- options: [Object] - Configuration object containing client credentials and server settings\n- prompt: [Object] - Reference to an external prompt object used to signal completion of authentication\n- app: [Object] - Express application instance for handling HTTP requests\n- server: [Object] - HTTP server instance created by Express\n- token: [String|null] - Stores the obtained OAuth access token\n\nMethods:\n- constructor(options) -> [OAuthServer] - Initializes the OAuth server with configuration options and sets up the Express route for handling OAuth callbacks\n- start() -> [Promise] - Starts the HTTP server on the configured port and returns a promise that resolves when the server is ready or rejects on error\n- stop() -> [void] - Stops the HTTP server and cleans up resources",
    "Canonical_solution": "const express = require('express');\nconst axios = require('axios');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = this.options.prompt;\n    this.app = express();\n    this.app.get('/', (req, res) => {\n      const code = req.query.code;\n      axios\n        .post(\n          `https://github.com/login/oauth/access_token?client_secret=${\n            this.options.client_secret\n          }&client_id=${this.options.client_id}&code=${code}`,\n          {},\n          {\n            headers: {\n              Accept: 'application/json'\n            }\n          }\n        )\n        .then(response => {\n          const accessToken = response.data.access_token;\n          this.token = accessToken;\n          res.send('Enquirer: Github OAuth Server is up');\n          this.prompt.submit();\n        })\n        .catch(e => console.log('axios error', e));\n    });\n    this.token = null;\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.options.port, err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    this.server.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = options.prompt;\n    this.app = express();\n    this.server = http.createServer(this.app);\n    this.token = null;\n\n    this.app.get('/github/callback', (req, res) => {\n      const code = req.query.code;\n      if (code) {\n        this.exchangeCodeForToken(code).then(token => {\n          this.token = token;\n          this.prompt.resolve(token);\n          res.redirect('/');\n        }).catch(err => {\n          console.error('Error exchanging code for token:', err);\n          res.status(500).send('Error exchanging code for token');\n        });\n      } else {\n        res.redirect('/');\n      }\n    });\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.options.port, () => {\n        resolve(this.server);\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close(() => {\n        console.log('Server closed');\n      });\n    }\n  }\n\n  async exchangeCodeForToken(code) {\n    const { client_id, client_secret, redirect_uri } = this.options;\n    const response = await fetch('https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json'\n      },\n      body: new URLSearchParams({\n        client_id,\n        client_secret,\n        code,\n        redirect_uri\n      })\n    });\n\n    const data = await response.json();\n    if (response.ok) {\n      return data.access_token;\n    } else {\n      throw new Error(`GitHub OAuth error: ${data.message}`);\n    }\n  }\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "```javascript\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createFileServer() {\n  const server = http.createServer((req, res) => {\n    const filePath = path.join(__dirname, 'static', req.url);\n\n    fs.exists(filePath, (exists) => {\n      if (!exists) {\n        res.statusCode = 404;\n        res.end('404 Not Found');\n        return;\n      }\n\n      fs.readFile(filePath, (err, data) => {\n        if (err) {\n          res.statusCode = 500;\n          res.end('Internal Server Error');\n          return;\n        }\n\n        const mimeType = getMimeType(path.extname(filePath));\n        res.setHeader('Content-Type', mimeType);\n        res.end(data);\n      });\n    });\n  });\n\n  server.listen(1338, () => {\n    console.log('Server running on port 1338');\n  });\n}\n\nfunction getMimeType(extension) {\n  switch (extension) {\n    case '.html':\n      return 'text/html';\n    case '.css':\n      return 'text/css';\n    case '.js':\n      return 'application/javascript';\n    case '.jpg':\n    case '.jpeg':\n      return 'image/jpeg';\n    case '.png':\n      return 'image/png';\n    default:\n      return 'application/octet-stream';\n  }\n}\n\ncreateFileServer();\n```"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data with authentication, and responds to commands.\n\nFunction Description: The code provides functions to create and manage a TCP server that listens for client connections, receives and validates data packets, processes commands, and sends responses. It includes packet validation using MD5 hashing with a timestamp and password for security.\n\nInput:\n- createTCPServer:\n  - host: string - The host address to bind to\n  - port: number - The port number to listen on\n  - password: string - The authentication password\n  - commandHandler: function - Async function to handle commands (accepts data and code parameters)\n\n- receiveData:\n  - receive: object - Contains accumulated data Buffer and socket reference\n  - data: Buffer - New data chunk received\n  - password: string - Authentication password\n  - commandHandler: function - Command handler function\n\n- checkData:\n  - receive: object - Contains accumulated data Buffer and socket reference\n  - password: string - Authentication password\n  - commandHandler: function - Command handler function\n\n- checkCode:\n  - data: Buffer - Received command data\n  - password: string - Authentication password\n  - code: Buffer - Received authentication code\n\n- pack:\n  - data: object - Response data to package (contains code and optional data)\n\nOutput:\n- createTCPServer: Returns a net.Server instance\n- receiveData: void (modifies receive.data in place)\n- checkData: void (may send responses via socket)\n- checkCode: boolean - Returns true if authentication is valid\n- pack: Buffer - Returns formatted packet Buffer",
    "Canonical_solution": "const net = require('net');\n\nfunction createTCPServer(host, port, password, commandHandler) {\n  const server = net.createServer(socket => {\n    const receive = {\n      data: Buffer.from(''),\n      socket,\n    };\n    socket.on('data', data => {\n      receiveData(receive, data, password, commandHandler);\n    });\n    socket.on('error', (err) => {\n      throw err;\n    });\n  }).on('error', (err) => {\n    throw err;\n  });\n\n  server.listen({\n    port,\n    host,\n  }, () => {\n    console.log(`server listen on ${ host }:${ port }`);\n  });\n\n  return server;\n}\n\nfunction receiveData(receive, data, password, commandHandler) {\n  receive.data = Buffer.concat([receive.data, data]);\n  checkData(receive, password, commandHandler);\n}\n\nfunction checkData(receive, password, commandHandler) {\n  const buffer = receive.data;\n  let length = 0;\n  let data;\n  let code;\n  if(buffer.length < 2) { return; }\n  length = buffer[0] * 256 + buffer[1];\n  if(buffer.length >= length + 2) {\n    data = buffer.slice(2, length - 2);\n    code = buffer.slice(length - 2);\n    if(!checkCode(data, password, code)) {\n      receive.socket.end(pack({ code: 2 }));\n      return;\n    }\n    commandHandler(data, code).then(s => {\n      receive.socket.end(pack({ code: 0, data: s }));\n    }).catch(err => {\n      let code = -1;\n      if(err === 'invalid command') { code = 1; }\n      receive.socket.end(pack({ code }));\n    });\n    if(buffer.length > length + 2) {\n      checkData(receive, password, commandHandler);\n    }\n  }\n}\n\nfunction checkCode(data, password, code) {\n  const time = Number.parseInt(data.slice(0, 6).toString('hex'), 16);\n  if(Math.abs(Date.now() - time) > 10 * 60 * 1000) {\n    return false;\n  }\n  const command = data.slice(6).toString();\n  const md5 = crypto.createHash('md5').update(time + command + password).digest('hex');\n  return md5.substr(0, 8) === code.toString('hex');\n}\n\nfunction pack(data) {\n  const message = JSON.stringify(data);\n  const dataBuffer = Buffer.from(message);\n  const length = dataBuffer.length;\n  const lengthBuffer = Buffer.from(('0000000000000000' + length.toString(16)).substr(-8), 'hex');\n  const pack = Buffer.concat([lengthBuffer, dataBuffer]);\n  return pack;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "net.createServer((socket) => {\n  const receive = { data: Buffer.alloc(0), socket };\n  socket.on('data', (data) => {\n    receive.data = Buffer.concat([receive.data, data]);\n    receiveData(receive, data, password, commandHandler);\n  });\n  socket.on('end', () => {\n    if (receive.data.length > 0) {\n      checkData(receive, password, commandHandler);\n    }\n  });\n}).listen(host, port);\n\nfunction receiveData(receive, data, password, commandHandler) {\n  receive.data = Buffer.concat([receive.data, data]);\n  while (receive.data.length >= 4) {\n    const len = receive.data.readUInt32LE(0);\n    if (receive.data.length < len) break;\n    const packet = receive.data.slice(0, len);\n    receive.data = receive.data.slice(len);\n    checkData({ data: packet, socket: receive.socket }, password, commandHandler);\n  }\n}\n\nfunction checkData(receive, password, commandHandler) {\n  const data = receive.data;\n  const md5 = require('crypto').createHash('md5');\n  const timestamp = Date.now();\n  const hash = md5.update(data).digest('hex');\n  if (hash !== password) {\n    receive.socket.write(new Buffer.from('AUTH_FAILED', 'utf8'));\n    return;\n  }\n  const code = data.slice(4);\n  if (!checkCode(data, password, code)) {\n    receive.socket.write(new Buffer.from('CODE_FAILED', 'utf8'));\n    return;\n  }\n  commandHandler(data, code);\n}\n\nfunction checkCode(data, password, code) {\n  const md5 = require('crypto').createHash('md5');\n  const timestamp = Date.now();\n  const hash = md5.update(code).digest('hex');\n  return hash === password;\n}\n\nfunction pack(data) {\n  const code = new Buffer.from('AUTH_OK', 'utf8');\n  const packet = Buffer.concat([code, data]);\n  return packet;\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a TCP server using Node.js's built-in 'net' module to handle client connections and data exchange.\n\nFunction Description: The function creates and starts a TCP server that listens on a specified port. When a client connects, the server sends a greeting message (\"Hello.\") and logs any incoming data from the client to the console.\n\nInput: \n- port: [number] - The port number on which the TCP server should listen for incoming connections.\n\nOutput: \n- None (The function creates and starts a server but does not return any value).",
    "Canonical_solution": "const net = require(\"net\");\n\nfunction createTCPServer(port) {\n    const server = net.createServer(socket => {\n        socket.write(\"Hello.\");\n        socket.on(\"data\", data => {\n            console.log(data.toString());\n        });\n    });\n    server.listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "net.createServer((socket) => {\n  socket.write('Hello.\\n');\n  socket.on('data', (data) => {\n    console.log(`Received: ${data}`);\n  });\n}).listen(process.argv[2], () => {\n  console.log(`Server listening on port ${process.argv[2]}`);\n});"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a TCP server class in JavaScript that can handle both regular and TLS-encrypted connections, manage client connections, and provide methods to start and destroy the server.\n\nClass Description: The MockServer class is a TCP server implementation that can be configured to use either regular TCP or TLS encryption. It manages server lifecycle, client connections, and provides methods to start and stop the server gracefully.\n\nAttributes:\n- host: [String] - The host address the server binds to\n- port: [Number] - The port number the server listens on\n- family: [String] - The IP address family (e.g., 'ipv4')\n- server: [Object] - The underlying TCP/TLS server instance\n- tlsEnabled: [Boolean] - Flag indicating if TLS is enabled\n- state: [String] - Current server state ('stopped', 'running', or 'destroyed')\n- connections: [Number] - Count of active client connections\n- sockets: [Array] - Array of active client sockets\n\nMethods:\n- constructor(port, host, options) -> [void] - Initializes the server with specified port, host, and options (including TLS configuration)\n- start() -> [Promise] - Starts the server and returns a promise that resolves when listening\n- destroy() -> [Promise] - Gracefully shuts down the server and returns a promise that resolves when complete",
    "Canonical_solution": "const net = require('net');\nconst tls = require('tls');\n\nclass MockServer {\n  constructor(port, host, options) {\n    // Save the settings\n    this.host = host;\n    this.port = port;\n    this.family = 'ipv4';\n\n    // Create a server socket\n    this.server = options.tls ? tls.createServer(options) : net.createServer(options);\n    this.tlsEnabled = !!options.tls;\n\n    // state\n    this.state = 'stopped';\n\n    // Number of connections\n    this.connections = 0;\n\n    // sockets\n    this.sockets = [];\n  }\n\n  /**\n   * Start the TCP server\n   */\n  start() {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self.server.on('error', err => {\n        reject(err);\n      });\n\n      const connectionEventName = self.tlsEnabled ? 'secureConnection' : 'connection';\n      self.server.on(connectionEventName, c => {\n        self.connections = self.connections + 1;\n        self.sockets.push(c);\n\n        c.on('error', e => {\n          console.warn('connection error: ', e);\n        });\n\n        c.on('close', () => {\n          self.connections = self.connections - 1;\n          const index = self.sockets.indexOf(c);\n          if (index !== -1) {\n            self.sockets.splice(index, 1);\n          }\n        });\n      });\n\n      self.server.listen(self.port, self.host, () => {\n        // update address information if necessary\n        self.host = self.server.address().address;\n        self.port = self.server.address().port;\n        self.family = self.server.address().family;\n\n        resolve(self);\n      });\n\n      self.state = 'running';\n    });\n  }\n\n  /**\n   * Destroy the TCP server\n   */\n  destroy() {\n    const self = this;\n    if (self.state === 'destroyed') {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      self.sockets.forEach(socket => socket.destroy());\n      self.server.close(err => {\n        if (err) return reject(err);\n        self.state = 'destroyed';\n        resolve();\n      });\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class MockServer {\n  constructor(port, host, options) {\n    this.host = host;\n    this.port = port;\n    this.family = options && options.family || 'ipv4';\n    this.tlsEnabled = options && options.tls ? true : false;\n    this.state = 'stopped';\n    this.connections = 0;\n    this.sockets = [];\n    this.server = null;\n  }\n\n  async start() {\n    if (this.state !== 'stopped') {\n      throw new Error('Server is already running');\n    }\n\n    this.state = 'running';\n\n    const serverOptions = {};\n    if (this.tlsEnabled) {\n      serverOptions.ssl = {\n        key: options.tls.key,\n        cert: options.tls.cert\n      };\n    }\n\n    this.server = net.createServer((socket) => {\n      this.connections++;\n      this.sockets.push(socket);\n\n      socket.on('data', (data) => {\n        // Handle client data\n      });\n\n      socket.on('end', () => {\n        this.connections--;\n        this.sockets = this.sockets.filter(s => s !== socket);\n      });\n\n      socket.on('error', (err) => {\n        console.error('Socket error:', err);\n      });\n    });\n\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.port, this.host, this.family, (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      });\n    });\n  }\n\n  async destroy() {\n    if (this.state === 'destroyed') {\n      return;\n    }\n\n    this.state = 'destroyed';\n\n    return new Promise((resolve, reject) => {\n      if (this.server) {\n        this.server.close((err) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's 'net' module that can handle client connections, respond to incoming data, and manage server lifecycle events.\n\nClass Description: The Server class represents a TCP server that listens on a dynamically assigned port. It handles client connections, processes incoming data, and sends appropriate responses. The server can be started, stopped, and connections can be dropped.\n\nAttributes:\n- server: [Object] - The TCP server instance created using the 'net' module\n- socket: [Object] - The current client socket connection\n- response: [Buffer|Object] - The predefined response to send to clients (optional)\n\nMethods:\n- constructor(response) -> [Server] - Initializes a new Server instance with an optional response buffer/object\n- start(cb) -> [void] - Starts the server on a random available port and invokes the callback with connection details (host and port)\n- drop() -> [void] - Terminates the current client connection\n- close(cb) -> [void] - Stops the server and invokes the callback when complete",
    "Canonical_solution": "var net = require('net');\n\nclass Server {\n  constructor(response) {\n    this.server = undefined;\n    this.socket = undefined;\n    this.response = response;\n  }\n\n  start(cb) {\n    this.server = net.createServer(\n      function(socket) {\n        this.socket = socket;\n        if (this.response) {\n          this.socket.on(\n            'data',\n            function(data) {\n              if (data.length == 8) {\n                this.socket.write(Buffer.from('N', 'utf8'));\n              } else if (!data[0]) {\n                this.socket.write(buffers.authenticationOk());\n              } else {\n                this.socket.write(this.response);\n              }\n            }.bind(this)\n          );\n        }\n      }.bind(this)\n    );\n\n    const host = 'localhost';\n    this.server.listen({ host, port: 0 }, () => {\n      const port = this.server.address().port;\n      cb({\n        host,\n        port,\n      });\n    });\n  }\n\n  drop() {\n    this.socket.destroy();\n  }\n\n  close(cb) {\n    this.server.close(cb);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class Server {\n  constructor(response) {\n    this.server = net.createServer();\n    this.socket = null;\n    this.response = response;\n  }\n\n  start(cb) {\n    this.server.listen(0, () => {\n      const address = this.server.address();\n      cb(null, address.address, address.port);\n      this.server.on('connection', (socket) => {\n        this.socket = socket;\n        socket.on('data', (data) => {\n          if (this.response) {\n            socket.write(this.response);\n          }\n        });\n      });\n    });\n  }\n\n  drop() {\n    if (this.socket) {\n      this.socket.destroy();\n      this.socket = null;\n    }\n  }\n\n  close(cb) {\n    this.server.close(() => {\n      cb();\n    });\n  }\n}"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's built-in 'net' module to handle client connections, data parsing, and server lifecycle events.\n\nClass Description: TcpReader is an EventEmitter-based class that manages a TCP server instance, handles client connections, processes incoming data through a custom parser, and manages server lifecycle events. It's designed to work within a transporter system for inter-process communication.\n\nAttributes:\n- server: [Object] - The TCP server instance created by the net module\n- opts: [Object] - Configuration options including port and maxPacketSize\n- transporter: [Object] - Reference to the parent transporter object\n- Promise: [Object] - Reference to the Promise implementation used by the transporter\n- logger: [Object] - Logger instance for logging events and errors\n- sockets: [Array] - Array of currently connected client sockets\n\nMethods:\n- listen() -> [Promise] - Starts the TCP server on the configured port and resolves with the actual port number when listening\n- onTcpClientConnected(socket: [Object]) -> [void] - Handles new client connections, sets up data parsing and error handling\n- closeSocket(socket: [Object]) -> [void] - Closes and removes a specific client socket\n- close() -> [void] - Stops the server and closes all client connections",
    "Canonical_solution": "const net = require(\"net\");\nconst EventEmitter = require(\"events\");\nconst Parser = require(\"./parser\");\n\nclass TcpReader extends EventEmitter {\n\tconstructor(transporter, opts) {\n\t\tsuper();\n\n\t\tthis.server = null;\n\t\tthis.opts = opts;\n\t\tthis.transporter = transporter;\n\t\tthis.Promise = transporter.broker.Promise;\n\t\tthis.logger = transporter.logger;\n\n\t\tthis.sockets = [];\n\t}\n\n\tlisten() {\n\t\treturn new this.Promise((resolve, reject) => {\n\t\t\tconst server = net.createServer(socket => this.onTcpClientConnected(socket));\n\n\t\t\tserver.on(\"error\", err => {\n\t\t\t\tthis.logger.error(\"Server error.\", err);\n\n\t\t\t\tif (reject) reject(err);\n\t\t\t});\n\n\t\t\tlet h = this.opts.port;\n\n\t\t\tif (process.versions.node.split(\".\")[0] >= 8)\n\t\t\t\th = { port: this.opts.port, exclusive: true };\n\n\t\t\tserver.listen(h, () => {\n\t\t\t\tthis.opts.port = this.server.address().port;\n\t\t\t\tthis.logger.info(`TCP server is listening on port ${this.opts.port}`);\n\t\t\t\tthis.connected = true;\n\n\t\t\t\tresolve(this.opts.port);\n\t\t\t\treject = null;\n\t\t\t});\n\n\t\t\tthis.server = server;\n\t\t});\n\t}\n\n\tonTcpClientConnected(socket) {\n\t\tthis.sockets.push(socket);\n\n\t\tsocket.setNoDelay(true);\n\n\t\tconst address = socket.remoteAddress;\n\t\tthis.logger.debug(`New TCP client connected from '${address}'`);\n\n\t\tconst parser = new Parser(undefined, this.opts.maxPacketSize);\n\t\tsocket.pipe(parser);\n\n\t\tparser.on(\"data\", (type, message) => {\n\t\t\tthis.transporter.onIncomingMessage(type, message, socket);\n\t\t});\n\n\t\tparser.on(\"error\", err => {\n\t\t\tthis.logger.warn(\"Packet parser error!\", err);\n\t\t\tthis.closeSocket(socket, err);\n\t\t});\n\n\t\tsocket.on(\"error\", err => {\n\t\t\tthis.logger.debug(`TCP client '${address}' error!`, err);\n\t\t\tthis.closeSocket(socket, err);\n\t\t});\n\n\t\tsocket.on(\"close\", hadError => {\n\t\t\tthis.logger.debug(`TCP client disconnected from '${address}'! Had error:`, !!hadError);\n\t\t\tthis.closeSocket(socket);\n\t\t});\n\n\t\tthis.emit(\"connect\", socket);\n\t}\n\n\tcloseSocket(socket) {\n\t\tsocket.destroy();\n\n\t\tthis.sockets.splice(this.sockets.indexOf(socket), 1);\n\t}\n\n\tclose() {\n\t\tif (this.server && this.server.listening) {\n\t\t\tthis.server.close();\n\n\t\t\tthis.sockets.forEach(socket => socket.destroy());\n\t\t\tthis.sockets = [];\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class TcpReader extends require('events').EventEmitter {\n  constructor(opts, transporter, logger) {\n    super();\n    this.server = require('net').createServer();\n    this.opts = opts;\n    this.transporter = transporter;\n    this.Promise = transporter.Promise;\n    this.logger = logger;\n    this.sockets = [];\n  }\n\n  async listen() {\n    return new this.Promise((resolve, reject) => {\n      this.server.listen(this.opts.port, () => {\n        this.logger.info(`Server listening on port ${this.opts.port}`);\n        resolve(this.opts.port);\n      });\n\n      this.server.on('error', (err) => {\n        this.logger.error(`Server error: ${err.message}`);\n        reject(err);\n      });\n    });\n  }\n\n  onTcpClientConnected(socket) {\n    this.sockets.push(socket);\n    socket.on('data', (data) => {\n      this.emit('data', data);\n    });\n\n    socket.on('end', () => {\n      this.closeSocket(socket);\n    });\n\n    socket.on('error', (err) => {\n      this.logger.error(`Socket error: ${err.message}`);\n      this.closeSocket(socket);\n    });\n  }\n\n  closeSocket(socket) {\n    const index = this.sockets.indexOf(socket);\n    if (index !== -1) {\n      this.sockets.splice(index, 1);\n      socket.destroy();\n    }\n  }\n\n  close() {\n    this.sockets.forEach(socket => {\n      this.closeSocket(socket);\n    });\n    this.server.close(() => {\n      this.logger.info('Server closed');\n      this.emit('close');\n    });\n  }\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n  constructor(did, finger, token, oaid) {\n    this.did = did;\n    this.finger = finger;\n    this.token = token;\n    this.oaid = oaid;\n  }\n\n  async taskRequest(method, url, body = '') {\n    try {\n      const headers = this.generateHeaders();\n      const response = await fetch(url, {\n        method: method,\n        headers: headers,\n        body: method === 'POST' ? body : undefined\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  generateHeaders() {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.token}`,\n      'X-Device-ID': this.did,\n      'X-Fingerprint': this.finger,\n      'X-OAID': this.oaid\n    };\n\n    // Add custom header if needed\n    // headers['Custom-Header'] = 'CustomValue';\n\n    return headers;\n  }\n}"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a TCP server using Node.js's built-in 'net' module that listens on an available port and discards any incoming data.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that automatically binds to an available port. It discards any incoming data to ensure the server can terminate properly. The server's port is stored in the instance for later reference.\n\nInput: None\n\nOutput: None (The function modifies the instance properties, specifically setting `this.server` and `this.port`)",
    "Canonical_solution": "function createTCPServer() {\n  const net = require('net');\n  this.server = net.createServer((socket) => {\n    socket.on('data', () => {\n      // discard any buffered data or the server wont terminate\n    });\n  });\n  this.server.listen(() => {\n    this.port = this.server.address().port;\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "class TCPServer {\n  constructor() {\n    this.server = null;\n    this.port = 0;\n  }\n\n  createTCPServer() {\n    const server = require('net').Server();\n    server.on('error', (err) => {\n      if (err.code === 'EADDRINUSE') {\n        console.error('Port is already in use. Trying another port...');\n        // This is a simplified example; in practice, you'd need to try multiple ports\n        process.exit(1);\n      }\n    });\n\n    server.listen(() => {\n      this.server = server;\n      this.port = server.address().port;\n    });\n\n    server.on('connection', (socket) => {\n      socket.on('data', (data) => {\n        // Discard incoming data\n        socket.destroy();\n      });\n    });\n  }\n}\n\nconst serverInstance = new TCPServer();\nserverInstance.createTCPServer();"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data in batches, and forwards each batch to an external service for processing.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 5000. When a client connects, it sets up a bidirectional communication channel where incoming data from the client is collected in batches (separated by '.'). Each complete batch is then sent to an external 'uppercase' service via a REQ socket. The server handles data streaming and batch processing efficiently.\n\nInput: None (The function takes no parameters; configuration is hardcoded)\n\nOutput: None (The function creates a server instance that runs indefinitely, listening for connections)\n\n---\n\nIf you'd prefer the class format (though the reference code is function-based):\n\nTask Description: Implement a TCP server class in Node.js that manages client connections and batch processing of incoming data.\n\nClass Description: The `TCPServer` class encapsulates a TCP server that listens for client connections, collects incoming data in batches, and forwards complete batches to an external service.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- port: [number] - The port number the server listens on (default: 5000)\n\nMethods:\n- constructor([port: number]) -> void - Initializes the server with optional port configuration\n- start() -> void - Starts the server and begins listening for connections\n- handleConnection(conn: net.Socket) -> void - Internal method to manage client connections and data processing\n- processBatch(batch: string[]) -> void - Sends a complete batch to the external service",
    "Canonical_solution": "function createTCPServer() {\n    var server = require('net').createServer();\n    server.on('connection', function(conn) {\n        conn.setEncoding('utf8');\n        \n        var req = context.socket('REQ');\n        req.setEncoding('utf8');\n        req.pipe(conn);\n        req.connect('uppercase');\n        \n        var batch = [];\n        var ask = function (q) {\n            req.write(q, 'utf8');\n        }\n        function readBatch() {\n            var msg; while (msg = conn.read()) {\n                msg.split('\\n').forEach(function(item) {\n                    if (item == '.') {\n                        console.log('Sending batch %s', batch);\n                        batch.forEach(ask);\n                        batch = [];\n                    }\n                    else if (item != '') {\n                        batch.push(item);\n                    }\n                });\n            }\n        }\n        conn.on('readable', readBatch);\n        readBatch();\n    });\n    server.listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst { connect } = require('socket.io');\n\nclass TCPServer {\n  constructor(port = 5000) {\n    this.server = net.createServer();\n    this.port = port;\n  }\n\n  start() {\n    this.server.listen(this.port, () => {\n      console.log(`TCP server listening on port ${this.port}`);\n    });\n\n    this.server.on('connection', (conn) => {\n      this.handleConnection(conn);\n    });\n  }\n\n  handleConnection(conn) {\n    const buffer = [];\n    const batches = [];\n\n    conn.on('data', (data) => {\n      buffer.push(data.toString());\n      if (data.endsWith('.')) {\n        const batch = buffer.join('');\n        batches.push(batch);\n        buffer.length = 0;\n      }\n    });\n\n    conn.on('end', () => {\n      if (buffer.length > 0) {\n        batches.push(buffer.join(''));\n        buffer.length = 0;\n      }\n      this.processBatch(batches);\n    });\n  }\n\n  processBatch(batches) {\n    const socket = connect(5001);\n    batches.forEach((batch) => {\n      socket.emit('batch', batch);\n    });\n    socket.on('message', (msg) => {\n      console.log('External service response:', msg);\n    });\n  }\n}\n\nconst server = new TCPServer();\nserver.start();"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's built-in 'net' module that can handle both secure (TLS) and non-secure connections, manage client connections, and emit relevant events.\n\nClass Description: The Server class extends Node.js's EventEmitter to create a TCP server that can handle multiple client connections. It supports both secure (TLS) and non-secure (plain TCP) modes, manages connection lifecycle events, and maintains a list of active connections.\n\nAttributes:\n- socket: [Object] - The underlying TCP/TLS server instance\n- connections: [Array] - Array of active Connection objects\n\nMethods:\n- constructor(secure, options, callback) -> [Server Instance] - Initializes the server. 'secure' is a boolean indicating TLS usage, 'options' is an optional configuration object, and 'callback' is an optional function for 'connection' events\n- listen(port, host, callback) -> [Server Instance] - Starts the server listening on specified port and host. 'host' is optional, and 'callback' is an optional function for 'listening' events\n\nEvents:\n- connection: Emitted when a new client connects (passes Connection object)\n- close: Emitted when the server closes\n- error: Emitted when an error occurs (passes error object)\n- listening: Emitted when the server starts listening",
    "Canonical_solution": "var util = require('util'),\n    net = require('net'),\n    tls = require('tls'),\n    events = require('events'),\n    Connection = require('./Connection');\n\nfunction nop() {}\n\nclass Server extends events.EventEmitter {\n    constructor(secure, options, callback) {\n        super();\n        var that = this;\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = undefined;\n        }\n\n        var onConnection = function (socket) {\n            var conn = new Connection(socket, that, function () {\n                that.connections.push(conn);\n                conn.removeListener('error', nop);\n                that.emit('connection', conn);\n            });\n            conn.on('close', function () {\n                var pos = that.connections.indexOf(conn);\n                if (pos !== -1) {\n                    that.connections.splice(pos, 1);\n                }\n            });\n\n            // Ignore errors before the connection is established\n            conn.on('error', nop);\n        };\n\n        if (secure) {\n            this.socket = tls.createServer(options, onConnection);\n        } else {\n            this.socket = net.createServer(options, onConnection);\n        }\n\n        this.socket.on('close', function () {\n            that.emit('close');\n        });\n        this.socket.on('error', function (err) {\n            that.emit('error', err);\n        });\n        this.connections = [];\n\n        if (callback) {\n            this.on('connection', callback);\n        }\n    }\n\n    listen(port, host, callback) {\n        var that = this;\n\n        if (typeof host === 'function') {\n            callback = host;\n            host = undefined;\n        }\n\n        if (callback) {\n            this.on('listening', callback);\n        }\n\n        this.socket.listen(port, host, function () {\n            that.emit('listening');\n        });\n\n        return this;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class Server extends require('events') {\n  constructor(secure, options, callback) {\n    super();\n    this.secure = secure;\n    this.options = options || {};\n    this.callback = callback;\n    this.socket = secure ? require('tls').createServer(this.options, this.onConnection.bind(this)) : require('net').createServer(this.onConnection.bind(this));\n    this.connections = [];\n  }\n\n  listen(port, host, callback) {\n    this.callback = callback;\n    return this.socket.listen(port, host, () => {\n      this.emit('listening');\n      if (this.callback) this.callback();\n    });\n  }\n\n  onConnection(socket) {\n    const connection = new (require('./Connection'))(socket, this);\n    this.connections.push(connection);\n    this.emit('connection', connection);\n  }\n\n  close() {\n    this.socket.close(() => {\n      this.emit('close');\n    });\n  }\n\n  emit(event, ...args) {\n    super.emit(event, ...args);\n  }\n}\n\nclass Connection extends require('events') {\n  constructor(socket, server) {\n    super();\n    this.socket = socket;\n    this.server = server;\n    this.on('end', () => {\n      this.server.connections = this.server.connections.filter(conn => conn !== this);\n      this.server.emit('connection', this);\n    });\n  }\n\n  emit(event, ...args) {\n    super.emit(event, ...args);\n  }\n}"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a TCP server using Node.js's `net` module to handle client connections and manage sessions with unique identifiers, while optionally supporting weak references for garbage collection.\n\nClass Description: The `DNodeServer` class is a TCP server implementation that manages client connections, assigns unique session IDs, and provides event-based interaction with connected clients. It supports optional weak reference handling for callbacks to prevent memory leaks.\n\nAttributes:\n- cons: [Function] - The constructor or function to be called for each new connection.\n- opts: [Object] - Configuration options for the server, including weak reference settings.\n- server: [net.Server] - The underlying TCP server instance.\n- server.sessions: [Object] - Dictionary of active sessions indexed by session IDs.\n\nMethods:\n- constructor(cons, opts) -> [DNodeServer] - Initializes the server with a connection handler and options. Sets up weak reference handling if enabled.\n- _handleConnection(stream) -> [void] - Handles new client connections, creates session with unique ID, and sets up data piping and event forwarding.\n- listen(port, host, callback) -> [net.Server] - Starts the server listening on specified port/host or UNIX socket path. Accepts optional callback for 'listening' event.\n- _randomId() -> [string] - Generates a random 16-character hexadecimal string for session identification.\n\nInput:\n- cons: [Function] - Required connection handler function\n- opts: [Object] - Optional configuration object (may contain 'weak' and 'proto' properties)\n- port: [number|string] - Port number or UNIX socket path to listen on\n- host: [string] - Optional hostname to bind to\n- callback: [Function] - Optional callback for listening event\n\nOutput:\n- Instance of DNodeServer when constructed\n- Instance of net.Server when calling listen()",
    "Canonical_solution": "var dnode = require('./lib/dnode');\nvar net = require('net');\nvar weak;\n\nclass DNodeServer {\n    constructor(cons, opts) {\n        if (!opts) opts = {};\n        \n        if (opts.weak !== false && !opts.proto) {\n            if (!weak) {\n                weak = require(\"weak\");\n            }\n            \n            opts.proto = {};\n            opts.proto.wrap = function (cb, id) {\n                var proto = this;\n                return weak(cb, function () {\n                    proto.cull(id);\n                });\n            };\n            opts.proto.unwrap = function (ref, id) {\n                var cb = weak.get(ref);\n                return cb || function () {};\n            };\n        }\n        \n        this.cons = cons;\n        this.opts = opts;\n        this.server = net.createServer(this._handleConnection.bind(this));\n        this.server.sessions = {};\n    }\n\n    _handleConnection(stream) {\n        var d = new dnode(this.cons, this.opts);\n        do { d.id = this._randomId(); }\n        while (this.server.sessions[d.id]);\n        \n        this.server.sessions[d.id] = d;\n        d.on('end', () => {\n            delete this.server.sessions[d.id];\n        });\n        \n        d.on('local', (ref) => {\n            this.server.emit('local', ref, d);\n        });\n        \n        d.on('remote', (remote) => {\n            this.server.emit('remote', remote, d);\n        });\n        \n        stream.on('error', (err) => {\n            if (err && err.code === 'EPIPE') return;\n            d.emit('error', err);\n        });\n        \n        d.stream = stream;\n        stream.pipe(d);\n        d.pipe(stream);\n    }\n\n    listen(port, host, callback) {\n        if (typeof port === 'number' && port >= 0) {\n            this.server.listen(port, host);\n        } else if (typeof port === 'string') {\n            this.server.listen(port);\n        } else {\n            throw new Error('no port or path provided');\n        }\n        \n        if (callback) {\n            this.server.on('listening', callback);\n        }\n        \n        return this.server;\n    }\n\n    _randomId() {\n        var s = '';\n        for (var i = 0; i < 4; i++) {\n            s += Math.random().toString(16).slice(2);\n        }\n        return s;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class DNodeServer {\n  constructor(cons, opts = {}) {\n    this.cons = cons;\n    this.opts = opts;\n    this.server = net.createServer();\n    this.server.sessions = {};\n    if (this.opts.weak) {\n      this.server.on('connection', (stream) => {\n        const session = { stream };\n        this.server.sessions[session.id] = session;\n        stream.on('error', (err) => {\n          if (err.code === 'ECONNRESET') {\n            delete this.server.sessions[session.id];\n          }\n        });\n      });\n    }\n  }\n\n  _handleConnection(stream) {\n    const id = this._randomId();\n    const session = { id, stream };\n    this.server.sessions[id] = session;\n    this.cons(session);\n    stream.pipe(stream);\n    stream.on('data', (data) => {\n      this.server.emit('message', data, session);\n    });\n  }\n\n  listen(port, host, callback) {\n    const server = this.server;\n    const listener = (err) => {\n      if (err) {\n        console.error(`Error listening: ${err}`);\n      } else {\n        if (callback) callback();\n      }\n    };\n    if (typeof port === 'string') {\n      server.listen(port, host, listener);\n    } else {\n      server.listen(port, host, listener);\n    }\n    return server;\n  }\n\n  _randomId() {\n    return Math.floor(Math.random() * 10000000000).toString(16);\n  }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    try {\n      if (.unsplashClientId) {\n        const response = await fetch(`https://api.unsplash.com/photos/random?client_id=${unsplashClientId}`);\n        const data = await response.json();\n        return { type: 'unsplash', data };\n      } else {\n        const response = await fetch('https://www.bing.com/HPImageArchive.aspx?idx=0&n=1');\n        const text = await response.text();\n        const start = text.indexOf('\"url\":\"') + 6;\n        const end = text.indexOf('\"\",', start);\n        const url = text.substring(start, end);\n        return { type: 'bing', data: { url } };\n      }\n    } catch (error) {\n      return { type: 'bing', data: { url: 'https://www.bing.com/images/placeholder.jpg' } };\n    }\n  }\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a function that establishes a TCP server which listens for specific termination codes from clients and responds with a predefined byte sequence before shutting down.\n\nFunction Description: The function `makeTerminatingBackend` creates a TCP server that listens for incoming connections. When a client sends data containing specific termination codes (80877103 or 80877104), the server responds with a predefined byte sequence and then closes the connection. The server automatically selects an available port and returns it for external use.\n\nInput: \n- `byte` [String] - The UTF-8 encoded byte sequence to send as a response when a termination code is received.\n\nOutput:\n- `port` [Number] - The port number on which the TCP server is listening. This is dynamically assigned by the system.",
    "Canonical_solution": "function makeTerminatingBackend(byte) {\n  const { createServer } = require('net');\n\n  const server = createServer((socket) => {\n    socket.on('data', (buff) => {\n      const code = buff.readInt32BE(4);\n      if (code === 80877103 || code === 80877104) {\n        const packet = Buffer.from(byte, 'utf-8');\n        socket.write(packet);\n      }\n    });\n    socket.on('close', () => {\n      server.close();\n    });\n  });\n\n  server.listen();\n  const { port } = server.address();\n  return port;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "function makeTerminatingBackend(byte) {\n  return new Promise((resolve, reject) => {\n    const server = require('net').Server();\n    const port = findAvailablePort();\n    \n    server.listen(port, () => {\n      resolve(port);\n    });\n    \n    server.on('connection', (socket) => {\n      socket.on('data', (data) => {\n        const terminationCodes = [80877103, 80877104];\n        const dataBuffer = Buffer.from(data);\n        \n        for (const code of terminationCodes) {\n          if (dataBuffer.equals(Buffer.from(code))) {\n            socket.write(Buffer.from(byte));\n            socket.end();\n            return;\n          }\n        }\n      });\n    });\n    \n    function findAvailablePort() {\n      let port = 1024;\n      while (port < 65535) {\n        try {\n          require('net').Socket().connect(port);\n          require('net').Socket().end();\n          return port;\n        } catch (e) {\n          port++;\n        }\n      }\n      throw new Error('No available port found');\n    }\n  });\n}"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a TCP-based P2P server class in JavaScript using Node.js's 'net' module and JsonSocket for message handling, capable of managing multiple client connections and processing structured JSON messages.\n\nClass Description: P2PServer is a TCP server implementation that handles peer-to-peer connections, manages client sockets, processes JSON-formatted messages with type-based routing, and provides lifecycle management for the server.\n\nAttributes:\n- tcpServer: [Object] - The underlying TCP server instance created using Node.js 'net' module\n- clients: [Array] - List of currently connected client sockets\n- send: [Function] - Callback function for sending messages (defaults to empty function)\n- messageHandlers: [Object] - Collection of registered message type handlers (implied by the code)\n\nMethods:\n- constructor([send: Function]) -> [P2PServer] - Initializes the TCP server with configuration, sets up connection handling, and prepares message processing infrastructure\n- listen(port: Number) -> [void] - Starts the server listening on the specified port and all network interfaces (0.0.0.0)\n- close() -> [Promise] - Gracefully shuts down the server, disconnects all clients, and returns a Promise that resolves when shutdown is complete\n- on(type: String, callback: Function) -> [void] - Registers a message handler function for a specific message type",
    "Canonical_solution": "const net = require('net');\nconst JsonSocket = require('json-socket');\n\nclass P2PServer {\n    constructor(send = () => {}) {\n        this.tcpServer = net.createServer();\n        this.tcpServer.maxConnections = config.p2pConnections * 2;\n        this.clients = [];\n        this.send = send;\n\n        this.tcpServer.on('connection', (socket) => {\n            if(!config.p2p) {\n                socket.destroy();\n                return;\n            }\n\n            this.tcpServer.getConnections((err, con) => {\n                logT('p2p', 'server connected', con, 'max', this.tcpServer.maxConnections);\n            });\n\n            socket = new JsonSocket(socket);\n            this.clients.push(socket);\n            \n            socket.on('close', () => {\n                this.clients.splice(this.clients.indexOf(socket), 1);\n            });\n            \n            socket.on('error', (err) => {});\n            \n            socket.on('message', (message) => {\n                if(message.type && this.messageHandlers[message.type]) {\n                    if(message.type != 'protocol' && !socket.rats) return;\n                    \n                    this.messageHandlers[message.type](message.data, (data) => {\n                        socket.sendMessage({\n                            id: message.id,\n                            data\n                        });\n                    }, socket, {\n                        version: message.version,\n                        info: message.info\n                    });\n                }\n            });\n            \n            socket.protocolTimeout = setTimeout(() => socket._socket.destroy(), 7000);\n        });\n    }\n\n    listen(port) {\n        this.tcpServer.listen(port, '0.0.0.0');\n    }\n\n    close() {\n        const promise = new Promise(resolve => this.tcpServer.close(resolve));\n        for (const client in this.clients) {\n            this.clients[client]._socket.destroy();\n        }\n        return promise;\n    }\n\n    on(type, callback) {\n        this.messageHandlers[type] = callback;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class P2PServer {\n  constructor(send = () => {}) {\n    this.tcpServer = net.createServer();\n    this.clients = [];\n    this.send = send;\n    this.messageHandlers = {};\n    this.tcpServer.on('connection', (socket) => this.handleClientConnection(socket));\n    this.tcpServer.on('error', (err) => console.error('Server error:', err));\n  }\n\n  listen(port) {\n    return new Promise((resolve, reject) => {\n      this.tcpServer.listen(port, '0.0.0.0', () => {\n        console.log(`Server listening on port ${port}`);\n        resolve();\n      });\n    });\n  }\n\n  close() {\n    return new Promise((resolve) => {\n      this.tcpServer.close(() => {\n        this.clients.forEach(client => {\n          client.destroy();\n        });\n        resolve();\n      });\n    });\n  }\n\n  on(type, callback) {\n    this.messageHandlers[type] = callback;\n  }\n\n  handleClientConnection(socket) {\n    const client = new JsonSocket(socket);\n    client.on('message', (message) => {\n      if (this.messageHandlers[message.type]) {\n        this.messageHandlers[message.type](message.data);\n      }\n    });\n    this.clients.push(client);\n    socket.on('end', () => {\n      const index = this.clients.indexOf(client);\n      if (index > -1) {\n        this.clients.splice(index, 1);\n      }\n    });\n  }\n}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a TCP server function that listens on a specified port and responds to client connections with the current timestamp.\n\nFunction Description: The function creates a TCP server using Node.js's built-in 'net' module. When a client connects, the server sends the current timestamp and closes the connection. The server listens on the specified port or a random available port if none is provided.\n\nInput: \n- port: [Number] - (Optional) The port number on which the TCP server should listen. If not provided or 0, the OS will assign a random available port.\n\nOutput: \n- None (The function creates and starts a TCP server but doesn't return anything)",
    "Canonical_solution": "function createTCPServer(port) {\n  require('net').createServer(function (socket) {\n    socket.end(now(new Date()) + '\\n');\n  }).listen(port | 0);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "net.createServer((socket) => {\n  const timestamp = new Date().toISOString();\n  socket.write(timestamp + '\\n');\n  socket.end();\n}).listen(port || 0);"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's built-in 'net' module to handle client connections, manage socket communication, and process incoming messages.\n\nClass Description: The TcpReader class is responsible for establishing a TCP server, managing client connections, handling socket events, and processing incoming messages through a custom parser. It provides methods to start/stop the server and manage connected clients.\n\nAttributes:\n- transporter: [Object] - The parent transporter object that handles incoming messages\n- opts: [Object] - Configuration options including the port to listen on\n- sockets: [Array] - Array of currently connected client sockets\n- logger: [Object] - Logger instance from the transporter for error logging\n- server: [Object] - The TCP server instance\n- connected: [Boolean] - Flag indicating if the server is currently listening\n\nMethods:\n- constructor(transporter, opts) -> [void] - Initializes the TcpReader with transporter and options\n- listen() -> [Promise] - Starts the TCP server and begins listening for connections\n- onTcpClientConnected(socket) -> [void] - Handles new client connections and sets up event listeners\n- closeSocket(socket, err) -> [void] - Closes and removes a specific socket from the connections\n- close() -> [void] - Stops the server and closes all connected sockets",
    "Canonical_solution": "const net = require(\"net\");\n\nclass TcpReader {\n    constructor(transporter, opts) {\n        this.transporter = transporter;\n        this.opts = opts;\n        this.sockets = [];\n        this.logger = transporter.logger;\n    }\n\n    listen() {\n        return new Promise((resolve, reject) => {\n            this.server = net.createServer(socket => {\n                this.onTcpClientConnected(socket);\n            });\n\n            this.server.on(\"error\", err => {\n                reject(err);\n            });\n\n            const listenOptions = process.versions.node.split(\".\")[0] >= 8 \n                ? { port: this.opts.port, exclusive: true }\n                : this.opts.port;\n\n            this.server.listen(listenOptions, () => {\n                this.opts.port = this.server.address().port;\n                this.connected = true;\n                resolve();\n            });\n        });\n    }\n\n    onTcpClientConnected(socket) {\n        socket.on(\"error\", err => {\n            this.closeSocket(socket, err);\n        });\n\n        socket.on(\"close\", () => {\n            this.closeSocket(socket);\n        });\n\n        socket.setNoDelay(true);\n\n        const parser = require(\"../../../../src/transporters/tcp/parser\")();\n        socket.pipe(parser);\n\n        parser.on(\"data\", (type, message) => {\n            this.transporter.onIncomingMessage(type, message, socket);\n        });\n\n        parser.on(\"error\", err => {\n            this.closeSocket(socket, err);\n        });\n\n        this.sockets.push(socket);\n    }\n\n    closeSocket(socket, err) {\n        if (err) {\n            this.logger.warn(`TCP socket error: ${err.message}`);\n        }\n\n        const index = this.sockets.indexOf(socket);\n        if (index !== -1) {\n            this.sockets.splice(index, 1);\n            socket.destroy();\n        }\n    }\n\n    close() {\n        if (this.server && this.server.listening) {\n            this.server.close();\n        }\n\n        this.sockets.forEach(socket => {\n            socket.destroy();\n        });\n        this.sockets = [];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class TcpReader {\n  constructor(transporter, opts) {\n    this.transporter = transporter;\n    this.opts = opts;\n    this.sockets = [];\n    this.logger = transporter.logger;\n    this.server = null;\n    this.connected = false;\n  }\n\n  async listen() {\n    this.server = net.createServer(this.onTcpClientConnected.bind(this));\n    this.server.on('error', (err) => {\n      this.logger.error(`Server error: ${err.message}`);\n      this.close();\n    });\n\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.opts.port, () => {\n        this.connected = true;\n        this.logger.info(`Server listening on port ${this.opts.port}`);\n        resolve();\n      });\n    });\n  }\n\n  onTcpClientConnected(socket) {\n    this.sockets.push(socket);\n    socket.on('data', (data) => {\n      try {\n        const message = data.toString();\n        this.transporter.handleMessage(message);\n      } catch (err) {\n        this.logger.error(`Error processing message: ${err.message}`);\n      }\n    });\n\n    socket.on('end', () => {\n      this.closeSocket(socket);\n    });\n\n    socket.on('error', (err) => {\n      this.logger.error(`Socket error: ${err.message}`);\n      this.closeSocket(socket, err);\n    });\n  }\n\n  closeSocket(socket, err) {\n    if (err) {\n      this.logger.error(`Closing socket due to error: ${err.message}`);\n    }\n    socket.destroy();\n    const index = this.sockets.indexOf(socket);\n    if (index !== -1) {\n      this.sockets.splice(index, 1);\n    }\n  }\n\n  close() {\n    if (this.connected) {\n      this.sockets.forEach(socket => this.closeSocket(socket));\n      this.server.close(() => {\n        this.connected = false;\n        this.logger.info('Server closed');\n      });\n    }\n  }\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP server class that intercepts Redis traffic, capable of operating in different modes (capture, test, or forward), with functionality to save, mock, or forward data between client and Redis server.\n\nClass Description: RedisInterceptor is a class that creates a TCP server to intercept Redis protocol traffic. It can operate in three modes: capture (save request/response pairs), test (respond with mocked data), or forward (pass through traffic unchanged). The class handles client connections, data forwarding, and response processing.\n\nAttributes:\n- Pythagora: [Object] - Reference to the parent Pythagora object for saving captured data\n- listenPort: [Number] - Port number on which the interceptor listens for client connections\n- targetPort: [Number] - Port number of the target Redis server (default: 6379)\n- intermediateData: [Array] - Array containing mocked request/response pairs for test mode\n- listenSocket: [Object] - Reference to the net.Server instance\n- targetSocket: [Object] - Reference to the net.Socket connection to Redis\n- mode: [String] - Current operation mode ('capture', 'test', or undefined for forward)\n\nMethods:\n- constructor(Pythagora, listenPort, targetPort, intermediateData) -> [RedisInterceptor] - Initializes the interceptor with configuration parameters\n- init() -> [Promise] - Asynchronously creates and starts the TCP server, resolving when listening\n- forwardData(connection, data, saveData) -> [undefined] - Forwards data to Redis server and handles response, optionally saving it\n- splitIntoChunks(str, chunkSize) -> [Array] - Helper method to split strings into chunks of specified size\n\nNote: The class assumes the existence of constants MODES (for operation modes) and CHUNK_SIZE (for response chunking) which should be defined elsewhere in the code.",
    "Canonical_solution": "const net = require('net');\n\nclass RedisInterceptor {\n    constructor(Pythagora, listenPort, targetPort, intermediateData) {\n        this.Pythagora = Pythagora;\n        this.listenPort = listenPort;\n        this.targetPort = targetPort || 6379;\n        this.intermediateData = intermediateData || [];\n    }\n\n    async init() {\n        await new Promise((resolve, reject) => {\n            this.listenSocket = net.createServer(connection => {\n                connection.on('data', data => {\n                    if (this.mode === MODES.capture) {\n                        this.forwardData(connection, data, true);\n                    } else if (this.mode === 'test') {\n                        let mockData = this.intermediateData.find(d => d.type === 'redis' && d.request === data.toString());\n                        if (mockData) {\n                            const chunks = this.splitIntoChunks(mockData.response, CHUNK_SIZE);\n                            chunks.forEach(chunk => connection.write(`+${chunk}\\r\\n`, 'utf8'));\n                        } else {\n                            this.forwardData(connection, data);\n                        }\n                    } else {\n                        this.forwardData(connection, data);\n                    }\n                });\n            });\n\n            this.listenSocket.listen(this.listenPort, () => {\n                resolve();\n            });\n        });\n    }\n\n    forwardData(connection, data, saveData) {\n        this.targetSocket = new net.Socket();\n        this.targetSocket.connect(this.targetPort, 'localhost', () => {\n            this.targetSocket.write(data);\n        });\n\n        this.targetSocket.on('data', response => {\n            if (saveData) Pythagora.saveRedisData(data.toString(), response.toString().replace(/^.*\\r\\n/, '').replace(/\\r\\n$/, ''));\n            connection.write(response);\n        });\n    }\n\n    splitIntoChunks(str, chunkSize) {\n        const chunks = [];\n        for (let i = 0; i < str.length; i += chunkSize) {\n            chunks.push(str.substring(i, i + chunkSize));\n        }\n        return chunks;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class RedisInterceptor {\n  constructor(Pythagora, listenPort, targetPort, intermediateData) {\n    this.Pythagora = Pythagora;\n    this.listenPort = listenPort;\n    this.targetPort = targetPort || 6379;\n    this.intermediateData = intermediateData || [];\n    this.listenSocket = null;\n    this.targetSocket = null;\n    this.mode = undefined;\n  }\n\n  async init() {\n    this.listenSocket = net.createServer((connection) => this.handleClient(connection));\n    await new Promise((resolve) => {\n      this.listenSocket.on('listening', resolve);\n    });\n    this.listenSocket.listen(this.listenPort);\n  }\n\n  handleClient(connection) {\n    connection.on('data', (data) => this.processData(connection, data));\n    connection.on('end', () => this.listenSocket.emit('connection', connection));\n  }\n\n  processData(connection, data) {\n    if (this.mode === 'capture') {\n      this.saveData(data);\n    } else if (this.mode === 'test') {\n      this.mockResponse(connection);\n    } else {\n      this.forwardData(connection, data, false);\n    }\n  }\n\n  saveData(data) {\n    this.Pythagora.saveData(data);\n  }\n\n  mockResponse(connection) {\n    const response = this.intermediateData[Math.floor(Math.random() * this.intermediateData.length)];\n    connection.write(response);\n  }\n\n  forwardData(connection, data, saveData) {\n    const chunks = this.splitIntoChunks(data, CHUNK_SIZE);\n    this.targetSocket = net.connect(this.targetPort, () => {\n      chunks.forEach((chunk) => this.targetSocket.write(chunk));\n    });\n    this.targetSocket.on('data', (response) => {\n      if (saveData) this.Pythagora.saveData(response);\n      connection.write(response);\n    });\n  }\n\n  splitIntoChunks(str, chunkSize) {\n    const result = [];\n    for (let i = 0; i < str.length; i += chunkSize) {\n      result.push(str.slice(i, i + chunkSize));\n    }\n    return result;\n  }\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Write a function that fetches version information and schema data from a remote API, caches the results locally, and handles errors appropriately.\n\nFunction Description: The function `fetchAndCacheVersions` retrieves version data from a specified API endpoint, then fetches schema data for each non-deprecated version. It caches all retrieved data in JSON files in a local directory. Errors during the process are caught and logged, with the process exiting on failure.\n\nInput: None (The function takes no parameters; all URLs and paths are hardcoded)\n\nOutput: \n- Success: Writes JSON files to the cache directory and logs success messages\n- Failure: Logs error messages and exits the process with status code 1",
    "Canonical_solution": "function fetchAndCacheVersions() {\n    const axios = require('axios');\n    const { writeJsonSync } = require('fs-extra');\n    const path = require('path');\n\n    axios\n        .get('https://exp.host/--/versions')\n        .then(async ({ data }) => {\n            writeJsonSync(path.join(__dirname, '../caches/versions.json'), data);\n\n            for (const version of Object.keys(data.sdkVersions)) {\n                if (data.sdkVersions[version].isDeprecated) {\n                    continue;\n                }\n                const {\n                    data: { data: schema },\n                } = await axios.get(`https://exp.host/--/api/v2/project/configuration/schema/${version}`);\n\n                const filePath = path.join(__dirname, `../caches/schema-${version}.json`);\n                console.log('Writing', filePath);\n                writeJsonSync(filePath, schema);\n            }\n        })\n        .then(() => console.log('Caches updated.'))\n        .catch(error => {\n            console.error(error);\n            console.error('Updating caches failed.');\n            process.exit(1);\n        });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst https = require('https');\n\nconst CACHE_DIR = path.join(__dirname, 'cache');\nconst VERSIONS_URL = 'https://api.example.com/versions';\nconst SCHEMA_URL_TEMPLATE = 'https://api.example.com/schemas/%s';\n\nfunction fetchAndCacheVersions() {\n  if (!fs.existsSync(CACHE_DIR)) {\n    fs.mkdirSync(CACHE_DIR, { recursive: true });\n  }\n\n  return new Promise((resolve, reject) => {\n    https.get(VERSIONS_URL, (res) => {\n      let data = '';\n\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const versions = JSON.parse(data);\n          const promises = [];\n\n          versions.forEach(version => {\n            if (!version.deprecated) {\n              const schemaUrl = SCHEMA_URL_TEMPLATE.replace('%s', version.version);\n              promises.push(fetchSchema(schemaUrl, version.version));\n            }\n          });\n\n          Promise.all(promises).then(() => {\n            resolve();\n          }).catch(err => {\n            console.error('Error fetching schemas:', err.message);\n            process.exit(1);\n          });\n        } catch (err) {\n          console.error('Error parsing version data:', err.message);\n          process.exit(1);\n        }\n      });\n\n      res.on('error', (err) => {\n        console.error('Error fetching versions:', err.message);\n        process.exit(1);\n      });\n    }).on('error', (err) => {\n      console.error('Error fetching versions:', err.message);\n      process.exit(1);\n    });\n  });\n}\n\nfunction fetchSchema(url, version) {\n  return new Promise((resolve, reject) => {\n    https.get(url, (res) => {\n      let data = '';\n\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const schema = JSON.parse(data);\n          const filePath = path.join(CACHE_DIR, `${version}.json`);\n          fs.writeFileSync(filePath, JSON.stringify(schema, null, 2));\n          console.log(`Schema for version ${version} cached successfully.`);\n          resolve();\n        } catch (err) {\n          console.error(`Error saving schema for version ${version}:`, err.message);\n          reject(err);\n        }\n      });\n\n      res.on('error', (err) => {\n        console.error(`Error fetching schema for version ${version}:`, err.message);\n        reject(err);\n      });\n    }).on('error', (err) => {\n      console.error(`Error fetching schema for version ${version}:`, err.message);\n      reject(err);\n    });\n  });\n}\n\nfetchAndCacheVersions();\n```"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a Flash Policy Server class in JavaScript using Node.js's net module to handle cross-domain policy requests for socket connections.\n\nClass Description: The FlashPolicyServer class creates a TCP server that responds to Flash socket policy requests. It manages allowed origins/ports, compiles the XML policy file, and handles server lifecycle events.\n\nAttributes:\n- origins: [Array] - List of allowed domain:port combinations\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [Object] - TCP server instance\n- buffer: [Buffer] - Compiled policy file in binary format\n- server: [Object] - Optional existing server instance to attach to\n\nMethods:\n- constructor(options, origins) -> [FlashPolicyServer] - Initializes the server with options and allowed origins\n- listen(port, server, cb) -> [FlashPolicyServer] - Starts listening on specified port, optionally attaching to existing server\n- responder(socket) -> [void] - Responds to policy requests on a socket connection\n- compile() -> [FlashPolicyServer] - Generates the XML policy buffer from allowed origins\n- add() -> [FlashPolicyServer] - Adds new allowed origins to the policy\n- remove(origin) -> [FlashPolicyServer] - Removes an origin from the allowed list\n- close() -> [FlashPolicyServer] - Stops the server and cleans up listeners",
    "Canonical_solution": "var net = require('net');\n\nclass FlashPolicyServer {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => this.responder(socket));\n      this.responder(socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges.'\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (data && data[0] === 60 && data.toString() === '<policy-file-request/>\\0' &&\n              socket && (socket.readyState === 'open' || socket.readyState === 'writeOnly')) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    this.port >= 0 && this.socket.listen(this.port, () => {\n      this.socket.online = true;\n      if (callback) {\n        callback.call(this);\n        callback = undefined;\n      }\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = new Buffer(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class FlashPolicyServer {\n  constructor(options, origins) {\n    this.options = options || {};\n    this.origins = origins || [];\n    this.port = this.options.port || 843;\n    this.log = this.options.log || console.log;\n    this.socket = null;\n    this.buffer = null;\n    this.server = null;\n  }\n\n  listen(port, server, cb) {\n    if (server) {\n      this.server = server;\n      this.socket = this.server;\n    } else {\n      this.socket = net.createServer();\n      this.socket.on('error', (err) => {\n        this.log('Error starting server:', err);\n        if (cb) cb(err);\n      });\n      this.socket.on('listening', () => {\n        this.log(`Server listening on port ${this.port}`);\n        if (cb) cb();\n      });\n      this.socket.on('connection', (socket) => {\n        this.responder(socket);\n      });\n      this.socket.listen(port, () => {\n        this.log(`Server started on port ${port}`);\n        if (cb) cb();\n      });\n    }\n  }\n\n  responder(socket) {\n    if (!this.buffer) {\n      this.compile();\n    }\n    socket.write(this.buffer);\n    socket.end();\n  }\n\n  compile() {\n    const policy = `<policyFile><allow origin=\"*\"/></policyFile>`;\n    this.buffer = Buffer.from(policy, 'utf8');\n    return this;\n  }\n\n  add(origin) {\n    this.origins.push(origin);\n    return this;\n  }\n\n  remove(origin) {\n    const index = this.origins.indexOf(origin);\n    if (index !== -1) {\n      this.origins.splice(index, 1);\n    }\n    return this;\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close(() => {\n        this.log('Server closed');\n      });\n    }\n    return this;\n  }\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a UDP communication class in JavaScript using Node.js's dgram module for bidirectional message handling between processes.\n\nClass Description: The Udp class facilitates UDP-based communication with capabilities for both sending and receiving messages. It manages socket creation, port binding, message queuing, and event handling for network communication.\n\nAttributes:\n- stack: [Array] - Stores outgoing messages in a queue before sending\n- port: [Number|null] - The target port number for outgoing messages\n- socket: [dgram.Socket|null] - UDP socket instance for sending messages\n- listener: [dgram.Socket|null] - UDP socket instance for receiving messages\n- client: [Object] - Reference to the parent client object for message handling\n\nMethods:\n- constructor(client) -> [void] - Initializes the UDP instance with a client reference and creates socket objects\n- start() -> [void] - Begins UDP communication by setting up input and output sockets\n- clear() -> [void] - Clears the message queue\n- run() -> [void] - Processes all messages in the queue\n- push(msg) -> [void] - Adds a message to the outgoing queue (Input: msg [String] - Message to send)\n- play(data) -> [void] - Sends a single message via UDP (Input: data [String] - Message content)\n- selectOutput(port=49161) -> [void] - Configures the output port (Input: port [Number] - Target port number)\n- selectInput(port=49160) -> [void] - Configures and starts the input listener (Input: port [Number] - Listening port number)",
    "Canonical_solution": "const dgram = require('dgram');\n\nclass Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = dgram ? dgram.createSocket('udp4') : null;\n    this.listener = dgram ? dgram.createSocket('udp4') : null;\n    this.client = client;\n  }\n\n  start() {\n    if (!dgram || !this.socket || !this.listener) { \n      console.warn('UDP', 'Could not start.'); \n      return; \n    }\n    console.info('UDP', 'Starting..');\n\n    this.selectInput();\n    this.selectOutput();\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    for (const item of this.stack) {\n      this.play(item);\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (!this.socket) { return; }\n    this.socket.send(Buffer.from(`${data}`), this.port, this.client.io.ip, (err) => {\n      if (err) { console.warn(err); }\n    });\n  }\n\n  selectOutput(port = 49161) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (parseInt(port) === this.port) { console.warn('UDP', 'Already selected'); return; }\n    if (isNaN(port) || port < 1000) { console.warn('UDP', 'Unavailable port'); return; }\n\n    console.log('UDP', `Output: ${port}`);\n    this.port = parseInt(port);\n  }\n\n  selectInput(port = 49160) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (this.listener) { this.listener.close(); }\n\n    console.log('UDP', `Input: ${port}`);\n    this.listener = dgram.createSocket('udp4');\n\n    this.listener.on('message', (msg, rinfo) => {\n      this.client.commander.trigger(`${msg}`);\n    });\n\n    this.listener.on('listening', () => {\n      const address = this.listener.address();\n      console.info('UDP', `Started socket at ${address.address}:${address.port}`);\n    });\n\n    this.listener.on('error', (err) => {\n      console.warn('UDP', `Server error:\\n ${err.stack}`);\n      this.listener.close();\n    });\n\n    this.listener.bind(port);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = null;\n    this.listener = null;\n    this.client = client;\n  }\n\n  start() {\n    this.listener = dgram.createSocket('udp4');\n    this.listener.on('message', (msg, rinfo) => {\n      this.client.onMessage(msg, rinfo);\n    });\n    this.listener.bind(49160);\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    while (this.stack.length > 0) {\n      this.play(this.stack.shift());\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (!this.socket) {\n      this.socket = dgram.createSocket('udp4');\n      this.socket.on('error', (err) => {\n        console.error('UDP socket error:', err);\n      });\n    }\n    this.socket.send(data, this.port, () => {\n      this.client.onSent(data);\n    });\n  }\n\n  selectOutput(port = 49161) {\n    this.port = port;\n  }\n\n  selectInput(port = 49160) {\n    this.start();\n  }\n}"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a UDP-based poller class in JavaScript that can send ping messages to a target UDP server and handle pong responses, with timeout functionality.\n\nClass Description: The UdpPoller class is designed to monitor UDP servers by sending periodic ping messages and listening for pong responses. It inherits from a base poller class and implements UDP communication using Node.js's dgram module.\n\nAttributes:\n- udpServer: [Object] - The UDP socket instance created using dgram module\n- target: [Object/String] - The target server address and port (parsed from input URL)\n- timeout: [Number] - The maximum time to wait for a response before timing out\n- callback: [Function] - The callback function to be executed when a response is received or an error occurs\n\nMethods:\n- constructor(target, timeout, callback) -> [void] - Initializes the poller with target, timeout, and callback\n- static get type() -> [String] - Returns the poller type ('udp')\n- static validateTarget(target) -> [Boolean] - Validates if the target URL matches UDP format\n- initialize() -> [void] - Sets up the UDP socket and parses the target address\n- poll() -> [void] - Sends a ping message to the target server and sets up response listener\n- onResponseCallback(message, sender) -> [void] - Handles incoming messages and processes pong responses\n- timeoutReached() -> [void] - Cleans up socket listeners when timeout occurs",
    "Canonical_solution": "var util = require('util');\nvar dgram = require('dgram');\nvar BasePoller = require('../basePoller');\n\nclass UdpPoller {\n  constructor(target, timeout, callback) {\n    UdpPoller.super_.call(this, target, timeout, callback);\n    this.udpServer = null;\n  }\n\n  static get type() {\n    return 'udp';\n  }\n\n  static validateTarget(target) {\n    var reg = new RegExp('udp:\\/\\/(.*):(\\\\d{1,5})');\n    return reg.test(target);\n  }\n\n  initialize() {\n    this.udpServer = dgram.createSocket('udp4');\n    this.udpServer.bind();\n    this.udpServer.on('error', function() {});\n    \n    var reg = new RegExp('udp:\\/\\/(.*):(\\\\d{1,5})');\n    if(!reg.test(this.target)) {\n      console.log(this.target + ' does not seems to be valid udp url');\n    }\n    var host = reg.exec(this.target);\n    this.target = {\n      'address': host[1],\n      'port': host[2]\n    };\n  }\n\n  poll() {\n    var ping = new Buffer(JSON.stringify({'command': 'ping'}));\n    this.udpServer.send(ping, 0, ping.length, this.target.port, this.target.address);\n    this.udpServer.on(\"message\", this.onResponseCallback.bind(this));\n  }\n\n  onResponseCallback(message, sender) {\n    var cmd;\n    try {\n      cmd = JSON.parse(message);\n    } catch (e) {\n      return this.onErrorCallback({ name: \"Unparsable answer\", message: \"server return answer \" + message.toString()});\n    }\n    if (cmd.command === 'pong') {\n      this.timer.stop();\n      this.callback(null, this.getTime(), cmd);\n    }\n  }\n\n  timeoutReached() {\n    this.udpServer.removeAllListeners();\n  }\n}\n\nutil.inherits(UdpPoller, BasePoller);",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class UdpPoller {\n  constructor(target, timeout, callback) {\n    this.udpServer = dgram.createSocket('udp4');\n    this.target = target;\n    this.timeout = timeout;\n    this.callback = callback;\n    this.initialize();\n  }\n\n  static get type() {\n    return 'udp';\n  }\n\n  static validateTarget(target) {\n    try {\n      const url = new URL(target);\n      return url.protocol === 'udp:' || url.protocol === 'udp://';\n    } catch (e) {\n      return false;\n    }\n  }\n\n  initialize() {\n    if (!UdpPoller.validateTarget(this.target)) {\n      throw new Error('Invalid target format for UDP poller');\n    }\n\n    const targetParts = this.target.split(':');\n    this.host = targetParts[0].replace('udp', '');\n    this.port = parseInt(targetParts[1], 10);\n  }\n\n  poll() {\n    const pingMessage = Buffer.from('PING');\n    this.udpServer.send(pingMessage, 0, pingMessage.length, this.port, this.host, (err) => {\n      if (err) {\n        this.callback(err);\n        return;\n      }\n\n      this.udpServer.on('message', (message, sender) => {\n        this.onResponseCallback(message, sender);\n      });\n\n      setTimeout(() => {\n        this.timeoutReached();\n      }, this.timeout);\n    });\n  }\n\n  onResponseCallback(message, sender) {\n    if (message.toString() === 'PONG') {\n      this.callback(null, sender);\n    } else {\n      this.callback(new Error('Unexpected response'));\n    }\n  }\n\n  timeoutReached() {\n    this.udpServer.close();\n    this.callback(new Error(`Timeout after ${this.timeout}ms`));\n  }\n}"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a class that implements inter-process communication (IPC) using UDP sockets in Node.js, allowing communication between a master process and worker processes.\n\nClass Description: The MasterIPC class facilitates communication between a master process and worker processes using UDP sockets. It handles socket creation, message parsing, method invocation, and event emission for worker connections and restarts.\n\nAttributes:\n- options: [Object] - Configuration options including socket port and address.\n- _sock: [dgram.Socket] - The UDP socket instance for communication.\n- children: [Array] - List of connected worker processes.\n- sock: [dgram.Socket] - Alternative socket reference used for sending messages.\n\nMethods:\n- IPCSocket() -> [dgram.Socket] - Creates and configures a UDP socket if not already created, setting up message event handling.\n- setupIPC() -> [void] - Binds the socket to the specified port and address, emits 'start' event when listening.\n- call(id, method, ...args) -> [void] - Sends a message to a worker process with the specified ID, method, and arguments.\n- invoke(method, args, worker) -> [void] - Invokes the specified method with given arguments and worker context if the method exists.\n- connect(worker) -> [void] - Emits a 'worker connected' event for the specified worker.\n- connectMaster(sig) -> [void] - Kills the parent process with the specified signal, either immediately or after the socket is listening.\n- masterKilled(data) -> [void] - Emits a 'restart' event with the provided data.",
    "Canonical_solution": "var dgram = require('dgram');\nvar net = require('net');\nvar utils = require('./utils');\n\nclass MasterIPC {\n  constructor(options) {\n    this.options = options;\n    this._sock = null;\n    this.children = [];\n  }\n\n  IPCSocket() {\n    var self = this;\n    if (this._sock) return this._sock;\n    \n    this._sock = dgram.createSocket('udp4');\n    this._sock.on('message', function(msg, info) {\n      try {\n        msg = JSON.parse(msg.toString('ascii'));\n        self.invoke(msg.method, msg.args, self.children[msg.id]);\n      } catch (err) {\n        console.error(err.stack || String(err));\n      }\n    });\n    return this._sock;\n  }\n\n  setupIPC() {\n    var self = this;\n    this.IPCSocket().on('listening', function() {\n      process.nextTick(function() {\n        self.emit('start');\n      });\n    });\n    this.IPCSocket().bind(\n      this.options['socket port'],\n      this.options['socket addr']\n    );\n  }\n\n  call(id, method) {\n    this.sock = this.sock || dgram.createSocket('udp4');\n    var msg = new Buffer(utils.frame({\n      args: utils.toArray(arguments, 2),\n      method: method,\n      id: id\n    }));\n    this.sock.send(\n      msg,\n      0,\n      msg.length,\n      this.options['socket port'],\n      this.options['socket addr']\n    );\n  }\n\n  invoke(method, args, worker) {\n    if (this[method]) {\n      this[method].apply(this, args.concat(worker));\n    }\n  }\n\n  connect(worker) {\n    this.emit('worker connected', worker);\n  }\n\n  connectMaster(sig) {\n    var self = this;\n    function kill() {\n      process.kill(self.ppid, sig);\n    }\n    if (this.listening) return kill();\n    this.on('listening', kill);\n  }\n\n  masterKilled(data) {\n    this.emit('restart', data);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class MasterIPC {\n  constructor(options) {\n    this.options = options;\n    this._sock = null;\n    this.children = [];\n    this.sock = null;\n  }\n\n  IPCSocket() {\n    if (!this._sock) {\n      this._sock = dgram.createSocket('udp4');\n      this._sock.on('message', (msg, rinfo) => {\n        const data = msg.toString();\n        const id = data.split('|')[0];\n        const method = data.split('|')[1];\n        const args = data.split('|').slice(2);\n        this.invoke(method, args, id);\n      });\n    }\n    return this._sock;\n  }\n\n  setupIPC() {\n    this.IPCSocket();\n    this._sock.bind(this.options.port, this.options.address);\n    this.emit('start');\n  }\n\n  call(id, method, ...args) {\n    const message = `${id}|${method}|${args.join('|')}`;\n    this.sock.send(message, this.options.address, this.options.port, (err) => {\n      if (err) console.error(err);\n    });\n  }\n\n  invoke(method, args, worker) {\n    if (this.children.some(c => c.id === worker)) {\n      this.call(worker, method, ...args);\n    } else {\n      console.warn(`Worker ${worker} not found`);\n    }\n  }\n\n  connect(worker) {\n    this.children.push({ id: worker, pid: process.pid });\n    this.emit('worker connected', worker);\n  }\n\n  connectMaster(sig) {\n    process.on('SIGINT', () => {\n      this._sock.close(() => {\n        process.kill(process.pid, sig);\n      });\n    });\n  }\n\n  masterKilled(data) {\n    this.emit('restart', data);\n  }\n\n  emit(event, ...args) {\n    if (this.children.length > 0) {\n      this.children.forEach(c => {\n        c.emitter.emit(event, ...args);\n      });\n    }\n  }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor(headers) {\n    this.headers = headers;\n  }\n\n  async get(url, params = {}) {\n    try {\n      const response = await axios.get(url, {\n        params,\n        headers: this.headers\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(`GET request failed: ${error.message}`);\n    }\n  }\n\n  async post(url, data = {}, params = {}) {\n    try {\n      const response = await axios.post(url, data, {\n        params,\n        headers: this.headers\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(`POST request failed: ${error.message}`);\n    }\n  }\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome DevTools Protocol, handling connection, message exchange, and disconnection events.\n\nClass Description: The Chrome class is an EventEmitter that establishes and manages a WebSocket connection to Chrome's DevTools Protocol. It handles message parsing, error handling, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The WebSocket instance\n- _notifier: [EventEmitter] - External event notifier\n- _callbacks: [Object] - Stores pending command callbacks\n- _nextCommandId: [Number] - Tracks the next command ID\n\nMethods:\n- constructor(options, notifier) -> [void] - Initializes the Chrome instance with connection options and notifier\n- _start() -> [Promise] - Internal method to initiate WebSocket connection\n- _connectToWebSocket() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleConnectionClose() -> [void] - Cleans up when connection closes\n- _handleMessage(message) -> [void] - Processes incoming WebSocket messages\n- send(method, params, sessionId, callback) -> [Promise|void] - Sends a command to Chrome DevTools Protocol\n- _enqueueCommand(method, params, sessionId, callback) -> [void] - Internal method to queue commands\n- close(callback) -> [Promise|void] - Closes the WebSocket connection cleanly",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this.webSocketUrl = undefined;\n        this._ws = null;\n        this._notifier = notifier;\n        this._start();\n    }\n\n    async _start() {\n        try {\n            await this._connectToWebSocket();\n            process.nextTick(() => {\n                this._notifier.emit('connect', this);\n            });\n        } catch (err) {\n            this._notifier.emit('error', err);\n        }\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleConnectionClose() {\n        this._callbacks = {};\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n\n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    close(callback) {\n        const closeWebSocket = (callback) => {\n            if (this._ws.readyState === 3) {\n                callback();\n            } else {\n                this._ws.removeAllListeners('close');\n                this._ws.once('close', () => {\n                    this._ws.removeAllListeners();\n                    this._handleConnectionClose();\n                    callback();\n                });\n                this._ws.close();\n            }\n        };\n        if (typeof callback === 'function') {\n            closeWebSocket(callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                closeWebSocket(fulfill);\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends EventEmitter {\n  constructor(options, notifier) {\n    super();\n    this.host = options?.host || 'localhost';\n    this.port = options?.port || 9222;\n    this.secure = options?.secure || false;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 0;\n    this.webSocketUrl = this.secure ? `wss://${this.host}:${this.port}` : `ws://${this.host}:${this.port}`;\n    this._ws = null;\n  }\n\n  async _start() {\n    this._ws = new WebSocket(this.webSocketUrl);\n    this._ws.onopen = () => this._connectToWebSocket();\n    this._ws.onclose = () => this._handleConnectionClose();\n    this._ws.onmessage = (event) => this._handleMessage(event.data);\n    this._ws.onerror = (error) => {\n      this.emit('error', error);\n      this._handleConnectionClose();\n    };\n  }\n\n  async _connectToWebSocket() {\n    try {\n      await this._start();\n      this.emit('connected');\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  _handleConnectionClose() {\n    this._ws = null;\n    this.emit('disconnected');\n  }\n\n  _handleMessage(message) {\n    try {\n      const parsed = JSON.parse(message);\n      if (parsed.id) {\n        this._callbacks[parsed.id](parsed.result, parsed.error);\n      } else {\n        this._notifier.emit('event', parsed);\n      }\n    } catch (e) {\n      this.emit('error', e);\n    }\n  }\n\n  send(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    this._callbacks[id] = callback;\n    const command = {\n      id,\n      method,\n      params: params || {},\n      session: sessionId\n    };\n    return new Promise((resolve, reject) => {\n      this._enqueueCommand(method, params, sessionId, callback);\n      resolve();\n    });\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    this._ws.send(JSON.stringify({\n      id: this._nextCommandId++,\n      method,\n      params: params || {},\n      session: sessionId\n    }));\n  }\n\n  close(callback) {\n    if (this._ws) {\n      this._ws.close();\n      if (callback) callback();\n    } else {\n      if (callback) callback();\n    }\n  }\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a WebSocket-based OrderBook class for managing real-time order book data from a cryptocurrency exchange, with connection management and state handling capabilities.\n\nClass Description: The OrderBook class maintains a real-time order book for a specified trading pair by connecting to a WebSocket feed. It handles connection states, processes incoming messages, and provides event-driven updates. The class inherits from EventEmitter to notify consumers of state changes and order book updates.\n\nAttributes:\n- productID: string - The trading pair identifier (e.g., 'BTC-USD')\n- websocketURI: string - The WebSocket endpoint URL for real-time data\n- restURI: string - The REST API endpoint URL for initial snapshot\n- state: string - Current connection/processing state (from STATES enum)\n- fail_count: number - Count of consecutive connection failures\n- timeProvider: any - Service for timestamp generation\n- socket: WebSocket - The active WebSocket connection instance\n- queue: Array - Buffer for messages received during synchronization\n- book: object - The current order book state with sequence, bids, and asks\n\nMethods:\n- constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) -> OrderBook - Initializes the order book with configuration and starts connection\n- clear_book() -> void - Resets the order book and message queue\n- connect() -> void - Establishes new WebSocket connection with event handlers\n- disconnect() -> void - Closes active WebSocket connection\n- changeState(stateName: string) -> void - Updates state machine and handles transitions (emits statechange event)\n- onOpen() -> void - Handles WebSocket open event (starts synchronization)\n- onClose() -> void - Handles WebSocket close event (updates state)\n- onMessage(datastr: string) -> void - Processes incoming WebSocket messages\n- sync() -> void - Sends subscription message and loads initial snapshot\n- processMessage(message: object, t: Date) -> void - Validates and processes order book updates (emits message-type events)",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nclass OrderBook {\n    constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) {\n        var self = this;\n        EventEmitter.call(self);\n\n        self.productID = productID || 'BTC-USD';\n        self.websocketURI = websocketURI || 'wss://ws-feed.exchange.coinbase.com';\n        self.restURI = restURI;\n        self.state = self.STATES.closed;\n        self.fail_count = 0;\n        self.timeProvider = timeProvider;\n        self.connect();\n    }\n\n    STATES = {\n        'closed': 'closed',\n        'open': 'open',\n        'syncing': 'syncing',\n        'processing': 'processing',\n        'error': 'error',\n    };\n\n    clear_book() {\n        var self = this;\n        self.queue = [];\n        self.book = {\n            'sequence': -1,\n            'bids': {},\n            'asks': {},\n        };\n    };\n\n    connect() {\n        var self = this;\n        if (self.socket) {\n            self.socket.close();\n        }\n        self.clear_book();\n        self.socket = new WebSocket(self.websocketURI);\n        self.socket.on('message', self.onMessage.bind(self));\n        self.socket.on('open', self.onOpen.bind(self));\n        self.socket.on('close', self.onClose.bind(self));\n    };\n\n    disconnect() {\n        var self = this;\n        if (!self.socket) {\n            throw \"Could not disconnect (not connected)\"\n        }\n        self.socket.close();\n        self.onClose();\n    };\n\n    changeState(stateName) {\n        var self = this;\n        var newState = self.STATES[stateName];\n        if (newState === undefined) {\n            throw \"Unrecognized state: \" + stateName;\n        }\n        var oldState = self.state;\n        self.state = newState;\n\n        if (self.fail_count > 3)\n            throw \"Tried to reconnect 4 times. Giving up.\";\n\n        if (self.state === self.STATES.error || self.state === self.STATES.closed) {\n            self.fail_count += 1;\n            self.socket.close();\n            setTimeout(() => self.connect(), 5000);\n        }\n        else if (self.state === self.STATES.processing) {\n            self.fail_count = 0;\n        }\n\n        self.emit('statechange', { 'old': oldState, 'new': newState });\n    };\n\n    onOpen() {\n        var self = this;\n        self.changeState(self.STATES.open);\n        self.sync();\n    };\n\n    onClose() {\n        var self = this;\n        self.changeState(self.STATES.closed);\n    };\n\n    onMessage(datastr: string) {\n        var self = this;\n        var t = self.timeProvider.utcNow();\n        var data = JSON.parse(datastr);\n        if (self.state !== self.STATES.processing) {\n            self.queue.push(data);\n        } else {\n            self.processMessage(data, t);\n        }\n    };\n\n    sync() {\n        var self = this;\n        self.changeState(self.STATES.syncing);\n        var subscribeMessage = {\n            'type': 'subscribe',\n            'product_id': self.productID,\n        };\n        self.socket.send(JSON.stringify(subscribeMessage));\n        self.loadSnapshot();\n    };\n\n    processMessage(message, t: Date) {\n        var self = this;\n        if (message.sequence <= self.book.sequence) {\n            self.emit('ignored', message);\n            return;\n        }\n        if (message.sequence != self.book.sequence + 1) {\n            self.changeState(self.STATES.error);\n        }\n        self.book.sequence = message.sequence;\n\n        self.emit(message.type, new Models.Timestamped(message, t));\n    };\n}\n\nutil.inherits(OrderBook, EventEmitter);",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class OrderBook extends require('events') {\n  constructor(productID, websocketURI, restURI, timeProvider) {\n    super();\n    this.productID = productID;\n    this.websocketURI = websocketURI;\n    this.restURI = restURI;\n    this.state = 'disconnected';\n    this.fail_count = 0;\n    this.timeProvider = timeProvider;\n    this.socket = null;\n    this.queue = [];\n    this.book = {\n      sequence: 0,\n      bids: {},\n      asks: {}\n    };\n  }\n\n  clear_book() {\n    this.book = {\n      sequence: 0,\n      bids: {},\n      asks: {}\n    };\n    this.queue = [];\n    this.emit('bookcleared');\n  }\n\n  connect() {\n    if (this.state === 'connected') return;\n    this.fail_count = 0;\n    this.state = 'connecting';\n    this.socket = new WebSocket(this.websocketURI);\n    this.socket.onopen = () => this.onOpen();\n    this.socket.onclose = () => this.onClose();\n    this.socket.onmessage = (event) => this.onMessage(event.data);\n  }\n\n  disconnect() {\n    if (this.state === 'disconnected') return;\n    this.state = 'disconnecting';\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.changeState('disconnected');\n  }\n\n  changeState(stateName) {\n    const state = this.state;\n    this.state = stateName;\n    this.emit('statechange', state, stateName);\n  }\n\n  onOpen() {\n    this.changeState('connected');\n    this.sync();\n  }\n\n  onClose() {\n    this.changeState('disconnected');\n    this.fail_count++;\n    if (this.fail_count > 5) {\n      this.emit('error', 'Too many connection failures');\n    } else {\n      setTimeout(() => this.connect(), 1000 * this.fail_count);\n    }\n  }\n\n  onMessage(datastr) {\n    try {\n      const data = JSON.parse(datastr);\n      this.processMessage(data, this.timeProvider.now());\n    } catch (e) {\n      this.emit('error', 'Invalid message format', e);\n    }\n  }\n\n  sync() {\n    this.socket.send(JSON.stringify({\n      type: 'subscribe',\n      productID: this.productID\n    }));\n    fetch(this.restURI)\n      .then(response => response.json())\n      .then(data => {\n        this.book.sequence = data.sequence;\n        this.book.bids = data.bids;\n        this.book.asks = data.asks;\n        this.emit('snapshot', this.book);\n      })\n      .catch(error => {\n        this.emit('error', 'Failed to load snapshot', error);\n      });\n  }\n\n  processMessage(message, t) {\n    if (message.type === 'heartbeat') return;\n    if (message.type === 'update') {\n      this.book.sequence = message.sequence;\n      this.book.bids = message.bids;\n      this.book.asks = message.asks;\n      this.emit('update', this.book);\n    } else if (message.type === 'trade') {\n      this.emit('trade', message);\n    } else if (message.type === 'error') {\n      this.emit('error', message.error);\n    }\n  }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._onMessage.bind(this);\n  }\n\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.close();\n    }\n  }\n\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeEventListener('message', this._messageListener);\n  }\n\n  _onMessage(event) {\n    if (this._handler) {\n      this._handler.onMessage(event.data);\n    }\n  }\n\n  _messageReceived(message) {\n    this._handler.onMessage(message);\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._frontend = frontend;\n    this._connected = new Set();\n    this._disconnectPromise = new Promise((resolve) => {\n      this._frontend.on('disconnect', () => {\n        resolve();\n      });\n    });\n    this._pipe = '/tmp/nnd_pipe';\n  }\n\n  _startSession(info, frontend) {\n    return new Promise((resolve, reject) => {\n      const channel = new Channel(new WebSocket(info.inspectorUrl));\n      channel.listen({\n        onMessage: (message) => {\n          frontend.on('message', message);\n        }\n      });\n\n      channel._ws.addEventListener('open', () => {\n        this._connected.add(info.id);\n        frontend.on('connect', info.id);\n        resolve(() => {\n          channel.dispose();\n          this._connected.delete(info.id);\n          frontend.on('disconnect', info.id);\n        });\n      });\n\n      channel._ws.addEventListener('error', (error) => {\n        reject(error);\n      });\n\n      channel._ws.addEventListener('close', () => {\n        this._connected.delete(info.id);\n        frontend.on('disconnect', info.id);\n      });\n    });\n  }\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome's DevTools Protocol, handling connection, message exchange, and event emission.\n\nClass Description: The Chrome class extends EventEmitter to create a WebSocket client that connects to Chrome's DevTools Protocol. It manages WebSocket connections, handles message parsing, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- _notifier: [Object] - External notification handler\n- _callbacks: [Object] - Map of pending command callbacks\n- _nextCommandId: [Number] - Counter for generating command IDs\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The active WebSocket connection instance\n\nMethods:\n- constructor: [constructor](options: Object, notifier: Object) -> [Chrome] - Initializes the Chrome instance with connection options and notifier\n- _connectToWebSocket: [_connectToWebSocket]() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleMessage: [_handleMessage](message: Object) -> [void] - Processes incoming WebSocket messages (responses and events)\n- _enqueueCommand: [_enqueueCommand](method: String, params: Object, sessionId: String, callback: Function) -> [void] - Sends a command through WebSocket and tracks its callback\n- send: [send](method: String, ...args: Any) -> [Promise|undefined] - Public method to send commands, supporting both callback and Promise patterns",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this._notifier = notifier;\n        this._callbacks = {};\n        this._nextCommandId = 1;\n        this.webSocketUrl = undefined;\n        this._start();\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n        \n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends EventEmitter {\n  constructor(options = {}, notifier) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n    this.webSocketUrl = this.secure ? `wss://${this.host}:${this.port}` : `ws://${this.host}:${this.port}`;\n    this._ws = null;\n  }\n\n  async _connectToWebSocket() {\n    this._ws = new WebSocket(this.webSocketUrl);\n    this._ws.onopen = () => {\n      this.emit('connected');\n    };\n    this._ws.onmessage = (event) => {\n      this._handleMessage(JSON.parse(event.data));\n    };\n    this._ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.emit('error', error);\n    };\n    this._ws.onclose = () => {\n      this.emit('disconnected');\n    };\n  }\n\n  _handleMessage(message) {\n    if (message.method) {\n      this._handleResponse(message);\n    } else if (message.event) {\n      this._handleEvent(message);\n    }\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    const commandId = this._nextCommandId++;\n    this._callbacks[commandId] = callback;\n    this._ws.send(JSON.stringify({\n      id: commandId,\n      method: method,\n      params: params,\n      session: sessionId\n    }));\n  }\n\n  send(method, ...args) {\n    const sessionId = this._ws.sessionId || 'default';\n    const params = args.length > 0 ? args : [];\n    return new Promise((resolve, reject) => {\n      this._enqueueCommand(method, params, sessionId, (response) => {\n        if (response.error) {\n          reject(response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n    });\n  }\n}"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that handles WebSocket connections, message transmission, and connection lifecycle events.\n\nClass Description: WebSocketImpl is a WebSocket client implementation that manages WebSocket connections, including establishing connections, handling incoming messages, managing connection states, and sending messages. It wraps the 'ws' library functionality with additional state management and event handling.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document associated with the WebSocket\n- _urlRecord: [Object|null] - URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL\n- extensions: [String] - Supported WebSocket extensions\n- binaryType: [String] - Type of binary data handling (\"blob\" or \"arraybuffer\")\n- _ws: [Object|null] - The underlying WebSocket instance\n- _readyState: [Number] - Current connection state (0=CONNECTING, 1=OPEN, 2=CLOSING, 3=CLOSED)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Number of bytes of queued data\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n- _dequeueScheduled: [Boolean] - Flag for send queue scheduling\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket client with configuration and establishes connection\n- _onConnectionEstablished() -> [void] - Handles successful connection establishment\n- _onMessageReceived(data, isBinary) -> [void] - Processes incoming WebSocket messages\n- _onConnectionClosed(code, reason) -> [void] - Handles connection closure\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Queues data for sending through the WebSocket\n- _actuallySend() -> [void] - Internal method that sends queued messages\n- _scheduleSend() -> [void] - Schedules message sending on the next event loop tick",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.document;\n    this._urlRecord = null;\n    this.url = \"\";\n    this.extensions = \"\";\n    this.binaryType = \"blob\";\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const url = args[0];\n    let protocols = args[1] !== undefined ? args[1] : [];\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    if (this._ws.extensions !== null) {\n      this.extensions = Object.keys(this._ws.extensions).join(\", \");\n    }\n    // fire open event\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    // process message data and fire message event\n  }\n\n  _onConnectionClosed(code, reason) {\n    // fire close event\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this.readyState === 0) { // CONNECTING\n      this._requiredToFail = true;\n      if (this._ws !== null) {\n        this._ws.terminate();\n      } else {\n        this._readyState = 2; // CLOSING\n      }\n    } else if (this.readyState === 1) { // OPEN\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this.readyState === 0) { // CONNECTING\n      throw new Error(\"Still in CONNECTING state.\");\n    }\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    let length;\n    if (typeof data === \"string\") {\n      length = Buffer.byteLength(data, \"utf8\");\n    } else {\n      length = data.byteLength;\n    }\n    this.bufferedAmount += length;\n    this._sendQueue.push([data, length]);\n    this._scheduleSend();\n  }\n\n  _actuallySend() {\n    for (const [data, length] of this._sendQueue.splice(0)) {\n      this._ws.send(data, { binary: typeof data !== \"string\" }, () => {\n        this.bufferedAmount -= length;\n      });\n    }\n  }\n\n  _scheduleSend() {\n    if (this._dequeueScheduled) {\n      return;\n    }\n    this._dequeueScheduled = true;\n    process.nextTick(() => {\n      this._dequeueScheduled = false;\n      this._actuallySend();\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = globalObject.document;\n    this._urlRecord = null;\n    this.url = args.url;\n    this.extensions = args.extensions || '';\n    this.binaryType = args.binaryType || 'arraybuffer';\n    this._ws = null;\n    this._readyState = 0;\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n    this._dequeueScheduled = false;\n    this._onConnectionEstablished();\n  }\n\n  _onConnectionEstablished() {\n    if (this._requiredToFail) {\n      this._onConnectionClosed(1006, 'Connection failed as required');\n      return;\n    }\n    this._ws = new WebSocket(this.url, this.extensions);\n    this._ws.binaryType = this.binaryType;\n    this._ws.onopen = () => {\n      this._readyState = 1;\n      this._onMessageReceived = this._onMessageReceived.bind(this);\n      this._onConnectionClosed = this._onConnectionClosed.bind(this);\n      this._ws.onmessage = this._onMessageReceived;\n      this._ws.onclose = this._onConnectionClosed;\n      this._ws.onerror = (event) => {\n        console.error('WebSocket error:', event);\n        this._onConnectionClosed(1002, 'WebSocket error');\n      };\n      this._scheduleSend();\n    };\n    this._ws.onclose = this._onConnectionClosed.bind(this);\n    this._ws.onerror = (event) => {\n      console.error('WebSocket error:', event);\n      this._onConnectionClosed(1002, 'WebSocket error');\n    };\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (isBinary) {\n      this._onMessageReceived = this._onMessageReceived.bind(this);\n      this._onConnectionClosed = this._onConnectionClosed.bind(this);\n      this._ws.onmessage = this._onMessageReceived;\n      this._ws.onclose = this._onConnectionClosed;\n      this._ws.onerror = (event) => {\n        console.error('WebSocket error:', event);\n        this._onConnectionClosed(1002, 'WebSocket error');\n      };\n    }\n    console.log('Received message:', data);\n  }\n\n  _onConnectionClosed(code, reason) {\n    this._readyState = 3;\n    this._ws = null;\n    this._onMessageReceived = null;\n    this._onConnectionClosed = null;\n    this._sendQueue = [];\n    this._dequeueScheduled = false;\n  }\n\n  close(code, reason) {\n    if (this._readyState === 1) {\n      this._ws.close(code, reason);\n    } else {\n      this._onConnectionClosed(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._readyState === 1) {\n      this._sendQueue.push(data);\n      this._scheduleSend();\n    } else {\n      console.warn('Cannot send message: connection is not open');\n    }\n  }\n\n  _actuallySend() {\n    if (this._sendQueue.length > 0) {\n      const data = this._sendQueue.shift();\n      this._ws.send(data);\n      this.bufferedAmount -= data.length;\n    }\n  }\n\n  _scheduleSend() {\n    if (!this._dequeueScheduled) {\n      this._dequeueScheduled = true;\n      setTimeout(() => {\n        this._actuallySend();\n        this._dequeueScheduled = false;\n      }, 0);\n    }\n  }\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a WebSocket processor class that manages WebSocket connections and integrates with an HTTP server for handling real-time communication.\n\nClass Description: The Processor class extends EventEmitter to handle WebSocket connections over an HTTP server. It manages the server lifecycle, connection events, and data transmission between client and server.\n\nAttributes:\n- httpServer: [Object] - Instance of Node.js HTTP server used as base for WebSocket server\n- wsServer: [Object] - WebSocket server instance attached to the HTTP server\n- state: [Number] - Tracks the server state (ST_STARTED or ST_CLOSED)\n\nMethods:\n- constructor() -> [void] - Initializes the HTTP and WebSocket servers, sets up connection event handling\n- add(socket: [Object], data: [Buffer|String]) -> [void] - Processes incoming socket connection and data\n- close() -> [void] - Properly shuts down the WebSocket and HTTP servers",
    "Canonical_solution": "var HttpServer = require('http').Server;\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar WebSocketServer = require('ws').Server;\n\nvar ST_STARTED = 1;\nvar ST_CLOSED = 2;\n\nclass Processor extends EventEmitter {\n  constructor() {\n    super();\n    this.httpServer = new HttpServer();\n    this.wsServer = new WebSocketServer({server: this.httpServer});\n    this.state = ST_STARTED;\n\n    this.wsServer.on('connection', (socket) => {\n      this.emit('connection', socket);\n    });\n  }\n\n  add(socket, data) {\n    if(this.state !== ST_STARTED) {\n      return;\n    }\n    this.httpServer.emit('connection', socket);\n    if(typeof socket.ondata === 'function') {\n      socket.ondata(data, 0, data.length);\n    } else {\n      socket.emit('data', data);\n    }\n  }\n\n  close() {\n    if(this.state !== ST_STARTED) {\n      return;\n    }\n    this.state = ST_CLOSED;\n    this.wsServer.close();\n    this.wsServer = null;\n    this.httpServer = null;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Processor extends require('events').EventEmitter {\n  constructor() {\n    super();\n    this.httpServer = require('http').createServer();\n    this.wsServer = new require('ws').Server({ server: this.httpServer });\n    this.state = 0; // 0 = started, 1 = closed\n    this.setupListeners();\n  }\n\n  setupListeners() {\n    this.wsServer.on('connection', (socket) => {\n      this.add(socket, '');\n    });\n\n    this.httpServer.on('request', (req, res) => {\n      if (req.url === '/ws') {\n        res.writeHead(101, { 'Upgrade': 'websocket' });\n        res.end();\n      } else {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('WebSocket endpoint');\n      }\n    });\n\n    this.httpServer.on('listening', () => {\n      this.state = 0;\n      this.emit('started');\n    });\n\n    this.httpServer.on('close', () => {\n      this.state = 1;\n      this.emit('closed');\n    });\n  }\n\n  add(socket, data) {\n    socket.on('message', (message) => {\n      this.emit('message', socket, message);\n    });\n\n    socket.on('close', () => {\n      this.emit('close', socket);\n    });\n  }\n\n  close() {\n    this.httpServer.close(() => {\n      this.wsServer.close();\n      this.state = 1;\n      this.emit('closed');\n    });\n  }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class Binary {\n  constructor(url, data) {\n    this.url = url;\n    this.name = data?.name || '-1';\n    this.installDirectory = data?.installDirectory || `${process.cwd()}/bin`;\n    this.binaryDirectory = '-1';\n    this.binaryPath = '-1';\n  }\n\n  async install() {\n    try {\n      const installDir = this._getInstallDirectory();\n      await this._ensureDirectoryExists(installDir);\n      await this._downloadBinary();\n      await this._extractBinary(installDir);\n      this.binaryDirectory = installDir;\n      return Promise.resolve(`Installation completed. Binary extracted to: ${installDir}`);\n    } catch (error) {\n      console.error('Installation failed:', error.message);\n      return Promise.reject(error);\n    }\n  }\n\n  _getInstallDirectory() {\n    return this.installDirectory;\n  }\n\n  async _ensureDirectoryExists(path) {\n    if (!fs.existsSync(path)) {\n      fs.mkdirSync(path, { recursive: true });\n    }\n  }\n\n  async _downloadBinary() {\n    const response = await fetch(this.url);\n    if (!response.ok) {\n      throw new Error(`Failed to download binary: ${response.statusText}`);\n    }\n    const buffer = await response.arrayBuffer();\n    const filePath = `${this.installDirectory}/${this.name}`;\n    fs.writeFileSync(filePath, Buffer.from(buffer));\n  }\n\n  async _extractBinary(directory) {\n    const file = fs.readFileSync(`${directory}/${this.name}`);\n    const zip = new ZipFile();\n    zip.addBuffer(file, '');\n    zip.extractAllTo(directory, true);\n    fs.unlinkSync(`${directory}/${this.name}`);\n  }\n}"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n  const url = `wss://${wssUrl}`;\n  const ws = new WebSocket(url);\n\n  ws.onopen = () => {\n    console.log('WebSocket connection established');\n    const initialMessage = { type: 'init', data: 'Hello from client' };\n    ws.send(JSON.stringify(initialMessage));\n  };\n\n  ws.onmessage = (event) => {\n    try {\n      const receivedData = JSON.parse(event.data);\n      console.log('Received message:', receivedData);\n    } catch (error) {\n      console.error('Error parsing received message:', error);\n    }\n  };\n\n  ws.onclose = (event) => {\n    console.log('WebSocket connection closed', event.reason);\n    if (event.wasClean) {\n      console.log('Connection was clean, server initiated close');\n    } else {\n      console.log('Connection was not clean, unexpected closure');\n    }\n  };\n\n  ws.onerror = (error) => {\n    console.error('WebSocket error:', error);\n  };\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript using Node.js that establishes a connection to a WebSocket server, handles incoming messages, and manages connection events.\n\nClass Description: The WebSocketImpl class provides a wrapper around the Node.js 'ws' library to create and manage WebSocket connections. It handles connection establishment, message reception, error handling, and connection closure events. The class also provides methods for sending data and closing the connection.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document object associated with the WebSocket\n- _urlRecord: [Object] - Parsed URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL as a string\n- _ws: [WebSocket|null] - The underlying WebSocket instance or null if not connected\n- _readyState: [Number] - Current connection state (0 = CONNECTING)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Amount of buffered data in bytes\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket connection with the given parameters and sets up event handlers\n- _onConnectionEstablished() -> [void] - Internal method called when the WebSocket connection is successfully established\n- _onMessageReceived(data, isBinary) -> [void] - Internal method called when a message is received from the server\n- _onConnectionClosed(code, reason) -> [void] - Internal method called when the WebSocket connection is closed\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Sends data through the WebSocket connection (supports strings and Blob objects)\n- get readyState() -> [Number] - Returns the current ready state of the WebSocket connection",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = idlUtils.implForWrapper(globalObject._document);\n    this._urlRecord = parseURL(args[0]);\n    this.url = serializeURL(this._urlRecord);\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const protocols = typeof args[1] === \"string\" ? [args[1]] : (args[1] || []);\n    const nodeParsedURL = nodeURL.parse(this.url);\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    fireAnEvent(\"open\", this);\n  }\n\n  _onMessageReceived(data, isBinary) {\n    let dataForEvent;\n    if (!isBinary) {\n      dataForEvent = data.toString();\n    } else if (this.binaryType === \"arraybuffer\") {\n      dataForEvent = copyToArrayBufferInNewRealm(data, this._globalObject);\n    } else {\n      dataForEvent = Blob.create(this._globalObject, [[data], { type: \"\" }]);\n    }\n    fireAnEvent(\"message\", this, MessageEvent, {\n      data: dataForEvent,\n      origin: serializeURLOrigin(this._urlRecord)\n    });\n  }\n\n  _onConnectionClosed(code, reason) {\n    fireAnEvent(\"close\", this, CloseEvent, {\n      wasClean: !this._requiredToFail,\n      code,\n      reason: reason.toString()\n    });\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this._ws) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n      if (Blob.isImpl(data)) {\n        data = data._buffer;\n      }\n      this._ws.send(data, { binary: typeof data !== \"string\" });\n    }\n  }\n\n  get readyState() {\n    return this._ws ? this._ws.readyState : this._readyState;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = globalObject.document;\n    this._urlRecord = new URL(args.url, globalObject.location);\n    this.url = args.url;\n    this._ws = null;\n    this._readyState = 0;\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n    this._init();\n  }\n\n  _init() {\n    if (this._requiredToFail) {\n      this._onConnectionClosed(1006, 'Connection failed as requested');\n      return;\n    }\n\n    this._ws = new WebSocket(this.url);\n    this._ws.onopen = () => this._onConnectionEstablished();\n    this._ws.onmessage = (event) => this._onMessageReceived(event.data, event.binaryType === 'arraybuffer');\n    this._ws.onclose = (event) => this._onConnectionClosed(event.code, event.reason);\n    this._ws.onerror = (error) => this._onConnectionClosed(1002, 'Error: ' + error.message);\n  }\n\n  _onConnectionEstablished() {\n    this._readyState = 1;\n    this._processSendQueue();\n  }\n\n  _onMessageReceived(data, isBinary) {\n    this._onMessage(data, isBinary);\n  }\n\n  _onConnectionClosed(code, reason) {\n    this._readyState = 2;\n    this._onClose(code, reason);\n  }\n\n  close(code, reason) {\n    if (this._ws && this._ws.readyState === 1) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._ws && this._ws.readyState === 1) {\n      if (typeof data === 'string') {\n        this._ws.send(data);\n      } else if (data instanceof Blob) {\n        this._ws.send(data);\n      } else {\n        throw new TypeError('Invalid data type for send');\n      }\n    } else {\n      this._sendQueue.push(data);\n    }\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n\n  _processSendQueue() {\n    while (this._sendQueue.length > 0) {\n      const message = this._sendQueue.shift();\n      this._ws.send(message);\n    }\n  }\n\n  _onMessage(data, isBinary) {\n    // Handle incoming message\n  }\n\n  _onClose(code, reason) {\n    // Handle connection closed\n  }\n}"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Implement a ReconnectingWebSocket class in JavaScript that provides a WebSocket client with automatic reconnection capabilities, customizable reconnection strategies, and event handling for connection states, messages, and errors.\n\nClass Description: The ReconnectingWebSocket class extends basic WebSocket functionality by automatically reconnecting when the connection is lost, with configurable reconnection intervals and exponential backoff. It provides event handlers for connection states (open, close, connecting), message reception, and errors.\n\nAttributes:\n- debug: Boolean - Enables debug logging when true\n- automaticOpen: Boolean - Automatically opens connection when instantiated if true\n- reconnectInterval: Number - Initial delay before reconnection attempt (ms)\n- maxReconnectInterval: Number - Maximum delay between reconnection attempts (ms)\n- reconnectDecay: Number - Multiplier for increasing reconnect delay\n- timeoutInterval: Number - Connection timeout duration (ms)\n- url: String - WebSocket server URL\n- reconnectAttempts: Number - Count of reconnection attempts\n- readyState: Number - Current connection state (matching WebSocket constants)\n- protocol: String|null - Selected subprotocol\n\nMethods:\n- constructor(url, protocols, options) -> ReconnectingWebSocket - Initializes the WebSocket connection with specified URL, optional subprotocols, and configuration options\n- addEventListener(type, listener) -> void - Adds event listener for WebSocket events\n- removeEventListener(type, listener) -> void - Removes event listener\n- dispatchEvent(event) -> void - Dispatches custom event\n- open(wasReconnect) -> void - Opens WebSocket connection (internal use)\n- send(data) -> void - Sends data through WebSocket connection\n- close(code, reason) -> void - Closes WebSocket connection and stops reconnection attempts\n- refresh() -> void - Forces reconnection by closing current connection\n- createEvent(eventName, detail) -> CustomEvent - Creates custom event object\n- onopen(event) -> void - Placeholder for open event handler\n- onclose(event) -> void - Placeholder for close event handler\n- onconnecting(event) -> void - Placeholder for connecting event handler\n- onmessage(event) -> void - Placeholder for message event handler\n- onerror(event) -> void - Placeholder for error event handler",
    "Canonical_solution": "class ReconnectingWebSocket {\n    constructor(url, protocols, options) {\n        this.debug = false;\n        this.automaticOpen = true;\n        this.reconnectInterval = 1000;\n        this.maxReconnectInterval = 30000;\n        this.reconnectDecay = 1.5;\n        this.timeoutInterval = 2000;\n        \n        if (options) {\n            for (var key in options) {\n                this[key] = options[key];\n            }\n        }\n        \n        this.url = url;\n        this.reconnectAttempts = 0;\n        this.readyState = WebSocket.CONNECTING;\n        this.protocol = null;\n        \n        var forcedClose = false;\n        var timedOut = false;\n        var eventTarget = document.createElement('div');\n        \n        eventTarget.addEventListener('open', (event) => { this.onopen(event); });\n        eventTarget.addEventListener('close', (event) => { this.onclose(event); });\n        eventTarget.addEventListener('connecting', (event) => { this.onconnecting(event); });\n        eventTarget.addEventListener('message', (event) => { this.onmessage(event); });\n        eventTarget.addEventListener('error', (event) => { this.onerror(event); });\n        \n        this.addEventListener = eventTarget.addEventListener.bind(eventTarget);\n        this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);\n        this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);\n        \n        this.open = function(wasReconnect) {\n            var ws = new WebSocket(this.url, protocols || []);\n            if (!wasReconnect) {\n                eventTarget.dispatchEvent(this.createEvent('connecting'));\n            }\n            \n            var timeout = setTimeout(() => {\n                timedOut = true;\n                ws.close();\n                timedOut = false;\n            }, this.timeoutInterval);\n            \n            ws.onopen = () => {\n                clearTimeout(timeout);\n                this.protocol = ws.protocol;\n                this.readyState = WebSocket.OPEN;\n                this.reconnectAttempts = 0;\n                var event = this.createEvent('open');\n                event.isReconnect = wasReconnect;\n                wasReconnect = false;\n                eventTarget.dispatchEvent(event);\n            };\n            \n            ws.onclose = (event) => {\n                clearTimeout(timeout);\n                ws = null;\n                if (forcedClose) {\n                    this.readyState = WebSocket.CLOSED;\n                    eventTarget.dispatchEvent(this.createEvent('close'));\n                } else {\n                    this.readyState = WebSocket.CONNECTING;\n                    var connectingEvent = this.createEvent('connecting');\n                    connectingEvent.code = event.code;\n                    connectingEvent.reason = event.reason;\n                    connectingEvent.wasClean = event.wasClean;\n                    eventTarget.dispatchEvent(connectingEvent);\n                    \n                    if (!wasReconnect && !timedOut) {\n                        eventTarget.dispatchEvent(this.createEvent('close'));\n                    }\n                    \n                    var reconnectTimeout = this.reconnectInterval * Math.pow(this.reconnectDecay, this.reconnectAttempts);\n                    setTimeout(() => {\n                        this.reconnectAttempts++;\n                        this.open(true);\n                    }, Math.min(reconnectTimeout, this.maxReconnectInterval));\n                }\n            };\n            \n            ws.onmessage = (event) => {\n                var messageEvent = this.createEvent('message');\n                messageEvent.data = event.data;\n                eventTarget.dispatchEvent(messageEvent);\n            };\n            \n            ws.onerror = (event) => {\n                eventTarget.dispatchEvent(this.createEvent('error'));\n            };\n        };\n        \n        if (this.automaticOpen) {\n            this.open(false);\n        }\n        \n        this.send = function(data) {\n            if (ws) {\n                return ws.send(data);\n            } else {\n                throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';\n            }\n        };\n        \n        this.close = function(code, reason) {\n            forcedClose = true;\n            if (ws) {\n                ws.close(code || 1000, reason);\n            }\n        };\n        \n        this.refresh = function() {\n            if (ws) {\n                ws.close();\n            }\n        };\n    }\n    \n    createEvent(eventName, detail) {\n        var event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, false, false, detail);\n        return event;\n    }\n    \n    onopen(event) {}\n    onclose(event) {}\n    onconnecting(event) {}\n    onmessage(event) {}\n    onerror(event) {}\n}\n\nReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;\nReconnectingWebSocket.OPEN = WebSocket.OPEN;\nReconnectingWebSocket.CLOSING = WebSocket.CLOSING;\nReconnectingWebSocket.CLOSED = WebSocket.CLOSED;\nReconnectingWebSocket.debugAll = false;",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class ReconnectingWebSocket extends WebSocket {\n  constructor(url, protocols, options) {\n    super(url, protocols);\n    this.debug = options && options.debug !== false;\n    this.automaticOpen = options && options.automaticOpen !== false;\n    this.reconnectInterval = options && options.reconnectInterval || 1000;\n    this.maxReconnectInterval = options && options.maxReconnectInterval || 30000;\n    this.reconnectDecay = options && options.reconnectDecay || 2;\n    this.timeoutInterval = options && options.timeoutInterval || 30000;\n    this.url = url;\n    this.reconnectAttempts = 0;\n    this.readyState = this.constructor.OPEN;\n    this.protocol = null;\n\n    if (this.automaticOpen) {\n      this.open(true);\n    }\n\n    this.addEventListener('open', this.onopen.bind(this));\n    this.addEventListener('close', this.onclose.bind(this));\n    this.addEventListener('connecting', this.onconnecting.bind(this));\n    this.addEventListener('message', this.onmessage.bind(this));\n    this.addEventListener('error', this.onerror.bind(this));\n  }\n\n  addEventListener(type, listener) {\n    super.addEventListener(type, listener);\n  }\n\n  removeEventListener(type, listener) {\n    super.removeEventListener(type, listener);\n  }\n\n  dispatchEvent(event) {\n    super.dispatchEvent(event);\n  }\n\n  open(wasReconnect) {\n    if (this.readyState === this.constructor.OPEN) {\n      return;\n    }\n\n    const startTime = Date.now();\n    const timeout = setTimeout(() => {\n      if (this.readyState === this.constructor.OPEN) return;\n      this.onerror({ message: `Connection timed out after ${this.timeoutInterval}ms` });\n    }, this.timeoutInterval);\n\n    try {\n      this._connect(wasReconnect);\n    } catch (err) {\n      this.onerror(err);\n    }\n\n    this.reconnectAttempts = 0;\n    this.readyState = this.constructor.CONNECTING;\n    this.onconnecting(new CustomEvent('connecting', { detail: { wasReconnect } }));\n  }\n\n  _connect(wasReconnect) {\n    if (this.readyState === this.constructor.OPEN) {\n      return;\n    }\n\n    try {\n      this.close();\n      this = new ReconnectingWebSocket(this.url, this.protocol, {\n        debug: this.debug,\n        automaticOpen: this.automaticOpen,\n        reconnectInterval: this.reconnectInterval,\n        maxReconnectInterval: this.maxReconnectInterval,\n        reconnectDecay: this.reconnectDecay,\n        timeoutInterval: this.timeoutInterval\n      });\n\n      if (wasReconnect) {\n        this.onopen(new CustomEvent('open', { detail: { wasReconnect } }));\n      } else {\n        this.onopen(new CustomEvent('open', { detail: { wasReconnect: false } }));\n      }\n    } catch (err) {\n      this.onerror(err);\n    }\n  }\n\n  send(data) {\n    if (this.readyState === this.constructor.OPEN) {\n      super.send(data);\n    } else {\n      this.open(false);\n    }\n  }\n\n  close(code, reason) {\n    super.close(code, reason);\n    this.reconnectAttempts = 0;\n    this.readyState = this.constructor.CLOSED;\n    this.onclose(new CustomEvent('close', { detail: { code, reason } }));\n  }\n\n  refresh() {\n    this.close();\n    this.open(true);\n  }\n\n  createEvent(eventName, detail) {\n    return new CustomEvent(eventName, { detail });\n  }\n\n  onopen(event) {\n    this.readyState = this.constructor.OPEN;\n    this.onopen(event);\n  }\n\n  onclose(event) {\n    this.readyState = this.constructor.CLOSED;\n    this.onclose(event);\n  }\n\n  onconnecting(event) {\n    this.readyState = this.constructor.CONNECTING;\n    this.onconnecting(event);\n  }\n\n  onmessage(event) {\n    this.onmessage(event);\n  }\n\n  onerror(event) {\n    this.onerror(event);\n  }\n}"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Implement a WebSocket transport class for establishing and managing WebSocket connections in a browser or Node.js environment, supporting both binary and text data transmission with configurable options.\n\nClass Description: The WS class extends a base Transport class to provide WebSocket-specific functionality. It handles connection establishment, message transmission, error handling, and connection cleanup, with support for various WebSocket options like binary data, compression, and security settings.\n\nAttributes:\n- supportsBinary: Boolean - Indicates whether the connection supports binary data transmission\n- perMessageDeflate: Object - Configuration for message compression\n- ws: WebSocket - The underlying WebSocket connection instance\n- writable: Boolean - Indicates if the connection is ready to send data\n\nMethods:\n- constructor(opts: Object) -> void - Initializes the WebSocket transport with configuration options\n- doOpen() -> void - Establishes the WebSocket connection and sets up event listeners\n- addEventListeners() -> void - Attaches event handlers for connection events (open, close, message, error)\n- write(packets: Array) -> void - Encodes and sends multiple packets through the WebSocket connection\n- onClose() -> void - Handles connection closure and cleans up resources\n- doClose() -> void - Explicitly closes the WebSocket connection\n- uri() -> String - Generates the WebSocket connection URI with query parameters\n- check() -> Boolean - Verifies WebSocket availability and compatibility\n\nInput:\n- opts: Object - Configuration options including:\n  - forceBase64: Boolean - Forces base64 encoding if binary not supported\n  - perMessageDeflate: Object - Compression settings\n  - agent: Object - Custom HTTP agent\n  - pfx: String - SSL PFX certificate\n  - key: String - SSL key\n  - passphrase: String - SSL passphrase\n  - cert: String - SSL certificate\n  - ca: Array - SSL certificate authorities\n  - ciphers: String - SSL cipher suite\n  - rejectUnauthorized: Boolean - SSL verification setting\n  - extraHeaders: Object - Additional HTTP headers\n  - secure: Boolean - Use secure protocol (wss)\n  - port: Number - Custom port number\n  - timestampRequests: Boolean - Add timestamp to requests\n  - timestampParam: String - Parameter name for timestamp\n  - hostname: String - Server hostname\n  - path: String - WebSocket endpoint path\n  - query: Object - Additional query parameters\n\nOutput:\n- Instance of WS class with established WebSocket connection and configured event handlers",
    "Canonical_solution": "var Transport = require('../transport');\nvar parser = require('engine.io-parser');\nvar parseqs = require('parseqs');\nvar inherit = require('component-inherit');\nvar yeast = require('yeast');\nvar debug = require('debug')('engine.io-client:websocket');\nvar BrowserWebSocket = global.WebSocket || global.MozWebSocket;\n\nvar WebSocket = BrowserWebSocket;\nif (!WebSocket && typeof window === 'undefined') {\n  try {\n    WebSocket = require('ws');\n  } catch (e) { }\n}\n\nfunction WS(opts){\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  this.perMessageDeflate = opts.perMessageDeflate;\n  Transport.call(this, opts);\n}\n\ninherit(WS, Transport);\n\nWS.prototype.name = 'websocket';\nWS.prototype.supportsBinary = true;\n\nWS.prototype.doOpen = function(){\n  if (!this.check()) {\n    return;\n  }\n\n  var self = this;\n  var uri = this.uri();\n  var protocols = void(0);\n  var opts = {\n    agent: this.agent,\n    perMessageDeflate: this.perMessageDeflate\n  };\n\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n  if (this.extraHeaders) {\n    opts.headers = this.extraHeaders;\n  }\n\n  this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  if (this.ws.supports && this.ws.supports.binary) {\n    this.supportsBinary = true;\n    this.ws.binaryType = 'buffer';\n  } else {\n    this.ws.binaryType = 'arraybuffer';\n  }\n\n  this.addEventListeners();\n};\n\nWS.prototype.addEventListeners = function(){\n  var self = this;\n\n  this.ws.onopen = function(){\n    self.onOpen();\n  };\n  this.ws.onclose = function(){\n    self.onClose();\n  };\n  this.ws.onmessage = function(ev){\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function(e){\n    self.onError('websocket error', e);\n  };\n};\n\nWS.prototype.write = function(packets){\n  var self = this;\n  this.writable = false;\n\n  var total = packets.length;\n  for (var i = 0, l = total; i < l; i++) {\n    (function(packet) {\n      parser.encodePacket(packet, self.supportsBinary, function(data) {\n        if (!BrowserWebSocket) {\n          var opts = {};\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (self.perMessageDeflate) {\n            var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;\n            if (len < self.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        try {\n          if (BrowserWebSocket) {\n            self.ws.send(data);\n          } else {\n            self.ws.send(data, opts);\n          }\n        } catch (e){\n          debug('websocket closed before onclose event');\n        }\n\n        --total || done();\n      });\n    })(packets[i]);\n  }\n\n  function done(){\n    self.emit('flush');\n    setTimeout(function(){\n      self.writable = true;\n      self.emit('drain');\n    }, 0);\n  }\n};\n\nWS.prototype.onClose = function(){\n  Transport.prototype.onClose.call(this);\n};\n\nWS.prototype.doClose = function(){\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\nWS.prototype.uri = function(){\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  if (this.port && (('wss' == schema && this.port != 443)\n    || ('ws' == schema && this.port != 80))) {\n    port = ':' + this.port;\n  }\n\n  if (this.timestampRequests) {\n    query[this.timestampParam] = yeast();\n  }\n\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  var ipv6 = this.hostname.indexOf(':') !== -1;\n  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;\n};\n\nWS.prototype.check = function(){\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WS extends Transport {\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = false;\n    this.perMessageDeflate = {};\n    this.ws = null;\n    this.writable = false;\n    this.opts = opts;\n  }\n\n  doOpen() {\n    const { secure, hostname, port, path, query, extraHeaders, agent, pfx, key, passphrase, cert, ca, ciphers, rejectUnauthorized, forceBase64 } = this.opts;\n\n    const protocol = secure ? 'wss' : 'ws';\n    const uri = `${protocol}://${hostname}${port ? `:${port}` : ''}${path || ''}`;\n    const params = new URLSearchParams(query || {});\n\n    const wsOptions = {\n      protocol,\n      hostname,\n      port,\n      path,\n      headers: extraHeaders,\n      agent,\n      pfx,\n      key,\n      passphrase,\n      cert,\n      ca,\n      ciphers,\n      rejectUnauthorized,\n      origin: 'https://example.com'\n    };\n\n    this.ws = new WebSocket(uri, wsOptions.protocol);\n    this.addEventListeners();\n    this.writable = true;\n  }\n\n  addEventListeners() {\n    this.ws.addEventListener('open', () => {\n      this.doOpen();\n    });\n\n    this.ws.addEventListener('close', () => {\n      this.onClose();\n    });\n\n    this.ws.addEventListener('message', (event) => {\n      this.onMessage(event.data);\n    });\n\n    this.ws.addEventListener('error', (err) => {\n      this.onError(err);\n    });\n  }\n\n  write(packets) {\n    if (!this.writable) return;\n\n    packets.forEach(packet => {\n      if (packet.binary) {\n        this.ws.send(packet.data, { binary: true });\n      } else {\n        this.ws.send(packet.data);\n      }\n    });\n  }\n\n  onClose() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.close();\n    }\n    this.writable = false;\n  }\n\n  doClose() {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.close();\n    }\n  }\n\n  uri() {\n    const { secure, hostname, port, path, query } = this.opts;\n    const protocol = secure ? 'wss' : 'ws';\n    const uri = `${protocol}://${hostname}${port ? `:${port}` : ''}${path || ''}`;\n    const params = new URLSearchParams(query || {});\n    return `${uri}?${params.toString()}`;\n  }\n\n  check() {\n    return this.ws && this.ws.readyState === WebSocket.OPEN;\n  }\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendWebhook(data) {\n  const webhookUrl = 'https://example.com/webhook';\n  try {\n    const response = await fetch(webhookUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.error('Error sending webhook:', error);\n  }\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes multiple WebSocket connections for different binary data types (byte array, byte buffer, and input stream) and handles their communication events.\n\nClass Description: The WebSocketClient class manages three WebSocket connections for different binary data types. It initializes connections, sets binary data types, handles connection events (open, message, error), and provides methods for sending binary data and displaying communication status.\n\nAttributes:\n- websocketByteArray: [WebSocket] - WebSocket connection for byte array data\n- websocketByteBuffer: [WebSocket] - WebSocket connection for byte buffer data\n- websocketInputStream: [WebSocket] - WebSocket connection for input stream data\n- output: [HTMLElement] - DOM element for displaying communication logs\n\nMethods:\n- constructor() -> [void] - Initializes WebSocket connections and event handlers\n- initializeEventHandlers() -> [void] - Sets up event handlers for all WebSocket connections\n- onOpenByteArray(evt: [Event]) -> [void] - Handles byte array connection open event\n- onOpenByteBuffer(evt: [Event]) -> [void] - Handles byte buffer connection open event\n- onOpenInputStream(evt: [Event]) -> [void] - Handles input stream connection open event\n- echoBinaryByteArray() -> [void] - Sends binary data as byte array\n- echoBinaryByteBuffer() -> [void] - Sends binary data as byte buffer\n- echoBinaryInputStream() -> [void] - Sends binary data as input stream\n- onMessageByteArray(evt: [MessageEvent]) -> [void] - Handles received byte array messages\n- onMessageByteBuffer(evt: [MessageEvent]) -> [void] - Handles received byte buffer messages\n- onMessageInputStream(evt: [MessageEvent]) -> [void] - Handles received input stream messages\n- onError(evt: [Event]) -> [void] - Handles WebSocket errors\n- writeToScreen(message: [string]) -> [void] - Displays messages in the output element",
    "Canonical_solution": "var wsByteArrayUri = \"ws://\" + document.location.host + document.location.pathname + \"bytearray\";\nvar wsByteBufferUri = \"ws://\" + document.location.host + document.location.pathname + \"bytebuffer\";\nvar wsInputStreamUri = \"ws://\" + document.location.host + document.location.pathname + \"inputstream\";\n\nclass WebSocketClient {\n    constructor() {\n        this.websocketByteArray = new WebSocket(wsByteArrayUri);\n        this.websocketByteBuffer = new WebSocket(wsByteBufferUri);\n        this.websocketInputStream = new WebSocket(wsInputStreamUri);\n        \n        this.websocketByteArray.binaryType = \"arraybuffer\";\n        this.websocketByteBuffer.binaryType = \"arraybuffer\";\n        this.websocketInputStream.binaryType = \"arraybuffer\";\n        \n        this.output = document.getElementById(\"output\");\n        \n        this.initializeEventHandlers();\n    }\n\n    initializeEventHandlers() {\n        this.websocketByteArray.onopen = (evt) => this.onOpenByteArray(evt);\n        this.websocketByteArray.onmessage = (evt) => this.onMessageByteArray(evt);\n        this.websocketByteArray.onerror = (evt) => this.onError(evt);\n\n        this.websocketByteBuffer.onopen = (evt) => this.onOpenByteBuffer(evt);\n        this.websocketByteBuffer.onmessage = (evt) => this.onMessageByteBuffer(evt);\n        this.websocketByteBuffer.onerror = (evt) => this.onError(evt);\n\n        this.websocketInputStream.onopen = (evt) => this.onOpenInputStream(evt);\n        this.websocketInputStream.onmessage = (evt) => this.onMessageInputStream(evt);\n        this.websocketInputStream.onerror = (evt) => this.onError(evt);\n    }\n\n    onOpenByteArray() {\n        console.log(\"onOpen (byte])\");\n    }\n\n    onOpenByteBuffer() {\n        console.log(\"onOpen (ByteBuffer)\");\n    }\n\n    onOpenInputStream() {\n        console.log(\"onOpen (InputStream)\");\n    }\n\n    echoBinaryByteArray() {\n        var buffer = new ArrayBuffer(myField.value.length);\n        var bytes = new Uint8Array(buffer);\n        for (var i=0; i<bytes.length; i++) {\n            bytes[i] = i;\n        }\n        this.websocketByteArray.send(buffer);\n        this.writeToScreen(\"SENT (byte[]): \" + buffer.byteLength + \" bytes\");\n    }\n\n    echoBinaryByteBuffer() {\n        var buffer = new ArrayBuffer(myField.value.length);\n        var bytes = new Uint8Array(buffer);\n        for (var i=0; i<bytes.length; i++) {\n            bytes[i] = i;\n        }\n        this.websocketByteBuffer.send(buffer);\n        this.writeToScreen(\"SENT (ByteBuffer): \" + buffer.byteLength + \" bytes\");\n    }\n\n    echoBinaryInputStream() {\n        var buffer = new ArrayBuffer(myField.value.length);\n        var bytes = new Uint8Array(buffer);\n        for (var i=0; i<bytes.length; i++) {\n            bytes[i] = i;\n        }\n        this.websocketInputStream.send(buffer);\n        this.writeToScreen(\"SENT (InputStream): \" + buffer.byteLength + \" bytes\");\n    }\n\n    onMessageByteArray(evt) {\n        this.writeToScreen(\"RECEIVED (byte[]): \" + evt.data);\n    }\n\n    onMessageByteBuffer(evt) {\n        this.writeToScreen(\"RECEIVED (ByteBuffer): \" + evt.data);\n    }\n\n    onMessageInputStream(evt) {\n        this.writeToScreen(\"RECEIVED (InputStream): \" + evt.data);\n    }\n\n    onError(evt) {\n        this.writeToScreen('<span style=\"color: red;\">ERROR:</span> ' + evt.data);\n    }\n\n    writeToScreen(message) {\n        var pre = document.createElement(\"p\");\n        pre.style.wordWrap = \"break-word\";\n        pre.innerHTML = message;\n        this.output.appendChild(pre);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WebSocketClient {\n  constructor() {\n    this.websocketByteArray = new WebSocket('ws://example.com/bytearray');\n    this.websocketByteBuffer = new WebSocket('ws://example.com/bytebuffer');\n    this.websocketInputStream = new WebSocket('ws://example.com/inputstream');\n    this.output = document.getElementById('output');\n    this.initializeEventHandlers();\n  }\n\n  initializeEventHandlers() {\n    this.websocketByteArray.addEventListener('open', this.onOpenByteArray);\n    this.websocketByteArray.addEventListener('message', this.onMessageByteArray);\n    this.websocketByteArray.addEventListener('error', this.onError);\n\n    this.websocketByteBuffer.addEventListener('open', this.onOpenByteBuffer);\n    this.websocketByteBuffer.addEventListener('message', this.onMessageByteBuffer);\n    this.websocketByteBuffer.addEventListener('error', this.onError);\n\n    this.websocketInputStream.addEventListener('open', this.onOpenInputStream);\n    this.websocketInputStream.addEventListener('message', this.onMessageInputStream);\n    this.websocketInputStream.addEventListener('error', this.onError);\n  }\n\n  onOpenByteArray(evt) {\n    this.writeToScreen('Byte array connection opened.');\n  }\n\n  onOpenByteBuffer(evt) {\n    this.writeToScreen('Byte buffer connection opened.');\n  }\n\n  onOpenInputStream(evt) {\n    this.writeToScreen('Input stream connection opened.');\n  }\n\n  echoBinaryByteArray() {\n    const byteArray = new Uint8Array([1, 2, 3]);\n    this.websocketByteArray.send(byteArray);\n    this.writeToScreen('Sent byte array data.');\n  }\n\n  echoBinaryByteBuffer() {\n    const byteBuffer = new ArrayBuffer(3);\n    const view = new DataView(byteBuffer);\n    view.setUint8(0, 1);\n    view.setUint8(1, 2);\n    view.setUint8(2, 3);\n    this.websocketByteBuffer.send(byteBuffer);\n    this.writeToScreen('Sent byte buffer data.');\n  }\n\n  echoBinaryInputStream() {\n    const inputStream = new Blob([1, 2, 3], { type: 'application/octet-stream' });\n    this.websocketInputStream.send(inputStream);\n    this.writeToScreen('Sent input stream data.');\n  }\n\n  onMessageByteArray(evt) {\n    this.writeToScreen(`Received byte array: ${evt.data}`);\n  }\n\n  onMessageByteBuffer(evt) {\n    this.writeToScreen(`Received byte buffer: ${evt.data}`);\n  }\n\n  onMessageInputStream(evt) {\n    this.writeToScreen(`Received input stream: ${evt.data}`);\n  }\n\n  onError(evt) {\n    this.writeToScreen(`Error occurred: ${evt.message}`);\n  }\n\n  writeToScreen(message) {\n    this.output.innerHTML += message + '<br>';\n  }\n}"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Implement a LiveQueryClient class that manages WebSocket connections for real-time data updates in a Parse server environment, handling connection lifecycle, subscriptions, and error recovery.\n\nClass Description: The LiveQueryClient class establishes and maintains a WebSocket connection to a Parse LiveQuery server, manages subscriptions to queries, handles connection events (open, message, error, close), and implements automatic reconnection logic.\n\nAttributes:\n- attempts: number - Tracks reconnection attempts for exponential backoff\n- id: number - Unique client identifier assigned by server\n- requestId: number - Counter for subscription requests\n- applicationId: string - Parse application ID for authentication\n- serverURL: string - WebSocket server URL (must start with 'ws' or 'wss')\n- javascriptKey: string (optional) - JavaScript key for authentication\n- masterKey: string (optional) - Master key for authentication\n- sessionToken: string (optional) - User session token\n- installationId: string (optional) - Device installation identifier\n- additionalProperties: boolean - Flag to include additional properties in requests\n- connectPromise: Promise - Promise resolved when connection is established\n- subscriptions: Map<number, LiveQuerySubscription> - Active subscriptions\n- socket: WebSocketController - WebSocket connection controller\n- state: string - Current connection state (INITIALIZED, CONNECTING, CONNECTED, etc.)\n- reconnectHandle: any - Timeout handle for reconnection attempts\n- emitter: EventEmitter - Event emitter for connection events\n- on: function - Shortcut to emitter.on\n- emit: function - Shortcut to emitter.emit\n\nMethods:\n- constructor({applicationId, serverURL, javascriptKey, masterKey, sessionToken, installationId}) -> void - Initializes the client with connection parameters and validates serverURL\n- open() -> void - Establishes WebSocket connection and sets up event handlers\n- _handleWebSocketOpen() -> void - Sends connection request to server after WebSocket opens\n- _handleWebSocketMessage(event: any) -> void - Processes incoming messages from server and handles connection confirmation\n- _handleWebSocketClose() -> void - Handles connection closure and triggers reconnection\n- _handleWebSocketError(error: any) -> void - Handles WebSocket errors and triggers reconnection\n- _handleReconnect() -> void - Implements exponential backoff reconnection logic",
    "Canonical_solution": "import CoreManager, { WebSocketController } from './CoreManager';\nimport ParseObject from './ParseObject';\nimport LiveQuerySubscription from './LiveQuerySubscription';\nimport { resolvingPromise } from './promiseUtils';\nimport ParseError from './ParseError';\nimport type ParseQuery from './ParseQuery';\n\nclass LiveQueryClient {\n  attempts: number;\n  id: number;\n  requestId: number;\n  applicationId: string;\n  serverURL: string;\n  javascriptKey?: string;\n  masterKey?: string;\n  sessionToken?: string;\n  installationId?: string;\n  additionalProperties: boolean;\n  connectPromise: any;\n  subscriptions: Map<number, LiveQuerySubscription>;\n  socket: WebSocketController & { closingPromise?: any };\n  state: string;\n  reconnectHandle: any;\n  emitter: any;\n  on: any;\n  emit: any;\n\n  constructor({\n    applicationId,\n    serverURL,\n    javascriptKey,\n    masterKey,\n    sessionToken,\n    installationId,\n  }) {\n    if (!serverURL || serverURL.indexOf('ws') !== 0) {\n      throw new Error(\n        'You need to set a proper Parse LiveQuery server url before using LiveQueryClient'\n      );\n    }\n\n    this.reconnectHandle = null;\n    this.attempts = 1;\n    this.id = 0;\n    this.requestId = 1;\n    this.serverURL = serverURL;\n    this.applicationId = applicationId;\n    this.javascriptKey = javascriptKey || undefined;\n    this.masterKey = masterKey || undefined;\n    this.sessionToken = sessionToken || undefined;\n    this.installationId = installationId || undefined;\n    this.additionalProperties = true;\n    this.connectPromise = resolvingPromise();\n    this.subscriptions = new Map();\n    this.state = CLIENT_STATE.INITIALIZED;\n    const EventEmitter = CoreManager.getEventEmitter();\n    this.emitter = new EventEmitter();\n\n    this.on = (eventName, listener) => this.emitter.on(eventName, listener);\n    this.emit = (eventName, ...args) => this.emitter.emit(eventName, ...args);\n    this.on('error', () => {});\n  }\n\n  open() {\n    const WebSocketImplementation = CoreManager.getWebSocketController();\n    if (!WebSocketImplementation) {\n      this.emit(CLIENT_EMMITER_TYPES.ERROR, 'Can not find WebSocket implementation');\n      return;\n    }\n\n    if (this.state !== CLIENT_STATE.RECONNECTING) {\n      this.state = CLIENT_STATE.CONNECTING;\n    }\n\n    this.socket = new WebSocketImplementation(this.serverURL);\n    this.socket.closingPromise = resolvingPromise();\n\n    this.socket.onopen = () => {\n      this._handleWebSocketOpen();\n    };\n\n    this.socket.onmessage = event => {\n      this._handleWebSocketMessage(event);\n    };\n\n    this.socket.onclose = event => {\n      this.socket.closingPromise?.resolve(event);\n      this._handleWebSocketClose();\n    };\n\n    this.socket.onerror = error => {\n      this._handleWebSocketError(error);\n    };\n  }\n\n  _handleWebSocketOpen() {\n    const connectRequest = {\n      op: OP_TYPES.CONNECT,\n      applicationId: this.applicationId,\n      javascriptKey: this.javascriptKey,\n      masterKey: this.masterKey,\n      sessionToken: this.sessionToken,\n      installationId: undefined as string | undefined,\n    };\n    if (this.additionalProperties) {\n      connectRequest.installationId = this.installationId;\n    }\n    this.socket.send(JSON.stringify(connectRequest));\n  }\n\n  _handleWebSocketMessage(event: any) {\n    let data = event.data;\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    let subscription: null | LiveQuerySubscription = null;\n    if (data.requestId) {\n      subscription = this.subscriptions.get(data.requestId) || null;\n    }\n    const response = {\n      clientId: data.clientId,\n      installationId: data.installationId,\n    };\n    switch (data.op) {\n    case OP_EVENTS.CONNECTED:\n      if (this.state === CLIENT_STATE.RECONNECTING) {\n        this.resubscribe();\n      }\n      this.emit(CLIENT_EMMITER_TYPES.OPEN);\n      this.id = data.clientId;\n      this.connectPromise.resolve();\n      this.state = CLIENT_STATE.CONNECTED;\n      break;\n    }\n  }\n\n  _handleWebSocketClose() {\n    if (this.state === CLIENT_STATE.DISCONNECTED) {\n      return;\n    }\n    this.state = CLIENT_STATE.CLOSED;\n    this.emit(CLIENT_EMMITER_TYPES.CLOSE);\n    for (const subscription of this.subscriptions.values()) {\n      subscription.emit(SUBSCRIPTION_EMMITER_TYPES.CLOSE);\n    }\n    this._handleReconnect();\n  }\n\n  _handleWebSocketError(error: any) {\n    this.emit(CLIENT_EMMITER_TYPES.ERROR, error);\n    for (const subscription of this.subscriptions.values()) {\n      subscription.emit(SUBSCRIPTION_EMMITER_TYPES.ERROR, error);\n    }\n    this._handleReconnect();\n  }\n\n  _handleReconnect() {\n    if (this.state === CLIENT_STATE.DISCONNECTED) {\n      return;\n    }\n    this.state = CLIENT_STATE.RECONNECTING;\n    const time = generateInterval(this.attempts);\n\n    if (this.reconnectHandle) {\n      clearTimeout(this.reconnectHandle);\n    }\n    this.reconnectHandle = setTimeout(\n      (() => {\n        this.attempts++;\n        this.connectPromise = resolvingPromise();\n        this.open();\n      }).bind(this),\n      time\n    );\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class LiveQueryClient {\n  constructor({ applicationId, serverURL, javascriptKey, masterKey, sessionToken, installationId }) {\n    this.attempts = 0;\n    this.id = 0;\n    this.requestId = 0;\n    this.applicationId = applicationId;\n    this.serverURL = serverURL;\n    this.javascriptKey = javascriptKey;\n    this.masterKey = masterKey;\n    this.sessionToken = sessionToken;\n    this.installationId = installationId;\n    this.additionalProperties = false;\n    this.connectPromise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    this.subscriptions = new Map();\n    this.socket = new WebSocketController();\n    this.state = 'INITIALIZED';\n    this.reconnectHandle = null;\n    this.emitter = new EventEmitter();\n    this.on = this.emitter.on.bind(this.emitter);\n    this.emit = this.emitter.emit.bind(this.emitter);\n  }\n\n  open() {\n    if (this.state === 'CONNECTED') return;\n    this.state = 'CONNECTING';\n    this.socket.connect(this.serverURL, this);\n  }\n\n  _handleWebSocketOpen() {\n    if (this.state !== 'CONNECTING') return;\n    this.state = 'CONNECTED';\n    this._sendConnectionRequest();\n  }\n\n  _handleWebSocketMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n      if (data.type === 'connection acknowledged') {\n        this.id = data.id;\n        this.emit('open');\n        this.resolve();\n      } else if (data.type === 'subscription') {\n        this._handleSubscription(data);\n      }\n    } catch (e) {\n      console.error('Error processing message:', e);\n    }\n  }\n\n  _handleWebSocketClose() {\n    this.state = 'CLOSED';\n    this.emit('close');\n    this._handleReconnect();\n  }\n\n  _handleWebSocketError(error) {\n    this.state = 'ERROR';\n    this.emit('error', error);\n    this._handleReconnect();\n  }\n\n  _handleReconnect() {\n    if (this.state !== 'CLOSED' && this.state !== 'ERROR') return;\n    this.attempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.attempts), 30000);\n    this.reconnectHandle = setTimeout(() => {\n      this.open();\n    }, delay);\n  }\n\n  _sendConnectionRequest() {\n    const payload = {\n      type: 'connect',\n      applicationId: this.applicationId,\n      javascriptKey: this.javascriptKey,\n      masterKey: this.masterKey,\n      sessionToken: this.sessionToken,\n      installationId: this.installationId,\n      additionalProperties: this.additionalProperties\n    };\n    this.socket.send(JSON.stringify(payload));\n  }\n\n  _handleSubscription(data) {\n    const subscription = new LiveQuerySubscription(this, data);\n    this.subscriptions.set(subscription.id, subscription);\n    this.emit('subscription', subscription);\n  }\n\n  subscribe(query) {\n    const subscription = new LiveQuerySubscription(this, {\n      type: 'subscribe',\n      query: query\n    });\n    this.subscriptions.set(subscription.id, subscription);\n    this.emit('subscription', subscription);\n    return subscription;\n  }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function speechApi(ssml) {\n  const subscriptionKey = 'YOUR_SUBSCRIPTION_KEY';\n  const region = 'YOUR_REGION';\n  const endpoint = `https://${region}.api.cognitive.microsoft.com/sttext/speech/v3.0/recognize?language=en-US&format=audio-mp3`;\n  \n  const response = await fetch(endpoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'Authorization': `Bearer ${subscriptionKey}`\n    },\n    body: ssml\n  });\n\n  if (!response.ok) {\n    throw new Error(`Speech API request failed with status ${response.status}`);\n  }\n\n  const arrayBuffer = await response.arrayBuffer();\n  return arrayBuffer;\n}"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a WebSocket client function that establishes a connection to a specified URL, handles incoming messages, and provides methods to set a callback for received data and close the connection.\n\nFunction Description: The `Stream` function initializes a WebSocket connection to the given URL. It sets up event handlers for the connection opening and incoming messages. The incoming messages are parsed as JSON and passed to a callback function. The function returns an object with methods to set the callback for received data (`ontrades`) and to close the WebSocket connection (`off`).\n\nInput: \n- `url` [String] - The WebSocket server URL to connect to.\n\nOutput: \n- Returns an object with the following methods:\n  - `ontrades` [Function] - Setter for the callback function that handles incoming data.\n  - `off` [Function] - Closes the WebSocket connection with code 1000 (normal closure).",
    "Canonical_solution": "function Stream(url) {\n    var ws = new WebSocket(url);\n    var cb = () => {};\n\n    ws.onopen = function() {\n        console.log('Websocket is opened');\n    };\n\n    ws.onmessage = function(data) {\n        try {\n            data = JSON.parse(data.data);\n            cb(data);\n        } catch(e) {\n            console.log(e);\n        }\n    };\n\n    return {\n        set ontrades(val) { cb = val; },\n        off() { ws.close(1000); }\n    };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "{\n  const WebSocket = require('ws');\n\n  function Stream(url) {\n    const ws = new WebSocket(url);\n\n    const ontrades = (callback) => {\n      ws.on('message', (message) => {\n        try {\n          const data = JSON.parse(message);\n          callback(data);\n        } catch (error) {\n          console.error('Error parsing message:', error);\n        }\n      });\n    };\n\n    const off = () => {\n      ws.close(1000, 'Normal closure');\n    };\n\n    return { ontrades, off };\n  }\n\n  module.exports = Stream;\n}"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Implement a WebSocket client in JavaScript that establishes a connection to a WebSocket server, handles connection events, sends and receives messages, and manages errors and connection closure.\n\nFunction Description: The function `testWebSocket` initializes a WebSocket connection to a specified URI and sets up event handlers for connection opening, closing, message reception, and errors. The event handlers (`onOpen`, `onClose`, `onMessage`, `onError`) manage the respective events, while `sendMessage` sends messages to the server.\n\nInput: \n- `wsUri` [String] - The WebSocket server URI to connect to.\n\nOutput: \n- None (The function sets up event handlers and manages WebSocket connection lifecycle).",
    "Canonical_solution": "function testWebSocket() {\n    websocket = new WebSocket(wsUri);\n    websocket.onopen = onOpen;\n    websocket.onclose = onClose;\n    websocket.onmessage = onMessage;\n    websocket.onerror = onError;\n}\n\nfunction onOpen(evt) {\n    writeLog(\"CONNECTED\");\n    sendMessage(\"Hello, Rocket!\");\n}\n\nfunction onClose(evt) {\n    writeLog(\"Websocket DISCONNECTED\");\n}\n\nfunction onMessage(evt) {\n    writeLog('<span style=\"color: blue;\">RESPONSE: ' + evt.data+'</span>');\n}\n\nfunction onError(evt) {\n    writeLog('<span style=\"color: red;\">ERROR:</span> ' + evt.data);\n}\n\nfunction sendMessage(message) {\n    writeLog(\"SENT: \" + message);\n    websocket.send(message);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function testWebSocket(wsUri) {\n  const socket = new WebSocket(wsUri);\n\n  function onOpen() {\n    console.log('Connected to WebSocket server');\n  }\n\n  function onClose(event) {\n    console.log(`Connection closed with code ${event.code} and reason ${event.reason}`);\n  }\n\n  function onMessage(event) {\n    console.log('Received message:', event.data);\n  }\n\n  function onError(error) {\n    console.error('WebSocket error:', error);\n  }\n\n  socket.addEventListener('open', onOpen);\n  socket.addEventListener('close', onClose);\n  socket.addEventListener('message', onMessage);\n  socket.addEventListener('error', onError);\n\n  function sendMessage(message) {\n    socket.send(message);\n  }\n\n  return { sendMessage };\n}"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Implement a WebSocket client in JavaScript that establishes a connection to a server, handles various connection events, sends periodic ping messages, and provides functions to join/leave rooms and close the connection.\n\nFunction Description: The functions collectively manage a WebSocket connection, including initialization, sending messages, and cleanup. The main function initializes the connection and sets up event handlers, while helper functions send specific message types and close the connection.\n\nInput:\n- initWebSocket(): No parameters\n- sendJoinMessage(ws, room): \n  - ws: WebSocket - The active WebSocket connection\n  - room: string - The room identifier to join\n- sendLeaveMessage(ws, room):\n  - ws: WebSocket - The active WebSocket connection\n  - room: string - The room identifier to leave\n- closeWebSocket(ws):\n  - ws: WebSocket - The active WebSocket connection to close\n\nOutput:\n- initWebSocket(): Returns WebSocket - The initialized WebSocket connection object\n- sendJoinMessage(): Returns boolean - Always returns false\n- sendLeaveMessage(): Returns boolean - Always returns false\n- closeWebSocket(): Returns boolean - Always returns false",
    "Canonical_solution": "function initWebSocket() {\n    var ws;\n    ws = new WebSocket(\"ws://localhost:7777/connect\");\n    ws.onopen = function(evt) {\n        print(\"OPEN\");\n    }\n    ws.onclose = function(evt) {\n        print(\"CLOSE\");\n        ws = null;\n    }\n    ws.onmessage = function(evt) {\n        print(\"RESPONSE: \" + evt.data);\n    }\n    ws.onerror = function(evt) {\n        print(\"ERROR: \" + evt.data);\n    }\n    setInterval(function() {\n        ws.send(JSON.stringify({type: \"PING\", data: {}}))\n    }, 10000)\n    return ws;\n}\n\nfunction sendJoinMessage(ws, room) {\n    if (!ws) {\n        return false;\n    }\n    print(\"JOIN: \" + room);\n    ws.send(JSON.stringify({type: \"JOIN\", data: {room: room}}));\n    return false;\n}\n\nfunction sendLeaveMessage(ws, room) {\n    if (!ws) {\n        return false;\n    }\n    print(\"LEAVE: \" + room);\n    ws.send(JSON.stringify({type: \"LEAVE\", data: {room: room}}));\n    return false;\n}\n\nfunction closeWebSocket(ws) {\n    if (!ws) {\n        return false;\n    }\n    ws.close();\n    return false;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "const WebSocket = require('ws');\n\nlet wsInstance = null;\n\nfunction initWebSocket() {\n  wsInstance = new WebSocket('wss://example.com/socket');\n  \n  wsInstance.on('open', () => {\n    console.log('WebSocket connection established');\n  });\n  \n  wsInstance.on('message', (message) => {\n    console.log('Received message:', message);\n  });\n  \n  wsInstance.on('error', (error) => {\n    console.error('WebSocket error:', error);\n  });\n  \n  wsInstance.on('close', (code, reason) => {\n    console.log(`WebSocket closed with code ${code}, reason: ${reason}`);\n  });\n  \n  return wsInstance;\n}\n\nfunction sendJoinMessage(ws, room) {\n  if (!ws || !room) return false;\n  ws.send(`JOIN ${room}`);\n  return false;\n}\n\nfunction sendLeaveMessage(ws, room) {\n  if (!ws || !room) return false;\n  ws.send(`LEAVE ${room}`);\n  return false;\n}\n\nfunction closeWebSocket(ws) {\n  if (!ws) return false;\n  ws.close();\n  return false;\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a class that serves as an HTTP client for interacting with a build service API, handling different types of package-related operations with proper error handling.\n\nClass Description: The BuildService class provides methods to fetch package build statistics, exports, and export sizes from a remote build service. It uses Axios for HTTP requests and implements centralized error handling.\n\nAttributes:\n- operations: [Array] - A predefined list of available API operations, each specifying the operation type, endpoint, and corresponding method name\n\nMethods:\n- _makeHttpRequest: [Name](operation: Object, packageString: String) -> Promise<Object> - Makes an HTTP GET request to the build service with the specified operation and package string, handles the response and errors\n- _handleError: [Name](error: Error, operationType: String) -> Throws CustomError - Centralized error handling that processes different types of errors (response errors, request errors, and other errors) and throws appropriate custom errors\n- getPackageBuildStats: [Name](packageString: String) -> Promise<Object> - Retrieves build statistics for the specified package\n- getPackageExports: [Name](packageString: String) -> Promise<Object> - Retrieves all exports for the specified package\n- getPackageExportSizes: [Name](packageString: String) -> Promise<Object> - Retrieves size information for all exports of the specified package",
    "Canonical_solution": "const axios = require('axios');\nconst CustomError = require('../CustomError');\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        type: 'PACKAGE_BUILD_STATS',\n        endpoint: '/size',\n        methodName: 'getPackageStats',\n      },\n      {\n        type: 'PACKAGE_EXPORTS',\n        endpoint: '/exports',\n        methodName: 'getAllPackageExports',\n      },\n      {\n        type: 'PACKAGE_EXPORTS_SIZES',\n        endpoint: '/exports-sizes',\n        methodName: 'getPackageExportSizes',\n      },\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(\n        `${process.env.BUILD_SERVICE_ENDPOINT}${operation.endpoint}?p=${encodeURIComponent(packageString)}`\n      );\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const contents = error.response.data;\n      throw new CustomError(\n        contents.name || 'BuildError',\n        contents.originalError,\n        contents.extra\n      );\n    } else if (error.request) {\n      throw new CustomError('BuildError', {\n        operation: operationType,\n        reason: 'BUILD_SERVICE_UNREACHABLE',\n        url: error.request._currentUrl,\n      });\n    } else {\n      throw new CustomError('BuildError', error.message, {\n        operation: operationType,\n      });\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_BUILD_STATS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS_SIZES');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BuildService {\n  constructor() {\n    this.operations = [\n      { type: 'buildStats', endpoint: '/api/packages/{packageString}/build-stats', methodName: 'getPackageBuildStats' },\n      { type: 'exports', endpoint: '/api/packages/{packageString}/exports', methodName: 'getPackageExports' },\n      { type: 'exportSizes', endpoint: '/api/packages/{packageString}/export-sizes', methodName: 'getPackageExportSizes' }\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    const endpoint = operation.endpoint.replace('{packageString}', packageString);\n    try {\n      const response = await axios.get(endpoint);\n      return response.data;\n    } catch (error) {\n      throw this._handleError(error, operation.type);\n    }\n  }\n\n  async _handleError(error, operationType) {\n    if (error.response) {\n      throw new CustomError(`Error fetching ${operationType} for package: ${error.response.status} - ${error.response.statusText}`);\n    } else if (error.request) {\n      throw new CustomError(`No response received for ${operationType} request for package`);\n    } else {\n      throw new CustomError(`Error occurred while fetching ${operationType} for package: ${error.message}`);\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageBuildStats');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageExports');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageExportSizes');\n    return this._makeHttpRequest(operation, packageString);\n  }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  const url = 'https://example.com/api/channels';\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.map(channel => ({\n      lang: channel.lang,\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    console.error('Error fetching or processing channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a WebSocket server class for peer-to-peer communication that handles connections, messages, and room management.\n\nClass Description: The SnapdropServer class represents a WebSocket server that facilitates peer-to-peer communication. It manages WebSocket connections, handles incoming messages, and maintains rooms for peer grouping. The server also handles connection headers and keeps connections alive.\n\nAttributes:\n- _wss: [WebSocket.Server] - The WebSocket server instance\n- _rooms: [Object] - A dictionary tracking peers grouped by their IP addresses (rooms)\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers\n- _onConnection(peer: Peer) -> void - Handles new WebSocket connections, sets up message handlers, and joins the peer to a room\n- _onHeaders(headers: Array, response: Object) -> void - Processes HTTP headers during WebSocket handshake, setting cookies if needed\n- _onMessage(sender: Peer, message: string) -> void - Handles incoming messages from peers, routing them to appropriate recipients\n- _send(peer: Peer, message: Object) -> void - Sends a message to a specific peer over WebSocket connection\n- _joinRoom(peer: Peer) -> void - Adds a peer to their respective room (Not shown in reference but implied)\n- _leaveRoom(peer: Peer) -> void - Removes a peer from their room (Not shown in reference but implied)\n- _keepAlive(peer: Peer) -> void - Maintains connection with periodic pings (Not shown in reference but implied)",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass SnapdropServer {\n    constructor(port) {\n        this._wss = new WebSocket.Server({ port: port });\n        this._wss.on('connection', (socket, request) => this._onConnection(new Peer(socket, request)));\n        this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n\n        this._rooms = {};\n    }\n\n    _onConnection(peer) {\n        this._joinRoom(peer);\n        peer.socket.on('message', message => this._onMessage(peer, message));\n        peer.socket.on('error', console.error);\n        this._keepAlive(peer);\n\n        this._send(peer, {\n            type: 'display-name',\n            message: {\n                displayName: peer.name.displayName,\n                deviceName: peer.name.deviceName\n            }\n        });\n    }\n\n    _onHeaders(headers, response) {\n        if (response.headers.cookie && response.headers.cookie.indexOf('peerid=') > -1) return;\n        response.peerId = Peer.uuid();\n        headers.push('Set-Cookie: peerid=' + response.peerId + \"; SameSite=Strict; Secure\");\n    }\n\n    _onMessage(sender, message) {\n        try {\n            message = JSON.parse(message);\n        } catch (e) {\n            return;\n        }\n\n        switch (message.type) {\n            case 'disconnect':\n                this._leaveRoom(sender);\n                break;\n            case 'pong':\n                sender.lastBeat = Date.now();\n                break;\n        }\n\n        if (message.to && this._rooms[sender.ip]) {\n            const recipientId = message.to;\n            const recipient = this._rooms[sender.ip][recipientId];\n            delete message.to;\n            message.sender = sender.id;\n            this._send(recipient, message);\n            return;\n        }\n    }\n\n    _send(peer, message) {\n        if (!peer) return;\n        if (this._wss.readyState !== this._wss.OPEN) return;\n        message = JSON.stringify(message);\n        peer.socket.send(message, error => '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class SnapdropServer {\n  constructor(port) {\n    this._wss = new WebSocket.Server({ port });\n    this._rooms = {};\n    this._wss.on('connection', (ws) => this._onConnection(ws));\n    this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n  }\n\n  _onConnection(peer) {\n    peer.on('message', (message) => this._onMessage(peer, message));\n    peer.on('close', () => this._leaveRoom(peer));\n    this._joinRoom(peer);\n    this._keepAlive(peer);\n  }\n\n  _onHeaders(headers, response) {\n    if (headers.cookie) {\n      response.writeHead(101, { 'Upgrade': 'websocket', 'Connection': 'upgrade', 'Sec-WebSocket-Origin': headers.origin });\n      response.end();\n    }\n  }\n\n  _onMessage(sender, message) {\n    const data = JSON.parse(message);\n    if (data.type === 'message') {\n      this._send(sender, data);\n    }\n  }\n\n  _send(peer, message) {\n    peer.send(JSON.stringify(message));\n  }\n\n  _joinRoom(peer) {\n    const room = this._rooms[peer.ip] || {};\n    this._rooms[peer.ip] = room;\n    room[peer.id] = peer;\n  }\n\n  _leaveRoom(peer) {\n    delete this._rooms[peer.ip][peer.id];\n    if (Object.keys(this._rooms[peer.ip]).length === 0) {\n      delete this._rooms[peer.ip];\n    }\n  }\n\n  _keepAlive(peer) {\n    setInterval(() => {\n      peer.send(JSON.stringify({ type: 'ping' }));\n    }, 30000);\n  }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a function to fetch and process subscribed TV channels from a streaming service API, including authentication and data extraction.\n\nFunction Description: This asynchronous function retrieves subscribed TV channel information from a streaming service by:\n1. Scraping initial configuration data from a webpage\n2. Authenticating with the service using extracted credentials\n3. Fetching subscribed channel packages\n4. Processing and deduplicating channel information\n5. Returning formatted channel data\n\nInput: \n- lang: [String] (optional, default='id') - Language code for the returned channel data\n\nOutput: \n- Returns: [Array<Object>] - An array of channel objects containing:\n  - lang: [String] - The language code\n  - site_id: [String] - The channel ID\n  - name: [String] - The channel name\n- Throws: [Error] - If any HTTP request fails or data parsing fails",
    "Canonical_solution": "function async channels({ lang = 'id' }) {\n    const axios = require('axios')\n    const cheerio = require('cheerio')\n    const result = await axios\n      .get('https://cubmu.com/live-tv')\n      .then(response => response.data)\n      .catch(console.error)\n\n    const $ = cheerio.load(result)\n\n    const config = JSON.parse($('#__NEXT_DATA__').text()).runtimeConfig || {}\n\n    const options = {\n      headers: {\n        Origin: 'https://cubmu.com',\n        Referer: 'https://cubmu.com/live-tv'\n      }\n    }\n    await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/login/external?email=${config.email}&password=${config.password}&deviceId=${config.deviceId}&deviceType=${config.deviceType}&deviceModel=${config.deviceModel}&deviceToken=&serial=&platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n    const subscribedChannels = await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/subscribe_product/list?platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n\n    const channels = []\n    const included = []\n    if (Array.isArray(subscribedChannels.channelPackageList)) {\n      subscribedChannels.channelPackageList.forEach(pkg => {\n        pkg.channelList.forEach(channel => {\n          if (included.indexOf(channel.id) < 0) {\n            included.push(channel.id)\n            channels.push({\n              lang,\n              site_id: channel.id,\n              name: channel.name\n            })\n          }\n        })\n      })\n    }\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchSubscribedChannels(lang = 'id') {\n  try {\n    // Step 1: Scraping initial configuration data from a webpage\n    const configResponse = await fetch('https://example-streaming-service.com/config');\n    if (!configResponse.ok) throw new Error(`Failed to fetch config: ${configResponse.status}`);\n    const configData = await configResponse.json();\n    const credentials = extractCredentialsFromConfig(configData);\n\n    // Step 2: Authenticating with the service using extracted credentials\n    const authResponse = await fetch('https://example-streaming-service.com/auth', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(credentials)\n    });\n    if (!authResponse.ok) throw new Error(`Authentication failed: ${authResponse.status}`);\n    const authToken = await authResponse.json();\n\n    // Step 3: Fetching subscribed channel packages\n    const channelsResponse = await fetch(`https://example-streaming-service.com/channels?token=${authToken}`, {\n      method: 'GET',\n      headers: { 'Accept': 'application/json' }\n    });\n    if (!channelsResponse.ok) throw new Error(`Failed to fetch channels: ${channelsResponse.status}`);\n    const channelsData = await channelsResponse.json();\n\n    // Step 4: Processing and deduplicating channel information\n    const processedChannels = processChannelData(channelsData, lang);\n\n    // Step 5: Returning formatted channel data\n    return processedChannels;\n  } catch (error) {\n    throw new Error(`Failed to fetch and process channels: ${error.message}`);\n  }\n}\n\nfunction extractCredentialsFromConfig(configData) {\n  // Placeholder for actual credential extraction logic\n  return {\n    username: configData.username,\n    password: configData.password\n  };\n}\n\nfunction processChannelData(channelsData, lang) {\n  // Placeholder for actual data processing and deduplication logic\n  return channelsData.map(channel => ({\n    lang,\n    site_id: channel.id,\n    name: channel.name[lang] || channel.name['en']\n  }));\n}"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles WebSocket connections, manages events, and provides methods for server lifecycle management.\n\nClass Description: The WebSocketServer class encapsulates the functionality to create and manage a WebSocket server instance. It handles server creation, connection events, and provides cleanup methods. The class uses promises for asynchronous server initialization and UUID generation for client identification.\n\nAttributes:\n- options: [Object] - Configuration options for the WebSocket server, including the port number.\n- wss: [WebSocket.Server|null] - The WebSocket server instance, initialized as null until created.\n\nMethods:\n- createServer(): [Promise<WebSocket.Server>] - Creates and starts the WebSocket server instance. Returns a promise that resolves with the server instance when listening or rejects on error.\n- onConnection(callback: [Function]): [void] - Sets up a connection event handler. The callback receives the WebSocket connection object and a generated UUID for the client.\n- close(): [void] - Closes the WebSocket server instance.",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('eventemitter3');\nvar uuid = require('uuid');\n\nclass WebSocketServer {\n  constructor(options) {\n    this.options = options;\n    this.wss = null;\n  }\n\n  createServer() {\n    this.wss = new WebSocket.Server({\n      port: this.options.publicPort,\n      perMessageDeflate: false\n    });\n\n    var listeningListener, errorListener;\n    return new Promise((resolve, reject) => {\n      listeningListener = () => resolve(this.wss);\n      errorListener = (err) => reject(err);\n\n      this.wss.on('listening', listeningListener);\n      this.wss.on('error', errorListener);\n    })\n    .finally(() => {\n      this.wss.removeListener('listening', listeningListener);\n      this.wss.removeListener('error', errorListener);\n    });\n  }\n\n  onConnection(callback) {\n    this.wss.on('connection', (ws) => {\n      var id = uuid.v4();\n      callback(ws, id);\n    });\n  }\n\n  close() {\n    this.wss.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class WebSocketServer {\n  constructor(options) {\n    this.options = options;\n    this.wss = null;\n  }\n\n  async createServer() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.wss = new WebSocket.Server({ ...this.options });\n        this.wss.on('connection', (socket) => {\n          const uuid = this.generateUUID();\n          this.onConnection((client, uuid) => {\n            client.uuid = uuid;\n          });\n        });\n        this.wss.listen(this.options.port, () => {\n          resolve(this.wss);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n      const r = Math.random() * 16 << 4;\n      const v = c === 'x' ? (r & 15) || 15 : (r & 3) || 8;\n      return v.toString(16);\n    });\n  }\n\n  onConnection(callback) {\n    if (!this.wss) {\n      throw new Error('WebSocket server not initialized');\n    }\n    this.wss.on('connection', (socket) => {\n      const uuid = this.generateUUID();\n      callback(socket, uuid);\n    });\n  }\n\n  close() {\n    if (this.wss) {\n      this.wss.close();\n      this.wss = null;\n    }\n  }\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Implement a WebSocket server class in Node.js that can handle client connections, messages, errors, and disconnections.\n\nClass Description: The WebSocketServer class creates and manages a WebSocket server instance, setting up event handlers for various WebSocket events. It provides methods to handle incoming messages, connection closures, and errors.\n\nAttributes:\n- wss: [WebSocket.Server] - The WebSocket server instance created with the specified port.\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers.\n- setupEventHandlers() -> void - Configures event listeners for connection, message, close, and error events.\n- handleMessage(ws: WebSocket, message: string) -> void - Placeholder for message handling logic (to be implemented by the user).\n- handleClose(ws: WebSocket, code: number, reason: string) -> void - Placeholder for connection close handling logic (to be implemented by the user).\n- handleError(ws: WebSocket, error: Error) -> void - Placeholder for error handling logic (to be implemented by the user).",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass WebSocketServer {\n  constructor(port) {\n    this.wss = new WebSocket.Server({ port: port });\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.wss.on('connection', (ws) => {\n      ws.on('message', (message) => {\n        this.handleMessage(ws, message);\n      });\n\n      ws.on('close', (code, reason) => {\n        this.handleClose(ws, code, reason);\n      });\n\n      ws.on('error', (error) => {\n        this.handleError(ws, error);\n      });\n    });\n  }\n\n  handleMessage(ws, message) {\n    // Message handling logic would be implemented here\n  }\n\n  handleClose(ws, code, reason) {\n    // Connection close handling logic would be implemented here\n  }\n\n  handleError(ws, error) {\n    // Error handling logic would be implemented here\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class WebSocketServer {\n  wss: WebSocket.Server;\n\n  constructor(port: number) {\n    this.wss = new WebSocket.Server({ port });\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.wss.on('connection', (ws) => {\n      ws.on('message', (message) => this.handleMessage(ws, message.toString()));\n      ws.on('close', (code, reason) => this.handleClose(ws, code, reason));\n      ws.on('error', (error) => this.handleError(ws, error));\n    });\n  }\n\n  handleMessage(ws: WebSocket, message: string): void {\n    // Placeholder for message handling logic\n    console.log(`Received message: ${message}`);\n  }\n\n  handleClose(ws: WebSocket, code: number, reason: string): void {\n    // Placeholder for connection close handling logic\n    console.log(`Connection closed with code ${code} and reason: ${reason}`);\n  }\n\n  handleError(ws: WebSocket, error: Error): void {\n    // Placeholder for error handling logic\n    console.error(`Error occurred: ${error.message}`);\n  }\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles incoming connections, manages sessions, and processes messages with customizable handlers.\n\nClass Description: The XVIZServer class is a WebSocket server implementation that manages WebSocket connections, delegates session handling to provided handlers, and provides logging capabilities. It wraps the 'ws' library functionality with additional session management features.\n\nAttributes:\n- _server: [WebSocket.Server] - The underlying WebSocket server instance\n- handlers: [Array] - Array of handler objects responsible for managing sessions\n- options: [Object] - Configuration options for the server, merged with defaults\n\nMethods:\n- constructor(handlers, options, callback) -> [XVIZServer] - Initializes the WebSocket server with message handlers, options, and an optional callback. Throws an error if no handlers are provided.\n- get server() -> [WebSocket.Server] - Getter for the underlying WebSocket server instance\n- close(cb) -> [void] - Closes the WebSocket server, accepting an optional callback\n- handleSession(socket, request) -> [Promise<void>] - Handles new WebSocket connections, delegates to handlers for session creation, and closes the connection if no handler accepts it\n- log(...msg) -> [void] - Logs messages using the configured logger if available",
    "Canonical_solution": "const WebSocket = require('ws');\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers || handlers.length === 0) {\n      throw new Error('No handlers provided');\n    }\n\n    this.handlers = handlers;\n    this.options = { ...this.getDefaultOptions(), ...options };\n    this._server = new WebSocket.Server({ port: this.options.port });\n\n    this._server.on('connection', (socket, request) => {\n      this.handleSession(socket, request).catch(err => {\n        console.error('Error handling session:', err);\n      });\n    });\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(() => {\n      if (cb) cb();\n    });\n  }\n\n  async handleSession(socket, request) {\n    const accepted = await Promise.race(\n      this.handlers.map(handler => handler.accept(socket, request))\n    );\n\n    if (accepted) {\n      this.log(`Session accepted by handler`, handler);\n      return;\n    }\n\n    this.log('No handler accepted the connection', socket);\n    socket.close();\n  }\n\n  log(...msg) {\n    if (this.options.logger) {\n      this.options.logger(...msg);\n    } else {\n      console.log(...msg);\n    }\n  }\n\n  getDefaultOptions() {\n    return {\n      port: 8080,\n      logger: console.log\n    };\n  }\n}"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Create a WebSocket server class that manages WebSocket connections for a webview application, handling connection events and maintaining active connections.\n\nClass Description: The WebviewServer class is responsible for setting up and managing a WebSocket server that facilitates real-time communication between a webview application and a data source. It maintains active connections and provides server information.\n\nAttributes:\n- server: [http.Server] - The underlying HTTP server instance used for WebSocket communication\n- secret: [string] - A secret string used for authentication or security purposes\n- connections: [Set<WebviewConnection>] - A collection of active WebSocket connections\n- config: [Config] - Configuration object containing server settings\n\nMethods:\n- constructor(dataSource: [VisualizationWatchModel], config: [Config]) -> [void] - Initializes the WebSocket server, sets up connection handlers, and stores the configuration\n- get port() -> [number] - Returns the port number on which the server is listening for connections",
    "Canonical_solution": "import { WebSocketStream } from \"@hediet/typed-json-rpc-websocket\";\nimport WebSocket = require(\"ws\");\nimport * as express from \"express\";\nimport * as http from \"http\";\n\nexport class WebviewServer {\n\tprivate readonly server: http.Server;\n\tpublic readonly secret: string;\n\n\tpublic readonly connections = new Set<WebviewConnection>();\n\n\tconstructor(\n\t\tdataSource: VisualizationWatchModel,\n\t\tprivate readonly config: Config\n\t) {\n\t\tconst app = express();\n\t\tthis.server = app.listen();\n\n\t\tconst wss = new WebSocket.Server({ server: this.server });\n\t\twss.on(\"connection\", async ws => {\n\t\t\tconst stream = new WebSocketStream(ws);\n\t\t\tconst c = new WebviewConnection(\n\t\t\t\tdataSource,\n\t\t\t\tstream,\n\t\t\t\tthis,\n\t\t\t\tconfig,\n\t\t\t\tthis.secret\n\t\t\t);\n\t\t\tthis.connections.add(c);\n\t\t\tawait stream.onClosed;\n\t\t\tthis.connections.delete(c);\n\t\t});\n\t}\n\n\tpublic get port(): number {\n\t\tconst httpPort = (this.server.address() as AddressInfo).port;\n\t\treturn httpPort;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class WebviewServer {\n  server: http.Server;\n  secret: string;\n  connections: Set<WebviewConnection>;\n  config: Config;\n\n  constructor(dataSource: VisualizationWatchModel, config: Config) {\n    this.server = new http.Server();\n    this.secret = config.secret;\n    this.connections = new Set();\n    this.config = config;\n\n    this.setupWebSocketServer();\n  }\n\n  get port() {\n    return this.server.address().port;\n  }\n\n  private setupWebSocketServer() {\n    const wsServer = new WebSocketServer({ server: this.server });\n\n    wsServer.on('connection', (socket) => {\n      const connection = new WebviewConnection(socket, this.secret, dataSource, this.config);\n      this.connections.add(connection);\n      connection.on('message', (message) => {\n        // Handle incoming messages\n      });\n      connection.on('close', () => {\n        this.connections.delete(connection);\n      });\n    });\n  }\n}"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles client connections, message processing, and subscription management for real-time communication.\n\nClass Description: The AphlictClientServer class implements a WebSocket server that manages client connections, processes incoming messages (including subscriptions, replays, and pings), and maintains listener lists for different instances. It's built on top of Node.js's HTTP server and ws WebSocket library.\n\nAttributes:\n- _server: [Object] - The underlying HTTP server instance\n- _lists: [Object] - Dictionary storing listener lists for different instances\n- _adminServers: [Array] - Array containing admin server references\n\nMethods:\n- constructor(server) -> [void] - Initializes the server instance and sets up request handling\n- _onrequest(request, response) -> [void] - Handles HTTP requests (returns 501 as this is a WebSocket server)\n- _parseInstanceFromPath(path) -> [String] - Extracts instance name from URL path\n- listen() -> [void] - Starts the WebSocket server and sets up connection handlers\n- getListenerList(instance) -> [Object] - Returns the listener list for a given instance (implied by usage)\n- log(message) -> [void] - Logs messages (implied by usage)\n- trace(message) -> [void] - Logs trace-level messages (implied by usage)\n- getHistory(min_age) -> [Array] - Returns historical messages (implied by usage in replay handler)\n\nThe class handles WebSocket connections with the following behaviors:\n1. Parses instance names from connection URLs\n2. Manages listener subscriptions/unsubscriptions\n3. Handles message replay requests\n4. Processes ping/pong messages\n5. Logs connection/disconnection events\n6. Maintains separate listener lists for different instances",
    "Canonical_solution": "var url = require('url');\nvar util = require('util');\nvar WebSocket = require('ws');\n\nclass AphlictClientServer {\n  constructor(server) {\n    server.on('request', this._onrequest.bind(this));\n    this._server = server;\n    this._lists = {};\n    this._adminServers = [];\n  }\n\n  _onrequest(request, response) {\n    response.writeHead(501);\n    response.end('HTTP/501 Use Websockets\\n');\n  }\n\n  _parseInstanceFromPath(path) {\n    if (path.indexOf('~') === -1) {\n      return 'default';\n    }\n\n    var instance = path.split('~')[1];\n    instance = instance.replace(/\\//g, '');\n    if (!instance.length) {\n      return 'default';\n    }\n\n    return instance;\n  }\n\n  listen() {\n    var self = this;\n    var server = this._server.listen.apply(this._server, arguments);\n    var wss = new WebSocket.Server({server: server});\n\n    wss.on('connection', function(ws, request) {\n      if ('upgradeReq' in ws) {\n        request = ws.upgradeReq;\n      }\n\n      var path = url.parse(request.url).pathname;\n      var instance = self._parseInstanceFromPath(path);\n\n      var listener = self.getListenerList(instance).addListener(ws);\n\n      function msg(argv) {\n        return util.format('<%s>', listener.getDescription()) +\n          ' ' +\n          util.format.apply(null, argv);\n      }\n\n      function log() {\n        self.log(msg(arguments));\n      }\n\n      function trace() {\n        self.trace(msg(arguments));\n      }\n\n      trace('Connected from %s.', ws._socket.remoteAddress);\n\n      ws.on('message', function(data) {\n        trace('Received message: %s', data);\n\n        var message;\n        try {\n          message = JSON.parse(data);\n        } catch (err) {\n          log('Message is invalid: %s', err.message);\n          return;\n        }\n\n        switch (message.command) {\n          case 'subscribe':\n            trace(\n              'Subscribed to: %s',\n              JSON.stringify(message.data));\n            listener.subscribe(message.data);\n            break;\n\n          case 'unsubscribe':\n            trace(\n              'Unsubscribed from: %s',\n              JSON.stringify(message.data));\n            listener.unsubscribe(message.data);\n            break;\n\n          case 'replay':\n            var age = message.data.age || 60000;\n            var min_age = (new Date().getTime() - age);\n\n            var old_messages = self.getHistory(min_age);\n            for (var ii = 0; ii < old_messages.length; ii++) {\n              var old_message = old_messages[ii];\n\n              if (!listener.isSubscribedToAny(old_message.subscribers)) {\n                continue;\n              }\n\n              try {\n                listener.writeMessage(old_message);\n              } catch (error) {\n                break;\n              }\n            }\n            break;\n\n          case 'ping':\n            var pong = {\n              type: 'pong'\n            };\n\n            try {\n              listener.writeMessage(pong);\n            } catch (error) {\n              // Ignore any issues here, we'll clean up elsewhere.\n            }\n            break;\n\n          default:\n            log(\n              'Unrecognized command \"%s\".',\n              message.command || '<undefined>');\n        }\n      });\n\n      ws.on('close', function() {\n        self.getListenerList(instance).removeListener(listener);\n        trace('Disconnected.');\n      });\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class AphlictClientServer {\n  constructor(server) {\n    this._server = server;\n    this._lists = {};\n    this._adminServers = [];\n    this._wsServer = new WebSocket.Server({ noServer: true });\n    this._wsServer.on('connection', (socket) => this._onConnection(socket));\n    this._wsServer.on('error', (err) => console.error('WebSocket error:', err));\n  }\n\n  _onrequest(request, response) {\n    response.statusCode = 501;\n    response.end('WebSocket not supported for this request');\n  }\n\n  _parseInstanceFromPath(path) {\n    const match = path.match(/\\/([^/]+)\\//);\n    return match ? match[1] : null;\n  }\n\n  listen() {\n    this._server.on('request', (request, response) => this._onrequest(request, response));\n    this._server.on('upgrade', (request, socket, head) => {\n      const instance = this._parseInstanceFromPath(request.url);\n      if (instance) {\n        this._wsServer.handleUpgrade(request, socket, head, (ws) => this._onConnection(ws, instance));\n      } else {\n        response.statusCode = 404;\n        response.end();\n      }\n    });\n  }\n\n  getListenerList(instance) {\n    return this._lists[instance] || {};\n  }\n\n  log(message) {\n    console.log(`[AphlictClientServer] ${message}`);\n  }\n\n  trace(message) {\n    console.trace(`[AphlictClientServer Trace] ${message}`);\n  }\n\n  getHistory(min_age) {\n    // Placeholder for historical message retrieval logic\n    return [];\n  }\n\n  _onConnection(socket, instance = null) {\n    this.log(`Client connected to instance ${instance || 'default'}`);\n    socket.on('message', (message) => this._onMessage(socket, message, instance));\n    socket.on('close', () => this._onClose(socket, instance));\n  }\n\n  _onMessage(socket, message, instance) {\n    try {\n      const data = JSON.parse(message.toString());\n      if (data.type === 'subscribe') {\n        this._subscribe(socket, data.instance, data.listener);\n      } else if (data.type === 'unsubscribe') {\n        this._unsubscribe(socket, data.instance, data.listener);\n      } else if (data.type === 'replay') {\n        this._replay(socket, data.instance, data.listener, data.limit);\n      } else if (data.type === 'ping') {\n        socket.send(JSON.stringify({ type: 'pong' }));\n      }\n    } catch (e) {\n      this.trace(`Error processing message: ${e.message}`);\n    }\n  }\n\n  _subscribe(socket, instance, listener) {\n    if (!this._lists[instance]) {\n      this._lists[instance] = {};\n    }\n    if (!this._lists[instance][listener]) {\n      this._lists[instance][listener] = [];\n    }\n    this._lists[instance][listener].push(socket);\n    this.log(`Subscribed ${socket.remoteAddress} to ${instance} for ${listener}`);\n  }\n\n  _unsubscribe(socket, instance, listener) {\n    if (this._lists[instance] && this._lists[instance][listener]) {\n      const index = this._lists[instance][listener].indexOf(socket);\n      if (index !== -1) {\n        this._lists[instance][listener].splice(index, 1);\n        this.log(`Unsubscribed ${socket.remoteAddress} from ${instance} for ${listener}`);\n      }\n    }\n  }\n\n  _replay(socket, instance, listener, limit) {\n    const history = this.getHistory(limit);\n    if (history.length > 0) {\n      socket.send(JSON.stringify({ type: 'replay', data: history }));\n    } else {\n      socket.send(JSON.stringify({ type: 'replay', data: [] }));\n    }\n  }\n\n  _onClose(socket, instance) {\n    this.log(`Client disconnected from instance ${instance || 'default'}`);\n  }\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor(requestModule = 'axios') {\n    this.requestModule = requestModule;\n  }\n\n  async httpRequest(options) {\n    const axios = require('axios');\n    const config = {\n      method: options.method,\n      url: options.url,\n      headers: options.headers || {},\n      params: options.params,\n      data: options.body\n    };\n\n    try {\n      const response = await axios(config);\n      return {\n        status: response.status,\n        data: response.data,\n        headers: response.headers,\n        request: config\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  queryStr(options) {\n    return new URLSearchParams(options).toString();\n  }\n\n  isJSONString(str) {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  isJson(obj) {\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n  }\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Write a function that scrapes TV channel information from a webpage, processes the data, and returns a list of channel objects with their details.\n\nFunction Description: The function `getChannels` asynchronously fetches HTML content from a URL, parses it to extract TV channel information, and returns an array of channel objects. Each channel object contains language, site ID, and name. The function uses Axios for HTTP requests and Cheerio for HTML parsing.\n\nInput: None (The function uses an implicit `this.url()` method to generate the target URL)\n\nOutput: Array<Object> - Returns an array of channel objects with the following structure:\n[\n  {\n    lang: string,      // Language code of the channel (e.g., 'tr')\n    site_id: string,   // Unique identifier for the channel\n    name: string       // Name of the channel\n  },\n  ...\n]",
    "Canonical_solution": "async function getChannels() {\n    const channels = {};\n    const axios = require('axios');\n    const data = await axios\n        .get(this.url({ date: dayjs() }))\n        .then(r => r.data)\n        .catch(console.error);\n\n    const $ = cheerio.load(data);\n    $('.channelContent').toArray()\n        .forEach(el => {\n            const item = $(el);\n            const channelId = item.find('.channelDetail .tvGuideResult-box-wholeDates-title')\n                .first()\n                .attr('onclick');\n            if (channelId) {\n                const site_id = channelId.match(/\\s(\\d+)\\)/)[1];\n                if (channels[site_id] === undefined) {\n                    channels[site_id] = {\n                        lang: 'tr',\n                        site_id,\n                        name: item.find('#channelID').val()\n                    };\n                }\n            }\n        });\n\n    return Object.values(channels);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  const url = this.url();\n  const response = await axios.get(url);\n  const $ = cheerio.load(response.data);\n\n  const channels = [];\n\n  // Example parsing logic - adjust based on actual HTML structure\n  $('#channel-list').find('div.channel').each((i, element) => {\n    const lang = $(element).find('.lang').text().trim();\n    const siteId = $(element).find('.site-id').text().trim();\n    const name = $(element).find('.name').text().trim();\n\n    channels.push({ lang, site_id: siteId, name });\n  });\n\n  return channels;\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst fetch = require('node-fetch');\n\nfunction installTelemetry() {\n  const telemetryEnabled = process.env.TUNNELMOLE_TELEMETRY === 'true';\n  if (!telemetryEnabled) return;\n\n  const nodeVersion = process.versions.node;\n  const platform = process.platform;\n\n  const data = {\n    nodeVersion,\n    platform\n  };\n\n  fetch('https://example.com/telemetry-endpoint', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n  .catch(error => {\n    console.error('Telemetry send failed:', error);\n  });\n}\n```"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class SauceLabsClient {\n  constructor() {\n    this.auth = {};\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.username = saucelabsUsername;\n    this.auth.token = saucelabsToken;\n  }\n\n  get(path, callback) {\n    const options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${Buffer.from(`${this.auth.username}:${this.auth.token}`).toString('base64')}`\n      }\n    };\n\n    fetch(`https://api.saucelabs.com/rest/v1/${path}`, options)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => callback(null, data))\n      .catch(error => callback(error, null));\n  }\n\n  post(path, data, callback) {\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${Buffer.from(`${this.auth.username}:${this.auth.token}`).toString('base64')}`\n      },\n      body: JSON.stringify(data)\n    };\n\n    fetch(`https://api.saucelabs.com/rest/v1/${path}`, options)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => callback(null, data))\n      .catch(error => callback(error, null));\n  }\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using an HTTP POST request and triggers a callback function upon completion or failure.\n\nFunction Description: The function uses Axios to send an HTTP POST request to a specified webhook URL with event and data payload. It triggers a callback function (triggerActivity) when the request succeeds or fails. The request includes custom headers for identification.\n\nInput:\n- url: [String] - The webhook URL to which the POST request will be sent\n- event: [String/Object] - The event information to be sent in the request payload\n- data: [Object] - The data payload to be sent in the request\n- triggerActivity: [Function] - Callback function to be triggered after request completion (takes an optional error parameter)\n\nOutput: [None] - The function doesn't return anything but triggers the callback function",
    "Canonical_solution": "const axios = require(\"axios\");\n\nfunction postWebhook(url, event, data, triggerActivity) {\n    axios.post(url, {event, data}, {headers: {\"user-agent\": \"MySpeed/WebhookAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendToWebhook(url, event, data, triggerActivity) {\n  try {\n    const response = await axios.post(url, { ...event, ...data }, {\n      headers: {\n        'X-Event-Id': event.id,\n        'X-Data-Id': data.id\n      }\n    });\n    await triggerActivity(null, response.data);\n  } catch (error) {\n    await triggerActivity(error);\n  }\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n  constructor(repo, token) {\n    this.repo = repo || '';\n    this.token = token || '';\n    this.sha = '';\n    this.ci = null;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = Boolean(repo && token);\n  }\n\n  async get() {\n    try {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      const response = await fetch(`${this.url}?repo=${encodeURIComponent(sanitizedRepo)}&token=${encodeURIComponent(this.token)}&sha=${encodeURIComponent(this.sha)}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.token}`\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error retrieving file sizes:', error);\n    }\n  }\n\n  set(values) {\n    if (!this.enabled) {\n      console.warn('API operations are disabled as repository or token is not provided.');\n      return;\n    }\n    try {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      const payload = {\n        repo: sanitizedRepo,\n        token: this.token,\n        sha: this.sha,\n        values: values\n      };\n      fetch(this.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(payload)\n      });\n    } catch (error) {\n      console.error('Error setting file sizes:', error);\n    }\n  }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nasync function fetchCovidData() {\n  const endpoint = 'https://api.health.gov.il/covid19/data';\n  const payload = {\n    type: 'batch',\n    request: [\n      { name: 'updates' },\n      { name: 'patient-statistics' },\n      { name: 'test-results' },\n      { name: 'demographic-breakdowns' }\n    ]\n  };\n\n  try {\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return parseData(data);\n  } catch (error) {\n    console.error('Error fetching or parsing COVID-19 data:', error);\n    return null;\n  }\n}\n\nfunction parseData(data) {\n  // Implement data parsing logic here based on the API response structure\n  // For example:\n  // return {\n  //   updates: data.updates,\n  //   patientStatistics: data.patient_statistics,\n  //   testResults: data.test_results,\n  //   demographicBreakdowns: data.demographic_breakdowns\n  // };\n  return data; // Placeholder return\n}\n```"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with optional path extension and error data, then triggers an activity callback based on the request's success or failure.\n\nFunction Description: The function `sendPing` is an asynchronous function that constructs a target URL by combining a base URL and an optional path, then sends an HTTP POST request using Axios. The request includes error data in the payload and a custom user-agent header. Depending on the request's outcome, it triggers a callback function (`triggerActivity`) with a success or failure indicator.\n\nInput:  \n- `url`: [String] - The base URL to which the request will be sent.  \n- `path`: [String] (optional) - An additional path segment to append to the base URL.  \n- `error`: [Any] - Data to be sent as the request payload (typically error information).  \n- `triggerActivity`: [Function] - A callback function to be executed after the request completes, receiving a boolean parameter indicating failure (true) or success (false/undefined).  \n\nOutput:  \n- None (The function's primary effect is the HTTP request and callback execution, not a direct return value).",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function sendPing(url, path, error, triggerActivity) {\n    if (url == null) return;\n    if (path) url += \"/\" + path;\n\n    await axios.post(url, error, {headers: {\"user-agent\": \"MySpeed/HealthAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendPing(url, path, error, triggerActivity) {\n  const targetUrl = url + (path ? '/' + path : '');\n  try {\n    await axios.post(targetUrl, error, {\n      headers: {\n        'User-Agent': 'CustomUserAgent/1.0'\n      }\n    });\n    triggerActivity(false);\n  } catch (err) {\n    triggerActivity(true);\n  }\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a function to send emails using different email service providers (Mailgun and Sendgrid) through HTTP requests, with error handling and promise-based asynchronous operation.\n\nFunction Description: The function `sendMail` sends an email using a configured transporter (either Mailgun or Sendgrid). It wraps the transporter's send operation in a Promise for better async handling. The transporter is configured to make HTTP requests to the respective email service API.\n\nInput:\n- `to`: [String] - Recipient email address\n- `subject`: [String] - Email subject\n- `text`: [String] - Email body content\n- `options`: [Object] (optional) - Additional email options (defaults to empty object)\n\nOutput:\n- [Promise] - Resolves with email sending success info, or rejects with an error if sending fails.\n\n---\n\nClass Description: (Not applicable, as the reference code is at the function level)",
    "Canonical_solution": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    transporter.sendMail({\n      from: `\"${ config.plugins.email.name || '' }\" <${ config.plugins.email.email || config.plugins.email.username }>`,\n      to,\n      subject,\n      text,\n    }, (error, info) => {\n      if(error) {\n        return reject(error);\n      }\n      return resolve(info);\n    });\n  });\n}\n\n// External libraries and global variables used:\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst config = appRequire('services/config').all();\nlet transporter;\n\n// Mailgun implementation\ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  const form = new FormData();\n  form.append('from', options.from);\n  form.append('to', options.to);\n  form.append('subject', options.subject);\n  form.append('text', options.text);\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: form.getHeaders(),\n    data: form,\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};\n\n// Sendgrid implementation  \ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${ emailConfig.apiKey }`,\n    },\n    data: {\n      personalizations: [{\n        to: [{ email: options.to }]\n      }],\n      from: { email: options.from },\n      subject: options.subject,\n      content: [{\n        type: 'text/plain',\n        value: options.text,\n      }]\n    },\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const sendMail = async (to, subject, text, options = {}) => {\n  let transporter;\n\n  if (process.env.EMAIL_SERVICE === 'mailgun') {\n    const { Mailgun } = require('mailgun.js');\n    const mg = new Mailgun({ apiKey: process.env.MAILGUN_API_KEY });\n    const domain = process.env.MAILGUN_DOMAIN;\n    transporter = mg.client({\n      auth: {\n        api_key: process.env.MAILGUN_API_KEY,\n        domain: domain\n      }\n    });\n  } else if (process.env.EMAIL_SERVICE === 'sendgrid') {\n    const sg = require('@sendgrid/mail');\n    sg.setApiKey(process.env.SENDGRID_API_KEY);\n    transporter = sg transporter();\n  } else {\n    throw new Error('Unsupported email service');\n  }\n\n  try {\n    await transporter.send({\n      to,\n      from: process.env.EMAIL_FROM,\n      subject,\n      text,\n      ...options\n    });\n\n    return { success: true, message: 'Email sent successfully' };\n  } catch (error) {\n    console.error('Error sending email:', error);\n    throw new Error('Failed to send email');\n  }\n};"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create an asynchronous function that fetches TV channel data from a specified API endpoint and processes it into a standardized format.\n\nFunction Description: The function makes an HTTP GET request to retrieve TV channel information from a remote API. It processes the response to extract relevant channel details (language, site ID, and name) and returns them in a structured array format. The function includes error handling to log any request failures.\n\nInput: None (The function uses a hardcoded API URL and parameters)\n\nOutput: An array of objects where each object represents a TV channel with the following properties:\n- lang: String - The language code for the channel (hardcoded as 'sq' in this case)\n- site_id: String - The unique identifier for the channel from the API\n- name: String - The display name of the channel",
    "Canonical_solution": "async function channels() {\n    const axios = require('axios')\n    const data = await axios\n        .get('https://www.tvim.tv/script/epg/category_channels?category=all&filter=playable')\n        .then(r => r.data)\n        .catch(console.log)\n\n    let channels = []\n    data.data.forEach(item => {\n        channels.push({\n            lang: 'sq',\n            site_id: item.epg_id,\n            name: item.name\n        })\n    })\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchTVChannels() {\n  const apiUrl = 'https://api.example.com/TVChannels';\n  const lang = 'sq';\n\n  try {\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    const channels = data.map(channel => ({\n      lang,\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n    return channels;\n  } catch (error) {\n    console.error('Error fetching TV channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function downloadVideo(url, desc) {\n  if (!url || url.trim() === '') {\n    throw new Error('URL is empty or not provided.');\n  }\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const blob = await response.blob();\n    const downloadUrl = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = downloadUrl;\n    a.download = desc;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(downloadUrl);\n    document.body.removeChild(a);\n  } catch (error) {\n    console.error('Error downloading video:', error);\n  }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Tool {\n  constructor() {\n    this._node = null;\n    this._isSurge = false;\n    this._isQuanX = false;\n    this.isSurge = false;\n    this.isQuanX = false;\n    this.isResponse = false;\n    this.detectEnvironment();\n  }\n\n  detectEnvironment() {\n    if (typeof $response !== 'undefined') {\n      this.isResponse = true;\n      if (typeof $storage !== 'undefined') {\n        this._node = null;\n      } else {\n        this._node = {\n          fs: require('fs'),\n          url: require('url')\n        };\n      }\n    } else if (typeof process !== 'undefined' && typeof require !== 'undefined') {\n      this._node = {\n        fs: require('fs'),\n        url: require('url')\n      };\n    }\n    this._isSurge = this.isResponse || (typeof $request !== 'undefined');\n    this._isQuanX = this.isResponse || (typeof $task !== 'undefined');\n    this.isSurge = this._isSurge;\n    this.isQuanX = this._isQuanX;\n  }\n\n  notify(title, subtitle, message, option) {\n    if (this._isQuanX) {\n      $notify(title, subtitle, message, option);\n    } else if (this._isSurge) {\n      $notify(title, subtitle, message, option);\n    }\n  }\n\n  write(value, key) {\n    if (this._isQuanX) {\n      $storage.write(key, value);\n      return true;\n    } else if (this._isSurge) {\n      $storage.set(key, value);\n      return true;\n    } else if (this._node && this._node.fs) {\n      try {\n        this._node.fs.writeFileSync(this._node.url.fileURLToPath(new URL('.', this._node.url.fileURLToPath(this._node.__filename))), JSON.stringify({ [key]: value }, null, 2));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  read(key) {\n    if (this._isQuanX) {\n      return $storage.read(key);\n    } else if (this._isSurge) {\n      return $storage.get(key);\n    } else if (this._node && this._node.fs) {\n      try {\n        const data = this._node.fs.readFileSync(this._node.url.fileURLToPath(new URL('.', this._node.url.fileURLToPath(this._node.__filename))), 'utf8');\n        const obj = JSON.parse(data);\n        return obj[key];\n      } catch (e) {\n        return '';\n      }\n    }\n    return '';\n  }\n\n  get(options, callback) {\n    if (this._isQuanX) {\n      $request.get(options, callback);\n    } else if (this._isSurge) {\n      $request.get(options, callback);\n    } else if (this._node && this._node.http) {\n      const req = this._node.http.request(options, (res) => {\n        let data = '';\n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n        res.on('end', () => {\n          callback(null, data, res.statusCode);\n        });\n      });\n      req.on('error', (err) => {\n        callback(err, null, null);\n      });\n      req.end();\n    }\n  }\n\n  post(options, callback) {\n    if (this._isQuanX) {\n      $request.post(options, callback);\n    } else if (this._isSurge) {\n      $request.post(options, callback);\n    } else if (this._node && this._node.http) {\n      const req = this._node.http.request(options, (res) => {\n        let data = '';\n        res.on('data', (chunk) => {\n          data += chunk;\n        });\n        res.on('end', () => {\n          callback(null, data, res.statusCode);\n        });\n      });\n      req.on('error', (err) => {\n        callback(err, null, null);\n      });\n      req.end();\n    }\n  }\n\n  _status(response) {\n    return {\n      code: response.statusCode,\n      headers: response.headers\n    };\n  }\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a class that simulates the behavior of an EventSource object, which is used to receive server-sent events (SSE) over HTTP. The class should handle the connection, reception of events, and error handling.\n\nClass Description: The `EventSource` class is designed to establish a persistent connection to a server using HTTP and receive server-sent events. It manages the connection state, handles incoming events, and dispatches them to appropriate event handlers. The class also supports reconnection in case of errors or connection loss.\n\nAttributes:\n\n- `URL`: [String] - The URL to which the EventSource connects to receive server-sent events.\n- `readyState`: [Number] - Represents the current state of the connection. Possible values are `CONNECTING` (0), `OPEN` (1), and `CLOSED` (2).\n- `_pollTimer`: [Object] - A timer object used to manage the polling interval for reconnection attempts.\n- `_xhr`: [Object] - The XMLHttpRequest object used to make HTTP requests to the server.\n\nMethods:\n\n- `poll()`: [Function] -> [Void] - Initiates a new HTTP request to the server to receive events. Handles the response, processes the events, and manages the connection state.\n- `close()`: [Function]() -> [Void] - Closes the connection to the server, sets the `readyState` to `CLOSED`, and stops any ongoing polling.\n- `dispatchEvent(type, event)`: [Function]([String], [Object]) -> [Void] - Dispatches an event to the registered event handlers based on the event type.\n- `addEventListener(type, handler)`: [Function]([String], [Function]) -> [Void] - Registers an event handler for a specific event type.\n- `removeEventListener()`: [Function]() -> [Void] - Placeholder method for removing event listeners (not implemented in the reference code).\n\nAdditional Classes:\n\n- `MessageEvent`: [Class] - Represents an event received from the server. Contains the event data, origin, and last event ID.\n\nAttributes of `MessageEvent`:\n\n- `data`: [String] - The data payload of the event.\n- `type`: [String] - The type of the event, defaulting to 'message'.\n- `lastEventId`: [String] - The ID of the last received event.\n- `origin`: [String] - The origin URL of the event.\n\nMethods of `MessageEvent`:\n\n- `MessageEvent(data, origin, lastEventId)`: [Constructor]([String], [String], [String]) -> [Object] - Initializes a new `MessageEvent` instance with the provided data, origin, and last event ID.",
    "Canonical_solution": "var EventSource = function (url) {\n  var eventsource = this,\n      interval = 500,\n      lastEventId = null,\n      cache = '';\n\n  if (!url || typeof url != 'string') {\n    throw new SyntaxError('Not enough arguments');\n  }\n\n  this.URL = url;\n  this.readyState = this.CONNECTING;\n  this._pollTimer = null;\n  this._xhr = null;\n\n  function poll() {\n    try {\n      if (eventsource.readyState == eventsource.CLOSED) return;\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', eventsource.URL, true);\n      xhr.setRequestHeader('Accept', 'text/event-stream');\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      if (lastEventId != null) xhr.setRequestHeader('Last-Event-ID', lastEventId);\n      cache = '';\n\n      xhr.timeout = 50000;\n      xhr.onreadystatechange = function () {\n        var status = 0;\n        try {\n          status = xhr.status;\n        } catch (e) {}\n\n        if ((this.readyState == 3 || this.readyState == 4) && status == 200) {\n          if (eventsource.readyState == eventsource.CONNECTING) {\n            eventsource.readyState = eventsource.OPEN;\n            eventsource.dispatchEvent('open', { type: 'open' });\n          }\n\n          var responseText = '';\n          try {\n            responseText = this.responseText || '';\n          } catch (e) {}\n\n          var parts = responseText.substr(cache.length).split(\"\\n\"),\n              eventType = 'message',\n              data = [],\n              i = 0,\n              line = '';\n\n          cache = responseText;\n\n          for (; i < parts.length; i++) {\n            line = parts[i].replace(reTrim, '');\n            if (line.indexOf('event') == 0) {\n              eventType = line.replace(/event:?\\s*/, '');\n            } else if (line.indexOf('data') == 0) {\n              data.push(line.replace(/data:?\\s*/, ''));\n            } else if (line.indexOf('id:') == 0) {\n              lastEventId = line.replace(/id:?\\s*/, '');\n            } else if (line.indexOf('id') == 0) {\n              lastEventId = null;\n            } else if (line == '') {\n              if (data.length) {\n                var event = new MessageEvent(data.join('\\n'), eventsource.url, lastEventId);\n                eventsource.dispatchEvent(eventType, event);\n                data = [];\n                eventType = 'message';\n              }\n            }\n          }\n\n          if (this.readyState == 4) pollAgain(this);\n        } else if (eventsource.readyState !== eventsource.CLOSED) {\n          if (this.readyState == 4) {\n            eventsource.readyState = eventsource.CONNECTING;\n            eventsource.dispatchEvent('error', { type: 'error' });\n            pollAgain(this);\n          } else if (this.readyState == 0) {\n            pollAgain(this);\n          }\n        }\n      };\n\n      xhr.send();\n\n      setTimeout(function () {\n        if (true || xhr.readyState == 3) xhr.abort();\n      }, xhr.timeout);\n\n      eventsource._xhr = xhr;\n\n    } catch (e) {\n      eventsource.dispatchEvent('error', { type: 'error', data: e.message });\n    }\n  };\n\n  poll();\n};\n\nEventSource.prototype = {\n  close: function () {\n    this.readyState = this.CLOSED;\n    clearInterval(this._pollTimer);\n    this._xhr.abort();\n  },\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSED: 2,\n  dispatchEvent: function (type, event) {\n    var handlers = this['_' + type + 'Handlers'];\n    if (handlers) {\n      for (var i = 0; i < handlers.length; i++) {\n        handlers[i].call(this, event);\n      }\n    }\n\n    if (this['on' + type]) {\n      this['on' + type].call(this, event);\n    }\n  },\n  addEventListener: function (type, handler) {\n    if (!this['_' + type + 'Handlers']) {\n      this['_' + type + 'Handlers'] = [];\n    }\n    this['_' + type + 'Handlers'].push(handler);\n  },\n  removeEventListener: function () {},\n  onerror: null,\n  onmessage: null,\n  onopen: null,\n  readyState: 0,\n  URL: ''\n};\n\nvar MessageEvent = function (data, origin, lastEventId) {\n  this.data = data;\n  this.origin = origin;\n  this.lastEventId = lastEventId || '';\n};\n\nMessageEvent.prototype = {\n  data: null,\n  type: 'message',\n  lastEventId: '',\n  origin: ''\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class EventSource {\n  constructor(url) {\n    this.URL = url;\n    this.readyState = 0;\n    this._pollTimer = null;\n    this._xhr = null;\n    this._eventListeners = {};\n  }\n\n  poll() {\n    if (this.readyState === 1) return;\n    if (this.readyState === 2) {\n      this._xhr = new XMLHttpRequest();\n      this._xhr.open(\"GET\", this.URL, true);\n      this._xhr.withCredentials = true;\n      this._xhr.onreadystatechange = () => {\n        if (this._xhr.readyState === 4) {\n          if (this._xhr.status === 200) {\n            this.readyState = 1;\n            this._parseResponse(this._xhr.response);\n          } else {\n            this.readyState = 2;\n            this._pollTimer = setTimeout(() => this.poll(), 5000);\n          }\n        }\n      };\n      this._xhr.send();\n    }\n  }\n\n  close() {\n    if (this._xhr) {\n      this._xhr.abort();\n      this._xhr = null;\n    }\n    this.readyState = 2;\n    if (this._pollTimer) {\n      clearTimeout(this._pollTimer);\n      this._pollTimer = null;\n    }\n  }\n\n  dispatchEvent(type, event) {\n    if (this._eventListeners[type]) {\n      this._eventListeners[type].forEach(handler => handler(event));\n    }\n  }\n\n  addEventListener(type, handler) {\n    if (!this._eventListeners[type]) {\n      this._eventListeners[type] = [];\n    }\n    this._eventListeners[type].push(handler);\n  }\n\n  removeEventListener(type, handler) {\n    if (this._eventListeners[type]) {\n      this._eventListeners[type] = this._eventListeners[type].filter(h => h !== handler);\n    }\n  }\n\n  _parseResponse(response) {\n    const lines = response.split(\"\\n\");\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (line.trim() === \"\") continue;\n      const parts = line.split(\":\");\n      if (parts[0] === \"data\") {\n        const data = parts[1];\n        this.dispatchEvent(\"message\", new MessageEvent(data, this.URL, \"\"));\n      } else if (parts[0] === \"event\") {\n        const type = parts[1];\n        const data = parts[2];\n        this.dispatchEvent(type, new MessageEvent(data, this.URL, \"\"));\n      } else if (parts[0] === \"id\") {\n        const id = parts[1];\n        this.dispatchEvent(\"message\", new MessageEvent(\"\", this.URL, id));\n      }\n    }\n  }\n}\n\nclass MessageEvent {\n  constructor(data, origin, lastEventId) {\n    this.data = data;\n    this.type = \"message\";\n    this.lastEventId = lastEventId;\n    this.origin = origin;\n  }\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a function that handles HTTP requests using XMLHttpRequest in JavaScript, including request configuration, progress tracking, and response handling.\n\nFunction Description: The function `makeRequest` initiates and manages an HTTP request using XMLHttpRequest. It configures the request with provided settings, tracks upload/download progress, handles timeouts, and processes the response. The function supports both successful and error responses, with appropriate callbacks for each scenario.\n\nInput:\n- `resolve`: [Function] - A callback function to handle the final resolution of the request (either success or error).\n- `config`: [Object] - Configuration object containing properties to set on the XMLHttpRequest instance.\n- `method`: [String] - HTTP method for the request (e.g., 'GET', 'POST').\n- `fullUrl`: [String] - The complete URL for the request.\n- `headers`: [Object] - Key-value pairs representing HTTP headers to set on the request.\n- `payload`: [Any] - Data to send with the request (for POST/PUT requests).\n- `defaultTimeout`: [Number] - Timeout duration in milliseconds for the request.\n- `xhrExtra`: [Any] - Additional data to pass to error/timeout handlers.\n- Event handlers:\n  - `onRequestProgress`: [Function] - Callback for upload progress events.\n  - `onRequestStart`: [Function] - Callback when the request starts.\n  - `onRequestEnd`: [Function] - Callback when the request ends.\n  - `onResponseStart`: [Function] - Callback when the response starts.\n  - `onResponseProgress`: [Function] - Callback for download progress events.\n  - `onResponseEnd`: [Function] - Callback when the response ends.\n  - `onTimeoutError`: [Function] - Callback for timeout errors.\n  - `onSuccess`: [Function] - Callback for successful responses.\n  - `onError`: [Function] - Callback for error responses.\n  - `onBeforeRequest`: [Function] - Callback before sending the request.\n  - `createAbortListener`: [Function] - Creates a listener for abort events.\n  - `parseResponse`: [Function] - Parses successful response data.\n  - `parseErrorResponse`: [Function] - Parses error response data.\n  - `getResponseHeaders`: [Function] - Parses raw response headers.\n\nOutput: None (The function uses callbacks to handle results asynchronously).",
    "Canonical_solution": "function makeRequest(resolve) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = defaultTimeout;\n\n    const abort = () => xhr.abort();\n\n    Object.entries(config).forEach(([name, value]) => {\n        xhr[name] = value;\n    });\n\n    xhr.open(method, fullUrl, true);\n\n    Object.entries(headers).forEach(([name, value]) => xhr.setRequestHeader(name, value as string));\n\n    const unmountListener = createAbortListener(0, xhrExtra, abort, resolve);\n\n    xhr.upload.onprogress = onRequestProgress;\n\n    xhr.onloadstart = (): void => {\n        onRequestEnd();\n        onResponseStart();\n    };\n\n    xhr.onprogress = onResponseProgress;\n\n    xhr.onloadend = () => {\n        onResponseEnd();\n        unmountListener();\n    };\n\n    xhr.ontimeout = () => onTimeoutError(0, xhrExtra, resolve);\n\n    xhr.onreadystatechange = (e: Event) => {\n        const event = e as unknown as ProgressEvent<XMLHttpRequest>;\n        const finishedState = 4;\n\n        if (event.target && event.target.readyState === finishedState) {\n            const { status } = event.target;\n            const success = String(status).startsWith(\"2\") || String(status).startsWith(\"3\");\n            const responseHeaders = getResponseHeaders(xhr.getAllResponseHeaders());\n\n            if (success) {\n                const data = parseResponse(event.target.response);\n                onSuccess(data, status, { headers: responseHeaders }, resolve);\n            } else {\n                const data = parseErrorResponse(event.target.response);\n                onError(data, status, { headers: responseHeaders }, resolve);\n            }\n        }\n    };\n\n    onBeforeRequest();\n    onRequestStart();\n\n    xhr.send(payload);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function makeRequest(resolve, config, method, fullUrl, headers, payload, defaultTimeout, xhrExtra) {\n  const xhr = new XMLHttpRequest();\n  const timeoutId = null;\n  let abortRequested = false;\n\n  function setupRequest() {\n    if (onBeforeRequest) onBeforeRequest(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    xhr.open(method, fullUrl, true);\n    Object.entries(config).forEach(([key, value]) => {\n      if (key === 'headers') {\n        Object.entries(value).forEach(([headerKey, headerValue]) => {\n          xhr.setRequestHeader(headerKey, headerValue);\n        });\n      } else {\n        xhr[key] = value;\n      }\n    });\n    if (onRequestStart) onRequestStart(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n  }\n\n  function startTimeout() {\n    if (defaultTimeout && !timeoutId) {\n      timeoutId = setTimeout(() => {\n        if (!abortRequested) {\n          xhr.abort();\n          if (onTimeoutError) onTimeoutError(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n        }\n      }, defaultTimeout);\n    }\n  }\n\n  function handleProgress(event) {\n    if (event.loaded > 0 && event.total > 0) {\n      if (onRequestProgress) onRequestProgress(event.loaded, event.total, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    }\n  }\n\n  function handleResponseStart() {\n    if (onResponseStart) onResponseStart(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n  }\n\n  function handleResponseProgress(event) {\n    if (event.loaded > 0 && event.total > 0) {\n      if (onResponseProgress) onResponseProgress(event.loaded, event.total, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    }\n  }\n\n  function handleResponseEnd() {\n    if (onResponseEnd) onResponseEnd(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n  }\n\n  function handleSuccess() {\n    if (onSuccess) {\n      const response = parseResponse(xhr.responseText, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n      onSuccess(response, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    }\n    resolve();\n  }\n\n  function handleError() {\n    if (onError) {\n      const error = parseErrorResponse(xhr.statusText, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n      onError(error, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    }\n    resolve();\n  }\n\n  function handleAbort() {\n    if (onRequestEnd) onRequestEnd(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    if (onError) {\n      const error = parseErrorResponse('Aborted', xhr, config, method, fullUrl, headers, payload, xhrExtra);\n      onError(error, xhr, config, method, fullUrl, headers, payload, xhrExtra);\n    }\n    resolve();\n  }\n\n  function setupEventListeners() {\n    xhr.addEventListener('progress', handleProgress);\n    xhr.addEventListener('loadstart', handleResponseStart);\n    xhr.addEventListener('load', handleSuccess);\n    xhr.addEventListener('error', handleError);\n    xhr.addEventListener('abort', handleAbort);\n    xhr.addEventListener('timeout', () => {\n      if (!abortRequested) {\n        if (onTimeoutError) onTimeoutError(xhr, config, method, fullUrl, headers, payload, xhrExtra);\n        handleAbort();\n      }\n    });\n    xhr.addEventListener('loadend', handleResponseEnd);\n  }\n\n  setupRequest();\n  setupEventListeners();\n  startTimeout();\n  xhr.send(payload);\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class DataManURL {\n  constructor(url, type, options) {\n    this.url = url;\n    this._type = type || 'application/octet-stream';\n    this.urlOpts = options || {};\n    this._size = null;\n  }\n\n  getBuffer(callback) {\n    const req = require('http').get(this.url, (res) => {\n      if (res.statusCode >= 400) {\n        return callback(new Error(`HTTP error: ${res.statusCode}`));\n      }\n\n      const chunks = [];\n      res.on('data', (chunk) => {\n        chunks.push(chunk);\n      });\n\n      res.on('end', () => {\n        const buffer = Buffer.concat(chunks);\n        callback(null, buffer);\n      });\n    });\n\n    req.on('error', (err) => {\n      callback(err);\n    });\n\n    // Set headers from options\n    Object.keys(this.urlOpts.headers || {}).forEach(key => {\n      req.setHeader(key, this.urlOpts.headers[key]);\n    });\n\n    // Set auth if provided\n    if (this.urlOpts.auth) {\n      req.setHeader('Authorization', `Basic ${Buffer.from(this.urlOpts.auth).toString('base64')}`);\n    }\n  }\n\n  getDataUri(callback) {\n    this.getBuffer((err, buffer) => {\n      if (err) return callback(err);\n      const dataUri = `data:${this._type};base64,${buffer.toString('base64')}`;\n      callback(null, dataUri);\n    });\n  }\n\n  createReadStream() {\n    const req = require('http').get(this.url, (res) => {\n      if (res.statusCode >= 400) {\n        throw new Error(`HTTP error: ${res.statusCode}`);\n      }\n\n      const stream = require('stream').PassThrough();\n      res.pipe(stream);\n      return stream;\n    });\n\n    req.on('error', (err) => {\n      throw err;\n    });\n\n    // Set headers from options\n    Object.keys(this.urlOpts.headers || {}).forEach(key => {\n      req.setHeader(key, this.urlOpts.headers[key]);\n    });\n\n    // Set auth if provided\n    if (this.urlOpts.auth) {\n      req.setHeader('Authorization', `Basic ${Buffer.from(this.urlOpts.auth).toString('base64')}`);\n    }\n\n    return req;\n  }\n\n  size(callback) {\n    if (this._size !== null) {\n      return callback(null, this._size);\n    }\n\n    const req = require('http').get(this.url, (res) => {\n      if (res.statusCode >= 400) {\n        return callback(new Error(`HTTP error: ${res.statusCode}`));\n      }\n\n      this._size = parseInt(res.headers['content-length'], 10);\n      callback(null, this._size);\n    });\n\n    req.on('error', (err) => {\n      callback(err);\n    });\n\n    // Set headers from options\n    Object.keys(this.urlOpts.headers || {}).forEach(key => {\n      req.setHeader(key, this.urlOpts.headers[key]);\n    });\n\n    // Set auth if provided\n    if (this.urlOpts.auth) {\n      req.setHeader('Authorization', `Basic ${Buffer.from(this.urlOpts.auth).toString('base64')}`);\n    }\n  }\n\n  type() {\n    return this._type;\n  }\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "fetch('https://example.com/submit', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  body: 'key1=value1&key2=value2'\n})\n.then(response => response.text())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n  try {\n    if (data === 'xhr') {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', 'https://jsonplaceholder.typicode.com/posts/1', true);\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          sender.postMessage(xhr.responseText);\n        } else {\n          sender.postMessage('Error: ' + xhr.statusText);\n        }\n      };\n      xhr.onerror = function () {\n        sender.postMessage('Error: XMLHttpRequest failed');\n      };\n      xhr.send();\n    } else if (data === 'fetch') {\n      fetch('https://jsonplaceholder.typicode.com/posts/1')\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.text();\n        })\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Error: ' + error.message));\n    } else if (data === 'importScripts') {\n      const script = document.createElement('script');\n      script.src = 'https://jsonplaceholder.typicode.com/posts/1';\n      script.onload = function () {\n        sender.postMessage('Script loaded and executed');\n      };\n      script.onerror = function () {\n        sender.postMessage('Error: Script failed to load');\n      };\n      document.head.appendChild(script);\n    } else {\n      sender.postMessage('Unexpected message');\n    }\n  } catch (error) {\n    sender.postMessage('Error: ' + error.message);\n  }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function loadYamlUrl(url, callback) {\n  fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    })\n    .then(data => {\n      callback(yamlToForm(data));\n      console.log('YAML content processed and logged.');\n    })\n    .catch(error => {\n      console.error('There was a problem with the fetch operation:', error);\n    });\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const https = require('https');\nconst url = require('url');\nconst parseUrl = require('url').parse;\nconst { URL } = require('url');\n\nclass URLExpander {\n  constructor() {\n    this.map = {\n      'is.gd': 'is.gd',\n      'goo.gl': 'goo.gl',\n      'budurl.com': 'budurl.com',\n      'snipurl.com': 'snipurl.com'\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      'is.gd': (shortUrl) => {\n        return new Promise((resolve, reject) => {\n          const options = {\n            hostname: 'is.gd',\n            path: `/expand/${shortUrl}`,\n            method: 'GET'\n          };\n          const req = https.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const result = JSON.parse(data);\n                resolve(result.expanded_url);\n              } catch (e) {\n                reject(new Error('Failed to parse response from is.gd'));\n              }\n            });\n          });\n          req.on('error', (e) => {\n            reject(e);\n          });\n          req.end();\n        });\n      },\n      'goo.gl': (shortUrl) => {\n        return new Promise((resolve, reject) => {\n          const options = {\n            hostname: 'goo.gl',\n            path: `/shorten/${shortUrl}`,\n            method: 'GET'\n          };\n          const req = https.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const result = JSON.parse(data);\n                resolve(result.long_url);\n              } catch (e) {\n                reject(new Error('Failed to parse response from goo.gl'));\n              }\n            });\n          });\n          req.on('error', (e) => {\n            reject(e);\n          });\n          req.end();\n        });\n      },\n      'budurl.com': (shortUrl) => {\n        return new Promise((resolve, reject) => {\n          const options = {\n            hostname: 'budurl.com',\n            path: `/expand/${shortUrl}`,\n            method: 'GET'\n          };\n          const req = https.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const result = JSON.parse(data);\n                resolve(result.url);\n              } catch (e) {\n                reject(new Error('Failed to parse response from budurl.com'));\n              }\n            });\n          });\n          req.on('error', (e) => {\n            reject(e);\n          });\n          req.end();\n        });\n      },\n      'snipurl.com': (shortUrl) => {\n        return new Promise((resolve, reject) => {\n          const options = {\n            hostname: 'snipurl.com',\n            path: `/expand/${shortUrl}`,\n            method: 'GET'\n          };\n          const req = https.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const result = JSON.parse(data);\n                resolve(result.url);\n              } catch (e) {\n                reject(new Error('Failed to parse response from snipurl.com'));\n              }\n            });\n          });\n          req.on('error', (e) => {\n            reject(e);\n          });\n          req.end();\n        });\n      }\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    const finalUrl = url;\n    const finalDepth = depth;\n    const finalSeen = { ...seen };\n\n    // Check if the URL is already in the seen map\n    if (seen[finalUrl]) {\n      callback(null, { url: finalUrl, depth: finalDepth, seen: finalSeen });\n      return;\n    }\n\n    // Add the current URL to the seen map\n    finalSeen[finalUrl] = true;\n\n    // Check if we've reached the maximum recursion depth\n    if (depth >= 5) {\n      callback(null, { url: finalUrl, depth: finalDepth, seen: finalSeen });\n      return;\n    }\n\n    // Try to expand the URL by checking each service\n    for (const service in this.map) {\n      const domain = this.map[service];\n      const shortUrl = url;\n\n      // Check if the URL is a shortened URL for this service\n      if (shortUrl.startsWith(`https://${domain}/`)) {\n        // Extract the short URL without the domain\n        const shortUrlWithoutDomain = shortUrl.split(`//${domain}/`)[1];\n\n        // Use the appropriate API to expand the URL\n        this.APIs[service](shortUrlWithoutDomain)\n          .then(expandedUrl => {\n            // Recursively expand the expanded URL\n            this.expand({ url: expandedUrl, depth: depth + 1, seen: finalSeen }, (err, result) => {\n              if (err) {\n                callback(err, { url: finalUrl, depth: finalDepth, seen: finalSeen });\n              } else {\n                callback(null, { url: result.url, depth: result.depth, seen: result.seen });\n              }\n            });\n          })\n          .catch(err => {\n            callback(err, { url: finalUrl, depth: finalDepth, seen: finalSeen });\n          });\n        return;\n      }\n    }\n\n    // If no service could expand the URL, check if it's a redirect\n    const parsedUrl = new URL(url);\n    const redirectUrl = parsedUrl.href;\n\n    // Check if the URL is a redirect\n    if (parsedUrl.status === 301 || parsedUrl.status === 302) {\n      // Recursively expand the redirect URL\n      this.expand({ url: redirectUrl, depth: depth + 1, seen: finalSeen }, (err, result) => {\n        if (err) {\n          callback(err, { url: finalUrl, depth: finalDepth, seen: finalSeen });\n        } else {\n          callback(null, { url: result.url, depth: result.depth, seen: result.seen });\n        }\n      });\n    } else {\n      // If no expansion or redirect was found, return the original URL\n      callback(null, { url: finalUrl, depth: finalDepth, seen: finalSeen });\n    }\n  }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "class HTTPServer {\n  constructor(port) {\n    this.app = express();\n    this.port = port;\n    this.server = null;\n    this.middlewares = [];\n    this.routes = {};\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.app.use(express.json());\n      this.app.use(express.urlencoded({ extended: true }));\n      this.middlewares.forEach(middleware => this.app.use(middleware));\n      \n      this.server = http.createServer(this.app);\n      this.server.on('error', err => reject(err));\n      this.server.listen(this.port, () => {\n        resolve(this.server.address().port);\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close(() => {\n        this.server = null;\n      });\n    }\n  }\n\n  addRoute(method, path, handler) {\n    this.routes[method] = this.routes[method] || {};\n    this.routes[method][path] = handler;\n  }\n\n  get(path, handler) {\n    this.addRoute('GET', path, handler);\n  }\n\n  post(path, handler) {\n    this.addRoute('POST', path, handler);\n  }\n\n  put(path, handler) {\n    this.addRoute('PUT', path, handler);\n  }\n\n  delete(path, handler) {\n    this.addRoute('DELETE', path, handler);\n  }\n\n  patch(path, handler) {\n    this.addRoute('PATCH', path, handler);\n  }\n\n  options(path, handler) {\n    this.addRoute('OPTIONS', path, handler);\n  }\n\n  trace(path, handler) {\n    this.addRoute('TRACE', path, handler);\n  }\n\n  head(path, handler) {\n    this.addRoute('HEAD', path, handler);\n  }\n}"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a function that sets up an Express server with CORS support, static file serving, and specific route handlers.\n\nFunction Description: The function `createServer` initializes an Express application, configures middleware for CORS and static file serving, defines route handlers for specific endpoints, and starts the server on port 80. It enables cross-origin requests, serves static files from a 'public' directory, and provides fallback to 'index.html' for unmatched routes.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function does not return a value but starts an Express server listening on port 80)",
    "Canonical_solution": "function createServer() {\n    const express = require('express');\n    const app = express();\n\n    app.use(function(req, res, next) {\n        res.set({\n            'Access-Control-Allow-Origin': '*'\n        });\n        next();\n    });\n    app.use(express.static(__dirname + '/public'));\n\n    app.get('/imagebox', imagebox.upload);\n    app.get('/readapi', api.requestApi);\n    app.get('*', (req, res) => {\n        res.sendFile(__dirname + '/public/index.html');\n    });\n\n    app.listen(80, () => {\n        console.log('app is listening at port:80');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\nconst cors = require('cors');\n\nfunction createServer() {\n  const app = express();\n\n  // Enable CORS for all routes\n  app.use(cors());\n\n  // Serve static files from the 'public' directory\n  app.use(express.static(path.join(__dirname, 'public')));\n\n  // Fallback to 'index.html' for unmatched routes\n  app.use((req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n  });\n\n  // Start the server on port 80\n  app.listen(80, () => {\n    console.log('Server is running on port 80');\n  });\n}\n\ncreateServer();"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Create a class that implements a simple HTTP server using Express.js framework to provide a FOAAS (F*** Off As A Service) style API, which generates humorous responses to HTTP requests.\n\nClass Description: The FOAAS class creates an Express application that handles various HTTP requests and returns humorous responses in a standardized format. It includes middleware configuration, route handling, and server management capabilities.\n\nAttributes:\n- app: [Object] - The Express application instance\n- operations: [Object] - A dictionary storing available API operations\n- operationsArray: [Array] - An array containing information about available operations\n\nMethods:\n- constructor(options) -> [void] - Initializes the Express application, configures middleware, and sets up default routes\n  - options: [Object] - Configuration options for the application (currently unused in reference implementation)\n  \n- sendIndex(req, res) -> [void] - Sends the index.html file as response\n  - req: [Object] - Express request object\n  - res: [Object] - Express response object\n  \n- start(port) -> [void] - Starts the HTTP server on the specified port and performs initialization checks\n  - port: [Number] - The port number to listen on\n  \n- output(req, res, message, subtitle) -> [void] - Formats and sends the response message\n  - req: [Object] - Express request object\n  - res: [Object] - Express response object\n  - message: [String] - The main response message\n  - subtitle: [String] - The secondary response message (typically containing the requester's name)",
    "Canonical_solution": "const express = require('express');\nconst request = require('request');\n\nclass FOAAS {\n  constructor(options) {\n    this.app = express();\n    this.app.disable('x-powered-by');\n    \n    // Standard Middleware\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    \n    // Operations\n    this.operations = {};\n    this.operationsArray = [];\n    \n    // Define routes\n    this.app.get('/', this.sendIndex.bind(this));\n    this.app.get('/operations', (req, res) => {\n      res.send(this.operationsArray);\n    });\n    \n    // Default Operation\n    this.app.get('/:thing/:from', (req, res) => {\n      const message = `Fuck ${req.params.thing}.`;\n      const subtitle = `- ${req.params.from}`;\n      this.output(req, res, message, subtitle);\n    });\n  }\n\n  sendIndex(req, res) {\n    res.sendFile('./public/index.html');\n  }\n\n  start(port) {\n    this.app.listen(port);\n    console.log(`FOAAS Started on port ${port}`);\n    \n    request(`http://localhost:${port}/operations`, (error, response, body) => {\n      if (error) return console.log('Could not retrieve operations');\n      const ops = JSON.parse(body);\n      \n      ops.forEach((op) => {\n        request({\n          url: `http://localhost:${port}${op.url}`,\n          headers: { Accept: 'text/plain' }\n        }, (error, response, body) => {\n          if (error) return console.log('Could not retrieve operation ' + op.url);\n        });\n      });\n    });\n  }\n\n  output(req, res, message, subtitle) {\n    req.message = message;\n    req.subtitle = subtitle;\n    \n    // Process output\n    res.send(`${message} ${subtitle}`);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "class FOAAS {\n  constructor(options) {\n    this.app = express();\n    this.operations = {\n      'foaas': {\n        name: 'F*** Off As A Service',\n        description: 'A humorous API that responds to requests with funny messages.'\n      },\n      'hello': {\n        name: 'Hello',\n        description: 'Says hello to the user.'\n      }\n    };\n    this.operationsArray = Object.keys(this.operations).map(key => ({\n      name: this.operations[key].name,\n      description: this.operations[key].description\n    }));\n    this.configureMiddleware();\n    this.setupRoutes();\n  }\n\n  configureMiddleware() {\n    this.app.use(express.json());\n    this.app.use(express.static('public'));\n  }\n\n  setupRoutes() {\n    this.app.get('/', (req, res) => this.sendIndex(req, res));\n    this.app.get('/api/foaas', (req, res) => this.output(req, res, 'You have been foaased!', 'F*** Off!'));\n    this.app.get('/api/hello', (req, res) => this.output(req, res, 'Hello, world!', 'Hello, ' + req.query.name));\n  }\n\n  sendIndex(req, res) {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n  }\n\n  start(port) {\n    if (!port) port = 3000;\n    this.app.listen(port, () => {\n      console.log(`FOAAS server is running on port ${port}`);\n    });\n  }\n\n  output(req, res, message, subtitle) {\n    res.status(200).json({\n      message: message,\n      subtitle: subtitle\n    });\n  }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const url = 'https://api.example.com/data';\n  const headers = {\n    'User-Agent': 'MyApp/1.0',\n    'Accept-Encoding': 'gzip'\n  };\n\n  request({\n    url: url,\n    headers: headers\n  }, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n      return;\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      console.log('Response Body:', body);\n    } else {\n      console.error('Request failed with status code:', response.statusCode);\n    }\n  });\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create a function that initializes and configures an Express.js web application with middleware, route handlers, and server listening capabilities, including optional HTTPS support.\n\nFunction Description: The function `createExpressApp` creates and configures an Express.js application instance with various middleware (CORS, security headers, caching), route handlers for API endpoints and static files, and error handling. It starts an HTTP server (and optionally an HTTPS server) listening on specified ports. The function returns the configured Express application instance.\n\nInput: None (The function uses global configuration variables like CONFIG and process.env for settings)\n\nOutput: Express.Application - Returns the fully configured Express.js application instance after setting up all middleware, routes, and server listeners.",
    "Canonical_solution": "function createExpressApp() {\n    var express = require('express');\n    var app = express();\n\n    app.use(express.bodyParser());\n    app.set('view engine', 'ejs');\n\n    if (CONFIG.allowedOrigins) {\n        app.use(function(req, res, next) {\n            var origin = req.headers[\"origin\"];\n            if (origin) {\n                if (CONFIG.allowedOrigins.indexOf('*') > -1) {\n                    res.setHeader('Access-Control-Allow-Origin', '*');\n                } else {\n                    if (CONFIG.allowedOrigins.indexOf(origin) > -1) {\n                        res.setHeader('Access-Control-Allow-Origin', origin);\n                    }\n                }\n            }\n            next();\n        });\n    }\n\n    app.disable('x-powered-by');\n    app.use(function(req, res, next) {\n        res.setHeader('X-Powered-By', 'Iframely');\n        next();\n    });\n\n    app.use(sysUtils.cacheMiddleware);\n\n    require('./modules/api/views')(app);\n    require('./modules/debug/views')(app);\n    require('./modules/tests-ui/views')(app);\n\n    app.use(logErrors);\n    app.use(errorHandler);\n\n    app.get(CONFIG.relativeStaticUrl + '/*', function(req, res, next) {\n        var url = '/' + req.url.split('/').splice(2).join('/');\n        sysUtils.static(path.resolve(__dirname, 'static'), {path: url})(req, res, next);\n    });\n\n    app.get('/', function(req, res) {\n        res.writeHead(302, { Location: 'http://iframely.com'});\n        res.end();\n    });\n\n    var listener = app.listen(process.env.PORT || CONFIG.port, process.env.HOST || CONFIG.host, function(){\n        console.log('\\niframely is listening on ' + listener.address().address + ':' + listener.address().port + '\\n');\n    });\n\n    if (CONFIG.ssl) {\n        var options = { key: CONFIG.ssl.key, cert: CONFIG.ssl.cert };\n        require('https').createServer(options, app).listen(CONFIG.ssl.port);\n    }\n\n    return app;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst https = require('https');\nconst fs = require('fs');\nconst path = require('path');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst { join } = require('path');\n\nfunction createExpressApp() {\n  const app = express();\n\n  // Global middleware\n  app.use(helmet());\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  app.use((req, res, next) => {\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('X-Frame-Options', 'DENY');\n    res.setHeader('X-XSS-Protection', '1; mode=block');\n    next();\n  });\n\n  // Rate limiting\n  const limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100\n  });\n  app.use(limiter);\n\n  // API routes\n  app.use('/api', (req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    next();\n  });\n  app.use('/api/v1', require('./routes/api'));\n\n  // Static files\n  const staticDir = path.join(__dirname, 'public');\n  app.use(express.static(staticDir));\n\n  // Error handling\n  app.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something went wrong');\n  });\n\n  // Server setup\n  let server;\n  if (process.env.HTTPS_PORT) {\n    const options = {\n      key: fs.readFileSync(path.join(__dirname, 'ssl', 'key.pem')),\n      cert: fs.readFileSync(path.join(__dirname, 'ssl', 'cert.pem'))\n    };\n    server = https.createServer(options, app);\n    server.listen(process.env.HTTPS_PORT, () => {\n      console.log(`HTTPS server listening on port ${process.env.HTTPS_PORT}`);\n    });\n  } else {\n    server = app.listen(process.env.PORT, () => {\n      console.log(`HTTP server listening on port ${process.env.PORT}`);\n    });\n  }\n\n  return app;\n}\n\nmodule.exports = createExpressApp;"
  }
]