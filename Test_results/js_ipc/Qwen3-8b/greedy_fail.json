[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const crypto = require('crypto');\n\nclass Trader {\n  constructor(config) {\n    this.key = config.key;\n    this.secret = config.secret;\n    this.currency = config.currency;\n    this.asset = config.asset;\n    this.pair = `${config.asset}${config.currency}`;\n    this.name = 'EXMO';\n    this.nonce = 0;\n  }\n\n  api_query(method, params, callback) {\n    this.nonce += 1;\n    const payload = method + JSON.stringify(params) + this.nonce + this.pair;\n    const signature = crypto.createHmac('sha512', this.secret)\n      .update(payload)\n      .digest('hex');\n\n    const headers = {\n      'Key': this.key,\n      'Sign': signature,\n      'Nonce': this.nonce.toString(),\n      'Content-Type': 'application/json'\n    };\n\n    fetch(`https://api.exmo.com/v1/${method}`, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(params)\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(data => callback(null, data))\n    .catch(error => callback(error, null));\n  }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server with WebSocket support using Express and Socket.IO, implementing a particle simulation system with cluster and client event handling.\n\nFunction Description: The function `startServer` initializes an Express application, sets up static file serving, integrates Socket.IO for real-time communication, and configures a particle simulation system with collision detection and cluster management. It handles particle movement, boundary collisions, and client interactions through defined event handlers.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function starts a server listening on port 3000 but doesn't return any value)",
    "Canonical_solution": "function startServer() {\n    const express = require('express');\n    const app = express();\n    const server = require('http').Server(app);\n    const io = require('socket.io')(server);\n    const swip = require('../../../src/server/index.js');\n\n    app.use(express.static(__dirname + './../static'));\n\n    swip(io, {\n        cluster: {\n            events: {\n                update: (cluster) => {\n                    const blobs = cluster.data.blobs;\n                    const clients = cluster.clients;\n\n                    const updatedBlobs = blobs.map((blob) => {\n                        const boundaryOffset = blob.size;\n                        const client = clients.find((c) => isParticleInClient(blob, c));\n\n                        let nextPosX = blob.x + blob.speedX;\n                        let nextPosY = blob.y + blob.speedY;\n                        let nextSpeedX = blob.speedX;\n                        let nextSpeedY = blob.speedY;\n\n                        if (client) {\n                            if (((blob.speedX < 0) &&\n                                ((nextPosX - boundaryOffset) < client.transform.x)\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.left, nextPosY))) {\n                                nextPosX = client.transform.x + boundaryOffset;\n                                nextSpeedX = blob.speedX * -1;\n                            } else if (((blob.speedX > 0) &&\n                                ((nextPosX + boundaryOffset) > (client.transform.x + client.size.width))\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.right, nextPosY))) {\n                                nextPosX = client.transform.x + (client.size.width - boundaryOffset);\n                                nextSpeedX = blob.speedX * -1;\n                            }\n\n                            if (((blob.speedY < 0) &&\n                                ((nextPosY - boundaryOffset) < client.transform.y\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.top, nextPosX)))) {\n                                nextPosY = client.transform.y + boundaryOffset;\n                                nextSpeedY = blob.speedY * -1;\n                            } else if (((blob.speedY > 0) &&\n                                ((nextPosY + boundaryOffset) > (client.transform.y + client.size.height))\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.bottom, nextPosX))\n                            ) {\n                                nextPosY = client.transform.y + (client.size.height - boundaryOffset);\n                                nextSpeedY = blob.speedY * -1;\n                            }\n                        } else {\n                            const firstClient = clients[0];\n                            nextPosX = firstClient.transform.x + (firstClient.size.width / 2);\n                            nextPosY = firstClient.transform.y + (firstClient.size.height / 2);\n                            nextSpeedX = 0;\n                            nextSpeedY = 0;\n                        }\n\n                        blob.x = nextPosX;\n                        blob.y = nextPosY;\n                        blob.speedX = nextSpeedX;\n                        blob.speedY = nextSpeedY;\n\n                        return blob;\n                    });\n\n                    return {\n                        blobs: { $set: updatedBlobs },\n                    };\n                },\n                merge: (cluster1, cluster2, transform) => ({\n                    blobs: { $set: getNewParticleDist(cluster1, cluster2, transform) },\n                    backgroundColor: { $set: cluster1.data.backgroundColor },\n                }),\n            },\n            init: () => ({ blobs: [], backgroundColor: getRandomColor() }),\n        },\n\n        client: {\n            init: () => ({}),\n            events: {\n                addBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $push: blobs } },\n                        },\n                    };\n                },\n                updateBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $set: blobs } },\n                        },\n                    };\n                },\n            },\n        },\n    });\n\n    server.listen(3000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketIO = require('socket.io');\nconst cluster = require('cluster');\nconst os = require('os');\n\nfunction startServer() {\n  const app = express();\n  app.use(express.static('public'));\n\n  const server = http.createServer(app);\n  const io = socketIO(server);\n\n  const particles = [];\n\n  io.on('connection', (socket) => {\n    particles.push({\n      id: Date.now(),\n      x: Math.random() * 800,\n      y: Math.random() * 600,\n      vx: (Math.random() - 0.5) * 2,\n      vy: (Math.random() - 0.5) * 2,\n    });\n\n    socket.on('disconnect', () => {\n      const index = particles.findIndex(p => p.id === socket.id);\n      if (index !== -1) {\n        particles.splice(index, 1);\n      }\n    });\n\n    socket.emit('particles', particles);\n  });\n\n  setInterval(() => {\n    for (let i = 0; i < particles.length; i++) {\n      const p = particles[i];\n      p.x += p.vx;\n      p.y += p.vy;\n\n      if (p.x < 0 || p.x > 800) p.vx *= -1;\n      if (p.y < 0 || p.y > 600) p.vy *= -1;\n\n      for (let j = i + 1; j < particles.length; j++) {\n        const q = particles[j];\n        const dx = p.x - q.x;\n        const dy = p.y - q.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist < 20) {\n          const tempVx = p.vx;\n          const tempVy = p.vy;\n          p.vx = q.vx;\n          p.vy = q.vy;\n          q.vx = tempVx;\n          q.vy = tempVy;\n        }\n      }\n    }\n\n    io.emit('particles', particles);\n  }, 16);\n\n  server.listen(3000, () => {\n    console.log('Server running on port 3000');\n  });\n}\n\nif (cluster.isMaster) {\n  const numWorkers = os.cpus().length;\n  for (let i = 0; i < numWorkers; i++) {\n    cluster.fork();\n  }\n} else {\n  startServer();\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a function that sets up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB, integrates with Next.js for server-side rendering, and sets up basic route handling. It prepares the Next.js application, configures middleware, and starts the server on a specified port.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret for session encryption)\n\nOutput: Returns a Promise that resolves to the configured Express server instance when the Next.js app is prepared and the server is listening on the specified port.",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  return app.prepare().then(async () => {\n    const server = express();\n\n    server.use(express.json());\n\n    const sessionOptions = {\n      name: process.env.SESSION_NAME,\n      secret: process.env.SESSION_SECRET,\n      store: mongoSessionStore.create({\n        mongoUrl: MONGO_URL,\n        ttl: 14 * 24 * 60 * 60,\n      }),\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        httpOnly: true,\n        maxAge: 14 * 24 * 60 * 60 * 1000,\n        domain: 'localhost',\n      },\n    };\n\n    const sessionMiddleware = session(sessionOptions);\n    server.use(sessionMiddleware);\n\n    server.get('*', (req, res) => {\n      const url = URL_MAP[req.path];\n      if (url) {\n        app.render(req, res, url);\n      } else {\n        handle(req, res);\n      }\n    });\n\n    server.listen(port, (err) => {\n      if (err) throw err;\n      console.log(`> Ready on ${ROOT_URL}`);\n    });\n\n    return server;\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "import express from 'express';\nimport next from 'next';\nimport mongoose from 'mongoose';\nimport session from 'express-session';\nconst MongoDBStore = require('connect-mongodb-session')(session);\n\nconst setupServer = async () => {\n  const port = process.env.PORT || 8000;\n  const mongoUrl = process.env.MONGO_URL_TEST;\n  const sessionName = process.env.SESSION_NAME;\n  const sessionSecret = process.env.SESSION_SECRET;\n\n  if (!mongoUrl) {\n    throw new Error('MONGO_URL_TEST is required');\n  }\n\n  await mongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\n\n  const store = new MongoDBStore({\n    uri: mongoUrl,\n    collection: 'sessions'\n  });\n\n  const app = express();\n\n  app.use(\n    session({\n      name: sessionName,\n      secret: sessionSecret,\n      resave: false,\n      saveUninitialized: false,\n      store: store,\n      cookie: {\n        maxAge: 1000 * 60 * 60 * 24 * 7\n      }\n    })\n  );\n\n  const nextApp = next({ dev: process.env.NODE_ENV !== 'production' });\n  await nextApp.prepare();\n\n  app.get('/api/test', (req, res) => {\n    res.json({ message: 'Test route' });\n  });\n\n  app.use((req, res, next) => {\n    next();\n  });\n\n  app.use(nextApp.getRequestHandler());\n\n  const server = app.listen(port);\n  await new Promise((resolve) => {\n    server.on('listening', resolve);\n  });\n\n  return server;\n};\n\nexport default setupServer;"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      isgd: 'is.gd',\n      googl: 'goo.gl',\n      budurl: 'budurl.com',\n      snipurl: 'snipurl.com'\n    };\n    this.timeout = 5000;\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (depth > 10) {\n      return callback(new Error('Max depth exceeded'));\n    }\n    if (seen[url]) {\n      return callback(new Error('Loop detected'));\n    }\n    seen[url] = true;\n\n    const service = this.findService(url);\n    if (service) {\n      this[service](args, callback);\n    } else {\n      this.generic(args, callback);\n    }\n  }\n\n  findService(url) {\n    for (const service in this.map) {\n      if (url.includes(this.map[service])) {\n        return service;\n      }\n    }\n    return null;\n  }\n\n  isgd(args, callback) {\n    const { url } = args;\n    const shortUrl = url.split('is.gd/')[1] || url.split('is.gd/')[0].split('?')[0];\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    fetch(`https://is.gd/api.php?shorturl=${encodeURIComponent(shortUrl)}`, {\n      method: 'GET',\n      signal: controller.signal\n    })\n    .then(response => response.text())\n    .then(data => {\n      clearTimeout(timeoutId);\n      const expandedUrl = data.trim();\n      if (expandedUrl) {\n        args.url = expandedUrl;\n        args.depth += 1;\n        this.expand(args, callback);\n      } else {\n        callback(new Error('Failed to expand URL'));\n      }\n    })\n    .catch(err => {\n      clearTimeout(timeoutId);\n      callback(err);\n    });\n  }\n\n  googl(args, callback) {\n    const { url } = args;\n    const shortUrl = url.split('goo.gl/')[1] || url.split('goo.gl/')[0].split('?')[0];\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    fetch(`https://www.googleapis.com/urlshortener/v1/expand?shortUrl=${encodeURIComponent(shortUrl)}`, {\n      method: 'GET',\n      signal: controller.signal\n    })\n    .then(response => response.json())\n    .then(data => {\n      clearTimeout(timeoutId);\n      const expandedUrl = data.longUrl;\n      if (expandedUrl) {\n        args.url = expandedUrl;\n        args.depth += 1;\n        this.expand(args, callback);\n      } else {\n        callback(new Error('Failed to expand URL'));\n      }\n    })\n    .catch(err => {\n      clearTimeout(timeoutId);\n      callback(err);\n    });\n  }\n\n  budurl(args, callback) {\n    const { url } = args;\n    const shortUrl = url.split('budurl.com/')[1] || url.split('budurl.com/')[0].split('?')[0];\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    fetch(`https://budurl.com/api/expand?short=${encodeURIComponent(shortUrl)}`, {\n      method: 'GET',\n      signal: controller.signal\n    })\n    .then(response => response.text())\n    .then(data => {\n      clearTimeout(timeoutId);\n      const expandedUrl = data.trim();\n      if (expandedUrl) {\n        args.url = expandedUrl;\n        args.depth += 1;\n        this.expand(args, callback);\n      } else {\n        callback(new Error('Failed to expand URL'));\n      }\n    })\n    .catch(err => {\n      clearTimeout(timeoutId);\n      callback(err);\n    });\n  }\n\n  snipurl(args, callback) {\n    const { url } = args;\n    const shortUrl = url.split('snipurl.com/')[1] || url.split('snipurl.com/')[0].split('?')[0];\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    fetch(`https://snipurl.com/api/expand?short=${encodeURIComponent(shortUrl)}`, {\n      method: 'GET',\n      signal: controller.signal\n    })\n    .then(response => response.text())\n    .then(data => {\n      clearTimeout(timeoutId);\n      const expandedUrl = data.trim();\n      if (expandedUrl) {\n        args.url = expandedUrl;\n        args.depth += 1;\n        this.expand(args, callback);\n      } else {\n        callback(new Error('Failed to expand URL'));\n      }\n    })\n    .catch(err => {\n      clearTimeout(timeoutId);\n      callback(err);\n    });\n  }\n\n  generic(args, callback) {\n    const { url, depth, seen } = args;\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n    fetch(url, {\n      method: 'HEAD',\n      redirect: 'follow',\n      signal: controller.signal\n    })\n    .then(response => {\n      clearTimeout(timeoutId);\n      const finalUrl = response.url;\n      args.url = finalUrl;\n      args.depth += 1;\n      this.expand(args, callback);\n    })\n    .catch(err => {\n      clearTimeout(timeoutId);\n      callback(err);\n    });\n  }\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function to set up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB as the session store. It integrates Next.js for server-side rendering and sets up a catch-all route handler. The server listens on a specified port and connects to MongoDB using environment variables for configuration.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that:\n- Listens on the specified port\n- Outputs the server URL to console when ready\n- Maintains persistent connections to MongoDB for session storage)",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  mongoose.connect(MONGO_URL);\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  const server = express();\n\n  const sessionOptions = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: mongoSessionStore.create({\n      mongoUrl: MONGO_URL,\n      ttl: 14 * 24 * 60 * 60,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      maxAge: 14 * 24 * 60 * 60 * 1000,\n      domain: 'localhost',\n    },\n  };\n\n  const sessionMiddleware = session(sessionOptions);\n  server.use(sessionMiddleware);\n\n  server.get('*', (req, res) => handle(req, res));\n\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on ${ROOT_URL}`);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst session = require('express-session');\nconst MongoDBStore = require('connect-mongo')(session);\nconst next = require('next');\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\nconst port = process.env.PORT || 8000;\n\nconst mongoStore = new MongoDBStore({\n  mongoUrl: process.env.MONGO_URL_TEST,\n  collectionName: 'sessions'\n});\n\nconst server = express();\n\nserver.use(\n  session({\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    store: mongoStore,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      sameSite: 'lax'\n    }\n  })\n);\n\nserver.all('*', (req, res) => {\n  return handle(req, res);\n});\n\napp.prepare().then(() => {\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`Server ready at http://localhost:${port}`);\n  });\n}).catch((err) => {\n  console.error('Error preparing Next.js app:', err);\n  process.exit(1);\n});"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server using the Express framework in JavaScript, with middleware configurations for request processing and static file serving.\n\nFunction Description: The function `createServer` initializes an Express application, configures various middleware for logging, request parsing, and static file serving, and starts an HTTP server listening on a specified port. It also includes environment-specific error handling for development mode.\n\nInput: None (The function does not take any parameters; it uses environment variables like `process.env.PORT` for configuration.)\n\nOutput: None (The function does not return any value; it starts an HTTP server that listens on the specified port and logs a message upon successful startup.)",
    "Canonical_solution": "function createServer() {\n    var express = require('express');\n    var http = require('http');\n    var path = require('path');\n\n    var app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded());\n    app.use(express.methodOverride());\n    app.use(express.static(path.join(__dirname, '/public')));\n    app.use(express.static(path.join(__dirname, '/tests')));\n\n    if ('development' == app.get('env')) {\n        app.use(express.errorHandler());\n    }\n\n    http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express server listening on port ' + app.get('port'));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst morgan = require('morgan');\nconst path = require('path');\n\nfunction createServer() {\n  const app = express();\n  const env = process.env.NODE_ENV || 'development';\n  const port = process.env.PORT || 3000;\n\n  app.use(morgan(env === 'development' ? 'dev' : 'combined'));\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  app.use(express.static(path.join(__dirname, 'public')));\n\n  const server = app.listen(port, () => {\n    console.log(`Server is running on port ${port}`);\n  });\n\n  server.on('error', (err) => {\n    console.error('Server error:', err.message);\n    if (env === 'development') {\n      console.error(err.stack);\n    }\n    process.exit(1);\n  });\n}\n\nmodule.exports = createServer;"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a function that sets up an Express server with middleware configuration, route handling, and server initialization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with essential middleware (CORS, static file serving, JSON body parsing), configures route handlers, and starts listening on a specified port. It handles both API routes and serves static HTML files.\n\nInput: None (The function uses imported modules and configuration from './src/config' and './src/routes')\n\nOutput: None (The function's side effect is starting an HTTP server that listens on the configured port)",
    "Canonical_solution": "function setupExpressServer() {\n    const bodyParser = require('body-parser');\n    const express = require('express');\n    const path = require('path');\n    const cors = require('cors');\n    const config = require('./src/config');\n    const routes = require('./src/routes');\n\n    const app = express();\n\n    app.enable('trust proxy');\n    app.use(cors());\n    app.use(express.static(path.join(__dirname, 'www')));\n    app.use(bodyParser.json());\n\n    app.get('/v2', (req, res) => res.sendFile(path.join(__dirname, 'www/index.html')));\n    app.use(routes);\n\n    app.listen(config.PORT, err => {\n        if (err) console.error(err);\n        console.log('Server started on ' + config.PORT);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function setupExpressServer() {\n  const express = require('express');\n  const cors = require('cors');\n  const path = require('path');\n  const app = express();\n  const { PORT, PUBLIC_DIR } = require('./src/config');\n  const routes = require('./src/routes');\n\n  app.use(cors());\n  app.use(express.static(path.join(__dirname, PUBLIC_DIR)));\n  app.use(express.json());\n\n  app.use('/api', routes);\n\n  app.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n  });\n}"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a function that sets up a proxy server using Express and http-proxy-middleware to forward requests to a target API while modifying request and response headers.\n\nFunction Description: The function `createProxyServer` initializes an Express application that acts as a proxy server. It configures middleware to forward all incoming requests to a specified target API (https://api.openai.com in this case), removes certain headers from outgoing requests, and adds CORS headers to responses. The server listens on port 9000 by default.\n\nInput: None (The function takes no parameters as all configurations are hardcoded)\n\nOutput: None (The function doesn't return anything but starts a server process that continues running)",
    "Canonical_solution": "function createProxyServer() {\n    const express = require('express');\n    const { createProxyMiddleware } = require('http-proxy-middleware');\n    const app = express();\n    const port = 9000;\n\n    app.use('/', createProxyMiddleware({\n        target: 'https://api.openai.com',\n        changeOrigin: true,\n        onProxyReq: (proxyReq, req, res) => {\n            proxyReq.removeHeader('x-forwarded-for');\n            proxyReq.removeHeader('x-real-ip');\n        },\n        onProxyRes: function (proxyRes, req, res) {\n            proxyRes.headers['Access-Control-Allow-Origin'] = '*';\n        }\n    }));\n\n    app.listen(port, () => {\n        console.log(`Example app listening at http://localhost:${port}`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function createProxyServer() {\n  const express = require('express');\n  const { createProxyMiddleware } = require('http-proxy-middleware');\n\n  const app = express();\n\n  const proxy = createProxyMiddleware({\n    target: 'https://api.openai.com',\n    changeOrigin: true,\n    onProxyReq: (proxyReq, req, res) => {\n      delete proxyReq.headers['host'];\n      delete proxyReq.headers['connection'];\n    },\n    onProxyRes: (proxyRes, req, res) => {\n      proxyRes.headers['Access-Control-Allow-Origin'] = '*';\n    }\n  });\n\n  app.use(proxy);\n\n  app.listen(9000, () => {\n    console.log('Proxy server is running on port 9000');\n  });\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TSClient {\n  constructor(query, cb) {\n    const crypto = require('crypto');\n    this.id = crypto.createHash('md5').update(query).digest('hex');\n    const fs = require('fs');\n    const path = `./${this.id}.json`;\n    let state;\n    try {\n      const data = fs.readFileSync(path, 'utf8');\n      state = JSON.parse(data);\n    } catch (err) {\n      state = { since_id: null, rcount: 0 };\n    }\n    this.search = {\n      q: query,\n      since_id: state.since_id,\n      rcount: state.rcount\n    };\n    cb(this);\n  }\n\n  syncSearch(callback) {\n    this._walker({\n      ts: this,\n      search: this.search,\n      cb: callback,\n      page: 1,\n      results: [],\n      new_since_id: null\n    });\n  }\n\n  set(search) {\n    const fs = require('fs');\n    const path = `./${this.id}.json`;\n    fs.writeFileSync(path, JSON.stringify(search), 'utf8');\n  }\n\n  _walker(s) {\n    const results = this._getTweets(s.search);\n    s.results = s.results.concat(results);\n    s.new_since_id = results[results.length - 1]?.id_str;\n    if (results.length < s.search.rcount) {\n      s.page++;\n      this._walker(s);\n    } else {\n      s.cb(s.results);\n    }\n  }\n\n  _getTweets(search) {\n    // Placeholder for actual API call\n    return Array.from({ length: Math.min(10, search.rcount) }, (_, i) => ({\n      id_str: `tweet${search.rcount - i}`,\n      text: `Tweet ${search.rcount - i}`\n    }));\n  }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\n\nfunction createExpressServer() {\n  const app = express();\n  const port = process.env.PORT || 3000;\n\n  app.use(express.static(path.resolve(__dirname, '..')));\n\n  const routes = require('./routes');\n  app.use(routes);\n\n  const server = app.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n  });\n\n  return server;\n}\n\nmodule.exports = createExpressServer;"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a function that uploads a file to a server using HTTP POST request with streaming capability to handle large files efficiently.\n\nFunction Description: The function uploads a specified file to a server using Node.js's filesystem and HTTP modules. It streams the file content directly to the HTTP request using pipe(), avoiding loading the entire file into memory. The function sets appropriate headers including content-type (multipart/form-data) and content-length.\n\nInput:\n- FIXTURE: [String] - Path to the file to be uploaded\n- TEST_PORT: [Number] - Port number of the server to upload to\n- BOUNDARY: [String] - Boundary string for multipart form data\n\nOutput: None (The function makes an HTTP request but doesn't return any value. The actual upload result would be handled by the server's response, which isn't captured in this function.)",
    "Canonical_solution": "function uploadFile() {\n  const fs = require('fs');\n  const http = require('http');\n  \n  const stat = fs.statSync(FIXTURE);\n  const request = http.request({\n    port: TEST_PORT,\n    path: '/',\n    method: 'POST',\n    headers: {\n      'content-type': `multipart/form-data; boundary=${BOUNDARY}`,\n      'content-length': stat.size,\n    },\n  });\n  \n  fs.createReadStream(FIXTURE).pipe(request);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 99,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction uploadFile(fixture, testPort, boundary) {\n  const fileStats = fs.statSync(fixture);\n  const fileSize = fileStats.size;\n\n  const options = {\n    hostname: 'localhost',\n    port: testPort,\n    method: 'POST',\n    headers: {\n      'Content-Type': `multipart/form-data; boundary=${boundary}`,\n      'Content-Length': fileSize\n    }\n  };\n\n  const req = http.request(options, (res) => {\n    console.log(`Status code: ${res.statusCode}`);\n  });\n\n  req.on('error', (e) => {\n    console.error(`Problem with request: ${e.message}`);\n  });\n\n  const fileStream = fs.createReadStream(fixture);\n  req.write(`--${boundary}\\r\\n`);\n  req.write(`Content-Disposition: form-data; name=\"file\"; filename=\"${path.basename(fixture)}\"\\r\\n`);\n  req.write(`Content-Type: application/octet-stream\\r\\n\\r\\n`);\n  fileStream.pipe(req);\n  fileStream.on('end', () => {\n    req.write(`\\r\\n--${boundary}--\\r\\n`);\n    req.end();\n  });\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Implement a function to upload a file to a server using HTTP POST request with streaming capability to handle large files efficiently.\n\nFunction Description: The function should create a readable stream from a specified file and pipe it directly to an HTTP POST request. This approach avoids loading the entire file into memory, making it suitable for large files. The function should set appropriate headers including content type (multipart/form-data) and content length.\n\nInput:\n- FIXTURE: [String] - Path to the file to be uploaded\n- TEST_PORT: [Number] - Port number of the server to upload to\n- BOUNDARY: [String] - Boundary string for multipart/form-data content type\n\nOutput: None (The function streams the file directly to the HTTP request without returning any value)",
    "Canonical_solution": "function uploadFile() {\n  var fs = require('fs'),\n      http = require('http'),\n      stat = fs.statSync(FIXTURE),\n      request = http.request({\n        port: TEST_PORT,\n        path: '/',\n        method: 'POST',\n        headers: {\n          'content-type': 'multipart/form-data; boundary='+BOUNDARY,\n          'content-length': stat.size,\n        },\n      });\n  fs.createReadStream(FIXTURE).pipe(request);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 99,
    "wrong_result": "const fs = require('fs');\nconst http = require('http');\n\nfunction uploadFile(fixture, testPort, boundary) {\n  const filePath = fixture;\n  fs.stat(filePath, (err, stats) => {\n    if (err) throw err;\n    const fileSize = stats.size;\n    const req = http.request({\n      hostname: 'localhost',\n      port: testPort,\n      method: 'POST',\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${boundary}`,\n        'Content-Length': fileSize\n      }\n    }, (res) => {\n      res.on('data', (chunk) => {\n        // Handle response\n      });\n    });\n\n    const fileStream = fs.createReadStream(filePath);\n    fileStream.pipe(req);\n  });\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "function makeHttpRequest() {\n  const options = {\n    url: 'https://example.com/api/endpoint',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer YOUR_TOKEN'\n    },\n    body: JSON.stringify({\n      key1: 'value1',\n      key2: 'value2'\n    })\n  };\n\n  request.post(options, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n    } else {\n      console.log('Response Body:', body);\n    }\n  });\n}"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. For each connection, it creates a unique file to store the raw HTTP request data. The server handles regular requests by responding with connection information and provides an HTML upload form for the root path. The server tracks active connections and logs connection/disconnection events.\n\nInput: None (The function takes no parameters but uses environment variable `PORT` for configuration)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server that writes to files)\n\nNote: The function maintains internal state including:\n- A connection counter\n- An active HTTP server instance\n- File streams for each connection\n- Logging of connection events to console",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n  const port = process.env.PORT || 3000;\n  const server = http.createServer();\n\n  let connectionCounter = 0;\n  const activeConnections = new Map();\n\n  server.on('connection', (socket) => {\n    connectionCounter++;\n    const filename = `request-${connectionCounter}.txt`;\n    const filePath = path.join(__dirname, filename);\n    const fileStream = fs.createWriteStream(filePath);\n\n    socket.connectionId = connectionCounter;\n    activeConnections.set(connectionCounter, fileStream);\n\n    console.log(`Connection established: ${filename}`);\n\n    socket.on('close', () => {\n      console.log(`Connection closed: ${filename}`);\n      activeConnections.delete(connectionCounter);\n      fileStream.close();\n    });\n  });\n\n  server.on('request', (req, res) => {\n    const connectionId = req.socket.connectionId;\n    const fileStream = activeConnections.get(connectionId);\n\n    if (fileStream) {\n      req.on('data', (chunk) => {\n        fileStream.write(chunk);\n      });\n      req.on('end', () => {\n        fileStream.end();\n      });\n    }\n\n    if (req.url === '/') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n        <html>\n          <body>\n            <h1>Upload Form</h1>\n            <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n              <input type=\"file\" name=\"file\">\n              <input type=\"submit\" value=\"Upload\">\n            </form>\n          </body>\n        </html>\n      `);\n    } else {\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end(`Connection ID: ${connectionId}\\n`);\n    }\n  });\n\n  server.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n  });\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to generate PDFs from HTML templates and serve them as streams.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens on port 8080. It serves PDF files generated from an HTML template, replacing placeholders with actual image paths, and streams the PDF output to the client. The server handles incoming requests, checks for favicon requests, and responds with either a 404 error or the generated PDF.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 8080 and logs the server address to the console.)",
    "Canonical_solution": "function createServer() {\n    const fs = require('fs');\n    const http = require('http');\n    const pdf = require('../../');\n    const tmpl = fs.readFileSync(require.resolve('../businesscard/businesscard.html'), 'utf8');\n\n    const server = http.createServer(function (req, res) {\n        if (req.url === '/favicon.ico') return res.end('404');\n        const html = tmpl.replace('{{image}}', `file://${require.resolve('../businesscard/image.png')}`);\n        pdf.create(html, {width: '50mm', height: '90mm'}).toStream((err, stream) => {\n            if (err) return res.end(err.stack);\n            res.setHeader('Content-type', 'application/pdf');\n            stream.pipe(res);\n        });\n    });\n\n    server.listen(8080, function (err) {\n        if (err) throw err;\n        console.log('Listening on http://localhost:%s', server.address().port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');const puppeteer = require('puppeteer');function createServer() {const template = `<!DOCTYPE html><html><body><h1>Hello</h1><img src=\"{{image1}}\" alt=\"Image 1\"><img src=\"{{image2}}\" alt=\"Image 2\"></body></html>`;function generateHtmlWithImages() {const imageUrls = ['https://example.com/image1.jpg','https://example.com/image2.jpg'];let html = template;imageUrls.forEach((url, index) => {html = html.replace(`{{image${index + 1}}}`, url);});return html;}http.createServer(async (req, res) => {if (req.url === '/favicon.ico') {res.writeHead(404);res.end();return;}const htmlContent = generateHtmlWithImages();const browser = await puppeteer.launch();const page = await browser.newPage();await page.setContent(htmlContent);const pdfBuffer = await page.pdf({ format: 'A4' });res.setHeader('Content-Type', 'application/pdf');res.setHeader('Content-Disposition', 'attachment; filename=\"document.pdf\"');res.end(pdfBuffer);await browser.close();}).listen(8080, () => {console.log('Server running at http://localhost:8080/');});}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a JavaScript class that implements a server capable of handling HTTP requests and piping data to responses, with support for live reload functionality and error handling.\n\nClass Description: The `Server` class is designed to create an HTTP server that can handle incoming requests, pipe data to responses (particularly for live reload functionality), and manage server lifecycle events. It supports both standalone operation and integration with existing Express-like applications.\n\nAttributes:\n- options: [Object] - Configuration options for the server including livereload file path and port number.\n- clients: [Object] - Storage for connected clients (used for live reload functionality).\n- server: [http.Server] - The underlying HTTP server instance.\n- app: [Object] - Optional Express-like application instance for integration.\n- port: [Number] - The port number the server is listening on.\n\nMethods:\n- constructor(options) -> [Server] - Initializes the server with given options, setting defaults for livereload path and port.\n- configure(app) -> [Server] - Configures the server to work with an existing Express-like application.\n- handler(req, res, next) -> [Server] - Handles incoming HTTP requests, supporting both middleware and direct handling modes.\n- livereload(req, res) -> [void] - Pipes the livereload JavaScript file to the response.\n- listen(port, fn) -> [void] - Starts the server listening on the specified port.\n- close(req, res) -> [void] - Closes the server and optionally ends a response.\n- error(e) -> [void] - Handles and logs server errors.\n\nNote: The class demonstrates inter-process communication through HTTP and file system operations, particularly in the `livereload` method where it pipes file contents directly to HTTP responses.",
    "Canonical_solution": "var fs = require('fs');\nvar http = require('http');\n\nclass Server {\n  constructor(options) {\n    this.options = options || {};\n    this.options.livereload = this.options.livereload || path.join(__dirname, 'public/livereload.js');\n    this.options.port = parseInt(this.options.port || 35729, 10);\n    this.clients = {};\n    this.configure(this.options.app);\n  }\n\n  configure(app) {\n    if(!app) {\n      this.server = http.createServer(this.handler.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    var self = this;\n    this.app = app;\n\n    this.app.listen = function(port, done) {\n      done = done || function() {};\n      var srv = self.server = http.createServer(app);\n      srv.on('error', self.error.bind(self));\n      srv.on('close', self.close.bind(self));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler(req, res, next) {\n    var middleware = typeof next === 'function';\n    if(middleware) {\n      this.handle(req, res, next);\n      return this;\n    }\n\n    req\n      .on('end', this.handle.bind(this, req, res))\n      .on('data', function(chunk) {\n        req.data = req.data || '';\n        req.data += chunk;\n      });\n\n    return this;\n  }\n\n  livereload(req, res) {\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server.listen(port, fn);\n  }\n\n  close(req, res) {\n    if(res) res.end();\n    if(this.server._handle) this.server.close();\n  }\n\n  error(e) {\n    console.error('Error:', e.message);\n    console.error(e.stack);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\n\nclass Server {\n  constructor(options = {}) {\n    this.options = {\n      livereload: 'livereload.js',\n      port: 35729,\n      ...options\n    };\n    this.clients = {};\n    this.server = http.createServer((req, res, next) => this.handler(req, res, next));\n    this.app = null;\n    this.port = this.options.port;\n  }\n\n  configure(app) {\n    this.app = app;\n    return this;\n  }\n\n  handler(req, res, next) {\n    if (this.app) {\n      this.app(req, res, next);\n    } else {\n      if (req.url === this.options.livereload) {\n        this.livereload(req, res);\n      } else {\n        res.writeHead(404);\n        res.end('Not Found');\n      }\n    }\n  }\n\n  livereload(req, res) {\n    const filePath = this.options.livereload;\n    fs.readFile(filePath, (err, data) => {\n      if (err) {\n        res.writeHead(500);\n        res.end('Error loading livereload file');\n      } else {\n        res.writeHead(200, { 'Content-Type': 'application/javascript' });\n        res.end(data);\n      }\n    });\n  }\n\n  listen(port, fn) {\n    this.server.on('error', (err) => {\n      this.error(err);\n    });\n    this.server.listen(port, () => {\n      this.port = port;\n      if (fn) fn();\n    });\n  }\n\n  close(req, res) {\n    this.server.close(() => {\n      if (res) res.end();\n    });\n  }\n\n  error(e) {\n    console.error('Server error:', e);\n    this.close();\n  }\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. Each connection's request data is piped to a unique file. The server handles different request types, including file uploads via a simple HTML form, and returns appropriate responses. The server also logs connection activities.\n\nInput: None (The function uses environment variables or defaults for configuration, specifically the `PORT` environment variable or defaults to 8080.)\n\nOutput: None (The function creates and starts an HTTP server that runs indefinitely, logging activities to the console and writing request data to files.)\n\nNote: The function does not explicitly return any value but has side effects of creating a running server and writing files to the filesystem.",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n  const port = process.env.PORT || 8080;\n  const server = http.createServer();\n\n  const connectionFiles = new Map();\n\n  server.on('connection', (conn) => {\n    const uniqueId = Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    const filePath = path.join(__dirname, `requests-${uniqueId}.txt`);\n    const file = fs.createWriteStream(filePath);\n    connectionFiles.set(conn, file);\n    console.log(`New connection established, writing to ${filePath}`);\n    \n    conn.on('close', () => {\n      const file = connectionFiles.get(conn);\n      if (file) {\n        file.end();\n        console.log(`Connection closed, file ${filePath} saved`);\n        connectionFiles.delete(conn);\n      }\n    });\n  });\n\n  server.on('request', (req, res) => {\n    const conn = req.connection;\n    const file = connectionFiles.get(conn);\n    if (!file) return res.end('No file associated with this connection');\n\n    req.on('data', (chunk) => {\n      file.write(chunk);\n    });\n\n    req.on('end', () => {\n      file.end();\n    });\n\n    if (req.method === 'GET' && req.url === '/') {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n        <html>\n          <body>\n            <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n              <input type=\"file\" name=\"file\">\n              <input type=\"submit\">\n            </form>\n          </body>\n        </html>\n      `);\n    } else if (req.method === 'POST' && req.url === '/upload') {\n      let body = '';\n      req.on('data', (chunk) => {\n        body += chunk;\n      });\n      req.on('end', () => {\n        const formData = new URLSearchParams(body);\n        const fileName = formData.get('file');\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end(`File uploaded: ${fileName}`);\n      });\n    } else {\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('Not found');\n    }\n  });\n\n  server.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n  });\n}\n\ncreateServer();"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Retrieve and process TV channel information from multiple providers via HTTP requests, then extract and deduplicate channel details.\n\nFunction Description: The function makes HTTP POST requests to a TV guide service for each provider, extracts channel information from the HTML response, and returns a deduplicated list of channels. It uses axios for HTTP requests, cheerio for HTML parsing, and lodash for deduplication.\n\nInput: None (The function uses hardcoded providers array and automatically determines the current date)\n\nOutput: Array of objects containing unique TV channel information with the following structure:\n[\n    {\n        lang: string,       // Language code ('it' for Italian)\n        name: string,       // Channel name\n        site_id: string     // Unique identifier combining channel number and slug\n    },\n    ...\n]",
    "Canonical_solution": "function async channels() {\n    const axios = require('axios')\n    const _ = require('lodash')\n\n    const providers = ['-1', '-2', '-3']\n\n    const channels = []\n    for (let provider of providers) {\n        const data = await axios\n            .post('https://www.guida.tv/guide/schedule', null, {\n                params: {\n                    provider,\n                    region: 'Italy',\n                    TVperiod: 'Night',\n                    date: dayjs().format('YYYY-MM-DD'),\n                    st: 0,\n                    u_time: 1429,\n                    is_mobile: 1\n                }\n            })\n            .then(r => r.data)\n            .catch(console.log)\n\n        const $ = cheerio.load(data)\n        $('.channelname').each((i, el) => {\n            const name = $(el).find('center > a:eq(1)').text()\n            const url = $(el).find('center > a:eq(1)').attr('href')\n            const [, number, slug] = url.match(/\\/(\\d+)\\/(.*)\\.html$/)\n\n            channels.push({\n                lang: 'it',\n                name,\n                site_id: `${number}/${slug}`\n            })\n        })\n    }\n\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\nimport cheerio from 'cheerio';\nimport _ from 'lodash';\n\nasync function getTVChannels() {\n  const currentDate = new Date().toISOString().split('T')[0];\n  const providers = [\n    { url: 'https://provider1.com/api', params: { date: currentDate } },\n    { url: 'https://provider2.com/api', params: { date: currentDate } },\n  ];\n  const allChannels = [];\n\n  for (const provider of providers) {\n    try {\n      const response = await axios.post(provider.url, provider.params);\n      const html = response.data;\n      const $ = cheerio.load(html);\n      $('.channel-item').each((index, element) => {\n        const name = $(element).find('.name').text().trim();\n        const lang = $(element).attr('data-lang');\n        const siteId = $(element).attr('data-site-id');\n        allChannels.push({ lang, name, siteId });\n      });\n    } catch (error) {\n      console.error(`Error fetching from ${provider.url}:`, error);\n    }\n  }\n\n  return _.uniqBy(allChannels, 'siteId');\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve a ReDoc documentation interface, including handling requests for the ReDoc JavaScript file and rendering the documentation page with the provided specification.\n\nFunction Description: The function creates an HTTP server that serves two main routes: (1) '/redoc.standalone.js' which streams the ReDoc JavaScript file to the client, and (2) '/' which renders a complete HTML page with the ReDoc interface hydrated with the provided OpenAPI specification. The server handles other routes with a 404 response.\n\nInput:\n- port: [number] - The port number on which the HTTP server should listen\n- filePath: [string] - The file path to the 'redoc.standalone.js' file to be served\n- specPath: [string] - The file path to the OpenAPI specification file (YAML format)\n\nOutput: None (The function starts an HTTP server that continues running until manually stopped)\n\nNote: The function assumes the availability of certain external dependencies (yaml, fs, http, React, ServerStyleSheet, Redoc) which should be imported/required in the actual implementation. The function also uses async/await for handling asynchronous operations related to the Redoc store creation.",
    "Canonical_solution": "const http = require('http');\nconst fs = require('fs');\n\nfunction createServer(port, filePath, specPath) {\n    const server = http.createServer(async (request, response) => {\n        if (request.url === '/redoc.standalone.js') {\n            fs.createReadStream(filePath, 'utf8').pipe(response);\n        } else if (request.url === '/') {\n            const spec = yaml.load(readFileSync(resolve(__dirname, specPath), 'utf-8'));\n            const store = await createStore(spec, 'path/to/spec.yaml');\n\n            const sheet = new ServerStyleSheet();\n            const html = renderToString(sheet.collectStyles(React.createElement(Redoc, { store })));\n            const css = sheet.getStyleTags();\n\n            const res = `<html>\n            <head>\n                <meta charset=\"utf8\" />\n                <title>ReDoc</title>\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                <style>\n                    body {\n                        padding: 0;\n                        margin: 0;\n                    }\n                </style>\n                <script src=\"redoc.standalone.js\"></script>\n                <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n                ${css}\n            </head>\n            <body>\n            <script>\n                document.addEventListener('DOMContentLoaded', function() {\n                    const state = ${JSON.stringify(await store.toJS())};\n                    Redoc.hydrate(state, document.getElementById('redoc'));\n                });\n                </script>\n                <div id=\"redoc\">${html}</div>\n            </body>\n            </html>`;\n            response.writeHead(200, { 'Content-Length': res.length });\n            response.write(res);\n            response.end();\n        } else {\n            response.writeHead(404);\n            response.write('Not found');\n            response.end();\n        }\n    });\n\n    server.listen(port, () => console.log(`Server started: http://127.0.0.1:${port}`));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "import http from 'http';\nimport fs from 'fs';\nimport yaml from 'yaml';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport Redoc from 'redoc';\n\nfunction createServer(port, filePath, specPath) {\n  const server = http.createServer(async (req, res) => {\n    if (req.url === '/redoc.standalone.js') {\n      const fileStream = fs.createReadStream(filePath);\n      fileStream.pipe(res);\n      return;\n    }\n\n    if (req.url === '/') {\n      try {\n        const spec = await yaml.parse(fs.readFileSync(specPath, 'utf8'));\n        const html = ReactDOMServer.renderToString(\n          React.createElement(Redoc, { spec })\n        );\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.end(html);\n      } catch (err) {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('Internal Server Error');\n      }\n      return;\n    }\n\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('404 Not Found');\n  });\n\n  server.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}/`);\n  });\n}\n\ncreateServer(port, filePath, specPath);"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement an OAuth server class that handles GitHub OAuth authentication flow, including starting a server to receive the authorization code and exchanging it for an access token.\n\nClass Description: The OAuthServer class represents a server that facilitates GitHub OAuth authentication. It creates an Express server to handle the OAuth callback, exchanges the authorization code for an access token using GitHub's API, and provides methods to start and stop the server.\n\nAttributes:\n- options: [Object] - Configuration object containing client credentials and server settings\n- prompt: [Object] - Reference to an external prompt object used to signal completion of authentication\n- app: [Object] - Express application instance for handling HTTP requests\n- server: [Object] - HTTP server instance created by Express\n- token: [String|null] - Stores the obtained OAuth access token\n\nMethods:\n- constructor(options) -> [OAuthServer] - Initializes the OAuth server with configuration options and sets up the Express route for handling OAuth callbacks\n- start() -> [Promise] - Starts the HTTP server on the configured port and returns a promise that resolves when the server is ready or rejects on error\n- stop() -> [void] - Stops the HTTP server and cleans up resources",
    "Canonical_solution": "const express = require('express');\nconst axios = require('axios');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = this.options.prompt;\n    this.app = express();\n    this.app.get('/', (req, res) => {\n      const code = req.query.code;\n      axios\n        .post(\n          `https://github.com/login/oauth/access_token?client_secret=${\n            this.options.client_secret\n          }&client_id=${this.options.client_id}&code=${code}`,\n          {},\n          {\n            headers: {\n              Accept: 'application/json'\n            }\n          }\n        )\n        .then(response => {\n          const accessToken = response.data.access_token;\n          this.token = accessToken;\n          res.send('Enquirer: Github OAuth Server is up');\n          this.prompt.submit();\n        })\n        .catch(e => console.log('axios error', e));\n    });\n    this.token = null;\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.options.port, err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    this.server.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "const express = require('express');\nconst https = require('https');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = options.prompt;\n    this.app = express();\n    this.server = null;\n    this.token = null;\n\n    this.app.get('/auth/callback', this.handleCallback.bind(this));\n  }\n\n  handleCallback(req, res) {\n    const code = req.query.code;\n    if (!code) {\n      return res.status(400).send('Missing code');\n    }\n\n    const data = new URLSearchParams();\n    data.append('client_id', this.options.clientID);\n    data.append('client_secret', this.options.clientSecret);\n    data.append('code', code);\n    data.append('redirect_uri', this.options.redirectUri);\n\n    const options = {\n      hostname: 'github.com',\n      port: 443,\n      path: '/login/oauth/access_token',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n\n    const self = this;\n    const reqHttp = https.request(options, (resHttp) => {\n      let body = '';\n      resHttp.on('data', (chunk) => {\n        body += chunk;\n      });\n      resHttp.on('end', () => {\n        const tokenMatch = body.match(/access_token=([^&]+)/);\n        if (tokenMatch) {\n          const token = tokenMatch[1];\n          self.token = token;\n          self.prompt.complete(token);\n          res.redirect('/');\n        } else {\n          self.prompt.complete(null);\n          res.redirect('/error');\n        }\n      });\n    });\n\n    reqHttp.on('error', (e) => {\n      console.error('Error:', e.message);\n      self.prompt.complete(null);\n      res.redirect('/error');\n    });\n\n    reqHttp.write(data.toString());\n    reqHttp.end();\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.options.port, () => {\n        resolve();\n      }).on('error', (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close();\n    }\n  }\n}\n\nmodule.exports = OAuthServer;"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nconst mimeTypes = {\n  '.html': 'text/html',\n  '.css': 'text/css',\n  '.js': 'application/javascript',\n  '.json': 'application/json',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.gif': 'image/gif',\n  '.txt': 'text/plain'\n};\n\nasync function createFileServer() {\n  const server = http.createServer(async (req, res) => {\n    try {\n      const url = req.url || '/';\n      let filePath = path.join(__dirname, 'static', url);\n      await fs.access(filePath, fs.constants.F_OK);\n      const ext = path.extname(filePath);\n      const mime = mimeTypes[ext] || 'application/octet-stream';\n      const data = await fs.readFile(filePath);\n      res.writeHead(200, { 'Content-Type': mime });\n      res.end(data);\n    } catch (err) {\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('404 Not Found');\n    }\n  });\n\n  server.listen(1338, () => {\n    console.log('Server running on port 1338');\n  });\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n  constructor(did, finger, token, oaid) {\n    this.did = did;\n    this.finger = finger;\n    this.token = token;\n    this.oaid = oaid;\n  }\n\n  async taskRequest(method, url, body = '') {\n    const signature = this.generateSignature(method, url, body);\n    const headers = {\n      'Authorization': signature,\n      'X-DID': this.did,\n      'X-FINGER': this.finger,\n      'X-TOKEN': this.token,\n      'X-OAID': this.oaid,\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const response = await fetch(url, {\n        method,\n        headers,\n        body: method === 'post' ? body : undefined\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n\n  generateSignature(method, url, body) {\n    // Example: Combine parameters and return a placeholder signature\n    return `signature_${method}_${url}_${body}`;\n  }\n}"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a TCP server in Node.js that serves Flash cross-domain policy files to clients, handling connections, errors, and policy file generation dynamically.\n\nClass Description: The Server class implements a TCP server that listens for Flash policy file requests and responds with an appropriate cross-domain policy XML. It handles server lifecycle events, client connections, and dynamic policy configuration.\n\nAttributes:\n- origins: [Array] - List of allowed domains and ports in \"domain:port\" format\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [net.Server] - The TCP server instance\n- server: [Object] - Optional fallback HTTP server\n- buffer: [Buffer] - Compiled policy file in binary format\n\nMethods:\n- constructor(options, origins) -> [Server] - Initializes the server with configuration options and allowed origins\n- listen(port, server, cb) -> [Server] - Starts listening on specified port, with optional fallback server and callback\n- responder(socket) -> [void] - Responds to client connections with policy file\n- compile() -> [Server] - Generates the policy file XML and converts it to buffer\n- add() -> [Server] - Adds one or more allowed origins to the policy\n- remove(origin) -> [Server] - Removes a specific origin from the policy\n- close() -> [Server] - Closes the server and cleans up resources",
    "Canonical_solution": "var net = require('net');\n\nclass Server {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => {\n        this.responder.call(this, socket);\n      });\n      this.responder.call(this, socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges. ' +\n          (\n            this.server\n            ? 'The Flash Policy File requests will only be served inline over the supplied HTTP server. Inline serving is slower than a dedicated server instance.'\n            : 'No fallback server supplied, we will be unable to answer Flash Policy File requests.'\n          )\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n      if (this.server && this.server['@'] && this.server.online) {\n        this.server.removeListener('connection', this.server['@']);\n      }\n      delete this.server?.online;\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (\n            data &&\n            data[0] === 60 &&\n            data.toString() === '<policy-file-request/>\\0' &&\n            socket &&\n            (socket.readyState === 'open' || socket.readyState === 'writeOnly')\n          ) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    if (this.port >= 0) {\n      this.socket.listen(this.port, () => {\n        this.socket.online = true;\n        callback?.call(this);\n      });\n    }\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = Buffer.from(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\n\nclass Server {\n  constructor(options, origins) {\n    this.origins = origins || [];\n    this.port = options?.port || 843;\n    this.log = options?.log || console.log;\n    this.socket = null;\n    this.server = options?.server;\n    this.buffer = null;\n  }\n\n  listen(port, server, cb) {\n    this.port = port || this.port;\n    this.server = server;\n    this.socket = net.createServer((socket) => {\n      this.responder(socket);\n    });\n    this.socket.listen(this.port, () => {\n      this.log(`Server listening on port ${this.port}`);\n      if (cb) cb();\n    });\n    return this;\n  }\n\n  responder(socket) {\n    if (!this.buffer) {\n      this.compile();\n    }\n    socket.write(this.buffer);\n    socket.end();\n  }\n\n  compile() {\n    let xml = '<cross-domain-policy>\\n';\n    xml += '  <site-control permitted-cross-domain-policies=\"master-only\"/>\\n';\n    if (this.origins.length === 0) {\n      xml += '  <allow-access-from domain=\"*\" to-ports=\"\"/>\\n';\n    } else {\n      for (const origin of this.origins) {\n        const [domain, port] = origin.split(':');\n        let toPorts = '';\n        if (port) {\n          toPorts = port;\n        }\n        xml += `  <allow-access-from domain=\"${domain}\" to-ports=\"${toPorts}\"/>\\n`;\n      }\n    }\n    xml += '</cross-domain-policy>';\n    this.buffer = Buffer.from(xml);\n  }\n\n  add(origin) {\n    if (Array.isArray(origin)) {\n      this.origins.push(...origin);\n    } else {\n      this.origins.push(origin);\n    }\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    this.origins = this.origins.filter(o => o !== origin);\n    this.compile();\n    return this;\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close();\n    }\n    this.socket = null;\n    this.buffer = null;\n    this.log('Server closed');\n  }\n}\n\nmodule.exports = Server;"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a TCP server class in JavaScript using Node.js's 'net' module to handle client connections, manage sockets, and provide event-driven communication.\n\nClass Description: The Socket class represents a TCP server that can bind to a specific port/host, manage client connections, handle socket errors, and emit events for various connection states. It extends EventEmitter for event handling capabilities.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- socks: [Array] - Array of connected client sockets\n- settings: [Object] - Configuration settings for the server\n- type: [String] - Indicates whether the instance is acting as a server or client\n\nMethods:\n- constructor() -> [void] - Initializes the socket instance with default settings\n- bind(port, host, fn) -> [Socket] - Binds the server to a specified port and host (supports both TCP and Unix sockets)\n- onconnect(sock) -> [void] - Handles new client connections\n- addSocket(sock) -> [void] - Adds a new socket to the connection pool and sets up message parsing\n- removeSocket(sock) -> [void] - Removes a socket from the connection pool\n- handleErrors(sock) -> [void] - Sets up error handling for a socket\n- closeServer(fn) -> [void] - Closes the server and all client connections",
    "Canonical_solution": "var Emitter = require('events').EventEmitter;\nvar net = require('net');\nvar debug = require('debug')('axon:sock');\n\nclass Socket {\n  constructor() {\n    this.server = null;\n    this.socks = [];\n    this.settings = {};\n    this.set('hwm', Infinity);\n    this.set('identity', String(process.pid));\n    this.set('retry timeout', 100);\n    this.set('retry max timeout', 5000);\n  }\n\n  bind(port, host, fn) {\n    var self = this;\n    if ('client' == this.type) throw new Error('cannot bind() after connect()');\n    if ('function' == typeof host) {\n      fn = host;\n      host = undefined;\n    }\n\n    var unixSocket = false;\n\n    if ('string' == typeof port) {\n      port = url.parse(port);\n\n      if ('unix:' == port.protocol) {\n        host = fn;\n        fn = undefined;\n        port = port.pathname;\n        unixSocket = true;\n      } else {\n        host = port.hostname || '0.0.0.0';\n        port = parseInt(port.port, 10);\n      }\n    } else {\n      host = host || '0.0.0.0';\n    }\n\n    this.type = 'server';\n\n    this.server = net.createServer(this.onconnect.bind(this));\n\n    debug('%s bind %s:%s', this.type, host, port);\n    this.server.on('listening', this.emit.bind(this, 'bind'));\n\n    if (unixSocket) {\n      this.server.on('error', function(e) {\n        if (e.code == 'EADDRINUSE') {\n          var clientSocket = new net.Socket();\n\n          clientSocket.on('error', function(e2) {\n            if (e2.code == 'ECONNREFUSED') {\n              fs.unlink(port);\n              self.server.listen(port, host, fn);\n            }\n          });\n\n          clientSocket.connect({path: port}, function() {\n            throw e;\n          });\n        }\n      });\n    }\n\n    this.server.listen(port, host, fn);\n    return this;\n  }\n\n  onconnect(sock) {\n    var self = this;\n    var addr = sock.remoteAddress + ':' + sock.remotePort;\n    debug('%s accept %s', self.type, addr);\n    this.addSocket(sock);\n    this.handleErrors(sock);\n    this.emit('connect', sock);\n    sock.on('close', function() {\n      debug('%s disconnect %s', self.type, addr);\n      self.emit('disconnect', sock);\n      self.removeSocket(sock);\n    });\n  }\n\n  addSocket(sock) {\n    var parser = new Parser;\n    var i = this.socks.push(sock) - 1;\n    debug('%s add socket %d', this.type, i);\n    sock.pipe(parser);\n    parser.on('data', this.onmessage(sock));\n  }\n\n  removeSocket(sock) {\n    var i = this.socks.indexOf(sock);\n    if (!~i) return;\n    debug('%s remove socket %d', this.type, i);\n    this.socks.splice(i, 1);\n  }\n\n  handleErrors(sock) {\n    var self = this;\n    sock.on('error', function(err) {\n      debug('%s error %s', self.type, err.code || err.message);\n      self.emit('socket error', err);\n      self.removeSocket(sock);\n      if (!~ignore.indexOf(err.code)) return self.emit('error', err);\n      debug('%s ignored %s', self.type, err.code);\n      self.emit('ignored error', err);\n    });\n  }\n\n  closeServer(fn) {\n    debug('%s closing server', this.type);\n    this.server.on('close', this.emit.bind(this, 'close'));\n    this.server.close();\n    fn && fn();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const { EventEmitter } = require('events');\nconst net = require('net');\n\nclass Socket extends EventEmitter {\n  constructor() {\n    super();\n    this.server = null;\n    this.socks = [];\n    this.settings = { port: 3000, host: '0.0.0.0' };\n    this.type = 'server';\n  }\n\n  bind(port, host, fn) {\n    this.settings.port = port || this.settings.port;\n    this.settings.host = host || this.settings.host;\n\n    this.server = net.createServer();\n    if (host && host.startsWith('/')) {\n      this.server.listen(host, () => {\n        fn && fn();\n      });\n    } else {\n      this.server.listen(port, host, () => {\n        fn && fn();\n      });\n    }\n\n    this.server.on('connection', this.onconnect.bind(this));\n    return this;\n  }\n\n  onconnect(sock) {\n    this.addSocket(sock);\n  }\n\n  addSocket(sock) {\n    this.socks.push(sock);\n    sock.on('data', (data) => {\n      this.emit('data', sock, data);\n    });\n    sock.on('end', () => {\n      this.removeSocket(sock);\n    });\n    sock.on('close', () => {\n      this.removeSocket(sock);\n    });\n    this.handleErrors(sock);\n  }\n\n  removeSocket(sock) {\n    this.socks = this.socks.filter(s => s !== sock);\n    sock.removeAllListeners();\n  }\n\n  handleErrors(sock) {\n    sock.on('error', (err) => {\n      console.error(err);\n      this.removeSocket(sock);\n    });\n  }\n\n  closeServer(fn) {\n    this.server.close();\n    this.socks.forEach(sock => sock.end());\n    this.emit('close');\n    fn && fn();\n  }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    let source = 'bing';\n    let data;\n\n    if (unsplashClientId) {\n      try {\n        const res = await fetch(`https://api.unsplash.com/photos/random?client_id=${unsplashClientId}&count=1`);\n        if (!res.ok) throw new Error('Unsplash API error');\n        const unsplashData = await res.json();\n        if (unsplashData.length === 0) throw new Error('No data from Unsplash');\n        source = 'unsplash';\n        data = unsplashData;\n      } catch (err) {\n        try {\n          const bingRes = await fetch('https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1');\n          if (!bingRes.ok) throw new Error('Bing API error');\n          const bingData = await bingRes.json();\n          if (!bingData || !bingData.images || bingData.images.length === 0) throw new Error('No data from Bing');\n          const imageUrl = bingData.images[0].urlbase + bingData.images[0].filename;\n          data = { url: imageUrl };\n          source = 'bing';\n        } catch (err) {\n          data = { url: 'https://example.com/default-wallpaper.jpg' };\n          source = 'bing';\n        }\n      }\n    } else {\n      try {\n        const bingRes = await fetch('https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1');\n        if (!bingRes.ok) throw new Error('Bing API error');\n        const bingData = await bingRes.json();\n        if (!bingData || !bingData.images || bingData.images.length === 0) throw new Error('No data from Bing');\n        const imageUrl = bingData.images[0].urlbase + bingData.images[0].filename;\n        data = { url: imageUrl };\n        source = 'bing';\n      } catch (err) {\n        data = { url: 'https://example.com/default-wallpaper.jpg' };\n        source = 'bing';\n      }\n    }\n\n    return { type: source, data };\n  }\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Write a function that fetches version information and schema data from a remote API, caches the results locally, and handles errors appropriately.\n\nFunction Description: The function `fetchAndCacheVersions` retrieves version data from a specified API endpoint, then fetches schema data for each non-deprecated version. It caches all retrieved data in JSON files in a local directory. Errors during the process are caught and logged, with the process exiting on failure.\n\nInput: None (The function takes no parameters; all URLs and paths are hardcoded)\n\nOutput: \n- Success: Writes JSON files to the cache directory and logs success messages\n- Failure: Logs error messages and exits the process with status code 1",
    "Canonical_solution": "function fetchAndCacheVersions() {\n    const axios = require('axios');\n    const { writeJsonSync } = require('fs-extra');\n    const path = require('path');\n\n    axios\n        .get('https://exp.host/--/versions')\n        .then(async ({ data }) => {\n            writeJsonSync(path.join(__dirname, '../caches/versions.json'), data);\n\n            for (const version of Object.keys(data.sdkVersions)) {\n                if (data.sdkVersions[version].isDeprecated) {\n                    continue;\n                }\n                const {\n                    data: { data: schema },\n                } = await axios.get(`https://exp.host/--/api/v2/project/configuration/schema/${version}`);\n\n                const filePath = path.join(__dirname, `../caches/schema-${version}.json`);\n                console.log('Writing', filePath);\n                writeJsonSync(filePath, schema);\n            }\n        })\n        .then(() => console.log('Caches updated.'))\n        .catch(error => {\n            console.error(error);\n            console.error('Updating caches failed.');\n            process.exit(1);\n        });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const fs = require('fs');\nconst path = require('path');\nconst fetch = require('node-fetch');\n\nfunction fetchAndCacheVersions() {\n  const cacheDir = path.join(__dirname, 'cache');\n  if (!fs.existsSync(cacheDir)) {\n    fs.mkdirSync(cacheDir);\n  }\n\n  const versionsUrl = 'https://api.example.com/versions';\n  fetch(versionsUrl)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then(versions => {\n      const versionsFilePath = path.join(cacheDir, 'versions.json');\n      fs.writeFileSync(versionsFilePath, JSON.stringify(versions, null, 2));\n      console.log('Versions cached successfully.');\n\n      versions.forEach(version => {\n        if (!version.deprecated) {\n          const schemaUrl = `https://api.example.com/schemas/${version.version}`;\n          fetch(schemaUrl)\n            .then(res => {\n              if (!res.ok) {\n                throw new Error(`Schema fetch failed for version ${version.version}: ${res.status}`);\n              }\n              return res.json();\n            })\n            .then(schema => {\n              const schemaFilePath = path.join(cacheDir, `schema-${version.version}.json`);\n              fs.writeFileSync(schemaFilePath, JSON.stringify(schema, null, 2));\n              console.log(`Schema for version ${version.version} cached successfully.`);\n            })\n            .catch(error => {\n              console.error(`Error fetching schema for version ${version.version}: ${error.message}`);\n              process.exit(1);\n            });\n        }\n      });\n    })\n    .catch(error => {\n      console.error(`Error fetching versions: ${error.message}`);\n      process.exit(1);\n    });\n}\n\nfetchAndCacheVersions();"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a Flash Policy Server class in JavaScript using Node.js's net module to handle cross-domain policy requests for socket connections.\n\nClass Description: The FlashPolicyServer class creates a TCP server that responds to Flash socket policy requests. It manages allowed origins/ports, compiles the XML policy file, and handles server lifecycle events.\n\nAttributes:\n- origins: [Array] - List of allowed domain:port combinations\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [Object] - TCP server instance\n- buffer: [Buffer] - Compiled policy file in binary format\n- server: [Object] - Optional existing server instance to attach to\n\nMethods:\n- constructor(options, origins) -> [FlashPolicyServer] - Initializes the server with options and allowed origins\n- listen(port, server, cb) -> [FlashPolicyServer] - Starts listening on specified port, optionally attaching to existing server\n- responder(socket) -> [void] - Responds to policy requests on a socket connection\n- compile() -> [FlashPolicyServer] - Generates the XML policy buffer from allowed origins\n- add() -> [FlashPolicyServer] - Adds new allowed origins to the policy\n- remove(origin) -> [FlashPolicyServer] - Removes an origin from the allowed list\n- close() -> [FlashPolicyServer] - Stops the server and cleans up listeners",
    "Canonical_solution": "var net = require('net');\n\nclass FlashPolicyServer {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => this.responder(socket));\n      this.responder(socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges.'\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (data && data[0] === 60 && data.toString() === '<policy-file-request/>\\0' &&\n              socket && (socket.readyState === 'open' || socket.readyState === 'writeOnly')) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    this.port >= 0 && this.socket.listen(this.port, () => {\n      this.socket.online = true;\n      if (callback) {\n        callback.call(this);\n        callback = undefined;\n      }\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = new Buffer(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\n\nclass FlashPolicyServer {\n  constructor(options, origins) {\n    this.origins = origins || [];\n    this.port = options?.port || 843;\n    this.log = options?.log || console.log;\n    this.socket = null;\n    this.buffer = null;\n    this.server = options?.server;\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    this.port = port || this.port;\n    this.server = server || this.server;\n\n    if (this.server) {\n      this.socket = this.server;\n    } else {\n      this.socket = net.createServer();\n    }\n\n    this.socket.on('connection', (socket) => {\n      this.responder(socket);\n    });\n\n    this.socket.listen(this.port, () => {\n      this.log(`Flash policy server listening on port ${this.port}`);\n      if (cb) cb();\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    let data = Buffer.alloc(0);\n    socket.on('data', (chunk) => {\n      data = Buffer.concat([data, chunk]);\n      if (data.length >= 12) {\n        if (data.readUInt32BE(0) === 0x00000009) {\n          socket.write(this.buffer);\n          socket.write('\\x00');\n          socket.end();\n        } else {\n          socket.end();\n        }\n      }\n    });\n  }\n\n  compile() {\n    let xml = '<cross-domain-policy>';\n    for (const origin of this.origins) {\n      const [domain, port] = origin.split(':');\n      xml += `<allow-access-from domain=\"${domain}\" port=\"${port}\"/>`;\n    }\n    xml += '</cross-domain-policy>';\n    this.buffer = Buffer.from(xml);\n    return this;\n  }\n\n  add(origin) {\n    this.origins.push(origin);\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    this.origins = this.origins.filter(o => o !== origin);\n    this.compile();\n    return this;\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket.removeAllListeners();\n      this.log('Flash policy server closed');\n    }\n    return this;\n  }\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a UDP-based server discovery system that allows servers to broadcast their presence and receive information about other nearby servers on the network.\n\nClass Description: The class provides functionality for UDP-based server discovery, including broadcasting server presence (heartbeats) and listening for broadcasts from other servers. It maintains a list of discovered servers and handles network communication errors.\n\nAttributes:\n- nearbyServers: [Object] - A dictionary storing information about discovered nearby servers, keyed by hostname.\n- lastDiscoveryBroadcast: [Number] - Timestamp of the last broadcast sent by this server.\n- broadcastIP: [String] - The broadcast IP address used for sending discovery messages.\n- discoveryListener: [Object] - The UDP socket instance used for listening to discovery messages.\n\nMethods:\n- setupDiscovery([callback: Function]) -> [void] - Initializes the UDP listener socket and binds it to the configured port. The optional callback is executed when binding is complete.\n- discoveryBroadcast([type: String, message: Object, callback: Function]) -> [void] - Creates a UDP client to broadcast a message of the specified type. The message should be an object that will be stringified to JSON. The optional callback is executed after the message is sent.\n- discoveryReceive([msg: Buffer, rinfo: Object]) -> [void] - Handles incoming UDP messages, parsing them as JSON and processing different message types (currently only 'heartbeat' is implemented). Updates the nearbyServers list when valid messages are received.\n- shutdownDiscovery() -> [void] - Closes the UDP listener socket if it exists, cleaning up network resources.\n- calcBroadcastIP() -> [String] - (Implied but not shown) Calculates the broadcast IP address based on network interfaces.",
    "Canonical_solution": "var dgram = require(\"dgram\");\nvar os = require('os');\nvar Netmask = require('netmask').Netmask;\n\nvar Class = require(\"pixl-class\");\nvar Tools = require(\"pixl-tools\");\n\nmodule.exports = Class.create({\n\t\n\tnearbyServers: null,\n\tlastDiscoveryBroadcast: 0,\n\t\n\tsetupDiscovery: function(callback) {\n\t\tvar self = this;\n\t\t\n\t\tthis.nearbyServers = {};\n\t\tthis.lastDiscoveryBroadcast = 0;\n\t\t\n\t\tif (!this.server.config.get('udp_broadcast_port')) {\n\t\t\tif (callback) callback();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.broadcastIP = this.server.config.get('broadcast_ip') || this.calcBroadcastIP();\n\t\t\n\t\tvar listener = this.discoveryListener = dgram.createSocket(\"udp4\");\n\t\t\n\t\tlistener.on(\"message\", function (msg, rinfo) {\n\t\t\tself.discoveryReceive( msg, rinfo );\n\t\t} );\n\t\t\n\t\tlistener.on(\"error\", function (err) {\n\t\t\tself.logError('udp', \"UDP socket listener error: \" + err);\n\t\t\tself.discoveryListener = null;\n\t\t} );\n\t\t\n\t\tlistener.bind( this.server.config.get('udp_broadcast_port'), function() {\n\t\t\tif (callback) callback();\n\t\t} );\n\t},\n\t\n\tdiscoveryBroadcast: function(type, message, callback) {\n\t\tvar self = this;\n\t\t\n\t\tmessage.action = type;\n\t\t\n\t\tvar client = dgram.createSocket('udp4');\n\t\tvar message = Buffer.from( JSON.stringify(message) + \"\\n\" );\n\t\tclient.bind( 0, function() {\n\t\t\tclient.setBroadcast( true );\t\t\t\n\t\t\tclient.send(message, 0, message.length, self.server.config.get('udp_broadcast_port'), self.broadcastIP, function(err) {\n\t\t\t\tif (err) self.logDebug(9, \"UDP broadcast failed: \" + err);\n\t\t\t\tclient.close();\n\t\t\t\tif (callback) callback();\n\t\t\t} );\n\t\t} );\n\t},\n\t\n\tdiscoveryReceive: function(msg, rinfo) {\n\t\tvar text = msg.toString();\n\t\tif (text.match(/^\\{/)) {\n\t\t\tvar json = null;\n\t\t\ttry { json = JSON.parse(text); }\n\t\t\tcatch (e) {\n\t\t\t\tthis.logError(9, \"Failed to parse UDP JSON message: \" + e);\n\t\t\t}\n\t\t\tif (json && json.action) {\n\t\t\t\tswitch (json.action) {\n\t\t\t\t\tcase 'heartbeat':\n\t\t\t\t\t\tif (json.hostname && (json.hostname != this.server.hostname)) {\n\t\t\t\t\t\t\tjson.now = Tools.timeNow();\n\t\t\t\t\t\t\tdelete json.action;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!this.nearbyServers[ json.hostname ]) {\n\t\t\t\t\t\t\t\tthis.nearbyServers[ json.hostname ] = json;\n\t\t\t\t\t\t\t\tif (this.multi.master) {\n\t\t\t\t\t\t\t\t\tthis.logDebug(6, \"Discovered nearby server: \" + json.hostname, json);\n\t\t\t\t\t\t\t\t\tthis.authSocketEmit( 'update', { nearby: this.nearbyServers } );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.nearbyServers[ json.hostname ] = json;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\tshutdownDiscovery: function() {\n\t\tif (this.discoveryListener) {\n\t\t\tthis.discoveryListener.close();\n\t\t}\n\t}\n});",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class ServerDiscovery {\n  constructor() {\n    this.nearbyServers = {};\n    this.lastDiscoveryBroadcast = 0;\n    this.broadcastIP = '255.255.255.255';\n    this.discoveryListener = null;\n  }\n\n  setupDiscovery(callback) {\n    const socket = dgram.createSocket({ type: 'udp4', reuseAddr: true });\n    this.discoveryListener = socket;\n    socket.bind(5000, () => {\n      socket.setBroadcast(true);\n      socket.on('message', (msg, rinfo) => this.discoveryReceive(msg, rinfo));\n      if (callback) callback();\n    });\n  }\n\n  discoveryBroadcast(type, message, callback) {\n    const socket = dgram.createSocket({ type: 'udp4' });\n    const payload = JSON.stringify({ type, ...message });\n    socket.send(payload, 0, payload.length, 5000, this.broadcastIP, (err) => {\n      socket.close();\n      if (callback) callback(err);\n    });\n  }\n\n  discoveryReceive(msg, rinfo) {\n    try {\n      const data = JSON.parse(msg.toString());\n      if (data.type === 'heartbeat') {\n        const { hostname, port } = data;\n        this.nearbyServers[hostname] = { hostname, port, lastSeen: Date.now() };\n      }\n    } catch (err) {\n      // Handle parsing error\n    }\n  }\n\n  shutdownDiscovery() {\n    if (this.discoveryListener) {\n      this.discoveryListener.close();\n      this.discoveryListener = null;\n    }\n  }\n\n  calcBroadcastIP() {\n    const interfaces = os.networkInterfaces();\n    for (const iface of Object.values(interfaces)) {\n      for (const detail of iface) {\n        if (detail.family === 'IPv4' && !detail.internal) {\n          const netmask = detail.netmask.split('.').map(Number);\n          const ip = detail.address.split('.').map(Number);\n          const broadcast = [\n            ip[0] | (netmask[0] === 255 ? 255 : 0),\n            ip[1] | (netmask[1] === 255 ? 255 : 0),\n            ip[2] | (netmask[2] === 255 ? 255 : 0),\n            ip[3] | (netmask[3] === 255 ? 255 : 0)\n          ].join('.');\n          return broadcast;\n        }\n      }\n    }\n    return '255.255.255.255';\n  }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor(headers) {\n    this.headers = headers;\n  }\n\n  get(url, params = {}) {\n    return axios.get(url, {\n      params,\n      headers: this.headers\n    }).catch(error => {\n      throw error;\n    });\n  }\n\n  post(url, data = {}, params = {}) {\n    return axios.post(url, data, {\n      params,\n      headers: this.headers\n    }).catch(error => {\n      throw error;\n    });\n  }\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome DevTools Protocol, handling connection, message exchange, and disconnection events.\n\nClass Description: The Chrome class is an EventEmitter that establishes and manages a WebSocket connection to Chrome's DevTools Protocol. It handles message parsing, error handling, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The WebSocket instance\n- _notifier: [EventEmitter] - External event notifier\n- _callbacks: [Object] - Stores pending command callbacks\n- _nextCommandId: [Number] - Tracks the next command ID\n\nMethods:\n- constructor(options, notifier) -> [void] - Initializes the Chrome instance with connection options and notifier\n- _start() -> [Promise] - Internal method to initiate WebSocket connection\n- _connectToWebSocket() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleConnectionClose() -> [void] - Cleans up when connection closes\n- _handleMessage(message) -> [void] - Processes incoming WebSocket messages\n- send(method, params, sessionId, callback) -> [Promise|void] - Sends a command to Chrome DevTools Protocol\n- _enqueueCommand(method, params, sessionId, callback) -> [void] - Internal method to queue commands\n- close(callback) -> [Promise|void] - Closes the WebSocket connection cleanly",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this.webSocketUrl = undefined;\n        this._ws = null;\n        this._notifier = notifier;\n        this._start();\n    }\n\n    async _start() {\n        try {\n            await this._connectToWebSocket();\n            process.nextTick(() => {\n                this._notifier.emit('connect', this);\n            });\n        } catch (err) {\n            this._notifier.emit('error', err);\n        }\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleConnectionClose() {\n        this._callbacks = {};\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n\n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    close(callback) {\n        const closeWebSocket = (callback) => {\n            if (this._ws.readyState === 3) {\n                callback();\n            } else {\n                this._ws.removeAllListeners('close');\n                this._ws.once('close', () => {\n                    this._ws.removeAllListeners();\n                    this._handleConnectionClose();\n                    callback();\n                });\n                this._ws.close();\n            }\n        };\n        if (typeof callback === 'function') {\n            closeWebSocket(callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                closeWebSocket(fulfill);\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends require('events').EventEmitter {\n  constructor(options, notifier) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this.webSocketUrl = this.secure ? `wss://${this.host}:${this.port}` : `ws://${this.host}:${this.port}`;\n    this._ws = null;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n  }\n\n  async _start() {\n    this._ws = new require('ws')(this.webSocketUrl);\n    await this._connectToWebSocket();\n  }\n\n  async _connectToWebSocket() {\n    return new Promise((resolve, reject) => {\n      this._ws.on('open', () => {\n        console.log('Connected to Chrome DevTools Protocol');\n        resolve();\n      });\n\n      this._ws.on('error', (err) => {\n        reject(err);\n      });\n\n      this._ws.on('close', () => {\n        this._handleConnectionClose();\n      });\n\n      this._ws.on('message', (message) => {\n        this._handleMessage(message.toString());\n      });\n    });\n  }\n\n  _handleConnectionClose() {\n    this.emit('close');\n  }\n\n  _handleMessage(message) {\n    const data = JSON.parse(message);\n    if (data.method) {\n      if (data.id !== undefined) {\n        const callback = this._callbacks[data.id];\n        if (callback) {\n          callback(data.result, data.error);\n          delete this._callbacks[data.id];\n        }\n      } else {\n        this._notifier.emit(data.method, data.params);\n      }\n    }\n  }\n\n  send(method, params, sessionId, callback) {\n    return new Promise((resolve, reject) => {\n      const id = this._nextCommandId++;\n      this._enqueueCommand(method, params, sessionId, callback, id);\n      this._ws.send(JSON.stringify({\n        id,\n        method,\n        params\n      }));\n    });\n  }\n\n  _enqueueCommand(method, params, sessionId, callback, id) {\n    this._callbacks[id] = (result, error) => {\n      if (error) {\n        callback(error);\n      } else {\n        callback(result);\n      }\n    };\n  }\n\n  close(callback) {\n    this._ws.close();\n    if (callback) callback();\n  }\n}"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Create a WebSocket client class in Node.js that manages connections, sends commands, and handles responses asynchronously.\n\nClass Description: The CustomEnvironment class provides a WebSocket client implementation that establishes and manages a connection to a WebSocket server. It handles command execution with unique IDs, callback management for responses, and connection lifecycle.\n\nAttributes:\n- callbacks: [Map] - Stores pending callbacks mapped by unique IDs for command responses\n- idSeq: [Number] - Sequence counter for generating unique command IDs\n- ws: [WebSocket] - The active WebSocket connection instance\n\nMethods:\n- initWs(): [Promise<void>] - Initializes WebSocket connection and sets up message handler. Resolves when connection is open.\n- runCommand(type: [String], data: [Any]): [Promise<Any>] - Sends a command to the server and returns a promise that resolves with response data or rejects with error\n- teardown(): [void] - Closes the WebSocket connection if it exists\n\nThe implementation should:\n1. Use the 'ws' library for WebSocket functionality\n2. Maintain connection state and automatically reconnect if needed\n3. Handle message parsing and callback execution\n4. Manage command IDs and response correlation\n5. Provide proper error handling for connection and command execution",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass CustomEnvironment {\n  constructor() {\n    this.callbacks = new Map();\n    this.idSeq = 1;\n  }\n\n  async initWs() {\n    this.ws = new WebSocket(\"ws://127.0.0.1:8080\");\n\n    await new Promise((resolve) => this.ws.on(\"open\", resolve));\n\n    this.ws.on(\"message\", (message) => {\n      const { id, data, error } = JSON.parse(message);\n      const cb = this.callbacks.get(id);\n      if (cb) {\n        this.callbacks.delete(id);\n        cb(error, data);\n      }\n    });\n  }\n\n  async runCommand(type, data) {\n    if (!this.ws) {\n      await this.initWs();\n    }\n\n    return new Promise((resolve, reject) => {\n      const id = String(this.idSeq++);\n\n      this.callbacks.set(id, (error, data) => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve(data);\n        }\n      });\n\n      this.ws.send(JSON.stringify({ id, type, data }));\n    });\n  }\n\n  async teardown() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "import WebSocket from 'ws';\n\nclass CustomEnvironment {\n  constructor() {\n    this.callbacks = new Map();\n    this.idSeq = 0;\n    this.ws = null;\n  }\n\n  async initWs() {\n    return new Promise((resolve, reject) => {\n      this.ws = new WebSocket('ws://example.com');\n\n      this.ws.on('open', () => {\n        console.log('WebSocket connected');\n        resolve();\n      });\n\n      this.ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        if (message.type === 'response') {\n          const id = message.id;\n          const callback = this.callbacks.get(id);\n          if (callback) {\n            callback.resolve(message.data);\n            this.callbacks.delete(id);\n          }\n        }\n      });\n\n      this.ws.on('close', () => {\n        console.log('Connection closed, reconnecting...');\n        this.initWs();\n      });\n\n      this.ws.on('error', (err) => {\n        console.error('WebSocket error:', err);\n        reject(err);\n      });\n    });\n  }\n\n  async runCommand(type, data) {\n    const id = this.idSeq++;\n    const promise = new Promise((resolve, reject) => {\n      this.callbacks.set(id, { resolve, reject });\n    });\n\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      await this.initWs();\n    }\n\n    this.ws.send(JSON.stringify({ type, data, id }));\n\n    return promise;\n  }\n\n  teardown() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\nexport default CustomEnvironment;"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that connects to a speech synthesis service, sends SSML requests, and handles the audio response streams.\n\nClass Description: WebSocketClient is a class that manages WebSocket connections to Microsoft's Bing Speech API for text-to-speech synthesis. It handles connection lifecycle, request/response mapping, and binary audio data streaming.\n\nAttributes:\n- ws: [WebSocket|null] - Active WebSocket connection instance\n- executorMap: [Map] - Stores promise resolvers/rejectors mapped by request IDs\n- bufferMap: [Map] - Accumulates binary audio data chunks mapped by request IDs\n- timer: [Timeout|null] - Connection timeout handler\n\nMethods:\n- connect() -> [Promise<WebSocket>] - Establishes WebSocket connection with proper headers and returns a promise that resolves when connected\n- sendRequest(ssml: [String], format: [String]) -> [Promise<Buffer>] - Sends SSML request with specified audio format and returns promise resolving to audio buffer\n\nInput:\n- For connect(): None\n- For sendRequest():\n  - ssml: [String] - SSML markup for speech synthesis\n  - format: [String] - Desired audio output format (e.g., \"audio-24khz-48kbitrate-mono-mp3\")\n\nOutput:\n- For connect(): Resolves with WebSocket instance or rejects with error\n- For sendRequest(): Resolves with audio buffer or rejects with error",
    "Canonical_solution": "const { WebSocket } = require(\"ws\");\nconst { randomBytes } = require(\"crypto\");\n\nclass WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.executorMap = new Map();\n    this.bufferMap = new Map();\n    this.timer = null;\n  }\n\n  async connect() {\n    const connectionId = randomBytes(16).toString(\"hex\").toLowerCase();\n    let url = `wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4&ConnectionId=${connectionId}`;\n    let ws = new WebSocket(url, {\n      host: \"speech.platform.bing.com\",\n      origin: \"chrome-extension://jdiccldimpdaibmpdkjnbmckianbfold\",\n      headers: {\n        \"User-Agent\":\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44\",\n      },\n    });\n    \n    return new Promise((resolve, reject) => {\n      ws.on(\"open\", () => {\n        resolve(ws);\n      });\n      \n      ws.on(\"close\", (code, reason) => {\n        this.ws = null;\n        if (this.timer) {\n          clearTimeout(this.timer);\n          this.timer = null;\n        }\n        for (let [key, value] of this.executorMap) {\n          value.reject(`\u8fde\u63a5\u5df2\u5173\u95ed: ${reason} ${code}`);\n        }\n        this.executorMap.clear();\n        this.bufferMap.clear();\n      });\n\n      ws.on(\"message\", (message, isBinary) => {\n        let pattern = /X-RequestId:(?<id>[a-z|0-9]*)/;\n        if (!isBinary) {\n          let data = message.toString();\n          if (data.includes(\"Path:turn.start\")) {\n            let matches = data.match(pattern);\n            let requestId = matches.groups.id;\n            this.bufferMap.set(requestId, Buffer.from([]));\n          } else if (data.includes(\"Path:turn.end\")) {\n            let matches = data.match(pattern);\n            let requestId = matches.groups.id;\n            let executor = this.executorMap.get(requestId);\n            if (executor) {\n              this.executorMap.delete(matches.groups.id);\n              let result = this.bufferMap.get(requestId);\n              executor.resolve(result);\n            }\n          }\n        } else if (isBinary) {\n          let separator = \"Path:audio\\r\\n\";\n          let data = message;\n          let contentIndex = data.indexOf(separator) + separator.length;\n          let headers = data.slice(2, contentIndex).toString();\n          let matches = headers.match(pattern);\n          let requestId = matches.groups.id;\n          let content = data.slice(contentIndex);\n          let buffer = this.bufferMap.get(requestId);\n          if (buffer) {\n            buffer = Buffer.concat([buffer, content], buffer.length+content.length);\n            this.bufferMap.set(requestId, buffer);\n          }\n        }\n      });\n      \n      ws.on(\"error\", (error) => {\n        reject(`\u8fde\u63a5\u5931\u8d25\uff1a ${error}`);\n      });\n    });\n  }\n\n  async sendRequest(ssml, format) {\n    if (this.ws == null || this.ws.readyState != WebSocket.OPEN) {\n      let connection = await this.connect();\n      this.ws = connection;\n    }\n    \n    const requestId = randomBytes(16).toString(\"hex\").toLowerCase();\n    let result = new Promise((resolve, reject) => {\n      this.executorMap.set(requestId, { resolve, reject });\n      \n      let configData = {\n        context: {\n          synthesis: {\n            audio: {\n              metadataoptions: {\n                sentenceBoundaryEnabled: \"false\",\n                wordBoundaryEnabled: \"false\",\n              },\n              outputFormat: format,\n            },\n          },\n        },\n      };\n      \n      let configMessage =\n        `X-Timestamp:${Date()}\\r\\n` +\n        \"Content-Type:application/json; charset=utf-8\\r\\n\" +\n        \"Path:speech.config\\r\\n\\r\\n\" +\n        JSON.stringify(configData);\n        \n      this.ws.send(configMessage, (configError) => {\n        if (configError) return;\n        \n        let ssmlMessage =\n          `X-Timestamp:${Date()}\\r\\n` +\n          `X-RequestId:${requestId}\\r\\n` +\n          `Content-Type:application/ssml+xml\\r\\n` +\n          `Path:ssml\\r\\n\\r\\n` +\n          ssml;\n        this.ws.send(ssmlMessage);\n      });\n    });\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    \n    this.timer = setTimeout(() => {\n      if (this.ws && this.ws.readyState == WebSocket.OPEN) {\n        this.ws.close(1000);\n        this.timer = null;\n      }\n    }, 10000);\n\n    return await Promise.race([\n      result,\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.executorMap.delete(requestId);\n          this.bufferMap.delete(requestId);\n          reject(\"\u8bf7\u6c42\u8d85\u65f6\");\n        }, 10000);\n      }),\n    ]);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.executorMap = new Map();\n    this.bufferMap = new Map();\n    this.timer = null;\n  }\n\n  async connect() {\n    this.ws = new WebSocket('wss://speech.platform.bing.com');\n    this.timer = setTimeout(() => {\n      this.disconnect('Connection timeout');\n    }, 5000);\n\n    return new Promise((resolve, reject) => {\n      this.ws.on('open', () => {\n        clearTimeout(this.timer);\n        resolve(this.ws);\n      });\n\n      this.ws.on('error', (err) => {\n        clearTimeout(this.timer);\n        reject(err);\n      });\n\n      this.ws.on('close', (code, reason) => {\n        this.disconnect(`Connection closed: ${reason}`);\n      });\n\n      this.ws.on('message', (message) => {\n        if (Buffer.isBuffer(message)) {\n          const requestId = this.getCurrentRequestId();\n          if (requestId) {\n            const buffer = this.bufferMap.get(requestId) || [];\n            buffer.push(message);\n            this.bufferMap.set(requestId, buffer);\n          }\n        }\n      });\n    });\n  }\n\n  sendRequest(ssml, format) {\n    return new Promise((resolve, reject) => {\n      const requestId = Date.now();\n      this.executorMap.set(requestId, { resolve, reject });\n      this.bufferMap.set(requestId, []);\n\n      this.ws.send(JSON.stringify({\n        ssml,\n        format,\n        requestId\n      }));\n    });\n  }\n\n  disconnect(reason) {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.executorMap.clear();\n    this.bufferMap.clear();\n    console.error(`WebSocket disconnected: ${reason}`);\n  }\n\n  getCurrentRequestId() {\n    const lastRequest = Array.from(this.executorMap.keys()).pop();\n    return lastRequest;\n  }\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a WebSocket-based OrderBook class for managing real-time order book data from a cryptocurrency exchange, with connection management and state handling capabilities.\n\nClass Description: The OrderBook class maintains a real-time order book for a specified trading pair by connecting to a WebSocket feed. It handles connection states, processes incoming messages, and provides event-driven updates. The class inherits from EventEmitter to notify consumers of state changes and order book updates.\n\nAttributes:\n- productID: string - The trading pair identifier (e.g., 'BTC-USD')\n- websocketURI: string - The WebSocket endpoint URL for real-time data\n- restURI: string - The REST API endpoint URL for initial snapshot\n- state: string - Current connection/processing state (from STATES enum)\n- fail_count: number - Count of consecutive connection failures\n- timeProvider: any - Service for timestamp generation\n- socket: WebSocket - The active WebSocket connection instance\n- queue: Array - Buffer for messages received during synchronization\n- book: object - The current order book state with sequence, bids, and asks\n\nMethods:\n- constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) -> OrderBook - Initializes the order book with configuration and starts connection\n- clear_book() -> void - Resets the order book and message queue\n- connect() -> void - Establishes new WebSocket connection with event handlers\n- disconnect() -> void - Closes active WebSocket connection\n- changeState(stateName: string) -> void - Updates state machine and handles transitions (emits statechange event)\n- onOpen() -> void - Handles WebSocket open event (starts synchronization)\n- onClose() -> void - Handles WebSocket close event (updates state)\n- onMessage(datastr: string) -> void - Processes incoming WebSocket messages\n- sync() -> void - Sends subscription message and loads initial snapshot\n- processMessage(message: object, t: Date) -> void - Validates and processes order book updates (emits message-type events)",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nclass OrderBook {\n    constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) {\n        var self = this;\n        EventEmitter.call(self);\n\n        self.productID = productID || 'BTC-USD';\n        self.websocketURI = websocketURI || 'wss://ws-feed.exchange.coinbase.com';\n        self.restURI = restURI;\n        self.state = self.STATES.closed;\n        self.fail_count = 0;\n        self.timeProvider = timeProvider;\n        self.connect();\n    }\n\n    STATES = {\n        'closed': 'closed',\n        'open': 'open',\n        'syncing': 'syncing',\n        'processing': 'processing',\n        'error': 'error',\n    };\n\n    clear_book() {\n        var self = this;\n        self.queue = [];\n        self.book = {\n            'sequence': -1,\n            'bids': {},\n            'asks': {},\n        };\n    };\n\n    connect() {\n        var self = this;\n        if (self.socket) {\n            self.socket.close();\n        }\n        self.clear_book();\n        self.socket = new WebSocket(self.websocketURI);\n        self.socket.on('message', self.onMessage.bind(self));\n        self.socket.on('open', self.onOpen.bind(self));\n        self.socket.on('close', self.onClose.bind(self));\n    };\n\n    disconnect() {\n        var self = this;\n        if (!self.socket) {\n            throw \"Could not disconnect (not connected)\"\n        }\n        self.socket.close();\n        self.onClose();\n    };\n\n    changeState(stateName) {\n        var self = this;\n        var newState = self.STATES[stateName];\n        if (newState === undefined) {\n            throw \"Unrecognized state: \" + stateName;\n        }\n        var oldState = self.state;\n        self.state = newState;\n\n        if (self.fail_count > 3)\n            throw \"Tried to reconnect 4 times. Giving up.\";\n\n        if (self.state === self.STATES.error || self.state === self.STATES.closed) {\n            self.fail_count += 1;\n            self.socket.close();\n            setTimeout(() => self.connect(), 5000);\n        }\n        else if (self.state === self.STATES.processing) {\n            self.fail_count = 0;\n        }\n\n        self.emit('statechange', { 'old': oldState, 'new': newState });\n    };\n\n    onOpen() {\n        var self = this;\n        self.changeState(self.STATES.open);\n        self.sync();\n    };\n\n    onClose() {\n        var self = this;\n        self.changeState(self.STATES.closed);\n    };\n\n    onMessage(datastr: string) {\n        var self = this;\n        var t = self.timeProvider.utcNow();\n        var data = JSON.parse(datastr);\n        if (self.state !== self.STATES.processing) {\n            self.queue.push(data);\n        } else {\n            self.processMessage(data, t);\n        }\n    };\n\n    sync() {\n        var self = this;\n        self.changeState(self.STATES.syncing);\n        var subscribeMessage = {\n            'type': 'subscribe',\n            'product_id': self.productID,\n        };\n        self.socket.send(JSON.stringify(subscribeMessage));\n        self.loadSnapshot();\n    };\n\n    processMessage(message, t: Date) {\n        var self = this;\n        if (message.sequence <= self.book.sequence) {\n            self.emit('ignored', message);\n            return;\n        }\n        if (message.sequence != self.book.sequence + 1) {\n            self.changeState(self.STATES.error);\n        }\n        self.book.sequence = message.sequence;\n\n        self.emit(message.type, new Models.Timestamped(message, t));\n    };\n}\n\nutil.inherits(OrderBook, EventEmitter);",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class OrderBook extends EventEmitter {\n  static STATES = { DISCONNECTED: 'disconnected', CONNECTING: 'connecting', CONNECTED: 'connected', CLOSED: 'closed' };\n  constructor(productID, websocketURI, restURI, timeProvider) {\n    super();\n    this.productID = productID;\n    this.websocketURI = websocketURI;\n    this.restURI = restURI;\n    this.state = OrderBook.STATES.DISCONNECTED;\n    this.fail_count = 0;\n    this.timeProvider = timeProvider;\n    this.socket = null;\n    this.queue = [];\n    this.book = { sequence: 0, bids: [], asks: [] };\n    this.connect();\n  }\n  clear_book() {\n    this.book = { sequence: 0, bids: [], asks: [] };\n    this.queue = [];\n  }\n  connect() {\n    this.state = OrderBook.STATES.CONNECTING;\n    this.socket = new WebSocket(this.websocketURI);\n    this.socket.onopen = () => this.onOpen();\n    this.socket.onclose = () => this.onClose();\n    this.socket.onmessage = (event) => this.onMessage(event.data);\n    this.socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.fail_count++;\n      this.changeState(OrderBook.STATES.DISCONNECTED);\n    };\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n    this.changeState(OrderBook.STATES.CLOSED);\n  }\n  changeState(stateName) {\n    if (this.state === stateName) return;\n    const prevState = this.state;\n    this.state = stateName;\n    this.emit('statechange', prevState, stateName);\n  }\n  onOpen() {\n    this.changeState(OrderBook.STATES.CONNECTED);\n    this.sync();\n  }\n  onClose() {\n    this.changeState(OrderBook.STATES.CLOSED);\n  }\n  onMessage(datastr) {\n    try {\n      const message = JSON.parse(datastr);\n      this.processMessage(message, this.timeProvider.now());\n    } catch (e) {\n      console.error('Error parsing message:', e);\n    }\n  }\n  sync() {\n    this.socket.send(JSON.stringify({ type: 'subscribe', product_id: this.productID }));\n    fetch(this.restURI)\n      .then(res => res.json())\n      .then(snapshot => {\n        this.book = snapshot;\n        this.processQueue();\n      })\n      .catch(err => {\n        console.error('Snapshot load failed:', err);\n        this.changeState(OrderBook.STATES.DISCONNECTED);\n      });\n  }\n  processQueue() {\n    for (const msg of this.queue) {\n      this.processMessage(msg, this.timeProvider.now());\n    }\n    this.queue = [];\n  }\n  processMessage(message, timestamp) {\n    if (!message || !message.type) {\n      console.error('Invalid message:', message);\n      return;\n    }\n    switch (message.type) {\n      case 'snapshot': {\n        this.book = message;\n        this.emit('snapshot', message);\n        break;\n      }\n      case 'delta': {\n        if (message.sequence > this.book.sequence) {\n          this.book.sequence = message.sequence;\n          if (message.bids) this.book.bids = message.bids;\n          if (message.asks) this.book.asks = message.asks;\n          this.emit('update', message);\n        }\n        break;\n      }\n      default: {\n        console.warn('Unknown message type:', message.type);\n      }\n    }\n  }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.addEventListener('message', this._messageListener);\n  }\n\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeEventListener('message', this._messageListener);\n    this._ws.close();\n  }\n\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.handle(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._frontend = frontend;\n    this._connected = new Set();\n    this._disconnectPromise = new Promise((resolve) => {\n      this._resolveDisconnect = resolve;\n    });\n    this._pipe = '/tmp/ndd_pipe';\n    this._setupIpcServer();\n  }\n\n  _setupIpcServer() {\n    // Assume ipcServer is created and listens on this._pipe\n    // For example, using node-ipc:\n    // const ipc = require('node-ipc');\n    // ipc.config.id = this._pipe;\n    // ipc.server.on('connection', (socket) => {\n    //   // handle session creation\n    // });\n    // ipc.server.start();\n  }\n\n  _startSession(info, frontend) {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(info.url);\n      const channel = new Channel(ws);\n      const sessionId = info.id;\n      this._connected.add(sessionId);\n      const cleanup = async () => {\n        await channel.close();\n        this._connected.delete(sessionId);\n        if (this._connected.size === 0) {\n          this._resolveDisconnect();\n        }\n      };\n      resolve(cleanup);\n    });\n  }\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome's DevTools Protocol, handling connection, message exchange, and event emission.\n\nClass Description: The Chrome class extends EventEmitter to create a WebSocket client that connects to Chrome's DevTools Protocol. It manages WebSocket connections, handles message parsing, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- _notifier: [Object] - External notification handler\n- _callbacks: [Object] - Map of pending command callbacks\n- _nextCommandId: [Number] - Counter for generating command IDs\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The active WebSocket connection instance\n\nMethods:\n- constructor: [constructor](options: Object, notifier: Object) -> [Chrome] - Initializes the Chrome instance with connection options and notifier\n- _connectToWebSocket: [_connectToWebSocket]() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleMessage: [_handleMessage](message: Object) -> [void] - Processes incoming WebSocket messages (responses and events)\n- _enqueueCommand: [_enqueueCommand](method: String, params: Object, sessionId: String, callback: Function) -> [void] - Sends a command through WebSocket and tracks its callback\n- send: [send](method: String, ...args: Any) -> [Promise|undefined] - Public method to send commands, supporting both callback and Promise patterns",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this._notifier = notifier;\n        this._callbacks = {};\n        this._nextCommandId = 1;\n        this.webSocketUrl = undefined;\n        this._start();\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n        \n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends require('events').EventEmitter {\n  constructor(options, notifier) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n    this.webSocketUrl = `ws${this.secure ? 's' : ''}://${this.host}:${this.port}/devtools/browser`;\n    this._ws = null;\n    this._connectToWebSocket();\n  }\n\n  async _connectToWebSocket() {\n    this.webSocketUrl = `ws${this.secure ? 's' : ''}://${this.host}:${this.port}/devtools/browser`;\n    this._ws = new WebSocket(this.webSocketUrl);\n    this._ws.onopen = () => {\n      console.log('Connected to WebSocket');\n    };\n    this._ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this._handleMessage(message);\n    };\n    this._ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n    this._ws.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n  }\n\n  _handleMessage(message) {\n    if (message.id !== undefined) {\n      const callback = this._callbacks[message.id];\n      if (callback) {\n        delete this._callbacks[message.id];\n        if (message.error) {\n          callback.reject(message.error);\n        } else {\n          callback.resolve(message.result);\n        }\n      }\n    } else {\n      this.emit(message.method, message.params);\n    }\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    this._callbacks[id] = callback;\n    const message = {\n      id,\n      method,\n      params\n    };\n    this._ws.send(JSON.stringify(message));\n  }\n\n  send(method, params, callback) {\n    const promise = new Promise((resolve, reject) => {\n      this._enqueueCommand(method, params, '', { resolve, reject });\n    });\n    if (callback) {\n      promise.then(callback);\n    }\n    return promise;\n  }\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a WebSocket processor class that manages WebSocket connections and integrates with an HTTP server for handling real-time communication.\n\nClass Description: The Processor class extends EventEmitter to handle WebSocket connections over an HTTP server. It manages the server lifecycle, connection events, and data transmission between client and server.\n\nAttributes:\n- httpServer: [Object] - Instance of Node.js HTTP server used as base for WebSocket server\n- wsServer: [Object] - WebSocket server instance attached to the HTTP server\n- state: [Number] - Tracks the server state (ST_STARTED or ST_CLOSED)\n\nMethods:\n- constructor() -> [void] - Initializes the HTTP and WebSocket servers, sets up connection event handling\n- add(socket: [Object], data: [Buffer|String]) -> [void] - Processes incoming socket connection and data\n- close() -> [void] - Properly shuts down the WebSocket and HTTP servers",
    "Canonical_solution": "var HttpServer = require('http').Server;\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar WebSocketServer = require('ws').Server;\n\nvar ST_STARTED = 1;\nvar ST_CLOSED = 2;\n\nclass Processor extends EventEmitter {\n  constructor() {\n    super();\n    this.httpServer = new HttpServer();\n    this.wsServer = new WebSocketServer({server: this.httpServer});\n    this.state = ST_STARTED;\n\n    this.wsServer.on('connection', (socket) => {\n      this.emit('connection', socket);\n    });\n  }\n\n  add(socket, data) {\n    if(this.state !== ST_STARTED) {\n      return;\n    }\n    this.httpServer.emit('connection', socket);\n    if(typeof socket.ondata === 'function') {\n      socket.ondata(data, 0, data.length);\n    } else {\n      socket.emit('data', data);\n    }\n  }\n\n  close() {\n    if(this.state !== ST_STARTED) {\n      return;\n    }\n    this.state = ST_CLOSED;\n    this.wsServer.close();\n    this.wsServer = null;\n    this.httpServer = null;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Processor extends EventEmitter {\n  constructor() {\n    super();\n    this.httpServer = require('http').createServer();\n    this.wsServer = new require('ws').Server({ server: this.httpServer });\n    this.state = 1;\n    this.wsServer.on('connection', (socket, data) => {\n      this.add(socket, data);\n    });\n  }\n  add(socket, data) {\n    socket.send(data);\n  }\n  close() {\n    if (this.state === 1) {\n      this.state = 0;\n      this.httpServer.close();\n      this.wsServer.close();\n    }\n  }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a JavaScript class for interacting with the Cryptsy cryptocurrency exchange API, handling both public and private endpoints with proper authentication and request management.\n\nClass Description: The Cryptsy class provides a wrapper for the Cryptsy API, enabling users to make authenticated requests to private endpoints and public data requests. It handles API authentication, request signing, and response processing.\n\nAttributes:\n- key: string - API key for authentication\n- secret: string - API secret for request signing\n- PUBLIC_API_URL: string - Base URL for public API endpoints (default: 'http://pubapi.cryptsy.com/api.php')\n- PRIVATE_API_URL: string - Base URL for private API endpoints (default: 'https://api.cryptsy.com/api')\n- USER_AGENT: string - User agent string for requests (default: 'nomp/node-open-mining-portal')\n- STRICT_SSL: boolean - Static flag for SSL verification (default: true)\n\nMethods:\n- constructor(key, secret) -> Cryptsy - Initializes the API client with credentials\n- _getPrivateHeaders(parameters: object) -> object - Generates authentication headers for private requests\n- _request(options: object, callback: function) -> Cryptsy - Base request method with common configuration\n- _public(parameters: object, callback: function) -> Cryptsy - Makes public API requests\n- _private(parameters: object, callback: function) -> Cryptsy - Makes authenticated private API requests\n- getTicker(callback: function) -> Cryptsy - Gets market ticker data\n- getOrderBook(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets order book for a currency pair\n- getTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets public trade history\n- myBalances(callback: function) -> Cryptsy - Gets user's account balances\n- myOpenOrders(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's open orders\n- myTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's trade history\n- buy(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a buy order\n- sell(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a sell order\n- cancelOrder(currencyA: string, currencyB: string, orderNumber: string, callback: function) -> Cryptsy - Cancels an order\n- withdraw(currency: string, amount: number, address: string, callback: function) -> Cryptsy - Withdraws funds\n- _joinCurrencies(currencyA: string, currencyB: string) -> string - Helper to format currency pairs",
    "Canonical_solution": "var request = require('request');\nvar nonce = require('nonce');\nvar crypto = require('crypto');\n\nclass Cryptsy {\n    constructor(key, secret) {\n        this.key = key;\n        this.secret = secret;\n        this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n        this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n        this.USER_AGENT = 'nomp/node-open-mining-portal';\n    }\n\n    static STRICT_SSL = true;\n\n    _getPrivateHeaders(parameters) {\n        if (!this.key || !this.secret) {\n            throw 'Cryptsy: Error. API key and secret required';\n        }\n\n        let paramString = Object.keys(parameters).sort().map(function(param) {\n            return encodeURIComponent(param) + '=' + encodeURIComponent(parameters[param]);\n        }).join('&');\n\n        let signature = crypto.createHmac('sha512', this.secret).update(paramString).digest('hex');\n\n        return {\n            Key: this.key,\n            Sign: signature\n        };\n    }\n\n    _request(options, callback) {\n        if (!('headers' in options)) {\n            options.headers = {};\n        }\n\n        options.headers['User-Agent'] = this.USER_AGENT;\n        options.json = true;\n        options.strictSSL = Cryptsy.STRICT_SSL;\n\n        request(options, function(err, response, body) {\n            callback(err, body);\n        });\n\n        return this;\n    }\n\n    _public(parameters, callback) {\n        let options = {\n            method: 'GET',\n            url: this.PUBLIC_API_URL,\n            qs: parameters\n        };\n\n        return this._request(options, callback);\n    }\n\n    _private(parameters, callback) {\n        parameters.nonce = nonce();\n        let options = {\n            method: 'POST',\n            url: this.PRIVATE_API_URL,\n            form: parameters,\n            headers: this._getPrivateHeaders(parameters)\n        };\n\n        return this._request(options, callback);\n    }\n\n    getTicker(callback) {\n        let parameters = {\n            method: 'marketdatav2'\n        };\n        return this._public(parameters, callback);\n    }\n\n    getOrderBook(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOrderBook',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    getTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    myBalances(callback) {\n        let parameters = {\n            command: 'returnBalances'\n        };\n        return this._private(parameters, callback);\n    }\n\n    myOpenOrders(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOpenOrders',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    myTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    buy(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'buy',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    sell(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'sell',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    cancelOrder(currencyA, currencyB, orderNumber, callback) {\n        let parameters = {\n            command: 'cancelOrder',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            orderNumber: orderNumber\n        };\n        return this._private(parameters, callback);\n    }\n\n    withdraw(currency, amount, address, callback) {\n        let parameters = {\n            command: 'withdraw',\n            currency: currency,\n            amount: amount,\n            address: address\n        };\n        return this._private(parameters, callback);\n    }\n\n    _joinCurrencies(currencyA, currencyB) {\n        return currencyA + '_' + currencyB;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Cryptsy {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n    this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n    this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n    this.USER_AGENT = 'nomp/node-open-mining-portal';\n    this.STRICT_SSL = true;\n  }\n  _getPrivateHeaders(parameters) {\n    const method = parameters.method;\n    const path = parameters.path;\n    const params = parameters.params || {};\n    const sortedParams = Object.keys(params).sort().reduce((acc, key) => {\n      acc[key] = params[key];\n      return acc;\n    }, {});\n    const queryString = Object.entries(sortedParams)\n      .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n      .join('&');\n    const stringToSign = `${method}${path}?${queryString}`;\n    const signature = CryptoJS.HmacSHA512(stringToSign, this.secret).toString(CryptoJS.enc.Base64);\n    return {\n      'User-Agent': this.USER_AGENT,\n      'Key': this.key,\n      'Sign': signature\n    };\n  }\n  _request(options, callback) {\n    const { method, url, headers, body } = options;\n    return fetch(url, {\n      method,\n      headers: {\n        ...headers,\n        'User-Agent': this.USER_AGENT\n      },\n      body: body ? JSON.stringify(body) : undefined,\n      redirect: 'follow'\n    })\n      .then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      })\n      .then(data => callback(null, data))\n      .catch(error => callback(error));\n  }\n  _public(parameters, callback) {\n    const url = `${this.PUBLIC_API_URL}?${new URLSearchParams(parameters).toString()}`;\n    this._request({ method: 'GET', url, headers: {} }, callback);\n  }\n  _private(parameters, callback) {\n    const { method, path, params } = parameters;\n    const headers = this._getPrivateHeaders({ method, path, params });\n    this._request({ method, url: this.PRIVATE_API_URL + path, headers }, callback);\n  }\n  getTicker(callback) {\n    this._public({ method: 'getticker' }, callback);\n  }\n  getOrderBook(currencyA, currencyB, callback) {\n    this._public({ method: 'getorderbook', currencyA, currencyB }, callback);\n  }\n  getTradeHistory(currencyA, currencyB, callback) {\n    this._public({ method: 'gettradehistory', currencyA, currencyB }, callback);\n  }\n  myBalances(callback) {\n    this._private({ method: 'mybalances' }, callback);\n  }\n  myOpenOrders(currencyA, currencyB, callback) {\n    this._private({ method: 'myopenorders', currencyA, currencyB }, callback);\n  }\n  myTradeHistory(currencyA, currencyB, callback) {\n    this._private({ method: 'mytradehistory', currencyA, currencyB }, callback);\n  }\n  buy(currencyA, currencyB, rate, amount, callback) {\n    this._private({ method: 'buy', currencyA, currencyB, rate, amount }, callback);\n  }\n  sell(currencyA, currencyB, rate, amount, callback) {\n    this._private({ method: 'sell', currencyA, currencyB, rate, amount }, callback);\n  }\n  cancelOrder(currencyA, currencyB, orderNumber, callback) {\n    this._private({ method: 'cancelorder', currencyA, currencyB, orderNumber }, callback);\n  }\n  withdraw(currency, amount, address, callback) {\n    this._private({ method: 'withdraw', currency, amount, address }, callback);\n  }\n  _joinCurrencies(currencyA, currencyB) {\n    return `${currencyA}-${currencyB}`;\n  }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "const fs = require('fs');\nconst path = require('path');\nconst os = require('os');\nconst https = require('https');\nconst { exec } = require('child_process');\n\nclass Binary {\n  constructor(url, data) {\n    this.url = url;\n    this.name = data?.name || '-1';\n    this.installDirectory = data?.installDirectory || path.join(process.cwd(), 'bin');\n    this.binaryDirectory = '-1';\n    this.binaryPath = '-1';\n  }\n\n  _getInstallDirectory() {\n    return this.installDirectory;\n  }\n\n  _createDirectory(dirPath) {\n    return new Promise((resolve, reject) => {\n      fs.mkdir(dirPath, { recursive: true }, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  _downloadPackage(installDir) {\n    return new Promise((resolve, reject) => {\n      const filename = this.name || 'binary';\n      const tempFilePath = path.join(os.tmpdir(), `${filename}.tar.gz`);\n      const file = fs.createWriteStream(tempFilePath);\n      https.get(this.url, (res) => {\n        res.pipe(file);\n        file.on('finish', () => {\n          file.close();\n          resolve(tempFilePath);\n        });\n      }).on('error', (err) => {\n        fs.unlink(tempFilePath, () => {});\n        reject(err);\n      });\n    });\n  }\n\n  _extractPackage(tempFilePath, installDir) {\n    return new Promise((resolve, reject) => {\n      const cmd = `tar -xzf ${tempFilePath} -C ${installDir}`;\n      const child = exec(cmd, (err, stdout, stderr) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  _cleanup(tempFilePath) {\n    return new Promise((resolve, reject) => {\n      fs.unlink(tempFilePath, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  install() {\n    return new Promise((resolve, reject) => {\n      const installDir = this._getInstallDirectory();\n      this._createDirectory(installDir)\n        .then(() => {\n          return this._downloadPackage(installDir);\n        })\n        .then((tempFilePath) => {\n          return this._extractPackage(tempFilePath, installDir);\n        })\n        .then(() => {\n          return this._cleanup(tempFilePath);\n        })\n        .then(() => {\n          this.binaryDirectory = installDir;\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n}\n\nmodule.exports = Binary;"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n  const url = 'wss://' + wssUrl;\n  const socket = new WebSocket(url);\n\n  socket.onopen = function() {\n    console.log('Connected to server');\n    const initMessage = JSON.stringify({ type: 'init' });\n    socket.send(initMessage);\n  };\n\n  socket.onmessage = function(event) {\n    const data = JSON.parse(event.data);\n    console.log('Received message:', data);\n  };\n\n  socket.onerror = function(error) {\n    console.error('WebSocket error occurred:', error);\n  };\n\n  socket.onclose = function() {\n    console.log('Connection closed');\n  };\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript using Node.js that establishes a connection to a WebSocket server, handles incoming messages, and manages connection events.\n\nClass Description: The WebSocketImpl class provides a wrapper around the Node.js 'ws' library to create and manage WebSocket connections. It handles connection establishment, message reception, error handling, and connection closure events. The class also provides methods for sending data and closing the connection.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document object associated with the WebSocket\n- _urlRecord: [Object] - Parsed URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL as a string\n- _ws: [WebSocket|null] - The underlying WebSocket instance or null if not connected\n- _readyState: [Number] - Current connection state (0 = CONNECTING)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Amount of buffered data in bytes\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket connection with the given parameters and sets up event handlers\n- _onConnectionEstablished() -> [void] - Internal method called when the WebSocket connection is successfully established\n- _onMessageReceived(data, isBinary) -> [void] - Internal method called when a message is received from the server\n- _onConnectionClosed(code, reason) -> [void] - Internal method called when the WebSocket connection is closed\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Sends data through the WebSocket connection (supports strings and Blob objects)\n- get readyState() -> [Number] - Returns the current ready state of the WebSocket connection",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = idlUtils.implForWrapper(globalObject._document);\n    this._urlRecord = parseURL(args[0]);\n    this.url = serializeURL(this._urlRecord);\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const protocols = typeof args[1] === \"string\" ? [args[1]] : (args[1] || []);\n    const nodeParsedURL = nodeURL.parse(this.url);\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    fireAnEvent(\"open\", this);\n  }\n\n  _onMessageReceived(data, isBinary) {\n    let dataForEvent;\n    if (!isBinary) {\n      dataForEvent = data.toString();\n    } else if (this.binaryType === \"arraybuffer\") {\n      dataForEvent = copyToArrayBufferInNewRealm(data, this._globalObject);\n    } else {\n      dataForEvent = Blob.create(this._globalObject, [[data], { type: \"\" }]);\n    }\n    fireAnEvent(\"message\", this, MessageEvent, {\n      data: dataForEvent,\n      origin: serializeURLOrigin(this._urlRecord)\n    });\n  }\n\n  _onConnectionClosed(code, reason) {\n    fireAnEvent(\"close\", this, CloseEvent, {\n      wasClean: !this._requiredToFail,\n      code,\n      reason: reason.toString()\n    });\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this._ws) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n      if (Blob.isImpl(data)) {\n        data = data._buffer;\n      }\n      this._ws.send(data, { binary: typeof data !== \"string\" });\n    }\n  }\n\n  get readyState() {\n    return this._ws ? this._ws.readyState : this._readyState;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData;\n    this._urlRecord = new URL(args[0]);\n    this.url = args[0];\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n    this._readyState = 0;\n    const WebSocket = require('ws');\n    this._wsModule = WebSocket;\n    this._ws = new this._wsModule(this.url);\n    if (this._requiredToFail) {\n      this._ws.close();\n    }\n    this._ws.on('open', this._onConnectionEstablished.bind(this));\n    this._ws.on('message', (data, isBinary) => this._onMessageReceived(data, isBinary));\n    this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n    this._ws.on('error', (err) => {\n      this._onConnectionClosed(1006, 'Unexpected server error');\n    });\n  }\n  _onConnectionEstablished() {\n    this._readyState = 1;\n    this._processSendQueue();\n  }\n  _processSendQueue() {\n    while (this._sendQueue.length > 0) {\n      const data = this._sendQueue.shift();\n      this._ws.send(data);\n      this.bufferedAmount -= data.length;\n    }\n  }\n  _onMessageReceived(data, isBinary) {\n    // Handle incoming message\n  }\n  _onConnectionClosed(code, reason) {\n    this._readyState = 3;\n    this._sendQueue = [];\n  }\n  close(code, reason) {\n    if (this._ws && this._ws.readyState === this._wsModule.OPEN) {\n      this._ws.close(code, reason);\n      this._readyState = 3;\n      this._sendQueue = [];\n    }\n  }\n  send(data) {\n    if (this._readyState !== this._wsModule.OPEN) {\n      this._sendQueue.push(data);\n      this.bufferedAmount += data.length;\n      return;\n    }\n    this._ws.send(data);\n    this.bufferedAmount -= data.length;\n  }\n  get readyState() {\n    return this._readyState;\n  }\n}"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a JavaScript function that manages parallel execution of tests using WebSocket communication to coordinate test runs and report results.\n\nFunction Description: The function establishes a WebSocket connection to a test server, manages a queue of tests to run in parallel (with configurable parallelism), opens test cases in separate windows, and processes test results and status updates received through the WebSocket connection. It handles test queuing, parallel execution, status tracking, and result reporting.\n\nInput: None (The function operates on DOM elements and uses a hardcoded WebSocket URL)\n\nOutput: None (The function modifies the DOM to display test statuses and results)\n\nAttributes (internal variables used by the function):\n- socket: WebSocket - The WebSocket connection to the test server\n- maxParallelRuns: Number - Maximum number of tests to run simultaneously\n- subscriptionKey: Number - Unique identifier for this test session\n- queue: Array - Queue of tests waiting to be executed\n- numRunning: Number - Count of currently running tests\n\nMethods (internal functions):\n- processQueue() -> void - Processes the test queue by opening test windows up to the maximum parallel limit\n- WebSocket.onopen handler -> void - Handles WebSocket connection establishment\n- WebSocket.onmessage handler -> void - Processes incoming WebSocket messages (test results and status updates)",
    "Canonical_solution": "function runAllTests() {\n    var socket = null;\n    var maxParallelRuns = 4;\n    var subscriptionKey = Date.now();\n    var queue = [];\n    var numRunning = 0;\n\n    function processQueue() {\n        var toRun = queue.splice(0, Math.min(maxParallelRuns - numRunning, queue.length));\n        toRun.forEach(function (linkDiv) {\n            linkDiv.querySelector(\".status\").textContent = \"- Running...\";\n            window.open(linkDiv.querySelector(\".testLink\").href + \"&autostart=true&subscriptionKey=\" + subscriptionKey, \"\", \"width=800, height=800, top=0, left=400\")\n            numRunning++;\n        });\n    }\n\n    socket = new WebSocket(\"ws://localhost:9998\");\n    socket.onopen = function () {\n        socket.send(JSON.stringify({ \n            id: \"Dashboard\", \n            type: \"registerSubscriber\", \n            args: { subscriptionKey: subscriptionKey } \n        }));\n\n        var linkDivs = document.querySelectorAll(\".testLinkDiv\");\n        for (var i = 0, l = linkDivs.length; i < l; i++) {\n            var linkDiv = linkDivs[i];\n            linkDiv.querySelector(\".status\").textContent = \"- Queued to run\";\n            queue.push(linkDiv);\n        }\n        processQueue();\n    };\n    socket.onmessage = function (m) {\n        var message = JSON.parse(m.data);\n\n        switch (message.type) {\n            case \"osinfo\":\n                processQueue();\n                break;\n\n            case \"report\":\n                var li = document.querySelector(\"#id_\" + message.id);\n                var data = message.args.data;\n                switch (data.type) {\n                    case \"singleFailure\":\n                        li.classList.add(\"failed\");\n                        break;\n                    case \"finished\":\n                        li.classList.add(\"reported\");\n                        li.querySelector(\".status\").textContent = \"- \" + (((+data.runtime / 1000) + 1) | 0) + \"s\";\n                        if (data.failures) {\n                            li.classList.add(\"failed\");\n                        } else {\n                            li.classList.add(\"passed\");\n                        }\n                        break;\n                }\n                break;\n\n            case \"reporterDisconnected\":\n                var li = document.querySelector(\"#id_\" + message.id);\n                if (!li.classList.contains(\"reported\")) {\n                    li.classList.add(\"reported\");\n                    li.classList.add(\"failed\");\n                    var status = li.querySelector(\".status\");\n                    status.textContent = \"- Canceled\";\n                }\n                numRunning--;\n                processQueue();\n                break;\n        }\n    };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function runTests() {\n  const socket = new WebSocket('ws://testserver.com');\n  let maxParallelRuns = 5;\n  let subscriptionKey = null;\n  let queue = [];\n  let numRunning = 0;\n\n  socket.onopen = function() {\n    subscriptionKey = Math.random();\n    processQueue();\n  };\n\n  socket.onmessage = function(event) {\n    const data = JSON.parse(event.data);\n    if (data.type === 'testResult') {\n      const testId = data.testId;\n      const status = data.status;\n      const result = data.result;\n      const testElement = document.getElementById('test-' + testId);\n      if (testElement) {\n        testElement.textContent = status + ': ' + result;\n      }\n      numRunning--;\n      processQueue();\n    }\n  };\n\n  function processQueue() {\n    while (numRunning < maxParallelRuns && queue.length > 0) {\n      const testUrl = queue.shift();\n      const testId = testUrl.split('/').pop();\n      const testElement = document.createElement('div');\n      testElement.id = 'test-' + testId;\n      testElement.textContent = 'Running...';\n      document.getElementById('test-results').appendChild(testElement);\n      const testWindow = window.open(testUrl, '_blank');\n      numRunning++;\n    }\n  }\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendWebhook(data) {\n  const WEBHOOK_URL = 'https://example.com/webhook';\n  try {\n    const response = await fetch(WEBHOOK_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.error('Failed to send webhook:', error);\n  }\n}"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that handles WebSocket connections, message processing, and connection lifecycle events. The class should support sending and receiving JSON messages, handling different commands, and managing connection states.\n\nClass Description: The `Client` class represents a WebSocket client that connects to a server, processes incoming messages, and sends commands. It handles connection events, message parsing, and provides methods for common operations like sending hello messages and triggering reloads.\n\nAttributes:\n- `ws`: [WebSocket] - The WebSocket connection instance.\n- `options`: [Object] - Configuration options for the client.\n- `id`: [String] - Unique identifier for the client instance.\n- `plugins`: [Array] - List of plugins received from the server.\n- `url`: [String] - URL received from the server.\n\nMethods:\n- `constructor(req, socket, head, options)` -> [Client] - Initializes a new WebSocket client instance with the given request, socket, head, and options.\n- `message(event)` -> [void] - Handles incoming WebSocket messages, parses them, and routes to appropriate command handlers.\n- `close(event)` -> [void] - Closes the WebSocket connection and emits an 'end' event.\n- `hello()` -> [void] - Sends a 'hello' command to the server with supported protocols and server name.\n- `info(data)` -> [void] - Processes 'info' command data from the server, storing plugins and URL.\n- `reload(files)` -> [void] - Sends 'reload' commands for each file in the provided list, with live reload options.\n- `_data(event)` -> [Object] - Parses incoming message data from JSON string to object.\n- `send(data)` -> [void] - Sends data as a JSON string over the WebSocket connection.\n- `uniqueId(prefix)` -> [String] - Generates a unique ID with an optional prefix.",
    "Canonical_solution": "var WebSocket = require('faye-websocket');\n\nclass Client {\n  constructor(req, socket, head, options) {\n    options = this.options = options || {};\n    this.ws = new WebSocket(req, socket, head);\n    this.ws.onmessage = this.message.bind(this);\n    this.ws.onclose = this.close.bind(this);\n    this.id = this.uniqueId('ws');\n  }\n\n  message(event) {\n    var data = this.data(event);\n    if(this[data.command]) return this[data.command](data);\n  }\n\n  close(event) {\n    if(this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.emit('end', event);\n  }\n\n  hello() {\n    this.send({\n      command: 'hello',\n      protocols: [\n        'http://livereload.com/protocols/official-7'\n      ],\n      serverName: 'tiny-lr'\n    });\n  }\n\n  info(data) {\n    this.plugins = data.plugins;\n    this.url = data.url;\n  }\n\n  reload(files) {\n    files.forEach(function(file) {\n      this.send({\n        command: 'reload',\n        path: file,\n        liveCss: this.options.liveCss !== false,\n        liveJs: this.options.liveJs !== false,\n        liveImg: this.options.liveImg !== false\n      });\n    }, this);\n  }\n\n  _data(event) {\n    var data = {};\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {}\n    return data;\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  }\n}\n\nvar idCounter = 0;",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class Client extends EventEmitter {\n  constructor(req, socket, head, options) {\n    super();\n    this.options = options;\n    this.id = this.uniqueId('client');\n    this.ws = new WebSocket(options.url);\n    this.ws.on('open', () => this.hello());\n    this.ws.on('message', (event) => this.message(event));\n    this.ws.on('close', () => this.close());\n    this.ws.on('error', (err) => {\n      console.error('WebSocket error:', err);\n    });\n  }\n\n  message(event) {\n    const data = this._data(event);\n    if (data && data.command === 'info') {\n      this.info(data);\n    }\n  }\n\n  close() {\n    this.ws.close();\n    this.emit('end');\n  }\n\n  hello() {\n    const helloData = {\n      command: 'hello',\n      supportedProtocols: this.options.supportedProtocols,\n      serverName: this.options.serverName\n    };\n    this.send(helloData);\n  }\n\n  info(data) {\n    this.plugins = data.plugins;\n    this.url = data.url;\n  }\n\n  reload(files) {\n    files.forEach(file => {\n      const reloadData = {\n        command: 'reload',\n        path: file.path,\n        options: {\n          liveReload: true\n        }\n      };\n      this.send(reloadData);\n    });\n  }\n\n  _data(event) {\n    try {\n      return JSON.parse(event.data);\n    } catch (e) {\n      console.error('Error parsing JSON:', e);\n      return null;\n    }\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId(prefix) {\n    return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a client for interacting with Quqi.com's API to perform daily tasks, manage group operations, and track rewards.\n\nClass Description: The QuqiClient class provides methods to interact with Quqi.com's web services including task management, group operations, file uploads, and reward collection. It handles HTTP requests using Axios with proper headers and error handling.\n\nAttributes:\n- headers: [Object] - Contains HTTP headers including cookies and referer for API authentication\n- config: [Object] - Configuration object containing user credentials and settings\n\nMethods:\n- constructor(config) -> [void] - Initializes the client with configuration including authentication cookies\n- _sleep(ms) -> [Promise] - Utility method for delaying execution\n- getDailyTask() -> [Promise<Array|null>] - Retrieves list of incomplete daily tasks\n- getReward(id) -> [Promise<void>] - Claims reward for a specific task ID\n- visit(id) -> [Promise<void>] - Visits a specified group to complete visit tasks\n- getQuqiId() -> [Promise<Object|null>] - Gets group information and handles group joining if needed\n- uploadImg(id) -> [Promise<void>] - Uploads and deletes a dummy image to complete upload tasks\n- executeTasks() -> [Promise<String>] - Executes all available tasks and returns wallet information",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass QuqiClient {\n    constructor(config) {\n        this.headers = {\n            cookie: config.quqi.cookie,\n            referer: \"https://quqi.com/\"\n        };\n    }\n\n    async _sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async getDailyTask() {\n        try {\n            let res = await axios.get(`https://exp.quqi.com/v1/dailyTask/state?_=1${Date.now()}`, {headers: this.headers});\n            if(res.data.err == 0) {\n                let list = res.data.data.filter(x => x.status != 2);\n                console.log(`\u5269\u4f59${list.length}\u4efb\u52a1\u672a\u5b8c\u6210`);\n                return list;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return null;\n    }\n\n    async getReward(id) {\n        try {\n            let res = await axios.get(`https://exp.quqi.com/v1/dailyTask/sendAward/${id}`, {headers: this.headers});\n            console.log(\"\u9886\u53d6\u5956\u52b1\uff1a\" + res.data.msg);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async visit(id) {\n        try {\n            this.headers[\"User-Agent\"] = \"Mozilla/5.0 (Linux; Android 11; Redmi K30) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36\";\n            let res = await axios.post(`https://quqi.com/api/dir/ls?quqi_id=${id}`, `quqi_id=${id}&tree_id=1&node_id=0`, {headers: this.headers});\n            let res1 = await axios.post(`https://quqi.com/auth/updateVisit?quqi_id=${id}`, `quqi_id=${id}`, {headers: this.headers});\n            console.log(\"\u6d4f\u89c8\u591a\u4eba\u7fa4\u7ec4\uff1a\" + res1.data.msg);\n            await this._sleep(1000);\n            await this.getReward(14);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async getQuqiId() {\n        try {\n            let res = await axios.get(\"https://group.quqi.com/v1/group/list\", {headers: this.headers});\n            if (res.data.msg == \"success\") {\n                let gplist = res.data.data.filter(x => x.type == 14);\n                let quqid = gplist.length == 0 ? res.data.data[0].quqi_id : gplist[0].quqi_id;\n                let gtype = gplist.length == 0 ? 1 : 2;\n                if (gtype == 1) {\n                    console.log(\"\ud83c\ude1a\ufe0f\u591a\u4eba\u7fa4\u7ec4,\u8bf7\u81ea\u884c\u521b\u5efa\u4e00\u4e2a\u591a\u4eba\u7fa4\u7ec4,\u6216\u8005\u7533\u8bf7\u52a0\u5165https://quqi.avyeld.com/join/company/team.html?jointarget=ed521eef-7ed1-486f-a903-2457ebe5704f\");\n                    let sqres = await axios.post(\"https://group.quqi.com/v1/application\", \"credential=ed521eef-7ed1-486f-a903-2457ebe5704f\", {headers: this.headers});\n                    console.log(\"\u7533\u8bf7\u52a0\u5165\u591a\u4eba\u7fa4\u7ec4\uff1a\" + sqres.data.msg);\n                }\n                return {\n                    qid: quqid,\n                    gtype: gtype\n                };\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return null;\n    }\n\n    async uploadImg(id) {\n        try {\n            let name = `\u6bcf\u65e5\u7b7e\u5230${Date.now()}`;\n            this.headers[\"User-Agent\"] = \"Mozilla/5.0 (Linux; Android 11; Redmi K30) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36\";\n            let res = await axios.post(`https://quqi.com/api/upload/v1/file/init?quqi_id=${id}`, `file_name=${name}.jpg&is_slice=false&md5=507cf982c5db90bc35f9c6c8179c292f&parent_id=0&quqi_id=${id}&sha=4b4afc24113d86d0afd9be21b6841d9c627cdabf01317e3e760308b05f8bdd81&sign=617db783e0ba01343338ee9887dfdb18&size=331665&tree_id=1`, {headers: this.headers});\n            if (res.data.msg == \"ok\") {\n                console.log(`\u4e0a\u4f20\u56fe\u7247 ${name} \u6210\u529f`);\n                let nid = res.data.data.node_id;\n                if (nid) await axios.post(`https://quqi.com/api/node/batchDel?quqi_id=${id}`, `quqi_id=${id}&tree_id=1&node_ids=${nid}`, {headers: this.headers});\n                await this._sleep(1000);\n                await this.getReward(15);\n            } else {\n                console.log(\"\u4e0a\u4f20\u5931\u8d25\uff1a\" + res.data.msg);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async executeTasks() {\n        let quqinfo = \"\";\n        let dailyTaskList = await this.getDailyTask();\n        let qgp = await this.getQuqiId();\n        \n        if (dailyTaskList) {\n            for (let task of dailyTaskList) {\n                console.log(task.task_decreption);\n                if (task.status == 1) {\n                    await this.getReward(task.task_type);\n                } else if (task.task_type == 14 && task.status == 0 && qgp.gtype == 2) {\n                    await this.visit(qgp.qid);\n                } else if (task.task_type == 15 && task.status == 0) {\n                    await this.uploadImg(qgp.qid);\n                }\n            }\n        }\n        \n        let ires = await axios.get(\"https://api.quqi.com/vipWallet/v1/vipAndWallet\", {headers: this.headers});\n        if (ires.data.msg == \"success\") {\n            quqinfo = `\u66f2\u5947\u997c\uff1a${ires.data.data.wallet_info.cookie}  \u66f2\u5947\u8c46\uff1a${ires.data.data.wallet_info.bean}`;\n        } else {\n            quqinfo = ires.data.msg;\n        }\n        console.log(quqinfo);\n        return \"\u3010\u66f2\u5947\u7f51\u76d8\u3011\uff1a\" + quqinfo;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class QuqiClient {\n  constructor(config) {\n    this.config = config;\n    this.headers = {\n      'Cookie': config.cookies,\n      'Referer': 'https://www.quqi.com/'\n    };\n    this.axios = axios.create({\n      headers: this.headers\n    });\n  }\n\n  _sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async getDailyTask() {\n    try {\n      const response = await this.axios.get('/api/tasks/daily');\n      return response.data.tasks || null;\n    } catch (error) {\n      console.error('Error fetching daily tasks:', error);\n      return null;\n    }\n  }\n\n  async getReward(id) {\n    try {\n      await this.axios.post(`/api/tasks/${id}/reward`);\n    } catch (error) {\n      console.error(`Error claiming reward for task ${id}:`, error);\n    }\n  }\n\n  async visit(id) {\n    try {\n      await this.axios.post(`/api/groups/${id}/visit`);\n    } catch (error) {\n      console.error(`Error visiting group ${id}:`, error);\n    }\n  }\n\n  async getQuqiId() {\n    try {\n      const response = await this.axios.get('/api/groups/info');\n      if (!response.data.joined) {\n        await this.axios.post('/api/groups/join');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error getting group info:', error);\n      return null;\n    }\n  }\n\n  async uploadImg(id) {\n    try {\n      const uploadResponse = await this.axios.post('/api/upload', { groupId: id });\n      await this.axios.delete(`/api/upload/${uploadResponse.data.id}`);\n    } catch (error) {\n      console.error(`Error uploading image for group ${id}:`, error);\n    }\n  }\n\n  async executeTasks() {\n    const tasks = await this.getDailyTask();\n    if (!tasks || tasks.length === 0) {\n      return 'No tasks available.';\n    }\n\n    for (const task of tasks) {\n      if (task.type === 'visit') {\n        await this.visit(task.groupId);\n      } else if (task.type === 'upload') {\n        await this.uploadImg(task.groupId);\n      }\n      await this.getReward(task.id);\n      await this._sleep(1000);\n    }\n\n    try {\n      const walletResponse = await this.axios.get('/api/wallet');\n      return JSON.stringify(walletResponse.data.walletInfo);\n    } catch (error) {\n      console.error('Error fetching wallet info:', error);\n      return 'Error retrieving wallet information.';\n    }\n  }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function speechApi(ssml) {\n  const subscriptionKey = 'YOUR_SUBSCRIPTION_KEY';\n  const region = 'YOUR_REGION';\n  const url = `https://${region}.tts.speech.microsoft.com/cognitiveservices/v1`;\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Ocp-Apim-Subscription-Key': subscriptionKey,\n        'Content-Type': 'application/ssml+xml',\n        'Accept': 'audio/mpeg'\n      },\n      body: ssml\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.arrayBuffer();\n  } catch (error) {\n    throw new Error(`Failed to generate speech: ${error.message}`);\n  }\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a class that serves as an HTTP client for interacting with a build service API, handling different types of package-related operations with proper error handling.\n\nClass Description: The BuildService class provides methods to fetch package build statistics, exports, and export sizes from a remote build service. It uses Axios for HTTP requests and implements centralized error handling.\n\nAttributes:\n- operations: [Array] - A predefined list of available API operations, each specifying the operation type, endpoint, and corresponding method name\n\nMethods:\n- _makeHttpRequest: [Name](operation: Object, packageString: String) -> Promise<Object> - Makes an HTTP GET request to the build service with the specified operation and package string, handles the response and errors\n- _handleError: [Name](error: Error, operationType: String) -> Throws CustomError - Centralized error handling that processes different types of errors (response errors, request errors, and other errors) and throws appropriate custom errors\n- getPackageBuildStats: [Name](packageString: String) -> Promise<Object> - Retrieves build statistics for the specified package\n- getPackageExports: [Name](packageString: String) -> Promise<Object> - Retrieves all exports for the specified package\n- getPackageExportSizes: [Name](packageString: String) -> Promise<Object> - Retrieves size information for all exports of the specified package",
    "Canonical_solution": "const axios = require('axios');\nconst CustomError = require('../CustomError');\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        type: 'PACKAGE_BUILD_STATS',\n        endpoint: '/size',\n        methodName: 'getPackageStats',\n      },\n      {\n        type: 'PACKAGE_EXPORTS',\n        endpoint: '/exports',\n        methodName: 'getAllPackageExports',\n      },\n      {\n        type: 'PACKAGE_EXPORTS_SIZES',\n        endpoint: '/exports-sizes',\n        methodName: 'getPackageExportSizes',\n      },\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(\n        `${process.env.BUILD_SERVICE_ENDPOINT}${operation.endpoint}?p=${encodeURIComponent(packageString)}`\n      );\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const contents = error.response.data;\n      throw new CustomError(\n        contents.name || 'BuildError',\n        contents.originalError,\n        contents.extra\n      );\n    } else if (error.request) {\n      throw new CustomError('BuildError', {\n        operation: operationType,\n        reason: 'BUILD_SERVICE_UNREACHABLE',\n        url: error.request._currentUrl,\n      });\n    } else {\n      throw new CustomError('BuildError', error.message, {\n        operation: operationType,\n      });\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_BUILD_STATS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS_SIZES');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass CustomError extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n}\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      { operationType: 'buildStats', endpoint: '/api/packages/{packageString}/build-stats', methodName: 'getPackageBuildStats' },\n      { operationType: 'exports', endpoint: '/api/packages/{packageString}/exports', methodName: 'getPackageExports' },\n      { operationType: 'exportSizes', endpoint: '/api/packages/{packageString}/export-sizes', methodName: 'getPackageExportSizes' }\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    const url = operation.endpoint.replace('{packageString}', packageString);\n    try {\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      throw this._handleError(error, operation.operationType);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        const statusCode = error.response.status;\n        const message = `API Error: ${operationType} failed with status code ${statusCode}`;\n        throw new CustomError(message, statusCode);\n      } else if (error.request) {\n        const message = `Network Error: ${operationType} request failed`;\n        throw new CustomError(message, 'NETWORK_ERROR');\n      } else {\n        const message = `Request Setup Error: ${operationType} failed during setup`;\n        throw new CustomError(message, 'REQUEST_SETUP_ERROR');\n      }\n    } else {\n      const message = `Unexpected Error: ${operationType} failed with unknown error`;\n      throw new CustomError(message, 'UNKNOWN_ERROR');\n    }\n  }\n\n  getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageBuildStats');\n    if (!operation) {\n      throw new CustomError('Operation not found', 'OPERATION_NOT_FOUND');\n    }\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageExports');\n    if (!operation) {\n      throw new CustomError('Operation not found', 'OPERATION_NOT_FOUND');\n    }\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.methodName === 'getPackageExportSizes');\n    if (!operation) {\n      throw new CustomError('Operation not found', 'OPERATION_NOT_FOUND');\n    }\n    return this._makeHttpRequest(operation, packageString);\n  }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  const url = 'https://api.example.com/channels';\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      console.error('Failed to fetch channels:', response.statusText);\n      return [];\n    }\n    const data = await response.json();\n    return data.map(item => ({\n      lang: item.lang,\n      site_id: item.site_id,\n      name: item.name\n    }));\n  } catch (error) {\n    console.error('Error fetching channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes and manages a WebSocket connection, handles events (open, message, error, close), and provides methods for sending data and disconnecting.\n\nClass Description: The WsProvider class encapsulates WebSocket functionality, providing a clean interface for WebSocket communication. It handles connection lifecycle events and ensures proper cleanup when disconnecting.\n\nAttributes:\n#websocket: WebSocket | null - Private field storing the active WebSocket connection instance\n\nMethods:\nconstructor(endpoint: string) -> void - Initializes the WebSocket connection to the specified endpoint\n#connect(endpoint: string) -> void - Private method that establishes the WebSocket connection and sets up event handlers\n#onSocketClose(event: CloseEvent) -> void - Private method handling WebSocket close events\n#onSocketError(error: Event) -> void - Private method handling WebSocket error events\n#onSocketMessage(message: MessageEvent<string>) -> void - Private method handling incoming WebSocket messages\n#onSocketOpen() -> boolean - Private method handling WebSocket open events\nsend(body: string) -> void - Public method for sending data through the WebSocket connection\ndisconnect() -> void - Public method for properly closing the WebSocket connection",
    "Canonical_solution": "import type { Class } from '@polkadot/util/types';\nimport type { JsonRpcResponse, ProviderInterfaceCallback } from '../types.js';\nimport { EventEmitter } from 'eventemitter3';\nimport { isChildClass, isNull, isUndefined } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\n\nclass WsProvider {\n  #websocket: WebSocket | null;\n\n  constructor(endpoint: string) {\n    this.#websocket = null;\n    this.#connect(endpoint);\n  }\n\n  #connect(endpoint: string): void {\n    try {\n      this.#websocket = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket as unknown as Class<WebSocket>, WebSocket)\n        ? new WebSocket(endpoint)\n        : new WebSocket(endpoint, undefined, {});\n\n      if (this.#websocket) {\n        this.#websocket.onclose = this.#onSocketClose;\n        this.#websocket.onerror = this.#onSocketError;\n        this.#websocket.onmessage = this.#onSocketMessage;\n        this.#websocket.onopen = this.#onSocketOpen;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  #onSocketClose(event: CloseEvent): void {\n    this.#websocket = null;\n  }\n\n  #onSocketError(error: Event): void {\n    // Handle error\n  }\n\n  #onSocketMessage(message: MessageEvent<string>): void {\n    const response = JSON.parse(message.data) as JsonRpcResponse<string>;\n    // Process message\n  }\n\n  #onSocketOpen(): boolean {\n    return true;\n  }\n\n  public send(body: string): void {\n    if (!this.#websocket) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.#websocket.send(body);\n  }\n\n  public disconnect(): void {\n    if (this.#websocket) {\n      this.#websocket.close(1000);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WsProvider {\n  #websocket = null;\n\n  constructor(endpoint) {\n    this.#connect(endpoint);\n  }\n\n  #connect(endpoint) {\n    this.#websocket = new WebSocket(endpoint);\n    this.#websocket.addEventListener('open', this.#onSocketOpen.bind(this));\n    this.#websocket.addEventListener('message', this.#onSocketMessage.bind(this));\n    this.#websocket.addEventListener('error', this.#onSocketError.bind(this));\n    this.#websocket.addEventListener('close', this.#onSocketClose.bind(this));\n  }\n\n  #onSocketOpen() {\n    return true;\n  }\n\n  #onSocketMessage(message) {\n    console.log('Received message:', message.data);\n  }\n\n  #onSocketError(error) {\n    console.error('WebSocket error:', error);\n  }\n\n  #onSocketClose(event) {\n    console.log('WebSocket closed:', event.reason);\n  }\n\n  send(body) {\n    if (this.#websocket && this.#websocket.readyState === WebSocket.OPEN) {\n      this.#websocket.send(body);\n    } else {\n      console.warn('WebSocket is not open. Could not send message.');\n    }\n  }\n\n  disconnect() {\n    if (this.#websocket) {\n      this.#websocket.close();\n      this.#websocket = null;\n    }\n  }\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a WebSocket server class for peer-to-peer communication that handles connections, messages, and room management.\n\nClass Description: The SnapdropServer class represents a WebSocket server that facilitates peer-to-peer communication. It manages WebSocket connections, handles incoming messages, and maintains rooms for peer grouping. The server also handles connection headers and keeps connections alive.\n\nAttributes:\n- _wss: [WebSocket.Server] - The WebSocket server instance\n- _rooms: [Object] - A dictionary tracking peers grouped by their IP addresses (rooms)\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers\n- _onConnection(peer: Peer) -> void - Handles new WebSocket connections, sets up message handlers, and joins the peer to a room\n- _onHeaders(headers: Array, response: Object) -> void - Processes HTTP headers during WebSocket handshake, setting cookies if needed\n- _onMessage(sender: Peer, message: string) -> void - Handles incoming messages from peers, routing them to appropriate recipients\n- _send(peer: Peer, message: Object) -> void - Sends a message to a specific peer over WebSocket connection\n- _joinRoom(peer: Peer) -> void - Adds a peer to their respective room (Not shown in reference but implied)\n- _leaveRoom(peer: Peer) -> void - Removes a peer from their room (Not shown in reference but implied)\n- _keepAlive(peer: Peer) -> void - Maintains connection with periodic pings (Not shown in reference but implied)",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass SnapdropServer {\n    constructor(port) {\n        this._wss = new WebSocket.Server({ port: port });\n        this._wss.on('connection', (socket, request) => this._onConnection(new Peer(socket, request)));\n        this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n\n        this._rooms = {};\n    }\n\n    _onConnection(peer) {\n        this._joinRoom(peer);\n        peer.socket.on('message', message => this._onMessage(peer, message));\n        peer.socket.on('error', console.error);\n        this._keepAlive(peer);\n\n        this._send(peer, {\n            type: 'display-name',\n            message: {\n                displayName: peer.name.displayName,\n                deviceName: peer.name.deviceName\n            }\n        });\n    }\n\n    _onHeaders(headers, response) {\n        if (response.headers.cookie && response.headers.cookie.indexOf('peerid=') > -1) return;\n        response.peerId = Peer.uuid();\n        headers.push('Set-Cookie: peerid=' + response.peerId + \"; SameSite=Strict; Secure\");\n    }\n\n    _onMessage(sender, message) {\n        try {\n            message = JSON.parse(message);\n        } catch (e) {\n            return;\n        }\n\n        switch (message.type) {\n            case 'disconnect':\n                this._leaveRoom(sender);\n                break;\n            case 'pong':\n                sender.lastBeat = Date.now();\n                break;\n        }\n\n        if (message.to && this._rooms[sender.ip]) {\n            const recipientId = message.to;\n            const recipient = this._rooms[sender.ip][recipientId];\n            delete message.to;\n            message.sender = sender.id;\n            this._send(recipient, message);\n            return;\n        }\n    }\n\n    _send(peer, message) {\n        if (!peer) return;\n        if (this._wss.readyState !== this._wss.OPEN) return;\n        message = JSON.stringify(message);\n        peer.socket.send(message, error => '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class SnapdropServer {\n  constructor(port) {\n    this._wss = new WebSocket.Server({ port });\n    this._rooms = {};\n    this._wss.on('connection', (peer) => this._onConnection(peer));\n    this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n  }\n\n  _onConnection(peer) {\n    const ip = peer._socket.remoteAddress;\n    this._joinRoom(peer, ip);\n    peer.on('message', (message) => this._onMessage(peer, message));\n    peer.on('close', () => this._leaveRoom(peer, ip));\n    this._keepAlive(peer);\n  }\n\n  _onHeaders(headers, response) {\n    const ip = headers['x-forwarded-for'] || headers['x-real-ip'] || headers['host'];\n    if (!ip) {\n      response.setHeader('Set-Cookie', `ip=${headers['host']}; Path=/`);\n    }\n  }\n\n  _onMessage(sender, message) {\n    const parsed = JSON.parse(message);\n    const ip = sender._socket.remoteAddress;\n    const room = this._rooms[ip] || [];\n    room.forEach(peer => {\n      this._send(peer, parsed);\n    });\n  }\n\n  _send(peer, message) {\n    peer.send(JSON.stringify(message));\n  }\n\n  _joinRoom(peer, ip) {\n    if (!this._rooms[ip]) {\n      this._rooms[ip] = [];\n    }\n    this._rooms[ip].push(peer);\n  }\n\n  _leaveRoom(peer, ip) {\n    const room = this._rooms[ip];\n    if (room) {\n      const index = room.indexOf(peer);\n      if (index !== -1) {\n        room.splice(index, 1);\n      }\n    }\n  }\n\n  _keepAlive(peer) {\n    setInterval(() => {\n      peer.ping();\n    }, 5000);\n  }\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles incoming connections, manages sessions, and processes messages with customizable handlers.\n\nClass Description: The XVIZServer class is a WebSocket server implementation that manages WebSocket connections, delegates session handling to provided handlers, and provides logging capabilities. It wraps the 'ws' library functionality with additional session management features.\n\nAttributes:\n- _server: [WebSocket.Server] - The underlying WebSocket server instance\n- handlers: [Array] - Array of handler objects responsible for managing sessions\n- options: [Object] - Configuration options for the server, merged with defaults\n\nMethods:\n- constructor(handlers, options, callback) -> [XVIZServer] - Initializes the WebSocket server with message handlers, options, and an optional callback. Throws an error if no handlers are provided.\n- get server() -> [WebSocket.Server] - Getter for the underlying WebSocket server instance\n- close(cb) -> [void] - Closes the WebSocket server, accepting an optional callback\n- handleSession(socket, request) -> [Promise<void>] - Handles new WebSocket connections, delegates to handlers for session creation, and closes the connection if no handler accepts it\n- log(...msg) -> [void] - Logs messages using the configured logger if available",
    "Canonical_solution": "const WebSocket = require('ws');\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "import WebSocket from 'ws';\n\nclass XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers || handlers.length === 0) {\n      throw new Error('No handlers provided');\n    }\n    this.handlers = handlers;\n    const defaultOptions = {\n      port: 8080,\n      host: 'localhost',\n      logger: console.log\n    };\n    this.options = Object.assign({}, defaultOptions, options);\n    this._server = new WebSocket.Server(this.options);\n    this._server.on('connection', (socket, request) => {\n      this.handleSession(socket, request);\n    });\n    if (callback) {\n      callback();\n    }\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    for (const handler of this.handlers) {\n      try {\n        const result = await handler.handle(socket, request);\n        if (result) {\n          return;\n        }\n      } catch (err) {\n        this.log('Error handling session:', err);\n      }\n    }\n    socket.close();\n  }\n\n  log(...msg) {\n    if (this.options.logger) {\n      this.options.logger(...msg);\n    }\n  }\n}"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Create a WebSocket server class that manages WebSocket connections for a webview application, handling connection events and maintaining active connections.\n\nClass Description: The WebviewServer class is responsible for setting up and managing a WebSocket server that facilitates real-time communication between a webview application and a data source. It maintains active connections and provides server information.\n\nAttributes:\n- server: [http.Server] - The underlying HTTP server instance used for WebSocket communication\n- secret: [string] - A secret string used for authentication or security purposes\n- connections: [Set<WebviewConnection>] - A collection of active WebSocket connections\n- config: [Config] - Configuration object containing server settings\n\nMethods:\n- constructor(dataSource: [VisualizationWatchModel], config: [Config]) -> [void] - Initializes the WebSocket server, sets up connection handlers, and stores the configuration\n- get port() -> [number] - Returns the port number on which the server is listening for connections",
    "Canonical_solution": "import { WebSocketStream } from \"@hediet/typed-json-rpc-websocket\";\nimport WebSocket = require(\"ws\");\nimport * as express from \"express\";\nimport * as http from \"http\";\n\nexport class WebviewServer {\n\tprivate readonly server: http.Server;\n\tpublic readonly secret: string;\n\n\tpublic readonly connections = new Set<WebviewConnection>();\n\n\tconstructor(\n\t\tdataSource: VisualizationWatchModel,\n\t\tprivate readonly config: Config\n\t) {\n\t\tconst app = express();\n\t\tthis.server = app.listen();\n\n\t\tconst wss = new WebSocket.Server({ server: this.server });\n\t\twss.on(\"connection\", async ws => {\n\t\t\tconst stream = new WebSocketStream(ws);\n\t\t\tconst c = new WebviewConnection(\n\t\t\t\tdataSource,\n\t\t\t\tstream,\n\t\t\t\tthis,\n\t\t\t\tconfig,\n\t\t\t\tthis.secret\n\t\t\t);\n\t\t\tthis.connections.add(c);\n\t\t\tawait stream.onClosed;\n\t\t\tthis.connections.delete(c);\n\t\t});\n\t}\n\n\tpublic get port(): number {\n\t\tconst httpPort = (this.server.address() as AddressInfo).port;\n\t\treturn httpPort;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "import WebSocket from 'ws';\nimport http from 'http';\n\nclass WebviewServer {\n  constructor(dataSource, config) {\n    this.dataSource = dataSource;\n    this.config = config;\n    this.secret = config.secret;\n    this.connections = new Set();\n\n    this.server = http.createServer((req, res) => {\n      res.writeHead(404);\n      res.end();\n    });\n\n    const wss = new WebSocket.Server({ server: this.server });\n\n    wss.on('connection', (ws, request) => {\n      const secret = request.headers['x-secret'] || request.url?.split('?')[1]?.split('=')[1];\n      if (secret !== this.secret) {\n        ws.close(4001, 'Unauthorized');\n        return;\n      }\n\n      const connection = new WebviewConnection(ws, this.dataSource);\n      this.connections.add(connection);\n\n      ws.on('message', (message) => {\n        // Handle incoming messages\n      });\n\n      ws.on('close', () => {\n        this.connections.delete(connection);\n      });\n    });\n\n    this.server.listen(config.port, () => {\n      console.log(`Server running on port ${config.port}`);\n    });\n  }\n\n  get port() {\n    return this.server.address().port;\n  }\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a WebSocket server that handles MQTT protocol messages using the Aedes broker, with event listeners for various client interactions and message handling.\n\nFunction Description: The function `createWebSocketServer` initializes and starts a WebSocket server that integrates with the Aedes MQTT broker. It sets up event handlers for client connections, errors, message publishing, subscriptions, and client disconnections. The server listens on a specified port for WebSocket connections and routes MQTT messages through the Aedes broker.\n\nInput: None (The function does not take any input parameters; port and configuration are hardcoded within the function.)\n\nOutput: None (The function does not return any value; it creates and maintains a running WebSocket server with event listeners.)",
    "Canonical_solution": "function createWebSocketServer() {\n    const aedes = require('aedes')();\n    const httpServer = require('http').createServer();\n    const WebSocket = require('ws');\n    const wsPort = 8080;\n\n    const wss = new WebSocket.Server({ server: httpServer });\n    wss.on('connection', function connection(ws) {\n        const duplex = WebSocket.createWebSocketStream(ws);\n        aedes.handle(duplex);\n    });\n\n    httpServer.listen(wsPort, () => {\n        console.log('websocket server listening on port', wsPort);\n    });\n\n    aedes.on('clientError', (client, err) => {\n        console.log('client error', client.id, err.message, err.stack);\n    });\n\n    aedes.on('connectionError', (client, err) => {\n        console.log('client error', client, err.message, err.stack);\n    });\n\n    aedes.on('publish', (packet, client) => {\n        if (packet && packet.payload) {\n            console.log('publish packet:', packet.payload.toString());\n        }\n        if (client) {\n            console.log('message from client', client.id);\n        }\n    });\n\n    aedes.on('subscribe', (subscriptions, client) => {\n        if (client) {\n            console.log('subscribe from client', subscriptions, client.id);\n        }\n    });\n\n    aedes.on('client', (client) => {\n        console.log('new client', client.id);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 90,
    "wrong_result": "function createWebSocketServer() {\n  const aedes = require('aedes')();\n  const WebSocketServer = require('ws').Server;\n  const http = require('http');\n\n  const server = http.createServer();\n  const wsServer = new WebSocketServer({ server });\n\n  aedes.handle(wsServer);\n\n  wsServer.on('connection', (socket) => {\n    console.log('Client connected');\n    socket.on('message', (data) => {\n      console.log('Received message:', data);\n    });\n    socket.on('close', () => {\n      console.log('Client disconnected');\n    });\n  });\n\n  aedes.on('client', (client) => {\n    console.log('Client connected to MQTT broker');\n  });\n  aedes.on('message', (packet, client) => {\n    console.log('Message received:', packet.topic, packet.payload.toString());\n  });\n  aedes.on('subscribe', (subscriptions, client) => {\n    console.log('Client subscribed to topics');\n  });\n\n  server.listen(8080, () => {\n    console.log('WebSocket MQTT server is running on port 8080');\n  });\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass HTTPClient {\n  constructor() {\n    this.requestModule = 'axios';\n  }\n\n  queryStr(options) {\n    return Object.keys(options)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(options[key])}`)\n      .join('&');\n  }\n\n  isJSONString(str) {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  isJson(obj) {\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n  }\n\n  async httpRequest(options) {\n    const { method, url, headers, params, body } = options;\n\n    if (!method || !['GET', 'POST'].includes(method.toUpperCase())) {\n      throw new Error('Invalid HTTP method');\n    }\n\n    const axiosConfig = {\n      method: method.toUpperCase(),\n      url,\n      headers: headers || {},\n    };\n\n    if (method.toUpperCase() === 'GET') {\n      axiosConfig.params = params;\n    } else {\n      if (body) {\n        if (typeof body === 'object' && this.isJson(body)) {\n          if (!axiosConfig.headers['Content-Type']) {\n            axiosConfig.headers['Content-Type'] = 'application/json';\n          }\n          axiosConfig.data = JSON.stringify(body);\n        } else if (typeof body === 'string' && this.isJSONString(body)) {\n          if (!axiosConfig.headers['Content-Type']) {\n            axiosConfig.headers['Content-Type'] = 'application/json';\n          }\n          axiosConfig.data = body;\n        } else {\n          axiosConfig.data = body;\n        }\n      }\n    }\n\n    try {\n      const response = await axios.request(axiosConfig);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript to handle real-time bidirectional communication between clients and the server.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io. It sets up event listeners for client connections, messages, and disconnections. The server broadcasts received messages to all connected clients.\n\nInput:\n- `port` (Number): The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:\n- Returns the `socketServer` instance (Object) which can be used to further configure or interact with the WebSocket server.\n\nNote: The function internally uses the `http` module to create an HTTP server and binds socket.io to it for WebSocket communication. The server logs connection, message, and disconnection events to the console.",
    "Canonical_solution": "const http = require(\"http\");\nconst socketIo = require(\"socket.io\");\n\nfunction setupWebSocketServer(port) {\n    const app = express();\n    const webServer = http.createServer(app);\n    const socketServer = socketIo(webServer, {\"log level\": 1});\n\n    socketServer.on(\"connection\", (socket) => {\n        console.log(\"New client connected\");\n\n        socket.on(\"message\", (data) => {\n            console.log(\"Message received: \", data);\n            socketServer.emit(\"message\", data);\n        });\n\n        socket.on(\"disconnect\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    webServer.listen(port, () => {\n        console.log(\"WebSocket server listening on port: \" + port);\n    });\n\n    return socketServer;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "const http = require('http');\nconst io = require('socket.io');\n\nfunction setupWebSocketServer(port) {\n  const server = http.createServer();\n  const socketServer = io(server);\n\n  socketServer.on('connection', (socket) => {\n    console.log('Client connected');\n    socket.on('message', (data) => {\n      console.log('Message received:', data);\n      socketServer.emit('message', data);\n    });\n    socket.on('disconnect', () => {\n      console.log('Client disconnected');\n    });\n  });\n\n  server.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n  });\n\n  return socketServer;\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Write a function that scrapes TV channel information from a webpage, processes the data, and returns a list of channel objects with their details.\n\nFunction Description: The function `getChannels` asynchronously fetches HTML content from a URL, parses it to extract TV channel information, and returns an array of channel objects. Each channel object contains language, site ID, and name. The function uses Axios for HTTP requests and Cheerio for HTML parsing.\n\nInput: None (The function uses an implicit `this.url()` method to generate the target URL)\n\nOutput: Array<Object> - Returns an array of channel objects with the following structure:\n[\n  {\n    lang: string,      // Language code of the channel (e.g., 'tr')\n    site_id: string,   // Unique identifier for the channel\n    name: string       // Name of the channel\n  },\n  ...\n]",
    "Canonical_solution": "async function getChannels() {\n    const channels = {};\n    const axios = require('axios');\n    const data = await axios\n        .get(this.url({ date: dayjs() }))\n        .then(r => r.data)\n        .catch(console.error);\n\n    const $ = cheerio.load(data);\n    $('.channelContent').toArray()\n        .forEach(el => {\n            const item = $(el);\n            const channelId = item.find('.channelDetail .tvGuideResult-box-wholeDates-title')\n                .first()\n                .attr('onclick');\n            if (channelId) {\n                const site_id = channelId.match(/\\s(\\d+)\\)/)[1];\n                if (channels[site_id] === undefined) {\n                    channels[site_id] = {\n                        lang: 'tr',\n                        site_id,\n                        name: item.find('#channelID').val()\n                    };\n                }\n            }\n        });\n\n    return Object.values(channels);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  const response = await axios.get(this.url());\n  const $ = cheerio.load(response.data);\n  const channels = [];\n\n  $('.channel-list li').each((i, el) => {\n    const lang = $(el).find('.lang').text().trim();\n    const siteId = $(el).attr('data-site-id') || '';\n    const name = $(el).find('.channel-name').text().trim();\n    channels.push({ lang, site_id: siteId, name });\n  });\n\n  return channels;\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const https = require('https');\n\nfunction installTelemetry() {\n  const telemetryEnabled = process.env.TUNNELMOLE_TELEMETRY?.toLowerCase() === 'true';\n  if (!telemetryEnabled) return;\n\n  const data = {\n    nodeVersion: process.version,\n    platform: process.platform\n  };\n\n  const postData = JSON.stringify(data);\n\n  const options = {\n    hostname: 'telemetry.example.com',\n    port: 443,\n    path: '/install',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Length': postData.length\n    }\n  };\n\n  const req = https.request(options, (res) => {\n    // Ignore response\n  });\n\n  req.on('error', (e) => {\n    // Silently handle error\n  });\n\n  req.write(postData);\n  req.end();\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class SauceLabsClient {\n  constructor() {\n    this.auth = { username: '', token: '' };\n    this.baseURL = 'https://api.saucelabs.com/v1/';\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.username = saucelabsUsername;\n    this.auth.token = saucelabsToken;\n  }\n\n  get(path, callback) {\n    const url = this.baseURL + path;\n    const { username, token } = this.auth;\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Basic ' + btoa(username + ':' + token)\n      }\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(data => callback(null, data))\n    .catch(error => callback(error));\n  }\n\n  post(path, data, callback) {\n    const url = this.baseURL + path;\n    const { username, token } = this.auth;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic ' + btoa(username + ':' + token)\n      },\n      body: JSON.stringify(data)\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(data => callback(null, data))\n    .catch(error => callback(error));\n  }\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using an HTTP POST request and triggers a callback function upon completion or failure.\n\nFunction Description: The function uses Axios to send an HTTP POST request to a specified webhook URL with event and data payload. It triggers a callback function (triggerActivity) when the request succeeds or fails. The request includes custom headers for identification.\n\nInput:\n- url: [String] - The webhook URL to which the POST request will be sent\n- event: [String/Object] - The event information to be sent in the request payload\n- data: [Object] - The data payload to be sent in the request\n- triggerActivity: [Function] - Callback function to be triggered after request completion (takes an optional error parameter)\n\nOutput: [None] - The function doesn't return anything but triggers the callback function",
    "Canonical_solution": "const axios = require(\"axios\");\n\nfunction postWebhook(url, event, data, triggerActivity) {\n    axios.post(url, {event, data}, {headers: {\"user-agent\": \"MySpeed/WebhookAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nfunction sendWebhook(url, event, data, triggerActivity) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'X-Identification': 'unique-id'\n  };\n  axios.post(url, { event, data }, { headers })\n    .then(() => triggerActivity(null))\n    .catch(error => triggerActivity(error));\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Write a function that retrieves TV channel information from multiple regions, processes the data, and returns a unique list of channels based on their site IDs.\n\nFunction Description: The function `channels` makes HTTP GET requests to a TV channel API for multiple regions, collects channel data from all available pages for each region, and returns a deduplicated list of channels. It uses axios for HTTP requests and lodash for data processing.\n\nInput: None (The function uses hardcoded region IDs internally)\n\nOutput: An array of objects representing unique TV channels, where each object contains:\n- lang: string - Language code ('ru' for Russian)\n- name: string - Name of the TV channel\n- site_id: string/number - Unique identifier for the channel on the site\n\nThe output is deduplicated based on the site_id field using lodash's uniqBy function.",
    "Canonical_solution": "async function channels() {\n    const _ = require('lodash')\n    const axios = require('axios')\n\n    const regions = [5506, 1096, 1125, 285]\n    let channels = []\n    for (let region of regions) {\n        const totalPages = await getTotalPageCount(region)\n        const pages = Array.from(Array(totalPages).keys())\n        for (let page of pages) {\n            const data = await axios\n                .get('https://tv.mail.ru/ajax/channel/list/', {\n                    params: { page },\n                    headers: {\n                        cookie: `s=fver=0|geo=${region};`\n                    }\n                })\n                .then(r => r.data)\n                .catch(console.log)\n\n            data.channels.forEach(item => {\n                channels.push({\n                    lang: 'ru',\n                    name: item.name,\n                    site_id: item.id\n                })\n            })\n        }\n    }\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\nimport _ from 'lodash';\n\nasync function channels() {\n  const regions = ['ru', 'us', 'fr'];\n  const regionLangMap = { 'ru': 'ru', 'us': 'en', 'fr': 'fr' };\n  const allChannels = [];\n\n  for (const region of regions) {\n    const lang = regionLangMap[region];\n    let page = 1;\n    while (true) {\n      try {\n        const response = await axios.get(`https://api.example.com/channels?region=${region}&page=${page}`);\n        const data = response.data;\n        if (data.length === 0) break;\n        allChannels.push(...data.map(channel => ({ ...channel, lang })));\n        page++;\n      } catch (error) {\n        console.error(`Error fetching data for region ${region}, page ${page}:`, error);\n        break;\n      }\n    }\n  }\n\n  return _.uniqBy(allChannels, 'site_id');\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = \"https://bundlesize-store.now.sh/values\";\n    this.enabled = Boolean(repo && token);\n  }\n\n  get() {\n    if (!this.enabled) {\n      return Promise.resolve({});\n    }\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    const url = `${this.url}?repo=${encodeURIComponent(sanitizedRepo)}&sha=${encodeURIComponent(this.sha)}`;\n    return fetch(url, {\n      headers: {\n        Authorization: `Bearer ${this.token}`\n      }\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .catch(error => {\n      console.error('Error fetching bundle sizes:', error);\n      return {};\n    });\n  }\n\n  set(values) {\n    if (!this.enabled) {\n      return;\n    }\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    const payload = {\n      repo: sanitizedRepo,\n      sha: this.sha,\n      values: values\n    };\n    fetch(this.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      },\n      body: JSON.stringify(payload)\n    })\n    .catch(error => {\n      console.error('Error setting bundle sizes:', error);\n    });\n  }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchData() {\n  const url = 'https://covid19.health.gov.il/api/v1/data';\n  const body = JSON.stringify({ datasets: ['updates', 'patient_stats', 'test_results', 'demographics'] });\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body\n  };\n\n  try {\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with optional path extension and error data, then triggers an activity callback based on the request's success or failure.\n\nFunction Description: The function `sendPing` is an asynchronous function that constructs a target URL by combining a base URL and an optional path, then sends an HTTP POST request using Axios. The request includes error data in the payload and a custom user-agent header. Depending on the request's outcome, it triggers a callback function (`triggerActivity`) with a success or failure indicator.\n\nInput:  \n- `url`: [String] - The base URL to which the request will be sent.  \n- `path`: [String] (optional) - An additional path segment to append to the base URL.  \n- `error`: [Any] - Data to be sent as the request payload (typically error information).  \n- `triggerActivity`: [Function] - A callback function to be executed after the request completes, receiving a boolean parameter indicating failure (true) or success (false/undefined).  \n\nOutput:  \n- None (The function's primary effect is the HTTP request and callback execution, not a direct return value).",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function sendPing(url, path, error, triggerActivity) {\n    if (url == null) return;\n    if (path) url += \"/\" + path;\n\n    await axios.post(url, error, {headers: {\"user-agent\": \"MySpeed/HealthAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendPing(url, path, error, triggerActivity) {\n  let targetUrl = url;\n  if (path) {\n    targetUrl += '/' + path;\n  }\n  try {\n    const response = await axios.post(targetUrl, error, {\n      headers: {\n        'User-Agent': 'MyCustomUserAgent'\n      }\n    });\n    if (response.status >= 200 && response.status < 300) {\n      triggerActivity(false);\n    } else {\n      triggerActivity(true);\n    }\n  } catch (error) {\n    triggerActivity(true);\n  }\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a function to send emails using different email service providers (Mailgun and Sendgrid) through HTTP requests, with error handling and promise-based asynchronous operation.\n\nFunction Description: The function `sendMail` sends an email using a configured transporter (either Mailgun or Sendgrid). It wraps the transporter's send operation in a Promise for better async handling. The transporter is configured to make HTTP requests to the respective email service API.\n\nInput:\n- `to`: [String] - Recipient email address\n- `subject`: [String] - Email subject\n- `text`: [String] - Email body content\n- `options`: [Object] (optional) - Additional email options (defaults to empty object)\n\nOutput:\n- [Promise] - Resolves with email sending success info, or rejects with an error if sending fails.\n\n---\n\nClass Description: (Not applicable, as the reference code is at the function level)",
    "Canonical_solution": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    transporter.sendMail({\n      from: `\"${ config.plugins.email.name || '' }\" <${ config.plugins.email.email || config.plugins.email.username }>`,\n      to,\n      subject,\n      text,\n    }, (error, info) => {\n      if(error) {\n        return reject(error);\n      }\n      return resolve(info);\n    });\n  });\n}\n\n// External libraries and global variables used:\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst config = appRequire('services/config').all();\nlet transporter;\n\n// Mailgun implementation\ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  const form = new FormData();\n  form.append('from', options.from);\n  form.append('to', options.to);\n  form.append('subject', options.subject);\n  form.append('text', options.text);\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: form.getHeaders(),\n    data: form,\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};\n\n// Sendgrid implementation  \ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${ emailConfig.apiKey }`,\n    },\n    data: {\n      personalizations: [{\n        to: [{ email: options.to }]\n      }],\n      from: { email: options.from },\n      subject: options.subject,\n      content: [{\n        type: 'text/plain',\n        value: options.text,\n      }]\n    },\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    const { transporter = 'mailgun', apiKey, domain } = options;\n    \n    let url, payload;\n\n    if (transporter === 'mailgun') {\n      url = `https://api.mailgun.net/v3/${domain}/messages`;\n      payload = {\n        from: 'your-email@example.com',\n        to,\n        subject,\n        text\n      };\n    } else if (transporter === 'sendgrid') {\n      url = 'https://api.sendgrid.com/v3/mail/send';\n      payload = {\n        personalizations: [{ to: [{ email: to }] }],\n        from: { email: 'your-email@example.com' },\n        subject,\n        content: [{ type: 'text/plain', value: text }]\n      };\n    } else {\n      reject(new Error('Unsupported transporter'));\n      return;\n    }\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    })\n    .then(response => {\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return response.json();\n    })\n    .then(data => resolve({ success: true, data }))\n    .catch(error => reject({ success: false, error }));\n  });\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create an asynchronous function that fetches TV channel data from a specified API endpoint and processes it into a standardized format.\n\nFunction Description: The function makes an HTTP GET request to retrieve TV channel information from a remote API. It processes the response to extract relevant channel details (language, site ID, and name) and returns them in a structured array format. The function includes error handling to log any request failures.\n\nInput: None (The function uses a hardcoded API URL and parameters)\n\nOutput: An array of objects where each object represents a TV channel with the following properties:\n- lang: String - The language code for the channel (hardcoded as 'sq' in this case)\n- site_id: String - The unique identifier for the channel from the API\n- name: String - The display name of the channel",
    "Canonical_solution": "async function channels() {\n    const axios = require('axios')\n    const data = await axios\n        .get('https://www.tvim.tv/script/epg/category_channels?category=all&filter=playable')\n        .then(r => r.data)\n        .catch(console.log)\n\n    let channels = []\n    data.data.forEach(item => {\n        channels.push({\n            lang: 'sq',\n            site_id: item.epg_id,\n            name: item.name\n        })\n    })\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const API_URL = 'https://api.example.com/tv-channels';\n\nasync function getTVChannels() {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    const data = await response.json();\n    return data.map(channel => ({\n      lang: 'sq',\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    console.error('Failed to fetch TV channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function downloadVideo(url, desc) {\n  if (!url) {\n    throw new Error('URL is required');\n  }\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const blob = await response.blob();\n    const urlObj = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = urlObj;\n    a.download = desc;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(urlObj);\n  } catch (error) {\n    console.error('Error downloading video:', error);\n  }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const Tool = class {\n  constructor() {\n    this._node = null;\n    this._isSurge = false;\n    this._isQuanX = false;\n    this.isSurge = this._isSurge;\n    this.isQuanX = this._isQuanX;\n    this.isResponse = false;\n\n    if (typeof $request !== 'undefined' || typeof $response !== 'undefined') {\n      if (typeof $request !== 'undefined') this._isSurge = true;\n      if (typeof $response !== 'undefined') this._isQuanX = true;\n      this.isResponse = true;\n    } else if (typeof process !== 'undefined' && process.versions.node) {\n      this._node = {\n        http: require('http'),\n        https: require('https'),\n        url: require('url'),\n        fs: require('fs')\n      };\n    }\n  }\n\n  notify(title, subtitle, message, option) {\n    if (this._isSurge || this._isQuanX) {\n      $notify(title, subtitle, message, option);\n    } else if (this._node) {\n      console.log(`Notification: ${title}\\nSubtitle: ${subtitle}\\nMessage: ${message}`);\n    }\n  }\n\n  write(value, key) {\n    if (this._isSurge || this._isQuanX) {\n      $persistentStore.write(value, key);\n      return true;\n    } else if (this._node) {\n      require('fs').writeFileSync(key, value);\n      return true;\n    }\n    return false;\n  }\n\n  read(key) {\n    if (this._isSurge || this._isQuanX) {\n      return $persistentStore.read(key);\n    } else if (this._node) {\n      try {\n        return require('fs')..readFileSync(key, 'utf-8');\n      } catch (e) {\n        return '';\n      }\n    }\n    return '';\n  }\n\n  get(options, callback) {\n    if (typeof options === 'string') options = { url: options };\n    if (this._isSurge || this._isQuanX) {\n      $request.get(options, callback);\n    } else if (this._node) {\n      const { http, https, url, fs } = this._node;\n      const parsedUrl = new url.URL(options.url);\n      const protocol = parsedUrl.protocol === 'https:' ? https : http;\n      const req = protocol.request({\n        hostname: parsedUrl.hostname,\n        port: parsedUrl.port,\n        path: parsedUrl.pathname + (parsedUrl.search ? parsedUrl.search : ''),\n        method: 'GET'\n      }, (res) => {\n        const data = [];\n        res.on('data', (chunk) => data.push(chunk));\n        res.on('end', () => {\n          callback(null, {\n            statusCode: res.statusCode,\n            headers: res.headers,\n            body: data.join('')\n          });\n        });\n      }).on('error', (err) => {\n        callback(err, null);\n      });\n      req.end();\n    }\n  }\n\n  post(options, callback) {\n    if (typeof options === 'string') options = { url: options };\n    if (this._isSurge || this._isQuanX) {\n      $request.post(options, callback);\n    } else if (this._node) {\n      const { http, https, url, fs } = this._node;\n      const parsedUrl = new url.URL(options.url);\n      const protocol = parsedUrl.protocol === 'https:' ? https : http;\n      const req = protocol.request({\n        hostname: parsedUrl.hostname,\n        port: parsedUrl.port,\n        path: parsedUrl.pathname + (parsedUrl.search ? parsedUrl.search : ''),\n        method: 'POST',\n        headers: options.headers\n      }, (res) => {\n        const data = [];\n        res.on('data', (chunk) => data.push(chunk));\n        res.on('end', () => {\n          callback(null, {\n            statusCode: res.statusCode,\n            headers: res.headers,\n            body: data.join('')\n          });\n        });\n      }).on('error', (err) => {\n        callback(err, null);\n      });\n      req.write(options.body || '');\n      req.end();\n    }\n  }\n\n  _status(response) {\n    return {\n      code: response.statusCode,\n      text: response.statusMessage\n    };\n  }\n};"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Implement an asynchronous function that makes an HTTP request using XMLHttpRequest with timeout handling, customizable request options, and proper error management.\n\nFunction Description: The function `_xhrRequestWithTimeout` performs an HTTP request using XMLHttpRequest with configurable method, URL, and request options. It includes timeout handling, response type configuration, custom headers, and proper cleanup of resources. The function returns a Promise that resolves with the XMLHttpRequest object on success or rejects with an error or timeout message.\n\nInput:\n- `method` (string): The HTTP method to use for the request (e.g., 'GET', 'POST').\n- `url` (string): The URL to which the request is sent.\n- `options` (RequestOptions): An object containing additional request configurations:\n  - `responseType` (optional, string): The expected response type (e.g., 'json', 'arraybuffer').\n  - `headers` (optional, object): Key-value pairs representing request headers.\n  - `body` (optional, any): The request payload to send.\n\nOutput:\n- Returns a Promise that:\n  - Resolves with the XMLHttpRequest object if the request succeeds.\n  - Rejects with an error object if the request fails.\n  - Rejects with the string 'timeout' if the request times out.",
    "Canonical_solution": "async function _xhrRequestWithTimeout(method: string, url: string, options: RequestOptions): Promise<XMLHttpRequest> {\n    return new Promise((resolve, reject) => {\n        log('[requests XHR]', method, url);\n        let timedOut = false;\n        const timer = setTimeout(() => {\n            timedOut = true;\n            reject('timeout');\n        }, config.requestTimeout);\n        const xhr = new XMLHttpRequest();\n        xhr.open(method, url, true);\n        if (options.responseType) {\n            xhr.responseType = options.responseType;\n        }\n        if (options.headers) {\n            for (const key in options.headers) {\n                xhr.setRequestHeader(key, options.headers[key]);\n            }\n        }\n        xhr.onload = (): void => {\n            if (timedOut) {\n                return;\n            }\n            clearTimeout(timer);\n            resolve(xhr);\n        };\n        xhr.onerror = (error): void => {\n            if (timedOut) {\n                return;\n            }\n            clearTimeout(timer);\n            reject(error);\n        };\n        let body = options.body;\n        if (typeof (body) === 'object' && !isArrayBufferView(body) && body instanceof ArrayBuffer) {\n            body = new Uint8Array(body);\n        }\n        xhr.send(body);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function _xhrRequestWithTimeout(method, url, options) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    const timeout = options && options.timeout || 5000;\n    xhr.timeout = timeout;\n    if (options && options.responseType) {\n      xhr.responseType = options.responseType;\n    }\n    if (options && options.headers) {\n      Object.keys(options.headers).forEach(key => {\n        xhr.setRequestHeader(key, options.headers[key]);\n      });\n    }\n    if (options && options.body) {\n      xhr.send(options.body);\n    } else {\n      xhr.send();\n    }\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(xhr);\n        } else {\n          reject(new Error(`HTTP error: ${xhr.status} ${xhr.statusText}`));\n        }\n      }\n    };\n    xhr.ontimeout = () => {\n      reject('timeout');\n    };\n    xhr.onerror = () => {\n      reject(new Error('Network error'));\n    };\n  });\n}"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Implement a class for handling chunked data loading via XMLHttpRequest with support for range requests, progress tracking, and error handling.\n\nClass Description: The MozChunkedLoader class is designed to handle asynchronous loading of chunked binary data from a server using XMLHttpRequest with 'moz-chunked-arraybuffer' response type. It supports range requests, tracks loading progress, handles redirects, and provides comprehensive error handling.\n\nAttributes:\n- _seekHandler: [Object] - Handler for URL and range configuration\n- _config: [Object] - Configuration object for the loader\n- _needStash: [Boolean] - Flag indicating whether data needs to be stashed\n- _xhr: [XMLHttpRequest|null] - The XMLHttpRequest instance\n- _requestAbort: [Boolean] - Flag indicating if the request was aborted\n- _contentLength: [Number|null] - Total content length of the resource\n- _receivedLength: [Number] - Number of bytes received so far\n- _dataSource: [Object] - Data source configuration\n- _range: [Object] - Request range parameters\n- _requestURL: [String] - The URL used for the request\n\nMethods:\n- constructor(seekHandler, config) -> [MozChunkedLoader] - Initializes the loader with seek handler and configuration\n- open(dataSource, range) -> [void] - Opens a connection to the specified data source with range parameters\n- abort() -> [void] - Aborts the current request\n- _onReadyStateChange(e) -> [void] - Handles XMLHttpRequest ready state changes\n- _onProgress(e) -> [void] - Handles progress events during data loading\n- _onLoadEnd(e) -> [void] - Handles request completion\n- _onXhrError(e) -> [void] - Handles XMLHttpRequest errors\n\nEvent Callbacks (to be set externally):\n- _onURLRedirect: [Function] - Called when URL redirection occurs\n- _onError: [Function] - Called when an error occurs\n- _onContentLengthKnown: [Function] - Called when content length is determined\n- _onDataArrival: [Function] - Called when new data chunk arrives\n- _onComplete: [Function] - Called when loading completes successfully",
    "Canonical_solution": "class MozChunkedLoader {\n    constructor(seekHandler, config) {\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = true;\n        this._xhr = null;\n        this._requestAbort = false;\n        this._contentLength = null;\n        this._receivedLength = 0;\n    }\n\n    open(dataSource, range) {\n        this._dataSource = dataSource;\n        this._range = range;\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n            sourceURL = dataSource.redirectedURL;\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n        this._requestURL = seekConfig.url;\n\n        let xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = 'moz-chunked-arraybuffer';\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onprogress = this._onProgress.bind(this);\n        xhr.onloadend = this._onLoadEnd.bind(this);\n        xhr.onerror = this._onXhrError.bind(this);\n\n        if (dataSource.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if (typeof seekConfig.headers === 'object') {\n            let headers = seekConfig.headers;\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        if (typeof this._config.headers === 'object') {\n            let headers = this._config.headers;\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        xhr.send();\n    }\n\n    abort() {\n        this._requestAbort = true;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n    }\n\n    _onReadyStateChange(e) {\n        let xhr = e.target;\n        if (xhr.readyState === 2) {\n            if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n                if (this._onURLRedirect) {\n                    let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    this._onURLRedirect(redirectedURL);\n                }\n            }\n\n            if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\n                }\n            }\n        }\n    }\n\n    _onProgress(e) {\n        if (this._contentLength === null) {\n            if (e.total !== null && e.total !== 0) {\n                this._contentLength = e.total;\n                if (this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n        }\n\n        let chunk = e.target.response;\n        let byteStart = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if (this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n    }\n\n    _onLoadEnd(e) {\n        if (this._requestAbort === true) {\n            this._requestAbort = false;\n            return;\n        }\n\n        if (this._onComplete) {\n            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n        }\n    }\n\n    _onXhrError(e) {\n        let type = 0;\n        let info = null;\n\n        if (this._contentLength && e.loaded < this._contentLength) {\n            type = LoaderErrors.EARLY_EOF;\n            info = {code: -1, msg: 'Moz-Chunked stream meet Early-Eof'};\n        } else {\n            type = LoaderErrors.EXCEPTION;\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\n        }\n\n        if (this._onError) {\n            this._onError(type, info);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class MozChunkedLoader {\n  constructor(seekHandler, config) {\n    this._seekHandler = seekHandler;\n    this._config = config;\n    this._needStash = false;\n    this._xhr = null;\n    this._requestAbort = false;\n    this._contentLength = null;\n    this._receivedLength = 0;\n    this._dataSource = null;\n    this._range = null;\n    this._requestURL = '';\n  }\n\n  open(dataSource, range) {\n    this._dataSource = dataSource;\n    this._range = range;\n    this._requestURL = dataSource.url;\n\n    this._xhr = new XMLHttpRequest();\n    this._xhr.open('GET', this._requestURL, true);\n    this._xhr.responseType = 'moz-chunked-arraybuffer';\n\n    if (this._range) {\n      this._xhr.setRequestHeader('Range', `bytes=${this._range.start}-${this._range.end}`);\n    }\n\n    this._xhr.addEventListener('readystatechange', this._onReadyStateChange.bind(this));\n    this._xhr.addEventListener('progress', this._onProgress.bind(this));\n    this._xhr.addEventListener('loadend', this._onLoadEnd.bind(this));\n    this._xhr.addEventListener('error', this._onXhrError.bind(this));\n\n    this._xhr.send();\n  }\n\n  abort() {\n    if (this._xhr) {\n      this._xhr.abort();\n      this._requestAbort = true;\n    }\n  }\n\n  _onReadyStateChange(e) {\n    if (this._xhr.readyState === 3) {\n      const contentLength = this._xhr.getResponseHeader('Content-Length');\n      if (contentLength) {\n        this._contentLength = parseInt(contentLength, 10);\n        this._onContentLengthKnown();\n      }\n    }\n  }\n\n  _onProgress(e) {\n    if (e.lengthComputable) {\n      const chunk = e.target.response;\n      if (chunk) {\n        this._onDataArrival(chunk);\n        this._receivedLength += chunk.byteLength;\n      }\n    }\n  }\n\n  _onLoadEnd(e) {\n    if (this._xhr.status >= 200 && this._xhr.status < 300) {\n      this._onComplete();\n    } else if (this._xhr.status === 301 || this._xhr.status === 302) {\n      const newURL = this._xhr.getResponseHeader('Location');\n      if (newURL) {\n        this._onURLRedirect(newURL);\n      }\n    } else {\n      this._onError(new Error(`Request failed with status ${this._xhr.status}`));\n    }\n  }\n\n  _onXhrError(e) {\n    this._onError(new Error('XMLHttpRequest error'));\n  }\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a function that handles HTTP requests using XMLHttpRequest in JavaScript, including request configuration, progress tracking, and response handling.\n\nFunction Description: The function `makeRequest` initiates and manages an HTTP request using XMLHttpRequest. It configures the request with provided settings, tracks upload/download progress, handles timeouts, and processes the response. The function supports both successful and error responses, with appropriate callbacks for each scenario.\n\nInput:\n- `resolve`: [Function] - A callback function to handle the final resolution of the request (either success or error).\n- `config`: [Object] - Configuration object containing properties to set on the XMLHttpRequest instance.\n- `method`: [String] - HTTP method for the request (e.g., 'GET', 'POST').\n- `fullUrl`: [String] - The complete URL for the request.\n- `headers`: [Object] - Key-value pairs representing HTTP headers to set on the request.\n- `payload`: [Any] - Data to send with the request (for POST/PUT requests).\n- `defaultTimeout`: [Number] - Timeout duration in milliseconds for the request.\n- `xhrExtra`: [Any] - Additional data to pass to error/timeout handlers.\n- Event handlers:\n  - `onRequestProgress`: [Function] - Callback for upload progress events.\n  - `onRequestStart`: [Function] - Callback when the request starts.\n  - `onRequestEnd`: [Function] - Callback when the request ends.\n  - `onResponseStart`: [Function] - Callback when the response starts.\n  - `onResponseProgress`: [Function] - Callback for download progress events.\n  - `onResponseEnd`: [Function] - Callback when the response ends.\n  - `onTimeoutError`: [Function] - Callback for timeout errors.\n  - `onSuccess`: [Function] - Callback for successful responses.\n  - `onError`: [Function] - Callback for error responses.\n  - `onBeforeRequest`: [Function] - Callback before sending the request.\n  - `createAbortListener`: [Function] - Creates a listener for abort events.\n  - `parseResponse`: [Function] - Parses successful response data.\n  - `parseErrorResponse`: [Function] - Parses error response data.\n  - `getResponseHeaders`: [Function] - Parses raw response headers.\n\nOutput: None (The function uses callbacks to handle results asynchronously).",
    "Canonical_solution": "function makeRequest(resolve) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = defaultTimeout;\n\n    const abort = () => xhr.abort();\n\n    Object.entries(config).forEach(([name, value]) => {\n        xhr[name] = value;\n    });\n\n    xhr.open(method, fullUrl, true);\n\n    Object.entries(headers).forEach(([name, value]) => xhr.setRequestHeader(name, value as string));\n\n    const unmountListener = createAbortListener(0, xhrExtra, abort, resolve);\n\n    xhr.upload.onprogress = onRequestProgress;\n\n    xhr.onloadstart = (): void => {\n        onRequestEnd();\n        onResponseStart();\n    };\n\n    xhr.onprogress = onResponseProgress;\n\n    xhr.onloadend = () => {\n        onResponseEnd();\n        unmountListener();\n    };\n\n    xhr.ontimeout = () => onTimeoutError(0, xhrExtra, resolve);\n\n    xhr.onreadystatechange = (e: Event) => {\n        const event = e as unknown as ProgressEvent<XMLHttpRequest>;\n        const finishedState = 4;\n\n        if (event.target && event.target.readyState === finishedState) {\n            const { status } = event.target;\n            const success = String(status).startsWith(\"2\") || String(status).startsWith(\"3\");\n            const responseHeaders = getResponseHeaders(xhr.getAllResponseHeaders());\n\n            if (success) {\n                const data = parseResponse(event.target.response);\n                onSuccess(data, status, { headers: responseHeaders }, resolve);\n            } else {\n                const data = parseErrorResponse(event.target.response);\n                onError(data, status, { headers: responseHeaders }, resolve);\n            }\n        }\n    };\n\n    onBeforeRequest();\n    onRequestStart();\n\n    xhr.send(payload);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function makeRequest(resolve, config, method, fullUrl, headers, payload, defaultTimeout, xhrExtra, onRequestProgress, onRequestStart, onRequestEnd, onResponseStart, onResponseProgress, onResponseEnd, onTimeoutError, onSuccess, onError, onBeforeRequest, createAbortListener, parseResponse, parseErrorResponse, getResponseHeaders) {\n  const xhr = new XMLHttpRequest();\n\n  xhr.onprogress = function(event) {\n    if (event.lengthComputable) {\n      onResponseProgress(event);\n    }\n  };\n\n  xhr.upload.onprogress = function(event) {\n    if (event.lengthComputable) {\n      onRequestProgress(event);\n    }\n  };\n\n  xhr.ontimeout = function() {\n    onTimeoutError(xhrExtra);\n    resolve(xhrExtra);\n  };\n\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === 4) {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        const response = parseResponse(xhr.responseText, getResponseHeaders());\n        onSuccess(response);\n        resolve(response);\n      } else {\n        const errorResponse = parseErrorResponse(xhr.responseText, getResponseHeaders());\n        onError(errorResponse);\n        resolve(errorResponse);\n      }\n      onRequestEnd();\n    }\n  };\n\n  xhr.onerror = function() {\n    onError(xhr.statusText);\n    resolve(xhr.statusText);\n  };\n\n  xhr.onabort = function() {\n    if (createAbortListener) {\n      createAbortListener(xhr);\n    }\n    onError('Request aborted');\n    resolve('Request aborted');\n  };\n\n  for (const key in headers) {\n    xhr.setRequestHeader(key, headers[key]);\n  }\n\n  for (const key in config) {\n    if (key === 'headers') continue;\n    xhr[key] = config[key];\n  }\n\n  xhr.timeout = config.timeout || defaultTimeout;\n\n  onBeforeRequest();\n\n  xhr.open(method, fullUrl, true);\n\n  onRequestStart();\n\n  if (createAbortListener) {\n    createAbortListener(xhr);\n  }\n\n  xhr.send(payload);\n\n  xhr.onloadstart = function() {\n    onResponseStart();\n  };\n\n  xhr.onloadend = function() {\n    onResponseEnd();\n  };\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class DataManURL {\n  constructor(url, type, options) {\n    this.url = url;\n    this._type = type || null;\n    this.urlOpts = options || {};\n    this._size = undefined;\n    this._buffer = null;\n  }\n\n  getBuffer(callback) {\n    if (this._buffer) {\n      callback(null, this._buffer);\n      return;\n    }\n\n    const protocol = this.url.startsWith('https://') ? 'https' : 'http';\n    const requestModule = protocol === 'https' ? require('https') : require('http');\n\n    requestModule.get(this.url, this.urlOpts, (res) => {\n      if (res.statusCode !== 200) {\n        callback(new Error(`HTTP error: ${res.statusCode}`), null);\n        return;\n      }\n      this._type = res.headers['content-type'] || this._type;\n      const buffer = [];\n      res.on('data', (chunk) => {\n        buffer.push(chunk);\n      });\n      res.on('end', () => {\n        this._buffer = Buffer.concat(buffer);\n        callback(null, this._buffer);\n      });\n    }).on('error', (e) => {\n      callback(e, null);\n    });\n  }\n\n  getDataUri(callback) {\n    this.getBuffer((err, buffer) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n      const base64 = buffer.toString('base64');\n      const dataUri = `data:${this.type()};base64,${base64}`;\n      callback(null, dataUri);\n    });\n  }\n\n  createReadStream() {\n    const protocol = this.url.startsWith('https://') ? 'https' : 'http';\n    const requestModule = protocol === 'https' ? require('https') : require('http');\n\n    const req = requestModule.get(this.url, this.urlOpts);\n    const res = req.on('response', (res) => {\n      if (res.statusCode !== 200) {\n        throw new Error(`HTTP error: ${res.statusCode}`);\n      }\n      return res;\n    });\n    return res;\n  }\n\n  size(callback) {\n    if (this._size !== undefined) {\n      callback(null, this._size);\n      return;\n    }\n\n    const protocol = this.url.startsWith('https://') ? 'https' : 'http';\n    const requestModule = protocol === 'https' ? require('https') : require('http');\n\n    requestModule.get(this.url, this.urlOpts, (res) => {\n      if (res.statusCode !== 200) {\n        callback(new Error(`HTTP error: ${res.statusCode}`), null);\n        return;\n      }\n      this._size = parseInt(res.headers['content-length'], 10) || 0;\n      callback(null, this._size);\n    }).on('error', (e) => {\n      callback(e, null);\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a function to handle form submission asynchronously using XMLHttpRequest in JavaScript. The function should prevent default form submission, process form data, send it to a server via POST request, and handle the server's response to display a thank-you message upon successful submission.\n\nFunction Description: The function `handleFormSubmit` intercepts form submission events, validates the form data (checking for honeypot fields), disables all buttons during submission, sends the form data to a specified URL via POST request, and processes the server's response to update the UI accordingly.\n\nInput: \n- `event`: [Event Object] - The form submission event that triggers this function. The event object contains the target form element and allows prevention of default submission behavior.\n\nOutput: \n- None (void) - The function does not return any value but performs side effects including:\n  - Preventing default form submission\n  - Disabling form buttons during submission\n  - Sending form data to the server\n  - Updating the UI based on server response (resetting form and showing thank-you message)",
    "Canonical_solution": "function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n\n    if (formData.honeypot) {\n        return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            form.reset();\n            var formElements = form.querySelector(\".form-elements\")\n            if (formElements) {\n                formElements.style.display = \"none\";\n            }\n            var thankYouMessage = form.querySelector(\".thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n        }\n    };\n    var encoded = Object.keys(data).map(function(k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n    }).join('&');\n    xhr.send(encoded);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function handleFormSubmit(event) {\n  event.preventDefault();\n  const form = event.target;\n  const honeypotFields = form.querySelectorAll('[name=\"honeypot\"]');\n  for (const field of honeypotFields) {\n    if (field.value.trim() !== '') return;\n  }\n  const buttons = form.querySelectorAll('button');\n  buttons.forEach(btn => btn.disabled = true);\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', form.action, true);\n  const formData = new FormData(form);\n  xhr.onload = function() {\n    if (xhr.status === 200) {\n      form.reset();\n      const thankYouMessage = document.createElement('div');\n      thankYouMessage.textContent = 'Thank you for your submission!';\n      form.parentNode.insertBefore(thankYouMessage, form);\n      buttons.forEach(btn => btn.disabled = false);\n    } else {\n      console.error('Submission failed:', xhr.statusText);\n      buttons.forEach(btn => btn.disabled = false);\n    }\n  };\n  xhr.onerror = function() {\n    console.error('Network error occurred.');\n    buttons.forEach(btn => btn.disabled = false);\n  };\n  xhr.send(formData);\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function sendPostRequest() {\n  const url = 'https://example.com/api/endpoint';\n  const data = { username: 'user123', password: 'pass123' };\n  const formData = new URLSearchParams(data);\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: formData,\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const text = await response.text();\n    console.log(text);\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n  }\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a JavaScript class that handles AJAX requests using XMLHttpRequest, supporting cross-origin requests, custom headers, and various response handling scenarios.\n\nClass Description: The AjaxTransport class provides a wrapper around XMLHttpRequest for making asynchronous HTTP requests. It handles request creation, header management, response processing, and cleanup. The class supports CORS, maintains request state, and provides error handling capabilities.\n\nAttributes:\n\nxhrId: [Number] - Counter for generating unique IDs for each XMLHttpRequest instance\nxhrCallbacks: [Object] - Stores callback functions for active requests\nxhrSuccessStatus: [Object] - Maps certain HTTP status codes to standard success codes\nxhrSupported: [XMLHttpRequest|Boolean] - Stores the created XMLHttpRequest instance or false if not supported\n\nMethods:\n\ncreateXHR: () -> [XMLHttpRequest|undefined] - Creates and returns a new XMLHttpRequest instance or undefined if creation fails\n\nsendRequest: (options: Object, headers: Object, complete: Function) -> [undefined] - \n  Sends an AJAX request with the given configuration\n  options: Contains request parameters (type, url, async, etc.)\n  headers: Key-value pairs of request headers\n  complete: Callback function to handle response\n\nabortRequest: (callback: Function) -> [undefined] - \n  Aborts an active request and executes the given callback\n  callback: Function to execute after aborting\n\ngetTransport: (options: Object) -> [Object|undefined] - \n  Returns a transport object if the request can be handled\n  options: Configuration object for the request\n  Returns an object with send and abort methods or undefined if request can't be handled",
    "Canonical_solution": "var jQuery = require(\"../core\");\nvar support = require(\"../var/support\");\n\nclass AjaxTransport {\n  constructor() {\n    this.xhrId = 0;\n    this.xhrCallbacks = {};\n    this.xhrSuccessStatus = {\n      0: 200,\n      1223: 204\n    };\n    this.xhrSupported = this.createXHR();\n    \n    if (window.ActiveXObject) {\n      jQuery(window).on(\"unload\", () => {\n        for (var key in this.xhrCallbacks) {\n          this.xhrCallbacks[key]();\n        }\n      });\n    }\n    \n    support.cors = !!this.xhrSupported && (\"withCredentials\" in this.xhrSupported);\n    support.ajax = !!this.xhrSupported;\n  }\n\n  createXHR() {\n    try {\n      return new XMLHttpRequest();\n    } catch(e) {}\n  }\n\n  sendRequest(options, headers, complete) {\n    var xhr = options.xhr();\n    var id = ++this.xhrId;\n\n    xhr.open(options.type, options.url, options.async, options.username, options.password);\n\n    if (options.xhrFields) {\n      for (var i in options.xhrFields) {\n        xhr[i] = options.xhrFields[i];\n      }\n    }\n\n    if (options.mimeType && xhr.overrideMimeType) {\n      xhr.overrideMimeType(options.mimeType);\n    }\n\n    if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n      headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n    }\n\n    for (var i in headers) {\n      xhr.setRequestHeader(i, headers[i]);\n    }\n\n    var callback = (type) => {\n      return () => {\n        if (callback) {\n          delete this.xhrCallbacks[id];\n          callback = xhr.onload = xhr.onerror = null;\n\n          if (type === \"abort\") {\n            xhr.abort();\n          } else if (type === \"error\") {\n            complete(xhr.status, xhr.statusText);\n          } else {\n            complete(\n              this.xhrSuccessStatus[xhr.status] || xhr.status,\n              xhr.statusText,\n              typeof xhr.responseText === \"string\" ? { text: xhr.responseText } : undefined,\n              xhr.getAllResponseHeaders()\n            );\n          }\n        }\n      };\n    };\n\n    xhr.onload = callback();\n    xhr.onerror = callback(\"error\");\n    callback = this.xhrCallbacks[id] = callback(\"abort\");\n\n    try {\n      xhr.send(options.hasContent && options.data || null);\n    } catch (e) {\n      if (callback) {\n        throw e;\n      }\n    }\n  }\n\n  abortRequest(callback) {\n    if (callback) {\n      callback();\n    }\n  }\n\n  getTransport(options) {\n    if (support.cors || this.xhrSupported && !options.crossDomain) {\n      return {\n        send: (headers, complete) => this.sendRequest(options, headers, complete),\n        abort: () => this.abortRequest(callback)\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class AjaxTransport {\n  constructor() {\n    this.xhrId = 0;\n    this.xhrCallbacks = {};\n    this.xhrSuccessStatus = {\n      301: 200,\n      302: 200,\n      303: 200,\n      307: 200\n    };\n    this.xhrSupported = false;\n  }\n\n  createXHR() {\n    if (typeof window !== 'undefined' && window.XMLHttpRequest) {\n      this.xhrSupported = new XMLHttpRequest();\n      return this.xhrSupported;\n    }\n    return undefined;\n  }\n\n  sendRequest(options, headers, complete) {\n    const xhr = this.createXHR();\n    if (!xhr) {\n      complete('XMLHttpRequest not supported', 0, xhr);\n      return;\n    }\n\n    const id = this.xhrId++;\n    this.xhrCallbacks[id] = complete;\n\n    for (const key in headers) {\n      xhr.setRequestHeader(key, headers[key]);\n    }\n\n    xhr.open(options.type, options.url, options.async || true);\n    xhr.withCredentials = options.withCredentials || false;\n\n    if (options.type === 'POST' || options.type === 'PUT') {\n      xhr.send(options.data);\n    } else {\n      xhr.send();\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        const status = this.xhrSuccessStatus[xhr.status] || xhr.status;\n        const response = xhr.responseText;\n        const callback = this.xhrCallbacks[id];\n        if (callback) {\n          callback(response, status, xhr);\n          delete this.xhrCallbacks[id];\n        }\n      }\n    };\n  }\n\n  abortRequest(callback) {\n    if (this.xhrSupported) {\n      this.xhrSupported.abort();\n      callback();\n    }\n  }\n\n  getTransport(options) {\n    if (!window.XMLHttpRequest) {\n      return undefined;\n    }\n    return {\n      send: (options, headers, complete) => this.sendRequest(options, headers, complete),\n      abort: (callback) => this.abortRequest(callback)\n    };\n  }\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n  switch (data) {\n    case 'xhr':\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', 'https://example.com', true);\n      xhr.onload = function() {\n        if (xhr.status === 200) {\n          sender.postMessage(xhr.responseText);\n        } else {\n          sender.postMessage('XHR error: ' + xhr.statusText);\n        }\n      };\n      xhr.onerror = function() {\n        sender.postMessage('XHR error: Network error');\n      };\n      xhr.send();\n      break;\n    case 'fetch':\n      fetch('https://example.com')\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.text();\n        })\n        .then(text => sender.postMessage(text))\n        .catch(error => sender.postMessage('Fetch error: ' + error.message));\n      break;\n    case 'importScripts':\n      importScripts('script.js');\n      sender.postMessage(window.message);\n      break;\n    default:\n      sender.postMessage('Unexpected message');\n  }\n}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a function that performs an HTTP request using XMLHttpRequest and returns a Promise that resolves with a response object containing various utility methods for processing the response data.\n\nFunction Description: The function `fetchRequest` is a Promise-based wrapper around XMLHttpRequest that simplifies making HTTP requests. It handles request configuration, headers, credentials, and response processing. The response object provides methods to access the response data in different formats (text, JSON, blob) and inspect response headers.\n\nInput: \n- `e` [String] - The URL to which the request is sent\n- `n` [Object] - (Optional) Configuration object for the request with the following possible properties:\n  - `method` [String] - HTTP method (default: \"get\")\n  - `headers` [Object] - Key-value pairs of request headers\n  - `credentials` [String] - Controls credentials inclusion (e.g., \"include\")\n  - `body` [Any] - Data to be sent with the request\n\nOutput: [Promise] - A Promise that resolves to a response object with the following methods:\n- `ok` [Boolean] - Indicates if the request was successful (status 2xx)\n- `statusText` [String] - HTTP status text\n- `status` [Number] - HTTP status code\n- `url` [String] - Final URL after any redirects\n- `text()` [Function] - Returns a Promise resolving to response text\n- `json()` [Function] - Returns a Promise resolving to parsed JSON\n- `blob()` [Function] - Returns a Promise resolving to a Blob object\n- `clone()` [Function] - Returns a copy of the response object\n- `headers` [Object] - Provides methods to inspect response headers:\n  - `keys()` - Returns array of header names\n  - `entries()` - Returns array of [name, value] pairs\n  - `get(name)` - Returns value for a specific header\n  - `has(name)` - Checks if a header exists",
    "Canonical_solution": "function fetchRequest(e, n) {\n    n = n || {};\n    return new Promise((function(t, r) {\n        var s = new XMLHttpRequest,\n            o = [],\n            u = [],\n            i = {},\n            a = function() {\n                return {\n                    ok: 2 == (s.status / 100 | 0),\n                    statusText: s.statusText,\n                    status: s.status,\n                    url: s.responseURL,\n                    text: function() {\n                        return Promise.resolve(s.responseText)\n                    },\n                    json: function() {\n                        return Promise.resolve(s.responseText).then(JSON.parse)\n                    },\n                    blob: function() {\n                        return Promise.resolve(new Blob([s.response]))\n                    },\n                    clone: a,\n                    headers: {\n                        keys: function() {\n                            return o\n                        },\n                        entries: function() {\n                            return u\n                        },\n                        get: function(e) {\n                            return i[e.toLowerCase()]\n                        },\n                        has: function(e) {\n                            return e.toLowerCase() in i\n                        }\n                    }\n                }\n            };\n        for (var l in s.open(n.method || \"get\", e, !0), s.onload = function() {\n                s.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (function(e, n, t) {\n                    o.push(n = n.toLowerCase()), u.push([n, t]), i[n] = i[n] ? i[n] + \",\" + t : t\n                })), t(a())\n            }, s.onerror = r, s.withCredentials = \"include\" == n.credentials, n.headers) s.setRequestHeader(l, n.headers[l]);\n        s.send(n.body || null)\n    }))\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function fetchRequest(e, n) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    const method = n && n.method ? n.method : 'GET';\n    const headers = n && n.headers ? n.headers : {};\n    const credentials = n && n.credentials ? n.credentials : '';\n    const body = n && n.body ? n.body : null;\n\n    xhr.open(method, e);\n\n    for (let key in headers) {\n      xhr.setRequestHeader(key, headers[key]);\n    }\n\n    if (credentials === 'include') {\n      xhr.withCredentials = true;\n    }\n\n    xhr.send(body);\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          const response = {\n            ok: true,\n            statusText: xhr.statusText,\n            status: xhr.status,\n            url: xhr.responseURL,\n            headers: new Headers(xhr.getAllResponseHeaders()),\n            text: () => Promise.resolve(xhr.responseText),\n            json: () => Promise.resolve(JSON.parse(xhr.responseText)),\n            blob: () => Promise.resolve(new Blob([xhr.responseText], { type: xhr.getResponseHeader('Content-Type') })),\n            clone: () => Object.assign({}, response),\n          };\n          resolve(response);\n        } else {\n          reject(new Error(`HTTP error! status: ${xhr.status}`));\n        }\n      }\n    };\n\n    xhr.onerror = function () {\n      reject(new Error('Network error'));\n    };\n  });\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function loadYamlUrl(url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const yamlText = await response.text();\n    yamlToForm(yamlText);\n    console.log(yamlText);\n  } catch (error) {\n    console.error('Error loading YAML:', error);\n  }\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      'is.gd': 'isgd',\n      'goo.gl': 'googl',\n      'budurl.com': 'budurl',\n      'snipurl.com': 'snipurl'\n    };\n    this.timeout = 5000;\n    this.maxDepth = 5;\n    this.APIs = {\n      isgd: (shortUrl, callback) => {\n        const url = `https://is.gd/api.php?shorturl=${encodeURIComponent(shortUrl)}`;\n        fetch(url, { timeout: this.timeout })\n          .then(res => res.text())\n          .then(text => {\n            callback(null, text);\n          })\n          .catch(err => callback(err));\n      },\n      googl: (shortUrl, callback) => {\n        const url = `https://www.googleapis.com/urlshortener/v1/url`;\n        fetch(url, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ shortUrl }),\n          timeout: this.timeout\n        })\n          .then(res => res.json())\n          .then(data => {\n            callback(null, data.longUrl);\n          })\n          .catch(err => callback(err));\n      },\n      budurl: (shortUrl, callback) => {\n        const url = `https://budurl.com/api.php?short=${encodeURIComponent(shortUrl)}`;\n        fetch(url, { timeout: this.timeout })\n          .then(res => res.text())\n          .then(text => {\n            callback(null, text);\n          })\n          .catch(err => callback(err));\n      },\n      snipurl: (shortUrl, callback) => {\n        const url = `https://snipurl.com/api.php?short=${encodeURIComponent(shortUrl)}`;\n        fetch(url, { timeout: this.timeout })\n          .then(res => res.text())\n          .then(text => {\n            callback(null, text);\n          })\n          .catch(err => callback(err));\n      }\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (seen[url]) {\n      callback({ err: new Error('Cycle detected') });\n      return;\n    }\n    seen[url] = true;\n\n    const parsedUrl = new URL(url);\n    const service = Object.entries(this.map).find(([_, domain]) => domain === parsedUrl.hostname)?.[0];\n    if (!service) {\n      callback({ url, depth, seen });\n      return;\n    }\n\n    const apiMethod = this.APIs[service];\n    if (apiMethod) {\n      apiMethod(url, (err, expandedUrl) => {\n        if (err) {\n          callback({ err });\n          return;\n        }\n        if (depth >= this.maxDepth) {\n          callback({ url: expandedUrl, depth, seen });\n          return;\n        }\n        this.expand({ url: expandedUrl, depth: depth + 1, seen }, callback);\n      });\n    } else {\n      fetch(url, { timeout: this.timeout })\n        .then(res => {\n          if (res.redirected) {\n            const newUrl = res.url;\n            if (depth >= this.maxDepth) {\n              callback({ url: newUrl, depth, seen });\n              return;\n            }\n            this.expand({ url: newUrl, depth: depth + 1, seen }, callback);\n          } else {\n            callback({ url: newUrl, depth, seen });\n          }\n        })\n        .catch(err => {\n          callback({ err });\n        });\n    }\n  }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst multer = require('multer');\n\nclass HTTPServer {\n  constructor(port) {\n    this.app = express();\n    this.port = port;\n    this.server = null;\n\n    // Middleware\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    const upload = multer({ dest: 'uploads/' });\n    this.app.use(upload);\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.port, () => {\n        resolve();\n      }).on('error', (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close();\n      this.server = null;\n    }\n  }\n\n  addRoute(method, path, handler) {\n    this.app[method](path, handler);\n  }\n\n  get(path, handler) {\n    this.addRoute('GET', path, handler);\n  }\n\n  post(path, handler) {\n    this.addRoute('POST', path, handler);\n  }\n\n  put(path, handler) {\n    this.addRoute('PUT', path, handler);\n  }\n\n  delete(path, handler) {\n    this.addRoute('DELETE', path, handler);\n  }\n\n  patch(path, handler) {\n    this.addRoute('PATCH', path, handler);\n  }\n\n  options(path, handler) {\n    this.addRoute('OPTIONS', path, handler);\n  }\n\n  trace(path, handler) {\n    this.addRoute('TRACE', path, handler);\n  }\n\n  head(path, handler) {\n    this.addRoute('HEAD', path, handler);\n  }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Implement a Twitter HTTP client class in JavaScript that handles API requests to Twitter, including request construction, execution, and response processing with error handling and clock synchronization.\n\nClass Description: The TwitterHTTPClient class provides methods to interact with Twitter's REST API. It handles HTTP requests (GET/POST), manages authentication, processes responses, and maintains clock synchronization with Twitter's servers.\n\nAttributes:\n- config: [Object] - Configuration object containing API credentials and settings\n- _twitter_time_minus_local_time_ms: [Number] - Time difference between Twitter's server time and local time in milliseconds\n\nMethods:\n- constructor(config) -> [TwitterHTTPClient] - Initializes the client with configuration\n- request(method, path, params, callback) -> [Promise] - Makes HTTP requests to Twitter API\n- _doRestApiRequest(reqOpts, twitOptions, method, callback) -> [void] - Executes the actual HTTP request\n- _updateClockOffsetFromResponse(resp) -> [void] - Updates the clock offset based on Twitter's server time\n\nMethod Details:\n1. request(method, path, params, callback)\n   - Input:\n     - method: [String] - HTTP method ('GET' or 'POST')\n     - path: [String] - API endpoint path\n     - params: [Object] - Request parameters\n     - callback: [Function] - Callback function for handling response\n   - Output: [Promise] - Resolves with response data or rejects with error\n\n2. _doRestApiRequest(reqOpts, twitOptions, method, callback)\n   - Input:\n     - reqOpts: [Object] - Request options including URL and headers\n     - twitOptions: [Object] - Twitter-specific options\n     - method: [String] - HTTP method\n     - callback: [Function] - Callback for handling response\n   - Output: [void] - Calls callback with response data or error\n\n3. _updateClockOffsetFromResponse(resp)\n   - Input:\n     - resp: [Object] - HTTP response object\n   - Output: [void] - Updates internal clock offset value",
    "Canonical_solution": "var request = require('request');\nvar helpers = require('./helpers');\n\nclass TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params, callback) {\n    var self = this;\n    assert(method == 'GET' || method == 'POST');\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      var _returnErrorToUser = function (err) {\n        if (callback && typeof callback === 'function') {\n          callback(err, null, null);\n        }\n        reject(err);\n      }\n\n      self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n        if (err) {\n          _returnErrorToUser(err);\n          return;\n        }\n\n        var twitOptions = (params && params.twit_options) || {};\n\n        process.nextTick(function () {\n          self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n            self._updateClockOffsetFromResponse(resp);\n\n            if (self.config.trusted_cert_fingerprints) {\n              if (!resp.socket.authorized) {\n                var authErrMsg = resp.socket.authorizationError.toString();\n                var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n              var fingerprint = resp.socket.getPeerCertificate().fingerprint;\n              var trustedFingerprints = self.config.trusted_cert_fingerprints;\n              if (trustedFingerprints.indexOf(fingerprint) === -1) {\n                var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.',\n                                         trustedFingerprints.join(','), fingerprint);\n                var err = new Error(errMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n            }\n\n            if (callback && typeof callback === 'function') {\n              callback(err, parsedBody, resp);\n            }\n\n            resolve({ data: parsedBody, resp: resp });\n            return;\n          });\n        });\n      });\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    var request_method = request[method.toLowerCase()];\n    var req = request_method(reqOpts);\n\n    var body = '';\n    var response = null;\n\n    var onRequestComplete = function () {\n      if (body !== '') {\n        try {\n          body = JSON.parse(body);\n        } catch (jsonDecodeError) {\n          var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n          err.statusCode = response ? response.statusCode: null;\n          err.allErrors.concat({error: jsonDecodeError.toString()});\n          callback(err, body, response);\n          return;\n        }\n      }\n\n      if (typeof body === 'object' && (body.error || body.errors)) {\n        var err = helpers.makeTwitError('Twitter API Error');\n        err.statusCode = response ? response.statusCode: null;\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n\n      callback(err, body, response);\n    }\n\n    req.on('response', function (res) {\n      response = res;\n      req.on('data', function (chunk) {\n        body += chunk.toString('utf8');\n      });\n      req.on('end', function () {\n        onRequestComplete();\n      });\n    });\n\n    req.on('error', function (err) {\n      if (twitOptions.retry &&\n          STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1\n      ) {\n        self.request(method, path, params, callback);\n        return;\n      } else {\n        err.statusCode = null;\n        err.code = null;\n        err.allErrors = [];\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n    });\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    var self = this;\n    if (resp && resp.headers && resp.headers.date &&\n        new Date(resp.headers.date).toString() !== 'Invalid Date'\n    ) {\n      var twitterTimeMs = new Date(resp.headers.date).getTime();\n      self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params, callback) {\n    return new Promise((resolve, reject) => {\n      const url = this._buildUrl(path, params);\n      const headers = this._buildHeaders(method, url, params);\n      const reqOpts = {\n        url,\n        headers\n      };\n      this._doRestApiRequest(reqOpts, {}, method, (err, resp) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(resp);\n        }\n      });\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    const https = require('https');\n    const options = {\n      ...reqOpts,\n      method: method\n    };\n\n    const req = https.request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n\n      res.on('end', () => {\n        try {\n          const parsedData = JSON.parse(data);\n          this._updateClockOffsetFromResponse(res);\n          callback(null, parsedData);\n        } catch (err) {\n          callback(err, null);\n        }\n      });\n    });\n\n    req.on('error', (err) => {\n      callback(err, null);\n    });\n\n    req.end();\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    const dateHeader = resp.headers['date'];\n    if (dateHeader) {\n      const serverTime = new Date(dateHeader);\n      const localTime = new Date();\n      this._twitter_time_minus_local_time_ms = serverTime.getTime() - localTime.getTime();\n    }\n  }\n\n  _buildUrl(path, params) {\n    const parsedUrl = new URL(path, 'https://api.twitter.com');\n    const searchParams = new URLSearchParams(params);\n    parsedUrl.search = searchParams.toString();\n    return parsedUrl.toString();\n  }\n\n  _buildHeaders(method, url, params) {\n    const oauthParams = {\n      oauth_consumer_key: this.config.consumerKey,\n      oauth_nonce: this._generateNonce(),\n      oauth_signature_method: 'HMAC-SHA1',\n      oauth_timestamp: Math.floor(Date.now() / 1000),\n      oauth_token: this.config.accessToken,\n      oauth_version: '1.0'\n    };\n\n    const allParams = { ...params, ...oauthParams };\n    const sortedParams = Object.keys(allParams).sort().reduce((obj, key) => {\n      obj[key] = allParams[key];\n      return obj;\n    }, {});\n\n    const encodedParams = Object.entries(sortedParams)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join('&');\n\n    const baseString = [\n      method.toUpperCase(),\n      this._normalizeUrl(url),\n      encodedParams\n    ].join('&');\n\n    const signingKey = `${this.config.consumerSecret}&${this.config.accessTokenSecret}`;\n    const signature = this._signHMACSHA1(baseString, signingKey);\n\n    oauthParams.oauth_signature = signature;\n\n    const authHeader = [\n      'OAuth ',\n      Object.entries(oauthParams)\n        .map(([key, value]) => `${key}=\"${encodeURIComponent(value)}\"`)\n        .join(', ')\n    ].join(' ');\n\n    return {\n      'Authorization': authHeader,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n  }\n\n  _normalizeUrl(url) {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin + parsedUrl.pathname;\n  }\n\n  _signHMACSHA1(data, key) {\n    const encoder = new TextEncoder();\n    const keyBuffer = encoder.encode(key);\n    const dataBuffer = encoder.encode(data);\n    const hmac = crypto.createHmac('sha1', keyBuffer);\n    hmac.update(dataBuffer);\n    return hmac.digest('base64');\n  }\n\n  _generateNonce() {\n    return Math.random().toString(36).substring(2, 15) + Date.now().toString(36);\n  }\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a function that initializes and starts an Express.js HTTP server with REST API capabilities, static file serving, and error handling.\n\nFunction Description: The function `startServer` creates and configures an Express.js application, sets up middleware for static file serving and request body parsing, configures REST API routes with error handling, and starts the HTTP server on a specified port. The server handles both regular web traffic and API requests through virtual hosting.\n\nInput: None (uses environment variable PORT if available)\n\nOutput: Returns the HTTP server instance that was created and started.\n\nTask Description: ...\n\nFunction Description: ...\n\nInput: ...\n\nOutput: ...",
    "Canonical_solution": "function startServer() {\n    var http = require('http'),\n        express = require('express'),\n        app = express();\n\n    app.set('port', process.env.PORT || 3000);\n\n    app.use(express.static(__dirname + '/public'));\n    app.use(require('body-parser')());\n\n    var rest = require('connect-rest');\n    var apiOptions = {\n        context: '/',\n        domain: require('domain').create(),\n    };\n\n    apiOptions.domain.on('error', function(err){\n        console.log('API domain error.\\n', err.stack);\n        setTimeout(function(){\n            console.log('Server shutting down after API domain error.');\n            process.exit(1);\n        }, 5000);\n        server.close();\n        var worker = require('cluster').worker;\n        if(worker) worker.disconnect();\n    });\n\n    app.use(vhost('api.*', rest.rester(apiOptions)));\n\n    var server = http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express started in ' + app.get('env') +\n            ' mode on http://localhost:' + app.get('port') +\n            '; press Ctrl-C to terminate.');\n    });\n\n    return server;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst app = express();\n\n// Middleware for static files\napp.use(express.static('public'));\n\n// Body parsing middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Host-based routing\napp.use((req, res, next) => {\n  const host = req.headers.host;\n  if (host.startsWith('api.')) {\n    // Handle API routes\n    if (req.path === '/api') {\n      res.send('API Route');\n    } else {\n      res.status(404).send('Not Found');\n    }\n  } else {\n    next();\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\n// Start server\nconst PORT = process.env.PORT || 3000;\nconst server = app.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n\nmodule.exports = server;"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by detecting the shortening service and using the appropriate API or HTTP HEAD request to follow redirects. It handles recursive expansion with depth limiting and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening service names to their associated domains\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration including known URL shortening services and timeout\n- expand(args: [Object], callback: [Function]) -> [void] - The main method that initiates URL expansion\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to be called with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - err: [Error] - Any error encountered (optional)\n      - headers: [Object] - Response headers (optional)\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n\nThe class includes several internal API methods (isgd, googl, budurl, snipurl, generic) that handle specific URL shortening services or generic URL expansion through HTTP HEAD requests. These methods are not meant to be called directly but are used internally by the expand method.",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      isgd: ['is.gd', 'is.gd'],\n      googl: ['goo.gl', 'goo.gl'],\n      budurl: ['budurl.com', 'budurl.com'],\n      snipurl: ['snipurl.com', 'snipurl.com'],\n      generic: ['*.example.com', 'example.com']\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      isgd: this.isgd.bind(this),\n      googl: this.googl.bind(this),\n      budurl: this.budurl.bind(this),\n      snipurl: this.snipurl.bind(this),\n      generic: this.generic.bind(this)\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    const service = this.getService(url);\n    if (!service) {\n      this.generic(url, depth, seen, (err, result) => {\n        if (err) return callback(err, args);\n        callback(null, { ...args, url: result });\n      });\n    } else {\n      this.APIs[service](url, depth, seen, (err, result) => {\n        if (err) return callback(err, args);\n        if (result && result.url) {\n          const nextService = this.getService(result.url);\n          if (nextService && depth < 10) {\n            this.expand({ url: result.url, depth: depth + 1, seen: { ...seen, [url]: true } }, (err, res) => {\n              if (err) return callback(err, args);\n              callback(null, res);\n            });\n          } else {\n            callback(null, { ...args, url: result.url });\n          }\n        } else {\n          callback(null, { ...args, url: result });\n        }\n      });\n    }\n  }\n\n  getService(url) {\n    const domain = new URL(url).hostname;\n    for (const service in this.map) {\n      const domains = this.map[service];\n      for (const domainName of domains) {\n        if (domain.endsWith(domainName)) {\n          return service;\n        }\n      }\n    }\n    return null;\n  }\n\n  isgd(shortUrl, depth, seen, callback) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n    fetch(`https://is.gd/api.php?shorturl=${encodeURIComponent(shortUrl)}`, { signal: controller.signal })\n      .then(res => res.text())\n      .then(data => {\n        clearTimeout(timeoutId);\n        try {\n          const parsed = JSON.parse(data);\n          if (parsed && parsed.long_url) {\n            callback(null, { url: parsed.long_url });\n          } else {\n            callback(new Error('Failed to expand is.gd URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response from is.gd'), null);\n        }\n      })\n      .catch(err => {\n        clearTimeout(timeoutId);\n        if (err.name === 'AbortError') {\n          callback(new Error('Request timeout'), null);\n        } else {\n          callback(err, null);\n        }\n      });\n  }\n\n  googl(shortUrl, depth, seen, callback) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n    fetch(`https://www.googleapis.com/urlshortener/v1/url?shortUrl=${encodeURIComponent(shortUrl)}`, { signal: controller.signal })\n      .then(res => res.json())\n      .then(data => {\n        clearTimeout(timeoutId);\n        if (data && data.longUrl) {\n          callback(null, { url: data.longUrl });\n        } else {\n          callback(new Error('Failed to expand goo.gl URL'), null);\n        }\n      })\n      .catch(err => {\n        clearTimeout(timeoutId);\n        if (err.name === 'AbortError') {\n          callback(new Error('Request timeout'), null);\n        } else {\n          callback(err, null);\n        }\n      });\n  }\n\n  budurl(shortUrl, depth, seen, callback) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n    fetch(`https://budurl.com/api.php?short=${encodeURIComponent(shortUrl)}`, { signal: controller.signal })\n      .then(res => res.text())\n      .then(data => {\n        clearTimeout(timeoutId);\n        try {\n          const parsed = JSON.parse(data);\n          if (parsed && parsed.long_url) {\n            callback(null, { url: parsed.long_url });\n          } else {\n            callback(new Error('Failed to expand budurl.com URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response from budurl.com'), null);\n        }\n      })\n      .catch(err => {\n        clearTimeout(timeoutId);\n        if (err.name === 'AbortError') {\n          callback(new Error('Request timeout'), null);\n        } else {\n          callback(err, null);\n        }\n      });\n  }\n\n  snipurl(shortUrl, depth, seen, callback) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n    fetch(`https://snipurl.com/api.php?short=${encodeURIComponent(shortUrl)}`, { signal: controller.signal })\n      .then(res => res.text())\n      .then(data => {\n        clearTimeout(timeoutId);\n        try {\n          const parsed = JSON.parse(data);\n          if (parsed && parsed.long_url) {\n            callback(null, { url: parsed.long_url });\n          } else {\n            callback(new Error('Failed to expand snipurl.com URL'), null);\n          }\n        } catch (e) {\n          callback(new Error('Invalid response from snipurl.com'), null);\n        }\n      })\n      .catch(err => {\n        clearTimeout(timeoutId);\n        if (err.name === 'AbortError') {\n          callback(new Error('Request timeout'), null);\n        } else {\n          callback(err, null);\n        }\n      });\n  }\n\n  generic(shortUrl, depth, seen, callback) {\n    let currentUrl = shortUrl;\n    let currentDepth = depth;\n    const seenCopy = { ...seen, [currentUrl]: true };\n\n    const followRedirects = () => {\n      if (currentDepth >= 10) {\n        return callback(new Error('Max depth exceeded'), null);\n      }\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n      fetch(currentUrl, { method: 'HEAD', signal: controller.signal })\n        .then(res => {\n          clearTimeout(timeoutId);\n          const newUrl = res.url;\n          if (seenCopy[newUrl]) {\n            return callback(new Error('Cycle detected'), null);\n          }\n          seenCopy[newUrl] = true;\n          if (res.redirected) {\n            currentUrl = newUrl;\n            currentDepth++;\n            return followRedirects();\n          } else {\n            callback(null, { url: newUrl });\n          }\n        })\n        .catch(err => {\n          clearTimeout(timeoutId);\n          if (err.name === 'AbortError') {\n            callback(new Error('Request timeout'), null);\n          } else {\n            callback(err, null);\n          }\n        });\n    };\n\n    followRedirects();\n  }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const url = 'https://example.com';\n  const headers = {\n    'User-Agent': 'MyApp/1.0',\n    'Accept': 'application/json'\n  };\n\n  request.get({\n    url: url,\n    headers: headers,\n    decompress: true\n  }, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n    } else if (response && response.statusCode >= 200 && response.statusCode < 300) {\n      console.log('Response Body:', body);\n    } else {\n      console.error('Request failed with status code:', response ? response.statusCode : 'No response');\n    }\n  });\n}"
  }
]