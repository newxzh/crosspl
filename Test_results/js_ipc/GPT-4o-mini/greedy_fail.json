[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Trader {\n    constructor(config) {\n        this.key = config.key;\n        this.secret = config.secret;\n        this.currency = config.currency;\n        this.asset = config.asset;\n        this.pair = `${this.asset}_${this.currency}`;\n        this.name = 'EXMO';\n        this.nonce = Date.now();\n    }\n\n    api_query(method, params, callback) {\n        this.nonce += 1;\n        params.nonce = this.nonce;\n        const queryString = new URLSearchParams(params).toString();\n        const signature = this.signRequest(method, queryString);\n        const requestOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.key,\n                'Sign': signature\n            },\n            body: queryString\n        };\n\n        fetch(`https://api.exmo.com/v1/${method}`, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    callback(data.error, null);\n                } else {\n                    callback(null, data);\n                }\n            })\n            .catch(error => callback(error, null));\n    }\n\n    signRequest(method, params) {\n        const crypto = require('crypto');\n        const message = `${method}${params}`;\n        return crypto.createHmac('sha512', this.secret).update(message).digest('hex');\n    }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server with WebSocket support using Express and Socket.IO, implementing a particle simulation system with cluster and client event handling.\n\nFunction Description: The function `startServer` initializes an Express application, sets up static file serving, integrates Socket.IO for real-time communication, and configures a particle simulation system with collision detection and cluster management. It handles particle movement, boundary collisions, and client interactions through defined event handlers.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function starts a server listening on port 3000 but doesn't return any value)",
    "Canonical_solution": "function startServer() {\n    const express = require('express');\n    const app = express();\n    const server = require('http').Server(app);\n    const io = require('socket.io')(server);\n    const swip = require('../../../src/server/index.js');\n\n    app.use(express.static(__dirname + './../static'));\n\n    swip(io, {\n        cluster: {\n            events: {\n                update: (cluster) => {\n                    const blobs = cluster.data.blobs;\n                    const clients = cluster.clients;\n\n                    const updatedBlobs = blobs.map((blob) => {\n                        const boundaryOffset = blob.size;\n                        const client = clients.find((c) => isParticleInClient(blob, c));\n\n                        let nextPosX = blob.x + blob.speedX;\n                        let nextPosY = blob.y + blob.speedY;\n                        let nextSpeedX = blob.speedX;\n                        let nextSpeedY = blob.speedY;\n\n                        if (client) {\n                            if (((blob.speedX < 0) &&\n                                ((nextPosX - boundaryOffset) < client.transform.x)\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.left, nextPosY))) {\n                                nextPosX = client.transform.x + boundaryOffset;\n                                nextSpeedX = blob.speedX * -1;\n                            } else if (((blob.speedX > 0) &&\n                                ((nextPosX + boundaryOffset) > (client.transform.x + client.size.width))\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.right, nextPosY))) {\n                                nextPosX = client.transform.x + (client.size.width - boundaryOffset);\n                                nextSpeedX = blob.speedX * -1;\n                            }\n\n                            if (((blob.speedY < 0) &&\n                                ((nextPosY - boundaryOffset) < client.transform.y\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.top, nextPosX)))) {\n                                nextPosY = client.transform.y + boundaryOffset;\n                                nextSpeedY = blob.speedY * -1;\n                            } else if (((blob.speedY > 0) &&\n                                ((nextPosY + boundaryOffset) > (client.transform.y + client.size.height))\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.bottom, nextPosX))\n                            ) {\n                                nextPosY = client.transform.y + (client.size.height - boundaryOffset);\n                                nextSpeedY = blob.speedY * -1;\n                            }\n                        } else {\n                            const firstClient = clients[0];\n                            nextPosX = firstClient.transform.x + (firstClient.size.width / 2);\n                            nextPosY = firstClient.transform.y + (firstClient.size.height / 2);\n                            nextSpeedX = 0;\n                            nextSpeedY = 0;\n                        }\n\n                        blob.x = nextPosX;\n                        blob.y = nextPosY;\n                        blob.speedX = nextSpeedX;\n                        blob.speedY = nextSpeedY;\n\n                        return blob;\n                    });\n\n                    return {\n                        blobs: { $set: updatedBlobs },\n                    };\n                },\n                merge: (cluster1, cluster2, transform) => ({\n                    blobs: { $set: getNewParticleDist(cluster1, cluster2, transform) },\n                    backgroundColor: { $set: cluster1.data.backgroundColor },\n                }),\n            },\n            init: () => ({ blobs: [], backgroundColor: getRandomColor() }),\n        },\n\n        client: {\n            init: () => ({}),\n            events: {\n                addBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $push: blobs } },\n                        },\n                    };\n                },\n                updateBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $set: blobs } },\n                        },\n                    };\n                },\n            },\n        },\n    });\n\n    server.listen(3000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nfunction startServer() {\n    const app = express();\n    const server = http.createServer(app);\n    const io = socketIo(server);\n\n    app.use(express.static('public'));\n\n    const particles = [];\n    const clusters = [];\n\n    function createParticle() {\n        return {\n            x: Math.random() * 800,\n            y: Math.random() * 600,\n            vx: (Math.random() - 0.5) * 2,\n            vy: (Math.random() - 0.5) * 2,\n        };\n    }\n\n    function updateParticles() {\n        particles.forEach(p => {\n            p.x += p.vx;\n            p.y += p.vy;\n\n            if (p.x < 0 || p.x > 800) p.vx *= -1;\n            if (p.y < 0 || p.y > 600) p.vy *= -1;\n        });\n    }\n\n    function detectCollisions() {\n        for (let i = 0; i < particles.length; i++) {\n            for (let j = i + 1; j < particles.length; j++) {\n                const dx = particles[i].x - particles[j].x;\n                const dy = particles[i].y - particles[j].y;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                if (distance < 10) {\n                    particles[i].vx *= -1;\n                    particles[i].vy *= -1;\n                    particles[j].vx *= -1;\n                    particles[j].vy *= -1;\n                }\n            }\n        }\n    }\n\n    io.on('connection', (socket) => {\n        console.log('A user connected');\n        socket.emit('init', particles);\n\n        socket.on('addParticle', () => {\n            particles.push(createParticle());\n        });\n\n        socket.on('disconnect', () => {\n            console.log('A user disconnected');\n        });\n    });\n\n    setInterval(() => {\n        updateParticles();\n        detectCollisions();\n        io.emit('update', particles);\n    }, 1000 / 60);\n\n    server.listen(3000, () => {\n        console.log('Server is running on http://localhost:3000');\n    });\n}\n\nstartServer();"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n    constructor() {\n        this.map = {\n            'is.gd': this.isgd,\n            'goo.gl': this.googl,\n            'budurl.com': this.budurl,\n            'snipurl.com': this.snipurl\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 5 || seen[url]) {\n            return callback({ error: 'Max depth reached or URL already seen' });\n        }\n        seen[url] = true;\n\n        const service = Object.keys(this.map).find(key => url.includes(key));\n        if (service) {\n            this.map[service]({ url, depth: depth + 1, seen }, callback);\n        } else {\n            this.generic({ url, depth: depth + 1, seen }, callback);\n        }\n    }\n\n    isgd(args, callback) {\n        // Implement is.gd API call here\n    }\n\n    googl(args, callback) {\n        // Implement goo.gl API call here\n    }\n\n    budurl(args, callback) {\n        // Implement budurl.com API call here\n    }\n\n    snipurl(args, callback) {\n        // Implement snipurl.com API call here\n    }\n\n    generic(args, callback) {\n        const { url, depth, seen } = args;\n        fetch(url, { method: 'HEAD', redirect: 'follow', timeout: this.timeout })\n            .then(response => {\n                if (response.url !== url) {\n                    this.expand({ url: response.url, depth, seen }, callback);\n                } else {\n                    callback({ expandedUrl: url });\n                }\n            })\n            .catch(err => callback({ error: err.message }));\n    }\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function to set up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB as the session store. It integrates Next.js for server-side rendering and sets up a catch-all route handler. The server listens on a specified port and connects to MongoDB using environment variables for configuration.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that:\n- Listens on the specified port\n- Outputs the server URL to console when ready\n- Maintains persistent connections to MongoDB for session storage)",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  mongoose.connect(MONGO_URL);\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  const server = express();\n\n  const sessionOptions = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: mongoSessionStore.create({\n      mongoUrl: MONGO_URL,\n      ttl: 14 * 24 * 60 * 60,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      maxAge: 14 * 24 * 60 * 60 * 1000,\n      domain: 'localhost',\n    },\n  };\n\n  const sessionMiddleware = session(sessionOptions);\n  server.use(sessionMiddleware);\n\n  server.get('*', (req, res) => handle(req, res));\n\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on ${ROOT_URL}`);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express'); \nconst session = require('express-session'); \nconst MongoDBStore = require('connect-mongodb-session')(session); \nconst mongoose = require('mongoose'); \nconst next = require('next'); \n\nconst setupServer = async () => { \n    const dev = process.env.NODE_ENV !== 'production'; \n    const app = next({ dev }); \n    const handle = app.getRequestHandler(); \n\n    await app.prepare(); \n\n    const mongoUrl = process.env.NODE_ENV === 'production' ? process.env.MONGO_URL : process.env.MONGO_URL_TEST; \n    await mongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true }); \n\n    const store = new MongoDBStore({ uri: mongoUrl, collection: 'sessions' }); \n\n    const server = express(); \n\n    server.use(session({ \n        secret: process.env.SESSION_SECRET, \n        resave: false, \n        saveUninitialized: false, \n        store: store, \n        cookie: { \n            maxAge: 1000 * 60 * 60 * 24, \n            name: process.env.SESSION_NAME \n        } \n    })); \n\n    server.all('*', (req, res) => { \n        return handle(req, res); \n    }); \n\n    const port = process.env.PORT || 8000; \n    server.listen(port, (err) => { \n        if (err) throw err; \n        console.log(`> Ready on http://localhost:${port}`); \n    }); \n}; \n\nsetupServer();"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a function to set up an Express.js server with middleware configuration, route handling, and database synchronization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with CORS support, request body parsing, and database synchronization. It configures middleware, defines basic routes, and starts the server on a specified port. The server integrates authentication and user management routes from external modules.\n\nInput: None (The function takes no parameters as it's self-contained for server setup)\n\nOutput: None (The function doesn't return anything but starts a server process that listens on the specified port)",
    "Canonical_solution": "function setupExpressServer() {\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n    const cors = require(\"cors\");\n\n    const app = express();\n\n    var corsOptions = {\n        origin: \"http://localhost:8081\"\n    };\n\n    app.use(cors(corsOptions));\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n\n    const db = require(\"./app/models\");\n    const Role = db.role;\n\n    db.sequelize.sync();\n\n    app.get(\"/\", (req, res) => {\n        res.json({ message: \"Welcome to bezkoder application.\" });\n    });\n\n    require('./app/routes/auth.routes')(app);\n    require('./app/routes/user.routes')(app);\n\n    const PORT = process.env.PORT || 8080;\n    app.listen(PORT, () => {\n        console.log(`Server is running on port ${PORT}.`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express'); \nconst cors = require('cors'); \nconst bodyParser = require('body-parser'); \nconst mongoose = require('mongoose'); \nconst userRoutes = require('./routes/user'); \nconst authRoutes = require('./routes/auth'); \n\nfunction setupExpressServer() { \n    const app = express(); \n    const PORT = process.env.PORT || 3000; \n\n    app.use(cors()); \n    app.use(bodyParser.json()); \n    app.use(bodyParser.urlencoded({ extended: true })); \n\n    mongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true }) \n        .then(() => console.log('Database connected')) \n        .catch(err => console.error('Database connection error:', err)); \n\n    app.use('/api/users', userRoutes); \n    app.use('/api/auth', authRoutes); \n\n    app.listen(PORT, () => { \n        console.log(`Server is running on port ${PORT}`); \n    }); \n} \n\nsetupExpressServer();"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server using the Express framework in JavaScript, with middleware configurations for request processing and static file serving.\n\nFunction Description: The function `createServer` initializes an Express application, configures various middleware for logging, request parsing, and static file serving, and starts an HTTP server listening on a specified port. It also includes environment-specific error handling for development mode.\n\nInput: None (The function does not take any parameters; it uses environment variables like `process.env.PORT` for configuration.)\n\nOutput: None (The function does not return any value; it starts an HTTP server that listens on the specified port and logs a message upon successful startup.)",
    "Canonical_solution": "function createServer() {\n    var express = require('express');\n    var http = require('http');\n    var path = require('path');\n\n    var app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded());\n    app.use(express.methodOverride());\n    app.use(express.static(path.join(__dirname, '/public')));\n    app.use(express.static(path.join(__dirname, '/tests')));\n\n    if ('development' == app.get('env')) {\n        app.use(express.errorHandler());\n    }\n\n    http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express server listening on port ' + app.get('port'));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express'); \nconst morgan = require('morgan'); \nconst path = require('path'); \n\nfunction createServer() { \n    const app = express(); \n    const port = process.env.PORT || 3000; \n\n    app.use(morgan('dev')); \n    app.use(express.json()); \n    app.use(express.urlencoded({ extended: true })); \n    app.use(express.static(path.join(__dirname, 'public'))); \n\n    app.use((err, req, res, next) => { \n        if (process.env.NODE_ENV === 'development') { \n            console.error(err.stack); \n            res.status(500).send('Something broke!'); \n        } else { \n            res.status(500).send('Internal Server Error'); \n        } \n    }); \n\n    app.listen(port, () => { \n        console.log(`Server is running on http://localhost:${port}`); \n    }); \n} \n\ncreateServer();"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TSClient {\n    constructor(query, cb) {\n        this.search = {\n            q: query,\n            since_id: null,\n            rcount: 100,\n            id: this._generateId(query)\n        };\n        this.id = this.search.id;\n        this.new_since_id = null;\n        this._loadState();\n        cb(this);\n    }\n\n    _generateId(query) {\n        const crypto = require('crypto');\n        return crypto.createHash('md5').update(query).digest('hex');\n    }\n\n    _loadState() {\n        const fs = require('fs');\n        const stateFile = `./${this.id}_state.json`;\n        if (fs.existsSync(stateFile)) {\n            const state = JSON.parse(fs.readFileSync(stateFile));\n            this.search.since_id = state.since_id || null;\n        }\n    }\n\n    set(search) {\n        this.search = { ...this.search, ...search };\n        this._persistState();\n    }\n\n    _persistState() {\n        const fs = require('fs');\n        fs.writeFileSync(`./${this.id}_state.json`, JSON.stringify({ since_id: this.search.since_id }));\n    }\n\n    syncSearch(callback) {\n        this._walker({ ts: this, search: this.search, cb: callback, page: 1, results: [] });\n    }\n\n    _walker(s) {\n        const fetchResults = (page) => {\n            // Simulate fetching results from Twitter API\n            const results = this._fetchFromApi(s.search.q, s.search.since_id, s.search.rcount, page);\n            s.results = s.results.concat(results.tweets);\n            if (results.next_page) {\n                s.page++;\n                this._walker(s);\n            } else {\n                s.ts.new_since_id = results.new_since_id;\n                s.ts.set({ since_id: s.ts.new_since_id });\n                s.cb(s.results);\n            }\n        };\n        fetchResults(s.page);\n    }\n\n    _fetchFromApi(query, since_id, rcount, page) {\n        // Placeholder for actual API call\n        return {\n            tweets: [], // Replace with actual tweet data\n            next_page: false, // Replace with actual pagination logic\n            new_since_id: null // Replace with actual new since_id\n        };\n    }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express'); \nconst path = require('path'); \nconst additionalRoutes = require('./routes'); \n\nfunction createExpressServer() { \n    const app = express(); \n    const port = process.env.PORT || 3000; \n\n    app.use(express.static(path.join(__dirname, '..'))); \n    app.use('/api', additionalRoutes); \n\n    const server = app.listen(port, () => { \n        console.log(`Server is running on http://localhost:${port}`); \n    }); \n\n    return server; \n} \n\ncreateExpressServer();"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "function makeHttpRequest() {\n    const request = require('request');\n    const url = 'https://example.com/api';\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer your_token_here'\n    };\n    const data = {\n        key1: 'value1',\n        key2: 'value2'\n    };\n\n    request.post({ url: url, headers: headers, json: data }, function (error, response, body) {\n        if (error) {\n            console.error('Error:', error);\n        } else {\n            console.log('Response Body:', body);\n        }\n    });\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a JavaScript class that implements a server capable of handling HTTP requests and piping data to responses, with support for live reload functionality and error handling.\n\nClass Description: The `Server` class is designed to create an HTTP server that can handle incoming requests, pipe data to responses (particularly for live reload functionality), and manage server lifecycle events. It supports both standalone operation and integration with existing Express-like applications.\n\nAttributes:\n- options: [Object] - Configuration options for the server including livereload file path and port number.\n- clients: [Object] - Storage for connected clients (used for live reload functionality).\n- server: [http.Server] - The underlying HTTP server instance.\n- app: [Object] - Optional Express-like application instance for integration.\n- port: [Number] - The port number the server is listening on.\n\nMethods:\n- constructor(options) -> [Server] - Initializes the server with given options, setting defaults for livereload path and port.\n- configure(app) -> [Server] - Configures the server to work with an existing Express-like application.\n- handler(req, res, next) -> [Server] - Handles incoming HTTP requests, supporting both middleware and direct handling modes.\n- livereload(req, res) -> [void] - Pipes the livereload JavaScript file to the response.\n- listen(port, fn) -> [void] - Starts the server listening on the specified port.\n- close(req, res) -> [void] - Closes the server and optionally ends a response.\n- error(e) -> [void] - Handles and logs server errors.\n\nNote: The class demonstrates inter-process communication through HTTP and file system operations, particularly in the `livereload` method where it pipes file contents directly to HTTP responses.",
    "Canonical_solution": "var fs = require('fs');\nvar http = require('http');\n\nclass Server {\n  constructor(options) {\n    this.options = options || {};\n    this.options.livereload = this.options.livereload || path.join(__dirname, 'public/livereload.js');\n    this.options.port = parseInt(this.options.port || 35729, 10);\n    this.clients = {};\n    this.configure(this.options.app);\n  }\n\n  configure(app) {\n    if(!app) {\n      this.server = http.createServer(this.handler.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    var self = this;\n    this.app = app;\n\n    this.app.listen = function(port, done) {\n      done = done || function() {};\n      var srv = self.server = http.createServer(app);\n      srv.on('error', self.error.bind(self));\n      srv.on('close', self.close.bind(self));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler(req, res, next) {\n    var middleware = typeof next === 'function';\n    if(middleware) {\n      this.handle(req, res, next);\n      return this;\n    }\n\n    req\n      .on('end', this.handle.bind(this, req, res))\n      .on('data', function(chunk) {\n        req.data = req.data || '';\n        req.data += chunk;\n      });\n\n    return this;\n  }\n\n  livereload(req, res) {\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server.listen(port, fn);\n  }\n\n  close(req, res) {\n    if(res) res.end();\n    if(this.server._handle) this.server.close();\n  }\n\n  error(e) {\n    console.error('Error:', e.message);\n    console.error(e.stack);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "class Server {\n    constructor(options) {\n        this.options = options || {};\n        this.options.port = this.options.port || 3000;\n        this.options.livereloadPath = this.options.livereloadPath || '/livereload.js';\n        this.clients = {};\n        this.server = require('http').createServer(this.handler.bind(this));\n        this.app = null;\n        this.port = this.options.port;\n    }\n\n    configure(app) {\n        this.app = app;\n        this.app.use((req, res, next) => this.handler(req, res, next));\n        return this;\n    }\n\n    handler(req, res, next) {\n        if (req.url === this.options.livereloadPath) {\n            return this.livereload(req, res);\n        }\n        if (this.app) {\n            return this.app(req, res, next);\n        }\n        res.writeHead(404);\n        res.end('Not Found');\n    }\n\n    livereload(req, res) {\n        res.writeHead(200, { 'Content-Type': 'application/javascript' });\n        res.end(`console.log('Live reload connected');`);\n    }\n\n    listen(port, fn) {\n        this.server.listen(port || this.port, fn);\n    }\n\n    close(req, res) {\n        this.server.close(() => {\n            if (res) {\n                res.end('Server closed');\n            }\n        });\n    }\n\n    error(e) {\n        console.error('Server error:', e);\n    }\n}"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Retrieve and process TV channel information from multiple providers via HTTP requests, then extract and deduplicate channel details.\n\nFunction Description: The function makes HTTP POST requests to a TV guide service for each provider, extracts channel information from the HTML response, and returns a deduplicated list of channels. It uses axios for HTTP requests, cheerio for HTML parsing, and lodash for deduplication.\n\nInput: None (The function uses hardcoded providers array and automatically determines the current date)\n\nOutput: Array of objects containing unique TV channel information with the following structure:\n[\n    {\n        lang: string,       // Language code ('it' for Italian)\n        name: string,       // Channel name\n        site_id: string     // Unique identifier combining channel number and slug\n    },\n    ...\n]",
    "Canonical_solution": "function async channels() {\n    const axios = require('axios')\n    const _ = require('lodash')\n\n    const providers = ['-1', '-2', '-3']\n\n    const channels = []\n    for (let provider of providers) {\n        const data = await axios\n            .post('https://www.guida.tv/guide/schedule', null, {\n                params: {\n                    provider,\n                    region: 'Italy',\n                    TVperiod: 'Night',\n                    date: dayjs().format('YYYY-MM-DD'),\n                    st: 0,\n                    u_time: 1429,\n                    is_mobile: 1\n                }\n            })\n            .then(r => r.data)\n            .catch(console.log)\n\n        const $ = cheerio.load(data)\n        $('.channelname').each((i, el) => {\n            const name = $(el).find('center > a:eq(1)').text()\n            const url = $(el).find('center > a:eq(1)').attr('href')\n            const [, number, slug] = url.match(/\\/(\\d+)\\/(.*)\\.html$/)\n\n            channels.push({\n                lang: 'it',\n                name,\n                site_id: `${number}/${slug}`\n            })\n        })\n    }\n\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const axios = require('axios');\nconst cheerio = require('cheerio');\nconst _ = require('lodash');\n\nasync function fetchChannels() {\n    const providers = ['provider1', 'provider2', 'provider3'];\n    const channels = [];\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    for (const provider of providers) {\n        const response = await axios.post(`https://api.tvguide.com/${provider}/channels`, {\n            date: currentDate\n        });\n        const $ = cheerio.load(response.data);\n        \n        $('channel').each((index, element) => {\n            const lang = $(element).attr('lang') || 'it';\n            const name = $(element).find('name').text();\n            const channelNumber = $(element).find('number').text();\n            const slug = $(element).find('slug').text();\n            const site_id = `${channelNumber}-${slug}`;\n\n            channels.push({ lang, name, site_id });\n        });\n    }\n\n    return _.uniqBy(channels, 'site_id');\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve a ReDoc documentation interface, including handling requests for the ReDoc JavaScript file and rendering the documentation page with the provided specification.\n\nFunction Description: The function creates an HTTP server that serves two main routes: (1) '/redoc.standalone.js' which streams the ReDoc JavaScript file to the client, and (2) '/' which renders a complete HTML page with the ReDoc interface hydrated with the provided OpenAPI specification. The server handles other routes with a 404 response.\n\nInput:\n- port: [number] - The port number on which the HTTP server should listen\n- filePath: [string] - The file path to the 'redoc.standalone.js' file to be served\n- specPath: [string] - The file path to the OpenAPI specification file (YAML format)\n\nOutput: None (The function starts an HTTP server that continues running until manually stopped)\n\nNote: The function assumes the availability of certain external dependencies (yaml, fs, http, React, ServerStyleSheet, Redoc) which should be imported/required in the actual implementation. The function also uses async/await for handling asynchronous operations related to the Redoc store creation.",
    "Canonical_solution": "const http = require('http');\nconst fs = require('fs');\n\nfunction createServer(port, filePath, specPath) {\n    const server = http.createServer(async (request, response) => {\n        if (request.url === '/redoc.standalone.js') {\n            fs.createReadStream(filePath, 'utf8').pipe(response);\n        } else if (request.url === '/') {\n            const spec = yaml.load(readFileSync(resolve(__dirname, specPath), 'utf-8'));\n            const store = await createStore(spec, 'path/to/spec.yaml');\n\n            const sheet = new ServerStyleSheet();\n            const html = renderToString(sheet.collectStyles(React.createElement(Redoc, { store })));\n            const css = sheet.getStyleTags();\n\n            const res = `<html>\n            <head>\n                <meta charset=\"utf8\" />\n                <title>ReDoc</title>\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                <style>\n                    body {\n                        padding: 0;\n                        margin: 0;\n                    }\n                </style>\n                <script src=\"redoc.standalone.js\"></script>\n                <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n                ${css}\n            </head>\n            <body>\n            <script>\n                document.addEventListener('DOMContentLoaded', function() {\n                    const state = ${JSON.stringify(await store.toJS())};\n                    Redoc.hydrate(state, document.getElementById('redoc'));\n                });\n                </script>\n                <div id=\"redoc\">${html}</div>\n            </body>\n            </html>`;\n            response.writeHead(200, { 'Content-Length': res.length });\n            response.write(res);\n            response.end();\n        } else {\n            response.writeHead(404);\n            response.write('Not found');\n            response.end();\n        }\n    });\n\n    server.listen(port, () => console.log(`Server started: http://127.0.0.1:${port}`));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { ServerStyleSheet } = require('styled-components');\nconst Redoc = require('redoc');\n\nasync function startServer(port, filePath, specPath) {\n    const redocJs = await fs.readFile(filePath, 'utf8');\n    const spec = await fs.readFile(specPath, 'utf8');\n\n    const server = http.createServer((req, res) => {\n        if (req.url === '/redoc.standalone.js') {\n            res.writeHead(200, { 'Content-Type': 'application/javascript' });\n            res.end(redocJs);\n        } else if (req.url === '/') {\n            const html = `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <title>API Documentation</title>\n                    <script src=\"/redoc.standalone.js\"></script>\n                </head>\n                <body>\n                    <redoc spec-url='data:text/yaml;base64,${Buffer.from(spec).toString('base64')}'></redoc>\n                </body>\n                </html>\n            `;\n            res.writeHead(200, { 'Content-Type': 'text/html' });\n            res.end(html);\n        } else {\n            res.writeHead(404, { 'Content-Type': 'text/plain' });\n            res.end('404 Not Found');\n        }\n    });\n\n    server.listen(port, () => {\n        console.log(`Server is running on http://localhost:${port}`);\n    });\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createFileServer() {\n    const mimeTypes = {\n        '.html': 'text/html',\n        '.js': 'application/javascript',\n        '.css': 'text/css',\n        '.png': 'image/png',\n        '.jpg': 'image/jpeg',\n        '.gif': 'image/gif',\n        '.svg': 'image/svg+xml',\n        '.ico': 'image/x-icon'\n    };\n\n    const server = http.createServer((req, res) => {\n        const filePath = path.join(__dirname, 'static', req.url === '/' ? 'index.html' : req.url);\n        const extname = path.extname(filePath);\n        const contentType = mimeTypes[extname] || 'application/octet-stream';\n\n        fs.readFile(filePath, (err, content) => {\n            if (err) {\n                if (err.code === 'ENOENT') {\n                    res.writeHead(404, { 'Content-Type': 'text/plain' });\n                    res.end('404 Not Found');\n                } else {\n                    res.writeHead(500);\n                    res.end('500 Internal Server Error');\n                }\n            } else {\n                res.writeHead(200, { 'Content-Type': contentType });\n                res.end(content, 'utf-8');\n            }\n        });\n    });\n\n    server.listen(1338, () => {\n        console.log('Server running at http://localhost:1338/');\n    });\n}\n\ncreateFileServer();"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a TCP server class in JavaScript that can handle both regular and TLS-encrypted connections, manage client connections, and provide methods to start and destroy the server.\n\nClass Description: The MockServer class is a TCP server implementation that can be configured to use either regular TCP or TLS encryption. It manages server lifecycle, client connections, and provides methods to start and stop the server gracefully.\n\nAttributes:\n- host: [String] - The host address the server binds to\n- port: [Number] - The port number the server listens on\n- family: [String] - The IP address family (e.g., 'ipv4')\n- server: [Object] - The underlying TCP/TLS server instance\n- tlsEnabled: [Boolean] - Flag indicating if TLS is enabled\n- state: [String] - Current server state ('stopped', 'running', or 'destroyed')\n- connections: [Number] - Count of active client connections\n- sockets: [Array] - Array of active client sockets\n\nMethods:\n- constructor(port, host, options) -> [void] - Initializes the server with specified port, host, and options (including TLS configuration)\n- start() -> [Promise] - Starts the server and returns a promise that resolves when listening\n- destroy() -> [Promise] - Gracefully shuts down the server and returns a promise that resolves when complete",
    "Canonical_solution": "const net = require('net');\nconst tls = require('tls');\n\nclass MockServer {\n  constructor(port, host, options) {\n    // Save the settings\n    this.host = host;\n    this.port = port;\n    this.family = 'ipv4';\n\n    // Create a server socket\n    this.server = options.tls ? tls.createServer(options) : net.createServer(options);\n    this.tlsEnabled = !!options.tls;\n\n    // state\n    this.state = 'stopped';\n\n    // Number of connections\n    this.connections = 0;\n\n    // sockets\n    this.sockets = [];\n  }\n\n  /**\n   * Start the TCP server\n   */\n  start() {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self.server.on('error', err => {\n        reject(err);\n      });\n\n      const connectionEventName = self.tlsEnabled ? 'secureConnection' : 'connection';\n      self.server.on(connectionEventName, c => {\n        self.connections = self.connections + 1;\n        self.sockets.push(c);\n\n        c.on('error', e => {\n          console.warn('connection error: ', e);\n        });\n\n        c.on('close', () => {\n          self.connections = self.connections - 1;\n          const index = self.sockets.indexOf(c);\n          if (index !== -1) {\n            self.sockets.splice(index, 1);\n          }\n        });\n      });\n\n      self.server.listen(self.port, self.host, () => {\n        // update address information if necessary\n        self.host = self.server.address().address;\n        self.port = self.server.address().port;\n        self.family = self.server.address().family;\n\n        resolve(self);\n      });\n\n      self.state = 'running';\n    });\n  }\n\n  /**\n   * Destroy the TCP server\n   */\n  destroy() {\n    const self = this;\n    if (self.state === 'destroyed') {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      self.sockets.forEach(socket => socket.destroy());\n      self.server.close(err => {\n        if (err) return reject(err);\n        self.state = 'destroyed';\n        resolve();\n      });\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class MockServer {\n    constructor(port, host, options = {}) {\n        this.host = host || 'localhost';\n        this.port = port || 8080;\n        this.family = options.family || 'ipv4';\n        this.tlsEnabled = options.tlsEnabled || false;\n        this.state = 'stopped';\n        this.connections = 0;\n        this.sockets = [];\n        this.server = this.tlsEnabled ? require('tls').createServer(options.tlsOptions) : require('net').createServer();\n        \n        this.server.on('connection', (socket) => {\n            this.connections++;\n            this.sockets.push(socket);\n            socket.on('close', () => {\n                this.connections--;\n                this.sockets = this.sockets.filter(s => s !== socket);\n            });\n        });\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            if (this.state !== 'stopped') {\n                return reject(new Error('Server is already running or destroyed'));\n            }\n            this.state = 'running';\n            this.server.listen(this.port, this.host, () => {\n                resolve(`Server running on ${this.host}:${this.port}`);\n            });\n        });\n    }\n\n    destroy() {\n        return new Promise((resolve) => {\n            if (this.state !== 'running') {\n                return resolve('Server is not running');\n            }\n            this.state = 'destroyed';\n            this.server.close(() => {\n                this.sockets.forEach(socket => socket.destroy());\n                this.connections = 0;\n                this.sockets = [];\n                resolve('Server destroyed');\n            });\n        });\n    }\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = '') {\n        const headers = {\n            'Content-Type': 'application/json',\n            'Authorization': this.generateAuthHeader(),\n            'X-Device-ID': this.did,\n            'X-Fingerprint': this.finger,\n            'X-OAID': this.oaid\n        };\n\n        const options = {\n            method: method.toUpperCase(),\n            headers: headers,\n            body: method.toLowerCase() === 'post' ? JSON.stringify(body) : null\n        };\n\n        try {\n            const response = await fetch(url, options);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            throw new Error(`Request failed: ${error.message}`);\n        }\n    }\n\n    generateAuthHeader() {\n        // Implement the logic to generate the authentication header\n        return `Bearer ${this.token}`;\n    }\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data in batches, and forwards each batch to an external service for processing.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 5000. When a client connects, it sets up a bidirectional communication channel where incoming data from the client is collected in batches (separated by '.'). Each complete batch is then sent to an external 'uppercase' service via a REQ socket. The server handles data streaming and batch processing efficiently.\n\nInput: None (The function takes no parameters; configuration is hardcoded)\n\nOutput: None (The function creates a server instance that runs indefinitely, listening for connections)\n\n---\n\nIf you'd prefer the class format (though the reference code is function-based):\n\nTask Description: Implement a TCP server class in Node.js that manages client connections and batch processing of incoming data.\n\nClass Description: The `TCPServer` class encapsulates a TCP server that listens for client connections, collects incoming data in batches, and forwards complete batches to an external service.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- port: [number] - The port number the server listens on (default: 5000)\n\nMethods:\n- constructor([port: number]) -> void - Initializes the server with optional port configuration\n- start() -> void - Starts the server and begins listening for connections\n- handleConnection(conn: net.Socket) -> void - Internal method to manage client connections and data processing\n- processBatch(batch: string[]) -> void - Sends a complete batch to the external service",
    "Canonical_solution": "function createTCPServer() {\n    var server = require('net').createServer();\n    server.on('connection', function(conn) {\n        conn.setEncoding('utf8');\n        \n        var req = context.socket('REQ');\n        req.setEncoding('utf8');\n        req.pipe(conn);\n        req.connect('uppercase');\n        \n        var batch = [];\n        var ask = function (q) {\n            req.write(q, 'utf8');\n        }\n        function readBatch() {\n            var msg; while (msg = conn.read()) {\n                msg.split('\\n').forEach(function(item) {\n                    if (item == '.') {\n                        console.log('Sending batch %s', batch);\n                        batch.forEach(ask);\n                        batch = [];\n                    }\n                    else if (item != '') {\n                        batch.push(item);\n                    }\n                });\n            }\n        }\n        conn.on('readable', readBatch);\n        readBatch();\n    });\n    server.listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst zmq = require('zeromq');\n\nclass TCPServer {\n    constructor(port = 5000) {\n        this.port = port;\n        this.server = net.createServer(this.handleConnection.bind(this));\n        this.batch = [];\n        this.socket = zmq.socket('req');\n        this.socket.connect('tcp://localhost:6000');\n    }\n\n    start() {\n        this.server.listen(this.port, () => {\n            console.log(`Server listening on port ${this.port}`);\n        });\n    }\n\n    handleConnection(conn) {\n        conn.on('data', (data) => {\n            const messages = data.toString().split('.');\n            messages.forEach((message) => {\n                if (message) {\n                    this.batch.push(message);\n                }\n            });\n            if (this.batch.length > 0) {\n                this.processBatch(this.batch);\n                this.batch = [];\n            }\n        });\n\n        conn.on('end', () => {\n            console.log('Client disconnected');\n        });\n    }\n\n    processBatch(batch) {\n        this.socket.send(JSON.stringify(batch), (err) => {\n            if (err) {\n                console.error('Error sending batch:', err);\n            } else {\n                console.log('Batch sent to external service:', batch);\n            }\n        });\n    }\n}\n\nconst server = new TCPServer();\nserver.start();"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a TCP server in Node.js that serves Flash cross-domain policy files to clients, handling connections, errors, and policy file generation dynamically.\n\nClass Description: The Server class implements a TCP server that listens for Flash policy file requests and responds with an appropriate cross-domain policy XML. It handles server lifecycle events, client connections, and dynamic policy configuration.\n\nAttributes:\n- origins: [Array] - List of allowed domains and ports in \"domain:port\" format\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [net.Server] - The TCP server instance\n- server: [Object] - Optional fallback HTTP server\n- buffer: [Buffer] - Compiled policy file in binary format\n\nMethods:\n- constructor(options, origins) -> [Server] - Initializes the server with configuration options and allowed origins\n- listen(port, server, cb) -> [Server] - Starts listening on specified port, with optional fallback server and callback\n- responder(socket) -> [void] - Responds to client connections with policy file\n- compile() -> [Server] - Generates the policy file XML and converts it to buffer\n- add() -> [Server] - Adds one or more allowed origins to the policy\n- remove(origin) -> [Server] - Removes a specific origin from the policy\n- close() -> [Server] - Closes the server and cleans up resources",
    "Canonical_solution": "var net = require('net');\n\nclass Server {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => {\n        this.responder.call(this, socket);\n      });\n      this.responder.call(this, socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges. ' +\n          (\n            this.server\n            ? 'The Flash Policy File requests will only be served inline over the supplied HTTP server. Inline serving is slower than a dedicated server instance.'\n            : 'No fallback server supplied, we will be unable to answer Flash Policy File requests.'\n          )\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n      if (this.server && this.server['@'] && this.server.online) {\n        this.server.removeListener('connection', this.server['@']);\n      }\n      delete this.server?.online;\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (\n            data &&\n            data[0] === 60 &&\n            data.toString() === '<policy-file-request/>\\0' &&\n            socket &&\n            (socket.readyState === 'open' || socket.readyState === 'writeOnly')\n          ) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    if (this.port >= 0) {\n      this.socket.listen(this.port, () => {\n        this.socket.online = true;\n        callback?.call(this);\n      });\n    }\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = Buffer.from(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst xml2js = require('xml2js');\n\nclass Server {\n    constructor(options = {}, origins = []) {\n        this.origins = origins;\n        this.port = options.port || 843;\n        this.log = options.log || console.log;\n        this.socket = net.createServer(this.responder.bind(this));\n        this.buffer = null;\n        this.compile();\n    }\n\n    listen(port = this.port, server, cb) {\n        if (server) {\n            this.server = server;\n        }\n        this.socket.listen(port, cb);\n        this.log(`Server listening on port ${port}`);\n        this.socket.on('error', (err) => this.log(`Server error: ${err}`));\n    }\n\n    responder(socket) {\n        socket.on('data', (data) => {\n            if (data.toString().trim() === '<policy-file-request/>') {\n                socket.write(this.buffer);\n                socket.end();\n            }\n        });\n        socket.on('error', (err) => this.log(`Socket error: ${err}`));\n    }\n\n    compile() {\n        const policy = {\n            cross-domain-access: {\n                allow-access-from: this.origins.map(origin => ({ '$': origin })),\n            },\n        };\n        const builder = new xml2js.Builder();\n        const xml = builder.buildObject(policy);\n        this.buffer = Buffer.from(xml);\n        return this;\n    }\n\n    add(origin) {\n        if (Array.isArray(origin)) {\n            this.origins.push(...origin);\n        } else {\n            this.origins.push(origin);\n        }\n        this.compile();\n        return this;\n    }\n\n    remove(origin) {\n        this.origins = this.origins.filter(o => o !== origin);\n        this.compile();\n        return this;\n    }\n\n    close() {\n        this.socket.close(() => this.log('Server closed'));\n        return this;\n    }\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's 'net' module to listen for incoming connections, handle client messages, and emit events for commands received.\n\nClass Description: TCPListener is a class that creates a TCP server to listen for incoming connections on a specified port. It handles client connections, processes incoming data, and emits events when commands are received. The class extends Node.js's EventEmitter to provide event-driven functionality.\n\nAttributes:\n- port: [Number] - The port number on which the TCP server will listen\n- server: [Object] - The TCP server instance created by the 'net' module\n\nMethods:\n- constructor(port) -> [TCPListener] - Initializes the TCPListener instance with the specified port\n- start() -> [void] - Creates and starts the TCP server, sets up event handlers for client connections, data reception, and errors. Emits 'command' events when valid messages are received and 'log' events for server status updates\n\nThe class emits the following events:\n- 'command': (command, params, options, callback) - Emitted when a valid command message is received from a client\n- 'log': (message) - Emitted for logging server status and errors",
    "Canonical_solution": "var events = require('events');\nvar net = require('net');\n\nclass TCPListener {\n    constructor(port) {\n        this.port = port;\n        this.server = null;\n    }\n\n    start() {\n        this.server = net.createServer((c) => {\n            var data = '';\n            try {\n                c.on('data', (d) => {\n                    data += d;\n                    if (data.slice(-1) === '\\n') {\n                        var message = JSON.parse(data);\n                        this.emit('command', message.command, message.params, message.options, (message) => {\n                            c.end(message);\n                        });\n                    }\n                });\n                c.on('end', () => {});\n                c.on('error', () => {});\n            }\n            catch(e) {\n                this.emit('log', 'CLI listener failed to parse message ' + data);\n            }\n        }).listen(this.port, '127.0.0.1', () => {\n            this.emit('log', 'CLI listening on port ' + this.port);\n        });\n    }\n}\n\nTCPListener.prototype.__proto__ = events.EventEmitter.prototype;",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass TCPListener extends EventEmitter {\n    constructor(port) {\n        super();\n        this.port = port;\n        this.server = net.createServer(this.handleConnection.bind(this));\n    }\n\n    start() {\n        this.server.listen(this.port, () => {\n            this.emit('log', `Server is listening on port ${this.port}`);\n        });\n\n        this.server.on('error', (err) => {\n            this.emit('log', `Server error: ${err.message}`);\n        });\n    }\n\n    handleConnection(socket) {\n        this.emit('log', 'New client connected');\n\n        socket.on('data', (data) => {\n            this.handleData(data.toString(), socket);\n        });\n\n        socket.on('end', () => {\n            this.emit('log', 'Client disconnected');\n        });\n    }\n\n    handleData(data, socket) {\n        const [command, ...params] = data.trim().split(' ');\n\n        if (command) {\n            this.emit('command', command, params, {}, (response) => {\n                socket.write(response);\n            });\n        }\n    }\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a TCP server class in JavaScript using Node.js's 'net' module to handle client connections, manage sockets, and provide event-driven communication.\n\nClass Description: The Socket class represents a TCP server that can bind to a specific port/host, manage client connections, handle socket errors, and emit events for various connection states. It extends EventEmitter for event handling capabilities.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- socks: [Array] - Array of connected client sockets\n- settings: [Object] - Configuration settings for the server\n- type: [String] - Indicates whether the instance is acting as a server or client\n\nMethods:\n- constructor() -> [void] - Initializes the socket instance with default settings\n- bind(port, host, fn) -> [Socket] - Binds the server to a specified port and host (supports both TCP and Unix sockets)\n- onconnect(sock) -> [void] - Handles new client connections\n- addSocket(sock) -> [void] - Adds a new socket to the connection pool and sets up message parsing\n- removeSocket(sock) -> [void] - Removes a socket from the connection pool\n- handleErrors(sock) -> [void] - Sets up error handling for a socket\n- closeServer(fn) -> [void] - Closes the server and all client connections",
    "Canonical_solution": "var Emitter = require('events').EventEmitter;\nvar net = require('net');\nvar debug = require('debug')('axon:sock');\n\nclass Socket {\n  constructor() {\n    this.server = null;\n    this.socks = [];\n    this.settings = {};\n    this.set('hwm', Infinity);\n    this.set('identity', String(process.pid));\n    this.set('retry timeout', 100);\n    this.set('retry max timeout', 5000);\n  }\n\n  bind(port, host, fn) {\n    var self = this;\n    if ('client' == this.type) throw new Error('cannot bind() after connect()');\n    if ('function' == typeof host) {\n      fn = host;\n      host = undefined;\n    }\n\n    var unixSocket = false;\n\n    if ('string' == typeof port) {\n      port = url.parse(port);\n\n      if ('unix:' == port.protocol) {\n        host = fn;\n        fn = undefined;\n        port = port.pathname;\n        unixSocket = true;\n      } else {\n        host = port.hostname || '0.0.0.0';\n        port = parseInt(port.port, 10);\n      }\n    } else {\n      host = host || '0.0.0.0';\n    }\n\n    this.type = 'server';\n\n    this.server = net.createServer(this.onconnect.bind(this));\n\n    debug('%s bind %s:%s', this.type, host, port);\n    this.server.on('listening', this.emit.bind(this, 'bind'));\n\n    if (unixSocket) {\n      this.server.on('error', function(e) {\n        if (e.code == 'EADDRINUSE') {\n          var clientSocket = new net.Socket();\n\n          clientSocket.on('error', function(e2) {\n            if (e2.code == 'ECONNREFUSED') {\n              fs.unlink(port);\n              self.server.listen(port, host, fn);\n            }\n          });\n\n          clientSocket.connect({path: port}, function() {\n            throw e;\n          });\n        }\n      });\n    }\n\n    this.server.listen(port, host, fn);\n    return this;\n  }\n\n  onconnect(sock) {\n    var self = this;\n    var addr = sock.remoteAddress + ':' + sock.remotePort;\n    debug('%s accept %s', self.type, addr);\n    this.addSocket(sock);\n    this.handleErrors(sock);\n    this.emit('connect', sock);\n    sock.on('close', function() {\n      debug('%s disconnect %s', self.type, addr);\n      self.emit('disconnect', sock);\n      self.removeSocket(sock);\n    });\n  }\n\n  addSocket(sock) {\n    var parser = new Parser;\n    var i = this.socks.push(sock) - 1;\n    debug('%s add socket %d', this.type, i);\n    sock.pipe(parser);\n    parser.on('data', this.onmessage(sock));\n  }\n\n  removeSocket(sock) {\n    var i = this.socks.indexOf(sock);\n    if (!~i) return;\n    debug('%s remove socket %d', this.type, i);\n    this.socks.splice(i, 1);\n  }\n\n  handleErrors(sock) {\n    var self = this;\n    sock.on('error', function(err) {\n      debug('%s error %s', self.type, err.code || err.message);\n      self.emit('socket error', err);\n      self.removeSocket(sock);\n      if (!~ignore.indexOf(err.code)) return self.emit('error', err);\n      debug('%s ignored %s', self.type, err.code);\n      self.emit('ignored error', err);\n    });\n  }\n\n  closeServer(fn) {\n    debug('%s closing server', this.type);\n    this.server.on('close', this.emit.bind(this, 'close'));\n    this.server.close();\n    fn && fn();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass Socket extends EventEmitter {\n    constructor() {\n        super();\n        this.server = null;\n        this.socks = [];\n        this.settings = {};\n        this.type = 'server';\n    }\n\n    bind(port, host, fn) {\n        this.server = net.createServer((sock) => this.onconnect(sock));\n        this.server.listen(port, host, fn);\n        return this;\n    }\n\n    onconnect(sock) {\n        this.addSocket(sock);\n        this.emit('connection', sock);\n    }\n\n    addSocket(sock) {\n        this.socks.push(sock);\n        this.handleErrors(sock);\n        sock.on('data', (data) => this.emit('data', data, sock));\n        sock.on('end', () => this.removeSocket(sock));\n    }\n\n    removeSocket(sock) {\n        this.socks = this.socks.filter(s => s !== sock);\n        this.emit('disconnection', sock);\n    }\n\n    handleErrors(sock) {\n        sock.on('error', (err) => {\n            this.emit('error', err, sock);\n            this.removeSocket(sock);\n        });\n    }\n\n    closeServer(fn) {\n        this.socks.forEach(sock => sock.end());\n        this.server.close(fn);\n    }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n    static async getWallpaper(unsplashClientId) {\n        try {\n            if (unsplashClientId) {\n                const unsplashResponse = await fetch(`https://api.unsplash.com/photos/random?client_id=${unsplashClientId}`);\n                if (!unsplashResponse.ok) throw new Error('Unsplash API error');\n                const unsplashData = await unsplashResponse.json();\n                return {\n                    type: 'unsplash',\n                    data: unsplashData\n                };\n            } else {\n                const bingResponse = await fetch('https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1');\n                if (!bingResponse.ok) throw new Error('Bing API error');\n                const bingData = await bingResponse.json();\n                return {\n                    type: 'bing',\n                    data: bingData.images[0]\n                };\n            }\n        } catch (error) {\n            return {\n                type: 'bing',\n                data: {\n                    url: 'https://www.bing.com/th?id=OHR.CathedralRock_EN-US1234567890_1920x1080.jpg',\n                    title: 'Fallback Image',\n                    copyright: 'Fallback Source'\n                }\n            };\n        }\n    }\n}"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a TCP server class that intercepts Redis traffic, capable of operating in different modes (capture, test, or forward), with functionality to save, mock, or forward data between client and Redis server.\n\nClass Description: RedisInterceptor is a class that creates a TCP server to intercept Redis protocol traffic. It can operate in three modes: capture (save request/response pairs), test (respond with mocked data), or forward (pass through traffic unchanged). The class handles client connections, data forwarding, and response processing.\n\nAttributes:\n- Pythagora: [Object] - Reference to the parent Pythagora object for saving captured data\n- listenPort: [Number] - Port number on which the interceptor listens for client connections\n- targetPort: [Number] - Port number of the target Redis server (default: 6379)\n- intermediateData: [Array] - Array containing mocked request/response pairs for test mode\n- listenSocket: [Object] - Reference to the net.Server instance\n- targetSocket: [Object] - Reference to the net.Socket connection to Redis\n- mode: [String] - Current operation mode ('capture', 'test', or undefined for forward)\n\nMethods:\n- constructor(Pythagora, listenPort, targetPort, intermediateData) -> [RedisInterceptor] - Initializes the interceptor with configuration parameters\n- init() -> [Promise] - Asynchronously creates and starts the TCP server, resolving when listening\n- forwardData(connection, data, saveData) -> [undefined] - Forwards data to Redis server and handles response, optionally saving it\n- splitIntoChunks(str, chunkSize) -> [Array] - Helper method to split strings into chunks of specified size\n\nNote: The class assumes the existence of constants MODES (for operation modes) and CHUNK_SIZE (for response chunking) which should be defined elsewhere in the code.",
    "Canonical_solution": "const net = require('net');\n\nclass RedisInterceptor {\n    constructor(Pythagora, listenPort, targetPort, intermediateData) {\n        this.Pythagora = Pythagora;\n        this.listenPort = listenPort;\n        this.targetPort = targetPort || 6379;\n        this.intermediateData = intermediateData || [];\n    }\n\n    async init() {\n        await new Promise((resolve, reject) => {\n            this.listenSocket = net.createServer(connection => {\n                connection.on('data', data => {\n                    if (this.mode === MODES.capture) {\n                        this.forwardData(connection, data, true);\n                    } else if (this.mode === 'test') {\n                        let mockData = this.intermediateData.find(d => d.type === 'redis' && d.request === data.toString());\n                        if (mockData) {\n                            const chunks = this.splitIntoChunks(mockData.response, CHUNK_SIZE);\n                            chunks.forEach(chunk => connection.write(`+${chunk}\\r\\n`, 'utf8'));\n                        } else {\n                            this.forwardData(connection, data);\n                        }\n                    } else {\n                        this.forwardData(connection, data);\n                    }\n                });\n            });\n\n            this.listenSocket.listen(this.listenPort, () => {\n                resolve();\n            });\n        });\n    }\n\n    forwardData(connection, data, saveData) {\n        this.targetSocket = new net.Socket();\n        this.targetSocket.connect(this.targetPort, 'localhost', () => {\n            this.targetSocket.write(data);\n        });\n\n        this.targetSocket.on('data', response => {\n            if (saveData) Pythagora.saveRedisData(data.toString(), response.toString().replace(/^.*\\r\\n/, '').replace(/\\r\\n$/, ''));\n            connection.write(response);\n        });\n    }\n\n    splitIntoChunks(str, chunkSize) {\n        const chunks = [];\n        for (let i = 0; i < str.length; i += chunkSize) {\n            chunks.push(str.substring(i, i + chunkSize));\n        }\n        return chunks;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class RedisInterceptor {\n    constructor(Pythagora, listenPort, targetPort = 6379, intermediateData = []) {\n        this.Pythagora = Pythagora;\n        this.listenPort = listenPort;\n        this.targetPort = targetPort;\n        this.intermediateData = intermediateData;\n        this.listenSocket = null;\n        this.targetSocket = null;\n        this.mode = undefined;\n    }\n\n    async init() {\n        return new Promise((resolve, reject) => {\n            this.listenSocket = require('net').createServer((connection) => this.handleConnection(connection));\n            this.listenSocket.listen(this.listenPort, (err) => {\n                if (err) return reject(err);\n                resolve();\n            });\n        });\n    }\n\n    handleConnection(connection) {\n        connection.on('data', (data) => this.handleData(connection, data));\n        connection.on('end', () => this.handleEnd(connection));\n    }\n\n    handleData(connection, data) {\n        if (this.mode === 'capture') {\n            this.forwardData(connection, data, true);\n        } else if (this.mode === 'test') {\n            this.mockResponse(connection, data);\n        } else {\n            this.forwardData(connection, data, false);\n        }\n    }\n\n    async forwardData(connection, data, saveData) {\n        if (!this.targetSocket) {\n            this.targetSocket = require('net').createConnection(this.targetPort, 'localhost');\n            this.targetSocket.on('data', (response) => this.handleResponse(connection, response, saveData));\n        }\n        this.targetSocket.write(data);\n    }\n\n    handleResponse(connection, response, saveData) {\n        if (saveData) {\n            this.Pythagora.saveData(response);\n        }\n        connection.write(response);\n    }\n\n    mockResponse(connection, data) {\n        const mock = this.intermediateData.find(pair => pair.request === data.toString());\n        if (mock) {\n            connection.write(mock.response);\n        } else {\n            connection.write('ERR unknown command\\r\\n');\n        }\n    }\n\n    handleEnd(connection) {\n        connection.end();\n        if (this.targetSocket) {\n            this.targetSocket.end();\n            this.targetSocket = null;\n        }\n    }\n\n    splitIntoChunks(str, chunkSize) {\n        const chunks = [];\n        for (let i = 0; i < str.length; i += chunkSize) {\n            chunks.push(str.slice(i, i + chunkSize));\n        }\n        return chunks;\n    }\n}"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Node class that implements a TCP-based peer-to-peer communication system using Node.js's net module. The class should handle server creation, client connections, message passing, and peer management.\n\nClass Description: The Node class represents a network node that can both accept incoming connections and establish outgoing connections to other peers. It uses TCP sockets for communication and implements basic peer discovery and message broadcasting capabilities.\n\nAttributes:\n\nid_: [Number] - Unique identifier for this node\npeers_: [Object] - Dictionary mapping peer IDs to their socket connections\nPORT: [Number] - Base port number for node communication (actual port is PORT + id)\nserver_: [net.Server] - TCP server instance for accepting incoming connections\n\nMethods:\n\nconstructor(id) -> [void] - Initializes the node with given ID, sets up event emitter, and creates TCP server\nstart() -> [Promise] - Attempts to connect to random peers (up to 5) for network formation\non_data(data, socket) -> [void] - Handles incoming data from sockets, parses messages and emits events\nsend(socket, data) -> [void] - Sends data to a peer (either via socket object or peer ID)\nbroadcast(data) -> [void] - Sends data to all connected peers\nadd_peer(socket, remote_id) -> [void] - Adds a peer connection to the peers dictionary\nremove_peer(socket) -> [void] - Removes a peer connection from the peers dictionary\nlist_peers() -> [Array] - Returns an array of connected peer IDs",
    "Canonical_solution": "var net = require(\"net\");\nvar Msg = require(\"./message\");\nvar EventEmitter = require('events').EventEmitter;\nvar Promise = require(\"bluebird\");\n\nclass Node extends EventEmitter {\n    constructor(id) {\n        super();\n        this.id_ = id;\n        this.peers_ = {};\n        this.PORT = 8000;\n\n        let self = this;\n        this.server_ = net.createServer((socket) => {\n            socket.setEncoding('utf8');\n            socket.on('data', (data) => { self.on_data(data, socket); });\n            socket.on('end', () => { self.remove_peer(socket); });\n        });\n        this.server_.listen(this.PORT + id);\n    }\n\n    async start() {\n        for (var i = 0; i < 5; ++i) {\n            var remote_id = Math.floor(Math.random() * 20);\n            if (remote_id !== this.id_ && !this.peers_[remote_id]) {\n                let self = this;\n                var socket = net.createConnection({ port: (this.PORT + remote_id) });\n                await new Promise((resolve, reject) => {\n                    socket.on('connect', () => {\n                        resolve();\n                    });\n                    socket.on('error', function (e) {\n                        resolve();\n                    });\n                    socket.setEncoding('utf8');\n                    socket.on('data', (data) => { self.on_data(data, socket); });\n                });\n                let data = Msg.connection(self.id_);\n                self.send(socket, data);\n                self.add_peer(socket, remote_id);\n            }\n        }\n    }\n\n    on_data(data, socket) {\n        try {\n            var arr = data.split(\"\\r\\n\");\n            for (var i = 0; i < arr.length; ++i) {\n                if (arr[i] == '') continue;\n                let obj = JSON.parse(arr[i]);\n                if (obj.type == Msg.type.Connection) {\n                    let remote_id = obj.data;\n                    this.add_peer(socket, remote_id);\n                } else {\n                    this.emit(\"message\", obj);\n                }\n            }\n        } catch (err) {\n            console.log(\"=========================\");\n            console.log(`node: ${this.id_}\\t receive msg error`);\n            console.log(err);\n            console.log(err.message);\n            console.log(data);\n            console.log(arr.length);\n            console.log(\"=========================\");\n            throw new Error();\n        }\n    }\n\n    send(socket, data) {\n        if (typeof socket === 'number') {\n            socket = this.peers_[socket];\n        }\n        if (typeof data === 'object') {\n            data = JSON.stringify(data);\n        }\n        socket.write(data + \"\\r\\n\");\n    }\n\n    broadcast(data) {\n        for (var index in this.peers_) {\n            let socket = this.peers_[index];\n            this.send(socket, data);\n        }\n    }\n\n    add_peer(socket, remote_id) {\n        if (!this.peers_[remote_id]) {\n            this.peers_[remote_id] = socket;\n        }\n    }\n\n    remove_peer(socket) {\n        for (var index in this.peers_) {\n            if (this.peers_[index] == socket) {\n                delete this.peers_[index];\n                break;\n            }\n        }\n    }\n\n    list_peers() {\n        let peer_ids = [];\n        for (var index in this.peers_) {\n            peer_ids.push(index);\n        }\n        return peer_ids;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass Node extends EventEmitter {\n    constructor(id) {\n        super();\n        this.id_ = id;\n        this.peers_ = {};\n        this.PORT = 3000; // Base port number\n        this.server_ = net.createServer(this.on_connection.bind(this));\n    }\n\n    start() {\n        return new Promise((resolve) => {\n            this.server_.listen(this.PORT + this.id_, () => {\n                console.log(`Node ${this.id_} listening on port ${this.PORT + this.id_}`);\n                this.connect_to_peers();\n                resolve();\n            });\n        });\n    }\n\n    connect_to_peers() {\n        for (let i = 0; i < 5; i++) {\n            const peer_id = Math.floor(Math.random() * 100); // Random peer ID for example\n            const peer_port = this.PORT + peer_id;\n            const client = net.createConnection(peer_port, () => {\n                this.add_peer(client, peer_id);\n            });\n            client.on('data', (data) => this.on_data(data, client));\n            client.on('error', () => console.log(`Could not connect to peer ${peer_id}`));\n        }\n    }\n\n    on_connection(socket) {\n        const remote_id = socket.remotePort - this.PORT;\n        this.add_peer(socket, remote_id);\n        socket.on('data', (data) => this.on_data(data, socket));\n        socket.on('end', () => this.remove_peer(socket));\n    }\n\n    on_data(data, socket) {\n        const message = data.toString();\n        console.log(`Received message from peer: ${message}`);\n        this.emit('message', message);\n    }\n\n    send(socket, data) {\n        socket.write(data);\n    }\n\n    broadcast(data) {\n        for (const peer_id in this.peers_) {\n            this.send(this.peers_[peer_id], data);\n        }\n    }\n\n    add_peer(socket, remote_id) {\n        this.peers_[remote_id] = socket;\n        console.log(`Added peer ${remote_id}`);\n    }\n\n    remove_peer(socket) {\n        for (const id in this.peers_) {\n            if (this.peers_[id] === socket) {\n                delete this.peers_[id];\n                console.log(`Removed peer ${id}`);\n                break;\n            }\n        }\n    }\n\n    list_peers() {\n        return Object.keys(this.peers_);\n    }\n}"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a Flash Policy Server class in JavaScript using Node.js's net module to handle cross-domain policy requests for socket connections.\n\nClass Description: The FlashPolicyServer class creates a TCP server that responds to Flash socket policy requests. It manages allowed origins/ports, compiles the XML policy file, and handles server lifecycle events.\n\nAttributes:\n- origins: [Array] - List of allowed domain:port combinations\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [Object] - TCP server instance\n- buffer: [Buffer] - Compiled policy file in binary format\n- server: [Object] - Optional existing server instance to attach to\n\nMethods:\n- constructor(options, origins) -> [FlashPolicyServer] - Initializes the server with options and allowed origins\n- listen(port, server, cb) -> [FlashPolicyServer] - Starts listening on specified port, optionally attaching to existing server\n- responder(socket) -> [void] - Responds to policy requests on a socket connection\n- compile() -> [FlashPolicyServer] - Generates the XML policy buffer from allowed origins\n- add() -> [FlashPolicyServer] - Adds new allowed origins to the policy\n- remove(origin) -> [FlashPolicyServer] - Removes an origin from the allowed list\n- close() -> [FlashPolicyServer] - Stops the server and cleans up listeners",
    "Canonical_solution": "var net = require('net');\n\nclass FlashPolicyServer {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => this.responder(socket));\n      this.responder(socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges.'\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (data && data[0] === 60 && data.toString() === '<policy-file-request/>\\0' &&\n              socket && (socket.readyState === 'open' || socket.readyState === 'writeOnly')) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    this.port >= 0 && this.socket.listen(this.port, () => {\n      this.socket.online = true;\n      if (callback) {\n        callback.call(this);\n        callback = undefined;\n      }\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = new Buffer(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class FlashPolicyServer {\n    constructor(options = {}, origins = []) {\n        this.origins = origins;\n        this.port = options.port || 843;\n        this.log = options.log || console.log;\n        this.socket = null;\n        this.buffer = null;\n        this.server = options.server || null;\n        this.compile();\n    }\n\n    listen(port = this.port, server = this.server, cb) {\n        this.socket = server || require('net').createServer();\n        this.socket.on('connection', this.responder.bind(this));\n        this.socket.listen(port, cb);\n        this.log(`Listening on port ${port}`);\n        return this;\n    }\n\n    responder(socket) {\n        socket.on('data', (data) => {\n            if (data.toString().includes('<policy-file-request/>')) {\n                socket.write(this.buffer);\n                socket.end();\n            }\n        });\n    }\n\n    compile() {\n        const xml = `<?xml version=\"1.0\"?>\n        <!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">\n        <cross-domain-policy>\n            ${this.origins.map(origin => `<allow-access-from domain=\"${origin}\" />`).join('\\n')}\n        </cross-domain-policy>`;\n        this.buffer = Buffer.from(xml);\n        return this;\n    }\n\n    add(origin) {\n        if (!this.origins.includes(origin)) {\n            this.origins.push(origin);\n            this.compile();\n            this.log(`Added origin: ${origin}`);\n        }\n        return this;\n    }\n\n    remove(origin) {\n        this.origins = this.origins.filter(o => o !== origin);\n        this.compile();\n        this.log(`Removed origin: ${origin}`);\n        return this;\n    }\n\n    close() {\n        if (this.socket) {\n            this.socket.close();\n            this.log('Server closed');\n        }\n        return this;\n    }\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a UDP communication class in JavaScript using Node.js's dgram module for bidirectional message handling between processes.\n\nClass Description: The Udp class facilitates UDP-based communication with capabilities for both sending and receiving messages. It manages socket creation, port binding, message queuing, and event handling for network communication.\n\nAttributes:\n- stack: [Array] - Stores outgoing messages in a queue before sending\n- port: [Number|null] - The target port number for outgoing messages\n- socket: [dgram.Socket|null] - UDP socket instance for sending messages\n- listener: [dgram.Socket|null] - UDP socket instance for receiving messages\n- client: [Object] - Reference to the parent client object for message handling\n\nMethods:\n- constructor(client) -> [void] - Initializes the UDP instance with a client reference and creates socket objects\n- start() -> [void] - Begins UDP communication by setting up input and output sockets\n- clear() -> [void] - Clears the message queue\n- run() -> [void] - Processes all messages in the queue\n- push(msg) -> [void] - Adds a message to the outgoing queue (Input: msg [String] - Message to send)\n- play(data) -> [void] - Sends a single message via UDP (Input: data [String] - Message content)\n- selectOutput(port=49161) -> [void] - Configures the output port (Input: port [Number] - Target port number)\n- selectInput(port=49160) -> [void] - Configures and starts the input listener (Input: port [Number] - Listening port number)",
    "Canonical_solution": "const dgram = require('dgram');\n\nclass Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = dgram ? dgram.createSocket('udp4') : null;\n    this.listener = dgram ? dgram.createSocket('udp4') : null;\n    this.client = client;\n  }\n\n  start() {\n    if (!dgram || !this.socket || !this.listener) { \n      console.warn('UDP', 'Could not start.'); \n      return; \n    }\n    console.info('UDP', 'Starting..');\n\n    this.selectInput();\n    this.selectOutput();\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    for (const item of this.stack) {\n      this.play(item);\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (!this.socket) { return; }\n    this.socket.send(Buffer.from(`${data}`), this.port, this.client.io.ip, (err) => {\n      if (err) { console.warn(err); }\n    });\n  }\n\n  selectOutput(port = 49161) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (parseInt(port) === this.port) { console.warn('UDP', 'Already selected'); return; }\n    if (isNaN(port) || port < 1000) { console.warn('UDP', 'Unavailable port'); return; }\n\n    console.log('UDP', `Output: ${port}`);\n    this.port = parseInt(port);\n  }\n\n  selectInput(port = 49160) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (this.listener) { this.listener.close(); }\n\n    console.log('UDP', `Input: ${port}`);\n    this.listener = dgram.createSocket('udp4');\n\n    this.listener.on('message', (msg, rinfo) => {\n      this.client.commander.trigger(`${msg}`);\n    });\n\n    this.listener.on('listening', () => {\n      const address = this.listener.address();\n      console.info('UDP', `Started socket at ${address.address}:${address.port}`);\n    });\n\n    this.listener.on('error', (err) => {\n      console.warn('UDP', `Server error:\\n ${err.stack}`);\n      this.listener.close();\n    });\n\n    this.listener.bind(port);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class Udp {\n    constructor(client) {\n        this.stack = [];\n        this.port = null;\n        this.socket = dgram.createSocket('udp4');\n        this.listener = dgram.createSocket('udp4');\n        this.client = client;\n    }\n\n    start() {\n        this.listener.on('message', (msg, rinfo) => {\n            this.client.handleMessage(msg.toString(), rinfo);\n        });\n        this.listener.bind(this.port || 49160);\n        this.socket.bind();\n    }\n\n    clear() {\n        this.stack = [];\n    }\n\n    run() {\n        while (this.stack.length > 0) {\n            const msg = this.stack.shift();\n            this.play(msg);\n        }\n    }\n\n    push(msg) {\n        this.stack.push(msg);\n    }\n\n    play(data) {\n        this.socket.send(data, this.port, 'localhost', (err) => {\n            if (err) console.error(err);\n        });\n    }\n\n    selectOutput(port = 49161) {\n        this.port = port;\n    }\n\n    selectInput(port = 49160) {\n        this.listener.bind(port);\n    }\n}"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a UDP-based poller class in JavaScript that can send ping messages to a target UDP server and handle pong responses, with timeout functionality.\n\nClass Description: The UdpPoller class is designed to monitor UDP servers by sending periodic ping messages and listening for pong responses. It inherits from a base poller class and implements UDP communication using Node.js's dgram module.\n\nAttributes:\n- udpServer: [Object] - The UDP socket instance created using dgram module\n- target: [Object/String] - The target server address and port (parsed from input URL)\n- timeout: [Number] - The maximum time to wait for a response before timing out\n- callback: [Function] - The callback function to be executed when a response is received or an error occurs\n\nMethods:\n- constructor(target, timeout, callback) -> [void] - Initializes the poller with target, timeout, and callback\n- static get type() -> [String] - Returns the poller type ('udp')\n- static validateTarget(target) -> [Boolean] - Validates if the target URL matches UDP format\n- initialize() -> [void] - Sets up the UDP socket and parses the target address\n- poll() -> [void] - Sends a ping message to the target server and sets up response listener\n- onResponseCallback(message, sender) -> [void] - Handles incoming messages and processes pong responses\n- timeoutReached() -> [void] - Cleans up socket listeners when timeout occurs",
    "Canonical_solution": "var util = require('util');\nvar dgram = require('dgram');\nvar BasePoller = require('../basePoller');\n\nclass UdpPoller {\n  constructor(target, timeout, callback) {\n    UdpPoller.super_.call(this, target, timeout, callback);\n    this.udpServer = null;\n  }\n\n  static get type() {\n    return 'udp';\n  }\n\n  static validateTarget(target) {\n    var reg = new RegExp('udp:\\/\\/(.*):(\\\\d{1,5})');\n    return reg.test(target);\n  }\n\n  initialize() {\n    this.udpServer = dgram.createSocket('udp4');\n    this.udpServer.bind();\n    this.udpServer.on('error', function() {});\n    \n    var reg = new RegExp('udp:\\/\\/(.*):(\\\\d{1,5})');\n    if(!reg.test(this.target)) {\n      console.log(this.target + ' does not seems to be valid udp url');\n    }\n    var host = reg.exec(this.target);\n    this.target = {\n      'address': host[1],\n      'port': host[2]\n    };\n  }\n\n  poll() {\n    var ping = new Buffer(JSON.stringify({'command': 'ping'}));\n    this.udpServer.send(ping, 0, ping.length, this.target.port, this.target.address);\n    this.udpServer.on(\"message\", this.onResponseCallback.bind(this));\n  }\n\n  onResponseCallback(message, sender) {\n    var cmd;\n    try {\n      cmd = JSON.parse(message);\n    } catch (e) {\n      return this.onErrorCallback({ name: \"Unparsable answer\", message: \"server return answer \" + message.toString()});\n    }\n    if (cmd.command === 'pong') {\n      this.timer.stop();\n      this.callback(null, this.getTime(), cmd);\n    }\n  }\n\n  timeoutReached() {\n    this.udpServer.removeAllListeners();\n  }\n}\n\nutil.inherits(UdpPoller, BasePoller);",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "class UdpPoller extends BasePoller {\n    constructor(target, timeout, callback) {\n        super();\n        this.target = target;\n        this.timeout = timeout;\n        this.callback = callback;\n        this.udpServer = null;\n        this.initialize();\n    }\n\n    static get type() {\n        return 'udp';\n    }\n\n    static validateTarget(target) {\n        const urlPattern = /^(udp):\\/\\/([a-zA-Z0-9.-]+):(\\d+)$/;\n        return urlPattern.test(target);\n    }\n\n    initialize() {\n        const { hostname, port } = new URL(this.target);\n        this.udpServer = dgram.createSocket('udp4');\n        this.targetAddress = hostname;\n        this.targetPort = parseInt(port, 10);\n        this.poll();\n    }\n\n    poll() {\n        const message = Buffer.from('ping');\n        this.udpServer.send(message, this.targetPort, this.targetAddress, (err) => {\n            if (err) {\n                this.callback(err);\n                return;\n            }\n            this.udpServer.on('message', this.onResponseCallback.bind(this));\n            this.timeoutId = setTimeout(this.timeoutReached.bind(this), this.timeout);\n        });\n    }\n\n    onResponseCallback(message, sender) {\n        if (message.toString() === 'pong') {\n            clearTimeout(this.timeoutId);\n            this.callback(null, message, sender);\n            this.udpServer.close();\n        }\n    }\n\n    timeoutReached() {\n        this.callback(new Error('Timeout reached'));\n        this.udpServer.close();\n    }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n    constructor(headers = {}) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios.get(url, { headers: this.headers, params });\n            return response.data;\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios.post(url, data, { headers: this.headers, params });\n            return response.data;\n        } catch (error) {\n            this.handleError(error);\n        }\n    }\n\n    handleError(error) {\n        if (error.response) {\n            throw new Error(`Error: ${error.response.status} - ${error.response.data}`);\n        } else if (error.request) {\n            throw new Error('Error: No response received from server');\n        } else {\n            throw new Error(`Error: ${error.message}`);\n        }\n    }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n    constructor(ws) {\n        this._ws = ws;\n        this._handler = null;\n        this._messageListener = this._messageReceived.bind(this);\n        this._ws.addEventListener('message', this._messageListener);\n    }\n\n    send(message) {\n        if (this._ws.readyState === WebSocket.OPEN) {\n            this._ws.send(message);\n        }\n    }\n\n    close() {\n        this._ws.close();\n    }\n\n    listen(handler) {\n        this._handler = handler;\n    }\n\n    dispose() {\n        this._ws.removeEventListener('message', this._messageListener);\n    }\n\n    _messageReceived(event) {\n        if (this._handler) {\n            this._handler(event.data);\n        }\n    }\n}\n\nclass NddService {\n    constructor(frontend) {\n        this._disconnectPromise = new Promise((resolve) => {\n            this._resolveDisconnect = resolve;\n        });\n        this._connected = new Set();\n        this._frontend = frontend;\n        this._pipe = '/path/to/named/pipe'; // Example path\n    }\n\n    async _startSession(info, frontend) {\n        const sessionId = info.id;\n        this._connected.add(sessionId);\n        // Logic to establish WebSocket connection and handle events\n        const cleanup = async () => {\n            this._connected.delete(sessionId);\n            // Additional cleanup logic\n        };\n        return cleanup;\n    }\n}"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that handles WebSocket connections, message transmission, and connection lifecycle events.\n\nClass Description: WebSocketImpl is a WebSocket client implementation that manages WebSocket connections, including establishing connections, handling incoming messages, managing connection states, and sending messages. It wraps the 'ws' library functionality with additional state management and event handling.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document associated with the WebSocket\n- _urlRecord: [Object|null] - URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL\n- extensions: [String] - Supported WebSocket extensions\n- binaryType: [String] - Type of binary data handling (\"blob\" or \"arraybuffer\")\n- _ws: [Object|null] - The underlying WebSocket instance\n- _readyState: [Number] - Current connection state (0=CONNECTING, 1=OPEN, 2=CLOSING, 3=CLOSED)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Number of bytes of queued data\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n- _dequeueScheduled: [Boolean] - Flag for send queue scheduling\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket client with configuration and establishes connection\n- _onConnectionEstablished() -> [void] - Handles successful connection establishment\n- _onMessageReceived(data, isBinary) -> [void] - Processes incoming WebSocket messages\n- _onConnectionClosed(code, reason) -> [void] - Handles connection closure\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Queues data for sending through the WebSocket\n- _actuallySend() -> [void] - Internal method that sends queued messages\n- _scheduleSend() -> [void] - Schedules message sending on the next event loop tick",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.document;\n    this._urlRecord = null;\n    this.url = \"\";\n    this.extensions = \"\";\n    this.binaryType = \"blob\";\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const url = args[0];\n    let protocols = args[1] !== undefined ? args[1] : [];\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    if (this._ws.extensions !== null) {\n      this.extensions = Object.keys(this._ws.extensions).join(\", \");\n    }\n    // fire open event\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    // process message data and fire message event\n  }\n\n  _onConnectionClosed(code, reason) {\n    // fire close event\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this.readyState === 0) { // CONNECTING\n      this._requiredToFail = true;\n      if (this._ws !== null) {\n        this._ws.terminate();\n      } else {\n        this._readyState = 2; // CLOSING\n      }\n    } else if (this.readyState === 1) { // OPEN\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this.readyState === 0) { // CONNECTING\n      throw new Error(\"Still in CONNECTING state.\");\n    }\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    let length;\n    if (typeof data === \"string\") {\n      length = Buffer.byteLength(data, \"utf8\");\n    } else {\n      length = data.byteLength;\n    }\n    this.bufferedAmount += length;\n    this._sendQueue.push([data, length]);\n    this._scheduleSend();\n  }\n\n  _actuallySend() {\n    for (const [data, length] of this._sendQueue.splice(0)) {\n      this._ws.send(data, { binary: typeof data !== \"string\" }, () => {\n        this.bufferedAmount -= length;\n      });\n    }\n  }\n\n  _scheduleSend() {\n    if (this._dequeueScheduled) {\n      return;\n    }\n    this._dequeueScheduled = true;\n    process.nextTick(() => {\n      this._dequeueScheduled = false;\n      this._actuallySend();\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n    constructor(globalObject, args, privateData) {\n        this._globalObject = globalObject;\n        this._ownerDocument = args[0];\n        this._urlRecord = args[1] || null;\n        this.url = args[2];\n        this.extensions = args[3] || '';\n        this.binaryType = args[4] || 'blob';\n        this._ws = null;\n        this._readyState = 0;\n        this._requiredToFail = false;\n        this.bufferedAmount = 0;\n        this._sendQueue = [];\n        this._dequeueScheduled = false;\n\n        this._connect();\n    }\n\n    _connect() {\n        this._ws = new (require('ws'))(this.url);\n        this._ws.on('open', () => this._onConnectionEstablished());\n        this._ws.on('message', (data, isBinary) => this._onMessageReceived(data, isBinary));\n        this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n    }\n\n    _onConnectionEstablished() {\n        this._readyState = 1;\n        // Additional logic for connection established\n    }\n\n    _onMessageReceived(data, isBinary) {\n        // Process incoming message\n    }\n\n    _onConnectionClosed(code, reason) {\n        this._readyState = 3;\n        // Additional logic for connection closed\n    }\n\n    close(code, reason) {\n        if (this._ws) {\n            this._ws.close(code, reason);\n        }\n    }\n\n    send(data) {\n        if (this._readyState === 1) {\n            this._actuallySend(data);\n        } else {\n            this._sendQueue.push(data);\n            if (!this._dequeueScheduled) {\n                this._scheduleSend();\n            }\n        }\n    }\n\n    _actuallySend() {\n        while (this._sendQueue.length > 0) {\n            const data = this._sendQueue.shift();\n            this._ws.send(data);\n        }\n        this._dequeueScheduled = false;\n    }\n\n    _scheduleSend() {\n        this._dequeueScheduled = true;\n        process.nextTick(() => this._actuallySend());\n    }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class Binary {\n    constructor(url, data = {}) {\n        this.url = url;\n        this.name = data.name || '-1';\n        this.installDirectory = data.installDirectory || `${process.cwd()}/bin`;\n        this.binaryDirectory = '-1';\n        this.binaryPath = '-1';\n    }\n\n    async install() {\n        try {\n            await this._prepareDirectory();\n            await this._download();\n            await this._extract();\n            console.log('Installation complete.');\n        } catch (error) {\n            console.error('Installation failed:', error);\n            throw error;\n        }\n    }\n\n    async _prepareDirectory() {\n        const fs = require('fs').promises;\n        const path = require('path');\n\n        this.binaryDirectory = path.join(this.installDirectory, this.name);\n        await fs.mkdir(this.binaryDirectory, { recursive: true });\n    }\n\n    async _download() {\n        const https = require('https');\n        const fs = require('fs');\n        const path = require('path');\n\n        const filePath = path.join(this.binaryDirectory, 'package.zip');\n        const file = fs.createWriteStream(filePath);\n\n        return new Promise((resolve, reject) => {\n            https.get(this.url, (response) => {\n                if (response.statusCode !== 200) {\n                    reject(new Error(`Failed to get '${this.url}' (${response.statusCode})`));\n                    return;\n                }\n                response.pipe(file);\n                file.on('finish', () => {\n                    file.close(resolve);\n                });\n            }).on('error', (err) => {\n                fs.unlink(filePath);\n                reject(err);\n            });\n        });\n    }\n\n    async _extract() {\n        const fs = require('fs').promises;\n        const unzipper = require('unzipper');\n        const path = require('path');\n\n        const filePath = path.join(this.binaryDirectory, 'package.zip');\n        const extractPath = this.binaryDirectory;\n\n        await fs.createReadStream(filePath)\n            .pipe(unzipper.Extract({ path: extractPath }))\n            .promise();\n        \n        await fs.unlink(filePath);\n    }\n}"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n    const socket = new WebSocket(`wss://${wssUrl}`);\n\n    socket.addEventListener('open', function(event) {\n        console.log('Connection opened');\n        const message = JSON.stringify({ type: 'greeting', content: 'Hello, server!' });\n        socket.send(message);\n    });\n\n    socket.addEventListener('message', function(event) {\n        const receivedData = JSON.parse(event.data);\n        console.log('Message received:', receivedData);\n    });\n\n    socket.addEventListener('close', function(event) {\n        console.log('Connection closed', event);\n    });\n\n    socket.addEventListener('error', function(event) {\n        console.error('WebSocket error:', event);\n    });\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript using Node.js that establishes a connection to a WebSocket server, handles incoming messages, and manages connection events.\n\nClass Description: The WebSocketImpl class provides a wrapper around the Node.js 'ws' library to create and manage WebSocket connections. It handles connection establishment, message reception, error handling, and connection closure events. The class also provides methods for sending data and closing the connection.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document object associated with the WebSocket\n- _urlRecord: [Object] - Parsed URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL as a string\n- _ws: [WebSocket|null] - The underlying WebSocket instance or null if not connected\n- _readyState: [Number] - Current connection state (0 = CONNECTING)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Amount of buffered data in bytes\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket connection with the given parameters and sets up event handlers\n- _onConnectionEstablished() -> [void] - Internal method called when the WebSocket connection is successfully established\n- _onMessageReceived(data, isBinary) -> [void] - Internal method called when a message is received from the server\n- _onConnectionClosed(code, reason) -> [void] - Internal method called when the WebSocket connection is closed\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Sends data through the WebSocket connection (supports strings and Blob objects)\n- get readyState() -> [Number] - Returns the current ready state of the WebSocket connection",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = idlUtils.implForWrapper(globalObject._document);\n    this._urlRecord = parseURL(args[0]);\n    this.url = serializeURL(this._urlRecord);\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const protocols = typeof args[1] === \"string\" ? [args[1]] : (args[1] || []);\n    const nodeParsedURL = nodeURL.parse(this.url);\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    fireAnEvent(\"open\", this);\n  }\n\n  _onMessageReceived(data, isBinary) {\n    let dataForEvent;\n    if (!isBinary) {\n      dataForEvent = data.toString();\n    } else if (this.binaryType === \"arraybuffer\") {\n      dataForEvent = copyToArrayBufferInNewRealm(data, this._globalObject);\n    } else {\n      dataForEvent = Blob.create(this._globalObject, [[data], { type: \"\" }]);\n    }\n    fireAnEvent(\"message\", this, MessageEvent, {\n      data: dataForEvent,\n      origin: serializeURLOrigin(this._urlRecord)\n    });\n  }\n\n  _onConnectionClosed(code, reason) {\n    fireAnEvent(\"close\", this, CloseEvent, {\n      wasClean: !this._requiredToFail,\n      code,\n      reason: reason.toString()\n    });\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this._ws) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n      if (Blob.isImpl(data)) {\n        data = data._buffer;\n      }\n      this._ws.send(data, { binary: typeof data !== \"string\" });\n    }\n  }\n\n  get readyState() {\n    return this._ws ? this._ws.readyState : this._readyState;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n    constructor(globalObject, args, privateData) {\n        this._globalObject = globalObject;\n        this._ownerDocument = args[0];\n        this._urlRecord = new URL(args[1]);\n        this.url = this._urlRecord.href;\n        this._ws = null;\n        this._readyState = 0; // CONNECTING\n        this._requiredToFail = false;\n        this.bufferedAmount = 0;\n        this._sendQueue = [];\n        this._initializeWebSocket();\n    }\n\n    _initializeWebSocket() {\n        this._ws = new (require('ws'))(this.url);\n        this._ws.on('open', () => this._onConnectionEstablished());\n        this._ws.on('message', (data) => this._onMessageReceived(data, typeof data === 'object'));\n        this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n        this._ws.on('error', (error) => console.error('WebSocket error:', error));\n    }\n\n    _onConnectionEstablished() {\n        this._readyState = 1; // OPEN\n        console.log('Connection established');\n        this._processSendQueue();\n    }\n\n    _onMessageReceived(data, isBinary) {\n        console.log('Message received:', data);\n    }\n\n    _onConnectionClosed(code, reason) {\n        this._readyState = 3; // CLOSED\n        console.log(`Connection closed: ${code} - ${reason}`);\n    }\n\n    close(code, reason) {\n        if (this._ws) {\n            this._ws.close(code, reason);\n        }\n    }\n\n    send(data) {\n        if (this._readyState === 1) {\n            this._ws.send(data);\n        } else {\n            this._sendQueue.push(data);\n        }\n    }\n\n    _processSendQueue() {\n        while (this._sendQueue.length > 0) {\n            const message = this._sendQueue.shift();\n            this.send(message);\n        }\n    }\n\n    get readyState() {\n        return this._readyState;\n    }\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendWebhook(data) {\n    const url = 'https://your-webhook-url.com';\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending webhook:', error);\n    }\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a specified path on a server and returns the WebSocket object if the connection is successfully opened.\n\nFunction Description: The function `apiWebSocket` attempts to create a WebSocket connection to a given path on a secure WebSocket server. It waits for the connection to be established or fail (due to error or closure) and returns the WebSocket object only if the connection is successfully opened. If the connection fails or an error occurs, the function returns `undefined`.\n\nInput: \n- `path` (string): The path on the server to which the WebSocket connection should be established. This is appended to the base URL `wss://services.bonjourr.fr/`.\n\nOutput: \n- `Promise<WebSocket | undefined>`: A promise that resolves to the WebSocket object if the connection is successfully opened, or `undefined` if the connection fails or an error occurs.",
    "Canonical_solution": "export async function apiWebSocket(path: string): Promise<WebSocket | undefined> {\n\ttry {\n\t\tconst socket = new WebSocket(`wss://services.bonjourr.fr/${path}`)\n\t\tconst isOpened = await new Promise((resolve) => {\n\t\t\tsocket.onopen = () => resolve(true)\n\t\t\tsocket.onerror = () => resolve(false)\n\t\t\tsocket.onclose = () => resolve(false)\n\t\t})\n\n\t\tif (isOpened) {\n\t\t\treturn socket\n\t\t}\n\t} catch (_error) {\n\t\t// ...\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function apiWebSocket(path) {\n    return new Promise((resolve) => {\n        const socket = new WebSocket(`wss://services.bonjourr.fr/${path}`);\n\n        socket.addEventListener('open', () => {\n            resolve(socket);\n        });\n\n        socket.addEventListener('error', () => {\n            resolve(undefined);\n        });\n\n        socket.addEventListener('close', () => {\n            resolve(undefined);\n        });\n    });\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function speechApi(ssml) {\n    const url = 'https://<your-region>.tts.speech.microsoft.com/cognitiveservices/v1';\n    const subscriptionKey = '<your-subscription-key>';\n    \n    const headers = {\n        'Content-Type': 'application/ssml+xml',\n        'Ocp-Apim-Subscription-Key': subscriptionKey,\n        'X-Microsoft-OutputFormat': 'audio-16khz-32kbitrate-mono-mp3'\n    };\n\n    const body = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xml:lang='en-US'>${ssml}</speak>`;\n\n    return fetch(url, {\n        method: 'POST',\n        headers: headers,\n        body: body\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.arrayBuffer();\n    })\n    .catch(error => {\n        return Promise.reject('Error: ' + error.message);\n    });\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Implement a WebSocket client in JavaScript that connects to a server, sends messages, and displays received messages in a chat interface.\n\nFunction Description: The function `setupWebSocket` initializes a WebSocket connection to a server when a button is clicked. It handles connection events (open, close, message) and allows sending messages via an input field. The function disables the join button during active connection and re-enables it when closed.\n\nInput: \n- None (the function uses DOM elements internally: username input, join button, chat textarea, and message input field)\n\nOutput: \n- None (the function sets up event listeners and modifies DOM elements directly)\n\nAttributes: N/A (function-level implementation)\n\nMethods: N/A (function-level implementation)",
    "Canonical_solution": "function setupWebSocket() {\n    const username = document.querySelector(\"#username\");\n    const join_btn = document.querySelector(\"#join-chat\");\n    const textarea = document.querySelector(\"#chat\");\n    const input = document.querySelector(\"#input\");\n\n    join_btn.addEventListener(\"click\", function(e) {\n        this.disabled = true;\n\n        const websocket = new WebSocket(\"ws://localhost:3000/websocket\");\n\n        websocket.onopen = function() {\n            console.log(\"connection opened\");\n            websocket.send(username.value);\n        }\n\n        const btn = this;\n\n        websocket.onclose = function() {\n            console.log(\"connection closed\");\n            btn.disabled = false;\n        }\n\n        websocket.onmessage = function(e) {\n            console.log(\"received message: \"+e.data);\n            textarea.value += e.data+\"\\r\\n\";\n        }\n\n        input.onkeydown = function(e) {\n            if (e.key == \"Enter\") {\n                websocket.send(input.value);\n                input.value = \"\";\n            }\n        }\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function setupWebSocket() {\n    const usernameInput = document.getElementById('username');\n    const joinButton = document.getElementById('join');\n    const chatTextarea = document.getElementById('chat');\n    const messageInput = document.getElementById('message');\n    let socket;\n\n    joinButton.addEventListener('click', () => {\n        if (usernameInput.value) {\n            socket = new WebSocket('ws://yourserver.com/socket');\n\n            socket.addEventListener('open', () => {\n                joinButton.disabled = true;\n                chatTextarea.value += 'Connected to the server\\n';\n            });\n\n            socket.addEventListener('close', () => {\n                joinButton.disabled = false;\n                chatTextarea.value += 'Disconnected from the server\\n';\n            });\n\n            socket.addEventListener('message', (event) => {\n                chatTextarea.value += `Message: ${event.data}\\n`;\n            });\n\n            messageInput.addEventListener('keypress', (event) => {\n                if (event.key === 'Enter') {\n                    const message = messageInput.value;\n                    socket.send(`${usernameInput.value}: ${message}`);\n                    messageInput.value = '';\n                }\n            });\n        } else {\n            alert('Please enter a username');\n        }\n    });\n}"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Implement a WebSocket client connection class for browser environments that handles connection lifecycle, message events, and window focus state tracking.\n\nClass Description: The BrowserConnection class manages a WebSocket connection in a browser environment, including connection setup, event handling, and window visibility tracking. It extends a base connection class (BaseConnection) and adds browser-specific functionality.\n\nAttributes:\n- focusDetectorTimer: [Number] - Timer ID for the focus detection interval\n- windowVisible: [Boolean] - Tracks whether the browser window is currently visible\n- socket: [WebSocket] - The WebSocket connection instance\n\nMethods:\n- constructor(opts: Object) -> void - Initializes the connection with options and sets up event listeners for 'ready' and 'disconnect' events\n- setupSocket() -> WebSocket - Creates and configures a new WebSocket connection with event handlers for open, close, and message events\n- startFocusLoop() -> void - Starts tracking window visibility by setting up event listeners for focus/blur events and periodic checks\n- stopFocusLoop() -> void - Stops the window visibility tracking by clearing the interval timer and removing event listeners\n- handleOpen() -> void - Inherited from BaseConnection, called when WebSocket connection opens\n- handleClose(code: Number, reason: String) -> void - Inherited from BaseConnection, called when WebSocket connection closes\n- handleData(data: String) -> void - Inherited from BaseConnection, called when WebSocket receives a message\n- reportFocus(isVisible: Boolean) -> void - Inherited from BaseConnection, reports current window focus state",
    "Canonical_solution": "var WebSocket = require(\"ws\");\nvar _ = require(\"underscore\");\n\nclass BrowserConnection {\n  constructor(opts) {\n    BaseConnection.call(this, opts);\n    var connection = this;\n    this.on(\"ready\", function() {\n      connection.startFocusLoop()\n    });\n    this.on(\"disconnect\", function() {\n      connection.stopFocusLoop()\n    });\n  }\n\n  setupSocket() {\n    var connection = this;\n    var socket = new WebSocket(this.getUrl());\n    socket.onopen = function() {\n      connection.handleOpen()\n    };\n    socket.onclose = function(data) {\n      connection.handleClose(data[\"code\"], data[\"reason\"])\n    };\n    socket.onmessage = function(message) {\n      connection.handleData(message.data)\n    };\n    return socket;\n  }\n\n  startFocusLoop() {\n    if (this.focusDetectorTimer) return;\n    var connection = this;\n    var propertyName = null;\n    if (typeof document.hidden !== \"undefined\") {\n      propertyName = \"hidden\"\n    } else if (typeof document.mozHidden !== \"undefined\") {\n      propertyName = \"mozHidden\"\n    } else if (typeof document.msHidden !== \"undefined\") {\n      propertyName = \"msHidden\"\n    } else if (typeof document.webkitHidden !== \"undefined\") {\n      propertyName = \"webkitHidden\"\n    } else {\n      propertyName = undefined\n    }\n    if (connection.windowVisible === undefined) {\n      connection.windowVisible = propertyName === undefined ? true : document[propertyName] === false\n    }\n    var focusListener = window.addEventListener(\"focus\", function(e) {\n      connection.windowVisible = true;\n      updateFocusState()\n    });\n    var blurListener = window.addEventListener(\"blur\", function(e) {\n      connection.windowVisible = false;\n      updateFocusState()\n    });\n    this.on(\"disconnect\", function() {\n      window.removeEventListener(\"focus\", focusListener);\n      window.removeEventListener(\"blur\", blurListener)\n    });\n    var updateFocusState = function() {\n      var isVisible = propertyName === undefined ? true : document[propertyName] === false;\n      connection.reportFocus(isVisible && connection.windowVisible)\n    };\n    this.focusDetectorTimer = setInterval(updateFocusState, 100)\n  }\n\n  stopFocusLoop() {\n    if (!this.focusDetectorTimer) return;\n    clearTimeout(this.focusDetectorTimer);\n    delete this.focusDetectorTimer;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class BrowserConnection extends BaseConnection {\n    constructor(opts) {\n        super(opts);\n        this.focusDetectorTimer = null;\n        this.windowVisible = true;\n        this.socket = this.setupSocket();\n        this.startFocusLoop();\n    }\n\n    setupSocket() {\n        const socket = new WebSocket(this.opts.url);\n        socket.addEventListener('open', () => this.handleOpen());\n        socket.addEventListener('close', (event) => this.handleClose(event.code, event.reason));\n        socket.addEventListener('message', (event) => this.handleData(event.data));\n        return socket;\n    }\n\n    startFocusLoop() {\n        window.addEventListener('focus', () => this.reportFocus(true));\n        window.addEventListener('blur', () => this.reportFocus(false));\n        this.focusDetectorTimer = setInterval(() => {\n            this.reportFocus(document.visibilityState === 'visible');\n        }, 1000);\n    }\n\n    stopFocusLoop() {\n        clearInterval(this.focusDetectorTimer);\n        window.removeEventListener('focus', () => this.reportFocus(true));\n        window.removeEventListener('blur', () => this.reportFocus(false));\n    }\n\n    handleOpen() {\n        // Implementation from BaseConnection\n    }\n\n    handleClose(code, reason) {\n        // Implementation from BaseConnection\n    }\n\n    handleData(data) {\n        // Implementation from BaseConnection\n    }\n\n    reportFocus(isVisible) {\n        this.windowVisible = isVisible;\n        // Implementation from BaseConnection\n    }\n}"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a function to establish and manage a WebSocket connection in a browser environment, including handling connection events, sending messages, and closing the connection.\n\nFunction Description: The function `setupWebSocketConnection` initializes a WebSocket connection to a specified URL and provides methods to interact with the connection. It sets up event handlers for connection events (`open`, `message`, `close`, `error`) and returns an object with methods to send data, close the connection, and set the binary type of the WebSocket.\n\nInput: \n- `url` [String] - The URL to which the WebSocket connection will be established.\n\nOutput: \n- Returns an object with the following methods:\n  - `send(data)` - Sends data through the WebSocket connection.\n  - `close()` - Closes the WebSocket connection.\n  - `setBinaryType(type)` - Sets the binary type of the WebSocket connection (`blob` or `arraybuffer`).",
    "Canonical_solution": "function setupWebSocketConnection(url) {\n  const ws = new WebSocket(url);\n  \n  ws.onopen = function() {\n    alert('open');\n  };\n  \n  ws.onmessage = function(message) {\n    alert(message.data);\n  };\n  \n  ws.onclose = function() {\n    alert('close');\n  };\n  \n  ws.onerror = function(error) {\n    console.error('WebSocket error:', error);\n  };\n\n  return {\n    send: function(data) {\n      ws.send(data);\n    },\n    close: function() {\n      ws.close();\n    },\n    setBinaryType: function(type) {\n      ws.binaryType = type;\n    }\n  };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function setupWebSocketConnection(url) {\n    const socket = new WebSocket(url);\n\n    socket.addEventListener('open', function(event) {\n        console.log('WebSocket is open now.');\n    });\n\n    socket.addEventListener('message', function(event) {\n        console.log('Message from server: ', event.data);\n    });\n\n    socket.addEventListener('close', function(event) {\n        console.log('WebSocket is closed now.');\n    });\n\n    socket.addEventListener('error', function(event) {\n        console.error('WebSocket error observed:', event);\n    });\n\n    return {\n        send(data) {\n            if (socket.readyState === WebSocket.OPEN) {\n                socket.send(data);\n            } else {\n                console.error('WebSocket is not open. Unable to send data.');\n            }\n        },\n        close() {\n            socket.close();\n        },\n        setBinaryType(type) {\n            if (type === 'blob' || type === 'arraybuffer') {\n                socket.binaryType = type;\n            } else {\n                console.error('Invalid binary type. Use \"blob\" or \"arraybuffer\".');\n            }\n        }\n    };\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n    const url = 'https://api.example.com/tvchannels';\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        return data.channels.map(channel => ({\n            lang: channel.language,\n            site_id: channel.siteId,\n            name: channel.displayName\n        }));\n    } catch (error) {\n        console.error('There was a problem with the fetch operation:', error);\n        return [];\n    }\n}"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a WebSocket client function in JavaScript that establishes a connection to a WebSocket server, handles connection events, sends messages, and manages errors and closures.\n\nFunction Description: The function `connectWebSocket` initializes a WebSocket client connection to a specified server. It sets up event handlers for connection opening, incoming messages, and connection closing. The function also sends an initial message upon successful connection and logs all events to the console.\n\nInput: \n- Optional command line arguments:\n  - `port` (number): The port number to connect to (default: 7000).\n  - `secure` (boolean): Whether to use a secure WebSocket connection (wss) (default: false, uses ws).\n\nOutput: \n- No explicit return value. The function logs connection status, received messages, and closure events to the console.\n- Side effects: Establishes a WebSocket connection and sends/receives messages.",
    "Canonical_solution": "function connectWebSocket() {\n    var WebSocket = require('../lib/faye/websocket'),\n        port = process.argv[2] || 7000,\n        secure = process.argv[3] === 'ssl',\n        scheme = secure ? 'wss' : 'ws',\n        ws = new WebSocket.Client(scheme + '://localhost:' + port + '/');\n\n    console.log('Connecting to ' + ws.url);\n\n    ws.onopen = function(event) {\n        console.log('open');\n        ws.send('Hello, WebSocket!');\n    };\n\n    ws.onmessage = function(event) {\n        console.log('message', event.data);\n    };\n\n    ws.onclose = function(event) {\n        console.log('close', event.code, event.reason);\n    };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function connectWebSocket(port = 7000, secure = false) {\n    const protocol = secure ? 'wss' : 'ws';\n    const url = `${protocol}://localhost:${port}`;\n    const socket = new WebSocket(url);\n\n    socket.addEventListener('open', () => {\n        console.log('Connection opened');\n        socket.send('Hello Server!');\n    });\n\n    socket.addEventListener('message', (event) => {\n        console.log('Message from server:', event.data);\n    });\n\n    socket.addEventListener('error', (error) => {\n        console.error('WebSocket error:', error);\n    });\n\n    socket.addEventListener('close', (event) => {\n        console.log('Connection closed:', event.reason);\n    });\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes and manages a WebSocket connection, handles events (open, message, error, close), and provides methods for sending data and disconnecting.\n\nClass Description: The WsProvider class encapsulates WebSocket functionality, providing a clean interface for WebSocket communication. It handles connection lifecycle events and ensures proper cleanup when disconnecting.\n\nAttributes:\n#websocket: WebSocket | null - Private field storing the active WebSocket connection instance\n\nMethods:\nconstructor(endpoint: string) -> void - Initializes the WebSocket connection to the specified endpoint\n#connect(endpoint: string) -> void - Private method that establishes the WebSocket connection and sets up event handlers\n#onSocketClose(event: CloseEvent) -> void - Private method handling WebSocket close events\n#onSocketError(error: Event) -> void - Private method handling WebSocket error events\n#onSocketMessage(message: MessageEvent<string>) -> void - Private method handling incoming WebSocket messages\n#onSocketOpen() -> boolean - Private method handling WebSocket open events\nsend(body: string) -> void - Public method for sending data through the WebSocket connection\ndisconnect() -> void - Public method for properly closing the WebSocket connection",
    "Canonical_solution": "import type { Class } from '@polkadot/util/types';\nimport type { JsonRpcResponse, ProviderInterfaceCallback } from '../types.js';\nimport { EventEmitter } from 'eventemitter3';\nimport { isChildClass, isNull, isUndefined } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\n\nclass WsProvider {\n  #websocket: WebSocket | null;\n\n  constructor(endpoint: string) {\n    this.#websocket = null;\n    this.#connect(endpoint);\n  }\n\n  #connect(endpoint: string): void {\n    try {\n      this.#websocket = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket as unknown as Class<WebSocket>, WebSocket)\n        ? new WebSocket(endpoint)\n        : new WebSocket(endpoint, undefined, {});\n\n      if (this.#websocket) {\n        this.#websocket.onclose = this.#onSocketClose;\n        this.#websocket.onerror = this.#onSocketError;\n        this.#websocket.onmessage = this.#onSocketMessage;\n        this.#websocket.onopen = this.#onSocketOpen;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  #onSocketClose(event: CloseEvent): void {\n    this.#websocket = null;\n  }\n\n  #onSocketError(error: Event): void {\n    // Handle error\n  }\n\n  #onSocketMessage(message: MessageEvent<string>): void {\n    const response = JSON.parse(message.data) as JsonRpcResponse<string>;\n    // Process message\n  }\n\n  #onSocketOpen(): boolean {\n    return true;\n  }\n\n  public send(body: string): void {\n    if (!this.#websocket) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.#websocket.send(body);\n  }\n\n  public disconnect(): void {\n    if (this.#websocket) {\n      this.#websocket.close(1000);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WsProvider {\n    #websocket = null;\n\n    constructor(endpoint) {\n        this.#connect(endpoint);\n    }\n\n    #connect(endpoint) {\n        this.#websocket = new WebSocket(endpoint);\n        this.#websocket.addEventListener('open', () => this.#onSocketOpen());\n        this.#websocket.addEventListener('message', (event) => this.#onSocketMessage(event));\n        this.#websocket.addEventListener('error', (event) => this.#onSocketError(event));\n        this.#websocket.addEventListener('close', (event) => this.#onSocketClose(event));\n    }\n\n    #onSocketOpen() {\n        console.log('WebSocket connection opened');\n        return true;\n    }\n\n    #onSocketMessage(message) {\n        console.log('Message received:', message.data);\n    }\n\n    #onSocketError(error) {\n        console.error('WebSocket error:', error);\n    }\n\n    #onSocketClose(event) {\n        console.log('WebSocket connection closed:', event);\n        this.#websocket = null;\n    }\n\n    send(body) {\n        if (this.#websocket && this.#websocket.readyState === WebSocket.OPEN) {\n            this.#websocket.send(body);\n        } else {\n            console.error('WebSocket is not open. Unable to send message.');\n        }\n    }\n\n    disconnect() {\n        if (this.#websocket) {\n            this.#websocket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Implement a WebSocket client function in JavaScript that establishes a connection to a server, handles various connection events, and processes incoming messages for a reload service.\n\nFunction Description: The `connect` function initializes and manages a WebSocket connection to a specified server. It handles connection events (open, error, message, close) and processes incoming messages to trigger appropriate actions, such as requesting initial load data or reloading extensions when file changes are detected. The function ensures only one active connection exists at a time.\n\nInput: None (The WebSocket URL is hardcoded as 'ws://localhost:__RELOAD_PORT__')\n\nOutput: None (The function primarily manages side effects: establishing connections, logging events, and triggering other functions based on received messages)",
    "Canonical_solution": "function connect() {\n  if (webSocket) {\n    return;\n  }\n\n  webSocket = new WebSocket('ws://localhost:__RELOAD_PORT__');\n\n  webSocket.onerror = (event) => {\n    console.error(`[Reload Service] Connection error: ${JSON.stringify(event)}`);\n    webSocket.close();\n  };\n\n  webSocket.onopen = () => {\n    console.info(`[Reload Service] Connection opened.`);\n  };\n\n  webSocket.onmessage = async (event) => {\n    const message = JSON.parse(event.data);\n\n    if (message.status === 'serverReady') {\n      console.info('[Reload Service] Connection ready.');\n      await requestInitialLoadData();\n    }\n\n    if (message.changedFile) {\n      console.info(\n        `[Reload Service] Changes detected on ${message.changedFile}. Reloading extension...`\n      );\n      await messageAllExtensions(message.changedFile);\n    }\n  };\n\n  webSocket.onclose = () => {\n    console.info('[Reload Service] Connection closed.');\n    webSocket = null;\n  };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function connect() {\n    const socket = new WebSocket('ws://localhost:__RELOAD_PORT__');\n    let isConnected = false;\n\n    socket.addEventListener('open', function () {\n        isConnected = true;\n        console.log('WebSocket connection established');\n        socket.send(JSON.stringify({ type: 'requestInitialLoad' }));\n    });\n\n    socket.addEventListener('error', function (error) {\n        console.error('WebSocket error:', error);\n    });\n\n    socket.addEventListener('message', function (event) {\n        const message = JSON.parse(event.data);\n        if (message.type === 'reload') {\n            console.log('Reloading extensions due to file change');\n            // Call function to reload extensions\n            reloadExtensions();\n        }\n    });\n\n    socket.addEventListener('close', function () {\n        isConnected = false;\n        console.log('WebSocket connection closed, attempting to reconnect...');\n        setTimeout(connect, 1000);\n    });\n\n    function reloadExtensions() {\n        // Logic to reload extensions\n        console.log('Extensions reloaded');\n    }\n}"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Implement a WebSocket client function in JavaScript that establishes a connection to a LiveReload server and handles reload commands for browser extensions.\n\nFunction Description: The function `setupWebSocketReload` creates a WebSocket connection to a LiveReload server running on localhost. It sets up event handlers to manage connection errors and incoming messages. When a reload command is received, it triggers the browser extension's reload functionality.\n\nInput: None (The function uses predefined constants for host and port)\n\nOutput: None (The function's side effects are establishing a WebSocket connection and setting up event handlers that may trigger a browser extension reload)\n\nNote: The actual WebSocket URL is constructed using the constants LIVERELOAD_HOST and LIVERELOAD_PORT, with the path '/livereload'. The function handles JSON messages where a 'reload' command triggers the extension reload.",
    "Canonical_solution": "function setupWebSocketReload() {\n    var LIVERELOAD_HOST = 'localhost:';\n    var LIVERELOAD_PORT = 35729;\n    var connection = new WebSocket('ws://' + LIVERELOAD_HOST + LIVERELOAD_PORT + '/livereload');\n\n    connection.onerror = function (error) {\n        console.log('reload connection got error:', error);\n    };\n\n    connection.onmessage = function (e) {\n        if (e.data) {\n            var data = JSON.parse(e.data);\n            if (data && data.command === 'reload') {\n                ext.runtime.reload();\n            }\n        }\n    };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function setupWebSocketReload() {\n    const LIVERELOAD_HOST = 'localhost';\n    const LIVERELOAD_PORT = 35729;\n    const socket = new WebSocket(`ws://${LIVERELOAD_HOST}:${LIVERELOAD_PORT}/livereload`);\n\n    socket.addEventListener('open', function (event) {\n        console.log('Connected to LiveReload server');\n    });\n\n    socket.addEventListener('error', function (event) {\n        console.error('WebSocket error:', event);\n    });\n\n    socket.addEventListener('message', function (event) {\n        const message = JSON.parse(event.data);\n        if (message.command === 'reload') {\n            location.reload();\n        }\n    });\n\n    socket.addEventListener('close', function (event) {\n        console.log('Disconnected from LiveReload server');\n    });\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a WebSocket server class for peer-to-peer communication that handles connections, messages, and room management.\n\nClass Description: The SnapdropServer class represents a WebSocket server that facilitates peer-to-peer communication. It manages WebSocket connections, handles incoming messages, and maintains rooms for peer grouping. The server also handles connection headers and keeps connections alive.\n\nAttributes:\n- _wss: [WebSocket.Server] - The WebSocket server instance\n- _rooms: [Object] - A dictionary tracking peers grouped by their IP addresses (rooms)\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers\n- _onConnection(peer: Peer) -> void - Handles new WebSocket connections, sets up message handlers, and joins the peer to a room\n- _onHeaders(headers: Array, response: Object) -> void - Processes HTTP headers during WebSocket handshake, setting cookies if needed\n- _onMessage(sender: Peer, message: string) -> void - Handles incoming messages from peers, routing them to appropriate recipients\n- _send(peer: Peer, message: Object) -> void - Sends a message to a specific peer over WebSocket connection\n- _joinRoom(peer: Peer) -> void - Adds a peer to their respective room (Not shown in reference but implied)\n- _leaveRoom(peer: Peer) -> void - Removes a peer from their room (Not shown in reference but implied)\n- _keepAlive(peer: Peer) -> void - Maintains connection with periodic pings (Not shown in reference but implied)",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass SnapdropServer {\n    constructor(port) {\n        this._wss = new WebSocket.Server({ port: port });\n        this._wss.on('connection', (socket, request) => this._onConnection(new Peer(socket, request)));\n        this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n\n        this._rooms = {};\n    }\n\n    _onConnection(peer) {\n        this._joinRoom(peer);\n        peer.socket.on('message', message => this._onMessage(peer, message));\n        peer.socket.on('error', console.error);\n        this._keepAlive(peer);\n\n        this._send(peer, {\n            type: 'display-name',\n            message: {\n                displayName: peer.name.displayName,\n                deviceName: peer.name.deviceName\n            }\n        });\n    }\n\n    _onHeaders(headers, response) {\n        if (response.headers.cookie && response.headers.cookie.indexOf('peerid=') > -1) return;\n        response.peerId = Peer.uuid();\n        headers.push('Set-Cookie: peerid=' + response.peerId + \"; SameSite=Strict; Secure\");\n    }\n\n    _onMessage(sender, message) {\n        try {\n            message = JSON.parse(message);\n        } catch (e) {\n            return;\n        }\n\n        switch (message.type) {\n            case 'disconnect':\n                this._leaveRoom(sender);\n                break;\n            case 'pong':\n                sender.lastBeat = Date.now();\n                break;\n        }\n\n        if (message.to && this._rooms[sender.ip]) {\n            const recipientId = message.to;\n            const recipient = this._rooms[sender.ip][recipientId];\n            delete message.to;\n            message.sender = sender.id;\n            this._send(recipient, message);\n            return;\n        }\n    }\n\n    _send(peer, message) {\n        if (!peer) return;\n        if (this._wss.readyState !== this._wss.OPEN) return;\n        message = JSON.stringify(message);\n        peer.socket.send(message, error => '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class SnapdropServer {\n    constructor(port) {\n        this._wss = new WebSocket.Server({ port });\n        this._rooms = {};\n        \n        this._wss.on('connection', this._onConnection.bind(this));\n    }\n\n    _onConnection(peer) {\n        peer.on('message', (message) => this._onMessage(peer, message));\n        this._wss.on('headers', (headers, request) => this._onHeaders(headers, request));\n        \n        this._joinRoom(peer);\n        this._keepAlive(peer);\n    }\n\n    _onHeaders(headers, response) {\n        // Example for processing headers (cookies handling can be added here)\n        if (headers) {\n            console.log(\"Headers received:\", headers);\n        }\n    }\n\n    _onMessage(sender, message) {\n        const { roomId } = this._rooms[sender.ip];\n        const peers = Object.keys(this._rooms).filter(ip => this._rooms[ip].roomId === roomId);\n        \n        peers.forEach(peerIp => {\n            if (peerIp !== sender.ip) {\n                this._send(this._rooms[peerIp], message);\n            }\n        });\n    }\n\n    _send(peer, message) {\n        if (peer.readyState === WebSocket.OPEN) {\n            peer.send(message);\n        }\n    }\n\n    _joinRoom(peer) {\n        const ip = peer._socket.remoteAddress;\n        const roomId = this._generateRoomId(ip);\n        \n        if (!this._rooms[ip]) {\n            this._rooms[ip] = { peer, roomId };\n        }\n        \n        this._send(peer, `You joined room: ${roomId}`);\n    }\n\n    _leaveRoom(peer) {\n        const ip = peer._socket.remoteAddress;\n        delete this._rooms[ip];\n    }\n\n    _keepAlive(peer) {\n        setInterval(() => {\n            if (peer.readyState === WebSocket.OPEN) {\n                peer.ping();\n            }\n        }, 30000);\n    }\n\n    _generateRoomId(ip) {\n        // Functionality to generate unique room ID based on IP or other criteria\n        return `room-${ip}`;\n    }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a function to fetch and process subscribed TV channels from a streaming service API, including authentication and data extraction.\n\nFunction Description: This asynchronous function retrieves subscribed TV channel information from a streaming service by:\n1. Scraping initial configuration data from a webpage\n2. Authenticating with the service using extracted credentials\n3. Fetching subscribed channel packages\n4. Processing and deduplicating channel information\n5. Returning formatted channel data\n\nInput: \n- lang: [String] (optional, default='id') - Language code for the returned channel data\n\nOutput: \n- Returns: [Array<Object>] - An array of channel objects containing:\n  - lang: [String] - The language code\n  - site_id: [String] - The channel ID\n  - name: [String] - The channel name\n- Throws: [Error] - If any HTTP request fails or data parsing fails",
    "Canonical_solution": "function async channels({ lang = 'id' }) {\n    const axios = require('axios')\n    const cheerio = require('cheerio')\n    const result = await axios\n      .get('https://cubmu.com/live-tv')\n      .then(response => response.data)\n      .catch(console.error)\n\n    const $ = cheerio.load(result)\n\n    const config = JSON.parse($('#__NEXT_DATA__').text()).runtimeConfig || {}\n\n    const options = {\n      headers: {\n        Origin: 'https://cubmu.com',\n        Referer: 'https://cubmu.com/live-tv'\n      }\n    }\n    await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/login/external?email=${config.email}&password=${config.password}&deviceId=${config.deviceId}&deviceType=${config.deviceType}&deviceModel=${config.deviceModel}&deviceToken=&serial=&platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n    const subscribedChannels = await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/subscribe_product/list?platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n\n    const channels = []\n    const included = []\n    if (Array.isArray(subscribedChannels.channelPackageList)) {\n      subscribedChannels.channelPackageList.forEach(pkg => {\n        pkg.channelList.forEach(channel => {\n          if (included.indexOf(channel.id) < 0) {\n            included.push(channel.id)\n            channels.push({\n              lang,\n              site_id: channel.id,\n              name: channel.name\n            })\n          }\n        })\n      })\n    }\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchSubscribedChannels(lang = 'id') {\n    const initialConfigUrl = 'https://streaming-service.com/config';\n    const authUrl = 'https://streaming-service.com/auth';\n    const channelsUrl = 'https://streaming-service.com/channels';\n    \n    try {\n        const configResponse = await fetch(initialConfigUrl);\n        const configData = await configResponse.json();\n        \n        const credentials = {\n            username: configData.username,\n            password: configData.password\n        };\n        \n        const authResponse = await fetch(authUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        \n        if (!authResponse.ok) throw new Error('Authentication failed');\n        \n        const channelsResponse = await fetch(channelsUrl, {\n            headers: {\n                'Authorization': `Bearer ${authResponse.token}`\n            }\n        });\n        \n        if (!channelsResponse.ok) throw new Error('Failed to fetch channels');\n        \n        const channelsData = await channelsResponse.json();\n        const uniqueChannels = new Map();\n        \n        channelsData.forEach(channel => {\n            if (!uniqueChannels.has(channel.site_id)) {\n                uniqueChannels.set(channel.site_id, {\n                    lang: lang,\n                    site_id: channel.site_id,\n                    name: channel.name\n                });\n            }\n        });\n        \n        return Array.from(uniqueChannels.values());\n    } catch (error) {\n        throw new Error(`Error: ${error.message}`);\n    }\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        const axios = require(this.requestModule);\n        const config = {\n            method: options.method,\n            url: options.url,\n            headers: options.headers,\n            params: options.params,\n            data: options.body\n        };\n        try {\n            const response = await axios(config);\n            return response.data;\n        } catch (error) {\n            throw error.response ? error.response.data : error.message;\n        }\n    }\n\n    queryStr(options) {\n        const params = new URLSearchParams();\n        for (const key in options) {\n            if (options.hasOwnProperty(key)) {\n                params.append(key, options[key]);\n            }\n        }\n        return params.toString();\n    }\n\n    isJSONString(str) {\n        try {\n            JSON.parse(str);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        return obj && typeof obj === 'object' && !Array.isArray(obj;\n    }\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript to handle real-time bidirectional communication between clients and the server.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io. It sets up event listeners for client connections, messages, and disconnections. The server broadcasts received messages to all connected clients.\n\nInput:\n- `port` (Number): The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:\n- Returns the `socketServer` instance (Object) which can be used to further configure or interact with the WebSocket server.\n\nNote: The function internally uses the `http` module to create an HTTP server and binds socket.io to it for WebSocket communication. The server logs connection, message, and disconnection events to the console.",
    "Canonical_solution": "const http = require(\"http\");\nconst socketIo = require(\"socket.io\");\n\nfunction setupWebSocketServer(port) {\n    const app = express();\n    const webServer = http.createServer(app);\n    const socketServer = socketIo(webServer, {\"log level\": 1});\n\n    socketServer.on(\"connection\", (socket) => {\n        console.log(\"New client connected\");\n\n        socket.on(\"message\", (data) => {\n            console.log(\"Message received: \", data);\n            socketServer.emit(\"message\", data);\n        });\n\n        socket.on(\"disconnect\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    webServer.listen(port, () => {\n        console.log(\"WebSocket server listening on port: \" + port);\n    });\n\n    return socketServer;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "const http = require('http');\nconst { Server } = require('socket.io');\n\nfunction setupWebSocketServer(port) {\n    const httpServer = http.createServer();\n    const socketServer = new Server(httpServer);\n\n    socketServer.on('connection', (socket) => {\n        console.log('A client connected:', socket.id);\n\n        socket.on('message', (message) => {\n            console.log('Message received:', message);\n            socketServer.emit('message', message);\n        });\n\n        socket.on('disconnect', () => {\n            console.log('A client disconnected:', socket.id);\n        });\n    });\n\n    httpServer.listen(port, () => {\n        console.log(`WebSocket server is listening on port ${port}`);\n    });\n\n    return socketServer;\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Write a function that scrapes TV channel information from a webpage, processes the data, and returns a list of channel objects with their details.\n\nFunction Description: The function `getChannels` asynchronously fetches HTML content from a URL, parses it to extract TV channel information, and returns an array of channel objects. Each channel object contains language, site ID, and name. The function uses Axios for HTTP requests and Cheerio for HTML parsing.\n\nInput: None (The function uses an implicit `this.url()` method to generate the target URL)\n\nOutput: Array<Object> - Returns an array of channel objects with the following structure:\n[\n  {\n    lang: string,      // Language code of the channel (e.g., 'tr')\n    site_id: string,   // Unique identifier for the channel\n    name: string       // Name of the channel\n  },\n  ...\n]",
    "Canonical_solution": "async function getChannels() {\n    const channels = {};\n    const axios = require('axios');\n    const data = await axios\n        .get(this.url({ date: dayjs() }))\n        .then(r => r.data)\n        .catch(console.error);\n\n    const $ = cheerio.load(data);\n    $('.channelContent').toArray()\n        .forEach(el => {\n            const item = $(el);\n            const channelId = item.find('.channelDetail .tvGuideResult-box-wholeDates-title')\n                .first()\n                .attr('onclick');\n            if (channelId) {\n                const site_id = channelId.match(/\\s(\\d+)\\)/)[1];\n                if (channels[site_id] === undefined) {\n                    channels[site_id] = {\n                        lang: 'tr',\n                        site_id,\n                        name: item.find('#channelID').val()\n                    };\n                }\n            }\n        });\n\n    return Object.values(channels);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n    const axios = require('axios');\n    const cheerio = require('cheerio');\n    const response = await axios.get(this.url());\n    const $ = cheerio.load(response.data);\n    const channels = [];\n\n    $('.channel-selector').each((index, element) => {\n        const lang = $(element).find('.lang').text().trim();\n        const site_id = $(element).data('site-id');\n        const name = $(element).find('.name').text().trim();\n        \n        channels.push({ lang, site_id, name });\n    });\n\n    return channels;\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const https = require('https');\n\nfunction installTelemetry() {\n    if (process.env.TUNNELMOLE_TELEMETRY !== 'true') {\n        return;\n    }\n\n    const data = JSON.stringify({\n        nodeVersion: process.version,\n        platform: process.platform\n    });\n\n    const options = {\n        hostname: 'telemetry.example.com',\n        port: 443,\n        path: '/api/telemetry',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': data.length\n        }\n    };\n\n    const req = https.request(options, (res) => {\n        res.on('data', () => {});\n    });\n\n    req.on('error', () => {});\n\n    req.write(data);\n    req.end();\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class SauceLabsClient {\n    constructor() {\n        this.auth = {};\n    }\n\n    setAuth(saucelabsUsername, saucelabsToken) {\n        this.auth.username = saucelabsUsername;\n        this.auth.token = saucelabsToken;\n    }\n\n    get(path, callback) {\n        const url = `https://api.saucelabs.com${path}`;\n        fetch(url, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${btoa(`${this.auth.username}:${this.auth.token}`)}`,\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(data => callback(null, data))\n        .catch(error => callback(error));\n    }\n\n    post(path, data, callback) {\n        const url = `https://api.saucelabs.com${path}`;\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Basic ${btoa(`${this.auth.username}:${this.auth.token}`)}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then(response => response.json())\n        .then(data => callback(null, data))\n        .catch(error => callback(error));\n    }\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using an HTTP POST request and triggers a callback function upon completion or failure.\n\nFunction Description: The function uses Axios to send an HTTP POST request to a specified webhook URL with event and data payload. It triggers a callback function (triggerActivity) when the request succeeds or fails. The request includes custom headers for identification.\n\nInput:\n- url: [String] - The webhook URL to which the POST request will be sent\n- event: [String/Object] - The event information to be sent in the request payload\n- data: [Object] - The data payload to be sent in the request\n- triggerActivity: [Function] - Callback function to be triggered after request completion (takes an optional error parameter)\n\nOutput: [None] - The function doesn't return anything but triggers the callback function",
    "Canonical_solution": "const axios = require(\"axios\");\n\nfunction postWebhook(url, event, data, triggerActivity) {\n    axios.post(url, {event, data}, {headers: {\"user-agent\": \"MySpeed/WebhookAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function sendDataToWebhook(url, event, data, triggerActivity) {\n    const axios = require('axios');\n\n    const payload = {\n        event: event,\n        data: data\n    };\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Custom-Header': 'YourHeaderValue'\n        }\n    };\n\n    axios.post(url, payload, config)\n        .then(response => {\n            triggerActivity();\n        })\n        .catch(error => {\n            triggerActivity(error);\n        });\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Write a function that retrieves TV channel information from multiple regions, processes the data, and returns a unique list of channels based on their site IDs.\n\nFunction Description: The function `channels` makes HTTP GET requests to a TV channel API for multiple regions, collects channel data from all available pages for each region, and returns a deduplicated list of channels. It uses axios for HTTP requests and lodash for data processing.\n\nInput: None (The function uses hardcoded region IDs internally)\n\nOutput: An array of objects representing unique TV channels, where each object contains:\n- lang: string - Language code ('ru' for Russian)\n- name: string - Name of the TV channel\n- site_id: string/number - Unique identifier for the channel on the site\n\nThe output is deduplicated based on the site_id field using lodash's uniqBy function.",
    "Canonical_solution": "async function channels() {\n    const _ = require('lodash')\n    const axios = require('axios')\n\n    const regions = [5506, 1096, 1125, 285]\n    let channels = []\n    for (let region of regions) {\n        const totalPages = await getTotalPageCount(region)\n        const pages = Array.from(Array(totalPages).keys())\n        for (let page of pages) {\n            const data = await axios\n                .get('https://tv.mail.ru/ajax/channel/list/', {\n                    params: { page },\n                    headers: {\n                        cookie: `s=fver=0|geo=${region};`\n                    }\n                })\n                .then(r => r.data)\n                .catch(console.log)\n\n            data.channels.forEach(item => {\n                channels.push({\n                    lang: 'ru',\n                    name: item.name,\n                    site_id: item.id\n                })\n            })\n        }\n    }\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const axios = require('axios');\nconst _ = require('lodash');\n\nasync function channels() {\n    const regions = ['1', '2', '3']; // Hardcoded region IDs\n    let allChannels = [];\n\n    for (const region of regions) {\n        let page = 1;\n        let hasMore = true;\n\n        while (hasMore) {\n            const response = await axios.get(`https://api.tvchannels.com/region/${region}/channels?page=${page}`);\n            const data = response.data;\n\n            allChannels = allChannels.concat(data.channels);\n            hasMore = data.hasMorePages;\n            page++;\n        }\n    }\n\n    const uniqueChannels = _.uniqBy(allChannels, 'site_id');\n    return uniqueChannels.map(channel => ({\n        lang: 'ru',\n        name: channel.name,\n        site_id: channel.site_id\n    }));\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n    constructor(repo, token, sha, ci) {\n        this.repo = repo.replace(/\\./g, '_');\n        this.token = token;\n        this.sha = sha;\n        this.ci = ci;\n        this.url = \"https://bundlesize-store.now.sh/values\";\n        this.enabled = !!(repo && token);\n    }\n\n    async get() {\n        if (!this.enabled) return {};\n        try {\n            const response = await fetch(`${this.url}/${this.repo}`);\n            if (!response.ok) throw new Error(`Error fetching data: ${response.statusText}`);\n            return await response.json();\n        } catch (error) {\n            console.error('Error in get method:', error);\n            return {};\n        }\n    }\n\n    async set(values) {\n        if (!this.enabled) return;\n        try {\n            const payload = {\n                sha: this.sha,\n                values: values\n            };\n            const response = await fetch(`${this.url}/${this.repo}`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.token}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) throw new Error(`Error posting data: ${response.statusText}`);\n        } catch (error) {\n            console.error('Error in set method:', error);\n        }\n    }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchCovidData() {\n    const url = 'https://api.health.gov.il/covid19/data';\n    const requestData = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            query: 'GET_COVID_DATA',\n            variables: {}\n        })\n    };\n\n    try {\n        const response = await fetch(url, requestData);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return parseData(data);\n    } catch (error) {\n        console.error('Error fetching COVID-19 data:', error);\n        return null;\n    }\n}\n\nfunction parseData(data) {\n    // Implement your data parsing logic here\n    return data; // Placeholder for actual parsed data\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a function to send emails using different email service providers (Mailgun and Sendgrid) through HTTP requests, with error handling and promise-based asynchronous operation.\n\nFunction Description: The function `sendMail` sends an email using a configured transporter (either Mailgun or Sendgrid). It wraps the transporter's send operation in a Promise for better async handling. The transporter is configured to make HTTP requests to the respective email service API.\n\nInput:\n- `to`: [String] - Recipient email address\n- `subject`: [String] - Email subject\n- `text`: [String] - Email body content\n- `options`: [Object] (optional) - Additional email options (defaults to empty object)\n\nOutput:\n- [Promise] - Resolves with email sending success info, or rejects with an error if sending fails.\n\n---\n\nClass Description: (Not applicable, as the reference code is at the function level)",
    "Canonical_solution": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    transporter.sendMail({\n      from: `\"${ config.plugins.email.name || '' }\" <${ config.plugins.email.email || config.plugins.email.username }>`,\n      to,\n      subject,\n      text,\n    }, (error, info) => {\n      if(error) {\n        return reject(error);\n      }\n      return resolve(info);\n    });\n  });\n}\n\n// External libraries and global variables used:\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst config = appRequire('services/config').all();\nlet transporter;\n\n// Mailgun implementation\ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  const form = new FormData();\n  form.append('from', options.from);\n  form.append('to', options.to);\n  form.append('subject', options.subject);\n  form.append('text', options.text);\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: form.getHeaders(),\n    data: form,\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};\n\n// Sendgrid implementation  \ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${ emailConfig.apiKey }`,\n    },\n    data: {\n      personalizations: [{\n        to: [{ email: options.to }]\n      }],\n      from: { email: options.from },\n      subject: options.subject,\n      content: [{\n        type: 'text/plain',\n        value: options.text,\n      }]\n    },\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function sendMail(to, subject, text, options = {}) {\n    const mailgun = require('mailgun-js');\n    const sendgrid = require('@sendgrid/mail');\n\n    const service = options.service || 'mailgun'; // Default to Mailgun\n    const apiKey = options.apiKey;\n    const domain = options.domain;\n\n    return new Promise((resolve, reject) => {\n        if (service === 'mailgun') {\n            const mg = mailgun({ apiKey, domain });\n            const data = {\n                from: options.from || `noreply@${domain}`,\n                to,\n                subject,\n                text,\n            };\n            mg.messages().send(data, (error, body) => {\n                if (error) {\n                    return reject(error);\n                }\n                resolve(body);\n            });\n        } else if (service === 'sendgrid') {\n            sendgrid.setApiKey(apiKey);\n            const msg = {\n                to,\n                from: options.from || 'noreply@example.com',\n                subject,\n                text,\n            };\n            sendgrid.send(msg)\n                .then(response => resolve(response))\n                .catch(error => reject(error));\n        } else {\n            reject(new Error('Unsupported email service provider'));\n        }\n    });\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create an asynchronous function that fetches TV channel data from a specified API endpoint and processes it into a standardized format.\n\nFunction Description: The function makes an HTTP GET request to retrieve TV channel information from a remote API. It processes the response to extract relevant channel details (language, site ID, and name) and returns them in a structured array format. The function includes error handling to log any request failures.\n\nInput: None (The function uses a hardcoded API URL and parameters)\n\nOutput: An array of objects where each object represents a TV channel with the following properties:\n- lang: String - The language code for the channel (hardcoded as 'sq' in this case)\n- site_id: String - The unique identifier for the channel from the API\n- name: String - The display name of the channel",
    "Canonical_solution": "async function channels() {\n    const axios = require('axios')\n    const data = await axios\n        .get('https://www.tvim.tv/script/epg/category_channels?category=all&filter=playable')\n        .then(r => r.data)\n        .catch(console.log)\n\n    let channels = []\n    data.data.forEach(item => {\n        channels.push({\n            lang: 'sq',\n            site_id: item.epg_id,\n            name: item.name\n        })\n    })\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchTVChannels() {\n    const apiUrl = 'https://api.example.com/tvchannels';\n    try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        return data.channels.map(channel => ({\n            lang: 'sq',\n            site_id: channel.id,\n            name: channel.displayName\n        }));\n    } catch (error) {\n        console.error('Failed to fetch TV channels:', error);\n        return [];\n    }\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a function that retrieves TV channel information from multiple providers and returns a list of unique channels.\n\nFunction Description: The function makes HTTP POST requests to a TV guide service for each provider, extracts channel information from the HTML response, and returns a deduplicated list of channels. It uses axios for HTTP requests, cheerio for HTML parsing, and lodash for deduplication.\n\nInput: None (The function uses hardcoded providers and parameters)\n\nOutput: Array of objects - Returns an array of channel objects containing language, name, and site_id (deduplicated by site_id). Each channel object has the following structure:\n{\n    lang: string,    // Language code ('fr' for French)\n    name: string,    // Channel name\n    site_id: string  // Unique identifier combining channel number and slug\n}",
    "Canonical_solution": "function async channels() {\n    const axios = require('axios')\n    const _ = require('lodash')\n\n    const providers = ['-1', '-2', '-3', '-4', '-5']\n\n    const channels = []\n    for (let provider of providers) {\n        const data = await axios\n            .post('https://www.tvcesoir.fr/guide/schedule', null, {\n                params: {\n                    provider,\n                    region: 'France',\n                    TVperiod: 'Night',\n                    date: dayjs().format('YYYY-MM-DD'),\n                    st: 0,\n                    u_time: 2155,\n                    is_mobile: 1\n                }\n            })\n            .then(r => r.data)\n            .catch(console.log)\n\n        const $ = cheerio.load(data)\n        $('.channelname').each((i, el) => {\n            const name = $(el).find('center > a:eq(1)').text()\n            const url = $(el).find('center > a:eq(1)').attr('href')\n            const [, number, slug] = url.match(/\\/(\\d+)\\/(.*)\\.html$/)\n\n            channels.push({\n                lang: 'fr',\n                name,\n                site_id: `${number}/${slug}`\n            })\n        })\n    }\n\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const axios = require('axios');\nconst cheerio = require('cheerio');\nconst _ = require('lodash');\n\nasync function getUniqueChannels() {\n    const providers = [\n        { name: 'Provider1', url: 'https://provider1.com/tv-guide' },\n        { name: 'Provider2', url: 'https://provider2.com/tv-guide' },\n        { name: 'Provider3', url: 'https://provider3.com/tv-guide' }\n    ];\n\n    const channelPromises = providers.map(async (provider) => {\n        const response = await axios.post(provider.url);\n        const $ = cheerio.load(response.data);\n        const channels = [];\n\n        $('channel').each((index, element) => {\n            const lang = $(element).find('language').text();\n            const name = $(element).find('name').text();\n            const site_id = $(element).find('number').text() + '-' + $(element).find('slug').text();\n            channels.push({ lang, name, site_id });\n        });\n\n        return channels;\n    });\n\n    const allChannels = await Promise.all(channelPromises);\n    const flatChannels = _.flatten(allChannels);\n    const uniqueChannels = _.uniqBy(flatChannels, 'site_id');\n\n    return uniqueChannels;\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function downloadVideo(url, desc) {\n    if (!url) {\n        console.error('URL cannot be empty');\n        return;\n    }\n    fetch(url)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.blob();\n        })\n        .then(blob => {\n            const urlBlob = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = urlBlob;\n            a.download = desc || 'downloaded_video';\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(urlBlob);\n        })\n        .catch(error => {\n            console.error('There has been a problem with your fetch operation:', error);\n        });\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Tool {\n    constructor() {\n        this._node = typeof require !== 'undefined' ? require('http') : null;\n        this._isSurge = typeof $httpClient !== 'undefined';\n        this._isQuanX = typeof $task !== 'undefined';\n        this.isSurge = this._isSurge;\n        this.isQuanX = this._isQuanX;\n        this.isResponse = typeof $response !== 'undefined';\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isSurge) {\n            $notification.post(title, subtitle, message, option);\n        } else if (this._isQuanX) {\n            $notify(title, subtitle, message, option);\n        } else {\n            console.log(`${title}\\n${subtitle}\\n${message}`);\n        }\n    }\n\n    write(value, key) {\n        if (this._isSurge) {\n            return $persistentStore.write(value, key);\n        } else if (this._isQuanX) {\n            return $prefs.setValueForKey(value, key);\n        } else {\n            // Node.js or other environments\n            // Implement a simple in-memory storage for demonstration\n            this.storage = this.storage || {};\n            this.storage[key] = value;\n            return true;\n        }\n    }\n\n    read(key) {\n        if (this._isSurge) {\n            return $persistentStore.read(key);\n        } else if (this._isQuanX) {\n            return $prefs.valueForKey(key);\n        } else {\n            // Node.js or other environments\n            return this.storage ? this.storage[key] : undefined;\n        }\n    }\n\n    get(options, callback) {\n        if (this._isSurge) {\n            $httpClient.get(options, (error, response, data) => {\n                callback(this._status(response), data);\n            });\n        } else if (this._isQuanX) {\n            $task.fetch(options).then(response => {\n                callback(this._status(response), response.body);\n            }).catch(error => {\n                callback({ statusCode: error.statusCode }, null);\n            });\n        } else {\n            // Node.js environment\n            const url = typeof options === 'string' ? options : options.url;\n            this._node.get(url, (res) => {\n                let data = '';\n                res.on('data', chunk => {\n                    data += chunk;\n                });\n                res.on('end', () => {\n                    callback(this._status(res), data);\n                });\n            }).on('error', (e) => {\n                callback({ statusCode: e.code }, null);\n            });\n        }\n    }\n\n    post(options, callback) {\n        if (this._isSurge) {\n            $httpClient.post(options, (error, response, data) => {\n                callback(this._status(response), data);\n            });\n        } else if (this._isQuanX) {\n            $task.fetch({ method: 'POST', ...options }).then(response => {\n                callback(this._status(response), response.body);\n            }).catch(error => {\n                callback({ statusCode: error.statusCode }, null);\n            });\n        } else {\n            // Node.js environment\n            const url = typeof options === 'string' ? options : options.url;\n            const postData = typeof options === 'object' && options.body ? options.body : null;\n            const req = this._node.request(url, { method: 'POST' }, (res) => {\n                let data = '';\n                res.on('data', chunk => {\n                    data += chunk;\n                });\n                res.on('end', () => {\n                    callback(this._status(res), data);\n                });\n            });\n            req.on('error', (e) => {\n                callback({ statusCode: e.code }, null);\n            });\n            if (postData) {\n                req.write(postData);\n            }\n            req.end();\n        }\n    }\n\n    _status(response) {\n        return { statusCode: response.status || response.statusCode };\n    }\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a JavaScript class that implements HTTP client functionality for making JSON-based requests (GET, POST, DELETE) with token-based authorization.\n\nClass Description: The JSONHttpClient class provides methods for making HTTP requests to interact with JSON APIs. It handles request configuration, authorization headers, response parsing, and error handling. The class maintains an authorization token that is automatically included in all requests.\n\nAttributes:\ntoken: [String] - An authorization token stored in localStorage or generated randomly if not available\n\nMethods:\nconstructor: [] -> [void] - Initializes the client instance and sets/retrieves the authorization token\n\nsetToken: [req: XMLHttpRequest] -> [void] - Sets the authorization header on the given request object\n\ngetJSON: [url: String, callback: Function] -> [void] - Makes a GET request to the specified URL and invokes the callback with parsed JSON response or error\n\npostJSON: [url: String, obj: Object, callback: Function] -> [void] - Makes a POST request with JSON payload to the specified URL and invokes the callback with parsed response\n\ndeleteJSON: [url: String, callback: Function] -> [void] - Makes a DELETE request to the specified URL and invokes the callback with response text or error after a random delay",
    "Canonical_solution": "const XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;\n\nclass JSONHttpClient {\n  constructor() {\n    this.token = localStorage.token || Date.now() * Math.random();\n    localStorage.token = this.token;\n  }\n\n  setToken(req) {\n    req.setRequestHeader(\"authorization\", this.token);\n  }\n\n  getJSON(url, callback) {\n    const req = new XMLHttpRequest();\n    req.onload = function() {\n      if (req.status === 404) {\n        callback(new Error(\"not found\"));\n      } else {\n        callback(null, JSON.parse(req.response));\n      }\n    };\n    req.open(\"GET\", url);\n    this.setToken(req);\n    req.send();\n  }\n\n  postJSON(url, obj, callback) {\n    const req = new XMLHttpRequest();\n    req.onload = function() {\n      callback(JSON.parse(req.response));\n    };\n    req.open(\"POST\", url);\n    req.setRequestHeader(\n      \"Content-Type\",\n      \"application/json;charset=UTF-8\"\n    );\n    this.setToken(req);\n    req.send(JSON.stringify(obj));\n  }\n\n  deleteJSON(url, callback) {\n    const req = new XMLHttpRequest();\n    req.onload = function() {\n      setTimeout(() => {\n        if (req.status === 500) {\n          callback(new Error(req.responseText));\n        } else {\n          callback(null, req.responseText);\n        }\n      }, Math.random() * 5000);\n    };\n    req.open(\"DELETE\", url);\n    this.setToken(req);\n    req.send();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class JSONHttpClient {\n    constructor() {\n        this.token = localStorage.getItem('authToken') || Math.random().toString(36).substring(2);\n        localStorage.setItem('authToken', this.token);\n    }\n\n    setToken(req) {\n        req.setRequestHeader('Authorization', `Bearer ${this.token}`);\n        req.setRequestHeader('Content-Type', 'application/json');\n    }\n\n    getJSON(url, callback) {\n        const req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        this.setToken(req);\n        req.onload = () => {\n            if (req.status >= 200 && req.status < 300) {\n                callback(null, JSON.parse(req.responseText));\n            } else {\n                callback(new Error(req.statusText), null);\n            }\n        };\n        req.onerror = () => callback(new Error('Network Error'), null);\n        req.send();\n    }\n\n    postJSON(url, obj, callback) {\n        const req = new XMLHttpRequest();\n        req.open('POST', url, true);\n        this.setToken(req);\n        req.onload = () => {\n            if (req.status >= 200 && req.status < 300) {\n                callback(null, JSON.parse(req.responseText));\n            } else {\n                callback(new Error(req.statusText), null);\n            }\n        };\n        req.onerror = () => callback(new Error('Network Error'), null);\n        req.send(JSON.stringify(obj));\n    }\n\n    deleteJSON(url, callback) {\n        const req = new XMLHttpRequest();\n        req.open('DELETE', url, true);\n        this.setToken(req);\n        const delay = Math.floor(Math.random() * 1000);\n        setTimeout(() => {\n            req.onload = () => {\n                if (req.status >= 200 && req.status < 300) {\n                    callback(null, req.responseText);\n                } else {\n                    callback(new Error(req.statusText), null);\n                }\n            };\n            req.onerror = () => callback(new Error('Network Error'), null);\n            req.send();\n        }, delay);\n    }\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a class that simulates the behavior of an EventSource object, which is used to receive server-sent events (SSE) over HTTP. The class should handle the connection, reception of events, and error handling.\n\nClass Description: The `EventSource` class is designed to establish a persistent connection to a server using HTTP and receive server-sent events. It manages the connection state, handles incoming events, and dispatches them to appropriate event handlers. The class also supports reconnection in case of errors or connection loss.\n\nAttributes:\n\n- `URL`: [String] - The URL to which the EventSource connects to receive server-sent events.\n- `readyState`: [Number] - Represents the current state of the connection. Possible values are `CONNECTING` (0), `OPEN` (1), and `CLOSED` (2).\n- `_pollTimer`: [Object] - A timer object used to manage the polling interval for reconnection attempts.\n- `_xhr`: [Object] - The XMLHttpRequest object used to make HTTP requests to the server.\n\nMethods:\n\n- `poll()`: [Function] -> [Void] - Initiates a new HTTP request to the server to receive events. Handles the response, processes the events, and manages the connection state.\n- `close()`: [Function]() -> [Void] - Closes the connection to the server, sets the `readyState` to `CLOSED`, and stops any ongoing polling.\n- `dispatchEvent(type, event)`: [Function]([String], [Object]) -> [Void] - Dispatches an event to the registered event handlers based on the event type.\n- `addEventListener(type, handler)`: [Function]([String], [Function]) -> [Void] - Registers an event handler for a specific event type.\n- `removeEventListener()`: [Function]() -> [Void] - Placeholder method for removing event listeners (not implemented in the reference code).\n\nAdditional Classes:\n\n- `MessageEvent`: [Class] - Represents an event received from the server. Contains the event data, origin, and last event ID.\n\nAttributes of `MessageEvent`:\n\n- `data`: [String] - The data payload of the event.\n- `type`: [String] - The type of the event, defaulting to 'message'.\n- `lastEventId`: [String] - The ID of the last received event.\n- `origin`: [String] - The origin URL of the event.\n\nMethods of `MessageEvent`:\n\n- `MessageEvent(data, origin, lastEventId)`: [Constructor]([String], [String], [String]) -> [Object] - Initializes a new `MessageEvent` instance with the provided data, origin, and last event ID.",
    "Canonical_solution": "var EventSource = function (url) {\n  var eventsource = this,\n      interval = 500,\n      lastEventId = null,\n      cache = '';\n\n  if (!url || typeof url != 'string') {\n    throw new SyntaxError('Not enough arguments');\n  }\n\n  this.URL = url;\n  this.readyState = this.CONNECTING;\n  this._pollTimer = null;\n  this._xhr = null;\n\n  function poll() {\n    try {\n      if (eventsource.readyState == eventsource.CLOSED) return;\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', eventsource.URL, true);\n      xhr.setRequestHeader('Accept', 'text/event-stream');\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      if (lastEventId != null) xhr.setRequestHeader('Last-Event-ID', lastEventId);\n      cache = '';\n\n      xhr.timeout = 50000;\n      xhr.onreadystatechange = function () {\n        var status = 0;\n        try {\n          status = xhr.status;\n        } catch (e) {}\n\n        if ((this.readyState == 3 || this.readyState == 4) && status == 200) {\n          if (eventsource.readyState == eventsource.CONNECTING) {\n            eventsource.readyState = eventsource.OPEN;\n            eventsource.dispatchEvent('open', { type: 'open' });\n          }\n\n          var responseText = '';\n          try {\n            responseText = this.responseText || '';\n          } catch (e) {}\n\n          var parts = responseText.substr(cache.length).split(\"\\n\"),\n              eventType = 'message',\n              data = [],\n              i = 0,\n              line = '';\n\n          cache = responseText;\n\n          for (; i < parts.length; i++) {\n            line = parts[i].replace(reTrim, '');\n            if (line.indexOf('event') == 0) {\n              eventType = line.replace(/event:?\\s*/, '');\n            } else if (line.indexOf('data') == 0) {\n              data.push(line.replace(/data:?\\s*/, ''));\n            } else if (line.indexOf('id:') == 0) {\n              lastEventId = line.replace(/id:?\\s*/, '');\n            } else if (line.indexOf('id') == 0) {\n              lastEventId = null;\n            } else if (line == '') {\n              if (data.length) {\n                var event = new MessageEvent(data.join('\\n'), eventsource.url, lastEventId);\n                eventsource.dispatchEvent(eventType, event);\n                data = [];\n                eventType = 'message';\n              }\n            }\n          }\n\n          if (this.readyState == 4) pollAgain(this);\n        } else if (eventsource.readyState !== eventsource.CLOSED) {\n          if (this.readyState == 4) {\n            eventsource.readyState = eventsource.CONNECTING;\n            eventsource.dispatchEvent('error', { type: 'error' });\n            pollAgain(this);\n          } else if (this.readyState == 0) {\n            pollAgain(this);\n          }\n        }\n      };\n\n      xhr.send();\n\n      setTimeout(function () {\n        if (true || xhr.readyState == 3) xhr.abort();\n      }, xhr.timeout);\n\n      eventsource._xhr = xhr;\n\n    } catch (e) {\n      eventsource.dispatchEvent('error', { type: 'error', data: e.message });\n    }\n  };\n\n  poll();\n};\n\nEventSource.prototype = {\n  close: function () {\n    this.readyState = this.CLOSED;\n    clearInterval(this._pollTimer);\n    this._xhr.abort();\n  },\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSED: 2,\n  dispatchEvent: function (type, event) {\n    var handlers = this['_' + type + 'Handlers'];\n    if (handlers) {\n      for (var i = 0; i < handlers.length; i++) {\n        handlers[i].call(this, event);\n      }\n    }\n\n    if (this['on' + type]) {\n      this['on' + type].call(this, event);\n    }\n  },\n  addEventListener: function (type, handler) {\n    if (!this['_' + type + 'Handlers']) {\n      this['_' + type + 'Handlers'] = [];\n    }\n    this['_' + type + 'Handlers'].push(handler);\n  },\n  removeEventListener: function () {},\n  onerror: null,\n  onmessage: null,\n  onopen: null,\n  readyState: 0,\n  URL: ''\n};\n\nvar MessageEvent = function (data, origin, lastEventId) {\n  this.data = data;\n  this.origin = origin;\n  this.lastEventId = lastEventId || '';\n};\n\nMessageEvent.prototype = {\n  data: null,\n  type: 'message',\n  lastEventId: '',\n  origin: ''\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class EventSource {\n    constructor(url) {\n        this.URL = url;\n        this.readyState = 0; // CONNECTING\n        this._pollTimer = null;\n        this._xhr = null;\n        this.eventListeners = {};\n        this.poll();\n    }\n\n    poll() {\n        if (this.readyState !== 0) return;\n        this.readyState = 0; // CONNECTING\n        this._xhr = new XMLHttpRequest();\n        this._xhr.onreadystatechange = () => {\n            if (this._xhr.readyState === 3 && this._xhr.status === 200) {\n                const responseText = this._xhr.responseText;\n                const events = responseText.split(\"\\n\\n\");\n                for (const event of events) {\n                    const lines = event.split(\"\\n\");\n                    let data = \"\";\n                    let lastEventId = \"\";\n                    let origin = this.URL;\n                    for (const line of lines) {\n                        if (line.startsWith(\"data: \")) {\n                            data += line.substring(6) + \"\\n\";\n                        } else if (line.startsWith(\"id: \")) {\n                            lastEventId = line.substring(4);\n                        }\n                    }\n                    if (data) {\n                        this.dispatchEvent(\"message\", new MessageEvent(data.trim(), origin, lastEventId));\n                    }\n                }\n                this.readyState = 1; // OPEN\n            }\n        };\n        this._xhr.onerror = () => {\n            this.readyState = 2; // CLOSED\n            this.reconnect();\n        };\n        this._xhr.open(\"GET\", this.URL, true);\n        this._xhr.send();\n    }\n\n    close() {\n        if (this._xhr) {\n            this._xhr.abort();\n            this._xhr = null;\n        }\n        this.readyState = 2; // CLOSED\n        clearTimeout(this._pollTimer);\n    }\n\n    dispatchEvent(type, event) {\n        if (this.eventListeners[type]) {\n            for (const handler of this.eventListeners[type]) {\n                handler(event);\n            }\n        }\n    }\n\n    addEventListener(type, handler) {\n        if (!this.eventListeners[type]) {\n            this.eventListeners[type] = [];\n        }\n        this.eventListeners[type].push(handler);\n    }\n\n    removeEventListener(type, handler) {\n        if (this.eventListeners[type]) {\n            this.eventListeners[type] = this.eventListeners[type].filter(h => h !== handler);\n        }\n    }\n\n    reconnect() {\n        this._pollTimer = setTimeout(() => this.poll(), 1000);\n    }\n}\n\nclass MessageEvent {\n    constructor(data, origin, lastEventId) {\n        this.data = data;\n        this.origin = origin;\n        this.lastEventId = lastEventId;\n        this.type = 'message';\n    }\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class DataManURL {\n    constructor(url, type = null, options = {}) {\n        this.url = url;\n        this._type = type;\n        this.urlOpts = options;\n        this._size = null;\n    }\n\n    getBuffer(callback) {\n        const https = require('https');\n        https.get(this.url, this.urlOpts, (res) => {\n            if (res.statusCode !== 200) {\n                return callback(new Error(`Failed to get '${this.url}' (${res.statusCode})`));\n            }\n            const chunks = [];\n            res.on('data', (chunk) => chunks.push(chunk));\n            res.on('end', () => {\n                this._size = Buffer.concat(chunks).length;\n                this._type = res.headers['content-type'];\n                callback(null, Buffer.concat(chunks));\n            });\n        }).on('error', (err) => callback(err));\n    }\n\n    getDataUri(callback) {\n        this.getBuffer((err, buffer) => {\n            if (err) return callback(err);\n            const base64 = buffer.toString('base64');\n            const dataUri = `data:${this._type};base64,${base64}`;\n            callback(null, dataUri);\n        });\n    }\n\n    createReadStream() {\n        const { Readable } = require('stream');\n        const stream = new Readable({\n            read: () => {\n                this.getBuffer((err, buffer) => {\n                    if (err) {\n                        stream.emit('error', err);\n                    } else {\n                        stream.push(buffer);\n                        stream.push(null);\n                    }\n                });\n            }\n        });\n        return stream;\n    }\n\n    size(callback) {\n        if (this._size !== null) {\n            return callback(null, this._size);\n        }\n        this.getBuffer((err, buffer) => {\n            if (err) return callback(err);\n            callback(null, buffer.length);\n        });\n    }\n\n    type() {\n        return this._type;\n    }\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a function to handle form submission asynchronously using XMLHttpRequest in JavaScript. The function should prevent default form submission, process form data, send it to a server via POST request, and handle the server's response to display a thank-you message upon successful submission.\n\nFunction Description: The function `handleFormSubmit` intercepts form submission events, validates the form data (checking for honeypot fields), disables all buttons during submission, sends the form data to a specified URL via POST request, and processes the server's response to update the UI accordingly.\n\nInput: \n- `event`: [Event Object] - The form submission event that triggers this function. The event object contains the target form element and allows prevention of default submission behavior.\n\nOutput: \n- None (void) - The function does not return any value but performs side effects including:\n  - Preventing default form submission\n  - Disabling form buttons during submission\n  - Sending form data to the server\n  - Updating the UI based on server response (resetting form and showing thank-you message)",
    "Canonical_solution": "function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n\n    if (formData.honeypot) {\n        return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            form.reset();\n            var formElements = form.querySelector(\".form-elements\")\n            if (formElements) {\n                formElements.style.display = \"none\";\n            }\n            var thankYouMessage = form.querySelector(\".thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n        }\n    };\n    var encoded = Object.keys(data).map(function(k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n    }).join('&');\n    xhr.send(encoded);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function handleFormSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const honeypot = form.querySelector('input[name=\"honeypot\"]');\n    if (honeypot && honeypot.value) {\n        return; // Prevent submission if honeypot is filled\n    }\n    const formData = new FormData(form);\n    const xhr = new XMLHttpRequest();\n    const submitButtons = form.querySelectorAll('button[type=\"submit\"]');\n    submitButtons.forEach(button => button.disabled = true);\n    \n    xhr.open('POST', form.action);\n    xhr.onload = function() {\n        if (xhr.status === 200) {\n            form.reset();\n            alert('Thank you for your submission!');\n        } else {\n            alert('There was an error. Please try again.');\n        }\n        submitButtons.forEach(button => button.disabled = false);\n    };\n    xhr.onerror = function() {\n        alert('There was a network error. Please try again.');\n        submitButtons.forEach(button => button.disabled = false);\n    };\n    xhr.send(formData);\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function sendPostRequest() {\n    const url = 'https://example.com/api'; \n    const data = new URLSearchParams();\n    data.append('key1', 'value1');\n    data.append('key2', 'value2');\n\n    fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: data.toString(),\n        credentials: 'include'\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.text();\n    })\n    .then(data => {\n        console.log('Success:', data);\n    })\n    .catch((error) => {\n        console.error('Error:', error);\n    });\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n    if (data === 'xhr') {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', 'https://api.example.com/data', true);\n        xhr.onload = function() {\n            if (xhr.status === 200) {\n                sender.postMessage(xhr.responseText);\n            } else {\n                sender.postMessage('Error: ' + xhr.status);\n            }\n        };\n        xhr.onerror = function() {\n            sender.postMessage('Request failed.');\n        };\n        xhr.send();\n    } else if (data === 'fetch') {\n        fetch('https://api.example.com/data')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                return response.text();\n            })\n            .then(data => {\n                sender.postMessage(data);\n            })\n            .catch(error => {\n                sender.postMessage('Fetch error: ' + error.message);\n            });\n    } else if (data === 'importScripts') {\n        try {\n            importScripts('https://example.com/script.js');\n            sender.postMessage('Script imported successfully.');\n        } catch (error) {\n            sender.postMessage('ImportScripts error: ' + error.message);\n        }\n    } else {\n        sender.postMessage('Unexpected message');\n    }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function loadYamlUrl(url) {\n    fetch(url)\n        .then(response => {\n            if (response.status === 200) {\n                return response.text();\n            } else {\n                throw new Error('Failed to load YAML: ' + response.status);\n            }\n        })\n        .then(yamlText => {\n            console.log(yamlText);\n            yamlToForm(yamlText);\n        })\n        .catch(error => {\n            console.error(error);\n        });\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n    constructor() {\n        this.map = {\n            'is.gd': 'is.gd',\n            'goo.gl': 'goo.gl',\n            'budurl.com': 'budurl.com',\n            'snipurl.com': 'snipurl.com'\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        const { url, depth = 0, seen = {} } = args;\n\n        if (depth > 10) {\n            return callback({ ...args, err: new Error('Max depth reached') });\n        }\n\n        if (seen[url]) {\n            return callback({ ...args, err: new Error('Cycle detected') });\n        }\n\n        seen[url] = true;\n\n        fetch(url, { method: 'HEAD', redirect: 'follow', timeout: this.timeout })\n            .then(response => {\n                const finalUrl = response.url;\n                const headers = response.headers;\n                const urlp = new URL(finalUrl);\n\n                if (this.map[urlp.hostname]) {\n                    this.expand({ url: finalUrl, depth: depth + 1, seen }, callback);\n                } else {\n                    callback({ url: finalUrl, depth, seen, headers, urlp });\n                }\n            })\n            .catch(err => {\n                callback({ ...args, err });\n            });\n    }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "class HTTPServer {\n    constructor(port) {\n        const express = require('express');\n        const multer = require('multer');\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        this.upload = multer({ dest: 'uploads/' });\n        this.app.use(express.json());\n        this.app.use(express.urlencoded({ extended: true }));\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, (err) => {\n                if (err) return reject(err);\n                resolve(`Server is running on port ${this.port}`);\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n            this.server = null;\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n\n    uploadFile(path, handler) {\n        this.app.post(path, this.upload.single('file'), handler);\n    }\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by detecting the shortening service and using the appropriate API or HTTP HEAD request to follow redirects. It handles recursive expansion with depth limiting and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening service names to their associated domains\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration including known URL shortening services and timeout\n- expand(args: [Object], callback: [Function]) -> [void] - The main method that initiates URL expansion\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to be called with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - err: [Error] - Any error encountered (optional)\n      - headers: [Object] - Response headers (optional)\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n\nThe class includes several internal API methods (isgd, googl, budurl, snipurl, generic) that handle specific URL shortening services or generic URL expansion through HTTP HEAD requests. These methods are not meant to be called directly but are used internally by the expand method.",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n    constructor() {\n        this.map = {\n            isgd: 'is.gd',\n            googl: 'goo.gl',\n            budurl: 'budurl.com',\n            snipurl: 'snipurl.com'\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        const { url, depth = 0, seen = {} } = args;\n        if (seen[url]) {\n            return callback({ url, err: new Error('Cycle detected'), depth, seen });\n        }\n        seen[url] = true;\n\n        const service = this.detectService(url);\n        if (service) {\n            this[service](url, depth, seen, callback);\n        } else {\n            this.generic(url, depth, seen, callback);\n        }\n    }\n\n    detectService(url) {\n        for (const [service, domain] of Object.entries(this.map)) {\n            if (url.includes(domain)) {\n                return service;\n            }\n        }\n        return null;\n    }\n\n    isgd(url, depth, seen, callback) {\n        this.makeRequest(url, (err, res) => {\n            if (err) return callback({ url, err, depth, seen });\n            this.expand({ url: res.headers.location, depth: depth + 1, seen }, callback);\n        });\n    }\n\n    googl(url, depth, seen, callback) {\n        this.makeRequest(url, (err, res) => {\n            if (err) return callback({ url, err, depth, seen });\n            this.expand({ url: res.headers.location, depth: depth + 1, seen }, callback);\n        });\n    }\n\n    budurl(url, depth, seen, callback) {\n        this.makeRequest(url, (err, res) => {\n            if (err) return callback({ url, err, depth, seen });\n            this.expand({ url: res.headers.location, depth: depth + 1, seen }, callback);\n        });\n    }\n\n    snipurl(url, depth, seen, callback) {\n        this.makeRequest(url, (err, res) => {\n            if (err) return callback({ url, err, depth, seen });\n            this.expand({ url: res.headers.location, depth: depth + 1, seen }, callback);\n        });\n    }\n\n    generic(url, depth, seen, callback) {\n        this.makeRequest(url, (err, res) => {\n            if (err) return callback({ url, err, depth, seen });\n            this.expand({ url: res.headers.location, depth: depth + 1, seen }, callback);\n        });\n    }\n\n    makeRequest(url, callback) {\n        const xhr = new XMLHttpRequest();\n        xhr.open('HEAD', url, true);\n        xhr.timeout = this.timeout;\n        xhr.onload = () => callback(null, xhr);\n        xhr.onerror = () => callback(new Error('Request failed'));\n        xhr.ontimeout = () => callback(new Error('Request timed out'));\n        xhr.send();\n    }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\nconst zlib = require('zlib');\n\nfunction makeHttpRequest() {\n    const url = 'http://example.com';\n    const headers = {\n        'User-Agent': 'MyApp',\n        'Accept-Encoding': 'gzip'\n    };\n\n    request({ url: url, headers: headers, gzip: true }, (error, response, body) => {\n        if (error) {\n            console.error('Error:', error);\n            return;\n        }\n        console.log('Response Body:', body);\n    });\n}\n\nmakeHttpRequest();"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a function to set up an Express server with session management using MongoDB as the session store, and integrate it with Next.js for server-side rendering.\n\nFunction Description: The function `setupServer` initializes an Express server with session management configured to use MongoDB for session storage. It integrates with Next.js for handling server-side rendering and routes all requests to the Next.js request handler. The server listens on a specified port and logs the root URL when ready.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Port number to listen on (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that listens on the specified port and handles requests. It logs the root URL to the console when the server is ready.)",
    "Canonical_solution": "function setupServer() {\n    const express = require('express');\n    const session = require('express-session');\n    const mongoSessionStore = require('connect-mongo');\n    const next = require('next');\n    const mongoose = require('mongoose');\n\n    const dev = process.env.NODE_ENV !== 'production';\n    const MONGO_URL = process.env.MONGO_URL_TEST;\n    const port = process.env.PORT || 8000;\n    const ROOT_URL = `http://localhost:${port}`;\n\n    const app = next({ dev });\n    const handle = app.getRequestHandler();\n\n    const server = express();\n\n    const sessionOptions = {\n        name: process.env.SESSION_NAME,\n        secret: process.env.SESSION_SECRET,\n        store: mongoSessionStore.create({\n            mongoUrl: MONGO_URL,\n            ttl: 14 * 24 * 60 * 60,\n        }),\n        resave: false,\n        saveUninitialized: false,\n        cookie: {\n            httpOnly: true,\n            maxAge: 14 * 24 * 60 * 60 * 1000,\n            domain: 'localhost',\n        },\n    };\n\n    const sessionMiddleware = session(sessionOptions);\n    server.use(sessionMiddleware);\n\n    server.get('*', (req, res) => handle(req, res));\n\n    server.listen(port, (err) => {\n        if (err) throw err;\n        console.log(`> Ready on ${ROOT_URL}`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst session = require('express-session');\nconst MongoDBStore = require('connect-mongodb-session')(session);\nconst mongoose = require('mongoose');\nconst next = require('next');\n\nconst setupServer = async () => {\n    const isDev = process.env.NODE_ENV !== 'production';\n    const app = next({ dev: isDev });\n    const handle = app.getRequestHandler();\n\n    await app.prepare();\n\n    const mongoUrl = process.env.MONGO_URL_TEST;\n    await mongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\n\n    const store = new MongoDBStore({\n        uri: mongoUrl,\n        collection: 'sessions'\n    });\n\n    const server = express();\n\n    server.use(session({\n        secret: process.env.SESSION_SECRET,\n        resave: false,\n        saveUninitialized: false,\n        store: store,\n        cookie: {\n            maxAge: 1000 * 60 * 60 * 24 // 1 day\n        }\n    }));\n\n    server.all('*', (req, res) => {\n        return handle(req, res);\n    });\n\n    const port = process.env.PORT || 8000;\n    server.listen(port, () => {\n        console.log(`Server is running on http://localhost:${port}`);\n    });\n};\n\nsetupServer();"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create a function to set up an Express server that serves static files for a specific route.\n\nFunction Description: The function `setupServer` initializes an Express application, configures a route to serve a static HTML file, and starts the server on port 3000. It is designed to handle GET requests for the '/users' path by sending the corresponding HTML file.\n\nInput: None\n\nOutput: None (The function starts the server and logs a message to the console when the server is running.)",
    "Canonical_solution": "const express = require('express');\nconst path = require('path');\n\nfunction setupServer() {\n    const app = express();\n    \n    app.get('/users', function (req, res) {\n        res.sendFile(path.join(__dirname, 'modules/users/views/list.html'));\n    });\n\n    app.listen(3000, function () {\n        console.log('Servidor rodando em localhost:3000');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express'); \nconst path = require('path'); \n\nfunction setupServer() { \n    const app = express(); \n    app.use('/users', express.static(path.join(__dirname, 'public'))); \n    app.listen(3000, () => { \n        console.log('Server is running on http://localhost:3000/users'); \n    }); \n} \n\nsetupServer();"
  }
]