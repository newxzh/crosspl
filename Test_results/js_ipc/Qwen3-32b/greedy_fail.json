[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nconst https = require('https');\nconst querystring = require('querystring');\nconst crypto = require('crypto');\n\nclass Trader {\n  constructor(config) {\n    this.key = config.key;\n    this.secret = config.secret;\n    this.currency = config.currency;\n    this.asset = config.asset;\n    this.pair = `${this.asset}_${this.currency}`;\n    this.name = 'EXMO';\n    this.nonce = 0;\n  }\n\n  api_query(method, params, callback) {\n    this.nonce += 1;\n\n    const baseParams = {\n      api_key: this.key,\n      nonce: this.nonce,\n      ...params\n    };\n\n    const sortedKeys = Object.keys(baseParams).sort();\n    const sortedBaseParams = {};\n    for (const key of sortedKeys) {\n      sortedBaseParams[key] = baseParams[key];\n    }\n    const paramStringForSign = querystring.stringify(sortedBaseParams);\n\n    const hmac = crypto.createHmac('sha512', this.secret);\n    hmac.update(paramStringForSign);\n    const signature = hmac.digest('hex');\n\n    const finalParams = {\n      ...baseParams,\n      signature\n    };\n\n    const finalParamString = querystring.stringify(finalParams);\n\n    const options = {\n      hostname: 'api.exmo.com',\n      path: '/v1.1/' + method,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': Buffer.byteLength(finalParamString)\n      }\n    };\n\n    const req = https.request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (res.statusCode >= 200 && res.statusCode < 300) {\n            if (json.error) {\n              callback(new Error(json.error), null);\n            } else {\n              callback(null, json);\n            }\n          } else {\n            callback(new Error(`API request failed with status ${res.statusCode}: ${JSON.stringify(json)}`), null);\n          }\n        } catch (e) {\n          callback(e, null);\n        }\n      });\n    });\n\n    req.on('error', (e) => {\n      callback(e, null);\n    });\n\n    req.write(finalParamString);\n    req.end();\n  }\n}\n```"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a function that sets up an Express server with various route handlers for handling HTTP requests related to email functionality, including authentication, sending test emails, and managing email server configurations.\n\nFunction Description: The function `setupExpressServer` initializes an Express server with middleware for parsing request bodies and cookies. It defines several route handlers for different HTTP methods (GET, POST) that handle email-related operations such as authentication, sending test emails, and saving email server configurations. The server listens on a specified port.\n\nInput: None (The function uses module-level variables like `processInfo.port` for configuration)\n\nOutput: None (The function starts a server that listens on the specified port and handles incoming HTTP requests)\n\nNote: The function relies on several external modules and variables that should be available in the scope:\n- `express`: The Express framework\n- `connect`: Middleware for Express\n- `fs`: File system module\n- `nodemailer`: For sending emails\n- `lcrypto`: For encryption\n- `lutil`: For file operations\n- `auth`: A variable storing authentication details\n- `processInfo`: An object containing server configuration (like port number)\n- `locker`: An object containing base URL for locker service\n- `request`: For making HTTP requests",
    "Canonical_solution": "function setupExpressServer() {\n    var express = require('express');\n    var connect = require('connect');\n    var app = express.createServer(connect.bodyParser(), connect.cookieParser());\n    \n    app.set('views', __dirname);\n    \n    app.get('/', function(req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!auth || req.param(\"change\")) return res.end(fs.readFileSync(__dirname + '/auth.html'));\n        res.write(\"<p>Using \"+auth.host+\":\"+auth.port+\" \");\n        if(auth.ssl) res.write(\"(ssl)\");\n        if(auth.user) res.write(\"authenticating as \"+auth.user);\n        res.write(\"<br><a href='?change=1'>change</a> or <a href='javascript:window.location=\\\"test?to=\\\"+window.prompt(\\\"recipient email address\\\")'>send test message</a>\");\n        res.end();\n    });\n    \n    app.post('/save', function(req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!req.body || !req.body.host || !req.body.port) return res.end(\"missing minimum required host/port :(\");\n        nodemailer.SMTP = auth = {host:req.body.host, port:req.body.port, ssl:false};\n        if(req.body.ssl) auth.ssl = true;\n        if(req.body.user && req.body.pass) {\n            auth.use_authentication = true;\n            auth.user = req.body.user;\n            auth.pass = lcrypto.encrypt(req.body.pass);\n        }\n        lutil.atomicWriteFileSync(\"auth.json\", JSON.stringify(auth, null, 4));\n        if(auth.pass) auth.pass = req.body.pass;\n        res.end(\"saved! <a href='./'>continue</a>\");\n    });\n    \n    app.get('/state', function (req, res) {\n        var ready = (auth) ? 1 : 0;\n        res.send({ready:ready});\n    });\n    \n    app.get('/test', function (req, res) {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        if(!req.param(\"to\") || req.param(\"to\").indexOf(\"@\") <= 0) return res.end(\"invalid recipient\")\n        var message = {\n            sender: 'Testificate <42@awesome.com>',\n            to: req.param(\"to\"),\n            subject: 'test message  \u2714',\n            body: 'Hello to you!',\n            html:'<p>it <b>WORKED</b></p>',\n            debug: true\n        };\n        request.post({url:locker.lockerBase + \"/Me/smtp/send\", json:message}, function(err, r, body){\n            if(err || !body) return res.end(\"failed \"+err);\n            return res.end(\"sent!\");\n        });\n    });\n    \n    app.post('/send', function (req, res) {\n        if(!auth) return res.send(false);\n        if (!req.body || !req.body.to) return res.send(false);\n        console.error(\"DEBUG SMTP: \"+JSON.stringify(req.body));\n        var sent = false;\n        nodemailer.send_mail(req.body, function(err, ok){\n            if(sent) return;\n            sent=true;\n            if(err || !ok){\n                console.error('Error occured: '+err);\n                return res.send(false);\n            }\n            res.send(true);\n        })\n    });\n    \n    app.listen(processInfo.port,function() {\n        var returnedInfo = {};\n        console.log(JSON.stringify(returnedInfo));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function setupExpressServer() {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  app.use(connect.cookieParser());\n\n  function authenticate(req, res, next) {\n    if (req.cookies && req.cookies.auth_token === 'valid_token') {\n      next();\n    } else {\n      res.status(401).json({ error: 'Authentication required' });\n    }\n  }\n\n  app.post('/authenticate', (req, res) => {\n    const { username, password } = req.body;\n    if (username === auth.username && lcrypto.compareHash(password, auth.passwordHash)) {\n      res.cookie('auth_token', 'valid_token', { httpOnly: true });\n      res.json({ success: true });\n    } else {\n      res.status(401).json({ error: 'Invalid credentials' });\n    }\n  });\n\n  app.get('/config', authenticate, (req, res) => {\n    res.json(currentConfig);\n  });\n\n  app.post('/save-config', authenticate, (req, res) => {\n    const { host, port, auth } = req.body;\n    lutil.writeFile('email-config.json', JSON.stringify({ host, port, auth }), (err) => {\n      if (err) return res.status(500).json({ error: 'Failed to save config' });\n      currentConfig = { host, port, auth };\n      res.json({ success: true });\n    });\n  });\n\n  app.post('/send-test-email', authenticate, (req, res) => {\n    const { to } = req.body;\n    const transporter = nodemailer.createTransport({\n      host: currentConfig.host,\n      port: currentConfig.port,\n      auth: currentConfig.auth\n    });\n    const mailOptions = {\n      from: 'test@example.com',\n      to,\n      subject: 'Test Email',\n      text: 'This is a test email sent from the server.'\n    };\n    transporter.sendMail(mailOptions, (error, info) => {\n      if (error) {\n        return res.status(500).json({ error: error.message });\n      }\n      res.json({ success: true, messageId: info.messageId });\n    });\n  });\n\n  app.listen(processInfo.port, () => {\n    console.log(`Server running on port ${processInfo.port}`);\n  });\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a function that sets up a proxy server using Express and http-proxy-middleware to forward requests to a specified target URL.\n\nFunction Description: The function `createProxyServer` initializes an Express application, configures a proxy middleware to forward requests to a specified target URL (in this case, 'http://jsonplaceholder.typicode.com/users'), and starts the server on port 3000. It also handles graceful shutdown on receiving SIGINT or SIGTERM signals.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts a server and logs messages to the console.)",
    "Canonical_solution": "function createProxyServer() {\n    const express = require('express');\n    const { createProxyMiddleware } = require('../../dist');\n    \n    const jsonPlaceholderProxy = createProxyMiddleware({\n        target: 'http://jsonplaceholder.typicode.com/users',\n        changeOrigin: true,\n        logger: console,\n    });\n\n    const app = express();\n    app.use('/users', jsonPlaceholderProxy);\n    \n    const server = app.listen(3000);\n    console.log('[DEMO] Server: listening on port 3000');\n    console.log('[DEMO] Opening: http://localhost:3000/users');\n    \n    require('open')('http://localhost:3000/users');\n    \n    process.on('SIGINT', () => server.close());\n    process.on('SIGTERM', () => server.close());\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "import express from 'express';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\n\nfunction createProxyServer() {\n  const app = express();\n  app.use('/', createProxyMiddleware({\n    target: 'http://jsonplaceholder.typicode.com/users',\n    changeOrigin: true\n  }));\n  \n  const server = app.listen(3000, () => {\n    console.log('Proxy server running on port 3000');\n  });\n\n  ['SIGINT', 'SIGTERM'].forEach(signal => {\n    process.on(signal, () => {\n      server.close(() => {\n        console.log(`Server closed due to ${signal}`);\n      });\n    });\n  });\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server with WebSocket support using Express and Socket.IO, implementing a particle simulation system with cluster and client event handling.\n\nFunction Description: The function `startServer` initializes an Express application, sets up static file serving, integrates Socket.IO for real-time communication, and configures a particle simulation system with collision detection and cluster management. It handles particle movement, boundary collisions, and client interactions through defined event handlers.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function starts a server listening on port 3000 but doesn't return any value)",
    "Canonical_solution": "function startServer() {\n    const express = require('express');\n    const app = express();\n    const server = require('http').Server(app);\n    const io = require('socket.io')(server);\n    const swip = require('../../../src/server/index.js');\n\n    app.use(express.static(__dirname + './../static'));\n\n    swip(io, {\n        cluster: {\n            events: {\n                update: (cluster) => {\n                    const blobs = cluster.data.blobs;\n                    const clients = cluster.clients;\n\n                    const updatedBlobs = blobs.map((blob) => {\n                        const boundaryOffset = blob.size;\n                        const client = clients.find((c) => isParticleInClient(blob, c));\n\n                        let nextPosX = blob.x + blob.speedX;\n                        let nextPosY = blob.y + blob.speedY;\n                        let nextSpeedX = blob.speedX;\n                        let nextSpeedY = blob.speedY;\n\n                        if (client) {\n                            if (((blob.speedX < 0) &&\n                                ((nextPosX - boundaryOffset) < client.transform.x)\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.left, nextPosY))) {\n                                nextPosX = client.transform.x + boundaryOffset;\n                                nextSpeedX = blob.speedX * -1;\n                            } else if (((blob.speedX > 0) &&\n                                ((nextPosX + boundaryOffset) > (client.transform.x + client.size.width))\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.right, nextPosY))) {\n                                nextPosX = client.transform.x + (client.size.width - boundaryOffset);\n                                nextSpeedX = blob.speedX * -1;\n                            }\n\n                            if (((blob.speedY < 0) &&\n                                ((nextPosY - boundaryOffset) < client.transform.y\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.top, nextPosX)))) {\n                                nextPosY = client.transform.y + boundaryOffset;\n                                nextSpeedY = blob.speedY * -1;\n                            } else if (((blob.speedY > 0) &&\n                                ((nextPosY + boundaryOffset) > (client.transform.y + client.size.height))\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.bottom, nextPosX))\n                            ) {\n                                nextPosY = client.transform.y + (client.size.height - boundaryOffset);\n                                nextSpeedY = blob.speedY * -1;\n                            }\n                        } else {\n                            const firstClient = clients[0];\n                            nextPosX = firstClient.transform.x + (firstClient.size.width / 2);\n                            nextPosY = firstClient.transform.y + (firstClient.size.height / 2);\n                            nextSpeedX = 0;\n                            nextSpeedY = 0;\n                        }\n\n                        blob.x = nextPosX;\n                        blob.y = nextPosY;\n                        blob.speedX = nextSpeedX;\n                        blob.speedY = nextSpeedY;\n\n                        return blob;\n                    });\n\n                    return {\n                        blobs: { $set: updatedBlobs },\n                    };\n                },\n                merge: (cluster1, cluster2, transform) => ({\n                    blobs: { $set: getNewParticleDist(cluster1, cluster2, transform) },\n                    backgroundColor: { $set: cluster1.data.backgroundColor },\n                }),\n            },\n            init: () => ({ blobs: [], backgroundColor: getRandomColor() }),\n        },\n\n        client: {\n            init: () => ({}),\n            events: {\n                addBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $push: blobs } },\n                        },\n                    };\n                },\n                updateBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $set: blobs } },\n                        },\n                    };\n                },\n            },\n        },\n    });\n\n    server.listen(3000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketio = require('socket.io');\n\nfunction startServer() {\n  const app = express();\n  const server = http.createServer(app);\n  const io = socketio(server);\n  const particles = [];\n\n  app.use(express.static(__dirname + '/public'));\n\n  io.on('connection', (socket) => {\n    socket.emit('init', particles);\n    socket.on('addParticle', ({ x, y }) => {\n      particles.push({\n        id: Date.now(),\n        x,\n        y,\n        dx: (Math.random() - 0.5) * 4,\n        dy: (Math.random() - 0.5) * 4,\n        radius: 8\n      });\n    });\n  });\n\n  const WIDTH = 800;\n  const HEIGHT = 600;\n\n  function update() {\n    for (const p of particles) {\n      p.x += p.dx;\n      p.y += p.dy;\n\n      if (p.x - p.radius < 0 || p.x + p.radius > WIDTH) p.dx *= -1;\n      if (p.y - p.radius < 0 || p.y + p.radius > HEIGHT) p.dy *= -1;\n    }\n\n    for (let i = 0; i < particles.length; i++) {\n      for (let j = i + 1; j < particles.length; j++) {\n        const p1 = particles[i];\n        const p2 = particles[j];\n        const dx = p2.x - p1.x;\n        const dy = p2.y - p1.y;\n        const dist = Math.hypot(dx, dy);\n        if (dist < p1.radius + p2.radius) {\n          [p1.dx, p2.dx] = [p2.dx, p1.dx];\n          [p1.dy, p2.dy] = [p2.dy, p1.dy];\n        }\n      }\n    }\n\n    io.emit('update', particles);\n  }\n\n  setInterval(update, 1000/60);\n  server.listen(3000);\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a function that sets up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB, integrates with Next.js for server-side rendering, and sets up basic route handling. It prepares the Next.js application, configures middleware, and starts the server on a specified port.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret for session encryption)\n\nOutput: Returns a Promise that resolves to the configured Express server instance when the Next.js app is prepared and the server is listening on the specified port.",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  return app.prepare().then(async () => {\n    const server = express();\n\n    server.use(express.json());\n\n    const sessionOptions = {\n      name: process.env.SESSION_NAME,\n      secret: process.env.SESSION_SECRET,\n      store: mongoSessionStore.create({\n        mongoUrl: MONGO_URL,\n        ttl: 14 * 24 * 60 * 60,\n      }),\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        httpOnly: true,\n        maxAge: 14 * 24 * 60 * 60 * 1000,\n        domain: 'localhost',\n      },\n    };\n\n    const sessionMiddleware = session(sessionOptions);\n    server.use(sessionMiddleware);\n\n    server.get('*', (req, res) => {\n      const url = URL_MAP[req.path];\n      if (url) {\n        app.render(req, res, url);\n      } else {\n        handle(req, res);\n      }\n    });\n\n    server.listen(port, (err) => {\n      if (err) throw err;\n      console.log(`> Ready on ${ROOT_URL}`);\n    });\n\n    return server;\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst next = require('next');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo');\n\nasync function setupServer() {\n  const dev = process.env.NODE_ENV !== 'production';\n  const nextApp = next({ dev });\n  const handle = nextApp.getRequestHandler();\n\n  await nextApp.prepare();\n\n  const app = express();\n\n  const sessionOptions = {\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    name: process.env.SESSION_NAME,\n    cookie: {\n      secure: !dev,\n      httpOnly: true,\n      sameSite: 'strict',\n      maxAge: 1000 * 60 * 60 * 24\n    },\n    store: MongoStore.create({\n      mongoUrl: process.env.MONGO_URL_TEST,\n      collectionName: 'sessions'\n    })\n  };\n\n  app.use(session(sessionOptions));\n\n  app.all('*', (req, res) => handle(req, res));\n\n  const port = process.env.PORT || 8000;\n  return new Promise((resolve, reject) => {\n    app.listen(port, () => resolve(app)).on('error', reject);\n  });\n}\n\nmodule.exports = setupServer;"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\r\n  constructor() {\r\n    this.map = {\r\n      'is.gd': 'isgd',\r\n      'goo.gl': 'googl',\r\n      'budurl.com': 'budurl',\r\n      'snipurl.com': 'snipurl'\r\n    };\r\n    this.timeout = 5000;\r\n    this.maxDepth = 10;\r\n  }\r\n\r\n  expand(args, callback) {\r\n    const { url, depth = 0, seen = {} } = args;\r\n\r\n    if (depth > this.maxDepth) {\r\n      return callback(new Error('Max depth exceeded'), args);\r\n    }\r\n\r\n    if (seen[url]) {\r\n      return callback(new Error('Infinite loop detected'), args);\r\n    }\r\n\r\n    seen[url] = true;\r\n\r\n    const domain = new URL(url).hostname;\r\n    const service = this.map[domain];\r\n\r\n    if (service && this.APIs[service]) {\r\n      this.APIs[service]({ ...args, seen }, callback);\r\n    } else {\r\n      this.APIs.generic({ ...args, seen }, callback);\r\n    }\r\n  }\r\n\r\n  APIs = {\r\n    isgd: (args, callback) => {\r\n      const { url, depth, seen } = args;\r\n      const parsed = new URL(url);\r\n      const apiURL = `http://is.gd/unshort?shorturl=${parsed.pathname.slice(1)}`;\r\n      this._httpRequest('GET', apiURL, {}, (err, res) => {\r\n        if (err) return this.APIs.generic({ ...args, seen }, callback);\r\n        let longUrl;\r\n        try {\r\n          longUrl = res.body;\r\n        } catch {\r\n          return this.APIs.generic({ ...args, seen }, callback);\r\n        }\r\n        this.expand({ url: longUrl, depth: depth + 1, seen }, callback);\r\n      });\r\n    },\r\n    googl: (args, callback) => {\r\n      const { url, depth, seen } = args;\r\n      const parsed = new URL(url);\r\n      const apiURL = `https://www.googleapis.com/urlshortener/v1/url?shortUrl=${parsed.hostname}${parsed.pathname}`;\r\n      this._httpRequest('GET', apiURL, { 'Content-Type': 'application/json' }, (err, res) => {\r\n        if (err) return this.APIs.generic({ ...args, seen }, callback);\r\n        let longUrl;\r\n        try {\r\n          longUrl = JSON.parse(res.body).longUrl;\r\n        } catch {\r\n          return this.APIs.generic({ ...args, seen }, callback);\r\n        }\r\n        this.expand({ url: longUrl, depth: depth + 1, seen }, callback);\r\n      });\r\n    },\r\n    budurl: (args, callback) => {\r\n      const { url, depth, seen } = args;\r\n      const parsed = new URL(url);\r\n      const apiURL = `http://budurl.com/api/${parsed.pathname.slice(1)}`;\r\n      this._httpRequest('GET', apiURL, {}, (err, res) => {\r\n        if (err) return this.APIs.generic({ ...args, seen }, callback);\r\n        let longUrl;\r\n        try {\r\n          longUrl = res.body;\r\n        } catch {\r\n          return this.APIs.generic({ ...args, seen }, callback);\r\n        }\r\n        this.expand({ url: longUrl, depth: depth + 1, seen }, callback);\r\n      });\r\n    },\r\n    snipurl: (args, callback) => {\r\n      const { url, depth, seen } = args;\r\n      const parsed = new URL(url);\r\n      const apiURL = `http://api.snipurl.com/${parsed.pathname.slice(1)}`;\r\n      this._httpRequest('GET', apiURL, {}, (err, res) => {\r\n        if (err) return this.APIs.generic({ ...args, seen }, callback);\r\n        let longUrl;\r\n        try {\r\n          longUrl = res.body.url;\r\n        } catch {\r\n          return this.APIs.generic({ ...args, seen }, callback);\r\n        }\r\n        this.expand({ url: longUrl, depth: depth + 1, seen }, callback);\r\n      });\r\n    },\r\n    generic: (args, callback) => {\r\n      const { url, depth, seen } = args;\r\n      this._followRedirects(url, depth, seen, (err, finalUrl) => {\r\n        if (err) return callback(err, args);\r\n        this.expand({ url: finalUrl, depth: depth + 1, seen }, callback);\r\n      });\r\n    }\r\n  };\r\n\r\n  _httpRequest(method, url, headers, callback) {\r\n    const parsed = new URL(url);\r\n    const mod = parsed.protocol === 'https:' ? require('https') : require('http');\r\n    const req = mod.request({\r\n      hostname: parsed.hostname,\r\n      port: parsed.port || (parsed.protocol === 'https:' ? 443 : 80),\r\n      path: parsed.pathname + parsed.search,\r\n      method,\r\n      headers,\r\n      timeout: this.timeout\r\n    }, res => {\r\n      let data = '';\r\n      res.setEncoding('utf8');\r\n      res.on('data', chunk => data += chunk);\r\n      res.on('end', () => callback(null, { statusCode: res.statusCode, headers: res.headers, body: data }));\r\n    });\r\n\r\n    req.on('error', err => callback(err));\r\n    req.on('timeout', () => {\r\n      req.destroy(new Error('Timeout'));\r\n    });\r\n    req.end();\r\n  }\r\n\r\n  _followRedirects(url, depth, seen, callback) {\r\n    const parsed = new URL(url);\r\n    const options = {\r\n      hostname: parsed.hostname,\r\n      port: parsed.port || (parsed.protocol === 'https:' ? 443 : 80),\r\n      path: parsed.pathname + parsed.search,\r\n      method: 'HEAD',\r\n      timeout: this.timeout\r\n    };\r\n\r\n    const mod = parsed.protocol === 'https:' ? require('https') : require('http');\r\n    const req = mod.request(options, res => {\r\n      if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\r\n        let nextUrl;\r\n        try {\r\n          nextUrl = new URL(res.headers.location, url).href;\r\n        } catch (e) {\r\n          return callback(e, url);\r\n        }\r\n        if (seen[nextUrl]) {\r\n          return callback(new Error('Infinite loop detected'), url);\r\n        }\r\n        this._followRedirects(nextUrl, depth + 1, { ...seen, [url]: true }, callback);\r\n      } else {\r\n        callback(null, url);\r\n      }\r\n    });\r\n\r\n    req.on('error', err => callback(err, url));\r\n    req.on('timeout', () => {\r\n      req.destroy(new Error('Timeout'));\r\n    });\r\n    req.end();\r\n  }\r\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function to set up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB as the session store. It integrates Next.js for server-side rendering and sets up a catch-all route handler. The server listens on a specified port and connects to MongoDB using environment variables for configuration.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that:\n- Listens on the specified port\n- Outputs the server URL to console when ready\n- Maintains persistent connections to MongoDB for session storage)",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  mongoose.connect(MONGO_URL);\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  const server = express();\n\n  const sessionOptions = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: mongoSessionStore.create({\n      mongoUrl: MONGO_URL,\n      ttl: 14 * 24 * 60 * 60,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      maxAge: 14 * 24 * 60 * 60 * 1000,\n      domain: 'localhost',\n    },\n  };\n\n  const sessionMiddleware = session(sessionOptions);\n  server.use(sessionMiddleware);\n\n  server.get('*', (req, res) => handle(req, res));\n\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on ${ROOT_URL}`);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst mongoose = require('mongoose');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\nconst next = require('next');\n\nasync function setupServer() {\n  const dev = process.env.NODE_ENV !== 'production';\n  const nextApp = next({ dev });\n  const handle = nextApp.getRequestHandler();\n\n  const PORT = process.env.PORT || 8000;\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const SESSION_NAME = process.env.SESSION_NAME || 'session';\n  const SESSION_SECRET = process.env.SESSION_SECRET || 'secret-key';\n\n  await nextApp.prepare();\n\n  const app = express();\n\n  app.use(express.json());\n\n  app.use(session({\n    name: SESSION_NAME,\n    secret: SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: !dev,\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 7\n    },\n    store: new MongoStore({\n      url: MONGO_URL,\n      autoReconnect: true,\n      clear_interval: 3600\n    })\n  }));\n\n  app.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  mongoose.connect(MONGO_URL, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  }).catch(err => {\n    console.error('MongoDB connection error:', err);\n  });\n\n  app.listen(PORT, () => {\n    console.log(`Server ready on http://localhost:${PORT}`);\n  });\n}\n\nsetupServer();"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a function that sets up an Express server with middleware configuration, route handling, and server initialization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with essential middleware (CORS, static file serving, JSON body parsing), configures route handlers, and starts listening on a specified port. It handles both API routes and serves static HTML files.\n\nInput: None (The function uses imported modules and configuration from './src/config' and './src/routes')\n\nOutput: None (The function's side effect is starting an HTTP server that listens on the configured port)",
    "Canonical_solution": "function setupExpressServer() {\n    const bodyParser = require('body-parser');\n    const express = require('express');\n    const path = require('path');\n    const cors = require('cors');\n    const config = require('./src/config');\n    const routes = require('./src/routes');\n\n    const app = express();\n\n    app.enable('trust proxy');\n    app.use(cors());\n    app.use(express.static(path.join(__dirname, 'www')));\n    app.use(bodyParser.json());\n\n    app.get('/v2', (req, res) => res.sendFile(path.join(__dirname, 'www/index.html')));\n    app.use(routes);\n\n    app.listen(config.PORT, err => {\n        if (err) console.error(err);\n        console.log('Server started on ' + config.PORT);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst cors = require('cors');\nconst config = require('./src/config');\nconst routes = require('./src/routes');\n\nfunction setupExpressServer() {\n  const app = express();\n  app.use(cors());\n  app.use(express.json());\n  app.use('/api', routes);\n  app.use(express.static(config.staticDir));\n  app.listen(config.port, () => {\n    console.log(`Server running on port ${config.port}`);\n  });\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nconst fs = require('fs');\nconst crypto = require('crypto');\n\nclass TSClient {\n  constructor(query, cb) {\n    this.id = this._generateId(query);\n    this.search = this._loadSearchState() || { q: query, since_id: null, rcount: 0 };\n    this.new_since_id = null;\n    cb(this);\n  }\n\n  _generateId(query) {\n    return crypto.createHash('md5').update(query).digest('hex');\n  }\n\n  _loadSearchState() {\n    const filePath = this._getStateFilePath();\n    try {\n      const data = fs.readFileSync(filePath, 'utf8');\n      return JSON.parse(data);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  _getStateFilePath() {\n    return `./cache/${this.id}.json`;\n  }\n\n  set(search) {\n    this.search = search;\n    const filePath = this._getStateFilePath();\n    fs.writeFileSync(filePath, JSON.stringify(search));\n  }\n\n  syncSearch(callback) {\n    this._walker({\n      ts: this,\n      search: this.search,\n      cb: callback,\n      page: 1,\n      results: [],\n      new_since_id: null\n    });\n  }\n\n  _walker(s) {\n    const { ts, search, cb, page, results, new_since_id } = s;\n    ts._fetchTweets(search, page, (err, tweets) => {\n      if (err) {\n        return cb(err);\n      }\n      search.rcount += tweets.length;\n      let currentNewSinceId = new_since_id;\n      for (const tweet of tweets) {\n        results.push(tweet);\n        if (!currentNewSinceId || tweet.id > currentNewSinceId) {\n          currentNewSinceId = tweet.id;\n        }\n      }\n      s.new_since_id = currentNewSinceId;\n      if (tweets.length === 100) {\n        s.page += 1;\n        ts._walker(s);\n      } else {\n        search.since_id = currentNewSinceId;\n        ts.new_since_id = currentNewSinceId;\n        ts.set(search);\n        cb(null, results);\n      }\n    });\n  }\n\n  _fetchTweets(search, page, callback) {\n    const dummyData = [\n      { id: '12345', text: 'Sample tweet 1' },\n      { id: '67890', text: 'Sample tweet 2' }\n    ];\n    callback(null, dummyData);\n  }\n}\n```"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function createExpressServer() {\n  const express = require('express');\n  const path = require('path');\n  const app = express();\n  const port = process.env.PORT || 3000;\n\n  app.use(express.static(path.join(__dirname, '..')));\n  const routes = require('./routes');\n  app.use('/', routes);\n\n  const server = app.listen(port, () => {\n    console.log(`Server started on port ${port}`);\n  });\n\n  return server;\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a function that uploads a file to a server using HTTP POST request with streaming capability to handle large files efficiently.\n\nFunction Description: The function uploads a specified file to a server using Node.js's filesystem and HTTP modules. It streams the file content directly to the HTTP request using pipe(), avoiding loading the entire file into memory. The function sets appropriate headers including content-type (multipart/form-data) and content-length.\n\nInput:\n- FIXTURE: [String] - Path to the file to be uploaded\n- TEST_PORT: [Number] - Port number of the server to upload to\n- BOUNDARY: [String] - Boundary string for multipart form data\n\nOutput: None (The function makes an HTTP request but doesn't return any value. The actual upload result would be handled by the server's response, which isn't captured in this function.)",
    "Canonical_solution": "function uploadFile() {\n  const fs = require('fs');\n  const http = require('http');\n  \n  const stat = fs.statSync(FIXTURE);\n  const request = http.request({\n    port: TEST_PORT,\n    path: '/',\n    method: 'POST',\n    headers: {\n      'content-type': `multipart/form-data; boundary=${BOUNDARY}`,\n      'content-length': stat.size,\n    },\n  });\n  \n  fs.createReadStream(FIXTURE).pipe(request);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 99,
    "wrong_result": "const fs = require('fs');\nconst path = require('path');\nconst http = require('http');\n\nfunction uploadFile(FIXTURE, TEST_PORT, BOUNDARY) {\n  const fileName = path.basename(FIXTURE);\n  const stat = fs.statSync(FIXTURE);\n  const headersPart = `--${BOUNDARY}\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"${fileName}\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n`;\n  const closingBoundary = `\\r\\n--${BOUNDARY}--`;\n  const contentLength = Buffer.byteLength(headersPart, 'utf8') + stat.size + Buffer.byteLength(closingBoundary, 'utf8');\n\n  const options = {\n    hostname: 'localhost',\n    port: TEST_PORT,\n    path: '/',\n    method: 'POST',\n    headers: {\n      'Content-Type': `multipart/form-data; boundary=${BOUNDARY}`,\n      'Content-Length': contentLength\n    }\n  };\n\n  const req = http.request(options, (res) => {\n    res.resume();\n  });\n\n  req.on('error', (e) => {\n    console.error(e);\n  });\n\n  const fileStream = fs.createReadStream(FIXTURE);\n  req.write(headersPart);\n  fileStream.pipe(req, { end: false });\n  fileStream.on('end', () => {\n    req.write(closingBoundary);\n    req.end();\n  });\n  fileStream.on('error', (err) => {\n    req.destroy(err);\n  });\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Implement a function to upload a file to a server using HTTP POST request with streaming capability to handle large files efficiently.\n\nFunction Description: The function should create a readable stream from a specified file and pipe it directly to an HTTP POST request. This approach avoids loading the entire file into memory, making it suitable for large files. The function should set appropriate headers including content type (multipart/form-data) and content length.\n\nInput:\n- FIXTURE: [String] - Path to the file to be uploaded\n- TEST_PORT: [Number] - Port number of the server to upload to\n- BOUNDARY: [String] - Boundary string for multipart/form-data content type\n\nOutput: None (The function streams the file directly to the HTTP request without returning any value)",
    "Canonical_solution": "function uploadFile() {\n  var fs = require('fs'),\n      http = require('http'),\n      stat = fs.statSync(FIXTURE),\n      request = http.request({\n        port: TEST_PORT,\n        path: '/',\n        method: 'POST',\n        headers: {\n          'content-type': 'multipart/form-data; boundary='+BOUNDARY,\n          'content-length': stat.size,\n        },\n      });\n  fs.createReadStream(FIXTURE).pipe(request);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 99,
    "wrong_result": "const fs = require('fs');\nconst path = require('path');\nconst http = require('http');\nconst { PassThrough } = require('stream');\n\nfunction uploadFile() {\n  const filename = path.basename(FIXTURE);\n  const initialPart = `--${BOUNDARY}\\r\\n` +\n    `Content-Disposition: form-data; name=\"file\"; filename=\"${filename}\"\\r\\n` +\n    'Content-Type: application/octet-stream\\r\\n' +\n    '\\r\\n';\n  const stats = fs.statSync(FIXTURE);\n  const fileSize = stats.size;\n  const finalPart = `\\r\\n--${BOUNDARY}--`;\n  const initialPartBufferLength = Buffer.byteLength(initialPart);\n  const finalPartBufferLength = Buffer.byteLength(finalPart);\n  const totalContentLength = initialPartBufferLength + fileSize + finalPartBufferLength;\n\n  const options = {\n    hostname: 'localhost',\n    port: TEST_PORT,\n    path: '/upload',\n    method: 'POST',\n    headers: {\n      'Content-Type': `multipart/form-data; boundary=${BOUNDARY}`,\n      'Content-Length': totalContentLength\n    }\n  };\n\n  const req = http.request(options, (res) => {\n    res.resume();\n  });\n\n  req.on('error', (e) => {\n    console.error(`Request error: ${e.message}`);\n  });\n\n  const passThrough = new PassThrough();\n  passThrough.write(initialPart);\n\n  const fileStream = fs.createReadStream(FIXTURE);\n\n  fileStream.on('end', () => {\n    passThrough.write(finalPart);\n    passThrough.end();\n  });\n\n  fileStream.pipe(passThrough, { end: false });\n  passThrough.pipe(req);\n}\n\nuploadFile();"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a function that sends a file over HTTP using a readable stream and pipes it to an HTTP request.\n\nFunction Description: The function `sendFileViaHTTP` is designed to stream a file from the local filesystem and send it as binary data via an HTTP POST request. It uses Node.js's `fs` module to create a readable stream from the file and pipes this stream directly to an HTTP request created with the `http` module. This approach is efficient for handling large files as it avoids loading the entire file into memory.\n\nInput: \n- `testFilePath` (string): The path to the file to be sent. Defaults to a predefined path in the fixture directory.\n- `port` (number): The port number on which the HTTP server is listening. Defaults to a common port defined elsewhere in the code.\n\nOutput: None. The function sends the file via HTTP but does not return any value. The result of the HTTP request (success or failure) would typically be handled via event listeners on the request object, which are not shown in this basic example.",
    "Canonical_solution": "function sendFileViaHTTP() {\n    var fs = require('fs');\n    var http = require('http');\n    var path = require('path');\n    \n    var testFilePath = path.join(__dirname, '../fixture/file/binaryfile.tar.gz');\n    var port = common.port;\n\n    var request = http.request({\n        port: port,\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/octet-stream'\n        }\n    });\n\n    fs.createReadStream(testFilePath).pipe(request);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 99,
    "wrong_result": "function sendFileViaHTTP(testFilePath = './fixtures/testfile', port = 3000) {\n  const fs = require('fs');\n  const http = require('http');\n  const path = require('path');\n  const filePath = path.resolve(testFilePath);\n  fs.stat(filePath, (err, stats) => {\n    if (err) {\n      console.error('Error getting file stats:', err);\n      return;\n    }\n    const options = {\n      hostname: 'localhost',\n      port,\n      path: '/upload',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/octet-stream',\n        'Content-Length': stats.size\n      }\n    };\n    const req = http.request(options, (res) => {\n      res.on('data', (chunk) => process.stdout.write(chunk));\n      res.on('end', () => console.log('\\nUpload complete'));\n    });\n    req.on('error', (e) => console.error(`Request error: ${e.message}`));\n    fs.createReadStream(filePath).pipe(req);\n  });\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const options = {\n    url: 'https://httpbin.org/post',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'User-Agent': 'MyApp'\n    },\n    body: JSON.stringify({ key1: 'value1', key2: 'value2' })\n  };\n\n  request(options, function(error, response, body) {\n    if (error) {\n      console.error('Error:', error);\n    } else {\n      console.log('Response:', body);\n    }\n  });\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to generate PDFs from HTML templates and serve them as streams.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens on port 8080. It serves PDF files generated from an HTML template, replacing placeholders with actual image paths, and streams the PDF output to the client. The server handles incoming requests, checks for favicon requests, and responds with either a 404 error or the generated PDF.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 8080 and logs the server address to the console.)",
    "Canonical_solution": "function createServer() {\n    const fs = require('fs');\n    const http = require('http');\n    const pdf = require('../../');\n    const tmpl = fs.readFileSync(require.resolve('../businesscard/businesscard.html'), 'utf8');\n\n    const server = http.createServer(function (req, res) {\n        if (req.url === '/favicon.ico') return res.end('404');\n        const html = tmpl.replace('{{image}}', `file://${require.resolve('../businesscard/image.png')}`);\n        pdf.create(html, {width: '50mm', height: '90mm'}).toStream((err, stream) => {\n            if (err) return res.end(err.stack);\n            res.setHeader('Content-type', 'application/pdf');\n            stream.pipe(res);\n        });\n    });\n\n    server.listen(8080, function (err) {\n        if (err) throw err;\n        console.log('Listening on http://localhost:%s', server.address().port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst puppeteer = require('puppeteer');\n\nasync function createServer() {\n  const server = http.createServer(async (req, res) => {\n    if (req.url === '/favicon.ico') {\n      res.writeHead(404);\n      res.end();\n      return;\n    }\n\n    const templatePath = path.join(__dirname, 'templates', 'template.html');\n    let html = await fs.readFile(templatePath, 'utf8');\n    html = html.replace(/{{imagePath}}/g, '/public/images/logo.png');\n\n    const browser = await puppeteer.launch({ headless: true });\n    const page = await browser.newPage();\n    await page.setContent(html);\n    const pdfBuffer = await page.pdf({ format: 'A4' });\n    await browser.close();\n\n    res.writeHead(200, {\n      'Content-Type': 'application/pdf',\n      'Content-Disposition': 'inline; filename=document.pdf',\n    });\n    res.end(pdfBuffer);\n  });\n\n  server.listen(8080, () => {\n    console.log('Server running at http://localhost:8080');\n  });\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a JavaScript class that implements a server capable of handling HTTP requests and piping data to responses, with support for live reload functionality and error handling.\n\nClass Description: The `Server` class is designed to create an HTTP server that can handle incoming requests, pipe data to responses (particularly for live reload functionality), and manage server lifecycle events. It supports both standalone operation and integration with existing Express-like applications.\n\nAttributes:\n- options: [Object] - Configuration options for the server including livereload file path and port number.\n- clients: [Object] - Storage for connected clients (used for live reload functionality).\n- server: [http.Server] - The underlying HTTP server instance.\n- app: [Object] - Optional Express-like application instance for integration.\n- port: [Number] - The port number the server is listening on.\n\nMethods:\n- constructor(options) -> [Server] - Initializes the server with given options, setting defaults for livereload path and port.\n- configure(app) -> [Server] - Configures the server to work with an existing Express-like application.\n- handler(req, res, next) -> [Server] - Handles incoming HTTP requests, supporting both middleware and direct handling modes.\n- livereload(req, res) -> [void] - Pipes the livereload JavaScript file to the response.\n- listen(port, fn) -> [void] - Starts the server listening on the specified port.\n- close(req, res) -> [void] - Closes the server and optionally ends a response.\n- error(e) -> [void] - Handles and logs server errors.\n\nNote: The class demonstrates inter-process communication through HTTP and file system operations, particularly in the `livereload` method where it pipes file contents directly to HTTP responses.",
    "Canonical_solution": "var fs = require('fs');\nvar http = require('http');\n\nclass Server {\n  constructor(options) {\n    this.options = options || {};\n    this.options.livereload = this.options.livereload || path.join(__dirname, 'public/livereload.js');\n    this.options.port = parseInt(this.options.port || 35729, 10);\n    this.clients = {};\n    this.configure(this.options.app);\n  }\n\n  configure(app) {\n    if(!app) {\n      this.server = http.createServer(this.handler.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    var self = this;\n    this.app = app;\n\n    this.app.listen = function(port, done) {\n      done = done || function() {};\n      var srv = self.server = http.createServer(app);\n      srv.on('error', self.error.bind(self));\n      srv.on('close', self.close.bind(self));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler(req, res, next) {\n    var middleware = typeof next === 'function';\n    if(middleware) {\n      this.handle(req, res, next);\n      return this;\n    }\n\n    req\n      .on('end', this.handle.bind(this, req, res))\n      .on('data', function(chunk) {\n        req.data = req.data || '';\n        req.data += chunk;\n      });\n\n    return this;\n  }\n\n  livereload(req, res) {\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server.listen(port, fn);\n  }\n\n  close(req, res) {\n    if(res) res.end();\n    if(this.server._handle) this.server.close();\n  }\n\n  error(e) {\n    console.error('Error:', e.message);\n    console.error(e.stack);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "class Server {\n  constructor(options) {\n    this.options = {\n      livereloadPath: '/livereload.js',\n      livereloadFilePath: 'livereload.js',\n      port: 3000,\n      ...options\n    };\n    this.clients = {};\n    this.server = require('http').createServer((req, res) => {\n      this.handler(req, res);\n    });\n    this.server.on('error', this.error.bind(this));\n  }\n\n  configure(app) {\n    this.app = app;\n    this.server = require('http').createServer((req, res) => {\n      this.handler(req, res);\n    });\n    this.server.on('error', this.error.bind(this));\n  }\n\n  handler(req, res, next) {\n    if (req.url === this.options.livereloadPath) {\n      this.livereload(req, res);\n    } else if (this.app) {\n      this.app(req, res, next);\n    } else if (next) {\n      next();\n    } else {\n      res.writeHead(404);\n      res.end();\n    }\n  }\n\n  livereload(req, res) {\n    const fs = require('fs');\n    fs.readFile(this.options.livereloadFilePath, (err, data) => {\n      if (err) {\n        res.writeHead(404);\n        res.end('Not Found');\n        this.error(err);\n        return;\n      }\n      res.writeHead(200, { 'Content-Type': 'application/javascript' });\n      res.end(data);\n    });\n  }\n\n  listen(port, fn) {\n    this.port = port || this.options.port;\n    this.server.listen(this.port, () => {\n      if (fn) fn();\n    });\n  }\n\n  close(res) {\n    if (res) res.end();\n    this.server.close();\n  }\n\n  error(e) {\n    console.error('Server error:', e);\n    process.exit(1);\n  }\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nfunction createFileServer() {\n    const server = http.createServer(async (req, res) => {\n        const rootPath = path.resolve('static');\n        let filePath;\n\n        if (req.url === '/') {\n            filePath = path.join(rootPath, 'index.html');\n        } else {\n            const urlParts = req.url.split('/').filter(p => p !== '');\n            filePath = path.resolve(rootPath, ...urlParts);\n            if (filePath.indexOf(rootPath) !== 0) {\n                res.statusCode = 404;\n                res.end('Not found');\n                return;\n            }\n        }\n\n        try {\n            const stats = await fs.stat(filePath);\n            if (stats.isDirectory()) {\n                res.statusCode = 404;\n                res.end('Not found');\n                return;\n            }\n        } catch (err) {\n            res.statusCode = 404;\n            res.end('Not found');\n            return;\n        }\n\n        try {\n            const data = await fs.readFile(filePath);\n            res.writeHead(200, { 'Content-Type': getMimeType(filePath) });\n            res.end(data);\n        } catch (err) {\n            res.statusCode = 404;\n            res.end('Not found');\n        }\n    });\n\n    server.listen(1338);\n}\n\nfunction getMimeType(filePath) {\n    const ext = path.extname(filePath).toLowerCase();\n    switch (ext) {\n        case '.html': return 'text/html';\n        case '.css': return 'text/css';\n        case '.js': return 'application/javascript';\n        case '.json': return 'application/json';\n        case '.png': return 'image/png';\n        case '.jpg': return 'image/jpeg';\n        case '.jpeg': return 'image/jpeg';\n        case '.gif': return 'image/gif';\n        case '.svg': return 'image/svg+xml';\n        case '.wav': return 'audio/wav';\n        case '.mp3': return 'audio/mpeg';\n        case '.mp4': return 'video/mp4';\n        default: return 'application/octet-stream';\n    }\n}"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a TCP server using Node.js's built-in 'net' module to handle client connections, parse incoming JSON data streams, and manage server lifecycle events.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 9999. It handles client connections by piping incoming data through a JSON stream parser. The server closes after processing a specified number of data events or when the parser emits an 'end' event. The function demonstrates basic TCP server setup, client connection handling, and event-driven server management.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function does not return a value but creates a running TCP server instance)",
    "Canonical_solution": "function createTCPServer() {\n    var net = require('net');\n    var server = net.createServer(function(client) {\n        var parser = JSONStream.parse([]);\n        parser.on('end', function() {\n            console.log('close');\n            console.error('PASSED');\n            server.close();\n        });\n        client.pipe(parser);\n        var n = 4;\n        client.on('data', function() {\n            if(--n) return;\n            client.end();\n        });\n    });\n    server.listen(9999);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "function createTCPServer() {\n  const net = require('net');\n  const server = net.createServer();\n  server.listen(9999, () => {\n    console.log('Server listening on port 9999');\n  });\n\n  server.on('connection', (socket) => {\n    let dataBuffer = '';\n    let jsonDataCount = 0;\n\n    socket.on('data', (data) => {\n      dataBuffer += data.toString();\n      try {\n        const parsed = JSON.parse(dataBuffer);\n        if (Array.isArray(parsed)) {\n          jsonDataCount += parsed.length;\n        } else {\n          jsonDataCount++;\n        }\n        dataBuffer = '';\n      } catch (e) {\n        // Incomplete JSON, continue buffering\n      }\n    });\n\n    socket.on('end', () => {\n      try {\n        if (dataBuffer) {\n          JSON.parse(dataBuffer);\n        }\n      } catch (e) {\n        console.error('JSON parse error:', e);\n      } finally {\n        server.close();\n      }\n    });\n\n    socket.on('error', (err) => {\n      console.error('Socket error:', err);\n      server.close();\n    });\n  });\n\n  server.on('error', (err) => {\n    console.error('Server error:', err);\n  });\n\n  server.on('close', () => {\n    console.log('Server closed');\n  });\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n  constructor(did, finger, token, oaid) {\n    this.did = did;\n    this.finger = finger;\n    this.token = token;\n    this.oaid = oaid;\n  }\n\n  async taskRequest(method, url, body = '') {\n    const headers = new Headers();\n    headers.append('X-DID', this.did);\n    headers.append('X-Finger', this.finger);\n    headers.append('X-Token', this.token);\n    headers.append('X-OAID', this.oaid);\n\n    const timestamp = Date.now();\n    const stringToSign = `${method.toUpperCase()}${url}${this.did}${this.finger}${this.token}${this.oaid}${timestamp}`;\n    const signature = await this.generateSignature(stringToSign);\n    headers.append('X-Signature', signature);\n    headers.append('X-Timestamp', timestamp.toString());\n\n    if (method.toLowerCase() === 'post') {\n      headers.append('Content-Type', 'application/json');\n    }\n\n    const fetchOptions = {\n      method: method.toUpperCase(),\n      headers: headers,\n      body: method.toLowerCase() === 'post' ? body : undefined\n    };\n\n    try {\n      const response = await fetch(url, fetchOptions);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Request failed:', error);\n      throw error;\n    }\n  }\n\n  async generateSignature(input) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(input);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data in batches, and forwards each batch to an external service for processing.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 5000. When a client connects, it sets up a bidirectional communication channel where incoming data from the client is collected in batches (separated by '.'). Each complete batch is then sent to an external 'uppercase' service via a REQ socket. The server handles data streaming and batch processing efficiently.\n\nInput: None (The function takes no parameters; configuration is hardcoded)\n\nOutput: None (The function creates a server instance that runs indefinitely, listening for connections)\n\n---\n\nIf you'd prefer the class format (though the reference code is function-based):\n\nTask Description: Implement a TCP server class in Node.js that manages client connections and batch processing of incoming data.\n\nClass Description: The `TCPServer` class encapsulates a TCP server that listens for client connections, collects incoming data in batches, and forwards complete batches to an external service.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- port: [number] - The port number the server listens on (default: 5000)\n\nMethods:\n- constructor([port: number]) -> void - Initializes the server with optional port configuration\n- start() -> void - Starts the server and begins listening for connections\n- handleConnection(conn: net.Socket) -> void - Internal method to manage client connections and data processing\n- processBatch(batch: string[]) -> void - Sends a complete batch to the external service",
    "Canonical_solution": "function createTCPServer() {\n    var server = require('net').createServer();\n    server.on('connection', function(conn) {\n        conn.setEncoding('utf8');\n        \n        var req = context.socket('REQ');\n        req.setEncoding('utf8');\n        req.pipe(conn);\n        req.connect('uppercase');\n        \n        var batch = [];\n        var ask = function (q) {\n            req.write(q, 'utf8');\n        }\n        function readBatch() {\n            var msg; while (msg = conn.read()) {\n                msg.split('\\n').forEach(function(item) {\n                    if (item == '.') {\n                        console.log('Sending batch %s', batch);\n                        batch.forEach(ask);\n                        batch = [];\n                    }\n                    else if (item != '') {\n                        batch.push(item);\n                    }\n                });\n            }\n        }\n        conn.on('readable', readBatch);\n        readBatch();\n    });\n    server.listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "```javascript\nconst net = require('net');\nconst zmq = require('zmq');\n\nfunction createTCPServer() {\n  const server = net.createServer();\n\n  server.listen(5000, () => {\n    console.log('TCP server listening on port 5000');\n  });\n\n  server.on('connection', (conn) => {\n    const requester = zmq.socket('req');\n    requester.connect('tcp://localhost:5555');\n\n    let buffer = '';\n    let batchQueue = [];\n    let isRequestPending = false;\n\n    function processQueue() {\n      if (isRequestPending || batchQueue.length === 0) {\n        return;\n      }\n      const batch = batchQueue.shift();\n      requester.send(batch);\n      isRequestPending = true;\n    }\n\n    requester.on('message', (reply) => {\n      conn.write(reply.toString() + '\\n');\n      isRequestPending = false;\n      processQueue();\n    });\n\n    conn.on('data', (data) => {\n      buffer += data.toString();\n      const parts = buffer.split('.');\n      const batches = parts.slice(0, -1);\n      buffer = parts[parts.length - 1];\n\n      batchQueue.push(...batches);\n      processQueue();\n    });\n\n    conn.on('end', () => {\n      requester.close();\n    });\n  });\n}\n\nmodule.exports = createTCPServer;\n```"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Implement a POP3 server class in Node.js that handles secure and non-secure connections, manages client connections, and provides event-driven communication.\n\nClass Description: The POP3Server class extends EventEmitter to create a TCP server that can handle both regular and TLS-secured POP3 connections. It manages client connections and emits events for server lifecycle and errors.\n\nAttributes:\n- options: [Object] - Configuration options for the server including security settings\n- connections: [Set] - Tracks active client connections\n- server: [net.Server|tls.Server] - The underlying TCP/TLS server instance\n\nMethods:\n- constructor(options) -> [void] - Initializes the server with optional configuration\n- _setListeners() -> [void] - Sets up event listeners for the server\n- _onListening() -> [void] - Handles the 'listening' event\n- _onClose() -> [void] - Handles the 'close' event\n- _onError(err) -> [void] - Handles the 'error' event\n- connect(socket, socketOptions) -> [void] - Creates and manages a new client connection\n- listen(...args) -> [void] - Starts the server listening on specified port\n- close(callback) -> [void] - Stops the server and invokes callback when closed",
    "Canonical_solution": "const EventEmitter = require('events');\nconst net = require('net');\nconst tls = require('tls');\n\nclass POP3Server extends EventEmitter {\n    constructor(options) {\n        super();\n\n        this.options = options || {};\n        this.connections = new Set();\n\n        if (this.options.secure && !this.options.needsUpgrade) {\n            this.server = net.createServer(this.options, socket => {\n                this._handleProxy(socket, (err, socketOptions) => {\n                    if (err) {\n                        // ignore, should not happen\n                    }\n                    if (this.options.secured) {\n                        return this.connect(socket, socketOptions);\n                    }\n                    this._upgrade(socket, (err, tlsSocket) => {\n                        if (err) {\n                            return this._onError(err);\n                        }\n                        this.connect(tlsSocket, socketOptions);\n                    });\n                });\n            });\n        } else {\n            this.server = net.createServer(this.options, socket => {\n                this._handleProxy(socket, (err, socketOptions) => {\n                    if (err) {\n                        // ignore, should not happen\n                    }\n                    this.connect(socket, socketOptions);\n                });\n            });\n        }\n\n        this._setListeners();\n    }\n\n    _setListeners() {\n        this.server.on('listening', () => this._onListening());\n        this.server.on('close', () => this._onClose());\n        this.server.on('error', err => this._onError(err));\n    }\n\n    _onListening() {\n        let address = this.server.address();\n        this.emit('listening');\n    }\n\n    _onClose() {\n        this.emit('close');\n    }\n\n    _onError(err) {\n        this.emit('error', err);\n    }\n\n    connect(socket, socketOptions) {\n        let connection = new POP3Connection(this, socket, socketOptions);\n        this.connections.add(connection);\n        connection.once('error', err => {\n            this.connections.delete(connection);\n            this._onError(err);\n        });\n        connection.once('close', () => {\n            this.connections.delete(connection);\n        });\n        connection.init();\n    }\n\n    listen(...args) {\n        this.server.listen(...args);\n    }\n\n    close(callback) {\n        this.server.close(() => {\n            if (typeof callback === 'function') {\n                return callback();\n            }\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst tls = require('tls');\nconst { EventEmitter } = require('events');\n\nclass POP3Server extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    this.connections = new Set();\n    this.server = options.secure ? new tls.Server(options) : new net.Server();\n    this._setListeners();\n  }\n\n  _setListeners() {\n    this.server.on('listening', this._onListening.bind(this));\n    this.server.on('close', this._onClose.bind(this));\n    this.server.on('error', this._onError.bind(this));\n    this.server.on('connection', (socket) => this.connect(socket, {}));\n  }\n\n  _onListening() {\n    this.emit('listening');\n  }\n\n  _onClose() {\n    this.emit('close');\n  }\n\n  _onError(err) {\n    this.emit('error', err);\n  }\n\n  connect(socket, socketOptions) {\n    this.connections.add(socket);\n    socket.on('close', () => {\n      this.connections.delete(socket);\n    });\n  }\n\n  listen(...args) {\n    this.server.listen(...args);\n  }\n\n  close(callback) {\n    this.server.close(callback);\n  }\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a TCP server class in JavaScript using Node.js's 'net' module to handle client connections, manage sockets, and provide event-driven communication.\n\nClass Description: The Socket class represents a TCP server that can bind to a specific port/host, manage client connections, handle socket errors, and emit events for various connection states. It extends EventEmitter for event handling capabilities.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- socks: [Array] - Array of connected client sockets\n- settings: [Object] - Configuration settings for the server\n- type: [String] - Indicates whether the instance is acting as a server or client\n\nMethods:\n- constructor() -> [void] - Initializes the socket instance with default settings\n- bind(port, host, fn) -> [Socket] - Binds the server to a specified port and host (supports both TCP and Unix sockets)\n- onconnect(sock) -> [void] - Handles new client connections\n- addSocket(sock) -> [void] - Adds a new socket to the connection pool and sets up message parsing\n- removeSocket(sock) -> [void] - Removes a socket from the connection pool\n- handleErrors(sock) -> [void] - Sets up error handling for a socket\n- closeServer(fn) -> [void] - Closes the server and all client connections",
    "Canonical_solution": "var Emitter = require('events').EventEmitter;\nvar net = require('net');\nvar debug = require('debug')('axon:sock');\n\nclass Socket {\n  constructor() {\n    this.server = null;\n    this.socks = [];\n    this.settings = {};\n    this.set('hwm', Infinity);\n    this.set('identity', String(process.pid));\n    this.set('retry timeout', 100);\n    this.set('retry max timeout', 5000);\n  }\n\n  bind(port, host, fn) {\n    var self = this;\n    if ('client' == this.type) throw new Error('cannot bind() after connect()');\n    if ('function' == typeof host) {\n      fn = host;\n      host = undefined;\n    }\n\n    var unixSocket = false;\n\n    if ('string' == typeof port) {\n      port = url.parse(port);\n\n      if ('unix:' == port.protocol) {\n        host = fn;\n        fn = undefined;\n        port = port.pathname;\n        unixSocket = true;\n      } else {\n        host = port.hostname || '0.0.0.0';\n        port = parseInt(port.port, 10);\n      }\n    } else {\n      host = host || '0.0.0.0';\n    }\n\n    this.type = 'server';\n\n    this.server = net.createServer(this.onconnect.bind(this));\n\n    debug('%s bind %s:%s', this.type, host, port);\n    this.server.on('listening', this.emit.bind(this, 'bind'));\n\n    if (unixSocket) {\n      this.server.on('error', function(e) {\n        if (e.code == 'EADDRINUSE') {\n          var clientSocket = new net.Socket();\n\n          clientSocket.on('error', function(e2) {\n            if (e2.code == 'ECONNREFUSED') {\n              fs.unlink(port);\n              self.server.listen(port, host, fn);\n            }\n          });\n\n          clientSocket.connect({path: port}, function() {\n            throw e;\n          });\n        }\n      });\n    }\n\n    this.server.listen(port, host, fn);\n    return this;\n  }\n\n  onconnect(sock) {\n    var self = this;\n    var addr = sock.remoteAddress + ':' + sock.remotePort;\n    debug('%s accept %s', self.type, addr);\n    this.addSocket(sock);\n    this.handleErrors(sock);\n    this.emit('connect', sock);\n    sock.on('close', function() {\n      debug('%s disconnect %s', self.type, addr);\n      self.emit('disconnect', sock);\n      self.removeSocket(sock);\n    });\n  }\n\n  addSocket(sock) {\n    var parser = new Parser;\n    var i = this.socks.push(sock) - 1;\n    debug('%s add socket %d', this.type, i);\n    sock.pipe(parser);\n    parser.on('data', this.onmessage(sock));\n  }\n\n  removeSocket(sock) {\n    var i = this.socks.indexOf(sock);\n    if (!~i) return;\n    debug('%s remove socket %d', this.type, i);\n    this.socks.splice(i, 1);\n  }\n\n  handleErrors(sock) {\n    var self = this;\n    sock.on('error', function(err) {\n      debug('%s error %s', self.type, err.code || err.message);\n      self.emit('socket error', err);\n      self.removeSocket(sock);\n      if (!~ignore.indexOf(err.code)) return self.emit('error', err);\n      debug('%s ignored %s', self.type, err.code);\n      self.emit('ignored error', err);\n    });\n  }\n\n  closeServer(fn) {\n    debug('%s closing server', this.type);\n    this.server.on('close', this.emit.bind(this, 'close'));\n    this.server.close();\n    fn && fn();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass Socket extends EventEmitter {\n  constructor() {\n    super();\n    this.server = net.createServer();\n    this.socks = [];\n    this.settings = { type: 'server' };\n    this.server.on('connection', (sock) => this.onconnect(sock));\n  }\n\n  bind(port, host, fn) {\n    if (host) {\n      this.server.listen(port, host, () => {\n        if (fn) fn();\n      });\n    } else {\n      this.server.listen(port, () => {\n        if (fn) fn();\n      });\n    }\n    return this;\n  }\n\n  onconnect(sock) {\n    this.addSocket(sock);\n  }\n\n  addSocket(sock) {\n    this.socks.push(sock);\n    sock.buffer = Buffer.alloc(0);\n    sock.on('data', (data) => {\n      sock.buffer = sock.buffer.concat(data);\n      let end;\n      while ((end = sock.buffer.indexOf('\\n')) !== -1) {\n        const message = sock.buffer.slice(0, end).toString();\n        sock.buffer = sock.buffer.slice(end + 1);\n        this.emit('message', message, sock);\n      }\n    });\n    sock.on('end', () => {\n      this.removeSocket(sock);\n    });\n    sock.on('close', () => {\n      this.removeSocket(sock);\n    });\n    this.handleErrors(sock);\n  }\n\n  removeSocket(sock) {\n    const index = this.socks.indexOf(sock);\n    if (index !== -1) {\n      this.socks.splice(index, 1);\n    }\n    this.emit('disconnect', sock);\n  }\n\n  handleErrors(sock) {\n    sock.on('error', (err) => {\n      this.emit('error', err, sock);\n    });\n  }\n\n  closeServer(fn) {\n    this.socks.forEach((sock) => {\n      sock.destroy();\n    });\n    this.server.close(() => {\n      if (fn) fn();\n    });\n  }\n}\n\nmodule.exports = Socket;"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n  static async getWallpaper(unsplashClientId?: string): Promise<{ type: string; data: any }> {\n    if (unsplashClientId) {\n      try {\n        const response = await fetch('https://api.unsplash.com/photos/random', {\n          headers: { 'Authorization': `Client-ID ${unsplashClientId}` }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          return { type: 'unsplash', data };\n        }\n      } catch (e) {\n        // Continue to Bing\n      }\n    }\n\n    try {\n      const response = await fetch('https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1');\n      if (response.ok) {\n        const data = await response.json();\n        const image = data.images[0];\n        image.url = 'https://www.bing.com' + image.url;\n        return { type: 'bing', data: image };\n      }\n    } catch (e) {\n      // Return fallback\n    }\n\n    return {\n      type: 'bing',\n      data: {\n        url: 'https://example.com/fallback.jpg'\n      }\n    };\n  }\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a function that establishes a TCP server which listens for specific termination codes from clients and responds with a predefined byte sequence before shutting down.\n\nFunction Description: The function `makeTerminatingBackend` creates a TCP server that listens for incoming connections. When a client sends data containing specific termination codes (80877103 or 80877104), the server responds with a predefined byte sequence and then closes the connection. The server automatically selects an available port and returns it for external use.\n\nInput: \n- `byte` [String] - The UTF-8 encoded byte sequence to send as a response when a termination code is received.\n\nOutput:\n- `port` [Number] - The port number on which the TCP server is listening. This is dynamically assigned by the system.",
    "Canonical_solution": "function makeTerminatingBackend(byte) {\n  const { createServer } = require('net');\n\n  const server = createServer((socket) => {\n    socket.on('data', (buff) => {\n      const code = buff.readInt32BE(4);\n      if (code === 80877103 || code === 80877104) {\n        const packet = Buffer.from(byte, 'utf-8');\n        socket.write(packet);\n      }\n    });\n    socket.on('close', () => {\n      server.close();\n    });\n  });\n\n  server.listen();\n  const { port } = server.address();\n  return port;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "```javascript\nasync function makeTerminatingBackend(byte) {\n    const net = require('net');\n    return new Promise((resolve, reject) => {\n        const server = net.createServer();\n        server.listen(0, () => {\n            const port = server.address().port;\n            resolve(port);\n        });\n        server.on('connection', (socket) => {\n            let data = '';\n            socket.setEncoding('utf8');\n            socket.on('data', (chunk) => {\n                data += chunk;\n            });\n            socket.on('end', () => {\n                const code = Number(data.trim());\n                if (code === 80877103 || code === 80877104) {\n                    const responseBuffer = Buffer.from(byte, 'utf8');\n                    socket.write(responseBuffer);\n                    socket.end();\n                }\n            });\n            socket.on('error', (err) => reject(err));\n        });\n        server.on('error', (err) => reject(err));\n    });\n}\n```"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass HTTPClient {\n  constructor(headers) {\n    this.headers = headers;\n  }\n\n  async get(url, params = {}) {\n    try {\n      const response = await axios.get(url, {\n        headers: this.headers,\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  async post(url, data = {}, params = {}) {\n    try {\n      const response = await axios.post(url, data, {\n        headers: this.headers,\n        params\n      });\n      return response.data;\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  handleError(error) {\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        throw new Error(`Server responded with ${error.response.status}: ${error.response.data.message || error.response.statusText}`);\n      } else if (error.request) {\n        throw new Error('No response received from the server');\n      } else {\n        throw new Error(`Request error: ${error.message}`);\n      }\n    } else {\n      throw new Error(`An unexpected error occurred: ${error.message}`);\n    }\n  }\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome DevTools Protocol, handling connection, message exchange, and disconnection events.\n\nClass Description: The Chrome class is an EventEmitter that establishes and manages a WebSocket connection to Chrome's DevTools Protocol. It handles message parsing, error handling, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The WebSocket instance\n- _notifier: [EventEmitter] - External event notifier\n- _callbacks: [Object] - Stores pending command callbacks\n- _nextCommandId: [Number] - Tracks the next command ID\n\nMethods:\n- constructor(options, notifier) -> [void] - Initializes the Chrome instance with connection options and notifier\n- _start() -> [Promise] - Internal method to initiate WebSocket connection\n- _connectToWebSocket() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleConnectionClose() -> [void] - Cleans up when connection closes\n- _handleMessage(message) -> [void] - Processes incoming WebSocket messages\n- send(method, params, sessionId, callback) -> [Promise|void] - Sends a command to Chrome DevTools Protocol\n- _enqueueCommand(method, params, sessionId, callback) -> [void] - Internal method to queue commands\n- close(callback) -> [Promise|void] - Closes the WebSocket connection cleanly",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this.webSocketUrl = undefined;\n        this._ws = null;\n        this._notifier = notifier;\n        this._start();\n    }\n\n    async _start() {\n        try {\n            await this._connectToWebSocket();\n            process.nextTick(() => {\n                this._notifier.emit('connect', this);\n            });\n        } catch (err) {\n            this._notifier.emit('error', err);\n        }\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleConnectionClose() {\n        this._callbacks = {};\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n\n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    close(callback) {\n        const closeWebSocket = (callback) => {\n            if (this._ws.readyState === 3) {\n                callback();\n            } else {\n                this._ws.removeAllListeners('close');\n                this._ws.once('close', () => {\n                    this._ws.removeAllListeners();\n                    this._handleConnectionClose();\n                    callback();\n                });\n                this._ws.close();\n            }\n        };\n        if (typeof callback === 'function') {\n            closeWebSocket(callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                closeWebSocket(fulfill);\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends require('events') {\n  constructor(options, notifier) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this.webSocketUrl = options.webSocketUrl || `${this.secure ? 'wss' : 'ws'}://${this.host}:${this.port}`;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n    this._ws = null;\n  }\n\n  async _start() {\n    await this._connectToWebSocket();\n  }\n\n  async _connectToWebSocket() {\n    return new Promise((resolve, reject) => {\n      this._ws = new WebSocket(this.webSocketUrl);\n      this._ws.onopen = () => resolve();\n      this._ws.onmessage = (event) => this._handleMessage(event.data);\n      this._ws.onerror = (error) => {\n        reject(error);\n        this.emit('error', error);\n      };\n      this._ws.onclose = () => {\n        this._handleConnectionClose();\n      };\n    });\n  }\n\n  _handleConnectionClose() {\n    this._ws = null;\n    this.emit('close');\n  }\n\n  _handleMessage(message) {\n    try {\n      const data = JSON.parse(message);\n      if (data.id !== undefined) {\n        const callback = this._callbacks[data.id];\n        if (callback) {\n          delete this._callbacks[data.id];\n          callback(null, data);\n        }\n      } else {\n        this._notifier.emit(data.method, data);\n      }\n    } catch (e) {\n      this.emit('error', e);\n    }\n  }\n\n  send(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    const commandPromise = new Promise((resolve, reject) => {\n      this._callbacks[id] = (err, result) => {\n        if (err) reject(err);\n        else resolve(result);\n      };\n    });\n    this._enqueueCommand(method, params, sessionId, id);\n    if (callback) {\n      this._callbacks[id] = callback;\n    } else {\n      return commandPromise;\n    }\n  }\n\n  _enqueueCommand(method, params, sessionId, id) {\n    const message = {\n      id,\n      method,\n      params\n    };\n    if (sessionId) {\n      message.sessionId = sessionId;\n    }\n    this._ws.send(JSON.stringify(message));\n  }\n\n  close(callback) {\n    if (this._ws) {\n      this._ws.close();\n    }\n    if (callback) {\n      callback();\n    }\n    return Promise.resolve();\n  }\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a WebSocket-based OrderBook class for managing real-time order book data from a cryptocurrency exchange, with connection management and state handling capabilities.\n\nClass Description: The OrderBook class maintains a real-time order book for a specified trading pair by connecting to a WebSocket feed. It handles connection states, processes incoming messages, and provides event-driven updates. The class inherits from EventEmitter to notify consumers of state changes and order book updates.\n\nAttributes:\n- productID: string - The trading pair identifier (e.g., 'BTC-USD')\n- websocketURI: string - The WebSocket endpoint URL for real-time data\n- restURI: string - The REST API endpoint URL for initial snapshot\n- state: string - Current connection/processing state (from STATES enum)\n- fail_count: number - Count of consecutive connection failures\n- timeProvider: any - Service for timestamp generation\n- socket: WebSocket - The active WebSocket connection instance\n- queue: Array - Buffer for messages received during synchronization\n- book: object - The current order book state with sequence, bids, and asks\n\nMethods:\n- constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) -> OrderBook - Initializes the order book with configuration and starts connection\n- clear_book() -> void - Resets the order book and message queue\n- connect() -> void - Establishes new WebSocket connection with event handlers\n- disconnect() -> void - Closes active WebSocket connection\n- changeState(stateName: string) -> void - Updates state machine and handles transitions (emits statechange event)\n- onOpen() -> void - Handles WebSocket open event (starts synchronization)\n- onClose() -> void - Handles WebSocket close event (updates state)\n- onMessage(datastr: string) -> void - Processes incoming WebSocket messages\n- sync() -> void - Sends subscription message and loads initial snapshot\n- processMessage(message: object, t: Date) -> void - Validates and processes order book updates (emits message-type events)",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nclass OrderBook {\n    constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) {\n        var self = this;\n        EventEmitter.call(self);\n\n        self.productID = productID || 'BTC-USD';\n        self.websocketURI = websocketURI || 'wss://ws-feed.exchange.coinbase.com';\n        self.restURI = restURI;\n        self.state = self.STATES.closed;\n        self.fail_count = 0;\n        self.timeProvider = timeProvider;\n        self.connect();\n    }\n\n    STATES = {\n        'closed': 'closed',\n        'open': 'open',\n        'syncing': 'syncing',\n        'processing': 'processing',\n        'error': 'error',\n    };\n\n    clear_book() {\n        var self = this;\n        self.queue = [];\n        self.book = {\n            'sequence': -1,\n            'bids': {},\n            'asks': {},\n        };\n    };\n\n    connect() {\n        var self = this;\n        if (self.socket) {\n            self.socket.close();\n        }\n        self.clear_book();\n        self.socket = new WebSocket(self.websocketURI);\n        self.socket.on('message', self.onMessage.bind(self));\n        self.socket.on('open', self.onOpen.bind(self));\n        self.socket.on('close', self.onClose.bind(self));\n    };\n\n    disconnect() {\n        var self = this;\n        if (!self.socket) {\n            throw \"Could not disconnect (not connected)\"\n        }\n        self.socket.close();\n        self.onClose();\n    };\n\n    changeState(stateName) {\n        var self = this;\n        var newState = self.STATES[stateName];\n        if (newState === undefined) {\n            throw \"Unrecognized state: \" + stateName;\n        }\n        var oldState = self.state;\n        self.state = newState;\n\n        if (self.fail_count > 3)\n            throw \"Tried to reconnect 4 times. Giving up.\";\n\n        if (self.state === self.STATES.error || self.state === self.STATES.closed) {\n            self.fail_count += 1;\n            self.socket.close();\n            setTimeout(() => self.connect(), 5000);\n        }\n        else if (self.state === self.STATES.processing) {\n            self.fail_count = 0;\n        }\n\n        self.emit('statechange', { 'old': oldState, 'new': newState });\n    };\n\n    onOpen() {\n        var self = this;\n        self.changeState(self.STATES.open);\n        self.sync();\n    };\n\n    onClose() {\n        var self = this;\n        self.changeState(self.STATES.closed);\n    };\n\n    onMessage(datastr: string) {\n        var self = this;\n        var t = self.timeProvider.utcNow();\n        var data = JSON.parse(datastr);\n        if (self.state !== self.STATES.processing) {\n            self.queue.push(data);\n        } else {\n            self.processMessage(data, t);\n        }\n    };\n\n    sync() {\n        var self = this;\n        self.changeState(self.STATES.syncing);\n        var subscribeMessage = {\n            'type': 'subscribe',\n            'product_id': self.productID,\n        };\n        self.socket.send(JSON.stringify(subscribeMessage));\n        self.loadSnapshot();\n    };\n\n    processMessage(message, t: Date) {\n        var self = this;\n        if (message.sequence <= self.book.sequence) {\n            self.emit('ignored', message);\n            return;\n        }\n        if (message.sequence != self.book.sequence + 1) {\n            self.changeState(self.STATES.error);\n        }\n        self.book.sequence = message.sequence;\n\n        self.emit(message.type, new Models.Timestamped(message, t));\n    };\n}\n\nutil.inherits(OrderBook, EventEmitter);",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "```javascript\nconst { EventEmitter } = require('events');\n\nclass OrderBook extends EventEmitter {\n  static STATES = {\n    CONNECTING: 'connecting',\n    CONNECTED: 'connected',\n    SYNCHRONIZING: 'synchronizing',\n    READY: 'ready',\n    ERROR: 'error',\n    DISCONNECTED: 'disconnected'\n  };\n\n  constructor(productID, websocketURI, restURI, timeProvider) {\n    super();\n    this.productID = productID;\n    this.websocketURI = websocketURI;\n    this.restURI = restURI;\n    this.timeProvider = timeProvider;\n    this.state = OrderBook.STATES.CONNECTING;\n    this.fail_count = 0;\n    this.socket = null;\n    this.queue = [];\n    this.book = {\n      sequence: 0,\n      bids: new Map(),\n      asks: new Map()\n    };\n    this.connect();\n  }\n\n  clear_book() {\n    this.book = {\n      sequence: 0,\n      bids: new Map(),\n      asks: new Map()\n    };\n    this.queue = [];\n  }\n\n  connect() {\n    this.socket = new WebSocket(this.websocketURI);\n    this.socket.onopen = () => this.onOpen();\n    this.socket.onclose = () => this.onClose();\n    this.socket.onmessage = (event) => this.onMessage(event.data);\n    this.socket.onerror = (error) => {\n      this.fail_count++;\n      this.changeState(OrderBook.STATES.ERROR);\n      this.emit('error', error);\n    };\n  }\n\n  disconnect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.close();\n    }\n  }\n\n  changeState(stateName) {\n    if (!(stateName in OrderBook.STATES)) return;\n    this.state = stateName;\n    this.emit('statechange', this.state);\n  }\n\n  onOpen() {\n    this.changeState(OrderBook.STATES.CONNECTED);\n    this.sync();\n  }\n\n  onClose() {\n    this.changeState(OrderBook.STATES.DISCONNECTED);\n  }\n\n  onMessage(datastr) {\n    try {\n      const message = JSON.parse(datastr);\n      if (this.state === OrderBook.STATES.SYNCHRONIZING) {\n        this.queue.push(message);\n      } else if (this.state === OrderBook.STATES.READY) {\n        this.processMessage(message, this.timeProvider());\n      }\n    } catch (e) {\n      this.emit('error', e);\n    }\n  }\n\n  async sync() {\n    this.changeState(OrderBook.STATES.SYNCHRONIZING);\n    this.socket.send(JSON.stringify({\n      type: 'subscribe',\n      product_id: this.productID\n    }));\n    try {\n      const response = await fetch(`${this.restURI}?product_id=${this.productID}`);\n      const snapshot = await response.json();\n      this.processMessage(snapshot, this.timeProvider());\n      this.changeState(OrderBook.STATES.READY);\n      this.queue.forEach(msg => this.processMessage(msg, this.timeProvider()));\n      this.queue = [];\n    } catch (e) {\n      this.fail_count++;\n      this.changeState(OrderBook.STATES.ERROR);\n      this.emit('error', e);\n    }\n  }\n\n  processMessage(message, t) {\n    if (message.type === 'snapshot') {\n      this.book.sequence = message.sequence;\n      this.book.bids.clear();\n      this.book.asks.clear();\n      for (const [price, size] of Object.entries(message.bids)) {\n        if (size > 0) this.book.bids.set(price, size);\n        else this.book.bids.delete(price);\n      }\n      for (const [price, size] of Object.entries(message.asks)) {\n        if (size > 0) this.book.asks.set(price, size);\n        else this.book.asks.delete(price);\n      }\n      this.emit('snapshot', this.book, t);\n    } else if (message.type === 'l2update') {\n      if (message.sequence <= this.book.sequence) return;\n      this.book.sequence = message.sequence;\n      if (message.side === 'buy') {\n        if (message.size === 0) this.book.bids.delete(message.price);\n        else this.book.bids.set(message.price, message.size);\n      } else if (message.side === 'sell') {\n        if (message.size === 0) this.book.asks.delete(message.price);\n        else this.book.asks.set(message.price, message.size);\n      }\n      this.emit('update', this.book, t);\n    }\n  }\n}\n```"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.onmessage = this._messageListener;\n  }\n\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.onmessage = null;\n    this._handler = null;\n  }\n\n  _messageReceived(event) {\n    const data = event.data;\n    if (this._handler && this._handler.onMessage) {\n      this._handler.onMessage(data);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._frontend = frontend;\n    this._connected = new Set();\n    this._pipe = '';\n  }\n\n  async _startSession(info, frontend) {\n    const { id: sessionId, url } = info;\n    const ws = new WebSocket(url);\n    const channel = new Channel(ws);\n\n    channel.listen({\n      onMessage: (data) => {\n        frontend.onMessage(sessionId, data);\n      }\n    });\n\n    ws.addEventListener('open', () => this._connected.add(sessionId));\n    ws.addEventListener('close', () => this._connected.delete(sessionId));\n\n    return async () => {\n      channel.dispose();\n      ws.close();\n      this._connected.delete(sessionId);\n    };\n  }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a JavaScript class for interacting with the Cryptsy cryptocurrency exchange API, handling both public and private endpoints with proper authentication and request management.\n\nClass Description: The Cryptsy class provides a wrapper for the Cryptsy API, enabling users to make authenticated requests to private endpoints and public data requests. It handles API authentication, request signing, and response processing.\n\nAttributes:\n- key: string - API key for authentication\n- secret: string - API secret for request signing\n- PUBLIC_API_URL: string - Base URL for public API endpoints (default: 'http://pubapi.cryptsy.com/api.php')\n- PRIVATE_API_URL: string - Base URL for private API endpoints (default: 'https://api.cryptsy.com/api')\n- USER_AGENT: string - User agent string for requests (default: 'nomp/node-open-mining-portal')\n- STRICT_SSL: boolean - Static flag for SSL verification (default: true)\n\nMethods:\n- constructor(key, secret) -> Cryptsy - Initializes the API client with credentials\n- _getPrivateHeaders(parameters: object) -> object - Generates authentication headers for private requests\n- _request(options: object, callback: function) -> Cryptsy - Base request method with common configuration\n- _public(parameters: object, callback: function) -> Cryptsy - Makes public API requests\n- _private(parameters: object, callback: function) -> Cryptsy - Makes authenticated private API requests\n- getTicker(callback: function) -> Cryptsy - Gets market ticker data\n- getOrderBook(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets order book for a currency pair\n- getTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets public trade history\n- myBalances(callback: function) -> Cryptsy - Gets user's account balances\n- myOpenOrders(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's open orders\n- myTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's trade history\n- buy(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a buy order\n- sell(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a sell order\n- cancelOrder(currencyA: string, currencyB: string, orderNumber: string, callback: function) -> Cryptsy - Cancels an order\n- withdraw(currency: string, amount: number, address: string, callback: function) -> Cryptsy - Withdraws funds\n- _joinCurrencies(currencyA: string, currencyB: string) -> string - Helper to format currency pairs",
    "Canonical_solution": "var request = require('request');\nvar nonce = require('nonce');\nvar crypto = require('crypto');\n\nclass Cryptsy {\n    constructor(key, secret) {\n        this.key = key;\n        this.secret = secret;\n        this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n        this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n        this.USER_AGENT = 'nomp/node-open-mining-portal';\n    }\n\n    static STRICT_SSL = true;\n\n    _getPrivateHeaders(parameters) {\n        if (!this.key || !this.secret) {\n            throw 'Cryptsy: Error. API key and secret required';\n        }\n\n        let paramString = Object.keys(parameters).sort().map(function(param) {\n            return encodeURIComponent(param) + '=' + encodeURIComponent(parameters[param]);\n        }).join('&');\n\n        let signature = crypto.createHmac('sha512', this.secret).update(paramString).digest('hex');\n\n        return {\n            Key: this.key,\n            Sign: signature\n        };\n    }\n\n    _request(options, callback) {\n        if (!('headers' in options)) {\n            options.headers = {};\n        }\n\n        options.headers['User-Agent'] = this.USER_AGENT;\n        options.json = true;\n        options.strictSSL = Cryptsy.STRICT_SSL;\n\n        request(options, function(err, response, body) {\n            callback(err, body);\n        });\n\n        return this;\n    }\n\n    _public(parameters, callback) {\n        let options = {\n            method: 'GET',\n            url: this.PUBLIC_API_URL,\n            qs: parameters\n        };\n\n        return this._request(options, callback);\n    }\n\n    _private(parameters, callback) {\n        parameters.nonce = nonce();\n        let options = {\n            method: 'POST',\n            url: this.PRIVATE_API_URL,\n            form: parameters,\n            headers: this._getPrivateHeaders(parameters)\n        };\n\n        return this._request(options, callback);\n    }\n\n    getTicker(callback) {\n        let parameters = {\n            method: 'marketdatav2'\n        };\n        return this._public(parameters, callback);\n    }\n\n    getOrderBook(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOrderBook',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    getTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    myBalances(callback) {\n        let parameters = {\n            command: 'returnBalances'\n        };\n        return this._private(parameters, callback);\n    }\n\n    myOpenOrders(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOpenOrders',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    myTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    buy(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'buy',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    sell(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'sell',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    cancelOrder(currencyA, currencyB, orderNumber, callback) {\n        let parameters = {\n            command: 'cancelOrder',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            orderNumber: orderNumber\n        };\n        return this._private(parameters, callback);\n    }\n\n    withdraw(currency, amount, address, callback) {\n        let parameters = {\n            command: 'withdraw',\n            currency: currency,\n            amount: amount,\n            address: address\n        };\n        return this._private(parameters, callback);\n    }\n\n    _joinCurrencies(currencyA, currencyB) {\n        return currencyA + '_' + currencyB;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nconst crypto = require('crypto');\n\nclass Cryptsy {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n    this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n    this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n    this.USER_AGENT = 'nomp/node-open-mining-portal';\n    this.STRICT_SSL = true;\n  }\n\n  _getPrivateHeaders(parameters) {\n    const nonce = Date.now();\n    parameters.nonce = nonce;\n    const payload = JSON.stringify(parameters);\n    const hmac = crypto.createHmac('sha256', Buffer.from(this.secret, 'base64'));\n    const signature = hmac.update(payload).digest('hex');\n    return {\n      'Key': this.key,\n      'Sign': signature,\n      'Content-Type': 'application/json',\n      'User-Agent': this.USER_AGENT\n    };\n  }\n\n  _request(options, callback) {\n    const { method, url, headers, body } = options;\n    fetch(url, {\n      method: method,\n      headers: headers || {},\n      body: body || undefined\n    })\n      .then(response => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      })\n      .then(data => callback(null, data))\n      .catch(error => callback(error, null));\n  }\n\n  _public(parameters, callback) {\n    const url = new URL(this.PUBLIC_API_URL);\n    const searchParams = new URLSearchParams(parameters);\n    url.search = searchParams;\n    this._request({ method: 'GET', url: url.toString() }, callback);\n  }\n\n  _private(parameters, callback) {\n    const opts = {\n      method: 'POST',\n      url: this.PRIVATE_API_URL,\n      headers: this._getPrivateHeaders(parameters),\n      body: JSON.stringify(parameters)\n    };\n    this._request(opts, callback);\n  }\n\n  getTicker(callback) {\n    this._public({ method: 'getmarkets' }, callback);\n  }\n\n  getOrderBook(currencyA, currencyB, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._public({ method: 'getorderdata', market }, callback);\n  }\n\n  getTradeHistory(currencyA, currencyB, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._public({ method: 'getmarkethistory', market }, callback);\n  }\n\n  myBalances(callback) {\n    this._private({ method: 'mybalances' }, callback);\n  }\n\n  myOpenOrders(currencyA, currencyB, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._private({ method: 'myopenorders', market }, callback);\n  }\n\n  myTradeHistory(currencyA, currencyB, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._private({ method: 'mytrades', market }, callback);\n  }\n\n  buy(currencyA, currencyB, rate, amount, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._private({\n      method: 'buylimit',\n      market,\n      quantity: amount,\n      price: rate\n    }, callback);\n  }\n\n  sell(currencyA, currencyB, rate, amount, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._private({\n      method: 'selllimit',\n      market,\n      quantity: amount,\n      price: rate\n    }, callback);\n  }\n\n  cancelOrder(currencyA, currencyB, orderNumber, callback) {\n    const market = this._joinCurrencies(currencyA, currencyB);\n    this._private({\n      method: 'cancelorder',\n      market,\n      orderid: orderNumber\n    }, callback);\n  }\n\n  withdraw(currency, amount, address, callback) {\n    this._private({\n      method: 'withdraw',\n      currency: currency.toUpperCase(),\n      amount,\n      address\n    }, callback);\n  }\n\n  _joinCurrencies(currencyA, currencyB) {\n    return `${currencyA.toUpperCase()}_${currencyB.toUpperCase()}`;\n  }\n}\n```"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "const fs = require('fs').promises;\nconst path = require('path');\nconst https = require('https');\nconst http = require('http');\nconst URL = require('url').URL;\nconst tar = require('tar');\n\nclass Binary {\n  constructor(url, data = {}) {\n    this.url = url;\n    this.name = data.name !== undefined ? data.name : this._getNameFromUrl();\n    this.installDirectory = data.installDirectory || path.join(process.cwd(), 'bin');\n    this.binaryDirectory = -1;\n    this.binaryPath = -1;\n  }\n\n  async install() {\n    try {\n      const installDir = this._getInstallDirectory();\n      await fs.mkdir(installDir, { recursive: true });\n      const tempFilePath = path.join(installDir, this.name + '.tmp');\n      await this._downloadFile(this.url, tempFilePath);\n      await this._extractFile(tempFilePath, installDir);\n      await fs.unlink(tempFilePath);\n      this.binaryDirectory = installDir;\n      return installDir;\n    } catch (err) {\n      throw new Error(`Installation failed: ${err.message}`);\n    }\n  }\n\n  _getInstallDirectory() {\n    return path.join(this.installDirectory, this.name);\n  }\n\n  _getNameFromUrl() {\n    const parsedUrl = new URL(this.url);\n    const filename = path.basename(parsedUrl.pathname);\n    return path.parse(filename).name;\n  }\n\n  async _downloadFile(url, dest) {\n    return new Promise((resolve, reject) => {\n      try {\n        const parsedUrl = new URL(url);\n        const mod = parsedUrl.protocol === 'https:' ? https : http;\n        const file = fs.createWriteStream(dest);\n        mod.get(parsedUrl, (response) => {\n          if (response.statusCode !== 200) {\n            reject(new Error(`Download failed with status code ${response.statusCode}`));\n            return;\n          }\n          response.pipe(file);\n          file.on('finish', () => {\n            file.close(resolve);\n          });\n        }).on('error', (err) => {\n          fs.unlink(dest, () => reject(err));\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  async _extractFile(filePath, targetDir) {\n    const ext = path.extname(filePath);\n    const baseName = path.basename(filePath, ext);\n    const secondExt = path.extname(baseName);\n    if (ext === '.gz' && secondExt === '.tar') {\n      await tar.x({\n        file: filePath,\n        cwd: targetDir\n      });\n    } else {\n      throw new Error('Unsupported file format');\n    }\n  }\n}\n\nmodule.exports = Binary;"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n  const socket = new WebSocket(`wss://${wssUrl}`);\n\n  socket.addEventListener('open', () => {\n    console.log('WebSocket connection opened');\n    socket.send(JSON.stringify({ type: 'client_init', payload: 'Connection established' }));\n  });\n\n  socket.addEventListener('message', (event) => {\n    try {\n      const message = JSON.parse(event.data);\n      console.log('Received:', message);\n    } catch (error) {\n      console.error('Invalid JSON received:', error);\n    }\n  });\n\n  socket.addEventListener('close', (event) => {\n    console.log(`Connection closed (Code: ${event.code}, Reason: ${event.reason})`);\n    socket.close();\n  });\n\n  socket.addEventListener('error', (error) => {\n    console.error('WebSocket error:', error);\n  });\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst WEBHOOK_URL = \"https://example.com/webhook\";\n\nasync function sendWebhook(data) {\n  try {\n    const response = await fetch(WEBHOOK_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.error(\"Failed to send webhook:\", error);\n  }\n}\n```"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that handles WebSocket connections, message processing, and connection lifecycle events. The class should support sending and receiving JSON messages, handling different commands, and managing connection states.\n\nClass Description: The `Client` class represents a WebSocket client that connects to a server, processes incoming messages, and sends commands. It handles connection events, message parsing, and provides methods for common operations like sending hello messages and triggering reloads.\n\nAttributes:\n- `ws`: [WebSocket] - The WebSocket connection instance.\n- `options`: [Object] - Configuration options for the client.\n- `id`: [String] - Unique identifier for the client instance.\n- `plugins`: [Array] - List of plugins received from the server.\n- `url`: [String] - URL received from the server.\n\nMethods:\n- `constructor(req, socket, head, options)` -> [Client] - Initializes a new WebSocket client instance with the given request, socket, head, and options.\n- `message(event)` -> [void] - Handles incoming WebSocket messages, parses them, and routes to appropriate command handlers.\n- `close(event)` -> [void] - Closes the WebSocket connection and emits an 'end' event.\n- `hello()` -> [void] - Sends a 'hello' command to the server with supported protocols and server name.\n- `info(data)` -> [void] - Processes 'info' command data from the server, storing plugins and URL.\n- `reload(files)` -> [void] - Sends 'reload' commands for each file in the provided list, with live reload options.\n- `_data(event)` -> [Object] - Parses incoming message data from JSON string to object.\n- `send(data)` -> [void] - Sends data as a JSON string over the WebSocket connection.\n- `uniqueId(prefix)` -> [String] - Generates a unique ID with an optional prefix.",
    "Canonical_solution": "var WebSocket = require('faye-websocket');\n\nclass Client {\n  constructor(req, socket, head, options) {\n    options = this.options = options || {};\n    this.ws = new WebSocket(req, socket, head);\n    this.ws.onmessage = this.message.bind(this);\n    this.ws.onclose = this.close.bind(this);\n    this.id = this.uniqueId('ws');\n  }\n\n  message(event) {\n    var data = this.data(event);\n    if(this[data.command]) return this[data.command](data);\n  }\n\n  close(event) {\n    if(this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.emit('end', event);\n  }\n\n  hello() {\n    this.send({\n      command: 'hello',\n      protocols: [\n        'http://livereload.com/protocols/official-7'\n      ],\n      serverName: 'tiny-lr'\n    });\n  }\n\n  info(data) {\n    this.plugins = data.plugins;\n    this.url = data.url;\n  }\n\n  reload(files) {\n    files.forEach(function(file) {\n      this.send({\n        command: 'reload',\n        path: file,\n        liveCss: this.options.liveCss !== false,\n        liveJs: this.options.liveJs !== false,\n        liveImg: this.options.liveImg !== false\n      });\n    }, this);\n  }\n\n  _data(event) {\n    var data = {};\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {}\n    return data;\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  }\n}\n\nvar idCounter = 0;",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class Client {\n  constructor(req, socket, head, options) {\n    this.ws = new WebSocket(req, socket, head, options);\n    this.options = options || {};\n    this.id = this.uniqueId();\n    this.plugins = [];\n    this.url = '';\n    this.setupEventListeners();\n  }\n\n  setupEventListeners() {\n    this.ws.on('message', (event) => this.message(event));\n    this.ws.on('close', (event) => this.close(event));\n    this.ws.on('open', () => this.hello());\n  }\n\n  message(event) {\n    const data = this._data(event);\n    if (data && data.command && this[data.command]) {\n      this[data.command](data);\n    }\n  }\n\n  close(event) {\n    this.ws.close();\n    this.emit('end', event);\n  }\n\n  hello() {\n    const helloData = {\n      command: 'hello',\n      protocols: this.options.protocols || [],\n      serverName: this.options.serverName || 'default'\n    };\n    this.send(helloData);\n  }\n\n  info(data) {\n    this.plugins = data.plugins || [];\n    this.url = data.url || '';\n  }\n\n  reload(files) {\n    files.forEach(file => {\n      const reloadData = {\n        command: 'reload',\n        file,\n        liveReload: this.options.liveReload || false\n      };\n      this.send(reloadData);\n    });\n  }\n\n  _data(event) {\n    try {\n      return JSON.parse(event.data);\n    } catch (e) {\n      console.error('Failed to parse message data:', e);\n      return {};\n    }\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId(prefix = '') {\n    return `${prefix}${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n  }\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a specified path on a server and returns the WebSocket object if the connection is successfully opened.\n\nFunction Description: The function `apiWebSocket` attempts to create a WebSocket connection to a given path on a secure WebSocket server. It waits for the connection to be established or fail (due to error or closure) and returns the WebSocket object only if the connection is successfully opened. If the connection fails or an error occurs, the function returns `undefined`.\n\nInput: \n- `path` (string): The path on the server to which the WebSocket connection should be established. This is appended to the base URL `wss://services.bonjourr.fr/`.\n\nOutput: \n- `Promise<WebSocket | undefined>`: A promise that resolves to the WebSocket object if the connection is successfully opened, or `undefined` if the connection fails or an error occurs.",
    "Canonical_solution": "export async function apiWebSocket(path: string): Promise<WebSocket | undefined> {\n\ttry {\n\t\tconst socket = new WebSocket(`wss://services.bonjourr.fr/${path}`)\n\t\tconst isOpened = await new Promise((resolve) => {\n\t\t\tsocket.onopen = () => resolve(true)\n\t\t\tsocket.onerror = () => resolve(false)\n\t\t\tsocket.onclose = () => resolve(false)\n\t\t})\n\n\t\tif (isOpened) {\n\t\t\treturn socket\n\t\t}\n\t} catch (_error) {\n\t\t// ...\n\t}\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function apiWebSocket(path) {\n  return new Promise((resolve) => {\n    const url = `wss://services.bonjourr.fr/${path}`;\n    const ws = new WebSocket(url);\n    let resolved = false;\n\n    function cleanup() {\n      if (!resolved) {\n        resolved = true;\n        resolve(undefined);\n      }\n    }\n\n    ws.addEventListener('open', () => {\n      if (!resolved) {\n        resolved = true;\n        resolve(ws);\n      }\n    });\n\n    ws.addEventListener('error', cleanup);\n    ws.addEventListener('close', cleanup);\n  });\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nasync function speechApi(ssml) {\n  const subscriptionKey = process.env.SPEECH_SUBSCRIPTION_KEY;\n  const region = process.env.SPEECH_REGION;\n\n  const tokenUrl = `https://${region}.api.cognitive.microsoft.com/sts/v1.0/issueToken`;\n  const tokenRes = await fetch(tokenUrl, {\n    method: 'POST',\n    headers: { 'Ocp-Apim-Subscription-Key': subscriptionKey }\n  });\n  if (!tokenRes.ok) throw new Error('Token request failed');\n\n  const accessToken = await tokenRes.text();\n  const ttsUrl = `https://${region}.tts.speech.microsoft.com/cognitiveservices/v1`;\n  \n  const res = await fetch(ttsUrl, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': 'audio-16khz-128kbitrate-mono-mp3'\n    },\n    body: ssml\n  });\n\n  if (!res.ok) throw new Error(`TTS request failed: ${res.status}`);\n  return await res.arrayBuffer();\n}\n```"
  },
  {
    "Task_id": 239,
    "Instruction": "Task Description: Implement a WebSocket client connection class for browser environments that handles connection lifecycle, message events, and window focus state tracking.\n\nClass Description: The BrowserConnection class manages a WebSocket connection in a browser environment, including connection setup, event handling, and window visibility tracking. It extends a base connection class (BaseConnection) and adds browser-specific functionality.\n\nAttributes:\n- focusDetectorTimer: [Number] - Timer ID for the focus detection interval\n- windowVisible: [Boolean] - Tracks whether the browser window is currently visible\n- socket: [WebSocket] - The WebSocket connection instance\n\nMethods:\n- constructor(opts: Object) -> void - Initializes the connection with options and sets up event listeners for 'ready' and 'disconnect' events\n- setupSocket() -> WebSocket - Creates and configures a new WebSocket connection with event handlers for open, close, and message events\n- startFocusLoop() -> void - Starts tracking window visibility by setting up event listeners for focus/blur events and periodic checks\n- stopFocusLoop() -> void - Stops the window visibility tracking by clearing the interval timer and removing event listeners\n- handleOpen() -> void - Inherited from BaseConnection, called when WebSocket connection opens\n- handleClose(code: Number, reason: String) -> void - Inherited from BaseConnection, called when WebSocket connection closes\n- handleData(data: String) -> void - Inherited from BaseConnection, called when WebSocket receives a message\n- reportFocus(isVisible: Boolean) -> void - Inherited from BaseConnection, reports current window focus state",
    "Canonical_solution": "var WebSocket = require(\"ws\");\nvar _ = require(\"underscore\");\n\nclass BrowserConnection {\n  constructor(opts) {\n    BaseConnection.call(this, opts);\n    var connection = this;\n    this.on(\"ready\", function() {\n      connection.startFocusLoop()\n    });\n    this.on(\"disconnect\", function() {\n      connection.stopFocusLoop()\n    });\n  }\n\n  setupSocket() {\n    var connection = this;\n    var socket = new WebSocket(this.getUrl());\n    socket.onopen = function() {\n      connection.handleOpen()\n    };\n    socket.onclose = function(data) {\n      connection.handleClose(data[\"code\"], data[\"reason\"])\n    };\n    socket.onmessage = function(message) {\n      connection.handleData(message.data)\n    };\n    return socket;\n  }\n\n  startFocusLoop() {\n    if (this.focusDetectorTimer) return;\n    var connection = this;\n    var propertyName = null;\n    if (typeof document.hidden !== \"undefined\") {\n      propertyName = \"hidden\"\n    } else if (typeof document.mozHidden !== \"undefined\") {\n      propertyName = \"mozHidden\"\n    } else if (typeof document.msHidden !== \"undefined\") {\n      propertyName = \"msHidden\"\n    } else if (typeof document.webkitHidden !== \"undefined\") {\n      propertyName = \"webkitHidden\"\n    } else {\n      propertyName = undefined\n    }\n    if (connection.windowVisible === undefined) {\n      connection.windowVisible = propertyName === undefined ? true : document[propertyName] === false\n    }\n    var focusListener = window.addEventListener(\"focus\", function(e) {\n      connection.windowVisible = true;\n      updateFocusState()\n    });\n    var blurListener = window.addEventListener(\"blur\", function(e) {\n      connection.windowVisible = false;\n      updateFocusState()\n    });\n    this.on(\"disconnect\", function() {\n      window.removeEventListener(\"focus\", focusListener);\n      window.removeEventListener(\"blur\", blurListener)\n    });\n    var updateFocusState = function() {\n      var isVisible = propertyName === undefined ? true : document[propertyName] === false;\n      connection.reportFocus(isVisible && connection.windowVisible)\n    };\n    this.focusDetectorTimer = setInterval(updateFocusState, 100)\n  }\n\n  stopFocusLoop() {\n    if (!this.focusDetectorTimer) return;\n    clearTimeout(this.focusDetectorTimer);\n    delete this.focusDetectorTimer;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class BrowserConnection extends BaseConnection {\n  constructor(opts) {\n    super(opts);\n    this.focusDetectorTimer = null;\n    this.windowVisible = true;\n    this.onFocusHandler = this.onFocus.bind(this);\n    this.onBlurHandler = this.onBlur.bind(this);\n    this.setupSocket();\n    this.startFocusLoop();\n  }\n\n  setupSocket() {\n    this.socket = new WebSocket(this.opts.url);\n    this.socket.addEventListener('open', () => this.handleOpen());\n    this.socket.addEventListener('message', (event) => this.handleData(event.data));\n    this.socket.addEventListener('close', (event) => this.handleClose(event.code, event.reason));\n    this.socket.addEventListener('error', (error) => {\n      this.handleClose(1006, 'WebSocket error');\n    });\n    return this.socket;\n  }\n\n  startFocusLoop() {\n    window.addEventListener('focus', this.onFocusHandler);\n    window.addEventListener('blur', this.onBlurHandler);\n    this.focusDetectorTimer = setInterval(() => {\n      const isVisible = document.visibilityState !== 'hidden';\n      if (this.windowVisible !== isVisible) {\n        this.windowVisible = isVisible;\n        this.reportFocus(isVisible);\n      }\n    }, 5000);\n  }\n\n  stopFocusLoop() {\n    window.removeEventListener('focus', this.onFocusHandler);\n    window.removeEventListener('blur', this.onBlurHandler);\n    clearInterval(this.focusDetectorTimer);\n  }\n\n  onFocus() {\n    this.windowVisible = true;\n    this.reportFocus(true);\n  }\n\n  onBlur() {\n    this.windowVisible = false;\n    this.reportFocus(false);\n  }\n\n  handleOpen() {\n    this.emit('ready');\n  }\n\n  handleClose(code, reason) {\n    this.stopFocusLoop();\n    this.emit('disconnect', code, reason);\n  }\n\n  handleData(data) {\n    this.emit('message', data);\n  }\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a class that serves as an HTTP client for interacting with a build service API, handling different types of package-related operations with proper error handling.\n\nClass Description: The BuildService class provides methods to fetch package build statistics, exports, and export sizes from a remote build service. It uses Axios for HTTP requests and implements centralized error handling.\n\nAttributes:\n- operations: [Array] - A predefined list of available API operations, each specifying the operation type, endpoint, and corresponding method name\n\nMethods:\n- _makeHttpRequest: [Name](operation: Object, packageString: String) -> Promise<Object> - Makes an HTTP GET request to the build service with the specified operation and package string, handles the response and errors\n- _handleError: [Name](error: Error, operationType: String) -> Throws CustomError - Centralized error handling that processes different types of errors (response errors, request errors, and other errors) and throws appropriate custom errors\n- getPackageBuildStats: [Name](packageString: String) -> Promise<Object> - Retrieves build statistics for the specified package\n- getPackageExports: [Name](packageString: String) -> Promise<Object> - Retrieves all exports for the specified package\n- getPackageExportSizes: [Name](packageString: String) -> Promise<Object> - Retrieves size information for all exports of the specified package",
    "Canonical_solution": "const axios = require('axios');\nconst CustomError = require('../CustomError');\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        type: 'PACKAGE_BUILD_STATS',\n        endpoint: '/size',\n        methodName: 'getPackageStats',\n      },\n      {\n        type: 'PACKAGE_EXPORTS',\n        endpoint: '/exports',\n        methodName: 'getAllPackageExports',\n      },\n      {\n        type: 'PACKAGE_EXPORTS_SIZES',\n        endpoint: '/exports-sizes',\n        methodName: 'getPackageExportSizes',\n      },\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(\n        `${process.env.BUILD_SERVICE_ENDPOINT}${operation.endpoint}?p=${encodeURIComponent(packageString)}`\n      );\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const contents = error.response.data;\n      throw new CustomError(\n        contents.name || 'BuildError',\n        contents.originalError,\n        contents.extra\n      );\n    } else if (error.request) {\n      throw new CustomError('BuildError', {\n        operation: operationType,\n        reason: 'BUILD_SERVICE_UNREACHABLE',\n        url: error.request._currentUrl,\n      });\n    } else {\n      throw new CustomError('BuildError', error.message, {\n        operation: operationType,\n      });\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_BUILD_STATS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS_SIZES');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass CustomError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = 'CustomError';\n  }\n}\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      { type: 'stats', endpoint: '/api/packages/{package}/stats', method: 'getPackageBuildStats' },\n      { type: 'exports', endpoint: '/api/packages/{package}/exports', method: 'getPackageExports' },\n      { type: 'sizes', endpoint: '/api/packages/{package}/export-sizes', method: 'getPackageExportSizes' }\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    const url = operation.endpoint.replace('{package}', packageString);\n    try {\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        const status = error.response.status;\n        const message = error.response.data.message || 'Unknown error';\n        if (status === 404) {\n          throw new CustomError(`Resource not found for ${operationType}: ${message}`, error);\n        } else if (status >= 500) {\n          throw new CustomError(`Server error (${status}) for ${operationType}: ${message}`, error);\n        } else {\n          throw new CustomError(`Client error (${status}) for ${operationType}: ${message}`, error);\n        }\n      } else if (error.request) {\n        throw new CustomError(`No response received for ${operationType}: ${error.message}`, error);\n      } else {\n        throw new CustomError(`Request setup error for ${operationType}: ${error.message}`, error);\n      }\n    } else {\n      throw new CustomError(`Unexpected error for ${operationType}: ${error.message}`, error);\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'stats');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'exports');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'sizes');\n    return this._makeHttpRequest(operation, packageString);\n  }\n}"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Implement a WebSocket client in JavaScript that establishes a connection to a server, listens for incoming messages, and sends user input from a text box when the Enter key is pressed.\n\nFunction Description: The function `setupWebSocket` initializes a WebSocket connection to a specified server URL. It sets up an event listener for incoming messages to display them in a designated HTML element. Additionally, it listens for the Enter key press in a text box to send the input text via the WebSocket connection and clears the text box afterward.\n\nInput: None (The function uses DOM elements with IDs \"txt\" and \"divOut\" for text input and message display, respectively.)\n\nOutput: None (The function's side effects include establishing a WebSocket connection, displaying received messages in the \"divOut\" element, and sending user input to the server.)",
    "Canonical_solution": "function setupWebSocket() {\n    const txtBox = document.getElementById(\"txt\");\n    const divOut = document.getElementById(\"divOut\");\n    const ws = new WebSocket(\"ws://localhost/wsapp/\");\n    \n    ws.onmessage = function(e) {\n        divOut.innerHTML += e.data + \"<br/>\";\n    };\n    \n    txtBox.addEventListener(\"keypress\", function(e) {\n        if (e.keyCode === 13) {\n            ws.send(txtBox.value);\n            txtBox.value = \"\";\n        }\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function setupWebSocket() {  \n  const socket = new WebSocket('ws://example.com/socket');  \n\n  socket.addEventListener('message', event => {  \n    const output = document.getElementById('divOut');  \n    output.innerHTML += event.data + '<br>';  \n  });  \n\n  document.getElementById('txt').addEventListener('keydown', event => {  \n    if (event.key === 'Enter') {  \n      socket.send(event.target.value);  \n      event.target.value = '';  \n    }  \n  });  \n}"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Implement a WebSocket client class for managing connections to a chat service, handling message exchange, and maintaining connection state.\n\nClass Description: The `BingChatWebSocket` class provides functionality to establish, maintain, and close WebSocket connections to a chat service. It manages multiple connections through unique socket IDs and supports sending messages, receiving responses, and connection health checks.\n\nAttributes:\n- `webSockets`: Record<string, WebSocket | null> - A dictionary mapping socket IDs to their corresponding WebSocket connections, allowing management of multiple connections.\n\nMethods:\n- `getSocketId()`: () -> Promise<string> - Establishes a new WebSocket connection, initializes it with a handshake message, and returns a unique socket ID for the connection. Handles connection errors and validation.\n- `ping(socketId: string)`: (string) -> Promise<void> - Sends a ping message to the WebSocket connection identified by `socketId` to maintain or check the connection.\n- `send(socketId: string, msg: object, onMessage: (data: any) => void)`: (string, object, function) -> Promise<any> - Sends a message through the WebSocket connection identified by `socketId` and sets up a callback `onMessage` to handle incoming messages. Resolves when a type 2 message is received.\n- `close(socketId: string)`: (string) -> Promise<void> - Closes the WebSocket connection identified by `socketId` and cleans up its reference in the `webSockets` dictionary.",
    "Canonical_solution": "import { v4 as uuidv4 } from 'uuid';\n\nclass BingChatWebSocket {\n  private webSockets: Record<string, WebSocket | null> = {};\n\n  async getSocketId(): Promise<string> {\n    const socketUrl = 'wss://sydney.bing.com/sydney/ChatHub';\n    return await new Promise((resolve, reject) => {\n      try {\n        const ws = new WebSocket(socketUrl);\n        const socketId = uuidv4();\n        \n        ws.onopen = (_e) => {\n          const hello = JSON.stringify({ protocol: 'json', version: 1 }) + '\\x1e';\n          ws.send(hello);\n        };\n\n        ws.onclose = () => {\n          this.webSockets[socketId] = null;\n        };\n        \n        ws.onerror = (e) => {\n          if (e.type === 'error') {\n            reject(new Error(`WebSocket \\`${socketUrl}\\` did not connect successfully.`));\n            return;\n          }\n          reject(e);\n        };\n\n        ws.onmessage = (e) => {\n          const msg = e.data;\n          if (msg === '{}\\x1e') {\n            this.webSockets[socketId] = ws;\n            resolve(socketId);\n            return;\n          }\n          ws.close();\n          this.webSockets[socketId] = null;\n          reject(new Error('WebSocket did not connect successfully'));\n        };\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async ping(socketId: string): Promise<void> {\n    return await new Promise((resolve, _reject) => {\n      const ws = this.webSockets[socketId];\n      if (ws == null) throw new Error(`WebSocket ${socketId} not found`);\n\n      ws.send(JSON.stringify({ type: 6 }) + '\\x1e');\n      resolve(null);\n    });\n  }\n\n  async send(\n    socketId: string,\n    msg: object,\n    onMessage: (data: any) => void\n  ): Promise<any> {\n    return await new Promise((resolve, _reject) => {\n      const ws = this.webSockets[socketId];\n      if (ws == null) throw new Error(`WebSocket ${socketId} not found`);\n\n      ws.onmessage = (e) => {\n        const msg = e.data;\n        for (const item of msg.split('\\x1e').filter(Boolean)) {\n          const data = JSON.parse(item.replaceAll('\\n', '\\\\n'));\n          onMessage(data);\n\n          if (data.type === 2) {\n            setTimeout(() => {\n              resolve(data);\n            });\n          }\n        }\n      };\n      ws.send(JSON.stringify(msg) + '\\x1e');\n    });\n  }\n\n  async close(socketId: string): Promise<void> {\n    const ws = this.webSockets[socketId];\n    ws?.close();\n    this.webSockets[socketId] = null;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class BingChatWebSocket {\n  private webSockets: Record<string, WebSocket | null> = {};\n\n  async getSocketId(): Promise<string> {\n    const socket = new WebSocket('wss://chat.example.com');\n    return new Promise((resolve, reject) => {\n      let resolved = false;\n\n      const onOpen = () => {\n        socket.removeEventListener('open', onOpen);\n        socket.send(JSON.stringify({ type: 1, action: 'handshake' }));\n      };\n\n      const onMessage = (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 2 && data.action === 'handshake_response') {\n            if (resolved) return;\n            resolved = true;\n            const socketId = data.id;\n            this.webSockets[socketId] = socket;\n            resolve(socketId);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      const onError = (event: Event) => {\n        if (resolved) return;\n        reject(new Error('WebSocket error during handshake'));\n      };\n\n      const onClose = (event: CloseEvent) => {\n        if (resolved) return;\n        reject(new Error(`Connection closed during handshake: ${event.reason}`));\n      };\n\n      socket.addEventListener('open', onOpen);\n      socket.addEventListener('message', onMessage);\n      socket.addEventListener('error', onError);\n      socket.addEventListener('close', onClose);\n    });\n  }\n\n  async ping(socketId: string): Promise<void> {\n    const socket = this.webSockets[socketId];\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket not open');\n    }\n    socket.send(JSON.stringify({ type: 'ping' }));\n  }\n\n  async send(socketId: string, msg: object, onMessage: (data: any) => void): Promise<any> {\n    const socket = this.webSockets[socketId];\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket not open');\n    }\n\n    socket.send(JSON.stringify(msg));\n\n    return new Promise((resolve, reject) => {\n      let resolved = false;\n\n      const messageHandler = (event: MessageEvent) => {\n        try {\n          const data = JSON.parse(event.data);\n          onMessage(data);\n          if (data.type === 2) {\n            if (resolved) return;\n            resolved = true;\n            socket.removeEventListener('message', messageHandler);\n            socket.removeEventListener('close', closeHandler);\n            socket.removeEventListener('error', errorHandler);\n            resolve(data);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      const closeHandler = (event: CloseEvent) => {\n        if (resolved) return;\n        socket.removeEventListener('message', messageHandler);\n        socket.removeEventListener('close', closeHandler);\n        socket.removeEventListener('error', errorHandler);\n        reject(new Error(`Connection closed: ${event.reason}`));\n      };\n\n      const errorHandler = (event: Event) => {\n        if (resolved) return;\n        socket.removeEventListener('message', messageHandler);\n        socket.removeEventListener('close', closeHandler);\n        socket.removeEventListener('error', errorHandler);\n        reject(new Error('WebSocket error during send'));\n      };\n\n      socket.addEventListener('message', messageHandler);\n      socket.addEventListener('close', closeHandler);\n      socket.addEventListener('error', errorHandler);\n    });\n  }\n\n  async close(socketId: string): Promise<void> {\n    const socket = this.webSockets[socketId];\n    if (!socket) {\n      throw new Error('Socket not found');\n    }\n    return new Promise((resolve, reject) => {\n      const closeHandler = () => {\n        delete this.webSockets[socketId];\n        resolve();\n      };\n      const errorHandler = (event: Event) => {\n        reject(new Error('Failed to close socket'));\n      };\n      socket.addEventListener('close', closeHandler, { once: true });\n      socket.addEventListener('error', errorHandler, { once: true });\n      socket.close();\n    });\n  }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  const url = 'https://api.example.com/tv-channels';\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.map(channel => ({\n      lang: channel.lang,\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    console.error('Failed to fetch channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a function to fetch and process subscribed TV channels from a streaming service API, including authentication and data extraction.\n\nFunction Description: This asynchronous function retrieves subscribed TV channel information from a streaming service by:\n1. Scraping initial configuration data from a webpage\n2. Authenticating with the service using extracted credentials\n3. Fetching subscribed channel packages\n4. Processing and deduplicating channel information\n5. Returning formatted channel data\n\nInput: \n- lang: [String] (optional, default='id') - Language code for the returned channel data\n\nOutput: \n- Returns: [Array<Object>] - An array of channel objects containing:\n  - lang: [String] - The language code\n  - site_id: [String] - The channel ID\n  - name: [String] - The channel name\n- Throws: [Error] - If any HTTP request fails or data parsing fails",
    "Canonical_solution": "function async channels({ lang = 'id' }) {\n    const axios = require('axios')\n    const cheerio = require('cheerio')\n    const result = await axios\n      .get('https://cubmu.com/live-tv')\n      .then(response => response.data)\n      .catch(console.error)\n\n    const $ = cheerio.load(result)\n\n    const config = JSON.parse($('#__NEXT_DATA__').text()).runtimeConfig || {}\n\n    const options = {\n      headers: {\n        Origin: 'https://cubmu.com',\n        Referer: 'https://cubmu.com/live-tv'\n      }\n    }\n    await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/login/external?email=${config.email}&password=${config.password}&deviceId=${config.deviceId}&deviceType=${config.deviceType}&deviceModel=${config.deviceModel}&deviceToken=&serial=&platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n    const subscribedChannels = await axios\n      .post(\n        `https://servicebuss.transvision.co.id/tvs/subscribe_product/list?platformId=${config.platformId}`,\n        options\n      )\n      .then(response => response.data)\n      .catch(console.error)\n\n    const channels = []\n    const included = []\n    if (Array.isArray(subscribedChannels.channelPackageList)) {\n      subscribedChannels.channelPackageList.forEach(pkg => {\n        pkg.channelList.forEach(channel => {\n          if (included.indexOf(channel.id) < 0) {\n            included.push(channel.id)\n            channels.push({\n              lang,\n              site_id: channel.id,\n              name: channel.name\n            })\n          }\n        })\n      })\n    }\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst cheerio = require('cheerio');\nconst fetch = require('node-fetch');\n\nasync function getSubscribedChannels(lang = 'id') {\n  try {\n    const initialRes = await fetch('https://streamingservice.com');\n    if (!initialRes.ok) throw new Error('Failed to fetch initial page');\n    const initialHtml = await initialRes.text();\n    const $ = cheerio.load(initialHtml);\n    const configScript = $('script[type=\"application/json\"]').first().html();\n    if (!configScript) throw new Error('Config script not found');\n    const config = JSON.parse(configScript);\n    const { client_id, client_secret } = config.auth;\n\n    const authRes = await fetch('https://streamingservice.com/api/auth/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        grant_type: 'client_credentials',\n        client_id,\n        client_secret,\n      }),\n    });\n    if (!authRes.ok) throw new Error('Authentication failed');\n    const { access_token } = await authRes.json();\n\n    const packagesRes = await fetch('https://streamingservice.com/api/user/packages', {\n      headers: { Authorization: `Bearer ${access_token}` },\n    });\n    if (!packagesRes.ok) throw new Error('Failed to fetch packages');\n    const packages = await packagesRes.json();\n\n    const channelsMap = new Map();\n    packages.forEach(pkg => {\n      pkg.channels.forEach(channel => {\n        if (!channelsMap.has(channel.site_id)) {\n          channelsMap.set(channel.site_id, {\n            site_id: channel.site_id,\n            name: channel.name[lang] || channel.name['id'] || channel.name,\n          });\n        }\n      });\n    });\n\n    return Array.from(channelsMap.values()).map(channel => ({\n      lang,\n      ...channel,\n    }));\n  } catch (error) {\n    throw new Error(`Failed to fetch channels: ${error.message}`);\n  }\n}\n```"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles incoming connections, manages sessions, and processes messages with customizable handlers.\n\nClass Description: The XVIZServer class is a WebSocket server implementation that manages WebSocket connections, delegates session handling to provided handlers, and provides logging capabilities. It wraps the 'ws' library functionality with additional session management features.\n\nAttributes:\n- _server: [WebSocket.Server] - The underlying WebSocket server instance\n- handlers: [Array] - Array of handler objects responsible for managing sessions\n- options: [Object] - Configuration options for the server, merged with defaults\n\nMethods:\n- constructor(handlers, options, callback) -> [XVIZServer] - Initializes the WebSocket server with message handlers, options, and an optional callback. Throws an error if no handlers are provided.\n- get server() -> [WebSocket.Server] - Getter for the underlying WebSocket server instance\n- close(cb) -> [void] - Closes the WebSocket server, accepting an optional callback\n- handleSession(socket, request) -> [Promise<void>] - Handles new WebSocket connections, delegates to handlers for session creation, and closes the connection if no handler accepts it\n- log(...msg) -> [void] - Logs messages using the configured logger if available",
    "Canonical_solution": "const WebSocket = require('ws');\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers || handlers.length === 0) {\n      throw new Error('Handlers are required');\n    }\n    this.handlers = handlers;\n    this._sessions = new Map();\n    this.options = { ...XVIZServer.defaultOptions, ...options };\n    const wsOptions = { ...this.options };\n    delete wsOptions.logger;\n    this._server = new WebSocket.Server(wsOptions);\n    this._server.on('connection', (socket, request) => {\n      this.handleSession(socket, request).catch(err => {\n        this.log('Error handling session:', err);\n        socket.close(500, 'Internal server error');\n      });\n    });\n    if (callback) {\n      this._server.on('listening', () => callback(null, this));\n    }\n  }\n\n  static get defaultOptions() {\n    return {\n      logger: console.log\n    };\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    let accepted = false;\n    for (const handler of this.handlers) {\n      try {\n        const result = await handler.accept(socket, request);\n        if (result) {\n          accepted = true;\n          this.log('Session accepted by handler', handler);\n          const session = handler.createSession ? handler.createSession(socket, request) : {};\n          this._sessions.set(socket, session);\n          socket.on('message', (message) => this.handleMessage(socket, message, handler));\n          socket.on('close', () => this.handleClose(socket, handler));\n          socket.on('error', (err) => this.log('Socket error:', err));\n          break;\n        }\n      } catch (err) {\n        this.log('Handler accept error:', err);\n        socket.close(500, 'Handler error');\n        return;\n      }\n    }\n    if (!accepted) {\n      socket.close(400, 'No handler accepted the session');\n    }\n  }\n\n  handleMessage(socket, message, handler) {\n    const session = this._sessions.get(socket);\n    if (!session) return;\n    try {\n      const data = JSON.parse(message);\n      if (handler.onMessage) {\n        handler.onMessage(session, data);\n      }\n    } catch (e) {\n      this.log('Error parsing message:', e);\n      socket.close(400, 'Invalid message format');\n    }\n  }\n\n  handleClose(socket, handler) {\n    const session = this._sessions.get(socket);\n    if (session && handler.onClose) {\n      handler.onClose(session);\n    }\n    this._sessions.delete(socket);\n  }\n\n  log(...msg) {\n    if (this.options.logger) {\n      this.options.logger(...msg);\n    }\n  }\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a WebSocket server that handles MQTT protocol messages using the Aedes broker, with event listeners for various client interactions and message handling.\n\nFunction Description: The function `createWebSocketServer` initializes and starts a WebSocket server that integrates with the Aedes MQTT broker. It sets up event handlers for client connections, errors, message publishing, subscriptions, and client disconnections. The server listens on a specified port for WebSocket connections and routes MQTT messages through the Aedes broker.\n\nInput: None (The function does not take any input parameters; port and configuration are hardcoded within the function.)\n\nOutput: None (The function does not return any value; it creates and maintains a running WebSocket server with event listeners.)",
    "Canonical_solution": "function createWebSocketServer() {\n    const aedes = require('aedes')();\n    const httpServer = require('http').createServer();\n    const WebSocket = require('ws');\n    const wsPort = 8080;\n\n    const wss = new WebSocket.Server({ server: httpServer });\n    wss.on('connection', function connection(ws) {\n        const duplex = WebSocket.createWebSocketStream(ws);\n        aedes.handle(duplex);\n    });\n\n    httpServer.listen(wsPort, () => {\n        console.log('websocket server listening on port', wsPort);\n    });\n\n    aedes.on('clientError', (client, err) => {\n        console.log('client error', client.id, err.message, err.stack);\n    });\n\n    aedes.on('connectionError', (client, err) => {\n        console.log('client error', client, err.message, err.stack);\n    });\n\n    aedes.on('publish', (packet, client) => {\n        if (packet && packet.payload) {\n            console.log('publish packet:', packet.payload.toString());\n        }\n        if (client) {\n            console.log('message from client', client.id);\n        }\n    });\n\n    aedes.on('subscribe', (subscriptions, client) => {\n        if (client) {\n            console.log('subscribe from client', subscriptions, client.id);\n        }\n    });\n\n    aedes.on('client', (client) => {\n        console.log('new client', client.id);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 90,
    "wrong_result": "function createWebSocketServer() {\n  const aedes = require('aedes')();\n  const http = require('http');\n  const aedesWs = require('aedes-ws')(aedes);\n\n  const server = http.createServer();\n\n  aedes.on('client', (client) => {\n    console.log('Client connected', client.id);\n  });\n\n  aedes.on('error', (error, client) => {\n    console.error('Error:', error, 'Client:', client ? client.id : 'N/A');\n  });\n\n  aedes.on('publish', (packet, client) => {\n    console.log('Published:', packet.payload.toString(), 'on topic', packet.topic);\n  });\n\n  aedes.on('subscribe', (subscriptions, client) => {\n    subscriptions.forEach(sub => {\n      console.log('Subscribed:', sub.topic, 'QoS:', sub.qos);\n    });\n  });\n\n  aedes.on('clientDisconnect', (client) => {\n    console.log('Client disconnected', client.id);\n  });\n\n  server.on('request', aedes.handle);\n  server.on('upgrade', aedesWs.handle);\n\n  server.listen(8080, () => {\n    console.log('WebSocket server running on port 8080');\n  });\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor() {\n    this.requestModule = 'axios';\n    this.axios = require('axios');\n  }\n\n  async httpRequest(options) {\n    const { method, url, headers = {}, params, body } = options;\n    let finalUrl = url;\n    \n    if (params && Object.keys(params).length > 0) {\n      const queryString = this.queryStr(params);\n      if (queryString) {\n        finalUrl += (url.includes('?') ? '&' : '?') + queryString;\n      }\n    }\n\n    let contentType = headers['Content-Type'] || '';\n    if (method.toUpperCase() === 'POST' && !contentType) {\n      if (body !== undefined) {\n        if (typeof body === 'string') {\n          contentType = this.isJSONString(body) \n            ? 'application/json' \n            : 'application/x-www-form-urlencoded';\n        } else if (this.isJson(body)) {\n          contentType = 'application/json';\n        }\n      }\n    }\n\n    const config = {\n      method: method.toLowerCase(),\n      url: finalUrl,\n      headers: {\n        ...headers,\n        'Content-Type': contentType\n      }\n    };\n\n    if (method.toUpperCase() === 'POST') {\n      config.data = body;\n    }\n\n    const response = await this.axios(config);\n    return response.data;\n  }\n\n  queryStr(options) {\n    return Object.keys(options).map(key => {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(options[key]);\n    }).join('&');\n  }\n\n  isJSONString(str) {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  isJson(obj) {\n    return obj && typeof obj === 'object' && obj.constructor === Object;\n  }\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript to handle real-time bidirectional communication between clients and the server.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io. It sets up event listeners for client connections, messages, and disconnections. The server broadcasts received messages to all connected clients.\n\nInput:\n- `port` (Number): The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:\n- Returns the `socketServer` instance (Object) which can be used to further configure or interact with the WebSocket server.\n\nNote: The function internally uses the `http` module to create an HTTP server and binds socket.io to it for WebSocket communication. The server logs connection, message, and disconnection events to the console.",
    "Canonical_solution": "const http = require(\"http\");\nconst socketIo = require(\"socket.io\");\n\nfunction setupWebSocketServer(port) {\n    const app = express();\n    const webServer = http.createServer(app);\n    const socketServer = socketIo(webServer, {\"log level\": 1});\n\n    socketServer.on(\"connection\", (socket) => {\n        console.log(\"New client connected\");\n\n        socket.on(\"message\", (data) => {\n            console.log(\"Message received: \", data);\n            socketServer.emit(\"message\", data);\n        });\n\n        socket.on(\"disconnect\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    webServer.listen(port, () => {\n        console.log(\"WebSocket server listening on port: \" + port);\n    });\n\n    return socketServer;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "const http = require('http');\nconst { io } = require('socket.io');\n\nfunction setupWebSocketServer(port) {\n  const httpServer = http.createServer();\n  const socketServer = new io.Server(httpServer);\n\n  socketServer.on('connection', (socket) => {\n    console.log('Client connected');\n    socket.on('message', (message) => {\n      console.log('Received message:', message);\n      socketServer.emit('message', message);\n    });\n    socket.on('disconnect', () => {\n      console.log('Client disconnected');\n    });\n  });\n\n  httpServer.listen(port, () => {\n    console.log(`WebSocket server running on port ${port}`);\n  });\n\n  return socketServer;\n}"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript that handles real-time communication between clients and integrates with an Express application and Deployd backend.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io, integrates it with an Express application, and attaches a Deployd backend. It sets up event listeners for server operations and handles custom Express routes.\n\nInput: None (The function uses environment variables for configuration: `process.env.NODE_ENV` for environment setting and `process.env.PORT` for port number)\n\nOutput: None (The function starts a server that listens on the specified port and logs server status to the console)\n\nNote: The function internally uses:\n- Express for HTTP server functionality\n- Socket.io for WebSocket communication\n- Deployd for backend services\n- MongoDB (configured to connect to localhost:27017 with database name 'test-app')",
    "Canonical_solution": "function setupWebSocketServer() {\n    var express = require('express');\n    var app = express();\n    var server = require('http').createServer(app);\n    var io = require('socket.io').listen(server, {'log level': 0});\n\n    require('deployd').attach(server, {\n        socketIo: io,\n        env: process.env.NODE_ENV || 'development',\n        db: {host:'localhost', port:27017, name:'test-app'}\n    });\n    app.use(server.handleRequest);\n\n    app.get('/express-custom-handler', function(req, res) {\n        res.send('Ok');\n    });\n\n    server.listen(process.env.PORT || 2403, function() {\n        console.log({ ENV: process.env.NODE_ENV || 'development', PORT: process.env.PORT || 2403 });\n    });\n    server.on('error', function(err) {\n        console.log(err.stack);\n        process.nextTick(function() {\n            process.exit();\n        });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "function setupWebSocketServer() {\r\n  const express = require('express');\r\n  const http = require('http');\r\n  const socketIO = require('socket.io');\r\n  const dpd = require('deployd');\r\n  const { MongoClient } = require('mongodb');\r\n\r\n  const app = express();\r\n  const server = http.createServer(app);\r\n  const io = socketIO(server);\r\n\r\n  app.set('env', process.env.NODE_ENV || 'development');\r\n\r\n  const dpdApp = dpd({\r\n    app,\r\n    storage: __dirname + '/dpd-storage'\r\n  });\r\n\r\n  const mongoUrl = 'mongodb://localhost:27017/test-app';\r\n  MongoClient.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {\r\n    if (err) {\r\n      console.error('MongoDB connection error:', err);\r\n      return;\r\n    }\r\n    console.log('Connected to MongoDB');\r\n  });\r\n\r\n  io.on('connection', (socket) => {\r\n    console.log('New client connected');\r\n    socket.on('message', (data) => {\r\n      io.emit('message', data);\r\n    });\r\n    socket.on('disconnect', () => {\r\n      console.log('Client disconnected');\r\n    });\r\n  });\r\n\r\n  const PORT = process.env.PORT || 3000;\r\n  server.listen(PORT, () => {\r\n    console.log(`Server running on port ${PORT}`);\r\n  });\r\n}"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Write a function that scrapes TV channel information from a webpage, processes the data, and returns a list of channel objects with their details.\n\nFunction Description: The function `getChannels` asynchronously fetches HTML content from a URL, parses it to extract TV channel information, and returns an array of channel objects. Each channel object contains language, site ID, and name. The function uses Axios for HTTP requests and Cheerio for HTML parsing.\n\nInput: None (The function uses an implicit `this.url()` method to generate the target URL)\n\nOutput: Array<Object> - Returns an array of channel objects with the following structure:\n[\n  {\n    lang: string,      // Language code of the channel (e.g., 'tr')\n    site_id: string,   // Unique identifier for the channel\n    name: string       // Name of the channel\n  },\n  ...\n]",
    "Canonical_solution": "async function getChannels() {\n    const channels = {};\n    const axios = require('axios');\n    const data = await axios\n        .get(this.url({ date: dayjs() }))\n        .then(r => r.data)\n        .catch(console.error);\n\n    const $ = cheerio.load(data);\n    $('.channelContent').toArray()\n        .forEach(el => {\n            const item = $(el);\n            const channelId = item.find('.channelDetail .tvGuideResult-box-wholeDates-title')\n                .first()\n                .attr('onclick');\n            if (channelId) {\n                const site_id = channelId.match(/\\s(\\d+)\\)/)[1];\n                if (channels[site_id] === undefined) {\n                    channels[site_id] = {\n                        lang: 'tr',\n                        site_id,\n                        name: item.find('#channelID').val()\n                    };\n                }\n            }\n        });\n\n    return Object.values(channels);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async getChannels() {\n  const { data } = await axios.get(this.url());\n  const $ = cheerio.load(data);\n  const channels = [];\n  $('.channel-entry').each((i, el) => {\n    const $el = $(el);\n    channels.push({\n      lang: $el.data('lang'),\n      site_id: $el.data('site-id'),\n      name: $el.find('.channel-name').text()\n    });\n  });\n  return channels;\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst https = require('https');\n\nfunction installTelemetry() {\n    if (process.env.TUNNELMOLE_TELEMETRY !== '1') return;\n\n    const data = JSON.stringify({\n        nodeVersion: process.version,\n        platform: process.platform\n    });\n\n    const options = {\n        hostname: 'example.com',\n        path: '/telemetry',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': Buffer.byteLength(data).toString()\n        }\n    };\n\n    const req = https.request(options, (res) => {\n        res.resume();\n    });\n\n    req.on('error', () => {});\n\n    req.write(data);\n    req.end();\n}\n```"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const https = require('https');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {};\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.username = saucelabsUsername;\n    this.auth.token = saucelabsToken;\n  }\n\n  get(path, callback) {\n    const options = {\n      hostname: 'api.saucelabs.com',\n      path: `/rest/v1${path}`,\n      method: 'GET',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(`${this.auth.username}:${this.auth.token}`).toString('base64'),\n        'Content-Type': 'application/json'\n      }\n    };\n\n    const req = https.request(options, (res) => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        try {\n          callback(null, JSON.parse(data));\n        } catch (err) {\n          callback(err, null);\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      callback(error, null);\n    });\n\n    req.end();\n  }\n\n  post(path, data, callback) {\n    const postData = JSON.stringify(data);\n    const options = {\n      hostname: 'api.saucelabs.com',\n      path: `/rest/v1${path}`,\n      method: 'POST',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(`${this.auth.username}:${this.auth.token}`).toString('base64'),\n        'Content-Type': 'application/json',\n        'Content-Length': postData.length\n      }\n    };\n\n    const req = https.request(options, (res) => {\n      let responseData = '';\n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      res.on('end', () => {\n        try {\n          callback(null, JSON.parse(responseData));\n        } catch (err) {\n          callback(err, null);\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      callback(error, null);\n    });\n\n    req.write(postData);\n    req.end();\n  }\n}\n\nmodule.exports = SauceLabsClient;"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using an HTTP POST request and triggers a callback function upon completion or failure.\n\nFunction Description: The function uses Axios to send an HTTP POST request to a specified webhook URL with event and data payload. It triggers a callback function (triggerActivity) when the request succeeds or fails. The request includes custom headers for identification.\n\nInput:\n- url: [String] - The webhook URL to which the POST request will be sent\n- event: [String/Object] - The event information to be sent in the request payload\n- data: [Object] - The data payload to be sent in the request\n- triggerActivity: [Function] - Callback function to be triggered after request completion (takes an optional error parameter)\n\nOutput: [None] - The function doesn't return anything but triggers the callback function",
    "Canonical_solution": "const axios = require(\"axios\");\n\nfunction postWebhook(url, event, data, triggerActivity) {\n    axios.post(url, {event, data}, {headers: {\"user-agent\": \"MySpeed/WebhookAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function sendToWebhook(url, event, data, triggerActivity) {\n  const payload = {\n    event: event,\n    data: data\n  };\n\n  axios.post(url, payload, {\n    headers: {\n      'User-Agent': 'Webhook-Client'\n    }\n  })\n  .then(() => {\n    triggerActivity(null);\n  })\n  .catch((error) => {\n    triggerActivity(error);\n  });\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Write a function that retrieves TV channel information from multiple regions, processes the data, and returns a unique list of channels based on their site IDs.\n\nFunction Description: The function `channels` makes HTTP GET requests to a TV channel API for multiple regions, collects channel data from all available pages for each region, and returns a deduplicated list of channels. It uses axios for HTTP requests and lodash for data processing.\n\nInput: None (The function uses hardcoded region IDs internally)\n\nOutput: An array of objects representing unique TV channels, where each object contains:\n- lang: string - Language code ('ru' for Russian)\n- name: string - Name of the TV channel\n- site_id: string/number - Unique identifier for the channel on the site\n\nThe output is deduplicated based on the site_id field using lodash's uniqBy function.",
    "Canonical_solution": "async function channels() {\n    const _ = require('lodash')\n    const axios = require('axios')\n\n    const regions = [5506, 1096, 1125, 285]\n    let channels = []\n    for (let region of regions) {\n        const totalPages = await getTotalPageCount(region)\n        const pages = Array.from(Array(totalPages).keys())\n        for (let page of pages) {\n            const data = await axios\n                .get('https://tv.mail.ru/ajax/channel/list/', {\n                    params: { page },\n                    headers: {\n                        cookie: `s=fver=0|geo=${region};`\n                    }\n                })\n                .then(r => r.data)\n                .catch(console.log)\n\n            data.channels.forEach(item => {\n                channels.push({\n                    lang: 'ru',\n                    name: item.name,\n                    site_id: item.id\n                })\n            })\n        }\n    }\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nimport axios from 'axios';\nimport _ from 'lodash';\n\nasync function channels() {\n  const regions = ['US', 'CA', 'GB', 'FR'];\n  const allChannels = [];\n\n  for (const region of regions) {\n    let page = 1;\n    let hasMore = true;\n\n    while (hasMore) {\n      const response = await axios.get(`https://api.example.com/channels?region=${region}&page=${page}`);\n      const { channels, hasMore: more } = response.data;\n      const transformed = channels.map(ch => ({\n        lang: 'ru',\n        name: ch.name,\n        site_id: ch.site_id\n      }));\n      allChannels.push(...transformed);\n      hasMore = more;\n      page++;\n    }\n  }\n\n  return _.uniqBy(allChannels, 'site_id');\n}\n```"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = \"https://bundlesize-store.now.sh/values\";\n    this.enabled = !!repo && !!token;\n  }\n\n  async get() {\n    if (!this.enabled) return {};\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    try {\n      const res = await fetch(`${this.url}?repo=${sanitizedRepo}`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${this.token}`\n        }\n      });\n      if (!res.ok) {\n        console.error(`API request failed with status ${res.status}`);\n        return {};\n      }\n      const data = await res.json();\n      return data;\n    } catch (error) {\n      console.error('Failed to get bundle sizes:', error);\n      return {};\n    }\n  }\n\n  set(values) {\n    if (!this.enabled) return;\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    fetch(this.url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`\n      },\n      body: JSON.stringify({\n        values,\n        repo: sanitizedRepo,\n        sha: this.sha\n      })\n    })\n    .then(response => {\n      if (!response.ok) {\n        console.error(`Failed to post bundle sizes: HTTP status ${response.status}`);\n      }\n    })\n    .catch(error => {\n      console.error('Failed to set bundle sizes:', error);\n    });\n  }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchCovidData() {\n  const url = 'https://data.gov.il/api/3/action/datastore_search';\n  const body = {\n    resource_id: 'your-resource-id',\n    q: 'covid-19',\n    limit: 100\n  };\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const jsonData = await response.json();\n    return parseData(jsonData);\n  } catch (error) {\n    console.error('Failed to fetch COVID-19 data:', error);\n    return null;\n  }\n}\n\nfunction parseData(data) {\n  if (!data || !data.result || !data.result.records) {\n    return null;\n  }\n  return data.result.records.map(record => ({\n    date: record.date,\n    tests: parseInt(record.tests) || 0,\n    positive: parseInt(record.positive) || 0,\n    hospitalized: parseInt(record.hospitalized) || 0\n  }));\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with optional path extension and error data, then triggers an activity callback based on the request's success or failure.\n\nFunction Description: The function `sendPing` is an asynchronous function that constructs a target URL by combining a base URL and an optional path, then sends an HTTP POST request using Axios. The request includes error data in the payload and a custom user-agent header. Depending on the request's outcome, it triggers a callback function (`triggerActivity`) with a success or failure indicator.\n\nInput:  \n- `url`: [String] - The base URL to which the request will be sent.  \n- `path`: [String] (optional) - An additional path segment to append to the base URL.  \n- `error`: [Any] - Data to be sent as the request payload (typically error information).  \n- `triggerActivity`: [Function] - A callback function to be executed after the request completes, receiving a boolean parameter indicating failure (true) or success (false/undefined).  \n\nOutput:  \n- None (The function's primary effect is the HTTP request and callback execution, not a direct return value).",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function sendPing(url, path, error, triggerActivity) {\n    if (url == null) return;\n    if (path) url += \"/\" + path;\n\n    await axios.post(url, error, {headers: {\"user-agent\": \"MySpeed/HealthAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendPing(url, path, error, triggerActivity) {\n  const targetUrl = url + (path || '');\n  try {\n    await axios.post(targetUrl, error, {\n      headers: { 'User-Agent': 'CustomUserAgent' }\n    });\n    triggerActivity(false);\n  } catch {\n    triggerActivity(true);\n  }\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a function to send emails using different email service providers (Mailgun and Sendgrid) through HTTP requests, with error handling and promise-based asynchronous operation.\n\nFunction Description: The function `sendMail` sends an email using a configured transporter (either Mailgun or Sendgrid). It wraps the transporter's send operation in a Promise for better async handling. The transporter is configured to make HTTP requests to the respective email service API.\n\nInput:\n- `to`: [String] - Recipient email address\n- `subject`: [String] - Email subject\n- `text`: [String] - Email body content\n- `options`: [Object] (optional) - Additional email options (defaults to empty object)\n\nOutput:\n- [Promise] - Resolves with email sending success info, or rejects with an error if sending fails.\n\n---\n\nClass Description: (Not applicable, as the reference code is at the function level)",
    "Canonical_solution": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    transporter.sendMail({\n      from: `\"${ config.plugins.email.name || '' }\" <${ config.plugins.email.email || config.plugins.email.username }>`,\n      to,\n      subject,\n      text,\n    }, (error, info) => {\n      if(error) {\n        return reject(error);\n      }\n      return resolve(info);\n    });\n  });\n}\n\n// External libraries and global variables used:\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst config = appRequire('services/config').all();\nlet transporter;\n\n// Mailgun implementation\ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  const form = new FormData();\n  form.append('from', options.from);\n  form.append('to', options.to);\n  form.append('subject', options.subject);\n  form.append('text', options.text);\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: form.getHeaders(),\n    data: form,\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};\n\n// Sendgrid implementation  \ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${ emailConfig.apiKey }`,\n    },\n    data: {\n      personalizations: [{\n        to: [{ email: options.to }]\n      }],\n      from: { email: options.from },\n      subject: options.subject,\n      content: [{\n        type: 'text/plain',\n        value: options.text,\n      }]\n    },\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    const service = options.service || 'mailgun'; // Assume service is determined from options\n    let url, headers, body;\n\n    if (service === 'mailgun') {\n      const domain = process.env.MAILGUN_DOMAIN;\n      const apiKey = process.env.MAILGUN_API_KEY;\n      url = `https://api.mailgun.net/v3/${domain}/messages`;\n      headers = {\n        Authorization: `Basic ${Buffer.from(`api:${apiKey}`).toString('base64')}`,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      body = new URLSearchParams({\n        from: process.env.FROM_EMAIL,\n        to,\n        subject,\n        text\n      });\n    } else if (service === 'sendgrid') {\n      const apiKey = process.env.SENDGRID_API_KEY;\n      url = 'https://api.sendgrid.com/v3/mail/send';\n      headers = {\n        Authorization: `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      };\n      body = JSON.stringify({\n        personalizations: [{ to: [{ email: to }], subject }],\n        from: { email: process.env.FROM_EMAIL },\n        content: [{ type: 'text/plain', value: text }]\n      });\n    } else {\n      return reject(new Error('Unsupported email service'));\n    }\n\n    fetch(url, {\n      method: 'POST',\n      headers,\n      body\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to send email');\n        }\n        return response.json();\n      })\n      .then(data => resolve(data))\n      .catch(err => reject(err));\n  });\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create an asynchronous function that fetches TV channel data from a specified API endpoint and processes it into a standardized format.\n\nFunction Description: The function makes an HTTP GET request to retrieve TV channel information from a remote API. It processes the response to extract relevant channel details (language, site ID, and name) and returns them in a structured array format. The function includes error handling to log any request failures.\n\nInput: None (The function uses a hardcoded API URL and parameters)\n\nOutput: An array of objects where each object represents a TV channel with the following properties:\n- lang: String - The language code for the channel (hardcoded as 'sq' in this case)\n- site_id: String - The unique identifier for the channel from the API\n- name: String - The display name of the channel",
    "Canonical_solution": "async function channels() {\n    const axios = require('axios')\n    const data = await axios\n        .get('https://www.tvim.tv/script/epg/category_channels?category=all&filter=playable')\n        .then(r => r.data)\n        .catch(console.log)\n\n    let channels = []\n    data.data.forEach(item => {\n        channels.push({\n            lang: 'sq',\n            site_id: item.epg_id,\n            name: item.name\n        })\n    })\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchTVChannels() {\n  const url = 'https://api.example.com/tv-channels';\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    const data = await response.json();\n    return data.map(channel => ({\n      lang: 'sq',\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    console.error('Failed to fetch TV channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Create a function that retrieves TV channel information from multiple providers and returns a list of unique channels.\n\nFunction Description: The function makes HTTP POST requests to a TV guide service for each provider, extracts channel information from the HTML response, and returns a deduplicated list of channels. It uses axios for HTTP requests, cheerio for HTML parsing, and lodash for deduplication.\n\nInput: None (The function uses hardcoded providers and parameters)\n\nOutput: Array of objects - Returns an array of channel objects containing language, name, and site_id (deduplicated by site_id). Each channel object has the following structure:\n{\n    lang: string,    // Language code ('fr' for French)\n    name: string,    // Channel name\n    site_id: string  // Unique identifier combining channel number and slug\n}",
    "Canonical_solution": "function async channels() {\n    const axios = require('axios')\n    const _ = require('lodash')\n\n    const providers = ['-1', '-2', '-3', '-4', '-5']\n\n    const channels = []\n    for (let provider of providers) {\n        const data = await axios\n            .post('https://www.tvcesoir.fr/guide/schedule', null, {\n                params: {\n                    provider,\n                    region: 'France',\n                    TVperiod: 'Night',\n                    date: dayjs().format('YYYY-MM-DD'),\n                    st: 0,\n                    u_time: 2155,\n                    is_mobile: 1\n                }\n            })\n            .then(r => r.data)\n            .catch(console.log)\n\n        const $ = cheerio.load(data)\n        $('.channelname').each((i, el) => {\n            const name = $(el).find('center > a:eq(1)').text()\n            const url = $(el).find('center > a:eq(1)').attr('href')\n            const [, number, slug] = url.match(/\\/(\\d+)\\/(.*)\\.html$/)\n\n            channels.push({\n                lang: 'fr',\n                name,\n                site_id: `${number}/${slug}`\n            })\n        })\n    }\n\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const axios = require('axios');\nconst cheerio = require('cheerio');\nconst _ = require('lodash');\n\nasync function getTVChannels() {\n    const providers = [\n        {\n            url: 'https://api.tvguide.com/channels',\n            postData: { country: 'CA', language: 'fr' }\n        },\n        {\n            url: 'https://tvlistings.net/api/channels',\n            postData: { region: 'QC', lang: 'fr' }\n        }\n    ];\n\n    const allChannels = [];\n\n    for (const provider of providers) {\n        const response = await axios.post(provider.url, provider.postData, {\n            headers: { 'Content-Type': 'application/json' }\n        });\n\n        const $ = cheerio.load(response.data);\n        $('div.channel').each((_, el) => {\n            const number = $(el).data('number');\n            const name = $(el).data('name');\n            const slug = $(el).data('slug');\n            allChannels.push({\n                lang: 'fr',\n                name,\n                site_id: `${number}-${slug}`\n            });\n        });\n    }\n\n    return _.unionBy(allChannels, 'site_id');\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function downloadVideo(url, desc) {\n   if (!url) throw new Error(\"URL is empty\");\n   try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const blob = await response.blob();\n      const link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.download = desc;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(link.href);\n   } catch (error) {\n      console.error(\"Download failed:\", error);\n   }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Tool {\r\n  constructor() {\r\n    this._node = null;\r\n    this._isSurge = false;\r\n    this._isQuanX = false;\r\n    this.isSurge = false;\r\n    this.isQuanX = false;\r\n    this.isResponse = typeof $response !== \"undefined\";\r\n\r\n    if (\r\n      typeof process !== \"undefined\" &&\r\n      process.versions &&\r\n      process.versions.node\r\n    ) {\r\n      this._node = {\r\n        fs: require(\"fs\"),\r\n        path: require(\"path\"),\r\n        https: require(\"https\"),\r\n        http: require(\"http\"),\r\n        url: require(\"url\"),\r\n      };\r\n      this._isSurge = false;\r\n      this._isQuanX = false;\r\n    } else if (typeof $httpClient !== \"undefined\") {\r\n      this._isSurge = true;\r\n      this._isQuanX = false;\r\n    } else if (typeof $request !== \"undefined\") {\r\n      this._isSurge = false;\r\n      this._isQuanX = true;\r\n    } else {\r\n      this._isSurge = false;\r\n      this._isQuanX = false;\r\n    }\r\n    this.isSurge = this._isSurge;\r\n    this.isQuanX = this._isQuanX;\r\n  }\r\n\r\n  notify(title, subtitle, message, option) {\r\n    if (this.isSurge) {\r\n      $notify(title, subtitle, message);\r\n    } else if (this.isQuanX) {\r\n      $notify(title, subtitle, message, option);\r\n    } else if (this._node) {\r\n      console.log(`Notification: ${title}, ${subtitle}, ${message}`);\r\n    }\r\n  }\r\n\r\n  write(value, key) {\r\n    if (this.isSurge) {\r\n      return $prefs.set(value, key);\r\n    } else if (this.isQuanX) {\r\n      return $persistentStore.write(value, key);\r\n    } else if (this._node) {\r\n      try {\r\n        const dataPath = this._node.path.join(__dirname, \"storage.json\");\r\n        let data = {};\r\n        if (this._node.fs.existsSync(dataPath)) {\r\n          const dataStr = this._node.fs.readFileSync(dataPath, \"utf8\");\r\n          data = JSON.parse(dataStr);\r\n        }\r\n        data[key] = value;\r\n        this._node.fs.writeFileSync(dataPath, JSON.stringify(data));\r\n        return true;\r\n      } catch (e) {\r\n        console.error(e);\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  read(key) {\r\n    if (this.isSurge) {\r\n      return $prefs.get(key) || \"\";\r\n    } else if (this.isQuanX) {\r\n      return $persistentStore.read(key) || \"\";\r\n    } else if (this._node) {\r\n      try {\r\n        const dataPath = this._node.path.join(__dirname, \"storage.json\");\r\n        if (this._node.fs.existsSync(dataPath)) {\r\n          const dataStr = this._node.fs.readFileSync(dataPath, \"utf8\");\r\n          const data = JSON.parse(dataStr);\r\n          return data[key] || \"\";\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n        return \"\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  get(options, callback) {\r\n    let opts;\r\n    if (typeof options === \"string\") {\r\n      opts = { url: options };\r\n    } else {\r\n      opts = options;\r\n    }\r\n\r\n    if (this.isSurge) {\r\n      $httpClient.get(opts, (err, resp, body) => {\r\n        const res = this._status(resp);\r\n        res.body = body;\r\n        callback(err, res, body);\r\n      });\r\n    } else if (this.isQuanX) {\r\n      opts.method = \"GET\";\r\n      $request(opts, (resp) => {\r\n        const res = this._status(resp);\r\n        callback(null, res, resp.body);\r\n      });\r\n    } else if (this._node) {\r\n      const parsed = this._node.url.parse(opts.url);\r\n      const requestOptions = {\r\n        ...parsed,\r\n        method: \"GET\",\r\n        headers: opts.headers || {},\r\n      };\r\n      const lib =\r\n        parsed.protocol === \"https:\" ? this._node.https : this._node.http;\r\n      const req = lib.request(requestOptions, (res) => {\r\n        let data = \"\";\r\n        res.on(\"data\", (chunk) => {\r\n          data += chunk;\r\n        });\r\n        res.on(\"end\", () => {\r\n          const resp = {\r\n            statusCode: res.statusCode,\r\n            headers: res.headers,\r\n            body: data,\r\n          };\r\n          const normalized = this._status(resp);\r\n          callback(null, normalized, data);\r\n        });\r\n      });\r\n      req.on(\"error\", (e) => {\r\n        callback(e, null, null);\r\n      });\r\n      req.end();\r\n    }\r\n  }\r\n\r\n  post(options, callback) {\r\n    let opts;\r\n    if (typeof options === \"string\") {\r\n      opts = { url: options };\r\n    } else {\r\n      opts = options;\r\n    }\r\n\r\n    if (this.isSurge) {\r\n      $httpClient.post(opts, (err, resp, body) => {\r\n        const res = this._status(resp);\r\n        res.body = body;\r\n        callback(err, res, body);\r\n      });\r\n    } else if (this.isQuanX) {\r\n      opts.method = \"POST\";\r\n      if (opts.headers) {\r\n        opts.headers[\"Content-Type\"] =\r\n          opts.headers[\"Content-Type\"] || \"application/x-www-form-urlencoded\";\r\n      }\r\n      $request(opts, (resp) => {\r\n        const res = this._status(resp);\r\n        callback(null, res, resp.body);\r\n      });\r\n    } else if (this._node) {\r\n      const parsed = this._node.url.parse(opts.url);\r\n      const requestOptions = {\r\n        ...parsed,\r\n        method: \"POST\",\r\n        headers: opts.headers || {},\r\n      };\r\n      const lib =\r\n        parsed.protocol === \"https:\" ? this._node.https : this._node.http;\r\n      const req = lib.request(requestOptions, (res) => {\r\n        let data = \"\";\r\n        res.on(\"data\", (chunk) => {\r\n          data += chunk;\r\n        });\r\n        res.on(\"end\", () => {\r\n          const resp = {\r\n            statusCode: res.statusCode,\r\n            headers: res.headers,\r\n            body: data,\r\n          };\r\n          const normalized = this._status(resp);\r\n          callback(null, normalized, data);\r\n        });\r\n      });\r\n      req.on(\"error\", (e) => {\r\n        callback(e, null, null);\r\n      });\r\n      if (opts.body) {\r\n        req.write(opts.body);\r\n      }\r\n      req.end();\r\n    }\r\n  }\r\n\r\n  _status(response) {\r\n    if (!response) return { statusCode: 500, headers: {}, body: \"\" };\r\n    let statusCode = response.statusCode || response.status || 500;\r\n    let headers = response.headers || {};\r\n    let body = response.body || response.data || \"\";\r\n    return { statusCode, headers, body };\r\n  }\r\n}"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a function that handles HTTP requests using XMLHttpRequest in JavaScript, including request configuration, progress tracking, and response handling.\n\nFunction Description: The function `makeRequest` initiates and manages an HTTP request using XMLHttpRequest. It configures the request with provided settings, tracks upload/download progress, handles timeouts, and processes the response. The function supports both successful and error responses, with appropriate callbacks for each scenario.\n\nInput:\n- `resolve`: [Function] - A callback function to handle the final resolution of the request (either success or error).\n- `config`: [Object] - Configuration object containing properties to set on the XMLHttpRequest instance.\n- `method`: [String] - HTTP method for the request (e.g., 'GET', 'POST').\n- `fullUrl`: [String] - The complete URL for the request.\n- `headers`: [Object] - Key-value pairs representing HTTP headers to set on the request.\n- `payload`: [Any] - Data to send with the request (for POST/PUT requests).\n- `defaultTimeout`: [Number] - Timeout duration in milliseconds for the request.\n- `xhrExtra`: [Any] - Additional data to pass to error/timeout handlers.\n- Event handlers:\n  - `onRequestProgress`: [Function] - Callback for upload progress events.\n  - `onRequestStart`: [Function] - Callback when the request starts.\n  - `onRequestEnd`: [Function] - Callback when the request ends.\n  - `onResponseStart`: [Function] - Callback when the response starts.\n  - `onResponseProgress`: [Function] - Callback for download progress events.\n  - `onResponseEnd`: [Function] - Callback when the response ends.\n  - `onTimeoutError`: [Function] - Callback for timeout errors.\n  - `onSuccess`: [Function] - Callback for successful responses.\n  - `onError`: [Function] - Callback for error responses.\n  - `onBeforeRequest`: [Function] - Callback before sending the request.\n  - `createAbortListener`: [Function] - Creates a listener for abort events.\n  - `parseResponse`: [Function] - Parses successful response data.\n  - `parseErrorResponse`: [Function] - Parses error response data.\n  - `getResponseHeaders`: [Function] - Parses raw response headers.\n\nOutput: None (The function uses callbacks to handle results asynchronously).",
    "Canonical_solution": "function makeRequest(resolve) {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = defaultTimeout;\n\n    const abort = () => xhr.abort();\n\n    Object.entries(config).forEach(([name, value]) => {\n        xhr[name] = value;\n    });\n\n    xhr.open(method, fullUrl, true);\n\n    Object.entries(headers).forEach(([name, value]) => xhr.setRequestHeader(name, value as string));\n\n    const unmountListener = createAbortListener(0, xhrExtra, abort, resolve);\n\n    xhr.upload.onprogress = onRequestProgress;\n\n    xhr.onloadstart = (): void => {\n        onRequestEnd();\n        onResponseStart();\n    };\n\n    xhr.onprogress = onResponseProgress;\n\n    xhr.onloadend = () => {\n        onResponseEnd();\n        unmountListener();\n    };\n\n    xhr.ontimeout = () => onTimeoutError(0, xhrExtra, resolve);\n\n    xhr.onreadystatechange = (e: Event) => {\n        const event = e as unknown as ProgressEvent<XMLHttpRequest>;\n        const finishedState = 4;\n\n        if (event.target && event.target.readyState === finishedState) {\n            const { status } = event.target;\n            const success = String(status).startsWith(\"2\") || String(status).startsWith(\"3\");\n            const responseHeaders = getResponseHeaders(xhr.getAllResponseHeaders());\n\n            if (success) {\n                const data = parseResponse(event.target.response);\n                onSuccess(data, status, { headers: responseHeaders }, resolve);\n            } else {\n                const data = parseErrorResponse(event.target.response);\n                onError(data, status, { headers: responseHeaders }, resolve);\n            }\n        }\n    };\n\n    onBeforeRequest();\n    onRequestStart();\n\n    xhr.send(payload);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function makeRequest(resolve, config, method, fullUrl, headers, payload, defaultTimeout, xhrExtra, onRequestProgress, onRequestStart, onRequestEnd, onResponseStart, onResponseProgress, onResponseEnd, onTimeoutError, onSuccess, onError, onBeforeRequest, createAbortListener, parseResponse, parseErrorResponse, getResponseHeaders) {\n  const xhr = new XMLHttpRequest();\n  Object.assign(xhr, config);\n  if (xhr.timeout === undefined) {\n    xhr.timeout = defaultTimeout;\n  }\n\n  let responseStarted = false;\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 2) {\n      if (onResponseStart) onResponseStart(xhr, xhrExtra);\n    } else if (xhr.readyState === 3) {\n      if (!responseStarted) {\n        if (onResponseStart) onResponseStart(xhr, xhrExtra);\n        responseStarted = true;\n      }\n      if (onResponseProgress) onResponseProgress(xhr, xhrExtra);\n    } else if (xhr.readyState === 4) {\n      if (onResponseEnd) onResponseEnd(xhr, xhrExtra);\n      if (onRequestEnd) onRequestEnd(xhr, xhrExtra);\n\n      let responseData = null;\n      if (xhr.status >= 200 && xhr.status < 300) {\n        try {\n          responseData = parseResponse ? parseResponse(xhr) : null;\n        } catch (e) {}\n        if (onSuccess) onSuccess(responseData, xhr, xhrExtra);\n      } else {\n        try {\n          responseData = parseErrorResponse ? parseErrorResponse(xhr) : null;\n        } catch (e) {}\n        if (onError) onError(responseData, xhr, xhrExtra);\n      }\n      resolve(responseData);\n    }\n  };\n\n  xhr.ontimeout = function () {\n    if (onTimeoutError) onTimeoutError(xhr, xhrExtra);\n    resolve(null);\n  };\n\n  xhr.onerror = function () {\n    let errorData = null;\n    try {\n      errorData = parseErrorResponse ? parseErrorResponse(xhr) : null;\n    } catch (e) {}\n    if (onError) onError(errorData, xhr, xhrExtra);\n    resolve(errorData);\n  };\n\n  xhr.onabort = function () {\n    let errorData = null;\n    try {\n      errorData = parseErrorResponse ? parseErrorResponse(xhr) : null;\n    } catch (e) {}\n    if (onError) onError(errorData, xhr, xhrExtra);\n    resolve(errorData);\n  };\n\n  if (onRequestProgress) {\n    xhr.upload.onprogress = function (event) {\n      onRequestProgress(event, xhrExtra);\n    };\n  }\n\n  if (onResponseProgress) {\n    xhr.onprogress = function (event) {\n      onResponseProgress(event, xhrExtra);\n    };\n  }\n\n  if (createAbortListener) {\n    xhr.addEventListener('abort', createAbortListener(xhr, xhrExtra));\n  }\n\n  if (onBeforeRequest) onBeforeRequest(xhr, xhrExtra);\n\n  xhr.open(method, fullUrl);\n\n  for (const [key, value] of Object.entries(headers)) {\n    xhr.setRequestHeader(key, value);\n  }\n\n  if (onRequestStart) onRequestStart(xhr, xhrExtra);\n\n  xhr.send(payload);\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement a request service class that handles HTTP requests including downloading files and performing various HTTP methods (GET, PUT, POST) with proper headers and data handling.\n\nClass Description: The BasicRequestService class implements IRequestService interface to provide HTTP request functionality. It uses XMLHttpRequest for file downloads and umi-request for standard HTTP methods. The class handles permissions checking before downloads and supports configurable request options.\n\nAttributes:\n- requestMethod: RequestMethod - An instance of umi-request's RequestMethod used for standard HTTP requests\n\nMethods:\n- download(url: string) -> Promise<Blob> - Downloads a file from the specified URL after checking permissions. Returns a Promise that resolves with the downloaded Blob.\n  - url: string - The URL of the file to download\n  - Returns: Promise<Blob> - A promise resolving to the downloaded file as a Blob\n\n- request(url: string, options: TRequestOption) -> Promise<any> - Performs an HTTP request based on the specified options (method, headers, data).\n  - url: string - The target URL for the request\n  - options: TRequestOption - Configuration object containing:\n    - method: string - HTTP method ('get', 'put', or 'post')\n    - headers: object - Optional request headers\n    - data: any - Optional request payload\n    - requestType: string - Optional request type for POST requests\n  - Returns: Promise<any> - A promise resolving to the response data\n  - Throws: Error - When an unsupported request method is specified",
    "Canonical_solution": "import { IPermissionsService } from './../../common/permissions';\nimport { extend, RequestMethod } from 'umi-request';\nimport { IRequestService, IBasicRequestService, TRequestOption } from '@/service/common/request';\nimport Container, { Service } from 'typedi';\n\nclass BasicRequestService implements IRequestService {\n  private requestMethod: RequestMethod;\n  constructor() {\n    this.requestMethod = extend({});\n  }\n\n  async download(url: string) {\n    const permissionsService = Container.get(IPermissionsService);\n    await permissionsService.request({ origins: [`${new URL(url).origin}/*`] });\n    return new Promise<Blob>(resolve => {\n      let oReq = new XMLHttpRequest();\n      oReq.open('GET', url, true);\n      oReq.responseType = 'blob';\n      oReq.onload = function() {\n        let blob = oReq.response;\n        resolve(blob);\n      };\n      oReq.send();\n    });\n  }\n\n  request(url: string, options: TRequestOption) {\n    switch (options.method) {\n      case 'get': {\n        return this.requestMethod.get(url, {\n          headers: options.headers,\n        });\n      }\n      case 'put': {\n        return this.requestMethod.put(url, {\n          headers: options.headers,\n          data: options.data,\n        });\n      }\n      case 'post': {\n        return this.requestMethod.post(url, {\n          headers: options.headers,\n          data: options.data,\n          requestType: options.requestType,\n        });\n      }\n      default: {\n        throw new Error('Unsupported request method');\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class BasicRequestService implements IRequestService {\n  private requestMethod: RequestMethod;\n\n  private async checkPermissions(): Promise<boolean> {\n    return true;\n  }\n\n  download(url: string): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      this.checkPermissions().then(allowed => {\n        if (!allowed) {\n          reject(new Error('Permission denied'));\n          return;\n        }\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'blob';\n        xhr.open('GET', url, true);\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            resolve(xhr.response);\n          } else {\n            reject(new Error(`Download failed with status ${xhr.status}`));\n          }\n        };\n        xhr.onerror = () => {\n          reject(new Error('Network error'));\n        };\n        xhr.ontimeout = () => {\n          reject(new Error('Request timeout'));\n        };\n        xhr.send();\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  request(url: string, options: TRequestOption): Promise<any> {\n    const { method, headers, data, requestType } = options;\n\n    if (method === 'get') {\n      return this.requestMethod.get(url, {\n        headers,\n      });\n    } else if (method === 'post') {\n      const postHeaders = { ...headers };\n      if (requestType) {\n        postHeaders['Content-Type'] = this.getContentType(requestType);\n      }\n      return this.requestMethod.post(url, {\n        data,\n        headers: postHeaders,\n      });\n    } else if (method === 'put') {\n      return this.requestMethod.put(url, {\n        data,\n        headers,\n      });\n    } else {\n      throw new Error(`Unsupported HTTP method: ${method}`);\n    }\n  }\n\n  private getContentType(requestType: string): string {\n    switch (requestType) {\n      case 'json':\n        return 'application/json';\n      case 'form':\n        return 'application/x-www-form-urlencoded';\n      default:\n        return 'application/json';\n    }\n  }\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nconst http = require('http');\nconst https = require('https');\nconst URL = require('url').URL;\nconst { PassThrough } = require('stream');\n\nclass DataManURL {\n  constructor(url, type, options) {\n    this.url = url;\n    this._type = null;\n    this.urlOpts = options || {};\n    this._size = null;\n  }\n\n  getBuffer(callback) {\n    const parsedUrl = new URL(this.url);\n    const mod = parsedUrl.protocol === 'https:' ? https : http;\n    const requestOptions = Object.assign({\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),\n      path: parsedUrl.pathname + parsedUrl.search,\n      method: 'GET',\n    }, this.urlOpts);\n    let data = Buffer.from([]);\n    let errored = false;\n    const req = mod.request(requestOptions, (res) => {\n      if (res.statusCode >= 400) {\n        callback(new Error(`HTTP error ${res.statusCode}: ${res.statusMessage}`));\n        return;\n      }\n      res.on('data', (chunk) => {\n        data = Buffer.concat([data, chunk]);\n      });\n      res.on('end', () => {\n        this._type = res.headers['content-type'] || null;\n        this._size = data.byteLength;\n        callback(null, data);\n      });\n    });\n    req.on('error', (err) => {\n      errored = true;\n      callback(err);\n    });\n    req.end();\n  }\n\n  getDataUri(callback) {\n    this.getBuffer((err, buffer) => {\n      if (err) return callback(err);\n      callback(null, `data:${this._type || ''};base64,${buffer.toString('base64')}`);\n    });\n  }\n\n  createReadStream() {\n    const parsedUrl = new URL(this.url);\n    const mod = parsedUrl.protocol === 'https:' ? https : http;\n    const requestOptions = Object.assign({\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),\n      path: parsedUrl.pathname + parsedUrl.search,\n      method: 'GET',\n    }, this.urlOpts);\n    const passThrough = new PassThrough();\n    const req = mod.request(requestOptions, (res) => {\n      if (res.statusCode >= 400) {\n        passThrough.destroy(new Error(`HTTP error ${res.statusCode}: ${res.statusMessage}`));\n        return;\n      }\n      res.pipe(passThrough);\n      res.on('end', () => {\n        passThrough.end();\n      });\n    });\n    req.on('error', (err) => {\n      passThrough.destroy(err);\n    });\n    req.end();\n    return passThrough;\n  }\n\n  size(callback) {\n    if (this._size !== null) {\n      return callback(null, this._size);\n    }\n    const parsedUrl = new URL(this.url);\n    const mod = parsedUrl.protocol === 'https:' ? https : http;\n    const requestOptions = Object.assign({\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),\n      path: parsedUrl.pathname + parsedUrl.search,\n      method: 'HEAD',\n    }, this.urlOpts);\n    const req = mod.request(requestOptions, (res) => {\n      const contentLength = res.headers['content-length'];\n      if (contentLength) {\n        this._size = parseInt(contentLength, 10);\n        callback(null, this._size);\n      } else {\n        this.getBuffer((err, buffer) => {\n          if (err) return callback(err);\n          callback(null, buffer.byteLength);\n        });\n      }\n    });\n    req.on('error', (err) => {\n      this.getBuffer((err, buffer) => {\n        if (err) return callback(err);\n        callback(null, buffer.byteLength);\n      });\n    });\n    req.end();\n  }\n\n  type() {\n    return this._type;\n  }\n}\n```"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a function to handle form submission asynchronously using XMLHttpRequest in JavaScript. The function should prevent default form submission, process form data, send it to a server via POST request, and handle the server's response to display a thank-you message upon successful submission.\n\nFunction Description: The function `handleFormSubmit` intercepts form submission events, validates the form data (checking for honeypot fields), disables all buttons during submission, sends the form data to a specified URL via POST request, and processes the server's response to update the UI accordingly.\n\nInput: \n- `event`: [Event Object] - The form submission event that triggers this function. The event object contains the target form element and allows prevention of default submission behavior.\n\nOutput: \n- None (void) - The function does not return any value but performs side effects including:\n  - Preventing default form submission\n  - Disabling form buttons during submission\n  - Sending form data to the server\n  - Updating the UI based on server response (resetting form and showing thank-you message)",
    "Canonical_solution": "function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n\n    if (formData.honeypot) {\n        return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            form.reset();\n            var formElements = form.querySelector(\".form-elements\")\n            if (formElements) {\n                formElements.style.display = \"none\";\n            }\n            var thankYouMessage = form.querySelector(\".thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n        }\n    };\n    var encoded = Object.keys(data).map(function(k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n    }).join('&');\n    xhr.send(encoded);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function handleFormSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new FormData(form);\n    const honeypotValue = formData.get('honeypot');\n    if (honeypotValue && honeypotValue.trim() !== '') return;\n    const buttons = form.querySelectorAll('button');\n    buttons.forEach(button => button.disabled = true);\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', form.action, true);\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n            buttons.forEach(button => button.disabled = false);\n            if (xhr.status === 200) {\n                form.innerHTML = '<div class=\"thank-you\">Thank you for submitting the form!</div>';\n            }\n        }\n    };\n    xhr.send(formData);\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function sendPostRequest() {\n  const url = 'https://example.com/api/endpoint';\n  const data = new URLSearchParams();\n  data.append('username', 'testuser');\n  data.append('token', 'abc123');\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: data.toString(),\n      credentials: 'include'\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result = await response.text();\n    console.log('Server response:', result);\n  } catch (error) {\n    console.error('Request failed:', error);\n  }\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n    if (data === 'xhr') {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', 'https://example.com', true);\n        xhr.onload = function() {\n            if (xhr.status >= 200 && xhr.status < 400) {\n                sender.postMessage(xhr.responseText);\n            } else {\n                sender.postMessage('XHR Error: ' + xhr.status);\n            }\n        };\n        xhr.onerror = function() {\n            sender.postMessage('XHR Network Error');\n        };\n        xhr.send();\n    } else if (data === 'fetch') {\n        fetch('https://example.com')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('HTTP error ' + response.status);\n                }\n                return response.text();\n            })\n            .then(text => sender.postMessage(text))\n            .catch(error => sender.postMessage('Fetch Error: ' + error.message));\n    } else if (data === 'importScripts') {\n        try {\n            importScripts('https://example.com/test.js');\n            sender.postMessage('importScripts executed');\n        } catch (e) {\n            sender.postMessage('importScripts Error: ' + e.message);\n        }\n    } else {\n        sender.postMessage('Unexpected message');\n    }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function loadYamlUrl(url) {\n  fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.text();\n    })\n    .then(yamlText => {\n      yamlToForm(yamlText);\n      console.log(yamlText);\n    })\n    .catch(error => {\n      console.error('Error fetching YAML:', error);\n    });\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nconst http = require('http');\nconst https = require('https');\nconst URL = require('url').URL;\n\nclass URLExpander {\n  constructor() {\n    this.map = {\n      'is.gd': 'isgd',\n      'goo.gl': 'goo',\n      'budurl.com': 'budurl',\n      'snipurl.com': 'snipurl'\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      isgd: this.expandIsGd.bind(this),\n      goo: this.expandGooGl.bind(this)\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (depth > 10) {\n      return callback({ ...args, err: new Error('Max depth exceeded') });\n    }\n    if (seen[url]) {\n      return callback({ ...args, err: new Error('Cycle detected') });\n    }\n    const newSeen = { ...seen, [url]: true };\n    const parsedUrl = new URL(url);\n    const domain = parsedUrl.hostname;\n    const service = this.map[domain];\n    if (service && this.APIs[service]) {\n      this.APIs[service](url, (err, expandedUrl, headers) => {\n        if (err) {\n          return callback({ ...args, err });\n        }\n        this.expand({ url: expandedUrl, depth: depth + 1, seen: newSeen, headers }, callback);\n      });\n    } else {\n      this.followRedirect(url, (err, redirectUrl, headers) => {\n        if (err) {\n          return callback({ ...args, err });\n        }\n        if (!redirectUrl) {\n          return callback({ ...args, url, depth, seen: newSeen, urlp: parsedUrl, headers });\n        }\n        this.expand({ url: redirectUrl, depth: depth + 1, seen: newSeen, headers }, callback);\n      });\n    }\n  }\n\n  followRedirect(url, callback) {\n    const parsed = new URL(url);\n    const mod = parsed.protocol === 'https:' ? https : http;\n    const req = mod.get(parsed, (res) => {\n      const headers = {};\n      for (const name of Object.keys(res.headers)) {\n        headers[name] = res.headers[name];\n      }\n      if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n        callback(null, res.headers.location, headers);\n      } else {\n        callback(null, null, headers);\n      }\n    });\n    req.on('error', (err) => callback(err));\n    req.setTimeout(this.timeout, () => {\n      req.destroy(new Error('Request timeout'));\n    });\n    req.end();\n  }\n\n  expandIsGd(shortUrl, callback) {\n    const apiUrl = `https://is.gd/api.php?shorturl=${encodeURIComponent(shortUrl)}`;\n    https.get(apiUrl, (res) => {\n      let data = '';\n      const headers = {};\n      for (const name of Object.keys(res.headers)) {\n        headers[name] = res.headers[name];\n      }\n      res.on('data', (chunk) => data += chunk);\n      res.on('end', () => {\n        if (res.statusCode === 200) {\n          callback(null, data.trim(), headers);\n        } else {\n          callback(new Error('Failed to expand is.gd URL'), null);\n        }\n      });\n    }).on('error', (err) => callback(err)).setTimeout(this.timeout, () => {\n      this.emit('error', new Error('Timeout'));\n    });\n  }\n\n  expandGooGl(shortUrl, callback) {\n    this.followRedirect(shortUrl, callback);\n  }\n}\n```"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a function that sets up and configures an Express server with webpack middleware, proxy support, and static file serving capabilities.\n\nFunction Description: The function `createServer` initializes an Express application, configures it with webpack development and hot-reload middleware, sets up proxy routes based on a proxy table, enables history API fallback for single-page applications, serves static files, and starts the server on a specified port.\n\nInput: \n- None (The function relies on external configurations like `webpackConfig`, `proxyTable`, `config.dev`, and `port` which should be defined in the scope where the function is called)\n\nOutput: \n- Returns an HTTP server instance that is listening on the specified port, configured with all the middleware and routes.\n\nNote: The function assumes the following external dependencies are available:\n- `express`: The Express framework\n- `http-proxy-middleware`: For proxy functionality\n- `webpack` and related middlewares (`webpack-dev-middleware`, `webpack-hot-middleware`)\n- `connect-history-api-fallback`: For SPA history API fallback\n- `path`: Node.js path module\n- External configuration objects: `webpackConfig`, `proxyTable`, `config.dev`, `port`",
    "Canonical_solution": "const express = require('express')\nconst proxyMiddleware = require('http-proxy-middleware')\n\nfunction createServer() {\n  const app = express()\n  const compiler = webpack(webpackConfig)\n\n  const devMiddleware = require('webpack-dev-middleware')(compiler, {\n    publicPath: webpackConfig.output.publicPath,\n    quiet: true,\n  })\n\n  const hotMiddleware = require('webpack-hot-middleware')(compiler, {\n    log: false,\n    heartbeat: 2000,\n  })\n\n  app.use(hotMiddleware)\n\n  Object.keys(proxyTable).forEach(function(context) {\n    let options = proxyTable[context]\n    if (typeof options === 'string') {\n      options = {target: options}\n    }\n    app.use(proxyMiddleware(options.filter || context, options))\n  })\n\n  app.use(require('connect-history-api-fallback')()))\n  app.use(devMiddleware)\n\n  const staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\n  app.use(staticPath, express.static('./static'))\n\n  var server = app.listen(port)\n  return server\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "function createServer() {\n  const app = express();\n  const compiler = webpack(webpackConfig);\n\n  app.use(historyApiFallback(config.dev.history));\n\n  Object.keys(proxyTable).forEach(context => {\n    const options = proxyTable[context];\n    app.use(proxyMiddleware(context, options));\n  });\n\n  app.use(express.static(path.join(__dirname, config.dev.assetsSubDirectory)));\n\n  const devMiddleware = webpackDevMiddleware(compiler, {\n    publicPath: webpackConfig.output.publicPath,\n    ...config.dev.devMiddleware\n  });\n  app.use(devMiddleware);\n\n  const hotMiddleware = webpackHotMiddleware(compiler, {\n    ...config.dev.hotMiddleware\n  });\n  app.use(hotMiddleware);\n\n  const server = require('http').createServer(app);\n  server.listen(port, () => {\n    console.log(`Server is running at http://localhost:${port}`);\n  });\n\n  return server;\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "class HTTPServer {\n  constructor(port) {\n    const express = require('express');\n    const multer = require('multer');\n\n    this.app = express();\n    this.port = port;\n    this.server = null;\n\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.upload = multer({ dest: 'uploads/' });\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.port, resolve).on('error', reject);\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close();\n      this.server = null;\n    }\n  }\n\n  addRoute(method, path, handler) {\n    if (method === 'post') {\n      this.app[method](path, this.upload.single('file'), handler);\n    } else {\n      this.app[method](path, handler);\n    }\n  }\n\n  get(path, handler) {\n    this.addRoute('get', path, handler);\n  }\n\n  post(path, handler) {\n    this.addRoute('post', path, handler);\n  }\n\n  put(path, handler) {\n    this.addRoute('put', path, handler);\n  }\n\n  delete(path, handler) {\n    this.addRoute('delete', path, handler);\n  }\n\n  patch(path, handler) {\n    this.addRoute('patch', path, handler);\n  }\n\n  options(path, handler) {\n    this.addRoute('options', path, handler);\n  }\n\n  trace(path, handler) {\n    this.addRoute('trace', path, handler);\n  }\n\n  head(path, handler) {\n    this.addRoute('head', path, handler);\n  }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Implement a Twitter HTTP client class in JavaScript that handles API requests to Twitter, including request construction, execution, and response processing with error handling and clock synchronization.\n\nClass Description: The TwitterHTTPClient class provides methods to interact with Twitter's REST API. It handles HTTP requests (GET/POST), manages authentication, processes responses, and maintains clock synchronization with Twitter's servers.\n\nAttributes:\n- config: [Object] - Configuration object containing API credentials and settings\n- _twitter_time_minus_local_time_ms: [Number] - Time difference between Twitter's server time and local time in milliseconds\n\nMethods:\n- constructor(config) -> [TwitterHTTPClient] - Initializes the client with configuration\n- request(method, path, params, callback) -> [Promise] - Makes HTTP requests to Twitter API\n- _doRestApiRequest(reqOpts, twitOptions, method, callback) -> [void] - Executes the actual HTTP request\n- _updateClockOffsetFromResponse(resp) -> [void] - Updates the clock offset based on Twitter's server time\n\nMethod Details:\n1. request(method, path, params, callback)\n   - Input:\n     - method: [String] - HTTP method ('GET' or 'POST')\n     - path: [String] - API endpoint path\n     - params: [Object] - Request parameters\n     - callback: [Function] - Callback function for handling response\n   - Output: [Promise] - Resolves with response data or rejects with error\n\n2. _doRestApiRequest(reqOpts, twitOptions, method, callback)\n   - Input:\n     - reqOpts: [Object] - Request options including URL and headers\n     - twitOptions: [Object] - Twitter-specific options\n     - method: [String] - HTTP method\n     - callback: [Function] - Callback for handling response\n   - Output: [void] - Calls callback with response data or error\n\n3. _updateClockOffsetFromResponse(resp)\n   - Input:\n     - resp: [Object] - HTTP response object\n   - Output: [void] - Updates internal clock offset value",
    "Canonical_solution": "var request = require('request');\nvar helpers = require('./helpers');\n\nclass TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params, callback) {\n    var self = this;\n    assert(method == 'GET' || method == 'POST');\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      var _returnErrorToUser = function (err) {\n        if (callback && typeof callback === 'function') {\n          callback(err, null, null);\n        }\n        reject(err);\n      }\n\n      self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n        if (err) {\n          _returnErrorToUser(err);\n          return;\n        }\n\n        var twitOptions = (params && params.twit_options) || {};\n\n        process.nextTick(function () {\n          self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n            self._updateClockOffsetFromResponse(resp);\n\n            if (self.config.trusted_cert_fingerprints) {\n              if (!resp.socket.authorized) {\n                var authErrMsg = resp.socket.authorizationError.toString();\n                var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n              var fingerprint = resp.socket.getPeerCertificate().fingerprint;\n              var trustedFingerprints = self.config.trusted_cert_fingerprints;\n              if (trustedFingerprints.indexOf(fingerprint) === -1) {\n                var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.',\n                                         trustedFingerprints.join(','), fingerprint);\n                var err = new Error(errMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n            }\n\n            if (callback && typeof callback === 'function') {\n              callback(err, parsedBody, resp);\n            }\n\n            resolve({ data: parsedBody, resp: resp });\n            return;\n          });\n        });\n      });\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    var request_method = request[method.toLowerCase()];\n    var req = request_method(reqOpts);\n\n    var body = '';\n    var response = null;\n\n    var onRequestComplete = function () {\n      if (body !== '') {\n        try {\n          body = JSON.parse(body);\n        } catch (jsonDecodeError) {\n          var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n          err.statusCode = response ? response.statusCode: null;\n          err.allErrors.concat({error: jsonDecodeError.toString()});\n          callback(err, body, response);\n          return;\n        }\n      }\n\n      if (typeof body === 'object' && (body.error || body.errors)) {\n        var err = helpers.makeTwitError('Twitter API Error');\n        err.statusCode = response ? response.statusCode: null;\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n\n      callback(err, body, response);\n    }\n\n    req.on('response', function (res) {\n      response = res;\n      req.on('data', function (chunk) {\n        body += chunk.toString('utf8');\n      });\n      req.on('end', function () {\n        onRequestComplete();\n      });\n    });\n\n    req.on('error', function (err) {\n      if (twitOptions.retry &&\n          STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1\n      ) {\n        self.request(method, path, params, callback);\n        return;\n      } else {\n        err.statusCode = null;\n        err.code = null;\n        err.allErrors = [];\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n    });\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    var self = this;\n    if (resp && resp.headers && resp.headers.date &&\n        new Date(resp.headers.date).toString() !== 'Invalid Date'\n    ) {\n      var twitterTimeMs = new Date(resp.headers.date).getTime();\n      self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params, callback) {\n    const url = new URL(this.config.baseUrl + path);\n    if (method === 'GET') {\n      Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n    }\n    const options = {\n      method,\n      headers: {\n        'Authorization': `Bearer ${this.config.auth.bearerToken}`,\n        'Content-Type': 'application/json'\n      }\n    };\n    if (method === 'POST') {\n      options.body = JSON.stringify(params);\n    }\n    return new Promise((resolve, reject) => {\n      this._doRestApiRequest(url.toString(), options, method, (err, data) => {\n        if (err) reject(err);\n        else resolve(data);\n      });\n    });\n  }\n\n  _doRestApiRequest(url, options, method, callback) {\n    fetch(url, options)\n      .then(response => {\n        const dateHeader = response.headers.get('Date');\n        this._updateClockOffsetFromResponse(dateHeader);\n        if (!response.ok) {\n          response.json().then(errData => {\n            callback(new Error(`HTTP error ${response.status}: ${JSON.stringify(errData)}`), null);\n          }).catch(() => {\n            callback(new Error(`HTTP error ${response.status}`), null);\n          });\n        } else {\n          response.json().then(data => {\n            callback(null, data);\n          }).catch(err => {\n            callback(err, null);\n          });\n        }\n      })\n      .catch(error => {\n        callback(error, null);\n      });\n  }\n\n  _updateClockOffsetFromResponse(dateHeader) {\n    const serverTime = new Date(dateHeader).getTime();\n    const localTime = Date.now();\n    this._twitter_time_minus_local_time_ms = serverTime - localTime;\n  }\n}"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a function that sets up an Express server with CORS support, static file serving, and specific route handlers.\n\nFunction Description: The function `createServer` initializes an Express application, configures middleware for CORS and static file serving, defines route handlers for specific endpoints, and starts the server on port 80. It enables cross-origin requests, serves static files from a 'public' directory, and provides fallback to 'index.html' for unmatched routes.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function does not return a value but starts an Express server listening on port 80)",
    "Canonical_solution": "function createServer() {\n    const express = require('express');\n    const app = express();\n\n    app.use(function(req, res, next) {\n        res.set({\n            'Access-Control-Allow-Origin': '*'\n        });\n        next();\n    });\n    app.use(express.static(__dirname + '/public'));\n\n    app.get('/imagebox', imagebox.upload);\n    app.get('/readapi', api.requestApi);\n    app.get('*', (req, res) => {\n        res.sendFile(__dirname + '/public/index.html');\n    });\n\n    app.listen(80, () => {\n        console.log('app is listening at port:80');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst cors = require('cors');\nconst path = require('path');\n\nfunction createServer() {\n  const app = express();\n  app.use(cors());\n  app.use(express.static(path.join(__dirname, 'public')));\n  app.use((req, res) => {\n    res.sendFile(path.join(__dirname, 'public', 'index.html'));\n  });\n  app.listen(80);\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by detecting the shortening service and using the appropriate API or HTTP HEAD request to follow redirects. It handles recursive expansion with depth limiting and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening service names to their associated domains\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration including known URL shortening services and timeout\n- expand(args: [Object], callback: [Function]) -> [void] - The main method that initiates URL expansion\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to be called with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - err: [Error] - Any error encountered (optional)\n      - headers: [Object] - Response headers (optional)\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n\nThe class includes several internal API methods (isgd, googl, budurl, snipurl, generic) that handle specific URL shortening services or generic URL expansion through HTTP HEAD requests. These methods are not meant to be called directly but are used internally by the expand method.",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "```javascript\nclass URLExpander {\n  constructor() {\n    this.map = {\n      isgd: ['is.gd'],\n      googl: ['goo.gl'],\n      budurl: ['budurl.com'],\n      snipurl: ['snipurl.com']\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      isgd: this.isgd.bind(this),\n      googl: this.googl.bind(this),\n      budurl: this.budurl.bind(this),\n      snipurl: this.snipurl.bind(this),\n      generic: this.generic.bind(this)\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (depth > 5) return callback({ ...args, err: new Error('Max depth exceeded') });\n    if (seen[url]) return callback({ ...args, err: new Error('Cycle detected') });\n    seen[url] = true;\n    \n    let service = null;\n    try {\n      const { hostname } = new URL(url);\n      for (const [svc, domains] of Object.entries(this.map)) {\n        if (domains.some(d => hostname.endsWith(d))) {\n          service = svc;\n          break;\n        }\n      }\n    } catch (e) {\n      return callback({ ...args, err: e });\n    }\n\n    const apiMethod = this.APIs[service] || this.APIs.generic;\n    apiMethod.call(this, url, { ...args, seen }, (err, result) => {\n      if (err) return callback({ ...args, err });\n      const newUrl = result?.url;\n      if (!newUrl) return callback({ ...args, err: new Error('No URL received') });\n\n      let isShortened = false;\n      try {\n        const { hostname } = new URL(newUrl);\n        for (const domains of Object.values(this.map)) {\n          if (domains.some(d => hostname.endsWith(d))) {\n            isShortened = true;\n            break;\n          }\n        }\n      } catch (e) {\n        return callback({ ...args, err: e });\n      }\n\n      if (isShortened) {\n        this.expand({ ...args, url: newUrl, depth: depth + 1, seen }, callback);\n      } else {\n        callback({ ...args, url: newUrl, ...result });\n      }\n    });\n  }\n\n  isgd(url, args, callback) {\n    this.generic(url, args, callback);\n  }\n\n  googl(url, args, callback) {\n    this.generic(url, args, callback);\n  }\n\n  budurl(url, args, callback) {\n    this.generic(url, args, callback);\n  }\n\n  snipurl(url, args, callback) {\n    this.generic(url, args, callback);\n  }\n\n  generic(url, args, callback) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n    fetch(url, {\n      method: 'HEAD',\n      redirect: 'follow',\n      signal: controller.signal\n    })\n      .then(response => {\n        clearTimeout(timeoutId);\n        callback(null, {\n          url: response.url,\n          headers: Object.fromEntries(response.headers.entries())\n        });\n      })\n      .catch(err => {\n        clearTimeout(timeoutId);\n        callback(err);\n      });\n  }\n}\n```"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const options = {\n    url: 'https://api.example.com/data',\n    method: 'GET',\n    headers: {\n      'X-Custom-Header': 'MyValue',\n      'Accept-Encoding': 'gzip',\n      'User-Agent': 'NodeJS-Request'\n    }\n  };\n\n  request(options, (error, response, body) => {\n    if (error) {\n      return console.error('Request failed:', error);\n    }\n    if (response.statusCode !== 200) {\n      return console.error(`Unexpected status code: ${response.statusCode}`);\n    }\n    console.log('Decompressed response body:', body);\n  });\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a function to set up an Express server with session management using MongoDB as the session store, and integrate it with Next.js for server-side rendering.\n\nFunction Description: The function `setupServer` initializes an Express server with session management configured to use MongoDB for session storage. It integrates with Next.js for handling server-side rendering and routes all requests to the Next.js request handler. The server listens on a specified port and logs the root URL when ready.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Port number to listen on (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that listens on the specified port and handles requests. It logs the root URL to the console when the server is ready.)",
    "Canonical_solution": "function setupServer() {\n    const express = require('express');\n    const session = require('express-session');\n    const mongoSessionStore = require('connect-mongo');\n    const next = require('next');\n    const mongoose = require('mongoose');\n\n    const dev = process.env.NODE_ENV !== 'production';\n    const MONGO_URL = process.env.MONGO_URL_TEST;\n    const port = process.env.PORT || 8000;\n    const ROOT_URL = `http://localhost:${port}`;\n\n    const app = next({ dev });\n    const handle = app.getRequestHandler();\n\n    const server = express();\n\n    const sessionOptions = {\n        name: process.env.SESSION_NAME,\n        secret: process.env.SESSION_SECRET,\n        store: mongoSessionStore.create({\n            mongoUrl: MONGO_URL,\n            ttl: 14 * 24 * 60 * 60,\n        }),\n        resave: false,\n        saveUninitialized: false,\n        cookie: {\n            httpOnly: true,\n            maxAge: 14 * 24 * 60 * 60 * 1000,\n            domain: 'localhost',\n        },\n    };\n\n    const sessionMiddleware = session(sessionOptions);\n    server.use(sessionMiddleware);\n\n    server.get('*', (req, res) => handle(req, res));\n\n    server.listen(port, (err) => {\n        if (err) throw err;\n        console.log(`> Ready on ${ROOT_URL}`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo');\nconst Next = require('next');\n\nasync function setupServer() {\n  const dev = process.env.NODE_ENV !== 'production';\n  const nextApp = new Next({ dev });\n  const nextHandler = nextApp.getRequestHandler();\n\n  await nextApp.prepare();\n\n  const app = express();\n\n  const store = await MongoStore.create({\n    mongoUrl: process.env.MONGO_URL_TEST,\n    collectionName: 'sessions'\n  });\n\n  app.use(\n    session({\n      name: process.env.SESSION_NAME,\n      secret: process.env.SESSION_SECRET,\n      resave: false,\n      saveUninitialized: false,\n      store,\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        sameSite: 'strict',\n        maxAge: 1000 * 60 * 60 * 24\n      }\n    })\n  );\n\n  app.all('*', (req, res) => nextHandler(req, res));\n\n  const PORT = process.env.PORT || 8000;\n  app.listen(PORT, () => {\n    console.log(`Server ready on http://localhost:${PORT}`);\n  });\n}\n\nsetupServer();"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create a function that initializes and configures an Express.js web application with middleware, route handlers, and server listening capabilities, including optional HTTPS support.\n\nFunction Description: The function `createExpressApp` creates and configures an Express.js application instance with various middleware (CORS, security headers, caching), route handlers for API endpoints and static files, and error handling. It starts an HTTP server (and optionally an HTTPS server) listening on specified ports. The function returns the configured Express application instance.\n\nInput: None (The function uses global configuration variables like CONFIG and process.env for settings)\n\nOutput: Express.Application - Returns the fully configured Express.js application instance after setting up all middleware, routes, and server listeners.",
    "Canonical_solution": "function createExpressApp() {\n    var express = require('express');\n    var app = express();\n\n    app.use(express.bodyParser());\n    app.set('view engine', 'ejs');\n\n    if (CONFIG.allowedOrigins) {\n        app.use(function(req, res, next) {\n            var origin = req.headers[\"origin\"];\n            if (origin) {\n                if (CONFIG.allowedOrigins.indexOf('*') > -1) {\n                    res.setHeader('Access-Control-Allow-Origin', '*');\n                } else {\n                    if (CONFIG.allowedOrigins.indexOf(origin) > -1) {\n                        res.setHeader('Access-Control-Allow-Origin', origin);\n                    }\n                }\n            }\n            next();\n        });\n    }\n\n    app.disable('x-powered-by');\n    app.use(function(req, res, next) {\n        res.setHeader('X-Powered-By', 'Iframely');\n        next();\n    });\n\n    app.use(sysUtils.cacheMiddleware);\n\n    require('./modules/api/views')(app);\n    require('./modules/debug/views')(app);\n    require('./modules/tests-ui/views')(app);\n\n    app.use(logErrors);\n    app.use(errorHandler);\n\n    app.get(CONFIG.relativeStaticUrl + '/*', function(req, res, next) {\n        var url = '/' + req.url.split('/').splice(2).join('/');\n        sysUtils.static(path.resolve(__dirname, 'static'), {path: url})(req, res, next);\n    });\n\n    app.get('/', function(req, res) {\n        res.writeHead(302, { Location: 'http://iframely.com'});\n        res.end();\n    });\n\n    var listener = app.listen(process.env.PORT || CONFIG.port, process.env.HOST || CONFIG.host, function(){\n        console.log('\\niframely is listening on ' + listener.address().address + ':' + listener.address().port + '\\n');\n    });\n\n    if (CONFIG.ssl) {\n        var options = { key: CONFIG.ssl.key, cert: CONFIG.ssl.cert };\n        require('https').createServer(options, app).listen(CONFIG.ssl.port);\n    }\n\n    return app;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst morgan = require('morgan');\nconst http = require('http');\nconst https = require('https');\nconst fs = require('fs');\n\nfunction createExpressApp() {\n  const app = express();\n\n  app.use(cors());\n  app.use(helmet());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  app.use(compression());\n  app.use(morgan('dev'));\n  app.use(express.static('public'));\n\n  app.use('/api', (req, res) => {\n    res.json({ message: 'API is running' });\n  });\n\n  app.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).json({ error: 'Internal Server Error' });\n  });\n\n  const PORT = process.env.PORT || CONFIG.port;\n  const HTTPS_PORT = process.env.HTTPS_PORT || CONFIG.httpsPort;\n\n  const httpServer = http.createServer(app);\n  httpServer.listen(PORT, () => {\n    console.log(`HTTP Server running on port ${PORT}`);\n  });\n\n  if (CONFIG.httpsEnabled) {\n    const sslOptions = {\n      key: fs.readFileSync(CONFIG.sslKeyPath),\n      cert: fs.readFileSync(CONFIG.sslCertPath)\n    };\n    const httpsServer = https.createServer(sslOptions, app);\n    httpsServer.listen(HTTPS_PORT, () => {\n      console.log(`HTTPS Server running on port ${HTTPS_PORT}`);\n    });\n  }\n\n  return app;\n}"
  }
]