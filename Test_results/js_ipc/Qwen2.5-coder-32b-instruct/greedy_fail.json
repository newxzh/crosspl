[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const crypto = require('crypto');\nconst https = require('https');\n\nclass Trader {\n    constructor(config) {\n        this.key = config.key;\n        this.secret = config.secret;\n        this.currency = config.currency;\n        this.asset = config.asset;\n        this.pair = `${config.asset}_${config.currency}`;\n        this.name = 'EXMO';\n        this.nonce = Math.floor(Date.now() / 1000);\n    }\n\n    api_query(method, params, callback) {\n        this.nonce++;\n        const postData = {\n            ...params,\n            nonce: this.nonce\n        };\n        const postMessage = JSON.stringify(postData);\n        const sign = crypto.createHmac('sha512', this.secret).update(postMessage).digest('hex');\n\n        const options = {\n            hostname: 'api.exmo.com',\n            port: 443,\n            path: `/v1/${method}/`,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Key': this.key,\n                'Sign': sign\n            }\n        };\n\n        const req = https.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => { data += chunk; });\n            res.on('end', () => {\n                try {\n                    const jsonData = JSON.parse(data);\n                    if (jsonData.error) {\n                        callback(new Error(jsonData.error));\n                    } else {\n                        callback(null, jsonData);\n                    }\n                } catch (e) {\n                    callback(e);\n                }\n            });\n        });\n\n        req.on('error', (error) => {\n            callback(error);\n        });\n\n        req.write(postMessage);\n        req.end();\n    }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server with WebSocket support using Express and Socket.IO, implementing a particle simulation system with cluster and client event handling.\n\nFunction Description: The function `startServer` initializes an Express application, sets up static file serving, integrates Socket.IO for real-time communication, and configures a particle simulation system with collision detection and cluster management. It handles particle movement, boundary collisions, and client interactions through defined event handlers.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function starts a server listening on port 3000 but doesn't return any value)",
    "Canonical_solution": "function startServer() {\n    const express = require('express');\n    const app = express();\n    const server = require('http').Server(app);\n    const io = require('socket.io')(server);\n    const swip = require('../../../src/server/index.js');\n\n    app.use(express.static(__dirname + './../static'));\n\n    swip(io, {\n        cluster: {\n            events: {\n                update: (cluster) => {\n                    const blobs = cluster.data.blobs;\n                    const clients = cluster.clients;\n\n                    const updatedBlobs = blobs.map((blob) => {\n                        const boundaryOffset = blob.size;\n                        const client = clients.find((c) => isParticleInClient(blob, c));\n\n                        let nextPosX = blob.x + blob.speedX;\n                        let nextPosY = blob.y + blob.speedY;\n                        let nextSpeedX = blob.speedX;\n                        let nextSpeedY = blob.speedY;\n\n                        if (client) {\n                            if (((blob.speedX < 0) &&\n                                ((nextPosX - boundaryOffset) < client.transform.x)\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.left, nextPosY))) {\n                                nextPosX = client.transform.x + boundaryOffset;\n                                nextSpeedX = blob.speedX * -1;\n                            } else if (((blob.speedX > 0) &&\n                                ((nextPosX + boundaryOffset) > (client.transform.x + client.size.width))\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.right, nextPosY))) {\n                                nextPosX = client.transform.x + (client.size.width - boundaryOffset);\n                                nextSpeedX = blob.speedX * -1;\n                            }\n\n                            if (((blob.speedY < 0) &&\n                                ((nextPosY - boundaryOffset) < client.transform.y\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.top, nextPosX)))) {\n                                nextPosY = client.transform.y + boundaryOffset;\n                                nextSpeedY = blob.speedY * -1;\n                            } else if (((blob.speedY > 0) &&\n                                ((nextPosY + boundaryOffset) > (client.transform.y + client.size.height))\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.bottom, nextPosX))\n                            ) {\n                                nextPosY = client.transform.y + (client.size.height - boundaryOffset);\n                                nextSpeedY = blob.speedY * -1;\n                            }\n                        } else {\n                            const firstClient = clients[0];\n                            nextPosX = firstClient.transform.x + (firstClient.size.width / 2);\n                            nextPosY = firstClient.transform.y + (firstClient.size.height / 2);\n                            nextSpeedX = 0;\n                            nextSpeedY = 0;\n                        }\n\n                        blob.x = nextPosX;\n                        blob.y = nextPosY;\n                        blob.speedX = nextSpeedX;\n                        blob.speedY = nextSpeedY;\n\n                        return blob;\n                    });\n\n                    return {\n                        blobs: { $set: updatedBlobs },\n                    };\n                },\n                merge: (cluster1, cluster2, transform) => ({\n                    blobs: { $set: getNewParticleDist(cluster1, cluster2, transform) },\n                    backgroundColor: { $set: cluster1.data.backgroundColor },\n                }),\n            },\n            init: () => ({ blobs: [], backgroundColor: getRandomColor() }),\n        },\n\n        client: {\n            init: () => ({}),\n            events: {\n                addBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $push: blobs } },\n                        },\n                    };\n                },\n                updateBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $set: blobs } },\n                        },\n                    };\n                },\n            },\n        },\n    });\n\n    server.listen(3000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cluster = require('cluster');\nconst numCPUs = require('os').cpus().length;\n\nconst PORT = 3000;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  const app = express();\n  const server = http.createServer(app);\n  const io = socketIo(server);\n\n  app.use(express.static('public'));\n\n  class Particle {\n    constructor(id, x, y, vx, vy) {\n      this.id = id;\n      this.x = x;\n      this.y = y;\n      this.vx = vx;\n      this.vy = vy;\n      this.radius = 10;\n    }\n\n    move() {\n      this.x += this.vx;\n      this.y += this.vy;\n    }\n\n    checkCollision(other) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      return distance < this.radius + other.radius;\n    }\n\n    resolveCollision(other) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const overlap = this.radius + other.radius - distance;\n\n      const nx = dx / distance;\n      const ny = dy / distance;\n\n      this.x += nx * overlap / 2;\n      this.y += ny * overlap / 2;\n      other.x -= nx * overlap / 2;\n      other.y -= ny * overlap / 2;\n\n      const px = this.vx - other.vx;\n      const py = this.vy - other.vy;\n\n      const pp = px * nx + py * ny;\n\n      if (pp > 0) {\n        const massRatio = 1; // Assuming equal mass for simplicity\n        const j = (2 * pp) / (massRatio + massRatio);\n\n        const jx = j * nx;\n        const jy = j * ny;\n\n        this.vx -= jx / massRatio;\n        this.vy -= jy / massRatio;\n        other.vx += jx / massRatio;\n        other.vy += jy / massRatio;\n      }\n    }\n  }\n\n  let particles = [];\n  let nextId = 0;\n\n  io.on('connection', (socket) => {\n    console.log('a user connected');\n\n    const newParticle = new Particle(nextId++, Math.random() * 800, Math.random() * 600, Math.random() * 4 - 2, Math.random() * 4 - 2);\n    particles.push(newParticle);\n\n    socket.emit('initialize', { id: newParticle.id, x: newParticle.x, y: newParticle.y });\n\n    socket.on('disconnect', () => {\n      console.log('user disconnected');\n      particles = particles.filter(particle => particle.id !== newParticle.id);\n    });\n\n    socket.on('updatePosition', ({ id, x, y }) => {\n      const particle = particles.find(p => p.id === id);\n      if (particle) {\n        particle.x = x;\n        particle.y = y;\n      }\n    });\n  });\n\n  setInterval(() => {\n    particles.forEach(particle => {\n      particle.move();\n\n      // Boundary collision detection\n      if (particle.x - particle.radius < 0 || particle.x + particle.radius > 800) {\n        particle.vx *= -1;\n      }\n      if (particle.y - particle.radius < 0 || particle.y + particle.radius > 600) {\n        particle.vy *= -1;\n      }\n    });\n\n    // Particle collision detection\n    for (let i = 0; i < particles.length; i++) {\n      for (let j = i + 1; j < particles.length; j++) {\n        if (particles[i].checkCollision(particles[j])) {\n          particles[i].resolveCollision(particles[j]);\n        }\n      }\n    }\n\n    io.emit('updateParticles', particles.map(particle => ({\n      id: particle.id,\n      x: particle.x,\n      y: particle.y\n    })));\n  }, 16);\n\n  server.listen(PORT, () => {\n    console.log(`Worker ${process.pid} started on port ${PORT}`);\n  });\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n    constructor() {\n        this.map = {\n            'is.gd': this.isgd,\n            'goo.gl': this.googl,\n            'budurl.com': this.budurl,\n            'snipurl.com': this.snipurl,\n            'snurl.com': this.snipurl,\n            't2m.io': this.snipurl,\n            'tinyurl.com': this.generic\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 10 || seen[url]) {\n            callback({ ...args, error: 'Maximum depth reached or URL loop detected' });\n            return;\n        }\n        seen[url] = true;\n\n        const domain = new URL(url).hostname;\n        const expandMethod = this.map[domain] || this.generic;\n\n        expandMethod.call(this, { ...args, seen }, callback);\n    }\n\n    isgd(args, callback) {\n        // Implement is.gd API call here\n        this.generic(args, callback);\n    }\n\n    googl(args, callback) {\n        // Implement goo.gl API call here\n        this.generic(args, callback);\n    }\n\n    budurl(args, callback) {\n        // Implement budurl.com API call here\n        this.generic(args, callback);\n    }\n\n    snipurl(args, callback) {\n        // Implement snipurl.com and related API call here\n        this.generic(args, callback);\n    }\n\n    generic(args, callback) {\n        const { url, depth, seen } = args;\n        const http = require('http');\n        const https = require('https');\n\n        const protocol = url.startsWith('https') ? https : http;\n        const req = protocol.request(url, { method: 'HEAD', timeout: this.timeout }, res => {\n            if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n                this.expand({ url: res.headers.location, depth: depth + 1, seen }, callback);\n            } else {\n                callback({ ...args, expandedUrl: url });\n            }\n        });\n\n        req.on('error', err => {\n            callback({ ...args, error: err.message });\n        });\n\n        req.end();\n    }\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function to set up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB as the session store. It integrates Next.js for server-side rendering and sets up a catch-all route handler. The server listens on a specified port and connects to MongoDB using environment variables for configuration.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that:\n- Listens on the specified port\n- Outputs the server URL to console when ready\n- Maintains persistent connections to MongoDB for session storage)",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  mongoose.connect(MONGO_URL);\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  const server = express();\n\n  const sessionOptions = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: mongoSessionStore.create({\n      mongoUrl: MONGO_URL,\n      ttl: 14 * 24 * 60 * 60,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      maxAge: 14 * 24 * 60 * 60 * 1000,\n      domain: 'localhost',\n    },\n  };\n\n  const sessionMiddleware = session(sessionOptions);\n  server.use(sessionMiddleware);\n\n  server.get('*', (req, res) => handle(req, res));\n\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on ${ROOT_URL}`);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst next = require('next');\nconst mongoose = require('mongoose');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo');\n\nasync function setupServer() {\n  const dev = process.env.NODE_ENV !== 'production';\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  await app.prepare();\n\n  const server = express();\n\n  const mongoUrl = process.env.MONGO_URL_TEST;\n  await mongoose.connect(mongoUrl, { useNewUrlParser: true, useUnifiedTopology: true });\n\n  const sessionConfig = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: MongoStore.create({ mongoUrl }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 1000 * 60 * 60 * 24 * 7 // One week\n    }\n  };\n\n  server.use(session(sessionConfig));\n\n  server.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  const PORT = process.env.PORT || 8000;\n  server.listen(PORT, () => {\n    console.log(`> Ready on http://localhost:${PORT}`);\n  });\n}\n\nsetupServer();"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a function to set up an Express.js server with middleware configuration, route handling, and database synchronization.\n\nFunction Description: The function `setupExpressServer` initializes an Express.js web server with CORS support, request body parsing, and database synchronization. It configures middleware, defines basic routes, and starts the server on a specified port. The server integrates authentication and user management routes from external modules.\n\nInput: None (The function takes no parameters as it's self-contained for server setup)\n\nOutput: None (The function doesn't return anything but starts a server process that listens on the specified port)",
    "Canonical_solution": "function setupExpressServer() {\n    const express = require(\"express\");\n    const bodyParser = require(\"body-parser\");\n    const cors = require(\"cors\");\n\n    const app = express();\n\n    var corsOptions = {\n        origin: \"http://localhost:8081\"\n    };\n\n    app.use(cors(corsOptions));\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n\n    const db = require(\"./app/models\");\n    const Role = db.role;\n\n    db.sequelize.sync();\n\n    app.get(\"/\", (req, res) => {\n        res.json({ message: \"Welcome to bezkoder application.\" });\n    });\n\n    require('./app/routes/auth.routes')(app);\n    require('./app/routes/user.routes')(app);\n\n    const PORT = process.env.PORT || 8080;\n    app.listen(PORT, () => {\n        console.log(`Server is running on port ${PORT}.`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst authRoutes = require('./routes/authRoutes');\nconst userRoutes = require('./routes/userRoutes');\n\nfunction setupExpressServer() {\n    const app = express();\n    const PORT = process.env.PORT || 3000;\n\n    // Middleware\n    app.use(cors());\n    app.use(bodyParser.json());\n\n    // Database connection\n    mongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n        .then(() => console.log('Database connected'))\n        .catch(err => console.error('Database connection error:', err));\n\n    // Routes\n    app.use('/auth', authRoutes);\n    app.use('/users', userRoutes);\n\n    // Start server\n    app.listen(PORT, () => {\n        console.log(`Server is running on port ${PORT}`);\n    });\n}"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server using the Express framework in JavaScript, with middleware configurations for request processing and static file serving.\n\nFunction Description: The function `createServer` initializes an Express application, configures various middleware for logging, request parsing, and static file serving, and starts an HTTP server listening on a specified port. It also includes environment-specific error handling for development mode.\n\nInput: None (The function does not take any parameters; it uses environment variables like `process.env.PORT` for configuration.)\n\nOutput: None (The function does not return any value; it starts an HTTP server that listens on the specified port and logs a message upon successful startup.)",
    "Canonical_solution": "function createServer() {\n    var express = require('express');\n    var http = require('http');\n    var path = require('path');\n\n    var app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded());\n    app.use(express.methodOverride());\n    app.use(express.static(path.join(__dirname, '/public')));\n    app.use(express.static(path.join(__dirname, '/tests')));\n\n    if ('development' == app.get('env')) {\n        app.use(express.errorHandler());\n    }\n\n    http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express server listening on port ' + app.get('port'));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst morgan = require('morgan');\nconst bodyParser = require('body-parser');\nconst path = require('path');\n\nfunction createServer() {\n    const app = express();\n    const PORT = process.env.PORT || 3000;\n\n    // Middleware for logging\n    if (process.env.NODE_ENV === 'development') {\n        app.use(morgan('dev'));\n    } else {\n        app.use(morgan('combined'));\n    }\n\n    // Middleware for parsing JSON bodies\n    app.use(bodyParser.json());\n\n    // Middleware for parsing URL-encoded bodies\n    app.use(bodyParser.urlencoded({ extended: true }));\n\n    // Middleware for serving static files\n    app.use(express.static(path.join(__dirname, 'public')));\n\n    // Error handling middleware\n    app.use((err, req, res, next) => {\n        console.error(err.stack);\n        res.status(500).send('Something broke!');\n    });\n\n    // Start the server\n    app.listen(PORT, () => {\n        console.log(`Server is running on port ${PORT}`);\n    });\n}"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TSClient {\n    constructor(query, cb) {\n        const crypto = require('crypto');\n        this.search = { q: query, since_id: null, rcount: 0 };\n        this.id = crypto.createHash('md5').update(query).digest('hex');\n        this.new_since_id = null;\n        this.loadState();\n        cb(this);\n    }\n\n    syncSearch(callback) {\n        const state = { ts: this, search: this.search, cb: callback, page: 1, results: [] };\n        this._walker(state);\n    }\n\n    set(search) {\n        this.search = search;\n        this.persistState();\n    }\n\n    _walker(s) {\n        const Twitter = require('twitter');\n        const client = new Twitter({\n            consumer_key: 'YOUR_CONSUMER_KEY',\n            consumer_secret: 'YOUR_CONSUMER_SECRET',\n            access_token_key: 'YOUR_ACCESS_TOKEN_KEY',\n            access_token_secret: 'YOUR_ACCESS_TOKEN_SECRET'\n        });\n\n        const params = {\n            q: s.search.q,\n            since_id: s.search.since_id || undefined,\n            count: 100,\n            max_id: s.page > 1 ? s.results[s.results.length - 1].id_str : undefined\n        };\n\n        client.get('search/tweets', params, (error, tweets, response) => {\n            if (error) throw error;\n\n            const newResults = tweets.statuses;\n            s.results = s.results.concat(newResults);\n            if (newResults.length > 0) {\n                s.new_since_id = newResults[0].id_str;\n                this.set({ ...this.search, since_id: s.new_since_id });\n            }\n\n            if (newResults.length === 100) {\n                s.page++;\n                this._walker(s);\n            } else {\n                s.cb(s.results);\n            }\n        });\n    }\n\n    loadState() {\n        try {\n            const fs = require('fs');\n            const data = fs.readFileSync(`./state_${this.id}.json`, 'utf8');\n            this.search = JSON.parse(data);\n        } catch (e) {\n            // No previous state found\n        }\n    }\n\n    persistState() {\n        const fs = require('fs');\n        fs.writeFileSync(`./state_${this.id}.json`, JSON.stringify(this.search));\n    }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\nconst routes = require('./routes'); // Assuming routes are exported from this module\n\nfunction createExpressServer() {\n    const app = express();\n    const PORT = process.env.PORT || 3000;\n\n    // Serve static files from the parent directory\n    app.use(express.static(path.join(__dirname, '..')));\n\n    // Use additional route handlers\n    app.use('/', routes);\n\n    // Start the server\n    const server = app.listen(PORT, () => {\n        console.log(`Server is running on http://localhost:${PORT}`);\n    });\n\n    return server;\n}\n\nmodule.exports = createExpressServer;"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and handle file uploads, using Node.js's `fs` and `http` modules. The server should log connection details and save request data to files.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. It handles requests by piping the socket data to a file stream and provides a simple HTML form for file uploads. Each connection is assigned a unique filename for logging purposes.\n\nInput: None (The function does not take any input parameters)\n\nOutput: None (The function does not return any value but creates a running HTTP server that logs to the console and writes to files)",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n    let connectionCounter = 0;\n\n    const server = http.createServer((req, res) => {\n        if (req.method === 'POST' && req.url === '/upload') {\n            const fileName = `upload-${connectionCounter++}.txt`;\n            const filePath = path.join(__dirname, fileName);\n            const writeStream = fs.createWriteStream(filePath);\n\n            req.on('data', (chunk) => {\n                writeStream.write(chunk);\n            });\n\n            req.on('end', () => {\n                writeStream.end();\n                res.writeHead(200, { 'Content-Type': 'text/html' });\n                res.end('<h1>File uploaded successfully</h1>');\n            });\n\n            req.on('error', (err) => {\n                console.error('Request error:', err);\n                writeStream.end();\n            });\n        } else {\n            res.writeHead(200, { 'Content-Type': 'text/html' });\n            res.end(`\n                <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n                    <input type=\"file\" name=\"file\" />\n                    <button type=\"submit\">Upload</button>\n                </form>\n            `);\n        }\n    });\n\n    server.on('connection', (socket) => {\n        console.log('New connection from:', socket.remoteAddress);\n    });\n\n    server.listen(3000, () => {\n        console.log('Server is listening on port 3000');\n    });\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to handle incoming requests, pipe the request data to individual files, and manage client connections. The server should record each connection's data to a separate file and provide a simple HTML upload form for root requests.\n\nFunction Description: The `createServer` function initializes an HTTP server that listens for incoming connections. Each connection's request data is piped to a uniquely named file. For non-root requests, it returns request metadata in JSON format. For root requests (`/`), it serves an HTML upload form. The function tracks connection counts and logs connection/disconnection events.\n\nInput: None (The function takes no parameters but uses `process.env.PORT` environment variable as a fallback port)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server that persists until stopped)",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nlet connectionCount = 0;\n\nfunction createServer() {\n    const PORT = process.env.PORT || 3000;\n    const server = http.createServer((req, res) => {\n        if (req.url === '/') {\n            res.writeHead(200, { 'Content-Type': 'text/html' });\n            res.end(`\n                <form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">\n                    <input type=\"file\" name=\"upload\" />\n                    <button type=\"submit\">Upload</button>\n                </form>\n            `);\n        } else {\n            const fileName = `request_${++connectionCount}.txt`;\n            const filePath = path.join(__dirname, fileName);\n            const writeStream = fs.createWriteStream(filePath);\n\n            req.on('data', chunk => {\n                writeStream.write(chunk);\n            });\n\n            req.on('end', () => {\n                writeStream.end();\n                res.writeHead(200, { 'Content-Type': 'application/json' });\n                res.end(JSON.stringify({\n                    url: req.url,\n                    method: req.method,\n                    headers: req.headers\n                }));\n            });\n\n            req.on('error', err => {\n                console.error(`Request error: ${err.message}`);\n            });\n        }\n    });\n\n    server.on('connection', () => {\n        console.log(`New connection established. Total connections: ${++connectionCount}`);\n    });\n\n    server.on('close', () => {\n        console.log('Server closed');\n    });\n\n    server.listen(PORT, () => {\n        console.log(`Server listening on port ${PORT}`);\n    });\n}\n\ncreateServer();"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n    const url = 'https://example.com/api';\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n    };\n    const data = JSON.stringify({\n        key1: 'value1',\n        key2: 'value2'\n    });\n\n    request.post({\n        url: url,\n        headers: headers,\n        body: data\n    }, (error, response, body) => {\n        if (error) {\n            console.error('Error making request:', error);\n        } else {\n            console.log('Response body:', body);\n        }\n    });\n}\n\nmakeHttpRequest();"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. For each connection, it creates a unique file to store the raw HTTP request data. The server handles regular requests by responding with connection information and provides an HTML upload form for the root path. The server tracks active connections and logs connection/disconnection events.\n\nInput: None (The function takes no parameters but uses environment variable `PORT` for configuration)\n\nOutput: None (The function doesn't return anything but creates a running HTTP server that writes to files)\n\nNote: The function maintains internal state including:\n- A connection counter\n- An active HTTP server instance\n- File streams for each connection\n- Logging of connection events to console",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nlet connectionCounter = 0;\nconst server = http.createServer((req, res) => {\n    const connectionId = ++connectionCounter;\n    const filePath = path.join(__dirname, `request-${connectionId}.log`);\n    const fileStream = fs.createWriteStream(filePath);\n\n    console.log(`Connection ${connectionId} from ${req.socket.remoteAddress}:${req.socket.remotePort}`);\n\n    req.on('data', chunk => {\n        fileStream.write(chunk);\n    });\n\n    req.on('end', () => {\n        fileStream.end();\n        console.log(`Connection ${connectionId} ended`);\n    });\n\n    if (req.url === '/') {\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.end(`\n            <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n                <input type=\"file\" name=\"file\">\n                <button type=\"submit\">Upload</button>\n            </form>\n        `);\n    } else {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end(`Connected as client #${connectionId}\\n`);\n    }\n});\n\nserver.on('connection', socket => {\n    console.log(`New connection from ${socket.remoteAddress}:${socket.remotePort}`);\n});\n\nserver.on('close', () => {\n    console.log('Server closed');\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n});"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files with specific Content Security Policy (CSP) rules, using pipe to stream file contents to the response.\n\nFunction Description: The function `createServer` creates and returns an HTTP server instance that serves static files from the root directory. It handles incoming requests by resolving the file path, applying CSP headers for security, and piping the file content to the response. If the request URL is '/', it defaults to serving 'index.html'.\n\nInput: None\n\nOutput: Returns an instance of `http.Server` configured to serve static files with CSP headers.",
    "Canonical_solution": "function createServer() {\n  const http = require('http');\n  const send = require('send');\n  const path = require('path');\n  const root = require('rootrequire');\n\n  return http.createServer(function (req, res) {\n    const url = req.url === '/' ? '/index.html' : req.url;\n    const file = path.resolve(root, url.slice(1));\n\n    const cspRules = [\n      `default-src 'self' https://cdnjs.cloudflare.com`,\n      `img-src * data: blob:`,\n      `media-src * data: blob:`,\n      `font-src https://fonts.googleapis.com https://fonts.gstatic.com`,\n      `style-src 'self' 'unsafe-inline' https://fonts.googleapis.com`,\n      `script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com`,\n      `worker-src 'self' blob:`\n    ];\n\n    res.setHeader('content-security-policy', cspRules.join('; '));\n\n    send(req, file).pipe(res);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createServer() {\n    return http.createServer((req, res) => {\n        let filePath = '.' + req.url;\n        if (filePath === './') {\n            filePath = './index.html';\n        }\n\n        const extname = String(path.extname(filePath)).toLowerCase();\n        const mimeTypes = {\n            '.html': 'text/html',\n            '.js': 'text/javascript',\n            '.css': 'text/css',\n            '.json': 'application/json',\n            '.png': 'image/png',\n            '.jpg': 'image/jpg',\n            '.gif': 'image/gif',\n            '.wav': 'audio/wav',\n            '.mp4': 'video/mp4',\n            '.woff': 'application/font-woff',\n            '.ttf': 'application/font-ttf',\n            '.eot': 'application/vnd.ms-fontobject',\n            '.otf': 'application/font-otf',\n            '.svg': 'application/image/svg+xml'\n        };\n\n        const contentType = mimeTypes[extname] || 'application/octet-stream';\n\n        fs.readFile(filePath, (err, content) => {\n            if (err) {\n                if (err.code === 'ENOENT') {\n                    res.writeHead(404);\n                    res.end('404 Not Found');\n                } else {\n                    res.writeHead(500);\n                    res.end(`Server Error: ${err.code}`);\n                }\n            } else {\n                res.writeHead(200, {\n                    'Content-Type': contentType,\n                    'Content-Security-Policy': \"default-src 'self'; script-src 'self' https://trusted.cdn.com; style-src 'self' 'unsafe-inline'\"\n                });\n                res.end(content, 'utf-8');\n            }\n        });\n    });\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve a ReDoc documentation interface, including handling requests for the ReDoc JavaScript file and rendering the documentation page with the provided specification.\n\nFunction Description: The function creates an HTTP server that serves two main routes: (1) '/redoc.standalone.js' which streams the ReDoc JavaScript file to the client, and (2) '/' which renders a complete HTML page with the ReDoc interface hydrated with the provided OpenAPI specification. The server handles other routes with a 404 response.\n\nInput:\n- port: [number] - The port number on which the HTTP server should listen\n- filePath: [string] - The file path to the 'redoc.standalone.js' file to be served\n- specPath: [string] - The file path to the OpenAPI specification file (YAML format)\n\nOutput: None (The function starts an HTTP server that continues running until manually stopped)\n\nNote: The function assumes the availability of certain external dependencies (yaml, fs, http, React, ServerStyleSheet, Redoc) which should be imported/required in the actual implementation. The function also uses async/await for handling asynchronous operations related to the Redoc store creation.",
    "Canonical_solution": "const http = require('http');\nconst fs = require('fs');\n\nfunction createServer(port, filePath, specPath) {\n    const server = http.createServer(async (request, response) => {\n        if (request.url === '/redoc.standalone.js') {\n            fs.createReadStream(filePath, 'utf8').pipe(response);\n        } else if (request.url === '/') {\n            const spec = yaml.load(readFileSync(resolve(__dirname, specPath), 'utf-8'));\n            const store = await createStore(spec, 'path/to/spec.yaml');\n\n            const sheet = new ServerStyleSheet();\n            const html = renderToString(sheet.collectStyles(React.createElement(Redoc, { store })));\n            const css = sheet.getStyleTags();\n\n            const res = `<html>\n            <head>\n                <meta charset=\"utf8\" />\n                <title>ReDoc</title>\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                <style>\n                    body {\n                        padding: 0;\n                        margin: 0;\n                    }\n                </style>\n                <script src=\"redoc.standalone.js\"></script>\n                <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n                ${css}\n            </head>\n            <body>\n            <script>\n                document.addEventListener('DOMContentLoaded', function() {\n                    const state = ${JSON.stringify(await store.toJS())};\n                    Redoc.hydrate(state, document.getElementById('redoc'));\n                });\n                </script>\n                <div id=\"redoc\">${html}</div>\n            </body>\n            </html>`;\n            response.writeHead(200, { 'Content-Length': res.length });\n            response.write(res);\n            response.end();\n        } else {\n            response.writeHead(404);\n            response.write('Not found');\n            response.end();\n        }\n    });\n\n    server.listen(port, () => console.log(`Server started: http://127.0.0.1:${port}`));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "import http from 'http';\nimport fs from 'fs';\nimport yaml from 'yaml';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { ServerStyleSheet } from 'styled-components';\nimport Redoc from 'redoc';\n\nasync function startRedocServer(port, filePath, specPath) {\n  const openApiSpec = yaml.parse(fs.readFileSync(specPath, 'utf8'));\n\n  const server = http.createServer(async (req, res) => {\n    if (req.url === '/redoc.standalone.js') {\n      res.writeHead(200, { 'Content-Type': 'application/javascript' });\n      fs.createReadStream(filePath).pipe(res);\n    } else if (req.url === '/') {\n      const sheet = new ServerStyleSheet();\n      try {\n        const html = renderToString(sheet.collectStyles(<Redoc spec={openApiSpec} />));\n        const styleTags = sheet.getStyleTags();\n        res.writeHead(200, { 'Content-Type': 'text/html' });\n        res.end(`\n          <!DOCTYPE html>\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <title>ReDoc</title>\n              ${styleTags}\n            </head>\n            <body>\n              <div id=\"redoc\">${html}</div>\n              <script src=\"/redoc.standalone.js\"></script>\n            </body>\n          </html>\n        `);\n      } catch (error) {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('Internal Server Error');\n      } finally {\n        sheet.seal();\n      }\n    } else {\n      res.writeHead(404, { 'Content-Type': 'text/plain' });\n      res.end('Not Found');\n    }\n  });\n\n  server.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}/`);\n  });\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files and handle dynamic JavaScript file concatenation, with support for piping binary files.\n\nFunction Description: The `createServer` function initializes an HTTP server that serves static files from specified directories, handles dynamic concatenation of JavaScript files, and pipes binary files directly to the response. It supports virtual paths, content type detection, and redirection.\n\nInput: \n- Optional command line argument [string] - The port number to listen on (defaults to 90 if not provided)\n\nOutput: \n- None (directly creates and starts an HTTP server)\n- Console output indicating server startup and loaded files\n\nAttributes: (N/A - This is a function, not a class)\n\nMethods: (N/A - This is a function, not a class)\n\nAdditional Implementation Details:\n1. Reads and caches static files from '../src' and '../dist' directories at startup\n2. Handles binary files separately from text files\n3. Supports special handling for core JavaScript files and plugins\n4. Implements virtual path redirection\n5. Uses file extension to determine content type\n6. Provides fallback behavior for undefined routes\n7. Listens on localhost (127.0.0.1) only\n8. Outputs loaded file list to console at startup",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require(\"fs\");\n    var url = require(\"url\");\n\n    var BASE_URL=\"http://www.servicestack.net\", \n        VIRTUAL_PATH=\"/jqbuilder\"; \n\n    var getExt = function(path) {\n        return path.substring(path.lastIndexOf('.')+1);\n    };\n    String.prototype.startsWith = function (str){\n        return this.indexOf(str) === 0;\n    };\n\n    var contentTypes = { \"htm\": \"text/html\", \"js\": \"text/javascript\", \"gif\": \"image/gif\" };\n\n    var srcDir = '../src', targetDir = '../dist';\n    var webFiles = fs.readdirSync(targetDir);\n    var staticFiles = {}, binaryFiles = {};\n    fs.readdirSync(srcDir).forEach(function(file) { \n        var filePath = srcDir + '/' + file;\n        staticFiles[\"/\" + file] = fs.readFileSync(filePath).toString('utf-8');\n    });\n    fs.readdirSync(targetDir).forEach(function(file) { \n        var filePath = targetDir + '/' + file;\n        staticFiles[\"/\" + file] = fs.readFileSync(filePath).toString('utf-8');\n    });\n    fs.readdirSync(\"./\").forEach(function(file) {\n        var isText = (contentTypes[getExt(file)]||\"\").startsWith(\"text\");\n        if (isText)\n            staticFiles[\"/\" + file] = fs.readFileSync(file).toString('utf-8');\n        else \n            binaryFiles[\"/\" + file] = file;\n    });\n\n    staticFiles[\"/\"] = staticFiles[\"/default.htm\"];\n\n    console.log(\"loaded: \", Object.keys(staticFiles));\n\n    var isCore = { \"/jquip.js\": true, \"/jquip.min.js\": true };\n\n    var port = process.argv[2] || 90;\n\n    http.createServer(function (req, res) {\n        var reqUrl = url.parse(req.url), path = reqUrl.pathname.replace(VIRTUAL_PATH,'');\n        if (reqUrl.pathname == VIRTUAL_PATH){\n            res.writeHead(302,BASE_URL+VIRTUAL_PATH+\"/\");\n            res.end();\n            return;\n        }\n\n        var fileContents = staticFiles[path];\n\n        if (fileContents) {\n            var ext = path == \"/\" ? \"htm\" : getExt(path);\n            var contentType = contentTypes[ext];\n            res.writeHead(200, {'Content-Type': contentType });\n            var isPlugin = ext == \"js\" && path.startsWith(\"/jquip.\") && !isCore[path];\n            if (isPlugin) {\n                var coreJs = path.indexOf(\"min\") != -1 \n                    ? staticFiles[\"/jquip.min.js\"]\n                    : staticFiles[\"/jquip.js\"];\n                fileContents = coreJs + \";\" + fileContents;\n            }\n\n            res.end(fileContents);\n        }\n        else if (binaryFiles[path]) { \n            var filePath = binaryFiles[path]; \n            fs.createReadStream(filePath, {\n              'bufferSize': 4 * 1024\n            }).pipe(res);\n        }\n        else\n        {\n            var isDynamic = path.startsWith(\"/jquip.\");\n            if (isDynamic) {\n                var parts = path.substring(1).split('.');\n                var isMin = parts.indexOf(\"min\") >= 0;\n                var js = isMin ? staticFiles[\"/jquip.min.js\"] : staticFiles[\"/jquip.js\"];\t\t\t\n                parts.forEach(function(part){\n                    if (part == \"jquip\" || part == \"min\" || part == \"js\") return;\n                    var path = \"/jquip.\" + part + (isMin ? \".min.js\" : \".js\");\n                    var jsFile = staticFiles[path];\n                    if (jsFile)\n                        js += \";\" + jsFile;\n                });\n                res.writeHead(200, {'Content-Type': 'text/javascript' });\n                res.end(js);\t\t\n                return;\n            }\n\n            res.writeHead(200, {'Content-Type': 'text/plain'});\n            var sb = \"\";\n            for (var i in reqUrl) {\n                if (sb) sb += \"\\n\";\n                sb += i + \": \" + reqUrl[i];\n            }\n            res.end(\"Path not found:\\n\" + sb);\n        }\n    })\n    .listen(port, \"127.0.0.1\");\n    console.log('Server running at http://127.0.0.1:'+port+'/');\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\n\nconst PORT = process.argv[2] ? parseInt(process.argv[2], 10) : 90;\nconst STATIC_DIRS = ['../src', '../dist'];\nconst MIME_TYPES = {\n    '.html': 'text/html',\n    '.js': 'application/javascript',\n    '.css': 'text/css',\n    '.png': 'image/png',\n    '.jpg': 'image/jpeg',\n    '.gif': 'image/gif',\n    '.ico': 'image/x-icon',\n    '.json': 'application/json',\n    '.woff': 'application/font-woff',\n    '.woff2': 'application/font-woff2',\n    '.ttf': 'application/font-ttf',\n    '.eot': 'application/vnd.ms-fontobject',\n    '.svg': 'image/svg+xml'\n};\n\nlet fileCache = {};\n\nfunction loadFiles() {\n    STATIC_DIRS.forEach(dir => {\n        if (fs.existsSync(dir)) {\n            fs.readdirSync(dir).forEach(file => {\n                const filePath = path.join(dir, file);\n                const fileContent = fs.readFileSync(filePath);\n                fileCache[`/${file}`] = { content: fileContent, contentType: MIME_TYPES[path.extname(file)] || 'application/octet-stream' };\n            });\n        }\n    });\n    console.log('Loaded files:', Object.keys(fileCache));\n}\n\nfunction handleRequest(req, res) {\n    let pathname = url.parse(req.url).pathname;\n    if (pathname === '/') pathname = '/index.html';\n\n    if (pathname.startsWith('/core-js')) {\n        const coreJsFiles = [\n            '/core-js/modules/es.array.concat.js',\n            '/core-js/modules/es.array.filter.js',\n            '/core-js/modules/es.array.find.js',\n            '/core-js/modules/es.array.for-each.js',\n            '/core-js/modules/es.array.includes.js',\n            '/core-js/modules/es.array.index-of.js',\n            '/core-js/modules/es.array.is-array.js',\n            '/core-js/modules/es.array.join.js',\n            '/core-js/modules/es.array.map.js',\n            '/core-js/modules/es.array.reduce.js',\n            '/core-js/modules/es.array.slice.js',\n            '/core-js/modules/es.function.name.js',\n            '/core-js/modules/es.object.assign.js',\n            '/core-js/modules/es.object.define-property.js',\n            '/core-js/modules/es.object.get-own-property-descriptor.js',\n            '/core-js/modules/es.object.keys.js',\n            '/core-js/modules/es.promise.js',\n            '/core-js/modules/es.string.includes.js',\n            '/core-js/modules/es.string.iterator.js',\n            '/core-js/modules/web.dom-collections.for-each.js',\n            '/core-js/modules/web.dom-collections.iterator.js'\n        ];\n        let concatenatedContent = '';\n        coreJsFiles.forEach(coreFile => {\n            if (fileCache[coreFile]) {\n                concatenatedContent += fileCache[coreFile].content + '\\n';\n            }\n        });\n        res.writeHead(200, { 'Content-Type': 'application/javascript' });\n        res.end(concatenatedContent);\n        return;\n    }\n\n    if (pathname.startsWith('/plugins')) {\n        const pluginDir = path.join(__dirname, '../plugins');\n        fs.readdir(pluginDir, (err, files) => {\n            if (err) {\n                res.writeHead(500, { 'Content-Type': 'text/plain' });\n                res.end('Internal Server Error');\n                return;\n            }\n            let concatenatedContent = '';\n            files.forEach(file => {\n                if (path.extname(file) === '.js') {\n                    const filePath = path.join(pluginDir, file);\n                    concatenatedContent += fs.readFileSync(filePath) + '\\n';\n                }\n            });\n            res.writeHead(200, { 'Content-Type': 'application/javascript' });\n            res.end(concatenatedContent);\n        });\n        return;\n    }\n\n    if (pathname === '/favicon.ico') {\n        pathname = '/icons/favicon.ico';\n    }\n\n    const file = fileCache[pathname];\n    if (file) {\n        res.writeHead(200, { 'Content-Type': file.contentType });\n        res.end(file.content);\n    } else {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('Not Found');\n    }\n}\n\nloadFiles();\n\nhttp.createServer(handleRequest).listen(PORT, '127.0.0.1', () => {\n    console.log(`Server running at http://127.0.0.1:${PORT}/`);\n});"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createFileServer() {\n    const port = 1338;\n    const publicDirectory = path.join(__dirname, 'static');\n    const mimeTypes = {\n        '.html': 'text/html',\n        '.css': 'text/css',\n        '.js': 'application/javascript',\n        '.png': 'image/png',\n        '.jpg': 'image/jpeg',\n        '.gif': 'image/gif'\n    };\n\n    http.createServer((req, res) => {\n        let filePath = path.join(publicDirectory, req.url === '/' ? 'index.html' : req.url);\n        const extname = String(path.extname(filePath)).toLowerCase();\n        const contentType = mimeTypes[extname] || 'application/octet-stream';\n\n        fs.readFile(filePath, (err, content) => {\n            if (err) {\n                if (err.code === 'ENOENT') {\n                    res.writeHead(404, { 'Content-Type': 'text/plain' });\n                    res.end('404 Not Found');\n                } else {\n                    res.writeHead(500);\n                    res.end(`Server Error: ${err.code}`);\n                }\n            } else {\n                res.writeHead(200, { 'Content-Type': contentType });\n                res.end(content, 'utf-8');\n            }\n        });\n    }).listen(port, () => {\n        console.log(`Server running at http://localhost:${port}/`);\n    });\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's 'net' module that can handle client connections, respond to incoming data, and manage server lifecycle events.\n\nClass Description: The Server class represents a TCP server that listens on a dynamically assigned port. It handles client connections, processes incoming data, and sends appropriate responses. The server can be started, stopped, and connections can be dropped.\n\nAttributes:\n- server: [Object] - The TCP server instance created using the 'net' module\n- socket: [Object] - The current client socket connection\n- response: [Buffer|Object] - The predefined response to send to clients (optional)\n\nMethods:\n- constructor(response) -> [Server] - Initializes a new Server instance with an optional response buffer/object\n- start(cb) -> [void] - Starts the server on a random available port and invokes the callback with connection details (host and port)\n- drop() -> [void] - Terminates the current client connection\n- close(cb) -> [void] - Stops the server and invokes the callback when complete",
    "Canonical_solution": "var net = require('net');\n\nclass Server {\n  constructor(response) {\n    this.server = undefined;\n    this.socket = undefined;\n    this.response = response;\n  }\n\n  start(cb) {\n    this.server = net.createServer(\n      function(socket) {\n        this.socket = socket;\n        if (this.response) {\n          this.socket.on(\n            'data',\n            function(data) {\n              if (data.length == 8) {\n                this.socket.write(Buffer.from('N', 'utf8'));\n              } else if (!data[0]) {\n                this.socket.write(buffers.authenticationOk());\n              } else {\n                this.socket.write(this.response);\n              }\n            }.bind(this)\n          );\n        }\n      }.bind(this)\n    );\n\n    const host = 'localhost';\n    this.server.listen({ host, port: 0 }, () => {\n      const port = this.server.address().port;\n      cb({\n        host,\n        port,\n      });\n    });\n  }\n\n  drop() {\n    this.socket.destroy();\n  }\n\n  close(cb) {\n    this.server.close(cb);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\n\nclass Server {\n    constructor(response) {\n        this.server = net.createServer();\n        this.socket = null;\n        this.response = response || Buffer.from('Hello Client');\n    }\n\n    start(cb) {\n        this.server.listen(0, () => {\n            const { address, port } = this.server.address();\n            cb({ host: address, port });\n        });\n\n        this.server.on('connection', (socket) => {\n            this.socket = socket;\n            socket.on('data', (data) => {\n                console.log(`Received: ${data}`);\n                socket.write(this.response);\n            });\n\n            socket.on('end', () => {\n                console.log('Client disconnected');\n                this.socket = null;\n            });\n\n            socket.on('error', (err) => {\n                console.error('Socket error:', err);\n                this.drop();\n            });\n        });\n\n        this.server.on('error', (err) => {\n            console.error('Server error:', err);\n        });\n    }\n\n    drop() {\n        if (this.socket) {\n            this.socket.end();\n            this.socket.destroy();\n            this.socket = null;\n        }\n    }\n\n    close(cb) {\n        this.server.close(() => {\n            cb();\n        });\n    }\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n  constructor(did, finger, token, oaid) {\n    this.did = did;\n    this.finger = finger;\n    this.token = token;\n    this.oaid = oaid;\n  }\n\n  async taskRequest(method, url, body = '') {\n    const headers = new Headers({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.token}`,\n      'X-Device-ID': this.did,\n      'X-Fingerprint': this.finger,\n      'X-OAID': this.oaid\n    });\n\n    const options = {\n      method: method.toUpperCase(),\n      headers: headers,\n      body: method.toUpperCase() === 'POST' ? JSON.stringify(body) : null\n    };\n\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data in batches, and forwards each batch to an external service for processing.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 5000. When a client connects, it sets up a bidirectional communication channel where incoming data from the client is collected in batches (separated by '.'). Each complete batch is then sent to an external 'uppercase' service via a REQ socket. The server handles data streaming and batch processing efficiently.\n\nInput: None (The function takes no parameters; configuration is hardcoded)\n\nOutput: None (The function creates a server instance that runs indefinitely, listening for connections)\n\n---\n\nIf you'd prefer the class format (though the reference code is function-based):\n\nTask Description: Implement a TCP server class in Node.js that manages client connections and batch processing of incoming data.\n\nClass Description: The `TCPServer` class encapsulates a TCP server that listens for client connections, collects incoming data in batches, and forwards complete batches to an external service.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- port: [number] - The port number the server listens on (default: 5000)\n\nMethods:\n- constructor([port: number]) -> void - Initializes the server with optional port configuration\n- start() -> void - Starts the server and begins listening for connections\n- handleConnection(conn: net.Socket) -> void - Internal method to manage client connections and data processing\n- processBatch(batch: string[]) -> void - Sends a complete batch to the external service",
    "Canonical_solution": "function createTCPServer() {\n    var server = require('net').createServer();\n    server.on('connection', function(conn) {\n        conn.setEncoding('utf8');\n        \n        var req = context.socket('REQ');\n        req.setEncoding('utf8');\n        req.pipe(conn);\n        req.connect('uppercase');\n        \n        var batch = [];\n        var ask = function (q) {\n            req.write(q, 'utf8');\n        }\n        function readBatch() {\n            var msg; while (msg = conn.read()) {\n                msg.split('\\n').forEach(function(item) {\n                    if (item == '.') {\n                        console.log('Sending batch %s', batch);\n                        batch.forEach(ask);\n                        batch = [];\n                    }\n                    else if (item != '') {\n                        batch.push(item);\n                    }\n                });\n            }\n        }\n        conn.on('readable', readBatch);\n        readBatch();\n    });\n    server.listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst zmq = require('zeromq');\n\nclass TCPServer {\n  constructor(port = 5000) {\n    this.server = net.createServer(this.handleConnection.bind(this));\n    this.port = port;\n    this.socket = zmq.socket('req');\n    this.socket.connect('tcp://localhost:5555');\n  }\n\n  start() {\n    this.server.listen(this.port, () => {\n      console.log(`Server listening on port ${this.port}`);\n    });\n  }\n\n  handleConnection(conn) {\n    let buffer = '';\n\n    conn.on('data', (data) => {\n      buffer += data.toString();\n      const batches = buffer.split('.');\n      if (batches.length > 1) {\n        batches.slice(0, -1).forEach((batch) => {\n          this.processBatch(batch.trim());\n        });\n        buffer = batches[batches.length - 1];\n      }\n    });\n\n    conn.on('end', () => {\n      if (buffer.trim()) {\n        this.processBatch(buffer.trim());\n      }\n    });\n\n    conn.on('error', (err) => {\n      console.error('Connection error:', err);\n    });\n  }\n\n  processBatch(batch) {\n    if (batch) {\n      this.socket.send(batch, (err) => {\n        if (err) {\n          console.error('Error sending batch to service:', err);\n        } else {\n          console.log('Batch sent to service:', batch);\n        }\n      });\n    }\n  }\n}\n\nconst server = new TCPServer();\nserver.start();"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a TCP server in Node.js that serves Flash cross-domain policy files to clients, handling connections, errors, and policy file generation dynamically.\n\nClass Description: The Server class implements a TCP server that listens for Flash policy file requests and responds with an appropriate cross-domain policy XML. It handles server lifecycle events, client connections, and dynamic policy configuration.\n\nAttributes:\n- origins: [Array] - List of allowed domains and ports in \"domain:port\" format\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [net.Server] - The TCP server instance\n- server: [Object] - Optional fallback HTTP server\n- buffer: [Buffer] - Compiled policy file in binary format\n\nMethods:\n- constructor(options, origins) -> [Server] - Initializes the server with configuration options and allowed origins\n- listen(port, server, cb) -> [Server] - Starts listening on specified port, with optional fallback server and callback\n- responder(socket) -> [void] - Responds to client connections with policy file\n- compile() -> [Server] - Generates the policy file XML and converts it to buffer\n- add() -> [Server] - Adds one or more allowed origins to the policy\n- remove(origin) -> [Server] - Removes a specific origin from the policy\n- close() -> [Server] - Closes the server and cleans up resources",
    "Canonical_solution": "var net = require('net');\n\nclass Server {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => {\n        this.responder.call(this, socket);\n      });\n      this.responder.call(this, socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges. ' +\n          (\n            this.server\n            ? 'The Flash Policy File requests will only be served inline over the supplied HTTP server. Inline serving is slower than a dedicated server instance.'\n            : 'No fallback server supplied, we will be unable to answer Flash Policy File requests.'\n          )\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n      if (this.server && this.server['@'] && this.server.online) {\n        this.server.removeListener('connection', this.server['@']);\n      }\n      delete this.server?.online;\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (\n            data &&\n            data[0] === 60 &&\n            data.toString() === '<policy-file-request/>\\0' &&\n            socket &&\n            (socket.readyState === 'open' || socket.readyState === 'writeOnly')\n          ) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    if (this.port >= 0) {\n      this.socket.listen(this.port, () => {\n        this.socket.online = true;\n        callback?.call(this);\n      });\n    }\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = Buffer.from(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\n\nclass Server {\n  constructor(options = {}, origins = []) {\n    this.origins = origins;\n    this.port = options.port || 843;\n    this.log = options.log || console.log;\n    this.socket = null;\n    this.server = options.server || null;\n    this.buffer = Buffer.from('');\n    this.compile();\n  }\n\n  listen(port = this.port, server = this.server, cb = () => {}) {\n    this.socket = net.createServer(this.responder.bind(this));\n    this.socket.listen(port, () => {\n      this.log(`Policy server started on port ${port}`);\n      if (server) {\n        server.on('connect', (req, socket) => {\n          if (req.url === '/crossdomain.xml') {\n            socket.end(this.buffer);\n          }\n        });\n      }\n      cb();\n    });\n\n    this.socket.on('error', (err) => {\n      this.log(`Error: ${err.message}`);\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    socket.setTimeout(5000);\n    socket.write(this.buffer, () => {\n      socket.end();\n    });\n  }\n\n  compile() {\n    const xml = `<?xml version=\"1.0\"?>\n<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">\n<cross-domain-policy>\n${this.origins.map(origin => `<allow-access-from domain=\"${origin.split(':')[0]}\" to-ports=\"${origin.split(':')[1]}\" />`).join('\\n')}\n</cross-domain-policy>`;\n    this.buffer = Buffer.from(xml);\n    return this;\n  }\n\n  add(...origins) {\n    this.origins.push(...origins);\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    this.origins = this.origins.filter(o => o !== origin);\n    this.compile();\n    return this;\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close(() => {\n        this.log('Policy server closed');\n      });\n    }\n    return this;\n  }\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's 'net' module to listen for incoming connections, handle client messages, and emit events for commands received.\n\nClass Description: TCPListener is a class that creates a TCP server to listen for incoming connections on a specified port. It handles client connections, processes incoming data, and emits events when commands are received. The class extends Node.js's EventEmitter to provide event-driven functionality.\n\nAttributes:\n- port: [Number] - The port number on which the TCP server will listen\n- server: [Object] - The TCP server instance created by the 'net' module\n\nMethods:\n- constructor(port) -> [TCPListener] - Initializes the TCPListener instance with the specified port\n- start() -> [void] - Creates and starts the TCP server, sets up event handlers for client connections, data reception, and errors. Emits 'command' events when valid messages are received and 'log' events for server status updates\n\nThe class emits the following events:\n- 'command': (command, params, options, callback) - Emitted when a valid command message is received from a client\n- 'log': (message) - Emitted for logging server status and errors",
    "Canonical_solution": "var events = require('events');\nvar net = require('net');\n\nclass TCPListener {\n    constructor(port) {\n        this.port = port;\n        this.server = null;\n    }\n\n    start() {\n        this.server = net.createServer((c) => {\n            var data = '';\n            try {\n                c.on('data', (d) => {\n                    data += d;\n                    if (data.slice(-1) === '\\n') {\n                        var message = JSON.parse(data);\n                        this.emit('command', message.command, message.params, message.options, (message) => {\n                            c.end(message);\n                        });\n                    }\n                });\n                c.on('end', () => {});\n                c.on('error', () => {});\n            }\n            catch(e) {\n                this.emit('log', 'CLI listener failed to parse message ' + data);\n            }\n        }).listen(this.port, '127.0.0.1', () => {\n            this.emit('log', 'CLI listening on port ' + this.port);\n        });\n    }\n}\n\nTCPListener.prototype.__proto__ = events.EventEmitter.prototype;",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass TCPListener extends EventEmitter {\n    constructor(port) {\n        super();\n        this.port = port;\n        this.server = net.createServer(this.onConnection.bind(this));\n    }\n\n    start() {\n        this.server.listen(this.port, () => {\n            this.emit('log', `Server started on port ${this.port}`);\n        });\n\n        this.server.on('error', (err) => {\n            this.emit('log', `Server error: ${err.message}`);\n        });\n    }\n\n    onConnection(socket) {\n        this.emit('log', `New connection from ${socket.remoteAddress}:${socket.remotePort}`);\n\n        socket.on('data', (data) => {\n            const message = data.toString().trim();\n            const [command, ...rest] = message.split(' ');\n            const params = rest.slice(0, -1);\n            const options = rest[rest.length - 1];\n            const callback = (response) => socket.write(`${response}\\n`);\n\n            this.emit('command', command, params, options, callback);\n        });\n\n        socket.on('end', () => {\n            this.emit('log', `Connection closed from ${socket.remoteAddress}:${socket.remotePort}`);\n        });\n\n        socket.on('error', (err) => {\n            this.emit('log', `Socket error: ${err.message}`);\n        });\n    }\n}"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a TCP server using Node.js's `net` module to handle client connections and manage sessions with unique identifiers, while optionally supporting weak references for garbage collection.\n\nClass Description: The `DNodeServer` class is a TCP server implementation that manages client connections, assigns unique session IDs, and provides event-based interaction with connected clients. It supports optional weak reference handling for callbacks to prevent memory leaks.\n\nAttributes:\n- cons: [Function] - The constructor or function to be called for each new connection.\n- opts: [Object] - Configuration options for the server, including weak reference settings.\n- server: [net.Server] - The underlying TCP server instance.\n- server.sessions: [Object] - Dictionary of active sessions indexed by session IDs.\n\nMethods:\n- constructor(cons, opts) -> [DNodeServer] - Initializes the server with a connection handler and options. Sets up weak reference handling if enabled.\n- _handleConnection(stream) -> [void] - Handles new client connections, creates session with unique ID, and sets up data piping and event forwarding.\n- listen(port, host, callback) -> [net.Server] - Starts the server listening on specified port/host or UNIX socket path. Accepts optional callback for 'listening' event.\n- _randomId() -> [string] - Generates a random 16-character hexadecimal string for session identification.\n\nInput:\n- cons: [Function] - Required connection handler function\n- opts: [Object] - Optional configuration object (may contain 'weak' and 'proto' properties)\n- port: [number|string] - Port number or UNIX socket path to listen on\n- host: [string] - Optional hostname to bind to\n- callback: [Function] - Optional callback for listening event\n\nOutput:\n- Instance of DNodeServer when constructed\n- Instance of net.Server when calling listen()",
    "Canonical_solution": "var dnode = require('./lib/dnode');\nvar net = require('net');\nvar weak;\n\nclass DNodeServer {\n    constructor(cons, opts) {\n        if (!opts) opts = {};\n        \n        if (opts.weak !== false && !opts.proto) {\n            if (!weak) {\n                weak = require(\"weak\");\n            }\n            \n            opts.proto = {};\n            opts.proto.wrap = function (cb, id) {\n                var proto = this;\n                return weak(cb, function () {\n                    proto.cull(id);\n                });\n            };\n            opts.proto.unwrap = function (ref, id) {\n                var cb = weak.get(ref);\n                return cb || function () {};\n            };\n        }\n        \n        this.cons = cons;\n        this.opts = opts;\n        this.server = net.createServer(this._handleConnection.bind(this));\n        this.server.sessions = {};\n    }\n\n    _handleConnection(stream) {\n        var d = new dnode(this.cons, this.opts);\n        do { d.id = this._randomId(); }\n        while (this.server.sessions[d.id]);\n        \n        this.server.sessions[d.id] = d;\n        d.on('end', () => {\n            delete this.server.sessions[d.id];\n        });\n        \n        d.on('local', (ref) => {\n            this.server.emit('local', ref, d);\n        });\n        \n        d.on('remote', (remote) => {\n            this.server.emit('remote', remote, d);\n        });\n        \n        stream.on('error', (err) => {\n            if (err && err.code === 'EPIPE') return;\n            d.emit('error', err);\n        });\n        \n        d.stream = stream;\n        stream.pipe(d);\n        d.pipe(stream);\n    }\n\n    listen(port, host, callback) {\n        if (typeof port === 'number' && port >= 0) {\n            this.server.listen(port, host);\n        } else if (typeof port === 'string') {\n            this.server.listen(port);\n        } else {\n            throw new Error('no port or path provided');\n        }\n        \n        if (callback) {\n            this.server.on('listening', callback);\n        }\n        \n        return this.server;\n    }\n\n    _randomId() {\n        var s = '';\n        for (var i = 0; i < 4; i++) {\n            s += Math.random().toString(16).slice(2);\n        }\n        return s;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst { promisify } = require('util');\nconst crypto = require('crypto');\n\nclass DNodeServer {\n    constructor(cons, opts = {}) {\n        this.cons = cons;\n        this.opts = opts;\n        this.server = net.createServer(this._handleConnection.bind(this));\n        this.server.sessions = {};\n        if (this.opts.weak) {\n            const { WeakRef, WeakMap } = require('weak-ref');\n            this.weakRefs = new WeakMap();\n        }\n    }\n\n    _handleConnection(stream) {\n        const sessionId = this._randomId();\n        this.server.sessions[sessionId] = stream;\n        const session = this.cons(stream, this.opts.proto);\n        stream.on('close', () => {\n            delete this.server.sessions[sessionId];\n            if (this.opts.weak) {\n                this.weakRefs.delete(session);\n            }\n        });\n        if (this.opts.weak) {\n            this.weakRefs.set(session, new WeakRef(session));\n        }\n    }\n\n    listen(port, host, callback) {\n        return this.server.listen(port, host, callback);\n    }\n\n    _randomId() {\n        return crypto.randomBytes(8).toString('hex');\n    }\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a TCP server class in JavaScript using Node.js's 'net' module to handle client connections, manage sockets, and provide event-driven communication.\n\nClass Description: The Socket class represents a TCP server that can bind to a specific port/host, manage client connections, handle socket errors, and emit events for various connection states. It extends EventEmitter for event handling capabilities.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- socks: [Array] - Array of connected client sockets\n- settings: [Object] - Configuration settings for the server\n- type: [String] - Indicates whether the instance is acting as a server or client\n\nMethods:\n- constructor() -> [void] - Initializes the socket instance with default settings\n- bind(port, host, fn) -> [Socket] - Binds the server to a specified port and host (supports both TCP and Unix sockets)\n- onconnect(sock) -> [void] - Handles new client connections\n- addSocket(sock) -> [void] - Adds a new socket to the connection pool and sets up message parsing\n- removeSocket(sock) -> [void] - Removes a socket from the connection pool\n- handleErrors(sock) -> [void] - Sets up error handling for a socket\n- closeServer(fn) -> [void] - Closes the server and all client connections",
    "Canonical_solution": "var Emitter = require('events').EventEmitter;\nvar net = require('net');\nvar debug = require('debug')('axon:sock');\n\nclass Socket {\n  constructor() {\n    this.server = null;\n    this.socks = [];\n    this.settings = {};\n    this.set('hwm', Infinity);\n    this.set('identity', String(process.pid));\n    this.set('retry timeout', 100);\n    this.set('retry max timeout', 5000);\n  }\n\n  bind(port, host, fn) {\n    var self = this;\n    if ('client' == this.type) throw new Error('cannot bind() after connect()');\n    if ('function' == typeof host) {\n      fn = host;\n      host = undefined;\n    }\n\n    var unixSocket = false;\n\n    if ('string' == typeof port) {\n      port = url.parse(port);\n\n      if ('unix:' == port.protocol) {\n        host = fn;\n        fn = undefined;\n        port = port.pathname;\n        unixSocket = true;\n      } else {\n        host = port.hostname || '0.0.0.0';\n        port = parseInt(port.port, 10);\n      }\n    } else {\n      host = host || '0.0.0.0';\n    }\n\n    this.type = 'server';\n\n    this.server = net.createServer(this.onconnect.bind(this));\n\n    debug('%s bind %s:%s', this.type, host, port);\n    this.server.on('listening', this.emit.bind(this, 'bind'));\n\n    if (unixSocket) {\n      this.server.on('error', function(e) {\n        if (e.code == 'EADDRINUSE') {\n          var clientSocket = new net.Socket();\n\n          clientSocket.on('error', function(e2) {\n            if (e2.code == 'ECONNREFUSED') {\n              fs.unlink(port);\n              self.server.listen(port, host, fn);\n            }\n          });\n\n          clientSocket.connect({path: port}, function() {\n            throw e;\n          });\n        }\n      });\n    }\n\n    this.server.listen(port, host, fn);\n    return this;\n  }\n\n  onconnect(sock) {\n    var self = this;\n    var addr = sock.remoteAddress + ':' + sock.remotePort;\n    debug('%s accept %s', self.type, addr);\n    this.addSocket(sock);\n    this.handleErrors(sock);\n    this.emit('connect', sock);\n    sock.on('close', function() {\n      debug('%s disconnect %s', self.type, addr);\n      self.emit('disconnect', sock);\n      self.removeSocket(sock);\n    });\n  }\n\n  addSocket(sock) {\n    var parser = new Parser;\n    var i = this.socks.push(sock) - 1;\n    debug('%s add socket %d', this.type, i);\n    sock.pipe(parser);\n    parser.on('data', this.onmessage(sock));\n  }\n\n  removeSocket(sock) {\n    var i = this.socks.indexOf(sock);\n    if (!~i) return;\n    debug('%s remove socket %d', this.type, i);\n    this.socks.splice(i, 1);\n  }\n\n  handleErrors(sock) {\n    var self = this;\n    sock.on('error', function(err) {\n      debug('%s error %s', self.type, err.code || err.message);\n      self.emit('socket error', err);\n      self.removeSocket(sock);\n      if (!~ignore.indexOf(err.code)) return self.emit('error', err);\n      debug('%s ignored %s', self.type, err.code);\n      self.emit('ignored error', err);\n    });\n  }\n\n  closeServer(fn) {\n    debug('%s closing server', this.type);\n    this.server.on('close', this.emit.bind(this, 'close'));\n    this.server.close();\n    fn && fn();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst EventEmitter = require('events');\n\nclass Socket extends EventEmitter {\n  constructor() {\n    super();\n    this.server = null;\n    this.socks = [];\n    this.settings = { port: 8080, host: '127.0.0.1' };\n    this.type = 'server';\n  }\n\n  bind(port, host, fn) {\n    this.settings.port = port || this.settings.port;\n    this.settings.host = host || this.settings.host;\n    this.server = net.createServer((sock) => this.onconnect(sock));\n    this.server.listen(this.settings.port, this.settings.host, () => {\n      if (fn) fn();\n      this.emit('listening', this.settings);\n    });\n    return this;\n  }\n\n  onconnect(sock) {\n    this.addSocket(sock);\n    this.emit('connection', sock);\n  }\n\n  addSocket(sock) {\n    this.socks.push(sock);\n    sock.on('data', (data) => this.emit('data', sock, data));\n    sock.on('end', () => this.removeSocket(sock));\n    this.handleErrors(sock);\n  }\n\n  removeSocket(sock) {\n    const index = this.socks.indexOf(sock);\n    if (index !== -1) {\n      this.socks.splice(index, 1);\n      this.emit('close', sock);\n    }\n  }\n\n  handleErrors(sock) {\n    sock.on('error', (err) => {\n      this.emit('error', err, sock);\n      sock.destroy();\n    });\n  }\n\n  closeServer(fn) {\n    this.socks.forEach((sock) => sock.destroy());\n    this.server.close(() => {\n      if (fn) fn();\n      this.emit('closed');\n    });\n  }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const bingFallback = {\n      type: 'bing',\n      data: {\n        url: 'https://www.bing.com/th?id=OHR.DefaultWallpaper_EN-US1234567890_1920x1080.jpg&pid=hp'\n      }\n    };\n\n    if (unsplashClientId) {\n      try {\n        const unsplashResponse = await fetch(`https://api.unsplash.com/photos/random?client_id=${unsplashClientId}`);\n        if (!unsplashResponse.ok) throw new Error('Unsplash request failed');\n        const unsplashData = await unsplashResponse.json();\n        return { type: 'unsplash', data: unsplashData };\n      } catch (error) {\n        console.error('Error fetching from Unsplash:', error);\n      }\n    }\n\n    return bingFallback;\n  }\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a function that establishes a TCP server which listens for specific termination codes from clients and responds with a predefined byte sequence before shutting down.\n\nFunction Description: The function `makeTerminatingBackend` creates a TCP server that listens for incoming connections. When a client sends data containing specific termination codes (80877103 or 80877104), the server responds with a predefined byte sequence and then closes the connection. The server automatically selects an available port and returns it for external use.\n\nInput: \n- `byte` [String] - The UTF-8 encoded byte sequence to send as a response when a termination code is received.\n\nOutput:\n- `port` [Number] - The port number on which the TCP server is listening. This is dynamically assigned by the system.",
    "Canonical_solution": "function makeTerminatingBackend(byte) {\n  const { createServer } = require('net');\n\n  const server = createServer((socket) => {\n    socket.on('data', (buff) => {\n      const code = buff.readInt32BE(4);\n      if (code === 80877103 || code === 80877104) {\n        const packet = Buffer.from(byte, 'utf-8');\n        socket.write(packet);\n      }\n    });\n    socket.on('close', () => {\n      server.close();\n    });\n  });\n\n  server.listen();\n  const { port } = server.address();\n  return port;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "import socket\n\ndef makeTerminatingBackend(byte):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 0))\n    server_socket.listen(1)\n    port = server_socket.getsockname()[1]\n    \n    while True:\n        client_socket, addr = server_socket.accept()\n        data = client_socket.recv(1024)\n        if data:\n            try:\n                received_number = int.from_bytes(data, 'big')\n                if received_number == 80877103 or received_number == 80877104:\n                    client_socket.sendall(byte.encode('utf-8'))\n                    client_socket.close()\n                    break\n            except ValueError:\n                pass\n        client_socket.close()\n    \n    server_socket.close()\n    return port"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a TCP server class in JavaScript using Node.js's built-in 'net' module to handle client connections, manage socket communication, and process incoming messages.\n\nClass Description: The TcpReader class is responsible for establishing a TCP server, managing client connections, handling socket events, and processing incoming messages through a custom parser. It provides methods to start/stop the server and manage connected clients.\n\nAttributes:\n- transporter: [Object] - The parent transporter object that handles incoming messages\n- opts: [Object] - Configuration options including the port to listen on\n- sockets: [Array] - Array of currently connected client sockets\n- logger: [Object] - Logger instance from the transporter for error logging\n- server: [Object] - The TCP server instance\n- connected: [Boolean] - Flag indicating if the server is currently listening\n\nMethods:\n- constructor(transporter, opts) -> [void] - Initializes the TcpReader with transporter and options\n- listen() -> [Promise] - Starts the TCP server and begins listening for connections\n- onTcpClientConnected(socket) -> [void] - Handles new client connections and sets up event listeners\n- closeSocket(socket, err) -> [void] - Closes and removes a specific socket from the connections\n- close() -> [void] - Stops the server and closes all connected sockets",
    "Canonical_solution": "const net = require(\"net\");\n\nclass TcpReader {\n    constructor(transporter, opts) {\n        this.transporter = transporter;\n        this.opts = opts;\n        this.sockets = [];\n        this.logger = transporter.logger;\n    }\n\n    listen() {\n        return new Promise((resolve, reject) => {\n            this.server = net.createServer(socket => {\n                this.onTcpClientConnected(socket);\n            });\n\n            this.server.on(\"error\", err => {\n                reject(err);\n            });\n\n            const listenOptions = process.versions.node.split(\".\")[0] >= 8 \n                ? { port: this.opts.port, exclusive: true }\n                : this.opts.port;\n\n            this.server.listen(listenOptions, () => {\n                this.opts.port = this.server.address().port;\n                this.connected = true;\n                resolve();\n            });\n        });\n    }\n\n    onTcpClientConnected(socket) {\n        socket.on(\"error\", err => {\n            this.closeSocket(socket, err);\n        });\n\n        socket.on(\"close\", () => {\n            this.closeSocket(socket);\n        });\n\n        socket.setNoDelay(true);\n\n        const parser = require(\"../../../../src/transporters/tcp/parser\")();\n        socket.pipe(parser);\n\n        parser.on(\"data\", (type, message) => {\n            this.transporter.onIncomingMessage(type, message, socket);\n        });\n\n        parser.on(\"error\", err => {\n            this.closeSocket(socket, err);\n        });\n\n        this.sockets.push(socket);\n    }\n\n    closeSocket(socket, err) {\n        if (err) {\n            this.logger.warn(`TCP socket error: ${err.message}`);\n        }\n\n        const index = this.sockets.indexOf(socket);\n        if (index !== -1) {\n            this.sockets.splice(index, 1);\n            socket.destroy();\n        }\n    }\n\n    close() {\n        if (this.server && this.server.listening) {\n            this.server.close();\n        }\n\n        this.sockets.forEach(socket => {\n            socket.destroy();\n        });\n        this.sockets = [];\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class TcpReader {\n    constructor(transporter, opts) {\n        this.transporter = transporter;\n        this.opts = opts;\n        this.sockets = [];\n        this.logger = transporter.logger;\n        this.server = require('net').createServer();\n        this.connected = false;\n    }\n\n    listen() {\n        return new Promise((resolve, reject) => {\n            this.server.listen(this.opts.port, () => {\n                this.connected = true;\n                this.logger.info(`TCP Server is listening on port ${this.opts.port}`);\n                resolve();\n            }).on('error', (err) => {\n                this.logger.error('Error starting TCP server:', err);\n                reject(err);\n            });\n\n            this.server.on('connection', (socket) => {\n                this.onTcpClientConnected(socket);\n            });\n        });\n    }\n\n    onTcpClientConnected(socket) {\n        this.sockets.push(socket);\n        socket.on('data', (data) => {\n            try {\n                const message = data.toString();\n                this.transporter.processMessage(message);\n            } catch (err) {\n                this.logger.error('Error processing message:', err);\n            }\n        });\n\n        socket.on('close', () => {\n            this.closeSocket(socket);\n        });\n\n        socket.on('error', (err) => {\n            this.logger.error('Socket error:', err);\n            this.closeSocket(socket, err);\n        });\n    }\n\n    closeSocket(socket, err) {\n        const index = this.sockets.indexOf(socket);\n        if (index !== -1) {\n            this.sockets.splice(index, 1);\n            socket.destroy(err);\n        }\n    }\n\n    close() {\n        this.connected = false;\n        this.sockets.forEach(socket => this.closeSocket(socket));\n        this.server.close(() => {\n            this.logger.info('TCP Server closed');\n        });\n    }\n}"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a Flash Policy Server class in JavaScript using Node.js's net module to handle cross-domain policy requests for socket connections.\n\nClass Description: The FlashPolicyServer class creates a TCP server that responds to Flash socket policy requests. It manages allowed origins/ports, compiles the XML policy file, and handles server lifecycle events.\n\nAttributes:\n- origins: [Array] - List of allowed domain:port combinations\n- port: [Number] - TCP port to listen on (default: 843)\n- log: [Function] - Logging function (default: console.log)\n- socket: [Object] - TCP server instance\n- buffer: [Buffer] - Compiled policy file in binary format\n- server: [Object] - Optional existing server instance to attach to\n\nMethods:\n- constructor(options, origins) -> [FlashPolicyServer] - Initializes the server with options and allowed origins\n- listen(port, server, cb) -> [FlashPolicyServer] - Starts listening on specified port, optionally attaching to existing server\n- responder(socket) -> [void] - Responds to policy requests on a socket connection\n- compile() -> [FlashPolicyServer] - Generates the XML policy buffer from allowed origins\n- add() -> [FlashPolicyServer] - Adds new allowed origins to the policy\n- remove(origin) -> [FlashPolicyServer] - Removes an origin from the allowed list\n- close() -> [FlashPolicyServer] - Stops the server and cleans up listeners",
    "Canonical_solution": "var net = require('net');\n\nclass FlashPolicyServer {\n  constructor(options, origins) {\n    this.origins = origins || ['*:*'];\n    this.port = 843;\n    this.log = console.log;\n\n    Object.keys(options).forEach((key) => {\n      this[key] && (this[key] = options[key]);\n    });\n\n    this.socket = net.createServer((socket) => {\n      socket.on('error', () => this.responder(socket));\n      this.responder(socket);\n    });\n\n    this.socket.on('error', (err) => {\n      if (err.errno == 13) {\n        this.log && this.log(\n          'Unable to listen to port `' + this.port + '` as your Node.js instance does not have root privileges.'\n        );\n        this.emit('connect_failed', err);\n        this.socket.removeAllListeners();\n        delete this.socket;\n      } else {\n        this.log && this.log('FlashPolicyFileServer received an error event:\\n' + (err.message ? err.message : err));\n      }\n    });\n\n    this.socket.on('timeout', () => {});\n    this.socket.on('close', (err) => {\n      err && this.log && this.log('Server closing due to an error: \\n' + (err.message ? err.message : err));\n    });\n\n    this.compile();\n  }\n\n  listen(port, server, cb) {\n    let callback;\n    const args = Array.prototype.slice.call(arguments, 0);\n    \n    args.forEach((arg) => {\n      const type = typeof arg;\n      if (type === 'number') this.port = arg;\n      if (type === 'function') callback = arg;\n      if (type === 'object') this.server = arg;\n    });\n\n    if (this.server) {\n      this.server['@'] = (socket) => {\n        socket.once('data', (data) => {\n          if (data && data[0] === 60 && data.toString() === '<policy-file-request/>\\0' &&\n              socket && (socket.readyState === 'open' || socket.readyState === 'writeOnly')) {\n            try {\n              socket.end(this.buffer);\n            } catch (e) {}\n          }\n        });\n      };\n      this.server.on('connection', this.server['@']);\n    }\n\n    this.port >= 0 && this.socket.listen(this.port, () => {\n      this.socket.online = true;\n      if (callback) {\n        callback.call(this);\n        callback = undefined;\n      }\n    });\n\n    return this;\n  }\n\n  responder(socket) {\n    if (socket && socket.readyState == 'open' && socket.end) {\n      try {\n        socket.end(this.buffer);\n      } catch (e) {}\n    }\n  }\n\n  compile() {\n    const xml = [\n      '<?xml version=\"1.0\"?>',\n      '<!DOCTYPE cross-domain-policy SYSTEM \"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">',\n      '<cross-domain-policy>'\n    ];\n\n    this.origins.forEach((origin) => {\n      const parts = origin.split(':');\n      xml.push('<allow-access-from domain=\"' + parts[0] + '\" to-ports=\"'+ parts[1] +'\"/>');\n    });\n\n    xml.push('</cross-domain-policy>');\n    this.buffer = new Buffer(xml.join(''), 'utf8');\n    return this;\n  }\n\n  add() {\n    const args = Array.prototype.slice.call(arguments, 0);\n    let i = args.length;\n\n    while (i--) {\n      if (this.origins.indexOf(args[i]) >= 0) {\n        args[i] = null;\n      }\n    }\n\n    Array.prototype.push.apply(\n      this.origins,\n      args.filter((value) => !!value)\n    );\n\n    this.compile();\n    return this;\n  }\n\n  remove(origin) {\n    const position = this.origins.indexOf(origin);\n    if (position > 0) {\n      this.origins.splice(position,1);\n      this.compile();\n    }\n    return this;\n  }\n\n  close() {\n    this.socket.removeAllListeners();\n    this.socket.close();\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\n\nclass FlashPolicyServer {\n    constructor(options = {}, origins = []) {\n        this.origins = origins;\n        this.port = options.port || 843;\n        this.log = options.log || console.log;\n        this.socket = null;\n        this.buffer = Buffer.from('');\n        this.server = options.server || null;\n        this.compile();\n    }\n\n    listen(port = this.port, server = this.server, cb = () => {}) {\n        if (server) {\n            server.on('connection', (socket) => {\n                if (socket.remotePort === 1024) {\n                    this.responder(socket);\n                }\n            });\n            cb(null, this);\n        } else {\n            this.socket = net.createServer((socket) => {\n                this.responder(socket);\n            }).listen(port, () => {\n                this.log(`FlashPolicyServer listening on port ${port}`);\n                cb(null, this);\n            });\n        }\n        return this;\n    }\n\n    responder(socket) {\n        socket.setTimeout(1000);\n        socket.setEncoding('utf8');\n        socket.once('data', (data) => {\n            if (data.startsWith('<policy-file-request/>')) {\n                socket.write(this.buffer);\n            }\n            socket.end();\n        });\n    }\n\n    compile() {\n        const xml = ['<?xml version=\"1.0\"?>', '<cross-domain-policy>'];\n        this.origins.forEach((origin) => {\n            const [domain, port] = origin.split(':');\n            xml.push(`<allow-access-from domain=\"${domain}\" to-ports=\"${port}\" />`);\n        });\n        xml.push('</cross-domain-policy>');\n        this.buffer = Buffer.from(xml.join('\\n') + '\\0');\n        return this;\n    }\n\n    add(origin) {\n        if (!this.origins.includes(origin)) {\n            this.origins.push(origin);\n            this.compile();\n        }\n        return this;\n    }\n\n    remove(origin) {\n        this.origins = this.origins.filter(o => o !== origin);\n        this.compile();\n        return this;\n    }\n\n    close() {\n        if (this.socket) {\n            this.socket.close(() => {\n                this.log('FlashPolicyServer closed');\n            });\n        }\n        return this;\n    }\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a UDP communication class in JavaScript using Node.js's dgram module for bidirectional message handling between processes.\n\nClass Description: The Udp class facilitates UDP-based communication with capabilities for both sending and receiving messages. It manages socket creation, port binding, message queuing, and event handling for network communication.\n\nAttributes:\n- stack: [Array] - Stores outgoing messages in a queue before sending\n- port: [Number|null] - The target port number for outgoing messages\n- socket: [dgram.Socket|null] - UDP socket instance for sending messages\n- listener: [dgram.Socket|null] - UDP socket instance for receiving messages\n- client: [Object] - Reference to the parent client object for message handling\n\nMethods:\n- constructor(client) -> [void] - Initializes the UDP instance with a client reference and creates socket objects\n- start() -> [void] - Begins UDP communication by setting up input and output sockets\n- clear() -> [void] - Clears the message queue\n- run() -> [void] - Processes all messages in the queue\n- push(msg) -> [void] - Adds a message to the outgoing queue (Input: msg [String] - Message to send)\n- play(data) -> [void] - Sends a single message via UDP (Input: data [String] - Message content)\n- selectOutput(port=49161) -> [void] - Configures the output port (Input: port [Number] - Target port number)\n- selectInput(port=49160) -> [void] - Configures and starts the input listener (Input: port [Number] - Listening port number)",
    "Canonical_solution": "const dgram = require('dgram');\n\nclass Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = dgram ? dgram.createSocket('udp4') : null;\n    this.listener = dgram ? dgram.createSocket('udp4') : null;\n    this.client = client;\n  }\n\n  start() {\n    if (!dgram || !this.socket || !this.listener) { \n      console.warn('UDP', 'Could not start.'); \n      return; \n    }\n    console.info('UDP', 'Starting..');\n\n    this.selectInput();\n    this.selectOutput();\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    for (const item of this.stack) {\n      this.play(item);\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (!this.socket) { return; }\n    this.socket.send(Buffer.from(`${data}`), this.port, this.client.io.ip, (err) => {\n      if (err) { console.warn(err); }\n    });\n  }\n\n  selectOutput(port = 49161) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (parseInt(port) === this.port) { console.warn('UDP', 'Already selected'); return; }\n    if (isNaN(port) || port < 1000) { console.warn('UDP', 'Unavailable port'); return; }\n\n    console.log('UDP', `Output: ${port}`);\n    this.port = parseInt(port);\n  }\n\n  selectInput(port = 49160) {\n    if (!dgram) { console.warn('UDP', 'Unavailable.'); return; }\n    if (this.listener) { this.listener.close(); }\n\n    console.log('UDP', `Input: ${port}`);\n    this.listener = dgram.createSocket('udp4');\n\n    this.listener.on('message', (msg, rinfo) => {\n      this.client.commander.trigger(`${msg}`);\n    });\n\n    this.listener.on('listening', () => {\n      const address = this.listener.address();\n      console.info('UDP', `Started socket at ${address.address}:${address.port}`);\n    });\n\n    this.listener.on('error', (err) => {\n      console.warn('UDP', `Server error:\\n ${err.stack}`);\n      this.listener.close();\n    });\n\n    this.listener.bind(port);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "const dgram = require('dgram');\n\nclass Udp {\n  constructor(client) {\n    this.stack = [];\n    this.port = null;\n    this.socket = null;\n    this.listener = null;\n    this.client = client;\n  }\n\n  start() {\n    this.socket = dgram.createSocket('udp4');\n    this.listener = dgram.createSocket('udp4');\n  }\n\n  clear() {\n    this.stack = [];\n  }\n\n  run() {\n    while (this.stack.length > 0) {\n      const msg = this.stack.shift();\n      this.play(msg);\n    }\n  }\n\n  push(msg) {\n    this.stack.push(msg);\n  }\n\n  play(data) {\n    if (this.port && this.socket) {\n      this.socket.send(data, 0, data.length, this.port, 'localhost', (err) => {\n        if (err) throw err;\n      });\n    }\n  }\n\n  selectOutput(port = 49161) {\n    this.port = port;\n  }\n\n  selectInput(port = 49160) {\n    this.listener.bind(port, () => {\n      console.log(`UDP listener bound on port ${port}`);\n    });\n\n    this.listener.on('message', (msg, rinfo) => {\n      console.log(`Message received from ${rinfo.address}:${rinfo.port} - ${msg}`);\n      this.client.handleMessage(msg.toString());\n    });\n\n    this.listener.on('listening', () => {\n      const address = this.listener.address();\n      console.log(`UDP listener listening on ${address.address}:${address.port}`);\n    });\n\n    this.listener.on('close', () => {\n      console.log('UDP listener closed');\n    });\n\n    this.listener.on('error', (err) => {\n      console.error(`UDP listener error:\\n${err.stack}`);\n      this.listener.close();\n    });\n  }\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Implement a UDP-based server discovery system that allows servers to broadcast their presence and receive information about other nearby servers on the network.\n\nClass Description: The class provides functionality for UDP-based server discovery, including broadcasting server presence (heartbeats) and listening for broadcasts from other servers. It maintains a list of discovered servers and handles network communication errors.\n\nAttributes:\n- nearbyServers: [Object] - A dictionary storing information about discovered nearby servers, keyed by hostname.\n- lastDiscoveryBroadcast: [Number] - Timestamp of the last broadcast sent by this server.\n- broadcastIP: [String] - The broadcast IP address used for sending discovery messages.\n- discoveryListener: [Object] - The UDP socket instance used for listening to discovery messages.\n\nMethods:\n- setupDiscovery([callback: Function]) -> [void] - Initializes the UDP listener socket and binds it to the configured port. The optional callback is executed when binding is complete.\n- discoveryBroadcast([type: String, message: Object, callback: Function]) -> [void] - Creates a UDP client to broadcast a message of the specified type. The message should be an object that will be stringified to JSON. The optional callback is executed after the message is sent.\n- discoveryReceive([msg: Buffer, rinfo: Object]) -> [void] - Handles incoming UDP messages, parsing them as JSON and processing different message types (currently only 'heartbeat' is implemented). Updates the nearbyServers list when valid messages are received.\n- shutdownDiscovery() -> [void] - Closes the UDP listener socket if it exists, cleaning up network resources.\n- calcBroadcastIP() -> [String] - (Implied but not shown) Calculates the broadcast IP address based on network interfaces.",
    "Canonical_solution": "var dgram = require(\"dgram\");\nvar os = require('os');\nvar Netmask = require('netmask').Netmask;\n\nvar Class = require(\"pixl-class\");\nvar Tools = require(\"pixl-tools\");\n\nmodule.exports = Class.create({\n\t\n\tnearbyServers: null,\n\tlastDiscoveryBroadcast: 0,\n\t\n\tsetupDiscovery: function(callback) {\n\t\tvar self = this;\n\t\t\n\t\tthis.nearbyServers = {};\n\t\tthis.lastDiscoveryBroadcast = 0;\n\t\t\n\t\tif (!this.server.config.get('udp_broadcast_port')) {\n\t\t\tif (callback) callback();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.broadcastIP = this.server.config.get('broadcast_ip') || this.calcBroadcastIP();\n\t\t\n\t\tvar listener = this.discoveryListener = dgram.createSocket(\"udp4\");\n\t\t\n\t\tlistener.on(\"message\", function (msg, rinfo) {\n\t\t\tself.discoveryReceive( msg, rinfo );\n\t\t} );\n\t\t\n\t\tlistener.on(\"error\", function (err) {\n\t\t\tself.logError('udp', \"UDP socket listener error: \" + err);\n\t\t\tself.discoveryListener = null;\n\t\t} );\n\t\t\n\t\tlistener.bind( this.server.config.get('udp_broadcast_port'), function() {\n\t\t\tif (callback) callback();\n\t\t} );\n\t},\n\t\n\tdiscoveryBroadcast: function(type, message, callback) {\n\t\tvar self = this;\n\t\t\n\t\tmessage.action = type;\n\t\t\n\t\tvar client = dgram.createSocket('udp4');\n\t\tvar message = Buffer.from( JSON.stringify(message) + \"\\n\" );\n\t\tclient.bind( 0, function() {\n\t\t\tclient.setBroadcast( true );\t\t\t\n\t\t\tclient.send(message, 0, message.length, self.server.config.get('udp_broadcast_port'), self.broadcastIP, function(err) {\n\t\t\t\tif (err) self.logDebug(9, \"UDP broadcast failed: \" + err);\n\t\t\t\tclient.close();\n\t\t\t\tif (callback) callback();\n\t\t\t} );\n\t\t} );\n\t},\n\t\n\tdiscoveryReceive: function(msg, rinfo) {\n\t\tvar text = msg.toString();\n\t\tif (text.match(/^\\{/)) {\n\t\t\tvar json = null;\n\t\t\ttry { json = JSON.parse(text); }\n\t\t\tcatch (e) {\n\t\t\t\tthis.logError(9, \"Failed to parse UDP JSON message: \" + e);\n\t\t\t}\n\t\t\tif (json && json.action) {\n\t\t\t\tswitch (json.action) {\n\t\t\t\t\tcase 'heartbeat':\n\t\t\t\t\t\tif (json.hostname && (json.hostname != this.server.hostname)) {\n\t\t\t\t\t\t\tjson.now = Tools.timeNow();\n\t\t\t\t\t\t\tdelete json.action;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!this.nearbyServers[ json.hostname ]) {\n\t\t\t\t\t\t\t\tthis.nearbyServers[ json.hostname ] = json;\n\t\t\t\t\t\t\t\tif (this.multi.master) {\n\t\t\t\t\t\t\t\t\tthis.logDebug(6, \"Discovered nearby server: \" + json.hostname, json);\n\t\t\t\t\t\t\t\t\tthis.authSocketEmit( 'update', { nearby: this.nearbyServers } );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.nearbyServers[ json.hostname ] = json;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\tshutdownDiscovery: function() {\n\t\tif (this.discoveryListener) {\n\t\t\tthis.discoveryListener.close();\n\t\t}\n\t}\n});",
    "Code_level": "Class-level",
    "FSMID_for_test": 98,
    "wrong_result": "const dgram = require('dgram');\nconst os = require('os');\n\nclass ServerDiscovery {\n    constructor(port) {\n        this.nearbyServers = {};\n        this.lastDiscoveryBroadcast = 0;\n        this.broadcastIP = this.calcBroadcastIP();\n        this.discoveryListener = dgram.createSocket('udp4');\n        this.port = port;\n    }\n\n    setupDiscovery(callback) {\n        this.discoveryListener.bind(this.port, () => {\n            this.discoveryListener.setBroadcast(true);\n            if (callback) callback();\n        });\n\n        this.discoveryListener.on('message', (msg, rinfo) => {\n            this.discoveryReceive(msg, rinfo);\n        });\n    }\n\n    discoveryBroadcast(type, message, callback) {\n        const payload = JSON.stringify({ type, message });\n        const client = dgram.createSocket('udp4');\n        client.send(payload, 0, payload.length, this.port, this.broadcastIP, () => {\n            this.lastDiscoveryBroadcast = Date.now();\n            client.close();\n            if (callback) callback();\n        });\n    }\n\n    discoveryReceive(msg, rinfo) {\n        try {\n            const data = JSON.parse(msg.toString());\n            if (data.type === 'heartbeat') {\n                this.nearbyServers[rinfo.address] = { ...data.message, lastSeen: Date.now() };\n            }\n        } catch (e) {\n            console.error('Failed to parse discovery message:', e);\n        }\n    }\n\n    shutdownDiscovery() {\n        if (this.discoveryListener) {\n            this.discoveryListener.close();\n        }\n    }\n\n    calcBroadcastIP() {\n        const interfaces = os.networkInterfaces();\n        for (const interfaceName in interfaces) {\n            const iface = interfaces[interfaceName];\n            for (const alias of iface) {\n                if (alias.family === 'IPv4' && !alias.internal) {\n                    const ipParts = alias.address.split('.');\n                    ipParts[3] = '255';\n                    return ipParts.join('.');\n                }\n            }\n        }\n        return '255.255.255.255'; // Fallback to default broadcast address\n    }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass HTTPClient {\n    constructor(headers = {}) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios.get(url, { headers: this.headers, params });\n            return response.data;\n        } catch (error) {\n            throw new Error(`GET request failed: ${error.message}`);\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios.post(url, data, { headers: this.headers, params });\n            return response.data;\n        } catch (error) {\n            throw new Error(`POST request failed: ${error.message}`);\n        }\n    }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n    constructor(ws) {\n        this._ws = ws;\n        this._handler = null;\n        this._messageListener = this._messageReceived.bind(this);\n        this._ws.addEventListener('message', this._messageListener);\n    }\n\n    send(message) {\n        if (this._ws.readyState === WebSocket.OPEN) {\n            this._ws.send(message);\n        }\n    }\n\n    close() {\n        this._ws.close();\n    }\n\n    listen(handler) {\n        this._handler = handler;\n    }\n\n    dispose() {\n        this._ws.removeEventListener('message', this._messageListener);\n    }\n\n    _messageReceived(event) {\n        if (this._handler) {\n            this._handler(event.data);\n        }\n    }\n}\n\nclass NddService {\n    constructor(frontend) {\n        this._disconnectPromise = new Promise((resolve) => {\n            process.on('SIGINT', resolve);\n            process.on('SIGTERM', resolve);\n        });\n        this._connected = new Set();\n        this._frontend = frontend;\n        this._pipe = '/path/to/named/pipe';\n        // Setup IPC server here\n    }\n\n    async _startSession(info, frontend) {\n        const { inspectorUrl, id } = info;\n        const ws = new WebSocket(inspectorUrl);\n        const channel = new Channel(ws);\n\n        channel.listen((message) => {\n            frontend.onMessage(id, message);\n        });\n\n        ws.onopen = () => {\n            this._connected.add(id);\n            frontend.onSessionStarted(id);\n        };\n\n        ws.onclose = () => {\n            this._connected.delete(id);\n            frontend.onSessionEnded(id);\n        };\n\n        return async () => {\n            channel.dispose();\n            ws.close();\n        };\n    }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a JavaScript class for interacting with the Cryptsy cryptocurrency exchange API, handling both public and private endpoints with proper authentication and request management.\n\nClass Description: The Cryptsy class provides a wrapper for the Cryptsy API, enabling users to make authenticated requests to private endpoints and public data requests. It handles API authentication, request signing, and response processing.\n\nAttributes:\n- key: string - API key for authentication\n- secret: string - API secret for request signing\n- PUBLIC_API_URL: string - Base URL for public API endpoints (default: 'http://pubapi.cryptsy.com/api.php')\n- PRIVATE_API_URL: string - Base URL for private API endpoints (default: 'https://api.cryptsy.com/api')\n- USER_AGENT: string - User agent string for requests (default: 'nomp/node-open-mining-portal')\n- STRICT_SSL: boolean - Static flag for SSL verification (default: true)\n\nMethods:\n- constructor(key, secret) -> Cryptsy - Initializes the API client with credentials\n- _getPrivateHeaders(parameters: object) -> object - Generates authentication headers for private requests\n- _request(options: object, callback: function) -> Cryptsy - Base request method with common configuration\n- _public(parameters: object, callback: function) -> Cryptsy - Makes public API requests\n- _private(parameters: object, callback: function) -> Cryptsy - Makes authenticated private API requests\n- getTicker(callback: function) -> Cryptsy - Gets market ticker data\n- getOrderBook(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets order book for a currency pair\n- getTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets public trade history\n- myBalances(callback: function) -> Cryptsy - Gets user's account balances\n- myOpenOrders(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's open orders\n- myTradeHistory(currencyA: string, currencyB: string, callback: function) -> Cryptsy - Gets user's trade history\n- buy(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a buy order\n- sell(currencyA: string, currencyB: string, rate: number, amount: number, callback: function) -> Cryptsy - Places a sell order\n- cancelOrder(currencyA: string, currencyB: string, orderNumber: string, callback: function) -> Cryptsy - Cancels an order\n- withdraw(currency: string, amount: number, address: string, callback: function) -> Cryptsy - Withdraws funds\n- _joinCurrencies(currencyA: string, currencyB: string) -> string - Helper to format currency pairs",
    "Canonical_solution": "var request = require('request');\nvar nonce = require('nonce');\nvar crypto = require('crypto');\n\nclass Cryptsy {\n    constructor(key, secret) {\n        this.key = key;\n        this.secret = secret;\n        this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n        this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n        this.USER_AGENT = 'nomp/node-open-mining-portal';\n    }\n\n    static STRICT_SSL = true;\n\n    _getPrivateHeaders(parameters) {\n        if (!this.key || !this.secret) {\n            throw 'Cryptsy: Error. API key and secret required';\n        }\n\n        let paramString = Object.keys(parameters).sort().map(function(param) {\n            return encodeURIComponent(param) + '=' + encodeURIComponent(parameters[param]);\n        }).join('&');\n\n        let signature = crypto.createHmac('sha512', this.secret).update(paramString).digest('hex');\n\n        return {\n            Key: this.key,\n            Sign: signature\n        };\n    }\n\n    _request(options, callback) {\n        if (!('headers' in options)) {\n            options.headers = {};\n        }\n\n        options.headers['User-Agent'] = this.USER_AGENT;\n        options.json = true;\n        options.strictSSL = Cryptsy.STRICT_SSL;\n\n        request(options, function(err, response, body) {\n            callback(err, body);\n        });\n\n        return this;\n    }\n\n    _public(parameters, callback) {\n        let options = {\n            method: 'GET',\n            url: this.PUBLIC_API_URL,\n            qs: parameters\n        };\n\n        return this._request(options, callback);\n    }\n\n    _private(parameters, callback) {\n        parameters.nonce = nonce();\n        let options = {\n            method: 'POST',\n            url: this.PRIVATE_API_URL,\n            form: parameters,\n            headers: this._getPrivateHeaders(parameters)\n        };\n\n        return this._request(options, callback);\n    }\n\n    getTicker(callback) {\n        let parameters = {\n            method: 'marketdatav2'\n        };\n        return this._public(parameters, callback);\n    }\n\n    getOrderBook(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOrderBook',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    getTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._public(parameters, callback);\n    }\n\n    myBalances(callback) {\n        let parameters = {\n            command: 'returnBalances'\n        };\n        return this._private(parameters, callback);\n    }\n\n    myOpenOrders(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnOpenOrders',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    myTradeHistory(currencyA, currencyB, callback) {\n        let parameters = {\n            command: 'returnTradeHistory',\n            currencyPair: this._joinCurrencies(currencyA, currencyB)\n        };\n        return this._private(parameters, callback);\n    }\n\n    buy(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'buy',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    sell(currencyA, currencyB, rate, amount, callback) {\n        let parameters = {\n            command: 'sell',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            rate: rate,\n            amount: amount\n        };\n        return this._private(parameters, callback);\n    }\n\n    cancelOrder(currencyA, currencyB, orderNumber, callback) {\n        let parameters = {\n            command: 'cancelOrder',\n            currencyPair: this._joinCurrencies(currencyA, currencyB),\n            orderNumber: orderNumber\n        };\n        return this._private(parameters, callback);\n    }\n\n    withdraw(currency, amount, address, callback) {\n        let parameters = {\n            command: 'withdraw',\n            currency: currency,\n            amount: amount,\n            address: address\n        };\n        return this._private(parameters, callback);\n    }\n\n    _joinCurrencies(currencyA, currencyB) {\n        return currencyA + '_' + currencyB;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Cryptsy {\n    constructor(key, secret) {\n        this.key = key;\n        this.secret = secret;\n        this.PUBLIC_API_URL = 'http://pubapi.cryptsy.com/api.php';\n        this.PRIVATE_API_URL = 'https://api.cryptsy.com/api';\n        this.USER_AGENT = 'nomp/node-open-mining-portal';\n        this.STRICT_SSL = true;\n    }\n\n    _getPrivateHeaders(parameters) {\n        const post_data = new URLSearchParams(parameters).toString();\n        const sign = require('crypto').createHmac('sha512', this.secret).update(post_data).digest('hex');\n        return {\n            'Sign': sign,\n            'Key': this.key\n        };\n    }\n\n    _request(options, callback) {\n        const https = require('https');\n        const http = require('http');\n        const protocol = options.url.startsWith('https') ? https : http;\n        const req = protocol.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n            res.on('end', () => {\n                callback(null, JSON.parse(data));\n            });\n        }).on('error', (err) => {\n            callback(err);\n        });\n        if (options.method === 'POST' && options.body) {\n            req.write(options.body);\n        }\n        req.end();\n    }\n\n    _public(parameters, callback) {\n        const url = new URL(this.PUBLIC_API_URL);\n        Object.keys(parameters).forEach(key => url.searchParams.append(key, parameters[key]));\n        this._request({\n            url: url.toString(),\n            method: 'GET',\n            headers: {\n                'User-Agent': this.USER_AGENT\n            }\n        }, callback);\n    }\n\n    _private(parameters, callback) {\n        const options = {\n            url: this.PRIVATE_API_URL,\n            method: 'POST',\n            body: new URLSearchParams(parameters).toString(),\n            headers: {\n                'User-Agent': this.USER_AGENT,\n                ...this._getPrivateHeaders(parameters)\n            }\n        };\n        this._request(options, callback);\n    }\n\n    getTicker(callback) {\n        this._public({ method: 'marketdatav2' }, callback);\n    }\n\n    getOrderBook(currencyA, currencyB, callback) {\n        this._public({ method: 'orderdata' }, (err, data) => {\n            if (err) return callback(err);\n            const marketId = this._findMarketId(data.markets, currencyA, currencyB);\n            if (!marketId) return callback(new Error('Market not found'));\n            callback(null, data.markets[marketId]);\n        });\n    }\n\n    getTradeHistory(currencyA, currencyB, callback) {\n        this._public({ method: 'orderdata' }, (err, data) => {\n            if (err) return callback(err);\n            const marketId = this._findMarketId(data.markets, currencyA, currencyB);\n            if (!marketId) return callback(new Error('Market not found'));\n            callback(null, data.markets[marketId].tradehistory);\n        });\n    }\n\n    myBalances(callback) {\n        this._private({ method: 'getinfo' }, callback);\n    }\n\n    myOpenOrders(currencyA, currencyB, callback) {\n        this._private({ method: 'myorders', marketid: this._findMarketIdByCurrencies(currencyA, currencyB) }, callback);\n    }\n\n    myTradeHistory(currencyA, currencyB, callback) {\n        this._private({ method: 'mytransactions', marketid: this._findMarketIdByCurrencies(currencyA, currencyB) }, callback);\n    }\n\n    buy(currencyA, currencyB, rate, amount, callback) {\n        this._private({\n            method: 'buy',\n            marketid: this._findMarketIdByCurrencies(currencyA, currencyB),\n            quantity: amount,\n            price: rate\n        }, callback);\n    }\n\n    sell(currencyA, currencyB, rate, amount, callback) {\n        this._private({\n            method: 'sell',\n            marketid: this._findMarketIdByCurrencies(currencyA, currencyB),\n            quantity: amount,\n            price: rate\n        }, callback);\n    }\n\n    cancelOrder(currencyA, currencyB, orderNumber, callback) {\n        this._private({\n            method: 'cancelorder',\n            orderid: orderNumber\n        }, callback);\n    }\n\n    withdraw(currency, amount, address, callback) {\n        this._private({\n            method: 'withdraw',\n            address: address,\n            amount: amount,\n            currency: currency\n        }, callback);\n    }\n\n    _joinCurrencies(currencyA, currencyB) {\n        return `${currencyA}_${currencyB}`;\n    }\n\n    _findMarketId(markets, currencyA, currencyB) {\n        for (let id in markets) {\n            if (markets[id].label === this._joinCurrencies(currencyA, currencyB)) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    _findMarketIdByCurrencies(currencyA, currencyB) {\n        return this._joinCurrencies(currencyA, currencyB);\n    }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class Binary {\n    constructor(url, data = {}) {\n        this.url = url;\n        this.name = data.name || '-1';\n        this.installDirectory = data.installDirectory || `${process.cwd()}/bin`;\n        this.binaryDirectory = '-1';\n        this.binaryPath = '-1';\n    }\n\n    async install() {\n        try {\n            this.binaryDirectory = this._getInstallDirectory();\n            await this._createDirectory(this.binaryDirectory);\n            const filePath = await this._downloadFile(this.url, this.binaryDirectory);\n            await this._extractFile(filePath, this.binaryDirectory);\n            await this._cleanup(filePath);\n            console.log('Installation complete.');\n        } catch (error) {\n            console.error('Installation failed:', error);\n            throw error;\n        }\n    }\n\n    _getInstallDirectory() {\n        return `${this.installDirectory}/${this.name}`;\n    }\n\n    async _createDirectory(path) {\n        const fs = require('fs').promises;\n        await fs.mkdir(path, { recursive: true });\n    }\n\n    async _downloadFile(url, directory) {\n        const https = require('https');\n        const fs = require('fs').promises;\n        const path = require('path');\n        const filePath = path.join(directory, 'temp.bin');\n        const fileStream = fs.createWriteStream(filePath);\n\n        return new Promise((resolve, reject) => {\n            https.get(url, response => {\n                if (response.statusCode !== 200) {\n                    return reject(new Error(`Failed to get '${url}' (${response.statusCode})`));\n                }\n                response.pipe(fileStream);\n                fileStream.on('finish', () => resolve(filePath));\n                fileStream.on('error', err => {\n                    fs.unlink(filePath);\n                    reject(err);\n                });\n            }).on('error', err => reject(err));\n        });\n    }\n\n    async _extractFile(filePath, directory) {\n        const tar = require('tar');\n        await tar.extract({ file: filePath, cwd: directory });\n    }\n\n    async _cleanup(filePath) {\n        const fs = require('fs').promises;\n        await fs.unlink(filePath);\n    }\n}"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n    const socket = new WebSocket('wss://' + wssUrl);\n\n    socket.addEventListener('open', function (event) {\n        console.log('WebSocket connection opened');\n        socket.send(JSON.stringify({ type: 'greeting', message: 'Hello Server!' }));\n    });\n\n    socket.addEventListener('message', function (event) {\n        const data = JSON.parse(event.data);\n        console.log('Message from server:', data);\n    });\n\n    socket.addEventListener('close', function (event) {\n        console.log('WebSocket connection closed', event.code, event.reason);\n    });\n\n    socket.addEventListener('error', function (error) {\n        console.error('WebSocket error:', error);\n    });\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const sendWebhook = async (data) => {\n    const webhookUrl = 'https://example.com/webhook'; // Replace with your webhook URL\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending webhook:', error);\n    }\n};"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes a connection to a WebSocket server, handles communication events (open, message, close, error), and provides methods to send messages and close the connection. The class should integrate with a listener interface to notify about connection events and received messages.\n\nClass Description: The WebSocketClient class is an implementation of the AiClient interface that manages WebSocket connections in a browser environment. It handles the WebSocket lifecycle, including connection establishment, message exchange, and error handling, while notifying a listener about these events.\n\nAttributes:\n- isStop: boolean - Indicates whether the connection has been stopped.\n- url: string - The WebSocket server URL to connect to.\n- webSocket: WebSocket | undefined - The WebSocket instance.\n- isOpen: boolean - Indicates whether the WebSocket connection is open.\n- payload: string | undefined - The initial message payload to send after connection.\n- listener: AiClientListener - The listener interface for event notifications.\n\nMethods:\n- constructor(url: string, listener: AiClientListener) -> void - Initializes the WebSocketClient with the server URL and a listener.\n- start(payload: string) -> void - Starts the WebSocket connection and sets up event handlers. Sends the initial payload once connected.\n- stop() -> void - Closes the WebSocket connection and notifies the listener.\n- send(message: string) -> void - Sends a message through the WebSocket if the connection is open.\n- onOpen(_: Event) -> void - Handles the WebSocket 'open' event, sets the connection state, and sends the initial payload.\n- onMessage(event: MessageEvent) -> void - Handles incoming messages and notifies the listener.\n- onClose(_: CloseEvent) -> void - Handles the WebSocket 'close' event, updates the connection state, and notifies the listener.\n- onError(_: Event) -> void - Handles WebSocket errors, updates the connection state, and notifies the listener.",
    "Canonical_solution": "import {AiClientListener} from \"../../AiClientListener.ts\";\nimport {AiClient} from \"../../AiClient.ts\";\n\nexport class WebSocketClient implements AiClient {\n    isStop: boolean = false\n    url: string;\n    webSocket?: WebSocket;\n    isOpen: boolean = false;\n    payload?: string;\n    listener: AiClientListener;\n\n    constructor(url: string, listener: AiClientListener) {\n        this.url = url;\n        this.listener = listener;\n    }\n\n    start(payload: string) {\n        this.listener.onStart(this);\n        this.payload = payload;\n        this.webSocket = new WebSocket(this.url);\n        this.webSocket.onopen = (e) => this.onOpen(e)\n        this.webSocket.onmessage = (e) => this.onMessage(e)\n        this.webSocket.onclose = (e) => this.onClose(e)\n        this.webSocket.onerror = (e) => this.onError(e)\n    }\n\n    stop() {\n        if (this.webSocket) {\n            this.webSocket.close();\n            this.webSocket = void 0;\n\n            if (!this.isStop) {\n                this.listener.onStop();\n                this.isStop = true;\n            }\n        }\n    }\n\n    send(message: string) {\n        if (this.webSocket && this.isOpen) {\n            this.webSocket.send(message);\n        }\n    }\n\n    protected onOpen(_: Event) {\n        this.isOpen = true;\n        this.send(this.payload!);\n    }\n\n    protected onMessage(event: MessageEvent) {\n        this.listener.onMessage(event.data)\n    }\n\n    protected onClose(_: CloseEvent) {\n        this.isOpen = false;\n        if (!this.isStop) {\n            this.listener.onStop();\n            this.isStop = true;\n        }\n    }\n\n    protected onError(_: Event) {\n        this.isOpen = false;\n        if (!this.isStop) {\n            this.listener.onStop();\n            this.isStop = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WebSocketClient {\n    constructor(url, listener) {\n        this.isStop = false;\n        this.url = url;\n        this.webSocket = undefined;\n        this.isOpen = false;\n        this.payload = undefined;\n        this.listener = listener;\n    }\n\n    start(payload) {\n        this.payload = payload;\n        this.webSocket = new WebSocket(this.url);\n        this.webSocket.addEventListener('open', this.onOpen.bind(this));\n        this.webSocket.addEventListener('message', this.onMessage.bind(this));\n        this.webSocket.addEventListener('close', this.onClose.bind(this));\n        this.webSocket.addEventListener('error', this.onError.bind(this));\n    }\n\n    stop() {\n        this.isStop = true;\n        if (this.webSocket && this.isOpen) {\n            this.webSocket.close();\n        }\n        this.listener.onConnectionClosed();\n    }\n\n    send(message) {\n        if (this.webSocket && this.isOpen) {\n            this.webSocket.send(message);\n        }\n    }\n\n    onOpen(_) {\n        this.isOpen = true;\n        if (this.payload) {\n            this.send(this.payload);\n        }\n        this.listener.onConnectionOpened();\n    }\n\n    onMessage(event) {\n        this.listener.onMessageReceived(event.data);\n    }\n\n    onClose(_) {\n        this.isOpen = false;\n        this.listener.onConnectionClosed();\n    }\n\n    onError(_) {\n        this.isOpen = false;\n        this.listener.onErrorOccurred();\n    }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function speechApi(ssml) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        const url = 'https://<your-region>.tts.speech.microsoft.com/cognitiveservices/v1';\n        xhr.open('POST', url, true);\n        xhr.setRequestHeader('Ocp-Apim-Subscription-Key', '<your-subscription-key>');\n        xhr.setRequestHeader('Content-Type', 'application/ssml+xml');\n        xhr.setRequestHeader('X-Microsoft-OutputFormat', 'audio-16khz-32kbitrate-mono-mp3');\n        xhr.responseType = 'arraybuffer';\n\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                } else {\n                    reject(new Error(`Request failed with status ${xhr.status}: ${xhr.statusText}`));\n                }\n            }\n        };\n\n        xhr.onerror = function () {\n            reject(new Error('Network error occurred'));\n        };\n\n        xhr.send(ssml);\n    });\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a class that serves as an HTTP client for interacting with a build service API, handling different types of package-related operations with proper error handling.\n\nClass Description: The BuildService class provides methods to fetch package build statistics, exports, and export sizes from a remote build service. It uses Axios for HTTP requests and implements centralized error handling.\n\nAttributes:\n- operations: [Array] - A predefined list of available API operations, each specifying the operation type, endpoint, and corresponding method name\n\nMethods:\n- _makeHttpRequest: [Name](operation: Object, packageString: String) -> Promise<Object> - Makes an HTTP GET request to the build service with the specified operation and package string, handles the response and errors\n- _handleError: [Name](error: Error, operationType: String) -> Throws CustomError - Centralized error handling that processes different types of errors (response errors, request errors, and other errors) and throws appropriate custom errors\n- getPackageBuildStats: [Name](packageString: String) -> Promise<Object> - Retrieves build statistics for the specified package\n- getPackageExports: [Name](packageString: String) -> Promise<Object> - Retrieves all exports for the specified package\n- getPackageExportSizes: [Name](packageString: String) -> Promise<Object> - Retrieves size information for all exports of the specified package",
    "Canonical_solution": "const axios = require('axios');\nconst CustomError = require('../CustomError');\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        type: 'PACKAGE_BUILD_STATS',\n        endpoint: '/size',\n        methodName: 'getPackageStats',\n      },\n      {\n        type: 'PACKAGE_EXPORTS',\n        endpoint: '/exports',\n        methodName: 'getAllPackageExports',\n      },\n      {\n        type: 'PACKAGE_EXPORTS_SIZES',\n        endpoint: '/exports-sizes',\n        methodName: 'getPackageExportSizes',\n      },\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(\n        `${process.env.BUILD_SERVICE_ENDPOINT}${operation.endpoint}?p=${encodeURIComponent(packageString)}`\n      );\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const contents = error.response.data;\n      throw new CustomError(\n        contents.name || 'BuildError',\n        contents.originalError,\n        contents.extra\n      );\n    } else if (error.request) {\n      throw new CustomError('BuildError', {\n        operation: operationType,\n        reason: 'BUILD_SERVICE_UNREACHABLE',\n        url: error.request._currentUrl,\n      });\n    } else {\n      throw new CustomError('BuildError', error.message, {\n        operation: operationType,\n      });\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_BUILD_STATS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS_SIZES');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nclass CustomError extends Error {\n    constructor(message, type) {\n        super(message);\n        this.type = type;\n    }\n}\n\nclass BuildService {\n    constructor() {\n        this.operations = [\n            { type: 'buildStats', endpoint: '/api/build-stats', methodName: 'getPackageBuildStats' },\n            { type: 'exports', endpoint: '/api/exports', methodName: 'getPackageExports' },\n            { type: 'exportSizes', endpoint: '/api/export-sizes', methodName: 'getPackageExportSizes' }\n        ];\n    }\n\n    async _makeHttpRequest(operation, packageString) {\n        try {\n            const url = `https://buildservice.example.com${operation.endpoint}/${packageString}`;\n            const response = await axios.get(url);\n            return response.data;\n        } catch (error) {\n            this._handleError(error, operation.type);\n        }\n    }\n\n    _handleError(error, operationType) {\n        if (error.response) {\n            throw new CustomError(`Response error for ${operationType}: ${error.response.status} - ${error.response.statusText}`, 'response');\n        } else if (error.request) {\n            throw new CustomError(`Request error for ${operationType}: No response received`, 'request');\n        } else {\n            throw new CustomError(`Error for ${operationType}: ${error.message}`, 'other');\n        }\n    }\n\n    async getPackageBuildStats(packageString) {\n        const operation = this.operations.find(op => op.methodName === 'getPackageBuildStats');\n        return this._makeHttpRequest(operation, packageString);\n    }\n\n    async getPackageExports(packageString) {\n        const operation = this.operations.find(op => op.methodName === 'getPackageExports');\n        return this._makeHttpRequest(operation, packageString);\n    }\n\n    async getPackageExportSizes(packageString) {\n        const operation = this.operations.find(op => op.methodName === 'getPackageExportSizes');\n        return this._makeHttpRequest(operation, packageString);\n    }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n    const url = 'https://api.example.com/tv-channels';\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.map(channel => ({\n            lang: channel.language,\n            site_id: channel.id,\n            name: channel.title\n        }));\n    } catch (error) {\n        console.error('Error fetching TV channels:', error);\n        return [];\n    }\n}"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a WebSocket client function in JavaScript that establishes a connection to a WebSocket server, handles connection events, sends messages, and manages errors and closures.\n\nFunction Description: The function `connectWebSocket` initializes a WebSocket client connection to a specified server. It sets up event handlers for connection opening, incoming messages, and connection closing. The function also sends an initial message upon successful connection and logs all events to the console.\n\nInput: \n- Optional command line arguments:\n  - `port` (number): The port number to connect to (default: 7000).\n  - `secure` (boolean): Whether to use a secure WebSocket connection (wss) (default: false, uses ws).\n\nOutput: \n- No explicit return value. The function logs connection status, received messages, and closure events to the console.\n- Side effects: Establishes a WebSocket connection and sends/receives messages.",
    "Canonical_solution": "function connectWebSocket() {\n    var WebSocket = require('../lib/faye/websocket'),\n        port = process.argv[2] || 7000,\n        secure = process.argv[3] === 'ssl',\n        scheme = secure ? 'wss' : 'ws',\n        ws = new WebSocket.Client(scheme + '://localhost:' + port + '/');\n\n    console.log('Connecting to ' + ws.url);\n\n    ws.onopen = function(event) {\n        console.log('open');\n        ws.send('Hello, WebSocket!');\n    };\n\n    ws.onmessage = function(event) {\n        console.log('message', event.data);\n    };\n\n    ws.onclose = function(event) {\n        console.log('close', event.code, event.reason);\n    };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 89,
    "wrong_result": "function connectWebSocket(port = 7000, secure = false) {\n    const protocol = secure ? 'wss' : 'ws';\n    const socket = new WebSocket(`${protocol}://localhost:${port}`);\n\n    socket.addEventListener('open', function (event) {\n        console.log('WebSocket connection opened');\n        socket.send('Hello Server!');\n    });\n\n    socket.addEventListener('message', function (event) {\n        console.log('Message from server:', event.data);\n    });\n\n    socket.addEventListener('error', function (error) {\n        console.error('WebSocket error:', error);\n    });\n\n    socket.addEventListener('close', function (event) {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n    });\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript that establishes and manages a WebSocket connection, handles events (open, message, error, close), and provides methods for sending data and disconnecting.\n\nClass Description: The WsProvider class encapsulates WebSocket functionality, providing a clean interface for WebSocket communication. It handles connection lifecycle events and ensures proper cleanup when disconnecting.\n\nAttributes:\n#websocket: WebSocket | null - Private field storing the active WebSocket connection instance\n\nMethods:\nconstructor(endpoint: string) -> void - Initializes the WebSocket connection to the specified endpoint\n#connect(endpoint: string) -> void - Private method that establishes the WebSocket connection and sets up event handlers\n#onSocketClose(event: CloseEvent) -> void - Private method handling WebSocket close events\n#onSocketError(error: Event) -> void - Private method handling WebSocket error events\n#onSocketMessage(message: MessageEvent<string>) -> void - Private method handling incoming WebSocket messages\n#onSocketOpen() -> boolean - Private method handling WebSocket open events\nsend(body: string) -> void - Public method for sending data through the WebSocket connection\ndisconnect() -> void - Public method for properly closing the WebSocket connection",
    "Canonical_solution": "import type { Class } from '@polkadot/util/types';\nimport type { JsonRpcResponse, ProviderInterfaceCallback } from '../types.js';\nimport { EventEmitter } from 'eventemitter3';\nimport { isChildClass, isNull, isUndefined } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\n\nclass WsProvider {\n  #websocket: WebSocket | null;\n\n  constructor(endpoint: string) {\n    this.#websocket = null;\n    this.#connect(endpoint);\n  }\n\n  #connect(endpoint: string): void {\n    try {\n      this.#websocket = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket as unknown as Class<WebSocket>, WebSocket)\n        ? new WebSocket(endpoint)\n        : new WebSocket(endpoint, undefined, {});\n\n      if (this.#websocket) {\n        this.#websocket.onclose = this.#onSocketClose;\n        this.#websocket.onerror = this.#onSocketError;\n        this.#websocket.onmessage = this.#onSocketMessage;\n        this.#websocket.onopen = this.#onSocketOpen;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  #onSocketClose(event: CloseEvent): void {\n    this.#websocket = null;\n  }\n\n  #onSocketError(error: Event): void {\n    // Handle error\n  }\n\n  #onSocketMessage(message: MessageEvent<string>): void {\n    const response = JSON.parse(message.data) as JsonRpcResponse<string>;\n    // Process message\n  }\n\n  #onSocketOpen(): boolean {\n    return true;\n  }\n\n  public send(body: string): void {\n    if (!this.#websocket) {\n      throw new Error('WebSocket is not connected');\n    }\n    this.#websocket.send(body);\n  }\n\n  public disconnect(): void {\n    if (this.#websocket) {\n      this.#websocket.close(1000);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 89,
    "wrong_result": "class WsProvider {\n    #websocket = null;\n\n    constructor(endpoint) {\n        this.#connect(endpoint);\n    }\n\n    #connect(endpoint) {\n        this.#websocket = new WebSocket(endpoint);\n        this.#websocket.addEventListener('open', () => this.#onSocketOpen());\n        this.#websocket.addEventListener('message', (event) => this.#onSocketMessage(event));\n        this.#websocket.addEventListener('error', (error) => this.#onSocketError(error));\n        this.#websocket.addEventListener('close', (event) => this.#onSocketClose(event));\n    }\n\n    #onSocketClose(event) {\n        console.log('WebSocket closed:', event);\n        this.#websocket = null;\n    }\n\n    #onSocketError(error) {\n        console.error('WebSocket error:', error);\n    }\n\n    #onSocketMessage(message) {\n        console.log('WebSocket message received:', message.data);\n    }\n\n    #onSocketOpen() {\n        console.log('WebSocket connection established');\n        return true;\n    }\n\n    send(body) {\n        if (this.#websocket && this.#websocket.readyState === WebSocket.OPEN) {\n            this.#websocket.send(body);\n        } else {\n            console.error('WebSocket is not open. Ready state:', this.#websocket?.readyState);\n        }\n    }\n\n    disconnect() {\n        if (this.#websocket) {\n            this.#websocket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a WebSocket server that handles MQTT protocol messages using the Aedes broker, with event listeners for various client interactions and message handling.\n\nFunction Description: The function `createWebSocketServer` initializes and starts a WebSocket server that integrates with the Aedes MQTT broker. It sets up event handlers for client connections, errors, message publishing, subscriptions, and client disconnections. The server listens on a specified port for WebSocket connections and routes MQTT messages through the Aedes broker.\n\nInput: None (The function does not take any input parameters; port and configuration are hardcoded within the function.)\n\nOutput: None (The function does not return any value; it creates and maintains a running WebSocket server with event listeners.)",
    "Canonical_solution": "function createWebSocketServer() {\n    const aedes = require('aedes')();\n    const httpServer = require('http').createServer();\n    const WebSocket = require('ws');\n    const wsPort = 8080;\n\n    const wss = new WebSocket.Server({ server: httpServer });\n    wss.on('connection', function connection(ws) {\n        const duplex = WebSocket.createWebSocketStream(ws);\n        aedes.handle(duplex);\n    });\n\n    httpServer.listen(wsPort, () => {\n        console.log('websocket server listening on port', wsPort);\n    });\n\n    aedes.on('clientError', (client, err) => {\n        console.log('client error', client.id, err.message, err.stack);\n    });\n\n    aedes.on('connectionError', (client, err) => {\n        console.log('client error', client, err.message, err.stack);\n    });\n\n    aedes.on('publish', (packet, client) => {\n        if (packet && packet.payload) {\n            console.log('publish packet:', packet.payload.toString());\n        }\n        if (client) {\n            console.log('message from client', client.id);\n        }\n    });\n\n    aedes.on('subscribe', (subscriptions, client) => {\n        if (client) {\n            console.log('subscribe from client', subscriptions, client.id);\n        }\n    });\n\n    aedes.on('client', (client) => {\n        console.log('new client', client.id);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 90,
    "wrong_result": "const aedes = require('aedes')()\nconst ws = require('websocket-stream')\nconst http = require('http')\n\nconst PORT = 8888\n\nconst server = http.createServer()\n\nws.createServer({ server }, aedes.handle)\n\nserver.listen(PORT, () => {\n  console.log(`Aedes MQTT over WebSocket server started on port ${PORT}`)\n})\n\naedes.on('clientReady', (client) => {\n  console.log(`Client connected: ${client.id}`)\n})\n\naedes.on('clientError', (client, err) => {\n  console.error(`Client error from ${client ? client.id : 'unknown client'}: ${err.message}`)\n})\n\naedes.on('publish', (packet, client) => {\n  if (client) {\n    console.log(`Client ${client.id} published message to topic ${packet.topic}: ${packet.payload.toString()}`)\n  } else {\n    console.log(`Anonymous client published message to topic ${packet.topic}: ${packet.payload.toString()}`)\n  }\n})\n\naedes.on('subscribe', (subscriptions, client) => {\n  console.log(`Client ${client.id} subscribed to topics: ${subscriptions.map(sub => sub.topic).join(', ')}`)\n})\n\naedes.on('unsubscribe', (unsubscriptions, client) => {\n  console.log(`Client ${client.id} unsubscribed from topics: ${unsubscriptions.join(', ')}`)\n})\n\naedes.on('clientDisconnect', (client) => {\n  console.log(`Client disconnected: ${client.id}`)\n})"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor() {\n    this.requestModule = 'axios';\n  }\n\n  async httpRequest(options) {\n    const axios = require('axios');\n    const { method, url, headers, params, body } = options;\n    const config = {\n      method,\n      url,\n      headers: headers || {},\n      params: params || {},\n    };\n\n    if (method.toUpperCase() === 'POST') {\n      config.data = body;\n      if (this.isJson(body)) {\n        config.headers['Content-Type'] = 'application/json';\n        config.data = JSON.stringify(body);\n      }\n    }\n\n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  queryStr(options) {\n    return Object.keys(options)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(options[key])}`)\n      .join('&');\n  }\n\n  isJSONString(str) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  isJson(obj) {\n    return obj !== null && typeof obj === 'object' && !Array.isArray(obj);\n  }\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const https = require('https');\nconst os = require('os');\n\nfunction installTelemetry() {\n    const telemetryEnabled = process.env.TUNNELMOLE_TELEMETRY === 'true';\n    if (!telemetryEnabled) return;\n\n    const data = JSON.stringify({\n        nodeVersion: process.version,\n        platform: `${os.type()} ${os.release()}`\n    });\n\n    const options = {\n        hostname: 'example.com',\n        port: 443,\n        path: '/api/telemetry',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': data.length\n        }\n    };\n\n    const req = https.request(options, res => {\n        // Handle successful response\n    });\n\n    req.on('error', error => {\n        // Handle error\n    });\n\n    req.write(data);\n    req.end();\n}"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class SauceLabsClient {\n    constructor() {\n        this.auth = {};\n    }\n\n    setAuth(saucelabsUsername, saucelabsToken) {\n        this.auth.username = saucelabsUsername;\n        this.auth.accessToken = saucelabsToken;\n    }\n\n    get(path, callback) {\n        const url = `https://api.us-west-1.saucelabs.com/v1/${path}`;\n        fetch(url, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${btoa(`${this.auth.username}:${this.auth.accessToken}`)}`\n            }\n        })\n        .then(response => response.json())\n        .then(data => callback(null, data))\n        .catch(error => callback(error, null));\n    }\n\n    post(path, data, callback) {\n        const url = `https://api.us-west-1.saucelabs.com/v1/${path}`;\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${btoa(`${this.auth.username}:${this.auth.accessToken}`)}`\n            },\n            body: JSON.stringify(data)\n        })\n        .then(response => response.json())\n        .then(data => callback(null, data))\n        .catch(error => callback(error, null));\n    }\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Write a function that retrieves TV channel information from multiple regions, processes the data, and returns a unique list of channels based on their site IDs.\n\nFunction Description: The function `channels` makes HTTP GET requests to a TV channel API for multiple regions, collects channel data from all available pages for each region, and returns a deduplicated list of channels. It uses axios for HTTP requests and lodash for data processing.\n\nInput: None (The function uses hardcoded region IDs internally)\n\nOutput: An array of objects representing unique TV channels, where each object contains:\n- lang: string - Language code ('ru' for Russian)\n- name: string - Name of the TV channel\n- site_id: string/number - Unique identifier for the channel on the site\n\nThe output is deduplicated based on the site_id field using lodash's uniqBy function.",
    "Canonical_solution": "async function channels() {\n    const _ = require('lodash')\n    const axios = require('axios')\n\n    const regions = [5506, 1096, 1125, 285]\n    let channels = []\n    for (let region of regions) {\n        const totalPages = await getTotalPageCount(region)\n        const pages = Array.from(Array(totalPages).keys())\n        for (let page of pages) {\n            const data = await axios\n                .get('https://tv.mail.ru/ajax/channel/list/', {\n                    params: { page },\n                    headers: {\n                        cookie: `s=fver=0|geo=${region};`\n                    }\n                })\n                .then(r => r.data)\n                .catch(console.log)\n\n            data.channels.forEach(item => {\n                channels.push({\n                    lang: 'ru',\n                    name: item.name,\n                    site_id: item.id\n                })\n            })\n        }\n    }\n    return _.uniqBy(channels, 'site_id')\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const axios = require('axios');\nconst _ = require('lodash');\n\nasync function channels() {\n    const regionIds = [1, 2, 3]; // Example region IDs\n    let allChannels = [];\n\n    for (let regionId of regionIds) {\n        let page = 1;\n        let totalPages = 1;\n\n        while (page <= totalPages) {\n            const response = await axios.get(`https://api.example.com/channels?region_id=${regionId}&page=${page}`);\n            const data = response.data;\n            allChannels = allChannels.concat(data.channels);\n            totalPages = data.total_pages;\n            page++;\n        }\n    }\n\n    return _.uniqBy(allChannels, 'site_id');\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = \"https://bundlesize-store.now.sh/values\";\n    this.enabled = !!repo && !!token;\n  }\n\n  sanitizeRepoName() {\n    return this.repo.replace(/\\./g, '_');\n  }\n\n  async get() {\n    if (!this.enabled) return {};\n    const sanitizedRepo = this.sanitizeRepoName();\n    try {\n      const response = await fetch(`${this.url}/${sanitizedRepo}`);\n      if (!response.ok) throw new Error(`Failed to fetch data: ${response.statusText}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching bundle sizes:', error);\n      return {};\n    }\n  }\n\n  async set(values) {\n    if (!this.enabled) return;\n    const sanitizedRepo = this.sanitizeRepoName();\n    const payload = { repo: sanitizedRepo, sha: this.sha, values };\n    try {\n      const response = await fetch(this.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) throw new Error(`Failed to set data: ${response.statusText}`);\n    } catch (error) {\n      console.error('Error setting bundle sizes:', error);\n    }\n  }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const https = require('https');\nconst querystring = require('querystring');\n\nfunction fetchCovidData() {\n    const postData = querystring.stringify({\n        'request': JSON.stringify({\n            'service': 'getVaccinated',\n            'parameters': {}\n        })\n    });\n\n    const options = {\n        hostname: 'c19dashboard.moh.gov.il',\n        port: 443,\n        path: '/api/data',\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': Buffer.byteLength(postData)\n        }\n    };\n\n    const req = https.request(options, res => {\n        let data = '';\n\n        res.on('data', chunk => {\n            data += chunk;\n        });\n\n        res.on('end', () => {\n            try {\n                const parsedData = JSON.parse(data);\n                console.log(parsedData);\n                return parsedData;\n            } catch (error) {\n                console.error('Error parsing response:', error);\n                return null;\n            }\n        });\n    });\n\n    req.on('error', error => {\n        console.error('Request error:', error);\n        return null;\n    });\n\n    req.write(postData);\n    req.end();\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with optional path extension and error data, then triggers an activity callback based on the request's success or failure.\n\nFunction Description: The function `sendPing` is an asynchronous function that constructs a target URL by combining a base URL and an optional path, then sends an HTTP POST request using Axios. The request includes error data in the payload and a custom user-agent header. Depending on the request's outcome, it triggers a callback function (`triggerActivity`) with a success or failure indicator.\n\nInput:  \n- `url`: [String] - The base URL to which the request will be sent.  \n- `path`: [String] (optional) - An additional path segment to append to the base URL.  \n- `error`: [Any] - Data to be sent as the request payload (typically error information).  \n- `triggerActivity`: [Function] - A callback function to be executed after the request completes, receiving a boolean parameter indicating failure (true) or success (false/undefined).  \n\nOutput:  \n- None (The function's primary effect is the HTTP request and callback execution, not a direct return value).",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function sendPing(url, path, error, triggerActivity) {\n    if (url == null) return;\n    if (path) url += \"/\" + path;\n\n    await axios.post(url, error, {headers: {\"user-agent\": \"MySpeed/HealthAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\n\nasync function sendPing(url, path = '', error, triggerActivity) {\n    const targetUrl = `${url}${path}`;\n    try {\n        await axios.post(targetUrl, error, {\n            headers: {\n                'User-Agent': 'CustomUserAgent/1.0'\n            }\n        });\n        triggerActivity(false);\n    } catch (err) {\n        triggerActivity(true);\n    }\n}"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create an asynchronous function that fetches TV channel data from a specified API endpoint and processes it into a standardized format.\n\nFunction Description: The function makes an HTTP GET request to retrieve TV channel information from a remote API. It processes the response to extract relevant channel details (language, site ID, and name) and returns them in a structured array format. The function includes error handling to log any request failures.\n\nInput: None (The function uses a hardcoded API URL and parameters)\n\nOutput: An array of objects where each object represents a TV channel with the following properties:\n- lang: String - The language code for the channel (hardcoded as 'sq' in this case)\n- site_id: String - The unique identifier for the channel from the API\n- name: String - The display name of the channel",
    "Canonical_solution": "async function channels() {\n    const axios = require('axios')\n    const data = await axios\n        .get('https://www.tvim.tv/script/epg/category_channels?category=all&filter=playable')\n        .then(r => r.data)\n        .catch(console.log)\n\n    let channels = []\n    data.data.forEach(item => {\n        channels.push({\n            lang: 'sq',\n            site_id: item.epg_id,\n            name: item.name\n        })\n    })\n\n    return channels\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function fetchTVChannels() {\n    const apiUrl = 'https://api.example.com/channels';\n    const params = new URLSearchParams({ language: 'sq' });\n    const url = `${apiUrl}?${params}`;\n\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.channels.map(channel => ({\n            lang: 'sq',\n            site_id: channel.id,\n            name: channel.name\n        }));\n    } catch (error) {\n        console.error('Failed to fetch TV channels:', error);\n        return [];\n    }\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function downloadVideo(url, desc) {\n    if (!url) {\n        console.error('URL is required');\n        return;\n    }\n\n    fetch(url)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok ' + response.statusText);\n            }\n            return response.blob();\n        })\n        .then(blob => {\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            a.download = desc + '.mp4'; // Assuming the video format is mp4, adjust as necessary\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(url);\n            document.body.removeChild(a);\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n        });\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Tool {\n    constructor() {\n        this._node = null;\n        this._isSurge = typeof $httpClient !== 'undefined';\n        this._isQuanX = typeof $task !== 'undefined';\n        this.isSurge = this._isSurge;\n        this.isQuanX = this._isQuanX;\n        this.isResponse = typeof $response !== 'undefined';\n\n        if (!this._isSurge && !this._isQuanX) {\n            this._node = {\n                https: require('https'),\n                fs: require('fs')\n            };\n        }\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isSurge) {\n            $notification.post(title, subtitle, message, option);\n        } else if (this._isQuanX) {\n            $notify(title, subtitle, message, option);\n        }\n    }\n\n    write(value, key) {\n        if (this._isSurge) {\n            $persistentStore.write(value, key);\n            return true;\n        } else if (this._isQuanX) {\n            $prefs.setValueForKey(value, key);\n            return true;\n        } else {\n            try {\n                this._node.fs.writeFileSync(key, value);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n    }\n\n    read(key) {\n        if (this._isSurge) {\n            return $persistentStore.read(key);\n        } else if (this._isQuanX) {\n            return $prefs.valueForKey(key);\n        } else {\n            try {\n                return this._node.fs.readFileSync(key, 'utf8');\n            } catch (e) {\n                return null;\n            }\n        }\n    }\n\n    get(options, callback) {\n        if (typeof options === 'string') {\n            options = { url: options };\n        }\n\n        if (this._isSurge) {\n            $httpClient.get(options, (err, response, data) => {\n                callback(err, this._status(response), data);\n            });\n        } else if (this._isQuanX) {\n            $task.fetch(options).then(response => {\n                callback(null, this._status(response), response.body);\n            }, err => {\n                callback(err, null, null);\n            });\n        } else {\n            const req = this._node.https.get(options.url, res => {\n                let data = '';\n                res.on('data', chunk => {\n                    data += chunk;\n                });\n                res.on('end', () => {\n                    callback(null, this._status(res), data);\n                });\n            }).on('error', err => {\n                callback(err, null, null);\n            });\n\n            if (options.headers) {\n                req.setHeader(options.headers);\n            }\n        }\n    }\n\n    post(options, callback) {\n        if (typeof options === 'string') {\n            options = { url: options };\n        }\n\n        if (this._isSurge) {\n            $httpClient.post(options, (err, response, data) => {\n                callback(err, this._status(response), data);\n            });\n        } else if (this._isQuanX) {\n            $task.fetch(options).then(response => {\n                callback(null, this._status(response), response.body);\n            }, err => {\n                callback(err, null, null);\n            });\n        } else {\n            const req = this._node.https.request(options.url, options, res => {\n                let data = '';\n                res.on('data', chunk => {\n                    data += chunk;\n                });\n                res.on('end', () => {\n                    callback(null, this._status(res), data);\n                });\n            }).on('error', err => {\n                callback(err, null, null);\n            });\n\n            if (options.body) {\n                req.write(options.body);\n            }\n            req.end();\n        }\n    }\n\n    _status(response) {\n        return {\n            statusCode: response.statusCode,\n            headers: response.headers\n        };\n    }\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class DataManURL {\n    constructor(url, type = null, options = {}) {\n        this.url = url;\n        this._type = type;\n        this.urlOpts = options;\n        this._size = null;\n    }\n\n    getBuffer(callback) {\n        const https = require('https');\n        let data = [];\n        https.get(this.url, this.urlOpts, (res) => {\n            res.on('data', (chunk) => {\n                data.push(chunk);\n            });\n            res.on('end', () => {\n                const buffer = Buffer.concat(data);\n                this._type = res.headers['content-type'];\n                this._size = buffer.length;\n                callback(null, buffer);\n            });\n        }).on('error', (err) => {\n            callback(err);\n        });\n    }\n\n    getDataUri(callback) {\n        this.getBuffer((err, buffer) => {\n            if (err) return callback(err);\n            const base64 = buffer.toString('base64');\n            const dataUri = `data:${this._type};base64,${base64}`;\n            callback(null, dataUri);\n        });\n    }\n\n    createReadStream() {\n        const https = require('https');\n        return https.get(this.url, this.urlOpts);\n    }\n\n    size(callback) {\n        if (this._size !== null) {\n            callback(null, this._size);\n            return;\n        }\n        const https = require('https');\n        https.head(this.url, this.urlOpts, (res) => {\n            this._type = res.headers['content-type'];\n            this._size = parseInt(res.headers['content-length'], 10) || null;\n            callback(null, this._size);\n        }).on('error', (err) => {\n            callback(err);\n        });\n    }\n\n    type() {\n        return this._type;\n    }\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a function to handle form submission asynchronously using XMLHttpRequest in JavaScript. The function should prevent default form submission, process form data, send it to a server via POST request, and handle the server's response to display a thank-you message upon successful submission.\n\nFunction Description: The function `handleFormSubmit` intercepts form submission events, validates the form data (checking for honeypot fields), disables all buttons during submission, sends the form data to a specified URL via POST request, and processes the server's response to update the UI accordingly.\n\nInput: \n- `event`: [Event Object] - The form submission event that triggers this function. The event object contains the target form element and allows prevention of default submission behavior.\n\nOutput: \n- None (void) - The function does not return any value but performs side effects including:\n  - Preventing default form submission\n  - Disabling form buttons during submission\n  - Sending form data to the server\n  - Updating the UI based on server response (resetting form and showing thank-you message)",
    "Canonical_solution": "function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n\n    if (formData.honeypot) {\n        return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            form.reset();\n            var formElements = form.querySelector(\".form-elements\")\n            if (formElements) {\n                formElements.style.display = \"none\";\n            }\n            var thankYouMessage = form.querySelector(\".thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n        }\n    };\n    var encoded = Object.keys(data).map(function(k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n    }).join('&');\n    xhr.send(encoded);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function handleFormSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const formData = new FormData(form);\n    const honeypotValue = formData.get('honeypot');\n\n    if (honeypotValue) {\n        console.log('Spam detected');\n        return;\n    }\n\n    const buttons = form.querySelectorAll('button');\n    buttons.forEach(button => button.disabled = true);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', form.action, true);\n    xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n            form.reset();\n            const thankYouMessage = document.createElement('div');\n            thankYouMessage.textContent = 'Thank you for your submission!';\n            form.parentNode.insertBefore(thankYouMessage, form.nextSibling);\n        } else {\n            alert('Submission failed. Please try again.');\n        }\n        buttons.forEach(button => button.disabled = false);\n    };\n    xhr.onerror = function () {\n        alert('Submission failed. Please try again.');\n        buttons.forEach(button => button.disabled = false);\n    };\n    xhr.send(formData);\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function sendPostRequest() {\n    const url = 'https://example.com/api';\n    const data = new URLSearchParams({\n        key1: 'value1',\n        key2: 'value2'\n    });\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            credentials: 'include',\n            body: data\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const result = await response.text();\n        console.log('Response:', result);\n    } catch (error) {\n        console.error('Error sending POST request:', error);\n    }\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n    if (data === 'xhr') {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', 'https://example.com/data', true);\n        xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                sender.postMessage(xhr.responseText);\n            } else {\n                sender.postMessage('Error: XHR request failed with status ' + xhr.status);\n            }\n        };\n        xhr.onerror = function () {\n            sender.postMessage('Error: Network error occurred during XHR request');\n        };\n        xhr.send();\n    } else if (data === 'fetch') {\n        fetch('https://example.com/data')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok ' + response.statusText);\n                }\n                return response.text();\n            })\n            .then(data => sender.postMessage(data))\n            .catch(error => sender.postMessage('Error: Fetch request failed ' + error.message));\n    } else if (data === 'importScripts') {\n        try {\n            importScripts('https://example.com/script.js');\n            sender.postMessage('Script imported successfully');\n        } catch (error) {\n            sender.postMessage('Error: Failed to import script ' + error.message);\n        }\n    } else {\n        sender.postMessage('Unexpected message');\n    }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "async function loadYamlUrl(url) {\n    try {\n        const response = await fetch(url);\n        if (response.status === 200) {\n            const yamlText = await response.text();\n            yamlToForm(yamlText);\n            console.log('YAML content loaded and processed successfully:', yamlText);\n        } else {\n            console.error('Failed to load YAML content. Status:', response.status);\n        }\n    } catch (error) {\n        console.error('Error fetching YAML content:', error);\n    }\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n    constructor() {\n        this.map = {\n            'is.gd': /is\\.gd\\/[\\w]+/,\n            'goo.gl': /goo\\.gl\\/[\\w]+/,\n            'budurl.com': /budurl\\.com\\/[\\w]+/,\n            'snipurl.com': /snipurl\\.com\\/[\\w]+/\n        };\n        this.timeout = 5000;\n        this.APIs = {};\n    }\n\n    expand(args, callback) {\n        const { url, depth = 0, seen = {} } = args;\n\n        if (seen[url]) {\n            return callback({ ...args, err: new Error('Cycle detected') });\n        }\n\n        if (depth > 10) {\n            return callback({ ...args, err: new Error('Max depth exceeded') });\n        }\n\n        seen[url] = true;\n\n        fetch(url, { redirect: 'manual', method: 'HEAD' })\n            .then(response => {\n                const location = response.headers.get('location');\n                if (!location) {\n                    return callback({ ...args, url, seen, headers: response.headers, urlp: new URL(url) });\n                }\n                this.expand({ url: location, depth: depth + 1, seen }, callback);\n            })\n            .catch(err => callback({ ...args, err }));\n    }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\nclass HTTPServer {\n  constructor(port) {\n    this.app = express();\n    this.port = port;\n    this.server = null;\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.port, () => {\n        resolve(`Server started on port ${this.port}`);\n      }).on('error', (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close(() => {\n        console.log('Server stopped');\n        this.server = null;\n      });\n    }\n  }\n\n  addRoute(method, path, handler) {\n    this.app[method](path, handler);\n  }\n\n  get(path, handler) {\n    this.addRoute('get', path, handler);\n  }\n\n  post(path, handler) {\n    this.addRoute('post', path, handler);\n  }\n\n  put(path, handler) {\n    this.addRoute('put', path, handler);\n  }\n\n  delete(path, handler) {\n    this.addRoute('delete', path, handler);\n  }\n\n  patch(path, handler) {\n    this.addRoute('patch', path, handler);\n  }\n\n  options(path, handler) {\n    this.addRoute('options', path, handler);\n  }\n\n  trace(path, handler) {\n    this.addRoute('trace', path, handler);\n  }\n\n  head(path, handler) {\n    this.addRoute('head', path, handler);\n  }\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by detecting the shortening service and using the appropriate API or HTTP HEAD request to follow redirects. It handles recursive expansion with depth limiting and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening service names to their associated domains\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration including known URL shortening services and timeout\n- expand(args: [Object], callback: [Function]) -> [void] - The main method that initiates URL expansion\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to be called with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - err: [Error] - Any error encountered (optional)\n      - headers: [Object] - Response headers (optional)\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n\nThe class includes several internal API methods (isgd, googl, budurl, snipurl, generic) that handle specific URL shortening services or generic URL expansion through HTTP HEAD requests. These methods are not meant to be called directly but are used internally by the expand method.",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n    constructor() {\n        this.map = {\n            'is.gd': this.isgd,\n            'goo.gl': this.googl,\n            'budurl.com': this.budurl,\n            'snipurl.com': this.snipurl\n        };\n        this.timeout = 5000;\n        this.APIs = {\n            isgd: this.isgd,\n            googl: this.googl,\n            budurl: this.budurl,\n            snipurl: this.snipurl,\n            generic: this.generic\n        };\n    }\n\n    expand(args, callback) {\n        args.depth = args.depth || 0;\n        args.seen = args.seen || {};\n        const { url, depth, seen } = args;\n\n        if (depth > 10) {\n            return callback({ ...args, err: new Error('Max depth exceeded') });\n        }\n        if (seen[url]) {\n            return callback({ ...args, err: new Error('Cycle detected') });\n        }\n        seen[url] = true;\n\n        const domain = new URL(url).hostname;\n        const apiMethod = this.APIs[this.map[domain]] || this.APIs.generic;\n\n        apiMethod.call(this, url, (err, expandedUrl, headers) => {\n            if (err) {\n                return callback({ ...args, err });\n            }\n            if (expandedUrl === url) {\n                return callback({ ...args, url: expandedUrl, headers });\n            }\n            this.expand({ url: expandedUrl, depth: depth + 1, seen }, callback);\n        });\n    }\n\n    isgd(url, callback) {\n        this.generic(url, callback);\n    }\n\n    googl(url, callback) {\n        this.generic(url, callback);\n    }\n\n    budurl(url, callback) {\n        this.generic(url, callback);\n    }\n\n    snipurl(url, callback) {\n        this.generic(url, callback);\n    }\n\n    generic(url, callback) {\n        const http = require('http');\n        const https = require('https');\n\n        const protocol = url.startsWith('https') ? https : http;\n        const req = protocol.get(url, { method: 'HEAD', timeout: this.timeout }, (res) => {\n            const { statusCode, headers } = res;\n            if (statusCode >= 300 && statusCode < 400 && headers.location) {\n                callback(null, headers.location, headers);\n            } else {\n                callback(null, url, headers);\n            }\n        });\n\n        req.on('error', (err) => {\n            callback(err);\n        });\n\n        req.end();\n    }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\nconst zlib = require('zlib');\n\nfunction makeHttpRequest() {\n    const url = 'http://example.com';\n    const headers = {\n        'User-Agent': 'my-app',\n        'Accept-Encoding': 'gzip'\n    };\n\n    request({ url, headers }, (error, response, body) => {\n        if (error) {\n            console.error('Error making request:', error);\n            return;\n        }\n\n        if (response.headers['content-encoding'] === 'gzip') {\n            zlib.gunzip(body, (err, decoded) => {\n                if (err) {\n                    console.error('Error decompressing response:', err);\n                } else {\n                    console.log('Response Body:', decoded.toString());\n                }\n            });\n        } else {\n            console.log('Response Body:', body);\n        }\n    });\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a function to set up an Express server with session management using MongoDB as the session store, and integrate it with Next.js for server-side rendering.\n\nFunction Description: The function `setupServer` initializes an Express server with session management configured to use MongoDB for session storage. It integrates with Next.js for handling server-side rendering and routes all requests to the Next.js request handler. The server listens on a specified port and logs the root URL when ready.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Port number to listen on (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that listens on the specified port and handles requests. It logs the root URL to the console when the server is ready.)",
    "Canonical_solution": "function setupServer() {\n    const express = require('express');\n    const session = require('express-session');\n    const mongoSessionStore = require('connect-mongo');\n    const next = require('next');\n    const mongoose = require('mongoose');\n\n    const dev = process.env.NODE_ENV !== 'production';\n    const MONGO_URL = process.env.MONGO_URL_TEST;\n    const port = process.env.PORT || 8000;\n    const ROOT_URL = `http://localhost:${port}`;\n\n    const app = next({ dev });\n    const handle = app.getRequestHandler();\n\n    const server = express();\n\n    const sessionOptions = {\n        name: process.env.SESSION_NAME,\n        secret: process.env.SESSION_SECRET,\n        store: mongoSessionStore.create({\n            mongoUrl: MONGO_URL,\n            ttl: 14 * 24 * 60 * 60,\n        }),\n        resave: false,\n        saveUninitialized: false,\n        cookie: {\n            httpOnly: true,\n            maxAge: 14 * 24 * 60 * 60 * 1000,\n            domain: 'localhost',\n        },\n    };\n\n    const sessionMiddleware = session(sessionOptions);\n    server.use(sessionMiddleware);\n\n    server.get('*', (req, res) => handle(req, res));\n\n    server.listen(port, (err) => {\n        if (err) throw err;\n        console.log(`> Ready on ${ROOT_URL}`);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst next = require('next');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo');\n\nasync function setupServer() {\n  const dev = process.env.NODE_ENV !== 'production';\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n  const PORT = process.env.PORT || 8000;\n\n  await app.prepare();\n\n  const server = express();\n\n  server.use(session({\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: MongoStore.create({\n      mongoUrl: process.env.MONGO_URL_TEST,\n      collectionName: 'sessions',\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24, // 1 day\n    },\n  }));\n\n  server.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  server.listen(PORT, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on http://localhost:${PORT}`);\n  });\n}\n\nsetupServer();"
  },
  {
    "Task_id": 95,
    "Instruction": "Task Description: Create a function to set up an Express server that serves static files for a specific route.\n\nFunction Description: The function `setupServer` initializes an Express application, configures a route to serve a static HTML file, and starts the server on port 3000. It is designed to handle GET requests for the '/users' path by sending the corresponding HTML file.\n\nInput: None\n\nOutput: None (The function starts the server and logs a message to the console when the server is running.)",
    "Canonical_solution": "const express = require('express');\nconst path = require('path');\n\nfunction setupServer() {\n    const app = express();\n    \n    app.get('/users', function (req, res) {\n        res.sendFile(path.join(__dirname, 'modules/users/views/list.html'));\n    });\n\n    app.listen(3000, function () {\n        console.log('Servidor rodando em localhost:3000');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\n\nfunction setupServer() {\n    const app = express();\n    const PORT = 3000;\n\n    app.use('/users', express.static(path.join(__dirname, 'public')));\n\n    app.listen(PORT, () => {\n        console.log(`Server is running on http://localhost:${PORT}`);\n    });\n}"
  }
]